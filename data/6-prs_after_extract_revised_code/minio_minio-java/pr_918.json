{"pr_number": 918, "pr_title": "add bucket/object tagging apis", "pr_createdAt": "2020-05-02T10:47:12Z", "pr_url": "https://github.com/minio/minio-java/pull/918", "timeline": [{"oid": "cfbeb2a98be238b90948f65f0c4e97bbfed70ba2", "url": "https://github.com/minio/minio-java/commit/cfbeb2a98be238b90948f65f0c4e97bbfed70ba2", "message": "add bucket/object tagging apis", "committedDate": "2020-05-02T10:49:06Z", "type": "forcePushed"}, {"oid": "50c2dad49c343d0358133e2c1e4c27d53571341e", "url": "https://github.com/minio/minio-java/commit/50c2dad49c343d0358133e2c1e4c27d53571341e", "message": "add bucket/object tagging apis", "committedDate": "2020-05-02T15:03:47Z", "type": "forcePushed"}, {"oid": "7fea340d91176b5234cdf6e90eb3192bed8c9065", "url": "https://github.com/minio/minio-java/commit/7fea340d91176b5234cdf6e90eb3192bed8c9065", "message": "add bucket/object tagging apis", "committedDate": "2020-05-03T03:53:06Z", "type": "forcePushed"}, {"oid": "dce318dea42c3e3db67f6bd25658f8e6e36c4f7f", "url": "https://github.com/minio/minio-java/commit/dce318dea42c3e3db67f6bd25658f8e6e36c4f7f", "message": "add bucket/object tagging apis", "committedDate": "2020-05-06T08:08:18Z", "type": "forcePushed"}, {"oid": "bcfc039c3db60a20321f639124baa571bf98023d", "url": "https://github.com/minio/minio-java/commit/bcfc039c3db60a20321f639124baa571bf98023d", "message": "adapt builder pattern to bucket tagging apis", "committedDate": "2020-05-13T06:47:21Z", "type": "forcePushed"}, {"oid": "f0337167577d326fcd89959ba43e0b8a01f122d4", "url": "https://github.com/minio/minio-java/commit/f0337167577d326fcd89959ba43e0b8a01f122d4", "message": "adapt builder pattern to bucket tagging apis", "committedDate": "2020-05-14T05:31:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5MjQ0MQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r425092441", "bodyText": "IMO this PR can be reviewed once  setObjectTags uses builder pattern similar to setBucketTags", "author": "sinhaashish", "createdAt": "2020-05-14T12:20:01Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4869,6 +4857,235 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    try {\n+      Response response = executeGet(args.bucketName(), null, null, queryParamMap);\n+      try (ResponseBody body = response.body()) {\n+        return Xml.unmarshal(Tags.class, body.charStream());\n+      }\n+    } catch (ErrorResponseException e) {\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n+        throw e;\n+      }\n+    }\n+\n+    return new Tags();\n+  }\n+\n+  /**\n+   * Sets tags to a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Map<String, String> map = new HashMap<>();\n+   * map.put(\"Project\", \"Project One\");\n+   * map.put(\"User\", \"jsmith\");\n+   * minioClient.setBucketTags(\n+   *     SetBucketTagsArgs.builder().bucket(\"my-bucketname\").tags(map).build());\n+   * }</pre>\n+   *\n+   * @param args {@link SetBucketTagsArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setBucketTags(SetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+    Response response = executePut(args.bucketName(), null, null, queryParamMap, args.tags(), 0);\n+    response.body().close();\n+  }\n+\n+  /**\n+   * Deletes tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * minioClient.deleteBucketTags(DeleteBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link DeleteBucketTagsArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void deleteBucketTags(DeleteBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+    Response response = executeDelete(args.bucketName(), null, queryParamMap);\n+    response.body().close();\n+  }\n+\n+  /**\n+   * Gets tags of an object.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags = minioClient.getObjectTags(\"my-bucketname\");\n+   * }</pre>\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getObjectTags(String bucketName, String objectName)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    checkBucketName(bucketName);\n+    checkObjectName(objectName);\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n+    try (ResponseBody body = response.body()) {\n+      return Xml.unmarshal(Tags.class, body.charStream());\n+    }\n+  }\n+\n+  /**\n+   * Sets tags to an object.\n+   *\n+   * <pre>Example:{@code\n+   * Map<String, String> map = new HashMap<>();\n+   * map.put(\"Project\", \"Project One\");\n+   * map.put(\"User\", \"jsmith\");\n+   * minioClient.setObjectTags(\"my-bucketname\", Tags.newObjectTags(map));\n+   * }</pre>\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @param tags {@link Tags} to be set.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setObjectTags(String bucketName, String objectName, Tags tags)", "originalCommit": "f0337167577d326fcd89959ba43e0b8a01f122d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe15c8b4a197f7e1157e05a0f234661974673244", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex 531aba99..7708482a 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -4980,11 +4980,12 @@ public class MinioClient {\n    * Gets tags of an object.\n    *\n    * <pre>Example:{@code\n-   * Tags tags = minioClient.getObjectTags(\"my-bucketname\");\n+   * Tags tags =\n+   *     minioClient.getObjectTags(\n+   *         GetObjectTagsArgs.builder().bucket(\"my-bucketname\").object(\"my-objectname\").build());\n    * }</pre>\n    *\n-   * @param bucketName Name of the bucket.\n-   * @param objectName Object name in the bucket.\n+   * @param args {@link GetObjectTagsArgs} object.\n    * @return {@link Tags} - Tags.\n    * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n    * @throws IllegalArgumentException throws to indicate invalid argument passed.\n"}}, {"oid": "fe15c8b4a197f7e1157e05a0f234661974673244", "url": "https://github.com/minio/minio-java/commit/fe15c8b4a197f7e1157e05a0f234661974673244", "message": "adapt builder pattern to object tagging apis", "committedDate": "2020-05-16T09:33:21Z", "type": "forcePushed"}, {"oid": "cecfea1ca41b20caf1af4756a109df9a7a3cb9a0", "url": "https://github.com/minio/minio-java/commit/cecfea1ca41b20caf1af4756a109df9a7a3cb9a0", "message": "add bucket/object tagging apis", "committedDate": "2020-05-19T14:17:30Z", "type": "forcePushed"}, {"oid": "cf5c4860589053496ff2cd3fa73b2fc521acd73f", "url": "https://github.com/minio/minio-java/commit/cf5c4860589053496ff2cd3fa73b2fc521acd73f", "message": "add bucket/object tagging apis", "committedDate": "2020-05-19T16:46:47Z", "type": "forcePushed"}, {"oid": "d7025902c6188c4f2aaa76c51e8c615f3c63c672", "url": "https://github.com/minio/minio-java/commit/d7025902c6188c4f2aaa76c51e8c615f3c63c672", "message": "add bucket/object tagging apis", "committedDate": "2020-05-21T10:55:20Z", "type": "forcePushed"}, {"oid": "1173679665510e7ace023a0d378cf6befe5f790d", "url": "https://github.com/minio/minio-java/commit/1173679665510e7ace023a0d378cf6befe5f790d", "message": "add bucket/object tagging apis", "committedDate": "2020-05-21T11:09:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MzQyOA==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429053428", "bodyText": "Does this mean invalid bucket names will raise different exceptions for bucketName and srcBucketName ?", "author": "anjalshireesh", "createdAt": "2020-05-22T05:45:37Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2084,16 +2082,14 @@ public void copyObject(\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n-    }\n-\n+    checkBucketName(bucketName);\n     checkObjectName(objectName);\n-\n     checkWriteRequestSse(sse);\n \n-    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+    try {\n+      checkBucketName(srcBucketName);\n+    } catch (InvalidBucketNameException e) {\n+      throw new IllegalArgumentException(\"invalid source bucket name\");", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNTU0MQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429135541", "bodyText": "I will revert non-related changes as arg builder will take care respectively.", "author": "balamurugana", "createdAt": "2020-05-22T09:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MzQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex a1d31d9b..d600f232 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -2082,14 +2169,16 @@ public class MinioClient {\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    checkBucketName(bucketName);\n+    if ((bucketName == null) || (bucketName.isEmpty())) {\n+      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n+    }\n+\n     checkObjectName(objectName);\n+\n     checkWriteRequestSse(sse);\n \n-    try {\n-      checkBucketName(srcBucketName);\n-    } catch (InvalidBucketNameException e) {\n-      throw new IllegalArgumentException(\"invalid source bucket name\");\n+    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n+      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n     }\n \n     // Source object name is optional, if empty default to object name.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDMxNQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429054315", "bodyText": "Just like the checkBucketName, we can consider introducing a checkNullArgs also", "author": "anjalshireesh", "createdAt": "2020-05-22T05:49:01Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4OTU4NQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429189585", "bodyText": "Done", "author": "balamurugana", "createdAt": "2020-05-22T11:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex a1d31d9b..d600f232 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -5022,11 +5179,8 @@ public class MinioClient {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"tagging\", \"\");\n \n-    try {\n-      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n-      try (ResponseBody body = response.body()) {\n-        return Xml.unmarshal(Tags.class, body.charStream());\n-      }\n+    try (Response response = executeGet(args.bucket(), null, null, queryParamMap)) {\n+      return Xml.unmarshal(Tags.class, response.body().charStream());\n     } catch (ErrorResponseException e) {\n       if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n         throw e;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MzA0Ng==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429073046", "bodyText": "Maybe these two lines can go into a private method called taggingParams() which can then be directly used in the call to the executeGet() method.\nWill be useful as same code is being used in multiple methods.", "author": "anjalshireesh", "createdAt": "2020-05-22T06:51:55Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0OTMwNQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429149305", "bodyText": "I think we would need to fix this across everywhere using Multimap. It can be done in separate PR.", "author": "balamurugana", "createdAt": "2020-05-22T09:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MzA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex a1d31d9b..d600f232 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -5022,11 +5179,8 @@ public class MinioClient {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"tagging\", \"\");\n \n-    try {\n-      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n-      try (ResponseBody body = response.body()) {\n-        return Xml.unmarshal(Tags.class, body.charStream());\n-      }\n+    try (Response response = executeGet(args.bucket(), null, null, queryParamMap)) {\n+      return Xml.unmarshal(Tags.class, response.body().charStream());\n     } catch (ErrorResponseException e) {\n       if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n         throw e;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjAzMQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429082031", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Response response = executePut(args.bucket(), null, null, queryParamMap, args.tags(), 0);\n          \n          \n            \n                response.body().close();\n          \n          \n            \n                executePut(args.bucket(), null, null, queryParamMap, args.tags(), 0).body().close();\n          \n      \n    \n    \n  \n\nThe variable response doesn't seem necessary.", "author": "anjalshireesh", "createdAt": "2020-05-22T07:16:47Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    try {\n+      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n+      try (ResponseBody body = response.body()) {\n+        return Xml.unmarshal(Tags.class, body.charStream());\n+      }\n+    } catch (ErrorResponseException e) {\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n+        throw e;\n+      }\n+    }\n+\n+    return new Tags();\n+  }\n+\n+  /**\n+   * Sets tags to a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Map<String, String> map = new HashMap<>();\n+   * map.put(\"Project\", \"Project One\");\n+   * map.put(\"User\", \"jsmith\");\n+   * minioClient.setBucketTags(\n+   *     SetBucketTagsArgs.builder().bucket(\"my-bucketname\").tags(map).build());\n+   * }</pre>\n+   *\n+   * @param args {@link SetBucketTagsArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setBucketTags(SetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+    Response response = executePut(args.bucket(), null, null, queryParamMap, args.tags(), 0);\n+    response.body().close();", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NjY1MA==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429146650", "bodyText": "Done with little different", "author": "balamurugana", "createdAt": "2020-05-22T09:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex a1d31d9b..d600f232 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -5022,11 +5179,8 @@ public class MinioClient {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"tagging\", \"\");\n \n-    try {\n-      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n-      try (ResponseBody body = response.body()) {\n-        return Xml.unmarshal(Tags.class, body.charStream());\n-      }\n+    try (Response response = executeGet(args.bucket(), null, null, queryParamMap)) {\n+      return Xml.unmarshal(Tags.class, response.body().charStream());\n     } catch (ErrorResponseException e) {\n       if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n         throw e;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4Mzc5Ng==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429083796", "bodyText": "One try block and the response variable can be avoided with something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  Response response = executeGet(args.bucket(), null, null, queryParamMap);\n          \n          \n            \n                  try (ResponseBody body = response.body()) {\n          \n          \n            \n                    return Xml.unmarshal(Tags.class, body.charStream());\n          \n          \n            \n                  }\n          \n          \n            \n                try (ResponseBody body = executeGet(args.bucket(), null, null, queryParamMap).body()) {\n          \n          \n            \n                  return Xml.unmarshal(Tags.class, body.charStream());", "author": "anjalshireesh", "createdAt": "2020-05-22T07:21:22Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    try {\n+      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n+      try (ResponseBody body = response.body()) {\n+        return Xml.unmarshal(Tags.class, body.charStream());\n+      }", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NTUxMA==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429145510", "bodyText": "Done with little different", "author": "balamurugana", "createdAt": "2020-05-22T09:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4Mzc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex a1d31d9b..d600f232 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -5022,11 +5179,8 @@ public class MinioClient {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"tagging\", \"\");\n \n-    try {\n-      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n-      try (ResponseBody body = response.body()) {\n-        return Xml.unmarshal(Tags.class, body.charStream());\n-      }\n+    try (Response response = executeGet(args.bucket(), null, null, queryParamMap)) {\n+      return Xml.unmarshal(Tags.class, response.body().charStream());\n     } catch (ErrorResponseException e) {\n       if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n         throw e;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MDU2NA==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429090564", "bodyText": "Should this condition not throw an exception?", "author": "anjalshireesh", "createdAt": "2020-05-22T07:37:59Z", "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MjU1Ng==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429152556", "bodyText": "Setting null tags is fine which is meant to remove all existing tags. In this case <Tagging /> XML is sent.", "author": "balamurugana", "createdAt": "2020-05-22T09:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MDU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/api/src/main/java/io/minio/messages/Tags.java b/api/src/main/java/io/minio/messages/Tags.java\nindex afd186bd..882a5640 100644\n--- a/api/src/main/java/io/minio/messages/Tags.java\n+++ b/api/src/main/java/io/minio/messages/Tags.java\n\n@@ -64,14 +64,15 @@ public class Tags {\n       return;\n     }\n \n-    if (isObject) {\n-      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n-        throw new IllegalArgumentException(\n-            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n-      }\n-    } else if (tags.size() > MAX_TAG_COUNT) {\n+    int limit = isObject ? MAX_OBJECT_TAG_COUNT : MAX_TAG_COUNT;\n+    if (tags.size() > limit) {\n       throw new IllegalArgumentException(\n-          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+          \"too many \"\n+              + (isObject ? \"object\" : \"bucket\")\n+              + \" tags; allowed = \"\n+              + limit\n+              + \", found = \"\n+              + tags.size());\n     }\n \n     for (Map.Entry<String, String> entry : tags.entrySet()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MjY3Mg==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429092672", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (isObject) {\n          \n          \n            \n                  if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n          \n          \n            \n                    throw new IllegalArgumentException(\n          \n          \n            \n                        \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n          \n          \n            \n                  }\n          \n          \n            \n                } else if (tags.size() > MAX_TAG_COUNT) {\n          \n          \n            \n                  throw new IllegalArgumentException(\n          \n          \n            \n                      \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n          \n          \n            \n                }\n          \n          \n            \n                String type = isObject ? \"object\" : \"bucket\"\n          \n          \n            \n                int limit = isObject ? MAX_OBJECT_TAG_COUNT : MAX_TAG_COUNT\n          \n          \n            \n                if(tags.size() > limit) {\n          \n          \n            \n                  throw new IllegalArgumentException(\n          \n          \n            \n                    \"too many \" + type + \" tags; allowed = \" + limit + \", found = \" + tags.size());\n          \n          \n            \n                }", "author": "anjalshireesh", "createdAt": "2020-05-22T07:42:48Z", "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }\n+\n+    if (isObject) {\n+      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n+        throw new IllegalArgumentException(\n+            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n+      }\n+    } else if (tags.size() > MAX_TAG_COUNT) {\n+      throw new IllegalArgumentException(\n+          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+    }", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTE1Ng==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429155156", "bodyText": "Done", "author": "balamurugana", "createdAt": "2020-05-22T09:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MjY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/api/src/main/java/io/minio/messages/Tags.java b/api/src/main/java/io/minio/messages/Tags.java\nindex afd186bd..882a5640 100644\n--- a/api/src/main/java/io/minio/messages/Tags.java\n+++ b/api/src/main/java/io/minio/messages/Tags.java\n\n@@ -64,14 +64,15 @@ public class Tags {\n       return;\n     }\n \n-    if (isObject) {\n-      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n-        throw new IllegalArgumentException(\n-            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n-      }\n-    } else if (tags.size() > MAX_TAG_COUNT) {\n+    int limit = isObject ? MAX_OBJECT_TAG_COUNT : MAX_TAG_COUNT;\n+    if (tags.size() > limit) {\n       throw new IllegalArgumentException(\n-          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+          \"too many \"\n+              + (isObject ? \"object\" : \"bucket\")\n+              + \" tags; allowed = \"\n+              + limit\n+              + \", found = \"\n+              + tags.size());\n     }\n \n     for (Map.Entry<String, String> entry : tags.entrySet()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NDMyNw==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429094327", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (tags == null) {\n          \n          \n            \n                  return Collections.unmodifiableMap(new HashMap<>());\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                return Collections.unmodifiableMap(tags);\n          \n          \n            \n              }\n          \n          \n            \n                return Collections.unmodifiableMap(tags == null ? new HashMap<>() : tags)", "author": "anjalshireesh", "createdAt": "2020-05-22T07:46:38Z", "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }\n+\n+    if (isObject) {\n+      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n+        throw new IllegalArgumentException(\n+            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n+      }\n+    } else if (tags.size() > MAX_TAG_COUNT) {\n+      throw new IllegalArgumentException(\n+          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+    }\n+\n+    for (Map.Entry<String, String> entry : tags.entrySet()) {\n+      String key = entry.getKey();\n+      if (key.length() == 0 || key.length() > MAX_KEY_LENGTH || key.contains(\"&\")) {\n+        throw new IllegalArgumentException(\"invalid tag key '\" + key + \"'\");\n+      }\n+\n+      String value = entry.getValue();\n+      if (value.length() > MAX_VALUE_LENGTH || value.contains(\"&\")) {\n+        throw new IllegalArgumentException(\"invalid tag value '\" + value + \"'\");\n+      }\n+    }\n+\n+    this.tags = Collections.unmodifiableMap(tags);\n+  }\n+\n+  /** Creates new bucket tags. */\n+  public static Tags newBucketTags(Map<String, String> tags) throws IllegalArgumentException {\n+    return new Tags(tags, false);\n+  }\n+\n+  /** Creates new object tags. */\n+  public static Tags newObjectTags(Map<String, String> tags) throws IllegalArgumentException {\n+    return new Tags(tags, true);\n+  }\n+\n+  /** Returns tags. */\n+  public Map<String, String> get() {\n+    if (tags == null) {\n+      return Collections.unmodifiableMap(new HashMap<>());\n+    }\n+\n+    return Collections.unmodifiableMap(tags);\n+  }", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NjA3NA==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429156074", "bodyText": "Done", "author": "balamurugana", "createdAt": "2020-05-22T09:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NDMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/api/src/main/java/io/minio/messages/Tags.java b/api/src/main/java/io/minio/messages/Tags.java\nindex afd186bd..882a5640 100644\n--- a/api/src/main/java/io/minio/messages/Tags.java\n+++ b/api/src/main/java/io/minio/messages/Tags.java\n\n@@ -64,14 +64,15 @@ public class Tags {\n       return;\n     }\n \n-    if (isObject) {\n-      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n-        throw new IllegalArgumentException(\n-            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n-      }\n-    } else if (tags.size() > MAX_TAG_COUNT) {\n+    int limit = isObject ? MAX_OBJECT_TAG_COUNT : MAX_TAG_COUNT;\n+    if (tags.size() > limit) {\n       throw new IllegalArgumentException(\n-          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+          \"too many \"\n+              + (isObject ? \"object\" : \"bucket\")\n+              + \" tags; allowed = \"\n+              + limit\n+              + \", found = \"\n+              + tags.size());\n     }\n \n     for (Map.Entry<String, String> entry : tags.entrySet()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNTcxOQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429115719", "bodyText": "Better to have two separate catch blocks - one for the specific ErrorResponseException and the other for the generic Exception\nSince the part of ignoring NOT_IMPLEMENTED is used multiple times, the whole logic can be implemented in a common method, to look something like ignoreNotImplemented(exp, \"setBucketTags(SetBucketTagsArgs args)\", startTime);", "author": "anjalshireesh", "createdAt": "2020-05-22T08:33:21Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4242,6 +4249,308 @@ public static void selectObjectContent_test1() throws Exception {\n     }\n   }\n \n+  /** Test: setBucketTags(SetBucketTagsArgs args). */\n+  public static void setBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setBucketTags(SetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        mintSuccessLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setBucketTags(SetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4Njk4MQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429186981", "bodyText": "I avoided that for repetition of code\n\n    } catch (ErrorResponseException e) {\n      // Ignore NotImplemented error\n      if (e.errorResponse().errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n        mintIgnoredLog(\"deleteObjectTags(String bucketName)\", null, startTime);\n      } else {\n        mintFailedLog(\n            \"deleteObjectTags(String bucketName)\",\n            null,\n            startTime,\n            null,\n            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n        throw e;\n      }\n    } catch (Exception e) {\n        mintFailedLog(\n            \"deleteObjectTags(String bucketName)\",\n            null,\n            startTime,\n            null,\n            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n        throw e;\n    }\n\nThis problem is there across all tests. We would need to find a better way to do that and fix everywhere. I am limiting the scope of this PR.", "author": "balamurugana", "createdAt": "2020-05-22T11:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNzU3Nw==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429227577", "bodyText": "In that case, I would suggest simplifying the code as follows:\n\n    } catch (Exception e) {\n      if (e instanceof ErrorResponseException) {\n        if (((ErrorResponseException) e).errorResponse().errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n          mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n          return;\n        }\n      }\n      mintFailedLog(\n          \"setBucketTags(SetBucketTagsArgs args)\",\n          null,\n          startTime,\n          null,\n          e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n      throw e;\n    }\n\nSince this code is repeated many times in this PR itself, I suggest to create a method and use it only in these places as of now, thus not increasing the scope of the PR. Using the same (or a similar) method in all other places can be done in a separate PR.", "author": "anjalshireesh", "createdAt": "2020-05-22T12:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4MzI1OQ==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429283259", "bodyText": "done", "author": "balamurugana", "createdAt": "2020-05-22T14:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNTcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 833e8aba..73a45b0f 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -4245,7 +4257,7 @@ public class FunctionalTest {\n       if (responseStream != null) {\n         responseStream.close();\n       }\n-      client.removeObject(bucketName, objectName);\n+      client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMzMxMg==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429123312", "bodyText": "Maybe we should do one getBucketTags after the delete and verify that the tags have indeed got deleted?", "author": "anjalshireesh", "createdAt": "2020-05-22T08:49:26Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4242,6 +4249,308 @@ public static void selectObjectContent_test1() throws Exception {\n     }\n   }\n \n+  /** Test: setBucketTags(SetBucketTagsArgs args). */\n+  public static void setBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setBucketTags(SetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        mintSuccessLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setBucketTags(SetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getBucketTags(GetBucketTagsArgs args). */\n+  public static void getBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getBucketTags(GetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        Tags tags = client.getBucketTags(GetBucketTagsArgs.builder().bucket(bucketName).build());\n+        if (!map.equals(tags.get())) {\n+          throw new Exception(\"expected: \" + map + \", got: \" + tags.get());\n+        }\n+\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        tags = client.getBucketTags(GetBucketTagsArgs.builder().bucket(bucketName).build());\n+        if (!map.equals(tags.get())) {\n+          throw new Exception(\"expected: \" + map + \", got: \" + tags.get());\n+        }\n+        mintSuccessLog(\"getBucketTags(GetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"getBucketTags(GetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"getBucketTags(GetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: deleteBucketTags(DeleteBucketTagsArgs args). */\n+  public static void deleteBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: deleteBucketTags(DeleteBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        // Delete should succeed.\n+        client.deleteBucketTags(DeleteBucketTagsArgs.builder().bucket(bucketName).build());\n+\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        client.deleteBucketTags(DeleteBucketTagsArgs.builder().bucket(bucketName).build());\n+        mintSuccessLog(\"deleteBucketTags(DeleteBucketTagsArgs args)\", null, startTime);", "originalCommit": "1173679665510e7ace023a0d378cf6befe5f790d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MTAxNA==", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429171014", "bodyText": "Done", "author": "balamurugana", "createdAt": "2020-05-22T10:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMzMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 833e8aba..73a45b0f 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -4245,7 +4257,7 @@ public class FunctionalTest {\n       if (responseStream != null) {\n         responseStream.close();\n       }\n-      client.removeObject(bucketName, objectName);\n+      client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n     }\n   }\n \n"}}, {"oid": "25bfae9d9d4c8632256883c16f143a1b50133c7d", "url": "https://github.com/minio/minio-java/commit/25bfae9d9d4c8632256883c16f143a1b50133c7d", "message": "add bucket/object tagging apis", "committedDate": "2020-05-22T10:02:10Z", "type": "forcePushed"}, {"oid": "467757d8eb4b24289e6eab15934c0d87839ee421", "url": "https://github.com/minio/minio-java/commit/467757d8eb4b24289e6eab15934c0d87839ee421", "message": "add bucket/object tagging apis", "committedDate": "2020-05-22T11:13:32Z", "type": "forcePushed"}, {"oid": "bb3068292990b0114666b93b49766c20b438bc4a", "url": "https://github.com/minio/minio-java/commit/bb3068292990b0114666b93b49766c20b438bc4a", "message": "add bucket/object tagging apis", "committedDate": "2020-05-22T11:19:56Z", "type": "forcePushed"}, {"oid": "a504558efed9341f5a3664db114d7cb8154a022a", "url": "https://github.com/minio/minio-java/commit/a504558efed9341f5a3664db114d7cb8154a022a", "message": "add bucket/object tagging apis", "committedDate": "2020-05-22T14:31:40Z", "type": "forcePushed"}, {"oid": "8acdfb68d0b09f86fb8aab84cd4fd00d139ae64b", "url": "https://github.com/minio/minio-java/commit/8acdfb68d0b09f86fb8aab84cd4fd00d139ae64b", "message": "add bucket/object tagging apis", "committedDate": "2020-05-26T08:53:33Z", "type": "commit"}, {"oid": "8acdfb68d0b09f86fb8aab84cd4fd00d139ae64b", "url": "https://github.com/minio/minio-java/commit/8acdfb68d0b09f86fb8aab84cd4fd00d139ae64b", "message": "add bucket/object tagging apis", "committedDate": "2020-05-26T08:53:33Z", "type": "forcePushed"}]}