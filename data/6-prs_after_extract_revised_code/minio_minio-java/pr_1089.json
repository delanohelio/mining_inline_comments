{"pr_number": 1089, "pr_title": "Refactor MinioProperties class and fix os name in user-agent", "pr_createdAt": "2020-10-28T07:11:36Z", "pr_url": "https://github.com/minio/minio-java/pull/1089", "timeline": [{"oid": "fcbc42f8a48844c45f1503c586e8486e4267e2d2", "url": "https://github.com/minio/minio-java/commit/fcbc42f8a48844c45f1503c586e8486e4267e2d2", "message": "Use os name system property", "committedDate": "2020-10-28T07:06:13Z", "type": "commit"}, {"oid": "cdce56bd059f0d60f4176f6153f683d41c7e90d8", "url": "https://github.com/minio/minio-java/commit/cdce56bd059f0d60f4176f6153f683d41c7e90d8", "message": "Try to find the correct manifest and load the version info", "committedDate": "2020-10-28T07:06:26Z", "type": "commit"}, {"oid": "658af0b3e59e7d2c12879e126e5d2394f298ee4a", "url": "https://github.com/minio/minio-java/commit/658af0b3e59e7d2c12879e126e5d2394f298ee4a", "message": "Fix formatting", "committedDate": "2020-10-28T07:20:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzNzc3NA==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513237774", "bodyText": "\ud83d\udc4d", "author": "balamurugana", "createdAt": "2020-10-28T07:50:28Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -194,7 +194,7 @@\n   private static final int DEFAULT_EXPIRY_TIME = 7 * 24 * 3600;\n   private static final String DEFAULT_USER_AGENT =\n       \"MinIO (\"\n-          + System.getProperty(\"os.arch\")\n+          + System.getProperty(\"os.name\")", "originalCommit": "658af0b3e59e7d2c12879e126e5d2394f298ee4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0MDAxNw==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513240017", "bodyText": "Why do we need this? or what exactly the problem in current approach?", "author": "balamurugana", "createdAt": "2020-10-28T07:54:57Z", "path": "api/src/main/java/io/minio/MinioProperties.java", "diffHunk": "@@ -62,14 +70,27 @@ private void setDevelopmentVersion() {\n   private void setMinioClientJavaVersion(ClassLoader classLoader) throws IOException {\n     if (classLoader != null) {\n       Enumeration<URL> resources = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n+      boolean minioManifestFound = false;\n+      boolean minioVersionFound = false;\n       while (resources.hasMoreElements()) {\n-        Manifest manifest = new Manifest(resources.nextElement().openStream());\n-        for (Object k : manifest.getMainAttributes().keySet()) {\n-          String versionString = \"Implementation-Version\";\n-          if (k.toString().equals(versionString)) {\n-            version.set(manifest.getMainAttributes().getValue((Attributes.Name) k));\n+        try (InputStream is = resources.nextElement().openStream()) {\n+          Manifest manifest = new Manifest(is);\n+          for (Map.Entry<Object, Object> entry : manifest.getMainAttributes().entrySet()) {\n+            if (entry.getKey().toString().equals(META_INF_ATTRIB_IMPLEMENTATION_TITLE)\n+                && entry.getValue().toString().equals(META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE)) {\n+              minioManifestFound = true;", "originalCommit": "658af0b3e59e7d2c12879e126e5d2394f298ee4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1MTQ2OA==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513251468", "bodyText": "When minio is included with other libraries - via maven/gradle - this manifest resources will list all the manifests from the classpath - We specifically need the manifest from the minio jar - so we can get the version number correctly.\nAn example is added here https://github.com/vinu/minio-check (using minio with spring boot)\nI added 7.1.4 of minio library, so I was expecting the User-agent to have this version, but it was like this User-Agent: MinIO (x86_64; x86_64) minio-java/1.7.30\nThis is because the current implementation lists all manifests from the classpath, and just takes the Implementation-Version so the version info is overridden by some other manifest.", "author": "vinu", "createdAt": "2020-10-28T08:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0MDAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NDU3Mw==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513264573", "bodyText": "\ud83d\udc4d\nSimplify everything like below\ndiff --git a/api/src/main/java/io/minio/MinioProperties.java b/api/src/main/java/io/minio/MinioProperties.java\nindex ad6f4c9b..72bc9e26 100644\n--- a/api/src/main/java/io/minio/MinioProperties.java\n+++ b/api/src/main/java/io/minio/MinioProperties.java\n@@ -20,7 +20,6 @@ import java.io.IOException;\n import java.net.URL;\n import java.util.Enumeration;\n import java.util.concurrent.atomic.AtomicReference;\n-import java.util.jar.Attributes;\n import java.util.jar.Manifest;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -28,49 +27,52 @@ import java.util.logging.Logger;\n /** Identifies and stores version information of minio-java package at run time. */\n enum MinioProperties {\n   INSTANCE;\n-\n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n-\n   private final AtomicReference<String> version = new AtomicReference<>(null);\n \n-  public String getVersion() {\n-    String result = version.get();\n-    if (result == null) {\n-      synchronized (INSTANCE) {\n-        if (version.get() == null) {\n-          try {\n-            ClassLoader classLoader = getClass().getClassLoader();\n-            setMinioClientJavaVersion(classLoader);\n-            setDevelopmentVersion();\n-          } catch (IOException e) {\n-            LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n-            version.set(\"unknown\");\n-          }\n-          result = version.get();\n-        }\n-      }\n+  private synchronized void setVersion() {\n+    if (version.get() != null) {\n+      return;\n     }\n-    return result;\n-  }\n \n-  private void setDevelopmentVersion() {\n-    if (version.get() == null) {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    if (classLoader == null) {\n       version.set(\"dev\");\n+      return;\n     }\n-  }\n \n-  private void setMinioClientJavaVersion(ClassLoader classLoader) throws IOException {\n-    if (classLoader != null) {\n-      Enumeration<URL> resources = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n-      while (resources.hasMoreElements()) {\n-        Manifest manifest = new Manifest(resources.nextElement().openStream());\n-        for (Object k : manifest.getMainAttributes().keySet()) {\n-          String versionString = \"Implementation-Version\";\n-          if (k.toString().equals(versionString)) {\n-            version.set(manifest.getMainAttributes().getValue((Attributes.Name) k));\n+    Enumeration<URL> resources = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n+    while (resources.hasMoreElements()) {\n+      try (InputStream is = resources.nextElement().openStream()) {\n+        Manifest manifest = new Manifest(is);\n+        boolean minioManifestFound = false;\n+        for (Map.Entry<Object, Object> entry : manifest.getMainAttributes().entrySet()) {\n+          String key = entry.getKey().toString();\n+          String value = entry.getValue().toString();\n+          if (minioManifestFound && key.equals(\"Implementation-Version\")) {\n+            version.set(value);\n+            return;\n           }\n+\n+          minioManifestFound = value.equals(\"minio\") && key.equals(\"Implementation-Title\");\n         }\n+      } catch (IOException e) {\n+        LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n+        version.set(\"unknown\");\n+        return;\n       }\n     }\n+\n+    version.set(\"dev\");\n+  }\n+\n+  public String getVersion() {\n+    String result = version.get();\n+    if (result != null) {\n+      return result;\n+    }\n+\n+    setVersion();\n+    return version.get();\n   }\n }", "author": "balamurugana", "createdAt": "2020-10-28T08:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0MDAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwMTYwNw==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513301607", "bodyText": "Please check the latest push, hope that cleans things :)", "author": "vinu", "createdAt": "2020-10-28T09:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0MDAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "620252cf5fac24f8422fe2634860e786394f613d", "chunk": "diff --git a/api/src/main/java/io/minio/MinioProperties.java b/api/src/main/java/io/minio/MinioProperties.java\nindex 6b26137e..5a75e9b6 100644\n--- a/api/src/main/java/io/minio/MinioProperties.java\n+++ b/api/src/main/java/io/minio/MinioProperties.java\n\n@@ -43,55 +43,46 @@ enum MinioProperties {\n \n   public String getVersion() {\n     String result = version.get();\n-    if (result == null) {\n-      synchronized (INSTANCE) {\n-        if (version.get() == null) {\n-          try {\n-            ClassLoader classLoader = getClass().getClassLoader();\n-            setMinioClientJavaVersion(classLoader);\n-            setDevelopmentVersion();\n-          } catch (IOException e) {\n-            LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n-            version.set(\"unknown\");\n-          }\n-          result = version.get();\n-        }\n-      }\n+    if (result != null) {\n+      return result;\n     }\n-    return result;\n+    setVersion();\n+    return version.get();\n   }\n \n-  private void setDevelopmentVersion() {\n-    if (version.get() == null) {\n+  private synchronized void setVersion() {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    if (classLoader == null) {\n       version.set(\"dev\");\n+      return;\n     }\n-  }\n \n-  private void setMinioClientJavaVersion(ClassLoader classLoader) throws IOException {\n-    if (classLoader != null) {\n+    try {\n       Enumeration<URL> resources = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n-      boolean minioManifestFound = false;\n-      boolean minioVersionFound = false;\n       while (resources.hasMoreElements()) {\n         try (InputStream is = resources.nextElement().openStream()) {\n           Manifest manifest = new Manifest(is);\n+          boolean minioManifestFound;\n           for (Map.Entry<Object, Object> entry : manifest.getMainAttributes().entrySet()) {\n-            if (entry.getKey().toString().equals(META_INF_ATTRIB_IMPLEMENTATION_TITLE)\n-                && entry.getValue().toString().equals(META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE)) {\n-              minioManifestFound = true;\n-            }\n-            if (minioManifestFound\n-                && entry.getKey().toString().equals(META_INF_ATTRIB_IMPLEMENTATION_VERSION)) {\n-              version.set(entry.getValue().toString());\n-              minioVersionFound = true;\n-              break;\n+            String key = entry.getKey().toString();\n+            String value = entry.getValue().toString();\n+            minioManifestFound =\n+                key.equals(META_INF_ATTRIB_IMPLEMENTATION_TITLE)\n+                    && value.equals(META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE);\n+\n+            if (minioManifestFound) {\n+              version.set(\n+                  manifest.getMainAttributes().getValue(META_INF_ATTRIB_IMPLEMENTATION_VERSION));\n+              return;\n             }\n           }\n         }\n-        if (minioVersionFound) {\n-          break;\n-        }\n       }\n+    } catch (IOException e) {\n+      LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n+      version.set(\"unknown\");\n+      return;\n     }\n+    version.set(\"dev\");\n   }\n }\n"}}, {"oid": "620252cf5fac24f8422fe2634860e786394f613d", "url": "https://github.com/minio/minio-java/commit/620252cf5fac24f8422fe2634860e786394f613d", "message": "Clean the code a bit", "committedDate": "2020-10-28T09:28:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwMTkyNg==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513301926", "bodyText": "Use these values directly than having constants.", "author": "balamurugana", "createdAt": "2020-10-28T09:39:31Z", "path": "api/src/main/java/io/minio/MinioProperties.java", "diffHunk": "@@ -31,46 +32,57 @@\n \n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n \n+  // These attributes are checked from the manifests in classpath.\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE = \"Implementation-Title\";\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_VERSION = \"Implementation-Version\";\n+\n+  // this is set from gradle\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE = \"minio\";", "originalCommit": "620252cf5fac24f8422fe2634860e786394f613d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2dbee575259a35b5c56c5064394c6c06c280400", "chunk": "diff --git a/api/src/main/java/io/minio/MinioProperties.java b/api/src/main/java/io/minio/MinioProperties.java\nindex 5a75e9b6..42414967 100644\n--- a/api/src/main/java/io/minio/MinioProperties.java\n+++ b/api/src/main/java/io/minio/MinioProperties.java\n\n@@ -32,13 +31,6 @@ enum MinioProperties {\n \n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n \n-  // These attributes are checked from the manifests in classpath.\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE = \"Implementation-Title\";\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_VERSION = \"Implementation-Version\";\n-\n-  // this is set from gradle\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE = \"minio\";\n-\n   private final AtomicReference<String> version = new AtomicReference<>(null);\n \n   public String getVersion() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwMjk1MQ==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513302951", "bodyText": "Do no-op if version is already set in another thread.\nif (version.get() != null) {\n   return;\n}", "author": "balamurugana", "createdAt": "2020-10-28T09:41:00Z", "path": "api/src/main/java/io/minio/MinioProperties.java", "diffHunk": "@@ -31,46 +32,57 @@\n \n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n \n+  // These attributes are checked from the manifests in classpath.\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE = \"Implementation-Title\";\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_VERSION = \"Implementation-Version\";\n+\n+  // this is set from gradle\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE = \"minio\";\n+\n   private final AtomicReference<String> version = new AtomicReference<>(null);\n \n   public String getVersion() {\n     String result = version.get();\n-    if (result == null) {\n-      synchronized (INSTANCE) {\n-        if (version.get() == null) {\n-          try {\n-            ClassLoader classLoader = getClass().getClassLoader();\n-            setMinioClientJavaVersion(classLoader);\n-            setDevelopmentVersion();\n-          } catch (IOException e) {\n-            LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n-            version.set(\"unknown\");\n-          }\n-          result = version.get();\n-        }\n-      }\n+    if (result != null) {\n+      return result;\n     }\n-    return result;\n+    setVersion();\n+    return version.get();\n   }\n \n-  private void setDevelopmentVersion() {\n-    if (version.get() == null) {\n+  private synchronized void setVersion() {", "originalCommit": "620252cf5fac24f8422fe2634860e786394f613d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2dbee575259a35b5c56c5064394c6c06c280400", "chunk": "diff --git a/api/src/main/java/io/minio/MinioProperties.java b/api/src/main/java/io/minio/MinioProperties.java\nindex 5a75e9b6..42414967 100644\n--- a/api/src/main/java/io/minio/MinioProperties.java\n+++ b/api/src/main/java/io/minio/MinioProperties.java\n\n@@ -32,13 +31,6 @@ enum MinioProperties {\n \n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n \n-  // These attributes are checked from the manifests in classpath.\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE = \"Implementation-Title\";\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_VERSION = \"Implementation-Version\";\n-\n-  // this is set from gradle\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE = \"minio\";\n-\n   private final AtomicReference<String> version = new AtomicReference<>(null);\n \n   public String getVersion() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwMzc4Mg==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513303782", "bodyText": "Set dev as default value i.e. move above this line and remove setting it later.", "author": "balamurugana", "createdAt": "2020-10-28T09:42:13Z", "path": "api/src/main/java/io/minio/MinioProperties.java", "diffHunk": "@@ -31,46 +32,57 @@\n \n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n \n+  // These attributes are checked from the manifests in classpath.\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE = \"Implementation-Title\";\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_VERSION = \"Implementation-Version\";\n+\n+  // this is set from gradle\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE = \"minio\";\n+\n   private final AtomicReference<String> version = new AtomicReference<>(null);\n \n   public String getVersion() {\n     String result = version.get();\n-    if (result == null) {\n-      synchronized (INSTANCE) {\n-        if (version.get() == null) {\n-          try {\n-            ClassLoader classLoader = getClass().getClassLoader();\n-            setMinioClientJavaVersion(classLoader);\n-            setDevelopmentVersion();\n-          } catch (IOException e) {\n-            LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n-            version.set(\"unknown\");\n-          }\n-          result = version.get();\n-        }\n-      }\n+    if (result != null) {\n+      return result;\n     }\n-    return result;\n+    setVersion();\n+    return version.get();\n   }\n \n-  private void setDevelopmentVersion() {\n-    if (version.get() == null) {\n+  private synchronized void setVersion() {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    if (classLoader == null) {\n       version.set(\"dev\");", "originalCommit": "620252cf5fac24f8422fe2634860e786394f613d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2dbee575259a35b5c56c5064394c6c06c280400", "chunk": "diff --git a/api/src/main/java/io/minio/MinioProperties.java b/api/src/main/java/io/minio/MinioProperties.java\nindex 5a75e9b6..42414967 100644\n--- a/api/src/main/java/io/minio/MinioProperties.java\n+++ b/api/src/main/java/io/minio/MinioProperties.java\n\n@@ -32,13 +31,6 @@ enum MinioProperties {\n \n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n \n-  // These attributes are checked from the manifests in classpath.\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE = \"Implementation-Title\";\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_VERSION = \"Implementation-Version\";\n-\n-  // this is set from gradle\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE = \"minio\";\n-\n   private final AtomicReference<String> version = new AtomicReference<>(null);\n \n   public String getVersion() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwNTc5MA==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513305790", "bodyText": "This is not going to work. You are resetting the value on every iteration.", "author": "balamurugana", "createdAt": "2020-10-28T09:45:16Z", "path": "api/src/main/java/io/minio/MinioProperties.java", "diffHunk": "@@ -31,46 +32,57 @@\n \n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n \n+  // These attributes are checked from the manifests in classpath.\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE = \"Implementation-Title\";\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_VERSION = \"Implementation-Version\";\n+\n+  // this is set from gradle\n+  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE = \"minio\";\n+\n   private final AtomicReference<String> version = new AtomicReference<>(null);\n \n   public String getVersion() {\n     String result = version.get();\n-    if (result == null) {\n-      synchronized (INSTANCE) {\n-        if (version.get() == null) {\n-          try {\n-            ClassLoader classLoader = getClass().getClassLoader();\n-            setMinioClientJavaVersion(classLoader);\n-            setDevelopmentVersion();\n-          } catch (IOException e) {\n-            LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n-            version.set(\"unknown\");\n-          }\n-          result = version.get();\n-        }\n-      }\n+    if (result != null) {\n+      return result;\n     }\n-    return result;\n+    setVersion();\n+    return version.get();\n   }\n \n-  private void setDevelopmentVersion() {\n-    if (version.get() == null) {\n+  private synchronized void setVersion() {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    if (classLoader == null) {\n       version.set(\"dev\");\n+      return;\n     }\n-  }\n \n-  private void setMinioClientJavaVersion(ClassLoader classLoader) throws IOException {\n-    if (classLoader != null) {\n+    try {\n       Enumeration<URL> resources = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n       while (resources.hasMoreElements()) {\n-        Manifest manifest = new Manifest(resources.nextElement().openStream());\n-        for (Object k : manifest.getMainAttributes().keySet()) {\n-          String versionString = \"Implementation-Version\";\n-          if (k.toString().equals(versionString)) {\n-            version.set(manifest.getMainAttributes().getValue((Attributes.Name) k));\n+        try (InputStream is = resources.nextElement().openStream()) {\n+          Manifest manifest = new Manifest(is);\n+          boolean minioManifestFound;\n+          for (Map.Entry<Object, Object> entry : manifest.getMainAttributes().entrySet()) {\n+            String key = entry.getKey().toString();\n+            String value = entry.getValue().toString();\n+            minioManifestFound =", "originalCommit": "620252cf5fac24f8422fe2634860e786394f613d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxMzQ3MQ==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513313471", "bodyText": "Actually we need only below in the for\nif (entry.getKey().toString().equals(\"Implementation-Title\") && entry.getValue().toString().equals(\"minio\")) {\n  version.set(manifest.getMainAttributes().getValue(\"Implementation-Version\"));\n  return;\n}", "author": "balamurugana", "createdAt": "2020-10-28T09:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwNTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNDA1OQ==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513324059", "bodyText": "Got rid of the for, we can directly pull in the values from the attributes and check", "author": "vinu", "createdAt": "2020-10-28T10:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwNTc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d2dbee575259a35b5c56c5064394c6c06c280400", "chunk": "diff --git a/api/src/main/java/io/minio/MinioProperties.java b/api/src/main/java/io/minio/MinioProperties.java\nindex 5a75e9b6..42414967 100644\n--- a/api/src/main/java/io/minio/MinioProperties.java\n+++ b/api/src/main/java/io/minio/MinioProperties.java\n\n@@ -32,13 +31,6 @@ enum MinioProperties {\n \n   private static final Logger LOGGER = Logger.getLogger(MinioProperties.class.getName());\n \n-  // These attributes are checked from the manifests in classpath.\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE = \"Implementation-Title\";\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_VERSION = \"Implementation-Version\";\n-\n-  // this is set from gradle\n-  private static final String META_INF_ATTRIB_IMPLEMENTATION_TITLE_VALUE = \"minio\";\n-\n   private final AtomicReference<String> version = new AtomicReference<>(null);\n \n   public String getVersion() {\n"}}, {"oid": "d2dbee575259a35b5c56c5064394c6c06c280400", "url": "https://github.com/minio/minio-java/commit/d2dbee575259a35b5c56c5064394c6c06c280400", "message": "Clean a bit more", "committedDate": "2020-10-28T10:03:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MjA4Mg==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513362082", "bodyText": "Just reduce to if (\"minio\".equals(manifest.getMainAttributes().getValue(\"Implementation-Title\")))", "author": "balamurugana", "createdAt": "2020-10-28T11:15:46Z", "path": "api/src/main/java/io/minio/MinioProperties.java", "diffHunk": "@@ -35,42 +35,39 @@\n \n   public String getVersion() {\n     String result = version.get();\n-    if (result == null) {\n-      synchronized (INSTANCE) {\n-        if (version.get() == null) {\n-          try {\n-            ClassLoader classLoader = getClass().getClassLoader();\n-            setMinioClientJavaVersion(classLoader);\n-            setDevelopmentVersion();\n-          } catch (IOException e) {\n-            LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n-            version.set(\"unknown\");\n-          }\n-          result = version.get();\n-        }\n-      }\n+    if (result != null) {\n+      return result;\n     }\n-    return result;\n+    setVersion();\n+    return version.get();\n   }\n \n-  private void setDevelopmentVersion() {\n-    if (version.get() == null) {\n-      version.set(\"dev\");\n+  private synchronized void setVersion() {\n+    if (version.get() != null) {\n+      return;\n+    }\n+    version.set(\"dev\");\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    if (classLoader == null) {\n+      return;\n     }\n-  }\n \n-  private void setMinioClientJavaVersion(ClassLoader classLoader) throws IOException {\n-    if (classLoader != null) {\n+    try {\n       Enumeration<URL> resources = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n       while (resources.hasMoreElements()) {\n-        Manifest manifest = new Manifest(resources.nextElement().openStream());\n-        for (Object k : manifest.getMainAttributes().keySet()) {\n-          String versionString = \"Implementation-Version\";\n-          if (k.toString().equals(versionString)) {\n-            version.set(manifest.getMainAttributes().getValue((Attributes.Name) k));\n+        try (InputStream is = resources.nextElement().openStream()) {\n+          Manifest manifest = new Manifest(is);\n+          String implementationTitleValue =\n+              manifest.getMainAttributes().getValue(\"Implementation-Title\");\n+          if (implementationTitleValue != null && implementationTitleValue.equals(\"minio\")) {", "originalCommit": "d2dbee575259a35b5c56c5064394c6c06c280400", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5ODc0Mw==", "url": "https://github.com/minio/minio-java/pull/1089#discussion_r513398743", "bodyText": "\ud83d\udc4d  fixed", "author": "vinu", "createdAt": "2020-10-28T12:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MjA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "431f5dd4f684958f21197e59bf79767bfbfa1793", "chunk": "diff --git a/api/src/main/java/io/minio/MinioProperties.java b/api/src/main/java/io/minio/MinioProperties.java\nindex 42414967..9b72cbc1 100644\n--- a/api/src/main/java/io/minio/MinioProperties.java\n+++ b/api/src/main/java/io/minio/MinioProperties.java\n\n@@ -57,16 +57,14 @@ enum MinioProperties {\n       while (resources.hasMoreElements()) {\n         try (InputStream is = resources.nextElement().openStream()) {\n           Manifest manifest = new Manifest(is);\n-          String implementationTitleValue =\n-              manifest.getMainAttributes().getValue(\"Implementation-Title\");\n-          if (implementationTitleValue != null && implementationTitleValue.equals(\"minio\")) {\n+          if (\"minio\".equals(manifest.getMainAttributes().getValue(\"Implementation-Title\"))) {\n             version.set(manifest.getMainAttributes().getValue(\"Implementation-Version\"));\n             return;\n           }\n         }\n       }\n     } catch (IOException e) {\n-      LOGGER.log(Level.SEVERE, \"IOException occured\", e);\n+      LOGGER.log(Level.SEVERE, \"IOException occurred\", e);\n       version.set(\"unknown\");\n     }\n   }\n"}}, {"oid": "431f5dd4f684958f21197e59bf79767bfbfa1793", "url": "https://github.com/minio/minio-java/commit/431f5dd4f684958f21197e59bf79767bfbfa1793", "message": "Code clean - remove redundant variable", "committedDate": "2020-10-28T12:13:53Z", "type": "commit"}]}