{"pr_number": 740, "pr_title": "[CheckRuns] Add method for listing checkruns for given ref", "pr_createdAt": "2020-03-14T15:36:02Z", "pr_url": "https://github.com/hub4j/github-api/pull/740", "timeline": [{"oid": "2afffdd6c5abba9039c9d6418eb7457097ee2de7", "url": "https://github.com/hub4j/github-api/commit/2afffdd6c5abba9039c9d6418eb7457097ee2de7", "message": "[CheckRuns] Add method for listing checkruns for given ref", "committedDate": "2020-03-14T18:03:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NDY2NA==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393774664", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *             the io exception\n          \n          \n            \n                 *             the io exception\n          \n          \n            \n                 * @see <a href=\"https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-specific-ref\">List check runs for a specific ref</a>", "author": "bitwiseman", "createdAt": "2020-03-17T15:41:55Z", "path": "src/main/java/org/kohsuke/github/GHRepository.java", "diffHunk": "@@ -1773,6 +1773,24 @@ public GHCommitStatus getLastCommitStatus(String sha1) throws IOException {\n         return v.isEmpty() ? null : v.get(0);\n     }\n \n+    /**\n+     * Gets check runs for given ref.\n+     *\n+     * @param ref\n+     *            ref\n+     * @return check runs for given ref\n+     * @throws IOException\n+     *             the io exception", "originalCommit": "2afffdd6c5abba9039c9d6418eb7457097ee2de7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df0a3ff69e895daa9a6474eba263bfcf9f734584", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GHRepository.java b/src/main/java/org/kohsuke/github/GHRepository.java\nindex 4d5589cd2..1668245b3 100644\n--- a/src/main/java/org/kohsuke/github/GHRepository.java\n+++ b/src/main/java/org/kohsuke/github/GHRepository.java\n\n@@ -1781,6 +1781,8 @@ public class GHRepository extends GHObject {\n      * @return check runs for given ref\n      * @throws IOException\n      *             the io exception\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-specific-ref\">List check runs\n+     *      for a specific ref</a>\n      */\n     @Preview\n     @Deprecated\n"}}, {"oid": "df0a3ff69e895daa9a6474eba263bfcf9f734584", "url": "https://github.com/hub4j/github-api/commit/df0a3ff69e895daa9a6474eba263bfcf9f734584", "message": "[CheckRuns] Add method for listing checkruns for given ref", "committedDate": "2020-03-17T16:03:54Z", "type": "forcePushed"}, {"oid": "04dca90294888a2e53c41e58c2bba5fd806147a3", "url": "https://github.com/hub4j/github-api/commit/04dca90294888a2e53c41e58c2bba5fd806147a3", "message": "[CheckRuns] Add method for listing checkruns for given ref", "committedDate": "2020-03-17T16:07:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393780434", "bodyText": "I think you'll need to model this after the PagedSearchIterable.  The check runs use paged responses: https://developer.github.com/v3/checks/runs/#response-3\nYou'll also need to have a test that returns multiple pages (you can force this by having a paged iterable with a small pageCount.", "author": "bitwiseman", "createdAt": "2020-03-17T15:49:18Z", "path": "src/main/java/org/kohsuke/github/GHCheckRuns.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Represents the response of listing check-runs for given ref.\n+ */\n+public class GHCheckRuns {", "originalCommit": "2afffdd6c5abba9039c9d6418eb7457097ee2de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4Mzc0Mw==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393883743", "bodyText": "FYI, I don't love the behavior of PageSearchIterable currently. The Iterable has methods that I would rather see done elsewhere.\nThis method relies on a cached result, meaning the Iterable can get out of sync with underlying search results. \ud83d\ude2d\nhttps://github.com/github-api/github-api/blob/bccae94c7a740fa7ba297fd6eb2a6782ed156a98/src/main/java/org/kohsuke/github/PagedSearchIterable.java#L48-L50\nOpened #749 for this.", "author": "bitwiseman", "createdAt": "2020-03-17T18:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0NjA4Mg==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393946082", "bodyText": "Thanks, I didn't spot that :-) Is it OK to create a search builder class - with one method specifying the ref and not extending GHSearchBuilder - so that it's similar to other search builders even though it's not using the search api? Or should I not mix it with search other builders? Or any other idea? :-)", "author": "avano", "createdAt": "2020-03-17T20:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NTMyMg==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393965322", "bodyText": "I don't have any strong requirement here except that the api properly support paging.\nNo, it shouldn't extend search builder, just use a the same basic structure with an adapt() method to create an iterator that works.\nProbably want to make GHCheckRuns into GHCheckRunsPage and make it internal.\nAnd then have a CheckRunsIterable also internal that extends PagedIterable<GHCheckRun>.   Finally, have getCheckRuns(String ref) return PagedIterable<GHCheckRun>.\nThe reason I suggest doing it this way, is to limit added API surface area. While your underlying implementation will be different, users will interact with it as a normal PagedIterable.", "author": "bitwiseman", "createdAt": "2020-03-17T20:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMTY2OQ==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r394201669", "bodyText": "I created a temp commit here avano@6ba7b3d - can you please check if I understood correctly?", "author": "avano", "createdAt": "2020-03-18T09:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMTUxNg==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r394601516", "bodyText": "@avano Yes, that looks right to me.", "author": "bitwiseman", "createdAt": "2020-03-18T19:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MDQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "3b9c4a4f5898a2672b874c8e3e609c92f253e240", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GHCheckRuns.java b/src/main/java/org/kohsuke/github/GHCheckRuns.java\ndeleted file mode 100644\nindex ffe5a62ae..000000000\n--- a/src/main/java/org/kohsuke/github/GHCheckRuns.java\n+++ /dev/null\n\n@@ -1,32 +0,0 @@\n-package org.kohsuke.github;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-/**\n- * Represents the response of listing check-runs for given ref.\n- */\n-public class GHCheckRuns {\n-\n-    private int total_count;\n-    private GHCheckRun[] check_runs;\n-\n-    /**\n-     * Returns total count of checkruns.\n-     * \n-     * @return count\n-     */\n-    public int getTotalCount() {\n-        return total_count;\n-    }\n-\n-    /**\n-     * Returns check runs.\n-     * \n-     * @return list of check runs\n-     */\n-    public List<GHCheckRun> getCheckRuns() {\n-        return Collections.unmodifiableList(Arrays.asList(check_runs));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4NDg3Mg==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393784872", "bodyText": "Once you have GHCheckRuns using paging you can set page count to 1 and rerecord this.  Also, you could record this based on github-api/github-api which currently has a larger number of checks.", "author": "bitwiseman", "createdAt": "2020-03-17T15:55:06Z", "path": "src/test/java/org/kohsuke/github/GHRepositoryTest.java", "diffHunk": "@@ -496,4 +496,21 @@ public void listCollaborators() throws Exception {\n         List<GHUser> collaborators = repo.listCollaborators().toList();\n         assertThat(collaborators.size(), greaterThan(10));\n     }\n+\n+    @Test\n+    public void getCheckRuns() throws Exception {\n+        GHCheckRuns checkRuns = getRepository().getCheckRuns(\"8051615eff597f4e49f4f47625e6fc2b49f26bfc\");", "originalCommit": "2afffdd6c5abba9039c9d6418eb7457097ee2de7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b9c4a4f5898a2672b874c8e3e609c92f253e240", "chunk": "diff --git a/src/test/java/org/kohsuke/github/GHRepositoryTest.java b/src/test/java/org/kohsuke/github/GHRepositoryTest.java\nindex 6907b44e8..c0a81e2ae 100644\n--- a/src/test/java/org/kohsuke/github/GHRepositoryTest.java\n+++ b/src/test/java/org/kohsuke/github/GHRepositoryTest.java\n\n@@ -499,11 +499,21 @@ public class GHRepositoryTest extends AbstractGitHubWireMockTest {\n \n     @Test\n     public void getCheckRuns() throws Exception {\n-        GHCheckRuns checkRuns = getRepository().getCheckRuns(\"8051615eff597f4e49f4f47625e6fc2b49f26bfc\");\n-        assertThat(checkRuns.getTotalCount(), equalTo(2));\n-        assertThat(checkRuns.getCheckRuns(), hasSize(2));\n-        assertThat(checkRuns.getCheckRuns().get(0).getName(), equalTo(\"Travis CI - Pull Request\"));\n-        assertThat(checkRuns.getCheckRuns().get(1).getName(), equalTo(\"Travis CI - Branch\"));\n+        final int expectedCount = 8;\n+        // Use github-api repository as it has checks set up\n+        PagedIterable<GHCheckRun> checkRuns = gitHub.getOrganization(\"github-api\")\n+                .getRepository(\"github-api\")\n+                .getCheckRuns(\"78b9ff49d47daaa158eb373c4e2e040f739df8b9\");\n+        // Check if the paging works correctly\n+        assertThat(checkRuns.withPageSize(2).iterator().nextPage(), hasSize(2));\n+\n+        // Check if the checkruns are all succeeded and if we got all of them\n+        int checkRunsCount = 0;\n+        for (GHCheckRun checkRun : checkRuns) {\n+            assertThat(checkRun.getConclusion(), equalTo(\"success\"));\n+            checkRunsCount++;\n+        }\n+        assertThat(checkRunsCount, equalTo(expectedCount));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2OTkwNw==", "url": "https://github.com/hub4j/github-api/pull/740#discussion_r393869907", "bodyText": "This method has bad performance.  Opened #748.  Thanks!", "author": "bitwiseman", "createdAt": "2020-03-17T18:01:36Z", "path": "src/main/java/org/kohsuke/github/GHRepository.java", "diffHunk": "@@ -1773,6 +1773,26 @@ public GHCommitStatus getLastCommitStatus(String sha1) throws IOException {\n         return v.isEmpty() ? null : v.get(0);", "originalCommit": "04dca90294888a2e53c41e58c2bba5fd806147a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b9c4a4f5898a2672b874c8e3e609c92f253e240", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GHRepository.java b/src/main/java/org/kohsuke/github/GHRepository.java\nindex 1668245b3..24349f03f 100644\n--- a/src/main/java/org/kohsuke/github/GHRepository.java\n+++ b/src/main/java/org/kohsuke/github/GHRepository.java\n\n@@ -1786,11 +1786,12 @@ public class GHRepository extends GHObject {\n      */\n     @Preview\n     @Deprecated\n-    public GHCheckRuns getCheckRuns(String ref) throws IOException {\n-        return root.createRequest()\n+    public PagedIterable<GHCheckRun> getCheckRuns(String ref) throws IOException {\n+        GitHubRequest request = root.createRequest()\n                 .withUrlPath(String.format(\"/repos/%s/%s/commits/%s/check-runs\", getOwnerName(), name, ref))\n-                .withPreview(Previews.ANTIOPE)\n-                .fetch(GHCheckRuns.class);\n+                .withPreview(ANTIOPE)\n+                .build();\n+        return new GHCheckRunsIterable(root, request);\n     }\n \n     /**\n"}}, {"oid": "3b9c4a4f5898a2672b874c8e3e609c92f253e240", "url": "https://github.com/hub4j/github-api/commit/3b9c4a4f5898a2672b874c8e3e609c92f253e240", "message": "[GHEvent] Add new enum for registry_package event", "committedDate": "2020-03-19T16:37:41Z", "type": "forcePushed"}, {"oid": "5cb6bfa633ea40af49e3a148a37a4beaf0a1de06", "url": "https://github.com/hub4j/github-api/commit/5cb6bfa633ea40af49e3a148a37a4beaf0a1de06", "message": "[CheckRuns] Add method for listing checkruns for given ref", "committedDate": "2020-03-20T10:47:04Z", "type": "commit"}, {"oid": "452b56c47b44ad9851c70c5f12b8cf5620fbf83d", "url": "https://github.com/hub4j/github-api/commit/452b56c47b44ad9851c70c5f12b8cf5620fbf83d", "message": "[GHEvent] Add new enum for registry_package event", "committedDate": "2020-03-20T10:47:04Z", "type": "commit"}, {"oid": "452b56c47b44ad9851c70c5f12b8cf5620fbf83d", "url": "https://github.com/hub4j/github-api/commit/452b56c47b44ad9851c70c5f12b8cf5620fbf83d", "message": "[GHEvent] Add new enum for registry_package event", "committedDate": "2020-03-20T10:47:04Z", "type": "forcePushed"}]}