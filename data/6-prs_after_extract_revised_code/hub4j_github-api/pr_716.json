{"pr_number": 716, "pr_title": "Use InjectableValue to provide response info", "pr_createdAt": "2020-02-25T02:35:00Z", "pr_url": "https://github.com/hub4j/github-api/pull/716", "timeline": [{"oid": "73d3c6c42a94b19ede6163e9f7e8c01081f11e33", "url": "https://github.com/hub4j/github-api/commit/73d3c6c42a94b19ede6163e9f7e8c01081f11e33", "message": "Use InjectableValue to provide response info", "committedDate": "2020-02-25T03:20:25Z", "type": "forcePushed"}, {"oid": "9d7e79621a4bb6f6c55ee6dceec33c39a77881f1", "url": "https://github.com/hub4j/github-api/commit/9d7e79621a4bb6f6c55ee6dceec33c39a77881f1", "message": "Use InjectableValue to provide response info", "committedDate": "2020-02-25T03:48:10Z", "type": "forcePushed"}, {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c", "url": "https://github.com/hub4j/github-api/commit/f8c2cda2573eea98fbc512771aa17658f0d49d1c", "message": "Use InjectableValue to provide response info", "committedDate": "2020-02-25T03:54:40Z", "type": "commit"}, {"oid": "f8c2cda2573eea98fbc512771aa17658f0d49d1c", "url": "https://github.com/hub4j/github-api/commit/f8c2cda2573eea98fbc512771aa17658f0d49d1c", "message": "Use InjectableValue to provide response info", "committedDate": "2020-02-25T03:54:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzEzMA==", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647130", "bodyText": "This is the special case code that we had before.", "author": "bitwiseman", "createdAt": "2020-02-25T03:59:23Z", "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -443,30 +445,6 @@ private static IOException interpretApiError(IOException e,\n         return e;\n     }\n \n-    /**\n-     * Sets the response headers on objects that need it. Ideally this would be handled by the objects themselves, but\n-     * currently they do not have access to {@link GitHubResponse.ResponseInfo} after the\n-     *\n-     * @param responseInfo\n-     *            the response info\n-     * @param readValue\n-     *            the object to consider adding headers to.\n-     * @param <T>\n-     *            type of the object\n-     */\n-    private static <T> void setResponseHeaders(GitHubResponse.ResponseInfo responseInfo, T readValue) {", "originalCommit": "f8c2cda2573eea98fbc512771aa17658f0d49d1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzI5Mw==", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647293", "bodyText": "This is what we do instead of the special case.", "author": "bitwiseman", "createdAt": "2020-02-25T04:00:16Z", "path": "src/main/java/org/kohsuke/github/GHObject.java", "diffHunk": "@@ -33,6 +34,19 @@\n     GHObject() {\n     }\n \n+    /**\n+     * Called by Jackson\n+     * \n+     * @param responseInfo\n+     *            the {@link GitHubResponse.ResponseInfo} to get headers from.\n+     */\n+    @JacksonInject\n+    protected void setResponseHeaderFields(@CheckForNull GitHubResponse.ResponseInfo responseInfo) {", "originalCommit": "f8c2cda2573eea98fbc512771aa17658f0d49d1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NzYxOQ==", "url": "https://github.com/hub4j/github-api/pull/716#discussion_r383647619", "bodyText": "Also, since we now have the the responseInfo injected during binding, we can make Record fully immutable.  We don't have \"recalculate\" after creation.", "author": "bitwiseman", "createdAt": "2020-02-25T04:01:48Z", "path": "src/main/java/org/kohsuke/github/GHRateLimit.java", "diffHunk": "@@ -308,31 +306,37 @@ private UnknownLimitRecord() {\n          * @param resetEpochSeconds\n          *            the reset epoch seconds\n          */\n-        @JsonCreator\n         public Record(@JsonProperty(value = \"limit\", required = true) int limit,\n                 @JsonProperty(value = \"remaining\", required = true) int remaining,\n                 @JsonProperty(value = \"reset\", required = true) long resetEpochSeconds) {\n             this(limit, remaining, resetEpochSeconds, null);\n         }\n \n         /**\n-         * Instantiates a new Record.\n+         * Instantiates a new Record. Called by Jackson data binding or during header parsing.\n          *\n          * @param limit\n          *            the limit\n          * @param remaining\n          *            the remaining\n          * @param resetEpochSeconds\n          *            the reset epoch seconds\n-         * @param updatedAt\n-         *            the updated at\n+         * @param responseInfo\n+         *            the response info\n          */\n-        @SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Deprecated\")\n-        public Record(int limit, int remaining, long resetEpochSeconds, @CheckForNull String updatedAt) {\n+        @JsonCreator\n+        Record(@JsonProperty(value = \"limit\", required = true) int limit,\n+                @JsonProperty(value = \"remaining\", required = true) int remaining,\n+                @JsonProperty(value = \"reset\", required = true) long resetEpochSeconds,\n+                @JacksonInject @CheckForNull GitHubResponse.ResponseInfo responseInfo) {", "originalCommit": "f8c2cda2573eea98fbc512771aa17658f0d49d1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}