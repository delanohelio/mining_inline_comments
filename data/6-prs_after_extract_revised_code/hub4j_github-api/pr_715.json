{"pr_number": 715, "pr_title": "[#714]Fix query parameter construction of org member filter", "pr_createdAt": "2020-02-24T21:57:51Z", "pr_url": "https://github.com/hub4j/github-api/pull/715", "timeline": [{"oid": "f25e5f94882dc14e5d713f0ae9e6460dc26c2f96", "url": "https://github.com/hub4j/github-api/commit/f25e5f94882dc14e5d713f0ae9e6460dc26c2f96", "message": "[#714]Fix query parameter construction of org member filter", "committedDate": "2020-02-24T21:57:08Z", "type": "commit"}, {"oid": "0d145147128a89ed4764ea43b72ff2b220e61489", "url": "https://github.com/hub4j/github-api/commit/0d145147128a89ed4764ea43b72ff2b220e61489", "message": "[#714]Formatting fix", "committedDate": "2020-02-24T22:47:35Z", "type": "commit"}, {"oid": "006f1271d6227e3e3463b4978cb06ca9b2a8ca75", "url": "https://github.com/hub4j/github-api/commit/006f1271d6227e3e3463b4978cb06ca9b2a8ca75", "message": "[#714]Add test for new method", "committedDate": "2020-02-24T23:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNTI4NQ==", "url": "https://github.com/hub4j/github-api/pull/715#discussion_r383605285", "bodyText": "The bug was for listMembersWithFilter.  Can you add a test for that as well?", "author": "bitwiseman", "createdAt": "2020-02-25T01:05:48Z", "path": "src/test/java/org/kohsuke/github/GHOrganizationTest.java", "diffHunk": "@@ -76,6 +77,15 @@ public void testInviteUser() throws IOException {\n         // assertTrue(org.hasMember(user));\n     }\n \n+    @Test\n+    public void testListMembersWithRole() throws IOException {\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+\n+        List<GHUser> admins = org.listMembersWithRole(\"admin\").asList();", "originalCommit": "006f1271d6227e3e3463b4978cb06ca9b2a8ca75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMDg5NQ==", "url": "https://github.com/hub4j/github-api/pull/715#discussion_r384100895", "bodyText": "Done!", "author": "Sage-Pierce", "createdAt": "2020-02-25T20:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNTI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5baeac4706ce0343d0e8c4ba2ade0e3339a6e058", "chunk": "diff --git a/src/test/java/org/kohsuke/github/GHOrganizationTest.java b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\nindex 7e7bf542c..029705c17 100644\n--- a/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n+++ b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n\n@@ -77,13 +77,48 @@ public class GHOrganizationTest extends AbstractGitHubWireMockTest {\n         // assertTrue(org.hasMember(user));\n     }\n \n+    @Test\n+    public void testListMembersWithFilter() throws IOException {\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+\n+        List<GHUser> admins = org.listMembersWithFilter(\"all\").asList();\n+\n+        assertNotNull(admins);\n+        assertTrue(admins.size() >= 12); // In case more are added in the future\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"alexanderrtaylor\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"asthinasthi\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"bitwiseman\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"farmdawgnation\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"halkeye\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"jberglund-BSFT\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke2\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"martinvanzijl\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"PauloMigAlmeida\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"Sage-Pierce\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"timja\")));\n+    }\n+\n     @Test\n     public void testListMembersWithRole() throws IOException {\n         GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n \n         List<GHUser> admins = org.listMembersWithRole(\"admin\").asList();\n \n-        assertFalse(admins.isEmpty());\n+        assertNotNull(admins);\n+        assertTrue(admins.size() >= 12); // In case more are added in the future\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"alexanderrtaylor\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"asthinasthi\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"bitwiseman\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"farmdawgnation\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"halkeye\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"jberglund-BSFT\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke2\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"martinvanzijl\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"PauloMigAlmeida\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"Sage-Pierce\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"timja\")));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNzIxMA==", "url": "https://github.com/hub4j/github-api/pull/715#discussion_r383607210", "bodyText": "Go ahead and be specific about size and who is in the list.  A check for non-empty list is not going to be enough to ensure this doesn't break in the future.", "author": "bitwiseman", "createdAt": "2020-02-25T01:13:01Z", "path": "src/test/java/org/kohsuke/github/GHOrganizationTest.java", "diffHunk": "@@ -76,6 +77,15 @@ public void testInviteUser() throws IOException {\n         // assertTrue(org.hasMember(user));\n     }\n \n+    @Test\n+    public void testListMembersWithRole() throws IOException {\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+\n+        List<GHUser> admins = org.listMembersWithRole(\"admin\").asList();\n+\n+        assertFalse(admins.isEmpty());", "originalCommit": "006f1271d6227e3e3463b4978cb06ca9b2a8ca75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5baeac4706ce0343d0e8c4ba2ade0e3339a6e058", "chunk": "diff --git a/src/test/java/org/kohsuke/github/GHOrganizationTest.java b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\nindex 7e7bf542c..029705c17 100644\n--- a/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n+++ b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n\n@@ -77,13 +77,48 @@ public class GHOrganizationTest extends AbstractGitHubWireMockTest {\n         // assertTrue(org.hasMember(user));\n     }\n \n+    @Test\n+    public void testListMembersWithFilter() throws IOException {\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+\n+        List<GHUser> admins = org.listMembersWithFilter(\"all\").asList();\n+\n+        assertNotNull(admins);\n+        assertTrue(admins.size() >= 12); // In case more are added in the future\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"alexanderrtaylor\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"asthinasthi\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"bitwiseman\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"farmdawgnation\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"halkeye\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"jberglund-BSFT\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke2\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"martinvanzijl\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"PauloMigAlmeida\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"Sage-Pierce\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"timja\")));\n+    }\n+\n     @Test\n     public void testListMembersWithRole() throws IOException {\n         GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n \n         List<GHUser> admins = org.listMembersWithRole(\"admin\").asList();\n \n-        assertFalse(admins.isEmpty());\n+        assertNotNull(admins);\n+        assertTrue(admins.size() >= 12); // In case more are added in the future\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"alexanderrtaylor\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"asthinasthi\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"bitwiseman\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"farmdawgnation\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"halkeye\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"jberglund-BSFT\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke2\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"martinvanzijl\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"PauloMigAlmeida\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"Sage-Pierce\")));\n+        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"timja\")));\n     }\n \n     @Test\n"}}, {"oid": "5baeac4706ce0343d0e8c4ba2ade0e3339a6e058", "url": "https://github.com/hub4j/github-api/commit/5baeac4706ce0343d0e8c4ba2ade0e3339a6e058", "message": "[#714]More specific assertions; Add test for members with filter", "committedDate": "2020-02-25T14:42:10Z", "type": "commit"}, {"oid": "a1b0e771e5ae8e98895a73279036f0fdd20cbc33", "url": "https://github.com/hub4j/github-api/commit/a1b0e771e5ae8e98895a73279036f0fdd20cbc33", "message": "Merge branch 'master' into #714", "committedDate": "2020-02-25T14:46:30Z", "type": "commit"}]}