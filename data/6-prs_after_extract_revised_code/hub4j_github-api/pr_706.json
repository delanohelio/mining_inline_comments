{"pr_number": 706, "pr_title": "Add basic rate limit checker ", "pr_createdAt": "2020-02-21T00:08:56Z", "pr_url": "https://github.com/hub4j/github-api/pull/706", "timeline": [{"oid": "b70b924db41e0823bb1c5538b63a35114decbf42", "url": "https://github.com/hub4j/github-api/commit/b70b924db41e0823bb1c5538b63a35114decbf42", "message": "Inital implmentation of RateLimitChecker\n\nThis is a stripped down rate limit checking implmentation that handles the infrastructure\nof deciding how to get rate limit information and leaves it to other implementers to\ndecided what kind of checks they want to do and how long they want to wait.\n\nThe implmentation supports checkers that sleep less than the full time until the\nrate limit is expected to reset, allowing for polling and notifying clients of why their query\nis not returning.\n\nA basic checker which sleeps until the rate limit is expected to reset is included as working example..", "committedDate": "2020-02-21T00:03:46Z", "type": "commit"}, {"oid": "e9e690ef6089f386913856784aa674a36fded80f", "url": "https://github.com/hub4j/github-api/commit/e9e690ef6089f386913856784aa674a36fded80f", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing.", "committedDate": "2020-02-21T02:43:32Z", "type": "forcePushed"}, {"oid": "3affedd1b101b2a6465d5110f424fcba3e49d302", "url": "https://github.com/hub4j/github-api/commit/3affedd1b101b2a6465d5110f424fcba3e49d302", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing.", "committedDate": "2020-02-21T02:50:08Z", "type": "forcePushed"}, {"oid": "158a31e9246cd50a8b1e4c22ad124d6b45ae86e4", "url": "https://github.com/hub4j/github-api/commit/158a31e9246cd50a8b1e4c22ad124d6b45ae86e4", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing.", "committedDate": "2020-02-21T02:53:13Z", "type": "commit"}, {"oid": "158a31e9246cd50a8b1e4c22ad124d6b45ae86e4", "url": "https://github.com/hub4j/github-api/commit/158a31e9246cd50a8b1e4c22ad124d6b45ae86e4", "message": "Added javadocs and other cleanup\n\nWhenever I submit a PR and then start looking at it as a reviewer, I immediately find a bunch of things that need changing.", "committedDate": "2020-02-21T02:53:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQxNTk3Nw==", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r382415977", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * exceeding their rate limit. Consider add a {@link RateLimitChecker} to automatically check the rate limit for\n          \n          \n            \n                 * exceeding their rate limit. Consider adding a {@link RateLimitChecker} to automatically check the rate limit for", "author": "car-roll", "createdAt": "2020-02-21T06:26:48Z", "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,32 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This request per interval is referred to as the \"rate limit\". When the remaining\n+     * number of requests reaches zero, the next request will return a error. If this happens, the\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * <P>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid\n+     * exceeding their rate limit. Consider add a {@link RateLimitChecker} to automatically check the rate limit for", "originalCommit": "b70b924db41e0823bb1c5538b63a35114decbf42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1904c82941e31c68d28e9b6c595371de7f3bbbf0", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GitHubBuilder.java b/src/main/java/org/kohsuke/github/GitHubBuilder.java\nindex 9bfb55218..9e47065e7 100644\n--- a/src/main/java/org/kohsuke/github/GitHubBuilder.java\n+++ b/src/main/java/org/kohsuke/github/GitHubBuilder.java\n\n@@ -316,15 +316,16 @@ public class GitHubBuilder implements Cloneable {\n     /**\n      * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n      * number of requests remaining is returned in the response header and can also be requested using\n-     * {@link GitHub#getRateLimit()}. This request per interval is referred to as the \"rate limit\". When the remaining\n-     * number of requests reaches zero, the next request will return a error. If this happens, the\n+     * {@link GitHub#getRateLimit()}. This requests per interval is referred to as the \"rate limit\".\n+     * <p>\n+     * When the remaining number of requests reaches zero, the next request will return an error. If this happens,\n      * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n-     * <P>\n+     * </p>\n+     * <p>\n      * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid\n-     * exceeding their rate limit. Consider add a {@link RateLimitChecker} to automatically check the rate limit for\n+     * exceeding their rate limit. Consider adding a {@link RateLimitChecker} to automatically check the rate limit for\n      * each request and wait if needed.\n-     * </P>\n-     *\n+     * </p>\n      *\n      * @param handler\n      *            the handler\n"}}, {"oid": "1904c82941e31c68d28e9b6c595371de7f3bbbf0", "url": "https://github.com/hub4j/github-api/commit/1904c82941e31c68d28e9b6c595371de7f3bbbf0", "message": "PR feedback", "committedDate": "2020-02-21T18:52:28Z", "type": "commit"}, {"oid": "a68fe3b39d39a05565299e6d5e764f4cf22f3505", "url": "https://github.com/hub4j/github-api/commit/a68fe3b39d39a05565299e6d5e764f4cf22f3505", "message": "More javadoc because words are hard", "committedDate": "2020-02-21T20:04:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MzA2Mw==", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r382793063", "bodyText": "Looks like this can be removed entirely.", "author": "kshultzCB", "createdAt": "2020-02-21T20:34:55Z", "path": "src/test/java/org/kohsuke/github/RateLimitCheckerTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.kohsuke.github;\n+\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.helpers.HandlebarsCurrentDateHelper;\n+import org.junit.Test;\n+import wiremock.com.github.jknack.handlebars.Helper;\n+import wiremock.com.github.jknack.handlebars.Options;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+\n+import static org.hamcrest.CoreMatchers.*;\n+\n+/**\n+ * Test showing the behavior of the {@link GitHubRateLimitChecker} and {@link RateLimitChecker.LiteralValue}.\n+ *\n+ * This is a very simple test but covers the key features: Checks occur automatically and are retried until they\n+ * indicate it is safe to proceed.\n+ */\n+public class RateLimitCheckerTest extends AbstractGitHubWireMockTest {\n+\n+    GHRateLimit rateLimit = null;\n+    GHRateLimit previousLimit = null;\n+    Date testStartDate = new Date();\n+\n+    public RateLimitCheckerTest() {\n+        useDefaultGitHub = false;\n+    }\n+\n+    @Override\n+    protected WireMockConfiguration getWireMockOptions() {\n+\n+        return super.getWireMockOptions().extensions(ResponseTemplateTransformer.builder()\n+                .global(true)\n+                .maxCacheEntries(0L)\n+                .helper(\"testStartDate\", new Helper<Object>() {\n+                    private HandlebarsCurrentDateHelper helper = new HandlebarsCurrentDateHelper();\n+                    @Override\n+                    public Object apply(final Object context, final Options options) throws IOException {\n+                        return this.helper.apply(RateLimitCheckerTest.this.testStartDate, options);\n+                    }\n+                })\n+                .build());\n+    }\n+\n+    @Test\n+    public void testGitHubRateLimit() throws Exception {\n+        // Customized response that templates the date to keep things working\n+        snapshotNotAllowed();\n+\n+        assertThat(mockGitHub.getRequestCount(), equalTo(0));\n+\n+        // // 4897 is just the what the limit was when the snapshot was taken\n+        // previousLimit = GHRateLimit\n+        // .fromHeaderRecord(new GHRateLimit.Record(5000, 4897, System.currentTimeMillis() / 1000L));", "originalCommit": "1904c82941e31c68d28e9b6c595371de7f3bbbf0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA==", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r639198904", "bodyText": "Is there an official source out there that expresses this?", "author": "steve-thousand", "createdAt": "2021-05-25T20:56:16Z", "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -311,19 +314,39 @@ public GitHubBuilder withConnector(HttpConnector connector) {\n     }\n \n     /**\n-     * With rate limit handler git hub builder.\n+     * Adds a {@link RateLimitHandler} to this {@link GitHubBuilder}.\n+     * <p>\n+     * GitHub allots a certain number of requests to each user or application per period of time (usually per hour). The\n+     * number of requests remaining is returned in the response header and can also be requested using\n+     * {@link GitHub#getRateLimit()}. This requests per interval is referred to as the \"rate limit\".\n+     * </p>\n+     * <p>\n+     * When the remaining number of requests reaches zero, the next request will return an error. If this happens,\n+     * {@link RateLimitHandler#onError(IOException, HttpURLConnection)} will be called.\n+     * </p>\n+     * <p>\n+     * NOTE: GitHub treats clients that exceed their rate limit very harshly. If possible, clients should avoid", "originalCommit": "a68fe3b39d39a05565299e6d5e764f4cf22f3505", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTI1MTQ2Ng==", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r639251466", "bodyText": "https://docs.github.com/en/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits", "author": "bitwiseman", "createdAt": "2021-05-25T22:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTc2NDAwNQ==", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r639764005", "bodyText": "So then \"GitHub treats clients ... harshly\" refers to the further abuse rate limit apart from the regular rate limit?\nMy understanding is that the abuse rate limit is intended to limit something entirely different (too fast/concurrent calls/expensive calls vs exceeding total allowed calls per minute/hour).", "author": "steve-thousand", "createdAt": "2021-05-26T14:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDE5MTgwMw==", "url": "https://github.com/hub4j/github-api/pull/706#discussion_r640191803", "bodyText": "Ah sorry, it is this:\nhttps://docs.github.com/en/rest/guides/best-practices-for-integrators#dealing-with-rate-limits\n\nIf you hit a rate limit, it's expected that you back off from making requests and try again later when you're permitted to do so. Failure to do so may result in the banning of your app.", "author": "bitwiseman", "createdAt": "2021-05-26T23:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTE5ODkwNA=="}], "type": "inlineReview", "revised_code": null}]}