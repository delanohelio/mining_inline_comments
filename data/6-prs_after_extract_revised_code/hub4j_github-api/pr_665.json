{"pr_number": 665, "pr_title": "Workaround for `If-Modified-Since` HTTP request header causing cache corruption", "pr_createdAt": "2020-01-14T08:23:51Z", "pr_url": "https://github.com/hub4j/github-api/pull/665", "timeline": [{"oid": "0d9ec1c37261983246d09c6be25a96f01dc8e554", "url": "https://github.com/hub4j/github-api/commit/0d9ec1c37261983246d09c6be25a96f01dc8e554", "message": "JENKINS-54126 - Repro of github caching error", "committedDate": "2020-01-14T08:28:03Z", "type": "forcePushed"}, {"oid": "72aedbb76c8a212e654c211a193625e311b452c3", "url": "https://github.com/hub4j/github-api/commit/72aedbb76c8a212e654c211a193625e311b452c3", "message": "JENKINS-54126 - Repro of github caching error", "committedDate": "2020-01-14T08:29:43Z", "type": "commit"}, {"oid": "72aedbb76c8a212e654c211a193625e311b452c3", "url": "https://github.com/hub4j/github-api/commit/72aedbb76c8a212e654c211a193625e311b452c3", "message": "JENKINS-54126 - Repro of github caching error", "committedDate": "2020-01-14T08:29:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwNjcyMw==", "url": "https://github.com/hub4j/github-api/pull/665#discussion_r366206723", "bodyText": "This refers to https://github.com/github-api/github-api/pull/665/files#diff-02b86edbc1ffd10d08e7049e7a842fc8R9.", "author": "bitwiseman", "createdAt": "2020-01-14T08:35:33Z", "path": "src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package org.kohsuke.github.extras.okhttp3;\n+\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import okhttp3.Cache;\n+import okhttp3.OkHttpClient;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.kohsuke.github.AbstractGitHubWireMockTest;\n+import org.kohsuke.github.GHContent;\n+import org.kohsuke.github.GHException;\n+import org.kohsuke.github.GHFileNotFoundException;\n+import org.kohsuke.github.GHIssueState;\n+import org.kohsuke.github.GHPullRequest;\n+import org.kohsuke.github.GHRef;\n+import org.kohsuke.github.GHRepository;\n+import org.kohsuke.github.GitHub;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.hamcrest.core.Is.is;\n+\n+/**\n+ * Test showing the behavior of OkHttpConnector cache with GitHub 404 responses.\n+ *\n+ * @author Liam Newman\n+ */\n+public class GitHubCachingTest extends AbstractGitHubWireMockTest {\n+\n+    public GitHubCachingTest() {\n+        useDefaultGitHub = false;\n+    }\n+\n+    String testRefName = \"heads/test/content_ref_cache\";\n+\n+    @Override\n+    protected WireMockConfiguration getWireMockOptions() {\n+        return super.getWireMockOptions()\n+                .extensions(ResponseTemplateTransformer.builder().global(true).maxCacheEntries(0L).build());\n+    }\n+\n+    @Before\n+    public void setupRepo() throws Exception {\n+        if (mockGitHub.isUseProxy()) {\n+            for (GHPullRequest pr : getRepository(this.gitHubBeforeAfter).getPullRequests(GHIssueState.OPEN)) {\n+                pr.close();\n+            }\n+            try {\n+                GHRef ref = getRepository(this.gitHubBeforeAfter).getRef(testRefName);\n+                ref.delete();\n+            } catch (IOException e) {\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void OkHttpConnector_Cache_MaxAgeDefault_Zero_GitHubRef_Error_runnable() throws Exception {\n+\n+        requireProxy(\"This test method can be run locally for debugging and analyzing.\");\n+        OkHttpConnector_Cache_MaxAgeDefault_Zero_GitHubRef_Error();\n+    }\n+\n+    @Ignore(\"The wiremock snapshot files attached to this test method show what was sent to and from the server during a run, but they aren't re-runnable - not templated.\")\n+    @Test\n+    public void OkHttpConnector_Cache_MaxAgeDefault_Zero_GitHubRef_Error() throws Exception {\n+\n+        // requireProxy(\"For clarity. Will switch to snapshot shortly.\");\n+        // snapshotNotAllowed();\n+\n+        OkHttpClient client = createClient(true);\n+        OkHttpConnector connector = new OkHttpConnector(client);\n+\n+        this.gitHub = getGitHubBuilder().withEndpoint(mockGitHub.apiServer().baseUrl())\n+                .withConnector(connector)\n+                .build();\n+\n+        // Alternate client also doing caching but staying in a good state\n+        // We use this to do sanity checks and other information gathering\n+        GitHub gitHub2 = getGitHubBuilder().withEndpoint(mockGitHub.apiServer().baseUrl())\n+                .withConnector(new OkHttpConnector(createClient(true)))\n+                .build();\n+\n+        // Create a branch from a known conflicting branch\n+        GHRepository repo = getRepository(gitHub);\n+\n+        String baseSha = repo.getRef(\"heads/test/unmergeable\").getObject().getSha();\n+\n+        GHRef ref;\n+        ref = repo.createRef(\"refs/\" + testRefName, baseSha);\n+\n+        // Verify we can query the created ref\n+        ref = repo.getRef(testRefName);\n+\n+        // Verify we can query the created ref from cache\n+        ref = repo.getRef(testRefName);\n+\n+        // Delete the ref\n+        ref.delete();\n+\n+        // This is just to show this isn't a race condition\n+        Thread.sleep(2000);\n+\n+        // Try to get the non-existant ref (GHFileNotFound)\n+        try {\n+            repo.getRef(testRefName);\n+            fail();\n+        } catch (GHFileNotFoundException e) {\n+            // expected\n+\n+            // FYI: Querying again when the item is actually not present does not produce a 304\n+            // It produces another 404,\n+            // Try to get the non-existant ref (GHFileNotFound)\n+            try {\n+                repo.getRef(testRefName);\n+                fail();\n+            } catch (GHFileNotFoundException ex) {\n+                // expected\n+            }\n+\n+        }\n+\n+        // This is just to show this isn't a race condition\n+        Thread.sleep(2000);\n+\n+        ref = repo.createRef(\"refs/\" + testRefName, baseSha);\n+\n+        // Verify ref exists and can be queried from uncached connection\n+        // Expected: success\n+        // Actual: still GHFileNotFound due to caching: GitHub incorrectly returns 304\n+        // even though contents of the ref have changed.\n+        //\n+        // There source of this issue seems to be that 404's do not return an ETAG,\n+        // so the cache falls back to using \"If-Modified-Since\" which is erroneously returns a 304.\n+        //\n+        // NOTE: This is even worse than you might think: 404 responses don't return an ETAG, but 304 responses do.\n+        //\n+        // Due erroneous 304 returned from \"If-Modified-Since\", the ETAG returned by the first 304", "originalCommit": "72aedbb76c8a212e654c211a193625e311b452c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3b2fdc4fc009824ae78a8d2755d80a22e6181b9", "chunk": "diff --git a/src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java b/src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java\nindex 4484fb6ca..7cdc211d3 100644\n--- a/src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java\n+++ b/src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java\n\n@@ -64,10 +64,10 @@ public class GitHubCachingTest extends AbstractGitHubWireMockTest {\n         OkHttpConnector_Cache_MaxAgeDefault_Zero_GitHubRef_Error();\n     }\n \n-    @Ignore(\"The wiremock snapshot files attached to this test method show what was sent to and from the server during a run, but they aren't re-runnable - not templated.\")\n+//        @Ignore(\"The wiremock snapshot files attached to this test method show what was sent to and from the server during a run, but they aren't re-runnable - not templated.\")\n     @Test\n     public void OkHttpConnector_Cache_MaxAgeDefault_Zero_GitHubRef_Error() throws Exception {\n-\n+        // ISSUE #669\n         // requireProxy(\"For clarity. Will switch to snapshot shortly.\");\n         // snapshotNotAllowed();\n \n"}}, {"oid": "90d7fea7aa19b7923ac51f03c6a52e8d70044582", "url": "https://github.com/hub4j/github-api/commit/90d7fea7aa19b7923ac51f03c6a52e8d70044582", "message": "Workaround for #669 - remove If-Modified-Since header\n\nThis is a first cut at working round #669.  It is hacky as hell and I hate it.", "committedDate": "2020-01-17T22:46:10Z", "type": "commit"}, {"oid": "61e8dd09d646c6380eaed52358f3ed751127a327", "url": "https://github.com/hub4j/github-api/commit/61e8dd09d646c6380eaed52358f3ed751127a327", "message": "Revert \"Workaround for #669 - remove If-Modified-Since header\"\n\nThis reverts commit 90d7fea7aa19b7923ac51f03c6a52e8d70044582.", "committedDate": "2020-01-17T22:46:31Z", "type": "commit"}, {"oid": "16d34f3268a6c52c616a40de3d069a49ca1da361", "url": "https://github.com/hub4j/github-api/commit/16d34f3268a6c52c616a40de3d069a49ca1da361", "message": "Workaround for #669 - retry with cache overridden\n\nThis is much more reasonable way to address this issue.\nWhen the Requester detects a 404 response with an ETag (only happpens when the server's 304\nis bogus and would cause cache corruption), try the query again with new request header\nthat forces the server to not return 304 and return new data instead.\n\nThs solution is transparent to users of this library and autmatically fixes a situation that\nwas causing cache corruption. If GitHub ever fixes the issue and begins providing accurate\nETags to their 404 responses, this will result in two calls being made for each 404 response.\nWhile that would be unfortunate, it would still be better than the current situation.", "committedDate": "2020-01-17T23:53:55Z", "type": "commit"}, {"oid": "f3b2fdc4fc009824ae78a8d2755d80a22e6181b9", "url": "https://github.com/hub4j/github-api/commit/f3b2fdc4fc009824ae78a8d2755d80a22e6181b9", "message": "Update test and resources using new workaround", "committedDate": "2020-01-17T23:53:55Z", "type": "commit"}, {"oid": "839f096f39bdc7519247ec279422bd6141b0c42e", "url": "https://github.com/hub4j/github-api/commit/839f096f39bdc7519247ec279422bd6141b0c42e", "message": "Add caching error test for OkHttp", "committedDate": "2020-01-17T23:57:14Z", "type": "commit"}, {"oid": "06334bf2728a7b674c7431321000bd1077ce9c04", "url": "https://github.com/hub4j/github-api/commit/06334bf2728a7b674c7431321000bd1077ce9c04", "message": "Template data files to make okhttp3 test runnable in CI", "committedDate": "2020-01-18T00:58:54Z", "type": "commit"}, {"oid": "54f4152f89d5a35e0ab1a40110323f0a4e5dec81", "url": "https://github.com/hub4j/github-api/commit/54f4152f89d5a35e0ab1a40110323f0a4e5dec81", "message": "Template data files to make okhttp2 test runnable in CI\n\nOkHttp2 doesn't invalidate caches sometimes when it probably should", "committedDate": "2020-01-18T01:00:40Z", "type": "commit"}, {"oid": "3479e4f2fdd8c40d48340d595064d34da46f80d1", "url": "https://github.com/hub4j/github-api/commit/3479e4f2fdd8c40d48340d595064d34da46f80d1", "message": "Clean up and formatting", "committedDate": "2020-01-18T01:05:45Z", "type": "commit"}, {"oid": "3479e4f2fdd8c40d48340d595064d34da46f80d1", "url": "https://github.com/hub4j/github-api/commit/3479e4f2fdd8c40d48340d595064d34da46f80d1", "message": "Clean up and formatting", "committedDate": "2020-01-18T01:05:45Z", "type": "forcePushed"}, {"oid": "63ee87878929999093bb06f05af927cdaae48d5a", "url": "https://github.com/hub4j/github-api/commit/63ee87878929999093bb06f05af927cdaae48d5a", "message": "Merge remote-tracking branch 'github-api/master' into task/cache-error-test", "committedDate": "2020-01-18T01:27:12Z", "type": "commit"}, {"oid": "66a180346ebfacec479c5d332f3d33ee1d1db1d3", "url": "https://github.com/hub4j/github-api/commit/66a180346ebfacec479c5d332f3d33ee1d1db1d3", "message": "Improve commenting of workaround", "committedDate": "2020-01-18T01:52:50Z", "type": "commit"}, {"oid": "66a180346ebfacec479c5d332f3d33ee1d1db1d3", "url": "https://github.com/hub4j/github-api/commit/66a180346ebfacec479c5d332f3d33ee1d1db1d3", "message": "Improve commenting of workaround", "committedDate": "2020-01-18T01:52:50Z", "type": "forcePushed"}]}