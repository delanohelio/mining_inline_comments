{"pr_number": 977, "pr_title": "Include assets directly in GHRelease", "pr_createdAt": "2020-11-11T18:29:07Z", "pr_url": "https://github.com/hub4j/github-api/pull/977", "timeline": [{"oid": "c74fbbe1fd4291260fa39092537f6f1905dd554e", "url": "https://github.com/hub4j/github-api/commit/c74fbbe1fd4291260fa39092537f6f1905dd554e", "message": "Include assets directly in GHRelease\n\nResolves #528\n\nInstead of doing a separate request to fetch the assets associated with\na release this keeps a local list of the assets that are part of the\nlist releases endpoint.\n\nSee https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#list-releases", "committedDate": "2020-11-11T18:16:34Z", "type": "commit"}, {"oid": "d881bf6504fede31441345bd40a2614f4a56e8bc", "url": "https://github.com/hub4j/github-api/commit/d881bf6504fede31441345bd40a2614f4a56e8bc", "message": "Bring back previous semantic of `getAssets()` as `fetchAssets()`\n\nI don't know a better name for this, and I also don't know whether this\nshould be an option or not.\nThe life cycle tests use the feature that retrieving the assets from a\nrelease actually does a roundtrip to Github and sends another request.\nThis indicates that re-purposing `getAssets()` to be the cached access\nmight cause problems on consumers that potentially rely on this\nassumption, too.", "committedDate": "2020-11-11T18:49:58Z", "type": "commit"}, {"oid": "98b067937a62b91e58631d303ba56266a8baf74b", "url": "https://github.com/hub4j/github-api/commit/98b067937a62b91e58631d303ba56266a8baf74b", "message": "Make changes backwards compatible\n\nAdd '@Deprecation' and '@Preview' annotations to make the changes\nbackwards compatible and prepare for a transition to the cached behavior\nas default.\nThis explicitly leaves the variant for re-fetching assets under a\ndifferent name.", "committedDate": "2020-11-17T16:16:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NDQxMA==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525294410", "bodyText": "I left this in as I think this is a quite handy featuer to have (easily run queries to be up to date, if required). If you would rather see this removed please let me know. In that case, the test cases should also be revisitied to cover the same use case with just the new, cached behavior.", "author": "skaldarnar", "createdAt": "2020-11-17T16:20:59Z", "path": "src/main/java/org/kohsuke/github/GHRelease.java", "diffHunk": "@@ -249,15 +251,44 @@ public GHAsset uploadAsset(String filename, InputStream stream, String contentTy\n     }\n \n     /**\n-     * Gets assets.\n+     * Get the cached assets.\n+     *\n+     * @return the assets\n+     *\n+     * @deprecated This should be the default behavior of {@link #getAssets()} in a future release. This method is\n+     *             introduced in addition to enable a transition to using cached asset information while keeping the\n+     *             existing logic in place for backwards compatibility.\n+     */\n+    @Deprecated\n+    @Preview\n+    public List<GHAsset> getCachedAssets() {\n+        return assets;\n+    }\n+\n+    /**\n+     * Re-fetch the assets of this release.\n      *\n      * @return the assets\n      * @throws IOException\n      *             the io exception\n+     * @deprecated The behavior of this method will change in a future release. It will then provide cached assets as\n+     *             provided by {@link #getCachedAssets()}. Use {@link #fetchAssets()} instead to fetch up-to-date\n+     *             information of assets.\n      */\n+    @Deprecated\n     public List<GHAsset> getAssets() throws IOException {\n-        Requester builder = owner.root.createRequest();\n+        return fetchAssets();\n+    }\n \n+    /**\n+     * Re-fetch the assets of this release.\n+     *\n+     * @return the assets\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public List<GHAsset> fetchAssets() throws IOException {", "originalCommit": "98b067937a62b91e58631d303ba56266a8baf74b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNDAyMw==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525404023", "bodyText": "This seems reasonable. But since we're fetching, let's return a PagedIterable for more flexibility. This also means it makes sense to use the list* verb like we do on all other methods that return PagedIterable.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<GHAsset> fetchAssets() throws IOException {\n          \n          \n            \n                    public PagedIterable<GHAsset> listAssets() throws IOException {", "author": "bitwiseman", "createdAt": "2020-11-17T18:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NDQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "2676ef2b7379d9ced9d57535efcd3706252d3ddb", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GHRelease.java b/src/main/java/org/kohsuke/github/GHRelease.java\nindex ddf9b9e5a..9465b2076 100644\n--- a/src/main/java/org/kohsuke/github/GHRelease.java\n+++ b/src/main/java/org/kohsuke/github/GHRelease.java\n\n@@ -272,12 +272,12 @@ public class GHRelease extends GHObject {\n      * @throws IOException\n      *             the io exception\n      * @deprecated The behavior of this method will change in a future release. It will then provide cached assets as\n-     *             provided by {@link #getCachedAssets()}. Use {@link #fetchAssets()} instead to fetch up-to-date\n+     *             provided by {@link #getCachedAssets()}. Use {@link #listAssets()} instead to fetch up-to-date\n      *             information of assets.\n      */\n     @Deprecated\n     public List<GHAsset> getAssets() throws IOException {\n-        return fetchAssets();\n+        return listAssets().toList();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTE4NQ==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525395185", "bodyText": "This seems strange.  If the asset was cached in the release before deletion, it should be there after was well - that cache shouldn't change.   Perhaps add an assert that the asset if present in getCachedAssets() before deletion?", "author": "bitwiseman", "createdAt": "2020-11-17T18:35:24Z", "path": "src/test/java/org/kohsuke/github/LifecycleTest.java", "diffHunk": "@@ -45,18 +45,20 @@ public void testCreateRepository() throws IOException {\n \n     private void updateAsset(GHRelease release, GHAsset asset) throws IOException {\n         asset.setLabel(\"test label\");\n-        assertEquals(\"test label\", release.getAssets().get(0).getLabel());\n+        assertEquals(\"test label\", release.fetchAssets().get(0).getLabel());\n     }\n \n     private void deleteAsset(GHRelease release, GHAsset asset) throws IOException {\n         asset.delete();\n-        assertEquals(0, release.getAssets().size());\n+        assertEquals(0, release.getCachedAssets().size());", "originalCommit": "98b067937a62b91e58631d303ba56266a8baf74b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MzMzNQ==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525553335", "bodyText": "The confusing part here might be that we're still dealing with the very first GHRelease from this test - even before we actually created an asset for it.\nI'll take another look at the tests and see if I can add something in addition to make this clearer", "author": "skaldarnar", "createdAt": "2020-11-17T22:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MjU0Mw==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525582543", "bodyText": "Ah, I get it now.", "author": "bitwiseman", "createdAt": "2020-11-17T23:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDgzMA==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r526400830", "bodyText": "I tried to figure out how this whole wiremock setup works - and gave up \ud83d\ude15 To be able to add an assertion like the one you mentioned I'd need to re-fetch the intermediate state of the release, e.g.,\n// test that asset upload works\nGHAsset asset = uploadAsset(release);\n// get new \"snapshot\" of the release with cached asset\nGHRelease releaseWithAsset = repository.getReleases().get(0);\n// update the asset, check before and after with the new snapshot\nupdateAsset(releaseWithAsset, asset);\n// repeat same pattern for 'delete'\nHowever, it looks like the wiremocks do not account for additional calls to repository.getReleases().get(0) I suppose, at least they obviously don't return the new state of the release...\nIf I should change something in these tests I'd appreciate your help... \ud83d\ude44", "author": "skaldarnar", "createdAt": "2020-11-18T20:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwODU2NA==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r526408564", "bodyText": "I need to make it easier to re-record tests, but in the meanwhile here's the instructions:\nhttps://github.com/hub4j/github-api/blob/master/CONTRIBUTING.md#generating-a-new-snapshot\nThe instructions could be better too.  \ud83d\ude22", "author": "bitwiseman", "createdAt": "2020-11-18T20:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwODc5Ng==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r526408796", "bodyText": "But it is okay to leave this as it is.", "author": "bitwiseman", "createdAt": "2020-11-18T20:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5NTE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2676ef2b7379d9ced9d57535efcd3706252d3ddb", "chunk": "diff --git a/src/test/java/org/kohsuke/github/LifecycleTest.java b/src/test/java/org/kohsuke/github/LifecycleTest.java\nindex d5a03823c..d7932fffe 100644\n--- a/src/test/java/org/kohsuke/github/LifecycleTest.java\n+++ b/src/test/java/org/kohsuke/github/LifecycleTest.java\n\n@@ -45,7 +45,7 @@ public class LifecycleTest extends AbstractGitHubWireMockTest {\n \n     private void updateAsset(GHRelease release, GHAsset asset) throws IOException {\n         asset.setLabel(\"test label\");\n-        assertEquals(\"test label\", release.fetchAssets().get(0).getLabel());\n+        assertEquals(\"test label\", release.getAssets().get(0).getLabel());\n     }\n \n     private void deleteAsset(GHRelease release, GHAsset asset) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwOTMwMA==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525409300", "bodyText": "API design question for you: Thinking about it a bit more, what do you think about using a bare property names for field access?  I don't think this needs changing for this change, but I'm thinking about what this should look like in v2.\n    public List<GHAsset> assets() {", "author": "bitwiseman", "createdAt": "2020-11-17T18:57:25Z", "path": "src/main/java/org/kohsuke/github/GHRelease.java", "diffHunk": "@@ -249,15 +251,44 @@ public GHAsset uploadAsset(String filename, InputStream stream, String contentTy\n     }\n \n     /**\n-     * Gets assets.\n+     * Get the cached assets.\n+     *\n+     * @return the assets\n+     *\n+     * @deprecated This should be the default behavior of {@link #getAssets()} in a future release. This method is\n+     *             introduced in addition to enable a transition to using cached asset information while keeping the\n+     *             existing logic in place for backwards compatibility.\n+     */\n+    @Deprecated\n+    @Preview\n+    public List<GHAsset> getCachedAssets() {", "originalCommit": "98b067937a62b91e58631d303ba56266a8baf74b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxOTI4Mw==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525519283", "bodyText": "I would really like this kind of simplified naming \ud83d\udc4d \ud83e\udd13", "author": "skaldarnar", "createdAt": "2020-11-17T20:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwOTMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "2676ef2b7379d9ced9d57535efcd3706252d3ddb", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GHRelease.java b/src/main/java/org/kohsuke/github/GHRelease.java\nindex ddf9b9e5a..9465b2076 100644\n--- a/src/main/java/org/kohsuke/github/GHRelease.java\n+++ b/src/main/java/org/kohsuke/github/GHRelease.java\n\n@@ -272,12 +272,12 @@ public class GHRelease extends GHObject {\n      * @throws IOException\n      *             the io exception\n      * @deprecated The behavior of this method will change in a future release. It will then provide cached assets as\n-     *             provided by {@link #getCachedAssets()}. Use {@link #fetchAssets()} instead to fetch up-to-date\n+     *             provided by {@link #getCachedAssets()}. Use {@link #listAssets()} instead to fetch up-to-date\n      *             information of assets.\n      */\n     @Deprecated\n     public List<GHAsset> getAssets() throws IOException {\n-        return fetchAssets();\n+        return listAssets().toList();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMDA2OA==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525410068", "bodyText": "Given we change the name and return type of fetchAssets():\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return fetchAssets();\n          \n          \n            \n                    return listAssets().toList();", "author": "bitwiseman", "createdAt": "2020-11-17T18:58:40Z", "path": "src/main/java/org/kohsuke/github/GHRelease.java", "diffHunk": "@@ -249,15 +251,44 @@ public GHAsset uploadAsset(String filename, InputStream stream, String contentTy\n     }\n \n     /**\n-     * Gets assets.\n+     * Get the cached assets.\n+     *\n+     * @return the assets\n+     *\n+     * @deprecated This should be the default behavior of {@link #getAssets()} in a future release. This method is\n+     *             introduced in addition to enable a transition to using cached asset information while keeping the\n+     *             existing logic in place for backwards compatibility.\n+     */\n+    @Deprecated\n+    @Preview\n+    public List<GHAsset> getCachedAssets() {\n+        return assets;\n+    }\n+\n+    /**\n+     * Re-fetch the assets of this release.\n      *\n      * @return the assets\n      * @throws IOException\n      *             the io exception\n+     * @deprecated The behavior of this method will change in a future release. It will then provide cached assets as\n+     *             provided by {@link #getCachedAssets()}. Use {@link #fetchAssets()} instead to fetch up-to-date\n+     *             information of assets.\n      */\n+    @Deprecated\n     public List<GHAsset> getAssets() throws IOException {\n-        Requester builder = owner.root.createRequest();\n+        return fetchAssets();", "originalCommit": "98b067937a62b91e58631d303ba56266a8baf74b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2676ef2b7379d9ced9d57535efcd3706252d3ddb", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GHRelease.java b/src/main/java/org/kohsuke/github/GHRelease.java\nindex ddf9b9e5a..9465b2076 100644\n--- a/src/main/java/org/kohsuke/github/GHRelease.java\n+++ b/src/main/java/org/kohsuke/github/GHRelease.java\n\n@@ -272,12 +272,12 @@ public class GHRelease extends GHObject {\n      * @throws IOException\n      *             the io exception\n      * @deprecated The behavior of this method will change in a future release. It will then provide cached assets as\n-     *             provided by {@link #getCachedAssets()}. Use {@link #fetchAssets()} instead to fetch up-to-date\n+     *             provided by {@link #getCachedAssets()}. Use {@link #listAssets()} instead to fetch up-to-date\n      *             information of assets.\n      */\n     @Deprecated\n     public List<GHAsset> getAssets() throws IOException {\n-        return fetchAssets();\n+        return listAssets().toList();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMTI2MQ==", "url": "https://github.com/hub4j/github-api/pull/977#discussion_r525411261", "bodyText": "Keep the test pointing to the deprecated method since it wraps the new method and we want to show the behavior hasn't changed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(\"test label\", release.fetchAssets().get(0).getLabel());\n          \n          \n            \n                    assertEquals(\"test label\", release.getAssets().get(0).getLabel());", "author": "bitwiseman", "createdAt": "2020-11-17T19:00:35Z", "path": "src/test/java/org/kohsuke/github/LifecycleTest.java", "diffHunk": "@@ -45,18 +45,20 @@ public void testCreateRepository() throws IOException {\n \n     private void updateAsset(GHRelease release, GHAsset asset) throws IOException {\n         asset.setLabel(\"test label\");\n-        assertEquals(\"test label\", release.getAssets().get(0).getLabel());\n+        assertEquals(\"test label\", release.fetchAssets().get(0).getLabel());", "originalCommit": "98b067937a62b91e58631d303ba56266a8baf74b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2676ef2b7379d9ced9d57535efcd3706252d3ddb", "chunk": "diff --git a/src/test/java/org/kohsuke/github/LifecycleTest.java b/src/test/java/org/kohsuke/github/LifecycleTest.java\nindex d5a03823c..d7932fffe 100644\n--- a/src/test/java/org/kohsuke/github/LifecycleTest.java\n+++ b/src/test/java/org/kohsuke/github/LifecycleTest.java\n\n@@ -45,7 +45,7 @@ public class LifecycleTest extends AbstractGitHubWireMockTest {\n \n     private void updateAsset(GHRelease release, GHAsset asset) throws IOException {\n         asset.setLabel(\"test label\");\n-        assertEquals(\"test label\", release.fetchAssets().get(0).getLabel());\n+        assertEquals(\"test label\", release.getAssets().get(0).getLabel());\n     }\n \n     private void deleteAsset(GHRelease release, GHAsset asset) throws IOException {\n"}}, {"oid": "2676ef2b7379d9ced9d57535efcd3706252d3ddb", "url": "https://github.com/hub4j/github-api/commit/2676ef2b7379d9ced9d57535efcd3706252d3ddb", "message": "rename 'fetchAssets' to 'listAssets' and return PagedIterable", "committedDate": "2020-11-18T18:27:31Z", "type": "commit"}, {"oid": "68a82be6c43ab42018a147ac8e721c4cd3979452", "url": "https://github.com/hub4j/github-api/commit/68a82be6c43ab42018a147ac8e721c4cd3979452", "message": "rename 'getCachedAssets' to 'assets' (bare property name as getter))", "committedDate": "2020-11-18T18:28:27Z", "type": "commit"}, {"oid": "5d796d1f791a1de3013ec7d77595455cad258a00", "url": "https://github.com/hub4j/github-api/commit/5d796d1f791a1de3013ec7d77595455cad258a00", "message": "revert unwanted assertion change", "committedDate": "2020-11-18T20:24:58Z", "type": "commit"}, {"oid": "79c7dd9ecfe6d80a51cde5d8573fda08ed8ade05", "url": "https://github.com/hub4j/github-api/commit/79c7dd9ecfe6d80a51cde5d8573fda08ed8ade05", "message": "fix formatting", "committedDate": "2020-11-18T20:31:42Z", "type": "commit"}]}