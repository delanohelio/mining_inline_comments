{"pr_number": 983, "pr_title": "Add arch test for preview API usage", "pr_createdAt": "2020-11-25T18:18:17Z", "pr_url": "https://github.com/hub4j/github-api/pull/983", "timeline": [{"oid": "7588267743d544a7281ce677f4c09dee0f4deaa3", "url": "https://github.com/hub4j/github-api/commit/7588267743d544a7281ce677f4c09dee0f4deaa3", "message": "Add arch test for preview API usage", "committedDate": "2020-11-25T18:16:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1NTQ5NA==", "url": "https://github.com/hub4j/github-api/pull/983#discussion_r530655494", "bodyText": "\"classFiles\" could be a static variable.\nThen I would add this:\n    @BeforeClass\n    public static void beforeClass() {\n        assertTrue(classFiles.size() > 0);\n    }", "author": "sullis", "createdAt": "2020-11-25T21:39:37Z", "path": "src/test/java/org/kohsuke/github/ArchTests.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kohsuke.github;\n+\n+import com.tngtech.archunit.core.domain.JavaClass;\n+import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.domain.properties.HasAnnotations;\n+import com.tngtech.archunit.core.domain.properties.HasName.AndFullName;\n+import com.tngtech.archunit.core.importer.ClassFileImporter;\n+import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchCondition;\n+import com.tngtech.archunit.lang.ArchRule;\n+import com.tngtech.archunit.lang.ConditionEvents;\n+import com.tngtech.archunit.lang.SimpleConditionEvent;\n+import org.junit.Test;\n+\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\n+\n+public class ArchTests {\n+\n+    private final JavaClasses classFiles = new ClassFileImporter()", "originalCommit": "7588267743d544a7281ce677f4c09dee0f4deaa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "459d1b4f5629182d54454097f96a42e5c6fd746f", "chunk": "diff --git a/src/test/java/org/kohsuke/github/ArchTests.java b/src/test/java/org/kohsuke/github/ArchTests.java\nindex 420d558bd..662ee7642 100644\n--- a/src/test/java/org/kohsuke/github/ArchTests.java\n+++ b/src/test/java/org/kohsuke/github/ArchTests.java\n\n@@ -1,56 +1,58 @@\n package org.kohsuke.github;\n \n-import com.tngtech.archunit.core.domain.JavaClass;\n import com.tngtech.archunit.core.domain.JavaClasses;\n-import com.tngtech.archunit.core.domain.properties.HasAnnotations;\n-import com.tngtech.archunit.core.domain.properties.HasName.AndFullName;\n import com.tngtech.archunit.core.importer.ClassFileImporter;\n import com.tngtech.archunit.core.importer.ImportOption;\n-import com.tngtech.archunit.lang.ArchCondition;\n import com.tngtech.archunit.lang.ArchRule;\n-import com.tngtech.archunit.lang.ConditionEvents;\n-import com.tngtech.archunit.lang.SimpleConditionEvent;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.fields;\n+import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n+import static org.junit.Assert.assertTrue;\n \n public class ArchTests {\n \n-    private final JavaClasses classFiles = new ClassFileImporter()\n+    private static final JavaClasses classFiles = new ClassFileImporter()\n             .withImportOption(new ImportOption.DoNotIncludeTests())\n             .withImportOption(new ImportOption.DoNotIncludeJars())\n             .importPackages(\"org.kohsuke.github\");\n \n+    @BeforeClass\n+    public static void beforeClass() {\n+        assertTrue(classFiles.size() > 0);\n+    }\n+\n     @Test\n     public void testPreviewsAreFlaggedAsDeprecated() {\n \n-        String description = \"annotate all preview APIs as @Deprecated until they are promoted to stable\";\n-\n-        ArchRule rule = classes().should(new ArchCondition<JavaClass>(description) {\n-\n-            @Override\n-            public void check(final JavaClass targetClazz, final ConditionEvents events) {\n-                checkForPreviewAnnotation(targetClazz, events);\n-                targetClazz.getAllMethods().forEach(method -> {\n-                    checkForPreviewAnnotation(method, events);\n-                });\n-            }\n-\n-            <T extends HasAnnotations<T> & AndFullName> void checkForPreviewAnnotation(T codeTarget,\n-                    ConditionEvents events) {\n-\n-                if (codeTarget.tryGetAnnotationOfType(Preview.class).isPresent()\n-                        && !codeTarget.tryGetAnnotationOfType(Deprecated.class).isPresent()) {\n-\n-                    String message = codeTarget.getFullName()\n-                            + \" uses a preview API and is missing the '@Deprecated' annotation.\";\n-\n-                    events.add(new SimpleConditionEvent(codeTarget, false, message));\n-                }\n-            }\n-        });\n-\n-        rule.check(classFiles);\n+        String reason = \"all preview APIs must be annotated as @Deprecated until they are promoted to stable\";\n+\n+        ArchRule classRule = classes().that()\n+                .areAnnotatedWith(Preview.class)\n+                .should()\n+                .beAnnotatedWith(Deprecated.class)\n+                .because(reason);\n+\n+        ArchRule methodRule = methods().that()\n+                .areAnnotatedWith(Preview.class)\n+                .should()\n+                .beAnnotatedWith(Deprecated.class)\n+                .because(reason);\n+\n+        ArchRule enumFieldsRule = fields().that()\n+                .areDeclaredInClassesThat()\n+                .areEnums()\n+                .and()\n+                .areAnnotatedWith(Preview.class)\n+                .should()\n+                .beAnnotatedWith(Deprecated.class)\n+                .because(reason);\n+\n+        classRule.check(classFiles);\n+        enumFieldsRule.check(classFiles);\n+        methodRule.check(classFiles);\n \n     }\n }\n"}}, {"oid": "459d1b4f5629182d54454097f96a42e5c6fd746f", "url": "https://github.com/hub4j/github-api/commit/459d1b4f5629182d54454097f96a42e5c6fd746f", "message": "update arch tests to add enum checks", "committedDate": "2020-12-15T17:41:02Z", "type": "commit"}, {"oid": "459d1b4f5629182d54454097f96a42e5c6fd746f", "url": "https://github.com/hub4j/github-api/commit/459d1b4f5629182d54454097f96a42e5c6fd746f", "message": "update arch tests to add enum checks", "committedDate": "2020-12-15T17:41:02Z", "type": "forcePushed"}, {"oid": "5888efcaef1dcf985f3780a6ac254686389a81c5", "url": "https://github.com/hub4j/github-api/commit/5888efcaef1dcf985f3780a6ac254686389a81c5", "message": "Merge branch 'master' into add-preview-arch-rules", "committedDate": "2020-12-15T17:41:51Z", "type": "commit"}]}