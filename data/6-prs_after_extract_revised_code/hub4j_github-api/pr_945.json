{"pr_number": 945, "pr_title": "Feat/credential provider refresh", "pr_createdAt": "2020-09-25T10:03:53Z", "pr_url": "https://github.com/hub4j/github-api/pull/945", "timeline": [{"oid": "4688870984ca44f25a0544ca8cfb500fb9db2e5f", "url": "https://github.com/hub4j/github-api/commit/4688870984ca44f25a0544ca8cfb500fb9db2e5f", "message": "add CredentialProvider interface", "committedDate": "2020-09-24T07:01:52Z", "type": "commit"}, {"oid": "3f021f9552536be077939f201b6302a50970df12", "url": "https://github.com/hub4j/github-api/commit/3f021f9552536be077939f201b6302a50970df12", "message": "lint CredentialProvider", "committedDate": "2020-09-25T08:56:07Z", "type": "commit"}, {"oid": "85d2d974e7d7e7842ce874907135d1859ebcb8eb", "url": "https://github.com/hub4j/github-api/commit/85d2d974e7d7e7842ce874907135d1859ebcb8eb", "message": "add ImmutableCredentialProvider\n\nThis is basically a class that will hold an authorization\nstring, returning the same value all the time", "committedDate": "2020-09-25T10:01:33Z", "type": "commit"}, {"oid": "0e4cd06137f61fc85953368f261ed100cbe654c0", "url": "https://github.com/hub4j/github-api/commit/0e4cd06137f61fc85953368f261ed100cbe654c0", "message": "GitHubClient uses CredentialProvider, instead of encodedAuthorization (string)", "committedDate": "2020-09-25T10:02:14Z", "type": "commit"}, {"oid": "05863acbcd111cd187f8f54d43394335c6a2a99d", "url": "https://github.com/hub4j/github-api/commit/05863acbcd111cd187f8f54d43394335c6a2a99d", "message": "Merge branch 'master' into feat/credential-provider-refresh", "committedDate": "2020-09-25T10:05:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTA2Nw==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r495209067", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.credentialProvider = new ImmutableCredentialProvider(String.format(\"token %s\", oauthAccessToken));\n          \n          \n            \n                        this.credentialProvider = ImmutableCredentialProvider.fromOAuthToken(String.format(\"token %s\", oauthAccessToken));", "author": "bitwiseman", "createdAt": "2020-09-25T20:12:37Z", "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -112,25 +108,26 @@\n         this.connector = connector;\n \n         if (oauthAccessToken != null) {\n-            encodedAuthorization = \"token \" + oauthAccessToken;\n+            this.credentialProvider = new ImmutableCredentialProvider(String.format(\"token %s\", oauthAccessToken));", "originalCommit": "05863acbcd111cd187f8f54d43394335c6a2a99d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMzYyOA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r495213628", "bodyText": "I would also suggest moving all these into GitHubBuilder and have a method GitHubBuilder.withCredentialProvider(CredentialProvider) which can be internal for now.  Then this constructor just sets this.credentialProvider = credentialProvider pass from the builder.", "author": "bitwiseman", "createdAt": "2020-09-25T20:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e308e5ed57715e2fdce3c38410a1e3ca4c18c6ff", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GitHubClient.java b/src/main/java/org/kohsuke/github/GitHubClient.java\nindex 8db01f21b..4100aad73 100644\n--- a/src/main/java/org/kohsuke/github/GitHubClient.java\n+++ b/src/main/java/org/kohsuke/github/GitHubClient.java\n\n@@ -108,18 +108,14 @@ abstract class GitHubClient {\n         this.connector = connector;\n \n         if (oauthAccessToken != null) {\n-            this.credentialProvider = new ImmutableCredentialProvider(String.format(\"token %s\", oauthAccessToken));\n+            this.credentialProvider =ImmutableCredentialProvider.fromOauthToken(oauthAccessToken);\n         } else {\n             if (jwtToken != null) {\n-                this.credentialProvider = new ImmutableCredentialProvider(String.format(\"Bearer %s\", jwtToken));\n+                this.credentialProvider =ImmutableCredentialProvider.fromJwtToken(jwtToken);\n             } else if (password != null) {\n-                String authorization = (login + ':' + password);\n-                String charsetName = StandardCharsets.UTF_8.name();\n-                String encodedAuthorization = \"Basic \"\n-                        + Base64.getEncoder().encodeToString(authorization.getBytes(charsetName));\n-                this.credentialProvider = new ImmutableCredentialProvider(encodedAuthorization);\n+                this.credentialProvider = ImmutableCredentialProvider.fromLoginAndPassword(login,password);\n             } else {// anonymous access\n-                this.credentialProvider = new ImmutableCredentialProvider(null);\n+                this.credentialProvider = ImmutableCredentialProvider.ANONYMOUS;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTY4OQ==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r495209689", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String authorization = (login + ':' + password);\n          \n          \n            \n                            String charsetName = StandardCharsets.UTF_8.name();\n          \n          \n            \n                            encodedAuthorization = \"Basic \"\n          \n          \n            \n                            String encodedAuthorization = \"Basic \"\n          \n          \n            \n                                    + Base64.getEncoder().encodeToString(authorization.getBytes(charsetName));\n          \n          \n            \n                            this.credentialProvider = new ImmutableCredentialProvider(encodedAuthorization);\n          \n          \n            \n            this.credentialProvider = ImmutableCredentialProvider.fromLoginAndPassword(login, password);", "author": "bitwiseman", "createdAt": "2020-09-25T20:14:15Z", "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -112,25 +108,26 @@\n         this.connector = connector;\n \n         if (oauthAccessToken != null) {\n-            encodedAuthorization = \"token \" + oauthAccessToken;\n+            this.credentialProvider = new ImmutableCredentialProvider(String.format(\"token %s\", oauthAccessToken));\n         } else {\n             if (jwtToken != null) {\n-                encodedAuthorization = \"Bearer \" + jwtToken;\n+                this.credentialProvider = new ImmutableCredentialProvider(String.format(\"Bearer %s\", jwtToken));\n             } else if (password != null) {\n                 String authorization = (login + ':' + password);\n                 String charsetName = StandardCharsets.UTF_8.name();\n-                encodedAuthorization = \"Basic \"\n+                String encodedAuthorization = \"Basic \"\n                         + Base64.getEncoder().encodeToString(authorization.getBytes(charsetName));\n+                this.credentialProvider = new ImmutableCredentialProvider(encodedAuthorization);", "originalCommit": "05863acbcd111cd187f8f54d43394335c6a2a99d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e308e5ed57715e2fdce3c38410a1e3ca4c18c6ff", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GitHubClient.java b/src/main/java/org/kohsuke/github/GitHubClient.java\nindex 8db01f21b..4100aad73 100644\n--- a/src/main/java/org/kohsuke/github/GitHubClient.java\n+++ b/src/main/java/org/kohsuke/github/GitHubClient.java\n\n@@ -108,18 +108,14 @@ abstract class GitHubClient {\n         this.connector = connector;\n \n         if (oauthAccessToken != null) {\n-            this.credentialProvider = new ImmutableCredentialProvider(String.format(\"token %s\", oauthAccessToken));\n+            this.credentialProvider =ImmutableCredentialProvider.fromOauthToken(oauthAccessToken);\n         } else {\n             if (jwtToken != null) {\n-                this.credentialProvider = new ImmutableCredentialProvider(String.format(\"Bearer %s\", jwtToken));\n+                this.credentialProvider =ImmutableCredentialProvider.fromJwtToken(jwtToken);\n             } else if (password != null) {\n-                String authorization = (login + ':' + password);\n-                String charsetName = StandardCharsets.UTF_8.name();\n-                String encodedAuthorization = \"Basic \"\n-                        + Base64.getEncoder().encodeToString(authorization.getBytes(charsetName));\n-                this.credentialProvider = new ImmutableCredentialProvider(encodedAuthorization);\n+                this.credentialProvider = ImmutableCredentialProvider.fromLoginAndPassword(login,password);\n             } else {// anonymous access\n-                this.credentialProvider = new ImmutableCredentialProvider(null);\n+                this.credentialProvider = ImmutableCredentialProvider.ANONYMOUS;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMDMwNw==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r495210307", "bodyText": "Create a static final instance for this.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.credentialProvider = new ImmutableCredentialProvider(null);\n          \n          \n            \n                            this.credentialProvider = ImmutableCredentialProvider.ANONYMOUS;", "author": "bitwiseman", "createdAt": "2020-09-25T20:15:42Z", "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -112,25 +108,26 @@\n         this.connector = connector;\n \n         if (oauthAccessToken != null) {\n-            encodedAuthorization = \"token \" + oauthAccessToken;\n+            this.credentialProvider = new ImmutableCredentialProvider(String.format(\"token %s\", oauthAccessToken));\n         } else {\n             if (jwtToken != null) {\n-                encodedAuthorization = \"Bearer \" + jwtToken;\n+                this.credentialProvider = new ImmutableCredentialProvider(String.format(\"Bearer %s\", jwtToken));\n             } else if (password != null) {\n                 String authorization = (login + ':' + password);\n                 String charsetName = StandardCharsets.UTF_8.name();\n-                encodedAuthorization = \"Basic \"\n+                String encodedAuthorization = \"Basic \"\n                         + Base64.getEncoder().encodeToString(authorization.getBytes(charsetName));\n+                this.credentialProvider = new ImmutableCredentialProvider(encodedAuthorization);\n             } else {// anonymous access\n-                encodedAuthorization = null;\n+                this.credentialProvider = new ImmutableCredentialProvider(null);", "originalCommit": "05863acbcd111cd187f8f54d43394335c6a2a99d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e308e5ed57715e2fdce3c38410a1e3ca4c18c6ff", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GitHubClient.java b/src/main/java/org/kohsuke/github/GitHubClient.java\nindex 8db01f21b..4100aad73 100644\n--- a/src/main/java/org/kohsuke/github/GitHubClient.java\n+++ b/src/main/java/org/kohsuke/github/GitHubClient.java\n\n@@ -108,18 +108,14 @@ abstract class GitHubClient {\n         this.connector = connector;\n \n         if (oauthAccessToken != null) {\n-            this.credentialProvider = new ImmutableCredentialProvider(String.format(\"token %s\", oauthAccessToken));\n+            this.credentialProvider =ImmutableCredentialProvider.fromOauthToken(oauthAccessToken);\n         } else {\n             if (jwtToken != null) {\n-                this.credentialProvider = new ImmutableCredentialProvider(String.format(\"Bearer %s\", jwtToken));\n+                this.credentialProvider =ImmutableCredentialProvider.fromJwtToken(jwtToken);\n             } else if (password != null) {\n-                String authorization = (login + ':' + password);\n-                String charsetName = StandardCharsets.UTF_8.name();\n-                String encodedAuthorization = \"Basic \"\n-                        + Base64.getEncoder().encodeToString(authorization.getBytes(charsetName));\n-                this.credentialProvider = new ImmutableCredentialProvider(encodedAuthorization);\n+                this.credentialProvider = ImmutableCredentialProvider.fromLoginAndPassword(login,password);\n             } else {// anonymous access\n-                this.credentialProvider = new ImmutableCredentialProvider(null);\n+                this.credentialProvider = ImmutableCredentialProvider.ANONYMOUS;\n             }\n         }\n \n"}}, {"oid": "43bb6a0dd88e8e7d87c65038cc99ab281655d72f", "url": "https://github.com/hub4j/github-api/commit/43bb6a0dd88e8e7d87c65038cc99ab281655d72f", "message": "Merge branch 'master' into feat/credential-provider-refresh", "committedDate": "2020-09-28T08:02:16Z", "type": "commit"}, {"oid": "a3888e69023eaf01a88cbfe7ddb63a4f774fa151", "url": "https://github.com/hub4j/github-api/commit/a3888e69023eaf01a88cbfe7ddb63a4f774fa151", "message": "add CredentialProvider#ANONYMOUS class and field\n\nThis is basically an implementation of a CredentialProvider\nthat will always authenticate anonymously", "committedDate": "2020-09-28T08:09:54Z", "type": "commit"}, {"oid": "551be49a1ae6f728424172b1cdc1c23d7782136d", "url": "https://github.com/hub4j/github-api/commit/551be49a1ae6f728424172b1cdc1c23d7782136d", "message": "utility methods on ImmutableCredentialProvider\n\nThese methods let us build the most-used cases\nfor static credentials that will never change:\n- JWT credentials\n- Token-based credentials\n- Basic Auth credentials", "committedDate": "2020-09-28T08:43:43Z", "type": "commit"}, {"oid": "7b1b1ca9940387968a9ec7b547e531c606e24874", "url": "https://github.com/hub4j/github-api/commit/7b1b1ca9940387968a9ec7b547e531c606e24874", "message": "ensure that isAnonymous() correctly handles IOException", "committedDate": "2020-09-28T10:18:22Z", "type": "commit"}, {"oid": "e308e5ed57715e2fdce3c38410a1e3ca4c18c6ff", "url": "https://github.com/hub4j/github-api/commit/e308e5ed57715e2fdce3c38410a1e3ca4c18c6ff", "message": "use static utility methods instead of building logic in the constructor", "committedDate": "2020-09-28T10:26:56Z", "type": "commit"}, {"oid": "4f9976c0cb01774f421716f9965a57ad0494e06c", "url": "https://github.com/hub4j/github-api/commit/4f9976c0cb01774f421716f9965a57ad0494e06c", "message": "add GitHubBuilder#withCredentialProvider\n\nWith this we also need to check for exceptions when calling\n\"/user\", because now we don't know what kind of credentials\nare coming from the provider, and we could be requesting\na \"/user\" when the type of credentials is not supported", "committedDate": "2020-09-28T10:40:44Z", "type": "commit"}, {"oid": "c038e0af5e1bde6930de386bef5f5b965bb375fb", "url": "https://github.com/hub4j/github-api/commit/c038e0af5e1bde6930de386bef5f5b965bb375fb", "message": "typo it'ts -> it's", "committedDate": "2020-09-28T10:51:54Z", "type": "commit"}, {"oid": "58ae681417a6273b80e060aa9ae85b8040f5f73c", "url": "https://github.com/hub4j/github-api/commit/58ae681417a6273b80e060aa9ae85b8040f5f73c", "message": "reduce visibilitof GitHubBuilder#withCredentialProvider", "committedDate": "2020-09-28T10:59:21Z", "type": "commit"}, {"oid": "aa96089ab4d01410a2bba70532da9d9509b38a33", "url": "https://github.com/hub4j/github-api/commit/aa96089ab4d01410a2bba70532da9d9509b38a33", "message": "remove @see to external docs", "committedDate": "2020-09-28T11:01:55Z", "type": "commit"}, {"oid": "6d7081910f67a89b0ddc39da667e9138bfd129e0", "url": "https://github.com/hub4j/github-api/commit/6d7081910f67a89b0ddc39da667e9138bfd129e0", "message": "add OrgInstallationCredentialProvider and JWTTokenProvider\n\nThe JWTTokenProvider implementation is left to the end user,\notherwise we would need to include specific libraries, at least\nas far as I am aware.\nThe OrgInstallationCredentialProvider will give a token,\nrefreshing when necessary and using the JWTTokenProvider\nthat the user needs to provide to request new tokens", "committedDate": "2020-09-28T11:17:46Z", "type": "commit"}, {"oid": "a9b7432584881139bc073275753351ff8f1780e9", "url": "https://github.com/hub4j/github-api/commit/a9b7432584881139bc073275753351ff8f1780e9", "message": "formatting", "committedDate": "2020-09-28T11:28:13Z", "type": "commit"}, {"oid": "9480ef485b54e87221ca5aa68b9064c7ecb78640", "url": "https://github.com/hub4j/github-api/commit/9480ef485b54e87221ca5aa68b9064c7ecb78640", "message": "withCredentialProvider is now public", "committedDate": "2020-09-28T11:34:14Z", "type": "commit"}, {"oid": "5f9976a1938b232b5801b348e9e1a70320600afd", "url": "https://github.com/hub4j/github-api/commit/5f9976a1938b232b5801b348e9e1a70320600afd", "message": "formatting for OrgInstallationCredentialProvider", "committedDate": "2020-09-28T11:37:59Z", "type": "commit"}, {"oid": "83db7f24eb31101caf916b4481f57400fcebe2cb", "url": "https://github.com/hub4j/github-api/commit/83db7f24eb31101caf916b4481f57400fcebe2cb", "message": "document CredentialProvider @throws", "committedDate": "2020-09-28T11:48:26Z", "type": "commit"}, {"oid": "0d8b4f32e8ea05c9dd132216f5cff468aec11b9d", "url": "https://github.com/hub4j/github-api/commit/0d8b4f32e8ea05c9dd132216f5cff468aec11b9d", "message": "document oauthAccessToken", "committedDate": "2020-09-28T11:48:56Z", "type": "commit"}, {"oid": "29ac2bd4f5fde7d01d6062dd6dda65a46600fa70", "url": "https://github.com/hub4j/github-api/commit/29ac2bd4f5fde7d01d6062dd6dda65a46600fa70", "message": "return a correctly formatted token", "committedDate": "2020-09-28T12:24:01Z", "type": "commit"}, {"oid": "0c65f74662a37943f21a8d9a7c04c0c08e7f4b6b", "url": "https://github.com/hub4j/github-api/commit/0c65f74662a37943f21a8d9a7c04c0c08e7f4b6b", "message": "formatting", "committedDate": "2020-09-28T12:45:00Z", "type": "commit"}, {"oid": "bb03fd19681c53bdcd2284e7c32c286e7330548f", "url": "https://github.com/hub4j/github-api/commit/bb03fd19681c53bdcd2284e7c32c286e7330548f", "message": "use Date#after instead of compareTo", "committedDate": "2020-09-28T14:11:16Z", "type": "commit"}, {"oid": "a0fc478a2831b3cf1059745548f9f8e0a4a9ba93", "url": "https://github.com/hub4j/github-api/commit/a0fc478a2831b3cf1059745548f9f8e0a4a9ba93", "message": "remove final modifier from credentialProvider (required for tests)", "committedDate": "2020-09-29T14:12:06Z", "type": "commit"}, {"oid": "4f3099887352823d837a328e63575a92a63fea2a", "url": "https://github.com/hub4j/github-api/commit/4f3099887352823d837a328e63575a92a63fea2a", "message": "OrgInstallationCredentialProvider now receives a pre-configured client\n\nThis is required to pass integration tests. In terms of functionality,\nthe user should be able to provide a client with the given token provider.\nIt additionally increases control (e.g: usage of proxies)\n\nAdd tests", "committedDate": "2020-09-29T14:13:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMTM2NQ==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r497021365", "bodyText": "I'd like to see all the other credential methods call this one.\nFor example:\n    public GitHubBuilder withOAuthToken(String oauthToken, String user) {\n        withCredentialProvider(ImmutableCredentialProvider.fromOauthToken(oauthToken));\n        this.user = user;\n        return this;\n    }\n\nThat would let us remove the oauthToken and password instance fields from the class (and down the call chain).", "author": "bitwiseman", "createdAt": "2020-09-29T20:23:16Z", "path": "src/main/java/org/kohsuke/github/GitHubBuilder.java", "diffHunk": "@@ -278,6 +279,11 @@ public GitHubBuilder withOAuthToken(String oauthToken, String user) {\n         return this;\n     }\n \n+    public GitHubBuilder withCredentialProvider(final CredentialProvider credentialProvider) {", "originalCommit": "4f3099887352823d837a328e63575a92a63fea2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NDIzOQ==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r497554239", "bodyText": "If we do this we lose the ability to know what kind of credentials we are using, and we will have to (I think) request the user to know if the current credentials are \"user-aware\" (GET \"/user\"). This will break a ton of tests that don't have the mapping for that call (not a big deal IMO), but also add another API call on GHBuilder#build(), and this does change semantics. We could potentially make it \"lazy\", so that we only lookup the user when it's actually requested, and not on setup, but I have to look into this.", "author": "MarcosCela", "createdAt": "2020-09-30T14:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMTM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwMTgwNA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r545401804", "bodyText": "@MarcosCela\n\nIf we do this we lose the ability to know what kind of credentials we are using\n\nI feel like this isn't true.  There should be some way to do this. I might not be explaining myself well though.", "author": "bitwiseman", "createdAt": "2020-12-17T21:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMTM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f546cf4521a3b4b9c19de7537108f7abe013b398", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GitHubBuilder.java b/src/main/java/org/kohsuke/github/GitHubBuilder.java\nindex 4a1ffc7bf..8fdfc785a 100644\n--- a/src/main/java/org/kohsuke/github/GitHubBuilder.java\n+++ b/src/main/java/org/kohsuke/github/GitHubBuilder.java\n\n@@ -274,9 +268,7 @@ public class GitHubBuilder implements Cloneable {\n      * @return the git hub builder\n      */\n     public GitHubBuilder withOAuthToken(String oauthToken, String user) {\n-        this.oauthToken = oauthToken;\n-        this.user = user;\n-        return this;\n+        return withCredentialProvider(ImmutableCredentialProvider.fromOauthToken(oauthToken, user));\n     }\n \n     public GitHubBuilder withCredentialProvider(final CredentialProvider credentialProvider) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMjcwNA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r497022704", "bodyText": "Why add this try-catch?  It changes the user visible behavior.", "author": "bitwiseman", "createdAt": "2020-09-29T20:25:44Z", "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -111,33 +93,45 @@\n         this.apiUrl = apiUrl;\n         this.connector = connector;\n \n-        if (oauthAccessToken != null) {\n-            encodedAuthorization = \"token \" + oauthAccessToken;\n+        // Prefer credential configuration via provider\n+        if (credentialProvider != null) {\n+            this.credentialProvider = credentialProvider;\n         } else {\n-            if (jwtToken != null) {\n-                encodedAuthorization = \"Bearer \" + jwtToken;\n-            } else if (password != null) {\n-                String authorization = (login + ':' + password);\n-                String charsetName = StandardCharsets.UTF_8.name();\n-                encodedAuthorization = \"Basic \"\n-                        + Base64.getEncoder().encodeToString(authorization.getBytes(charsetName));\n-            } else {// anonymous access\n-                encodedAuthorization = null;\n+            if (oauthAccessToken != null) {\n+                this.credentialProvider = ImmutableCredentialProvider.fromOauthToken(oauthAccessToken);\n+            } else {\n+                if (jwtToken != null) {\n+                    this.credentialProvider = ImmutableCredentialProvider.fromJwtToken(jwtToken);\n+                } else if (password != null) {\n+                    this.credentialProvider = ImmutableCredentialProvider.fromLoginAndPassword(login, password);\n+                } else {// anonymous access\n+                    this.credentialProvider = CredentialProvider.ANONYMOUS;\n+                }\n             }\n         }\n \n         this.rateLimitHandler = rateLimitHandler;\n         this.abuseLimitHandler = abuseLimitHandler;\n         this.rateLimitChecker = rateLimitChecker;\n \n-        if (login == null && encodedAuthorization != null && jwtToken == null) {\n-            GHMyself myself = fetch(GHMyself.class, \"/user\");\n-            login = myself.getLogin();\n-            if (myselfConsumer != null) {\n-                myselfConsumer.accept(myself);\n+        this.login = getCurrentUser(login, jwtToken, myselfConsumer);\n+    }\n+\n+    @Nullable\n+    private String getCurrentUser(String login, String jwtToken, Consumer<GHMyself> myselfConsumer) throws IOException {\n+        if (login == null && this.credentialProvider.getEncodedAuthorization() != null && jwtToken == null) {\n+            try {\n+                GHMyself myself = fetch(GHMyself.class, \"/user\");\n+                if (myselfConsumer != null) {\n+                    myselfConsumer.accept(myself);\n+                }\n+                return myself.getLogin();\n+            } catch (IOException e) {", "originalCommit": "4f3099887352823d837a328e63575a92a63fea2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1NjQyMg==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r497456422", "bodyText": "If we use a credentialProvider, we no longer know what kind of credentials we have here. Some credentials don't support checking who is making the call (api call to \"/user\"), and will fail, so the only way that I see to check if the credentials being used support \"user lookup\", is to actually make the call and handle the case where the call fails (e.g: installation tokens).", "author": "MarcosCela", "createdAt": "2020-09-30T12:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMjcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxNzg5NA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r545417894", "bodyText": "If we use a credentialProvider, we no longer know what kind of credentials we have here.\n\nWhat about having a method on CredentialsProvider?  getLogin(Consumer<GHMyself> myselfConsumer) or something similar?  Then getCurrentUser() wouldn't check jwtToken or login or whatever, the credential itself would decide what to do.  getLogin() on JWTTokenProvider would always return null, while for fromOauthToken it would have code from lines 124-128.", "author": "bitwiseman", "createdAt": "2020-12-17T21:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMjcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQzMDQ2OQ==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r545430469", "bodyText": "Hmm, or maybe a CredentialsProvider would have boolean requiresMyself() to control whether this code is called and then getLogin(@CheckForNull GHMyself) that is always called, return credentialProvider.getLogin(myself);.", "author": "bitwiseman", "createdAt": "2020-12-17T21:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMjcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "f546cf4521a3b4b9c19de7537108f7abe013b398", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GitHubClient.java b/src/main/java/org/kohsuke/github/GitHubClient.java\nindex 963fc3f88..dee9f8311 100644\n--- a/src/main/java/org/kohsuke/github/GitHubClient.java\n+++ b/src/main/java/org/kohsuke/github/GitHubClient.java\n\n@@ -94,42 +89,35 @@ abstract class GitHubClient {\n         this.connector = connector;\n \n         // Prefer credential configuration via provider\n-        if (credentialProvider != null) {\n-            this.credentialProvider = credentialProvider;\n-        } else {\n-            if (oauthAccessToken != null) {\n-                this.credentialProvider = ImmutableCredentialProvider.fromOauthToken(oauthAccessToken);\n-            } else {\n-                if (jwtToken != null) {\n-                    this.credentialProvider = ImmutableCredentialProvider.fromJwtToken(jwtToken);\n-                } else if (password != null) {\n-                    this.credentialProvider = ImmutableCredentialProvider.fromLoginAndPassword(login, password);\n-                } else {// anonymous access\n-                    this.credentialProvider = CredentialProvider.ANONYMOUS;\n-                }\n-            }\n-        }\n+        this.credentialProvider = credentialProvider;\n \n         this.rateLimitHandler = rateLimitHandler;\n         this.abuseLimitHandler = abuseLimitHandler;\n         this.rateLimitChecker = rateLimitChecker;\n \n-        this.login = getCurrentUser(login, jwtToken, myselfConsumer);\n+        this.login = getCurrentUser(myselfConsumer);\n     }\n \n-    @Nullable\n-    private String getCurrentUser(String login, String jwtToken, Consumer<GHMyself> myselfConsumer) throws IOException {\n-        if (login == null && this.credentialProvider.getEncodedAuthorization() != null && jwtToken == null) {\n-            try {\n-                GHMyself myself = fetch(GHMyself.class, \"/user\");\n-                if (myselfConsumer != null) {\n-                    myselfConsumer.accept(myself);\n+    private String getCurrentUser(Consumer<GHMyself> myselfConsumer) throws IOException {\n+        String login = null;\n+        if (this.credentialProvider instanceof ImmutableCredentialProvider.UserCredentialProvider\n+                && this.credentialProvider.getEncodedAuthorization() != null) {\n+\n+            ImmutableCredentialProvider.UserCredentialProvider userCredentialProvider = (ImmutableCredentialProvider.UserCredentialProvider) this.credentialProvider;\n+\n+            login = userCredentialProvider.getLogin();\n+\n+            if (login == null) {\n+                try {\n+                    GHMyself myself = fetch(GHMyself.class, \"/user\");\n+                    if (myselfConsumer != null) {\n+                        myselfConsumer.accept(myself);\n+                    }\n+                    login = myself.getLogin();\n+                } catch (IOException e) {\n+                    return null;\n                 }\n-                return myself.getLogin();\n-            } catch (IOException e) {\n-                return null;\n             }\n-\n         }\n         return login;\n     }\n"}}, {"oid": "97e918da0312d1fe90f3dcd5d0c048accd2e226f", "url": "https://github.com/hub4j/github-api/commit/97e918da0312d1fe90f3dcd5d0c048accd2e226f", "message": "remove unused JWTTokenProvider (we are now using a github client)", "committedDate": "2020-09-30T14:39:41Z", "type": "commit"}, {"oid": "ff790eeefbb038ef97f0dc667e1fa24ea386f4a9", "url": "https://github.com/hub4j/github-api/commit/ff790eeefbb038ef97f0dc667e1fa24ea386f4a9", "message": "formatting of OrgInstallationCredentialProvider.java", "committedDate": "2020-09-30T14:48:54Z", "type": "commit"}, {"oid": "59e18d155e02bbf324dc56bf7fc3a8abf0c47e67", "url": "https://github.com/hub4j/github-api/commit/59e18d155e02bbf324dc56bf7fc3a8abf0c47e67", "message": "add dependencies for jwt token generation\n\nThese dependencies are marked as \"provided\" because they are only\nused in the extras package", "committedDate": "2020-10-05T11:39:01Z", "type": "commit"}, {"oid": "8a474a3b00ad0467b502aa801d9f5c807d6ef162", "url": "https://github.com/hub4j/github-api/commit/8a474a3b00ad0467b502aa801d9f5c807d6ef162", "message": "add: example for Org Installation token on extras package", "committedDate": "2020-10-05T11:39:30Z", "type": "commit"}, {"oid": "a7112c42df90f5a86be7610f14a9d1ae2ab1b965", "url": "https://github.com/hub4j/github-api/commit/a7112c42df90f5a86be7610f14a9d1ae2ab1b965", "message": "linting: JWTTokenProvider.java", "committedDate": "2020-10-05T11:48:37Z", "type": "commit"}, {"oid": "610b02968e158e58b2c17183ef3e37a497fe6387", "url": "https://github.com/hub4j/github-api/commit/610b02968e158e58b2c17183ef3e37a497fe6387", "message": "exlude org.kohsuke.github.extras.auth.* from code coverage\n\nThis is a package for examples/extra implementations", "committedDate": "2020-10-05T11:57:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQzMjY2OQ==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r545432669", "bodyText": "Maybe? instead of duplicating the other class?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OrgInstallationCredentialProvider implements CredentialProvider {\n          \n          \n            \n            public class OrgInstallationCredentialProvider extends org.kohsuke.github.OrgInstallationCredentialProvider implements CredentialProvider {", "author": "bitwiseman", "createdAt": "2020-12-17T22:03:42Z", "path": "src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.kohsuke.github.extras.auth;\n+\n+import org.kohsuke.github.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.Date;\n+\n+/**\n+ * This helper class provides an example on how to authenticate a GitHub instance with an installation token, that will\n+ * be automatically refreshed when required.\n+ */\n+public class OrgInstallationCredentialProvider implements CredentialProvider {", "originalCommit": "610b02968e158e58b2c17183ef3e37a497fe6387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43efa7875079a37b81851d22260aaa78ffb232e7", "chunk": "diff --git a/src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java b/src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java\nindex 74f7f1c6b..c1169f0bc 100644\n--- a/src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java\n+++ b/src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java\n\n@@ -29,11 +29,11 @@ public class OrgInstallationCredentialProvider implements CredentialProvider {\n     /**\n      * Obtains a new OAuth2 token, using the configured client to request it. The configured client <b>must</b> be able\n      * to request the token, this usually means that it needs to have JWT authentication\n-     * \n+     *\n      * @throws IOException\n      *             for any problem obtaining the token\n      */\n-    @Preview\n+    @BetaApi\n     @Override\n     @Deprecated\n     public String getEncodedAuthorization() throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQzNzU1Mg==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r545437552", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String getJWT() {\n          \n          \n            \n                private String getJWT() {", "author": "bitwiseman", "createdAt": "2020-12-17T22:13:14Z", "path": "src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.kohsuke.github.extras.auth;\n+\n+import io.jsonwebtoken.JwtBuilder;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import org.kohsuke.github.CredentialProvider;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.time.Duration;\n+import java.util.Date;\n+\n+/**\n+ * A credential provider that gives valid JWT tokens. These tokens are then used to create a time-based token to\n+ * authenticate as an application. This token provider does not provide any kind of caching, and will always request a\n+ * new token to the API.\n+ */\n+public class JWTTokenProvider implements CredentialProvider {\n+\n+    private static final long MINUTES_10 = Duration.ofMinutes(10).toMillis();\n+\n+    private final PrivateKey privateKey;\n+\n+    /**\n+     * The identifier for the application\n+     */\n+    private final String applicationId;\n+\n+    public JWTTokenProvider(String applicationId, Path keyPath)\n+            throws InvalidKeySpecException, NoSuchAlgorithmException, IOException {\n+        this.privateKey = loadPrivateKey(keyPath);\n+        this.applicationId = applicationId;\n+    }\n+\n+    /**\n+     * add dependencies for a jwt suite You can generate a key to load with this method with:\n+     *\n+     * <pre>\n+     * openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+     * </pre>\n+     */\n+    private PrivateKey loadPrivateKey(Path keyPath)\n+            throws NoSuchAlgorithmException, InvalidKeySpecException, IOException {\n+\n+        byte[] keyBytes = Files.readAllBytes(keyPath);\n+        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);\n+        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n+        return kf.generatePrivate(spec);\n+    }\n+\n+    public String getJWT() {", "originalCommit": "610b02968e158e58b2c17183ef3e37a497fe6387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9438b612158b2ef432a8ff647c9e14c374a73c3", "chunk": "diff --git a/src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java b/src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java\nindex 784299c17..28e029196 100644\n--- a/src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java\n+++ b/src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java\n\n@@ -5,17 +5,23 @@ import io.jsonwebtoken.Jwts;\n import io.jsonwebtoken.SignatureAlgorithm;\n import org.kohsuke.github.CredentialProvider;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n import java.security.KeyFactory;\n-import java.security.NoSuchAlgorithmException;\n import java.security.PrivateKey;\n import java.security.spec.InvalidKeySpecException;\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Base64;\n import java.util.Date;\n \n+import javax.annotation.Nonnull;\n+\n /**\n  * A credential provider that gives valid JWT tokens. These tokens are then used to create a time-based token to\n  * authenticate as an application. This token provider does not provide any kind of caching, and will always request a\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0NDE1Nw==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r545444157", "bodyText": "Are the credentials returned from fromJwtToken actually immutable?  I thought the token expired every 10 minutes.", "author": "bitwiseman", "createdAt": "2020-12-17T22:26:57Z", "path": "src/test/java/org/kohsuke/github/OrgInstallationCredentialProviderTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+import net.sf.ezmorph.test.ArrayAssertions;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+public class OrgInstallationCredentialProviderTest extends AbstractGitHubWireMockTest {\n+\n+    @Test(expected = HttpException.class)\n+    public void invalidJWTTokenRaisesException() throws IOException {\n+\n+        gitHub.getClient().credentialProvider = ImmutableCredentialProvider.fromJwtToken(\"myToken\");\n+\n+        OrgInstallationCredentialProvider provider = new OrgInstallationCredentialProvider(\"testOrganization\", gitHub);\n+\n+        provider.getEncodedAuthorization();\n+    }\n+\n+    @Test\n+    public void validJWTTokenAllowsOauthTokenRequest() throws IOException {\n+        gitHub.getClient().credentialProvider = ImmutableCredentialProvider.fromJwtToken(\"valid-token\");", "originalCommit": "610b02968e158e58b2c17183ef3e37a497fe6387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f546cf4521a3b4b9c19de7537108f7abe013b398", "chunk": "diff --git a/src/test/java/org/kohsuke/github/OrgInstallationCredentialProviderTest.java b/src/test/java/org/kohsuke/github/OrgInstallationCredentialProviderTest.java\nindex dd65c43b1..032aed44a 100644\n--- a/src/test/java/org/kohsuke/github/OrgInstallationCredentialProviderTest.java\n+++ b/src/test/java/org/kohsuke/github/OrgInstallationCredentialProviderTest.java\n\n@@ -1,32 +1,40 @@\n package org.kohsuke.github;\n \n-import net.sf.ezmorph.test.ArrayAssertions;\n import org.junit.Test;\n \n import java.io.IOException;\n \n-public class OrgInstallationCredentialProviderTest extends AbstractGitHubWireMockTest {\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n \n-    @Test(expected = HttpException.class)\n-    public void invalidJWTTokenRaisesException() throws IOException {\n+public class OrgInstallationCredentialProviderTest extends AbstractGHAppInstallationTest {\n \n-        gitHub.getClient().credentialProvider = ImmutableCredentialProvider.fromJwtToken(\"myToken\");\n+    public OrgInstallationCredentialProviderTest() {\n+        useDefaultGitHub = false;\n+    }\n \n-        OrgInstallationCredentialProvider provider = new OrgInstallationCredentialProvider(\"testOrganization\", gitHub);\n+    @Test(expected = HttpException.class)\n+    public void invalidJWTTokenRaisesException() throws IOException {\n+        OrgInstallationCredentialProvider provider = new OrgInstallationCredentialProvider(\"testOrganization\",\n+                ImmutableCredentialProvider.fromJwtToken(\"myToken\"));\n+        gitHub = getGitHubBuilder().withCredentialProvider(provider)\n+                .withEndpoint(mockGitHub.apiServer().baseUrl())\n+                .build();\n \n         provider.getEncodedAuthorization();\n     }\n \n     @Test\n     public void validJWTTokenAllowsOauthTokenRequest() throws IOException {\n-        gitHub.getClient().credentialProvider = ImmutableCredentialProvider.fromJwtToken(\"valid-token\");\n-\n-        OrgInstallationCredentialProvider provider = new OrgInstallationCredentialProvider(\"hub4j-test-org\", gitHub);\n-\n+        OrgInstallationCredentialProvider provider = new OrgInstallationCredentialProvider(\"hub4j-test-org\",\n+                ImmutableCredentialProvider.fromJwtToken(\"bogus-valid-token\"));\n+        gitHub = getGitHubBuilder().withCredentialProvider(provider)\n+                .withEndpoint(mockGitHub.apiServer().baseUrl())\n+                .build();\n         String encodedAuthorization = provider.getEncodedAuthorization();\n \n-        ArrayAssertions.assertNotNull(encodedAuthorization);\n-        ArrayAssertions.assertEquals(\"token v1.9a12d913f980a45a16ac9c3a9d34d9b7sa314cb6\", encodedAuthorization);\n+        assertThat(encodedAuthorization, notNullValue());\n+        assertThat(encodedAuthorization, equalTo(\"token v1.9a12d913f980a45a16ac9c3a9d34d9b7sa314cb6\"));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0Nzg3OA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r545447878", "bodyText": "Having this take a GitHub at construction time makes it more difficult to work with.  A user building a GitHub using the builder will have difficulty working with this.  Perhaps having this take a JWTToken and include an internal setRefreshSource(GitHub)?  And maybe add an internal method to GitHubBuilder that takes an existing GitHub instance as the starting point?  Then setRefreshSource(GitHub) could build an identical instance with just the credential provider changed.  Does that make sense?\nI'm willing for the internals of this to be a bit messier if it makes the experience better for end users - we don't want them to have to configure a GitHub twice to get this to work.", "author": "bitwiseman", "createdAt": "2020-12-17T22:34:58Z", "path": "src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.kohsuke.github.extras.auth;\n+\n+import org.kohsuke.github.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.Date;\n+\n+/**\n+ * This helper class provides an example on how to authenticate a GitHub instance with an installation token, that will\n+ * be automatically refreshed when required.\n+ */\n+public class OrgInstallationCredentialProvider implements CredentialProvider {\n+\n+    private final GitHub gitHub;\n+\n+    private final String organizationName;\n+\n+    private String latestToken;\n+\n+    private Date validUntil;\n+\n+    public OrgInstallationCredentialProvider(String organizationName, GitHub gitHub) {", "originalCommit": "610b02968e158e58b2c17183ef3e37a497fe6387", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY4OTI5MA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r545689290", "bodyText": "I will try to give it a go following your suggestions, thanks a lot!!!!", "author": "MarcosCela", "createdAt": "2020-12-18T09:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0Nzg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "43efa7875079a37b81851d22260aaa78ffb232e7", "chunk": "diff --git a/src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java b/src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java\nindex 74f7f1c6b..c1169f0bc 100644\n--- a/src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java\n+++ b/src/main/java/org/kohsuke/github/extras/auth/OrgInstallationCredentialProvider.java\n\n@@ -29,11 +29,11 @@ public class OrgInstallationCredentialProvider implements CredentialProvider {\n     /**\n      * Obtains a new OAuth2 token, using the configured client to request it. The configured client <b>must</b> be able\n      * to request the token, this usually means that it needs to have JWT authentication\n-     * \n+     *\n      * @throws IOException\n      *             for any problem obtaining the token\n      */\n-    @Preview\n+    @BetaApi\n     @Override\n     @Deprecated\n     public String getEncodedAuthorization() throws IOException {\n"}}, {"oid": "9e3de43802027cda7064996e2b05a6129c3020f4", "url": "https://github.com/hub4j/github-api/commit/9e3de43802027cda7064996e2b05a6129c3020f4", "message": "Merge remote-tracking branch 'upstream/master' into feat/credential-provider-refresh", "committedDate": "2020-12-29T17:19:09Z", "type": "commit"}, {"oid": "43efa7875079a37b81851d22260aaa78ffb232e7", "url": "https://github.com/hub4j/github-api/commit/43efa7875079a37b81851d22260aaa78ffb232e7", "message": "Post-merge fixes", "committedDate": "2020-12-29T17:29:30Z", "type": "commit"}, {"oid": "f546cf4521a3b4b9c19de7537108f7abe013b398", "url": "https://github.com/hub4j/github-api/commit/f546cf4521a3b4b9c19de7537108f7abe013b398", "message": "Use only credential providers internally to track credentials\n\nRemoves extra fields from GitHubClient.", "committedDate": "2020-12-30T17:52:30Z", "type": "commit"}, {"oid": "a9438b612158b2ef432a8ff647c9e14c374a73c3", "url": "https://github.com/hub4j/github-api/commit/a9438b612158b2ef432a8ff647c9e14c374a73c3", "message": "Move tests to use JWTTokenProvider", "committedDate": "2020-12-30T18:46:45Z", "type": "commit"}, {"oid": "bd39b07bb5f062dcb07405dc58e6ae1c7bd2f1a7", "url": "https://github.com/hub4j/github-api/commit/bd39b07bb5f062dcb07405dc58e6ae1c7bd2f1a7", "message": "Fix javadoc issues", "committedDate": "2020-12-30T22:07:37Z", "type": "commit"}, {"oid": "66704460373b97162960812c39b44be9aee63c3d", "url": "https://github.com/hub4j/github-api/commit/66704460373b97162960812c39b44be9aee63c3d", "message": "Reenable GitHubBuilder tests", "committedDate": "2020-12-31T17:49:51Z", "type": "commit"}, {"oid": "66704460373b97162960812c39b44be9aee63c3d", "url": "https://github.com/hub4j/github-api/commit/66704460373b97162960812c39b44be9aee63c3d", "message": "Reenable GitHubBuilder tests", "committedDate": "2020-12-31T17:49:51Z", "type": "forcePushed"}, {"oid": "f6ac4d355961573092f446920066a24727a6c607", "url": "https://github.com/hub4j/github-api/commit/f6ac4d355961573092f446920066a24727a6c607", "message": "rename: credential provider -> authorization provider\n\nThis includes renames in comments, related methods,\njavadocs and fields/variables.", "committedDate": "2021-01-07T08:46:30Z", "type": "commit"}, {"oid": "cdede298a94dbc48a07d4eb0bbc3d4380fd53b5c", "url": "https://github.com/hub4j/github-api/commit/cdede298a94dbc48a07d4eb0bbc3d4380fd53b5c", "message": "rename OrgInstallationAuthorizationProvider to OrgAppInstallationAuthorizationProvider", "committedDate": "2021-01-07T08:53:19Z", "type": "commit"}, {"oid": "44a8b797fbae552a211a042235a7a97275f1c5e4", "url": "https://github.com/hub4j/github-api/commit/44a8b797fbae552a211a042235a7a97275f1c5e4", "message": "fix: JWTTokenProvider has an incorrect value for the returned authorization header\n\nmore info:\nhttps://docs.github.com/en/free-pro-team@latest/developers/apps/authenticating-with-github-apps#authenticating-as-a-github-app", "committedDate": "2021-01-07T10:23:22Z", "type": "commit"}, {"oid": "0e2bf238300441d08d509611e722156a69f9d01f", "url": "https://github.com/hub4j/github-api/commit/0e2bf238300441d08d509611e722156a69f9d01f", "message": "add CODE_SCANNING_ALERT to GHEvent enum", "committedDate": "2021-01-07T10:32:33Z", "type": "commit"}, {"oid": "a8a0bcb7db243cf52344fe05a7ac17fd7f91b395", "url": "https://github.com/hub4j/github-api/commit/a8a0bcb7db243cf52344fe05a7ac17fd7f91b395", "message": "Merge branch 'master' into feat/credential-provider-refresh", "committedDate": "2021-01-07T11:03:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyNzg3NA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r553527874", "bodyText": "@MarcosCela\nCould you add a test that verifies this?", "author": "bitwiseman", "createdAt": "2021-01-07T19:11:19Z", "path": "src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.kohsuke.github.extras.auth;\n+\n+import io.jsonwebtoken.JwtBuilder;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import org.kohsuke.github.AuthorizationProvider;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Base64;\n+import java.util.Date;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * A authorization provider that gives valid JWT tokens. These tokens are then used to create a time-based token to\n+ * authenticate as an application. This token provider does not provide any kind of caching, and will always request a\n+ * new token to the API.\n+ */\n+public class JWTTokenProvider implements AuthorizationProvider {\n+\n+    private static final long MINUTES_10 = Duration.ofMinutes(10).toMillis();\n+\n+    private final PrivateKey privateKey;\n+\n+    @Nonnull\n+    private Instant validUntil = Instant.MIN;\n+\n+    private String token;\n+\n+    /**\n+     * The identifier for the application\n+     */\n+    private final String applicationId;\n+\n+    public JWTTokenProvider(String applicationId, File keyFile) throws GeneralSecurityException, IOException {\n+        this(applicationId, loadPrivateKey(keyFile.toPath()));\n+    }\n+\n+    public JWTTokenProvider(String applicationId, Path keyPath) throws GeneralSecurityException, IOException {\n+        this(applicationId, loadPrivateKey(keyPath));\n+    }\n+\n+    public JWTTokenProvider(String applicationId, PrivateKey privateKey) {\n+        this.privateKey = privateKey;\n+        this.applicationId = applicationId;\n+    }\n+\n+    @Override\n+    public String getEncodedAuthorization() throws IOException {\n+        synchronized (this) {\n+            if (Instant.now().isAfter(validUntil)) {\n+                token = refreshJWT();\n+            }\n+            return String.format(\"Bearer %s\", token);", "originalCommit": "a8a0bcb7db243cf52344fe05a7ac17fd7f91b395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUzMDI0MA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r553530240", "bodyText": "Will do!", "author": "MarcosCela", "createdAt": "2021-01-07T19:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyNzg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "ca7c809feb190f44d211ac660adfe0c0569455a6", "chunk": "diff --git a/src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java b/src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java\nindex 9d809090b..64e0aedd8 100644\n--- a/src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java\n+++ b/src/main/java/org/kohsuke/github/extras/auth/JWTTokenProvider.java\n\n@@ -29,8 +29,6 @@ import javax.annotation.Nonnull;\n  */\n public class JWTTokenProvider implements AuthorizationProvider {\n \n-    private static final long MINUTES_10 = Duration.ofMinutes(10).toMillis();\n-\n     private final PrivateKey privateKey;\n \n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyOTE1Nw==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r553529157", "bodyText": "@MarcosCela\nTo test JWT provider, maybe just add an assertion to the test that uses these.", "author": "bitwiseman", "createdAt": "2021-01-07T19:14:03Z", "path": "src/test/java/org/kohsuke/github/AbstractGHAppInstallationTest.java", "diffHunk": "@@ -63,15 +83,15 @@ private GHAppInstallation getAppInstallationWithToken(String jwtToken) throws IO\n     }\n \n     protected GHAppInstallation getAppInstallationWithTokenApp1() throws IOException {\n-        return getAppInstallationWithToken(createJwtToken(PRIVATE_KEY_FILE_APP_1, TEST_APP_ID_1));\n+        return getAppInstallationWithToken(JWT_PROVIDER_1.getEncodedAuthorization());\n     }\n \n     protected GHAppInstallation getAppInstallationWithTokenApp2() throws IOException {\n-        return getAppInstallationWithToken(createJwtToken(PRIVATE_KEY_FILE_APP_2, TEST_APP_ID_2));\n+        return getAppInstallationWithToken(JWT_PROVIDER_2.getEncodedAuthorization());\n     }\n \n     protected GHAppInstallation getAppInstallationWithTokenApp3() throws IOException {\n-        return getAppInstallationWithToken(createJwtToken(PRIVATE_KEY_FILE_APP_3, TEST_APP_ID_3));\n+        return getAppInstallationWithToken(JWT_PROVIDER_3.getEncodedAuthorization());", "originalCommit": "a8a0bcb7db243cf52344fe05a7ac17fd7f91b395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyNzcwOA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r553827708", "bodyText": "Tests added, what do you think?", "author": "MarcosCela", "createdAt": "2021-01-08T09:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyOTE1Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ca7c809feb190f44d211ac660adfe0c0569455a6", "url": "https://github.com/hub4j/github-api/commit/ca7c809feb190f44d211ac660adfe0c0569455a6", "message": "remove unused field MINUTES_10 from JWTTokenProvider", "committedDate": "2021-01-08T07:21:35Z", "type": "commit"}, {"oid": "a96275c286ab82b1ccf8931bc0b985d318b8cf5b", "url": "https://github.com/hub4j/github-api/commit/a96275c286ab82b1ccf8931bc0b985d318b8cf5b", "message": "tests for JWTTokenProvider, verifying the \"Authentication\" header\n\nThis test basically ensures that the requests made with a\nJWTTokenProvider follow a valid Authentication pattern,\nverifying that the header \"conforms\" to a valid JWT token\nMore information on JWT tokens can be found at:\n\n- https://jwt.io/introduction/", "committedDate": "2021-01-08T08:52:50Z", "type": "commit"}, {"oid": "e0a709676e011081257ee0151a857cf27aa07331", "url": "https://github.com/hub4j/github-api/commit/e0a709676e011081257ee0151a857cf27aa07331", "message": "fix format violations", "committedDate": "2021-01-08T08:56:05Z", "type": "commit"}, {"oid": "747c759bbbf5b4513df3833990a5c2531ad05891", "url": "https://github.com/hub4j/github-api/commit/747c759bbbf5b4513df3833990a5c2531ad05891", "message": "fix code violations again", "committedDate": "2021-01-08T09:10:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAyNDk4OA==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r554024988", "bodyText": "Very nice.", "author": "bitwiseman", "createdAt": "2021-01-08T15:52:07Z", "path": "src/test/java/org/kohsuke/github/extras/auth/JWTTokenProviderTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.kohsuke.github.extras.auth;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+\n+import org.junit.Test;\n+import org.kohsuke.github.AbstractGitHubWireMockTest;\n+import org.kohsuke.github.GitHub;\n+\n+public class JWTTokenProviderTest extends AbstractGitHubWireMockTest {\n+\n+    private static String TEST_APP_ID_2 = \"83009\";\n+    private static String PRIVATE_KEY_FILE_APP_2 = \"/ghapi-test-app-2.private-key.pem\";\n+\n+    /**\n+     * This test will request an application ensuring that the header for the \"Authorization\" matches a valid JWT token.\n+     * A JWT token in the Authorization header will always start with \"ey\" which is always the start of the base64\n+     * encoding of the JWT Header , so a valid header will look like this:\n+     *\n+     * <pre>\n+     * Authorization: Bearer ey{rest of the header}.{payload}.{signature}\n+     * </pre>\n+     *\n+     * Matched by the regular expression:\n+     *\n+     * <pre>\n+     * ^Bearer (?<JWTHeader>ey\\S*)\\.(?<JWTPayload>\\S*)\\.(?<JWTSignature>\\S*)$\n+     * </pre>", "originalCommit": "a96275c286ab82b1ccf8931bc0b985d318b8cf5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c33e78a7dc57bd1a7200708251fc0145831c646f", "chunk": "diff --git a/src/test/java/org/kohsuke/github/extras/auth/JWTTokenProviderTest.java b/src/test/java/org/kohsuke/github/extras/auth/JWTTokenProviderTest.java\nindex 83f89f6f9..7cca641c4 100644\n--- a/src/test/java/org/kohsuke/github/extras/auth/JWTTokenProviderTest.java\n+++ b/src/test/java/org/kohsuke/github/extras/auth/JWTTokenProviderTest.java\n\n@@ -1,37 +1,36 @@\n package org.kohsuke.github.extras.auth;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.security.GeneralSecurityException;\n-\n import org.junit.Test;\n import org.kohsuke.github.AbstractGitHubWireMockTest;\n import org.kohsuke.github.GitHub;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+/*\n+ * This test will request an application ensuring that the header for the \"Authorization\" matches a valid JWT token.\n+ * A JWT token in the Authorization header will always start with \"ey\" which is always the start of the base64\n+ * encoding of the JWT Header , so a valid header will look like this:\n+ *\n+ * <pre>\n+ * Authorization: Bearer ey{rest of the header}.{payload}.{signature}\n+ * </pre>\n+ *\n+ * Matched by the regular expression:\n+ *\n+ * <pre>\n+ * ^Bearer (?<JWTHeader>ey\\S*)\\.(?<JWTPayload>\\S*)\\.(?<JWTSignature>\\S*)$\n+ * </pre>\n+ *\n+ * Which is present in the wiremock matcher. Note that we need to use a matcher because the JWT token is encoded\n+ * with a private key and a random nonce, so it will never be the same (under normal conditions). For more\n+ * information on the format of a JWT token, see: https://jwt.io/introduction/\n+ */\n public class JWTTokenProviderTest extends AbstractGitHubWireMockTest {\n \n     private static String TEST_APP_ID_2 = \"83009\";\n     private static String PRIVATE_KEY_FILE_APP_2 = \"/ghapi-test-app-2.private-key.pem\";\n \n-    /**\n-     * This test will request an application ensuring that the header for the \"Authorization\" matches a valid JWT token.\n-     * A JWT token in the Authorization header will always start with \"ey\" which is always the start of the base64\n-     * encoding of the JWT Header , so a valid header will look like this:\n-     *\n-     * <pre>\n-     * Authorization: Bearer ey{rest of the header}.{payload}.{signature}\n-     * </pre>\n-     *\n-     * Matched by the regular expression:\n-     *\n-     * <pre>\n-     * ^Bearer (?<JWTHeader>ey\\S*)\\.(?<JWTPayload>\\S*)\\.(?<JWTSignature>\\S*)$\n-     * </pre>\n-     *\n-     * Which is present in the wiremock matcher. Note that we need to use a matcher because the JWT token is encoded\n-     * with a private key and a random nonce, so it will never be the same (under normal conditions). For more\n-     * information on the format of a JWT token, see: https://jwt.io/introduction/\n-     */\n     @Test\n     public void testAuthorizationHeaderPattern() throws GeneralSecurityException, IOException {\n         JWTTokenProvider jwtTokenProvider = new JWTTokenProvider(TEST_APP_ID_2,\n"}}, {"oid": "c33e78a7dc57bd1a7200708251fc0145831c646f", "url": "https://github.com/hub4j/github-api/commit/c33e78a7dc57bd1a7200708251fc0145831c646f", "message": "Create authorization package", "committedDate": "2021-01-14T17:23:17Z", "type": "commit"}, {"oid": "1b84efdbfa510ed3775b78d7f491921b154ecb40", "url": "https://github.com/hub4j/github-api/commit/1b84efdbfa510ed3775b78d7f491921b154ecb40", "message": "Add GitHub.DependentAuthorizationProvider\n\nRather than exposing an unsafe wrapper for GitHub instances, I added a base class\nthat can be extended by anyone wanting to implement an authorization provider\nthat needs a GitHub instance to generate it's authorization string.", "committedDate": "2021-01-14T18:32:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2NzUxMQ==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r557667511", "bodyText": "any reason this is private? seems like I just have to re-implement this / copy it if I'm working with strings", "author": "timja", "createdAt": "2021-01-14T20:07:12Z", "path": "src/main/java/org/kohsuke/github/extras/authorization/JWTTokenProvider.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.kohsuke.github.extras.authorization;\n+\n+import io.jsonwebtoken.JwtBuilder;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import org.kohsuke.github.authorization.AuthorizationProvider;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Base64;\n+import java.util.Date;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * A authorization provider that gives valid JWT tokens. These tokens are then used to create a time-based token to\n+ * authenticate as an application. This token provider does not provide any kind of caching, and will always request a\n+ * new token to the API.\n+ */\n+public class JWTTokenProvider implements AuthorizationProvider {\n+\n+    private final PrivateKey privateKey;\n+\n+    @Nonnull\n+    private Instant validUntil = Instant.MIN;\n+\n+    private String token;\n+\n+    /**\n+     * The identifier for the application\n+     */\n+    private final String applicationId;\n+\n+    public JWTTokenProvider(String applicationId, File keyFile) throws GeneralSecurityException, IOException {\n+        this(applicationId, loadPrivateKey(keyFile.toPath()));\n+    }\n+\n+    public JWTTokenProvider(String applicationId, Path keyPath) throws GeneralSecurityException, IOException {\n+        this(applicationId, loadPrivateKey(keyPath));\n+    }\n+\n+    public JWTTokenProvider(String applicationId, PrivateKey privateKey) {\n+        this.privateKey = privateKey;\n+        this.applicationId = applicationId;\n+    }\n+\n+    @Override\n+    public String getEncodedAuthorization() throws IOException {\n+        synchronized (this) {\n+            if (Instant.now().isAfter(validUntil)) {\n+                token = refreshJWT();\n+            }\n+            return String.format(\"Bearer %s\", token);\n+        }\n+    }\n+\n+    /**\n+     * add dependencies for a jwt suite You can generate a key to load in this method with:\n+     *\n+     * <pre>\n+     * openssl pkcs8 -topk8 -inform PEM -outform DER -in ~/github-api-app.private-key.pem -out ~/github-api-app.private-key.der -nocrypt\n+     * </pre>\n+     */\n+    private static PrivateKey loadPrivateKey(Path keyPath) throws GeneralSecurityException, IOException {\n+        String keyString = new String(Files.readAllBytes(keyPath), StandardCharsets.UTF_8);\n+        return getPrivateKeyFromString(keyString);\n+    }\n+\n+    /**\n+     * Convert a PKCS#8 formatted private key in string format into a java PrivateKey\n+     *\n+     * @param key\n+     *            PCKS#8 string\n+     * @return private key\n+     * @throws GeneralSecurityException\n+     *             if we couldn't parse the string\n+     */\n+    private static PrivateKey getPrivateKeyFromString(final String key) throws GeneralSecurityException {", "originalCommit": "1b84efdbfa510ed3775b78d7f491921b154ecb40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwNzg1Nw==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r557707857", "bodyText": "Probably better to create a constructor that takes a String.", "author": "bitwiseman", "createdAt": "2021-01-14T21:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2NzUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwOTE5MQ==", "url": "https://github.com/hub4j/github-api/pull/945#discussion_r557709191", "bodyText": "yes or that...", "author": "timja", "createdAt": "2021-01-14T21:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2NzUxMQ=="}], "type": "inlineReview", "revised_code": null}]}