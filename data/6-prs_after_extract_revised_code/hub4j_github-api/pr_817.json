{"pr_number": 817, "pr_title": "Consider header rate limit information for getRateLimit()", "pr_createdAt": "2020-05-18T20:34:28Z", "pr_url": "https://github.com/hub4j/github-api/pull/817", "timeline": [{"oid": "c338dd55a038ec6ce46ee07ced5458150d90689e", "url": "https://github.com/hub4j/github-api/commit/c338dd55a038ec6ce46ee07ced5458150d90689e", "message": "Consider header rate limit information for getRateLimit()\n\nFixes #802", "committedDate": "2020-05-18T20:48:25Z", "type": "forcePushed"}, {"oid": "91c59680d0dd6f2ebdda71b4f3aa59696a5f6e58", "url": "https://github.com/hub4j/github-api/commit/91c59680d0dd6f2ebdda71b4f3aa59696a5f6e58", "message": "Consider header rate limit information for getRateLimit()\n\nFixes #802", "committedDate": "2020-05-18T20:51:41Z", "type": "forcePushed"}, {"oid": "ad3f8333c093f2e6489dbd367f1cb382952bacea", "url": "https://github.com/hub4j/github-api/commit/ad3f8333c093f2e6489dbd367f1cb382952bacea", "message": "Consider header rate limit information for getRateLimit()\n\nFixes #802", "committedDate": "2020-05-18T20:53:17Z", "type": "forcePushed"}, {"oid": "38aa99a0630fac9f6cadebf69cecb23932340d7a", "url": "https://github.com/hub4j/github-api/commit/38aa99a0630fac9f6cadebf69cecb23932340d7a", "message": "Consider header rate limit information for getRateLimit()\n\nFixes #802", "committedDate": "2020-05-18T20:56:10Z", "type": "commit"}, {"oid": "38aa99a0630fac9f6cadebf69cecb23932340d7a", "url": "https://github.com/hub4j/github-api/commit/38aa99a0630fac9f6cadebf69cecb23932340d7a", "message": "Consider header rate limit information for getRateLimit()\n\nFixes #802", "committedDate": "2020-05-18T20:56:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwNjA5Ng==", "url": "https://github.com/hub4j/github-api/pull/817#discussion_r427006096", "bodyText": "I don\u2019t think this statement is right anymore at least on recent versions from reading the docs,\nMy understanding is that it is available but there\u2019s a global flag for turning it off or on.\nHaving it off means that it will return a 404", "author": "timja", "createdAt": "2020-05-19T03:16:39Z", "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -210,21 +210,31 @@ public boolean isAnonymous() {\n     /**\n      * Gets the current rate limit from the server.\n      *\n+     * For some versions of GitHub Enterprise, the {@code /rate_limit} endpoint returns a {@code 404 Not Found}. In\n+     * that, if {@link #lastRateLimit()} is not {@code null} and is not expired, it will be returned. Otherwise, a\n+     * placeholder {@link GHRateLimit} instance with {@link GHRateLimit.UnknownLimitRecord}s will be returned.\n+     *\n      * @return the rate limit\n      * @throws IOException\n      *             the io exception\n      */\n+    @Nonnull\n     public GHRateLimit getRateLimit() throws IOException {\n-        GHRateLimit rateLimit;\n+        GHRateLimit result;\n         try {\n-            rateLimit = fetch(JsonRateLimit.class, \"/rate_limit\").resources;\n+            result = fetch(JsonRateLimit.class, \"/rate_limit\").resources;\n         } catch (FileNotFoundException e) {\n-            // GitHub Enterprise doesn't have the rate limit\n-            // return a default rate limit that\n-            rateLimit = GHRateLimit.Unknown();\n+            // GitHub Enterprise doesn't have the rate_limit endpoint", "originalCommit": "38aa99a0630fac9f6cadebf69cecb23932340d7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f994f31f7d0ea0cef5f0c67a61832b9dd482dd2", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GitHubClient.java b/src/main/java/org/kohsuke/github/GitHubClient.java\nindex f5ed03dbc..887c2db20 100644\n--- a/src/main/java/org/kohsuke/github/GitHubClient.java\n+++ b/src/main/java/org/kohsuke/github/GitHubClient.java\n\n@@ -224,7 +224,7 @@ abstract class GitHubClient {\n         try {\n             result = fetch(JsonRateLimit.class, \"/rate_limit\").resources;\n         } catch (FileNotFoundException e) {\n-            // GitHub Enterprise doesn't have the rate_limit endpoint\n+            // For some versions of GitHub Enterprise, the rate_limit endpoint returns a 404.\n             // However some newer versions of GHE include rate limit header information\n             // Use that if available\n             result = lastRateLimit();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwOTAyNg==", "url": "https://github.com/hub4j/github-api/pull/817#discussion_r427609026", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // GitHub Enterprise doesn't have the rate_limit endpoint\n          \n          \n            \n                        // For some versions of GitHub Enterprise, the rate_limit endpoint returns a 404.", "author": "bitwiseman", "createdAt": "2020-05-19T21:24:47Z", "path": "src/main/java/org/kohsuke/github/GitHubClient.java", "diffHunk": "@@ -210,21 +210,31 @@ public boolean isAnonymous() {\n     /**\n      * Gets the current rate limit from the server.\n      *\n+     * For some versions of GitHub Enterprise, the {@code /rate_limit} endpoint returns a {@code 404 Not Found}. In\n+     * that, if {@link #lastRateLimit()} is not {@code null} and is not expired, it will be returned. Otherwise, a\n+     * placeholder {@link GHRateLimit} instance with {@link GHRateLimit.UnknownLimitRecord}s will be returned.\n+     *\n      * @return the rate limit\n      * @throws IOException\n      *             the io exception\n      */\n+    @Nonnull\n     public GHRateLimit getRateLimit() throws IOException {\n-        GHRateLimit rateLimit;\n+        GHRateLimit result;\n         try {\n-            rateLimit = fetch(JsonRateLimit.class, \"/rate_limit\").resources;\n+            result = fetch(JsonRateLimit.class, \"/rate_limit\").resources;\n         } catch (FileNotFoundException e) {\n-            // GitHub Enterprise doesn't have the rate limit\n-            // return a default rate limit that\n-            rateLimit = GHRateLimit.Unknown();\n+            // GitHub Enterprise doesn't have the rate_limit endpoint", "originalCommit": "38aa99a0630fac9f6cadebf69cecb23932340d7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f994f31f7d0ea0cef5f0c67a61832b9dd482dd2", "chunk": "diff --git a/src/main/java/org/kohsuke/github/GitHubClient.java b/src/main/java/org/kohsuke/github/GitHubClient.java\nindex f5ed03dbc..887c2db20 100644\n--- a/src/main/java/org/kohsuke/github/GitHubClient.java\n+++ b/src/main/java/org/kohsuke/github/GitHubClient.java\n\n@@ -224,7 +224,7 @@ abstract class GitHubClient {\n         try {\n             result = fetch(JsonRateLimit.class, \"/rate_limit\").resources;\n         } catch (FileNotFoundException e) {\n-            // GitHub Enterprise doesn't have the rate_limit endpoint\n+            // For some versions of GitHub Enterprise, the rate_limit endpoint returns a 404.\n             // However some newer versions of GHE include rate limit header information\n             // Use that if available\n             result = lastRateLimit();\n"}}, {"oid": "6f994f31f7d0ea0cef5f0c67a61832b9dd482dd2", "url": "https://github.com/hub4j/github-api/commit/6f994f31f7d0ea0cef5f0c67a61832b9dd482dd2", "message": "Update src/main/java/org/kohsuke/github/GitHubClient.java", "committedDate": "2020-05-19T21:25:16Z", "type": "commit"}]}