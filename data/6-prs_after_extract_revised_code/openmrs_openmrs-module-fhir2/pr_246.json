{"pr_number": 246, "pr_title": "FM2-216 :- Add create, update, and delete methods for List.", "pr_createdAt": "2020-07-03T13:40:07Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwNjE3NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450006175", "bodyText": "change this to;\nreturn FhirProviderUtils.buildDelete(List30_40.convertList(listResource))));", "author": "corneliouzbett", "createdAt": "2020-07-06T06:23:24Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProvider.java", "diffHunk": "@@ -50,4 +59,34 @@ public ListResource getListById(@IdParam @NotNull IdType id) {\n \t\t\n \t\treturn List30_40.convertList(listResource);\n \t}\n+\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatListResource(@ResourceParam ListResource listResource) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t\t\tlistService.create(List30_40.convertList(listResource)));\n+\t}\n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateListResource(@IdParam IdType id, @ResourceParam ListResource listResource) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlistResource.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(listService.update(id.getIdPart(),\n+\t\t\t\tList30_40.convertList(listResource)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteListResource(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = listService.delete(id.getIdPart());\n+\t\tif (listResource == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find list to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(listResource));", "originalCommit": "c4720a43d522dd58ef459f10772bed2e665fa327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3Mjk3NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450172974", "bodyText": "@corneliouzbett  sure", "author": "Akayeshmantha", "createdAt": "2020-07-06T12:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwNjE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbeb7c59acd52149eb84910ad80839838420b523", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProvider.java\nindex 09166930..409ad774 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProvider.java\n\n@@ -87,6 +87,6 @@ public class ListFhirResourceProvider implements IResourceProvider {\n \t\tif (listResource == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find list to delete with id \" + id.getIdPart());\n \t\t}\n-\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(listResource));\n+\t\treturn FhirProviderUtils.buildDelete(List30_40.convertList(listResource));\n \t}\n }\n"}}, {"oid": "fbeb7c59acd52149eb84910ad80839838420b523", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/fbeb7c59acd52149eb84910ad80839838420b523", "message": "FM2-216 :- Add create, update, and delete methods for List.", "committedDate": "2020-07-06T12:00:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODYxOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450188619", "bodyText": "Don't you think you should be using delete instead of get in this test ?", "author": "varung-31", "createdAt": "2020-07-06T12:33:01Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java", "diffHunk": "@@ -76,4 +92,91 @@ public void shouldReturn404IfListNotFound() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\t@Test\n+\tpublic void createList_shouldCreateNewList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.create(any(org.hl7.fhir.r4.model.ListResource.class))).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/List\").jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldUpdateRequestedList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.update(any(String.class), any(org.hl7.fhir.r4.model.ListResource.class)))\n+\t\t        .thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForNoId() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + UNKNOWN_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldDeleteList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\twhen(cohortFhirListService.delete(LIST_UUID)).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + LIST_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n+\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();", "originalCommit": "fbeb7c59acd52149eb84910ad80839838420b523", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NDEwOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450194109", "bodyText": "exactly it was a mistake", "author": "Akayeshmantha", "createdAt": "2020-07-06T12:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d85bfba52d0e65ba5cd4401791d9d0501744566", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java\nindex 0e33ce28..667ca6d2 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java\n\n@@ -173,9 +173,9 @@ public class ListFhirResourceProviderWebTest extends BaseFhirR3ResourceProviderW\n \t\n \t@Test\n \tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n-\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\twhen(cohortFhirListService.delete(UNKNOWN_UUID)).thenReturn(null);\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODc1NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450188754", "bodyText": "ditto", "author": "varung-31", "createdAt": "2020-07-06T12:33:18Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ListFhirResourceProviderWebTest.java", "diffHunk": "@@ -76,4 +96,84 @@ public void shouldReturn404IfListNotFound() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\t@Test\n+\tpublic void createList_shouldCreateNewList() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.create(any(ListResource.class))).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/List\").jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldUpdateRequestedList() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.update(any(String.class), any(ListResource.class))).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForNoId() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + UNKNOWN_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldDeleteList() throws Exception {\n+\t\twhen(cohortFhirListService.delete(LIST_UUID)).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + LIST_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n+\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();", "originalCommit": "fbeb7c59acd52149eb84910ad80839838420b523", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d85bfba52d0e65ba5cd4401791d9d0501744566", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ListFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ListFhirResourceProviderWebTest.java\nindex 03f03929..04d3bc03 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ListFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ListFhirResourceProviderWebTest.java\n\n@@ -170,9 +170,9 @@ public class ListFhirResourceProviderWebTest extends BaseFhirR4ResourceProviderW\n \t\n \t@Test\n \tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n-\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\twhen(cohortFhirListService.delete(UNKNOWN_UUID)).thenReturn(null);\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MDE4MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450190180", "bodyText": "You can also add an assert here as -\nassertThat(response.getStatus(), equalTo(404));", "author": "varung-31", "createdAt": "2020-07-06T12:36:13Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java", "diffHunk": "@@ -76,4 +92,91 @@ public void shouldReturn404IfListNotFound() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\t@Test\n+\tpublic void createList_shouldCreateNewList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.create(any(org.hl7.fhir.r4.model.ListResource.class))).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/List\").jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldUpdateRequestedList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.update(any(String.class), any(org.hl7.fhir.r4.model.ListResource.class)))\n+\t\t        .thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForNoId() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + UNKNOWN_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldDeleteList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\twhen(cohortFhirListService.delete(LIST_UUID)).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + LIST_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n+\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());", "originalCommit": "fbeb7c59acd52149eb84910ad80839838420b523", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5Mzg1Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450193852", "bodyText": "404 == notfound", "author": "Akayeshmantha", "createdAt": "2020-07-06T12:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MDE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NDk5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450194999", "bodyText": "Yeah I know, but just because the method name says 404, you might consider adding it.", "author": "varung-31", "createdAt": "2020-07-06T12:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MDE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "8d85bfba52d0e65ba5cd4401791d9d0501744566", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java\nindex 0e33ce28..667ca6d2 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java\n\n@@ -173,9 +173,9 @@ public class ListFhirResourceProviderWebTest extends BaseFhirR3ResourceProviderW\n \t\n \t@Test\n \tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n-\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\twhen(cohortFhirListService.delete(UNKNOWN_UUID)).thenReturn(null);\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n"}}, {"oid": "8d85bfba52d0e65ba5cd4401791d9d0501744566", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8d85bfba52d0e65ba5cd4401791d9d0501744566", "message": "FM2-216 :- Add create, update, and delete methods for List.", "committedDate": "2020-07-06T12:55:13Z", "type": "forcePushed"}, {"oid": "882ee11d8dfbc88d6bd10fa6080320114e5a2e57", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/882ee11d8dfbc88d6bd10fa6080320114e5a2e57", "message": "FM2-216 :- Add create, update, and delete methods for List.", "committedDate": "2020-07-06T14:05:23Z", "type": "commit"}, {"oid": "882ee11d8dfbc88d6bd10fa6080320114e5a2e57", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/882ee11d8dfbc88d6bd10fa6080320114e5a2e57", "message": "FM2-216 :- Add create, update, and delete methods for List.", "committedDate": "2020-07-06T14:05:23Z", "type": "forcePushed"}]}