{"pr_number": 182, "pr_title": "FM2-182: Add support for Observation.category", "pr_createdAt": "2020-05-21T21:21:51Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjU3NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429052575", "bodyText": "You should also add a check for null concept", "author": "corneliouzbett", "createdAt": "2020-05-22T05:41:47Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.mappings.ObservationCategoryMap;\n+import org.openmrs.module.fhir2.api.translators.ObservationCategoryTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryTranslatorImpl implements ObservationCategoryTranslator {\n+\t\n+\t@Autowired\n+\tprivate ObservationCategoryMap categoryMap;\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Concept concept) {\n+\t\tString category = categoryMap.getCategory(concept.getConceptClass().getUuid());", "originalCommit": "601a6dcd221b9c98b2511314c01aebaa4cd61406", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NDMyOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429074329", "bodyText": "Sorry, my bad", "author": "corneliouzbett", "createdAt": "2020-05-22T06:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjU3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MTg0Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429291842", "bodyText": "This is actually a good point. It's better to have null checks at the point it's used rather than just before it's called.", "author": "ibacher", "createdAt": "2020-05-22T14:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef74f1a1e53b6693641d82137130a3616933fc83", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java\nindex 172b8735..2474ee3b 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java\n\n@@ -26,6 +26,10 @@ public class ObservationCategoryTranslatorImpl implements ObservationCategoryTra\n \t\n \t@Override\n \tpublic CodeableConcept toFhirResource(Concept concept) {\n+\t\tif (concept == null || concept.getConceptClass() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n \t\tString category = categoryMap.getCategory(concept.getConceptClass().getUuid());\n \t\t\n \t\tif (category == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MzMwNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429063307", "bodyText": "I think this can be achieved using one loop with two declarations of ImmutableMap.Builder<String, String> builder. One less loop is better", "author": "corneliouzbett", "createdAt": "2020-05-22T06:22:09Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.mappings;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryMap {\n+\t\n+\t@Autowired\n+\tprivate ResourceLoader resourceLoader;\n+\t\n+\tprivate volatile Map<String, String> classDelegate = null;\n+\t\n+\tprivate volatile Map<String, String> conceptDelegate = null;\n+\t\n+\tpublic String getCategory(@NotNull String conceptClassUuid) {\n+\t\tsetupDelegates();\n+\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n+\t}\n+\t\n+\tpublic String getConceptClassUuid(@NotNull String category) {\n+\t\tsetupDelegates();\n+\t\treturn conceptDelegate.getOrDefault(category, null);\n+\t}\n+\t\n+\tprivate void setupDelegates() {\n+\t\tif (classDelegate == null) {\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (classDelegate == null) {\n+\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\n+\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n+\t\t\t\t\t\tproperties.load(in);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ignored) {}\n+\t\t\t\t\t\n+\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tclassDelegate = builder.build();\n+\t\t\t\t\t\n+\t\t\t\t\tbuilder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getKey().toString(), entry.getValue().toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tconceptDelegate = builder.build();", "originalCommit": "601a6dcd221b9c98b2511314c01aebaa4cd61406", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MTk0MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429291941", "bodyText": "You're absolutely right!", "author": "ibacher", "createdAt": "2020-05-22T14:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MzMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "ef74f1a1e53b6693641d82137130a3616933fc83", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java b/api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java\nindex 09e4b144..1589af36 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java\n\n@@ -11,64 +11,9 @@ package org.openmrs.module.fhir2.api.mappings;\n \n import javax.validation.constraints.NotNull;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Map;\n-import java.util.Properties;\n-\n-import com.google.common.collect.ImmutableMap;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.ResourceLoader;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class ObservationCategoryMap {\n-\t\n-\t@Autowired\n-\tprivate ResourceLoader resourceLoader;\n-\t\n-\tprivate volatile Map<String, String> classDelegate = null;\n-\t\n-\tprivate volatile Map<String, String> conceptDelegate = null;\n-\t\n-\tpublic String getCategory(@NotNull String conceptClassUuid) {\n-\t\tsetupDelegates();\n-\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n-\t}\n+public interface ObservationCategoryMap {\n \t\n-\tpublic String getConceptClassUuid(@NotNull String category) {\n-\t\tsetupDelegates();\n-\t\treturn conceptDelegate.getOrDefault(category, null);\n-\t}\n+\tString getCategory(@NotNull String conceptClassUuid);\n \t\n-\tprivate void setupDelegates() {\n-\t\tif (classDelegate == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (classDelegate == null) {\n-\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n-\t\t\t\t\tProperties properties = new Properties();\n-\t\t\t\t\t\n-\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n-\t\t\t\t\t\tproperties.load(in);\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (IOException ignored) {}\n-\t\t\t\t\t\n-\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n-\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n-\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tclassDelegate = builder.build();\n-\t\t\t\t\t\n-\t\t\t\t\tbuilder = ImmutableMap.builderWithExpectedSize(properties.size());\n-\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n-\t\t\t\t\t\tbuilder.put(entry.getKey().toString(), entry.getValue().toString());\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tconceptDelegate = builder.build();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+\tString getConceptClassUuid(@NotNull String category);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NTg1OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429065859", "bodyText": "There's a possibility of  entry.getValue().toString() having extra space. You should consider trimming by adding entry.getValue().toString().trim()", "author": "corneliouzbett", "createdAt": "2020-05-22T06:30:23Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.mappings;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryMap {\n+\t\n+\t@Autowired\n+\tprivate ResourceLoader resourceLoader;\n+\t\n+\tprivate volatile Map<String, String> classDelegate = null;\n+\t\n+\tprivate volatile Map<String, String> conceptDelegate = null;\n+\t\n+\tpublic String getCategory(@NotNull String conceptClassUuid) {\n+\t\tsetupDelegates();\n+\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n+\t}\n+\t\n+\tpublic String getConceptClassUuid(@NotNull String category) {\n+\t\tsetupDelegates();\n+\t\treturn conceptDelegate.getOrDefault(category, null);\n+\t}\n+\t\n+\tprivate void setupDelegates() {\n+\t\tif (classDelegate == null) {\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (classDelegate == null) {\n+\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\n+\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n+\t\t\t\t\t\tproperties.load(in);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ignored) {}\n+\t\t\t\t\t\n+\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());", "originalCommit": "601a6dcd221b9c98b2511314c01aebaa4cd61406", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MjExMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429292111", "bodyText": "Thanks Bett! I forgot about that.", "author": "ibacher", "createdAt": "2020-05-22T14:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NTg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef74f1a1e53b6693641d82137130a3616933fc83", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java b/api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java\nindex 09e4b144..1589af36 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java\n\n@@ -11,64 +11,9 @@ package org.openmrs.module.fhir2.api.mappings;\n \n import javax.validation.constraints.NotNull;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Map;\n-import java.util.Properties;\n-\n-import com.google.common.collect.ImmutableMap;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.ResourceLoader;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class ObservationCategoryMap {\n-\t\n-\t@Autowired\n-\tprivate ResourceLoader resourceLoader;\n-\t\n-\tprivate volatile Map<String, String> classDelegate = null;\n-\t\n-\tprivate volatile Map<String, String> conceptDelegate = null;\n-\t\n-\tpublic String getCategory(@NotNull String conceptClassUuid) {\n-\t\tsetupDelegates();\n-\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n-\t}\n+public interface ObservationCategoryMap {\n \t\n-\tpublic String getConceptClassUuid(@NotNull String category) {\n-\t\tsetupDelegates();\n-\t\treturn conceptDelegate.getOrDefault(category, null);\n-\t}\n+\tString getCategory(@NotNull String conceptClassUuid);\n \t\n-\tprivate void setupDelegates() {\n-\t\tif (classDelegate == null) {\n-\t\t\tsynchronized (this) {\n-\t\t\t\tif (classDelegate == null) {\n-\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n-\t\t\t\t\tProperties properties = new Properties();\n-\t\t\t\t\t\n-\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n-\t\t\t\t\t\tproperties.load(in);\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (IOException ignored) {}\n-\t\t\t\t\t\n-\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n-\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n-\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tclassDelegate = builder.build();\n-\t\t\t\t\t\n-\t\t\t\t\tbuilder = ImmutableMap.builderWithExpectedSize(properties.size());\n-\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n-\t\t\t\t\t\tbuilder.put(entry.getKey().toString(), entry.getValue().toString());\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tconceptDelegate = builder.build();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+\tString getConceptClassUuid(@NotNull String category);\n }\n"}}, {"oid": "ef74f1a1e53b6693641d82137130a3616933fc83", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ef74f1a1e53b6693641d82137130a3616933fc83", "message": "FM2-182: Add support for Observation.category", "committedDate": "2020-05-22T14:58:20Z", "type": "forcePushed"}, {"oid": "e577222de33fe2c408741a485125ec625b47bd38", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e577222de33fe2c408741a485125ec625b47bd38", "message": "FM2-182: Add support for Observation.category", "committedDate": "2020-05-22T15:00:11Z", "type": "forcePushed"}, {"oid": "17e2ecbcd9111d01484f92a8a366f424e7a7233f", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/17e2ecbcd9111d01484f92a8a366f424e7a7233f", "message": "FM2-182: Add support for Observation.category", "committedDate": "2020-05-26T15:30:27Z", "type": "commit"}, {"oid": "17e2ecbcd9111d01484f92a8a366f424e7a7233f", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/17e2ecbcd9111d01484f92a8a366f424e7a7233f", "message": "FM2-182: Add support for Observation.category", "committedDate": "2020-05-26T15:30:27Z", "type": "forcePushed"}]}