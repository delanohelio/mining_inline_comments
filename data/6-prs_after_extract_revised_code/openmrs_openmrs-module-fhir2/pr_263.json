{"pr_number": 263, "pr_title": "FM2-267: Add create, update and delete methods for ProcedureRequest", "pr_createdAt": "2020-07-25T17:06:35Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/263", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0OTI1Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/263#discussion_r461549253", "bodyText": "This needs to be converted back into a ProcedureRequest before it's passed to buildUpdate()", "author": "ibacher", "createdAt": "2020-07-28T12:43:23Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java", "diffHunk": "@@ -54,6 +63,34 @@ public ProcedureRequest getProcedureRequestById(@IdParam @NotNull IdType id) {\n \t\treturn (ProcedureRequest) VersionConvertor_30_40.convertResource(serviceRequest, false);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createProcedureRequest(@ResourceParam ProcedureRequest procedureRequest) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t    serviceRequestService.create((ServiceRequest) VersionConvertor_30_40.convertResource(procedureRequest, false)));\n+\t}\n+\t\n+\t@Update\n+\tpublic MethodOutcome updateProcedureRequest(@IdParam IdType id, @ResourceParam ProcedureRequest procedureRequest) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\t\t\n+\t\tprocedureRequest.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(serviceRequestService.update(id.getIdPart(),", "originalCommit": "644014172fdfa088df58c0cdc01cecec00bbe17e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25056b2da37cb4d1c30cc601dc92f5be57a8a146", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java\nindex 0f5c14d4..74f74fe1 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java\n\n@@ -65,8 +69,9 @@ public class ProcedureRequestFhirResourceProvider implements IResourceProvider {\n \t\n \t@Create\n \tpublic MethodOutcome createProcedureRequest(@ResourceParam ProcedureRequest procedureRequest) {\n-\t\treturn FhirProviderUtils.buildCreate(\n-\t\t    serviceRequestService.create((ServiceRequest) VersionConvertor_30_40.convertResource(procedureRequest, false)));\n+\t\treturn FhirProviderUtils.buildCreate(VersionConvertor_30_40.convertResource(\n+\t\t    serviceRequestService.create((ServiceRequest) VersionConvertor_30_40.convertResource(procedureRequest, false)),\n+\t\t    false));\n \t}\n \t\n \t@Update\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0OTcwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/263#discussion_r461549705", "bodyText": "This needs to be converted back to a ProcedureRequest before it's passed to buildCreate()", "author": "ibacher", "createdAt": "2020-07-28T12:44:07Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java", "diffHunk": "@@ -54,6 +63,34 @@ public ProcedureRequest getProcedureRequestById(@IdParam @NotNull IdType id) {\n \t\treturn (ProcedureRequest) VersionConvertor_30_40.convertResource(serviceRequest, false);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createProcedureRequest(@ResourceParam ProcedureRequest procedureRequest) {\n+\t\treturn FhirProviderUtils.buildCreate(", "originalCommit": "644014172fdfa088df58c0cdc01cecec00bbe17e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25056b2da37cb4d1c30cc601dc92f5be57a8a146", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java\nindex 0f5c14d4..74f74fe1 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProvider.java\n\n@@ -65,8 +69,9 @@ public class ProcedureRequestFhirResourceProvider implements IResourceProvider {\n \t\n \t@Create\n \tpublic MethodOutcome createProcedureRequest(@ResourceParam ProcedureRequest procedureRequest) {\n-\t\treturn FhirProviderUtils.buildCreate(\n-\t\t    serviceRequestService.create((ServiceRequest) VersionConvertor_30_40.convertResource(procedureRequest, false)));\n+\t\treturn FhirProviderUtils.buildCreate(VersionConvertor_30_40.convertResource(\n+\t\t    serviceRequestService.create((ServiceRequest) VersionConvertor_30_40.convertResource(procedureRequest, false)),\n+\t\t    false));\n \t}\n \t\n \t@Update\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MDEyOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/263#discussion_r461550128", "bodyText": "This is definitely not the expected condition (i.e., an R3 resource provider needs to return the R3 resource).", "author": "ibacher", "createdAt": "2020-07-28T12:44:50Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java", "diffHunk": "@@ -107,6 +113,82 @@ public void getServiceRequestByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(resourceProvider.getProcedureRequestById(idType), nullValue());\n \t}\n \t\n+\t@Test\n+\tpublic void createProcedureRequest_shouldCreateNewProcedureRequest() {\n+\t\twhen(serviceRequestService.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider\n+\t\t        .createProcedureRequest((ProcedureRequest) VersionConvertor_30_40.convertResource(serviceRequest, false));\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), equalTo(serviceRequest));", "originalCommit": "644014172fdfa088df58c0cdc01cecec00bbe17e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25056b2da37cb4d1c30cc601dc92f5be57a8a146", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java\nindex b4f91feb..41b49c00 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java\n\n@@ -114,6 +128,123 @@ public class ProcedureRequestFhirResourceProviderTest {\n \t}\n \t\n \t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestByCode() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tTokenAndListParam code = new TokenAndListParam().addAnd(new TokenParam(CODE));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, null, code, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestWhenPatientParamIsSpecified() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam patientParam = new ReferenceAndListParam().addAnd(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_GIVEN_NAME).setChain(Patient.SP_NAME)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(patientParam, null, null, null, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestWhenSubjectParamIsSpecified() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam subjectParam = new ReferenceAndListParam().addAnd(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_GIVEN_NAME).setChain(Patient.SP_NAME)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, subjectParam, null, null, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestByRequesterParam() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam practitionerParam = new ReferenceAndListParam().addAnd(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(PARTICIPANT_IDENTIFIER).setChain(Practitioner.SP_IDENTIFIER)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, null, null, null, practitionerParam,\n+\t\t    null, null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestByOccurrence() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tDateRangeParam occurrence = new DateRangeParam().setLowerBound(OCCURRENCE).setUpperBound(OCCURRENCE);\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, null, null, null, null, occurrence, null,\n+\t\t    null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestByEncounter() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any()))\n+\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t\t\n+\t\tReferenceAndListParam encounterParam = new ReferenceAndListParam()\n+\t\t        .addAnd(new ReferenceOrListParam().add(new ReferenceParam().setValue(ENCOUNTER_UUID).setChain(null)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, null, null, encounterParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n \tpublic void createProcedureRequest_shouldCreateNewProcedureRequest() {\n \t\twhen(serviceRequestService.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MDI3OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/263#discussion_r461550279", "bodyText": "This is definitely not the expected condition (i.e., an R3 resource provider needs to return the R3 resource).", "author": "ibacher", "createdAt": "2020-07-28T12:45:03Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java", "diffHunk": "@@ -107,6 +113,82 @@ public void getServiceRequestByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(resourceProvider.getProcedureRequestById(idType), nullValue());\n \t}\n \t\n+\t@Test\n+\tpublic void createProcedureRequest_shouldCreateNewProcedureRequest() {\n+\t\twhen(serviceRequestService.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider\n+\t\t        .createProcedureRequest((ProcedureRequest) VersionConvertor_30_40.convertResource(serviceRequest, false));\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), equalTo(serviceRequest));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateProcedureRequest_shouldUpdateProcedureRequest() {\n+\t\twhen(serviceRequestService.update(eq(SERVICE_REQUEST_UUID), any(ServiceRequest.class))).thenReturn(serviceRequest);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updateProcedureRequest(new IdType().setValue(SERVICE_REQUEST_UUID),\n+\t\t    (ProcedureRequest) VersionConvertor_30_40.convertResource(serviceRequest, false));\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getResource(), equalTo(serviceRequest));", "originalCommit": "644014172fdfa088df58c0cdc01cecec00bbe17e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25056b2da37cb4d1c30cc601dc92f5be57a8a146", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java\nindex b4f91feb..41b49c00 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/ProcedureRequestFhirResourceProviderTest.java\n\n@@ -114,6 +128,123 @@ public class ProcedureRequestFhirResourceProviderTest {\n \t}\n \t\n \t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestByCode() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tTokenAndListParam code = new TokenAndListParam().addAnd(new TokenParam(CODE));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, null, code, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestWhenPatientParamIsSpecified() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam patientParam = new ReferenceAndListParam().addAnd(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_GIVEN_NAME).setChain(Patient.SP_NAME)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(patientParam, null, null, null, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestWhenSubjectParamIsSpecified() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam subjectParam = new ReferenceAndListParam().addAnd(\n+\t\t    new ReferenceOrListParam().add(new ReferenceParam().setValue(PATIENT_GIVEN_NAME).setChain(Patient.SP_NAME)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, subjectParam, null, null, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestByRequesterParam() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tReferenceAndListParam practitionerParam = new ReferenceAndListParam().addAnd(new ReferenceOrListParam()\n+\t\t        .add(new ReferenceParam().setValue(PARTICIPANT_IDENTIFIER).setChain(Practitioner.SP_IDENTIFIER)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, null, null, null, practitionerParam,\n+\t\t    null, null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestByOccurrence() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any())).thenReturn(\n+\t\t    new MockIBundleProvider<>(Collections.singletonList(serviceRequest), PREFERRED_PAGE_SIZE, COUNT));\n+\t\t\n+\t\tDateRangeParam occurrence = new DateRangeParam().setLowerBound(OCCURRENCE).setUpperBound(OCCURRENCE);\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, null, null, null, null, occurrence, null,\n+\t\t    null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchProcedureRequest_shouldReturnMatchingProcedureRequestByEncounter() {\n+\t\twhen(serviceRequestService.searchForServiceRequests(any(), any(), any(), any(), any(), any(), any()))\n+\t\t        .thenReturn(new MockIBundleProvider<>(Collections.singletonList(serviceRequest), 10, 1));\n+\t\t\n+\t\tReferenceAndListParam encounterParam = new ReferenceAndListParam()\n+\t\t        .addAnd(new ReferenceOrListParam().add(new ReferenceParam().setValue(ENCOUNTER_UUID).setChain(null)));\n+\t\t\n+\t\tIBundleProvider results = resourceProvider.searchForProcedureRequests(null, null, null, encounterParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tList<IBaseResource> resources = getResources(results);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(resources, hasSize(equalTo(1)));\n+\t\tassertThat(resources.get(0), notNullValue());\n+\t\tassertThat(resources.get(0).fhirType(), equalTo(FhirConstants.SERVICE_REQUEST));\n+\t\tassertThat(resources.get(0).getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n+\t}\n+\t\n \tpublic void createProcedureRequest_shouldCreateNewProcedureRequest() {\n \t\twhen(serviceRequestService.create(any(ServiceRequest.class))).thenReturn(serviceRequest);\n \t\t\n"}}, {"oid": "f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f3a5e8e9ca0ebc2a1e3dea2a4268f60ae0d12723", "message": "Fix formatting issues", "committedDate": "2020-07-22T06:10:43Z", "type": "forcePushed"}, {"oid": "25056b2da37cb4d1c30cc601dc92f5be57a8a146", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/25056b2da37cb4d1c30cc601dc92f5be57a8a146", "message": "FM2-267: Add create, update and delete methods for ProcedureRequest", "committedDate": "2020-07-30T15:37:05Z", "type": "commit"}, {"oid": "25056b2da37cb4d1c30cc601dc92f5be57a8a146", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/25056b2da37cb4d1c30cc601dc92f5be57a8a146", "message": "FM2-267: Add create, update and delete methods for ProcedureRequest", "committedDate": "2020-07-30T15:37:05Z", "type": "forcePushed"}]}