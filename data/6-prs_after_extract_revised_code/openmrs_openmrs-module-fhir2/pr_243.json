{"pr_number": 243, "pr_title": "FM2-215: Add create, update, and delete methods for Encounter.", "pr_createdAt": "2020-07-03T12:08:24Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNDQ4OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#discussion_r450014488", "bodyText": "return FhirProviderUtils.buildDelete(Encounter30_40.convertEncounter(encounter))));", "author": "corneliouzbett", "createdAt": "2020-07-06T06:46:27Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java", "diffHunk": "@@ -61,6 +70,36 @@ public Encounter getEncounterById(@IdParam @NotNull IdType id) {\n \t\t\n \t\treturn Encounter30_40.convertEncounter(encounter);\n \t}\n+\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatEncounter(@ResourceParam Encounter encounter) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t\t\tencounterService.create(Encounter30_40.convertEncounter(encounter)));\n+\t}\n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateEncounter(@IdParam IdType id, @ResourceParam Encounter encounter) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tencounter.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(encounterService.update(id.getIdPart(),\n+\t\t\t\tEncounter30_40.convertEncounter(encounter)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteEncounter(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = encounterService.delete(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(encounter));", "originalCommit": "e068a26886586b61f1d09bfe667a60ccd7ef9816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MTAzOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#discussion_r450171039", "bodyText": "@corneliouzbett  sure done", "author": "Akayeshmantha", "createdAt": "2020-07-06T11:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNDQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java\nindex 4be758b3..0c9e5a88 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java\n\n@@ -70,27 +69,26 @@ public class EncounterFhirResourceProvider implements IResourceProvider {\n \t\t\n \t\treturn Encounter30_40.convertEncounter(encounter);\n \t}\n-\n+\t\n \t@Create\n \t@SuppressWarnings(\"unused\")\n \tpublic MethodOutcome creatEncounter(@ResourceParam Encounter encounter) {\n-\t\treturn FhirProviderUtils.buildCreate(\n-\t\t\t\tencounterService.create(Encounter30_40.convertEncounter(encounter)));\n+\t\treturn FhirProviderUtils.buildCreate(encounterService.create(Encounter30_40.convertEncounter(encounter)));\n \t}\n-\n+\t\n \t@Update\n \t@SuppressWarnings(\"unused\")\n \tpublic MethodOutcome updateEncounter(@IdParam IdType id, @ResourceParam Encounter encounter) {\n \t\tif (id == null || id.getIdPart() == null) {\n \t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n \t\t}\n-\n+\t\t\n \t\tencounter.setId(id.getIdPart());\n-\n-\t\treturn FhirProviderUtils.buildUpdate(encounterService.update(id.getIdPart(),\n-\t\t\t\tEncounter30_40.convertEncounter(encounter)));\n+\t\t\n+\t\treturn FhirProviderUtils\n+\t\t        .buildUpdate(encounterService.update(id.getIdPart(), Encounter30_40.convertEncounter(encounter)));\n \t}\n-\n+\t\n \t@Delete\n \t@SuppressWarnings(\"unused\")\n \tpublic OperationOutcome deleteEncounter(@IdParam @NotNull IdType id) {\n"}}, {"oid": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "message": "FM2-215:Add create, update, and delete methods for Encounter.", "committedDate": "2020-07-06T11:56:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjEwOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#discussion_r450192109", "bodyText": "Please use delete instead of get.", "author": "varung-31", "createdAt": "2020-07-06T12:39:57Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -553,4 +566,92 @@ private MockHttpServletResponse getEncounterHistoryRequest() throws IOException,\n \t\treturn get(\"/Encounter/\" + ENCOUNTER_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createEncounter_shouldCreateNewEncounter() throws Exception {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = new org.hl7.fhir.r4.model.Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_ENCOUNTER_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(encounterService.create(any(org.hl7.fhir.r4.model.Encounter.class))).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Encounter\").jsonContent(encounterJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldUpdateRequestedEncounter() throws Exception {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = new org.hl7.fhir.r4.model.Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(encounterService.update(any(String.class), any(org.hl7.fhir.r4.model.Encounter.class))).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldErrorForNoId() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteEncounter_shouldDeleteEncounter() throws Exception {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = new org.hl7.fhir.r4.model.Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\t\n+\t\twhen(encounterService.delete(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/Encounter/\" + ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteEncounter_shouldReturn404ForNonExistingEncounter() throws Exception {\n+\t\twhen(encounterService.get(WRONG_ENCOUNTER_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();", "originalCommit": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MzI1Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#discussion_r450193256", "bodyText": "oh sure", "author": "Akayeshmantha", "createdAt": "2020-07-06T12:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f65d25d56e7c6ab1cf1bccfcba08cbd91caf783a", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java\nindex 1342ea00..5422d613 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java\n\n@@ -648,9 +648,9 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirR3ResourceProv\n \t\n \t@Test\n \tpublic void deleteEncounter_shouldReturn404ForNonExistingEncounter() throws Exception {\n-\t\twhen(encounterService.get(WRONG_ENCOUNTER_UUID)).thenReturn(null);\n+\t\twhen(encounterService.delete(WRONG_ENCOUNTER_UUID)).thenReturn(null);\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = delete(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjI0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#discussion_r450192244", "bodyText": "Ditto", "author": "varung-31", "createdAt": "2020-07-06T12:40:12Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -587,4 +604,85 @@ private MockHttpServletResponse getEncounterHistoryRequest() throws IOException,\n \t\treturn get(\"/Encounter/\" + ENCOUNTER_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createEncounter_shouldCreateNewEncounter() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_ENCOUNTER_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(encounterService.create(any(Encounter.class))).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Encounter\").jsonContent(encounterJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldUpdateRequestedEncounter() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(encounterService.update(any(String.class), any(Encounter.class))).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldErrorForNoId() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteEncounter_shouldDeleteEncounter() throws Exception {\n+\t\twhen(encounterService.delete(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/Encounter/\" + ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteEncounter_shouldReturn404ForNonExistingEncounter() throws Exception {\n+\t\twhen(encounterService.get(WRONG_ENCOUNTER_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();", "originalCommit": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f65d25d56e7c6ab1cf1bccfcba08cbd91caf783a", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProviderWebTest.java\nindex 26278692..99176a9c 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProviderWebTest.java\n\n@@ -679,9 +679,9 @@ public class EncounterFhirResourceProviderWebTest extends BaseFhirR4ResourceProv\n \t\n \t@Test\n \tpublic void deleteEncounter_shouldReturn404ForNonExistingEncounter() throws Exception {\n-\t\twhen(encounterService.get(WRONG_ENCOUNTER_UUID)).thenReturn(null);\n+\t\twhen(encounterService.delete(WRONG_ENCOUNTER_UUID)).thenReturn(null);\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = delete(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n"}}, {"oid": "f65d25d56e7c6ab1cf1bccfcba08cbd91caf783a", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f65d25d56e7c6ab1cf1bccfcba08cbd91caf783a", "message": "FM2-215:Add create, update, and delete methods for Encounter.", "committedDate": "2020-07-06T12:57:58Z", "type": "forcePushed"}, {"oid": "81c54bf95bf5ad041393908f55e3b87b1feb56c6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/81c54bf95bf5ad041393908f55e3b87b1feb56c6", "message": "FM2-215:Add create, update, and delete methods for Encounter.", "committedDate": "2020-07-09T08:20:15Z", "type": "commit"}, {"oid": "81c54bf95bf5ad041393908f55e3b87b1feb56c6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/81c54bf95bf5ad041393908f55e3b87b1feb56c6", "message": "FM2-215:Add create, update, and delete methods for Encounter.", "committedDate": "2020-07-09T08:20:15Z", "type": "forcePushed"}]}