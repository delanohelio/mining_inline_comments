{"pr_number": 41, "pr_title": " FM2-40 Implement OMOD unit tests for Task, Service Request, and Diagnostic Report", "pr_createdAt": "2020-01-25T23:27:59Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41", "timeline": [{"oid": "60041f702f8c8797e5583dc599dc479699389da8", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/60041f702f8c8797e5583dc599dc479699389da8", "message": "Implemented basic OMOD unit tests for Task and ServiceRequest for FM2-40.", "committedDate": "2020-01-28T05:00:51Z", "type": "forcePushed"}, {"oid": "b7aa4bf1b370f322303c5a604b5203b962ee9c8f", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b7aa4bf1b370f322303c5a604b5203b962ee9c8f", "message": "Implemented basic Task OMOD unit tests for FM2-40.", "committedDate": "2020-01-28T05:21:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMTM4NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r371821384", "bodyText": "We should have one testing naming convention per file. I'd probably prefer changing this one to updateTask_shouldUpdateTask()", "author": "ibacher", "createdAt": "2020-01-28T14:07:17Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/TaskFhirResourceProviderTest.java", "diffHunk": "@@ -82,4 +83,22 @@ public void getTaskByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tassertThat(resourceProvider.getTaskById(idType), nullValue());\n \t}\n \n+\t@Test\n+\tpublic void createTask_shouldCreateNewTask() {\n+\t\twhen(taskService.saveTask(task)).thenReturn(task);\n+\n+\t\tMethodOutcome result = resourceProvider.createTask(task);\n+\t\tassertThat(result.getResource(), equalTo(task));\n+\t}\n+\n+\t@Test\n+\tpublic void shouldUpdateTask() {", "originalCommit": "b7aa4bf1b370f322303c5a604b5203b962ee9c8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a48c58d1043858a3326385262f36c3fd8672777", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/TaskFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/TaskFhirResourceProviderTest.java\nindex 15cecd7e..a550d407 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/TaskFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/TaskFhirResourceProviderTest.java\n\n@@ -31,73 +31,75 @@ import org.openmrs.module.fhir2.api.FhirTaskService;\n \n @RunWith(MockitoJUnitRunner.class)\n public class TaskFhirResourceProviderTest {\n-\n+\t\n \tprivate static final String TASK_UUID = \"bdd7e368-3d1a-42a9-9538-395391b64adf\";\n-\n+\t\n \tprivate static final String WRONG_TASK_UUID = \"df34a1c1-f57b-4c33-bee5-e601b56b9d5b\";\n-\n+\t\n \t@Mock\n \tprivate FhirTaskService taskService;\n-\n+\t\n \t@Getter(AccessLevel.PUBLIC)\n \tprivate TaskFhirResourceProvider resourceProvider;\n-\n+\t\n \tprivate Task task;\n-\n+\t\n \t@Before\n \tpublic void setup() {\n \t\tresourceProvider = new TaskFhirResourceProvider();\n \t\tresourceProvider.setService(taskService);\n \t}\n-\n+\t\n \t@Before\n \tpublic void initTask() {\n \t\ttask = new Task();\n \t\ttask.setId(TASK_UUID);\n \t}\n-\n+\t\n \t@Test\n \tpublic void getResourceType_shouldReturnResourceType() {\n \t\tassertThat(resourceProvider.getResourceType(), equalTo(Task.class));\n \t\tassertThat(resourceProvider.getResourceType().getName(), equalTo(Task.class.getName()));\n \t}\n-\n+\t\n \t@Test\n \tpublic void getTaskById_shouldReturnMatchingTask() {\n \t\tIdType id = new IdType();\n \t\tid.setValue(TASK_UUID);\n \t\twhen(taskService.getTaskByUuid(TASK_UUID)).thenReturn(task);\n-\n+\t\t\n \t\tTask result = resourceProvider.getTaskById(id);\n+\t\t\n \t\tassertThat(result.isResource(), is(true));\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getId(), notNullValue());\n \t\tassertThat(result.getId(), equalTo(TASK_UUID));\n \t}\n-\n+\t\n \t@Test(expected = ResourceNotFoundException.class)\n \tpublic void getTaskByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_TASK_UUID);\n+\t\t\n \t\tassertThat(resourceProvider.getTaskById(idType).isResource(), is(true));\n \t\tassertThat(resourceProvider.getTaskById(idType), nullValue());\n \t}\n-\n+\t\n \t@Test\n \tpublic void createTask_shouldCreateNewTask() {\n \t\twhen(taskService.saveTask(task)).thenReturn(task);\n-\n+\t\t\n \t\tMethodOutcome result = resourceProvider.createTask(task);\n \t\tassertThat(result.getResource(), equalTo(task));\n \t}\n-\n+\t\n \t@Test\n \tpublic void shouldUpdateTask() {\n \t\twhen(taskService.updateTask(TASK_UUID, task)).thenReturn(task);\n-\n+\t\t\n \t\tIdType uuid = new IdType();\n \t\tuuid.setValue(TASK_UUID);\n-\n+\t\t\n \t\tMethodOutcome result = resourceProvider.updateTask(uuid, task);\n \t\tassertThat(result.getResource(), equalTo(task));\n \t}\n"}}, {"oid": "6a48c58d1043858a3326385262f36c3fd8672777", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6a48c58d1043858a3326385262f36c3fd8672777", "message": "Test fixes and first attempt at Create/Update web tests", "committedDate": "2020-02-12T21:21:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNDE4MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r378534180", "bodyText": "I'd save this as a file in the (non-existent) test/resources/org/openmrs/module/fhir2/providers. It can then be loaded by doing something like:\ntry (InputStream is = this.getClass().getClassLoader.getResourceAsStream(\"org/openmrs/module/fhir2/providers/TestDiagnosticReport_LAB.json\") {\n\tjsonDiagnosticReport = IOUtils.toString(is);\n}", "author": "ibacher", "createdAt": "2020-02-12T21:52:49Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -32,6 +32,34 @@\n \t\n \tprivate static final String WRONG_UUID = \"9bf0d1ac-62a8-4440-a5a1-eb1015a7cc65\";\n \t\n+\t// TODO: Load from file or clean up some other way - maybe Resource --> JSON representation\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT = \"{\\n\" + \"    \\\"resourceType\\\": \\\"Bundle\\\",\\n\"", "originalCommit": "6a48c58d1043858a3326385262f36c3fd8672777", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd92fad901f93e03e56ec7f24cc489c98c5007f5", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\nindex 11da14c2..fd73d300 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n\n@@ -32,33 +40,11 @@ public class DiagnosticReportFhirResourceProviderWebTest extends BaseFhirResourc\n \t\n \tprivate static final String WRONG_UUID = \"9bf0d1ac-62a8-4440-a5a1-eb1015a7cc65\";\n \t\n-\t// TODO: Load from file or clean up some other way - maybe Resource --> JSON representation\n-\tprivate static final String JSON_DIAGNOSTIC_REPORT = \"{\\n\" + \"    \\\"resourceType\\\": \\\"Bundle\\\",\\n\"\n-\t        + \"    \\\"id\\\": \\\"101\\\",\\n\" + \"    \\\"type\\\": \\\"collection\\\",\\n\" + \"    \\\"entry\\\": [\\n\" + \"      {\\n\"\n-\t        + \"        \\\"resource\\\": {\\n\" + \"          \\\"resourceType\\\": \\\"DiagnosticReport\\\",\\n\"\n-\t        + \"          \\\"id\\\": \\\"101\\\",\\n\" + \"          \\\"identifier\\\": [\\n\" + \"            {\\n\"\n-\t        + \"              \\\"value\\\": \\\"8a849d5e-6011-4279-a124-40ada5a687de\\\"\\n\" + \"            }\\n\" + \"          ],\\n\"\n-\t        + \"          \\\"status\\\": \\\"final\\\",\\n\" + \"          \\\"category\\\": [\\n\" + \"            {\\n\"\n-\t        + \"              \\\"coding\\\": [\\n\" + \"                {\\n\"\n-\t        + \"                  \\\"system\\\": \\\"http://hl7.org/fhir/ValueSet/diagnostic-service-sections\\\",\\n\"\n-\t        + \"                  \\\"code\\\": \\\"LAB\\\"\\n\" + \"                }\\n\" + \"              ]\\n\" + \"            }\\n\"\n-\t        + \"          ],\\n\" + \"          \\\"code\\\": {\\n\" + \"            \\\"coding\\\": [\\n\" + \"              {\\n\"\n-\t        + \"                \\\"system\\\": \\\"http://loinc.org\\\",\\n\" + \"                \\\"code\\\": \\\"58410-2\\\",\\n\"\n-\t        + \"                \\\"display\\\": \\\"Complete blood count (hemogram) panel - Blood by Automated count\\\"\\n\"\n-\t        + \"              }\\n\" + \"            ],\\n\" + \"            \\\"text\\\": \\\"Complete Blood Count\\\"\\n\"\n-\t        + \"          },\\n\" + \"          \\\"issued\\\": \\\"2011-03-04T11:45:33+11:00\\\",\\n\" + \"          \\n\"\n-\t        + \"          \\\"result\\\": [\\n\" + \"            {\\n\" + \"              \\\"reference\\\": \\\"Observation/r1\\\"\\n\"\n-\t        + \"            },\\n\" + \"            {\\n\" + \"              \\\"reference\\\": \\\"Observation/r2\\\"\\n\"\n-\t        + \"            }\\n\" + \"          ],\\n\" + \"        }\\n\" + \"      },\\n\" + \"      {\\n\" + \"        \\\"resource\\\": {\\n\"\n-\t        + \"          \\\"resourceType\\\": \\\"Observation\\\",\\n\" + \"          \\\"id\\\": \\\"r1\\\",\\n\"\n-\t        + \"          \\\"status\\\": \\\"final\\\",\\n\" + \"          \\\"code\\\": {\\n\" + \"            \\\"coding\\\": [\\n\"\n-\t        + \"              {\\n\" + \"                \\\"system\\\": \\\"http://loinc.org\\\",\\n\"\n-\t        + \"                \\\"code\\\": \\\"718-7\\\",\\n\"\n-\t        + \"                \\\"display\\\": \\\"Hemoglobin [Mass/volume] in Blood\\\"\\n\" + \"              }\\n\"\n-\t        + \"            ],\\n\" + \"            \\\"text\\\": \\\"Haemoglobin\\\"\\n\" + \"          },\\n\"\n-\t        + \"          \\\"valueQuantity\\\": {\\n\" + \"            \\\"value\\\": 176,\\n\" + \"            \\\"unit\\\": \\\"g/L\\\",\\n\"\n-\t        + \"            \\\"system\\\": \\\"http://unitsofmeasure.org\\\",\\n\" + \"            \\\"code\\\": \\\"g/L\\\"\\n\"\n-\t        + \"          }\\n\" + \"        }\\n\" + \"      }\\n\" + \"    ]\\n\" + \"  }\";\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate.json\";\n+\t\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT_NoId_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate_NoId.json\";\n+\t\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT_WRONG_UUID_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate_WrongId.json\";\n \t\n \t@Mock\n \tprivate FhirDiagnosticReportService service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjI5MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r378536291", "bodyText": "This probably also should have:\nrequest.setHeader(CONTENT_TYPE, FhirMediaTypes.JSON.toString());", "author": "ibacher", "createdAt": "2020-02-12T21:57:20Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java", "diffHunk": "@@ -141,6 +141,11 @@ public FhirRequestBuilder accept(@NotNull MediaType mediaType) {\n \t\t\treturn this;\n \t\t}\n \t\t\n+\t\tpublic FhirRequestBuilder jsonContent(@NotNull String json) {\n+\t\t\trequest.setContent(json.getBytes());", "originalCommit": "6a48c58d1043858a3326385262f36c3fd8672777", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd92fad901f93e03e56ec7f24cc489c98c5007f5", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java b/omod/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java\nindex eb9c67ad..40cf2384 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java\n\n@@ -142,6 +147,7 @@ public abstract class BaseFhirResourceProviderTest<T extends IResourceProvider,\n \t\t}\n \t\t\n \t\tpublic FhirRequestBuilder jsonContent(@NotNull String json) {\n+\t\t\trequest.addHeader(CONTENT_TYPE, FhirMediaTypes.JSON.toString());\n \t\t\trequest.setContent(json.getBytes());\n \t\t\treturn this;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNzU4Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r378537587", "bodyText": "You almost certainly need something here like:\nwhen(service.updateDiagnosticReport(any(), any())).thenReturn(diagnosticReport);", "author": "ibacher", "createdAt": "2020-02-12T22:00:07Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -84,7 +113,8 @@ public void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();", "originalCommit": "6a48c58d1043858a3326385262f36c3fd8672777", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd92fad901f93e03e56ec7f24cc489c98c5007f5", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\nindex 11da14c2..fd73d300 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n\n@@ -110,36 +103,65 @@ public class DiagnosticReportFhirResourceProviderWebTest extends BaseFhirResourc\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n+\t\twhen(service.updateDiagnosticReport(anyString(), any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n \t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n-\t\t        .jsonContent(JSON_DIAGNOSTIC_REPORT).accept(FhirMediaTypes.JSON).go();\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForIdMismatch() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(JSON_DIAGNOSTIC_REPORT)\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200. See\n \t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForNoId() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_NoId_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\").jsonContent(JSON_DIAGNOSTIC_REPORT)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200.\n \t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateDiagnosticReport_shouldErrorForNonexistentDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_WRONG_UUID_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n+\t\twhen(service.updateDiagnosticReport(eq(WRONG_UUID), any(DiagnosticReport.class)))\n+\t\t        .thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\t// Not sure why this is returning HTTP status code 0\n+\t\tassertThat(response, isMethodNotAllowed());\n \t}\n }\n"}}, {"oid": "dd92fad901f93e03e56ec7f24cc489c98c5007f5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/dd92fad901f93e03e56ec7f24cc489c98c5007f5", "message": "Test fixes and first attempt at Create/Update web tests", "committedDate": "2020-02-17T21:23:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MTQ4Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r380371487", "bodyText": "I can't figure out why this test (and the corresponding Task Web test) return status code 0 instead of 405. The MethodNotAllowedException seems to not be getting handled correctly, and I couldn't untangle it after looking into it a bit.", "author": "pmanko", "createdAt": "2020-02-17T21:28:33Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -71,43 +85,83 @@ public void getDiagnosticReportByWrongUuid_shouldReturn404() throws Exception {\n \t\n \t@Test\n \tpublic void createDiagnosticReport_shouldCreateNewDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.saveDiagnosticReport(any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isCreated());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.updateDiagnosticReport(anyString(), any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForIdMismatch() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200. See\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForNoId() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_NoId_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\").accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200.\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateDiagnosticReport_shouldErrorForNonexistentDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_WRONG_UUID_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n+\t\twhen(service.updateDiagnosticReport(eq(WRONG_UUID), any(DiagnosticReport.class)))\n+\t\t        .thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\t// Not sure why this is returning HTTP status code 0\n+\t\tassertThat(response, isMethodNotAllowed());", "originalCommit": "dd92fad901f93e03e56ec7f24cc489c98c5007f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwMjQxMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r381302412", "bodyText": "I'd need to dig into this a bit. 0 is not an HTTP status code...", "author": "ibacher", "createdAt": "2020-02-19T13:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MTQ4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxODcyMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r381318722", "bodyText": "Ok. The problem here is a bit subtle, but because MethodNotAllowedException has no default constructor (i.e., a constructor that takes no arguments), there's a deeper error happening causes the wrong exception to be thrown causing the weird return code. To fix this, simple change the .thenThrow() part to something like .thenThrow(new MethodNotAllowedException(\"DiagnosticReport \" + WRONG_UUID + \" does not exist\")) and the test will work as expected.", "author": "ibacher", "createdAt": "2020-02-19T14:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MTQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cd3102992462366b4a91585cbc3b86b7ae7eb960", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\nindex fd73d300..1fad0f7b 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n\n@@ -156,12 +156,11 @@ public class DiagnosticReportFhirResourceProviderWebTest extends BaseFhirResourc\n \t\t}\n \t\t\n \t\twhen(service.updateDiagnosticReport(eq(WRONG_UUID), any(DiagnosticReport.class)))\n-\t\t        .thenThrow(MethodNotAllowedException.class);\n+\t\t        .thenThrow(new MethodNotAllowedException(\"DiagnosticReport \" + WRONG_UUID + \" does not exist\"));\n \t\t\n \t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// Not sure why this is returning HTTP status code 0\n \t\tassertThat(response, isMethodNotAllowed());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MjY3OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r380372678", "bodyText": "Not sure if this test is necessary, and if the error handling for updates in the DiagnosticReport and Task ServiceImpl are necessary either. The error handling gets handled by the HAPI libraries, and when(service.updateDiatnosticReport()) is not needed for this and ShouldErrorForIdMismatch() tests. In other words, the error handling implementation for these to cases doesn't seem to have an effect on the handling of the actual request.", "author": "pmanko", "createdAt": "2020-02-17T21:33:40Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -71,43 +85,83 @@ public void getDiagnosticReportByWrongUuid_shouldReturn404() throws Exception {\n \t\n \t@Test\n \tpublic void createDiagnosticReport_shouldCreateNewDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.saveDiagnosticReport(any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isCreated());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.updateDiagnosticReport(anyString(), any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForIdMismatch() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200. See\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForNoId() throws Exception {", "originalCommit": "dd92fad901f93e03e56ec7f24cc489c98c5007f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI5Nzc1Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r381297757", "bodyText": "Yeah, I mostly worry about using these tests to ensure that we've done our part of the mappings properly, i.e., when someone sends the expected message our code handles the response appropriately. Since this is purely a test of the HAPI library, I don't think we need it, provided it works with an appropriately formulated request.", "author": "ibacher", "createdAt": "2020-02-19T13:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MjY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "cd3102992462366b4a91585cbc3b86b7ae7eb960", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\nindex fd73d300..1fad0f7b 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n\n@@ -156,12 +156,11 @@ public class DiagnosticReportFhirResourceProviderWebTest extends BaseFhirResourc\n \t\t}\n \t\t\n \t\twhen(service.updateDiagnosticReport(eq(WRONG_UUID), any(DiagnosticReport.class)))\n-\t\t        .thenThrow(MethodNotAllowedException.class);\n+\t\t        .thenThrow(new MethodNotAllowedException(\"DiagnosticReport \" + WRONG_UUID + \" does not exist\"));\n \t\t\n \t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n \t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// Not sure why this is returning HTTP status code 0\n \t\tassertThat(response, isMethodNotAllowed());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxNDQ4Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r381314486", "bodyText": "This should be !diagnosticReport.getId().equals(uuid). Strings are objects and for objects == asserts that they refer to the same object. This works when the strings are all generated inside the VM because of Java's string interning but is likely to fail in a real-world situation.", "author": "ibacher", "createdAt": "2020-02-19T14:12:32Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirDiagnosticReportServiceImpl.java", "diffHunk": "@@ -44,12 +46,24 @@ public DiagnosticReport saveDiagnosticReport(DiagnosticReport diagnosticReport)\n \t\n \t@Override\n \tpublic DiagnosticReport updateDiagnosticReport(String uuid, DiagnosticReport diagnosticReport) {\n+\t\tif (diagnosticReport.getId() == null) {\n+\t\t\tthrow new InvalidRequestException(\"Diagnostic Report resource is missing id.\");\n+\t\t}\n+\t\t\n+\t\tif (diagnosticReport.getId() != uuid) {", "originalCommit": "dd92fad901f93e03e56ec7f24cc489c98c5007f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10d0537f8bdd229b4e0206cdd1d7d4d04319d646", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirDiagnosticReportServiceImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirDiagnosticReportServiceImpl.java\nindex 4993d05d..1f5ec263 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirDiagnosticReportServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirDiagnosticReportServiceImpl.java\n\n@@ -50,7 +50,7 @@ public class FhirDiagnosticReportServiceImpl implements FhirDiagnosticReportServ\n \t\t\tthrow new InvalidRequestException(\"Diagnostic Report resource is missing id.\");\n \t\t}\n \t\t\n-\t\tif (diagnosticReport.getId() != uuid) {\n+\t\tif (diagnosticReport.getId().equals(uuid)) {\n \t\t\tthrow new InvalidRequestException(\"Diagnostic Report id and provided id do not match.\");\n \t\t}\n \t\t\n"}}, {"oid": "103271db51e5fd79eb4c8feb3b5ee3831b7715a4", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/103271db51e5fd79eb4c8feb3b5ee3831b7715a4", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-02-26T20:44:44Z", "type": "forcePushed"}, {"oid": "cd3102992462366b4a91585cbc3b86b7ae7eb960", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/cd3102992462366b4a91585cbc3b86b7ae7eb960", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-02-26T21:00:38Z", "type": "forcePushed"}, {"oid": "10d0537f8bdd229b4e0206cdd1d7d4d04319d646", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/10d0537f8bdd229b4e0206cdd1d7d4d04319d646", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-02-26T21:02:38Z", "type": "forcePushed"}, {"oid": "6c319cfe510f1ace172be668cd8f408f401765ac", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6c319cfe510f1ace172be668cd8f408f401765ac", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-02-26T21:26:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2Nzg5Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r385267896", "bodyText": "Can we change these names to something that actually reflects what they are testing? Also, are you planning to add more tests to this class in a new PR?", "author": "ibacher", "createdAt": "2020-02-27T17:43:14Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.when;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.hl7.fhir.r4.model.ServiceRequest;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.api.FhirServiceRequestService;\n+import org.openmrs.module.fhir2.web.servlet.BaseFhirResourceProviderTest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirResourceProviderTest<ServiceRequestFhirResourceProvider, ServiceRequest> {\n+\t\n+\tprivate static final String SERVICE_REQUEST_UUID = \"7d13b03b-58c2-43f5-b34d-08750c51aea9\";\n+\t\n+\tprivate static final String WRONG_SERVICE_REQUEST_UUID = \"92b04062-e57d-43aa-8c38-90a1ad70080c\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate ServiceRequestFhirResourceProvider resourceProvider;\n+\t\n+\t@Mock\n+\tprivate FhirServiceRequestService service;\n+\t\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tresourceProvider = new ServiceRequestFhirResourceProvider();\n+\t\tresourceProvider.setServiceRequestService(service);\n+\t\tsuper.setup();\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPractitionerById_shouldReturnPractitioner() throws Exception {", "originalCommit": "6c319cfe510f1ace172be668cd8f408f401765ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMDY3MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r385410671", "bodyText": "Yes, I wanted to close this one out and extend/add tests for the new features from FM2-75 in a smaller PR.", "author": "pmanko", "createdAt": "2020-02-27T22:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2Nzg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d893fed0e23beeee89b3e3dc8a78d273f66da56e", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/ServiceRequestFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/ServiceRequestFhirResourceProviderWebTest.java\nindex ead1ed7f..f7a7e7ff 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/ServiceRequestFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/ServiceRequestFhirResourceProviderWebTest.java\n\n@@ -45,7 +45,7 @@ public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirResourceP\n \t}\n \t\n \t@Test\n-\tpublic void getPractitionerById_shouldReturnPractitioner() throws Exception {\n+\tpublic void getServiceRequestById_shouldReturnServiceRequest() throws Exception {\n \t\tServiceRequest serviceRequest = new ServiceRequest();\n \t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2ODUzOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r385268539", "bodyText": "JSON_DIAGNOSTIC_REPORT_NoId_PATH -> JSON_DIAGNOSTIC_REPORT_NO_ID_PATH or something similar", "author": "ibacher", "createdAt": "2020-02-27T17:44:28Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -32,6 +40,12 @@\n \t\n \tprivate static final String WRONG_UUID = \"9bf0d1ac-62a8-4440-a5a1-eb1015a7cc65\";\n \t\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate.json\";\n+\t\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT_NoId_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate_NoId.json\";", "originalCommit": "6c319cfe510f1ace172be668cd8f408f401765ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d893fed0e23beeee89b3e3dc8a78d273f66da56e", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\nindex 1fad0f7b..41ae8d1d 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java\n\n@@ -42,7 +42,7 @@ public class DiagnosticReportFhirResourceProviderWebTest extends BaseFhirResourc\n \t\n \tprivate static final String JSON_DIAGNOSTIC_REPORT_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate.json\";\n \t\n-\tprivate static final String JSON_DIAGNOSTIC_REPORT_NoId_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate_NoId.json\";\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT_NO_ID_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate_NoId.json\";\n \t\n \tprivate static final String JSON_DIAGNOSTIC_REPORT_WRONG_UUID_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate_WrongId.json\";\n \t\n"}}, {"oid": "d893fed0e23beeee89b3e3dc8a78d273f66da56e", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d893fed0e23beeee89b3e3dc8a78d273f66da56e", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-02-27T23:00:41Z", "type": "forcePushed"}, {"oid": "7f385ef3d0552a456f8192f325fcf23025da61af", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7f385ef3d0552a456f8192f325fcf23025da61af", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-02-27T23:04:50Z", "type": "forcePushed"}, {"oid": "c9fafde2219c52109769c2ccb710c0f975d94251", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c9fafde2219c52109769c2ccb710c0f975d94251", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-03-04T16:13:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MDQ3OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r387790478", "bodyText": "@ibacher I'm not sure why this test is failing.\nAlso, your param to prop changes are in this PR?", "author": "pmanko", "createdAt": "2020-03-04T16:39:15Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java", "diffHunk": "@@ -246,6 +246,7 @@ public void shouldReturnCollectionOfPeopleSortedByName() {\n \t\t\n \t\t// Smallest given name of person i should be less than the largest given name of person i + 1.\n \t\tfor (int i = 1; i < people.size(); i++) {\n+\t\t\tassertThat(people.get(i-1).getNames(), not(empty())); // Not sure why this test is failing", "originalCommit": "c9fafde2219c52109769c2ccb710c0f975d94251", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27d002e2ca1e124d30e7b549af1e96a6980eeeba", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java\nindex d95a5883..8a01ddd0 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java\n\n@@ -246,7 +246,7 @@ public class FhirPersonDaoImplTest extends BaseModuleContextSensitiveTest {\n \t\t\n \t\t// Smallest given name of person i should be less than the largest given name of person i + 1.\n \t\tfor (int i = 1; i < people.size(); i++) {\n-\t\t\tassertThat(people.get(i-1).getNames(), not(empty())); // Not sure why this test is failing\n+\t\t\tassertThat(people.get(i - 1).getNames(), not(empty())); // Not sure why this test is failing\n \t\t\tString currentSmallestGivenName = people.get(i - 1).getNames().stream()\n \t\t\t        .min(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n \t\t\tString nextLargestGivenName = people.get(i).getNames().stream()\n"}}, {"oid": "955845cf230d9cdec03b5b529ae75c0aa528379f", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/955845cf230d9cdec03b5b529ae75c0aa528379f", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-03-04T16:42:58Z", "type": "forcePushed"}, {"oid": "27d002e2ca1e124d30e7b549af1e96a6980eeeba", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/27d002e2ca1e124d30e7b549af1e96a6980eeeba", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-03-04T17:57:09Z", "type": "commit"}, {"oid": "27d002e2ca1e124d30e7b549af1e96a6980eeeba", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/27d002e2ca1e124d30e7b549af1e96a6980eeeba", "message": "FM2-40 OMOD tests for ServiceRequest, DiagnosticReport, and Task", "committedDate": "2020-03-04T17:57:09Z", "type": "forcePushed"}]}