{"pr_number": 281, "pr_title": "Null checks in translators and general improvements", "pr_createdAt": "2020-08-11T19:38:51Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1MDQ4MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469050480", "bodyText": "@varung-31Thanks for working on this,what if we also used type instead of reference.getType()  on the line of the exception? cc   @ibacher", "author": "HerbertYiga", "createdAt": "2020-08-12T07:09:54Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/PractitionerReferenceTranslatorUserImpl.java", "diffHunk": "@@ -42,7 +42,9 @@ public User toOpenmrsType(Reference reference) {\n \t\tif (reference == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (!getReferenceType(reference).equals(\"Practitioner\")) {\n+\t\t\n+\t\tString type = reference.getType();\n+\t\tif (type != null && !type.equals(\"Practitioner\")) {\n \t\t\tthrow new IllegalArgumentException(\"Reference must be to an User not a \" + reference.getType());", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5abfe22b36fefb6f9040304d0064ab2b063131a", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/PractitionerReferenceTranslatorUserImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/PractitionerReferenceTranslatorUserImpl.java\nindex ac13de49..80e14d08 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/PractitionerReferenceTranslatorUserImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/PractitionerReferenceTranslatorUserImpl.java\n\n@@ -45,7 +45,7 @@ public class PractitionerReferenceTranslatorUserImpl extends BaseReferenceHandli\n \t\t\n \t\tString type = reference.getType();\n \t\tif (type != null && !type.equals(\"Practitioner\")) {\n-\t\t\tthrow new IllegalArgumentException(\"Reference must be to an User not a \" + reference.getType());\n+\t\t\tthrow new IllegalArgumentException(\"Reference must be to an User not a \" + type);\n \t\t}\n \t\t\n \t\tString uuid = getReferenceId(reference);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNDAzNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469304037", "bodyText": "Please actually leave this on the interface. I'm intending for the Javadocs to go on interfaces where possible.", "author": "ibacher", "createdAt": "2020-08-12T14:31:38Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirEncounterService.java", "diffHunk": "@@ -19,8 +17,6 @@\n \n public interface FhirEncounterService extends FhirService<Encounter> {\n \t\n-\tEncounter get(@NotNull String uuid);", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyODkyMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469328921", "bodyText": "But this is unnecessary repetition. This method is already present in the BaseFhirService, why do we want to declare it here as well?", "author": "varung-31", "createdAt": "2020-08-12T15:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNDAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzMDYyMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469330621", "bodyText": "To have a per-type Javadoc, which should be, but hasn't been the standard. In most cases it doesn't matter, but it some cases it might.", "author": "ibacher", "createdAt": "2020-08-12T15:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNDAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/FhirEncounterService.java b/api/src/main/java/org/openmrs/module/fhir2/api/FhirEncounterService.java\nindex 95521814..078984ad 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/FhirEncounterService.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/FhirEncounterService.java\n\n@@ -17,6 +19,8 @@ import org.hl7.fhir.r4.model.Encounter;\n \n public interface FhirEncounterService extends FhirService<Encounter> {\n \t\n+\tEncounter get(@NotNull String uuid);\n+\t\n \tIBundleProvider searchForEncounters(DateRangeParam date, ReferenceAndListParam location,\n \t        ReferenceAndListParam participant, ReferenceAndListParam subject, TokenAndListParam id,\n \t        DateRangeParam lastUpdated);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNDYyOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469304628", "bodyText": "This needs to be updated, not removed.", "author": "ibacher", "createdAt": "2020-08-12T14:32:29Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java", "diffHunk": "@@ -21,15 +21,6 @@\n  */\n public interface FhirTaskService extends FhirService<Task> {\n \t\n-\t/**\n-\t * Get list of tasks that reference the object type/UUID combo provided\n-\t *\n-\t * @param basedOnReference\n-\t * @param ownerReference\n-\t * @param status\n-\t * @param sort\n-\t * @return the collection of Tasks that match the search parameters\n-\t */", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyOTQ2Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469329466", "bodyText": "Are we planning to have java docs on both the interfaces and the implementation? I think just having them on the interfaces suffices.", "author": "varung-31", "createdAt": "2020-08-12T15:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNTcyNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469335724", "bodyText": "Largely just on interfaces, but if FM2-268 is implemented (or as we gradually migrate towards that) it may be necessary to have the Javadoc on some implementations when there is no appropriate interface anymore.", "author": "ibacher", "createdAt": "2020-08-12T15:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNDYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java b/api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java\nindex 95ccc14f..97d8e55f 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java\n\n@@ -17,10 +17,21 @@ import ca.uhn.fhir.rest.param.TokenAndListParam;\n import org.hl7.fhir.r4.model.Task;\n \n /**\n- * Contains methods pertaining to creating/updating/voiding Tasks\n+ * Contains methods pertaining to creating/updating/voiding/searching Tasks\n  */\n public interface FhirTaskService extends FhirService<Task> {\n \t\n+\t/**\n+\t * Get collection of tasks corresponding to the provided search parameters\n+\t *\n+\t * @param basedOnReference A reference list to basedOn resources\n+\t * @param ownerReference A reference list to owner resources\n+\t * @param status A list of statuses\n+\t * @param id The UUID of the requested task\n+\t * @param lastUpdated A date range corresponding to when the Tasks were last updated\n+\t * @param sort The sort parameters for the search results\n+\t * @return the collection of Tasks that match the search parameters\n+\t */\n \tIBundleProvider searchForTasks(ReferenceAndListParam basedOnReference, ReferenceAndListParam ownerReference,\n \t        TokenAndListParam status, TokenAndListParam id, DateRangeParam lastUpdated, SortSpec sort);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNTE1Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469305157", "bodyText": "I would prefer that on create we always assign a new UUID.", "author": "ibacher", "createdAt": "2020-08-12T14:33:14Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/BaseFhirService.java", "diffHunk": "@@ -28,6 +30,10 @@ public T get(String uuid) {\n \t\n \t@Override\n \tpublic T create(T newResource) {\n+\t\tif (newResource.getId() == null) {", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/impl/BaseFhirService.java b/api/src/main/java/org/openmrs/module/fhir2/api/impl/BaseFhirService.java\nindex 95270a9e..19b4d078 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/impl/BaseFhirService.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/impl/BaseFhirService.java\n\n@@ -21,17 +22,44 @@ import org.openmrs.module.fhir2.api.dao.FhirDao;\n import org.openmrs.module.fhir2.api.translators.OpenmrsFhirTranslator;\n import org.openmrs.module.fhir2.api.translators.UpdatableOpenmrsTranslator;\n \n+@SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirService<T extends IAnyResource, U extends OpenmrsObject & Auditable> implements FhirService<T> {\n \t\n+\tprotected final Class<? extends IResource> resourceClass;\n+\t\n+\tprotected final TypeToken<T> resourceTypeToken;\n+\t\n+\tprotected BaseFhirService() {\n+\t\tresourceTypeToken = new TypeToken<T>(getClass()) {\n+\t\t\t\n+\t\t};\n+\t\t\n+\t\t// this doesn't seem like it should work but does?\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tClass<? extends IResource> resourceClass = (Class<? extends IResource>) resourceTypeToken.getRawType();\n+\t\t\n+\t\tthis.resourceClass = resourceClass;\n+\t}\n+\t\n \t@Override\n \tpublic T get(String uuid) {\n-\t\treturn getTranslator().toFhirResource(getDao().get(uuid));\n+\t\tif (uuid == null) {\n+\t\t\tthrow new InvalidRequestException(\"Uuid cannot be null.\");\n+\t\t}\n+\t\t\n+\t\tU openmrsObj = getDao().get(uuid);\n+\t\t\n+\t\tif (openmrsObj == null) {\n+\t\t\tthrow resourceNotFound(uuid);\n+\t\t}\n+\t\t\n+\t\treturn getTranslator().toFhirResource(openmrsObj);\n \t}\n \t\n \t@Override\n \tpublic T create(T newResource) {\n-\t\tif (newResource.getId() == null) {\n-\t\t\tnewResource.setId(UUID.randomUUID().toString());\n+\t\tif (newResource == null) {\n+\t\t\tthrow new InvalidRequestException(\"A resource of type \" + resourceClass.getSimpleName() + \" must be supplied\");\n \t\t}\n \t\t\n \t\treturn getTranslator().toFhirResource(getDao().createOrUpdate(getTranslator().toOpenmrsType(newResource)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNTQ2OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469305469", "bodyText": "This needs to be updated, not removed.", "author": "ibacher", "createdAt": "2020-08-12T14:33:37Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "diffHunk": "@@ -44,15 +44,6 @@\n \t@Autowired\n \tprivate SearchQuery<FhirTask, Task, FhirTaskDao, TaskTranslator> searchQuery;\n \t\n-\t/**\n-\t * Get a list of Tasks that match the given search and sort criteria\n-\t *\n-\t * @param basedOnReference A reference to a basedOn resource\n-\t * @param ownerReference A reference to an owner resource\n-\t * @param status The list of statuses for requested Tasks\n-\t * @param sort\n-\t * @return the saved task\n-\t */", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java\nindex a835a856..7380abd7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java\n\n@@ -44,6 +44,17 @@ public class FhirTaskServiceImpl extends BaseFhirService<Task, FhirTask> impleme\n \t@Autowired\n \tprivate SearchQuery<FhirTask, Task, FhirTaskDao, TaskTranslator> searchQuery;\n \t\n+\t/**\n+\t * Get collection of tasks corresponding to the provided search parameters\n+\t *\n+\t * @param basedOnReference A reference list to basedOn resources\n+\t * @param ownerReference A reference list to owner resources\n+\t * @param status A list of statuses\n+\t * @param id The UUID of the requested task\n+\t * @param lastUpdated A date range corresponding to when the Tasks were last updated\n+\t * @param sort The sort parameters for the search results\n+\t * @return the collection of Tasks that match the search parameters\n+\t */\n \t@Override\n \t@Transactional(readOnly = true)\n \tpublic IBundleProvider searchForTasks(ReferenceAndListParam basedOnReference, ReferenceAndListParam ownerReference,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNTc3Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469305776", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tAllergyIntolerance.AllergyIntoleranceReactionComponent reactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tAllergyIntolerance.AllergyIntoleranceReactionComponent reactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();", "author": "ibacher", "createdAt": "2020-08-12T14:34:00Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceReactionComponentTranslatorImpl.java", "diffHunk": "@@ -37,6 +37,9 @@\n \t\n \t@Override\n \tpublic AllergyIntolerance.AllergyIntoleranceReactionComponent toFhirResource(Allergy allergy) {\n+\t\tif (allergy == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tAllergyIntolerance.AllergyIntoleranceReactionComponent reactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceReactionComponentTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceReactionComponentTranslatorImpl.java\nindex f42a3f02..f8660ec8 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceReactionComponentTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceReactionComponentTranslatorImpl.java\n\n@@ -40,6 +42,7 @@ public class AllergyIntoleranceReactionComponentTranslatorImpl implements Allerg\n \t\tif (allergy == null) {\n \t\t\treturn null;\n \t\t}\n+\t\t\n \t\tAllergyIntolerance.AllergyIntoleranceReactionComponent reactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n \t\treactionComponent.setSubstance(getAllergySubstance(allergy.getAllergen()));\n \t\treactionComponent.setManifestation(getManifestation(allergy.getReactions()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNjA3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469306077", "bodyText": "Is this, strictly speaking, necessary?", "author": "ibacher", "createdAt": "2020-08-12T14:34:26Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -90,12 +90,15 @@ public AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n \t\n \t@Override\n \tpublic Allergy toOpenmrsType(AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNjEyMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469336121", "bodyText": "Yes, because if fhirAllergy is null and we are not returning null here or throwing an exception, it would lead to a new instance of Allergy being returned.", "author": "varung-31", "createdAt": "2020-08-12T15:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNjA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzODE3Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469338172", "bodyText": "Oh right! I missed that! Cheerfully withdrawn!", "author": "ibacher", "createdAt": "2020-08-12T15:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNjA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\nindex 535d7e59..2d1f70f4 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n\n@@ -90,17 +90,14 @@ public class AllergyIntoleranceTranslatorImpl extends BaseReferenceHandlingTrans\n \t\n \t@Override\n \tpublic Allergy toOpenmrsType(AllergyIntolerance fhirAllergy) {\n-\t\tif (fhirAllergy == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tnotNull(fhirAllergy, \"The AllergyIntolerance object should not be null\");\n \t\treturn toOpenmrsType(new Allergy(), fhirAllergy);\n \t}\n \t\n \t@Override\n \tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n-\t\tif (allergy == null || fhirAllergy == null) {\n-\t\t\treturn allergy;\n-\t\t}\n+\t\tnotNull(allergy, \"The existing Allergy should not be null\");\n+\t\tnotNull(fhirAllergy, \"The AllergyIntolerance object should not be null\");\n \t\t\n \t\tif (fhirAllergy.getId() != null) {\n \t\t\tallergy.setUuid(fhirAllergy.getId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNjk1NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469306954", "bodyText": "This is actually a behaviour change. Do you think this is what we want to do? I could see:\nif (diagnosticReport == null) {\n\treturn null;\n}\n\nif (existingObs == null) {\n\texistingObs = new Obs();\n}", "author": "ibacher", "createdAt": "2020-08-12T14:35:41Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "diffHunk": "@@ -82,11 +82,7 @@ public Obs toOpenmrsType(DiagnosticReport diagnosticReport) {\n \t\n \t@Override\n \tpublic Obs toOpenmrsType(Obs existingObs, DiagnosticReport diagnosticReport) {\n-\t\tif (existingObs == null) {\n-\t\t\texistingObs = new Obs();\n-\t\t}\n-\t\t\n-\t\tif (diagnosticReport == null) {", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java\nindex 3c2cac16..4ec43e99 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java\n\n@@ -82,9 +81,8 @@ public class DiagnosticReportTranslatorImpl implements DiagnosticReportTranslato\n \t\n \t@Override\n \tpublic Obs toOpenmrsType(Obs existingObs, DiagnosticReport diagnosticReport) {\n-\t\tif (existingObs == null || diagnosticReport == null) {\n-\t\t\treturn existingObs;\n-\t\t}\n+\t\tnotNull(existingObs, \"The existing Obs should not be null\");\n+\t\tnotNull(diagnosticReport, \"The DiagnosticReport object should not be null\");\n \t\t\n \t\tif (!diagnosticReport.hasResult()) {\n \t\t\tthrow new IllegalArgumentException(\"Diagnostic Report must have at least one result\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNzE0MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469307140", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tEncounter.EncounterLocationComponent locationComponent = new Encounter.EncounterLocationComponent();\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tEncounter.EncounterLocationComponent locationComponent = new Encounter.EncounterLocationComponent();", "author": "ibacher", "createdAt": "2020-08-12T14:35:54Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java", "diffHunk": "@@ -31,13 +31,19 @@\n \t\n \t@Override\n \tpublic Encounter.EncounterLocationComponent toFhirResource(Location location) {\n+\t\tif (location == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tEncounter.EncounterLocationComponent locationComponent = new Encounter.EncounterLocationComponent();", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java\nindex 07556da3..555ee63c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java\n\n@@ -34,6 +36,7 @@ public class EncounterLocationTranslatorImpl extends BaseReferenceHandlingTransl\n \t\tif (location == null) {\n \t\t\treturn null;\n \t\t}\n+\t\t\n \t\tEncounter.EncounterLocationComponent locationComponent = new Encounter.EncounterLocationComponent();\n \t\tlocationComponent.setLocation(createLocationReference(location));\n \t\treturn locationComponent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNzI0MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469307241", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tString locationUuid = getReferenceId(encounterLocationComponent.getLocation());\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tString locationUuid = getReferenceId(encounterLocationComponent.getLocation());", "author": "ibacher", "createdAt": "2020-08-12T14:36:01Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java", "diffHunk": "@@ -31,13 +31,19 @@\n \t\n \t@Override\n \tpublic Encounter.EncounterLocationComponent toFhirResource(Location location) {\n+\t\tif (location == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tEncounter.EncounterLocationComponent locationComponent = new Encounter.EncounterLocationComponent();\n \t\tlocationComponent.setLocation(createLocationReference(location));\n \t\treturn locationComponent;\n \t}\n \t\n \t@Override\n \tpublic Location toOpenmrsType(Encounter.EncounterLocationComponent encounterLocationComponent) {\n+\t\tif (encounterLocationComponent == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tString locationUuid = getReferenceId(encounterLocationComponent.getLocation());", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java\nindex 07556da3..555ee63c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterLocationTranslatorImpl.java\n\n@@ -34,6 +36,7 @@ public class EncounterLocationTranslatorImpl extends BaseReferenceHandlingTransl\n \t\tif (location == null) {\n \t\t\treturn null;\n \t\t}\n+\t\t\n \t\tEncounter.EncounterLocationComponent locationComponent = new Encounter.EncounterLocationComponent();\n \t\tlocationComponent.setLocation(createLocationReference(location));\n \t\treturn locationComponent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNzM1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469307355", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tEncounter.EncounterParticipantComponent participantComponent = new Encounter.EncounterParticipantComponent();\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tEncounter.EncounterParticipantComponent participantComponent = new Encounter.EncounterParticipantComponent();", "author": "ibacher", "createdAt": "2020-08-12T14:36:10Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterParticipantTranslatorImpl.java", "diffHunk": "@@ -32,6 +32,9 @@\n \t\n \t@Override\n \tpublic Encounter.EncounterParticipantComponent toFhirResource(EncounterProvider encounter) {\n+\t\tif (encounter == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tEncounter.EncounterParticipantComponent participantComponent = new Encounter.EncounterParticipantComponent();", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterParticipantTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterParticipantTranslatorImpl.java\nindex e040b1dc..e472f017 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterParticipantTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterParticipantTranslatorImpl.java\n\n@@ -35,6 +37,7 @@ public class EncounterParticipantTranslatorImpl extends BaseReferenceHandlingTra\n \t\tif (encounter == null) {\n \t\t\treturn null;\n \t\t}\n+\t\t\n \t\tEncounter.EncounterParticipantComponent participantComponent = new Encounter.EncounterParticipantComponent();\n \t\tparticipantComponent.setIndividual(createPractitionerReference(encounter.getProvider()));\n \t\treturn participantComponent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNzc3Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469307773", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \t\treturn this.toOpenmrsType(new org.openmrs.Encounter(), fhirEncounter);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\treturn this.toOpenmrsType(new org.openmrs.Encounter(), fhirEncounter);", "author": "ibacher", "createdAt": "2020-08-12T14:36:42Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java", "diffHunk": "@@ -93,14 +91,15 @@ public Encounter toFhirResource(org.openmrs.Encounter openMrsEncounter) {\n \t\n \t@Override\n \tpublic org.openmrs.Encounter toOpenmrsType(Encounter fhirEncounter) {\n+\t\tif (fhirEncounter == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn this.toOpenmrsType(new org.openmrs.Encounter(), fhirEncounter);", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java\nindex 4fc612c7..dac62007 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java\n\n@@ -91,17 +92,15 @@ public class EncounterTranslatorImpl implements EncounterTranslator {\n \t\n \t@Override\n \tpublic org.openmrs.Encounter toOpenmrsType(Encounter fhirEncounter) {\n-\t\tif (fhirEncounter == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tnotNull(fhirEncounter, \"The Encounter object should not be null\");\n \t\treturn this.toOpenmrsType(new org.openmrs.Encounter(), fhirEncounter);\n \t}\n \t\n \t@Override\n \tpublic org.openmrs.Encounter toOpenmrsType(org.openmrs.Encounter existingEncounter, Encounter encounter) {\n-\t\tif (existingEncounter == null || encounter == null) {\n-\t\t\treturn existingEncounter;\n-\t\t}\n+\t\tnotNull(existingEncounter, \"The existing Openmrs Encounter object should not be null\");\n+\t\tnotNull(encounter, \"The Encounter object should not be null\");\n+\t\t\n \t\texistingEncounter.setUuid(encounter.getId());\n \t\t\n \t\texistingEncounter.setPatient(patientReferenceTranslator.toOpenmrsType(encounter.getSubject()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwODEyNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469308124", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \t\texistingEncounter.setUuid(encounter.getId());\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\texistingEncounter.setUuid(encounter.getId());", "author": "ibacher", "createdAt": "2020-08-12T14:37:09Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java", "diffHunk": "@@ -93,14 +91,15 @@ public Encounter toFhirResource(org.openmrs.Encounter openMrsEncounter) {\n \t\n \t@Override\n \tpublic org.openmrs.Encounter toOpenmrsType(Encounter fhirEncounter) {\n+\t\tif (fhirEncounter == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn this.toOpenmrsType(new org.openmrs.Encounter(), fhirEncounter);\n \t}\n \t\n \t@Override\n \tpublic org.openmrs.Encounter toOpenmrsType(org.openmrs.Encounter existingEncounter, Encounter encounter) {\n-\t\tnotNull(existingEncounter, \"Existing encounter cannot be null\");\n-\t\t\n-\t\tif (encounter == null) {\n+\t\tif (existingEncounter == null || encounter == null) {\n \t\t\treturn existingEncounter;\n \t\t}\n \t\texistingEncounter.setUuid(encounter.getId());", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java\nindex 4fc612c7..dac62007 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/EncounterTranslatorImpl.java\n\n@@ -91,17 +92,15 @@ public class EncounterTranslatorImpl implements EncounterTranslator {\n \t\n \t@Override\n \tpublic org.openmrs.Encounter toOpenmrsType(Encounter fhirEncounter) {\n-\t\tif (fhirEncounter == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tnotNull(fhirEncounter, \"The Encounter object should not be null\");\n \t\treturn this.toOpenmrsType(new org.openmrs.Encounter(), fhirEncounter);\n \t}\n \t\n \t@Override\n \tpublic org.openmrs.Encounter toOpenmrsType(org.openmrs.Encounter existingEncounter, Encounter encounter) {\n-\t\tif (existingEncounter == null || encounter == null) {\n-\t\t\treturn existingEncounter;\n-\t\t}\n+\t\tnotNull(existingEncounter, \"The existing Openmrs Encounter object should not be null\");\n+\t\tnotNull(encounter, \"The Encounter object should not be null\");\n+\t\t\n \t\texistingEncounter.setUuid(encounter.getId());\n \t\t\n \t\texistingEncounter.setPatient(patientReferenceTranslator.toOpenmrsType(encounter.getSubject()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwODIzMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469308233", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \t\treturn toOpenmrsType(new Cohort(), cohortList);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\treturn toOpenmrsType(new Cohort(), cohortList);", "author": "ibacher", "createdAt": "2020-08-12T14:37:18Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ListTranslatorImpl.java", "diffHunk": "@@ -62,12 +62,15 @@ public ListResource toFhirResource(Cohort cohort) {\n \t\n \t@Override\n \tpublic Cohort toOpenmrsType(ListResource cohortList) {\n+\t\tif (cohortList == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn toOpenmrsType(new Cohort(), cohortList);", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ListTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ListTranslatorImpl.java\nindex 12128b5b..80d732c0 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ListTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ListTranslatorImpl.java\n\n@@ -62,17 +62,14 @@ public class ListTranslatorImpl implements ListTranslator<Cohort> {\n \t\n \t@Override\n \tpublic Cohort toOpenmrsType(ListResource cohortList) {\n-\t\tif (cohortList == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tnotNull(cohortList, \"The ListResource object should not be null\");\n \t\treturn toOpenmrsType(new Cohort(), cohortList);\n \t}\n \t\n \t@Override\n \tpublic Cohort toOpenmrsType(Cohort cohort, ListResource cohortList) {\n-\t\tif (cohort == null || cohortList == null) {\n-\t\t\treturn cohort;\n-\t\t}\n+\t\tnotNull(cohort, \"The existing Cohort object should not be null\");\n+\t\tnotNull(cohortList, \"The ListResource object should not be null\");\n \t\t\n \t\tcohort.setUuid(cohortList.getId());\n \t\tcohort.setName(cohortList.getTitle());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwODYwNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469308606", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \t\treturn toOpenmrsType(new Location(), address);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\treturn toOpenmrsType(new Location(), address);", "author": "ibacher", "createdAt": "2020-08-12T14:37:50Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/LocationAddressTranslatorImpl.java", "diffHunk": "@@ -36,12 +37,15 @@ public Address toFhirResource(Location omrsLocation) {\n \t\n \t@Override\n \tpublic Location toOpenmrsType(Address address) {\n+\t\tif (address == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\treturn toOpenmrsType(new Location(), address);", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/LocationAddressTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/LocationAddressTranslatorImpl.java\nindex 56fb2f00..9e6b291d 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/LocationAddressTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/LocationAddressTranslatorImpl.java\n\n@@ -37,17 +39,14 @@ public class LocationAddressTranslatorImpl extends BaseAddressTranslatorImpl imp\n \t\n \t@Override\n \tpublic Location toOpenmrsType(Address address) {\n-\t\tif (address == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tnotNull(address, \"The Address object should not be null\");\n \t\treturn toOpenmrsType(new Location(), address);\n \t}\n \t\n \t@Override\n \tpublic Location toOpenmrsType(Location omrsLocation, Address address) {\n-\t\tif (omrsLocation == null || address == null) {\n-\t\t\treturn omrsLocation;\n-\t\t}\n+\t\tnotNull(omrsLocation, \"The existing Location object should not be null\");\n+\t\tnotNull(address, \"The Address object should not be null\");\n \t\t\n \t\tomrsLocation.setCityVillage(address.getCity());\n \t\tomrsLocation.setStateProvince(address.getState());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMTM2Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469311362", "bodyText": "Is this change strictly-speaking necessary? I understand that id elements can be more complex so that getId() doesn't just return the id, but in this case that would actually indicate a bug in the code and so the test should fail.", "author": "ibacher", "createdAt": "2020-08-12T14:41:40Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -132,7 +132,7 @@ public void shouldCreateNewPatient() throws Exception {\n \t\tassertThat(patient, validResource());\n \t\t\n \t\t// try to get new patient\n-\t\tresponse = get(\"/Patient/\" + patient.getId()).accept(FhirMediaTypes.JSON).go();\n+\t\tresponse = get(\"/Patient/\" + patient.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();", "originalCommit": "43fb6b366f6abdc2cd71887af2da1b2e5d2ede92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyNTA5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469325099", "bodyText": "If you try to step in through a debugger, you would see that patient.getId() would have the value as \"null\" and there was a gap in the patient translator because of which it was returning a new instance.\nGenerally speaking, patient.getId() has the value as Patient/<uuid>, whereas patient.getIdElement().getIdPart() has the value as <uuid>, hence in my opinion this change is necessary.", "author": "varung-31", "createdAt": "2020-08-12T14:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMTM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyODQ1OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/281#discussion_r469328458", "bodyText": "I see. That makes sense.", "author": "ibacher", "createdAt": "2020-08-12T15:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMTM2Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a5abfe22b36fefb6f9040304d0064ab2b063131a", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a5abfe22b36fefb6f9040304d0064ab2b063131a", "message": "Null checks in translators and general improvements", "committedDate": "2020-08-12T14:52:26Z", "type": "forcePushed"}, {"oid": "5ce8c341aa69842f91db6eb44b397c64fd51bc94", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5ce8c341aa69842f91db6eb44b397c64fd51bc94", "message": "Null checks in translators and general improvements", "committedDate": "2020-08-13T12:58:37Z", "type": "forcePushed"}, {"oid": "d9470a825c6e68d3d44a3da5655cd778cc8d2309", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d9470a825c6e68d3d44a3da5655cd778cc8d2309", "message": "Null checks in translators and general improvements", "committedDate": "2020-08-13T20:46:35Z", "type": "commit"}, {"oid": "d9470a825c6e68d3d44a3da5655cd778cc8d2309", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d9470a825c6e68d3d44a3da5655cd778cc8d2309", "message": "Null checks in translators and general improvements", "committedDate": "2020-08-13T20:46:35Z", "type": "forcePushed"}]}