{"pr_number": 282, "pr_title": "FM2-287: Add Integration tests for Medication", "pr_createdAt": "2020-08-12T12:26:30Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/282", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxNjQ1NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/282#discussion_r469316454", "bodyText": "This was here because I believe we had errors when creating a drug that the ingredients weren't being saved. If that's no longer the case, we can just remove this method altogether.", "author": "ibacher", "createdAt": "2020-08-12T14:48:36Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -28,16 +27,18 @@\n @Setter(AccessLevel.PACKAGE)\n public class FhirMedicationDaoImpl extends BaseFhirDao<Drug> implements FhirMedicationDao {\n \t\n+\t/*", "originalCommit": "73145af2c90aafd691f8c427fd8d8928bb1190cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de673094ccb5684908d12346b6230b0a553bd84", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java\nindex 9739fd2b..8862ebe2 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java\n\n@@ -27,19 +27,6 @@ import org.springframework.stereotype.Component;\n @Setter(AccessLevel.PACKAGE)\n public class FhirMedicationDaoImpl extends BaseFhirDao<Drug> implements FhirMedicationDao {\n \t\n-\t/*\n-\t???\n-\t@Override\n-\tpublic Drug createOrUpdate(Drug drug) {\n-\t\tsuper.createOrUpdate(drug);\n-\t\n-\t\tfor (DrugIngredient ingredient : drug.getIngredients()) {\n-\t\t\tgetSessionFactory().getCurrentSession().saveOrUpdate(ingredient);\n-\t\t}\n-\t\n-\t\treturn drug;\n-\t}*/\n-\t\n \t@Override\n \tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n \t\ttheParams.getParameters().forEach(entry -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxOTAyMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/282#discussion_r469319021", "bodyText": "Suggested change", "author": "ibacher", "createdAt": "2020-08-12T14:51:58Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Medication;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.BaseFhirIntegrationTest;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class MedicationFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<MedicationFhirResourceProvider, Medication> {\n+\t\n+\tprivate static final String MEDICATION_UUID = \"1085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String WRONG_MEDICATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n+\t\n+\tprivate static final String MEDICATION_CODE_UUID = \"5086AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String MEDICATION_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationResourceWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationWebTest_create.xml\";\n+\t\n+\tprivate static final String XML_UPDATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationWebTest_update.xml\";\n+\t\n+\tprivate static final String JSON_UPDATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationResourceWebTest_update.json\";\n+\t\n+\t@Autowired\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate MedicationFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(MEDICATION_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingMedicationAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingMedicationAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + WRONG_MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingMedicationAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingMedicationAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + WRONG_MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewMedicationAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create medication\n+\t\tMockHttpServletResponse response = post(\"/Medication\").accept(FhirMediaTypes.JSON).jsonContent(jsonMedication).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(medication.getCode().getCodingFirstRep().getCode(), equalTo(MEDICATION_CODE_UUID));\n+\t\t\n+\t\t// try to get new medication\n+\t\tresponse = get(medication.getId()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tMedication newMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(newMedication.getId(), equalTo(medication.getId()));\n+\t\tassertThat(newMedication.getStatus(), equalTo(medication.getStatus()));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewMedicationAsXml() throws Exception {\n+\t\tString xmlMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create medication\n+\t\tMockHttpServletResponse response = post(\"/Medication\").accept(FhirMediaTypes.XML).xmlContext(xmlMedication).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(medication.getCode().getCodingFirstRep().getCode(), equalTo(MEDICATION_CODE_UUID));\n+\t\t\n+\t\t// try to get new medication\n+\t\tresponse = get(medication.getId()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tMedication newMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(newMedication.getId(), equalTo(medication.getId()));\n+\t\tassertThat(newMedication.getStatus(), equalTo(medication.getStatus()));\n+\t\t", "originalCommit": "73145af2c90aafd691f8c427fd8d8928bb1190cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de673094ccb5684908d12346b6230b0a553bd84", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\nindex f9d887e8..9877edec 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\n\n@@ -22,7 +22,6 @@ import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicReference;\n \n import lombok.AccessLevel;\n import lombok.Getter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxOTE1OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/282#discussion_r469319158", "bodyText": "Suggested change", "author": "ibacher", "createdAt": "2020-08-12T14:52:09Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Medication;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.BaseFhirIntegrationTest;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class MedicationFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<MedicationFhirResourceProvider, Medication> {\n+\t\n+\tprivate static final String MEDICATION_UUID = \"1085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String WRONG_MEDICATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n+\t\n+\tprivate static final String MEDICATION_CODE_UUID = \"5086AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String MEDICATION_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationResourceWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationWebTest_create.xml\";\n+\t\n+\tprivate static final String XML_UPDATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationWebTest_update.xml\";\n+\t\n+\tprivate static final String JSON_UPDATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationResourceWebTest_update.json\";\n+\t\n+\t@Autowired\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate MedicationFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(MEDICATION_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingMedicationAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingMedicationAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + WRONG_MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingMedicationAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingMedicationAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + WRONG_MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewMedicationAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create medication\n+\t\tMockHttpServletResponse response = post(\"/Medication\").accept(FhirMediaTypes.JSON).jsonContent(jsonMedication).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(medication.getCode().getCodingFirstRep().getCode(), equalTo(MEDICATION_CODE_UUID));\n+\t\t\n+\t\t// try to get new medication\n+\t\tresponse = get(medication.getId()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tMedication newMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(newMedication.getId(), equalTo(medication.getId()));\n+\t\tassertThat(newMedication.getStatus(), equalTo(medication.getStatus()));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewMedicationAsXml() throws Exception {\n+\t\tString xmlMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create medication\n+\t\tMockHttpServletResponse response = post(\"/Medication\").accept(FhirMediaTypes.XML).xmlContext(xmlMedication).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(medication.getCode().getCodingFirstRep().getCode(), equalTo(MEDICATION_CODE_UUID));\n+\t\t\n+\t\t// try to get new medication\n+\t\tresponse = get(medication.getId()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tMedication newMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(newMedication.getId(), equalTo(medication.getId()));\n+\t\tassertThat(newMedication.getStatus(), equalTo(medication.getStatus()));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingMedicationAsJson() throws Exception {\n+\t\t//Before update\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication, validResource());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"200mg\"));\n+\t\t\n+\t\t// Get existing medication with updated medication strength\n+\t\tString jsonMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t//Update\n+\t\tresponse = put(\"/Medication/\" + MEDICATION_UUID).jsonContent(jsonMedication).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read updated record\n+\t\tmedication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"800mg\"));\n+\t\tassertThat(medication, validResource());\n+\t\t\n+\t\t// Double-check via get\n+\t\tresponse = get(\"/Medication/\" + MEDICATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tMedication updatedMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedMedication, validResource());\n+\t\tassertThat(updatedMedication, notNullValue());\n+\t\tassertThat(updatedMedication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"800mg\"));\n+\t\t", "originalCommit": "73145af2c90aafd691f8c427fd8d8928bb1190cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de673094ccb5684908d12346b6230b0a553bd84", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\nindex f9d887e8..9877edec 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\n\n@@ -22,7 +22,6 @@ import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicReference;\n \n import lombok.AccessLevel;\n import lombok.Getter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxOTI1Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/282#discussion_r469319253", "bodyText": "Suggested change", "author": "ibacher", "createdAt": "2020-08-12T14:52:17Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Medication;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.BaseFhirIntegrationTest;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class MedicationFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<MedicationFhirResourceProvider, Medication> {\n+\t\n+\tprivate static final String MEDICATION_UUID = \"1085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String WRONG_MEDICATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n+\t\n+\tprivate static final String MEDICATION_CODE_UUID = \"5086AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String MEDICATION_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationResourceWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationWebTest_create.xml\";\n+\t\n+\tprivate static final String XML_UPDATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationWebTest_update.xml\";\n+\t\n+\tprivate static final String JSON_UPDATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationResourceWebTest_update.json\";\n+\t\n+\t@Autowired\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate MedicationFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(MEDICATION_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingMedicationAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingMedicationAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + WRONG_MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingMedicationAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingMedicationAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + WRONG_MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewMedicationAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create medication\n+\t\tMockHttpServletResponse response = post(\"/Medication\").accept(FhirMediaTypes.JSON).jsonContent(jsonMedication).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(medication.getCode().getCodingFirstRep().getCode(), equalTo(MEDICATION_CODE_UUID));\n+\t\t\n+\t\t// try to get new medication\n+\t\tresponse = get(medication.getId()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tMedication newMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(newMedication.getId(), equalTo(medication.getId()));\n+\t\tassertThat(newMedication.getStatus(), equalTo(medication.getStatus()));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewMedicationAsXml() throws Exception {\n+\t\tString xmlMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create medication\n+\t\tMockHttpServletResponse response = post(\"/Medication\").accept(FhirMediaTypes.XML).xmlContext(xmlMedication).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(medication.getCode().getCodingFirstRep().getCode(), equalTo(MEDICATION_CODE_UUID));\n+\t\t\n+\t\t// try to get new medication\n+\t\tresponse = get(medication.getId()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tMedication newMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(newMedication.getId(), equalTo(medication.getId()));\n+\t\tassertThat(newMedication.getStatus(), equalTo(medication.getStatus()));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingMedicationAsJson() throws Exception {\n+\t\t//Before update\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication, validResource());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"200mg\"));\n+\t\t\n+\t\t// Get existing medication with updated medication strength\n+\t\tString jsonMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t//Update\n+\t\tresponse = put(\"/Medication/\" + MEDICATION_UUID).jsonContent(jsonMedication).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read updated record\n+\t\tmedication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"800mg\"));\n+\t\tassertThat(medication, validResource());\n+\t\t\n+\t\t// Double-check via get\n+\t\tresponse = get(\"/Medication/\" + MEDICATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tMedication updatedMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedMedication, validResource());\n+\t\tassertThat(updatedMedication, notNullValue());\n+\t\tassertThat(updatedMedication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"800mg\"));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingMedicationAsXml() throws Exception {\n+\t\t//Before update\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication, validResource());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"200mg\"));\n+\t\t\n+\t\t// Get existing medication with updated medication strength\n+\t\tString xmlMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_UPDATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t//Update\n+\t\tresponse = put(\"/Medication/\" + MEDICATION_UUID).xmlContext(xmlMedication).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read updated record\n+\t\tmedication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"800mg\"));\n+\t\tassertThat(medication, validResource());\n+\t\t\n+\t\t// Double-check via get\n+\t\tresponse = get(\"/Medication/\" + MEDICATION_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tMedication updatedMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedMedication, validResource());\n+\t\tassertThat(updatedMedication, notNullValue());\n+\t\tassertThat(updatedMedication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(updatedMedication), equalTo(\"800mg\"));\n+\t\t", "originalCommit": "73145af2c90aafd691f8c427fd8d8928bb1190cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de673094ccb5684908d12346b6230b0a553bd84", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\nindex f9d887e8..9877edec 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\n\n@@ -22,7 +22,6 @@ import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicReference;\n \n import lombok.AccessLevel;\n import lombok.Getter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyMzIzMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/282#discussion_r469323233", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAtomicReference<String> strengthValue = new AtomicReference<>();\n          \n          \n            \n            \t\tmedication.getExtensionsByUrl(FhirConstants.OPENMRS_FHIR_EXT_MEDICINE).forEach(extension -> {\n          \n          \n            \n            \t\t\tstrengthValue.set(extension.getExtensionString(FhirConstants.OPENMRS_FHIR_EXT_MEDICINE + \"#strength\"));\n          \n          \n            \n            \t\t});\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\treturn strengthValue.get();\n          \n          \n            \n            \treturn medication.getExtensionsByUrl(FhirConstants.OPENMRS_FHIR_EXT_MEDICINE).stream()\n          \n          \n            \n            \t\t\t.findFirst().map(it ->\n          \n          \n            \n            \t\t\t\t\tit.getExtensionString(FhirConstants.OPENMRS_FHIR_EXT_MEDICINE + \"#strength\")).orElse(null);", "author": "ibacher", "createdAt": "2020-08-12T14:57:33Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Medication;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.BaseFhirIntegrationTest;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class MedicationFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<MedicationFhirResourceProvider, Medication> {\n+\t\n+\tprivate static final String MEDICATION_UUID = \"1085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String WRONG_MEDICATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n+\t\n+\tprivate static final String MEDICATION_CODE_UUID = \"5086AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String MEDICATION_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationResourceWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationWebTest_create.xml\";\n+\t\n+\tprivate static final String XML_UPDATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationWebTest_update.xml\";\n+\t\n+\tprivate static final String JSON_UPDATE_MEDICATION_DOCUMENT = \"org/openmrs/module/fhir2/providers/MedicationResourceWebTest_update.json\";\n+\t\n+\t@Autowired\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate MedicationFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(MEDICATION_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingMedicationAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingMedicationAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + WRONG_MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingMedicationAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingMedicationAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + WRONG_MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewMedicationAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create medication\n+\t\tMockHttpServletResponse response = post(\"/Medication\").accept(FhirMediaTypes.JSON).jsonContent(jsonMedication).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(medication.getCode().getCodingFirstRep().getCode(), equalTo(MEDICATION_CODE_UUID));\n+\t\t\n+\t\t// try to get new medication\n+\t\tresponse = get(medication.getId()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tMedication newMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(newMedication.getId(), equalTo(medication.getId()));\n+\t\tassertThat(newMedication.getStatus(), equalTo(medication.getStatus()));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewMedicationAsXml() throws Exception {\n+\t\tString xmlMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create medication\n+\t\tMockHttpServletResponse response = post(\"/Medication\").accept(FhirMediaTypes.XML).xmlContext(xmlMedication).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(medication.getCode().getCodingFirstRep().getCode(), equalTo(MEDICATION_CODE_UUID));\n+\t\t\n+\t\t// try to get new medication\n+\t\tresponse = get(medication.getId()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tMedication newMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(newMedication.getId(), equalTo(medication.getId()));\n+\t\tassertThat(newMedication.getStatus(), equalTo(medication.getStatus()));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingMedicationAsJson() throws Exception {\n+\t\t//Before update\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication, validResource());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"200mg\"));\n+\t\t\n+\t\t// Get existing medication with updated medication strength\n+\t\tString jsonMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t//Update\n+\t\tresponse = put(\"/Medication/\" + MEDICATION_UUID).jsonContent(jsonMedication).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read updated record\n+\t\tmedication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"800mg\"));\n+\t\tassertThat(medication, validResource());\n+\t\t\n+\t\t// Double-check via get\n+\t\tresponse = get(\"/Medication/\" + MEDICATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tMedication updatedMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedMedication, validResource());\n+\t\tassertThat(updatedMedication, notNullValue());\n+\t\tassertThat(updatedMedication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"800mg\"));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingMedicationAsXml() throws Exception {\n+\t\t//Before update\n+\t\tMockHttpServletResponse response = get(\"/Medication/\" + MEDICATION_UUID)\n+\t\t        .accept(BaseFhirIntegrationTest.FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(BaseFhirIntegrationTest.FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tMedication medication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication, validResource());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"200mg\"));\n+\t\t\n+\t\t// Get existing medication with updated medication strength\n+\t\tString xmlMedication;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_UPDATE_MEDICATION_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlMedication = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t//Update\n+\t\tresponse = put(\"/Medication/\" + MEDICATION_UUID).xmlContext(xmlMedication).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read updated record\n+\t\tmedication = readResponse(response);\n+\t\t\n+\t\tassertThat(medication, notNullValue());\n+\t\tassertThat(medication.getIdElement().getIdPart(), equalTo(MEDICATION_UUID));\n+\t\tassertThat(medication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(medication), equalTo(\"800mg\"));\n+\t\tassertThat(medication, validResource());\n+\t\t\n+\t\t// Double-check via get\n+\t\tresponse = get(\"/Medication/\" + MEDICATION_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tMedication updatedMedication = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedMedication, validResource());\n+\t\tassertThat(updatedMedication, notNullValue());\n+\t\tassertThat(updatedMedication.getStatus(), is(Medication.MedicationStatus.ACTIVE));\n+\t\tassertThat(getStrengthExtensionValue(updatedMedication), equalTo(\"800mg\"));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForExistingMedicationsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Medication/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Medication.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t\t\n+\t\tresponse = get(String.format(\"/Medication?_id=%s\", MEDICATION_UUID)).accept(FhirMediaTypes.JSON).go();\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tresults = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tentries = results.getEntry();\n+\t\tassertThat(entries, everyItem(hasResource(\n+\t\t    hasProperty(\"id\", is(\"http://localhost/ws/fhir2/R3/Medication/1085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForExistingMedicationsAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Medication\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Medication/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Medication.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t\t\n+\t\tresponse = get(String.format(\"/Medication?_id=%s\", MEDICATION_UUID)).accept(FhirMediaTypes.XML).go();\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tresults = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tentries = results.getEntry();\n+\t\tassertThat(entries, everyItem(hasResource(\n+\t\t    hasProperty(\"id\", is(\"http://localhost/ws/fhir2/R3/Medication/1085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\tprivate String getStrengthExtensionValue(Medication medication) {\n+\t\tAtomicReference<String> strengthValue = new AtomicReference<>();\n+\t\tmedication.getExtensionsByUrl(FhirConstants.OPENMRS_FHIR_EXT_MEDICINE).forEach(extension -> {\n+\t\t\tstrengthValue.set(extension.getExtensionString(FhirConstants.OPENMRS_FHIR_EXT_MEDICINE + \"#strength\"));\n+\t\t});\n+\t\t\n+\t\treturn strengthValue.get();", "originalCommit": "73145af2c90aafd691f8c427fd8d8928bb1190cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7de673094ccb5684908d12346b6230b0a553bd84", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\nindex f9d887e8..9877edec 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/MedicationFhirResourceProviderIntegrationTest.java\n\n@@ -22,7 +22,6 @@ import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicReference;\n \n import lombok.AccessLevel;\n import lombok.Getter;\n"}}, {"oid": "7de673094ccb5684908d12346b6230b0a553bd84", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7de673094ccb5684908d12346b6230b0a553bd84", "message": "FM2-287: Add Integration tests for Medication", "committedDate": "2020-08-12T16:01:48Z", "type": "commit"}, {"oid": "7de673094ccb5684908d12346b6230b0a553bd84", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7de673094ccb5684908d12346b6230b0a553bd84", "message": "FM2-287: Add Integration tests for Medication", "committedDate": "2020-08-12T16:01:48Z", "type": "forcePushed"}]}