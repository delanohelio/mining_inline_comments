{"pr_number": 103, "pr_title": "FM2-96: Implement additional fields for observations", "pr_createdAt": "2020-03-03T18:21:40Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103", "timeline": [{"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/11bf02c6acd2d0ec46eb324784d0b79783ec07f8", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-03T18:36:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMDc3Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387220773", "bodyText": "We actually shouldn't return null if it's a DrugOrder. I'd just handle it as usual anyways.", "author": "ibacher", "createdAt": "2020-03-03T18:47:10Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java", "diffHunk": "@@ -109,6 +111,13 @@ protected Reference createPractitionerReference(@NotNull Provider provider) {\n \t\treturn reference;\n \t}\n \t\n+\tprotected Reference createOrderReference(@NotNull Order order) {\n+\t\tif (order instanceof DrugOrder) {\n+\t\t\treturn null;", "originalCommit": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b38140cd1d80378516edcbe10ccea1f5791dfa6f", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java\nindex 89cd58ef..896eff81 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java\n\n@@ -112,10 +111,7 @@ public abstract class AbstractReferenceHandlingTranslator {\n \t}\n \t\n \tprotected Reference createOrderReference(@NotNull Order order) {\n-\t\tif (order instanceof DrugOrder) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn new Reference().setReference(FhirConstants.ORDER + \"/\" + order.getId()).setType(FhirConstants.ORDER);\n+\t\treturn new Reference().setReference(FhirConstants.ORDER + \"/\" + order.getUuid()).setType(FhirConstants.ORDER);\n \t}\n \t\n \tprotected String getReferenceType(Reference reference) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjA0MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387222040", "bodyText": "Please don't use the org.openmrs.api.OrderService here. Instead, create a FhirOrderDao to get the order from the database. I don't want to depend on the OpenMRS Service API if we can avoid it.", "author": "ibacher", "createdAt": "2020-03-03T18:49:16Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import javax.inject.Inject;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Order;\n+import org.openmrs.api.OrderService;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.ObservationBasedOnReferenceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationBasedOnReferenceTranslatorImpl extends AbstractReferenceHandlingTranslator implements ObservationBasedOnReferenceTranslator {\n+\t\n+\t@Inject\n+\tprivate OrderService orderService;", "originalCommit": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b38140cd1d80378516edcbe10ccea1f5791dfa6f", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java\nindex 9f27d2f2..237ac0a0 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java\n\n@@ -15,8 +15,8 @@ import lombok.AccessLevel;\n import lombok.Setter;\n import org.hl7.fhir.r4.model.Reference;\n import org.openmrs.Order;\n-import org.openmrs.api.OrderService;\n import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.dao.FhirOrderDao;\n import org.openmrs.module.fhir2.api.translators.ObservationBasedOnReferenceTranslator;\n import org.springframework.stereotype.Component;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjc4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387222783", "bodyText": "We should not being doing this. Let the dateCreated (and dateChanged) fields get updated by the system, not by our code.", "author": "ibacher", "createdAt": "2020-03-03T18:50:37Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());", "originalCommit": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MTI3Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387241276", "bodyText": "@ibacher I'm not sure I understand this, do you mean like we shouldn't be mapping openmrs fields?", "author": "jecihjoy", "createdAt": "2020-03-03T19:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MjM1Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387242353", "bodyText": "I just mean we shouldn't be updating dateCreated and dateUpdated based on values supplied via the FHIR interface. They should basically be read-only fields.", "author": "ibacher", "createdAt": "2020-03-03T19:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0ODQ3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387248477", "bodyText": "got it", "author": "jecihjoy", "createdAt": "2020-03-03T19:37:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b38140cd1d80378516edcbe10ccea1f5791dfa6f", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\nindex 6e0b06f8..bbdb790c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\n\n@@ -145,11 +137,6 @@ public class ObservationTranslatorImpl implements ObservationTranslator {\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n-\t\texistingObs.setDateCreated(observation.getIssued());\n-\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());\n-\t\tif (observation.hasBasedOn()) {\n-\t\t\texistingObs.setOrder(basedOnReferenceTranslator.toOpenmrsType(observation.getBasedOn().get(0)));\n-\t\t}\n \t\t\n \t\treturn existingObs;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzUxMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387223512", "bodyText": "What happens if there is no effectiveDateTimeType set for this resource? We should actually have a translator here that can handle (at least) effectiveDateTime and effectiveInstant.", "author": "ibacher", "createdAt": "2020-03-03T18:51:42Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());\n+\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());", "originalCommit": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MjI2NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387242264", "bodyText": "@ibacher do you mean doing this in something like a ObservationEffectiveDatetimeTranslator?", "author": "jecihjoy", "createdAt": "2020-03-03T19:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MzE5Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387243193", "bodyText": "Yes. It's kind of similar to what we had to do with ObservationValueTranslator.", "author": "ibacher", "createdAt": "2020-03-03T19:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "b38140cd1d80378516edcbe10ccea1f5791dfa6f", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\nindex 6e0b06f8..bbdb790c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\n\n@@ -145,11 +137,6 @@ public class ObservationTranslatorImpl implements ObservationTranslator {\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n-\t\texistingObs.setDateCreated(observation.getIssued());\n-\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());\n-\t\tif (observation.hasBasedOn()) {\n-\t\t\texistingObs.setOrder(basedOnReferenceTranslator.toOpenmrsType(observation.getBasedOn().get(0)));\n-\t\t}\n \t\t\n \t\treturn existingObs;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzY5OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387223698", "bodyText": "Add a new line here", "author": "ibacher", "createdAt": "2020-03-03T18:52:02Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());\n+\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());\n+\t\tif (observation.hasBasedOn()) {", "originalCommit": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b38140cd1d80378516edcbe10ccea1f5791dfa6f", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\nindex 6e0b06f8..bbdb790c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java\n\n@@ -145,11 +137,6 @@ public class ObservationTranslatorImpl implements ObservationTranslator {\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n-\t\texistingObs.setDateCreated(observation.getIssued());\n-\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());\n-\t\tif (observation.hasBasedOn()) {\n-\t\t\texistingObs.setOrder(basedOnReferenceTranslator.toOpenmrsType(observation.getBasedOn().get(0)));\n-\t\t}\n \t\t\n \t\treturn existingObs;\n \t}\n"}}, {"oid": "b38140cd1d80378516edcbe10ccea1f5791dfa6f", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b38140cd1d80378516edcbe10ccea1f5791dfa6f", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-04T06:36:40Z", "type": "forcePushed"}, {"oid": "66c7ea24f2d3074543f9c773d6c36069987c4143", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/66c7ea24f2d3074543f9c773d6c36069987c4143", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-04T06:39:02Z", "type": "forcePushed"}, {"oid": "9cea3f57d7a8371755212368d150b767995408b5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9cea3f57d7a8371755212368d150b767995408b5", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-04T06:40:53Z", "type": "forcePushed"}, {"oid": "36753b5c42bb169d5985ca486054c27be19db01e", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/36753b5c42bb169d5985ca486054c27be19db01e", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-04T06:41:44Z", "type": "forcePushed"}, {"oid": "c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-04T07:12:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MzAzMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387693031", "bodyText": "This should still be \"ServiceRequest\" since \"Order\" isn't a valid FHIR object type.", "author": "ibacher", "createdAt": "2020-03-04T14:16:41Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java", "diffHunk": "@@ -109,6 +110,10 @@ protected Reference createPractitionerReference(@NotNull Provider provider) {\n \t\treturn reference;\n \t}\n \t\n+\tprotected Reference createOrderReference(@NotNull Order order) {\n+\t\treturn new Reference().setReference(FhirConstants.ORDER + \"/\" + order.getUuid()).setType(FhirConstants.ORDER);", "originalCommit": "c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MzYxMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387693611", "bodyText": "In this method, it may make sense to differentiate DrugOrders, but in that case have them return a reference to a \"MedicationRequest\". However, that only makes sense once the MedicationRequest resource is created.", "author": "ibacher", "createdAt": "2020-03-04T14:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MzAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "38998296558d0239a1f87b039642250ee788a5bf", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java\nindex 896eff81..2fbe73cc 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java\n\n@@ -111,7 +111,8 @@ public abstract class AbstractReferenceHandlingTranslator {\n \t}\n \t\n \tprotected Reference createOrderReference(@NotNull Order order) {\n-\t\treturn new Reference().setReference(FhirConstants.ORDER + \"/\" + order.getUuid()).setType(FhirConstants.ORDER);\n+\t\treturn new Reference().setReference(FhirConstants.SERVICEREQUEST + \"/\" + order.getUuid())\n+\t\t        .setType(FhirConstants.SERVICEREQUEST);\n \t}\n \t\n \tprotected String getReferenceType(Reference reference) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NDMxMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387694313", "bodyText": "Again, reference should be to a ServiceRequest, not an Order", "author": "ibacher", "createdAt": "2020-03-04T14:18:40Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import javax.inject.Inject;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Order;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.dao.FhirOrderDao;\n+import org.openmrs.module.fhir2.api.translators.ObservationBasedOnReferenceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationBasedOnReferenceTranslatorImpl extends AbstractReferenceHandlingTranslator implements ObservationBasedOnReferenceTranslator {\n+\t\n+\t@Inject\n+\tprivate FhirOrderDao<Order> orderDao;\n+\t\n+\t@Override\n+\tpublic Reference toFhirResource(Order order) {\n+\t\tif (order == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn createOrderReference(order);\n+\t}\n+\t\n+\t@Override\n+\tpublic Order toOpenmrsType(Reference reference) {\n+\t\tif (reference == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (!reference.getType().equals(FhirConstants.ORDER)) {", "originalCommit": "c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38998296558d0239a1f87b039642250ee788a5bf", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java\nindex 237ac0a0..bea9ed36 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java\n\n@@ -42,8 +42,8 @@ public class ObservationBasedOnReferenceTranslatorImpl extends AbstractReference\n \t\t\treturn null;\n \t\t}\n \t\t\n-\t\tif (!reference.getType().equals(FhirConstants.ORDER)) {\n-\t\t\tthrow new IllegalArgumentException(\"Reference must be to an Order not a \" + reference.getType());\n+\t\tif (!reference.getType().equals(FhirConstants.SERVICEREQUEST)) {\n+\t\t\tthrow new IllegalArgumentException(\"Reference must be to an ServiceRequest not a \" + reference.getType());\n \t\t}\n \t\t\n \t\tString uuid = getReferenceId(reference);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NTUwMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387695500", "bodyText": "In addition to DateTimeType we should also support InstantType here, which is very similar to DateTimeType, but represents a slightly more precise type.", "author": "ibacher", "createdAt": "2020-03-04T14:20:33Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationEffectiveDatetimeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.Type;\n+import org.openmrs.Obs;\n+import org.openmrs.module.fhir2.api.translators.ObservationEffectiveDatetimeTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationEffectiveDatetimeTranslatorImpl implements ObservationEffectiveDatetimeTranslator {\n+\t\n+\t@Override\n+\tpublic Type toFhirResource(Obs obs) {\n+\t\tif (obs == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (obs.getObsDatetime() != null) {\n+\t\t\treturn (new DateTimeType(obs.getObsDatetime()));\n+\t\t}\n+\t\t\n+\t\treturn null;\n+\t}\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Obs obs, Type resource) {\n+\t\tif (resource == null) {\n+\t\t\treturn obs;\n+\t\t}\n+\t\t\n+\t\tif (resource instanceof DateTimeType) {", "originalCommit": "c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38998296558d0239a1f87b039642250ee788a5bf", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationEffectiveDatetimeTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationEffectiveDatetimeTranslatorImpl.java\nindex 99bbca30..e132e471 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationEffectiveDatetimeTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationEffectiveDatetimeTranslatorImpl.java\n\n@@ -12,6 +12,7 @@ package org.openmrs.module.fhir2.api.translators.impl;\n import lombok.AccessLevel;\n import lombok.Setter;\n import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.InstantType;\n import org.hl7.fhir.r4.model.Type;\n import org.openmrs.Obs;\n import org.openmrs.module.fhir2.api.translators.ObservationEffectiveDatetimeTranslator;\n"}}, {"oid": "38998296558d0239a1f87b039642250ee788a5bf", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/38998296558d0239a1f87b039642250ee788a5bf", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-05T12:55:58Z", "type": "forcePushed"}, {"oid": "acecc639668e3dbbc65931df3d7eee5a393298e8", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/acecc639668e3dbbc65931df3d7eee5a393298e8", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-05T13:02:01Z", "type": "forcePushed"}, {"oid": "42e05b72a4d01b6cf03f429f14c85409918e2a18", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/42e05b72a4d01b6cf03f429f14c85409918e2a18", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-13T10:01:13Z", "type": "forcePushed"}, {"oid": "a88dccddfb78e699b17e1b871e617a303fbd33b5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a88dccddfb78e699b17e1b871e617a303fbd33b5", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-13T10:34:48Z", "type": "commit"}, {"oid": "a88dccddfb78e699b17e1b871e617a303fbd33b5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a88dccddfb78e699b17e1b871e617a303fbd33b5", "message": "FM2-96 :Implement additional fields for observations", "committedDate": "2020-03-13T10:34:48Z", "type": "forcePushed"}]}