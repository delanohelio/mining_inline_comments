{"pr_number": 198, "pr_title": "FM2-194: Create default narratives for AllergyIntolerance, MedicationRequest, and Condition", "pr_createdAt": "2020-06-08T17:09:41Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTcwNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437129706", "bodyText": "Better to use logger if you really need or you can remove the System.out.println from the code", "author": "suthagar23", "createdAt": "2020-06-09T04:24:32Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.util.Date;\n+\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.Base64BinaryType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Dosage;\n+import org.hl7.fhir.r4.model.Duration;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Medication;\n+import org.hl7.fhir.r4.model.MedicationRequest;\n+import org.hl7.fhir.r4.model.Narrative;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Provenance;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Range;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.Signature;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.Timing;\n+import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceClinical;\n+import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceVerification;\n+import org.junit.Test;\n+\n+public class DefaultNarrativeTemplateTest {\n+\t\n+\t@Test\n+\tpublic void testForAllergyIntolerance() {\n+\t\t// Example: https://www.hl7.org/fhir/allergyintolerance-example.html\n+\t\t\n+\t\tAllergyIntolerance allergyIntolerance = new AllergyIntolerance();\n+\t\t\n+\t\tallergyIntolerance.setId(\"example\");\n+\t\tallergyIntolerance.addIdentifier().setValue(\"12345678\");\n+\t\t\n+\t\tCodeableConcept clinicalStatus = new CodeableConcept();\n+\t\tclinicalStatus.addCoding().setCode(AllergyintoleranceClinical.ACTIVE.toCode())\n+\t\t        .setDisplay(AllergyintoleranceClinical.ACTIVE.getDisplay());\n+\t\tallergyIntolerance.setClinicalStatus(clinicalStatus);\n+\t\t\n+\t\tCodeableConcept verificationStatus = new CodeableConcept();\n+\t\tverificationStatus.addCoding().setCode(AllergyintoleranceVerification.CONFIRMED.toCode())\n+\t\t        .setDisplay(AllergyintoleranceVerification.CONFIRMED.getDisplay());\n+\t\tallergyIntolerance.setVerificationStatus(verificationStatus);\n+\t\t\n+\t\tallergyIntolerance.setType(AllergyIntolerance.AllergyIntoleranceType.fromCode(\"allergy\"));\n+\t\tallergyIntolerance.addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"food\"));\n+\t\tallergyIntolerance\n+\t\t        .addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"medication\"));\n+\t\tallergyIntolerance.setCriticality(AllergyIntolerance.AllergyIntoleranceCriticality.fromCode(\"high\"));\n+\t\t\n+\t\tCodeableConcept code = new CodeableConcept();\n+\t\tcode.addCoding().setCode(\"227493005\").setDisplay(\"Cashew Nuts\");\n+\t\tallergyIntolerance.setCode(code);\n+\t\tallergyIntolerance.setPatient(new Reference().setReference(\"Patient/10010\").setDisplay(\"PatientNAME\"));\n+\t\tallergyIntolerance.setOnset(new StringType().setValue(\"01/01/2004\"));\n+\t\tallergyIntolerance.setRecordedDate(new Date());\n+\t\tallergyIntolerance.setRecorder(new Reference().setReference(\"Practitioner/10011\"));\n+\t\tallergyIntolerance.setAsserter(new Reference().setReference(\"Patient/10211\").setDisplay(\"AsserterNAME\"));\n+\t\tallergyIntolerance.setLastOccurrence(new Date());\n+\t\tallergyIntolerance.addNote().setText(\n+\t\t    \"The criticality is high becasue of the observed anaphylactic reaction when challenged with cashew extract.\");\n+\t\t\n+\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n+\t\tCodeableConcept substance = new CodeableConcept();\n+\t\tsubstance.addCoding().setCode(\"1160593\").setDisplay(\"cashew nut allergenic extract Injectale Product\");\n+\t\tallergyIntoleranceReactionComponent.setSubstance(substance);\n+\t\tallergyIntoleranceReactionComponent.addManifestation().addCoding().setCode(\"39579001\")\n+\t\t        .setDisplay(\"Anaphylactic reaction\");\n+\t\tallergyIntoleranceReactionComponent.setDescription(\n+\t\t    \"Challenge Protocol. Severe reaction to subcutaneous cashew extract. Epinephrine administered\");\n+\t\tallergyIntoleranceReactionComponent.setOnset(new Date());\n+\t\tallergyIntoleranceReactionComponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"severe\"));\n+\t\tCodeableConcept exposureRoute = new CodeableConcept();\n+\t\texposureRoute.addCoding().setCode(\"34206005\").setDisplay(\"Subcutaneous route\");\n+\t\tallergyIntoleranceReactionComponent.setExposureRoute(exposureRoute);\n+\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent);\n+\t\t\n+\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent1 = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n+\t\tallergyIntoleranceReactionComponent1.addManifestation().addCoding().setCode(\"64305001\").setDisplay(\"Urticaria\");\n+\t\tallergyIntoleranceReactionComponent1.setOnset(new Date());\n+\t\tallergyIntoleranceReactionComponent1.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"moderate\"));\n+\t\tallergyIntoleranceReactionComponent1.addNote()\n+\t\t        .setText(\"The patient reports that the onset of urticaria was within 15 minutes of eating cashews.\");\n+\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent1);\n+\t\t\n+\t\tassertThat(testHelper(new AllergyIntolerance()).getDivAsString(), notNullValue());\n+\t\tassertThat(testHelper(allergyIntolerance).getDivAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testForMedicationRequest() {\n+\t\t// https://www.hl7.org/fhir/medicationrequest0301.html\n+\t\t\n+\t\tMedicationRequest medicationRequest = new MedicationRequest();\n+\t\t\n+\t\tmedicationRequest.setId(\"medrx301\");\n+\t\t\n+\t\tCodeableConcept medicationCode = new CodeableConcept();\n+\t\tmedicationCode.addCoding().setSystem(\"http://snomed.info/sct\").setDisplay(\"Oral Form Oxycodone (product)\")\n+\t\t        .setCode(\"430127000\");\n+\t\tmedicationRequest.addContained(new Medication().setCode(medicationCode).setId(\"med0310\"));\n+\t\tProvenance provenance = new Provenance();\n+\t\tprovenance.addTarget().setReference(\"ServiceRequest/physiotherapy\");\n+\t\tprovenance.setRecorded(new Date());\n+\t\tProvenance.ProvenanceAgentComponent provenanceAgentComponent = new Provenance.ProvenanceAgentComponent();\n+\t\tprovenanceAgentComponent.addRole().addCoding().setCode(\"AUT\")\n+\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ParticipationType\");\n+\t\tprovenanceAgentComponent.setWho(new Reference().setDisplay(\"Dr Adam Careful\").setReference(\"Practitioner/example\"));\n+\t\tprovenance.addAgent(provenanceAgentComponent);\n+\t\tSignature signature = new Signature();\n+\t\tsignature.addType().setSystem(\"urn:iso-astm:E1762-95:2013\").setCode(\"1.2.840.10065.1.12.1.1\")\n+\t\t        .setDisplay(\"Author's Signature\");\n+\t\tsignature.setWhen(new Date());\n+\t\tsignature.setWho(new Reference().setReference(\"Practitioner/example\").setDisplay(\"Dr Adam Careful\"));\n+\t\tsignature.setTargetFormat(\"application/fhir+xml\");\n+\t\tsignature.setSigFormat(\"application/signature+xml\");\n+\t\tsignature.setDataElement(new Base64BinaryType(\"dGhpcyBibG9iIGlzIHNuaXBwZWQ=\"));\n+\t\tprovenance.addSignature(signature);\n+\t\tmedicationRequest.addContained(provenance);\n+\t\t\n+\t\tmedicationRequest.addIdentifier().setUse(Identifier.IdentifierUse.OFFICIAL)\n+\t\t        .setSystem(\"http://www.bmc.nl/portal/prescriptions\").setValue(\"12345689\");\n+\t\tmedicationRequest.setStatus(MedicationRequest.MedicationRequestStatus.COMPLETED);\n+\t\t\n+\t\tCodeableConcept statusReason = new CodeableConcept();\n+\t\tstatusReason.addCoding().setDisplay(\"Try another treatment first\").setCode(\"altchoice\")\n+\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-status-reason\");\n+\t\tmedicationRequest.setStatusReason(statusReason);\n+\t\tmedicationRequest.setIntent(MedicationRequest.MedicationRequestIntent.ORDER);\n+\t\tmedicationRequest.addCategory().addCoding()\n+\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-category\").setCode(\"inpatient\")\n+\t\t        .setDisplay(\"Inpatient\");\n+\t\t\n+\t\tmedicationRequest.setMedication(new Reference().setReference(\"#med0310\"));\n+\t\tmedicationRequest.setSubject(new Reference().setReference(\"Patient/pat1\").setDisplay(\"Donald Duck\"));\n+\t\tmedicationRequest.setEncounter(\n+\t\t    new Reference().setDisplay(\"encounter who leads to this prescription\").setReference(\"Encounter/f201\"));\n+\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n+\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n+\t\tmedicationRequest.setAuthoredOn(new Date());\n+\t\tmedicationRequest.setRequester(new Reference().setReference(\"Practitioner/f007\").setDisplay(\"Patrick Pump\"));\n+\t\tmedicationRequest.setPerformer(new Reference().setReference(\"Practitioner/f204\").setDisplay(\"Carla Espinosa\"));\n+\t\tCodeableConcept performerType = new CodeableConcept();\n+\t\tperformerType.addCoding().setDisplay(\"Public Health Nurse\").setCode(\"26369006\").setSystem(\"http://snomed.info/sct\");\n+\t\tmedicationRequest.setPerformerType(performerType);\n+\t\tmedicationRequest.addReasonCode().addCoding().setSystem(\"http://snomed.info/sct\").setCode(\"297217002\")\n+\t\t        .setDisplay(\"Rib Pain (finding)\");\n+\t\tmedicationRequest.addInsurance().setReference(\"Coverage/9876B1\");\n+\t\tmedicationRequest.addNote().setText(\"Patient told to take with food\");\n+\t\t\n+\t\tTiming timing = new Timing();\n+\t\ttiming.setRepeat(new Timing.TimingRepeatComponent().setFrequency(1).setPeriod(4).setPeriodMax(6)\n+\t\t        .setPeriodUnit(Timing.UnitsOfTime.H));\n+\t\tDosage dosage = new Dosage();\n+\t\tdosage.setSequence(1).setText(\"one to two tablets every 4-6 hours as needed for rib pain\")\n+\t\t        .setPatientInstruction(\"Take one to two tablets every four to six hours as needed for rib pain\")\n+\t\t        .setTiming(timing);\n+\t\tdosage.addAdditionalInstruction().addCoding().setDisplay(\n+\t\t    \"Warning. May cause drowsiness. If affected do not drive or operate machinery. Avoid alcoholic drink (qualifier value)\")\n+\t\t        .setCode(\"418914006\").setSystem(\"http://snomed.info/sct\");\n+\t\tCodeableConcept asNeeded = new CodeableConcept();\n+\t\tasNeeded.addCoding().setCode(\"297217002\").setSystem(\"http://snomed.info/sct\").setDisplay(\"Rib Pain (finding)\");\n+\t\tdosage.setAsNeeded(asNeeded);\n+\t\tCodeableConcept route = new CodeableConcept();\n+\t\troute.addCoding().setDisplay(\"Oral Route\").setSystem(\"http://snomed.info/sct\").setCode(\"26643006\");\n+\t\tdosage.setRoute(route);\n+\t\tCodeableConcept method = new CodeableConcept();\n+\t\tmethod.addCoding().setDisplay(\"Swallow - dosing instruction imperative (qualifier value)\")\n+\t\t        .setSystem(\"http://snomed.info/sct\").setCode(\"421521009\");\n+\t\tdosage.setMethod(method);\n+\t\t\n+\t\tCodeableConcept doseandrateType = new CodeableConcept();\n+\t\tdoseandrateType.addCoding().setCode(\"ordered\").setDisplay(\"Ordered\")\n+\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/dose-rate-type\");\n+\t\tRange doseRange = new Range();\n+\t\tdoseRange.setLow(new Quantity().setValue(1).setUnit(\"TAB\")\n+\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n+\t\tdoseRange.setHigh(new Quantity().setValue(2).setUnit(\"TAB\")\n+\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n+\t\tdosage.addDoseAndRate().setDose(doseRange).setType(doseandrateType);\n+\t\t\n+\t\tmedicationRequest.addDosageInstruction(dosage);\n+\t\t\n+\t\tDuration duration = new Duration();\n+\t\tduration.setValue(10).setUnit(\"days\").setSystem(\"http://unitsofmeasure.org\").setCode(\"d\");\n+\t\tmedicationRequest.setDispenseRequest(new MedicationRequest.MedicationRequestDispenseRequestComponent()\n+\t\t        .setValidityPeriod(new Period().setStart(new Date()).setEnd(new Date())).setNumberOfRepeatsAllowed(0)\n+\t\t        .setQuantity(new Quantity().setValue(30).setUnit(\"TAB\")\n+\t\t                .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"))\n+\t\t        .setExpectedSupplyDuration(duration).setPerformer(new Reference().setReference(\"Practitioner/f001\"))\n+\t\t        .setInitialFill(new MedicationRequest.MedicationRequestDispenseRequestInitialFillComponent()\n+\t\t                .setQuantity(new Quantity().setValue(123).setSystem(\"something\")).setDuration(duration)));\n+\t\t\n+\t\tCodeableConcept substitutionReason = new CodeableConcept();\n+\t\tsubstitutionReason.addCoding().setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ActReason\").setCode(\"FP\")\n+\t\t        .setDisplay(\"formulary policy\");\n+\t\tmedicationRequest.setSubstitution(new MedicationRequest.MedicationRequestSubstitutionComponent()\n+\t\t        .setAllowed(new BooleanType().setValue(true)).setReason(substitutionReason));\n+\t\t\n+\t\tmedicationRequest.addDetectedIssue().setReference(\"DetectedIssue/allergy\");\n+\t\tmedicationRequest.addEventHistory().setReference(\"#signature\").setDisplay(\"Author's Signature\");\n+\t\t\n+\t\tassertThat(testHelper(new MedicationRequest()).getDivAsString(), notNullValue());\n+\t\tassertThat(testHelper(medicationRequest).getDivAsString(), notNullValue());\n+\t}\n+\t\n+\tpublic Narrative testHelper(IBaseResource iBaseResource) {\n+\t\tNarrative narrative = DefaultNarrativeGeneratorForTest.generateDefaultNarrative(iBaseResource);\n+\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Status:\" + narrative.getStatusAsString());", "originalCommit": "5c9811f768ed4333c77a9ba58d611754304ebb90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzNzQ1Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437137452", "bodyText": "Thanks for reviewing @suthagar23 :)\nActually I'd put this just for convenience in checking the output for now. It isn't intended to be a part of the final commit. Though I'll remove it from the code here and limit it to my local code.", "author": "ShivanshRakesh", "createdAt": "2020-06-09T04:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2OTY3NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437469674", "bodyText": "Rather than using a logger (which is a good idea if we were going to output anything) or... manually reading the output, use assertions to check that these are the expected values. That's why they exist.", "author": "ibacher", "createdAt": "2020-06-09T14:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "89ec41d4d0b0b2a9569bd91d9ee86aa3b19eb032", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java b/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java\ndeleted file mode 100644\nindex b7bd1b31..00000000\n--- a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java\n+++ /dev/null\n\n@@ -1,230 +0,0 @@\n-/*\n- * This Source Code Form is subject to the terms of the Mozilla Public License,\n- * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n- * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n- * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n- *\n- * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n- * graphic logo is a trademark of OpenMRS Inc.\n- */\n-package org.openmrs.module.fhir2.narrative;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.notNullValue;\n-\n-import java.util.Date;\n-\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.r4.model.AllergyIntolerance;\n-import org.hl7.fhir.r4.model.Base64BinaryType;\n-import org.hl7.fhir.r4.model.BooleanType;\n-import org.hl7.fhir.r4.model.CodeableConcept;\n-import org.hl7.fhir.r4.model.Dosage;\n-import org.hl7.fhir.r4.model.Duration;\n-import org.hl7.fhir.r4.model.Identifier;\n-import org.hl7.fhir.r4.model.Medication;\n-import org.hl7.fhir.r4.model.MedicationRequest;\n-import org.hl7.fhir.r4.model.Narrative;\n-import org.hl7.fhir.r4.model.Period;\n-import org.hl7.fhir.r4.model.Provenance;\n-import org.hl7.fhir.r4.model.Quantity;\n-import org.hl7.fhir.r4.model.Range;\n-import org.hl7.fhir.r4.model.Reference;\n-import org.hl7.fhir.r4.model.Signature;\n-import org.hl7.fhir.r4.model.StringType;\n-import org.hl7.fhir.r4.model.Timing;\n-import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceClinical;\n-import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceVerification;\n-import org.junit.Test;\n-\n-public class DefaultNarrativeTemplateTest {\n-\t\n-\t@Test\n-\tpublic void testForAllergyIntolerance() {\n-\t\t// Example: https://www.hl7.org/fhir/allergyintolerance-example.html\n-\t\t\n-\t\tAllergyIntolerance allergyIntolerance = new AllergyIntolerance();\n-\t\t\n-\t\tallergyIntolerance.setId(\"example\");\n-\t\tallergyIntolerance.addIdentifier().setValue(\"12345678\");\n-\t\t\n-\t\tCodeableConcept clinicalStatus = new CodeableConcept();\n-\t\tclinicalStatus.addCoding().setCode(AllergyintoleranceClinical.ACTIVE.toCode())\n-\t\t        .setDisplay(AllergyintoleranceClinical.ACTIVE.getDisplay());\n-\t\tallergyIntolerance.setClinicalStatus(clinicalStatus);\n-\t\t\n-\t\tCodeableConcept verificationStatus = new CodeableConcept();\n-\t\tverificationStatus.addCoding().setCode(AllergyintoleranceVerification.CONFIRMED.toCode())\n-\t\t        .setDisplay(AllergyintoleranceVerification.CONFIRMED.getDisplay());\n-\t\tallergyIntolerance.setVerificationStatus(verificationStatus);\n-\t\t\n-\t\tallergyIntolerance.setType(AllergyIntolerance.AllergyIntoleranceType.fromCode(\"allergy\"));\n-\t\tallergyIntolerance.addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"food\"));\n-\t\tallergyIntolerance\n-\t\t        .addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"medication\"));\n-\t\tallergyIntolerance.setCriticality(AllergyIntolerance.AllergyIntoleranceCriticality.fromCode(\"high\"));\n-\t\t\n-\t\tCodeableConcept code = new CodeableConcept();\n-\t\tcode.addCoding().setCode(\"227493005\").setDisplay(\"Cashew Nuts\");\n-\t\tallergyIntolerance.setCode(code);\n-\t\tallergyIntolerance.setPatient(new Reference().setReference(\"Patient/10010\").setDisplay(\"PatientNAME\"));\n-\t\tallergyIntolerance.setOnset(new StringType().setValue(\"01/01/2004\"));\n-\t\tallergyIntolerance.setRecordedDate(new Date());\n-\t\tallergyIntolerance.setRecorder(new Reference().setReference(\"Practitioner/10011\"));\n-\t\tallergyIntolerance.setAsserter(new Reference().setReference(\"Patient/10211\").setDisplay(\"AsserterNAME\"));\n-\t\tallergyIntolerance.setLastOccurrence(new Date());\n-\t\tallergyIntolerance.addNote().setText(\n-\t\t    \"The criticality is high becasue of the observed anaphylactic reaction when challenged with cashew extract.\");\n-\t\t\n-\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n-\t\tCodeableConcept substance = new CodeableConcept();\n-\t\tsubstance.addCoding().setCode(\"1160593\").setDisplay(\"cashew nut allergenic extract Injectale Product\");\n-\t\tallergyIntoleranceReactionComponent.setSubstance(substance);\n-\t\tallergyIntoleranceReactionComponent.addManifestation().addCoding().setCode(\"39579001\")\n-\t\t        .setDisplay(\"Anaphylactic reaction\");\n-\t\tallergyIntoleranceReactionComponent.setDescription(\n-\t\t    \"Challenge Protocol. Severe reaction to subcutaneous cashew extract. Epinephrine administered\");\n-\t\tallergyIntoleranceReactionComponent.setOnset(new Date());\n-\t\tallergyIntoleranceReactionComponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"severe\"));\n-\t\tCodeableConcept exposureRoute = new CodeableConcept();\n-\t\texposureRoute.addCoding().setCode(\"34206005\").setDisplay(\"Subcutaneous route\");\n-\t\tallergyIntoleranceReactionComponent.setExposureRoute(exposureRoute);\n-\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent);\n-\t\t\n-\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent1 = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n-\t\tallergyIntoleranceReactionComponent1.addManifestation().addCoding().setCode(\"64305001\").setDisplay(\"Urticaria\");\n-\t\tallergyIntoleranceReactionComponent1.setOnset(new Date());\n-\t\tallergyIntoleranceReactionComponent1.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"moderate\"));\n-\t\tallergyIntoleranceReactionComponent1.addNote()\n-\t\t        .setText(\"The patient reports that the onset of urticaria was within 15 minutes of eating cashews.\");\n-\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent1);\n-\t\t\n-\t\tassertThat(testHelper(new AllergyIntolerance()).getDivAsString(), notNullValue());\n-\t\tassertThat(testHelper(allergyIntolerance).getDivAsString(), notNullValue());\n-\t}\n-\t\n-\t@Test\n-\tpublic void testForMedicationRequest() {\n-\t\t// https://www.hl7.org/fhir/medicationrequest0301.html\n-\t\t\n-\t\tMedicationRequest medicationRequest = new MedicationRequest();\n-\t\t\n-\t\tmedicationRequest.setId(\"medrx301\");\n-\t\t\n-\t\tCodeableConcept medicationCode = new CodeableConcept();\n-\t\tmedicationCode.addCoding().setSystem(\"http://snomed.info/sct\").setDisplay(\"Oral Form Oxycodone (product)\")\n-\t\t        .setCode(\"430127000\");\n-\t\tmedicationRequest.addContained(new Medication().setCode(medicationCode).setId(\"med0310\"));\n-\t\tProvenance provenance = new Provenance();\n-\t\tprovenance.addTarget().setReference(\"ServiceRequest/physiotherapy\");\n-\t\tprovenance.setRecorded(new Date());\n-\t\tProvenance.ProvenanceAgentComponent provenanceAgentComponent = new Provenance.ProvenanceAgentComponent();\n-\t\tprovenanceAgentComponent.addRole().addCoding().setCode(\"AUT\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ParticipationType\");\n-\t\tprovenanceAgentComponent.setWho(new Reference().setDisplay(\"Dr Adam Careful\").setReference(\"Practitioner/example\"));\n-\t\tprovenance.addAgent(provenanceAgentComponent);\n-\t\tSignature signature = new Signature();\n-\t\tsignature.addType().setSystem(\"urn:iso-astm:E1762-95:2013\").setCode(\"1.2.840.10065.1.12.1.1\")\n-\t\t        .setDisplay(\"Author's Signature\");\n-\t\tsignature.setWhen(new Date());\n-\t\tsignature.setWho(new Reference().setReference(\"Practitioner/example\").setDisplay(\"Dr Adam Careful\"));\n-\t\tsignature.setTargetFormat(\"application/fhir+xml\");\n-\t\tsignature.setSigFormat(\"application/signature+xml\");\n-\t\tsignature.setDataElement(new Base64BinaryType(\"dGhpcyBibG9iIGlzIHNuaXBwZWQ=\"));\n-\t\tprovenance.addSignature(signature);\n-\t\tmedicationRequest.addContained(provenance);\n-\t\t\n-\t\tmedicationRequest.addIdentifier().setUse(Identifier.IdentifierUse.OFFICIAL)\n-\t\t        .setSystem(\"http://www.bmc.nl/portal/prescriptions\").setValue(\"12345689\");\n-\t\tmedicationRequest.setStatus(MedicationRequest.MedicationRequestStatus.COMPLETED);\n-\t\t\n-\t\tCodeableConcept statusReason = new CodeableConcept();\n-\t\tstatusReason.addCoding().setDisplay(\"Try another treatment first\").setCode(\"altchoice\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-status-reason\");\n-\t\tmedicationRequest.setStatusReason(statusReason);\n-\t\tmedicationRequest.setIntent(MedicationRequest.MedicationRequestIntent.ORDER);\n-\t\tmedicationRequest.addCategory().addCoding()\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-category\").setCode(\"inpatient\")\n-\t\t        .setDisplay(\"Inpatient\");\n-\t\t\n-\t\tmedicationRequest.setMedication(new Reference().setReference(\"#med0310\"));\n-\t\tmedicationRequest.setSubject(new Reference().setReference(\"Patient/pat1\").setDisplay(\"Donald Duck\"));\n-\t\tmedicationRequest.setEncounter(\n-\t\t    new Reference().setDisplay(\"encounter who leads to this prescription\").setReference(\"Encounter/f201\"));\n-\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n-\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n-\t\tmedicationRequest.setAuthoredOn(new Date());\n-\t\tmedicationRequest.setRequester(new Reference().setReference(\"Practitioner/f007\").setDisplay(\"Patrick Pump\"));\n-\t\tmedicationRequest.setPerformer(new Reference().setReference(\"Practitioner/f204\").setDisplay(\"Carla Espinosa\"));\n-\t\tCodeableConcept performerType = new CodeableConcept();\n-\t\tperformerType.addCoding().setDisplay(\"Public Health Nurse\").setCode(\"26369006\").setSystem(\"http://snomed.info/sct\");\n-\t\tmedicationRequest.setPerformerType(performerType);\n-\t\tmedicationRequest.addReasonCode().addCoding().setSystem(\"http://snomed.info/sct\").setCode(\"297217002\")\n-\t\t        .setDisplay(\"Rib Pain (finding)\");\n-\t\tmedicationRequest.addInsurance().setReference(\"Coverage/9876B1\");\n-\t\tmedicationRequest.addNote().setText(\"Patient told to take with food\");\n-\t\t\n-\t\tTiming timing = new Timing();\n-\t\ttiming.setRepeat(new Timing.TimingRepeatComponent().setFrequency(1).setPeriod(4).setPeriodMax(6)\n-\t\t        .setPeriodUnit(Timing.UnitsOfTime.H));\n-\t\tDosage dosage = new Dosage();\n-\t\tdosage.setSequence(1).setText(\"one to two tablets every 4-6 hours as needed for rib pain\")\n-\t\t        .setPatientInstruction(\"Take one to two tablets every four to six hours as needed for rib pain\")\n-\t\t        .setTiming(timing);\n-\t\tdosage.addAdditionalInstruction().addCoding().setDisplay(\n-\t\t    \"Warning. May cause drowsiness. If affected do not drive or operate machinery. Avoid alcoholic drink (qualifier value)\")\n-\t\t        .setCode(\"418914006\").setSystem(\"http://snomed.info/sct\");\n-\t\tCodeableConcept asNeeded = new CodeableConcept();\n-\t\tasNeeded.addCoding().setCode(\"297217002\").setSystem(\"http://snomed.info/sct\").setDisplay(\"Rib Pain (finding)\");\n-\t\tdosage.setAsNeeded(asNeeded);\n-\t\tCodeableConcept route = new CodeableConcept();\n-\t\troute.addCoding().setDisplay(\"Oral Route\").setSystem(\"http://snomed.info/sct\").setCode(\"26643006\");\n-\t\tdosage.setRoute(route);\n-\t\tCodeableConcept method = new CodeableConcept();\n-\t\tmethod.addCoding().setDisplay(\"Swallow - dosing instruction imperative (qualifier value)\")\n-\t\t        .setSystem(\"http://snomed.info/sct\").setCode(\"421521009\");\n-\t\tdosage.setMethod(method);\n-\t\t\n-\t\tCodeableConcept doseandrateType = new CodeableConcept();\n-\t\tdoseandrateType.addCoding().setCode(\"ordered\").setDisplay(\"Ordered\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/dose-rate-type\");\n-\t\tRange doseRange = new Range();\n-\t\tdoseRange.setLow(new Quantity().setValue(1).setUnit(\"TAB\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n-\t\tdoseRange.setHigh(new Quantity().setValue(2).setUnit(\"TAB\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n-\t\tdosage.addDoseAndRate().setDose(doseRange).setType(doseandrateType);\n-\t\t\n-\t\tmedicationRequest.addDosageInstruction(dosage);\n-\t\t\n-\t\tDuration duration = new Duration();\n-\t\tduration.setValue(10).setUnit(\"days\").setSystem(\"http://unitsofmeasure.org\").setCode(\"d\");\n-\t\tmedicationRequest.setDispenseRequest(new MedicationRequest.MedicationRequestDispenseRequestComponent()\n-\t\t        .setValidityPeriod(new Period().setStart(new Date()).setEnd(new Date())).setNumberOfRepeatsAllowed(0)\n-\t\t        .setQuantity(new Quantity().setValue(30).setUnit(\"TAB\")\n-\t\t                .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"))\n-\t\t        .setExpectedSupplyDuration(duration).setPerformer(new Reference().setReference(\"Practitioner/f001\"))\n-\t\t        .setInitialFill(new MedicationRequest.MedicationRequestDispenseRequestInitialFillComponent()\n-\t\t                .setQuantity(new Quantity().setValue(123).setSystem(\"something\")).setDuration(duration)));\n-\t\t\n-\t\tCodeableConcept substitutionReason = new CodeableConcept();\n-\t\tsubstitutionReason.addCoding().setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ActReason\").setCode(\"FP\")\n-\t\t        .setDisplay(\"formulary policy\");\n-\t\tmedicationRequest.setSubstitution(new MedicationRequest.MedicationRequestSubstitutionComponent()\n-\t\t        .setAllowed(new BooleanType().setValue(true)).setReason(substitutionReason));\n-\t\t\n-\t\tmedicationRequest.addDetectedIssue().setReference(\"DetectedIssue/allergy\");\n-\t\tmedicationRequest.addEventHistory().setReference(\"#signature\").setDisplay(\"Author's Signature\");\n-\t\t\n-\t\tassertThat(testHelper(new MedicationRequest()).getDivAsString(), notNullValue());\n-\t\tassertThat(testHelper(medicationRequest).getDivAsString(), notNullValue());\n-\t}\n-\t\n-\tpublic Narrative testHelper(IBaseResource iBaseResource) {\n-\t\tNarrative narrative = DefaultNarrativeGeneratorForTest.generateDefaultNarrative(iBaseResource);\n-\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Status:\" + narrative.getStatusAsString());\n-\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Div:\" + narrative.getDivAsString());\n-\t\tSystem.out.println(\"----------------------------\");\n-\t\treturn narrative;\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIzNjAwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437236005", "bodyText": "@ibacher what do you think of @ShivanshRakesh   arranging his data into data sets ?", "author": "HerbertYiga", "createdAt": "2020-06-09T08:40:41Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.util.Date;\n+\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.Base64BinaryType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Dosage;\n+import org.hl7.fhir.r4.model.Duration;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Medication;\n+import org.hl7.fhir.r4.model.MedicationRequest;\n+import org.hl7.fhir.r4.model.Narrative;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Provenance;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Range;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.Signature;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.Timing;\n+import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceClinical;\n+import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceVerification;\n+import org.junit.Test;\n+\n+public class DefaultNarrativeTemplateTest {\n+\t\n+\t@Test\n+\tpublic void testForAllergyIntolerance() {\n+\t\t// Example: https://www.hl7.org/fhir/allergyintolerance-example.html\n+\t\t\n+\t\tAllergyIntolerance allergyIntolerance = new AllergyIntolerance();\n+\t\t\n+\t\tallergyIntolerance.setId(\"example\");\n+\t\tallergyIntolerance.addIdentifier().setValue(\"12345678\");\n+\t\t\n+\t\tCodeableConcept clinicalStatus = new CodeableConcept();\n+\t\tclinicalStatus.addCoding().setCode(AllergyintoleranceClinical.ACTIVE.toCode())\n+\t\t        .setDisplay(AllergyintoleranceClinical.ACTIVE.getDisplay());\n+\t\tallergyIntolerance.setClinicalStatus(clinicalStatus);\n+\t\t\n+\t\tCodeableConcept verificationStatus = new CodeableConcept();\n+\t\tverificationStatus.addCoding().setCode(AllergyintoleranceVerification.CONFIRMED.toCode())\n+\t\t        .setDisplay(AllergyintoleranceVerification.CONFIRMED.getDisplay());\n+\t\tallergyIntolerance.setVerificationStatus(verificationStatus);\n+\t\t\n+\t\tallergyIntolerance.setType(AllergyIntolerance.AllergyIntoleranceType.fromCode(\"allergy\"));\n+\t\tallergyIntolerance.addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"food\"));\n+\t\tallergyIntolerance\n+\t\t        .addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"medication\"));\n+\t\tallergyIntolerance.setCriticality(AllergyIntolerance.AllergyIntoleranceCriticality.fromCode(\"high\"));\n+\t\t\n+\t\tCodeableConcept code = new CodeableConcept();\n+\t\tcode.addCoding().setCode(\"227493005\").setDisplay(\"Cashew Nuts\");\n+\t\tallergyIntolerance.setCode(code);\n+\t\tallergyIntolerance.setPatient(new Reference().setReference(\"Patient/10010\").setDisplay(\"PatientNAME\"));\n+\t\tallergyIntolerance.setOnset(new StringType().setValue(\"01/01/2004\"));\n+\t\tallergyIntolerance.setRecordedDate(new Date());\n+\t\tallergyIntolerance.setRecorder(new Reference().setReference(\"Practitioner/10011\"));\n+\t\tallergyIntolerance.setAsserter(new Reference().setReference(\"Patient/10211\").setDisplay(\"AsserterNAME\"));\n+\t\tallergyIntolerance.setLastOccurrence(new Date());\n+\t\tallergyIntolerance.addNote().setText(\n+\t\t    \"The criticality is high becasue of the observed anaphylactic reaction when challenged with cashew extract.\");\n+\t\t\n+\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n+\t\tCodeableConcept substance = new CodeableConcept();\n+\t\tsubstance.addCoding().setCode(\"1160593\").setDisplay(\"cashew nut allergenic extract Injectale Product\");\n+\t\tallergyIntoleranceReactionComponent.setSubstance(substance);\n+\t\tallergyIntoleranceReactionComponent.addManifestation().addCoding().setCode(\"39579001\")\n+\t\t        .setDisplay(\"Anaphylactic reaction\");\n+\t\tallergyIntoleranceReactionComponent.setDescription(\n+\t\t    \"Challenge Protocol. Severe reaction to subcutaneous cashew extract. Epinephrine administered\");\n+\t\tallergyIntoleranceReactionComponent.setOnset(new Date());\n+\t\tallergyIntoleranceReactionComponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"severe\"));\n+\t\tCodeableConcept exposureRoute = new CodeableConcept();\n+\t\texposureRoute.addCoding().setCode(\"34206005\").setDisplay(\"Subcutaneous route\");\n+\t\tallergyIntoleranceReactionComponent.setExposureRoute(exposureRoute);\n+\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent);\n+\t\t\n+\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent1 = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n+\t\tallergyIntoleranceReactionComponent1.addManifestation().addCoding().setCode(\"64305001\").setDisplay(\"Urticaria\");\n+\t\tallergyIntoleranceReactionComponent1.setOnset(new Date());\n+\t\tallergyIntoleranceReactionComponent1.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"moderate\"));\n+\t\tallergyIntoleranceReactionComponent1.addNote()\n+\t\t        .setText(\"The patient reports that the onset of urticaria was within 15 minutes of eating cashews.\");\n+\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent1);\n+\t\t\n+\t\tassertThat(testHelper(new AllergyIntolerance()).getDivAsString(), notNullValue());\n+\t\tassertThat(testHelper(allergyIntolerance).getDivAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testForMedicationRequest() {\n+\t\t// https://www.hl7.org/fhir/medicationrequest0301.html\n+\t\t\n+\t\tMedicationRequest medicationRequest = new MedicationRequest();\n+\t\t\n+\t\tmedicationRequest.setId(\"medrx301\");\n+\t\t\n+\t\tCodeableConcept medicationCode = new CodeableConcept();\n+\t\tmedicationCode.addCoding().setSystem(\"http://snomed.info/sct\").setDisplay(\"Oral Form Oxycodone (product)\")\n+\t\t        .setCode(\"430127000\");\n+\t\tmedicationRequest.addContained(new Medication().setCode(medicationCode).setId(\"med0310\"));\n+\t\tProvenance provenance = new Provenance();\n+\t\tprovenance.addTarget().setReference(\"ServiceRequest/physiotherapy\");\n+\t\tprovenance.setRecorded(new Date());\n+\t\tProvenance.ProvenanceAgentComponent provenanceAgentComponent = new Provenance.ProvenanceAgentComponent();\n+\t\tprovenanceAgentComponent.addRole().addCoding().setCode(\"AUT\")\n+\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ParticipationType\");\n+\t\tprovenanceAgentComponent.setWho(new Reference().setDisplay(\"Dr Adam Careful\").setReference(\"Practitioner/example\"));\n+\t\tprovenance.addAgent(provenanceAgentComponent);\n+\t\tSignature signature = new Signature();\n+\t\tsignature.addType().setSystem(\"urn:iso-astm:E1762-95:2013\").setCode(\"1.2.840.10065.1.12.1.1\")\n+\t\t        .setDisplay(\"Author's Signature\");\n+\t\tsignature.setWhen(new Date());\n+\t\tsignature.setWho(new Reference().setReference(\"Practitioner/example\").setDisplay(\"Dr Adam Careful\"));\n+\t\tsignature.setTargetFormat(\"application/fhir+xml\");\n+\t\tsignature.setSigFormat(\"application/signature+xml\");\n+\t\tsignature.setDataElement(new Base64BinaryType(\"dGhpcyBibG9iIGlzIHNuaXBwZWQ=\"));\n+\t\tprovenance.addSignature(signature);\n+\t\tmedicationRequest.addContained(provenance);\n+\t\t\n+\t\tmedicationRequest.addIdentifier().setUse(Identifier.IdentifierUse.OFFICIAL)\n+\t\t        .setSystem(\"http://www.bmc.nl/portal/prescriptions\").setValue(\"12345689\");\n+\t\tmedicationRequest.setStatus(MedicationRequest.MedicationRequestStatus.COMPLETED);\n+\t\t\n+\t\tCodeableConcept statusReason = new CodeableConcept();\n+\t\tstatusReason.addCoding().setDisplay(\"Try another treatment first\").setCode(\"altchoice\")", "originalCommit": "5c9811f768ed4333c77a9ba58d611754304ebb90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MzY1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437473655", "bodyText": "@HerbertYiga If by this you mean \"should this data be stored in a file and loaded from there\" my answer would be yes. This should be a different mechanism from loading data into the database, if only because there are a number of layers between the raw data in the database and the narrative that we don't need to worry about here.", "author": "ibacher", "createdAt": "2020-06-09T14:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIzNjAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "89ec41d4d0b0b2a9569bd91d9ee86aa3b19eb032", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java b/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java\ndeleted file mode 100644\nindex b7bd1b31..00000000\n--- a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java\n+++ /dev/null\n\n@@ -1,230 +0,0 @@\n-/*\n- * This Source Code Form is subject to the terms of the Mozilla Public License,\n- * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n- * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n- * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n- *\n- * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n- * graphic logo is a trademark of OpenMRS Inc.\n- */\n-package org.openmrs.module.fhir2.narrative;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.notNullValue;\n-\n-import java.util.Date;\n-\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.r4.model.AllergyIntolerance;\n-import org.hl7.fhir.r4.model.Base64BinaryType;\n-import org.hl7.fhir.r4.model.BooleanType;\n-import org.hl7.fhir.r4.model.CodeableConcept;\n-import org.hl7.fhir.r4.model.Dosage;\n-import org.hl7.fhir.r4.model.Duration;\n-import org.hl7.fhir.r4.model.Identifier;\n-import org.hl7.fhir.r4.model.Medication;\n-import org.hl7.fhir.r4.model.MedicationRequest;\n-import org.hl7.fhir.r4.model.Narrative;\n-import org.hl7.fhir.r4.model.Period;\n-import org.hl7.fhir.r4.model.Provenance;\n-import org.hl7.fhir.r4.model.Quantity;\n-import org.hl7.fhir.r4.model.Range;\n-import org.hl7.fhir.r4.model.Reference;\n-import org.hl7.fhir.r4.model.Signature;\n-import org.hl7.fhir.r4.model.StringType;\n-import org.hl7.fhir.r4.model.Timing;\n-import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceClinical;\n-import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceVerification;\n-import org.junit.Test;\n-\n-public class DefaultNarrativeTemplateTest {\n-\t\n-\t@Test\n-\tpublic void testForAllergyIntolerance() {\n-\t\t// Example: https://www.hl7.org/fhir/allergyintolerance-example.html\n-\t\t\n-\t\tAllergyIntolerance allergyIntolerance = new AllergyIntolerance();\n-\t\t\n-\t\tallergyIntolerance.setId(\"example\");\n-\t\tallergyIntolerance.addIdentifier().setValue(\"12345678\");\n-\t\t\n-\t\tCodeableConcept clinicalStatus = new CodeableConcept();\n-\t\tclinicalStatus.addCoding().setCode(AllergyintoleranceClinical.ACTIVE.toCode())\n-\t\t        .setDisplay(AllergyintoleranceClinical.ACTIVE.getDisplay());\n-\t\tallergyIntolerance.setClinicalStatus(clinicalStatus);\n-\t\t\n-\t\tCodeableConcept verificationStatus = new CodeableConcept();\n-\t\tverificationStatus.addCoding().setCode(AllergyintoleranceVerification.CONFIRMED.toCode())\n-\t\t        .setDisplay(AllergyintoleranceVerification.CONFIRMED.getDisplay());\n-\t\tallergyIntolerance.setVerificationStatus(verificationStatus);\n-\t\t\n-\t\tallergyIntolerance.setType(AllergyIntolerance.AllergyIntoleranceType.fromCode(\"allergy\"));\n-\t\tallergyIntolerance.addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"food\"));\n-\t\tallergyIntolerance\n-\t\t        .addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"medication\"));\n-\t\tallergyIntolerance.setCriticality(AllergyIntolerance.AllergyIntoleranceCriticality.fromCode(\"high\"));\n-\t\t\n-\t\tCodeableConcept code = new CodeableConcept();\n-\t\tcode.addCoding().setCode(\"227493005\").setDisplay(\"Cashew Nuts\");\n-\t\tallergyIntolerance.setCode(code);\n-\t\tallergyIntolerance.setPatient(new Reference().setReference(\"Patient/10010\").setDisplay(\"PatientNAME\"));\n-\t\tallergyIntolerance.setOnset(new StringType().setValue(\"01/01/2004\"));\n-\t\tallergyIntolerance.setRecordedDate(new Date());\n-\t\tallergyIntolerance.setRecorder(new Reference().setReference(\"Practitioner/10011\"));\n-\t\tallergyIntolerance.setAsserter(new Reference().setReference(\"Patient/10211\").setDisplay(\"AsserterNAME\"));\n-\t\tallergyIntolerance.setLastOccurrence(new Date());\n-\t\tallergyIntolerance.addNote().setText(\n-\t\t    \"The criticality is high becasue of the observed anaphylactic reaction when challenged with cashew extract.\");\n-\t\t\n-\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n-\t\tCodeableConcept substance = new CodeableConcept();\n-\t\tsubstance.addCoding().setCode(\"1160593\").setDisplay(\"cashew nut allergenic extract Injectale Product\");\n-\t\tallergyIntoleranceReactionComponent.setSubstance(substance);\n-\t\tallergyIntoleranceReactionComponent.addManifestation().addCoding().setCode(\"39579001\")\n-\t\t        .setDisplay(\"Anaphylactic reaction\");\n-\t\tallergyIntoleranceReactionComponent.setDescription(\n-\t\t    \"Challenge Protocol. Severe reaction to subcutaneous cashew extract. Epinephrine administered\");\n-\t\tallergyIntoleranceReactionComponent.setOnset(new Date());\n-\t\tallergyIntoleranceReactionComponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"severe\"));\n-\t\tCodeableConcept exposureRoute = new CodeableConcept();\n-\t\texposureRoute.addCoding().setCode(\"34206005\").setDisplay(\"Subcutaneous route\");\n-\t\tallergyIntoleranceReactionComponent.setExposureRoute(exposureRoute);\n-\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent);\n-\t\t\n-\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent1 = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n-\t\tallergyIntoleranceReactionComponent1.addManifestation().addCoding().setCode(\"64305001\").setDisplay(\"Urticaria\");\n-\t\tallergyIntoleranceReactionComponent1.setOnset(new Date());\n-\t\tallergyIntoleranceReactionComponent1.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"moderate\"));\n-\t\tallergyIntoleranceReactionComponent1.addNote()\n-\t\t        .setText(\"The patient reports that the onset of urticaria was within 15 minutes of eating cashews.\");\n-\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent1);\n-\t\t\n-\t\tassertThat(testHelper(new AllergyIntolerance()).getDivAsString(), notNullValue());\n-\t\tassertThat(testHelper(allergyIntolerance).getDivAsString(), notNullValue());\n-\t}\n-\t\n-\t@Test\n-\tpublic void testForMedicationRequest() {\n-\t\t// https://www.hl7.org/fhir/medicationrequest0301.html\n-\t\t\n-\t\tMedicationRequest medicationRequest = new MedicationRequest();\n-\t\t\n-\t\tmedicationRequest.setId(\"medrx301\");\n-\t\t\n-\t\tCodeableConcept medicationCode = new CodeableConcept();\n-\t\tmedicationCode.addCoding().setSystem(\"http://snomed.info/sct\").setDisplay(\"Oral Form Oxycodone (product)\")\n-\t\t        .setCode(\"430127000\");\n-\t\tmedicationRequest.addContained(new Medication().setCode(medicationCode).setId(\"med0310\"));\n-\t\tProvenance provenance = new Provenance();\n-\t\tprovenance.addTarget().setReference(\"ServiceRequest/physiotherapy\");\n-\t\tprovenance.setRecorded(new Date());\n-\t\tProvenance.ProvenanceAgentComponent provenanceAgentComponent = new Provenance.ProvenanceAgentComponent();\n-\t\tprovenanceAgentComponent.addRole().addCoding().setCode(\"AUT\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ParticipationType\");\n-\t\tprovenanceAgentComponent.setWho(new Reference().setDisplay(\"Dr Adam Careful\").setReference(\"Practitioner/example\"));\n-\t\tprovenance.addAgent(provenanceAgentComponent);\n-\t\tSignature signature = new Signature();\n-\t\tsignature.addType().setSystem(\"urn:iso-astm:E1762-95:2013\").setCode(\"1.2.840.10065.1.12.1.1\")\n-\t\t        .setDisplay(\"Author's Signature\");\n-\t\tsignature.setWhen(new Date());\n-\t\tsignature.setWho(new Reference().setReference(\"Practitioner/example\").setDisplay(\"Dr Adam Careful\"));\n-\t\tsignature.setTargetFormat(\"application/fhir+xml\");\n-\t\tsignature.setSigFormat(\"application/signature+xml\");\n-\t\tsignature.setDataElement(new Base64BinaryType(\"dGhpcyBibG9iIGlzIHNuaXBwZWQ=\"));\n-\t\tprovenance.addSignature(signature);\n-\t\tmedicationRequest.addContained(provenance);\n-\t\t\n-\t\tmedicationRequest.addIdentifier().setUse(Identifier.IdentifierUse.OFFICIAL)\n-\t\t        .setSystem(\"http://www.bmc.nl/portal/prescriptions\").setValue(\"12345689\");\n-\t\tmedicationRequest.setStatus(MedicationRequest.MedicationRequestStatus.COMPLETED);\n-\t\t\n-\t\tCodeableConcept statusReason = new CodeableConcept();\n-\t\tstatusReason.addCoding().setDisplay(\"Try another treatment first\").setCode(\"altchoice\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-status-reason\");\n-\t\tmedicationRequest.setStatusReason(statusReason);\n-\t\tmedicationRequest.setIntent(MedicationRequest.MedicationRequestIntent.ORDER);\n-\t\tmedicationRequest.addCategory().addCoding()\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-category\").setCode(\"inpatient\")\n-\t\t        .setDisplay(\"Inpatient\");\n-\t\t\n-\t\tmedicationRequest.setMedication(new Reference().setReference(\"#med0310\"));\n-\t\tmedicationRequest.setSubject(new Reference().setReference(\"Patient/pat1\").setDisplay(\"Donald Duck\"));\n-\t\tmedicationRequest.setEncounter(\n-\t\t    new Reference().setDisplay(\"encounter who leads to this prescription\").setReference(\"Encounter/f201\"));\n-\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n-\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n-\t\tmedicationRequest.setAuthoredOn(new Date());\n-\t\tmedicationRequest.setRequester(new Reference().setReference(\"Practitioner/f007\").setDisplay(\"Patrick Pump\"));\n-\t\tmedicationRequest.setPerformer(new Reference().setReference(\"Practitioner/f204\").setDisplay(\"Carla Espinosa\"));\n-\t\tCodeableConcept performerType = new CodeableConcept();\n-\t\tperformerType.addCoding().setDisplay(\"Public Health Nurse\").setCode(\"26369006\").setSystem(\"http://snomed.info/sct\");\n-\t\tmedicationRequest.setPerformerType(performerType);\n-\t\tmedicationRequest.addReasonCode().addCoding().setSystem(\"http://snomed.info/sct\").setCode(\"297217002\")\n-\t\t        .setDisplay(\"Rib Pain (finding)\");\n-\t\tmedicationRequest.addInsurance().setReference(\"Coverage/9876B1\");\n-\t\tmedicationRequest.addNote().setText(\"Patient told to take with food\");\n-\t\t\n-\t\tTiming timing = new Timing();\n-\t\ttiming.setRepeat(new Timing.TimingRepeatComponent().setFrequency(1).setPeriod(4).setPeriodMax(6)\n-\t\t        .setPeriodUnit(Timing.UnitsOfTime.H));\n-\t\tDosage dosage = new Dosage();\n-\t\tdosage.setSequence(1).setText(\"one to two tablets every 4-6 hours as needed for rib pain\")\n-\t\t        .setPatientInstruction(\"Take one to two tablets every four to six hours as needed for rib pain\")\n-\t\t        .setTiming(timing);\n-\t\tdosage.addAdditionalInstruction().addCoding().setDisplay(\n-\t\t    \"Warning. May cause drowsiness. If affected do not drive or operate machinery. Avoid alcoholic drink (qualifier value)\")\n-\t\t        .setCode(\"418914006\").setSystem(\"http://snomed.info/sct\");\n-\t\tCodeableConcept asNeeded = new CodeableConcept();\n-\t\tasNeeded.addCoding().setCode(\"297217002\").setSystem(\"http://snomed.info/sct\").setDisplay(\"Rib Pain (finding)\");\n-\t\tdosage.setAsNeeded(asNeeded);\n-\t\tCodeableConcept route = new CodeableConcept();\n-\t\troute.addCoding().setDisplay(\"Oral Route\").setSystem(\"http://snomed.info/sct\").setCode(\"26643006\");\n-\t\tdosage.setRoute(route);\n-\t\tCodeableConcept method = new CodeableConcept();\n-\t\tmethod.addCoding().setDisplay(\"Swallow - dosing instruction imperative (qualifier value)\")\n-\t\t        .setSystem(\"http://snomed.info/sct\").setCode(\"421521009\");\n-\t\tdosage.setMethod(method);\n-\t\t\n-\t\tCodeableConcept doseandrateType = new CodeableConcept();\n-\t\tdoseandrateType.addCoding().setCode(\"ordered\").setDisplay(\"Ordered\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/dose-rate-type\");\n-\t\tRange doseRange = new Range();\n-\t\tdoseRange.setLow(new Quantity().setValue(1).setUnit(\"TAB\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n-\t\tdoseRange.setHigh(new Quantity().setValue(2).setUnit(\"TAB\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n-\t\tdosage.addDoseAndRate().setDose(doseRange).setType(doseandrateType);\n-\t\t\n-\t\tmedicationRequest.addDosageInstruction(dosage);\n-\t\t\n-\t\tDuration duration = new Duration();\n-\t\tduration.setValue(10).setUnit(\"days\").setSystem(\"http://unitsofmeasure.org\").setCode(\"d\");\n-\t\tmedicationRequest.setDispenseRequest(new MedicationRequest.MedicationRequestDispenseRequestComponent()\n-\t\t        .setValidityPeriod(new Period().setStart(new Date()).setEnd(new Date())).setNumberOfRepeatsAllowed(0)\n-\t\t        .setQuantity(new Quantity().setValue(30).setUnit(\"TAB\")\n-\t\t                .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"))\n-\t\t        .setExpectedSupplyDuration(duration).setPerformer(new Reference().setReference(\"Practitioner/f001\"))\n-\t\t        .setInitialFill(new MedicationRequest.MedicationRequestDispenseRequestInitialFillComponent()\n-\t\t                .setQuantity(new Quantity().setValue(123).setSystem(\"something\")).setDuration(duration)));\n-\t\t\n-\t\tCodeableConcept substitutionReason = new CodeableConcept();\n-\t\tsubstitutionReason.addCoding().setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ActReason\").setCode(\"FP\")\n-\t\t        .setDisplay(\"formulary policy\");\n-\t\tmedicationRequest.setSubstitution(new MedicationRequest.MedicationRequestSubstitutionComponent()\n-\t\t        .setAllowed(new BooleanType().setValue(true)).setReason(substitutionReason));\n-\t\t\n-\t\tmedicationRequest.addDetectedIssue().setReference(\"DetectedIssue/allergy\");\n-\t\tmedicationRequest.addEventHistory().setReference(\"#signature\").setDisplay(\"Author's Signature\");\n-\t\t\n-\t\tassertThat(testHelper(new MedicationRequest()).getDivAsString(), notNullValue());\n-\t\tassertThat(testHelper(medicationRequest).getDivAsString(), notNullValue());\n-\t}\n-\t\n-\tpublic Narrative testHelper(IBaseResource iBaseResource) {\n-\t\tNarrative narrative = DefaultNarrativeGeneratorForTest.generateDefaultNarrative(iBaseResource);\n-\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Status:\" + narrative.getStatusAsString());\n-\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Div:\" + narrative.getDivAsString());\n-\t\tSystem.out.println(\"----------------------------\");\n-\t\treturn narrative;\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTI0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437449244", "bodyText": "Always prefer the should style of naming tests over test to make it clear what the test is testing. For example, I would name this shouldGenerateAnAllergyIntoleranceNarrative.", "author": "ibacher", "createdAt": "2020-06-09T14:05:15Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.util.Date;\n+\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.Base64BinaryType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Dosage;\n+import org.hl7.fhir.r4.model.Duration;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Medication;\n+import org.hl7.fhir.r4.model.MedicationRequest;\n+import org.hl7.fhir.r4.model.Narrative;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Provenance;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Range;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.Signature;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.Timing;\n+import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceClinical;\n+import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceVerification;\n+import org.junit.Test;\n+\n+public class DefaultNarrativeTemplateTest {\n+\t\n+\t@Test\n+\tpublic void testForAllergyIntolerance() {", "originalCommit": "5c9811f768ed4333c77a9ba58d611754304ebb90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2NDc0Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437464743", "bodyText": "Rather than populating this resource completely in code like this, it seems like it would be simpler to download the file from here, remove the \"text\" section and save that in the test resources, then load it.\nFor example:\n// ensure ctx is a FhirContext with the correct NarrativeGenerator\nIParser parser = ctx.newJsonParser();\n\n// load initial data (this is our \"given\" for the test)\nAllergyIntolerance given = parser.parseResource(AllergyIntolerance.class, getClass().getClassLoader().getResourceAsStream(\"allergyintolerance-example.json\"));\n\nAllergyIntolerance result = parser.parseResource(AllergyIntolerance.class, parser.encodeResourceToString(allergyIntolerance));\n\n// now our assertions\nassertThat(result, notNullValue());\nassertThat(result.getText(), notNullValue());\nassertThat(result.getText().getStatusAsString(), equalTo(\"generated\"));\n// note that we should check the generated result against a reference of what we expect it to be\nassertThat(result.getText().getDivAsString(), equalTo(getClass().getClassLoader().getResourceAsStream(\"expected/allergyintolerance-example.html\"));", "author": "ibacher", "createdAt": "2020-06-09T14:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwNTE3OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437505178", "bodyText": "@ibacher Thanks a lot for this! I myself was looking for alternative ways.", "author": "ShivanshRakesh", "createdAt": "2020-06-09T15:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "89ec41d4d0b0b2a9569bd91d9ee86aa3b19eb032", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java b/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java\ndeleted file mode 100644\nindex b7bd1b31..00000000\n--- a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java\n+++ /dev/null\n\n@@ -1,230 +0,0 @@\n-/*\n- * This Source Code Form is subject to the terms of the Mozilla Public License,\n- * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n- * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n- * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n- *\n- * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n- * graphic logo is a trademark of OpenMRS Inc.\n- */\n-package org.openmrs.module.fhir2.narrative;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.notNullValue;\n-\n-import java.util.Date;\n-\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.r4.model.AllergyIntolerance;\n-import org.hl7.fhir.r4.model.Base64BinaryType;\n-import org.hl7.fhir.r4.model.BooleanType;\n-import org.hl7.fhir.r4.model.CodeableConcept;\n-import org.hl7.fhir.r4.model.Dosage;\n-import org.hl7.fhir.r4.model.Duration;\n-import org.hl7.fhir.r4.model.Identifier;\n-import org.hl7.fhir.r4.model.Medication;\n-import org.hl7.fhir.r4.model.MedicationRequest;\n-import org.hl7.fhir.r4.model.Narrative;\n-import org.hl7.fhir.r4.model.Period;\n-import org.hl7.fhir.r4.model.Provenance;\n-import org.hl7.fhir.r4.model.Quantity;\n-import org.hl7.fhir.r4.model.Range;\n-import org.hl7.fhir.r4.model.Reference;\n-import org.hl7.fhir.r4.model.Signature;\n-import org.hl7.fhir.r4.model.StringType;\n-import org.hl7.fhir.r4.model.Timing;\n-import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceClinical;\n-import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceVerification;\n-import org.junit.Test;\n-\n-public class DefaultNarrativeTemplateTest {\n-\t\n-\t@Test\n-\tpublic void testForAllergyIntolerance() {\n-\t\t// Example: https://www.hl7.org/fhir/allergyintolerance-example.html\n-\t\t\n-\t\tAllergyIntolerance allergyIntolerance = new AllergyIntolerance();\n-\t\t\n-\t\tallergyIntolerance.setId(\"example\");\n-\t\tallergyIntolerance.addIdentifier().setValue(\"12345678\");\n-\t\t\n-\t\tCodeableConcept clinicalStatus = new CodeableConcept();\n-\t\tclinicalStatus.addCoding().setCode(AllergyintoleranceClinical.ACTIVE.toCode())\n-\t\t        .setDisplay(AllergyintoleranceClinical.ACTIVE.getDisplay());\n-\t\tallergyIntolerance.setClinicalStatus(clinicalStatus);\n-\t\t\n-\t\tCodeableConcept verificationStatus = new CodeableConcept();\n-\t\tverificationStatus.addCoding().setCode(AllergyintoleranceVerification.CONFIRMED.toCode())\n-\t\t        .setDisplay(AllergyintoleranceVerification.CONFIRMED.getDisplay());\n-\t\tallergyIntolerance.setVerificationStatus(verificationStatus);\n-\t\t\n-\t\tallergyIntolerance.setType(AllergyIntolerance.AllergyIntoleranceType.fromCode(\"allergy\"));\n-\t\tallergyIntolerance.addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"food\"));\n-\t\tallergyIntolerance\n-\t\t        .addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"medication\"));\n-\t\tallergyIntolerance.setCriticality(AllergyIntolerance.AllergyIntoleranceCriticality.fromCode(\"high\"));\n-\t\t\n-\t\tCodeableConcept code = new CodeableConcept();\n-\t\tcode.addCoding().setCode(\"227493005\").setDisplay(\"Cashew Nuts\");\n-\t\tallergyIntolerance.setCode(code);\n-\t\tallergyIntolerance.setPatient(new Reference().setReference(\"Patient/10010\").setDisplay(\"PatientNAME\"));\n-\t\tallergyIntolerance.setOnset(new StringType().setValue(\"01/01/2004\"));\n-\t\tallergyIntolerance.setRecordedDate(new Date());\n-\t\tallergyIntolerance.setRecorder(new Reference().setReference(\"Practitioner/10011\"));\n-\t\tallergyIntolerance.setAsserter(new Reference().setReference(\"Patient/10211\").setDisplay(\"AsserterNAME\"));\n-\t\tallergyIntolerance.setLastOccurrence(new Date());\n-\t\tallergyIntolerance.addNote().setText(\n-\t\t    \"The criticality is high becasue of the observed anaphylactic reaction when challenged with cashew extract.\");\n-\t\t\n-\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n-\t\tCodeableConcept substance = new CodeableConcept();\n-\t\tsubstance.addCoding().setCode(\"1160593\").setDisplay(\"cashew nut allergenic extract Injectale Product\");\n-\t\tallergyIntoleranceReactionComponent.setSubstance(substance);\n-\t\tallergyIntoleranceReactionComponent.addManifestation().addCoding().setCode(\"39579001\")\n-\t\t        .setDisplay(\"Anaphylactic reaction\");\n-\t\tallergyIntoleranceReactionComponent.setDescription(\n-\t\t    \"Challenge Protocol. Severe reaction to subcutaneous cashew extract. Epinephrine administered\");\n-\t\tallergyIntoleranceReactionComponent.setOnset(new Date());\n-\t\tallergyIntoleranceReactionComponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"severe\"));\n-\t\tCodeableConcept exposureRoute = new CodeableConcept();\n-\t\texposureRoute.addCoding().setCode(\"34206005\").setDisplay(\"Subcutaneous route\");\n-\t\tallergyIntoleranceReactionComponent.setExposureRoute(exposureRoute);\n-\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent);\n-\t\t\n-\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent1 = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n-\t\tallergyIntoleranceReactionComponent1.addManifestation().addCoding().setCode(\"64305001\").setDisplay(\"Urticaria\");\n-\t\tallergyIntoleranceReactionComponent1.setOnset(new Date());\n-\t\tallergyIntoleranceReactionComponent1.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"moderate\"));\n-\t\tallergyIntoleranceReactionComponent1.addNote()\n-\t\t        .setText(\"The patient reports that the onset of urticaria was within 15 minutes of eating cashews.\");\n-\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent1);\n-\t\t\n-\t\tassertThat(testHelper(new AllergyIntolerance()).getDivAsString(), notNullValue());\n-\t\tassertThat(testHelper(allergyIntolerance).getDivAsString(), notNullValue());\n-\t}\n-\t\n-\t@Test\n-\tpublic void testForMedicationRequest() {\n-\t\t// https://www.hl7.org/fhir/medicationrequest0301.html\n-\t\t\n-\t\tMedicationRequest medicationRequest = new MedicationRequest();\n-\t\t\n-\t\tmedicationRequest.setId(\"medrx301\");\n-\t\t\n-\t\tCodeableConcept medicationCode = new CodeableConcept();\n-\t\tmedicationCode.addCoding().setSystem(\"http://snomed.info/sct\").setDisplay(\"Oral Form Oxycodone (product)\")\n-\t\t        .setCode(\"430127000\");\n-\t\tmedicationRequest.addContained(new Medication().setCode(medicationCode).setId(\"med0310\"));\n-\t\tProvenance provenance = new Provenance();\n-\t\tprovenance.addTarget().setReference(\"ServiceRequest/physiotherapy\");\n-\t\tprovenance.setRecorded(new Date());\n-\t\tProvenance.ProvenanceAgentComponent provenanceAgentComponent = new Provenance.ProvenanceAgentComponent();\n-\t\tprovenanceAgentComponent.addRole().addCoding().setCode(\"AUT\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ParticipationType\");\n-\t\tprovenanceAgentComponent.setWho(new Reference().setDisplay(\"Dr Adam Careful\").setReference(\"Practitioner/example\"));\n-\t\tprovenance.addAgent(provenanceAgentComponent);\n-\t\tSignature signature = new Signature();\n-\t\tsignature.addType().setSystem(\"urn:iso-astm:E1762-95:2013\").setCode(\"1.2.840.10065.1.12.1.1\")\n-\t\t        .setDisplay(\"Author's Signature\");\n-\t\tsignature.setWhen(new Date());\n-\t\tsignature.setWho(new Reference().setReference(\"Practitioner/example\").setDisplay(\"Dr Adam Careful\"));\n-\t\tsignature.setTargetFormat(\"application/fhir+xml\");\n-\t\tsignature.setSigFormat(\"application/signature+xml\");\n-\t\tsignature.setDataElement(new Base64BinaryType(\"dGhpcyBibG9iIGlzIHNuaXBwZWQ=\"));\n-\t\tprovenance.addSignature(signature);\n-\t\tmedicationRequest.addContained(provenance);\n-\t\t\n-\t\tmedicationRequest.addIdentifier().setUse(Identifier.IdentifierUse.OFFICIAL)\n-\t\t        .setSystem(\"http://www.bmc.nl/portal/prescriptions\").setValue(\"12345689\");\n-\t\tmedicationRequest.setStatus(MedicationRequest.MedicationRequestStatus.COMPLETED);\n-\t\t\n-\t\tCodeableConcept statusReason = new CodeableConcept();\n-\t\tstatusReason.addCoding().setDisplay(\"Try another treatment first\").setCode(\"altchoice\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-status-reason\");\n-\t\tmedicationRequest.setStatusReason(statusReason);\n-\t\tmedicationRequest.setIntent(MedicationRequest.MedicationRequestIntent.ORDER);\n-\t\tmedicationRequest.addCategory().addCoding()\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-category\").setCode(\"inpatient\")\n-\t\t        .setDisplay(\"Inpatient\");\n-\t\t\n-\t\tmedicationRequest.setMedication(new Reference().setReference(\"#med0310\"));\n-\t\tmedicationRequest.setSubject(new Reference().setReference(\"Patient/pat1\").setDisplay(\"Donald Duck\"));\n-\t\tmedicationRequest.setEncounter(\n-\t\t    new Reference().setDisplay(\"encounter who leads to this prescription\").setReference(\"Encounter/f201\"));\n-\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n-\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n-\t\tmedicationRequest.setAuthoredOn(new Date());\n-\t\tmedicationRequest.setRequester(new Reference().setReference(\"Practitioner/f007\").setDisplay(\"Patrick Pump\"));\n-\t\tmedicationRequest.setPerformer(new Reference().setReference(\"Practitioner/f204\").setDisplay(\"Carla Espinosa\"));\n-\t\tCodeableConcept performerType = new CodeableConcept();\n-\t\tperformerType.addCoding().setDisplay(\"Public Health Nurse\").setCode(\"26369006\").setSystem(\"http://snomed.info/sct\");\n-\t\tmedicationRequest.setPerformerType(performerType);\n-\t\tmedicationRequest.addReasonCode().addCoding().setSystem(\"http://snomed.info/sct\").setCode(\"297217002\")\n-\t\t        .setDisplay(\"Rib Pain (finding)\");\n-\t\tmedicationRequest.addInsurance().setReference(\"Coverage/9876B1\");\n-\t\tmedicationRequest.addNote().setText(\"Patient told to take with food\");\n-\t\t\n-\t\tTiming timing = new Timing();\n-\t\ttiming.setRepeat(new Timing.TimingRepeatComponent().setFrequency(1).setPeriod(4).setPeriodMax(6)\n-\t\t        .setPeriodUnit(Timing.UnitsOfTime.H));\n-\t\tDosage dosage = new Dosage();\n-\t\tdosage.setSequence(1).setText(\"one to two tablets every 4-6 hours as needed for rib pain\")\n-\t\t        .setPatientInstruction(\"Take one to two tablets every four to six hours as needed for rib pain\")\n-\t\t        .setTiming(timing);\n-\t\tdosage.addAdditionalInstruction().addCoding().setDisplay(\n-\t\t    \"Warning. May cause drowsiness. If affected do not drive or operate machinery. Avoid alcoholic drink (qualifier value)\")\n-\t\t        .setCode(\"418914006\").setSystem(\"http://snomed.info/sct\");\n-\t\tCodeableConcept asNeeded = new CodeableConcept();\n-\t\tasNeeded.addCoding().setCode(\"297217002\").setSystem(\"http://snomed.info/sct\").setDisplay(\"Rib Pain (finding)\");\n-\t\tdosage.setAsNeeded(asNeeded);\n-\t\tCodeableConcept route = new CodeableConcept();\n-\t\troute.addCoding().setDisplay(\"Oral Route\").setSystem(\"http://snomed.info/sct\").setCode(\"26643006\");\n-\t\tdosage.setRoute(route);\n-\t\tCodeableConcept method = new CodeableConcept();\n-\t\tmethod.addCoding().setDisplay(\"Swallow - dosing instruction imperative (qualifier value)\")\n-\t\t        .setSystem(\"http://snomed.info/sct\").setCode(\"421521009\");\n-\t\tdosage.setMethod(method);\n-\t\t\n-\t\tCodeableConcept doseandrateType = new CodeableConcept();\n-\t\tdoseandrateType.addCoding().setCode(\"ordered\").setDisplay(\"Ordered\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/dose-rate-type\");\n-\t\tRange doseRange = new Range();\n-\t\tdoseRange.setLow(new Quantity().setValue(1).setUnit(\"TAB\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n-\t\tdoseRange.setHigh(new Quantity().setValue(2).setUnit(\"TAB\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n-\t\tdosage.addDoseAndRate().setDose(doseRange).setType(doseandrateType);\n-\t\t\n-\t\tmedicationRequest.addDosageInstruction(dosage);\n-\t\t\n-\t\tDuration duration = new Duration();\n-\t\tduration.setValue(10).setUnit(\"days\").setSystem(\"http://unitsofmeasure.org\").setCode(\"d\");\n-\t\tmedicationRequest.setDispenseRequest(new MedicationRequest.MedicationRequestDispenseRequestComponent()\n-\t\t        .setValidityPeriod(new Period().setStart(new Date()).setEnd(new Date())).setNumberOfRepeatsAllowed(0)\n-\t\t        .setQuantity(new Quantity().setValue(30).setUnit(\"TAB\")\n-\t\t                .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"))\n-\t\t        .setExpectedSupplyDuration(duration).setPerformer(new Reference().setReference(\"Practitioner/f001\"))\n-\t\t        .setInitialFill(new MedicationRequest.MedicationRequestDispenseRequestInitialFillComponent()\n-\t\t                .setQuantity(new Quantity().setValue(123).setSystem(\"something\")).setDuration(duration)));\n-\t\t\n-\t\tCodeableConcept substitutionReason = new CodeableConcept();\n-\t\tsubstitutionReason.addCoding().setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ActReason\").setCode(\"FP\")\n-\t\t        .setDisplay(\"formulary policy\");\n-\t\tmedicationRequest.setSubstitution(new MedicationRequest.MedicationRequestSubstitutionComponent()\n-\t\t        .setAllowed(new BooleanType().setValue(true)).setReason(substitutionReason));\n-\t\t\n-\t\tmedicationRequest.addDetectedIssue().setReference(\"DetectedIssue/allergy\");\n-\t\tmedicationRequest.addEventHistory().setReference(\"#signature\").setDisplay(\"Author's Signature\");\n-\t\t\n-\t\tassertThat(testHelper(new MedicationRequest()).getDivAsString(), notNullValue());\n-\t\tassertThat(testHelper(medicationRequest).getDivAsString(), notNullValue());\n-\t}\n-\t\n-\tpublic Narrative testHelper(IBaseResource iBaseResource) {\n-\t\tNarrative narrative = DefaultNarrativeGeneratorForTest.generateDefaultNarrative(iBaseResource);\n-\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Status:\" + narrative.getStatusAsString());\n-\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Div:\" + narrative.getDivAsString());\n-\t\tSystem.out.println(\"----------------------------\");\n-\t\treturn narrative;\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2NjY1OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437466659", "bodyText": "We should get away from referring to \"DefaultNarrative\". I understand that there's a difference  whether the narrative is generated from the HAPI defaults or ours, but by and large, we don't care about that difference. In my mind, it would almost make sense to break out a new series of classes to test narrative generation alone, so, e.g. having an AllergyIntoleranceNarrativeTest class, etc.", "author": "ibacher", "createdAt": "2020-06-09T14:27:59Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.util.Date;\n+\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.Base64BinaryType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Dosage;\n+import org.hl7.fhir.r4.model.Duration;\n+import org.hl7.fhir.r4.model.Identifier;\n+import org.hl7.fhir.r4.model.Medication;\n+import org.hl7.fhir.r4.model.MedicationRequest;\n+import org.hl7.fhir.r4.model.Narrative;\n+import org.hl7.fhir.r4.model.Period;\n+import org.hl7.fhir.r4.model.Provenance;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.hl7.fhir.r4.model.Range;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.Signature;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.Timing;\n+import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceClinical;\n+import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceVerification;\n+import org.junit.Test;\n+\n+public class DefaultNarrativeTemplateTest {", "originalCommit": "5c9811f768ed4333c77a9ba58d611754304ebb90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89ec41d4d0b0b2a9569bd91d9ee86aa3b19eb032", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java b/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java\ndeleted file mode 100644\nindex b7bd1b31..00000000\n--- a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeTemplateTest.java\n+++ /dev/null\n\n@@ -1,230 +0,0 @@\n-/*\n- * This Source Code Form is subject to the terms of the Mozilla Public License,\n- * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n- * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n- * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n- *\n- * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n- * graphic logo is a trademark of OpenMRS Inc.\n- */\n-package org.openmrs.module.fhir2.narrative;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.notNullValue;\n-\n-import java.util.Date;\n-\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.r4.model.AllergyIntolerance;\n-import org.hl7.fhir.r4.model.Base64BinaryType;\n-import org.hl7.fhir.r4.model.BooleanType;\n-import org.hl7.fhir.r4.model.CodeableConcept;\n-import org.hl7.fhir.r4.model.Dosage;\n-import org.hl7.fhir.r4.model.Duration;\n-import org.hl7.fhir.r4.model.Identifier;\n-import org.hl7.fhir.r4.model.Medication;\n-import org.hl7.fhir.r4.model.MedicationRequest;\n-import org.hl7.fhir.r4.model.Narrative;\n-import org.hl7.fhir.r4.model.Period;\n-import org.hl7.fhir.r4.model.Provenance;\n-import org.hl7.fhir.r4.model.Quantity;\n-import org.hl7.fhir.r4.model.Range;\n-import org.hl7.fhir.r4.model.Reference;\n-import org.hl7.fhir.r4.model.Signature;\n-import org.hl7.fhir.r4.model.StringType;\n-import org.hl7.fhir.r4.model.Timing;\n-import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceClinical;\n-import org.hl7.fhir.r4.model.codesystems.AllergyintoleranceVerification;\n-import org.junit.Test;\n-\n-public class DefaultNarrativeTemplateTest {\n-\t\n-\t@Test\n-\tpublic void testForAllergyIntolerance() {\n-\t\t// Example: https://www.hl7.org/fhir/allergyintolerance-example.html\n-\t\t\n-\t\tAllergyIntolerance allergyIntolerance = new AllergyIntolerance();\n-\t\t\n-\t\tallergyIntolerance.setId(\"example\");\n-\t\tallergyIntolerance.addIdentifier().setValue(\"12345678\");\n-\t\t\n-\t\tCodeableConcept clinicalStatus = new CodeableConcept();\n-\t\tclinicalStatus.addCoding().setCode(AllergyintoleranceClinical.ACTIVE.toCode())\n-\t\t        .setDisplay(AllergyintoleranceClinical.ACTIVE.getDisplay());\n-\t\tallergyIntolerance.setClinicalStatus(clinicalStatus);\n-\t\t\n-\t\tCodeableConcept verificationStatus = new CodeableConcept();\n-\t\tverificationStatus.addCoding().setCode(AllergyintoleranceVerification.CONFIRMED.toCode())\n-\t\t        .setDisplay(AllergyintoleranceVerification.CONFIRMED.getDisplay());\n-\t\tallergyIntolerance.setVerificationStatus(verificationStatus);\n-\t\t\n-\t\tallergyIntolerance.setType(AllergyIntolerance.AllergyIntoleranceType.fromCode(\"allergy\"));\n-\t\tallergyIntolerance.addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"food\"));\n-\t\tallergyIntolerance\n-\t\t        .addCategory(new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory().fromCode(\"medication\"));\n-\t\tallergyIntolerance.setCriticality(AllergyIntolerance.AllergyIntoleranceCriticality.fromCode(\"high\"));\n-\t\t\n-\t\tCodeableConcept code = new CodeableConcept();\n-\t\tcode.addCoding().setCode(\"227493005\").setDisplay(\"Cashew Nuts\");\n-\t\tallergyIntolerance.setCode(code);\n-\t\tallergyIntolerance.setPatient(new Reference().setReference(\"Patient/10010\").setDisplay(\"PatientNAME\"));\n-\t\tallergyIntolerance.setOnset(new StringType().setValue(\"01/01/2004\"));\n-\t\tallergyIntolerance.setRecordedDate(new Date());\n-\t\tallergyIntolerance.setRecorder(new Reference().setReference(\"Practitioner/10011\"));\n-\t\tallergyIntolerance.setAsserter(new Reference().setReference(\"Patient/10211\").setDisplay(\"AsserterNAME\"));\n-\t\tallergyIntolerance.setLastOccurrence(new Date());\n-\t\tallergyIntolerance.addNote().setText(\n-\t\t    \"The criticality is high becasue of the observed anaphylactic reaction when challenged with cashew extract.\");\n-\t\t\n-\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n-\t\tCodeableConcept substance = new CodeableConcept();\n-\t\tsubstance.addCoding().setCode(\"1160593\").setDisplay(\"cashew nut allergenic extract Injectale Product\");\n-\t\tallergyIntoleranceReactionComponent.setSubstance(substance);\n-\t\tallergyIntoleranceReactionComponent.addManifestation().addCoding().setCode(\"39579001\")\n-\t\t        .setDisplay(\"Anaphylactic reaction\");\n-\t\tallergyIntoleranceReactionComponent.setDescription(\n-\t\t    \"Challenge Protocol. Severe reaction to subcutaneous cashew extract. Epinephrine administered\");\n-\t\tallergyIntoleranceReactionComponent.setOnset(new Date());\n-\t\tallergyIntoleranceReactionComponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"severe\"));\n-\t\tCodeableConcept exposureRoute = new CodeableConcept();\n-\t\texposureRoute.addCoding().setCode(\"34206005\").setDisplay(\"Subcutaneous route\");\n-\t\tallergyIntoleranceReactionComponent.setExposureRoute(exposureRoute);\n-\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent);\n-\t\t\n-\t\tAllergyIntolerance.AllergyIntoleranceReactionComponent allergyIntoleranceReactionComponent1 = new AllergyIntolerance.AllergyIntoleranceReactionComponent();\n-\t\tallergyIntoleranceReactionComponent1.addManifestation().addCoding().setCode(\"64305001\").setDisplay(\"Urticaria\");\n-\t\tallergyIntoleranceReactionComponent1.setOnset(new Date());\n-\t\tallergyIntoleranceReactionComponent1.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.fromCode(\"moderate\"));\n-\t\tallergyIntoleranceReactionComponent1.addNote()\n-\t\t        .setText(\"The patient reports that the onset of urticaria was within 15 minutes of eating cashews.\");\n-\t\tallergyIntolerance.addReaction(allergyIntoleranceReactionComponent1);\n-\t\t\n-\t\tassertThat(testHelper(new AllergyIntolerance()).getDivAsString(), notNullValue());\n-\t\tassertThat(testHelper(allergyIntolerance).getDivAsString(), notNullValue());\n-\t}\n-\t\n-\t@Test\n-\tpublic void testForMedicationRequest() {\n-\t\t// https://www.hl7.org/fhir/medicationrequest0301.html\n-\t\t\n-\t\tMedicationRequest medicationRequest = new MedicationRequest();\n-\t\t\n-\t\tmedicationRequest.setId(\"medrx301\");\n-\t\t\n-\t\tCodeableConcept medicationCode = new CodeableConcept();\n-\t\tmedicationCode.addCoding().setSystem(\"http://snomed.info/sct\").setDisplay(\"Oral Form Oxycodone (product)\")\n-\t\t        .setCode(\"430127000\");\n-\t\tmedicationRequest.addContained(new Medication().setCode(medicationCode).setId(\"med0310\"));\n-\t\tProvenance provenance = new Provenance();\n-\t\tprovenance.addTarget().setReference(\"ServiceRequest/physiotherapy\");\n-\t\tprovenance.setRecorded(new Date());\n-\t\tProvenance.ProvenanceAgentComponent provenanceAgentComponent = new Provenance.ProvenanceAgentComponent();\n-\t\tprovenanceAgentComponent.addRole().addCoding().setCode(\"AUT\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ParticipationType\");\n-\t\tprovenanceAgentComponent.setWho(new Reference().setDisplay(\"Dr Adam Careful\").setReference(\"Practitioner/example\"));\n-\t\tprovenance.addAgent(provenanceAgentComponent);\n-\t\tSignature signature = new Signature();\n-\t\tsignature.addType().setSystem(\"urn:iso-astm:E1762-95:2013\").setCode(\"1.2.840.10065.1.12.1.1\")\n-\t\t        .setDisplay(\"Author's Signature\");\n-\t\tsignature.setWhen(new Date());\n-\t\tsignature.setWho(new Reference().setReference(\"Practitioner/example\").setDisplay(\"Dr Adam Careful\"));\n-\t\tsignature.setTargetFormat(\"application/fhir+xml\");\n-\t\tsignature.setSigFormat(\"application/signature+xml\");\n-\t\tsignature.setDataElement(new Base64BinaryType(\"dGhpcyBibG9iIGlzIHNuaXBwZWQ=\"));\n-\t\tprovenance.addSignature(signature);\n-\t\tmedicationRequest.addContained(provenance);\n-\t\t\n-\t\tmedicationRequest.addIdentifier().setUse(Identifier.IdentifierUse.OFFICIAL)\n-\t\t        .setSystem(\"http://www.bmc.nl/portal/prescriptions\").setValue(\"12345689\");\n-\t\tmedicationRequest.setStatus(MedicationRequest.MedicationRequestStatus.COMPLETED);\n-\t\t\n-\t\tCodeableConcept statusReason = new CodeableConcept();\n-\t\tstatusReason.addCoding().setDisplay(\"Try another treatment first\").setCode(\"altchoice\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-status-reason\");\n-\t\tmedicationRequest.setStatusReason(statusReason);\n-\t\tmedicationRequest.setIntent(MedicationRequest.MedicationRequestIntent.ORDER);\n-\t\tmedicationRequest.addCategory().addCoding()\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/medicationrequest-category\").setCode(\"inpatient\")\n-\t\t        .setDisplay(\"Inpatient\");\n-\t\t\n-\t\tmedicationRequest.setMedication(new Reference().setReference(\"#med0310\"));\n-\t\tmedicationRequest.setSubject(new Reference().setReference(\"Patient/pat1\").setDisplay(\"Donald Duck\"));\n-\t\tmedicationRequest.setEncounter(\n-\t\t    new Reference().setDisplay(\"encounter who leads to this prescription\").setReference(\"Encounter/f201\"));\n-\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n-\t\tmedicationRequest.addSupportingInformation().setReference(\"Procedure/biopsy\");\n-\t\tmedicationRequest.setAuthoredOn(new Date());\n-\t\tmedicationRequest.setRequester(new Reference().setReference(\"Practitioner/f007\").setDisplay(\"Patrick Pump\"));\n-\t\tmedicationRequest.setPerformer(new Reference().setReference(\"Practitioner/f204\").setDisplay(\"Carla Espinosa\"));\n-\t\tCodeableConcept performerType = new CodeableConcept();\n-\t\tperformerType.addCoding().setDisplay(\"Public Health Nurse\").setCode(\"26369006\").setSystem(\"http://snomed.info/sct\");\n-\t\tmedicationRequest.setPerformerType(performerType);\n-\t\tmedicationRequest.addReasonCode().addCoding().setSystem(\"http://snomed.info/sct\").setCode(\"297217002\")\n-\t\t        .setDisplay(\"Rib Pain (finding)\");\n-\t\tmedicationRequest.addInsurance().setReference(\"Coverage/9876B1\");\n-\t\tmedicationRequest.addNote().setText(\"Patient told to take with food\");\n-\t\t\n-\t\tTiming timing = new Timing();\n-\t\ttiming.setRepeat(new Timing.TimingRepeatComponent().setFrequency(1).setPeriod(4).setPeriodMax(6)\n-\t\t        .setPeriodUnit(Timing.UnitsOfTime.H));\n-\t\tDosage dosage = new Dosage();\n-\t\tdosage.setSequence(1).setText(\"one to two tablets every 4-6 hours as needed for rib pain\")\n-\t\t        .setPatientInstruction(\"Take one to two tablets every four to six hours as needed for rib pain\")\n-\t\t        .setTiming(timing);\n-\t\tdosage.addAdditionalInstruction().addCoding().setDisplay(\n-\t\t    \"Warning. May cause drowsiness. If affected do not drive or operate machinery. Avoid alcoholic drink (qualifier value)\")\n-\t\t        .setCode(\"418914006\").setSystem(\"http://snomed.info/sct\");\n-\t\tCodeableConcept asNeeded = new CodeableConcept();\n-\t\tasNeeded.addCoding().setCode(\"297217002\").setSystem(\"http://snomed.info/sct\").setDisplay(\"Rib Pain (finding)\");\n-\t\tdosage.setAsNeeded(asNeeded);\n-\t\tCodeableConcept route = new CodeableConcept();\n-\t\troute.addCoding().setDisplay(\"Oral Route\").setSystem(\"http://snomed.info/sct\").setCode(\"26643006\");\n-\t\tdosage.setRoute(route);\n-\t\tCodeableConcept method = new CodeableConcept();\n-\t\tmethod.addCoding().setDisplay(\"Swallow - dosing instruction imperative (qualifier value)\")\n-\t\t        .setSystem(\"http://snomed.info/sct\").setCode(\"421521009\");\n-\t\tdosage.setMethod(method);\n-\t\t\n-\t\tCodeableConcept doseandrateType = new CodeableConcept();\n-\t\tdoseandrateType.addCoding().setCode(\"ordered\").setDisplay(\"Ordered\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/dose-rate-type\");\n-\t\tRange doseRange = new Range();\n-\t\tdoseRange.setLow(new Quantity().setValue(1).setUnit(\"TAB\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n-\t\tdoseRange.setHigh(new Quantity().setValue(2).setUnit(\"TAB\")\n-\t\t        .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"));\n-\t\tdosage.addDoseAndRate().setDose(doseRange).setType(doseandrateType);\n-\t\t\n-\t\tmedicationRequest.addDosageInstruction(dosage);\n-\t\t\n-\t\tDuration duration = new Duration();\n-\t\tduration.setValue(10).setUnit(\"days\").setSystem(\"http://unitsofmeasure.org\").setCode(\"d\");\n-\t\tmedicationRequest.setDispenseRequest(new MedicationRequest.MedicationRequestDispenseRequestComponent()\n-\t\t        .setValidityPeriod(new Period().setStart(new Date()).setEnd(new Date())).setNumberOfRepeatsAllowed(0)\n-\t\t        .setQuantity(new Quantity().setValue(30).setUnit(\"TAB\")\n-\t\t                .setSystem(\"http://terminology.hl7.org/CodeSystem/v3-orderableDrugForm\").setCode(\"TAB\"))\n-\t\t        .setExpectedSupplyDuration(duration).setPerformer(new Reference().setReference(\"Practitioner/f001\"))\n-\t\t        .setInitialFill(new MedicationRequest.MedicationRequestDispenseRequestInitialFillComponent()\n-\t\t                .setQuantity(new Quantity().setValue(123).setSystem(\"something\")).setDuration(duration)));\n-\t\t\n-\t\tCodeableConcept substitutionReason = new CodeableConcept();\n-\t\tsubstitutionReason.addCoding().setSystem(\"http://terminology.hl7.org/CodeSystem/v3-ActReason\").setCode(\"FP\")\n-\t\t        .setDisplay(\"formulary policy\");\n-\t\tmedicationRequest.setSubstitution(new MedicationRequest.MedicationRequestSubstitutionComponent()\n-\t\t        .setAllowed(new BooleanType().setValue(true)).setReason(substitutionReason));\n-\t\t\n-\t\tmedicationRequest.addDetectedIssue().setReference(\"DetectedIssue/allergy\");\n-\t\tmedicationRequest.addEventHistory().setReference(\"#signature\").setDisplay(\"Author's Signature\");\n-\t\t\n-\t\tassertThat(testHelper(new MedicationRequest()).getDivAsString(), notNullValue());\n-\t\tassertThat(testHelper(medicationRequest).getDivAsString(), notNullValue());\n-\t}\n-\t\n-\tpublic Narrative testHelper(IBaseResource iBaseResource) {\n-\t\tNarrative narrative = DefaultNarrativeGeneratorForTest.generateDefaultNarrative(iBaseResource);\n-\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Status:\" + narrative.getStatusAsString());\n-\t\tSystem.out.println(iBaseResource.getClass().getSimpleName() + \" Narrative Div:\" + narrative.getDivAsString());\n-\t\tSystem.out.println(\"----------------------------\");\n-\t\treturn narrative;\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2NzcxOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437467719", "bodyText": "Why is this a separate class?", "author": "ibacher", "createdAt": "2020-06-09T14:29:17Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeGeneratorForTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Narrative;\n+import org.openmrs.module.fhir2.FhirConstants;\n+\n+public class DefaultNarrativeGeneratorForTest {", "originalCommit": "5c9811f768ed4333c77a9ba58d611754304ebb90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MjE2Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437482163", "bodyText": "Actually I thought to keep the generator separate. But I'll move it to the same class with the tests.", "author": "ShivanshRakesh", "createdAt": "2020-06-09T14:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2NzcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "89ec41d4d0b0b2a9569bd91d9ee86aa3b19eb032", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeGeneratorForTest.java b/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeGeneratorForTest.java\ndeleted file mode 100644\nindex 661f64ee..00000000\n--- a/omod/src/test/java/org/openmrs/module/fhir2/narrative/DefaultNarrativeGeneratorForTest.java\n+++ /dev/null\n\n@@ -1,41 +0,0 @@\n-/*\n- * This Source Code Form is subject to the terms of the Mozilla Public License,\n- * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n- * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n- * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n- *\n- * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n- * graphic logo is a trademark of OpenMRS Inc.\n- */\n-package org.openmrs.module.fhir2.narrative;\n-\n-import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParser;\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.r4.model.Narrative;\n-import org.openmrs.module.fhir2.FhirConstants;\n-\n-public class DefaultNarrativeGeneratorForTest {\n-\t\n-\tpublic static Narrative generateDefaultNarrative(IBaseResource iBaseResource) {\n-\t\tFhirContext fhirContext = FhirContext.forR4();\n-\t\tfhirContext.setNarrativeGenerator(\n-\t\t    new CustomThymeleafNarrativeGenerator(FhirConstants.HAPI_DEFAULT_NARRATIVES_PROPERTY_FILE,\n-\t\t            FhirConstants.OPENMRS_DEFAULT_NARRATIVES_PROPERTY_FILE));\n-\t\tString narrativeStr = fhirContext.newJsonParser().setPrettyPrint(true).encodeResourceToString(iBaseResource);\n-\t\t\n-\t\tJsonParser jsonParser = new JsonParser();\n-\t\tJsonObject jsonObject1 = (JsonObject) jsonParser.parse(narrativeStr);\n-\t\tJsonObject narrativeText = jsonObject1.getAsJsonObject(\"text\");\n-\t\t\n-\t\tString narrativeStatusStr = narrativeText.get(\"status\").getAsString();\n-\t\tString narrativeDivStr = narrativeText.get(\"div\").getAsString();\n-\t\tNarrative narrative = new Narrative();\n-\t\tnarrative.setStatusAsString(narrativeStatusStr);\n-\t\tnarrative.setDivAsString(narrativeDivStr);\n-\t\t\n-\t\treturn narrative;\n-\t}\n-}\n"}}, {"oid": "89ec41d4d0b0b2a9569bd91d9ee86aa3b19eb032", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/89ec41d4d0b0b2a9569bd91d9ee86aa3b19eb032", "message": "response to reviews", "committedDate": "2020-06-09T18:04:12Z", "type": "forcePushed"}, {"oid": "10cbef5883eab071a23a8c2c62747c52fb995f65", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/10cbef5883eab071a23a8c2c62747c52fb995f65", "message": "responded to code reviews", "committedDate": "2020-06-09T18:07:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNzI2Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437627263", "bodyText": "@ibacher PTAL. Doing it this way is fine right?\nUsing just equalTo(getClass().getClassLoader().getResourceAsStream(<path>)) raised errors due to type mismatch.", "author": "ShivanshRakesh", "createdAt": "2020-06-09T18:16:58Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/narrative/MedicationRequestNarrativeTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;\n+import ca.uhn.fhir.parser.IParser;\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.r4.model.MedicationRequest;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.FhirConstants;\n+\n+public class MedicationRequestNarrativeTest {\n+\t\n+\tprivate static final String EXAMPLE_RESOURCE_PATH = \"org/openmrs/module/fhir2/narrative/example/medicationrequest-example.json\";\n+\t\n+\tprivate static final String EXPECTED_NARRATIVE_PATH = \"org/openmrs/module/fhir2/narrative/expected/medicationrequest-expected.html\";\n+\t\n+\t@Test\n+\tpublic void shouldGenerateAMedicationRequestNarrative() throws IOException {\n+\t\tFhirContext ctx = FhirContext.forR4();\n+\t\tctx.setNarrativeGenerator(new CustomThymeleafNarrativeGenerator(FhirConstants.HAPI_NARRATIVES_PROPERTY_FILE,\n+\t\t        FhirConstants.OPENMRS_NARRATIVES_PROPERTY_FILE));\n+\t\tIParser parser = ctx.newJsonParser();\n+\t\t\n+\t\tMedicationRequest given = parser.parseResource(MedicationRequest.class,\n+\t\t    getClass().getClassLoader().getResourceAsStream(EXAMPLE_RESOURCE_PATH));\n+\t\tMedicationRequest result = parser.parseResource(MedicationRequest.class, parser.encodeResourceToString(given));\n+\t\tString expected = IOUtils.readLines(getClass().getClassLoader().getResourceAsStream(EXPECTED_NARRATIVE_PATH),\n+\t\t    Charsets.toCharset(Charset.defaultCharset())).get(0);", "originalCommit": "10cbef5883eab071a23a8c2c62747c52fb995f65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MTA2MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437661060", "bodyText": "Why not just use IOUtils.resourceToString(EXPECTED_NARRATIVE_PATH, StandardCharsets.UTF_8)?\nAlso, some general points about unit tests. We want to structure unit tests so that it is clear what is being tested in each test. We also want to factor out the common setup parts so that things aren't repeating themselves too much.\nFor unit tests, I use this structure:\n// given - setup the preconditions\n\n// when - do the thing being tested\n\n// then - assertions to ensure state is right\nGiven this structure, I think this test should look something like this:\n// do this once per class\nprivate FhirContext ctx = FhirContext.forR4();\n\nprivate IParser parser;\n\n@Before\nprivate void setup() {\n    ctx.setNarrativeGenerator(new CustomThymeleafNarrativeGenerator(FhirConstants.HAPI_NARRATIVES_PROPERTY_FILE,\n        FhirConstants.OPENMRS_NARRATIVES_PROPERTY_FILE));\n    parser = ctx.newJsonParser();\n}\n\n@Test\npublic void shouldGenerateMedicationRequestNarrative() throws IOException {\n    // given\n    MedicationRequest given = parser.parseResource(MedicationRequest.class,\n         getClass().getClassLoader().getResourceAsStream(EXAMPLE_RESOURCE_PATH));\n\n    // when\n    MedicationRequest result = parser.parseResource(MedicationRequest.class, parser.encodeResourceToString(given));\n\n    // then\n    assertThat(result, notNullValue());\n    assertThat(result.getText(), notNullValue());\n    assertThat(result.getText().getStatusAsString(), equalTo(\"generated\"));\n    // if you don't do it in one line like this, I would load the expected narrative here\n    // that way, if some error comes from just loading the expected result, we can at least be\n    // assured that the other assertions passed\n    assertThat(result.getText().getDivAsString(),\n        equalTo(IOUtils.resourceToString(EXPECTED_NARRATIVE_PATH, StandardCharsets.UTF_8)));\n}\nThe comments there don't need to be preserved. They're just to show you why I've put the line breaks where I did.", "author": "ibacher", "createdAt": "2020-06-09T19:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNzI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyODA1MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437728051", "bodyText": "Actually I used IOUtils.readlines() because I just needed the first line, since I had to keep a newline in the end. Though, I guess I can use IOUtils.resourceToString() too and then split it at a newline.\nOkay, will restructure the tests.", "author": "ShivanshRakesh", "createdAt": "2020-06-09T21:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNzI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMjk3Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r437732976", "bodyText": "Did the changes. PTAL.", "author": "ShivanshRakesh", "createdAt": "2020-06-09T21:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNzI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b9f78986c07135758b56f59486d656bc4df6ad22", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/narrative/MedicationRequestNarrativeTest.java b/omod/src/test/java/org/openmrs/module/fhir2/narrative/MedicationRequestNarrativeTest.java\nindex 4d694c67..bc349ae2 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/narrative/MedicationRequestNarrativeTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/narrative/MedicationRequestNarrativeTest.java\n\n@@ -14,39 +14,30 @@ import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.notNullValue;\n \n import java.io.IOException;\n-import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n \n-import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;\n-import ca.uhn.fhir.parser.IParser;\n-import org.apache.commons.io.Charsets;\n import org.apache.commons.io.IOUtils;\n import org.hl7.fhir.r4.model.MedicationRequest;\n import org.junit.Test;\n-import org.openmrs.module.fhir2.FhirConstants;\n \n-public class MedicationRequestNarrativeTest {\n+public class MedicationRequestNarrativeTest extends BaseFhirNarrativeTest {\n \t\n \tprivate static final String EXAMPLE_RESOURCE_PATH = \"org/openmrs/module/fhir2/narrative/example/medicationrequest-example.json\";\n \t\n \tprivate static final String EXPECTED_NARRATIVE_PATH = \"org/openmrs/module/fhir2/narrative/expected/medicationrequest-expected.html\";\n \t\n \t@Test\n-\tpublic void shouldGenerateAMedicationRequestNarrative() throws IOException {\n-\t\tFhirContext ctx = FhirContext.forR4();\n-\t\tctx.setNarrativeGenerator(new CustomThymeleafNarrativeGenerator(FhirConstants.HAPI_NARRATIVES_PROPERTY_FILE,\n-\t\t        FhirConstants.OPENMRS_NARRATIVES_PROPERTY_FILE));\n-\t\tIParser parser = ctx.newJsonParser();\n-\t\t\n+\tpublic void shouldGenerateMedicationRequestNarrative() throws IOException {\n \t\tMedicationRequest given = parser.parseResource(MedicationRequest.class,\n \t\t    getClass().getClassLoader().getResourceAsStream(EXAMPLE_RESOURCE_PATH));\n+\t\t\n \t\tMedicationRequest result = parser.parseResource(MedicationRequest.class, parser.encodeResourceToString(given));\n-\t\tString expected = IOUtils.readLines(getClass().getClassLoader().getResourceAsStream(EXPECTED_NARRATIVE_PATH),\n-\t\t    Charsets.toCharset(Charset.defaultCharset())).get(0);\n \t\t\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getText(), notNullValue());\n \t\tassertThat(result.getText().getStatusAsString(), equalTo(\"generated\"));\n-\t\tassertThat(result.getText().getDivAsString(), equalTo(expected));\n+\t\tassertThat(result.getText().getDivAsString(),\n+\t\t    equalTo(IOUtils.resourceToString(EXPECTED_NARRATIVE_PATH, StandardCharsets.UTF_8, getClass().getClassLoader())\n+\t\t            .split(\"\\n\")[0]));\n \t}\n }\n"}}, {"oid": "54dad0a92b028b7e3370f972c58e6e77e7e00df5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/54dad0a92b028b7e3370f972c58e6e77e7e00df5", "message": "responded to code reviews", "committedDate": "2020-06-09T18:40:08Z", "type": "forcePushed"}, {"oid": "49efacd2d249a0779e934546e1f4a6a6f5697800", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/49efacd2d249a0779e934546e1f4a6a6f5697800", "message": "responded to code reviews", "committedDate": "2020-06-09T18:43:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMDAyOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r438110029", "bodyText": "Here's my suggestion for the dealing with the TimeZone issue:\nprotected static TimeZone defaultTimeZone;\n\n@BeforeClass\npublic static void setupTimeZone() {\n    defaultTimeZone = TimeZone.getDefault();\n    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n}\n\n@AfterClass\npublic static void resetTimeZone() {\n    TimeZone.setDefault(defaultTimeZone);\n}\nPS It maybe worth looking into creating a BaseFhirNarrativeTest class which handles:\n\nCreating the context and parser (i.e., the @Before method with both the ctx and parser fields marked as protected\nSetting up the timezone stuff suggested above", "author": "ibacher", "createdAt": "2020-06-10T13:12:17Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;\n+import ca.uhn.fhir.parser.IParser;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.FhirConstants;\n+\n+public class AllergyIntoleranceNarrativeTest {\n+\t\n+\tprivate static final String EXAMPLE_RESOURCE_PATH = \"org/openmrs/module/fhir2/narrative/example/allergyintolerance-example.json\";\n+\t\n+\tprivate static final String EXPECTED_NARRATIVE_PATH = \"org/openmrs/module/fhir2/narrative/expected/allergyintolerance-expected.html\";\n+\t\n+\tprivate FhirContext ctx = FhirContext.forR4();\n+\t\n+\tprivate IParser parser;\n+\t", "originalCommit": "9f205a1217948265efce2ed13d6ef49a53aead1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNDQ5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r438114499", "bodyText": "Thanks for that @ibacher! Sure, will do that.", "author": "ShivanshRakesh", "createdAt": "2020-06-10T13:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyNjY3OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r438126679", "bodyText": "Have made the changes. PTAL!", "author": "ShivanshRakesh", "createdAt": "2020-06-10T13:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMDAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9f78986c07135758b56f59486d656bc4df6ad22", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java b/omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java\nindex e44627c9..61e8b6f4 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java\n\n@@ -16,39 +16,23 @@ import static org.hamcrest.Matchers.notNullValue;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n \n-import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;\n-import ca.uhn.fhir.parser.IParser;\n import org.apache.commons.io.IOUtils;\n import org.hl7.fhir.r4.model.AllergyIntolerance;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.openmrs.module.fhir2.FhirConstants;\n \n-public class AllergyIntoleranceNarrativeTest {\n+public class AllergyIntoleranceNarrativeTest extends BaseFhirNarrativeTest {\n \t\n \tprivate static final String EXAMPLE_RESOURCE_PATH = \"org/openmrs/module/fhir2/narrative/example/allergyintolerance-example.json\";\n \t\n \tprivate static final String EXPECTED_NARRATIVE_PATH = \"org/openmrs/module/fhir2/narrative/expected/allergyintolerance-expected.html\";\n \t\n-\tprivate FhirContext ctx = FhirContext.forR4();\n-\t\n-\tprivate IParser parser;\n-\t\n-\t@Before\n-\tpublic void setup() {\n-\t\tctx.setNarrativeGenerator(new CustomThymeleafNarrativeGenerator(FhirConstants.HAPI_NARRATIVES_PROPERTY_FILE,\n-\t\t        FhirConstants.OPENMRS_NARRATIVES_PROPERTY_FILE));\n-\t\tparser = ctx.newJsonParser();\n-\t}\n-\t\n \t@Test\n \tpublic void shouldGenerateAllergyIntoleranceNarrative() throws IOException {\n \t\tAllergyIntolerance given = parser.parseResource(AllergyIntolerance.class,\n \t\t    getClass().getClassLoader().getResourceAsStream(EXAMPLE_RESOURCE_PATH));\n \t\t\n \t\tAllergyIntolerance result = parser.parseResource(AllergyIntolerance.class, parser.encodeResourceToString(given));\n-\t\t\n+\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getText(), notNullValue());\n \t\tassertThat(result.getText().getStatusAsString(), equalTo(\"generated\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMDUzNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r438110534", "bodyText": "Does this not work without the .split(\"\\n\")[0]?", "author": "ibacher", "createdAt": "2020-06-10T13:13:06Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;\n+import ca.uhn.fhir.parser.IParser;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.FhirConstants;\n+\n+public class AllergyIntoleranceNarrativeTest {\n+\t\n+\tprivate static final String EXAMPLE_RESOURCE_PATH = \"org/openmrs/module/fhir2/narrative/example/allergyintolerance-example.json\";\n+\t\n+\tprivate static final String EXPECTED_NARRATIVE_PATH = \"org/openmrs/module/fhir2/narrative/expected/allergyintolerance-expected.html\";\n+\t\n+\tprivate FhirContext ctx = FhirContext.forR4();\n+\t\n+\tprivate IParser parser;\n+\t\n+\t@Before\n+\tpublic void setup() {\n+\t\tctx.setNarrativeGenerator(new CustomThymeleafNarrativeGenerator(FhirConstants.HAPI_NARRATIVES_PROPERTY_FILE,\n+\t\t        FhirConstants.OPENMRS_NARRATIVES_PROPERTY_FILE));\n+\t\tparser = ctx.newJsonParser();\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGenerateAllergyIntoleranceNarrative() throws IOException {\n+\t\tAllergyIntolerance given = parser.parseResource(AllergyIntolerance.class,\n+\t\t    getClass().getClassLoader().getResourceAsStream(EXAMPLE_RESOURCE_PATH));\n+\t\t\n+\t\tAllergyIntolerance result = parser.parseResource(AllergyIntolerance.class, parser.encodeResourceToString(given));\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getText(), notNullValue());\n+\t\tassertThat(result.getText().getStatusAsString(), equalTo(\"generated\"));\n+\t\tassertThat(result.getText().getDivAsString(),\n+\t\t    equalTo(IOUtils.resourceToString(EXPECTED_NARRATIVE_PATH, StandardCharsets.UTF_8, getClass().getClassLoader())\n+\t\t            .split(\"\\n\")[0]));", "originalCommit": "9f205a1217948265efce2ed13d6ef49a53aead1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNTgzNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r438115836", "bodyText": "No, actually there's an extra newline I added following this. With that, it throws an assertion error.", "author": "ShivanshRakesh", "createdAt": "2020-06-10T13:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMDUzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NzUwMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r438967502", "bodyText": "That makes sense", "author": "ibacher", "createdAt": "2020-06-11T17:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMDUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "b9f78986c07135758b56f59486d656bc4df6ad22", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java b/omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java\nindex e44627c9..61e8b6f4 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/narrative/AllergyIntoleranceNarrativeTest.java\n\n@@ -16,39 +16,23 @@ import static org.hamcrest.Matchers.notNullValue;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n \n-import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.narrative.CustomThymeleafNarrativeGenerator;\n-import ca.uhn.fhir.parser.IParser;\n import org.apache.commons.io.IOUtils;\n import org.hl7.fhir.r4.model.AllergyIntolerance;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.openmrs.module.fhir2.FhirConstants;\n \n-public class AllergyIntoleranceNarrativeTest {\n+public class AllergyIntoleranceNarrativeTest extends BaseFhirNarrativeTest {\n \t\n \tprivate static final String EXAMPLE_RESOURCE_PATH = \"org/openmrs/module/fhir2/narrative/example/allergyintolerance-example.json\";\n \t\n \tprivate static final String EXPECTED_NARRATIVE_PATH = \"org/openmrs/module/fhir2/narrative/expected/allergyintolerance-expected.html\";\n \t\n-\tprivate FhirContext ctx = FhirContext.forR4();\n-\t\n-\tprivate IParser parser;\n-\t\n-\t@Before\n-\tpublic void setup() {\n-\t\tctx.setNarrativeGenerator(new CustomThymeleafNarrativeGenerator(FhirConstants.HAPI_NARRATIVES_PROPERTY_FILE,\n-\t\t        FhirConstants.OPENMRS_NARRATIVES_PROPERTY_FILE));\n-\t\tparser = ctx.newJsonParser();\n-\t}\n-\t\n \t@Test\n \tpublic void shouldGenerateAllergyIntoleranceNarrative() throws IOException {\n \t\tAllergyIntolerance given = parser.parseResource(AllergyIntolerance.class,\n \t\t    getClass().getClassLoader().getResourceAsStream(EXAMPLE_RESOURCE_PATH));\n \t\t\n \t\tAllergyIntolerance result = parser.parseResource(AllergyIntolerance.class, parser.encodeResourceToString(given));\n-\t\t\n+\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getText(), notNullValue());\n \t\tassertThat(result.getText().getStatusAsString(), equalTo(\"generated\"));\n"}}, {"oid": "b9f78986c07135758b56f59486d656bc4df6ad22", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b9f78986c07135758b56f59486d656bc4df6ad22", "message": "added condition narrative", "committedDate": "2020-06-10T15:41:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2Nzg3NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r438967875", "bodyText": "This should be \"classpath:narrative.properties\"", "author": "ibacher", "createdAt": "2020-06-11T17:52:42Z", "path": "api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java", "diffHunk": "@@ -202,5 +202,7 @@\n \t\n \tpublic static final String TAG_SEARCH_HANDLER = \"tag.search.handler\";\n \t\n-\tpublic static final String HAPI_DEFAULT_NARRATIVES_PROPERTY_FILE = \"classpath:ca/uhn/fhir/narrative/narratives.properties\";\n+\tpublic static final String HAPI_NARRATIVES_PROPERTY_FILE = \"classpath:ca/uhn/fhir/narrative/narratives.properties\";\n+\t\n+\tpublic static final String OPENMRS_NARRATIVES_PROPERTY_FILE = \"file:src/main/resources/narratives.properties\";", "originalCommit": "b9f78986c07135758b56f59486d656bc4df6ad22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzNDcwMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r440334703", "bodyText": "@ibacher If I do that, it uses the narratives.properties of HAPI, instead of the local one. So I've moved the resources to a sub-directory org/openmrs/module/fhir2/ inside the resources directory, and changed OPENMRS_NARRATIVES_PROPERTY_FILE to classpath:org/openmrs/module/fhir2/narratives.properties.", "author": "ShivanshRakesh", "createdAt": "2020-06-15T17:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2Nzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNzA1Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r440937057", "bodyText": "Ok. My point was primarily that file: with src/main/resources/... is only going to work in a development environment. Instead of differentiating these two, it might make sense to just use something like classpath*:narratives.properties, allowing us to use other narratives.properties files that exist on the classpath. Basically, we want to be forced to know as little as possible about HAPI.", "author": "ibacher", "createdAt": "2020-06-16T15:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2Nzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MTgyNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/198#discussion_r440941826", "bodyText": "Ah, I see.", "author": "ShivanshRakesh", "createdAt": "2020-06-16T15:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2Nzg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9100cef079a41f9efaa0e23f754143492253ec06", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java b/api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java\nindex 74720a59..d4e9f6c3 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java\n\n@@ -205,4 +207,8 @@ public class FhirConstants {\n \tpublic static final String HAPI_NARRATIVES_PROPERTY_FILE = \"classpath:ca/uhn/fhir/narrative/narratives.properties\";\n \t\n \tpublic static final String OPENMRS_NARRATIVES_PROPERTY_FILE = \"file:src/main/resources/narratives.properties\";\n+\t\n+\tpublic static final String ALLERGEN_SEARCH_HANDLER = \"allergen.search.handler\";\n+\t\n+\tpublic static final String SEVERITY_SEARCH_HANDLER = \"severity.search.handler\";\n }\n"}}, {"oid": "9100cef079a41f9efaa0e23f754143492253ec06", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9100cef079a41f9efaa0e23f754143492253ec06", "message": "FM2-194: Created OpenMRS Narratives", "committedDate": "2020-06-11T18:38:07Z", "type": "forcePushed"}, {"oid": "23439d7f1e9d9bf06ec189ec582badc82c54b945", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/23439d7f1e9d9bf06ec189ec582badc82c54b945", "message": "FM2-194: Created OpenMRS Narratives", "committedDate": "2020-06-12T06:24:38Z", "type": "forcePushed"}, {"oid": "3b94546f10e76558ad36b9ab43b3e475646840d5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3b94546f10e76558ad36b9ab43b3e475646840d5", "message": "FM2-194: Created OpenMRS Narratives", "committedDate": "2020-06-13T07:13:48Z", "type": "forcePushed"}, {"oid": "f9cd22e647530225d602f2724419ad223e1d569d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f9cd22e647530225d602f2724419ad223e1d569d", "message": "FM2-194: Create default narratives for resources (AllergyIntolerance, MedicationRequest, Condition)", "committedDate": "2020-06-15T16:26:34Z", "type": "forcePushed"}, {"oid": "7b669e42e745a97d6a0d4b9d8d7d04ad13c03ede", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7b669e42e745a97d6a0d4b9d8d7d04ad13c03ede", "message": "FM2-194: Create default narratives for resources (AllergyIntolerance, MedicationRequest, Condition)", "committedDate": "2020-06-15T17:27:22Z", "type": "commit"}, {"oid": "7b669e42e745a97d6a0d4b9d8d7d04ad13c03ede", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7b669e42e745a97d6a0d4b9d8d7d04ad13c03ede", "message": "FM2-194: Create default narratives for resources (AllergyIntolerance, MedicationRequest, Condition)", "committedDate": "2020-06-15T17:27:22Z", "type": "forcePushed"}]}