{"pr_number": 226, "pr_title": "FM2-220: Add create, update and delete for Patient", "pr_createdAt": "2020-06-22T20:46:46Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0NjI4Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r445546287", "bodyText": "Change to R4 OperationOutcome", "author": "corneliouzbett", "createdAt": "2020-06-25T13:11:22Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java", "diffHunk": "@@ -13,26 +13,36 @@\n \n import java.util.List;\n \n+import ca.uhn.fhir.rest.annotation.Create;\n+import ca.uhn.fhir.rest.annotation.Delete;\n import ca.uhn.fhir.rest.annotation.History;\n import ca.uhn.fhir.rest.annotation.IdParam;\n import ca.uhn.fhir.rest.annotation.OptionalParam;\n import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.ResourceParam;\n import ca.uhn.fhir.rest.annotation.Search;\n import ca.uhn.fhir.rest.annotation.Sort;\n+import ca.uhn.fhir.rest.annotation.Update;\n+import ca.uhn.fhir.rest.api.MethodOutcome;\n import ca.uhn.fhir.rest.api.SortSpec;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n import ca.uhn.fhir.rest.param.DateRangeParam;\n import ca.uhn.fhir.rest.param.StringAndListParam;\n import ca.uhn.fhir.rest.param.TokenAndListParam;\n import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n import lombok.AccessLevel;\n import lombok.Setter;\n+\n+import org.hl7.fhir.convertors.conv30_40.Patient30_40;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;", "originalCommit": "3af53f814b10c7e69fb59edb69e9ab09a931d5bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNDYxNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r445814616", "bodyText": "i have fixed it", "author": "gitcliff", "createdAt": "2020-06-25T20:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0NjI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9d66bdcba4cefe1f815628b6c495a4d0073b0726", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\nindex 68055a67..3c235759 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\n\n@@ -36,7 +36,7 @@ import lombok.AccessLevel;\n import lombok.Setter;\n \n import org.hl7.fhir.convertors.conv30_40.Patient30_40;\n-import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.r4.model.OperationOutcome;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.r4.model.IdType;\n import org.hl7.fhir.r4.model.Patient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0Nzc5OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r445547799", "bodyText": "remove unnecessary spaces", "author": "corneliouzbett", "createdAt": "2020-06-25T13:13:50Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -376,4 +381,67 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdatePatient() {\n+\t\tPatient newPatient = patient;\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(newPatient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPatient));\n+\t}\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePatient_shouldThrowInvalidRequestExceptionForWrongPatientUuid() {\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPatient wrongPatient = new Patient();\n+\n+\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeletePatient() {\n+\t\tPatient newPatient = new Patient();\n+\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n+\n+\t\torg.hl7.fhir.dstu3.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_PATIENT_UUID);\n+\t\torg.hl7.fhir.dstu3.model.OperationOutcome patient = resourceProvider.deletePatient(id);\n+\t\tassertThat(patient, nullValue());\n+\t}\n+\n+\t@Test\n+\tpublic void createPatient_shouldCreateNewPatient() {\n+\t\twhen(patientService.create(patient)).thenReturn(patient);\n+\n+\t\tMethodOutcome result = resourceProvider.createPatient(patient);\n+\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getResource(), equalTo(patient));\n+\t}\n+\n+\n+\t\n+\t", "originalCommit": "3af53f814b10c7e69fb59edb69e9ab09a931d5bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNDgzNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r445814837", "bodyText": "i have removed them", "author": "gitcliff", "createdAt": "2020-06-25T20:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0Nzc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d66bdcba4cefe1f815628b6c495a4d0073b0726", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex 126b79e7..b047762c 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -417,7 +417,7 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \n \t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n \n-\t\torg.hl7.fhir.dstu3.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n \t\tassertThat(result, CoreMatchers.notNullValue());\n \t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1MDAyMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r445550021", "bodyText": "import org.hl7.fhir.r4.model.OperationOutcome;", "author": "corneliouzbett", "createdAt": "2020-06-25T13:17:10Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java", "diffHunk": "@@ -34,7 +37,10 @@\n import ca.uhn.fhir.rest.param.TokenAndListParam;\n import lombok.AccessLevel;\n import lombok.Getter;\n+\n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;", "originalCommit": "3af53f814b10c7e69fb59edb69e9ab09a931d5bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNDk2NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r445814965", "bodyText": "its done", "author": "gitcliff", "createdAt": "2020-06-25T20:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1MDAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d66bdcba4cefe1f815628b6c495a4d0073b0726", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\nindex 2eb9949e..f6a93a58 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n\n@@ -40,7 +40,7 @@ import lombok.Getter;\n \n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.time.DateUtils;\n-import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.r4.model.OperationOutcome;\n import org.hl7.fhir.r4.model.Bundle;\n import org.hl7.fhir.r4.model.CodeableConcept;\n import org.hl7.fhir.r4.model.Coding;\n"}}, {"oid": "9d66bdcba4cefe1f815628b6c495a4d0073b0726", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9d66bdcba4cefe1f815628b6c495a4d0073b0726", "message": "FM2-220:Add create,update and delete for Patient", "committedDate": "2020-06-25T20:16:06Z", "type": "forcePushed"}, {"oid": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9525f730ac3c698248e26c36d07bf3cefe32f2e0", "message": "FM2-220:Add create,update and delete for Patient", "committedDate": "2020-06-26T11:08:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNjc4Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r446516787", "bodyText": "ditto", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:49:14Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,37 @@ public Patient getPatientById(@IdParam @NotNull IdType id) {\n \t\treturn Patient30_40.convertPatient(patient);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPatient(@ResourceParam Patient patient) {\n+\t\treturn FhirProviderUtils.buildCreate(patientService.create(Patient30_40.convertPatient(patient)));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePatient(@IdParam IdType id, @ResourceParam Patient patient) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpatient.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(patientService.update(id.getIdPart(),\n+\t\t    Patient30_40.convertPatient(patient)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic org.hl7.fhir.r4.model.OperationOutcome deletePatient(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Patient patient = patientService.delete(id.getIdPart());\n+\t\tif (patient == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());", "originalCommit": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\nindex 3679cbc0..d683f908 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\n\n@@ -81,15 +92,12 @@ public class PatientFhirResourceProvider implements IResourceProvider {\n \t\n \t@Delete\n \t@SuppressWarnings(\"unused\")\n-\tpublic org.hl7.fhir.r4.model.OperationOutcome deletePatient(@IdParam @NotNull IdType id) {\n+\tpublic OperationOutcome deletePatient(@IdParam @NotNull IdType id) {\n \t\torg.hl7.fhir.r4.model.Patient patient = patientService.delete(id.getIdPart());\n \t\tif (patient == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n \t\t}\n-\t\tOperationOutcome retVal = new OperationOutcome();\n-\t\tretVal.setId(id.getIdPart());\n-\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n-\t\treturn FhirProviderUtils.buildDelete(patient);\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(patient));\n \t}\n \t\n \t@History\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNjgzMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r446516832", "bodyText": "ditto", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:49:27Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java", "diffHunk": "@@ -60,6 +70,37 @@ public Patient getPatientById(@IdParam @NotNull IdType id) {\n \t\treturn patient;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPatient(@ResourceParam Patient patient) {\n+\t\treturn FhirProviderUtils.buildCreate(patientService.create(patient));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePatient(@IdParam IdType id, @ResourceParam Patient patient) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpatient.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(patientService.update(id.getIdPart(),patient));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePatient(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Patient patient = patientService.delete(id.getIdPart());\n+\t\tif (patient == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();", "originalCommit": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\nindex 3c235759..88370d14 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\n\n@@ -94,10 +93,7 @@ public class PatientFhirResourceProvider implements IResourceProvider {\n \t\tif (patient == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n \t\t}\n-\t\tOperationOutcome retVal = new OperationOutcome();\n-\t\tretVal.setId(id.getIdPart());\n-\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n-\t\treturn retVal;\n+\t\treturn FhirProviderUtils.buildDelete(patient);\n \t}\n \t\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNjg2OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r446516869", "bodyText": "updatePatient_shouldUpdateRequestedPatient", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:49:54Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -376,4 +381,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdatePatient() {", "originalCommit": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex fa8b2d18..d0448345 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -402,24 +403,23 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \n \t@Test(expected = MethodNotAllowedException.class)\n \tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n-\t\tPatient wrongPatient = new Patient();\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n \n-\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n \n-\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n-\n-\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n \t}\n \n \t@Test\n \tpublic void deletePatient_shouldDeletePatient() {\n-\t\tPatient newPatient = new Patient();\n-\n-\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n \n \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n-\t\tassertThat(result, CoreMatchers.notNullValue());\n-\t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n \t}\n \n \t@Test(expected = ResourceNotFoundException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNjkzNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r446516934", "bodyText": "why do we need a new patient here ?", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:50:27Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -376,4 +381,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdatePatient() {\n+\t\tPatient newPatient = patient;", "originalCommit": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NTY5Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r448565697", "bodyText": "sure,,thanks", "author": "gitcliff", "createdAt": "2020-07-01T19:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNjkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex fa8b2d18..d0448345 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -402,24 +403,23 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \n \t@Test(expected = MethodNotAllowedException.class)\n \tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n-\t\tPatient wrongPatient = new Patient();\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n \n-\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n \n-\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n-\n-\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n \t}\n \n \t@Test\n \tpublic void deletePatient_shouldDeletePatient() {\n-\t\tPatient newPatient = new Patient();\n-\n-\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n \n \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n-\t\tassertThat(result, CoreMatchers.notNullValue());\n-\t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n \t}\n \n \t@Test(expected = ResourceNotFoundException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNjk3NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r446516974", "bodyText": "it make more sense if you use the same patient.", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:51:03Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -376,4 +381,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdatePatient() {\n+\t\tPatient newPatient = patient;\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(newPatient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPatient));\n+\t}\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePatient_shouldThrowInvalidRequestExceptionForWrongPatientUuid() {\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPatient wrongPatient = new Patient();\n+\n+\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);", "originalCommit": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex fa8b2d18..d0448345 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -402,24 +403,23 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \n \t@Test(expected = MethodNotAllowedException.class)\n \tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n-\t\tPatient wrongPatient = new Patient();\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n \n-\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n \n-\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n-\n-\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n \t}\n \n \t@Test\n \tpublic void deletePatient_shouldDeletePatient() {\n-\t\tPatient newPatient = new Patient();\n-\n-\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n \n \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n-\t\tassertThat(result, CoreMatchers.notNullValue());\n-\t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n \t}\n \n \t@Test(expected = ResourceNotFoundException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNjk5MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r446516990", "bodyText": "not needed.", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:51:13Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -376,4 +381,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdatePatient() {\n+\t\tPatient newPatient = patient;\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(newPatient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPatient));\n+\t}\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePatient_shouldThrowInvalidRequestExceptionForWrongPatientUuid() {\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPatient wrongPatient = new Patient();\n+\n+\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeletePatient() {\n+\t\tPatient newPatient = new Patient();", "originalCommit": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex fa8b2d18..d0448345 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -402,24 +403,23 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \n \t@Test(expected = MethodNotAllowedException.class)\n \tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n-\t\tPatient wrongPatient = new Patient();\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n \n-\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n \n-\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n-\n-\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n \t}\n \n \t@Test\n \tpublic void deletePatient_shouldDeletePatient() {\n-\t\tPatient newPatient = new Patient();\n-\n-\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n \n \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n-\t\tassertThat(result, CoreMatchers.notNullValue());\n-\t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n \t}\n \n \t@Test(expected = ResourceNotFoundException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzAxMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r446517010", "bodyText": "deletePatient_shouldDeleteRequestedPatient", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:51:33Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -376,4 +381,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdatePatient() {\n+\t\tPatient newPatient = patient;\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(newPatient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPatient));\n+\t}\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePatient_shouldThrowInvalidRequestExceptionForWrongPatientUuid() {\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPatient wrongPatient = new Patient();\n+\n+\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeletePatient() {", "originalCommit": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex fa8b2d18..d0448345 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -402,24 +403,23 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \n \t@Test(expected = MethodNotAllowedException.class)\n \tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n-\t\tPatient wrongPatient = new Patient();\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n \n-\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n \n-\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n-\n-\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n \t}\n \n \t@Test\n \tpublic void deletePatient_shouldDeletePatient() {\n-\t\tPatient newPatient = new Patient();\n-\n-\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n \n \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n-\t\tassertThat(result, CoreMatchers.notNullValue());\n-\t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n \t}\n \n \t@Test(expected = ResourceNotFoundException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNzAzNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r446517037", "bodyText": "ditto", "author": "Akayeshmantha", "createdAt": "2020-06-27T11:51:48Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -376,4 +381,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdatePatient() {\n+\t\tPatient newPatient = patient;\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(newPatient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPatient));\n+\t}\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePatient_shouldThrowInvalidRequestExceptionForWrongPatientUuid() {\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPatient wrongPatient = new Patient();\n+\n+\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeletePatient() {\n+\t\tPatient newPatient = new Patient();\n+\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n+\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_PATIENT_UUID);\n+\t\torg.hl7.fhir.r4.model.OperationOutcome patient = resourceProvider.deletePatient(id);", "originalCommit": "9525f730ac3c698248e26c36d07bf3cefe32f2e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex fa8b2d18..d0448345 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -402,24 +403,23 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \n \t@Test(expected = MethodNotAllowedException.class)\n \tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n-\t\tPatient wrongPatient = new Patient();\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n \n-\t\twrongPatient.setId(WRONG_PATIENT_UUID);\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n \n-\t\twhen(patientService.update(WRONG_PATIENT_UUID, wrongPatient)).thenThrow(MethodNotAllowedException.class);\n-\n-\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), wrongPatient);\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n \t}\n \n \t@Test\n \tpublic void deletePatient_shouldDeletePatient() {\n-\t\tPatient newPatient = new Patient();\n-\n-\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(newPatient );\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n \n \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n-\t\tassertThat(result, CoreMatchers.notNullValue());\n-\t\tassertThat(result.getId(), equalTo(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n \t}\n \n \t@Test(expected = ResourceNotFoundException.class)\n"}}, {"oid": "f4bc38f80138223d1c723b31a73669c3e4dbffe3", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f4bc38f80138223d1c723b31a73669c3e4dbffe3", "message": "FM2-220:Add create,update and delete for Patient", "committedDate": "2020-07-01T18:59:53Z", "type": "forcePushed"}, {"oid": "951fb21df82f98be0464ce5114d2ba0ddbe55b08", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/951fb21df82f98be0464ce5114d2ba0ddbe55b08", "message": "FM2-220:Add create,update and delete for Patient", "committedDate": "2020-07-01T19:13:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MjMwMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453642301", "bodyText": "Please rewrite as FhirProviderUtils.buildDelete(Patient30_40.convertPatient(patient))", "author": "varung-31", "createdAt": "2020-07-13T13:18:40Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java", "diffHunk": "@@ -62,6 +72,34 @@ public Patient getPatientById(@IdParam @NotNull IdType id) {\n \t\treturn Patient30_40.convertPatient(patient);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPatient(@ResourceParam Patient patient) {\n+\t\treturn FhirProviderUtils.buildCreate(patientService.create(Patient30_40.convertPatient(patient)));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePatient(@IdParam IdType id, @ResourceParam Patient patient) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpatient.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(patientService.update(id.getIdPart(),\n+\t\t    Patient30_40.convertPatient(patient)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePatient(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Patient patient = patientService.delete(id.getIdPart());\n+\t\tif (patient == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(patient));", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\nindex 0a7a7b1c..9cb6ab6c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\n\n@@ -97,7 +96,7 @@ public class PatientFhirResourceProvider implements IResourceProvider {\n \t\tif (patient == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n \t\t}\n-\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(patient));\n+\t\treturn FhirProviderUtils.buildDelete(Patient30_40.convertPatient(patient));\n \t}\n \t\n \t@History\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MjkzOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453642939", "bodyText": "Typo in MissMatch, should be Mismatch instead", "author": "varung-31", "createdAt": "2020-07-13T13:19:37Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java", "diffHunk": "@@ -550,4 +566,94 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PATIENT_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreatePatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n+\t\tpatient.setId(PATIENT_UUID);\n+\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMockHttpServletResponse response = post(\"/Patient\").jsonContent(jsonPatient)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateExistingPatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n+\t\tpatient.setId(PATIENT_UUID);\n+\n+\t\twhen(patientService.update(anyString(), any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMockHttpServletResponse response = put(\"/Patient/\" + PATIENT_UUID).jsonContent(jsonPatient)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldErrorForNoId() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Patient/\" + PATIENT_UUID).jsonContent(jsonPatient)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldErrorForIdMissMatch() throws Exception {", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MDgyMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453650821", "bodyText": "@varung-31 First, thanks for taking the time to do these detailed reviews. Second, you might want to take advantage of GitHub's suggestion feature for some of these changes. E.g.,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updatePatient_shouldErrorForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updatePatient_shouldRaiseExceptionOnIdMismatch() throws Exception {", "author": "ibacher", "createdAt": "2020-07-13T13:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MjkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NjAyMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453666021", "bodyText": "@ibacher  I was actually unaware about how to use it. I should maybe learn it to provide more helpful suggestions", "author": "varung-31", "createdAt": "2020-07-13T13:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MjkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\nindex 9f757f3d..6a1524e2 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n\n@@ -606,7 +607,7 @@ public class PatientFhirResourceProviderWebTest extends BaseFhirR4ResourceProvid\n \t}\n \n \t@Test\n-\tpublic void updatePatient_shouldErrorForNoId() throws Exception {\n+\tpublic void updatePatient_shouldRaiseExceptionForNoId() throws Exception {\n \t\tString jsonPatient;\n \t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_NO_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MjM5MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453642390", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(patient));\n          \n          \n            \n            \t\treturn FhirProviderUtils.buildDelete(Patient30_40.convertPatient(patient));", "author": "ibacher", "createdAt": "2020-07-13T13:18:48Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java", "diffHunk": "@@ -62,6 +72,34 @@ public Patient getPatientById(@IdParam @NotNull IdType id) {\n \t\treturn Patient30_40.convertPatient(patient);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPatient(@ResourceParam Patient patient) {\n+\t\treturn FhirProviderUtils.buildCreate(patientService.create(Patient30_40.convertPatient(patient)));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePatient(@IdParam IdType id, @ResourceParam Patient patient) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpatient.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(patientService.update(id.getIdPart(),\n+\t\t    Patient30_40.convertPatient(patient)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePatient(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Patient patient = patientService.delete(id.getIdPart());\n+\t\tif (patient == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(patient));", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\nindex 0a7a7b1c..9cb6ab6c 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PatientFhirResourceProvider.java\n\n@@ -97,7 +96,7 @@ public class PatientFhirResourceProvider implements IResourceProvider {\n \t\tif (patient == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n \t\t}\n-\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(patient));\n+\t\treturn FhirProviderUtils.buildDelete(Patient30_40.convertPatient(patient));\n \t}\n \t\n \t@History\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mjc5Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453642796", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Patient patient = patientService.delete(id.getIdPart());\n          \n          \n            \n            \t\tPatient patient = patientService.delete(id.getIdPart());", "author": "ibacher", "createdAt": "2020-07-13T13:19:25Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java", "diffHunk": "@@ -60,6 +69,34 @@ public Patient getPatientById(@IdParam @NotNull IdType id) {\n \t\treturn patient;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPatient(@ResourceParam Patient patient) {\n+\t\treturn FhirProviderUtils.buildCreate(patientService.create(patient));\n+\t} \n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePatient(@IdParam IdType id, @ResourceParam Patient patient) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tpatient.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(patientService.update(id.getIdPart(),patient));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePatient(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Patient patient = patientService.delete(id.getIdPart());", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\nindex c5880b93..d86150c7 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProvider.java\n\n@@ -89,7 +89,7 @@ public class PatientFhirResourceProvider implements IResourceProvider {\n \t@Delete\n \t@SuppressWarnings(\"unused\")\n \tpublic OperationOutcome deletePatient(@IdParam @NotNull IdType id) {\n-\t\torg.hl7.fhir.r4.model.Patient patient = patientService.delete(id.getIdPart());\n+\t\tPatient patient = patientService.delete(id.getIdPart());\n \t\tif (patient == null) {\n \t\t\tthrow new ResourceNotFoundException(\"Could not find patient to delete with id \" + id.getIdPart());\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MzA1MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453643050", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tMethodOutcome result = patientFhirResourceProvider.createPatient(Patient30_40.convertPatient(patient));\n          \n          \n            \n            \t\tassertThat(result, notNullValue());\n          \n          \n            \n            \t\tMethodOutcome result = patientFhirResourceProvider.createPatient(Patient30_40.convertPatient(patient));\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\tassertThat(result, notNullValue());", "author": "ibacher", "createdAt": "2020-07-13T13:19:47Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java", "diffHunk": "@@ -415,4 +423,70 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreateNewPatient() {\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMethodOutcome result = patientFhirResourceProvider.createPatient(Patient30_40.convertPatient(patient));\n+\t\tassertThat(result, notNullValue());", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\nindex 7b14fdae..ec4c311e 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n\n@@ -420,6 +425,7 @@ public class PatientFhirR3ResourceProviderTest extends BaseFhirR3ProvenanceResou\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n+\t\t\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MzIwOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453643208", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n          \n          \n            \n            \n          \n          \n            \n            \t\tOperationOutcome result = patientFhirResourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n          \n          \n            \n            \t\tassertThat(result, notNullValue());\n          \n          \n            \n            \t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n          \n          \n            \n            \n          \n          \n            \n            \t\tOperationOutcome result = patientFhirResourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\tassertThat(result, notNullValue());", "author": "ibacher", "createdAt": "2020-07-13T13:20:00Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java", "diffHunk": "@@ -415,4 +423,70 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreateNewPatient() {\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMethodOutcome result = patientFhirResourceProvider.createPatient(Patient30_40.convertPatient(patient));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), equalTo(patient));\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeleteRequestedPatient() {\n+\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n+\n+\t\tOperationOutcome result = patientFhirResourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\nindex 7b14fdae..ec4c311e 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n\n@@ -420,6 +425,7 @@ public class PatientFhirR3ResourceProviderTest extends BaseFhirR3ProvenanceResou\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n+\t\t\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MzgxNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453643814", "bodyText": "We don't need an assertion when we have an expected exception.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tid.setValue(WRONG_PATIENT_UUID);\n          \n          \n            \n            \t\tOperationOutcome patient = patientFhirResourceProvider.deletePatient(id);\n          \n          \n            \n            \t\tassertThat(patient, nullValue());\n          \n          \n            \n            \t}\n          \n          \n            \n            \t\tid.setValue(WRONG_PATIENT_UUID);\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\tOperationOutcome patient = patientFhirResourceProvider.deletePatient(id);\n          \n          \n            \n            \t}", "author": "ibacher", "createdAt": "2020-07-13T13:20:50Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java", "diffHunk": "@@ -415,4 +423,70 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreateNewPatient() {\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMethodOutcome result = patientFhirResourceProvider.createPatient(Patient30_40.convertPatient(patient));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), equalTo(patient));\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeleteRequestedPatient() {\n+\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n+\n+\t\tOperationOutcome result = patientFhirResourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssue(), notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_PATIENT_UUID);\n+\t\tOperationOutcome patient = patientFhirResourceProvider.deletePatient(id);\n+\t\tassertThat(patient, nullValue());\n+\t}", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\nindex 7b14fdae..ec4c311e 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n\n@@ -420,6 +425,7 @@ public class PatientFhirR3ResourceProviderTest extends BaseFhirR3ProvenanceResou\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n+\t\t\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NDA3NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453644074", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(patientService.delete(WRONG_PATIENT_UUID)).thenReturn(null);\n          \n          \n            \n            \t\tpatientFhirResourceProvider.deletePatient(new IdType().setValue(WRONG_PATIENT_UUID));\n          \n          \n            \n            \t\twhen(patientService.delete(WRONG_PATIENT_UUID)).thenReturn(null);\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\tpatientFhirResourceProvider.deletePatient(new IdType().setValue(WRONG_PATIENT_UUID));", "author": "ibacher", "createdAt": "2020-07-13T13:21:13Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java", "diffHunk": "@@ -415,4 +423,70 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreateNewPatient() {\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMethodOutcome result = patientFhirResourceProvider.createPatient(Patient30_40.convertPatient(patient));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), equalTo(patient));\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeleteRequestedPatient() {\n+\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n+\n+\t\tOperationOutcome result = patientFhirResourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssue(), notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_PATIENT_UUID);\n+\t\tOperationOutcome patient = patientFhirResourceProvider.deletePatient(id);\n+\t\tassertThat(patient, nullValue());\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundExceptionWhenIdRefersToNonExistantPatient() {\n+\t\twhen(patientService.delete(WRONG_PATIENT_UUID)).thenReturn(null);\n+\t\tpatientFhirResourceProvider.deletePatient(new IdType().setValue(WRONG_PATIENT_UUID));", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\nindex 7b14fdae..ec4c311e 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n\n@@ -420,6 +425,7 @@ public class PatientFhirR3ResourceProviderTest extends BaseFhirR3ProvenanceResou\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n+\t\t\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NDQwNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453644404", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tMethodOutcome result = patientFhirResourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID),\n          \n          \n            \n            \t\t\t\tPatient30_40.convertPatient(patient));\n          \n          \n            \n            \t\tassertThat(result, notNullValue());\n          \n          \n            \n            \t\tMethodOutcome result = patientFhirResourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID),\n          \n          \n            \n            \t\t\t\tPatient30_40.convertPatient(patient));\n          \n          \n            \n            \t\t\t\t\n          \n          \n            \n            \t\tassertThat(result, notNullValue());", "author": "ibacher", "createdAt": "2020-07-13T13:21:43Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java", "diffHunk": "@@ -415,4 +423,70 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreateNewPatient() {\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMethodOutcome result = patientFhirResourceProvider.createPatient(Patient30_40.convertPatient(patient));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), equalTo(patient));\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeleteRequestedPatient() {\n+\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n+\n+\t\tOperationOutcome result = patientFhirResourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssue(), notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_PATIENT_UUID);\n+\t\tOperationOutcome patient = patientFhirResourceProvider.deletePatient(id);\n+\t\tassertThat(patient, nullValue());\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundExceptionWhenIdRefersToNonExistantPatient() {\n+\t\twhen(patientService.delete(WRONG_PATIENT_UUID)).thenReturn(null);\n+\t\tpatientFhirResourceProvider.deletePatient(new IdType().setValue(WRONG_PATIENT_UUID));\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateRequestedPatient() {\n+\t\twhen(patientService.update(eq(PATIENT_UUID), any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMethodOutcome result = patientFhirResourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID),\n+\t\t\t\tPatient30_40.convertPatient(patient));\n+\t\tassertThat(result, notNullValue());", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\nindex 7b14fdae..ec4c311e 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n\n@@ -420,6 +425,7 @@ public class PatientFhirR3ResourceProviderTest extends BaseFhirR3ProvenanceResou\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n+\t\t\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NDc3MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453644770", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(patient);\n          \n          \n            \n            \n          \n          \n            \n            \t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n          \n          \n            \n            \t\t\n          \n          \n            \n                assertThat(result, notNullValue());\n          \n          \n            \n            \twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(patient);\n          \n          \n            \n            \n          \n          \n            \n            \tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n          \n          \n            \n            \t\t\n          \n          \n            \n            \tassertThat(result, notNullValue());", "author": "ibacher", "createdAt": "2020-07-13T13:22:16Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -409,11 +416,69 @@ public void getPatientResourceHistory_shouldReturnProvenanceResources() {\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n-\t\tassertThat(resourceProvider.getPatientResourceHistory(idType).isEmpty(), is(true));\n+\t\t\n+    assertThat(resourceProvider.getPatientResourceHistory(idType).isEmpty(), is(true));\n \t\tassertThat(resourceProvider.getPatientResourceHistory(idType).size(), equalTo(0));\n \t}\n \t\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateRequestedPatient() {\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(patient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\t\n+    assertThat(result, notNullValue());", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex 15a8c3ea..818dde02 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -416,8 +415,7 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n-\t\t\n-    assertThat(resourceProvider.getPatientResourceHistory(idType).isEmpty(), is(true));\n+\t\tassertThat(resourceProvider.getPatientResourceHistory(idType).isEmpty(), is(true));\n \t\tassertThat(resourceProvider.getPatientResourceHistory(idType).size(), equalTo(0));\n \t}\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NDkwNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r453644906", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n          \n          \n            \n            \t\tassertThat(result, notNullValue());\n          \n          \n            \n            \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\tassertThat(result, notNullValue());", "author": "ibacher", "createdAt": "2020-07-13T13:22:29Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -409,11 +416,69 @@ public void getPatientResourceHistory_shouldReturnProvenanceResources() {\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n-\t\tassertThat(resourceProvider.getPatientResourceHistory(idType).isEmpty(), is(true));\n+\t\t\n+    assertThat(resourceProvider.getPatientResourceHistory(idType).isEmpty(), is(true));\n \t\tassertThat(resourceProvider.getPatientResourceHistory(idType).size(), equalTo(0));\n \t}\n \t\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateRequestedPatient() {\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(patient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\t\n+    assertThat(result, notNullValue());\n+\t\tassertThat(result.getResource(), equalTo(patient));\n+\t}\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePatient_shouldThrowInvalidRequestExceptionForWrongPatientUuid() {\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n+\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeleteRequestedPatient() {\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n+\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());", "originalCommit": "04add8776b710c139324b8f43bfefe2664c075f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex 15a8c3ea..818dde02 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -416,8 +415,7 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n-\t\t\n-    assertThat(resourceProvider.getPatientResourceHistory(idType).isEmpty(), is(true));\n+\t\tassertThat(resourceProvider.getPatientResourceHistory(idType).isEmpty(), is(true));\n \t\tassertThat(resourceProvider.getPatientResourceHistory(idType).size(), equalTo(0));\n \t}\n \t\n"}}, {"oid": "4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4fdbb7ccc9ceb198bc3e9873095c9f978b46a7c0", "message": "FM2-220:Fixing formattings", "committedDate": "2020-07-14T18:43:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0OTc5NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455049795", "bodyText": "Please remove this test. The test below achieves exactly the same purpose.", "author": "varung-31", "createdAt": "2020-07-15T13:26:51Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java", "diffHunk": "@@ -412,7 +425,78 @@ public void getPatientResourceHistory_shouldReturnProvenanceResources() {\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n+\t\t\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreateNewPatient() {\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMethodOutcome result = patientFhirResourceProvider.createPatient(Patient30_40.convertPatient(patient));\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(patient));\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeleteRequestedPatient() {\n+\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n+\n+\t\tOperationOutcome result = patientFhirResourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssue(), notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_PATIENT_UUID);\n+\t\t\n+\t\tOperationOutcome patient = patientFhirResourceProvider.deletePatient(id);\n+\t}", "originalCommit": "74e667eb027c068cda3c389410465b3c23eb1673", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2dbe3eb74badd7466e74971216ce223b0b362b1", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\nindex ec4c311e..f01f7fd6 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r3/PatientFhirR3ResourceProviderTest.java\n\n@@ -425,7 +421,6 @@ public class PatientFhirR3ResourceProviderTest extends BaseFhirR3ProvenanceResou\n \tpublic void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tIdType idType = new IdType();\n \t\tidType.setValue(WRONG_PATIENT_UUID);\n-\t\t\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).isEmpty(), is(true));\n \t\tassertThat(patientFhirResourceProvider.getPatientHistoryById(idType).size(), equalTo(0));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1OTEyOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455059129", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n          \n          \n            \n            \t\tOperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));", "author": "varung-31", "createdAt": "2020-07-15T13:40:00Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -416,4 +422,60 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateRequestedPatient() {\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(patient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(patient));\n+\t}\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePatient_shouldThrowInvalidRequestExceptionForWrongPatientUuid() {\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n+\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeleteRequestedPatient() {\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n+\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));", "originalCommit": "74e667eb027c068cda3c389410465b3c23eb1673", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "052614e4b593bf886c059f7201846ad092f59f7d", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex 818dde02..c8ff75e8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -453,7 +453,7 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \tpublic void deletePatient_shouldDeleteRequestedPatient() {\n \t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n \n-\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tOperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n \t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MDE2MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455060160", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tIdType id = new IdType();\n          \n          \n            \n            \t\tid.setValue(WRONG_PATIENT_UUID);\n          \n          \n            \n            \t\torg.hl7.fhir.r4.model.OperationOutcome patient = resourceProvider.deletePatient(id);\n          \n          \n            \n            \t\tassertThat(patient, nullValue());\n          \n          \n            \n            \t\twhen(patientService.delete(WRONG_PATIENT_UUID)).thenReturn(null);\n          \n          \n            \n            \n          \n          \n            \n            \t\tpatientFhirResourceProvider.deletePatient(new IdType().setValue(WRONG_PATIENT_UUID));", "author": "varung-31", "createdAt": "2020-07-15T13:41:23Z", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -416,4 +422,60 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \tprivate List<IBaseResource> getResources(IBundleProvider result) {\n \t\treturn result.getResources(0, 10);\n \t}\n+\t\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateRequestedPatient() {\n+\n+\t\twhen(patientService.update(PATIENT_UUID, patient)).thenReturn(patient);\n+\n+\t\tMethodOutcome result = resourceProvider.updatePatient(new IdType().setValue(PATIENT_UUID), patient);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(patient));\n+\t}\n+\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePatient_shouldThrowInvalidRequestExceptionForWrongPatientUuid() {\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(InvalidRequestException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePatientShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tpatient.setId(WRONG_PATIENT_UUID);\n+\n+\t\twhen(patientService.update(WRONG_PATIENT_UUID, patient)).thenThrow(MethodNotAllowedException.class);\n+\n+\t\tresourceProvider.updatePatient(new IdType().setValue(WRONG_PATIENT_UUID), patient);\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeleteRequestedPatient() {\n+\t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n+\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePatient_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_PATIENT_UUID);\n+\t\torg.hl7.fhir.r4.model.OperationOutcome patient = resourceProvider.deletePatient(id);\n+\t\tassertThat(patient, nullValue());", "originalCommit": "74e667eb027c068cda3c389410465b3c23eb1673", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "052614e4b593bf886c059f7201846ad092f59f7d", "chunk": "diff --git a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\nindex 818dde02..c8ff75e8 100644\n--- a/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n+++ b/api/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderTest.java\n\n@@ -453,7 +453,7 @@ public class PatientFhirResourceProviderTest extends BaseFhirProvenanceResourceT\n \tpublic void deletePatient_shouldDeleteRequestedPatient() {\n \t\twhen(patientService.delete(PATIENT_UUID)).thenReturn(patient);\n \n-\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n+\t\tOperationOutcome result = resourceProvider.deletePatient(new IdType().setValue(PATIENT_UUID));\n \t\tassertThat(result, notNullValue());\n \t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n \t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MDU1MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455060551", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n          \n          \n            \n            \t\tPatient patient = new Patient();", "author": "varung-31", "createdAt": "2020-07-15T13:41:59Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java", "diffHunk": "@@ -550,4 +567,94 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PATIENT_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreatePatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();", "originalCommit": "74e667eb027c068cda3c389410465b3c23eb1673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyNTQ0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455225444", "bodyText": "its done", "author": "gitcliff", "createdAt": "2020-07-15T17:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MDU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2dbe3eb74badd7466e74971216ce223b0b362b1", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\nindex 6a1524e2..02d23352 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n\n@@ -607,7 +607,7 @@ public class PatientFhirResourceProviderWebTest extends BaseFhirR4ResourceProvid\n \t}\n \n \t@Test\n-\tpublic void updatePatient_shouldRaiseExceptionForNoId() throws Exception {\n+\tpublic void updatePatient_shouldErrorForNoId() throws Exception {\n \t\tString jsonPatient;\n \t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_NO_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MDY1Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455060656", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n          \n          \n            \n            \t\twhen(patientService.create(any(Patient.class))).thenReturn(patient);", "author": "varung-31", "createdAt": "2020-07-15T13:42:09Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java", "diffHunk": "@@ -550,4 +567,94 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PATIENT_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreatePatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n+\t\tpatient.setId(PATIENT_UUID);\n+\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);", "originalCommit": "74e667eb027c068cda3c389410465b3c23eb1673", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2dbe3eb74badd7466e74971216ce223b0b362b1", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\nindex 6a1524e2..02d23352 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n\n@@ -607,7 +607,7 @@ public class PatientFhirResourceProviderWebTest extends BaseFhirR4ResourceProvid\n \t}\n \n \t@Test\n-\tpublic void updatePatient_shouldRaiseExceptionForNoId() throws Exception {\n+\tpublic void updatePatient_shouldErrorForNoId() throws Exception {\n \t\tString jsonPatient;\n \t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_NO_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MDgwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455060805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n          \n          \n            \n            \t\tPatient patient = new Patient();", "author": "varung-31", "createdAt": "2020-07-15T13:42:21Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java", "diffHunk": "@@ -550,4 +567,94 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PATIENT_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreatePatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n+\t\tpatient.setId(PATIENT_UUID);\n+\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMockHttpServletResponse response = post(\"/Patient\").jsonContent(jsonPatient)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateExistingPatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();", "originalCommit": "74e667eb027c068cda3c389410465b3c23eb1673", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2dbe3eb74badd7466e74971216ce223b0b362b1", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\nindex 6a1524e2..02d23352 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n\n@@ -607,7 +607,7 @@ public class PatientFhirResourceProviderWebTest extends BaseFhirR4ResourceProvid\n \t}\n \n \t@Test\n-\tpublic void updatePatient_shouldRaiseExceptionForNoId() throws Exception {\n+\tpublic void updatePatient_shouldErrorForNoId() throws Exception {\n \t\tString jsonPatient;\n \t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_NO_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MDkwNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455060907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(patientService.update(anyString(), any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n          \n          \n            \n            \t\twhen(patientService.update(anyString(), any(Patient.class))).thenReturn(patient);", "author": "varung-31", "createdAt": "2020-07-15T13:42:29Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java", "diffHunk": "@@ -550,4 +567,94 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PATIENT_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreatePatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n+\t\tpatient.setId(PATIENT_UUID);\n+\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMockHttpServletResponse response = post(\"/Patient\").jsonContent(jsonPatient)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateExistingPatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n+\t\tpatient.setId(PATIENT_UUID);\n+\n+\t\twhen(patientService.update(anyString(), any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);", "originalCommit": "74e667eb027c068cda3c389410465b3c23eb1673", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2dbe3eb74badd7466e74971216ce223b0b362b1", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\nindex 6a1524e2..02d23352 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n\n@@ -607,7 +607,7 @@ public class PatientFhirResourceProviderWebTest extends BaseFhirR4ResourceProvid\n \t}\n \n \t@Test\n-\tpublic void updatePatient_shouldRaiseExceptionForNoId() throws Exception {\n+\tpublic void updatePatient_shouldErrorForNoId() throws Exception {\n \t\tString jsonPatient;\n \t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_NO_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MTEzNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/226#discussion_r455061134", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n          \n          \n            \n            \t\tPatient patient = new Patient();", "author": "varung-31", "createdAt": "2020-07-15T13:42:47Z", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java", "diffHunk": "@@ -550,4 +567,94 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(PATIENT_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void createPatient_shouldCreatePatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n+\t\tpatient.setId(PATIENT_UUID);\n+\n+\t\twhen(patientService.create(any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMockHttpServletResponse response = post(\"/Patient\").jsonContent(jsonPatient)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldUpdateExistingPatient() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();\n+\t\tpatient.setId(PATIENT_UUID);\n+\n+\t\twhen(patientService.update(anyString(), any(org.hl7.fhir.r4.model.Patient.class))).thenReturn(patient);\n+\n+\t\tMockHttpServletResponse response = put(\"/Patient/\" + PATIENT_UUID).jsonContent(jsonPatient)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldRaiseExceptionForNoId() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Patient/\" + PATIENT_UUID).jsonContent(jsonPatient)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updatePatient_shouldRaiseExceptionOnIdMismatch() throws Exception {\n+\t\tString jsonPatient;\n+\t\ttry (InputStream is = this.getClass().getClassLoader()\n+\t\t\t\t.getResourceAsStream(JSON_UPDATE_PATIENT_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPatient = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Patient/\" + BAD_PATIENT_UUID).jsonContent(jsonPatient)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\n+\t@Test\n+\tpublic void deletePatient_shouldDeletePatient() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(PATIENT_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\n+\t\torg.hl7.fhir.r4.model.Patient patient = new org.hl7.fhir.r4.model.Patient();", "originalCommit": "74e667eb027c068cda3c389410465b3c23eb1673", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2dbe3eb74badd7466e74971216ce223b0b362b1", "chunk": "diff --git a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\nindex 6a1524e2..02d23352 100644\n--- a/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n+++ b/omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PatientFhirResourceProviderWebTest.java\n\n@@ -607,7 +607,7 @@ public class PatientFhirResourceProviderWebTest extends BaseFhirR4ResourceProvid\n \t}\n \n \t@Test\n-\tpublic void updatePatient_shouldRaiseExceptionForNoId() throws Exception {\n+\tpublic void updatePatient_shouldErrorForNoId() throws Exception {\n \t\tString jsonPatient;\n \t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PATIENT_NO_ID_PATH)) {\n \t\t\tObjects.requireNonNull(is);\n"}}, {"oid": "e2dbe3eb74badd7466e74971216ce223b0b362b1", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e2dbe3eb74badd7466e74971216ce223b0b362b1", "message": "FM2-220:Add create,update and delete for Patient", "committedDate": "2020-07-15T14:43:29Z", "type": "commit"}, {"oid": "140b6d8241ef880e7692b08b8842c4f42f05b5e5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/140b6d8241ef880e7692b08b8842c4f42f05b5e5", "message": "FM2-220:Fixing formattings", "committedDate": "2020-07-15T14:43:32Z", "type": "commit"}, {"oid": "5ddd1a16e094ba5d90f7d04a90b4c7551e5d2fc6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5ddd1a16e094ba5d90f7d04a90b4c7551e5d2fc6", "message": "FM2-220:removing extra spaces", "committedDate": "2020-07-15T14:43:33Z", "type": "commit"}, {"oid": "052614e4b593bf886c059f7201846ad092f59f7d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/052614e4b593bf886c059f7201846ad092f59f7d", "message": "FM2-220:Fix formatts", "committedDate": "2020-07-15T15:00:59Z", "type": "commit"}, {"oid": "052614e4b593bf886c059f7201846ad092f59f7d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/052614e4b593bf886c059f7201846ad092f59f7d", "message": "FM2-220:Fix formatts", "committedDate": "2020-07-15T15:00:59Z", "type": "forcePushed"}, {"oid": "e519b0b8c554f0e3197bd7ba3c1f958f13a14931", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e519b0b8c554f0e3197bd7ba3c1f958f13a14931", "message": "FM2-220:Fix formattings", "committedDate": "2020-07-15T17:36:04Z", "type": "commit"}, {"oid": "b21b3540e62f0daae97b61545a96d7e1f3849eb7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b21b3540e62f0daae97b61545a96d7e1f3849eb7", "message": "FM2-220:Fix formattings", "committedDate": "2020-07-15T18:35:54Z", "type": "commit"}, {"oid": "c8b02296d32941dd831ce33f08536a4a5ba6a4b1", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c8b02296d32941dd831ce33f08536a4a5ba6a4b1", "message": "Update PatientWebTest_create.json", "committedDate": "2020-07-17T18:39:59Z", "type": "commit"}]}