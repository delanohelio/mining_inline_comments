{"pr_number": 297, "pr_title": "FM2-290: Add Integration Tests for Person", "pr_createdAt": "2020-08-28T08:58:23Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwNzY0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479207644", "bodyText": "You get an error for this test because \"family\" is not a configured endpoint for the Person resource. You might as well try:\nget(\"/Person?name=Doe&_sort=given\")", "author": "varung-31", "createdAt": "2020-08-28T12:07:52Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n+\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\t\n+\t\tfor (String search_data : PERSON_SEARCH_DATA_FILES) {\n+\t\t\texecuteDataSet(search_data);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + WRONG_PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Person/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Person.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person?family=Doe&_sort=given\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"Doe\"))))));\n+\t\tassertThat(entries,\n+\t\t    containsInRelativeOrder(\n+\t\t        hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"Jean\")))),\n+\t\t        hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"John\"))))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPersonsAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Person/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Person.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPersonsAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person?family=Doe&_sort=given\").accept(FhirMediaTypes.XML).go();", "originalCommit": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1OTk1Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479259953", "bodyText": "Hmmm... that's actually a bug in the endpoint. We should support all the standard name properties on Person too.", "author": "ibacher", "createdAt": "2020-08-28T12:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwNzY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI2MzQ0NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479263445", "bodyText": "@ibacher I don't think we can do that. That's because FHIR itself doesn't allow given and family for the person resource.\nhttp://hl7.org/implement/standards/fhir/person.html\nThat's why we don't have Person.SP_GIVEN or Person.SP_FAMILY available.", "author": "varung-31", "createdAt": "2020-08-28T12:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwNzY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5MTM5Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479291392", "bodyText": "I guess that's why they aren't there!... Well that's a bit silly, but ok.", "author": "ibacher", "createdAt": "2020-08-28T13:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwNzY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "961c600578a71bc091fb932ad6778908b6f312bb", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\nindex 38621eaa..38bcf742 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n\n@@ -46,14 +46,13 @@ import org.springframework.mock.web.MockHttpServletResponse;\n \n public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n \t\n-\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n-\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\tprivate static final String PERSON_SEARCH_DATA_FILES = \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\";\n \t\n \tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n \t\n \tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n \t\n-\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\tprivate static final String PERSON_UUID = \"5c521595-4e12-46b0-8248-b8f2d3697766\";\n \t\n \tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwODEyMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479208120", "bodyText": "You get an error for this test because \"family\" is not a configured endpoint for the Person resource. You might as well try:\nget(\"/Person?name=Doe&_sort=given\")\nYou could take a look here for the configured endpoints-\nhttps://github.com/openmrs/openmrs-module-fhir2/blob/master/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProvider.java", "author": "varung-31", "createdAt": "2020-08-28T12:08:17Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n+\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\t\n+\t\tfor (String search_data : PERSON_SEARCH_DATA_FILES) {\n+\t\t\texecuteDataSet(search_data);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + WRONG_PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Person/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Person.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person?family=Doe&_sort=given\").accept(FhirMediaTypes.JSON).go();", "originalCommit": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "961c600578a71bc091fb932ad6778908b6f312bb", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\nindex 38621eaa..38bcf742 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n\n@@ -46,14 +46,13 @@ import org.springframework.mock.web.MockHttpServletResponse;\n \n public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n \t\n-\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n-\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\tprivate static final String PERSON_SEARCH_DATA_FILES = \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\";\n \t\n \tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n \t\n \tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n \t\n-\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\tprivate static final String PERSON_UUID = \"5c521595-4e12-46b0-8248-b8f2d3697766\";\n \t\n \tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMTkxMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479231913", "bodyText": "Please complete this as well before marking the PR as ready for review. You might make it a draft for now", "author": "varung-31", "createdAt": "2020-08-28T12:28:32Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.openmrs.module.fhir2.providers.r4;\n+\n+public class PersonFhirResourceProviderIntegrationTest {\n+", "originalCommit": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MTU4Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479251587", "bodyText": "yes @varung-31 am going to implement r4 to ,,wanted to first deal with errors in r3", "author": "gitcliff", "createdAt": "2020-08-28T12:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "961c600578a71bc091fb932ad6778908b6f312bb", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderIntegrationTest.java\nindex a9eb9062..9467d2af 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderIntegrationTest.java\n\n@@ -1,5 +1,451 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n package org.openmrs.module.fhir2.providers.r4;\n \n-public class PersonFhirResourceProviderIntegrationTest {\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n \n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.OperationOutcome;\n+import org.hl7.fhir.r4.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR4IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String PERSON_SEARCH_DATA_FILES = \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"5c521595-4e12-46b0-8248-b8f2d3697766\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(PERSON_SEARCH_DATA_FILES);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + WRONG_PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R4/Person/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Person.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person?name=voided&_sort=given\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries,\n+\t\t    everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"voided\"))))));\n+\t\tassertThat(entries, containsInRelativeOrder(\n+\t\t    // hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"Jean\")))),\n+\t\t    hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"I\"))))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPersonsAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R4/Person/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Person.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPersonsAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person?name=voided&_sort=given\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries,\n+\t\t    everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"voided\"))))));\n+\t\tassertThat(entries, containsInRelativeOrder(\n+\t\t    // hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"Jean\")))),\n+\t\t    hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"I\"))))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzNDk4Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479234986", "bodyText": "This can be written as a private static final variable since there is only one test data file to execute.", "author": "varung-31", "createdAt": "2020-08-28T12:31:03Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {", "originalCommit": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "961c600578a71bc091fb932ad6778908b6f312bb", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\nindex 38621eaa..38bcf742 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n\n@@ -46,14 +46,13 @@ import org.springframework.mock.web.MockHttpServletResponse;\n \n public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n \t\n-\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n-\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\tprivate static final String PERSON_SEARCH_DATA_FILES = \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\";\n \t\n \tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n \t\n \tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n \t\n-\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\tprivate static final String PERSON_UUID = \"5c521595-4e12-46b0-8248-b8f2d3697766\";\n \t\n \tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1NjM0Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479256347", "bodyText": "@varung-31 when i look in to the current error ie\n[ERROR]   PersonFhirResourceProviderIntegrationTest.shouldDeleteExistingPerson:344                                                                                                               Expected: response with HTTP status indicating request was handled successfully                                                                                                                       but: response with status code <410> with message \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\"\nthrown on this method the uuid is deleted successfully, thats why we have  code <410> with message \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\" tho am not quite sure as to why the response message here is negative", "author": "gitcliff", "createdAt": "2020-08-28T12:51:52Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n+\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\t\n+\t\tfor (String search_data : PERSON_SEARCH_DATA_FILES) {\n+\t\t\texecuteDataSet(search_data);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + WRONG_PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());", "originalCommit": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI2NjA5Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479266093", "bodyText": "Admittedly, we should improve the message here somewhat, especially as I don't think that response should be returned from a delete() operation. So what happens in delete() is first we get() the result. In get(), if the result is retired or voided already, we throw an exception. This is to ensure that an attempt to get() a record after it's been delete generates an error correctly.\nThe short version is that you're essentially asking to delete an already-voided Person record, so maybe try testing the functionality with a different Person. Nonetheless, that's a valuable error to have brought out.", "author": "ibacher", "createdAt": "2020-08-28T13:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1NjM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI2NjY3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479266677", "bodyText": "@gitcliff i don't think that is the case. A 410 error means that the resource you are trying to delete is GONE. I think it might have been voided somewhere. We need to check where the bug is.\nYes, I was trying to say exactly what @ibacher mentioned.", "author": "varung-31", "createdAt": "2020-08-28T13:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1NjM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "961c600578a71bc091fb932ad6778908b6f312bb", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\nindex 38621eaa..38bcf742 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n\n@@ -46,14 +46,13 @@ import org.springframework.mock.web.MockHttpServletResponse;\n \n public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n \t\n-\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n-\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\tprivate static final String PERSON_SEARCH_DATA_FILES = \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\";\n \t\n \tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n \t\n \tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n \t\n-\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\tprivate static final String PERSON_UUID = \"5c521595-4e12-46b0-8248-b8f2d3697766\";\n \t\n \tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n \t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI2OTE1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479269155", "bodyText": "@varung-31  the same goes here with this error  of which i think the person must be some how connect to a particular patient in the system", "author": "gitcliff", "createdAt": "2020-08-28T13:06:24Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n+\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\t\n+\t\tfor (String search_data : PERSON_SEARCH_DATA_FILES) {\n+\t\t\texecuteDataSet(search_data);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());", "originalCommit": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "961c600578a71bc091fb932ad6778908b6f312bb", "chunk": "diff --git a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\nindex 38621eaa..38bcf742 100644\n--- a/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n+++ b/integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java\n\n@@ -46,14 +46,13 @@ import org.springframework.mock.web.MockHttpServletResponse;\n \n public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n \t\n-\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n-\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\tprivate static final String PERSON_SEARCH_DATA_FILES = \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\";\n \t\n \tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n \t\n \tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n \t\n-\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\tprivate static final String PERSON_UUID = \"5c521595-4e12-46b0-8248-b8f2d3697766\";\n \t\n \tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n \t\n"}}, {"oid": "fc6d6e1b7a6277fe77029059000052070bf217f8", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/fc6d6e1b7a6277fe77029059000052070bf217f8", "message": "FM2-290:Add Integration Tests for Person", "committedDate": "2020-08-31T17:14:56Z", "type": "commit"}, {"oid": "961c600578a71bc091fb932ad6778908b6f312bb", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/961c600578a71bc091fb932ad6778908b6f312bb", "message": "FM2-290:Add Integration Tests for Person", "committedDate": "2020-09-01T08:47:17Z", "type": "forcePushed"}, {"oid": "3f3340d646743091d65c8c1917e52d3926dee665", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3f3340d646743091d65c8c1917e52d3926dee665", "message": "FM2-290:Add Integration Tests for Person", "committedDate": "2020-09-01T09:01:37Z", "type": "commit"}, {"oid": "3f3340d646743091d65c8c1917e52d3926dee665", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3f3340d646743091d65c8c1917e52d3926dee665", "message": "FM2-290:Add Integration Tests for Person", "committedDate": "2020-09-01T09:01:37Z", "type": "forcePushed"}, {"oid": "a3282308d425a39e76757c9237496b21795c7518", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a3282308d425a39e76757c9237496b21795c7518", "message": "FM2-290:Add integration tests for Person", "committedDate": "2020-09-03T08:15:23Z", "type": "commit"}]}