{"pr_number": 255, "pr_title": "FM2-252: Add support for relative path with prefix 'openmrs:' for narrative templates", "pr_createdAt": "2020-07-13T14:14:39Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2OTUxNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r453769514", "bodyText": "Here is the main modification which has been done to support openmrs: prefixed relative paths.", "author": "ShivanshRakesh", "createdAt": "2020-07-13T16:19:03Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.context.ConfigurationException;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.narrative.DefaultThymeleafNarrativeGenerator;\n+import ca.uhn.fhir.narrative2.INarrativeTemplate;\n+import ca.uhn.fhir.narrative2.INarrativeTemplateManifest;\n+import ca.uhn.fhir.narrative2.TemplateTypeEnum;\n+import com.google.common.base.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.util.OpenmrsUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OpenMRSNarrativeTemplateManifest implements INarrativeTemplateManifest {\n+\t\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(OpenMRSNarrativeTemplateManifest.class);\n+\t\n+\tprivate final Map<String, List<OpenMRSNarrativeTemplate>> myStyleToResourceTypeToTemplate;\n+\t\n+\tprivate final Map<String, List<OpenMRSNarrativeTemplate>> myStyleToDatatypeToTemplate;\n+\t\n+\tprivate final Map<String, List<OpenMRSNarrativeTemplate>> myStyleToNameToTemplate;\n+\t\n+\tprivate final int myTemplateCount;\n+\t\n+\tprivate OpenMRSNarrativeTemplateManifest(Collection<OpenMRSNarrativeTemplate> theTemplates) {\n+\t\tMap<String, List<OpenMRSNarrativeTemplate>> resourceTypeToTemplate = new HashMap<>();\n+\t\tMap<String, List<OpenMRSNarrativeTemplate>> datatypeToTemplate = new HashMap<>();\n+\t\tMap<String, List<OpenMRSNarrativeTemplate>> nameToTemplate = new HashMap<>();\n+\t\t\n+\t\tfor (OpenMRSNarrativeTemplate nextTemplate : theTemplates) {\n+\t\t\tnameToTemplate.computeIfAbsent(nextTemplate.getTemplateName(), t -> new ArrayList<>()).add(nextTemplate);\n+\t\t\tfor (String nextResourceType : nextTemplate.getAppliesToResourceTypes()) {\n+\t\t\t\tresourceTypeToTemplate.computeIfAbsent(nextResourceType.toUpperCase(), t -> new ArrayList<>())\n+\t\t\t\t        .add(nextTemplate);\n+\t\t\t}\n+\t\t\tfor (String nextDataType : nextTemplate.getAppliesToDataTypes()) {\n+\t\t\t\tdatatypeToTemplate.computeIfAbsent(nextDataType.toUpperCase(), t -> new ArrayList<>()).add(nextTemplate);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tmyTemplateCount = theTemplates.size();\n+\t\tmyStyleToNameToTemplate = makeImmutable(nameToTemplate);\n+\t\tmyStyleToResourceTypeToTemplate = makeImmutable(resourceTypeToTemplate);\n+\t\tmyStyleToDatatypeToTemplate = makeImmutable(datatypeToTemplate);\n+\t}\n+\t\n+\tpublic int getNamedTemplateCount() {\n+\t\treturn myTemplateCount;\n+\t}\n+\t\n+\t@Override\n+\tpublic List<INarrativeTemplate> getTemplateByResourceName(FhirContext theFhirContext,\n+\t        EnumSet<TemplateTypeEnum> theStyles, String theResourceName) {\n+\t\treturn getFromMap(theStyles, theResourceName.toUpperCase(), myStyleToResourceTypeToTemplate);\n+\t}\n+\t\n+\t@Override\n+\tpublic List<INarrativeTemplate> getTemplateByName(FhirContext theFhirContext, EnumSet<TemplateTypeEnum> theStyles,\n+\t        String theName) {\n+\t\treturn getFromMap(theStyles, theName, myStyleToNameToTemplate);\n+\t}\n+\t\n+\t@Override\n+\tpublic List<INarrativeTemplate> getTemplateByElement(FhirContext theFhirContext, EnumSet<TemplateTypeEnum> theStyles,\n+\t        IBase theElement) {\n+\t\tif (theElement instanceof IBaseResource) {\n+\t\t\tString resourceName = theFhirContext.getResourceDefinition((IBaseResource) theElement).getName();\n+\t\t\treturn getTemplateByResourceName(theFhirContext, theStyles, resourceName);\n+\t\t} else {\n+\t\t\tString datatypeName = theFhirContext.getElementDefinition(theElement.getClass()).getName();\n+\t\t\treturn getFromMap(theStyles, datatypeName.toUpperCase(), myStyleToDatatypeToTemplate);\n+\t\t}\n+\t}\n+\t\n+\tpublic static OpenMRSNarrativeTemplateManifest forManifestFileLocation(String... thePropertyFilePaths)\n+\t        throws IOException {\n+\t\treturn forManifestFileLocation(Arrays.asList(thePropertyFilePaths));\n+\t}\n+\t\n+\tpublic static OpenMRSNarrativeTemplateManifest forManifestFileLocation(Collection<String> thePropertyFilePaths)\n+\t        throws IOException {\n+\t\tourLog.debug(\"Loading narrative properties file(s): {}\", thePropertyFilePaths);\n+\t\t\n+\t\tList<String> manifestFileContents = new ArrayList<>(thePropertyFilePaths.size());\n+\t\tfor (String next : thePropertyFilePaths) {\n+\t\t\tString resource = loadResource(next);\n+\t\t\tmanifestFileContents.add(resource);\n+\t\t}\n+\t\t\n+\t\treturn forManifestFileContents(manifestFileContents);\n+\t}\n+\t\n+\tpublic static OpenMRSNarrativeTemplateManifest forManifestFileContents(String... theResources) throws IOException {\n+\t\treturn forManifestFileContents(Arrays.asList(theResources));\n+\t}\n+\t\n+\tpublic static OpenMRSNarrativeTemplateManifest forManifestFileContents(Collection<String> theResources)\n+\t        throws IOException {\n+\t\tList<OpenMRSNarrativeTemplate> templates = new ArrayList<>();\n+\t\tfor (String next : theResources) {\n+\t\t\ttemplates.addAll(loadProperties(next));\n+\t\t}\n+\t\treturn new OpenMRSNarrativeTemplateManifest(templates);\n+\t}\n+\t\n+\tprivate static Collection<OpenMRSNarrativeTemplate> loadProperties(String theManifestText) throws IOException {\n+\t\tMap<String, OpenMRSNarrativeTemplate> nameToTemplate = new HashMap<>();\n+\t\t\n+\t\tProperties file = new Properties();\n+\t\t\n+\t\tfile.load(new StringReader(theManifestText));\n+\t\tfor (Object nextKeyObj : file.keySet()) {\n+\t\t\tString nextKey = (String) nextKeyObj;\n+\t\t\tValidate.isTrue(StringUtils.countMatches(nextKey, \".\") == 1, \"Invalid narrative property file key: %s\", nextKey);\n+\t\t\tString name = nextKey.substring(0, nextKey.indexOf('.'));\n+\t\t\tValidate.notBlank(name, \"Invalid narrative property file key: %s\", nextKey);\n+\t\t\t\n+\t\t\tOpenMRSNarrativeTemplate nextTemplate = nameToTemplate.computeIfAbsent(name,\n+\t\t\t    t -> new OpenMRSNarrativeTemplate().setTemplateName(name));\n+\t\t\t\n+\t\t\tValidate.isTrue(!nextKey.endsWith(\".class\"),\n+\t\t\t    \"Narrative manifest does not support specifying templates by class name - Use \\\"[name].resourceType=[resourceType]\\\" instead\");\n+\t\t\t\n+\t\t\tif (nextKey.endsWith(\".profile\")) {\n+\t\t\t\tString profile = file.getProperty(nextKey);\n+\t\t\t\tif (isNotBlank(profile)) {\n+\t\t\t\t\tnextTemplate.addAppliesToProfile(profile);\n+\t\t\t\t}\n+\t\t\t} else if (nextKey.endsWith(\".resourceType\")) {\n+\t\t\t\tString resourceType = file.getProperty(nextKey);\n+\t\t\t\tArrays.stream(resourceType.split(\",\")).map(t -> t.trim()).filter(t -> isNotBlank(t))\n+\t\t\t\t        .forEach(t -> nextTemplate.addAppliesToResourceType(t));\n+\t\t\t} else if (nextKey.endsWith(\".dataType\")) {\n+\t\t\t\tString dataType = file.getProperty(nextKey);\n+\t\t\t\tArrays.stream(dataType.split(\",\")).map(t -> t.trim()).filter(t -> isNotBlank(t))\n+\t\t\t\t        .forEach(t -> nextTemplate.addAppliesToDatatype(t));\n+\t\t\t} else if (nextKey.endsWith(\".style\")) {\n+\t\t\t\tString templateTypeName = file.getProperty(nextKey).toUpperCase();\n+\t\t\t\tTemplateTypeEnum templateType = TemplateTypeEnum.valueOf(templateTypeName);\n+\t\t\t\tnextTemplate.setTemplateType(templateType);\n+\t\t\t} else if (nextKey.endsWith(\".contextPath\")) {\n+\t\t\t\tString contextPath = file.getProperty(nextKey);\n+\t\t\t\tnextTemplate.setContextPath(contextPath);\n+\t\t\t} else if (nextKey.endsWith(\".narrative\")) {\n+\t\t\t\tString narrativePropName = name + \".narrative\";\n+\t\t\t\tString narrativeName = file.getProperty(narrativePropName);\n+\t\t\t\tif (isNotBlank(narrativeName)) {\n+\t\t\t\t\tnextTemplate.setTemplateFileName(narrativeName);\n+\t\t\t\t}\n+\t\t\t} else if (nextKey.endsWith(\".title\")) {\n+\t\t\t\tourLog.debug(\"Ignoring title property as narrative generator no longer generates titles: {}\", nextKey);\n+\t\t\t} else {\n+\t\t\t\tthrow new ConfigurationException(\"Invalid property name: \" + nextKey\n+\t\t\t\t        + \" - the key must end in one of the expected extensions \"\n+\t\t\t\t        + \"'.profile', '.resourceType', '.dataType', '.style', '.contextPath', '.narrative', '.title'\");\n+\t\t\t}\n+\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn nameToTemplate.values();\n+\t}\n+\t\n+\tstatic String loadResource(String name) throws IOException {\n+\t\tif (name.startsWith(\"classpath:\")) {\n+\t\t\tString cpName = name.substring(\"classpath:\".length());\n+\t\t\ttry (InputStream resource = DefaultThymeleafNarrativeGenerator.class.getResourceAsStream(cpName)) {\n+\t\t\t\tif (resource == null) {\n+\t\t\t\t\ttry (InputStream resource2 = DefaultThymeleafNarrativeGenerator.class\n+\t\t\t\t\t        .getResourceAsStream(\"/\" + cpName)) {\n+\t\t\t\t\t\tif (resource2 == null) {\n+\t\t\t\t\t\t\tthrow new IOException(\"Can not find '\" + cpName + \"' on classpath\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn IOUtils.toString(resource2, Charsets.UTF_8);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn IOUtils.toString(resource, Charsets.UTF_8);\n+\t\t\t}\n+\t\t} else if (name.startsWith(\"file:\")) {\n+\t\t\tFile file = new File(name.substring(\"file:\".length()));\n+\t\t\tif (file.exists() == false) {\n+\t\t\t\tthrow new IOException(\"File not found: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\ttry (FileInputStream inputStream = new FileInputStream(file)) {\n+\t\t\t\treturn IOUtils.toString(inputStream, Charsets.UTF_8);\n+\t\t\t}\n+\t\t} else if (name.startsWith(\"openmrs:\")) {", "originalCommit": "5100d933285a6f8509d8c8e020cba363dc525200", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2801df075df1f3dce5bb85ddb8a738d1d721c02", "chunk": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java\nindex b3c516c5..ffa36c2e 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java\n\n@@ -187,7 +187,6 @@ public class OpenMRSNarrativeTemplateManifest implements INarrativeTemplateManif\n \t\t\t\t        + \" - the key must end in one of the expected extensions \"\n \t\t\t\t        + \"'.profile', '.resourceType', '.dataType', '.style', '.contextPath', '.narrative', '.title'\");\n \t\t\t}\n-\t\t\t\n \t\t}\n \t\t\n \t\treturn nameToTemplate.values();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MDg4Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r453770882", "bodyText": "The modified loadResource() method has been called here.", "author": "ShivanshRakesh", "createdAt": "2020-07-13T16:21:16Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import ca.uhn.fhir.narrative2.INarrativeTemplate;\n+import ca.uhn.fhir.narrative2.TemplateTypeEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import org.hl7.fhir.instance.model.api.IBase;\n+\n+public class OpenMRSNarrativeTemplate implements INarrativeTemplate {\n+\t\n+\tprivate String myTemplateFileName;\n+\t\n+\tprivate Set<String> myAppliesToProfiles = new HashSet<>();\n+\t\n+\tprivate Set<String> myAppliesToResourceTypes = new HashSet<>();\n+\t\n+\tprivate Set<String> myAppliesToDataTypes = new HashSet<>();\n+\t\n+\tprivate Set<Class<? extends IBase>> myAppliesToResourceClasses = new HashSet<>();\n+\t\n+\tprivate TemplateTypeEnum myTemplateType = TemplateTypeEnum.THYMELEAF;\n+\t\n+\tprivate String myContextPath;\n+\t\n+\tprivate String myTemplateName;\n+\t\n+\tpublic Set<String> getAppliesToDataTypes() {\n+\t\treturn Collections.unmodifiableSet(myAppliesToDataTypes);\n+\t}\n+\t\n+\t@Override\n+\tpublic String getContextPath() {\n+\t\treturn myContextPath;\n+\t}\n+\t\n+\tpublic void setContextPath(String theContextPath) {\n+\t\tmyContextPath = theContextPath;\n+\t}\n+\t\n+\tprivate String getTemplateFileName() {\n+\t\treturn myTemplateFileName;\n+\t}\n+\t\n+\tvoid setTemplateFileName(String theTemplateFileName) {\n+\t\tmyTemplateFileName = theTemplateFileName;\n+\t}\n+\t\n+\t@Override\n+\tpublic Set<String> getAppliesToProfiles() {\n+\t\treturn Collections.unmodifiableSet(myAppliesToProfiles);\n+\t}\n+\t\n+\tvoid addAppliesToProfile(String theAppliesToProfile) {\n+\t\tmyAppliesToProfiles.add(theAppliesToProfile);\n+\t}\n+\t\n+\t@Override\n+\tpublic Set<String> getAppliesToResourceTypes() {\n+\t\treturn Collections.unmodifiableSet(myAppliesToResourceTypes);\n+\t}\n+\t\n+\tvoid addAppliesToResourceType(String theAppliesToResourceType) {\n+\t\tmyAppliesToResourceTypes.add(theAppliesToResourceType);\n+\t}\n+\t\n+\t@Override\n+\tpublic Set<Class<? extends IBase>> getAppliesToResourceClasses() {\n+\t\treturn Collections.unmodifiableSet(myAppliesToResourceClasses);\n+\t}\n+\t\n+\tvoid addAppliesToResourceClass(Class<? extends IBase> theAppliesToResourceClass) {\n+\t\tmyAppliesToResourceClasses.add(theAppliesToResourceClass);\n+\t}\n+\t\n+\t@Override\n+\tpublic TemplateTypeEnum getTemplateType() {\n+\t\treturn myTemplateType;\n+\t}\n+\t\n+\tvoid setTemplateType(TemplateTypeEnum theTemplateType) {\n+\t\tmyTemplateType = theTemplateType;\n+\t}\n+\t\n+\t@Override\n+\tpublic String getTemplateName() {\n+\t\treturn myTemplateName;\n+\t}\n+\t\n+\tOpenMRSNarrativeTemplate setTemplateName(String theTemplateName) {\n+\t\tmyTemplateName = theTemplateName;\n+\t\treturn this;\n+\t}\n+\t\n+\t@Override\n+\tpublic String getTemplateText() {\n+\t\ttry {\n+\t\t\treturn OpenMRSNarrativeTemplateManifest.loadResource(getTemplateFileName());", "originalCommit": "5100d933285a6f8509d8c8e020cba363dc525200", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb29f253b6bfa0dc882b41d768ecc3b55e149e01", "chunk": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\nindex cb32ee46..6354c0bc 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\n\n@@ -21,100 +21,97 @@ import org.hl7.fhir.instance.model.api.IBase;\n \n public class OpenMRSNarrativeTemplate implements INarrativeTemplate {\n \t\n-\tprivate String myTemplateFileName;\n+\tprivate String CONTEXT_PATH;\n \t\n-\tprivate Set<String> myAppliesToProfiles = new HashSet<>();\n+\tprivate Set<String> APPLIES_TO_PROFILES = new HashSet<>();\n \t\n-\tprivate Set<String> myAppliesToResourceTypes = new HashSet<>();\n+\tprivate Set<String> APPLIES_TO_RESOURCE_TYPES = new HashSet<>();\n \t\n-\tprivate Set<String> myAppliesToDataTypes = new HashSet<>();\n+\tprivate Set<Class<? extends IBase>> APPLIES_TO_RESOURCE_CLASSES = new HashSet<>();\n \t\n-\tprivate Set<Class<? extends IBase>> myAppliesToResourceClasses = new HashSet<>();\n+\tprivate TemplateTypeEnum TEMPLATE_TYPE = TemplateTypeEnum.THYMELEAF;\n \t\n-\tprivate TemplateTypeEnum myTemplateType = TemplateTypeEnum.THYMELEAF;\n+\tprivate String TEMPLATE_NAME;\n \t\n-\tprivate String myContextPath;\n+\tprivate String TEMPLATE_FILENAME;\n \t\n-\tprivate String myTemplateName;\n-\t\n-\tpublic Set<String> getAppliesToDataTypes() {\n-\t\treturn Collections.unmodifiableSet(myAppliesToDataTypes);\n-\t}\n+\tprivate Set<String> APPLIES_TO_DATATYPES = new HashSet<>();\n \t\n \t@Override\n \tpublic String getContextPath() {\n-\t\treturn myContextPath;\n-\t}\n-\t\n-\tpublic void setContextPath(String theContextPath) {\n-\t\tmyContextPath = theContextPath;\n-\t}\n-\t\n-\tprivate String getTemplateFileName() {\n-\t\treturn myTemplateFileName;\n+\t\treturn CONTEXT_PATH;\n \t}\n \t\n-\tvoid setTemplateFileName(String theTemplateFileName) {\n-\t\tmyTemplateFileName = theTemplateFileName;\n+\tpublic void setContextPath(String contextPath) {\n+\t\tCONTEXT_PATH = contextPath;\n \t}\n \t\n \t@Override\n \tpublic Set<String> getAppliesToProfiles() {\n-\t\treturn Collections.unmodifiableSet(myAppliesToProfiles);\n+\t\treturn Collections.unmodifiableSet(APPLIES_TO_PROFILES);\n \t}\n \t\n-\tvoid addAppliesToProfile(String theAppliesToProfile) {\n-\t\tmyAppliesToProfiles.add(theAppliesToProfile);\n+\tvoid addAppliesToProfile(String profile) {\n+\t\tAPPLIES_TO_PROFILES.add(profile);\n \t}\n \t\n \t@Override\n \tpublic Set<String> getAppliesToResourceTypes() {\n-\t\treturn Collections.unmodifiableSet(myAppliesToResourceTypes);\n+\t\treturn Collections.unmodifiableSet(APPLIES_TO_RESOURCE_TYPES);\n \t}\n \t\n-\tvoid addAppliesToResourceType(String theAppliesToResourceType) {\n-\t\tmyAppliesToResourceTypes.add(theAppliesToResourceType);\n+\tvoid addAppliesToResourceType(String resourceType) {\n+\t\tAPPLIES_TO_RESOURCE_TYPES.add(resourceType);\n \t}\n \t\n \t@Override\n \tpublic Set<Class<? extends IBase>> getAppliesToResourceClasses() {\n-\t\treturn Collections.unmodifiableSet(myAppliesToResourceClasses);\n+\t\treturn Collections.unmodifiableSet(APPLIES_TO_RESOURCE_CLASSES);\n \t}\n \t\n-\tvoid addAppliesToResourceClass(Class<? extends IBase> theAppliesToResourceClass) {\n-\t\tmyAppliesToResourceClasses.add(theAppliesToResourceClass);\n+\tvoid addAppliesToResourceClass(Class<? extends IBase> resourceClass) {\n+\t\tAPPLIES_TO_RESOURCE_CLASSES.add(resourceClass);\n \t}\n \t\n \t@Override\n \tpublic TemplateTypeEnum getTemplateType() {\n-\t\treturn myTemplateType;\n+\t\treturn TEMPLATE_TYPE;\n \t}\n \t\n-\tvoid setTemplateType(TemplateTypeEnum theTemplateType) {\n-\t\tmyTemplateType = theTemplateType;\n+\tvoid setTemplateType(TemplateTypeEnum templateType) {\n+\t\tTEMPLATE_TYPE = templateType;\n \t}\n \t\n \t@Override\n \tpublic String getTemplateName() {\n-\t\treturn myTemplateName;\n+\t\treturn TEMPLATE_NAME;\n \t}\n \t\n-\tOpenMRSNarrativeTemplate setTemplateName(String theTemplateName) {\n-\t\tmyTemplateName = theTemplateName;\n+\tOpenMRSNarrativeTemplate setTemplateName(String templateName) {\n+\t\tTEMPLATE_NAME = templateName;\n \t\treturn this;\n \t}\n \t\n \t@Override\n \tpublic String getTemplateText() {\n \t\ttry {\n-\t\t\treturn OpenMRSNarrativeTemplateManifest.loadResource(getTemplateFileName());\n+\t\t\treturn OpenMRSNarrativeTemplateManifest.loadResource(TEMPLATE_FILENAME);\n \t\t}\n \t\tcatch (IOException e) {\n \t\t\tthrow new InternalErrorException(e);\n \t\t}\n \t}\n \t\n-\tvoid addAppliesToDatatype(String theDataType) {\n-\t\tmyAppliesToDataTypes.add(theDataType);\n+\tvoid setTemplateFileName(String templateFileName) {\n+\t\tTEMPLATE_FILENAME = templateFileName;\n \t}\n+\t\n+\tpublic Set<String> getAppliesToDataTypes() {\n+\t\treturn Collections.unmodifiableSet(APPLIES_TO_DATATYPES);\n+\t}\n+\t\n+\tvoid addAppliesToDatatype(String dataType) {\n+\t\tAPPLIES_TO_DATATYPES.add(dataType);\n+\t}\n+\t\n }\n"}}, {"oid": "cb29f253b6bfa0dc882b41d768ecc3b55e149e01", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/cb29f253b6bfa0dc882b41d768ecc3b55e149e01", "message": "refactored narrative generator", "committedDate": "2020-07-14T17:23:45Z", "type": "forcePushed"}, {"oid": "2cd69be4cc5357a98545ebdaa9dbf08d27366c88", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2cd69be4cc5357a98545ebdaa9dbf08d27366c88", "message": "refactored narrative generator", "committedDate": "2020-07-14T17:26:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1MzA2OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r454553069", "bodyText": "Definitely don't use ALL_CAPS for instance names. They are used for constants, which are usually static final.", "author": "ibacher", "createdAt": "2020-07-14T18:18:40Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import ca.uhn.fhir.narrative2.INarrativeTemplate;\n+import ca.uhn.fhir.narrative2.TemplateTypeEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import org.hl7.fhir.instance.model.api.IBase;\n+\n+public class OpenMRSNarrativeTemplate implements INarrativeTemplate {\n+\t\n+\tprivate String CONTEXT_PATH;", "originalCommit": "2cd69be4cc5357a98545ebdaa9dbf08d27366c88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7559af32baef16c39e887118c3eade09226628aa", "chunk": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\nindex 6354c0bc..264c3161 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\n\n@@ -21,81 +21,81 @@ import org.hl7.fhir.instance.model.api.IBase;\n \n public class OpenMRSNarrativeTemplate implements INarrativeTemplate {\n \t\n-\tprivate String CONTEXT_PATH;\n+\tprivate String contextPath;\n \t\n-\tprivate Set<String> APPLIES_TO_PROFILES = new HashSet<>();\n+\tprivate Set<String> appliesToProfiles = new HashSet<>();\n \t\n-\tprivate Set<String> APPLIES_TO_RESOURCE_TYPES = new HashSet<>();\n+\tprivate Set<String> appliesToResourceTypes = new HashSet<>();\n \t\n-\tprivate Set<Class<? extends IBase>> APPLIES_TO_RESOURCE_CLASSES = new HashSet<>();\n+\tprivate Set<Class<? extends IBase>> appliesToResourceClasses = new HashSet<>();\n \t\n-\tprivate TemplateTypeEnum TEMPLATE_TYPE = TemplateTypeEnum.THYMELEAF;\n+\tprivate TemplateTypeEnum templateType = TemplateTypeEnum.THYMELEAF;\n \t\n-\tprivate String TEMPLATE_NAME;\n+\tprivate String templateName;\n \t\n-\tprivate String TEMPLATE_FILENAME;\n+\tprivate String templateFilename;\n \t\n-\tprivate Set<String> APPLIES_TO_DATATYPES = new HashSet<>();\n+\tprivate Set<String> appliesToDatatypes = new HashSet<>();\n \t\n \t@Override\n \tpublic String getContextPath() {\n-\t\treturn CONTEXT_PATH;\n+\t\treturn this.contextPath;\n \t}\n \t\n \tpublic void setContextPath(String contextPath) {\n-\t\tCONTEXT_PATH = contextPath;\n+\t\tthis.contextPath = contextPath;\n \t}\n \t\n \t@Override\n \tpublic Set<String> getAppliesToProfiles() {\n-\t\treturn Collections.unmodifiableSet(APPLIES_TO_PROFILES);\n+\t\treturn Collections.unmodifiableSet(this.appliesToProfiles);\n \t}\n \t\n \tvoid addAppliesToProfile(String profile) {\n-\t\tAPPLIES_TO_PROFILES.add(profile);\n+\t\tthis.appliesToProfiles.add(profile);\n \t}\n \t\n \t@Override\n \tpublic Set<String> getAppliesToResourceTypes() {\n-\t\treturn Collections.unmodifiableSet(APPLIES_TO_RESOURCE_TYPES);\n+\t\treturn Collections.unmodifiableSet(this.appliesToResourceTypes);\n \t}\n \t\n \tvoid addAppliesToResourceType(String resourceType) {\n-\t\tAPPLIES_TO_RESOURCE_TYPES.add(resourceType);\n+\t\tthis.appliesToResourceTypes.add(resourceType);\n \t}\n \t\n \t@Override\n \tpublic Set<Class<? extends IBase>> getAppliesToResourceClasses() {\n-\t\treturn Collections.unmodifiableSet(APPLIES_TO_RESOURCE_CLASSES);\n+\t\treturn Collections.unmodifiableSet(this.appliesToResourceClasses);\n \t}\n \t\n \tvoid addAppliesToResourceClass(Class<? extends IBase> resourceClass) {\n-\t\tAPPLIES_TO_RESOURCE_CLASSES.add(resourceClass);\n+\t\tthis.appliesToResourceClasses.add(resourceClass);\n \t}\n \t\n \t@Override\n \tpublic TemplateTypeEnum getTemplateType() {\n-\t\treturn TEMPLATE_TYPE;\n+\t\treturn this.templateType;\n \t}\n \t\n \tvoid setTemplateType(TemplateTypeEnum templateType) {\n-\t\tTEMPLATE_TYPE = templateType;\n+\t\tthis.templateType = templateType;\n \t}\n \t\n \t@Override\n \tpublic String getTemplateName() {\n-\t\treturn TEMPLATE_NAME;\n+\t\treturn this.templateName;\n \t}\n \t\n \tOpenMRSNarrativeTemplate setTemplateName(String templateName) {\n-\t\tTEMPLATE_NAME = templateName;\n+\t\tthis.templateName = templateName;\n \t\treturn this;\n \t}\n \t\n \t@Override\n \tpublic String getTemplateText() {\n \t\ttry {\n-\t\t\treturn OpenMRSNarrativeTemplateManifest.loadResource(TEMPLATE_FILENAME);\n+\t\t\treturn OpenMRSNarrativeTemplateManifest.loadResource(this.templateFilename);\n \t\t}\n \t\tcatch (IOException e) {\n \t\t\tthrow new InternalErrorException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NDU3MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r454554570", "bodyText": "So my main question here is why we have this whole implementation when it seems like we could get away with this:\npublic class OpenMRSNarrativeTemplate extends ca.uhn.fhir.narrative2.NarrativeTemplate {\n    @Override\n\tpublic String getTemplateText() {\n\t\ttry {\n\t\t\treturn OpenMRSNarrativeTemplateManifest.loadResource(getTemplateFileName());\n\t\t} catch (IOException e) {\n\t\t\tthrow new InternalErrorException(e);\n\t\t}\n\t}\n}", "author": "ibacher", "createdAt": "2020-07-14T18:21:09Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import ca.uhn.fhir.narrative2.INarrativeTemplate;\n+import ca.uhn.fhir.narrative2.TemplateTypeEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import org.hl7.fhir.instance.model.api.IBase;\n+\n+public class OpenMRSNarrativeTemplate implements INarrativeTemplate {", "originalCommit": "2cd69be4cc5357a98545ebdaa9dbf08d27366c88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0MDYzNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r454640637", "bodyText": "@ibacher Actually doing this resulted in errors in loadProperties() method of NarrativeTemplateManifest, as it calls non-public methods of NarrativeTemplate like setTemplateName(), addAppliesToProfile(), etc.\nBut yes, if we change the OpenMRSNarrativeTemplateManifest class like the way you've suggested, I guess we could make this work too.", "author": "ShivanshRakesh", "createdAt": "2020-07-14T20:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NDU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMzgyNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r457613827", "bodyText": "I think that's what I'd like to see here. The idea is if we can make our implementation as light as possible, we're able to evolve with HAPI as easily as possible.", "author": "ibacher", "createdAt": "2020-07-20T18:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NDU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "7559af32baef16c39e887118c3eade09226628aa", "chunk": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\nindex 6354c0bc..264c3161 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplate.java\n\n@@ -21,81 +21,81 @@ import org.hl7.fhir.instance.model.api.IBase;\n \n public class OpenMRSNarrativeTemplate implements INarrativeTemplate {\n \t\n-\tprivate String CONTEXT_PATH;\n+\tprivate String contextPath;\n \t\n-\tprivate Set<String> APPLIES_TO_PROFILES = new HashSet<>();\n+\tprivate Set<String> appliesToProfiles = new HashSet<>();\n \t\n-\tprivate Set<String> APPLIES_TO_RESOURCE_TYPES = new HashSet<>();\n+\tprivate Set<String> appliesToResourceTypes = new HashSet<>();\n \t\n-\tprivate Set<Class<? extends IBase>> APPLIES_TO_RESOURCE_CLASSES = new HashSet<>();\n+\tprivate Set<Class<? extends IBase>> appliesToResourceClasses = new HashSet<>();\n \t\n-\tprivate TemplateTypeEnum TEMPLATE_TYPE = TemplateTypeEnum.THYMELEAF;\n+\tprivate TemplateTypeEnum templateType = TemplateTypeEnum.THYMELEAF;\n \t\n-\tprivate String TEMPLATE_NAME;\n+\tprivate String templateName;\n \t\n-\tprivate String TEMPLATE_FILENAME;\n+\tprivate String templateFilename;\n \t\n-\tprivate Set<String> APPLIES_TO_DATATYPES = new HashSet<>();\n+\tprivate Set<String> appliesToDatatypes = new HashSet<>();\n \t\n \t@Override\n \tpublic String getContextPath() {\n-\t\treturn CONTEXT_PATH;\n+\t\treturn this.contextPath;\n \t}\n \t\n \tpublic void setContextPath(String contextPath) {\n-\t\tCONTEXT_PATH = contextPath;\n+\t\tthis.contextPath = contextPath;\n \t}\n \t\n \t@Override\n \tpublic Set<String> getAppliesToProfiles() {\n-\t\treturn Collections.unmodifiableSet(APPLIES_TO_PROFILES);\n+\t\treturn Collections.unmodifiableSet(this.appliesToProfiles);\n \t}\n \t\n \tvoid addAppliesToProfile(String profile) {\n-\t\tAPPLIES_TO_PROFILES.add(profile);\n+\t\tthis.appliesToProfiles.add(profile);\n \t}\n \t\n \t@Override\n \tpublic Set<String> getAppliesToResourceTypes() {\n-\t\treturn Collections.unmodifiableSet(APPLIES_TO_RESOURCE_TYPES);\n+\t\treturn Collections.unmodifiableSet(this.appliesToResourceTypes);\n \t}\n \t\n \tvoid addAppliesToResourceType(String resourceType) {\n-\t\tAPPLIES_TO_RESOURCE_TYPES.add(resourceType);\n+\t\tthis.appliesToResourceTypes.add(resourceType);\n \t}\n \t\n \t@Override\n \tpublic Set<Class<? extends IBase>> getAppliesToResourceClasses() {\n-\t\treturn Collections.unmodifiableSet(APPLIES_TO_RESOURCE_CLASSES);\n+\t\treturn Collections.unmodifiableSet(this.appliesToResourceClasses);\n \t}\n \t\n \tvoid addAppliesToResourceClass(Class<? extends IBase> resourceClass) {\n-\t\tAPPLIES_TO_RESOURCE_CLASSES.add(resourceClass);\n+\t\tthis.appliesToResourceClasses.add(resourceClass);\n \t}\n \t\n \t@Override\n \tpublic TemplateTypeEnum getTemplateType() {\n-\t\treturn TEMPLATE_TYPE;\n+\t\treturn this.templateType;\n \t}\n \t\n \tvoid setTemplateType(TemplateTypeEnum templateType) {\n-\t\tTEMPLATE_TYPE = templateType;\n+\t\tthis.templateType = templateType;\n \t}\n \t\n \t@Override\n \tpublic String getTemplateName() {\n-\t\treturn TEMPLATE_NAME;\n+\t\treturn this.templateName;\n \t}\n \t\n \tOpenMRSNarrativeTemplate setTemplateName(String templateName) {\n-\t\tTEMPLATE_NAME = templateName;\n+\t\tthis.templateName = templateName;\n \t\treturn this;\n \t}\n \t\n \t@Override\n \tpublic String getTemplateText() {\n \t\ttry {\n-\t\t\treturn OpenMRSNarrativeTemplateManifest.loadResource(TEMPLATE_FILENAME);\n+\t\t\treturn OpenMRSNarrativeTemplateManifest.loadResource(this.templateFilename);\n \t\t}\n \t\tcatch (IOException e) {\n \t\t\tthrow new InternalErrorException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjM4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r454556381", "bodyText": "Couldn't this just be something like:\npublic class OpenMRSNarrativeTemplateManifest extends ca.uhn.fhir.narrative2.NarrativeTemplateManifest {\n\tpublic static NarrativeTemplateManifest forManifestFileLocation(String... propertyFiles) throws IOException {\n\t\treturn forManifestFileLocation(Arrays.asList(propertyFiles));\n\t}\n\n\tpublic static NarrativeTemplateManifest forManifestFileLocation(Collection<String> propertyFiles) throws IOException {\n\t\tlog.debug(\"Loading narrative properties file(s): {}\", propertyFiles);\n\t\treturn new NarrativeTemplateManifest(propertyFiles.stream().map(r -> loadResource(r)).map(p -> NarrativeTemplateManifest.loadProperties(p))\n\t\t\t.flatMap(p -> p.stream()).map(t -> new OpenmrsNarrativeTemplate(t)).collect(Collectors.toList()));\n\t}\n\n\tstatic String loadResource(String name) throws IOException {\n\t\tif (name.startsWith(\"openmrs:\")) {\n\t\t\tFile file = new File(OpenmrsUtil.getApplicationDataDirectory(), name.substring(\"openmrs:\".length()));\n\n\t\t\tif (file.exists() == false) {\n\t\t\t\tthrow new IOException(\"File not found: \" + file.getAbsolutePath());\n\t\t\t}\n\n\t\t\ttry (FileInputStream inputStream = new FileInputStream(file)) {\n\t\t\t\treturn IOUtils.toString(inputStream, Charsets.UTF_8);\n\t\t\t}\n\t\t} else {\n\t\t\treturn NarrativeTemplateManifest.loadResource(name);\n\t\t}\n\t}\n}\n(The above adds a small dependency that we create a constructor for OpenmrsNarrativeTemplate that takes a NarrativeTemplate, but that isn't too hard. That way we cut the code down to what we minimally need to support this change.", "author": "ibacher", "createdAt": "2020-07-14T18:24:17Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.narrative;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.context.ConfigurationException;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.narrative.DefaultThymeleafNarrativeGenerator;\n+import ca.uhn.fhir.narrative2.INarrativeTemplate;\n+import ca.uhn.fhir.narrative2.INarrativeTemplateManifest;\n+import ca.uhn.fhir.narrative2.TemplateTypeEnum;\n+import com.google.common.base.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.util.OpenmrsUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OpenMRSNarrativeTemplateManifest implements INarrativeTemplateManifest {", "originalCommit": "2cd69be4cc5357a98545ebdaa9dbf08d27366c88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzODAzMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r454638030", "bodyText": "Yeah actually we could do this. I didn't think of it this way initially because of the constructor. But yeah, this looks much better.", "author": "ShivanshRakesh", "createdAt": "2020-07-14T20:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1NDYxMg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r456754612", "bodyText": "@ibacher I just forgot about it, but NarrativeTemplateManifest cannot be inherited because of a private constructor right?", "author": "ShivanshRakesh", "createdAt": "2020-07-18T06:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxOTEzNA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r457619134", "bodyText": "Yes... that's a good point. And I guess there isn't an easy way to remove a bunch of duplication here.", "author": "ibacher", "createdAt": "2020-07-20T18:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1Nzc5NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r457657794", "bodyText": "@ibacher Hmm.. and since some methods of NarrativeTemplateManifest call some private methods of NarrativeTemplate class, we can't reduce that either. So what should be done instead?", "author": "ShivanshRakesh", "createdAt": "2020-07-20T19:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTQ2OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r457661468", "bodyText": "Are you sure there are methods in NarrativeTemplateManifest that call private methods of NarrativeTemplate? Because, by definition, that's not possible... If it's just a matter of package-private methods, we can always stick our version of OpenMRSNarrativeTemplateManifest in the ca.uhn.fhir.narrative2 package.\nThe alternative is to dress these classes up so that they more closely resemble OpenMRS coding conventions: Setters should be public or at least protected. We should drop the and my as prefixes to variables, etc. I'd also like to minimize duplicating code as much as possible.", "author": "ibacher", "createdAt": "2020-07-20T20:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NDkyNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r457664925", "bodyText": "Are you sure there are methods in NarrativeTemplateManifest that call private methods of NarrativeTemplate?\n\nAh, my bad. I meant non-public methods. Like setTemplateName(), setTemplateType() etc. They're basically called in loadProperties() method of NarrativeTemplateManifest.", "author": "ShivanshRakesh", "createdAt": "2020-07-20T20:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTg4NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r457665884", "bodyText": "The alternative is to dress these classes up so that they more closely resemble OpenMRS coding conventions: Setters should be public or at least protected. We should drop the and my as prefixes to variables, etc. I'd also like to minimize duplicating code as much as possible.\n\nOkay.", "author": "ShivanshRakesh", "createdAt": "2020-07-20T20:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2801df075df1f3dce5bb85ddb8a738d1d721c02", "chunk": "diff --git a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java\nindex b3c516c5..ffa36c2e 100644\n--- a/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java\n+++ b/omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java\n\n@@ -187,7 +187,6 @@ public class OpenMRSNarrativeTemplateManifest implements INarrativeTemplateManif\n \t\t\t\t        + \" - the key must end in one of the expected extensions \"\n \t\t\t\t        + \"'.profile', '.resourceType', '.dataType', '.style', '.contextPath', '.narrative', '.title'\");\n \t\t\t}\n-\t\t\t\n \t\t}\n \t\t\n \t\treturn nameToTemplate.values();\n"}}, {"oid": "5a3b3e54b317412f4fb1b31ff3f9942d1c88b2f5", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5a3b3e54b317412f4fb1b31ff3f9942d1c88b2f5", "message": "merged upstream changes", "committedDate": "2020-07-20T17:44:41Z", "type": "forcePushed"}, {"oid": "7559af32baef16c39e887118c3eade09226628aa", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7559af32baef16c39e887118c3eade09226628aa", "message": "merged upstream changes", "committedDate": "2020-07-20T17:51:12Z", "type": "forcePushed"}, {"oid": "a2801df075df1f3dce5bb85ddb8a738d1d721c02", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a2801df075df1f3dce5bb85ddb8a738d1d721c02", "message": "FM2-252: Add support for relative path with prefix 'openmrs:' for narrative templates", "committedDate": "2020-07-20T20:47:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzNTc0Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r458135746", "bodyText": "Removed the forManifestFileContents(String... resources), forManifestFileLocation(String... propertyFilePaths) methods since they were not used anywhere.", "author": "ShivanshRakesh", "createdAt": "2020-07-21T14:22:06Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java", "diffHunk": "@@ -117,10 +118,6 @@ public static OpenMRSNarrativeTemplateManifest forManifestFileLocation(Collectio\n \t\treturn forManifestFileContents(manifestFileContents);\n \t}\n \t\n-\tpublic static OpenMRSNarrativeTemplateManifest forManifestFileContents(String... resources) throws IOException {\n-\t\treturn forManifestFileContents(Arrays.asList(resources));\n-\t}", "originalCommit": "02fe783e40872880e7db3073c7bfee186d685523", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzNjQwNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/255#discussion_r458136407", "bodyText": "Removed templateCount since it was not being used anywhere.", "author": "ShivanshRakesh", "createdAt": "2020-07-21T14:22:52Z", "path": "omod/src/main/java/org/openmrs/module/fhir2/narrative/OpenMRSNarrativeTemplateManifest.java", "diffHunk": "@@ -51,8 +63,6 @@\n \t\n \tprivate final Map<String, List<OpenMRSNarrativeTemplate>> styleToNameToTemplate;\n \t\n-\tprivate final int templateCount;", "originalCommit": "02fe783e40872880e7db3073c7bfee186d685523", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5dcfadf52aff44fb94fae7e5a021f9d388194f53", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5dcfadf52aff44fb94fae7e5a021f9d388194f53", "message": "added copyright notices", "committedDate": "2020-07-21T15:38:26Z", "type": "forcePushed"}, {"oid": "4ac72b655e4bd0a8533b1f55f3fb262939381a3c", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4ac72b655e4bd0a8533b1f55f3fb262939381a3c", "message": "FM2-252: Add support for relative path with prefix 'openmrs:' for narrative templates", "committedDate": "2020-07-21T16:05:40Z", "type": "forcePushed"}, {"oid": "aa069e83abf9912e3e6955155435700ea2d5824b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/aa069e83abf9912e3e6955155435700ea2d5824b", "message": "added tests", "committedDate": "2020-07-22T04:29:10Z", "type": "forcePushed"}, {"oid": "5f37c1d3518b9c6fb40cc9e3fa5f04a8cb493187", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5f37c1d3518b9c6fb40cc9e3fa5f04a8cb493187", "message": "restructured tests", "committedDate": "2020-07-22T05:00:31Z", "type": "forcePushed"}, {"oid": "c51735bc2f1eb11a992baf116e4ba87934e75116", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c51735bc2f1eb11a992baf116e4ba87934e75116", "message": "FM2-252: Add support for relative path with prefix 'openmrs:' for narrative templates", "committedDate": "2020-07-22T16:27:37Z", "type": "forcePushed"}, {"oid": "3bf814e82f0e1a890e5a39220ec28960d5b62f33", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3bf814e82f0e1a890e5a39220ec28960d5b62f33", "message": "FM2-252: Add support for relative path with prefix 'openmrs:' for narrative templates", "committedDate": "2020-07-22T16:28:50Z", "type": "forcePushed"}, {"oid": "5d87b2f673c2479510a7faf0c9e63916848c1880", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5d87b2f673c2479510a7faf0c9e63916848c1880", "message": "FM2-252: Add support for relative path with prefix 'openmrs:' for narrative templates", "committedDate": "2020-07-22T16:51:41Z", "type": "forcePushed"}, {"oid": "8e9b17cc04e193adbb7023d16c590f50c76072bd", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8e9b17cc04e193adbb7023d16c590f50c76072bd", "message": "FM2-252: Add support for relative path with prefix 'openmrs:' for narrative templates", "committedDate": "2020-07-22T17:09:47Z", "type": "commit"}, {"oid": "8e9b17cc04e193adbb7023d16c590f50c76072bd", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8e9b17cc04e193adbb7023d16c590f50c76072bd", "message": "FM2-252: Add support for relative path with prefix 'openmrs:' for narrative templates", "committedDate": "2020-07-22T17:09:47Z", "type": "forcePushed"}]}