{"pr_number": 203, "pr_title": "FM2-139: Add initial changes for the related person search.", "pr_createdAt": "2020-06-11T21:36:45Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203", "timeline": [{"oid": "6c1dc0cbb56cc7d6347a5243a73e2b363bb19590", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6c1dc0cbb56cc7d6347a5243a73e2b363bb19590", "message": "FM2-139 Add initial changes for the related person search.", "committedDate": "2020-06-11T21:53:03Z", "type": "forcePushed"}, {"oid": "de39856eb1341b1a7b2a5a8f73c069e3b2e9834e", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/de39856eb1341b1a7b2a5a8f73c069e3b2e9834e", "message": "FM2-139 Add initial changes for the related person search.", "committedDate": "2020-06-11T22:39:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3OTg4OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r439579889", "bodyText": "Does this need to be in a separate class? The reason BasePersonDao is separated out is because there are a number of resources that all use Person and need to have similar logic, but the logic here seems pretty specific to RelatedPerson. Or is there something I'm missing?", "author": "ibacher", "createdAt": "2020-06-12T18:29:19Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseRelatedPersonDao.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.dao.impl;\n+\n+import static org.hibernate.criterion.Restrictions.and;\n+import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.isNull;\n+import static org.hibernate.criterion.Restrictions.or;\n+import static org.hibernate.criterion.Restrictions.sqlRestriction;\n+import static org.hl7.fhir.r4.model.Patient.SP_FAMILY;\n+import static org.hl7.fhir.r4.model.Patient.SP_GIVEN;\n+import static org.hl7.fhir.r4.model.Person.SP_ADDRESS_CITY;\n+import static org.hl7.fhir.r4.model.Person.SP_ADDRESS_COUNTRY;\n+import static org.hl7.fhir.r4.model.Person.SP_ADDRESS_POSTALCODE;\n+import static org.hl7.fhir.r4.model.Person.SP_ADDRESS_STATE;\n+import static org.hl7.fhir.r4.model.Person.SP_BIRTHDATE;\n+import static org.hl7.fhir.r4.model.Person.SP_NAME;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+import org.hibernate.Criteria;\n+import org.hibernate.criterion.DetachedCriteria;\n+import org.hibernate.criterion.Order;\n+import org.hibernate.criterion.Projections;\n+import org.hibernate.criterion.Subqueries;\n+import org.hibernate.sql.JoinType;\n+import org.openmrs.Auditable;\n+import org.openmrs.OpenmrsObject;\n+import org.openmrs.PersonName;\n+\n+public abstract class BaseRelatedPersonDao<T extends OpenmrsObject & Auditable> extends BaseFhirDao<T> {", "originalCommit": "de39856eb1341b1a7b2a5a8f73c069e3b2e9834e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2Nzc0Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r439667746", "bodyText": "Hi @ibacher  I think atleast we have to get the use of BasePersonDao class. Since we need to have all the personrelated sort stuff in the relatedperson as well.\nbut anyway if we are not maintaining a sperate class I think its better to alter the\nhandleSort in the base dao to include a person alisa parameter as we did for the name search/\nwdyt?", "author": "Akayeshmantha", "createdAt": "2020-06-12T22:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3OTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MTU5Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r439671596", "bodyText": "@ibacher  waiting for youre response on this", "author": "Akayeshmantha", "createdAt": "2020-06-12T22:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3OTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3NzM5Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r440377396", "bodyText": "I just meant \"do we need a BaseRelatedPersonDao class or can we move all of this into RelatedPersonDao?\" We aren't really reusing BasePersonDao here at all.", "author": "ibacher", "createdAt": "2020-06-15T18:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3OTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NDY5Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r440394696", "bodyText": "oh yes sorry about this @ibacher", "author": "Akayeshmantha", "createdAt": "2020-06-15T19:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3OTg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3229ffafa69a05c7a30868eeeb42a04b4b8a9c31", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseRelatedPersonDao.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseRelatedPersonDao.java\ndeleted file mode 100644\nindex 4a2f2ff4..00000000\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseRelatedPersonDao.java\n+++ /dev/null\n\n@@ -1,127 +0,0 @@\n-/*\n- * This Source Code Form is subject to the terms of the Mozilla Public License,\n- * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n- * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n- * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n- *\n- * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n- * graphic logo is a trademark of OpenMRS Inc.\n- */\n-package org.openmrs.module.fhir2.api.dao.impl;\n-\n-import static org.hibernate.criterion.Restrictions.and;\n-import static org.hibernate.criterion.Restrictions.eq;\n-import static org.hibernate.criterion.Restrictions.isNull;\n-import static org.hibernate.criterion.Restrictions.or;\n-import static org.hibernate.criterion.Restrictions.sqlRestriction;\n-import static org.hl7.fhir.r4.model.Patient.SP_FAMILY;\n-import static org.hl7.fhir.r4.model.Patient.SP_GIVEN;\n-import static org.hl7.fhir.r4.model.Person.SP_ADDRESS_CITY;\n-import static org.hl7.fhir.r4.model.Person.SP_ADDRESS_COUNTRY;\n-import static org.hl7.fhir.r4.model.Person.SP_ADDRESS_POSTALCODE;\n-import static org.hl7.fhir.r4.model.Person.SP_ADDRESS_STATE;\n-import static org.hl7.fhir.r4.model.Person.SP_BIRTHDATE;\n-import static org.hl7.fhir.r4.model.Person.SP_NAME;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.stream.Collectors;\n-\n-import org.hibernate.Criteria;\n-import org.hibernate.criterion.DetachedCriteria;\n-import org.hibernate.criterion.Order;\n-import org.hibernate.criterion.Projections;\n-import org.hibernate.criterion.Subqueries;\n-import org.hibernate.sql.JoinType;\n-import org.openmrs.Auditable;\n-import org.openmrs.OpenmrsObject;\n-import org.openmrs.PersonName;\n-\n-public abstract class BaseRelatedPersonDao<T extends OpenmrsObject & Auditable> extends BaseFhirDao<T> {\n-\t\n-\t/**\n-\t * Returns the sqlAlias of the Rela class for queries from this class\n-\t *\n-\t * @return\n-\t */\n-\tprotected abstract String getSqlAlias();\n-\t\n-\t@Override\n-\tprotected Collection<Order> paramToProps(SortState sortState) {\n-\t\tString param = sortState.getParameter();\n-\t\t\n-\t\tif (param == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\t\n-\t\tCriteria criteria = sortState.getCriteria();\n-\t\tif (param.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n-\t\t\tcriteria.createAlias(\"m.addresses\", \"pad\", JoinType.LEFT_OUTER_JOIN);\n-\t\t} else if (param.equals(SP_NAME) || param.equals(SP_GIVEN) || param.equals(SP_FAMILY)) {\n-\t\t\tif (!containsAlias(criteria, \"pn\")) {\n-\t\t\t\tcriteria.createAlias(\"m.names\", \"pn\", JoinType.LEFT_OUTER_JOIN);\n-\t\t\t}\n-\t\t\t\n-\t\t\tString sqlAlias = getSqlAlias();\n-\t\t\t\n-\t\t\tcriteria.add(and(eq(\"pn.voided\", false), or(\n-\t\t\t    and(eq(\"pn.preferred\", true),\n-\t\t\t        Subqueries.propertyEq(\"pn.personNameId\",\n-\t\t\t            DetachedCriteria.forClass(PersonName.class, \"pn1\").add(eq(\"pn1.preferred\", true))\n-\t\t\t                    .add(sqlRestriction(String.format(\"pn1_.person_id = %s.person_a\", sqlAlias)))\n-\t\t\t                    .setProjection(Projections.min(\"pn1.personNameId\")))),\n-\t\t\t    and(Subqueries.notExists(DetachedCriteria.forClass(PersonName.class, \"pn2\").add(eq(\"pn2.preferred\", true))\n-\t\t\t            // WARNING this is fragile\n-\t\t\t            .add(sqlRestriction(String.format(\"pn2_.person_id = %s.person_a\", sqlAlias)))\n-\t\t\t            .setProjection(Projections.id())),\n-\t\t\t        Subqueries.propertyEq(\"pn.personNameId\",\n-\t\t\t            DetachedCriteria.forClass(PersonName.class, \"pn3\").add(eq(\"pn3.preferred\", false))\n-\t\t\t                    // WARNING this is fragile\n-\t\t\t                    .add(sqlRestriction(String.format(\"pn3_.person_id = %s.person_a\", sqlAlias)))\n-\t\t\t                    .setProjection(Projections.min(\"pn3.personNameId\")))),\n-\t\t\t    isNull(\"pn.personNameId\"))));\n-\t\t\t\n-\t\t\tString[] properties = null;\n-\t\t\tswitch (param) {\n-\t\t\t\tcase SP_NAME:\n-\t\t\t\t\tproperties = new String[] { \"pn.familyName\", \"pn.familyName2\", \"pn.givenName\", \"pn.middleName\",\n-\t\t\t\t\t        \"pn.familyNamePrefix\", \"pn.familyNameSuffix\" };\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase SP_GIVEN:\n-\t\t\t\t\tproperties = new String[] { \"pn.givenName\" };\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase SP_FAMILY:\n-\t\t\t\t\tproperties = new String[] { \"pn.familyName\" };\n-\t\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\t\n-\t\t\tswitch (sortState.getSortOrder()) {\n-\t\t\t\tcase ASC:\n-\t\t\t\t\treturn Arrays.stream(properties).map(Order::asc).collect(Collectors.toList());\n-\t\t\t\tcase DESC:\n-\t\t\t\t\treturn Arrays.stream(properties).map(Order::desc).collect(Collectors.toList());\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\treturn super.paramToProps(sortState);\n-\t}\n-\t\n-\t@Override\n-\tprotected String paramToProp(String param) {\n-\t\tswitch (param) {\n-\t\t\tcase SP_BIRTHDATE:\n-\t\t\t\treturn \"m.birthdate\";\n-\t\t\tcase SP_ADDRESS_CITY:\n-\t\t\t\treturn \"pad.cityVillage\";\n-\t\t\tcase SP_ADDRESS_STATE:\n-\t\t\t\treturn \"pad.stateProvince\";\n-\t\t\tcase SP_ADDRESS_POSTALCODE:\n-\t\t\t\treturn \"pad.postalCode\";\n-\t\t\tcase SP_ADDRESS_COUNTRY:\n-\t\t\t\treturn \"pad.country\";\n-\t\t\tdefault:\n-\t\t\t\treturn null;\n-\t\t}\n-\t}\n-\t\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MzIxMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r439583210", "bodyText": "Instead of doing this, I think it would be better to do something like this:\nprotected void handleNames(Criteria criteria, StringAndListParam name, StringAndListParam given, StringAndListParam family) {\n    return handleNames(criteria, name, given, family, null);\n}\n\nprotected void handleNames(Criteria criteria, StringAndListParam name, StringAndListParam given, StringAndListParam family, String personAlias) {\n    if (name == null & given == null && family == null) {\n        return;\n    }\n\n    if (StringUtils.isNotBlank(personAlias) {\n        criteria.createAlias(String.format(\"%.names\", personAlias), \"pn\");\n    } else {\n        criteria.createAlias(\"names\", \"pn\");\n    }\n    \n    ...\n}\nThis doesn't break existing code and, to me, at any rate personAlias tells me what that parameter is and why it's important more than isInnerQuery does.", "author": "ibacher", "createdAt": "2020-06-12T18:36:43Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDao.java", "diffHunk": "@@ -652,12 +652,16 @@ protected void handleIdentifier(Criteria criteria, TokenAndListParam identifier)\n \t}\n \t\n \tprotected void handleNames(Criteria criteria, StringAndListParam name, StringAndListParam given,\n-\t        StringAndListParam family) {\n+\t        StringAndListParam family, Boolean isInnerQuery) {\n \t\tif (name == null && given == null && family == null) {\n \t\t\treturn;\n \t\t}\n \t\t\n-\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\tif (isInnerQuery) {\n+\t\t\tcriteria.createAlias(\"m.names\", \"pn\");\n+\t\t} else {\n+\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t}", "originalCommit": "de39856eb1341b1a7b2a5a8f73c069e3b2e9834e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2MTgyMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r439661820", "bodyText": "of course, it's a great way. Sorry for this.", "author": "Akayeshmantha", "createdAt": "2020-06-12T22:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MzIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "39f6ff97e756e94ac9f762c802708040bac63460", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDao.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDao.java\nindex db83f153..fef375fb 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDao.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDao.java\n\n@@ -652,13 +700,18 @@ public abstract class BaseDao {\n \t}\n \t\n \tprotected void handleNames(Criteria criteria, StringAndListParam name, StringAndListParam given,\n-\t        StringAndListParam family, Boolean isInnerQuery) {\n+\t        StringAndListParam family) {\n+\t\thandleNames(criteria, name, given, family, null);\n+\t}\n+\t\n+\tprotected void handleNames(Criteria criteria, StringAndListParam name, StringAndListParam given,\n+\t        StringAndListParam family, String personAlias) {\n \t\tif (name == null && given == null && family == null) {\n \t\t\treturn;\n \t\t}\n \t\t\n-\t\tif (isInnerQuery) {\n-\t\t\tcriteria.createAlias(\"m.names\", \"pn\");\n+\t\tif (StringUtils.isNotBlank(personAlias)) {\n+\t\t\tcriteria.createAlias(String.format(\"%s.names\", personAlias), \"pn\");\n \t\t} else {\n \t\t\tcriteria.createAlias(\"names\", \"pn\");\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Mzk4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r439583981", "bodyText": "I don't think we actually need this unless we're actually reusing the BasePersonDao class.", "author": "ibacher", "createdAt": "2020-06-12T18:38:34Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirRelatedPersonDaoImpl.java", "diffHunk": "@@ -9,14 +9,48 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n+import java.util.Collection;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.StringAndListParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.openmrs.Relationship;\n import org.openmrs.module.fhir2.api.dao.FhirRelatedPersonDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirRelatedPersonDaoImpl extends BaseFhirDao<Relationship> implements FhirRelatedPersonDao {\n+public class FhirRelatedPersonDaoImpl extends BaseRelatedPersonDao<Relationship> implements FhirRelatedPersonDao {\n+\t\n+\tprivate boolean isInnerQuery = true;\n+\t\n+\t@Override\n+\tpublic Collection<Relationship> searchRelationships(StringAndListParam name, TokenAndListParam gender,\n+\t        DateRangeParam birthDate, StringAndListParam city, StringAndListParam state, StringAndListParam postalCode,\n+\t        StringAndListParam country, SortSpec sort) {\n+\t\t\n+\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Relationship.class, \"r\");\n+\t\t\n+\t\tcriteria.createAlias(\"r.personA\", \"m\"); //inner join with person table\n+\t\thandleNames(criteria, name, null, null, isInnerQuery);\n+\t\thandleGender(\"m.gender\", gender).ifPresent(criteria::add);\n+\t\thandleDateRange(\"m.birthdate\", birthDate).ifPresent(criteria::add);\n+\t\thandlePersonAddress(\"pad\", city, state, postalCode, country).ifPresent(c -> {\n+\t\t\tcriteria.createAlias(\"m.addresses\", \"pad\");\n+\t\t\tcriteria.add(c);\n+\t\t});\n+\t\t\n+\t\thandleSort(criteria, sort);\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n \t\n+\t@Override\n+\tprotected String getSqlAlias() {\n+\t\treturn \"this_\";\n+\t}", "originalCommit": "de39856eb1341b1a7b2a5a8f73c069e3b2e9834e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3NzU1NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r440377555", "bodyText": "Basically, this can be hard-coded where needed", "author": "ibacher", "createdAt": "2020-06-15T18:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NDg4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r440394881", "bodyText": "true thanks I fixed the mistake", "author": "Akayeshmantha", "createdAt": "2020-06-15T19:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Mzk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "39f6ff97e756e94ac9f762c802708040bac63460", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirRelatedPersonDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirRelatedPersonDaoImpl.java\nindex 4b218ba6..b0ad7d67 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirRelatedPersonDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirRelatedPersonDaoImpl.java\n\n@@ -36,7 +36,7 @@ public class FhirRelatedPersonDaoImpl extends BaseRelatedPersonDao<Relationship>\n \t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Relationship.class, \"r\");\n \t\t\n \t\tcriteria.createAlias(\"r.personA\", \"m\"); //inner join with person table\n-\t\thandleNames(criteria, name, null, null, isInnerQuery);\n+\t\thandleNames(criteria, name, null, null, \"m\");\n \t\thandleGender(\"m.gender\", gender).ifPresent(criteria::add);\n \t\thandleDateRange(\"m.birthdate\", birthDate).ifPresent(criteria::add);\n \t\thandlePersonAddress(\"pad\", city, state, postalCode, country).ifPresent(c -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzODAwNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r439638006", "bodyText": "We should remove star-imports", "author": "varung-31", "createdAt": "2020-06-12T20:54:25Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/RelatedPersonFhirResourceProvider.java", "diffHunk": "@@ -11,17 +11,26 @@\n \n import javax.validation.constraints.NotNull;\n \n+import ca.uhn.fhir.rest.annotation.*;", "originalCommit": "de39856eb1341b1a7b2a5a8f73c069e3b2e9834e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2MjA1OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/203#discussion_r439662059", "bodyText": "that's a good catch yes this is bad", "author": "Akayeshmantha", "createdAt": "2020-06-12T22:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzODAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "39f6ff97e756e94ac9f762c802708040bac63460", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/RelatedPersonFhirResourceProvider.java b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/RelatedPersonFhirResourceProvider.java\nindex 81e8b55d..1025fd61 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/providers/r3/RelatedPersonFhirResourceProvider.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/providers/r3/RelatedPersonFhirResourceProvider.java\n\n@@ -11,10 +11,11 @@ package org.openmrs.module.fhir2.providers.r3;\n \n import javax.validation.constraints.NotNull;\n \n-import ca.uhn.fhir.rest.annotation.*;\n import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n import ca.uhn.fhir.rest.annotation.Read;\n import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.annotation.Sort;\n import ca.uhn.fhir.rest.api.SortSpec;\n import ca.uhn.fhir.rest.param.DateRangeParam;\n import ca.uhn.fhir.rest.param.StringAndListParam;\n"}}, {"oid": "39f6ff97e756e94ac9f762c802708040bac63460", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/39f6ff97e756e94ac9f762c802708040bac63460", "message": "fix changes.", "committedDate": "2020-06-12T22:45:55Z", "type": "forcePushed"}, {"oid": "acc7781e9ce676597e22a545a67f23efc9503229", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/acc7781e9ce676597e22a545a67f23efc9503229", "message": "FM2-139 Add initial changes for the related person search.", "committedDate": "2020-06-12T22:54:52Z", "type": "forcePushed"}, {"oid": "3229ffafa69a05c7a30868eeeb42a04b4b8a9c31", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3229ffafa69a05c7a30868eeeb42a04b4b8a9c31", "message": "FM2-139 Add support for related person search.", "committedDate": "2020-06-15T19:21:32Z", "type": "commit"}, {"oid": "3229ffafa69a05c7a30868eeeb42a04b4b8a9c31", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3229ffafa69a05c7a30868eeeb42a04b4b8a9c31", "message": "FM2-139 Add support for related person search.", "committedDate": "2020-06-15T19:21:32Z", "type": "forcePushed"}]}