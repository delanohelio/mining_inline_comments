{"pr_number": 111, "pr_title": "Optimize database operations in allergy intolerance resource", "pr_createdAt": "2020-03-09T14:30:48Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NzcwNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390097706", "bodyText": "Is this part of the optimization? If not, You should remove it", "author": "corneliouzbett", "createdAt": "2020-03-10T05:08:54Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirTaskDaoImpl.java", "diffHunk": "@@ -78,7 +78,8 @@ public FhirTask getTaskByUuid(String uuid) {\n \t\t// TODO: Handle optional params\n \t\t// Task.basedOn\n \t\tif (validReferenceParam(basedOnReference)) {\n-\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\").add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))\n+\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\")\n+\t\t\t        .add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))\n \t\t\t        .add(Restrictions.eq(\"bo.type\", basedOnReference.getResourceType()));\n \t\t}", "originalCommit": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMDg2NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390220865", "bodyText": "These are formatting changes applied by mvn clean install. I believe they should be part of the PR too.", "author": "jecihjoy", "createdAt": "2020-03-10T10:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NzcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTcwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391199705", "bodyText": "I'd take these out of the PR. It's going to be changed in a different commit and will just cause a conflict later.", "author": "ibacher", "createdAt": "2020-03-11T19:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NzcwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMDI4NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390100284", "bodyText": "What if  severityConceptUuids.size() == 3. This will return null which should not be the case. It should still return switch for the 3 UUIDs in the array and return there the concept", "author": "corneliouzbett", "createdAt": "2020-03-10T05:20:56Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +215,46 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConcept == null || severityConceptUuids.size() < 4) {\n \t\t\treturn null;\n \t\t}\n \t\t\n-\t\tif (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\tif (severityConcept.getUuid().equals(severityConceptUuids.get(0))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MILD;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(1))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MODERATE;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(2))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.SEVERE;\n \t\t} else {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.NULL;\n \t\t}\n \t}\n \t\n \tprivate Concept getOpenmrsSeverity(AllergyIntolerance.AllergyIntoleranceSeverity severity) {\n-\t\tConcept concept;\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConceptUuids.size() < 4) {\n+\t\t\treturn null;\n+\t\t}", "originalCommit": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4aebd0a7672c258f7055994edc51a1491192fd7", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\nindex 64365d00..df66f92b 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n\n@@ -215,9 +215,10 @@ public class AllergyIntoleranceTranslatorImpl extends AbstractReferenceHandlingT\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\n \t\tgetSeverityConceptUuids();\n \t\t\n-\t\tif (severityConcept == null || severityConceptUuids.size() < 4) {\n+\t\tif (severityConcept == null || severityConceptUuids.isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMTE2NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390101165", "bodyText": "You should be checking if the severityConceptUuids array is not empty", "author": "corneliouzbett", "createdAt": "2020-03-10T05:24:28Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +215,46 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConcept == null || severityConceptUuids.size() < 4) {\n \t\t\treturn null;", "originalCommit": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMTg5Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390101897", "bodyText": "globalPropertyService.getGlobalProperties(FhirConstants.GLOBAL_PROPERTY_MILD,\n\t\t    FhirConstants.GLOBAL_PROPERTY_MODERATE, FhirConstants.GLOBAL_PROPERTY_SEVERE,\n\t\t    FhirConstants.GLOBAL_PROPERTY_OTHER);\nThis method filters out null global properties. So there is a probability that size of results will not be 4 always", "author": "corneliouzbett", "createdAt": "2020-03-10T05:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMTE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d4aebd0a7672c258f7055994edc51a1491192fd7", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\nindex 64365d00..df66f92b 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n\n@@ -215,9 +215,10 @@ public class AllergyIntoleranceTranslatorImpl extends AbstractReferenceHandlingT\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\n \t\tgetSeverityConceptUuids();\n \t\t\n-\t\tif (severityConcept == null || severityConceptUuids.size() < 4) {\n+\t\tif (severityConcept == null || severityConceptUuids.isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \t\t\n"}}, {"oid": "d4aebd0a7672c258f7055994edc51a1491192fd7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d4aebd0a7672c258f7055994edc51a1491192fd7", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-10T10:28:01Z", "type": "forcePushed"}, {"oid": "393fdd0bb6b971681d5407c6e8209c82b9cb2dad", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/393fdd0bb6b971681d5407c6e8209c82b9cb2dad", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-10T10:28:28Z", "type": "forcePushed"}, {"oid": "55c0d0148d6404d500ec76d07b11ab47e5060521", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/55c0d0148d6404d500ec76d07b11ab47e5060521", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-10T10:36:16Z", "type": "forcePushed"}, {"oid": "1bb9d60a24965ab9b4e344842ea33a1b5104d8e8", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1bb9d60a24965ab9b4e344842ea33a1b5104d8e8", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-10T11:58:21Z", "type": "forcePushed"}, {"oid": "839dac94b469f5ceca9363e82136ae1fbc3e5f12", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/839dac94b469f5ceca9363e82136ae1fbc3e5f12", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-10T11:59:07Z", "type": "forcePushed"}, {"oid": "d03a6eb063bb80e69d403601653f6a0d1da66f99", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d03a6eb063bb80e69d403601653f6a0d1da66f99", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-10T12:14:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NzUzMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390297531", "bodyText": "Instead, utilize Stream API\nglobalProperties.stream().filter(p -> p != null).map(GlobalProperty::getPropertyValue)\n\t\t        .collect(Collectors.toMap(p::getProperty(), p::getPropertyValue()));", "author": "corneliouzbett", "createdAt": "2020-03-10T13:05:49Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java", "diffHunk": "@@ -47,10 +46,16 @@ public GlobalProperty getGlobalPropertyObject(String property) {\n \t}\n \t\n \t@Override\n-\tpublic List<String> getGlobalProperties(String... properties) {\n+\tpublic HashMap<String, String> getGlobalProperties(String... properties) {\n+\t\tHashMap<String, String> globalPropertiesMap = new HashMap<>();\n+\t\t\n \t\tCollection<GlobalProperty> globalProperties = (sessionFactory.getCurrentSession()\n \t\t        .createCriteria(GlobalProperty.class).add(Restrictions.in(\"property\", properties)).list());\n-\t\treturn globalProperties.stream().filter(p -> p != null).map(GlobalProperty::getPropertyValue)\n-\t\t        .collect(Collectors.toList());\n+\t\t\n+\t\tfor (GlobalProperty property : globalProperties) {\n+\t\t\tglobalPropertiesMap.put(property.getProperty(), property.getPropertyValue());\n+\t\t}\n+\t\t\n+\t\treturn globalPropertiesMap;", "originalCommit": "d03a6eb063bb80e69d403601653f6a0d1da66f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MjI2OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390552269", "bodyText": "I think in this case, the non-Stream API version is a bit easier to read.", "author": "ibacher", "createdAt": "2020-03-10T19:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NzUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f400fac1f75da11b5c68a6b14443b2d64280cded", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java\nindex 820ba2e6..93df7070 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java\n\n@@ -46,8 +47,8 @@ public class FhirGlobalPropertyDaoImpl implements FhirGlobalPropertyDao {\n \t}\n \t\n \t@Override\n-\tpublic HashMap<String, String> getGlobalProperties(String... properties) {\n-\t\tHashMap<String, String> globalPropertiesMap = new HashMap<>();\n+\tpublic Map<String, String> getGlobalProperties(String... properties) {\n+\t\tMap<String, String> globalPropertiesMap = new HashMap<>();\n \t\t\n \t\tCollection<GlobalProperty> globalProperties = (sessionFactory.getCurrentSession()\n \t\t        .createCriteria(GlobalProperty.class).add(Restrictions.in(\"property\", properties)).list());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTA4MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391199081", "bodyText": "Prefer Map to HashMap here", "author": "ibacher", "createdAt": "2020-03-11T19:06:11Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirGlobalPropertyService.java", "diffHunk": "@@ -9,7 +9,7 @@\n  */\n package org.openmrs.module.fhir2.api;\n \n-import java.util.List;\n+import java.util.HashMap;", "originalCommit": "d03a6eb063bb80e69d403601653f6a0d1da66f99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f400fac1f75da11b5c68a6b14443b2d64280cded", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/FhirGlobalPropertyService.java b/api/src/main/java/org/openmrs/module/fhir2/api/FhirGlobalPropertyService.java\nindex 70ecd382..ebd02835 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/FhirGlobalPropertyService.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/FhirGlobalPropertyService.java\n\n@@ -9,7 +9,7 @@\n  */\n package org.openmrs.module.fhir2.api;\n \n-import java.util.HashMap;\n+import java.util.Map;\n \n import org.openmrs.api.APIException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTQzMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391199433", "bodyText": "I'd still have this return a Map<String, String> rather than HashMap<String, String>", "author": "ibacher", "createdAt": "2020-03-11T19:06:53Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java", "diffHunk": "@@ -47,10 +46,16 @@ public GlobalProperty getGlobalPropertyObject(String property) {\n \t}\n \t\n \t@Override\n-\tpublic List<String> getGlobalProperties(String... properties) {\n+\tpublic HashMap<String, String> getGlobalProperties(String... properties) {", "originalCommit": "d03a6eb063bb80e69d403601653f6a0d1da66f99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f400fac1f75da11b5c68a6b14443b2d64280cded", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java\nindex 820ba2e6..93df7070 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java\n\n@@ -46,8 +47,8 @@ public class FhirGlobalPropertyDaoImpl implements FhirGlobalPropertyDao {\n \t}\n \t\n \t@Override\n-\tpublic HashMap<String, String> getGlobalProperties(String... properties) {\n-\t\tHashMap<String, String> globalPropertiesMap = new HashMap<>();\n+\tpublic Map<String, String> getGlobalProperties(String... properties) {\n+\t\tMap<String, String> globalPropertiesMap = new HashMap<>();\n \t\t\n \t\tCollection<GlobalProperty> globalProperties = (sessionFactory.getCurrentSession()\n \t\t        .createCriteria(GlobalProperty.class).add(Restrictions.in(\"property\", properties)).list());\n"}}, {"oid": "f400fac1f75da11b5c68a6b14443b2d64280cded", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f400fac1f75da11b5c68a6b14443b2d64280cded", "message": "Optimize application reloads using spring dev tools", "committedDate": "2020-03-12T12:13:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3Nzc3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391677777", "bodyText": "We should first check if the severityConcept is null and abort if that's the case.", "author": "ibacher", "createdAt": "2020-03-12T14:54:53Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +216,52 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\t\n+\t\tgetSeverityConceptUuids();", "originalCommit": "f400fac1f75da11b5c68a6b14443b2d64280cded", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ed7e56370e5ab21326797da033922042bd927ee", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\nindex 7692bbde..75aa034f 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n\n@@ -216,10 +216,13 @@ public class AllergyIntoleranceTranslatorImpl extends AbstractReferenceHandlingT\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\t\n \t\tgetSeverityConceptUuids();\n \t\t\n-\t\tif (severityConcept == null || severityConceptUuids.isEmpty()) {\n+\t\tif (severityConceptUuids.isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3ODc3OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391678778", "bodyText": "I'd also add an exit condition upfront for if severity is null.", "author": "ibacher", "createdAt": "2020-03-12T14:56:13Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +216,52 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\t\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConcept == null || severityConceptUuids.isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \t\t\n-\t\tif (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\tif (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MILD))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MILD;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MODERATE))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MODERATE;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_SEVERE))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.SEVERE;\n \t\t} else {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.NULL;\n \t\t}\n \t}\n \t\n \tprivate Concept getOpenmrsSeverity(AllergyIntolerance.AllergyIntoleranceSeverity severity) {\n-\t\tConcept concept;", "originalCommit": "f400fac1f75da11b5c68a6b14443b2d64280cded", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ed7e56370e5ab21326797da033922042bd927ee", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\nindex 7692bbde..75aa034f 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n\n@@ -216,10 +216,13 @@ public class AllergyIntoleranceTranslatorImpl extends AbstractReferenceHandlingT\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\t\n \t\tgetSeverityConceptUuids();\n \t\t\n-\t\tif (severityConcept == null || severityConceptUuids.isEmpty()) {\n+\t\tif (severityConceptUuids.isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY4MzE4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391683183", "bodyText": "Could we add some tests that cover the handleServerity method, especially for the different severity levels?", "author": "ibacher", "createdAt": "2020-03-12T15:02:24Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -129,13 +129,13 @@ private void handleAllergen(Criteria criteria, TokenOrListParam code) {\n \t\t\t\t        .fromCode(token.getValue());\n \t\t\t\tswitch (severity) {\n \t\t\t\t\tcase MILD:\n-\t\t\t\t\t\treturn Optional.of(eq(\"c.uuid\", severityConceptUuids.get(0)));", "originalCommit": "f400fac1f75da11b5c68a6b14443b2d64280cded", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed7618ef008723ef52357fbd2a022ddb1ce28671", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\nindex 14d14277..77164393 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\n\n@@ -121,7 +94,7 @@ public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAl\n \t\t    FhirConstants.GLOBAL_PROPERTY_MODERATE, FhirConstants.GLOBAL_PROPERTY_SEVERE,\n \t\t    FhirConstants.GLOBAL_PROPERTY_OTHER);\n \t\t\n-\t\tcriteria.createAlias(\"severity\", \"c\");\n+\t\tcriteria.createAlias(\"severity\", \"sc\");\n \t\t\n \t\treturn handleOrListParam(severityParam, token -> {\n \t\t\ttry {\n"}}, {"oid": "8ed7e56370e5ab21326797da033922042bd927ee", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8ed7e56370e5ab21326797da033922042bd927ee", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-13T13:41:54Z", "type": "forcePushed"}, {"oid": "2cf766748e629924e4dc255314f0a02f2f1adad0", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2cf766748e629924e4dc255314f0a02f2f1adad0", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-13T13:54:00Z", "type": "forcePushed"}, {"oid": "ed7618ef008723ef52357fbd2a022ddb1ce28671", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ed7618ef008723ef52357fbd2a022ddb1ce28671", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-17T14:39:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzM3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r393733377", "bodyText": "I don't think we want this as a class variable. It should just be a local variable in the one function that uses it.", "author": "ibacher", "createdAt": "2020-03-17T14:46:22Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -45,7 +46,7 @@\n \t@Inject\n \tprivate FhirGlobalPropertyService globalPropertyService;\n \t\n-\tprivate List<String> severityConceptUuids;\n+\tprivate Map<String, String> severityConceptUuids;", "originalCommit": "ed7618ef008723ef52357fbd2a022ddb1ce28671", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18af71b1f2c31905c61619b883b3fb57f318dd24", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\nindex 77164393..79168243 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\n\n@@ -46,8 +45,6 @@ public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAl\n \t@Inject\n \tprivate FhirGlobalPropertyService globalPropertyService;\n \t\n-\tprivate Map<String, String> severityConceptUuids;\n-\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNDMzOA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r393734338", "bodyText": "I'm not sure I understand why you've changed this method?", "author": "ibacher", "createdAt": "2020-03-17T14:47:32Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -101,44 +102,43 @@ private void handleAllergen(Criteria criteria, TokenOrListParam code) {\n \t\t\t\t        .fromCode(token.getValue());\n \t\t\t\tswitch (severity) {\n \t\t\t\t\tcase MILD:\n-\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(0)));\n+\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MILD)));\n \t\t\t\t\tcase MODERATE:\n-\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(1)));\n+\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MODERATE)));\n \t\t\t\t\tcase SEVERE:\n-\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(2)));\n+\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_SEVERE)));\n \t\t\t\t\tcase NULL:\n-\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(3)));\n+\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_OTHER)));\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (FHIRException ignored) {}\n \t\t\treturn Optional.empty();\n \t\t});\n \t}\n \t\n-\tprivate Optional<Criterion> handleAllergenCategory(String propertyName, TokenOrListParam categoryParam) {", "originalCommit": "ed7618ef008723ef52357fbd2a022ddb1ce28671", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18af71b1f2c31905c61619b883b3fb57f318dd24", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\nindex 77164393..79168243 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java\n\n@@ -116,29 +113,30 @@ public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAl\n \t\t});\n \t}\n \t\n-\tprivate void handleAllergenCategory(Criteria criteria, String propertyName, TokenOrListParam categoryParam) {\n-\t\tif (categoryParam != null) {\n-\t\t\t\n-\t\t\tfor (TokenParam token : categoryParam.getValuesAsQueryTokens()) {\n+\tprivate Optional<Criterion> handleAllergenCategory(String propertyName, TokenOrListParam categoryParam) {\n+\t\tif (categoryParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleOrListParam(categoryParam, token -> {\n+\t\t\ttry {\n \t\t\t\tAllergyIntolerance.AllergyIntoleranceCategory category = AllergyIntolerance.AllergyIntoleranceCategory\n \t\t\t\t        .fromCode(token.getValue());\n-\t\t\t\t\n \t\t\t\tswitch (category) {\n \t\t\t\t\tcase FOOD:\n-\t\t\t\t\t\tcriteria.add(eq(propertyName, AllergenType.FOOD));\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.FOOD));\n \t\t\t\t\tcase MEDICATION:\n-\t\t\t\t\t\tcriteria.add(eq(propertyName, AllergenType.DRUG));\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.DRUG));\n \t\t\t\t\tcase ENVIRONMENT:\n-\t\t\t\t\t\tcriteria.add(eq(propertyName, AllergenType.ENVIRONMENT));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tcriteria.add(eq(propertyName, AllergenType.OTHER));\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.ENVIRONMENT));\n+\t\t\t\t\tcase NULL:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.OTHER));\n \t\t\t\t}\n \t\t\t}\n-\t\t\t\n-\t\t}\n+\t\t\tcatch (FHIRException ignored) {}\n+\t\t\treturn Optional.empty();\n+\t\t});\n+\t\t\n \t}\n \t\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNjMzMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r393736330", "bodyText": "Instead of setting a class variable, just return the map from this function and use it as a local variable where needed. Storing state in DAO objects is a bad idea (what happens if the DAO needs to be called simultaneously for two different queries?)", "author": "ibacher", "createdAt": "2020-03-17T14:50:18Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -217,45 +220,54 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t\t\treturn null;\n \t\t}\n \t\t\n-\t\tif (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConceptUuids.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MILD))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MILD;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MODERATE))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MODERATE;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_SEVERE))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.SEVERE;\n \t\t} else {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.NULL;\n \t\t}\n \t}\n \t\n \tprivate Concept getOpenmrsSeverity(AllergyIntolerance.AllergyIntoleranceSeverity severity) {\n-\t\tConcept concept;\n+\t\tif (severity == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConceptUuids.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n \t\tswitch (severity) {\n \t\t\tcase MILD:\n-\t\t\t\tconcept = conceptService\n-\t\t\t\t        .getConceptByUuid(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD))\n+\t\t\t\treturn conceptService.getConceptByUuid(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MILD))\n \t\t\t\t        .orElse(null);\n-\t\t\t\tbreak;\n \t\t\tcase MODERATE:\n-\t\t\t\tconcept = conceptService\n-\t\t\t\t        .getConceptByUuid(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE))\n+\t\t\t\treturn conceptService.getConceptByUuid(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MODERATE))\n \t\t\t\t        .orElse(null);\n-\t\t\t\tbreak;\n \t\t\tcase SEVERE:\n-\t\t\t\tconcept = conceptService\n-\t\t\t\t        .getConceptByUuid(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE))\n+\t\t\t\treturn conceptService.getConceptByUuid(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_SEVERE))\n \t\t\t\t        .orElse(null);\n-\t\t\t\tbreak;\n \t\t\tcase NULL:\n \t\t\tdefault:\n-\t\t\t\tconcept = conceptService\n-\t\t\t\t        .getConceptByUuid(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_OTHER))\n+\t\t\t\treturn conceptService.getConceptByUuid(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_OTHER))\n \t\t\t\t        .orElse(null);\n \t\t}\n-\t\treturn concept;\n \t}\n \t\n+\tprivate void getSeverityConceptUuids() {", "originalCommit": "ed7618ef008723ef52357fbd2a022ddb1ce28671", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18af71b1f2c31905c61619b883b3fb57f318dd24", "chunk": "diff --git a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\nindex 4a5854e8..e1049581 100644\n--- a/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n+++ b/api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java\n\n@@ -220,7 +220,7 @@ public class AllergyIntoleranceTranslatorImpl extends AbstractReferenceHandlingT\n \t\t\treturn null;\n \t\t}\n \t\t\n-\t\tgetSeverityConceptUuids();\n+\t\tMap<String, String> severityConceptUuids = getSeverityConceptUuids();\n \t\t\n \t\tif (severityConceptUuids.isEmpty()) {\n \t\t\treturn null;\n"}}, {"oid": "18af71b1f2c31905c61619b883b3fb57f318dd24", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/18af71b1f2c31905c61619b883b3fb57f318dd24", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-17T15:51:38Z", "type": "commit"}, {"oid": "18af71b1f2c31905c61619b883b3fb57f318dd24", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/18af71b1f2c31905c61619b883b3fb57f318dd24", "message": "Optimize database operations in allergy intolerance resource", "committedDate": "2020-03-17T15:51:38Z", "type": "forcePushed"}]}