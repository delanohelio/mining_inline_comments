{"pr_number": 4775, "pr_title": "feat: Filter out datasets based on AOC sharing setting", "pr_createdAt": "2020-01-29T11:12:03Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/4775", "timeline": [{"oid": "3efd7ac74caf61a3157aa86caf5836234487e6d0", "url": "https://github.com/dhis2/dhis2-core/commit/3efd7ac74caf61a3157aa86caf5836234487e6d0", "message": "feat: Respect category option sharing setting", "committedDate": "2020-01-28T17:36:32Z", "type": "commit"}, {"oid": "a6c70f09016304dcc990ad62485e22e08401ad36", "url": "https://github.com/dhis2/dhis2-core/commit/a6c70f09016304dcc990ad62485e22e08401ad36", "message": "feat: filter out datasets with no AOC", "committedDate": "2020-01-29T11:02:17Z", "type": "commit"}, {"oid": "f1b8d07f77f5adb5c6ff58fb71cea036ef97ca72", "url": "https://github.com/dhis2/dhis2-core/commit/f1b8d07f77f5adb5c6ff58fb71cea036ef97ca72", "message": "chore: code style", "committedDate": "2020-01-29T11:10:21Z", "type": "commit"}, {"oid": "e7e5823f02b03099eb3e213a422e9cb89008c8dc", "url": "https://github.com/dhis2/dhis2-core/commit/e7e5823f02b03099eb3e213a422e9cb89008c8dc", "message": "perf: Check option acl per category", "committedDate": "2020-01-30T10:53:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU1NTM2NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/4775#discussion_r493555365", "bodyText": "this if construct is redundant. the last line does this check again", "author": "ameenhere", "createdAt": "2020-09-23T12:55:35Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/dataelement/DefaultCategoryService.java", "diffHunk": "@@ -292,6 +292,23 @@ public CategoryOption getDefaultCategoryOption()\n         return categoryOptionStore.getCategoryOptions( category );\r\n     }\r\n \r\n+    @Override\r\n+    @Transactional(readOnly = true)\r\n+    public List<CategoryOption> getDataWriteCategoryOptions( Category category, User user )\r\n+    {\r\n+        if ( user == null )\r\n+        {\r\n+            return Lists.newArrayList();\r\n+        }\r\n+\r\n+        if ( user.isSuper() )\r", "originalCommit": "e7e5823f02b03099eb3e213a422e9cb89008c8dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2ff2fe97f9816b98807f7e0f9e71d62f20b6a84", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/dataelement/DefaultCategoryService.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/dataelement/DefaultCategoryService.java\nindex 4aab9421c1..b64a0102e4 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/dataelement/DefaultCategoryService.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/dataelement/DefaultCategoryService.java\n\n@@ -1,903 +1,898 @@\n-package org.hisp.dhis.dataelement;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import com.google.common.collect.Lists;\n-import com.google.common.collect.Sets;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.hisp.dhis.category.Category;\n-import org.hisp.dhis.category.CategoryCombo;\n-import org.hisp.dhis.category.CategoryComboStore;\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.category.CategoryOptionComboStore;\n-import org.hisp.dhis.category.CategoryOptionGroup;\n-import org.hisp.dhis.category.CategoryOptionGroupSet;\n-import org.hisp.dhis.category.CategoryOptionGroupSetStore;\n-import org.hisp.dhis.category.CategoryOptionGroupStore;\n-import org.hisp.dhis.category.CategoryOptionStore;\n-import org.hisp.dhis.category.CategoryService;\n-import org.hisp.dhis.category.CategoryStore;\n-import org.hisp.dhis.common.DataDimensionType;\n-import org.hisp.dhis.common.DeleteNotAllowedException;\n-import org.hisp.dhis.common.IdentifiableObjectManager;\n-import org.hisp.dhis.common.IdentifiableProperty;\n-import org.hisp.dhis.dataset.DataSet;\n-import org.hisp.dhis.dataset.DataSetElement;\n-import org.hisp.dhis.security.acl.AccessStringHelper;\n-import org.hisp.dhis.security.acl.AclService;\n-import org.hisp.dhis.user.CurrentUserService;\n-import org.hisp.dhis.user.User;\n-import org.hisp.dhis.user.UserCredentials;\n-import org.springframework.stereotype.Service;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n-/**\n- * @author Abyot Asalefew\n- */\n-@Service( \"org.hisp.dhis.category.CategoryService\" )\n-public class DefaultCategoryService\n-    implements CategoryService\n-{\n-    private static final Log log = LogFactory.getLog( DefaultCategoryService.class );\n-\n-    // -------------------------------------------------------------------------\n-    // Dependencies\n-    // -------------------------------------------------------------------------\n-\n-    private final CategoryStore categoryStore;\n-\n-    private final CategoryOptionStore categoryOptionStore;\n-\n-    private final CategoryComboStore categoryComboStore;\n-\n-    private final CategoryOptionComboStore categoryOptionComboStore;\n-\n-    private final CategoryOptionGroupStore categoryOptionGroupStore;\n-\n-    private final CategoryOptionGroupSetStore categoryOptionGroupSetStore;\n-\n-    private final IdentifiableObjectManager idObjectManager;\n-\n-    private final CurrentUserService currentUserService;\n-\n-    private final AclService aclService;\n-\n-    public DefaultCategoryService( CategoryStore categoryStore, CategoryOptionStore categoryOptionStore,\n-        CategoryComboStore categoryComboStore, CategoryOptionComboStore categoryOptionComboStore,\n-        CategoryOptionGroupStore categoryOptionGroupStore, CategoryOptionGroupSetStore categoryOptionGroupSetStore,\n-        IdentifiableObjectManager idObjectManager, CurrentUserService currentUserService, AclService aclService )\n-    {\n-\n-        checkNotNull( categoryStore );\n-        checkNotNull( categoryOptionStore );\n-        checkNotNull( categoryComboStore );\n-        checkNotNull( categoryOptionComboStore );\n-        checkNotNull( categoryOptionGroupStore );\n-        checkNotNull( categoryOptionGroupSetStore );\n-        checkNotNull( idObjectManager );\n-        checkNotNull( currentUserService );\n-        checkNotNull( aclService );\n-\n-        this.categoryStore = categoryStore;\n-        this.categoryOptionStore = categoryOptionStore;\n-        this.categoryComboStore = categoryComboStore;\n-        this.categoryOptionComboStore = categoryOptionComboStore;\n-        this.categoryOptionGroupStore = categoryOptionGroupStore;\n-        this.categoryOptionGroupSetStore = categoryOptionGroupSetStore;\n-        this.idObjectManager = idObjectManager;\n-        this.currentUserService = currentUserService;\n-        this.aclService = aclService;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // Category\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    @Transactional\n-    public long addCategory( Category dataElementCategory )\n-    {\n-        categoryStore.save( dataElementCategory );\n-\n-        return dataElementCategory.getId();\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateCategory( Category dataElementCategory )\n-    {\n-        categoryStore.update( dataElementCategory );\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void deleteCategory( Category dataElementCategory )\n-    {\n-        categoryStore.delete( dataElementCategory );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<Category> getAllDataElementCategories()\n-    {\n-        return categoryStore.getAll();\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public Category getCategory( long id )\n-    {\n-        return categoryStore.get( id );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public Category getCategory( String uid )\n-    {\n-        return categoryStore.getByUid( uid );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public Category getCategoryByName( String name )\n-    {\n-        List<Category> dataElementCategories = new ArrayList<>(\n-            categoryStore.getAllEqName( name ) );\n-\n-        if ( dataElementCategories.isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        return dataElementCategories.get( 0 );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public Category getDefaultCategory()\n-    {\n-        return getCategoryByName( Category.DEFAULT_NAME );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<Category> getDisaggregationCategories()\n-    {\n-        return categoryStore.getCategoriesByDimensionType( DataDimensionType.DISAGGREGATION );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<Category> getDisaggregationDataDimensionCategoriesNoAcl()\n-    {\n-        return categoryStore.getCategoriesNoAcl( DataDimensionType.DISAGGREGATION, true );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<Category> getAttributeCategories()\n-    {\n-        return categoryStore.getCategoriesByDimensionType( DataDimensionType.ATTRIBUTE );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<Category> getAttributeDataDimensionCategoriesNoAcl()\n-    {\n-        return categoryStore.getCategoriesNoAcl( DataDimensionType.ATTRIBUTE, true );\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // CategoryOption\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    @Transactional\n-    public long addCategoryOption( CategoryOption dataElementCategoryOption )\n-    {\n-        categoryOptionStore.save( dataElementCategoryOption );\n-\n-        return dataElementCategoryOption.getId();\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateCategoryOption( CategoryOption dataElementCategoryOption )\n-    {\n-        categoryOptionStore.update( dataElementCategoryOption );\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void deleteCategoryOption( CategoryOption dataElementCategoryOption )\n-    {\n-        categoryOptionStore.delete( dataElementCategoryOption );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOption getCategoryOption( long id )\n-    {\n-        return categoryOptionStore.get( id );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOption getCategoryOption( String uid )\n-    {\n-        return categoryOptionStore.getByUid( uid );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOption getCategoryOptionByName( String name )\n-    {\n-        return categoryOptionStore.getByName( name );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOption getDefaultCategoryOption()\n-    {\n-        return getCategoryOptionByName( CategoryOption.DEFAULT_NAME );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOption> getAllCategoryOptions()\n-    {\n-        return categoryOptionStore.getAll();\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOption> getCategoryOptions( Category category )\n-    {\n-        return categoryOptionStore.getCategoryOptions( category );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOption> getDataWriteCategoryOptions( Category category, User user )\n-    {\n-        if ( user == null )\n-        {\n-            return Lists.newArrayList();\n-        }\n-\n-        if ( user.isSuper() )\n-        {\n-            return getCategoryOptions( category );\n-        }\n-\n-        return user.isSuper() ? getCategoryOptions( category ) : categoryOptionStore.getDataWriteCategoryOptions( category, user );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public Set<CategoryOption> getCoDimensionConstraints( UserCredentials userCredentials )\n-    {\n-        Set<CategoryOption> options = null;\n-\n-        Set<Category> catConstraints = userCredentials.getCatDimensionConstraints();\n-\n-        if ( catConstraints != null && !catConstraints.isEmpty() )\n-        {\n-            options = new HashSet<>();\n-\n-            for ( Category category : catConstraints )\n-            {\n-                options.addAll( getCategoryOptions( category ) );\n-            }\n-        }\n-\n-        return options;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // CategoryCombo\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    @Transactional\n-    public long addCategoryCombo( CategoryCombo dataElementCategoryCombo )\n-    {\n-        categoryComboStore.save( dataElementCategoryCombo );\n-\n-        return dataElementCategoryCombo.getId();\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateCategoryCombo( CategoryCombo dataElementCategoryCombo )\n-    {\n-        categoryComboStore.update( dataElementCategoryCombo );\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void deleteCategoryCombo( CategoryCombo dataElementCategoryCombo )\n-    {\n-        categoryComboStore.delete( dataElementCategoryCombo );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryCombo> getAllCategoryCombos()\n-    {\n-        return categoryComboStore.getAll();\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryCombo getCategoryCombo( long id )\n-    {\n-        return categoryComboStore.get( id );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryCombo getCategoryCombo( String uid )\n-    {\n-        return categoryComboStore.getByUid( uid );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryCombo getCategoryComboByName( String name )\n-    {\n-        return categoryComboStore.getByName( name );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryCombo getDefaultCategoryCombo()\n-    {\n-        return getCategoryComboByName( CategoryCombo.DEFAULT_CATEGORY_COMBO_NAME );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryCombo> getDisaggregationCategoryCombos()\n-    {\n-        return categoryComboStore.getCategoryCombosByDimensionType( DataDimensionType.DISAGGREGATION );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryCombo> getAttributeCategoryCombos()\n-    {\n-        return categoryComboStore.getCategoryCombosByDimensionType( DataDimensionType.ATTRIBUTE );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public String validateCategoryCombo( CategoryCombo categoryCombo )\n-    {\n-        if ( categoryCombo == null )\n-        {\n-            return \"category_combo_is_null\";\n-        }\n-\n-        if ( categoryCombo.getCategories() == null || categoryCombo.getCategories().isEmpty() )\n-        {\n-            return \"category_combo_must_have_at_least_one_category\";\n-        }\n-\n-        if ( Sets.newHashSet( categoryCombo.getCategories() ).size() < categoryCombo.getCategories().size() )\n-        {\n-            return \"category_combo_cannot_have_duplicate_categories\";\n-        }\n-\n-        Set<CategoryOption> categoryOptions = new HashSet<>();\n-\n-        for ( Category category : categoryCombo.getCategories() )\n-        {\n-            if ( category == null || category.getCategoryOptions().isEmpty() )\n-            {\n-                return \"categories_must_have_at_least_one_category_option\";\n-            }\n-\n-            if ( !Sets.intersection( categoryOptions, Sets.newHashSet( category.getCategoryOptions() ) ).isEmpty() )\n-            {\n-                return \"categories_cannot_share_category_options\";\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // CategoryOptionCombo\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    @Transactional\n-    public long addCategoryOptionCombo( CategoryOptionCombo dataElementCategoryOptionCombo )\n-    {\n-        categoryOptionComboStore.save( dataElementCategoryOptionCombo );\n-\n-        return dataElementCategoryOptionCombo.getId();\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateCategoryOptionCombo( CategoryOptionCombo dataElementCategoryOptionCombo )\n-    {\n-        categoryOptionComboStore.update( dataElementCategoryOptionCombo );\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void deleteCategoryOptionCombo( CategoryOptionCombo dataElementCategoryOptionCombo )\n-    {\n-        categoryOptionComboStore.delete( dataElementCategoryOptionCombo );\n-    }\n-\n-    @Override\n-    @Transactional( noRollbackFor = DeleteNotAllowedException.class )\n-    public void deleteCategoryOptionComboNoRollback( CategoryOptionCombo categoryOptionCombo )\n-    {\n-        categoryOptionComboStore.deleteNoRollBack( categoryOptionCombo );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionCombo getCategoryOptionCombo( long id )\n-    {\n-        return categoryOptionComboStore.get( id );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionCombo getCategoryOptionCombo( String uid )\n-    {\n-        return categoryOptionComboStore.getByUid( uid );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionCombo getCategoryOptionComboByCode( String code )\n-    {\n-        return categoryOptionComboStore.getByCode( code );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionCombo getCategoryOptionCombo( CategoryCombo categoryCombo,\n-        Set<CategoryOption> categoryOptions )\n-    {\n-        return categoryOptionComboStore.getCategoryOptionCombo( categoryCombo, categoryOptions );\n-    }\n-\n-    @Override\n-    public CategoryOptionCombo getCategoryOptionCombo( IdentifiableProperty property, String id )\n-    {\n-        return idObjectManager.getObject( CategoryOptionCombo.class, property, id );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOptionCombo> getAllCategoryOptionCombos()\n-    {\n-        return categoryOptionComboStore.getAll();\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void generateDefaultDimension()\n-    {\n-        // ---------------------------------------------------------------------\n-        // CategoryOption\n-        // ---------------------------------------------------------------------\n-\n-        CategoryOption categoryOption = new CategoryOption( CategoryOption.DEFAULT_NAME );\n-        categoryOption.setUid( \"xYerKDKCefk\" );\n-        categoryOption.setCode( \"default\" );\n-\n-        addCategoryOption( categoryOption );\n-\n-        categoryOption.setPublicAccess( AccessStringHelper.CATEGORY_OPTION_DEFAULT );\n-        updateCategoryOption( categoryOption );\n-\n-        // ---------------------------------------------------------------------\n-        // Category\n-        // ---------------------------------------------------------------------\n-\n-        Category category = new Category( Category.DEFAULT_NAME, DataDimensionType.DISAGGREGATION );\n-        category.setUid( \"GLevLNI9wkl\" );\n-        category.setCode( \"default\" );\n-        category.setDataDimension( false );\n-\n-        category.addCategoryOption( categoryOption );\n-        addCategory( category );\n-\n-        category.setPublicAccess( AccessStringHelper.CATEGORY_NO_DATA_SHARING_DEFAULT );\n-        updateCategory( category );\n-\n-        // ---------------------------------------------------------------------\n-        // CategoryCombo\n-        // ---------------------------------------------------------------------\n-\n-        CategoryCombo categoryCombo = new CategoryCombo( CategoryCombo.DEFAULT_CATEGORY_COMBO_NAME, DataDimensionType.DISAGGREGATION );\n-        categoryCombo.setUid( \"bjDvmb4bfuf\" );\n-        categoryCombo.setCode( \"default\" );\n-        categoryCombo.setDataDimensionType( DataDimensionType.DISAGGREGATION );\n-\n-        categoryCombo.addCategory( category );\n-        addCategoryCombo( categoryCombo );\n-\n-        categoryCombo.setPublicAccess( AccessStringHelper.CATEGORY_NO_DATA_SHARING_DEFAULT );\n-        updateCategoryCombo( categoryCombo );\n-\n-        // ---------------------------------------------------------------------\n-        // CategoryOptionCombo\n-        // ---------------------------------------------------------------------\n-\n-        CategoryOptionCombo categoryOptionCombo = new CategoryOptionCombo();\n-        categoryOptionCombo.setUid( \"HllvX50cXC0\" );\n-        categoryOptionCombo.setCode( \"default\" );\n-\n-        categoryOptionCombo.setCategoryCombo( categoryCombo );\n-        categoryOptionCombo.addCategoryOption( categoryOption );\n-\n-        addCategoryOptionCombo( categoryOptionCombo );\n-\n-        categoryOptionCombo.setPublicAccess( AccessStringHelper.CATEGORY_NO_DATA_SHARING_DEFAULT );\n-        updateCategoryOptionCombo( categoryOptionCombo );\n-\n-        Set<CategoryOptionCombo> categoryOptionCombos = new HashSet<>();\n-        categoryOptionCombos.add( categoryOptionCombo );\n-        categoryCombo.setOptionCombos( categoryOptionCombos );\n-\n-        updateCategoryCombo( categoryCombo );\n-\n-        categoryOption.setCategoryOptionCombos( categoryOptionCombos );\n-        updateCategoryOption( categoryOption );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionCombo getDefaultCategoryOptionCombo()\n-    {\n-        CategoryCombo categoryCombo = getCategoryComboByName( CategoryCombo.DEFAULT_CATEGORY_COMBO_NAME );\n-\n-        return categoryCombo != null && categoryCombo.hasOptionCombos() ? categoryCombo.getOptionCombos().iterator().next() : null;\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void generateOptionCombos( CategoryCombo categoryCombo )\n-    {\n-        categoryCombo.generateOptionCombos();\n-\n-        for ( CategoryOptionCombo optionCombo : categoryCombo.getOptionCombos() )\n-        {\n-            categoryCombo.getOptionCombos().add( optionCombo );\n-            addCategoryOptionCombo( optionCombo );\n-        }\n-\n-        updateCategoryCombo( categoryCombo );\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateOptionCombos( Category category )\n-    {\n-        for ( CategoryCombo categoryCombo : getAllCategoryCombos() )\n-        {\n-            if ( categoryCombo.getCategories().contains( category ) )\n-            {\n-                updateOptionCombos( categoryCombo );\n-            }\n-        }\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateOptionCombos( CategoryCombo categoryCombo )\n-    {\n-        if ( categoryCombo == null || !categoryCombo.isValid() )\n-        {\n-            log.warn( \"Category combo is null or invalid, could not update option combos: \" + categoryCombo );\n-            return;\n-        }\n-\n-        List<CategoryOptionCombo> generatedOptionCombos = categoryCombo.generateOptionCombosList();\n-        Set<CategoryOptionCombo> persistedOptionCombos = categoryCombo.getOptionCombos();\n-\n-        boolean modified = false;\n-\n-        for ( CategoryOptionCombo optionCombo : generatedOptionCombos )\n-        {\n-            if ( !persistedOptionCombos.contains( optionCombo ) )\n-            {\n-                categoryCombo.getOptionCombos().add( optionCombo );\n-                addCategoryOptionCombo( optionCombo );\n-\n-                log.info( \"Added missing category option combo: \" + optionCombo + \" for category combo: \"\n-                    + categoryCombo.getName() );\n-                modified = true;\n-            }\n-        }\n-\n-        if ( modified )\n-        {\n-            updateCategoryCombo( categoryCombo );\n-        }\n-    }\n-\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionCombo getCategoryOptionComboAcl( IdentifiableProperty property, String id )\n-    {\n-        CategoryOptionCombo coc = idObjectManager.getObject( CategoryOptionCombo.class, property, id );\n-\n-        if ( coc != null )\n-        {\n-            User user = currentUserService.getCurrentUser();\n-\n-            for ( CategoryOption categoryOption : coc.getCategoryOptions() )\n-            {\n-                if ( !aclService.canDataWrite( user, categoryOption ) )\n-                {\n-                    return null;\n-                }\n-            }\n-        }\n-\n-        return coc;\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateCategoryOptionComboNames()\n-    {\n-        categoryOptionComboStore.updateNames();\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // DataElementOperand\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<DataElementOperand> getOperands( Collection<DataElement> dataElements )\n-    {\n-        return getOperands( dataElements, false );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<DataElementOperand> getOperands( Collection<DataElement> dataElements, boolean includeTotals )\n-    {\n-        List<DataElementOperand> operands = Lists.newArrayList();\n-\n-        for ( DataElement dataElement : dataElements )\n-        {\n-            Set<CategoryCombo> categoryCombos = dataElement.getCategoryCombos();\n-\n-            boolean anyIsDefault = categoryCombos.stream().anyMatch( cc -> cc.isDefault() );\n-\n-            if ( includeTotals && !anyIsDefault )\n-            {\n-                operands.add( new DataElementOperand( dataElement ) );\n-            }\n-\n-            for ( CategoryCombo categoryCombo : categoryCombos )\n-            {\n-                operands.addAll( getOperands( dataElement, categoryCombo ) );\n-            }\n-        }\n-\n-        return operands;\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<DataElementOperand> getOperands( DataSet dataSet, boolean includeTotals )\n-    {\n-        List<DataElementOperand> operands = Lists.newArrayList();\n-\n-        for ( DataSetElement element : dataSet.getDataSetElements() )\n-        {\n-            CategoryCombo categoryCombo = element.getResolvedCategoryCombo();\n-\n-            if ( includeTotals && !categoryCombo.isDefault() )\n-            {\n-                operands.add( new DataElementOperand( element.getDataElement() ) );\n-            }\n-\n-            operands.addAll( getOperands( element.getDataElement(), element.getResolvedCategoryCombo() ) );\n-        }\n-\n-        return operands;\n-    }\n-\n-    private List<DataElementOperand> getOperands( DataElement dataElement, CategoryCombo categoryCombo )\n-    {\n-        List<DataElementOperand> operands = Lists.newArrayList();\n-\n-        for ( CategoryOptionCombo categoryOptionCombo : categoryCombo.getSortedOptionCombos() )\n-        {\n-            operands.add( new DataElementOperand( dataElement, categoryOptionCombo ) );\n-        }\n-\n-        return operands;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // CategoryOptionGroup\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    @Transactional\n-    public long saveCategoryOptionGroup( CategoryOptionGroup group )\n-    {\n-        categoryOptionGroupStore.save( group );\n-\n-        return group.getId();\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateCategoryOptionGroup( CategoryOptionGroup group )\n-    {\n-        categoryOptionGroupStore.update( group );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionGroup getCategoryOptionGroup( long id )\n-    {\n-        return categoryOptionGroupStore.get( id );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionGroup getCategoryOptionGroup( String uid )\n-    {\n-        return categoryOptionGroupStore.getByUid( uid );\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void deleteCategoryOptionGroup( CategoryOptionGroup group )\n-    {\n-        categoryOptionGroupStore.delete( group );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOptionGroup> getAllCategoryOptionGroups()\n-    {\n-        return categoryOptionGroupStore.getAll();\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOptionGroup> getCategoryOptionGroups( CategoryOptionGroupSet groupSet )\n-    {\n-        return categoryOptionGroupStore.getCategoryOptionGroups( groupSet );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public Set<CategoryOptionGroup> getCogDimensionConstraints( UserCredentials userCredentials )\n-    {\n-        Set<CategoryOptionGroup> groups = null;\n-\n-        Set<CategoryOptionGroupSet> cogsConstraints = userCredentials.getCogsDimensionConstraints();\n-\n-        if ( cogsConstraints != null && !cogsConstraints.isEmpty() )\n-        {\n-            groups = new HashSet<>();\n-\n-            for ( CategoryOptionGroupSet cogs : cogsConstraints )\n-            {\n-                groups.addAll( getCategoryOptionGroups( cogs ) );\n-            }\n-        }\n-\n-        return groups;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // CategoryOptionGroupSet\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    @Transactional\n-    public long saveCategoryOptionGroupSet( CategoryOptionGroupSet group )\n-    {\n-        categoryOptionGroupSetStore.save( group );\n-\n-        return group.getId();\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void updateCategoryOptionGroupSet( CategoryOptionGroupSet group )\n-    {\n-        categoryOptionGroupSetStore.update( group );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionGroupSet getCategoryOptionGroupSet( long id )\n-    {\n-        return categoryOptionGroupSetStore.get( id );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public CategoryOptionGroupSet getCategoryOptionGroupSet( String uid )\n-    {\n-        return categoryOptionGroupSetStore.getByUid( uid );\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void deleteCategoryOptionGroupSet( CategoryOptionGroupSet group )\n-    {\n-        categoryOptionGroupSetStore.delete( group );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOptionGroupSet> getAllCategoryOptionGroupSets()\n-    {\n-        return categoryOptionGroupSetStore.getAll();\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOptionGroupSet> getDisaggregationCategoryOptionGroupSetsNoAcl()\n-    {\n-        return categoryOptionGroupSetStore.getCategoryOptionGroupSetsNoAcl( DataDimensionType.DISAGGREGATION, true );\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<CategoryOptionGroupSet> getAttributeCategoryOptionGroupSetsNoAcl()\n-    {\n-        return categoryOptionGroupSetStore.getCategoryOptionGroupSetsNoAcl( DataDimensionType.ATTRIBUTE, true );\n-    }\n-}\n+package org.hisp.dhis.dataelement;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.Category;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryComboStore;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.category.CategoryOptionComboStore;\n+import org.hisp.dhis.category.CategoryOptionGroup;\n+import org.hisp.dhis.category.CategoryOptionGroupSet;\n+import org.hisp.dhis.category.CategoryOptionGroupSetStore;\n+import org.hisp.dhis.category.CategoryOptionGroupStore;\n+import org.hisp.dhis.category.CategoryOptionStore;\n+import org.hisp.dhis.category.CategoryService;\n+import org.hisp.dhis.category.CategoryStore;\n+import org.hisp.dhis.common.DataDimensionType;\n+import org.hisp.dhis.common.DeleteNotAllowedException;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.dataset.DataSet;\n+import org.hisp.dhis.dataset.DataSetElement;\n+import org.hisp.dhis.security.acl.AccessStringHelper;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Abyot Asalefew\n+ */\n+@Slf4j\n+@Service( \"org.hisp.dhis.category.CategoryService\" )\n+public class DefaultCategoryService\n+    implements CategoryService\n+{\n+    // -------------------------------------------------------------------------\n+    // Dependencies\n+    // -------------------------------------------------------------------------\n+\n+    private final CategoryStore categoryStore;\n+\n+    private final CategoryOptionStore categoryOptionStore;\n+\n+    private final CategoryComboStore categoryComboStore;\n+\n+    private final CategoryOptionComboStore categoryOptionComboStore;\n+\n+    private final CategoryOptionGroupStore categoryOptionGroupStore;\n+\n+    private final CategoryOptionGroupSetStore categoryOptionGroupSetStore;\n+\n+    private final IdentifiableObjectManager idObjectManager;\n+\n+    private final CurrentUserService currentUserService;\n+\n+    private final AclService aclService;\n+\n+    public DefaultCategoryService( CategoryStore categoryStore, CategoryOptionStore categoryOptionStore,\n+        CategoryComboStore categoryComboStore, CategoryOptionComboStore categoryOptionComboStore,\n+        CategoryOptionGroupStore categoryOptionGroupStore, CategoryOptionGroupSetStore categoryOptionGroupSetStore,\n+        IdentifiableObjectManager idObjectManager, CurrentUserService currentUserService, AclService aclService )\n+    {\n+\n+        checkNotNull( categoryStore );\n+        checkNotNull( categoryOptionStore );\n+        checkNotNull( categoryComboStore );\n+        checkNotNull( categoryOptionComboStore );\n+        checkNotNull( categoryOptionGroupStore );\n+        checkNotNull( categoryOptionGroupSetStore );\n+        checkNotNull( idObjectManager );\n+        checkNotNull( currentUserService );\n+        checkNotNull( aclService );\n+\n+        this.categoryStore = categoryStore;\n+        this.categoryOptionStore = categoryOptionStore;\n+        this.categoryComboStore = categoryComboStore;\n+        this.categoryOptionComboStore = categoryOptionComboStore;\n+        this.categoryOptionGroupStore = categoryOptionGroupStore;\n+        this.categoryOptionGroupSetStore = categoryOptionGroupSetStore;\n+        this.idObjectManager = idObjectManager;\n+        this.currentUserService = currentUserService;\n+        this.aclService = aclService;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // Category\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    @Transactional\n+    public long addCategory( Category dataElementCategory )\n+    {\n+        categoryStore.save( dataElementCategory );\n+\n+        return dataElementCategory.getId();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateCategory( Category dataElementCategory )\n+    {\n+        categoryStore.update( dataElementCategory );\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteCategory( Category dataElementCategory )\n+    {\n+        categoryStore.delete( dataElementCategory );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<Category> getAllDataElementCategories()\n+    {\n+        return categoryStore.getAll();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Category getCategory( long id )\n+    {\n+        return categoryStore.get( id );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Category getCategory( String uid )\n+    {\n+        return categoryStore.getByUid( uid );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Category getCategoryByName( String name )\n+    {\n+        List<Category> dataElementCategories = new ArrayList<>(\n+            categoryStore.getAllEqName( name ) );\n+\n+        if ( dataElementCategories.isEmpty() )\n+        {\n+            return null;\n+        }\n+\n+        return dataElementCategories.get( 0 );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Category getDefaultCategory()\n+    {\n+        return getCategoryByName( Category.DEFAULT_NAME );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<Category> getDisaggregationCategories()\n+    {\n+        return categoryStore.getCategoriesByDimensionType( DataDimensionType.DISAGGREGATION );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<Category> getDisaggregationDataDimensionCategoriesNoAcl()\n+    {\n+        return categoryStore.getCategoriesNoAcl( DataDimensionType.DISAGGREGATION, true );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<Category> getAttributeCategories()\n+    {\n+        return categoryStore.getCategoriesByDimensionType( DataDimensionType.ATTRIBUTE );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<Category> getAttributeDataDimensionCategoriesNoAcl()\n+    {\n+        return categoryStore.getCategoriesNoAcl( DataDimensionType.ATTRIBUTE, true );\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // CategoryOption\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    @Transactional\n+    public long addCategoryOption( CategoryOption dataElementCategoryOption )\n+    {\n+        categoryOptionStore.save( dataElementCategoryOption );\n+\n+        return dataElementCategoryOption.getId();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateCategoryOption( CategoryOption dataElementCategoryOption )\n+    {\n+        categoryOptionStore.update( dataElementCategoryOption );\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteCategoryOption( CategoryOption dataElementCategoryOption )\n+    {\n+        categoryOptionStore.delete( dataElementCategoryOption );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOption getCategoryOption( long id )\n+    {\n+        return categoryOptionStore.get( id );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOption getCategoryOption( String uid )\n+    {\n+        return categoryOptionStore.getByUid( uid );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOption getCategoryOptionByName( String name )\n+    {\n+        return categoryOptionStore.getByName( name );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOption getDefaultCategoryOption()\n+    {\n+        return getCategoryOptionByName( CategoryOption.DEFAULT_NAME );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOption> getAllCategoryOptions()\n+    {\n+        return categoryOptionStore.getAll();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOption> getCategoryOptions( Category category )\n+    {\n+        return categoryOptionStore.getCategoryOptions( category );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOption> getDataWriteCategoryOptions( Category category, User user )\n+    {\n+        if ( user == null )\n+        {\n+            return Lists.newArrayList();\n+        }\n+\n+        return user.isSuper() ? getCategoryOptions( category ) : categoryOptionStore.getDataWriteCategoryOptions( category, user );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Set<CategoryOption> getCoDimensionConstraints( UserCredentials userCredentials )\n+    {\n+        Set<CategoryOption> options = null;\n+\n+        Set<Category> catConstraints = userCredentials.getCatDimensionConstraints();\n+\n+        if ( catConstraints != null && !catConstraints.isEmpty() )\n+        {\n+            options = new HashSet<>();\n+\n+            for ( Category category : catConstraints )\n+            {\n+                options.addAll( getCategoryOptions( category ) );\n+            }\n+        }\n+\n+        return options;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // CategoryCombo\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    @Transactional\n+    public long addCategoryCombo( CategoryCombo dataElementCategoryCombo )\n+    {\n+        categoryComboStore.save( dataElementCategoryCombo );\n+\n+        return dataElementCategoryCombo.getId();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateCategoryCombo( CategoryCombo dataElementCategoryCombo )\n+    {\n+        categoryComboStore.update( dataElementCategoryCombo );\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteCategoryCombo( CategoryCombo dataElementCategoryCombo )\n+    {\n+        categoryComboStore.delete( dataElementCategoryCombo );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryCombo> getAllCategoryCombos()\n+    {\n+        return categoryComboStore.getAll();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryCombo getCategoryCombo( long id )\n+    {\n+        return categoryComboStore.get( id );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryCombo getCategoryCombo( String uid )\n+    {\n+        return categoryComboStore.getByUid( uid );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryCombo getCategoryComboByName( String name )\n+    {\n+        return categoryComboStore.getByName( name );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryCombo getDefaultCategoryCombo()\n+    {\n+        return getCategoryComboByName( CategoryCombo.DEFAULT_CATEGORY_COMBO_NAME );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryCombo> getDisaggregationCategoryCombos()\n+    {\n+        return categoryComboStore.getCategoryCombosByDimensionType( DataDimensionType.DISAGGREGATION );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryCombo> getAttributeCategoryCombos()\n+    {\n+        return categoryComboStore.getCategoryCombosByDimensionType( DataDimensionType.ATTRIBUTE );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public String validateCategoryCombo( CategoryCombo categoryCombo )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            return \"category_combo_is_null\";\n+        }\n+\n+        if ( categoryCombo.getCategories() == null || categoryCombo.getCategories().isEmpty() )\n+        {\n+            return \"category_combo_must_have_at_least_one_category\";\n+        }\n+\n+        if ( Sets.newHashSet( categoryCombo.getCategories() ).size() < categoryCombo.getCategories().size() )\n+        {\n+            return \"category_combo_cannot_have_duplicate_categories\";\n+        }\n+\n+        Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+        for ( Category category : categoryCombo.getCategories() )\n+        {\n+            if ( category == null || category.getCategoryOptions().isEmpty() )\n+            {\n+                return \"categories_must_have_at_least_one_category_option\";\n+            }\n+\n+            if ( !Sets.intersection( categoryOptions, Sets.newHashSet( category.getCategoryOptions() ) ).isEmpty() )\n+            {\n+                return \"categories_cannot_share_category_options\";\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // CategoryOptionCombo\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    @Transactional\n+    public long addCategoryOptionCombo( CategoryOptionCombo dataElementCategoryOptionCombo )\n+    {\n+        categoryOptionComboStore.save( dataElementCategoryOptionCombo );\n+\n+        return dataElementCategoryOptionCombo.getId();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateCategoryOptionCombo( CategoryOptionCombo dataElementCategoryOptionCombo )\n+    {\n+        categoryOptionComboStore.update( dataElementCategoryOptionCombo );\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteCategoryOptionCombo( CategoryOptionCombo dataElementCategoryOptionCombo )\n+    {\n+        categoryOptionComboStore.delete( dataElementCategoryOptionCombo );\n+    }\n+\n+    @Override\n+    @Transactional( noRollbackFor = DeleteNotAllowedException.class )\n+    public void deleteCategoryOptionComboNoRollback( CategoryOptionCombo categoryOptionCombo )\n+    {\n+        categoryOptionComboStore.deleteNoRollBack( categoryOptionCombo );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionCombo getCategoryOptionCombo( long id )\n+    {\n+        return categoryOptionComboStore.get( id );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionCombo getCategoryOptionCombo( String uid )\n+    {\n+        return categoryOptionComboStore.getByUid( uid );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionCombo getCategoryOptionComboByCode( String code )\n+    {\n+        return categoryOptionComboStore.getByCode( code );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionCombo getCategoryOptionCombo( CategoryCombo categoryCombo,\n+        Set<CategoryOption> categoryOptions )\n+    {\n+        return categoryOptionComboStore.getCategoryOptionCombo( categoryCombo, categoryOptions );\n+    }\n+\n+    @Override\n+    public CategoryOptionCombo getCategoryOptionCombo( IdentifiableProperty property, String id )\n+    {\n+        return idObjectManager.getObject( CategoryOptionCombo.class, property, id );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOptionCombo> getAllCategoryOptionCombos()\n+    {\n+        return categoryOptionComboStore.getAll();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void generateDefaultDimension()\n+    {\n+        // ---------------------------------------------------------------------\n+        // CategoryOption\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOption categoryOption = new CategoryOption( CategoryOption.DEFAULT_NAME );\n+        categoryOption.setUid( \"xYerKDKCefk\" );\n+        categoryOption.setCode( \"default\" );\n+\n+        addCategoryOption( categoryOption );\n+\n+        categoryOption.setPublicAccess( AccessStringHelper.CATEGORY_OPTION_DEFAULT );\n+        updateCategoryOption( categoryOption );\n+\n+        // ---------------------------------------------------------------------\n+        // Category\n+        // ---------------------------------------------------------------------\n+\n+        Category category = new Category( Category.DEFAULT_NAME, DataDimensionType.DISAGGREGATION );\n+        category.setUid( \"GLevLNI9wkl\" );\n+        category.setCode( \"default\" );\n+        category.setDataDimension( false );\n+\n+        category.addCategoryOption( categoryOption );\n+        addCategory( category );\n+\n+        category.setPublicAccess( AccessStringHelper.CATEGORY_NO_DATA_SHARING_DEFAULT );\n+        updateCategory( category );\n+\n+        // ---------------------------------------------------------------------\n+        // CategoryCombo\n+        // ---------------------------------------------------------------------\n+\n+        CategoryCombo categoryCombo = new CategoryCombo( CategoryCombo.DEFAULT_CATEGORY_COMBO_NAME, DataDimensionType.DISAGGREGATION );\n+        categoryCombo.setUid( \"bjDvmb4bfuf\" );\n+        categoryCombo.setCode( \"default\" );\n+        categoryCombo.setDataDimensionType( DataDimensionType.DISAGGREGATION );\n+\n+        categoryCombo.addCategory( category );\n+        addCategoryCombo( categoryCombo );\n+\n+        categoryCombo.setPublicAccess( AccessStringHelper.CATEGORY_NO_DATA_SHARING_DEFAULT );\n+        updateCategoryCombo( categoryCombo );\n+\n+        // ---------------------------------------------------------------------\n+        // CategoryOptionCombo\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo categoryOptionCombo = new CategoryOptionCombo();\n+        categoryOptionCombo.setUid( \"HllvX50cXC0\" );\n+        categoryOptionCombo.setCode( \"default\" );\n+\n+        categoryOptionCombo.setCategoryCombo( categoryCombo );\n+        categoryOptionCombo.addCategoryOption( categoryOption );\n+\n+        addCategoryOptionCombo( categoryOptionCombo );\n+\n+        categoryOptionCombo.setPublicAccess( AccessStringHelper.CATEGORY_NO_DATA_SHARING_DEFAULT );\n+        updateCategoryOptionCombo( categoryOptionCombo );\n+\n+        Set<CategoryOptionCombo> categoryOptionCombos = new HashSet<>();\n+        categoryOptionCombos.add( categoryOptionCombo );\n+        categoryCombo.setOptionCombos( categoryOptionCombos );\n+\n+        updateCategoryCombo( categoryCombo );\n+\n+        categoryOption.setCategoryOptionCombos( categoryOptionCombos );\n+        updateCategoryOption( categoryOption );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionCombo getDefaultCategoryOptionCombo()\n+    {\n+        CategoryCombo categoryCombo = getCategoryComboByName( CategoryCombo.DEFAULT_CATEGORY_COMBO_NAME );\n+\n+        return categoryCombo != null && categoryCombo.hasOptionCombos() ? categoryCombo.getOptionCombos().iterator().next() : null;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void generateOptionCombos( CategoryCombo categoryCombo )\n+    {\n+        categoryCombo.generateOptionCombos();\n+\n+        for ( CategoryOptionCombo optionCombo : categoryCombo.getOptionCombos() )\n+        {\n+            categoryCombo.getOptionCombos().add( optionCombo );\n+            addCategoryOptionCombo( optionCombo );\n+        }\n+\n+        updateCategoryCombo( categoryCombo );\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateOptionCombos( Category category )\n+    {\n+        for ( CategoryCombo categoryCombo : getAllCategoryCombos() )\n+        {\n+            if ( categoryCombo.getCategories().contains( category ) )\n+            {\n+                updateOptionCombos( categoryCombo );\n+            }\n+        }\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateOptionCombos( CategoryCombo categoryCombo )\n+    {\n+        if ( categoryCombo == null || !categoryCombo.isValid() )\n+        {\n+            log.warn( \"Category combo is null or invalid, could not update option combos: \" + categoryCombo );\n+            return;\n+        }\n+\n+        List<CategoryOptionCombo> generatedOptionCombos = categoryCombo.generateOptionCombosList();\n+        Set<CategoryOptionCombo> persistedOptionCombos = categoryCombo.getOptionCombos();\n+\n+        boolean modified = false;\n+\n+        for ( CategoryOptionCombo optionCombo : generatedOptionCombos )\n+        {\n+            if ( !persistedOptionCombos.contains( optionCombo ) )\n+            {\n+                categoryCombo.getOptionCombos().add( optionCombo );\n+                addCategoryOptionCombo( optionCombo );\n+\n+                log.info( \"Added missing category option combo: \" + optionCombo + \" for category combo: \"\n+                    + categoryCombo.getName() );\n+                modified = true;\n+            }\n+        }\n+\n+        if ( modified )\n+        {\n+            updateCategoryCombo( categoryCombo );\n+        }\n+    }\n+\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionCombo getCategoryOptionComboAcl( IdentifiableProperty property, String id )\n+    {\n+        CategoryOptionCombo coc = idObjectManager.getObject( CategoryOptionCombo.class, property, id );\n+\n+        if ( coc != null )\n+        {\n+            User user = currentUserService.getCurrentUser();\n+\n+            for ( CategoryOption categoryOption : coc.getCategoryOptions() )\n+            {\n+                if ( !aclService.canDataWrite( user, categoryOption ) )\n+                {\n+                    return null;\n+                }\n+            }\n+        }\n+\n+        return coc;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateCategoryOptionComboNames()\n+    {\n+        categoryOptionComboStore.updateNames();\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // DataElementOperand\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DataElementOperand> getOperands( Collection<DataElement> dataElements )\n+    {\n+        return getOperands( dataElements, false );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DataElementOperand> getOperands( Collection<DataElement> dataElements, boolean includeTotals )\n+    {\n+        List<DataElementOperand> operands = Lists.newArrayList();\n+\n+        for ( DataElement dataElement : dataElements )\n+        {\n+            Set<CategoryCombo> categoryCombos = dataElement.getCategoryCombos();\n+\n+            boolean anyIsDefault = categoryCombos.stream().anyMatch( cc -> cc.isDefault() );\n+\n+            if ( includeTotals && !anyIsDefault )\n+            {\n+                operands.add( new DataElementOperand( dataElement ) );\n+            }\n+\n+            for ( CategoryCombo categoryCombo : categoryCombos )\n+            {\n+                operands.addAll( getOperands( dataElement, categoryCombo ) );\n+            }\n+        }\n+\n+        return operands;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DataElementOperand> getOperands( DataSet dataSet, boolean includeTotals )\n+    {\n+        List<DataElementOperand> operands = Lists.newArrayList();\n+\n+        for ( DataSetElement element : dataSet.getDataSetElements() )\n+        {\n+            CategoryCombo categoryCombo = element.getResolvedCategoryCombo();\n+\n+            if ( includeTotals && !categoryCombo.isDefault() )\n+            {\n+                operands.add( new DataElementOperand( element.getDataElement() ) );\n+            }\n+\n+            operands.addAll( getOperands( element.getDataElement(), element.getResolvedCategoryCombo() ) );\n+        }\n+\n+        return operands;\n+    }\n+\n+    private List<DataElementOperand> getOperands( DataElement dataElement, CategoryCombo categoryCombo )\n+    {\n+        List<DataElementOperand> operands = Lists.newArrayList();\n+\n+        for ( CategoryOptionCombo categoryOptionCombo : categoryCombo.getSortedOptionCombos() )\n+        {\n+            operands.add( new DataElementOperand( dataElement, categoryOptionCombo ) );\n+        }\n+\n+        return operands;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // CategoryOptionGroup\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    @Transactional\n+    public long saveCategoryOptionGroup( CategoryOptionGroup group )\n+    {\n+        categoryOptionGroupStore.save( group );\n+\n+        return group.getId();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateCategoryOptionGroup( CategoryOptionGroup group )\n+    {\n+        categoryOptionGroupStore.update( group );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionGroup getCategoryOptionGroup( long id )\n+    {\n+        return categoryOptionGroupStore.get( id );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionGroup getCategoryOptionGroup( String uid )\n+    {\n+        return categoryOptionGroupStore.getByUid( uid );\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteCategoryOptionGroup( CategoryOptionGroup group )\n+    {\n+        categoryOptionGroupStore.delete( group );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOptionGroup> getAllCategoryOptionGroups()\n+    {\n+        return categoryOptionGroupStore.getAll();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOptionGroup> getCategoryOptionGroups( CategoryOptionGroupSet groupSet )\n+    {\n+        return categoryOptionGroupStore.getCategoryOptionGroups( groupSet );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Set<CategoryOptionGroup> getCogDimensionConstraints( UserCredentials userCredentials )\n+    {\n+        Set<CategoryOptionGroup> groups = null;\n+\n+        Set<CategoryOptionGroupSet> cogsConstraints = userCredentials.getCogsDimensionConstraints();\n+\n+        if ( cogsConstraints != null && !cogsConstraints.isEmpty() )\n+        {\n+            groups = new HashSet<>();\n+\n+            for ( CategoryOptionGroupSet cogs : cogsConstraints )\n+            {\n+                groups.addAll( getCategoryOptionGroups( cogs ) );\n+            }\n+        }\n+\n+        return groups;\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    // CategoryOptionGroupSet\n+    // -------------------------------------------------------------------------\n+\n+    @Override\n+    @Transactional\n+    public long saveCategoryOptionGroupSet( CategoryOptionGroupSet group )\n+    {\n+        categoryOptionGroupSetStore.save( group );\n+\n+        return group.getId();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateCategoryOptionGroupSet( CategoryOptionGroupSet group )\n+    {\n+        categoryOptionGroupSetStore.update( group );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionGroupSet getCategoryOptionGroupSet( long id )\n+    {\n+        return categoryOptionGroupSetStore.get( id );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public CategoryOptionGroupSet getCategoryOptionGroupSet( String uid )\n+    {\n+        return categoryOptionGroupSetStore.getByUid( uid );\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteCategoryOptionGroupSet( CategoryOptionGroupSet group )\n+    {\n+        categoryOptionGroupSetStore.delete( group );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOptionGroupSet> getAllCategoryOptionGroupSets()\n+    {\n+        return categoryOptionGroupSetStore.getAll();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOptionGroupSet> getDisaggregationCategoryOptionGroupSetsNoAcl()\n+    {\n+        return categoryOptionGroupSetStore.getCategoryOptionGroupSetsNoAcl( DataDimensionType.DISAGGREGATION, true );\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<CategoryOptionGroupSet> getAttributeCategoryOptionGroupSetsNoAcl()\n+    {\n+        return categoryOptionGroupSetStore.getCategoryOptionGroupSetsNoAcl( DataDimensionType.ATTRIBUTE, true );\n+    }\n+}\n"}}, {"oid": "d2ff2fe97f9816b98807f7e0f9e71d62f20b6a84", "url": "https://github.com/dhis2/dhis2-core/commit/d2ff2fe97f9816b98807f7e0f9e71d62f20b6a84", "message": "chore: Merge with master", "committedDate": "2020-10-26T12:53:46Z", "type": "commit"}]}