{"pr_number": 5862, "pr_title": "feat: Convert sharing objects to Jsonb", "pr_createdAt": "2020-07-22T09:48:39Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5862", "timeline": [{"oid": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "url": "https://github.com/dhis2/dhis2-core/commit/7eaf94921146e7e06ba2db30cef89fe7267f65dd", "message": "fix: revert  debug code", "committedDate": "2020-12-22T08:48:58Z", "type": "commit"}, {"oid": "49f3aed949647fce4a00f2a3e8690dc71c100aef", "url": "https://github.com/dhis2/dhis2-core/commit/49f3aed949647fce4a00f2a3e8690dc71c100aef", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-22T08:49:24Z", "type": "commit"}, {"oid": "cef213e26393cd6a66224887690d3fc1ae65b905", "url": "https://github.com/dhis2/dhis2-core/commit/cef213e26393cd6a66224887690d3fc1ae65b905", "message": "Merge branch 'DHIS2-5814' of https://github.com/dhis2/dhis2-core into DHIS2-5814", "committedDate": "2020-12-22T08:51:08Z", "type": "commit"}, {"oid": "1235e183fe954012bb6dbe68986d618e6090a20c", "url": "https://github.com/dhis2/dhis2-core/commit/1235e183fe954012bb6dbe68986d618e6090a20c", "message": "fix: Clean up code", "committedDate": "2020-12-22T09:30:27Z", "type": "commit"}, {"oid": "c89696f866427a89a23a089823478d29834a6fa1", "url": "https://github.com/dhis2/dhis2-core/commit/c89696f866427a89a23a089823478d29834a6fa1", "message": "Merge branch 'DHIS2-5814' of github.com:dhis2/dhis2-core into DHIS2-5814", "committedDate": "2020-12-22T09:30:57Z", "type": "commit"}, {"oid": "3bfd3e1bd0bc9f0dd66ca07bd788b8f0748b2e18", "url": "https://github.com/dhis2/dhis2-core/commit/3bfd3e1bd0bc9f0dd66ca07bd788b8f0748b2e18", "message": "fix: convert TrackerAccessManagerTest to integration test", "committedDate": "2020-12-22T09:40:42Z", "type": "commit"}, {"oid": "9eb11cced0b776902ce88b89ba0fbcd469ff8db4", "url": "https://github.com/dhis2/dhis2-core/commit/9eb11cced0b776902ce88b89ba0fbcd469ff8db4", "message": "Merge branch 'DHIS2-5814' of https://github.com/dhis2/dhis2-core into DHIS2-5814", "committedDate": "2020-12-22T09:40:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4ODIxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547188211", "bodyText": "Missing author", "author": "netroms", "createdAt": "2020-12-22T10:12:12Z", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/HibernateIdentifiableObjectStoreTest.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package org.hisp.dhis.common;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Sets;\n+import org.hisp.dhis.TransactionalIntegrationTestBase;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dataelement.DataElementStore;\n+import org.hisp.dhis.datavalue.AggregateAccessManager;\n+import org.hisp.dhis.datavalue.DataValue;\n+import org.hisp.dhis.datavalue.DataValueStore;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.period.MonthlyPeriodType;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.security.acl.AccessStringHelper;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserGroup;\n+import org.hisp.dhis.user.UserService;\n+import org.hisp.dhis.user.sharing.Sharing;\n+import org.hisp.dhis.user.sharing.UserAccess;\n+import org.hisp.dhis.user.sharing.UserGroupAccess;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+", "originalCommit": "9eb11cced0b776902ce88b89ba0fbcd469ff8db4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/HibernateIdentifiableObjectStoreTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/HibernateIdentifiableObjectStoreTest.java\ndeleted file mode 100644\nindex 22801283eb..0000000000\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/HibernateIdentifiableObjectStoreTest.java\n+++ /dev/null\n\n@@ -1,236 +0,0 @@\n-package org.hisp.dhis.common;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import com.google.common.collect.Sets;\n-import org.hisp.dhis.TransactionalIntegrationTestBase;\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.dataelement.DataElement;\n-import org.hisp.dhis.dataelement.DataElementStore;\n-import org.hisp.dhis.datavalue.AggregateAccessManager;\n-import org.hisp.dhis.datavalue.DataValue;\n-import org.hisp.dhis.datavalue.DataValueStore;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.period.MonthlyPeriodType;\n-import org.hisp.dhis.period.Period;\n-import org.hisp.dhis.period.PeriodType;\n-import org.hisp.dhis.security.acl.AccessStringHelper;\n-import org.hisp.dhis.user.User;\n-import org.hisp.dhis.user.UserGroup;\n-import org.hisp.dhis.user.UserService;\n-import org.hisp.dhis.user.sharing.Sharing;\n-import org.hisp.dhis.user.sharing.UserAccess;\n-import org.hisp.dhis.user.sharing.UserGroupAccess;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n-public class HibernateIdentifiableObjectStoreTest\n-    extends TransactionalIntegrationTestBase\n-{\n-    @Autowired\n-    private DataElementStore dataElementStore;\n-\n-    @Autowired\n-    private DataValueStore dataValueStore;\n-\n-    @Autowired\n-    private AggregateAccessManager accessManager;\n-\n-    @Autowired\n-    private IdentifiableObjectManager manager;\n-\n-    @Autowired\n-    private UserService _userService;\n-\n-    @Before\n-    public void init()\n-    {\n-        userService = _userService;\n-    }\n-\n-    @Override\n-    public boolean emptyDatabaseAfterTest()\n-    {\n-        return true;\n-    }\n-\n-    /**\n-     * Test Metadata Read access\n-     * User and UserGroups mapping\n-     *          User1 | User2 | User3 | User 4\n-     * Group1     x   |       |       |\n-     * Group2     X   |       |       |  X\n-     *\n-     * DataElementA access defined for Users and UserGroups\n-     *                  User1 | User2 | User3 | UserGroup1 | UserGroup2\n-     * Can access DEA         |  X    |       |    X       |\n-     */\n-    @Test\n-    public void testMetadataRead()\n-    {\n-        User admin = createAndInjectAdminUser();\n-        User user1 = new User();\n-        user1.setAutoFields();\n-\n-        User user2 = new User();\n-        user2.setAutoFields();\n-\n-        User user3 = new User();\n-        user3.setAutoFields();\n-\n-        User user4 = new User();\n-        user4.setAutoFields();\n-\n-        UserGroup userGroup1 = new UserGroup();\n-        userGroup1.setAutoFields();\n-\n-        UserGroup userGroup2 = new UserGroup(  );\n-        userGroup2.setAutoFields();\n-\n-        user1.getGroups().add( userGroup1 );\n-        user1.getGroups().add( userGroup2 );\n-        user4.getGroups().add( userGroup2 );\n-\n-        Map<String, UserAccess> userSharing = new HashMap<>();\n-        userSharing.put( user1.getUid(), new UserAccess( user1, AccessStringHelper.DEFAULT ) );\n-        userSharing.put( user2.getUid(), new UserAccess( user2, AccessStringHelper.READ ) );\n-        userSharing.put( user3.getUid(), new UserAccess( user3, AccessStringHelper.DEFAULT ) );\n-        userSharing.put( user4.getUid(), new UserAccess( user4, AccessStringHelper.DEFAULT ) );\n-\n-        Map<String, UserGroupAccess> userGroupSharing = new HashMap<>();\n-        userGroupSharing.put( userGroup1.getUid() , new UserGroupAccess( userGroup1, AccessStringHelper.READ_WRITE ) );\n-        userGroupSharing.put( userGroup2.getUid() , new UserGroupAccess( userGroup2, AccessStringHelper.DEFAULT ) );\n-\n-        DataElement dataElement = createDataElement( 'A' );\n-        String dataElementUid = \"deabcdefghA\";\n-        dataElement.setUid(dataElementUid);\n-        dataElement.setUser(admin);\n-\n-        Sharing sharing = Sharing.builder()\n-            .external( false )\n-            .publicAccess( AccessStringHelper.DEFAULT )\n-            .owner( \"testOwner\" )\n-            .userGroups( userGroupSharing )\n-            .users( userSharing ).build();\n-\n-        dataElement.setSharing( sharing );\n-\n-        dataElementStore.save( dataElement, false );\n-\n-        dataElement = dataElementStore.getByUidNoAcl( dataElementUid );\n-\n-        assertNotNull( dataElement.getSharing() );\n-        assertEquals( 2, dataElement.getSharing().getUserGroups().size() );\n-        assertEquals( 4, dataElement.getSharing().getUsers().size() );\n-\n-        // User1 can't access but it belong to UserGroup1 which has access\n-        assertNotNull( dataElementStore.getDataElement( dataElement.getUid(), user1 ) );\n-        // User2 has access to DEA\n-        assertNotNull( dataElementStore.getDataElement( dataElement.getUid(), user2 ) );\n-        // User3 doesn't have access and also does't belong to any groups\n-        assertNull( dataElementStore.getDataElement( dataElement.getUid(), user3 ) );\n-        // User4 doesn't have access and it belong to UserGroup2 which also doesn't have access\n-        assertNull( dataElementStore.getDataElement( dataElement.getUid(), user4 ) );\n-    }\n-\n-    @Test\n-    public void testDataRead()\n-    {\n-        User user1 = createUser( \"user1\", \"DATA_READ\" );\n-        User user2 = createUser( \"user2\", \"DATA_READ\" );\n-        User user3 = createUser( \"user3\", \"DATA_READ\" );\n-        User user4 = createUser( \"user4\", \"DATA_READ\" );\n-\n-        UserGroup userGroup1 = createUserGroup( 'A', Sets.newHashSet( user1 ) );\n-        manager.save( userGroup1 );\n-\n-        UserGroup userGroup2 = createUserGroup( 'B', Sets.newHashSet( user1, user4 ) );\n-        manager.save( userGroup2 );\n-\n-        user1.getGroups().add( userGroup1 );\n-        user1.getGroups().add( userGroup2 );\n-        user4.getGroups().add( userGroup2 );\n-\n-        Map<String, UserAccess> userSharing = new HashMap<>();\n-        userSharing.put( user1.getUid(), new UserAccess( user1, AccessStringHelper.DEFAULT ) );\n-        userSharing.put( user2.getUid(), new UserAccess( user2, AccessStringHelper.DATA_READ ) );\n-        userSharing.put( user3.getUid(), new UserAccess( user3, AccessStringHelper.DEFAULT ) );\n-        userSharing.put( user4.getUid(), new UserAccess( user4, AccessStringHelper.DEFAULT ) );\n-\n-        Map<String, UserGroupAccess> userGroupSharing = new HashMap<>();\n-        userGroupSharing.put( userGroup1.getUid() , new UserGroupAccess( userGroup1, AccessStringHelper.DATA_READ_WRITE ) );\n-        userGroupSharing.put( userGroup2.getUid() , new UserGroupAccess( userGroup2, AccessStringHelper.DEFAULT ) );\n-\n-        Sharing sharing = Sharing.builder()\n-            .external( false )\n-            .publicAccess( AccessStringHelper.DEFAULT )\n-            .owner( \"testOwner\" )\n-            .userGroups( userGroupSharing )\n-            .users( userSharing ).build();\n-\n-        DataElement dataElement = createDataElement( 'A' );\n-        dataElement.setValueType(ValueType.TEXT );\n-        CategoryOptionCombo defaultCategoryOptionCombo = createCategoryOptionCombo( 'D' );\n-        OrganisationUnit organisationUnitA = createOrganisationUnit( 'A' );\n-        Period period = createPeriod( new Date(), new Date() );\n-        period.setPeriodType( PeriodType.getPeriodTypeByName( MonthlyPeriodType.NAME ) );\n-        manager.save( dataElement );\n-        manager.save( organisationUnitA );\n-        manager.save( period );\n-        manager.save( defaultCategoryOptionCombo );\n-\n-        CategoryOption categoryOption = createCategoryOption( 'A' );\n-        categoryOption.setSharing( sharing );\n-        categoryOption.setCategoryOptionCombos( Sets.newHashSet( defaultCategoryOptionCombo ) );\n-        manager.save( categoryOption, false );\n-        defaultCategoryOptionCombo.getCategoryOptions().add( categoryOption );\n-\n-        DataValue dataValue = createDataValue( dataElement, period, organisationUnitA, \"test\", defaultCategoryOptionCombo );\n-        dataValueStore.addDataValue( dataValue );\n-\n-        // User1 can't access but it belongs to UserGroup1 which has access\n-        assertEquals(0, accessManager.canRead( user1, dataValue ).size() );\n-        // User2 has access to DEA\n-        assertEquals(0, accessManager.canRead( user2, dataValue ).size() );\n-        // User3 doesn't have access and also doesn't belong to any groups\n-        assertEquals( 1, accessManager.canRead( user3, dataValue ).size() );\n-        // User4 doesn't have access and it belong to UserGroup2 which also doesn't have access\n-        assertEquals( 1, accessManager.canRead( user4, dataValue ).size() );\n-    }\n-}\n\\ No newline at end of file\n"}}, {"oid": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "url": "https://github.com/dhis2/dhis2-core/commit/68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core", "committedDate": "2020-12-22T10:14:43Z", "type": "commit"}, {"oid": "46158a9398714a1dcf619704444117e1ac48e12b", "url": "https://github.com/dhis2/dhis2-core/commit/46158a9398714a1dcf619704444117e1ac48e12b", "message": "clean up codes", "committedDate": "2020-12-22T10:19:41Z", "type": "commit"}, {"oid": "74748f1ad4fb2ca0e986c36e880d864ea590b4af", "url": "https://github.com/dhis2/dhis2-core/commit/74748f1ad4fb2ca0e986c36e880d864ea590b4af", "message": "Merge branch 'master' into DHIS2-5814", "committedDate": "2020-12-22T10:22:28Z", "type": "commit"}, {"oid": "5030988f43d976dc07235a08cc89f6e9250239dd", "url": "https://github.com/dhis2/dhis2-core/commit/5030988f43d976dc07235a08cc89f6e9250239dd", "message": "Merge branch 'DHIS2-5814' of github.com:dhis2/dhis2-core into DHIS2-5814", "committedDate": "2020-12-22T10:22:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NzUwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547197502", "bodyText": "Is this code nullpointer vulnerable? Is sharing not null, or can it be null?", "author": "larshelge", "createdAt": "2020-12-22T10:30:37Z", "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "diffHunk": "@@ -644,30 +646,35 @@ private boolean checkSharingAccess( User user, IdentifiableObject object )\n      */\n     private boolean checkSharingPermission( User user, IdentifiableObject object, Permission permission )\n     {\n-        if ( AccessStringHelper.isEnabled( object.getPublicAccess(), permission ) )\n+        if ( AccessStringHelper.isEnabled( object.getSharing().getPublicAccess(), permission ) )\n         {\n             return true;\n         }\n \n-        for ( UserGroupAccess userGroupAccess : object.getUserGroupAccesses() )\n+        if ( object.getSharing().getUserGroups() != null && !CollectionUtils.isEmpty( user.getGroups() ) )\n         {\n-            // Check if user is allowed to read this object through group access\n-\n-            if ( AccessStringHelper.isEnabled( userGroupAccess.getAccess(), permission )\n-                    && userGroupAccess.userGroupContainsUser( user ) )\n+            for ( UserGroupAccess userGroupAccess : object.getSharing().getUserGroups().values() )\n             {\n-                return true;\n+                // Check if user is allowed to read this object through group access\n+                if ( AccessStringHelper.isEnabled( userGroupAccess.getAccess(), permission )\n+                    && checkUserGroupAccess( user.getGroups(), userGroupAccess.getId() ) )\n+                {\n+                    return true;\n+                }\n             }\n         }\n \n-        for ( UserAccess userAccess : object.getUserAccesses() )\n+        if ( object.getSharing().getUsers() != null )", "originalCommit": "5030988f43d976dc07235a08cc89f6e9250239dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b66008a505b6d310262df11d028427fb0fb888c4", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java b/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\nindex 011592e1d3..a0d0dcbd08 100644\n--- a/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\n+++ b/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\n\n@@ -657,7 +657,7 @@ public class DefaultAclService implements AclService\n             {\n                 // Check if user is allowed to read this object through group access\n                 if ( AccessStringHelper.isEnabled( userGroupAccess.getAccess(), permission )\n-                    && checkUserGroupAccess( user.getGroups(), userGroupAccess.getId() ) )\n+                    && hasUserGroupAccess( user.getGroups(), userGroupAccess.getId() ) )\n                 {\n                     return true;\n                 }\n"}}, {"oid": "b66008a505b6d310262df11d028427fb0fb888c4", "url": "https://github.com/dhis2/dhis2-core/commit/b66008a505b6d310262df11d028427fb0fb888c4", "message": "Update code style", "committedDate": "2020-12-22T10:36:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5OTkyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547199928", "bodyText": "Extra newline", "author": "netroms", "createdAt": "2020-12-22T10:35:19Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/patch/DefaultPatchService.java", "diffHunk": "@@ -407,7 +408,9 @@ private void applyMutation( Mutation mutation, Property property, Object target\n                     Schema schema = schemaService.getDynamicSchema( property.getItemKlass() );\n \n                     Query query = Query.from( schema );\n-                    query.add( Restrictions.eq( \"id\", object ) ); // optimize by using .in(..) query\n+", "originalCommit": "5030988f43d976dc07235a08cc89f6e9250239dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNDkxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547204915", "bodyText": "Fix todo?", "author": "netroms", "createdAt": "2020-12-22T10:45:32Z", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/PreheatServiceTest.java", "diffHunk": "@@ -543,9 +555,10 @@ public void testPreheatReferenceConnectAUTO()\n         assertContains(members, \"DataElementB\", \"DataElementCodeB\");\n         assertContains(members, \"DataElementC\", \"DataElementCodeC\");\n \n-        assertEquals( \"FirstNameA\", dataElementGroup.getUser().getFirstName() );\n-        assertEquals( \"SurnameA\", dataElementGroup.getUser().getSurname() );\n-        assertEquals( \"UserCodeA\", dataElementGroup.getUser().getCode() );\n+        // TODO Fix this", "originalCommit": "5030988f43d976dc07235a08cc89f6e9250239dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzg4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547207882", "bodyText": "Commented lines", "author": "netroms", "createdAt": "2020-12-22T10:51:30Z", "path": "dhis-2/dhis-services/dhis-service-validation/src/test/java/org/hisp/dhis/validation/ValidationResultStoreTest.java", "diffHunk": "@@ -191,8 +194,10 @@ private CurrentUserService getMockCurrentUserService( String userName, boolean s\n \n     private void setPrivateAccess( BaseIdentifiableObject object, UserGroup... userGroups )\n     {\n-        object.setPublicAccess( ACCESS_NONE );\n-        object.setUser( userZ ); // Needed for sharing to work\n+//        object.setPublicAccess( ACCESS_NONE );", "originalCommit": "5030988f43d976dc07235a08cc89f6e9250239dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwOTM3OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547209379", "bodyText": "Commented line", "author": "netroms", "createdAt": "2020-12-22T10:54:44Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "diffHunk": "@@ -274,6 +281,8 @@\n \n         handleAttributeValues( entities, fields );\n \n+//        handleSharingAttributes( entities, fields );", "originalCommit": "5030988f43d976dc07235a08cc89f6e9250239dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwOTQxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547209418", "bodyText": "Commented line", "author": "netroms", "createdAt": "2020-12-22T10:54:51Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "diffHunk": "@@ -547,6 +556,8 @@ private RootNode getObjectInternal( String uid, Map<String, String> parameters,\n \n         handleAttributeValues( entities, fields );\n \n+//        handleSharingAttributes( entities, fields );", "originalCommit": "5030988f43d976dc07235a08cc89f6e9250239dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwOTY4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547209684", "bodyText": "Commented block", "author": "netroms", "createdAt": "2020-12-22T10:55:21Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AbstractCrudController.java", "diffHunk": "@@ -1314,6 +1359,23 @@ protected void handleAttributeValues( List<T> entityList, List<String> fields )\n         }\n     }\n \n+//    protected void handleSharingAttributes(  List<T> entityList, List<String> fields )", "originalCommit": "5030988f43d976dc07235a08cc89f6e9250239dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ef885c3dda2014ea63edc5dd35d78b3320cde2fd", "url": "https://github.com/dhis2/dhis2-core/commit/ef885c3dda2014ea63edc5dd35d78b3320cde2fd", "message": "convert sharings to jsonb", "committedDate": "2020-07-13T05:14:21Z", "type": "commit"}, {"oid": "eb5cbf13715ccff4ea2d5e7b5fc618c02b95c899", "url": "https://github.com/dhis2/dhis2-core/commit/eb5cbf13715ccff4ea2d5e7b5fc618c02b95c899", "message": "feat: Contert sharing objects to jsonb", "committedDate": "2020-07-22T09:47:24Z", "type": "commit"}, {"oid": "0857abefaf62b23855273d184cadd7cf252e8b51", "url": "https://github.com/dhis2/dhis2-core/commit/0857abefaf62b23855273d184cadd7cf252e8b51", "message": "fix userPredicate in HibernateGenericStore", "committedDate": "2020-07-31T04:30:10Z", "type": "commit"}, {"oid": "09c8cd098aa04940a03c35ae6d2a4cb7037a4c86", "url": "https://github.com/dhis2/dhis2-core/commit/09c8cd098aa04940a03c35ae6d2a4cb7037a4c86", "message": "Done with getJsonbSharingPredicates", "committedDate": "2020-08-01T16:07:43Z", "type": "commit"}, {"oid": "1a0b2648f91e39fa1c315056493099f1f3469d64", "url": "https://github.com/dhis2/dhis2-core/commit/1a0b2648f91e39fa1c315056493099f1f3469d64", "message": "Add unit test description for testSaveDEWithObjectSharings", "committedDate": "2020-08-03T07:55:59Z", "type": "commit"}, {"oid": "1bfb1698478082c95b1ef616288e68d45db5a8a8", "url": "https://github.com/dhis2/dhis2-core/commit/1bfb1698478082c95b1ef616288e68d45db5a8a8", "message": "Clean up codes", "committedDate": "2020-08-03T13:33:52Z", "type": "commit"}, {"oid": "4f60379643200821642ffb71e870a7b06889a370", "url": "https://github.com/dhis2/dhis2-core/commit/4f60379643200821642ffb71e870a7b06889a370", "message": "Fix NPE in HibernateIdentifiableObjectStore", "committedDate": "2020-08-06T02:59:19Z", "type": "commit"}, {"oid": "6b6c9829a02881f7cfb40b0fef690c574b8df68b", "url": "https://github.com/dhis2/dhis2-core/commit/6b6c9829a02881f7cfb40b0fef690c574b8df68b", "message": "Add script to add sharing jsonb column", "committedDate": "2020-08-07T14:57:36Z", "type": "commit"}, {"oid": "1f43e5b133b5bba761dcb2bb5b145e160310c648", "url": "https://github.com/dhis2/dhis2-core/commit/1f43e5b133b5bba761dcb2bb5b145e160310c648", "message": "cont", "committedDate": "2020-08-12T08:11:50Z", "type": "commit"}, {"oid": "08dbf70d4ddcec9515543525678fdcc89356c930", "url": "https://github.com/dhis2/dhis2-core/commit/08dbf70d4ddcec9515543525678fdcc89356c930", "message": "add jsonb column", "committedDate": "2020-08-13T04:29:47Z", "type": "commit"}, {"oid": "30c80c8e94dd17df908ee3fb647d3cd729e4bca2", "url": "https://github.com/dhis2/dhis2-core/commit/30c80c8e94dd17df908ee3fb647d3cd729e4bca2", "message": "sharing jsonb cont", "committedDate": "2020-08-19T14:20:08Z", "type": "commit"}, {"oid": "d0934c83d2ef32e080a5bb25674a5f870b3aad96", "url": "https://github.com/dhis2/dhis2-core/commit/d0934c83d2ef32e080a5bb25674a5f870b3aad96", "message": "sharing jsonb cont.", "committedDate": "2020-08-20T09:14:11Z", "type": "commit"}, {"oid": "9fd48563f52ffefcfacca1da1c05721ec2370e08", "url": "https://github.com/dhis2/dhis2-core/commit/9fd48563f52ffefcfacca1da1c05721ec2370e08", "message": "Updated hbm files", "committedDate": "2020-08-20T18:41:22Z", "type": "commit"}, {"oid": "176a44fa59a9ab12294b365b10f1300b1644935c", "url": "https://github.com/dhis2/dhis2-core/commit/176a44fa59a9ab12294b365b10f1300b1644935c", "message": "fix: unit test error for sharing jsonb", "committedDate": "2020-08-24T07:38:31Z", "type": "commit"}, {"oid": "b337f1ef724f139083b684dc5ad5806a9ac1e80a", "url": "https://github.com/dhis2/dhis2-core/commit/b337f1ef724f139083b684dc5ad5806a9ac1e80a", "message": "fix: unit test errors in ValidationResultStoreTest", "committedDate": "2020-08-24T17:09:25Z", "type": "commit"}, {"oid": "6c82a5de1d610314cb518460d8655a37e550819a", "url": "https://github.com/dhis2/dhis2-core/commit/6c82a5de1d610314cb518460d8655a37e550819a", "message": "fix: add sharing dto objects to support old format", "committedDate": "2020-08-26T07:16:14Z", "type": "commit"}, {"oid": "8c935359c85c4aaffbf4cf5a595f1cad09fe4c52", "url": "https://github.com/dhis2/dhis2-core/commit/8c935359c85c4aaffbf4cf5a595f1cad09fe4c52", "message": "Replace getSharingDetachedCriteria with JPA query", "committedDate": "2020-09-01T06:51:59Z", "type": "commit"}, {"oid": "a61bc2a5f79e5867639019e46dfb7d43fae9db1a", "url": "https://github.com/dhis2/dhis2-core/commit/a61bc2a5f79e5867639019e46dfb7d43fae9db1a", "message": "Replace getSharingDetachedCriteria with JPA query", "committedDate": "2020-09-01T06:53:16Z", "type": "commit"}, {"oid": "39714d2085b4ecf8617faff00cb94f2a002b9c34", "url": "https://github.com/dhis2/dhis2-core/commit/39714d2085b4ecf8617faff00cb94f2a002b9c34", "message": "jsonb for sharing", "committedDate": "2020-09-10T14:14:23Z", "type": "commit"}, {"oid": "34fd6ce05d073e81efa552bba321fedc32a06151", "url": "https://github.com/dhis2/dhis2-core/commit/34fd6ce05d073e81efa552bba321fedc32a06151", "message": "jsonb sharing: fixed queryEngine", "committedDate": "2020-09-22T11:57:53Z", "type": "commit"}, {"oid": "25752089bf6bdafe520c919db461cc54e70ca2dd", "url": "https://github.com/dhis2/dhis2-core/commit/25752089bf6bdafe520c919db461cc54e70ca2dd", "message": "sharing jsonb: added back user columns", "committedDate": "2020-09-24T18:01:22Z", "type": "commit"}, {"oid": "bf1cdfc5e9befd0514649d152c62e5de41bdd048", "url": "https://github.com/dhis2/dhis2-core/commit/bf1cdfc5e9befd0514649d152c62e5de41bdd048", "message": "feat: jsonb for sharing cont.", "committedDate": "2020-10-13T06:55:05Z", "type": "commit"}, {"oid": "fb6b2c5bd16f534d9605ca4351b2b4df1af44cb8", "url": "https://github.com/dhis2/dhis2-core/commit/fb6b2c5bd16f534d9605ca4351b2b4df1af44cb8", "message": "feat:jsonb for sharing cont.", "committedDate": "2020-10-14T19:26:43Z", "type": "commit"}, {"oid": "4974dafb25079e15b4ff571fafd032c873a41fe7", "url": "https://github.com/dhis2/dhis2-core/commit/4974dafb25079e15b4ff571fafd032c873a41fe7", "message": "fix unit errors for jsonb sharing", "committedDate": "2020-10-21T06:17:18Z", "type": "commit"}, {"oid": "de2aba874996114d6043b0328f1bd892ee392391", "url": "https://github.com/dhis2/dhis2-core/commit/de2aba874996114d6043b0328f1bd892ee392391", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-10-21T08:05:48Z", "type": "commit"}, {"oid": "9f75058cadda87b7a2c6ed4f2992be4fc79fabab", "url": "https://github.com/dhis2/dhis2-core/commit/9f75058cadda87b7a2c6ed4f2992be4fc79fabab", "message": "fix unit test errors for jsonb sharing", "committedDate": "2020-10-27T03:31:50Z", "type": "commit"}, {"oid": "3b1cd32bed9adc3e489f90387c29ac3bf4564bff", "url": "https://github.com/dhis2/dhis2-core/commit/3b1cd32bed9adc3e489f90387c29ac3bf4564bff", "message": "fix unit test errors", "committedDate": "2020-10-28T07:57:18Z", "type": "commit"}, {"oid": "2236c6e981b070d3b8813efd90578679971c6d2c", "url": "https://github.com/dhis2/dhis2-core/commit/2236c6e981b070d3b8813efd90578679971c6d2c", "message": "fix NPE in DefaultAclService", "committedDate": "2020-11-04T08:44:33Z", "type": "commit"}, {"oid": "6f2e76e863f5f639bae56df251fbd5a116312c0b", "url": "https://github.com/dhis2/dhis2-core/commit/6f2e76e863f5f639bae56df251fbd5a116312c0b", "message": "fix unit test errors", "committedDate": "2020-11-19T09:09:22Z", "type": "commit"}, {"oid": "bc36623089ec0817d76d4f3531f940fb5d3300f2", "url": "https://github.com/dhis2/dhis2-core/commit/bc36623089ec0817d76d4f3531f940fb5d3300f2", "message": "fix: unit test errors", "committedDate": "2020-11-22T06:54:29Z", "type": "commit"}, {"oid": "ff9646afc6cdfc9a031c68fe0f1613cc05afbacc", "url": "https://github.com/dhis2/dhis2-core/commit/ff9646afc6cdfc9a031c68fe0f1613cc05afbacc", "message": "fix: filter non-entity class for preheat", "committedDate": "2020-11-23T04:50:37Z", "type": "commit"}, {"oid": "8e3f3060bdd317a18f8058e288cb8ea7055559fd", "url": "https://github.com/dhis2/dhis2-core/commit/8e3f3060bdd317a18f8058e288cb8ea7055559fd", "message": "fix unit test errors for jsonb sharing", "committedDate": "2020-11-24T08:30:24Z", "type": "commit"}, {"oid": "4b5242b3b2f8dd8dde9a64a48b13532c13ed5664", "url": "https://github.com/dhis2/dhis2-core/commit/4b5242b3b2f8dd8dde9a64a48b13532c13ed5664", "message": "fix: jsonb sharing test error in AclStore", "committedDate": "2020-11-24T14:40:03Z", "type": "commit"}, {"oid": "015f6d54777280561f717e6c2e20c8193aa0333f", "url": "https://github.com/dhis2/dhis2-core/commit/015f6d54777280561f717e6c2e20c8193aa0333f", "message": "fix: unit test errors in EnrollmentSecurityTest", "committedDate": "2020-11-24T19:40:05Z", "type": "commit"}, {"oid": "25140af79f2ad17e249b45cba7d1707642ee43c9", "url": "https://github.com/dhis2/dhis2-core/commit/25140af79f2ad17e249b45cba7d1707642ee43c9", "message": "fix: unit test errors in EventSecurityTest", "committedDate": "2020-11-25T15:04:16Z", "type": "commit"}, {"oid": "d5a5ce45e8878f7e58be237f2f75a30e5ffb6e7b", "url": "https://github.com/dhis2/dhis2-core/commit/d5a5ce45e8878f7e58be237f2f75a30e5ffb6e7b", "message": "fix: unit test errors in DataValueSetExportAccessControlTest", "committedDate": "2020-11-27T07:30:40Z", "type": "commit"}, {"oid": "1abc9907375b245689a047d858d558165e7cb8d0", "url": "https://github.com/dhis2/dhis2-core/commit/1abc9907375b245689a047d858d558165e7cb8d0", "message": "fix: unit test errors DefaultMetadataVersionServiceTest", "committedDate": "2020-11-27T08:19:38Z", "type": "commit"}, {"oid": "afbaa8e669487261c9dc5e8368171398bb0eed17", "url": "https://github.com/dhis2/dhis2-core/commit/afbaa8e669487261c9dc5e8368171398bb0eed17", "message": "fix: unit test errors", "committedDate": "2020-11-30T17:44:49Z", "type": "commit"}, {"oid": "b57148155a04e8b55cf56706158f8bdf71b15654", "url": "https://github.com/dhis2/dhis2-core/commit/b57148155a04e8b55cf56706158f8bdf71b15654", "message": "fix: unit test errors in EventSecurityTest", "committedDate": "2020-12-01T09:23:49Z", "type": "commit"}, {"oid": "6a7536d13039c2cd9b240ccbf68d67a3f330aa64", "url": "https://github.com/dhis2/dhis2-core/commit/6a7536d13039c2cd9b240ccbf68d67a3f330aa64", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-01T09:39:59Z", "type": "commit"}, {"oid": "adb619e8a0572b390f1ac49c315dc39d1e228c3c", "url": "https://github.com/dhis2/dhis2-core/commit/adb619e8a0572b390f1ac49c315dc39d1e228c3c", "message": "fix: unit test error in EventSecurityTest", "committedDate": "2020-12-01T14:24:36Z", "type": "commit"}, {"oid": "b7d3ef2cfd072c57f5c82b005d3f53030de7e7b5", "url": "https://github.com/dhis2/dhis2-core/commit/b7d3ef2cfd072c57f5c82b005d3f53030de7e7b5", "message": "fix: unit test errors in EventSecurityTest", "committedDate": "2020-12-01T15:41:27Z", "type": "commit"}, {"oid": "e74945a821a4b25851348dad13b5cf2d746f8b29", "url": "https://github.com/dhis2/dhis2-core/commit/e74945a821a4b25851348dad13b5cf2d746f8b29", "message": "fix: use correct default COC uid in TrackerTest", "committedDate": "2020-12-01T16:12:36Z", "type": "commit"}, {"oid": "3b74529446b2f1271505e311df155bbde7a7a5d2", "url": "https://github.com/dhis2/dhis2-core/commit/3b74529446b2f1271505e311df155bbde7a7a5d2", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-02T06:23:03Z", "type": "commit"}, {"oid": "d20f5ea09ed051685d9f6b25d0eded7eac000c1d", "url": "https://github.com/dhis2/dhis2-core/commit/d20f5ea09ed051685d9f6b25d0eded7eac000c1d", "message": "fix: unit test error in ProgramSupplierAclIntegrationTest", "committedDate": "2020-12-02T06:55:22Z", "type": "commit"}, {"oid": "1dd2b0ade89b9c92b58c1eae554ecb052c21d1c3", "url": "https://github.com/dhis2/dhis2-core/commit/1dd2b0ade89b9c92b58c1eae554ecb052c21d1c3", "message": "fix: unit test error in QueryServiceTest", "committedDate": "2020-12-02T07:14:07Z", "type": "commit"}, {"oid": "9b7e11912d111f7d0f3e243fed95b44460a56680", "url": "https://github.com/dhis2/dhis2-core/commit/9b7e11912d111f7d0f3e243fed95b44460a56680", "message": "fix: Ignore line 1691 in DataApprovalServiceTest", "committedDate": "2020-12-02T07:39:04Z", "type": "commit"}, {"oid": "de7e5306ffe907ad3c6a598a050e54588c44fe3b", "url": "https://github.com/dhis2/dhis2-core/commit/de7e5306ffe907ad3c6a598a050e54588c44fe3b", "message": "fix: unit test error in AttributeOptionComboLoaderTest", "committedDate": "2020-12-02T07:53:09Z", "type": "commit"}, {"oid": "15bd5cd23bd542e2a07cb41f05f23bc4e9f5067e", "url": "https://github.com/dhis2/dhis2-core/commit/15bd5cd23bd542e2a07cb41f05f23bc4e9f5067e", "message": "Merge remote-tracking branch 'origin/DHIS2-5814' into DHIS2-5814", "committedDate": "2020-12-02T07:53:36Z", "type": "commit"}, {"oid": "3501ea1ee13abd17f5a59f1af9a6a3601ec3c757", "url": "https://github.com/dhis2/dhis2-core/commit/3501ea1ee13abd17f5a59f1af9a6a3601ec3c757", "message": "fix: unit test error AnalyticsSecurityManagerTest", "committedDate": "2020-12-02T15:35:09Z", "type": "commit"}, {"oid": "7123588eb9f7cb885e11fbe7e4de8b298d5b9c82", "url": "https://github.com/dhis2/dhis2-core/commit/7123588eb9f7cb885e11fbe7e4de8b298d5b9c82", "message": "fix: unit test error for TrackerTest", "committedDate": "2020-12-03T07:59:31Z", "type": "commit"}, {"oid": "a366cfc74ba594940523595374a6a0f798675be0", "url": "https://github.com/dhis2/dhis2-core/commit/a366cfc74ba594940523595374a6a0f798675be0", "message": "fix: remove unused code", "committedDate": "2020-12-03T08:14:55Z", "type": "commit"}, {"oid": "e7a98cf60e99588c7973b94cfa5b2530bf23ce6e", "url": "https://github.com/dhis2/dhis2-core/commit/e7a98cf60e99588c7973b94cfa5b2530bf23ce6e", "message": "fix: unit test errors EventImportValidationTest", "committedDate": "2020-12-04T13:34:23Z", "type": "commit"}, {"oid": "22ddcbda19bcd41aef642f24df4c90cc24f8834d", "url": "https://github.com/dhis2/dhis2-core/commit/22ddcbda19bcd41aef642f24df4c90cc24f8834d", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-04T15:47:05Z", "type": "commit"}, {"oid": "61303bd86d678417219e6d64bce359c8a3ffaaea", "url": "https://github.com/dhis2/dhis2-core/commit/61303bd86d678417219e6d64bce359c8a3ffaaea", "message": "fix: unit test error in EventImportValidationTest", "committedDate": "2020-12-05T03:51:51Z", "type": "commit"}, {"oid": "0feef76a8d108b33f8900c288115e7cadd37a0fd", "url": "https://github.com/dhis2/dhis2-core/commit/0feef76a8d108b33f8900c288115e7cadd37a0fd", "message": "fix: unit test error UserSupplier", "committedDate": "2020-12-05T05:27:13Z", "type": "commit"}, {"oid": "3522754220617613c4ddae52ac4684ef63a66acc", "url": "https://github.com/dhis2/dhis2-core/commit/3522754220617613c4ddae52ac4684ef63a66acc", "message": "fix: unit test error DataElementOperandControllerTest", "committedDate": "2020-12-05T09:48:49Z", "type": "commit"}, {"oid": "5bd57a9b4e4fc396641459114b15227671a4858c", "url": "https://github.com/dhis2/dhis2-core/commit/5bd57a9b4e4fc396641459114b15227671a4858c", "message": "fix: unit test error ResponseHandlerTest", "committedDate": "2020-12-05T15:30:37Z", "type": "commit"}, {"oid": "f2c702eaa05a5c64ea26d0259d798a10c6f79ec7", "url": "https://github.com/dhis2/dhis2-core/commit/f2c702eaa05a5c64ea26d0259d798a10c6f79ec7", "message": "feat: add currentUserGroupInfoCache for acl check", "committedDate": "2020-12-08T09:25:26Z", "type": "commit"}, {"oid": "ea84eb2575cd5747378c5f825044e9c0cc47e274", "url": "https://github.com/dhis2/dhis2-core/commit/ea84eb2575cd5747378c5f825044e9c0cc47e274", "message": "fix: clean up sharing migration script.", "committedDate": "2020-12-08T15:01:05Z", "type": "commit"}, {"oid": "c819a5263ddbc33965fbf7a8be8b095bd0e1817a", "url": "https://github.com/dhis2/dhis2-core/commit/c819a5263ddbc33965fbf7a8be8b095bd0e1817a", "message": "feat: add sharing endpoint to crud controller", "committedDate": "2020-12-08T16:53:49Z", "type": "commit"}, {"oid": "028b991c5df117545760617c30fe6a29a0f2de79", "url": "https://github.com/dhis2/dhis2-core/commit/028b991c5df117545760617c30fe6a29a0f2de79", "message": "fix: error in TokenOperator", "committedDate": "2020-12-09T10:41:44Z", "type": "commit"}, {"oid": "7bfd1b0adc99688613d42119ffacaa5b08dd5a0a", "url": "https://github.com/dhis2/dhis2-core/commit/7bfd1b0adc99688613d42119ffacaa5b08dd5a0a", "message": "fix: api test error in TrackedEntityInstanceAclReadTests", "committedDate": "2020-12-09T11:35:01Z", "type": "commit"}, {"oid": "ba10fa5357236fb80525411b013c1b95ae8b0867", "url": "https://github.com/dhis2/dhis2-core/commit/ba10fa5357236fb80525411b013c1b95ae8b0867", "message": "fix: allow updating object owner", "committedDate": "2020-12-09T11:38:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzODkyMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539838922", "bodyText": "Add some simple javadocs explaining the purpose of this service", "author": "mortenoh", "createdAt": "2020-12-10T04:36:48Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.hisp.dhis.sharing;\n+\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo\n+ *  * All rights reserved.\n+ *  *\n+ *  * Redistribution and use in source and binary forms, with or without\n+ *  * modification, are permitted provided that the following conditions are met:\n+ *  * Redistributions of source code must retain the above copyright notice, this\n+ *  * list of conditions and the following disclaimer.\n+ *  *\n+ *  * Redistributions in binary form must reproduce the above copyright notice,\n+ *  * this list of conditions and the following disclaimer in the documentation\n+ *  * and/or other materials provided with the distribution.\n+ *  * Neither the name of the HISP project nor the names of its contributors may\n+ *  * be used to endorse or promote products derived from this software without\n+ *  * specific prior written permission.\n+ *  *\n+ *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.feedback.ObjectReport;\n+import org.hisp.dhis.user.sharing.Sharing;\n+\n+import javax.validation.constraints.NotNull;\n+\n+public interface SharingService", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java\nindex 7d9c9b9281..70b244641f 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java\n\n@@ -1,43 +1,41 @@\n package org.hisp.dhis.sharing;\n \n /*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n  *\n- *  * Copyright (c) 2004-2020, University of Oslo\n- *  * All rights reserved.\n- *  *\n- *  * Redistribution and use in source and binary forms, with or without\n- *  * modification, are permitted provided that the following conditions are met:\n- *  * Redistributions of source code must retain the above copyright notice, this\n- *  * list of conditions and the following disclaimer.\n- *  *\n- *  * Redistributions in binary form must reproduce the above copyright notice,\n- *  * this list of conditions and the following disclaimer in the documentation\n- *  * and/or other materials provided with the distribution.\n- *  * Neither the name of the HISP project nor the names of its contributors may\n- *  * be used to endorse or promote products derived from this software without\n- *  * specific prior written permission.\n- *  *\n- *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n  *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n import org.hisp.dhis.common.IdentifiableObject;\n import org.hisp.dhis.feedback.ObjectReport;\n import org.hisp.dhis.user.sharing.Sharing;\n \n-import javax.validation.constraints.NotNull;\n-\n+/**\n+ * Contains functions for managing {@link Sharing}\n+ */\n public interface SharingService\n {\n-    <T extends IdentifiableObject> ObjectReport saveSharing( @NotNull Class<T> sharingClass, @NotNull T entity,\n-        Sharing sharing );\n+    <T extends IdentifiableObject> ObjectReport saveSharing( Class<T> entityClass, T entity, Sharing sharing );\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzODk5NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539838995", "bodyText": "extra newline", "author": "mortenoh", "createdAt": "2020-12-10T04:37:01Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/CurrentUserGroupInfo.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.hisp.dhis.user;\n+\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo\n+ *  * All rights reserved.\n+ *  *\n+ *  * Redistribution and use in source and binary forms, with or without\n+ *  * modification, are permitted provided that the following conditions are met:\n+ *  * Redistributions of source code must retain the above copyright notice, this\n+ *  * list of conditions and the following disclaimer.\n+ *  *\n+ *  * Redistributions in binary form must reproduce the above copyright notice,\n+ *  * this list of conditions and the following disclaimer in the documentation\n+ *  * and/or other materials provided with the distribution.\n+ *  * Neither the name of the HISP project nor the names of its contributors may\n+ *  * be used to endorse or promote products derived from this software without\n+ *  * specific prior written permission.\n+ *  *\n+ *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Contains minimal User info used for ACL check in {@link org.hisp.dhis.common.IdentifiableObjectStore}\n+ */\n+", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/CurrentUserGroupInfo.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/CurrentUserGroupInfo.java\nindex b76405f60c..453b83cfb1 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/CurrentUserGroupInfo.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/CurrentUserGroupInfo.java\n\n@@ -1,33 +1,31 @@\n package org.hisp.dhis.user;\n \n /*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n  *\n- *  * Copyright (c) 2004-2020, University of Oslo\n- *  * All rights reserved.\n- *  *\n- *  * Redistribution and use in source and binary forms, with or without\n- *  * modification, are permitted provided that the following conditions are met:\n- *  * Redistributions of source code must retain the above copyright notice, this\n- *  * list of conditions and the following disclaimer.\n- *  *\n- *  * Redistributions in binary form must reproduce the above copyright notice,\n- *  * this list of conditions and the following disclaimer in the documentation\n- *  * and/or other materials provided with the distribution.\n- *  * Neither the name of the HISP project nor the names of its contributors may\n- *  * be used to endorse or promote products derived from this software without\n- *  * specific prior written permission.\n- *  *\n- *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n  *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n import lombok.AllArgsConstructor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MDk5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539840997", "bodyText": "Add some simple javadocs", "author": "mortenoh", "createdAt": "2020-12-10T04:43:11Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserGroupStore.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.hisp.dhis.user;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.IdentifiableObjectStore;\n+\n+public interface UserGroupStore", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserGroupStore.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserGroupStore.java\nindex 00fd3ba4b8..8481787c9a 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserGroupStore.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/UserGroupStore.java\n\n@@ -30,6 +30,9 @@ package org.hisp.dhis.user;\n \n import org.hisp.dhis.common.IdentifiableObjectStore;\n \n+/**\n+ * Contains functions to manage {@link UserGroup}\n+ */\n public interface UserGroupStore\n     extends IdentifiableObjectStore<UserGroup>\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MTk3MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539841971", "bodyText": "Should also be embedded object to mark it properly in the schema", "author": "mortenoh", "createdAt": "2020-12-10T04:46:19Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ4OTkzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r541489931", "bodyText": "added", "author": "vietnguyen", "createdAt": "2020-12-12T03:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\nindex a17c5a48d9..ad4b92c1d0 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n\n@@ -1,5 +1,33 @@\n package org.hisp.dhis.user.sharing;\n \n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjAwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539842009", "bodyText": "license", "author": "mortenoh", "createdAt": "2020-12-10T04:46:30Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ4OTg4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r541489880", "bodyText": "added", "author": "vietnguyen", "createdAt": "2020-12-12T03:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\nindex a17c5a48d9..ad4b92c1d0 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n\n@@ -1,5 +1,33 @@\n package org.hisp.dhis.user.sharing;\n \n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MzgxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539843815", "bodyText": "default is already false?", "author": "mortenoh", "createdAt": "2020-12-10T04:52:09Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    public static final String DEFAULT = \"--------\";\n+\n+    @JsonProperty\n+    private String owner = null;\n+\n+    @JsonProperty(\"public\")\n+    private String publicAccess = DEFAULT;\n+\n+    @JsonProperty\n+    private boolean external = false;", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\nindex a17c5a48d9..ad4b92c1d0 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n\n@@ -1,5 +1,33 @@\n package org.hisp.dhis.user.sharing;\n \n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0Mzg4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539843884", "bodyText": "default is already null?", "author": "mortenoh", "createdAt": "2020-12-10T04:52:18Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    public static final String DEFAULT = \"--------\";\n+\n+    @JsonProperty\n+    private String owner = null;", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\nindex a17c5a48d9..ad4b92c1d0 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n\n@@ -1,5 +1,33 @@\n package org.hisp.dhis.user.sharing;\n \n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NDQ4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539844488", "bodyText": "code style, { }\u00a0", "author": "mortenoh", "createdAt": "2020-12-10T04:54:29Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package org.hisp.dhis.user.sharing;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    public static final String DEFAULT = \"--------\";\n+\n+    @JsonProperty\n+    private String owner = null;\n+\n+    @JsonProperty(\"public\")\n+    private String publicAccess = DEFAULT;\n+\n+    @JsonProperty\n+    private boolean external = false;\n+\n+    @JsonProperty\n+    private Map<String, UserAccess> users = new HashMap<>();\n+\n+    @JsonProperty\n+    private Map<String, UserGroupAccess> userGroups = new HashMap<>();\n+\n+    public Sharing copy()\n+    {\n+        return builder()\n+            .external( this.external )\n+            .publicAccess( this.publicAccess )\n+            .owner( this.owner )\n+            .users( new HashMap<>( users ) )\n+            .userGroups( new HashMap<>( userGroups ) ).build();\n+    }\n+\n+    public void setOwner( User user )\n+    {\n+        this.owner =  user != null ? user.getUid() : null;\n+    }\n+\n+    public void setOwner( String userId )\n+    {\n+        this.owner = userId;\n+    }\n+\n+    @JsonIgnore\n+    public User getUserOwner()\n+    {\n+        User user = new User();\n+        user.setUid( this.owner );\n+        return user;\n+    }\n+\n+    public void setUserAccesses( Set<UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        userAccesses.forEach( ua -> this.addUserAccess( ua ) );\n+    }\n+\n+    public void setDtoUserAccesses( Set<org.hisp.dhis.user.UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        if ( userAccesses != null && !userAccesses.isEmpty() )\n+        {\n+            userAccesses.forEach( ua ->  this.addUserAccess( new UserAccess( ua ) ) );\n+        }\n+    }\n+\n+    public void setDtoUserGroupAccesses( Set<org.hisp.dhis.user.UserGroupAccess> userGroupAccesses )\n+    {\n+        if ( this.userGroups != null ) this.userGroups.clear();\n+        else this.userGroups = new HashMap<>();\n+\n+        if ( userGroupAccesses != null && !userGroupAccesses.isEmpty() )\n+        {\n+            userGroupAccesses.forEach( uga ->  this.addUserGroupAccess( new UserGroupAccess( uga ) ) );\n+        }\n+    }\n+\n+    public void setUserGroupAccess( Set<UserGroupAccess> userGroupAccesses )\n+    {\n+        if ( this.userGroups != null ) this.userGroups.clear();", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\nindex a17c5a48d9..ad4b92c1d0 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n\n@@ -1,5 +1,33 @@\n package org.hisp.dhis.user.sharing;\n \n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NDc1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539844755", "bodyText": "should probably convert to lombok?", "author": "mortenoh", "createdAt": "2020-12-10T04:55:13Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserAccess.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.hisp.dhis.user.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import com.google.common.base.MoreObjects;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@JacksonXmlRootElement( localName = \"userAccess\", namespace = DxfNamespaces.DXF_2_0 )", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserAccess.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserAccess.java\nindex 7828dfefe8..c821f08851 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserAccess.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserAccess.java\n\n@@ -31,28 +31,32 @@ package org.hisp.dhis.user.sharing;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n-import com.google.common.base.MoreObjects;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n import org.hisp.dhis.common.DxfNamespaces;\n import org.hisp.dhis.user.User;\n \n import java.io.Serializable;\n-import java.util.Objects;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n @JacksonXmlRootElement( localName = \"userAccess\", namespace = DxfNamespaces.DXF_2_0 )\n public class UserAccess\n     implements Serializable\n {\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n     private String access;\n \n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n     private String id;\n \n-    public UserAccess()\n-    {\n-    }\n-\n     public UserAccess( User user, String access )\n     {\n         this.access = access;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NDg5NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539844895", "bodyText": "should probably convert to lombok?", "author": "mortenoh", "createdAt": "2020-12-10T04:55:38Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserGroupAccess.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package org.hisp.dhis.user.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import com.google.common.base.MoreObjects;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.user.UserGroup;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@JacksonXmlRootElement( localName = \"userGroupAccess\", namespace = DxfNamespaces.DXF_2_0 )\n+public class UserGroupAccess", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserGroupAccess.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserGroupAccess.java\nindex d959e346c2..4c43c47590 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserGroupAccess.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/UserGroupAccess.java\n\n@@ -31,29 +31,32 @@ package org.hisp.dhis.user.sharing;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n-import com.google.common.base.MoreObjects;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n import org.hisp.dhis.common.DxfNamespaces;\n import org.hisp.dhis.user.UserGroup;\n \n import java.io.Serializable;\n-import java.util.Objects;\n-import java.util.Set;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n @JacksonXmlRootElement( localName = \"userGroupAccess\", namespace = DxfNamespaces.DXF_2_0 )\n public class UserGroupAccess\n     implements Serializable\n {\n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n     private String access;\n \n+    @JsonProperty\n+    @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n     private String id;\n \n-    public UserGroupAccess()\n-    {\n-    }\n-\n     public UserGroupAccess( UserGroup userGroup, String access )\n     {\n         this.access = access;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NTAzNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539845036", "bodyText": "double *", "author": "mortenoh", "createdAt": "2020-12-10T04:56:07Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\nindex 58faa23494..daa2ec9a54 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\n\n@@ -1,35 +1,35 @@\n+package org.hisp.dhis.util;\n+\n /*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n  *\n- *  * Copyright (c) 2004-2020, University of Oslo\n- *  * All rights reserved.\n- *  *\n- *  * Redistribution and use in source and binary forms, with or without\n- *  * modification, are permitted provided that the following conditions are met:\n- *  * Redistributions of source code must retain the above copyright notice, this\n- *  * list of conditions and the following disclaimer.\n- *  *\n- *  * Redistributions in binary form must reproduce the above copyright notice,\n- *  * this list of conditions and the following disclaimer in the documentation\n- *  * and/or other materials provided with the distribution.\n- *  * Neither the name of the HISP project nor the names of its contributors may\n- *  * be used to endorse or promote products derived from this software without\n- *  * specific prior written permission.\n- *  *\n- *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n  *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.util;\n-\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.IdentifiableObject;\n import org.hisp.dhis.user.UserGroupAccess;\n import org.hisp.dhis.user.sharing.Sharing;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NTA4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539845084", "bodyText": "package on top", "author": "mortenoh", "createdAt": "2020-12-10T04:56:16Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo\n+ *  * All rights reserved.\n+ *  *\n+ *  * Redistribution and use in source and binary forms, with or without\n+ *  * modification, are permitted provided that the following conditions are met:\n+ *  * Redistributions of source code must retain the above copyright notice, this\n+ *  * list of conditions and the following disclaimer.\n+ *  *\n+ *  * Redistributions in binary form must reproduce the above copyright notice,\n+ *  * this list of conditions and the following disclaimer in the documentation\n+ *  * and/or other materials provided with the distribution.\n+ *  * Neither the name of the HISP project nor the names of its contributors may\n+ *  * be used to endorse or promote products derived from this software without\n+ *  * specific prior written permission.\n+ *  *\n+ *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+package org.hisp.dhis.util;", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\nindex 58faa23494..daa2ec9a54 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\n\n@@ -1,35 +1,35 @@\n+package org.hisp.dhis.util;\n+\n /*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n  *\n- *  * Copyright (c) 2004-2020, University of Oslo\n- *  * All rights reserved.\n- *  *\n- *  * Redistribution and use in source and binary forms, with or without\n- *  * modification, are permitted provided that the following conditions are met:\n- *  * Redistributions of source code must retain the above copyright notice, this\n- *  * list of conditions and the following disclaimer.\n- *  *\n- *  * Redistributions in binary form must reproduce the above copyright notice,\n- *  * this list of conditions and the following disclaimer in the documentation\n- *  * and/or other materials provided with the distribution.\n- *  * Neither the name of the HISP project nor the names of its contributors may\n- *  * be used to endorse or promote products derived from this software without\n- *  * specific prior written permission.\n- *  *\n- *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n  *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-package org.hisp.dhis.util;\n-\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.IdentifiableObject;\n import org.hisp.dhis.user.UserGroupAccess;\n import org.hisp.dhis.user.sharing.Sharing;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NzIzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539847238", "bodyText": "should use resetUserAccesses?", "author": "mortenoh", "createdAt": "2020-12-10T05:02:48Z", "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "diffHunk": "@@ -427,24 +430,26 @@ public boolean canManage( User user, IdentifiableObject object )\n         }\n \n         BaseIdentifiableObject baseIdentifiableObject = (BaseIdentifiableObject) object;\n-        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n-        baseIdentifiableObject.setExternalAccess( false );\n+//        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n+        baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.DEFAULT );\n+//        baseIdentifiableObject.setExternalAccess( false );\n+        baseIdentifiableObject.getSharing().setExternal( false );\n \n-        if ( object.getUser() == null )\n+        if ( object.getSharing().getOwner() == null )\n         {\n-            baseIdentifiableObject.setUser( user );\n+            baseIdentifiableObject.getSharing().setOwner( user );\n         }\n \n         if ( canMakePublic( user, object.getClass() ) )\n         {\n             if ( defaultPublic( object.getClass() ) )\n             {\n-                baseIdentifiableObject.setPublicAccess( AccessStringHelper.READ_WRITE );\n+                baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.READ_WRITE );\n             }\n         }\n \n-        object.getUserAccesses().clear();\n-        object.getUserGroupAccesses().clear();\n+        object.getSharing().getUsers().clear();", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java b/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\nindex 399beb0a79..011592e1d3 100644\n--- a/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\n+++ b/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\n\n@@ -430,10 +430,8 @@ public class DefaultAclService implements AclService\n         }\n \n         BaseIdentifiableObject baseIdentifiableObject = (BaseIdentifiableObject) object;\n-//        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n-        baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.DEFAULT );\n-//        baseIdentifiableObject.setExternalAccess( false );\n-        baseIdentifiableObject.getSharing().setExternal( false );\n+        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n+        baseIdentifiableObject.setExternalAccess( false );\n \n         if ( object.getSharing().getOwner() == null )\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NzI2NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539847264", "bodyText": "Should use resetUserGroupAccesses?", "author": "mortenoh", "createdAt": "2020-12-10T05:02:57Z", "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "diffHunk": "@@ -427,24 +430,26 @@ public boolean canManage( User user, IdentifiableObject object )\n         }\n \n         BaseIdentifiableObject baseIdentifiableObject = (BaseIdentifiableObject) object;\n-        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n-        baseIdentifiableObject.setExternalAccess( false );\n+//        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n+        baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.DEFAULT );\n+//        baseIdentifiableObject.setExternalAccess( false );\n+        baseIdentifiableObject.getSharing().setExternal( false );\n \n-        if ( object.getUser() == null )\n+        if ( object.getSharing().getOwner() == null )\n         {\n-            baseIdentifiableObject.setUser( user );\n+            baseIdentifiableObject.getSharing().setOwner( user );\n         }\n \n         if ( canMakePublic( user, object.getClass() ) )\n         {\n             if ( defaultPublic( object.getClass() ) )\n             {\n-                baseIdentifiableObject.setPublicAccess( AccessStringHelper.READ_WRITE );\n+                baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.READ_WRITE );\n             }\n         }\n \n-        object.getUserAccesses().clear();\n-        object.getUserGroupAccesses().clear();\n+        object.getSharing().getUsers().clear();\n+        object.getSharing().getUserGroups().clear();", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java b/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\nindex 399beb0a79..011592e1d3 100644\n--- a/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\n+++ b/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\n\n@@ -430,10 +430,8 @@ public class DefaultAclService implements AclService\n         }\n \n         BaseIdentifiableObject baseIdentifiableObject = (BaseIdentifiableObject) object;\n-//        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n-        baseIdentifiableObject.getSharing().setPublicAccess( AccessStringHelper.DEFAULT );\n-//        baseIdentifiableObject.setExternalAccess( false );\n-        baseIdentifiableObject.getSharing().setExternal( false );\n+        baseIdentifiableObject.setPublicAccess( AccessStringHelper.DEFAULT );\n+        baseIdentifiableObject.setExternalAccess( false );\n \n         if ( object.getSharing().getOwner() == null )\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NzY2NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539847664", "bodyText": "Would it make sense to move this validation logic to Sharing? sharing.validate() could return a list of ErrorReport", "author": "mortenoh", "createdAt": "2020-12-10T05:04:14Z", "path": "dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java", "diffHunk": "@@ -474,7 +478,7 @@ public boolean canManage( User user, IdentifiableObject object )\n             return errorReports;\n         }\n \n-        if ( !AccessStringHelper.isValid( object.getPublicAccess() ) )\n+        if ( !AccessStringHelper.isValid( object.getSharing().getPublicAccess() ) )", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java b/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\nindex 399beb0a79..b425ed12f0 100644\n--- a/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\n+++ b/dhis-2/dhis-services/dhis-service-acl/src/main/java/org/hisp/dhis/security/acl/DefaultAclService.java\n\n@@ -478,7 +474,7 @@ public class DefaultAclService implements AclService\n             return errorReports;\n         }\n \n-        if ( !AccessStringHelper.isValid( object.getSharing().getPublicAccess() ) )\n+        if ( !AccessStringHelper.isValid( object.getPublicAccess() ) )\n         {\n             errorReports.add( new ErrorReport( object.getClass(), ErrorCode.E3010, object.getPublicAccess() ) );\n             return errorReports;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MzE0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539853143", "bodyText": "double *", "author": "mortenoh", "createdAt": "2020-12-10T05:21:26Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/sharing/DefaultSharingService.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package org.hisp.dhis.sharing;\n+\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/sharing/DefaultSharingService.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/sharing/DefaultSharingService.java\nindex ada6fa93f1..38bf081779 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/sharing/DefaultSharingService.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/sharing/DefaultSharingService.java\n\n@@ -1,33 +1,31 @@\n package org.hisp.dhis.sharing;\n \n /*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n  *\n- *  * Copyright (c) 2004-2020, University of Oslo\n- *  * All rights reserved.\n- *  *\n- *  * Redistribution and use in source and binary forms, with or without\n- *  * modification, are permitted provided that the following conditions are met:\n- *  * Redistributions of source code must retain the above copyright notice, this\n- *  * list of conditions and the following disclaimer.\n- *  *\n- *  * Redistributions in binary form must reproduce the above copyright notice,\n- *  * this list of conditions and the following disclaimer in the documentation\n- *  * and/or other materials provided with the distribution.\n- *  * Neither the name of the HISP project nor the names of its contributors may\n- *  * be used to endorse or promote products derived from this software without\n- *  * specific prior written permission.\n- *  *\n- *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n  *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n import lombok.extern.slf4j.Slf4j;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1ODgyMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539858822", "bodyText": "license", "author": "mortenoh", "createdAt": "2020-12-10T05:38:00Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.hisp.dhis.user;\n+", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5MDU4Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r541490583", "bodyText": "this class is deleted", "author": "vietnguyen", "createdAt": "2020-12-12T03:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1ODgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java\ndeleted file mode 100644\nindex 61ee8a3f4c..0000000000\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java\n+++ /dev/null\n\n@@ -1,51 +0,0 @@\n-package org.hisp.dhis.user;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.hisp.dhis.common.IdentifiableObjectStore;\n-import org.hisp.dhis.security.acl.AclService;\n-import org.hisp.dhis.system.startup.TransactionContextStartupRoutine;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.List;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n-@Slf4j\n-public class UserGroupPopulator\n-    extends TransactionContextStartupRoutine\n-{\n-    // -------------------------------------------------------------------------\n-    // Dependencies\n-    // -------------------------------------------------------------------------\n-\n-    private final IdentifiableObjectStore<UserGroup> userGroupStore;\n-\n-    private final AclService aclService;\n-\n-    public UserGroupPopulator( IdentifiableObjectStore<UserGroup> userGroupStore, AclService aclService )\n-    {\n-        checkNotNull( userGroupStore );\n-        checkNotNull( aclService );\n-\n-        this.userGroupStore = userGroupStore;\n-        this.aclService = aclService;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // Execute\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    public void executeInTransaction()\n-    {\n-//        aclService.getUserGroupCache().invalidateAll();\n-//\n-//        List<UserGroup> groups = userGroupStore.getAllNoAcl();\n-//        groups.forEach( group -> {\n-//            group.getMembers();\n-//            aclService.getUserGroupCache().put( group.getUid(), group );\n-//        } );\n-//\n-//        log.info( \"Added \" + groups.size() + \" UserGroups into UserGroupCache\" );\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1OTAzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539859031", "bodyText": "Is this class needed? seems the only function is commented out", "author": "mortenoh", "createdAt": "2020-12-10T05:38:42Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.hisp.dhis.user;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObjectStore;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.system.startup.TransactionContextStartupRoutine;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+@Slf4j\n+public class UserGroupPopulator", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ4OTI5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r541489297", "bodyText": "removed", "author": "vietnguyen", "createdAt": "2020-12-12T03:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1OTAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java\ndeleted file mode 100644\nindex 61ee8a3f4c..0000000000\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/UserGroupPopulator.java\n+++ /dev/null\n\n@@ -1,51 +0,0 @@\n-package org.hisp.dhis.user;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.hisp.dhis.common.IdentifiableObjectStore;\n-import org.hisp.dhis.security.acl.AclService;\n-import org.hisp.dhis.system.startup.TransactionContextStartupRoutine;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.List;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n-@Slf4j\n-public class UserGroupPopulator\n-    extends TransactionContextStartupRoutine\n-{\n-    // -------------------------------------------------------------------------\n-    // Dependencies\n-    // -------------------------------------------------------------------------\n-\n-    private final IdentifiableObjectStore<UserGroup> userGroupStore;\n-\n-    private final AclService aclService;\n-\n-    public UserGroupPopulator( IdentifiableObjectStore<UserGroup> userGroupStore, AclService aclService )\n-    {\n-        checkNotNull( userGroupStore );\n-        checkNotNull( aclService );\n-\n-        this.userGroupStore = userGroupStore;\n-        this.aclService = aclService;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // Execute\n-    // -------------------------------------------------------------------------\n-\n-    @Override\n-    public void executeInTransaction()\n-    {\n-//        aclService.getUserGroupCache().invalidateAll();\n-//\n-//        List<UserGroup> groups = userGroupStore.getAllNoAcl();\n-//        groups.forEach( group -> {\n-//            group.getMembers();\n-//            aclService.getUserGroupCache().put( group.getUid(), group );\n-//        } );\n-//\n-//        log.info( \"Added \" + groups.size() + \" UserGroups into UserGroupCache\" );\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1OTEwNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r539859105", "bodyText": "double * and extra newline in top", "author": "mortenoh", "createdAt": "2020-12-10T05:38:58Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserGroupStore.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.hisp.dhis.user.hibernate;\n+\n+/*\n+ *\n+ *  * Copyright (c) 2004-2020, University of Oslo", "originalCommit": "ba10fa5357236fb80525411b013c1b95ae8b0867", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserGroupStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserGroupStore.java\nindex 118184b76d..ce78e7b0a7 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserGroupStore.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/hibernate/HibernateUserGroupStore.java\n\n@@ -1,33 +1,31 @@\n package org.hisp.dhis.user.hibernate;\n \n /*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n  *\n- *  * Copyright (c) 2004-2020, University of Oslo\n- *  * All rights reserved.\n- *  *\n- *  * Redistribution and use in source and binary forms, with or without\n- *  * modification, are permitted provided that the following conditions are met:\n- *  * Redistributions of source code must retain the above copyright notice, this\n- *  * list of conditions and the following disclaimer.\n- *  *\n- *  * Redistributions in binary form must reproduce the above copyright notice,\n- *  * this list of conditions and the following disclaimer in the documentation\n- *  * and/or other materials provided with the distribution.\n- *  * Neither the name of the HISP project nor the names of its contributors may\n- *  * be used to endorse or promote products derived from this software without\n- *  * specific prior written permission.\n- *  *\n- *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- *  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- *  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- *  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- *  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- *  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- *  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- *  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- *  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- *  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n  *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n import org.hibernate.SessionFactory;\n"}}, {"oid": "68f7d6a6a351cc19a5180697666e2bec7b60c4c5", "url": "https://github.com/dhis2/dhis2-core/commit/68f7d6a6a351cc19a5180697666e2bec7b60c4c5", "message": "fix: api test errors", "committedDate": "2020-12-11T05:18:12Z", "type": "commit"}, {"oid": "79baa22b2f2e8a064dabaf049b277134796af484", "url": "https://github.com/dhis2/dhis2-core/commit/79baa22b2f2e8a064dabaf049b277134796af484", "message": "fix: unit test errors in AclServiceTest", "committedDate": "2020-12-11T05:55:58Z", "type": "commit"}, {"oid": "7f61c9fcc1ac12e78cd26b6f9528ac2e96fd571d", "url": "https://github.com/dhis2/dhis2-core/commit/7f61c9fcc1ac12e78cd26b6f9528ac2e96fd571d", "message": "fix: unit test error in TrackerAccessManagerTest", "committedDate": "2020-12-11T06:07:06Z", "type": "commit"}, {"oid": "5570ce87f3e245893ad7b6a0d5f0ca66de3c7675", "url": "https://github.com/dhis2/dhis2-core/commit/5570ce87f3e245893ad7b6a0d5f0ca66de3c7675", "message": "fix: support preheat userGroup UID when mode = code", "committedDate": "2020-12-11T08:40:38Z", "type": "commit"}, {"oid": "deee54223be676382fc926e16df0738a06b955d2", "url": "https://github.com/dhis2/dhis2-core/commit/deee54223be676382fc926e16df0738a06b955d2", "message": "fix: unit test error TrackerAccessManagerTest", "committedDate": "2020-12-11T09:23:54Z", "type": "commit"}, {"oid": "8526688be2b701b637ac3100880f1629bb6d0382", "url": "https://github.com/dhis2/dhis2-core/commit/8526688be2b701b637ac3100880f1629bb6d0382", "message": "fix: jsonb query to compare null public access", "committedDate": "2020-12-11T10:07:37Z", "type": "commit"}, {"oid": "62c75dbd61e7917cb1d70cddb942124965dbe3e4", "url": "https://github.com/dhis2/dhis2-core/commit/62c75dbd61e7917cb1d70cddb942124965dbe3e4", "message": "revert debug code", "committedDate": "2020-12-11T10:08:31Z", "type": "commit"}, {"oid": "7f561f9e12750d1161dac868347b824472918379", "url": "https://github.com/dhis2/dhis2-core/commit/7f561f9e12750d1161dac868347b824472918379", "message": "fix: unit test error in EnrollmentSecurityTest", "committedDate": "2020-12-11T10:24:32Z", "type": "commit"}, {"oid": "71fc5d4effcc9c31ab8ea63ff6f89518d484495d", "url": "https://github.com/dhis2/dhis2-core/commit/71fc5d4effcc9c31ab8ea63ff6f89518d484495d", "message": "fix: sharing query error in DefaultAclStore", "committedDate": "2020-12-11T12:34:25Z", "type": "commit"}, {"oid": "6af890ff8799337c94faa00ac8491a76db0f83e7", "url": "https://github.com/dhis2/dhis2-core/commit/6af890ff8799337c94faa00ac8491a76db0f83e7", "message": "clean up codes", "committedDate": "2020-12-11T13:52:00Z", "type": "commit"}, {"oid": "1fffe1a25d2e4463d4ad88e92c4a105c400c698c", "url": "https://github.com/dhis2/dhis2-core/commit/1fffe1a25d2e4463d4ad88e92c4a105c400c698c", "message": "fix: add nullif function for sharing migration script", "committedDate": "2020-12-11T14:46:12Z", "type": "commit"}, {"oid": "231100f125a62c84bd717ad678fff977558baf53", "url": "https://github.com/dhis2/dhis2-core/commit/231100f125a62c84bd717ad678fff977558baf53", "message": "fix: unit test error DataApprovalServiceTest", "committedDate": "2020-12-11T14:58:42Z", "type": "commit"}, {"oid": "01f0238e186c453dac7a4ddae3ac3144d58d9765", "url": "https://github.com/dhis2/dhis2-core/commit/01f0238e186c453dac7a4ddae3ac3144d58d9765", "message": "clean up codes", "committedDate": "2020-12-12T05:14:46Z", "type": "commit"}, {"oid": "2e92e4681d0d848694a6eaa378760c02d63b2b8c", "url": "https://github.com/dhis2/dhis2-core/commit/2e92e4681d0d848694a6eaa378760c02d63b2b8c", "message": "fix: add ACL check for getListObject in AbstractCrudController", "committedDate": "2020-12-14T09:19:03Z", "type": "commit"}, {"oid": "b3f1dd2ca82ea1421f9f6b800bab09ae4b1913f5", "url": "https://github.com/dhis2/dhis2-core/commit/b3f1dd2ca82ea1421f9f6b800bab09ae4b1913f5", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-14T09:41:45Z", "type": "commit"}, {"oid": "87d86c0ff70bf6de761d70bed8722b5e0fd4e82f", "url": "https://github.com/dhis2/dhis2-core/commit/87d86c0ff70bf6de761d70bed8722b5e0fd4e82f", "message": "fix: unit test error TrackerTest", "committedDate": "2020-12-14T16:01:20Z", "type": "commit"}, {"oid": "01ff73727831c7b2c39668d4cc7fcab18712482a", "url": "https://github.com/dhis2/dhis2-core/commit/01ff73727831c7b2c39668d4cc7fcab18712482a", "message": "fix: add unit test for JpaQueryEngine", "committedDate": "2020-12-14T19:48:51Z", "type": "commit"}, {"oid": "473a6f242d98abec33b34ad40fe20a837237e90c", "url": "https://github.com/dhis2/dhis2-core/commit/473a6f242d98abec33b34ad40fe20a837237e90c", "message": "fix: unit test error", "committedDate": "2020-12-15T02:50:48Z", "type": "commit"}, {"oid": "09279a5d1c9cbc8a5ed5e1fc0874c16eb5608997", "url": "https://github.com/dhis2/dhis2-core/commit/09279a5d1c9cbc8a5ed5e1fc0874c16eb5608997", "message": "fix: tracker unit test error", "committedDate": "2020-12-15T05:18:43Z", "type": "commit"}, {"oid": "74bb95cb70cecf2dc5f37cc25bdab33d66acffa2", "url": "https://github.com/dhis2/dhis2-core/commit/74bb95cb70cecf2dc5f37cc25bdab33d66acffa2", "message": "fix: tracker unit test error", "committedDate": "2020-12-15T05:38:13Z", "type": "commit"}, {"oid": "4d2d31a0deae2aa3842dd305db690b24bd26a18c", "url": "https://github.com/dhis2/dhis2-core/commit/4d2d31a0deae2aa3842dd305db690b24bd26a18c", "message": "fix: unit test error  EnrollmentSecurityImportValidationTest", "committedDate": "2020-12-15T13:23:15Z", "type": "commit"}, {"oid": "aaaac142ace5cca9d713c6a1711f16bb197790d3", "url": "https://github.com/dhis2/dhis2-core/commit/aaaac142ace5cca9d713c6a1711f16bb197790d3", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-15T13:27:37Z", "type": "commit"}, {"oid": "8d96d9bbabea09ddbe33b367a53acf4dbb545f6a", "url": "https://github.com/dhis2/dhis2-core/commit/8d96d9bbabea09ddbe33b367a53acf4dbb545f6a", "message": "fix: merge conflicts", "committedDate": "2020-12-15T14:33:56Z", "type": "commit"}, {"oid": "08db59951950704d6cbc4c1014cfa91ec1083239", "url": "https://github.com/dhis2/dhis2-core/commit/08db59951950704d6cbc4c1014cfa91ec1083239", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-15T14:47:31Z", "type": "commit"}, {"oid": "820e05983cfa42d8df52950aae615acf3d131f25", "url": "https://github.com/dhis2/dhis2-core/commit/820e05983cfa42d8df52950aae615acf3d131f25", "message": "fix: merge conflicts", "committedDate": "2020-12-16T05:36:16Z", "type": "commit"}, {"oid": "7f52dc9cc339e912a007a75520b24e77880029b6", "url": "https://github.com/dhis2/dhis2-core/commit/7f52dc9cc339e912a007a75520b24e77880029b6", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-16T05:41:26Z", "type": "commit"}, {"oid": "07ee9d1e1f90583988cb0b9e01d5d6e8b0640cd3", "url": "https://github.com/dhis2/dhis2-core/commit/07ee9d1e1f90583988cb0b9e01d5d6e8b0640cd3", "message": "fix: tracker unit test errors", "committedDate": "2020-12-16T10:33:55Z", "type": "commit"}, {"oid": "3913c37f48f3fb193a436ab621619b320dc32981", "url": "https://github.com/dhis2/dhis2-core/commit/3913c37f48f3fb193a436ab621619b320dc32981", "message": "fix: tracker test errors", "committedDate": "2020-12-16T11:17:17Z", "type": "commit"}, {"oid": "f459f123278b968e24cf30947e1466bafaccda97", "url": "https://github.com/dhis2/dhis2-core/commit/f459f123278b968e24cf30947e1466bafaccda97", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-17T06:47:46Z", "type": "commit"}, {"oid": "57062891dc8a22bdab3b8920ee57ae485a65ddbd", "url": "https://github.com/dhis2/dhis2-core/commit/57062891dc8a22bdab3b8920ee57ae485a65ddbd", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-5814", "committedDate": "2020-12-17T08:44:10Z", "type": "commit"}, {"oid": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "url": "https://github.com/dhis2/dhis2-core/commit/24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "message": "fix: ProgramStageInstance.assignedUser constraint error", "committedDate": "2020-12-17T10:14:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMzM2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546533363", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-12-21T06:38:04Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseIdentifiableObject.java", "diffHunk": "@@ -449,52 +463,58 @@ public void setUser( User user )\n     @PropertyRange( min = 8, max = 8 )\n     public String getPublicAccess()\n     {\n-        return publicAccess;\n+        return getSharing().getPublicAccess();\n     }\n \n     public void setPublicAccess( String publicAccess )\n     {\n-        this.publicAccess = publicAccess;\n+        getSharing().setPublicAccess( publicAccess );\n     }\n \n     @Override\n     @JsonProperty\n     @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 )\n     public boolean getExternalAccess()\n     {\n-        return externalAccess;\n+        if ( sharing == null )\n+        {\n+            sharing = new Sharing();\n+        }", "originalCommit": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseIdentifiableObject.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseIdentifiableObject.java\nindex e1d58d0b92..3c9be4f8cc 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseIdentifiableObject.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/BaseIdentifiableObject.java\n\n@@ -463,12 +449,12 @@ public class BaseIdentifiableObject\n     @PropertyRange( min = 8, max = 8 )\n     public String getPublicAccess()\n     {\n-        return getSharing().getPublicAccess();\n+        return publicAccess;\n     }\n \n     public void setPublicAccess( String publicAccess )\n     {\n-        getSharing().setPublicAccess( publicAccess );\n+        this.publicAccess = publicAccess;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMzY4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546533689", "bodyText": "javadocs", "author": "mortenoh", "createdAt": "2020-12-21T06:39:14Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.hisp.dhis.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.feedback.ObjectReport;\n+import org.hisp.dhis.user.sharing.Sharing;\n+\n+/**\n+ * Contains functions for managing {@link Sharing}\n+ */\n+public interface SharingService\n+{\n+    <T extends IdentifiableObject> ObjectReport saveSharing( Class<T> entityClass, T entity, Sharing sharing );", "originalCommit": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java b/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/JacksonCsvUtils.java\nsimilarity index 58%\nrename from dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java\nrename to dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/JacksonCsvUtils.java\nindex 70b244641f..7e87877583 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/sharing/SharingService.java\n+++ b/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/JacksonCsvUtils.java\n\n@@ -1,4 +1,4 @@\n-package org.hisp.dhis.sharing;\n+package org.hisp.dhis.system.util;\n \n /*\n  * Copyright (c) 2004-2020, University of Oslo\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDA0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546534040", "bodyText": "code style", "author": "mortenoh", "createdAt": "2020-12-21T06:40:32Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.hisp.dhis.user.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.common.EmbeddedObject;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable, EmbeddedObject\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    /**\n+     * Uid of the User who owns the object\n+     */\n+    @JsonProperty\n+    private String owner;\n+\n+    @JsonProperty(\"public\")\n+    private String publicAccess = null;\n+\n+    @JsonProperty\n+    private boolean external;\n+\n+    /**\n+     * Map of UserAccess. Key is User uid\n+     */\n+    @JsonProperty\n+    private Map<String, UserAccess> users = new HashMap<>();\n+\n+    /**\n+     * Map of UserGroupAccess. Key is UserGroup uid\n+     */\n+    @JsonProperty\n+    private Map<String, UserGroupAccess> userGroups = new HashMap<>();\n+\n+    public void setOwner( User user )\n+    {\n+        this.owner =  user != null ? user.getUid() : null;\n+    }\n+\n+    public void setOwner( String userId )\n+    {\n+        this.owner = userId;\n+    }\n+\n+    @JsonIgnore\n+    public User getUserOwner()\n+    {\n+        User user = new User();\n+        user.setUid( this.owner );\n+        return user;\n+    }\n+\n+    public void setUserAccesses( Set<UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        userAccesses.forEach( ua -> this.addUserAccess( ua ) );\n+    }\n+\n+    public void setDtoUserAccesses( Set<org.hisp.dhis.user.UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        if ( userAccesses != null && !userAccesses.isEmpty() )\n+        {\n+            userAccesses.forEach( ua ->  this.addUserAccess( new UserAccess( ua ) ) );\n+        }\n+    }\n+\n+    public void setDtoUserGroupAccesses( Set<org.hisp.dhis.user.UserGroupAccess> userGroupAccesses )\n+    {\n+        if ( this.userGroups != null )\n+        {\n+            this.userGroups.clear();\n+        }\n+\n+        else this.userGroups = new HashMap<>();", "originalCommit": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\ndeleted file mode 100644\nindex ad4b92c1d0..0000000000\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n+++ /dev/null\n\n@@ -1,195 +0,0 @@\n-package org.hisp.dhis.user.sharing;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n-import lombok.AllArgsConstructor;\n-import lombok.Builder;\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n-import org.apache.commons.collections.MapUtils;\n-import org.hisp.dhis.common.DxfNamespaces;\n-import org.hisp.dhis.common.EmbeddedObject;\n-import org.hisp.dhis.user.User;\n-\n-import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n-\n-@Builder\n-@Data\n-@AllArgsConstructor\n-@NoArgsConstructor\n-@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n-public class Sharing\n-    implements Serializable, EmbeddedObject\n-{\n-    private static final long serialVersionUID = 6977793211734844477L;\n-\n-    /**\n-     * Uid of the User who owns the object\n-     */\n-    @JsonProperty\n-    private String owner;\n-\n-    @JsonProperty(\"public\")\n-    private String publicAccess = null;\n-\n-    @JsonProperty\n-    private boolean external;\n-\n-    /**\n-     * Map of UserAccess. Key is User uid\n-     */\n-    @JsonProperty\n-    private Map<String, UserAccess> users = new HashMap<>();\n-\n-    /**\n-     * Map of UserGroupAccess. Key is UserGroup uid\n-     */\n-    @JsonProperty\n-    private Map<String, UserGroupAccess> userGroups = new HashMap<>();\n-\n-    public void setOwner( User user )\n-    {\n-        this.owner =  user != null ? user.getUid() : null;\n-    }\n-\n-    public void setOwner( String userId )\n-    {\n-        this.owner = userId;\n-    }\n-\n-    @JsonIgnore\n-    public User getUserOwner()\n-    {\n-        User user = new User();\n-        user.setUid( this.owner );\n-        return user;\n-    }\n-\n-    public void setUserAccesses( Set<UserAccess> userAccesses )\n-    {\n-        if ( this.users != null ) this.users.clear();\n-        else this.users = new HashMap<>();\n-\n-        userAccesses.forEach( ua -> this.addUserAccess( ua ) );\n-    }\n-\n-    public void setDtoUserAccesses( Set<org.hisp.dhis.user.UserAccess> userAccesses )\n-    {\n-        if ( this.users != null ) this.users.clear();\n-        else this.users = new HashMap<>();\n-\n-        if ( userAccesses != null && !userAccesses.isEmpty() )\n-        {\n-            userAccesses.forEach( ua ->  this.addUserAccess( new UserAccess( ua ) ) );\n-        }\n-    }\n-\n-    public void setDtoUserGroupAccesses( Set<org.hisp.dhis.user.UserGroupAccess> userGroupAccesses )\n-    {\n-        if ( this.userGroups != null )\n-        {\n-            this.userGroups.clear();\n-        }\n-\n-        else this.userGroups = new HashMap<>();\n-\n-        if ( userGroupAccesses != null && !userGroupAccesses.isEmpty() )\n-        {\n-            userGroupAccesses.forEach( uga ->  this.addUserGroupAccess( new UserGroupAccess( uga ) ) );\n-        }\n-    }\n-\n-    public void setUserGroupAccess( Set<UserGroupAccess> userGroupAccesses )\n-    {\n-        if ( this.userGroups != null ) this.userGroups.clear();\n-        else this.userGroups = new HashMap<>();\n-        userGroupAccesses.forEach( uga -> this.addUserGroupAccess( uga ) );\n-    }\n-\n-    public void addUserAccess( UserAccess userAccess )\n-    {\n-        if ( userAccess != null )\n-        {\n-            this.users.put( userAccess.getId(), userAccess );\n-        }\n-    }\n-\n-    public void addDtoUserAccess( org.hisp.dhis.user.UserAccess userAccess )\n-    {\n-        this.users.put( userAccess.getUid(), new UserAccess( userAccess ) );\n-    }\n-\n-    public void addDtoUserGroupAccess( org.hisp.dhis.user.UserGroupAccess userGroupAccess )\n-    {\n-        this.userGroups.put( userGroupAccess.getUid(), new UserGroupAccess( userGroupAccess ) );\n-    }\n-\n-    public void addUserGroupAccess( UserGroupAccess userGroupAccess )\n-    {\n-        if ( userGroupAccess == null )\n-        {\n-            userGroups = new HashMap<>();\n-        }\n-\n-        this.userGroups.put( userGroupAccess.getId(), userGroupAccess );\n-    }\n-\n-    public void resetUserAccesses()\n-    {\n-        if ( !MapUtils.isEmpty( this.users ) )\n-        {\n-            this.users.clear();\n-        }\n-    }\n-\n-    public void resetUserGroupAccesses()\n-    {\n-        if ( !MapUtils.isEmpty( this.userGroups ) )\n-        {\n-            this.userGroups.clear();\n-        }\n-    }\n-\n-    public Sharing copy()\n-    {\n-        return builder()\n-            .external( this.external )\n-            .publicAccess( this.publicAccess )\n-            .owner( this.owner )\n-            .users( new HashMap<>( users ) )\n-            .userGroups( new HashMap<>( userGroups ) ).build();\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDA3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546534073", "bodyText": "codestyle on both lines, {}", "author": "mortenoh", "createdAt": "2020-12-21T06:40:42Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.hisp.dhis.user.sharing;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.DxfNamespaces;\n+import org.hisp.dhis.common.EmbeddedObject;\n+import org.hisp.dhis.user.User;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+@Builder\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n+public class Sharing\n+    implements Serializable, EmbeddedObject\n+{\n+    private static final long serialVersionUID = 6977793211734844477L;\n+\n+    /**\n+     * Uid of the User who owns the object\n+     */\n+    @JsonProperty\n+    private String owner;\n+\n+    @JsonProperty(\"public\")\n+    private String publicAccess = null;\n+\n+    @JsonProperty\n+    private boolean external;\n+\n+    /**\n+     * Map of UserAccess. Key is User uid\n+     */\n+    @JsonProperty\n+    private Map<String, UserAccess> users = new HashMap<>();\n+\n+    /**\n+     * Map of UserGroupAccess. Key is UserGroup uid\n+     */\n+    @JsonProperty\n+    private Map<String, UserGroupAccess> userGroups = new HashMap<>();\n+\n+    public void setOwner( User user )\n+    {\n+        this.owner =  user != null ? user.getUid() : null;\n+    }\n+\n+    public void setOwner( String userId )\n+    {\n+        this.owner = userId;\n+    }\n+\n+    @JsonIgnore\n+    public User getUserOwner()\n+    {\n+        User user = new User();\n+        user.setUid( this.owner );\n+        return user;\n+    }\n+\n+    public void setUserAccesses( Set<UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();\n+        else this.users = new HashMap<>();\n+\n+        userAccesses.forEach( ua -> this.addUserAccess( ua ) );\n+    }\n+\n+    public void setDtoUserAccesses( Set<org.hisp.dhis.user.UserAccess> userAccesses )\n+    {\n+        if ( this.users != null ) this.users.clear();", "originalCommit": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\ndeleted file mode 100644\nindex ad4b92c1d0..0000000000\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/sharing/Sharing.java\n+++ /dev/null\n\n@@ -1,195 +0,0 @@\n-package org.hisp.dhis.user.sharing;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n-import lombok.AllArgsConstructor;\n-import lombok.Builder;\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n-import org.apache.commons.collections.MapUtils;\n-import org.hisp.dhis.common.DxfNamespaces;\n-import org.hisp.dhis.common.EmbeddedObject;\n-import org.hisp.dhis.user.User;\n-\n-import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n-\n-@Builder\n-@Data\n-@AllArgsConstructor\n-@NoArgsConstructor\n-@JacksonXmlRootElement( localName = \"sharing\", namespace = DxfNamespaces.DXF_2_0 )\n-public class Sharing\n-    implements Serializable, EmbeddedObject\n-{\n-    private static final long serialVersionUID = 6977793211734844477L;\n-\n-    /**\n-     * Uid of the User who owns the object\n-     */\n-    @JsonProperty\n-    private String owner;\n-\n-    @JsonProperty(\"public\")\n-    private String publicAccess = null;\n-\n-    @JsonProperty\n-    private boolean external;\n-\n-    /**\n-     * Map of UserAccess. Key is User uid\n-     */\n-    @JsonProperty\n-    private Map<String, UserAccess> users = new HashMap<>();\n-\n-    /**\n-     * Map of UserGroupAccess. Key is UserGroup uid\n-     */\n-    @JsonProperty\n-    private Map<String, UserGroupAccess> userGroups = new HashMap<>();\n-\n-    public void setOwner( User user )\n-    {\n-        this.owner =  user != null ? user.getUid() : null;\n-    }\n-\n-    public void setOwner( String userId )\n-    {\n-        this.owner = userId;\n-    }\n-\n-    @JsonIgnore\n-    public User getUserOwner()\n-    {\n-        User user = new User();\n-        user.setUid( this.owner );\n-        return user;\n-    }\n-\n-    public void setUserAccesses( Set<UserAccess> userAccesses )\n-    {\n-        if ( this.users != null ) this.users.clear();\n-        else this.users = new HashMap<>();\n-\n-        userAccesses.forEach( ua -> this.addUserAccess( ua ) );\n-    }\n-\n-    public void setDtoUserAccesses( Set<org.hisp.dhis.user.UserAccess> userAccesses )\n-    {\n-        if ( this.users != null ) this.users.clear();\n-        else this.users = new HashMap<>();\n-\n-        if ( userAccesses != null && !userAccesses.isEmpty() )\n-        {\n-            userAccesses.forEach( ua ->  this.addUserAccess( new UserAccess( ua ) ) );\n-        }\n-    }\n-\n-    public void setDtoUserGroupAccesses( Set<org.hisp.dhis.user.UserGroupAccess> userGroupAccesses )\n-    {\n-        if ( this.userGroups != null )\n-        {\n-            this.userGroups.clear();\n-        }\n-\n-        else this.userGroups = new HashMap<>();\n-\n-        if ( userGroupAccesses != null && !userGroupAccesses.isEmpty() )\n-        {\n-            userGroupAccesses.forEach( uga ->  this.addUserGroupAccess( new UserGroupAccess( uga ) ) );\n-        }\n-    }\n-\n-    public void setUserGroupAccess( Set<UserGroupAccess> userGroupAccesses )\n-    {\n-        if ( this.userGroups != null ) this.userGroups.clear();\n-        else this.userGroups = new HashMap<>();\n-        userGroupAccesses.forEach( uga -> this.addUserGroupAccess( uga ) );\n-    }\n-\n-    public void addUserAccess( UserAccess userAccess )\n-    {\n-        if ( userAccess != null )\n-        {\n-            this.users.put( userAccess.getId(), userAccess );\n-        }\n-    }\n-\n-    public void addDtoUserAccess( org.hisp.dhis.user.UserAccess userAccess )\n-    {\n-        this.users.put( userAccess.getUid(), new UserAccess( userAccess ) );\n-    }\n-\n-    public void addDtoUserGroupAccess( org.hisp.dhis.user.UserGroupAccess userGroupAccess )\n-    {\n-        this.userGroups.put( userGroupAccess.getUid(), new UserGroupAccess( userGroupAccess ) );\n-    }\n-\n-    public void addUserGroupAccess( UserGroupAccess userGroupAccess )\n-    {\n-        if ( userGroupAccess == null )\n-        {\n-            userGroups = new HashMap<>();\n-        }\n-\n-        this.userGroups.put( userGroupAccess.getId(), userGroupAccess );\n-    }\n-\n-    public void resetUserAccesses()\n-    {\n-        if ( !MapUtils.isEmpty( this.users ) )\n-        {\n-            this.users.clear();\n-        }\n-    }\n-\n-    public void resetUserGroupAccesses()\n-    {\n-        if ( !MapUtils.isEmpty( this.userGroups ) )\n-        {\n-            this.userGroups.clear();\n-        }\n-    }\n-\n-    public Sharing copy()\n-    {\n-        return builder()\n-            .external( this.external )\n-            .publicAccess( this.publicAccess )\n-            .owner( this.owner )\n-            .users( new HashMap<>( users ) )\n-            .userGroups( new HashMap<>( userGroups ) ).build();\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDMyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546534320", "bodyText": "author", "author": "mortenoh", "createdAt": "2020-12-21T06:41:39Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.hisp.dhis.util;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.user.UserGroupAccess;\n+import org.hisp.dhis.user.sharing.Sharing;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class SharingUtils", "originalCommit": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\ndeleted file mode 100644\nindex daa2ec9a54..0000000000\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package org.hisp.dhis.util;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import org.apache.commons.collections.MapUtils;\n-import org.hisp.dhis.common.IdentifiableObject;\n-import org.hisp.dhis.user.UserGroupAccess;\n-import org.hisp.dhis.user.sharing.Sharing;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-public class SharingUtils\n-{\n-    public static final Set<UserGroupAccess> getDtoUserGroupAccesses( Sharing sharing )\n-    {\n-        return !MapUtils.isEmpty( sharing.getUserGroups() ) ? sharing.getUserGroups().values()\n-            .stream().map( uag -> uag.toDtoObject() ).collect( Collectors.toSet() ) : new HashSet<>();\n-    }\n-\n-    public static final  Set<org.hisp.dhis.user.UserAccess> getDtoUserAccess( Sharing sharing )\n-    {\n-        return !MapUtils.isEmpty( sharing.getUsers() ) ? sharing.getUsers().values()\n-            .stream().map( ua -> ua.toDtoObject() ).collect( Collectors.toSet() ) : new HashSet<>();\n-    }\n-\n-    public static final Sharing generateSharingFromIdentifiableObject( IdentifiableObject object )\n-    {\n-        Sharing sharing = new Sharing();\n-        sharing.setOwner( object.getUser() );\n-        sharing.setExternal( object.getExternalAccess() );\n-        sharing.setPublicAccess( object.getPublicAccess() );\n-        sharing.setDtoUserGroupAccesses( object.getUserGroupAccesses() );\n-        sharing.setDtoUserAccesses( object.getUserAccesses() );\n-        return sharing;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDQzNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546534437", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-12-21T06:42:03Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.hisp.dhis.util;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.apache.commons.collections.MapUtils;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.user.UserGroupAccess;\n+import org.hisp.dhis.user.sharing.Sharing;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class SharingUtils\n+{\n+    public static final Set<UserGroupAccess> getDtoUserGroupAccesses( Sharing sharing )\n+    {\n+        return !MapUtils.isEmpty( sharing.getUserGroups() ) ? sharing.getUserGroups().values()\n+            .stream().map( uag -> uag.toDtoObject() ).collect( Collectors.toSet() ) : new HashSet<>();\n+    }\n+\n+    public static final  Set<org.hisp.dhis.user.UserAccess> getDtoUserAccess( Sharing sharing )\n+    {\n+        return !MapUtils.isEmpty( sharing.getUsers() ) ? sharing.getUsers().values()\n+            .stream().map( ua -> ua.toDtoObject() ).collect( Collectors.toSet() ) : new HashSet<>();\n+    }\n+\n+    public static final Sharing generateSharingFromIdentifiableObject( IdentifiableObject object )\n+    {\n+        Sharing sharing = new Sharing();\n+        sharing.setOwner( object.getUser() );\n+        sharing.setExternal( object.getExternalAccess() );\n+        sharing.setPublicAccess( object.getPublicAccess() );\n+        sharing.setDtoUserGroupAccesses( object.getUserGroupAccesses() );\n+        sharing.setDtoUserAccesses( object.getUserAccesses() );", "originalCommit": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68f5b0a2571fb96b8168928e6cd3245a6bfd3798", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\ndeleted file mode 100644\nindex daa2ec9a54..0000000000\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/util/SharingUtils.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package org.hisp.dhis.util;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import org.apache.commons.collections.MapUtils;\n-import org.hisp.dhis.common.IdentifiableObject;\n-import org.hisp.dhis.user.UserGroupAccess;\n-import org.hisp.dhis.user.sharing.Sharing;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-public class SharingUtils\n-{\n-    public static final Set<UserGroupAccess> getDtoUserGroupAccesses( Sharing sharing )\n-    {\n-        return !MapUtils.isEmpty( sharing.getUserGroups() ) ? sharing.getUserGroups().values()\n-            .stream().map( uag -> uag.toDtoObject() ).collect( Collectors.toSet() ) : new HashSet<>();\n-    }\n-\n-    public static final  Set<org.hisp.dhis.user.UserAccess> getDtoUserAccess( Sharing sharing )\n-    {\n-        return !MapUtils.isEmpty( sharing.getUsers() ) ? sharing.getUsers().values()\n-            .stream().map( ua -> ua.toDtoObject() ).collect( Collectors.toSet() ) : new HashSet<>();\n-    }\n-\n-    public static final Sharing generateSharingFromIdentifiableObject( IdentifiableObject object )\n-    {\n-        Sharing sharing = new Sharing();\n-        sharing.setOwner( object.getUser() );\n-        sharing.setExternal( object.getExternalAccess() );\n-        sharing.setPublicAccess( object.getPublicAccess() );\n-        sharing.setDtoUserGroupAccesses( object.getUserGroupAccesses() );\n-        sharing.setDtoUserAccesses( object.getUserAccesses() );\n-        return sharing;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNjU0OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r546536548", "bodyText": "why are we returning null here?", "author": "mortenoh", "createdAt": "2020-12-21T06:49:11Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "diffHunk": "@@ -995,182 +944,38 @@ public Date getLastUpdated()\n         return getList( builder, parameters );\n     }\n \n-    //----------------------------------------------------------------------------------------------------------------\n-    // Supportive methods\n-    //----------------------------------------------------------------------------------------------------------------\n-\n-    /**\n-     * Creates a criteria with sharing restrictions relative to the given\n-     * user and access string.\n-     */\n-    @Override\n-    public final Criteria getSharingCriteria()\n-    {\n-        return getExecutableCriteria( getSharingDetachedCriteria( currentUserService.getCurrentUserInfo(), AclService.LIKE_READ_METADATA ) );\n-    }\n-\n-    /**\n-     * Creates a detached criteria with data sharing restrictions relative to the\n-     * given user and access string.\n-     *\n-     * @param user the user.\n-     * @param access the access string.\n-     * @return a DetachedCriteria.\n-     */\n-    private DetachedCriteria getDataSharingDetachedCriteria( UserInfo user, String access )\n-    {\n-        DetachedCriteria criteria = DetachedCriteria.forClass( getClazz(), \"c\" );\n-\n-        if ( user == null || !dataSharingEnabled( user ) )\n-        {\n-            return criteria;\n-        }\n-\n-        Assert.notNull( user, \"User argument can't be null.\" );\n-\n-        Disjunction disjunction = Restrictions.disjunction();\n-\n-        disjunction.add( Restrictions.like( \"c.publicAccess\", access ) );\n-        disjunction.add( Restrictions.isNull( \"c.publicAccess\" ) );\n-\n-        DetachedCriteria userGroupDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"ugdc\" );\n-        userGroupDetachedCriteria.createCriteria( \"ugdc.userGroupAccesses\", \"uga\" );\n-        userGroupDetachedCriteria.createCriteria( \"uga.userGroup\", \"ug\" );\n-        userGroupDetachedCriteria.createCriteria( \"ug.members\", \"ugm\" );\n-\n-        userGroupDetachedCriteria.add( Restrictions.eqProperty( \"ugdc.id\", \"c.id\" ) );\n-        userGroupDetachedCriteria.add( Restrictions.eq( \"ugm.id\", user.getId() ) );\n-        userGroupDetachedCriteria.add( Restrictions.like( \"uga.access\", access ) );\n-\n-        userGroupDetachedCriteria.setProjection( Property.forName( \"uga.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userGroupDetachedCriteria ) );\n-\n-        DetachedCriteria userDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"udc\" );\n-        userDetachedCriteria.createCriteria( \"udc.userAccesses\", \"ua\" );\n-        userDetachedCriteria.createCriteria( \"ua.user\", \"u\" );\n-\n-        userDetachedCriteria.add( Restrictions.eqProperty( \"udc.id\", \"c.id\" ) );\n-        userDetachedCriteria.add( Restrictions.eq( \"u.id\", user.getId() ) );\n-        userDetachedCriteria.add( Restrictions.like( \"ua.access\", access ) );\n-\n-        userDetachedCriteria.setProjection( Property.forName( \"ua.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userDetachedCriteria ) );\n-\n-        criteria.add( disjunction );\n-\n-        return criteria;\n-    }\n-\n-    /**\n-     * Creates a detached criteria with sharing restrictions relative to the given\n-     * user and access string.\n-     *\n-     * @param user   the user.\n-     * @param access the access string.\n-     * @return a DetachedCriteria.\n-     */\n-    private DetachedCriteria getSharingDetachedCriteria( UserInfo user, String access )\n-    {\n-        DetachedCriteria criteria = DetachedCriteria.forClass( getClazz(), \"c\" );\n-\n-        preProcessDetachedCriteria( criteria );\n-\n-        if ( !sharingEnabled( user ) || user == null )\n-        {\n-            return criteria;\n-        }\n-\n-        Assert.notNull( user, \"User argument can't be null.\" );\n-\n-        Disjunction disjunction = Restrictions.disjunction();\n-\n-        disjunction.add( Restrictions.like( \"c.publicAccess\", access ) );\n-        disjunction.add( Restrictions.isNull( \"c.publicAccess\" ) );\n-        disjunction.add( Restrictions.isNull( \"c.user.id\" ) );\n-        disjunction.add( Restrictions.eq( \"c.user.id\", user.getId() ) );\n-\n-        DetachedCriteria userGroupDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"ugdc\" );\n-        userGroupDetachedCriteria.createCriteria( \"ugdc.userGroupAccesses\", \"uga\" );\n-        userGroupDetachedCriteria.createCriteria( \"uga.userGroup\", \"ug\" );\n-        userGroupDetachedCriteria.createCriteria( \"ug.members\", \"ugm\" );\n-\n-        userGroupDetachedCriteria.add( Restrictions.eqProperty( \"ugdc.id\", \"c.id\" ) );\n-        userGroupDetachedCriteria.add( Restrictions.eq( \"ugm.id\", user.getId() ) );\n-        userGroupDetachedCriteria.add( Restrictions.like( \"uga.access\", access ) );\n-\n-        userGroupDetachedCriteria.setProjection( Property.forName( \"uga.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userGroupDetachedCriteria ) );\n-\n-        DetachedCriteria userDetachedCriteria = DetachedCriteria.forClass( getClazz(), \"udc\" );\n-        userDetachedCriteria.createCriteria( \"udc.userAccesses\", \"ua\" );\n-        userDetachedCriteria.createCriteria( \"ua.user\", \"u\" );\n-\n-        userDetachedCriteria.add( Restrictions.eqProperty( \"udc.id\", \"c.id\" ) );\n-        userDetachedCriteria.add( Restrictions.eq( \"u.id\", user.getId() ) );\n-        userDetachedCriteria.add( Restrictions.like( \"ua.access\", access ) );\n-\n-        userDetachedCriteria.setProjection( Property.forName( \"ua.id\" ) );\n-\n-        disjunction.add( Subqueries.exists( userDetachedCriteria ) );\n-\n-        criteria.add( disjunction );\n-\n-        return criteria;\n-    }\n-\n     // ----------------------------------------------------------------------\n     // JPA support methods\n     // ----------------------------------------------------------------------\n \n     @Override\n     public final List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder )\n     {\n-        return getDataSharingPredicates( builder, currentUserService.getCurrentUserInfo(), AclService.LIKE_READ_DATA );\n+        return getDataSharingPredicates( builder, currentUserService.getCurrentUserInfo(), currentUserService.getCurrentUserGroupsInfo(), AclService.LIKE_READ_DATA );\n     }\n \n     @Override\n-    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, UserInfo user )\n+    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, User user )\n     {\n         return getDataSharingPredicates( builder, user, AclService.LIKE_READ_DATA );\n     }\n \n     @Override\n-    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, User user )\n+    public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, UserInfo userInfo )\n     {\n-        return getDataSharingPredicates( builder, UserInfo.fromUser( user ), AclService.LIKE_READ_DATA );\n+        return null;", "originalCommit": "24cd20ec504ce0a7f86d2acbd33df5a8bd53ddf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NTY2NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5862#discussion_r547185665", "bodyText": "forgot to add the code back after debug. fixed now", "author": "vietnguyen", "createdAt": "2020-12-22T10:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNjU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "7eaf94921146e7e06ba2db30cef89fe7267f65dd", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\nindex 0d8e24eea1..fc9598c8bf 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n\n@@ -963,7 +963,7 @@ public class HibernateIdentifiableObjectStore<T extends BaseIdentifiableObject>\n     @Override\n     public List<Function<Root<T>, Predicate>> getDataSharingPredicates( CriteriaBuilder builder, UserInfo userInfo )\n     {\n-        return null;\n+        return getDataSharingPredicates( builder, userInfo, currentUserService.getCurrentUserGroupsInfo( userInfo ), AclService.LIKE_READ_DATA  );\n     }\n \n     @Override\n"}}, {"oid": "0cad5bbf9f17ba79c266283a1da19f7d2d6b833b", "url": "https://github.com/dhis2/dhis2-core/commit/0cad5bbf9f17ba79c266283a1da19f7d2d6b833b", "message": "Minor", "committedDate": "2020-12-21T08:06:08Z", "type": "commit"}, {"oid": "3164467aed68616a509f49ca6b6e2a076318e1a5", "url": "https://github.com/dhis2/dhis2-core/commit/3164467aed68616a509f49ca6b6e2a076318e1a5", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core", "committedDate": "2020-12-22T07:17:10Z", "type": "commit"}, {"oid": "28581dc6028f85d7e32f659c6125abeb04c9a79f", "url": "https://github.com/dhis2/dhis2-core/commit/28581dc6028f85d7e32f659c6125abeb04c9a79f", "message": "Merge branch 'master' into DHIS2-5814", "committedDate": "2020-12-22T07:17:48Z", "type": "commit"}]}