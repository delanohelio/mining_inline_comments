{"pr_number": 6267, "pr_title": "fix: Reject duplicate events from current payload", "pr_createdAt": "2020-09-26T13:52:30Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/6267", "timeline": [{"oid": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4", "url": "https://github.com/dhis2/dhis2-core/commit/8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4", "message": "fix: Reject duplicate events from current payload", "committedDate": "2020-09-26T13:47:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MjcxMg==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495752712", "bodyText": "We already have a validation rule that checks this condition: ProgramCheck", "author": "luciano-fiandesio", "createdAt": "2020-09-28T07:54:42Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )", "originalCommit": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5NTYzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r496895631", "bodyText": "check for program is now left for ProgramCheck", "author": "abyot", "createdAt": "2020-09-29T16:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MjcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "b6d253c691aa66d6b5b812c77e1f9b318137f060", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\nindex 8350059d3f..44f5223b4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\n\n@@ -370,63 +370,36 @@ public class EventManager\n                 continue;\n             }\n \n-            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+            Program program = workContext.getProgramsMap().get( eventToImport.getProgram() );\n \n-            if ( isValid )\n-            {\n-                importableEvents.add( eventToImport );\n-            }\n-        }\n-        return importableEvents;\n-    }\n-\n-    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n-    {\n-        Program program = workContext.getProgramsMap().get( event.getProgram() );\n-\n-        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n-\n-        if ( program == null )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n-\n-            importSummaries.addImportSummary( is );\n-\n-            return false;\n-        }\n-\n-        if ( programStage == null )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n-\n-            importSummaries.addImportSummary( is );\n-\n-            return false;\n-        }\n+            ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, eventToImport.getProgramStage() );\n \n-        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n-        {\n-            return true;\n-        }\n-\n-        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+            if ( program != null && programStage != null && program.isRegistration() && !programStage.getRepeatable() )\n+            {\n+                String eventContextId = programStage.getUid() + \"-\" + eventToImport.getEnrollment();\n \n-        if ( importableStageEvents.contains( eventContextId ) )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR,\n-                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n+                if ( importableStageEvents.contains( eventContextId ) )\n+                {\n+                    final ImportSummary is = new ImportSummary( ERROR,\n+                        \"ProgramStage \" + eventToImport.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )\n+                            .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-            importSummaries.addImportSummary( is );\n+                    importSummaries.addImportSummary( is );\n+                }\n+                else\n+                {\n+                    importableEvents.add( eventToImport );\n \n-            return false;\n+                    importableStageEvents.add( eventContextId );\n+                }\n+            }\n+            else\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n         }\n \n-        importableStageEvents.add( eventContextId );\n-\n-        return true;\n+        return importableEvents;\n     }\n \n     private List<Event> retryEach( final WorkContext workContext, final List<Event> retryEvents,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MzQ2OA==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495753468", "bodyText": "We already have a validation rule that checks this condition: ProgramStageCheck", "author": "luciano-fiandesio", "createdAt": "2020-09-28T07:56:00Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )", "originalCommit": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NjAyNA==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495866024", "bodyText": "hmmm... so what this check already plugged in? or does program stage check precede program check? I added it because of a test failure", "author": "abyot", "createdAt": "2020-09-28T11:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1MzQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "b6d253c691aa66d6b5b812c77e1f9b318137f060", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\nindex 8350059d3f..44f5223b4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\n\n@@ -370,63 +370,36 @@ public class EventManager\n                 continue;\n             }\n \n-            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+            Program program = workContext.getProgramsMap().get( eventToImport.getProgram() );\n \n-            if ( isValid )\n-            {\n-                importableEvents.add( eventToImport );\n-            }\n-        }\n-        return importableEvents;\n-    }\n-\n-    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n-    {\n-        Program program = workContext.getProgramsMap().get( event.getProgram() );\n-\n-        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n-\n-        if ( program == null )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n-\n-            importSummaries.addImportSummary( is );\n-\n-            return false;\n-        }\n-\n-        if ( programStage == null )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n-\n-            importSummaries.addImportSummary( is );\n-\n-            return false;\n-        }\n+            ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, eventToImport.getProgramStage() );\n \n-        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n-        {\n-            return true;\n-        }\n-\n-        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+            if ( program != null && programStage != null && program.isRegistration() && !programStage.getRepeatable() )\n+            {\n+                String eventContextId = programStage.getUid() + \"-\" + eventToImport.getEnrollment();\n \n-        if ( importableStageEvents.contains( eventContextId ) )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR,\n-                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n+                if ( importableStageEvents.contains( eventContextId ) )\n+                {\n+                    final ImportSummary is = new ImportSummary( ERROR,\n+                        \"ProgramStage \" + eventToImport.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )\n+                            .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-            importSummaries.addImportSummary( is );\n+                    importSummaries.addImportSummary( is );\n+                }\n+                else\n+                {\n+                    importableEvents.add( eventToImport );\n \n-            return false;\n+                    importableStageEvents.add( eventContextId );\n+                }\n+            }\n+            else\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n         }\n \n-        importableStageEvents.add( eventContextId );\n-\n-        return true;\n+        return importableEvents;\n     }\n \n     private List<Event> retryEach( final WorkContext workContext, final List<Event> retryEvents,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDI3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495754273", "bodyText": "The refactoring of the Event import flow is designed around the concept of pipelines (preprocess, validation, postprocess). Any validation logic should be moved into a validation class (for instance in this case, a rule class named NonRepeatableProgramCheck)", "author": "luciano-fiandesio", "createdAt": "2020-09-28T07:57:27Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )", "originalCommit": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NTQ0NA==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495865444", "bodyText": "Ok, this is a good point. Will create this new class. But EventManager is checking existing or not events ?", "author": "abyot", "createdAt": "2020-09-28T11:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMzIzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r496103231", "bodyText": "EventManager does not execute any validation, it delegates to the validation framework.", "author": "luciano-fiandesio", "createdAt": "2020-09-28T17:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b6d253c691aa66d6b5b812c77e1f9b318137f060", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\nindex 8350059d3f..44f5223b4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\n\n@@ -370,63 +370,36 @@ public class EventManager\n                 continue;\n             }\n \n-            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+            Program program = workContext.getProgramsMap().get( eventToImport.getProgram() );\n \n-            if ( isValid )\n-            {\n-                importableEvents.add( eventToImport );\n-            }\n-        }\n-        return importableEvents;\n-    }\n-\n-    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n-    {\n-        Program program = workContext.getProgramsMap().get( event.getProgram() );\n-\n-        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n-\n-        if ( program == null )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n-\n-            importSummaries.addImportSummary( is );\n-\n-            return false;\n-        }\n-\n-        if ( programStage == null )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n-\n-            importSummaries.addImportSummary( is );\n-\n-            return false;\n-        }\n+            ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, eventToImport.getProgramStage() );\n \n-        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n-        {\n-            return true;\n-        }\n-\n-        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+            if ( program != null && programStage != null && program.isRegistration() && !programStage.getRepeatable() )\n+            {\n+                String eventContextId = programStage.getUid() + \"-\" + eventToImport.getEnrollment();\n \n-        if ( importableStageEvents.contains( eventContextId ) )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR,\n-                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n+                if ( importableStageEvents.contains( eventContextId ) )\n+                {\n+                    final ImportSummary is = new ImportSummary( ERROR,\n+                        \"ProgramStage \" + eventToImport.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )\n+                            .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-            importSummaries.addImportSummary( is );\n+                    importSummaries.addImportSummary( is );\n+                }\n+                else\n+                {\n+                    importableEvents.add( eventToImport );\n \n-            return false;\n+                    importableStageEvents.add( eventContextId );\n+                }\n+            }\n+            else\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n         }\n \n-        importableStageEvents.add( eventContextId );\n-\n-        return true;\n+        return importableEvents;\n     }\n \n     private List<Event> retryEach( final WorkContext workContext, final List<Event> retryEvents,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDk4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495754988", "bodyText": "We already have a validation rule that checks this condition: ProgramInstanceRepeatableStageCheck. We don't check for \"duplicated events\" but it should be possible to add it easily?", "author": "luciano-fiandesio", "createdAt": "2020-09-28T07:58:48Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java", "diffHunk": "@@ -344,30 +354,81 @@ private void handleFailure( final WorkContext workContext, final ImportSummaries\n         final WorkContext workContext )\n     {\n         List<Event> importableEvents = new ArrayList<>();\n-        if ( CollectionUtils.isNotEmpty( events ) )\n-        {\n-            final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n+        Set<String> importableStageEvents = new HashSet<>();\n+        final Set<String> existingProgramStageInstances = workContext.getProgramStageInstanceMap().keySet();\n \n-            for ( Event eventToImport : events )\n+        for ( Event eventToImport : events )\n+        {\n+            if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n             {\n-                if ( existingProgramStageInstances.contains( eventToImport.getUid() ) )\n-                {\n-                    final ImportSummary is = new ImportSummary( ERROR,\n-                        \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n-                            .setReference( eventToImport.getUid() ).incrementIgnored();\n+                final ImportSummary is = new ImportSummary( ERROR,\n+                    \"Event \" + eventToImport.getUid() + \" already exists or was deleted earlier\" )\n+                        .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-                    importSummaries.addImportSummary( is );\n-                }\n-                else\n-                {\n-                    importableEvents.add( eventToImport );\n-                }\n+                importSummaries.addImportSummary( is );\n+\n+                continue;\n             }\n-        }\n \n+            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+\n+            if ( isValid )\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n+        }\n         return importableEvents;\n     }\n \n+    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n+    {\n+        Program program = workContext.getProgramsMap().get( event.getProgram() );\n+\n+        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n+\n+        if ( program == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage == null )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n+                    .setReference( event.getUid() ).incrementIgnored();\n+\n+            importSummaries.addImportSummary( is );\n+\n+            return false;\n+        }\n+\n+        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n+        {\n+            return true;\n+        }\n+\n+        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+\n+        if ( importableStageEvents.contains( eventContextId ) )\n+        {\n+            final ImportSummary is = new ImportSummary( ERROR,\n+                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )", "originalCommit": "8bdbf52bbeb5594ee09deb5d231cd1317bc7ebd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzY3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495867678", "bodyText": "We can do it here probably much better than ProgramStageCheck\nDoes WorkContext contain the entire event list from the payload?", "author": "abyot", "createdAt": "2020-09-28T11:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMDU2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/6267#discussion_r495900566", "bodyText": "No, each validation check checks only one event at the time. The events are not stored in the WorkContext", "author": "luciano-fiandesio", "createdAt": "2020-09-28T12:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b6d253c691aa66d6b5b812c77e1f9b318137f060", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\nindex 8350059d3f..44f5223b4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventManager.java\n\n@@ -370,63 +370,36 @@ public class EventManager\n                 continue;\n             }\n \n-            boolean isValid = isValidEvent( workContext, eventToImport, importableStageEvents, importSummaries );\n+            Program program = workContext.getProgramsMap().get( eventToImport.getProgram() );\n \n-            if ( isValid )\n-            {\n-                importableEvents.add( eventToImport );\n-            }\n-        }\n-        return importableEvents;\n-    }\n-\n-    private boolean isValidEvent(final WorkContext workContext, Event event, Set<String> importableStageEvents, final ImportSummaries importSummaries )\n-    {\n-        Program program = workContext.getProgramsMap().get( event.getProgram() );\n-\n-        ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, event.getProgramStage() );\n-\n-        if ( program == null )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR, \"Program \" + event.getProgram() + \" does not point to a valid program\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n-\n-            importSummaries.addImportSummary( is );\n-\n-            return false;\n-        }\n-\n-        if ( programStage == null )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR, \"ProgramStage \" + event.getProgramStage() + \" does not point to a valid programStage\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n-\n-            importSummaries.addImportSummary( is );\n-\n-            return false;\n-        }\n+            ProgramStage programStage = workContext.getProgramStage( IdScheme.UID, eventToImport.getProgramStage() );\n \n-        if ( programStage.getRepeatable() || program.isWithoutRegistration() )\n-        {\n-            return true;\n-        }\n-\n-        String eventContextId = programStage.getUid() + \"-\" + event.getEnrollment();\n+            if ( program != null && programStage != null && program.isRegistration() && !programStage.getRepeatable() )\n+            {\n+                String eventContextId = programStage.getUid() + \"-\" + eventToImport.getEnrollment();\n \n-        if ( importableStageEvents.contains( eventContextId ) )\n-        {\n-            final ImportSummary is = new ImportSummary( ERROR,\n-                \"ProgramStage \" + event.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )\n-                    .setReference( event.getUid() ).incrementIgnored();\n+                if ( importableStageEvents.contains( eventContextId ) )\n+                {\n+                    final ImportSummary is = new ImportSummary( ERROR,\n+                        \"ProgramStage \" + eventToImport.getProgramStage() + \" is not repeatable. Current payload contains duplicate event\" )\n+                            .setReference( eventToImport.getUid() ).incrementIgnored();\n \n-            importSummaries.addImportSummary( is );\n+                    importSummaries.addImportSummary( is );\n+                }\n+                else\n+                {\n+                    importableEvents.add( eventToImport );\n \n-            return false;\n+                    importableStageEvents.add( eventContextId );\n+                }\n+            }\n+            else\n+            {\n+                importableEvents.add( eventToImport );\n+            }\n         }\n \n-        importableStageEvents.add( eventContextId );\n-\n-        return true;\n+        return importableEvents;\n     }\n \n     private List<Event> retryEach( final WorkContext workContext, final List<Event> retryEvents,\n"}}, {"oid": "b6d253c691aa66d6b5b812c77e1f9b318137f060", "url": "https://github.com/dhis2/dhis2-core/commit/b6d253c691aa66d6b5b812c77e1f9b318137f060", "message": "chore: Move validation tasks to the hooks", "committedDate": "2020-09-29T16:51:13Z", "type": "commit"}]}