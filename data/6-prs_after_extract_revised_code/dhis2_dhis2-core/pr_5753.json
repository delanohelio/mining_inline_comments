{"pr_number": 5753, "pr_title": "refactor: Refactor of events tracker importer ", "pr_createdAt": "2020-06-16T09:33:22Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5753", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMTA4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448201081", "bodyText": "Should this be fixed before merge?", "author": "netroms", "createdAt": "2020-07-01T08:25:43Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/TrackedEntityInstanceServiceTest.java", "diffHunk": "@@ -357,6 +375,11 @@ public void testSyncTeiFutureDatesForEnrollmentAndIncident()\n \n     }\n \n+    /**\n+     * FIXME luciano: this is ignored because there is a bug in tracker, so that new events that fail", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNjQyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448216426", "bodyText": "Not anything wrong, but maybe we could optimize this to be done in a more generalized map/streaming fashion in the future.", "author": "netroms", "createdAt": "2020-07-01T08:52:04Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.Set;\n+\n+import org.hisp.dhis.attribute.AttributeValue;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.ProgramInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramOrgUnitCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+\n+        if ( programInstance != null )\n+        {\n+            final IdScheme orgUnitIdScheme = ctx.getImportOptions().getIdSchemes().getOrgUnitIdScheme();\n+\n+            OrganisationUnit orgUnit = null;\n+\n+            final Set<OrganisationUnit> organisationUnits = programInstance.getProgram().getOrganisationUnits();\n+\n+            for ( OrganisationUnit ou : organisationUnits )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a61dc512c370d29aba9f030a57d4552899241579", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\nindex ac4986c67b..681fc4fb54 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java\n\n@@ -31,7 +31,10 @@ package org.hisp.dhis.dxf2.events.importer.insert.validation;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n \n+import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.function.BiFunction;\n \n import org.hisp.dhis.attribute.AttributeValue;\n import org.hisp.dhis.common.IdScheme;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448217300", "bodyText": "What does this + \"1?\" do?", "author": "netroms", "createdAt": "2020-07-01T08:53:40Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/users/UserTest.java", "diffHunk": "@@ -72,8 +72,8 @@ public void beforeEach() {\n     private Stream<Arguments> provideParams() {\n         return Stream.of( new Arguments[] {\n             Arguments.of( password, password, \"Password must not be one of the previous 24 passwords\", \"newPassword is the same as old\" ),\n-            Arguments.of( password, \"test\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n-            Arguments.of( password, DataGenerator.randomString(41), \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),\n+            Arguments.of( password, \"Test1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too short\" ),\n+            Arguments.of( password, DataGenerator.randomString(41) + \"1?\", \"Password must have at least 8, and at most 40 characters\", \"newPassword is too-long\" ),", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMTQyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448411428", "bodyText": "Not sure, need to ask @vilkg", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NDQwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448554406", "bodyText": "Password must have a digit and special character, so this is to ensure that all other rules are satisfied, other than the one under test.", "author": "vilkg", "createdAt": "2020-07-01T18:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NTgyMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448555822", "bodyText": "That was for why, but i see now that you asked what it does @netroms..It appends \"1?\" to a string of length 41 \ud83d\udc4c", "author": "vilkg", "createdAt": "2020-07-01T18:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5NTE4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448795184", "bodyText": "Thanks @vilkg", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzMwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTEyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448219121", "bodyText": "This Program instance looks unused.", "author": "netroms", "createdAt": "2020-07-01T08:56:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n+        // Get the program stage id from the event.\n+        // If the event has no program stage set, use a dummy value which will not\n+        // return any Program Stage\n+        // from the WorkContext\n+        final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n+\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMTY3OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448411679", "bodyText": "Fixed, removed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\nindex 6d2600bd32..939acb3b81 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java\n\n@@ -55,7 +55,6 @@ public class ProgramStageCheck implements Checker\n         // from the WorkContext\n         final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n \n-        Program program = ctx.getProgramsMap().get( event.getProgram() );\n         ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, programStageId );\n \n         if ( programStage == null )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTYwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448219607", "bodyText": "Missing newline end of file", "author": "netroms", "createdAt": "2020-07-01T08:57:31Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramInstance>\n+{\n+    private ProgramInstanceSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        this.subject = new ProgramInstanceSupplier( jdbcTemplate, programSupplier );\n+    }\n+\n+    @Test\n+    public void handleNullEvents()\n+    {\n+        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), new HashMap<>(), null ) );\n+    }\n+\n+    @Override\n+    public void verifySupplier()\n+        throws SQLException\n+    {\n+        // mock resultset data\n+        when( mockResultSet.getLong( \"programinstanceid\" ) ).thenReturn( 100L );\n+        when( mockResultSet.getString( \"uid\" ) ).thenReturn( \"abcded\" );\n+        when( mockResultSet.getString( \"tei_uid\" ) ).thenReturn( \"efghil\" );\n+        when( mockResultSet.getString( \"tei_ou_uid\" ) ).thenReturn( \"ouabcde\" );\n+        when( mockResultSet.getString( \"tei_ou_path\" ) ).thenReturn( \"/ouabcde\" );\n+        when( mockResultSet.getLong( \"programid\" ) ).thenReturn( 999L );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setEnrollment( \"abcded\" );\n+\n+        // mock resultset extraction\n+        mockResultSetExtractor( mockResultSet );\n+\n+        // create a Program for the ProgramSupplier\n+        Program program = new Program();\n+        program.setId( 999L );\n+        program.setUid( \"prabcde\" );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( \"prabcde\", program );\n+\n+        final ImportOptions defaultImportOptions = ImportOptions.getDefaultImportOptions();\n+\n+        when( programSupplier.get( defaultImportOptions, Collections.singletonList( event ) ) )\n+            .thenReturn( programMap );\n+\n+        Map<String, ProgramInstance> map = subject.get( defaultImportOptions, new HashMap<>(), Collections.singletonList( event ) );\n+\n+        ProgramInstance programInstance = map.get( event.getUid() );\n+        assertThat( programInstance, is( notNullValue() ) );\n+        assertThat( programInstance.getId(), is( 100L ) );\n+        assertThat( programInstance.getUid(), is( \"abcded\" ) );\n+        assertThat( programInstance.getEntityInstance(), is( notNullValue() ) );\n+        assertThat( programInstance.getEntityInstance().getUid(), is( \"efghil\" ) );\n+        assertThat( programInstance.getEntityInstance().getOrganisationUnit(), is( notNullValue() ) );\n+        assertThat( programInstance.getEntityInstance().getOrganisationUnit().getUid(), is( \"ouabcde\" ) );\n+        assertThat( programInstance.getProgram(), is( notNullValue() ) );\n+        assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n+    }\n+\n+}", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMjA2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448412062", "bodyText": "Didn't know we needed one, fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\nindex c43ac03fa9..bb62e062d4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java\n\n@@ -115,5 +115,4 @@ public class ProgramInstanceSupplierTest extends AbstractSupplierTest<ProgramIns\n         assertThat( programInstance.getProgram(), is( notNullValue() ) );\n         assertThat( programInstance.getProgram().getUid(), is( \"prabcde\" ) );\n     }\n-\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMTc5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448221799", "bodyText": "Why is it only checking canDelete here? The name of this class looks looks very general, so does the method name. Maybe explain in doc/comment why only delete is checked.", "author": "netroms", "createdAt": "2020-07-01T09:01:18Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n+import static java.util.Collections.emptyList;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.validation.BaseEventAclCheck;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+public class ProgramStageInstanceAclCheck extends BaseEventAclCheck\n+{\n+    @Override\n+    public List<String> checkAcl( TrackerAccessManager trackerAccessManager, User user,\n+        ProgramStageInstance programStageInstance )\n+    {\n+        if ( programStageInstance != null )\n+        {\n+            return trackerAccessManager.canDelete( user, programStageInstance, true );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MDI0NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448440245", "bodyText": "We have ProgramStageInstanceAclCheck for delete/update/insert, it is specified in the package.", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMTc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java\nindex 2ba7a80554..a1128d35ff 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/ProgramStageInstanceAclCheck.java\n\n@@ -37,6 +37,9 @@ import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.User;\n \n+/**\n+ * @author maikel arabori\n+ */\n public class ProgramStageInstanceAclCheck extends BaseEventAclCheck\n {\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMzI0OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448223249", "bodyText": "Looks like this comment means org unit -> user ?", "author": "netroms", "createdAt": "2020-07-01T09:03:53Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.user.User;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"workContextAssignedUsersSupplier\" )\n+public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n+{\n+    public AssignedUserSupplier( NamedParameterJdbcTemplate namedParameterJdbcTemplate )\n+    {\n+        super( namedParameterJdbcTemplate );\n+    }\n+\n+    @Override\n+    public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n+    {\n+        // @formatter:off\n+        // Collect all the org unit uids to pass as SQL query argument", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MDgxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448440811", "bodyText": "Yes, good catch, fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\nindex 83fc675593..0074733137 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AssignedUserSupplier.java\n\n@@ -60,7 +60,7 @@ public class AssignedUserSupplier extends AbstractSupplier<Map<String, User>>\n     public Map<String, User> get( ImportOptions importOptions, List<Event> events )\n     {\n         // @formatter:off\n-        // Collect all the org unit uids to pass as SQL query argument\n+        // Collect all the \"assigned user\" uids to pass as SQL query argument\n         Set<String> userUids = events.stream()\n                 .filter( e -> StringUtils.isNotEmpty(e.getAssignedUser()))\n                 .map( Event::getAssignedUser )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDI3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448224273", "bodyText": "Since it looks like this class is only setting the CREATE strategy maybe it should be reflected in the class name?", "author": "netroms", "createdAt": "2020-07-01T09:05:42Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.EventProcessing;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"eventsPreInsertProcessorFactory\" )\n+public class PreInsertProcessorFactory implements EventProcessing", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTM3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448441370", "bodyText": "Yes, the class is named PreInsertProcessFactory and it's in the insert package.", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nindex 72963db43b..0826b63ee4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDcwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448224709", "bodyText": "Missing newline", "author": "netroms", "createdAt": "2020-07-01T09:06:30Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/CategoryOptionComboSupplierTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.singletonList;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.*;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.program.Program;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class CategoryOptionComboSupplierTest extends AbstractSupplierTest<CategoryOptionCombo>\n+{\n+    private CategoryOptionComboSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Mock\n+    private AttributeOptionComboLoader attributeOptionComboLoader;\n+\n+    private Map<String, Program> programMap;\n+\n+    private Event event;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        this.subject = new CategoryOptionComboSupplier( jdbcTemplate, programSupplier, attributeOptionComboLoader );\n+        programMap = new HashMap<>();\n+\n+        // create a Program for the ProgramSupplier\n+        program = new Program();\n+        program.setId( 999L );\n+        program.setUid( \"prabcde\" );\n+        programMap.put( \"prabcde\", program );\n+\n+        // create event to import\n+        event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setAttributeOptionCombo( \"aoc1234\" );\n+        event.setProgram( program.getUid() );\n+    }\n+\n+    @Test\n+    public void handleNullEvents()\n+    {\n+        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), null ) );\n+    }\n+\n+    public void verifySupplier()\n+    {\n+        /*\n+         * Case 1: Event has 'attributeOptionCombo' value set\n+         */\n+        case1( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 2: Event has 'attributeOptionCombo' value set, but it's not found ->\n+         * fetch default coc\n+         */\n+        case2( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 3: Event has 'attributeCategoryOptions' value set\n+         */\n+        case3( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 4: Event has no 'attributeCategoryOptions' or 'attributeOptionCombo'\n+         * values set -> fetch default coc\n+         */\n+        case4( ImportOptions.getDefaultImportOptions() );\n+\n+        /*\n+         * Case 5: Event has both 'attributeCategoryOptions' and 'attributeOptionCombo'\n+         * values set attributeOptionCombo is used to fetch the coc\n+         */\n+        case5( ImportOptions.getDefaultImportOptions() );\n+    }\n+\n+    private void case1( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( event.getAttributeOptionCombo() );\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+\n+    }\n+\n+    private void case2( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( \"def123\" );\n+        coc.setName( \"default \" );\n+\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( null );\n+\n+        when( attributeOptionComboLoader.getDefault() ).thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getName(), is( coc.getName() ) );\n+\n+    }\n+\n+    private void case3( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        CategoryCombo catCombo = new CategoryCombo();\n+        catCombo.setUid( CodeGenerator.generateUid() );\n+        program.setCategoryCombo( catCombo );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setAttributeCategoryOptions( \"abcded;fghilm\" );\n+        event.setProgram( program.getUid() );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+        when( attributeOptionComboLoader.getAttributeOptionCombo( catCombo, event.getAttributeCategoryOptions(),\n+            event.getAttributeOptionCombo(), importOptions.getIdSchemes().getCategoryOptionComboIdScheme() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+\n+    private void case4( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        // create event to import\n+        Event event = new Event();\n+        event.setUid( CodeGenerator.generateUid() );\n+        event.setProgram( program.getUid() );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+        coc.setName( \"default \" );\n+\n+        when( attributeOptionComboLoader.getDefault() ).thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+\n+    private void case5( ImportOptions importOptions )\n+    {\n+        when( programSupplier.get( eq( importOptions ), anyList() ) ).thenReturn( programMap );\n+\n+        event.setAttributeCategoryOptions( \"abcde;fghilm\" );\n+\n+        CategoryOptionCombo coc = new CategoryOptionCombo();\n+        coc.setUid( CodeGenerator.generateUid() );\n+\n+        when( attributeOptionComboLoader.getCategoryOptionCombo(\n+            importOptions.getIdSchemes().getCategoryOptionComboIdScheme(), event.getAttributeOptionCombo() ) )\n+                .thenReturn( coc );\n+\n+        Map<String, CategoryOptionCombo> map = subject.get( importOptions, singletonList( event ) );\n+\n+        CategoryOptionCombo categoryOptionCombo = map.get( event.getUid() );\n+        assertThat( categoryOptionCombo, is( notNullValue() ) );\n+        assertThat( categoryOptionCombo.getUid(), is( coc.getUid() ) );\n+    }\n+}", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNjEwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448226100", "bodyText": "Missing newline", "author": "netroms", "createdAt": "2020-07-01T09:08:55Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.io.IOException;\n+\n+import org.hisp.dhis.dxf2.events.event.Coordinate;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.system.util.GeoUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class EventGeometryPreProcessorTest\n+{\n+    private EventGeometryPreProcessor subject;\n+\n+    @Before\n+    public void setUp()\n+    {\n+\n+        this.subject = new EventGeometryPreProcessor();\n+    }\n+\n+    @Test\n+    public void verifyEventGeometryGetCorrectSRID()\n+        throws IOException\n+    {\n+        Event event = new Event();\n+        event.setGeometry( GeoUtils.getGeoJsonPoint( 20.0, 30.0 ) );\n+        event.getGeometry().setSRID( 0 );\n+        subject.process( event, WorkContext.builder().build() );\n+\n+        assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n+    }\n+\n+    @Test\n+    public void verifyEventWithCoordinateHasGeometrySet()\n+    {\n+        Event event = new Event();\n+        event.setCoordinate( new Coordinate( 20.0, 22.0 ) );\n+        subject.process( event, WorkContext.builder().build() );\n+\n+        assertThat( event.getGeometry().getSRID(), is( GeoUtils.SRID ) );\n+        assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n+        assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n+    }\n+\n+}", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\nindex e443604e1d..6c2ac66656 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/EventGeometryPreProcessorTest.java\n\n@@ -77,5 +77,4 @@ public class EventGeometryPreProcessorTest\n         assertThat( event.getGeometry().getCoordinate().x, is( 20.0 ) );\n         assertThat( event.getGeometry().getCoordinate().y, is( 22.0 ) );\n     }\n-\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448228391", "bodyText": "Looks like there is missing content here", "author": "netroms", "createdAt": "2020-07-01T09:12:53Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -863,7 +462,8 @@ public Event getEvent( ProgramStageInstance programStageInstance )\n \n     @Transactional( readOnly = true )\n     @Override\n-    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery, boolean skipOwnershipCheck )\n+    public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n+        boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MjM2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448442366", "bodyText": "Not sure I understand this comment? Why didn't change this function", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyNTY2OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448825669", "bodyText": "Ok, no need to fix", "author": "luciano-fiandesio", "createdAt": "2020-07-02T08:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 7715f7b153..46b2b5a0f4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n\n@@ -463,7 +464,7 @@ public abstract class AbstractEventService implements EventService\n     @Transactional( readOnly = true )\n     @Override\n     public Event getEvent( ProgramStageInstance programStageInstance, boolean isSynchronizationQuery,\n-        boolean skipOwnershipCheck )\n+                           boolean skipOwnershipCheck )\n     {\n         if ( programStageInstance == null )\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODc0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448228746", "bodyText": "Commented out code?", "author": "netroms", "createdAt": "2020-07-01T09:13:32Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -999,484 +598,71 @@ public Event getEvent( ProgramStageInstance programStageInstance, boolean isSync\n \n         event.setRelationships( programStageInstance.getRelationshipItems().stream()\n             .map( ( r ) -> relationshipService.getRelationship( r.getRelationship(), RelationshipParams.FALSE, user ) )\n-            .collect( Collectors.toSet() )\n-        );\n+            .collect( Collectors.toSet() ) );\n \n         return event;\n     }\n \n-    @Transactional( readOnly = true )\n+    // -------------------------------------------------------------------------\n+    // UPDATE\n+    // -------------------------------------------------------------------------\n+\n+    @Transactional\n     @Override\n-    public EventSearchParams getFromUrl( String program, String programStage, ProgramStatus programStatus,\n-        Boolean followUp, String orgUnit, OrganisationUnitSelectionMode orgUnitSelectionMode,\n-        String trackedEntityInstance, Date startDate, Date endDate, Date dueDateStart, Date dueDateEnd,\n-        Date lastUpdatedStartDate, Date lastUpdatedEndDate, String lastUpdatedDuration, EventStatus status,\n-        CategoryOptionCombo attributeOptionCombo, IdSchemes idSchemes, Integer page, Integer pageSize,\n-        boolean totalPages, boolean skipPaging, List<Order> orders, List<String> gridOrders, boolean includeAttributes,\n-        Set<String> events, Boolean skipEventId, AssignedUserSelectionMode assignedUserSelectionMode, Set<String> assignedUsers,\n-        Set<String> filters, Set<String> dataElements, boolean includeAllDataElements, boolean includeDeleted )\n+    public ImportSummaries updateEvents( List<Event> events, ImportOptions importOptions, boolean singleValue,\n+        boolean clearSession )\n     {\n-        User user = currentUserService.getCurrentUser();\n-        UserCredentials userCredentials = user.getUserCredentials();\n-\n-        EventSearchParams params = new EventSearchParams();\n-\n-        Program pr = programService.getProgram( program );\n-\n-        if ( !StringUtils.isEmpty( program ) && pr == null )\n-        {\n-            throw new IllegalQueryException( \"Program is specified but does not exist: \" + program );\n-        }\n-\n-        ProgramStage ps = programStageService.getProgramStage( programStage );\n+        ImportSummaries importSummaries = new ImportSummaries();\n+        importOptions = updateImportOptions( importOptions );\n+        List<List<Event>> partitions = Lists.partition( events, FLUSH_FREQUENCY );\n \n-        if ( !StringUtils.isEmpty( programStage ) && ps == null )\n+        for ( List<Event> _events : partitions )\n         {\n-            throw new IllegalQueryException( \"Program stage is specified but does not exist: \" + programStage );\n-        }\n-\n-        OrganisationUnit ou = organisationUnitService.getOrganisationUnit( orgUnit );\n+            reloadUser( importOptions );\n+            // prepareCaches( importOptions.getUser(), _events );\n \n-        if ( !StringUtils.isEmpty( orgUnit ) && ou == null )\n-        {\n-            throw new IllegalQueryException( \"Org unit is specified but does not exist: \" + orgUnit );\n-        }\n+            for ( Event event : _events )\n+            {\n+                importSummaries.addImportSummary( updateEvent( event, singleValue, importOptions, true ) );\n+            }\n \n-        if ( ou != null && !organisationUnitService.isInUserHierarchy( ou ) )\n-        {\n-            if ( !userCredentials.isSuper()\n-                && !userCredentials.isAuthorized( \"F_TRACKED_ENTITY_INSTANCE_SEARCH_IN_ALL_ORGUNITS\" ) )\n+            if ( clearSession && events.size() >= FLUSH_FREQUENCY )\n             {\n-                throw new IllegalQueryException( \"User has no access to organisation unit: \" + ou.getUid() );\n+                // clearSession( importOptions.getUser() );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0Mzg5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448443897", "bodyText": "@maikelarabori can you look at this function - we can discuss it together, I don't remember why this was commented out", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyODc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 7715f7b153..46b2b5a0f4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n\n@@ -597,8 +598,8 @@ public abstract class AbstractEventService implements EventService\n         }\n \n         event.setRelationships( programStageInstance.getRelationshipItems().stream()\n-            .map( ( r ) -> relationshipService.getRelationship( r.getRelationship(), RelationshipParams.FALSE, user ) )\n-            .collect( Collectors.toSet() ) );\n+                .map( ( r ) -> relationshipService.getRelationship( r.getRelationship(), RelationshipParams.FALSE, user ) )\n+                .collect( Collectors.toSet() ) );\n \n         return event;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyOTA4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448229082", "bodyText": "Commented out?", "author": "netroms", "createdAt": "2020-07-01T09:14:11Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java", "diffHunk": "@@ -1556,607 +743,141 @@ public ImportSummary deleteEvent( String uid )\n         {\n             ProgramStageInstance programStageInstance = programStageInstanceService.getProgramStageInstance( uid );\n \n-            List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(), programStageInstance, false );\n+            List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(),\n+                programStageInstance, false );\n \n             if ( !errors.isEmpty() )\n             {\n                 return new ImportSummary( ImportStatus.ERROR, errors.toString() ).incrementIgnored();\n             }\n \n-            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n-\n-            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n-            {\n-                entityInstanceService.updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n-            }\n-\n-            ImportSummary importSummary = new ImportSummary( ImportStatus.SUCCESS, \"Deletion of event \" + uid + \" was successful\" ).incrementDeleted();\n-            importSummary.setReference( uid );\n-            return importSummary;\n-        }\n-        else\n-        {\n-            return new ImportSummary( ImportStatus.SUCCESS, \"Event \" + uid + \" cannot be deleted as it is not present in the system\" ).incrementIgnored();\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n-    {\n-        User user = currentUserService.getCurrentUser();\n-        ImportSummaries importSummaries = new ImportSummaries();\n-        int counter = 0;\n-\n-        for ( String uid : uids )\n-        {\n-            importSummaries.addImportSummary( deleteEvent( uid ) );\n-\n-            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n-            {\n-                clearSession( user );\n-            }\n-\n-            counter++;\n-        }\n-\n-        return importSummaries;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // HELPERS\n-    // -------------------------------------------------------------------------\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    private void prepareCaches( User user, List<Event> events )\n-    {\n-        // prepare caches\n-        Collection<String> orgUnits = events.stream().map( Event::getOrgUnit ).collect( Collectors.toSet() );\n-        Collection<String> programIds = events.stream().map( Event::getProgram ).collect( Collectors.toSet() );\n-        Collection<String> eventIds = events.stream().map( Event::getEvent ).collect( Collectors.toList() );\n-        Collection<String> userIds = events.stream().map( Event::getAssignedUser ).collect( Collectors.toSet() );\n-\n-        if ( !orgUnits.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( OrganisationUnit.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", orgUnits ) );\n-            queryService.query( query ).forEach( ou -> organisationUnitCache.put( ou.getUid(), (OrganisationUnit) ou ) );\n-        }\n-\n-        if ( !programIds.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( Program.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", programIds ) );\n-\n-            List<Program> programs = (List<Program>) queryService.query( query );\n-\n-            if ( !programs.isEmpty() )\n-            {\n-                for ( Program program : programs )\n-                {\n-                    programCache.put( program.getUid(), program );\n-                    programStageCache.putAll( program.getProgramStages().stream().collect( Collectors.toMap( ProgramStage::getUid, ps -> ps ) ) );\n-\n-                    for ( ProgramStage programStage : program.getProgramStages() )\n-                    {\n-                        for ( DataElement dataElement : programStage.getDataElements() )\n-                        {\n-                            DATA_ELEM_CACHE.put( dataElement.getUid(), dataElement );\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        if ( !eventIds.isEmpty() )\n-        {\n-            eventSyncService.getEvents( (List<String>) eventIds ).forEach( psi -> programStageInstanceCache.put( psi.getUid(), psi ) );\n-\n-            manager.getObjects( TrackedEntityInstance.class, IdentifiableProperty.UID,\n-                events.stream()\n-                    .filter( event -> event.getTrackedEntityInstance() != null )\n-                    .map( Event::getTrackedEntityInstance ).collect( Collectors.toSet() ) )\n-                .forEach( tei -> trackedEntityInstanceCache.put( tei.getUid(), tei ) );\n-\n-            manager.getObjects( ProgramInstance.class, IdentifiableProperty.UID,\n-                events.stream()\n-                    .filter( event -> event.getEnrollment() != null )\n-                    .map( Event::getEnrollment ).collect( Collectors.toSet() ) )\n-                .forEach( tei -> programInstanceCache.put( tei.getUid(), tei ) );\n-        }\n-\n-        if ( !userIds.isEmpty() )\n-        {\n-            Query query = Query.from( schemaService.getDynamicSchema( User.class ) );\n-            query.setUser( user );\n-            query.add( Restrictions.in( \"id\", userIds ) );\n-            queryService.query( query ).forEach( assignedUser -> userCache.put( assignedUser.getUid(), (User) assignedUser ) );\n-        }\n-    }\n-\n-    private List<OrganisationUnit> getOrganisationUnits( EventSearchParams params )\n-    {\n-        List<OrganisationUnit> organisationUnits = new ArrayList<>();\n-\n-        OrganisationUnit orgUnit = params.getOrgUnit();\n-        OrganisationUnitSelectionMode orgUnitSelectionMode = params.getOrgUnitSelectionMode();\n-\n-        if ( params.getOrgUnit() != null )\n-        {\n-            if ( OrganisationUnitSelectionMode.DESCENDANTS.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.addAll( organisationUnitService.getOrganisationUnitWithChildren( orgUnit.getUid() ) );\n-            }\n-            else if ( OrganisationUnitSelectionMode.CHILDREN.equals( orgUnitSelectionMode ) )\n-            {\n-                organisationUnits.add( orgUnit );\n-                organisationUnits.addAll( orgUnit.getChildren() );\n-            }\n-            else // SELECTED\n-            {\n-                organisationUnits.add( orgUnit );\n-            }\n-        }\n-\n-        return organisationUnits;\n-    }\n-\n-    private ImportSummary saveEvent( Program program, ProgramInstance programInstance, ProgramStage programStage,\n-        ProgramStageInstance programStageInstance, OrganisationUnit organisationUnit, Event event, User assignedUser,\n-        ImportOptions importOptions, boolean bulkSave )\n-    {\n-        Assert.notNull( program, \"Program cannot be null\" );\n-        Assert.notNull( programInstance, \"Program instance cannot be null\" );\n-        Assert.notNull( programStage, \"Program stage cannot be null\" );\n-\n-        ImportSummary importSummary = new ImportSummary( event.getEvent() );\n-        importOptions = updateImportOptions( importOptions );\n-\n-        boolean dryRun = importOptions.isDryRun();\n-\n-        List<String> errors = validateEvent( event, programInstance, importOptions );\n-\n-        if ( !errors.isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n-            importSummary.incrementIgnored();\n-\n-            return importSummary;\n-        }\n-\n-        Date executionDate = null;\n-\n-        if ( event.getEventDate() != null )\n-        {\n-            executionDate = DateUtils.parseDate( event.getEventDate() );\n-        }\n-\n-        Date dueDate = new Date();\n-\n-        if ( event.getDueDate() != null )\n-        {\n-            dueDate = DateUtils.parseDate( event.getDueDate() );\n-        }\n-\n-        User user = importOptions.getUser();\n-\n-        String storedBy = getValidUsername( event.getStoredBy(), importSummary, User.username( user, Constants.UNKNOWN ) );\n-        String completedBy = getValidUsername( event.getCompletedBy(), importSummary, User.username( user, Constants.UNKNOWN ) );\n-\n-        CategoryOptionCombo aoc;\n-\n-        if ( (event.getAttributeCategoryOptions() != null && program.getCategoryCombo() != null)\n-            || event.getAttributeOptionCombo() != null )\n-        {\n-            IdScheme idScheme = importOptions.getIdSchemes().getCategoryOptionIdScheme();\n-\n-            try\n-            {\n-                aoc = getAttributeOptionCombo( program.getCategoryCombo(), event.getAttributeCategoryOptions(),\n-                    event.getAttributeOptionCombo(), idScheme );\n-            }\n-            catch ( IllegalQueryException ex )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( ex.getMessage(), event.getAttributeCategoryOptions() ) );\n-                importSummary.setStatus( ImportStatus.ERROR );\n-                return importSummary.incrementIgnored();\n-            }\n-        }\n-        else\n-        {\n-            aoc = (CategoryOptionCombo) getDefaultObject( CategoryOptionCombo.class );\n-        }\n-\n-        if ( aoc != null && aoc.isDefault() && program.getCategoryCombo() != null && !program.getCategoryCombo().isDefault() )\n-        {\n-            importSummary.getConflicts().add( new ImportConflict( \"attributeOptionCombo\", \"Default attribute option combo is not allowed since program has non-default category combo\" ) );\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            return importSummary.incrementIgnored();\n-        }\n-\n-        Date eventDate = executionDate != null ? executionDate : dueDate;\n-\n-        validateAttributeOptionComboDate( aoc, eventDate );\n-\n-        errors = trackerAccessManager.canWrite( user, aoc );\n-\n-        if ( !errors.isEmpty() )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.getConflicts().addAll( errors.stream().map( s -> new ImportConflict( \"CategoryOptionCombo\", s ) ).collect( Collectors.toList() ) );\n-            importSummary.incrementIgnored();\n-\n-            return importSummary;\n-        }\n-\n-        if ( !dryRun )\n-        {\n-            if ( programStageInstance == null )\n-            {\n-                programStageInstance = createProgramStageInstance( event, programStage, programInstance,\n-                    organisationUnit, dueDate, executionDate, event.getStatus().getValue(),\n-                    completedBy, storedBy, event.getEvent(), aoc, assignedUser, importOptions, importSummary );\n-\n-                if ( program.isRegistration() )\n-                {\n-                    programInstance.getProgramStageInstances().add( programStageInstance );\n-                }\n-            }\n-            else\n-            {\n-                updateProgramStageInstance( event, programStage, programInstance, organisationUnit, dueDate,\n-                    executionDate, event.getStatus().getValue(), completedBy, storedBy,\n-                    programStageInstance, aoc, assignedUser, importOptions, importSummary );\n-            }\n-\n-            if ( !importOptions.isSkipLastUpdated() )\n-            {\n-                updateTrackedEntityInstance( programStageInstance, user, bulkSave );\n-            }\n-\n-            importSummary.setReference( programStageInstance.getUid() );\n-        }\n-\n-        if ( dryRun && programStageInstance == null )\n-        {\n-\n-            log.error( \"The request is a dry run and at the same time the programStageInstance is null. This will lead to NullPointerException. Stopping it now.\" );\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.setDescription( \"The request is a dryRun. However, the provided event does not point to a valid event: \" + event.getEvent() + \". Cannot continue.\" );\n-\n-            return importSummary.setReference( event.getEvent() ).incrementIgnored();\n-        }\n-\n-        programInstanceCache.put( programInstance.getUid(), programInstance );\n-        sendProgramNotification( programStageInstance, importOptions );\n-\n-        if ( importSummary.getConflicts().size() > 0 )\n-        {\n-            importSummary.setStatus( ImportStatus.ERROR );\n-            importSummary.incrementIgnored();\n-        }\n-        else\n-        {\n-            importSummary.setStatus( ImportStatus.SUCCESS );\n-            importSummary.incrementImported();\n-        }\n-\n-        return importSummary;\n-    }\n-\n-    private void sendProgramNotification( ProgramStageInstance programStageInstance, ImportOptions importOptions )\n-    {\n-        if ( !importOptions.isSkipNotifications() )\n-        {\n-            if ( programStageInstance.isCompleted() )\n-            {\n-                eventPublisher.publishEvent( new ProgramStageCompletionNotificationEvent( this, programStageInstance.getId() ) );\n-                eventPublisher.publishEvent( new StageCompletionEvaluationEvent( this, programStageInstance.getId() ) );\n-            }\n-\n-            if ( EventStatus.SCHEDULE.equals( programStageInstance.getStatus() ) )\n-            {\n-                eventPublisher.publishEvent( new StageScheduledEvaluationEvent( this, programStageInstance.getId() ) );\n-            }\n-        }\n-    }\n-\n-    private ProgramStageInstance createProgramStageInstance( Event event, ProgramStage programStage,\n-        ProgramInstance programInstance, OrganisationUnit organisationUnit, Date dueDate, Date executionDate,\n-        int status, String completedBy, String storedBy, String programStageInstanceIdentifier,\n-        CategoryOptionCombo aoc, User assignedUser, ImportOptions importOptions, ImportSummary importSummary )\n-    {\n-        ProgramStageInstance programStageInstance = new ProgramStageInstance();\n-\n-        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( IdScheme.UID ) )\n-        {\n-            programStageInstance\n-                .setUid( CodeGenerator.isValidUid( programStageInstanceIdentifier ) ? programStageInstanceIdentifier\n-                    : CodeGenerator.generateUid() );\n-        }\n-        else if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( IdScheme.CODE ) )\n-        {\n-            programStageInstance.setUid( CodeGenerator.generateUid() );\n-            programStageInstance.setCode( programStageInstanceIdentifier );\n-        }\n-\n-        programStageInstance.setStoredBy( storedBy );\n-\n-        updateProgramStageInstance( event, programStage, programInstance, organisationUnit, dueDate, executionDate,\n-            status, completedBy, storedBy, programStageInstance, aoc, assignedUser, importOptions, importSummary );\n-\n-        return programStageInstance;\n-    }\n-\n-    private void updateProgramStageInstance( Event event, ProgramStage programStage, ProgramInstance programInstance,\n-        OrganisationUnit organisationUnit, Date dueDate, Date executionDate, int status,\n-        String completedBy, String storedBy, ProgramStageInstance programStageInstance, CategoryOptionCombo aoc, User assignedUser,\n-        ImportOptions importOptions, ImportSummary importSummary )\n-    {\n-        programStageInstance.setProgramInstance( programInstance );\n-        programStageInstance.setProgramStage( programStage );\n-        programStageInstance.setDueDate( dueDate );\n-        programStageInstance.setExecutionDate( executionDate );\n-        programStageInstance.setOrganisationUnit( organisationUnit );\n-        programStageInstance.setAttributeOptionCombo( aoc );\n-        programStageInstance.setGeometry( event.getGeometry() );\n-\n-        if ( programStageInstance.getProgramStage().isEnableUserAssignment() )\n-        {\n-            programStageInstance.setAssignedUser( assignedUser );\n-        }\n-\n-        updateDateFields( event, programStageInstance );\n-\n-        programStageInstance.setStatus( EventStatus.fromInt( status ) );\n-\n-        saveTrackedEntityComment( programStageInstance, event, storedBy );\n-\n-        if ( programStageInstance.isCompleted() )\n-        {\n-            Date completedDate = new Date();\n-            if ( event.getCompletedDate() != null )\n-            {\n-                completedDate = DateUtils.parseDate( event.getCompletedDate() );\n-            }\n-            programStageInstance.setCompletedBy( completedBy );\n-            programStageInstance.setCompletedDate( completedDate );\n-        }\n-\n-        preheatDataElementsCache( event, importOptions );\n-\n-        if ( programStageInstance.getId() == 0 )\n-        {\n-            programStageInstance.setAutoFields();\n-            programStageInstanceService.addProgramStageInstance( programStageInstance, importOptions.getUser() );\n-\n-            eventDataValueService.processDataValues( programStageInstance, event, false, importOptions, importSummary, DATA_ELEM_CACHE );\n-            programStageInstanceService.updateProgramStageInstance( programStageInstance, importOptions.getUser() );\n-        }\n-        else\n-        {\n-            eventDataValueService.processDataValues( programStageInstance, event, false, importOptions, importSummary, DATA_ELEM_CACHE );\n-            programStageInstanceService.updateProgramStageInstance( programStageInstance, importOptions.getUser() );\n-        }\n-    }\n-\n-    private void saveTrackedEntityComment( ProgramStageInstance programStageInstance, Event event, String storedBy )\n-    {\n-        for ( Note note : event.getNotes() )\n-        {\n-            String noteUid = CodeGenerator.isValidUid( note.getNote() ) ? note.getNote() : CodeGenerator.generateUid();\n-\n-            if ( !commentService.trackedEntityCommentExists( noteUid ) && !StringUtils.isEmpty( note.getValue() ) )\n-            {\n-                TrackedEntityComment comment = new TrackedEntityComment();\n-                comment.setUid( noteUid );\n-                comment.setCommentText( note.getValue() );\n-                comment.setCreator( getValidUsername( note.getStoredBy(), null, storedBy ) );\n-\n-                Date created = DateUtils.parseDate( note.getStoredDate() );\n-                comment.setCreated( created );\n-\n-                commentService.addTrackedEntityComment( comment );\n-\n-                programStageInstance.getComments().add( comment );\n-            }\n-        }\n-    }\n-\n-    public static String getValidUsername( String userName, ImportSummary importSummary, String fallbackUsername )\n-    {\n-        if ( StringUtils.isEmpty( userName ) )\n-        {\n-            return fallbackUsername;\n-        }\n-        else if ( userName.length() > UserCredentials.USERNAME_MAX_LENGTH )\n-        {\n-            if ( importSummary != null )\n-            {\n-                importSummary.getConflicts().add( new ImportConflict( \"Username\",\n-                    userName + \" is more than \" + UserCredentials.USERNAME_MAX_LENGTH + \" characters, using current username instead\" ) );\n-            }\n-\n-            return fallbackUsername;\n-        }\n-\n-        return userName;\n-    }\n-\n-    private OrganisationUnit getOrganisationUnit( IdSchemes idSchemes, String id )\n-    {\n-        return organisationUnitCache.get( id,\n-            () -> manager.getObject( OrganisationUnit.class, idSchemes.getOrgUnitIdScheme(), id ) );\n-    }\n-\n-    private ProgramStageInstance getProgramStageInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        ProgramStageInstance programStageInstance = programStageInstanceCache.get( uid );\n-\n-        if ( programStageInstance == null )\n-        {\n-            programStageInstance = eventSyncService.getEvent( uid );\n-\n-            programStageInstanceCache.put( uid, programStageInstance );\n-        }\n-\n-        return programStageInstance;\n-    }\n-\n-    private ProgramInstance getProgramInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        ProgramInstance programInstance = programInstanceCache.get( uid );\n-\n-        if ( programInstance == null )\n-        {\n-            eventSyncService.getEnrollment( uid );\n-        }\n-\n-        return programInstance;\n-    }\n-\n-    private User getUser( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        User user = userCache.get( uid );\n-\n-        if ( user == null )\n-        {\n-            user = userService.getUser( uid );\n-            userCache.put( uid, user );\n-        }\n-\n-        return user;\n-    }\n-\n-    private TrackedEntityInstance getTrackedEntityInstance( String uid )\n-    {\n-        if ( uid == null )\n-        {\n-            return null;\n-        }\n-\n-        TrackedEntityInstance tei = trackedEntityInstanceCache.get( uid );\n+            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n \n-        if ( tei == null )\n-        {\n-            tei = entityInstanceService.getTrackedEntityInstance( uid );\n+            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n+            {\n+                entityInstanceService\n+                    .updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n+            }\n \n-            trackedEntityInstanceCache.put( uid, tei );\n+            ImportSummary importSummary = new ImportSummary( ImportStatus.SUCCESS,\n+                \"Deletion of event \" + uid + \" was successful\" ).incrementDeleted();\n+            importSummary.setReference( uid );\n+            return importSummary;\n         }\n-\n-        return tei;\n-    }\n-\n-    private Program getProgram( IdScheme idScheme, String id )\n-    {\n-        if ( id == null )\n+        else\n         {\n-            return null;\n+            return new ImportSummary( ImportStatus.SUCCESS,\n+                \"Event \" + uid + \" cannot be deleted as it is not present in the system\" ).incrementIgnored();\n         }\n+    }\n \n-        Program program = programCache.get( id );\n+    @Transactional\n+    @Override\n+    public ImportSummaries deleteEvents( List<String> uids, boolean clearSession )\n+    {\n+        ImportSummaries importSummaries = new ImportSummaries();\n+        int counter = 0;\n \n-        if ( program == null )\n+        for ( String uid : uids )\n         {\n-            program = manager.getObject( Program.class, idScheme, id );\n+            importSummaries.addImportSummary( deleteEvent( uid ) );\n \n-            if ( program != null )\n+            if ( clearSession && counter % FLUSH_FREQUENCY == 0 )\n             {\n-                programCache.put( id, program );\n-\n-                programStageCache.putAll( program.getProgramStages().stream().collect( Collectors.toMap( ProgramStage::getUid, ps -> ps ) ) );\n-\n-                cacheDataElements( program.getProgramStages() );\n+                // clearSession( user );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDI0OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444249", "bodyText": "@maikelarabori can you look at this function - we can discuss it together, I don't remember why this was commented out", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyOTA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\nindex 7715f7b153..46b2b5a0f4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/AbstractEventService.java\n\n@@ -744,7 +745,7 @@ public abstract class AbstractEventService implements EventService\n             ProgramStageInstance programStageInstance = programStageInstanceService.getProgramStageInstance( uid );\n \n             List<String> errors = trackerAccessManager.canDelete( currentUserService.getCurrentUser(),\n-                programStageInstance, false );\n+                    programStageInstance, false );\n \n             if ( !errors.isEmpty() )\n             {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDkwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448244908", "bodyText": "Commented out code.", "author": "netroms", "createdAt": "2020-07-01T09:42:15Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+import static org.hisp.dhis.util.DateUtils.getMediumDateString;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.util.DateUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboDateCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        CategoryOptionCombo attributeOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date executionDate = null;\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            executionDate = DateUtils.parseDate( event.getEventDate() );\n+        }\n+\n+        Date dueDate = new Date();\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = DateUtils.parseDate( event.getDueDate() );\n+        }\n+\n+        Date eventDate = executionDate != null ? executionDate : dueDate;\n+\n+        if ( eventDate == null )\n+        {\n+            throw new IllegalQueryException( \"Event date can not be empty\" );\n+        }\n+\n+        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        {\n+            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDc2MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444760", "bodyText": "Yes, this is one of the open questions in the document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\nindex 452c7a3789..2a4dbe46e7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n\n@@ -36,8 +36,8 @@ import java.util.Date;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.common.IllegalQueryException;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.util.DateUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTAxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448245018", "bodyText": "Commented out code.", "author": "netroms", "createdAt": "2020-07-01T09:42:26Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+import static org.hisp.dhis.util.DateUtils.getMediumDateString;\n+\n+import java.util.Date;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.util.DateUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboDateCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        CategoryOptionCombo attributeOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        Date executionDate = null;\n+\n+        if ( event.getEventDate() != null )\n+        {\n+            executionDate = DateUtils.parseDate( event.getEventDate() );\n+        }\n+\n+        Date dueDate = new Date();\n+\n+        if ( event.getDueDate() != null )\n+        {\n+            dueDate = DateUtils.parseDate( event.getDueDate() );\n+        }\n+\n+        Date eventDate = executionDate != null ? executionDate : dueDate;\n+\n+        if ( eventDate == null )\n+        {\n+            throw new IllegalQueryException( \"Event date can not be empty\" );\n+        }\n+\n+        for ( CategoryOption option : attributeOptionCombo.getCategoryOptions() )\n+        {\n+            if ( option.getStartDate() != null && eventDate.compareTo( option.getStartDate() ) < 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"\n+//                    + getMediumDateString( option.getEndDate() ) + \" for attributeOption '\" + option.getName() + \"'\" )\n+//                        .incrementIgnored();\n+                throw new IllegalQueryException( \"Event date \" + getMediumDateString( eventDate )\n+                    + \" is before start date \" + getMediumDateString( option.getStartDate() ) + \" for attributeOption '\"\n+                    + option.getName() + \"'\" );\n+            }\n+\n+            if ( option.getEndDate() != null && eventDate.compareTo( option.getEndDate() ) > 0 )\n+            {\n+                // TODO: Could we replace the exception by ImportSummary error?\n+//                return error( \"Event date \" + getMediumDateString( date ) + \" is after end date \"", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDg3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448444875", "bodyText": "Yes, this is one of the open questions in the document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\nindex 452c7a3789..2a4dbe46e7 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheck.java\n\n@@ -36,8 +36,8 @@ import java.util.Date;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.common.IllegalQueryException;\n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.util.DateUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTU1NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448255554", "bodyText": "Out of curiosity, could you explain a little about this change. Since this affects a lot of stuff outside tracker also it would be interesting to know.", "author": "netroms", "createdAt": "2020-07-01T10:00:51Z", "path": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java", "diffHunk": "@@ -269,24 +269,23 @@ public void update( T object, User user )\n     {\n         String username = user != null ? user.getUsername() : \"system-process\";\n \n-        if ( IdentifiableObject.class.isInstance( object ) )\n+        if ( object != null )\n         {\n             object.setAutoFields();\n \n-            BaseIdentifiableObject identifiableObject = object;\n-            identifiableObject.setAutoFields();\n-            identifiableObject.setLastUpdatedBy( user );\n+            object.setAutoFields();\n+            object.setLastUpdatedBy( user );\n \n-            if ( identifiableObject.getUser() == null )\n+            if ( object.getUser() == null )\n             {\n-                identifiableObject.setUser( user );\n+                object.setUser( user );\n             }\n         }\n \n         if ( !isUpdateAllowed( object, user ) )\n         {\n             AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE_DENIED );\n-            throw new UpdateAccessDeniedException( object.toString() );\n+            throw new UpdateAccessDeniedException( String.valueOf( object ) );\n         }", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0ODYwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448448602", "bodyText": "Sure:\n\nif ( IdentifiableObject.class.isInstance( object ) ) is replaced with object != null (because  extends BaseIdentifiableObject) so checking if isInstance is useless\nThe rest of the change is just removing the useless cast and replace with the actual function parameter (object)", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "d360652a896bee650a842567e26cd1e62145cccb", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\nindex 5d678de176..a453c2976d 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/hibernate/HibernateIdentifiableObjectStore.java\n\n@@ -285,7 +287,7 @@ public class HibernateIdentifiableObjectStore<T extends BaseIdentifiableObject>\n         if ( !isUpdateAllowed( object, user ) )\n         {\n             AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE_DENIED );\n-            throw new UpdateAccessDeniedException( String.valueOf( object ) );\n+            throw new UpdateAccessDeniedException( object.toString() );\n         }\n \n         AuditLogUtil.infoWrapper( log, username, object, AuditLogUtil.ACTION_UPDATE );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTgwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448829807", "bodyText": "Is this done for performance?\nWould it be faster to use Set instead of List for faster get lookups?", "author": "larshelge", "createdAt": "2020-07-02T08:18:50Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java", "diffHunk": "@@ -430,12 +431,13 @@ public boolean isDescendant( Set<OrganisationUnit> ancestors )\n         {\n             return false;\n         }\n+        List<String> ancestorsUid = ancestors.stream().map( OrganisationUnit::getUid ).collect( Collectors.toList() );", "originalCommit": "567f633c58a080f96aecf93b2844f13350f9c834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzUwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449543502", "bodyText": "True, fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-03T11:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java\nindex 3a694cba31..e5bdd07096 100644\n--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnit.java\n\n@@ -431,7 +431,7 @@ public class OrganisationUnit\n         {\n             return false;\n         }\n-        List<String> ancestorsUid = ancestors.stream().map( OrganisationUnit::getUid ).collect( Collectors.toList() );\n+        Set<String> ancestorsUid = ancestors.stream().map( OrganisationUnit::getUid ).collect( Collectors.toSet() );\n \n         OrganisationUnit unit = this;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MjQwNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448862404", "bodyText": "A little java doc would be useful here.", "author": "zubaira", "createdAt": "2020-07-02T09:12:18Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public interface Checker", "originalCommit": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0Mjk3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449542972", "bodyText": "Very right, fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-03T11:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MjQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java\nindex 4f11f4bafa..40f1754837 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Checker.java\n\n@@ -36,12 +36,34 @@ import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n \n /**\n+ * Interface for classes that act as Tracker Import validation components.\n+ * \n+ * A class implementing this interface is responsible for a validation unit.\n+ * \n+ * The smaller the validation unit, the better.\n+ * \n+ * This interface only accepts {@see ImmutableEvent}, because a validation\n+ * component is not supposed to modify the object being validated.\n+ * \n  * @author Luciano Fiandesio\n  */\n public interface Checker\n {\n+    /**\n+     * Verify that the event satisfies the validation logic\n+     * \n+     * @param event an {@see ImmutableEvent}\n+     * @param workContext the work context containing the data required for\n+     *        validation\n+     * @return an {@see ImportSummary} class. If the validation is successful, the\n+     *         ImportSummary does not contain any error\n+     */\n     ImportSummary check( ImmutableEvent event, WorkContext workContext );\n \n+    /**\n+     * Returns an {@see ImportSummary} object with the specified error description,\n+     * if the object is null.\n+     */\n     default ImportSummary checkNull( Object object, String description, ImmutableEvent event )\n     {\n         if ( object == null )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449007934", "bodyText": "not used anymore.", "author": "zubaira", "createdAt": "2020-07-02T13:38:14Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isInsert;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;", "originalCommit": "be93f0a98f40d2f0ec13eb2f3ad519d6d0e6fa96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyMjA5Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449022092", "bodyText": "hi @zubaira I'm not sure I understand this comment. What is no longer used?", "author": "luciano-fiandesio", "createdAt": "2020-07-02T13:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNDg2Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r449024867", "bodyText": "Sorry, @luciano-fiandesio I should have mentioned it.\nIts about unused import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;", "author": "zubaira", "createdAt": "2020-07-02T14:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNzkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java\nindex e677a9dbed..c39eaec42b 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/InsertValidationFactory.java\n\n@@ -38,7 +38,6 @@ import java.util.Map;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.EventChecking;\n-import org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.importexport.ImportStrategy;\n"}}, {"oid": "7032498b0cbac9437a93d7deeb72862937c55a98", "url": "https://github.com/dhis2/dhis2-core/commit/7032498b0cbac9437a93d7deeb72862937c55a98", "message": "chore: removed unused var", "committedDate": "2020-07-03T12:10:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2NTUyNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457265525", "bodyText": "package declaration normally comes before Copyright statement.", "author": "ameenhere", "createdAt": "2020-07-20T10:36:15Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0Njk1MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462046950", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2NTUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\nindex 72963db43b..0826b63ee4 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/PreInsertProcessorFactory.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMzIzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457423234", "bodyText": "package declaration.", "author": "ameenhere", "createdAt": "2020-07-20T14:12:28Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NzA3Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462047077", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMzIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\nindex 8af9c66afb..67ece587de 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventChecking.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNTY0OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457425648", "bodyText": "package declaration.", "author": "ameenhere", "createdAt": "2020-07-20T14:15:17Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NzgyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462047828", "bodyText": "Fixed + Javadoc", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNTY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\nindex d2e9f662c7..af14eb3b4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/Processor.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNjAzNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457426036", "bodyText": "package declaration.", "author": "ameenhere", "createdAt": "2020-07-20T14:15:47Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0ODAxMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462048012", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNjAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\nindex bfb3d9641d..8a06d9bba9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/ServiceDelegator.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyOTI3MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457429271", "bodyText": "package declaration before copyright", "author": "ameenhere", "createdAt": "2020-07-20T14:19:33Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0OTM1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462049359", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyOTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java\nindex e912f36b62..3c44731c6a 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceUpdatePreProcessor.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDI3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r457430275", "bodyText": "package declaration before copyright", "author": "ameenhere", "createdAt": "2020-07-20T14:20:40Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0OTU1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462049559", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-29T05:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\nindex c8d8623674..3bbca4f38c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventServiceFacade.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyNzcyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461627720", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n          \n          \n            \n                public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "author": "stian-sandvold", "createdAt": "2020-07-28T14:31:12Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+\n+import java.util.Optional;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackedEntityInstanceCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\nindex c83a6d53f5..cdb23a79f2 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n\n@@ -28,25 +28,25 @@\n \n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.Optional;\n+\n import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n import org.hisp.dhis.program.Program;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n \n-import java.util.Optional;\n-\n-import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n-\n /**\n  * @author Luciano Fiandesio\n  */\n public class TrackedEntityInstanceCheck implements Checker\n {\n     @Override\n-    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n     {\n         Program program = ctx.getProgramsMap().get( event.getProgram() );\n         final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyODM0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461628343", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( pair != null && !pair.getKey().equals( \"filter\"))\n          \n          \n            \n                    if ( pair != null && !pair.getKey().equals( \"filter\") )", "author": "stian-sandvold", "createdAt": "2020-07-28T14:31:59Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java", "diffHunk": "@@ -54,16 +54,16 @@ public QueryParamsBuilder()\n      */\n     public QueryParamsBuilder add( String param )\n     {\n-        String[] splited = param.split( \"=\" );\n-        MutablePair pair = getByKey( splited[0] );\n+        String[] split = param.split( \"=\" );\n+        MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null )\n+        if ( pair != null && !pair.getKey().equals( \"filter\"))", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\nindex a128a6c018..728ecafc70 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/helpers/QueryParamsBuilder.java\n\n@@ -57,7 +57,7 @@ public class QueryParamsBuilder\n         String[] split = param.split( \"=\" );\n         MutablePair pair = getByKey( split[0] );\n \n-        if ( pair != null && !pair.getKey().equals( \"filter\"))\n+        if ( pair != null && !pair.getKey().equals( \"filter\") )\n         {\n             pair.setRight( split[1] );\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyOTc1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461629753", "bodyText": "If I understand correctly, there shouldn't be any unpersisted changes in the session at this point? Or could there be from a previous batch of import?", "author": "stian-sandvold", "createdAt": "2020-07-28T14:33:43Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1OTkxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462059918", "bodyText": "Since, this code could be called during an import of Tei -> Enrollment, we need to be sure that these entities are flushed before loading the data in cache.", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyOTc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n\n@@ -36,6 +36,7 @@ import org.hibernate.SessionFactory;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramInstance;\n import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n import org.hisp.dhis.user.User;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMDE2Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461630167", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n          \n          \n            \n                        .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ) )", "author": "stian-sandvold", "createdAt": "2020-07-28T14:34:14Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n\n@@ -36,6 +36,7 @@ import org.hibernate.SessionFactory;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramInstance;\n import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n import org.hisp.dhis.user.User;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461634503", "bodyText": "What is this line for?", "author": "stian-sandvold", "createdAt": "2020-07-28T14:39:27Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MDM0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462060343", "bodyText": "This is required to avoid an Hibernate error down the line, when we access this method over and over, but since the object is detached, we \"pre-load\" the data here.", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MDM4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462060380", "bodyText": "Adding comment.", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n\n@@ -36,6 +36,7 @@ import org.hibernate.SessionFactory;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramInstance;\n import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n import org.hisp.dhis.user.User;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTAyMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461635022", "bodyText": "What is this line for? Doesnt this just return a boolean?", "author": "stian-sandvold", "createdAt": "2020-07-28T14:40:03Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hibernate.SessionFactory;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class WorkContextLoader\n+{\n+    private final ProgramSupplier programSupplier;\n+\n+    private final OrganisationUnitSupplier organisationUnitSupplier;\n+\n+    private final TrackedEntityInstanceSupplier trackedEntityInstanceSupplier;\n+\n+    private final ProgramInstanceSupplier programInstanceSupplier;\n+\n+    private final ProgramStageInstanceSupplier programStageInstanceSupplier;\n+\n+    private final CategoryOptionComboSupplier categoryOptionComboSupplier;\n+\n+    private final DataElementSupplier dataElementSupplier;\n+\n+    private final NoteSupplier noteSupplier;\n+\n+    private final AssignedUserSupplier assignedUserSupplier;\n+\n+    private final ServiceDelegatorSupplier serviceDelegatorSupplier;\n+\n+    private final static UidGenerator uidGen = new UidGenerator();\n+\n+    private final SessionFactory sessionFactory;\n+\n+    public WorkContextLoader(\n+    // @formatter:off\n+        ProgramSupplier programSupplier,\n+        OrganisationUnitSupplier organisationUnitSupplier,\n+        TrackedEntityInstanceSupplier trackedEntityInstanceSupplier,\n+        ProgramInstanceSupplier programInstanceSupplier,\n+        ProgramStageInstanceSupplier programStageInstanceSupplier,\n+        CategoryOptionComboSupplier categoryOptionComboSupplier,\n+        DataElementSupplier dataElementSupplier,\n+        NoteSupplier noteSupplier,\n+        AssignedUserSupplier assignedUserSupplier,\n+        ServiceDelegatorSupplier serviceDelegatorSupplier,\n+        SessionFactory sessionFactory\n+    // @formatter:on\n+    )\n+    {\n+        this.programSupplier = programSupplier;\n+        this.organisationUnitSupplier = organisationUnitSupplier;\n+        this.trackedEntityInstanceSupplier = trackedEntityInstanceSupplier;\n+        this.programInstanceSupplier = programInstanceSupplier;\n+        this.programStageInstanceSupplier = programStageInstanceSupplier;\n+        this.categoryOptionComboSupplier = categoryOptionComboSupplier;\n+        this.dataElementSupplier = dataElementSupplier;\n+        this.noteSupplier = noteSupplier;\n+        this.assignedUserSupplier = assignedUserSupplier;\n+        this.serviceDelegatorSupplier = serviceDelegatorSupplier;\n+        this.sessionFactory = sessionFactory;\n+    }\n+\n+    @Transactional( readOnly = true )\n+    public WorkContext load( ImportOptions importOptions, List<Event> events )\n+    {\n+        sessionFactory.getCurrentSession().flush();\n+\n+        ImportOptions localImportOptions = importOptions;\n+        // API allows a null Import Options\n+        if ( localImportOptions == null )\n+        {\n+            localImportOptions = ImportOptions.getDefaultImportOptions();\n+        }\n+\n+        initializeUser( localImportOptions );\n+\n+        // Make sure all events have the 'uid' field populated\n+        events = uidGen.assignUidToEvents( events );\n+\n+        final Map<String, ProgramStageInstance> programStageInstanceMap = programStageInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        final Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = trackedEntityInstanceSupplier\n+            .get( localImportOptions, events );\n+\n+        return WorkContext.builder()\n+        // @formatter:off\n+            .importOptions( localImportOptions )\n+            .programsMap( programSupplier.get( localImportOptions, events ) )\n+            .programStageInstanceMap( programStageInstanceMap )\n+            .organisationUnitMap( organisationUnitSupplier.get( localImportOptions, events ) )\n+            .trackedEntityInstanceMap( teiMap )\n+            .programInstanceMap( programInstanceSupplier.get( localImportOptions, teiMap, events ) )\n+            .categoryOptionComboMap( categoryOptionComboSupplier.get( localImportOptions, events ) )\n+            .dataElementMap( dataElementSupplier.get( localImportOptions, events ) )\n+            .notesMap( noteSupplier.get( localImportOptions, events ) )\n+            .assignedUserMap( assignedUserSupplier.get( localImportOptions, events ) )\n+            .eventDataValueMap( new EventDataValueAggregator().aggregateDataValues( events, programStageInstanceMap, localImportOptions ))\n+            .serviceDelegator( serviceDelegatorSupplier.get() )\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    /**\n+     * Make sure that the {@see User} object's properties are properly initialized,\n+     * to avoid running into Hibernate-related issues during validation\n+     *\n+     * @param importOptions the {@see ImportOptions} object\n+     */\n+    private void initializeUser( ImportOptions importOptions )\n+    {\n+        if ( importOptions.getUser() == null )\n+        {\n+            final User currentUser = this.serviceDelegatorSupplier.get().getCurrentUserService().getCurrentUser();\n+\n+            //\n+            // This should never really happen!\n+            //\n+            if ( currentUser != null )\n+            {\n+                UserCredentials userCredentials = currentUser.getUserCredentials();\n+                HibernateUtils.initializeProxy( userCredentials );\n+                userCredentials.isSuper();\n+                importOptions.setUser( currentUser );\n+            }\n+        }\n+        else\n+        {\n+            final User user = importOptions.getUser();\n+            UserCredentials userCredentials = user.getUserCredentials();\n+            HibernateUtils.initializeProxy( userCredentials );\n+            userCredentials.isSuper();", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MTY4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462061681", "bodyText": "See before.", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\nindex 004db6365f..fb19701572 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n\n@@ -36,6 +36,7 @@ import org.hibernate.SessionFactory;\n import org.hisp.dhis.dxf2.common.ImportOptions;\n import org.hisp.dhis.dxf2.events.event.Event;\n import org.hisp.dhis.hibernate.HibernateUtils;\n+import org.hisp.dhis.program.ProgramInstance;\n import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n import org.hisp.dhis.user.User;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzE1MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461637151", "bodyText": "unused code.", "author": "stian-sandvold", "createdAt": "2020-07-28T14:42:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MjAxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r462062019", "bodyText": "Fixed (code removed)", "author": "luciano-fiandesio", "createdAt": "2020-07-29T06:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\n@@ -37,15 +37,10 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.text.StrSubstitutor;\n import org.apache.logging.log4j.util.Strings;\n-import org.cache2k.Cache;\n-import org.cache2k.Cache2kBuilder;\n-import org.cache2k.integration.CacheLoader;\n import org.hisp.dhis.category.CategoryCombo;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNzcwNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461637705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return loadCategoryOption( idScheme, id);\n          \n          \n            \n                    return loadCategoryOption( idScheme, id );", "author": "stian-sandvold", "createdAt": "2020-07-28T14:43:16Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\n@@ -37,15 +37,10 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.text.StrSubstitutor;\n import org.apache.logging.log4j.util.Strings;\n-import org.cache2k.Cache;\n-import org.cache2k.Cache2kBuilder;\n-import org.cache2k.integration.CacheLoader;\n import org.hisp.dhis.category.CategoryCombo;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDMxNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640314", "bodyText": "If the attributeOptionCombo user supplied doesnt exists, yes we should return an error to the user.", "author": "stian-sandvold", "createdAt": "2020-07-28T14:46:24Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")\n+            .collect( Collectors.joining( \",\" ) );\n+\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+                .put( \"option_ids\", optionsId )\n+                .build() );\n+        // @formatter:on\n+        \n+        // TODO use cache\n+        List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+\n+        if ( categoryOptionCombos.size() == 1 )\n+        {\n+            return categoryOptionCombos.get( 0 );\n+        }\n+        else\n+        {\n+            // TODO throw an error??", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTMwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461641309", "bodyText": "At least this is how I understand the code here :)", "author": "stian-sandvold", "createdAt": "2020-07-28T14:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\n@@ -37,15 +37,10 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.text.StrSubstitutor;\n import org.apache.logging.log4j.util.Strings;\n-import org.cache2k.Cache;\n-import org.cache2k.Cache2kBuilder;\n-import org.cache2k.integration.CacheLoader;\n import org.hisp.dhis.category.CategoryCombo;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDY0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .map(s -> \"'\" + s + \"'\")\n          \n          \n            \n                        .map( s -> \"'\" + s + \"'\" )", "author": "stian-sandvold", "createdAt": "2020-07-28T14:46:47Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\n@@ -37,15 +37,10 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.text.StrSubstitutor;\n import org.apache.logging.log4j.util.Strings;\n-import org.cache2k.Cache;\n-import org.cache2k.Cache2kBuilder;\n-import org.cache2k.integration.CacheLoader;\n import org.hisp.dhis.category.CategoryCombo;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDgxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640818", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n          \n          \n            \n                    final String categoryComboKey = resolveId( idScheme, key, categoryComboId );", "author": "stian-sandvold", "createdAt": "2020-07-28T14:46:59Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\n@@ -37,15 +37,10 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.text.StrSubstitutor;\n import org.apache.logging.log4j.util.Strings;\n-import org.cache2k.Cache;\n-import org.cache2k.Cache2kBuilder;\n-import org.cache2k.integration.CacheLoader;\n import org.hisp.dhis.category.CategoryCombo;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDk0MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461640941", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n          \n          \n            \n                private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions ) {", "author": "stian-sandvold", "createdAt": "2020-07-28T14:47:08Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\n@@ -37,15 +37,10 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.text.StrSubstitutor;\n import org.apache.logging.log4j.util.Strings;\n-import org.cache2k.Cache;\n-import org.cache2k.Cache2kBuilder;\n-import org.cache2k.integration.CacheLoader;\n import org.hisp.dhis.category.CategoryCombo;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTYxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461641615", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))\n          \n          \n            \n                        .put( \"resolvedScheme\", Objects.requireNonNull( resolveId( idScheme, key, id ) ) )", "author": "stian-sandvold", "createdAt": "2020-07-28T14:47:55Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.apache.logging.log4j.util.Strings;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class AttributeOptionComboLoader\n+{\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    private final static String KEY_SEPARATOR = \"-\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO = \"select coc.categoryoptioncomboid, \"\n+            + \"coc.uid, coc.code, coc.ignoreapproval, coc.name, c.uid as cc_uid, c.name as cc_name, \"\n+            + \"string_agg(dec.categoryid::text, ',') as cat_ids from categoryoptioncombo coc \"\n+            + \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \"\n+            + \"join categorycombo c on co.categorycomboid = c.categorycomboid \"\n+            + \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \"\n+            + \"join dataelementcategory dec on cc.categoryid = dec.categoryid where coc.\"\n+            + \"${resolvedScheme} \"\n+            + \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name\";\n+\n+    public final static String SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS = \"select * from ( \" +\n+            \"select coc.categoryoptioncomboid, \" +\n+            \"coc.uid, \" +\n+            \"coc.code, \" +\n+            \"coc.ignoreapproval, \" +\n+            \"coc.name, \" +\n+            \"c.uid as cc_uid, \" +\n+            \"c.name as cc_name,\" +\n+            \"string_agg( dec.categoryid::text, ',') as cat_ids \" +\n+            \"from categoryoptioncombo coc \" +\n+            \"join categorycombos_optioncombos co on coc.categoryoptioncomboid = co.categoryoptioncomboid \" +\n+            \"join categorycombo c on co.categorycomboid = c.categorycomboid \" +\n+            \"join categorycombos_categories cc on c.categorycomboid = cc.categorycomboid \" +\n+            \"join dataelementcategory dec on cc.categoryid = dec.categoryid \" +\n+            \"where c.${resolvedScheme} \" +\n+            \"group by coc.categoryoptioncomboid, coc.uid, coc.code, coc.ignoreapproval, coc.name, cc_uid, cc_name \" +\n+            \") as catoptcombo where \" +\n+            \"array_length(regexp_split_to_array(cat_ids, ','),1) = array_length(ARRAY[${option_ids}],1) AND \" +\n+            \"regexp_split_to_array(cat_ids, ',') @> ARRAY[${option_ids}]\";\n+\n+    public AttributeOptionComboLoader( @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )\n+    {\n+        checkNotNull( jdbcTemplate );\n+\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by id, using the provided look-up\n+     * Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOptionCombo or null\n+     */\n+    public CategoryOptionCombo getCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOptionCombo( idScheme, id );\n+        //return this.cocCache.get( idScheme.name() + KEY_SEPARATOR + id );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo}\n+     *\n+     * @param categoryCombo a {@see CategoryCombo}\n+     * @param categoryOptions a semicolon delimited list of Category Options uid\n+     * @param attributeOptionCombo\n+     * @param idScheme the {@see IdScheme} to use to fetch the entity\n+     * @return a {@see CategoryOptionCombo}\n+     */\n+    public CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, String categoryOptions,\n+                                                        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        final Set<String> opts = TextUtils.splitToArray( categoryOptions, TextUtils.SEMICOLON );\n+\n+        return getAttributeOptionCombo( categoryCombo, opts, attributeOptionCombo, idScheme );\n+    }\n+\n+    /**\n+     * Fetches the default {@see CategoryOptionCombo}\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    public CategoryOptionCombo getDefault()\n+    {\n+        return  loadCategoryOptionCombo( IdScheme.NAME, \"default\" );\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOption} by uid, using the provided look-up Scheme\n+     *\n+     * @param idScheme an IdScheme\n+     * @param id the actual id\n+     * @return a CategoryOption or null\n+     */\n+    private CategoryOption getCategoryOption( IdScheme idScheme, String id )\n+    {\n+        return loadCategoryOption( idScheme, id);\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( CategoryCombo categoryCombo, Set<String> opts,\n+        String attributeOptionCombo, IdScheme idScheme )\n+    {\n+        if ( categoryCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Illegal category combo\" );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Attribute category options validation\n+        // ---------------------------------------------------------------------\n+\n+        CategoryOptionCombo attrOptCombo = null;\n+\n+        if ( opts != null )\n+        {\n+            Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+            for ( String uid : opts )\n+            {\n+                CategoryOption categoryOption = getCategoryOption( idScheme, uid );\n+\n+                if ( categoryOption == null )\n+                {\n+                    throw new IllegalQueryException( \"Illegal category option identifier: \" + uid );\n+                }\n+\n+                categoryOptions.add( categoryOption );\n+            }\n+\n+            final String id = resolveCategoryComboId( categoryCombo, idScheme );\n+\n+            attrOptCombo = getAttributeOptionCombo( idScheme, id, categoryOptions );\n+\n+            if ( attrOptCombo == null )\n+            {\n+                throw new IllegalQueryException(\n+                    \"Attribute option combo does not exist for given category combo and category options\" );\n+            }\n+        }\n+        else if ( attributeOptionCombo != null )\n+        {\n+            attrOptCombo = getCategoryOptionCombo( idScheme, attributeOptionCombo );\n+        }\n+\n+        // ---------------------------------------------------------------------\n+        // Fall back to default category option combination\n+        // ---------------------------------------------------------------------\n+\n+        if ( attrOptCombo == null )\n+        {\n+            attrOptCombo = getDefault();\n+        }\n+\n+        if ( attrOptCombo == null )\n+        {\n+            throw new IllegalQueryException( \"Default attribute option combo does not exist\" );\n+        }\n+\n+        return attrOptCombo;\n+    }\n+\n+    private String resolveCategoryComboId( CategoryCombo categoryCombo, IdScheme idScheme )\n+    {\n+        String id = null;\n+\n+        if ( idScheme.is( IdentifiableProperty.ID ) )\n+        {\n+            id = String.valueOf( categoryCombo.getId() );\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.UID ) )\n+        {\n+            id = categoryCombo.getUid();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.CODE ) )\n+        {\n+            id = categoryCombo.getCode();\n+        }\n+        else if ( idScheme.is( IdentifiableProperty.NAME ) )\n+        {\n+            id = categoryCombo.getName();\n+        }\n+\n+        return id;\n+    }\n+\n+    private CategoryOptionCombo getAttributeOptionCombo( IdScheme idScheme, String categoryComboId, Set<CategoryOption> categoryOptions) {\n+\n+        final String key = \"categorycomboid\";\n+        final String categoryComboKey = resolveId( idScheme, key, categoryComboId);\n+\n+        final String optionsId = categoryOptions.stream()\n+            .map( co -> Long.toString( co.getId() ) )\n+            .map(s -> \"'\" + s + \"'\")\n+            .collect( Collectors.joining( \",\" ) );\n+\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+                .put( \"resolvedScheme\", Objects.requireNonNull( categoryComboKey ) )\n+                .put( \"option_ids\", optionsId )\n+                .build() );\n+        // @formatter:on\n+        \n+        // TODO use cache\n+        List<CategoryOptionCombo> categoryOptionCombos = jdbcTemplate\n+            .query( sub.replace( SQL_GET_CATEGORYOPTIONCOMBO_BY_CATEGORYIDS ), ( rs, i ) -> bind( key, rs ) );\n+\n+        if ( categoryOptionCombos.size() == 1 )\n+        {\n+            return categoryOptionCombos.get( 0 );\n+        }\n+        else\n+        {\n+            // TODO throw an error??\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Fetches a {@see CategoryOptionCombo} by \"id\" (based on the provided IdScheme)\n+     *\n+     * The {@see CategoryOptionCombo} contains tha associated {@see CategoryCombo}\n+     * and all the associated {@see CategoryOption}\n+     *\n+     * @param idScheme a {@see IdScheme}\n+     * @param id the {@see CategoryOptionCombo} id to use\n+     * @return a {@see CategoryOptionCombo} or null\n+     */\n+    private CategoryOptionCombo loadCategoryOptionCombo( IdScheme idScheme, String id )\n+    {\n+        String key = \"categoryoptioncomboid\";\n+        // @formatter:off\n+        StrSubstitutor sub = new StrSubstitutor( ImmutableMap.<String, String>builder()\n+            .put( \"key\", key )\n+            .put( \"resolvedScheme\", Objects.requireNonNull(resolveId(idScheme, key, id)))", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\nindex f18bcdf5a5..d8e807d79f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\n@@ -37,15 +37,10 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.text.StrSubstitutor;\n import org.apache.logging.log4j.util.Strings;\n-import org.cache2k.Cache;\n-import org.cache2k.Cache2kBuilder;\n-import org.cache2k.integration.CacheLoader;\n import org.hisp.dhis.category.CategoryCombo;\n import org.hisp.dhis.category.CategoryOption;\n import org.hisp.dhis.category.CategoryOptionCombo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MjkxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461642918", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n          \n          \n            \n                        || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );", "author": "stian-sandvold", "createdAt": "2020-07-28T14:49:35Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.common.IdentifiableObjectUtils.getIdentifierBasedOnIdScheme;\n+import static org.hisp.dhis.dxf2.events.event.EventUtils.eventDataValuesToJson;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.eventdatavalue.EventDataValue;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.program.ValidationStrategy;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.system.util.ValidationUtils;\n+import org.hisp.dhis.user.User;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class DataValueCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        final Set<DataValue> dataValues = event.getDataValues();\n+        final ImportSummary importSummary = new ImportSummary();\n+        final User user = ctx.getImportOptions().getUser();\n+\n+        for ( DataValue dataValue : dataValues )\n+        {\n+            if ( !checkHasValidDataElement( importSummary, ctx, dataValue )\n+                || !checkSerializeToJson( importSummary, ctx, dataValue ) )\n+            {\n+                importSummary.setStatus( ImportStatus.ERROR );\n+                importSummary.setReference( event.getUid() );\n+                importSummary.incrementIgnored();\n+\n+                return importSummary;\n+            }\n+        }\n+\n+        if ( importSummary.getConflicts().isEmpty() )\n+        {\n+            if ( doValidationOfMandatoryAttributes( user ) && isValidationRequired( event, ctx ) )\n+            {\n+                validateMandatoryAttributes( importSummary, ctx, event );\n+            }\n+        }\n+\n+        if ( !importSummary.getConflicts().isEmpty() )\n+        {\n+            importSummary.setStatus( ImportStatus.ERROR );\n+            importSummary.setReference( event.getUid() );\n+            importSummary.incrementIgnored();\n+        }\n+\n+        return importSummary;\n+    }\n+\n+    public void validateMandatoryAttributes( ImportSummary importSummary, WorkContext ctx,\n+        ImmutableEvent event )\n+    {\n+        if ( StringUtils.isEmpty( event.getProgramStage() ) )\n+            return;\n+\n+        final IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n+        final IdScheme dataElementIdScheme = ctx.getImportOptions().getIdSchemes().getDataElementIdScheme();\n+        final Map<String, Set<EventDataValue>> eventDataValueMap = ctx.getEventDataValueMap();\n+\n+        ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, event.getProgramStage() );\n+\n+        final Set<ProgramStageDataElement> mandatoryDataElements = programStage.getProgramStageDataElements();\n+\n+        // Data Element IDs associated to the current event\n+        Set<String> dataValues = eventDataValueMap.get( event.getUid() ).stream().map( EventDataValue::getDataElement )\n+            .collect( Collectors.toSet() );\n+\n+        for ( ProgramStageDataElement mandatoryDataElement : mandatoryDataElements )\n+        {\n+            String resolvedDataElementId = getIdentifierBasedOnIdScheme( mandatoryDataElement.getDataElement(),\n+                dataElementIdScheme );\n+            if ( !dataValues.contains( resolvedDataElementId ) )\n+            {\n+                importSummary.getConflicts()\n+                    .add( new ImportConflict( resolvedDataElementId, \"value_required_but_not_provided\" ) );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checks if the data value can be serialized to Json\n+     */\n+    private boolean checkSerializeToJson( ImportSummary importSummary, WorkContext ctx, DataValue dataValue )\n+    {\n+        try\n+        {\n+            eventDataValuesToJson( dataValue, ctx.getServiceDelegator().getJsonMapper() );\n+        }\n+        catch ( JsonProcessingException | SQLException e )\n+        {\n+            importSummary.getConflicts()\n+                .add( new ImportConflict( dataValue.getDataElement(), \"Invalid data value found.\" ) );\n+        }\n+        return importSummary.getConflicts().isEmpty();\n+    }\n+\n+    /**\n+     * Checks that the specified Data Element ID (uid/code/id) corresponds to an\n+     * existing Data Element\n+     *\n+     */\n+    private boolean checkHasValidDataElement( ImportSummary importSummary, WorkContext ctx, DataValue dataValue )\n+    {\n+        DataElement dataElement = ctx.getDataElementMap().get( dataValue.getDataElement() );\n+\n+        if ( dataElement == null )\n+        {\n+            // This can happen if a wrong data element identifier is provided\n+            importSummary.getConflicts().add(\n+                new ImportConflict( \"dataElement\", dataValue.getDataElement() + \" is not a valid data element\" ) );\n+        }\n+        else\n+        {\n+            final String status = ValidationUtils.dataValueIsValid( dataValue.getValue(), dataElement );\n+\n+            if ( status != null )\n+            {\n+                importSummary.getConflicts().add( new ImportConflict( dataElement.getUid(), status ) );\n+            }\n+        }\n+\n+        return importSummary.getConflicts().isEmpty();\n+    }\n+\n+    private boolean isValidationRequired( ImmutableEvent event, WorkContext ctx )\n+    {\n+        final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n+\n+        return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\nindex 61ab750dac..3b5f7d5cc9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n\n@@ -180,7 +180,7 @@ public class DataValueCheck implements Checker\n         final ValidationStrategy validationStrategy = getValidationStrategy( ctx, event );\n \n         return validationStrategy == null || validationStrategy == ValidationStrategy.ON_UPDATE_AND_INSERT\n-            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED);\n+            || (validationStrategy == ValidationStrategy.ON_COMPLETE && event.getStatus() == EventStatus.COMPLETED );\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NDEwMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461644103", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);\n          \n          \n            \n                    this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );", "author": "stian-sandvold", "createdAt": "2020-07-28T14:50:59Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.sql.SQLException;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import org.mockito.Mock;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<ProgramStageInstance>\n+{\n+    private ProgramStageInstanceSupplier subject;\n+\n+    @Mock\n+    private ProgramSupplier programSupplier;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        JsonMapper mapper = new JsonMapper();\n+        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\nindex cc7b12ced3..5051523fc0 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n\n@@ -63,7 +63,7 @@ public class ProgramStageInstanceSupplierTest extends AbstractSupplierTest<Progr\n     public void setUp()\n     {\n         JsonMapper mapper = new JsonMapper();\n-        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier);\n+        this.subject = new ProgramStageInstanceSupplier( jdbcTemplate, mapper, programSupplier );\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NDk1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461644957", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        convertToMap(dataElementMap), programStageInstanceA, false );\n          \n          \n            \n                        convertToMap( dataElementMap ), programStageInstanceA, false );", "author": "stian-sandvold", "createdAt": "2020-07-28T14:52:03Z", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java", "diffHunk": "@@ -462,7 +459,7 @@ public void testEventDataValuesUpdateAndDeletion()\n \n         //Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            dataElementMap, programStageInstanceA, false );\n+            convertToMap(dataElementMap), programStageInstanceA, false );", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\nindex 697274fd6e..065ec5921d 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/program/ProgramStageInstanceServiceTest.java\n\n@@ -459,7 +459,7 @@ public class ProgramStageInstanceServiceTest\n \n         //Update PSI: create 0, update 3, delete 1\n         programStageInstanceService.auditDataValuesChangesAndHandleFileDataValues( Collections.emptySet(), updatedEventDataValues, Collections.singleton( eventDataValueD ),\n-            convertToMap(dataElementMap), programStageInstanceA, false );\n+            convertToMap( dataElementMap ), programStageInstanceA, false );\n         programStageInstanceService.updateProgramStageInstance( programStageInstanceA );\n \n         //Check that there are 3 EventDataValues\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjA5Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461646092", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n          \n          \n            \n                                InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter", "author": "stian-sandvold", "createdAt": "2020-07-28T14:53:32Z", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.springframework.jdbc.core.ColumnMapRowMapper;\n+import org.springframework.jdbc.core.InterruptibleBatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.ParameterDisposer;\n+import org.springframework.jdbc.core.PreparedStatementCallback;\n+import org.springframework.jdbc.core.RowMapperResultSetExtractor;\n+import org.springframework.jdbc.support.GeneratedKeyHolder;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JDBC Utility methods\n+ */\n+public class JdbcUtils\n+{\n+    /**\n+     * Executes a JDBC batch update using the provided {@see JdbcTemplate}\n+     *\n+     * @param jdbcTemplate a JdbcTemplate\n+     * @param sql the SQL string to be executed\n+     * @param pss a {@see BatchPreparedStatementSetterWithKeyHolder} containing the binding information\n+     *\n+     * @return a int, where each element corresponds to an executed statement\n+     */\n+    public static <T> int[] batchUpdateWithKeyHolder( JdbcTemplate jdbcTemplate, final String sql,\n+        final BatchPreparedStatementSetterWithKeyHolder<T> pss )\n+    {\n+        return jdbcTemplate.execute( con -> con.prepareStatement( sql, Statement.RETURN_GENERATED_KEYS ),\n+            (PreparedStatementCallback<int[]>) ps -> {\n+                try\n+                {\n+                    int batchSize = pss.getBatchSize();\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 4e34e0299f..f168262802 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n\n@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null);\n+                        : null );\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NjMzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461646335", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    : null);\n          \n          \n            \n                                    : null );", "author": "stian-sandvold", "createdAt": "2020-07-28T14:53:49Z", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.springframework.jdbc.core.ColumnMapRowMapper;\n+import org.springframework.jdbc.core.InterruptibleBatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.ParameterDisposer;\n+import org.springframework.jdbc.core.PreparedStatementCallback;\n+import org.springframework.jdbc.core.RowMapperResultSetExtractor;\n+import org.springframework.jdbc.support.GeneratedKeyHolder;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JDBC Utility methods\n+ */\n+public class JdbcUtils\n+{\n+    /**\n+     * Executes a JDBC batch update using the provided {@see JdbcTemplate}\n+     *\n+     * @param jdbcTemplate a JdbcTemplate\n+     * @param sql the SQL string to be executed\n+     * @param pss a {@see BatchPreparedStatementSetterWithKeyHolder} containing the binding information\n+     *\n+     * @return a int, where each element corresponds to an executed statement\n+     */\n+    public static <T> int[] batchUpdateWithKeyHolder( JdbcTemplate jdbcTemplate, final String sql,\n+        final BatchPreparedStatementSetterWithKeyHolder<T> pss )\n+    {\n+        return jdbcTemplate.execute( con -> con.prepareStatement( sql, Statement.RETURN_GENERATED_KEYS ),\n+            (PreparedStatementCallback<int[]>) ps -> {\n+                try\n+                {\n+                    int batchSize = pss.getBatchSize();\n+                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                        ? (InterruptibleBatchPreparedStatementSetter) pss\n+                        : null);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\nindex 4e34e0299f..f168262802 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n\n@@ -67,9 +67,9 @@ public class JdbcUtils\n                 try\n                 {\n                     int batchSize = pss.getBatchSize();\n-                    InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter\n+                    InterruptibleBatchPreparedStatementSetter ipss = ( pss instanceof InterruptibleBatchPreparedStatementSetter\n                         ? (InterruptibleBatchPreparedStatementSetter) pss\n-                        : null);\n+                        : null );\n                     int[] result;\n                     KeyHolder keyHolder = new GeneratedKeyHolder();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NzQyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461647428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)\n          \n          \n            \n                public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )", "author": "stian-sandvold", "createdAt": "2020-07-28T14:55:07Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java", "diffHunk": "@@ -78,4 +80,17 @@ public void softDelete( List<String> eventIds )\n             softDelete( id );\n         }\n     }\n+\n+    public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\nindex 23f0c15d81..7e87da80ad 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/tracker/EventActions.java\n\n@@ -81,7 +81,7 @@ public class EventActions\n         }\n     }\n \n-    public JsonObject createEventBody(String orgUnitId, String programId, String programStageId)\n+    public JsonObject createEventBody( String orgUnitId, String programId, String programStageId )\n     {\n         JsonObject event = new JsonObject();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MDY5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461650693", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        public Set<User> load(Long userGroupId) {\n          \n          \n            \n                        public Set<User> load( Long userGroupId ) {", "author": "stian-sandvold", "createdAt": "2020-07-28T14:58:50Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.text.StrSubstitutor;\n+import org.cache2k.Cache;\n+import org.cache2k.Cache2kBuilder;\n+import org.cache2k.integration.CacheLoader;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventUtils;\n+import org.hisp.dhis.organisationunit.FeatureType;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.program.ValidationStrategy;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserAccess;\n+import org.hisp.dhis.user.UserGroup;\n+import org.hisp.dhis.user.UserGroupAccess;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * This supplier builds and caches a Map of all the Programs in the system.\n+ * For each Program, the following additional data is retrieved:\n+ *\n+ *\n+ *\n+ * @formatter:off\n+ *\n+         Program\n+         +\n+         |\n+         +---+ Program Stage (List)\n+         |           |\n+         |           +---+ User Access (ACL)\n+         |           |\n+         |           +---+ User Group Access (ACL)\n+         |\n+         |\n+         +---+ Category Combo\n+         |\n+         |\n+         +---+ Tracked Entity Instance\n+         |           |\n+         |           +---+ User Access (ACL)\n+         |           |\n+         |           +---+ User Group Access (ACL)\n+         |\n+         |\n+         |\n+         +---+ Organizational Unit (List)\n+         |\n+         +---+ User Access (ACL)\n+         |\n+         +---+ User Group Access (ACL)\n+ * @formatter:on\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+@Slf4j\n+@Component( \"workContextProgramsSupplier\" )\n+public class ProgramSupplier extends AbstractSupplier<Map<String, Program>>\n+{\n+    private final static String PROGRAM_CACHE_KEY = \"000P\";\n+\n+    private final ObjectMapper jsonMapper;\n+\n+    private final static String ATTRIBUTESCHEME_COL = \"attributevalues\";\n+\n+    // @formatter:off\n+    private final static String USER_ACCESS_SQL = \"select eua.${column_name}, eua.useraccessid, ua.useraccessid, ua.access, ua.userid, ui.uid \" +\n+        \"from ${table_name} eua \" +\n+        \"join useraccess ua on eua.useraccessid = ua.useraccessid \" +\n+        \"join userinfo ui on ui.userinfoid = ua.useraccessid \" +\n+        \"order by eua.${column_name}\";\n+\n+    private final static String USER_GROUP_ACCESS_SQL = \"select ega.${column_name}, ega.usergroupaccessid, u.access, u.usergroupid, ug.uid \" +\n+        \"from ${table_name} ega \" +\n+        \"join usergroupaccess u on ega.usergroupaccessid = u.usergroupaccessid \" +\n+        \"join usergroup ug on u.usergroupid = ug.usergroupid \" +\n+        \"order by ega.${column_name}\";\n+\n+    // Caches the entire Program hierarchy, including Program Stages and ACL data\n+    private final Cache<String, Map<String, Program>> programsCache = new Cache2kBuilder<String, Map<String, Program>>() {}\n+        .name( \"eventImportProgramCache\" + RandomStringUtils.randomAlphabetic(5) )\n+        .expireAfterWrite( 1, TimeUnit.MINUTES )\n+        .build();\n+\n+    // Caches the User Groups and the Users belonging to each group\n+    private final Cache<Long, Set<User>> userGroupCache = new Cache2kBuilder<Long, Set<User>>() {}\n+        .name( \"eventImportUserGroupCache\" + RandomStringUtils.randomAlphabetic(5) )\n+        .expireAfterWrite( 5, TimeUnit.MINUTES )\n+        .permitNullValues( true )\n+        .loader( new CacheLoader<Long, Set<User>>()\n+        {\n+            @Override\n+            public Set<User> load(Long userGroupId) {", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\nindex a711a8007d..77ac2aa631 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramSupplier.java\n\n@@ -38,8 +38,6 @@ import java.util.Set;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n-import lombok.extern.slf4j.Slf4j;\n-\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.text.StrSubstitutor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzA3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653070", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n          \n          \n            \n                    cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );", "author": "stian-sandvold", "createdAt": "2020-07-28T15:01:50Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        categoryOption1.setAutoFields();\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        categoryOption2.setAutoFields();\n+        manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n+\n+        Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n+        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n\n@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzIwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653208", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CategoryOption categoryOption1 = new CategoryOption(\"male\");\n          \n          \n            \n                    CategoryOption categoryOption1 = new CategoryOption( \"male\" );", "author": "stian-sandvold", "createdAt": "2020-07-28T15:02:02Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n\n@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzM1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CategoryOption categoryOption2 = new CategoryOption(\"female\");\n          \n          \n            \n                    CategoryOption categoryOption2 = new CategoryOption( \"female\" );", "author": "stian-sandvold", "createdAt": "2020-07-28T15:02:14Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -150,16 +169,32 @@ protected void setUpTest()\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n+        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        categoryOption1.setAutoFields();\n+        CategoryOption categoryOption2 = new CategoryOption(\"female\");", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n\n@@ -169,14 +169,14 @@ public class EventImportTest\n \n         trackedEntityInstanceMaleA = trackedEntityInstanceService.getTrackedEntityInstance( maleA );\n \n-        CategoryOption categoryOption1 = new CategoryOption(\"male\");\n+        CategoryOption categoryOption1 = new CategoryOption( \"male\" );\n         categoryOption1.setAutoFields();\n-        CategoryOption categoryOption2 = new CategoryOption(\"female\");\n+        CategoryOption categoryOption2 = new CategoryOption( \"female\" );\n         categoryOption2.setAutoFields();\n         manager.save( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n \n         Category cat1 = new Category( \"cat1\", DataDimensionType.DISAGGREGATION );\n-        cat1.setCategoryOptions( Lists.newArrayList(categoryOption1, categoryOption2));\n+        cat1.setCategoryOptions( Lists.newArrayList( categoryOption1, categoryOption2 ) );\n         manager.save( Lists.newArrayList( cat1  ) );\n \n         CategoryCombo categoryCombo = manager.getByName( CategoryCombo.class, \"default\" );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1MzU4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461653582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pi.setName(\"EventImportTestPI\");\n          \n          \n            \n                    pi.setName( \"EventImportTestPI\" );", "author": "stian-sandvold", "createdAt": "2020-07-28T15:02:32Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -221,10 +258,16 @@ protected void setUpTest()\n         pi.setProgram( programB );\n         pi.setStatus( ProgramStatus.ACTIVE );\n         pi.setStoredBy( \"test\" );\n+        pi.setName(\"EventImportTestPI\");", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\nindex 609c600143..362520472c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java\n\n@@ -258,7 +258,7 @@ public class EventImportTest\n         pi.setProgram( programB );\n         pi.setStatus( ProgramStatus.ACTIVE );\n         pi.setStoredBy( \"test\" );\n-        pi.setName(\"EventImportTestPI\");\n+        pi.setName( \"EventImportTestPI\" );\n         pi.setUid( CodeGenerator.generateUid() );\n         manager.save( pi );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDU4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461654587", "bodyText": "In this case, the test doesnt not indicate it should have more than 1 enrollment, so this seems like a problem with the test.", "author": "stian-sandvold", "createdAt": "2020-07-28T15:03:58Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -237,7 +280,12 @@ public void testAddEventOnProgramWithoutRegistration()\n         assertEquals( ImportStatus.SUCCESS, importSummaries.getStatus() );\n     }\n \n+    /**\n+     * TODO:  LUCIANO: this test has been ignored because the Importer should not import an event linked to a Program\n+     * with 2 or more Program Instances\n+     */\n     @Test\n+    @Ignore", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDc0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461654743", "bodyText": "Unused code", "author": "stian-sandvold", "createdAt": "2020-07-28T15:04:11Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/EventImportTest.java", "diffHunk": "@@ -468,21 +512,19 @@ private InputStream createEventJsonInputStream( String program, String programSt\n         dataValue.put( \"dataElement\", dataElement.getUid() );\n         dataValue.put( \"value\", value );\n \n-        JSONObject geometry = new JSONObject();\n-        geometry.put( \"type\", \"Point\" );\n-        JSONArray coordinates = new JSONArray();\n-        coordinates.add( \"1.33343\" );\n-        coordinates.add( \"-21.9954\" );\n-        geometry.put( \"coordinates\", coordinates );\n-        eventJsonPayload.put( \"geometry\", geometry );\n+//        JSONObject geometry = new JSONObject();", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTIyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655221", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n          \n          \n            \n                            || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )", "author": "stian-sandvold", "createdAt": "2020-07-28T15:04:52Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -163,7 +231,8 @@ public JdbcEventStore( StatementBuilder statementBuilder, @Qualifier( \"readOnlyJ\n \n         while ( rowSet.next() )\n         {\n-            if ( rowSet.getString( \"psi_uid\" ) == null || (params.getCategoryOptionCombo() == null && !isSuperUser && !userHasAccess( rowSet )) )\n+            if ( rowSet.getString( \"psi_uid\" ) == null\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..d51a904269 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\n@@ -232,7 +233,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n+                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n             {\n                 continue;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTY3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655672", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                catch ( JsonProcessingException | SQLException e)\n          \n          \n            \n                                catch ( JsonProcessingException | SQLException e )", "author": "stian-sandvold", "createdAt": "2020-07-28T15:05:26Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -303,49 +373,60 @@ public JdbcEventStore( StatementBuilder statementBuilder, @Qualifier( \"readOnlyJ\n         {\n             CachingMap<String, String> dataElementUidToIdentifierCache = new CachingMap<>();\n \n-            List<Collection<DataValue>> dataValuesList = events.stream().map( Event::getDataValues ).collect( Collectors.toList() );\n+            List<Collection<DataValue>> dataValuesList = events.stream().map( Event::getDataValues )\n+                .collect( Collectors.toList() );\n             populateCache( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n             convertDataValuesIdentifiers( dataElementIdScheme, dataValuesList, dataElementUidToIdentifierCache );\n         }\n \n         if ( params.getCategoryOptionCombo() == null && !isSuper( user ) )\n         {\n-            return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null && splitToArray( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev.getOptionSize() ).collect( Collectors.toList() );\n+            return events.stream().filter( ev -> ev.getAttributeCategoryOptions() != null\n+                && splitToArray( ev.getAttributeCategoryOptions(), TextUtils.SEMICOLON ).size() == ev.getOptionSize() )\n+                .collect( Collectors.toList() );\n         }\n \n         return events;\n     }\n \n-    private void validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n-        boolean validateCategoryOptionCombo )\n+    public void saveEvents( List<ProgramStageInstance> events )\n     {\n-        if ( StringUtils.isEmpty( rowSet.getString( \"p_identifier\" ) ) )\n+        try\n         {\n-            throw new IllegalStateException(\n-                String.format( \"Program %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"p_uid\" ), idSchemes.getProgramIdScheme().name() ) );\n+            saveAllComments( saveAllEvents( events ) );\n         }\n-\n-        if ( StringUtils.isEmpty( rowSet.getString( \"ps_identifier\" ) ) )\n+        catch ( Exception e )\n         {\n-            throw new IllegalStateException(\n-                String.format( \"ProgramStage %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"ps_uid\" ), idSchemes.getProgramStageIdScheme().name() ) );\n+            log.error( \"An error occurred saving a batch\", e );\n+            throw e;\n         }\n+    }\n \n-        if ( StringUtils.isEmpty( rowSet.getString( \"ou_identifier\" ) ) )\n+    @Override\n+    public void updateEvents( List<ProgramStageInstance> programStageInstances )\n+    {\n+        try\n         {\n-            throw new IllegalStateException(\n-                String.format( \"OrgUnit %s does not have a value assigned for idScheme %s\",\n-                    rowSet.getString( \"ou_uid\" ), idSchemes.getOrgUnitIdScheme().name() ) );\n+            jdbcTemplate.batchUpdate( UPDATE_EVENT_SQL, programStageInstances, programStageInstances.size(),\n+                ( ps, programStageInstance ) -> {\n+                    try\n+                    {\n+                        bindEventParamsForUpdate( ps, programStageInstance );\n+                    }\n+                    catch ( JsonProcessingException | SQLException e)", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..d51a904269 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\n@@ -413,7 +414,7 @@ public class JdbcEventStore implements EventStore\n                     {\n                         bindEventParamsForUpdate( ps, programStageInstance );\n                     }\n-                    catch ( JsonProcessingException | SQLException e)\n+                    catch ( JsonProcessingException | SQLException e )\n                     {\n                         log.warn( \"PSI failed to update and will be ignored. PSI UID: \" + programStageInstance.getUid(),\n                             programStageInstance.getUid(), e );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTg3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461655870", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n          \n          \n            \n                            || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )", "author": "stian-sandvold", "createdAt": "2020-07-28T15:05:41Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -412,7 +484,8 @@ private void validateIdentifiersPresence( SqlRowSet rowSet, IdSchemes idSchemes,\n \n         while ( rowSet.next() )\n         {\n-            if ( rowSet.getString( \"psi_uid\" ) == null || ( params.getCategoryOptionCombo() == null && !isSuperUser && !userHasAccess( rowSet ) ) )\n+            if ( rowSet.getString( \"psi_uid\" ) == null\n+                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..d51a904269 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\n@@ -485,7 +486,7 @@ public class JdbcEventStore implements EventStore\n         while ( rowSet.next() )\n         {\n             if ( rowSet.getString( \"psi_uid\" ) == null\n-                || (params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet )) )\n+                || ( params.getCategoryOptionCombo() == null && !isSuper( user ) && !userHasAccess( rowSet ) ) )\n             {\n                 continue;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NjI4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461656281", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())\n          \n          \n            \n                    if ( ( params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault() )", "author": "stian-sandvold", "createdAt": "2020-07-28T15:06:14Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -698,25 +792,29 @@ private String getEventSelectQuery( EventSearchParams params, List<OrganisationU\n \n         SqlHelper hlp = new SqlHelper();\n \n-        StringBuilder sqlBuilder = new StringBuilder().append( \"select \" + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n+        StringBuilder sqlBuilder = new StringBuilder().append( \"select \"\n+            + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n             + \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, coc.uid as coc_uid, \"\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n             + \"psi.created as psi_created, psi.lastupdated as psi_lastupdated, psi.completeddate as psi_completeddate, psi.deleted as psi_deleted, \"\n             + \"ST_AsText( psi.geometry ) as psi_geometry, au.uid as user_assigned, auc.username as user_assigned_username, \"\n             + \"cocco.categoryoptionid AS cocco_categoryoptionid, deco.uid AS deco_uid, \" );\n \n-        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault()) && !isSuper( user ) )\n+        if ( (params.getCategoryOptionCombo() == null || params.getCategoryOptionCombo().isDefault())", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..d51a904269 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\n@@ -792,8 +796,7 @@ public class JdbcEventStore implements EventStore\n \n         SqlHelper hlp = new SqlHelper();\n \n-        StringBuilder sqlBuilder = new StringBuilder().append( \"select \"\n-            + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n+        StringBuilder sqlBuilder = new StringBuilder().append( \"select \" + getEventSelectIdentifiersByIdScheme( params.getIdSchemes() ) + \" psi.uid as psi_uid, \"\n             + \"ou.uid as ou_uid, p.uid as p_uid, ps.uid as ps_uid, coc.uid as coc_uid, \"\n             + \"psi.programstageinstanceid as psi_id, psi.status as psi_status, psi.executiondate as psi_executiondate, \"\n             + \"psi.eventdatavalues as psi_eventdatavalues, psi.duedate as psi_duedate, psi.completedby as psi_completedby, psi.storedby as psi_storedby, \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NzQ3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461657478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.error(\"An error occurred saving a TrackedEntityComment\", e);\n          \n          \n            \n                        log.error( \"An error occurred saving a TrackedEntityComment\", e );", "author": "stian-sandvold", "createdAt": "2020-07-28T15:07:54Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java", "diffHunk": "@@ -1289,32 +1420,335 @@ private String getOrderQuery( EventSearchParams params )\n \n     private String getAttributeValueQuery()\n     {\n-        String sql = \"select pav.trackedentityinstanceid as pav_id, pav.created as pav_created, pav.lastupdated as pav_lastupdated, \"\n+        return \"select pav.trackedentityinstanceid as pav_id, pav.created as pav_created, pav.lastupdated as pav_lastupdated, \"\n             + \"pav.value as pav_value, ta.uid as ta_uid, ta.name as ta_name, ta.valuetype as ta_valuetype \"\n             + \"from trackedentityattributevalue pav \"\n             + \"inner join trackedentityattribute ta on pav.trackedentityattributeid=ta.trackedentityattributeid \";\n-\n-        return sql;\n     }\n \n     private boolean isSuper( User user )\n     {\n         return user == null || user.isSuper();\n     }\n \n+    /**\n+     * Saves a list of {@see ProgramStageInstance} using JDBC batch update.\n+     *\n+     * Note that this method is using JdbcTemplate to execute the batch operation,\n+     * therefore it's able to participate in any Spring-initiated transaction\n+     *\n+     * @param batch the list of {@see ProgramStageInstance}\n+     * @return the list of created {@see ProgramStageInstance} with primary keys\n+     *         assigned\n+     *\n+     */\n+    private List<ProgramStageInstance> saveAllEvents( List<ProgramStageInstance> batch )\n+    {\n+        JdbcUtils.batchUpdateWithKeyHolder( jdbcTemplate, INSERT_EVENT_SQL,\n+                new BatchPreparedStatementSetterWithKeyHolder<ProgramStageInstance>( batch )\n+            {\n+                @Override\n+                protected void setValues( PreparedStatement ps, ProgramStageInstance event )\n+                {\n+                    try\n+                    {\n+                        bindEventParamsForInsert( ps, event );\n+                    }\n+                    catch ( JsonProcessingException | SQLException e )\n+                    {\n+                        log.warn( \"PSI failed to persist and will be ignored. PSI UID: \" + event.getUid(),\n+                            event.getUid(), e );\n+                    }\n+                }\n+\n+                @Override\n+                protected void setPrimaryKey( Map<String, Object> primaryKey, ProgramStageInstance event )\n+                {\n+                    event.setId( (Long) primaryKey.get( \"programstageinstanceid\" ) );\n+                }\n+\n+                } );\n+\n+        /*\n+         * Extract the primary keys from the created objects\n+         */\n+        List<Long> eventIds = batch.stream().map( BaseIdentifiableObject::getId ).collect( Collectors.toList() );\n+\n+        /*\n+         * Assign the generated event PKs to the batch.\n+         *\n+         * If the generate event PKs size doesn't match the batch size, one or more PSI\n+         * were not persisted. Run an additional query to fetch the persisted PSI and\n+         * return only the PSI from the batch which are persisted.\n+         *\n+         */\n+        if ( eventIds.size() != batch.size() )\n+        {\n+            /* a Map where [key] -> PSI UID , [value] -> PSI ID */\n+            Map<String, Long> persisted = jdbcTemplate\n+                    .queryForList(\n+                            \"SELECT uid, programstageinstanceid from programstageinstance where programstageinstanceid in ( \"\n+                                    + Joiner.on( \";\" ).join( eventIds ) + \")\" )\n+                    .stream().collect(\n+                            Collectors.toMap( s -> (String) s.get( \"uid\" ), s -> (Long) s.get( \"programstageinstanceid\" ) ) );\n+\n+            // @formatter:off\n+            return batch.stream()\n+                    .filter( psi -> persisted.containsKey( psi.getUid() ) )\n+                    .peek( psi -> psi.setId( persisted.get( psi.getUid() ) ) )\n+                    .collect( Collectors.toList() );\n+            // @formatter:on\n+        }\n+        else\n+        {\n+            for ( int i = 0; i < eventIds.size(); i++ )\n+            {\n+                batch.get( i ).setId( eventIds.get( i ) );\n+            }\n+            return batch;\n+        }\n+    }\n+\n+    /**\n+     * Save all the comments ({@see TrackedEntityComment} for the list of\n+     * {@see ProgramStageInstance}\n+     * \n+     * @param batch a List of {@see ProgramStageInstance}\n+     */\n+    private void saveAllComments( List<ProgramStageInstance> batch )\n+    {\n+        try\n+        {\n+            for ( ProgramStageInstance psi : batch )\n+            {\n+                int sortOrder = 1;\n+                if ( psi.getId() > 0 )\n+                {\n+                    // if the PSI is already in the db, fetch the latest sort order for the\n+                    // notes, to avoid conflicts\n+                    sortOrder = jdbcTemplate.queryForObject(\n+                        \"select coalesce(max(sort_order) + 1, 1) from programstageinstancecomments where programstageinstanceid = \"\n+                            + psi.getId(),\n+                        Integer.class );\n+                }\n+                List<TrackedEntityComment> comments = psi.getComments();\n+\n+                for ( TrackedEntityComment comment : comments )\n+                {\n+                    if ( !StringUtils.isEmpty( comment.getCommentText() ) )\n+                    {\n+                        Long commentId = saveComment( comment );\n+                        if ( commentId != null && commentId != 0 )\n+                        {\n+                            saveCommentToEvent( psi.getId(), commentId, sortOrder );\n+                            sortOrder++;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        catch ( DataAccessException dae )\n+        {\n+            log.error( \"An error occurred saving a Program Stage Instance comment\", dae );\n+            throw dae;\n+        }\n+    }\n+\n+    private Long saveComment( TrackedEntityComment comment )\n+    {\n+        KeyHolder keyHolder = new GeneratedKeyHolder();\n+\n+        try\n+        {\n+            jdbcTemplate.update( connection -> {\n+                PreparedStatement ps = connection.prepareStatement( INSERT_EVENT_NOTE_SQL, new String[]{\"trackedentitycommentid\"} );\n+\n+                ps.setString( 1, comment.getUid() );\n+                ps.setString( 2, comment.getCommentText() );\n+                ps.setTimestamp( 3, toTimestamp( comment.getCreated() ) );\n+                ps.setString( 4, comment.getCreator() );\n+                ps.setTimestamp( 5, toTimestamp( comment.getLastUpdated() ) );\n+\n+                return ps;\n+            }, keyHolder );\n+        }\n+        catch ( DataAccessException e )\n+        {\n+            log.error(\"An error occurred saving a TrackedEntityComment\", e);", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\nindex 3ed951650f..d51a904269 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\n@@ -1574,7 +1583,7 @@ public class JdbcEventStore implements EventStore\n         }\n         catch ( DataAccessException e )\n         {\n-            log.error(\"An error occurred saving a TrackedEntityComment\", e);\n+            log.error( \"An error occurred saving a TrackedEntityComment\", e );\n             return null;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1ODc3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461658770", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n          \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );", "author": "stian-sandvold", "createdAt": "2020-07-28T15:09:49Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.hisp.dhis.DhisConvenienceTest.createTrackedEntityInstance;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheckTest extends BaseValidationTest\n+{\n+    private ProgramInstanceCheck rule;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramInstanceCheck();\n+\n+        //\n+        // Program\n+        //\n+        program = createProgram( 'P' );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( program.getUid(), program );\n+\n+        when( workContext.getProgramsMap() ).thenReturn( programMap );\n+\n+    }\n+\n+    @Test\n+    public void failOnNoProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 3c53d0a513..899ab88f52 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n\n@@ -90,7 +90,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n \n         event.setProgram( program.getUid() );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1OTAyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r461659026", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n          \n          \n            \n                    when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );", "author": "stian-sandvold", "createdAt": "2020-07-28T15:10:11Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.hisp.dhis.DhisConvenienceTest.createTrackedEntityInstance;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheckTest extends BaseValidationTest\n+{\n+    private ProgramInstanceCheck rule;\n+\n+    private Program program;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramInstanceCheck();\n+\n+        //\n+        // Program\n+        //\n+        program = createProgram( 'P' );\n+        Map<String, Program> programMap = new HashMap<>();\n+        programMap.put( program.getUid(), program );\n+\n+        when( workContext.getProgramsMap() ).thenReturn( programMap );\n+\n+    }\n+\n+    @Test\n+    public void failOnNoProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+\n+        event.setProgram( program.getUid() );\n+\n+        //\n+        // Method under test\n+        //\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+        assertHasError( summary, event,\n+            \"Tracked entity instance: \" + tei.getUid() + \" is not enrolled in program: \" + program.getUid() );\n+    }\n+\n+    @Test\n+    public void failOnMultipleProgramInstanceByActiveProgramAndTei()\n+    {\n+        // Data preparation\n+\n+        //\n+        // Program Instance\n+        //\n+        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n+\n+        //\n+        // Tracked Entity Instance\n+        //\n+        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );", "originalCommit": "dc20b8a9249359bcdd1f612b1852f728ef63b7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\nindex 3c53d0a513..899ab88f52 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n\n@@ -90,7 +90,7 @@ public class ProgramInstanceCheckTest extends BaseValidationTest\n         // Tracked Entity Instance\n         //\n         TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n-        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of(tei) );\n+        when( workContext.getTrackedEntityInstance( event.getUid() ) ).thenReturn( Optional.of( tei ) );\n \n         event.setProgram( program.getUid() );\n \n"}}, {"oid": "ed0f770edd206b5c14381f2dd40965250be67604", "url": "https://github.com/dhis2/dhis2-core/commit/ed0f770edd206b5c14381f2dd40965250be67604", "message": "minor", "committedDate": "2020-08-19T10:17:58Z", "type": "forcePushed"}, {"oid": "d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "url": "https://github.com/dhis2/dhis2-core/commit/d0687a6c7c9e1c4dd64c4dc669bb80ae6e8c8c8b", "message": "minor", "committedDate": "2020-08-20T13:07:44Z", "type": "forcePushed"}, {"oid": "d360652a896bee650a842567e26cd1e62145cccb", "url": "https://github.com/dhis2/dhis2-core/commit/d360652a896bee650a842567e26cd1e62145cccb", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-08-24T07:25:02Z", "type": "commit"}, {"oid": "b29a3689068bb66746fb12bde65911fdcfe74a44", "url": "https://github.com/dhis2/dhis2-core/commit/b29a3689068bb66746fb12bde65911fdcfe74a44", "message": "fix: Addressing most critical Sonar issues", "committedDate": "2020-08-24T07:25:05Z", "type": "commit"}, {"oid": "f11afecb9fbfeca38614a5d8fce161251c1ce978", "url": "https://github.com/dhis2/dhis2-core/commit/f11afecb9fbfeca38614a5d8fce161251c1ce978", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-08-24T07:25:46Z", "type": "commit"}, {"oid": "36261241c249c98420e0a27230487b6d708c0988", "url": "https://github.com/dhis2/dhis2-core/commit/36261241c249c98420e0a27230487b6d708c0988", "message": "chore: fix Sonar issue", "committedDate": "2020-08-24T07:25:48Z", "type": "commit"}, {"oid": "e1e41fcceb231f4f04d3d6e172a57bda84f84a47", "url": "https://github.com/dhis2/dhis2-core/commit/e1e41fcceb231f4f04d3d6e172a57bda84f84a47", "message": "fix: failing integration tests", "committedDate": "2020-08-24T07:25:48Z", "type": "commit"}, {"oid": "2020b1193dc477750358ee3c14ab28a3c786a517", "url": "https://github.com/dhis2/dhis2-core/commit/2020b1193dc477750358ee3c14ab28a3c786a517", "message": "fix: add test, fix Sonar issues", "committedDate": "2020-08-24T07:25:49Z", "type": "commit"}, {"oid": "267b4550e5811b4093744dbd2aea8238914beaea", "url": "https://github.com/dhis2/dhis2-core/commit/267b4550e5811b4093744dbd2aea8238914beaea", "message": "chore: header fix", "committedDate": "2020-08-24T07:25:49Z", "type": "commit"}, {"oid": "bf042296956c38e5762dc2763da53fe23bc444a3", "url": "https://github.com/dhis2/dhis2-core/commit/bf042296956c38e5762dc2763da53fe23bc444a3", "message": "fix: Adding missing @author tags.", "committedDate": "2020-08-24T07:25:49Z", "type": "commit"}, {"oid": "c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "url": "https://github.com/dhis2/dhis2-core/commit/c9cbe9cf8b22a49324c53b68eba31b9c63684df4", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:49Z", "type": "commit"}, {"oid": "5a67d8f44e44ad24c05546974dc5ddc6e3afee06", "url": "https://github.com/dhis2/dhis2-core/commit/5a67d8f44e44ad24c05546974dc5ddc6e3afee06", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:50Z", "type": "commit"}, {"oid": "2f23e3b49f087c42aaec77bfd3279ff45f813977", "url": "https://github.com/dhis2/dhis2-core/commit/2f23e3b49f087c42aaec77bfd3279ff45f813977", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:50Z", "type": "commit"}, {"oid": "17e4effbd84888b9241be64afaf8bf2300188dab", "url": "https://github.com/dhis2/dhis2-core/commit/17e4effbd84888b9241be64afaf8bf2300188dab", "message": "Fix code style", "committedDate": "2020-08-24T07:25:50Z", "type": "commit"}, {"oid": "53fe69844f9b0fa1dc808e576d47cde1750a2323", "url": "https://github.com/dhis2/dhis2-core/commit/53fe69844f9b0fa1dc808e576d47cde1750a2323", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of github.com:dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-08-24T07:25:50Z", "type": "commit"}, {"oid": "3c8f41c735411594987ddc42bdca61aeb5ef235b", "url": "https://github.com/dhis2/dhis2-core/commit/3c8f41c735411594987ddc42bdca61aeb5ef235b", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:51Z", "type": "commit"}, {"oid": "68660788fe715d43383bc84512186e26eed2e2b2", "url": "https://github.com/dhis2/dhis2-core/commit/68660788fe715d43383bc84512186e26eed2e2b2", "message": "chore: addressed review comments", "committedDate": "2020-08-24T07:25:51Z", "type": "commit"}, {"oid": "53586c57f8aad6b4ad9a7ebd87bfd1c82363090f", "url": "https://github.com/dhis2/dhis2-core/commit/53586c57f8aad6b4ad9a7ebd87bfd1c82363090f", "message": "chore: removed unused var", "committedDate": "2020-08-24T07:25:51Z", "type": "commit"}, {"oid": "17570284d442dc97d1db84a6aa1af047bda1b106", "url": "https://github.com/dhis2/dhis2-core/commit/17570284d442dc97d1db84a6aa1af047bda1b106", "message": "chore: fix warnings with append in sql strings", "committedDate": "2020-08-24T07:32:03Z", "type": "commit"}, {"oid": "5a102a5c179d008a301b96f632b00b634b1300eb", "url": "https://github.com/dhis2/dhis2-core/commit/5a102a5c179d008a301b96f632b00b634b1300eb", "message": "Apply suggestions from code review\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:05Z", "type": "commit"}, {"oid": "5692db3b36ce7f06b1050881c6be08745b2a62c1", "url": "https://github.com/dhis2/dhis2-core/commit/5692db3b36ce7f06b1050881c6be08745b2a62c1", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/TrackedEntityInstanceCheck.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:05Z", "type": "commit"}, {"oid": "749b65cd80e56af3c34ef203ba9a14130240148f", "url": "https://github.com/dhis2/dhis2-core/commit/749b65cd80e56af3c34ef203ba9a14130240148f", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:05Z", "type": "commit"}, {"oid": "7758f81c74f90581703a6fd01ecc0971903d7d4f", "url": "https://github.com/dhis2/dhis2-core/commit/7758f81c74f90581703a6fd01ecc0971903d7d4f", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/WorkContextLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:06Z", "type": "commit"}, {"oid": "1e3bc2a1293c9720dda2329b78be93a83b97859a", "url": "https://github.com/dhis2/dhis2-core/commit/1e3bc2a1293c9720dda2329b78be93a83b97859a", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:06Z", "type": "commit"}, {"oid": "c4fc1c843d33376b40e8f076b9b9d98ea19dc14d", "url": "https://github.com/dhis2/dhis2-core/commit/c4fc1c843d33376b40e8f076b9b9d98ea19dc14d", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:06Z", "type": "commit"}, {"oid": "230950833d8ba48a7339783c3b5a0260f02cb7ff", "url": "https://github.com/dhis2/dhis2-core/commit/230950833d8ba48a7339783c3b5a0260f02cb7ff", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:06Z", "type": "commit"}, {"oid": "3e9ade20b53796ad8dfeb5a7880ff3f8bd8a206c", "url": "https://github.com/dhis2/dhis2-core/commit/3e9ade20b53796ad8dfeb5a7880ff3f8bd8a206c", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/JdbcEventStore.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "3e7dcacd8fdb4fa0b12001ac4a1f25bb3856cf36", "url": "https://github.com/dhis2/dhis2-core/commit/3e7dcacd8fdb4fa0b12001ac4a1f25bb3856cf36", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "9b1334c65290249b47fcdb9da2fa28233b89c4c3", "url": "https://github.com/dhis2/dhis2-core/commit/9b1334c65290249b47fcdb9da2fa28233b89c4c3", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "4cea02fc02a75b8d632b05e88e658ef6ead684d9", "url": "https://github.com/dhis2/dhis2-core/commit/4cea02fc02a75b8d632b05e88e658ef6ead684d9", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "d35ce54afc25738b16d10df6a94d2d2af65f4fcb", "url": "https://github.com/dhis2/dhis2-core/commit/d35ce54afc25738b16d10df6a94d2d2af65f4fcb", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:07Z", "type": "commit"}, {"oid": "db6ca8d4f094185498ffe98477bc844733c3eb7f", "url": "https://github.com/dhis2/dhis2-core/commit/db6ca8d4f094185498ffe98477bc844733c3eb7f", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/AttributeOptionComboLoader.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "2d17da0606b0e9cb9cd45580513e0e2ed560daa2", "url": "https://github.com/dhis2/dhis2-core/commit/2d17da0606b0e9cb9cd45580513e0e2ed560daa2", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/DataValueCheck.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "081840032b231dc76f4ed8610100c428b7200acb", "url": "https://github.com/dhis2/dhis2-core/commit/081840032b231dc76f4ed8610100c428b7200acb", "message": "Update dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/JdbcUtils.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "6910e222ea71880240537b7ef0cb672865357a11", "url": "https://github.com/dhis2/dhis2-core/commit/6910e222ea71880240537b7ef0cb672865357a11", "message": "Update dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramStageInstanceSupplierTest.java\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "url": "https://github.com/dhis2/dhis2-core/commit/85c947b7cdb2c98af0c8d892a8fbc9f65784abe3", "message": "Apply suggestions from code review\n\nCo-authored-by: Stian Sandvold <stian@dhis2.org>", "committedDate": "2020-08-24T07:32:08Z", "type": "commit"}, {"oid": "2bafb84a2b042590bfaf5f8178cc2794528b0658", "url": "https://github.com/dhis2/dhis2-core/commit/2bafb84a2b042590bfaf5f8178cc2794528b0658", "message": "chore: code review fixes", "committedDate": "2020-08-24T07:32:09Z", "type": "commit"}, {"oid": "81ece3dd068a96e3b1bfa459595a284c582b28b1", "url": "https://github.com/dhis2/dhis2-core/commit/81ece3dd068a96e3b1bfa459595a284c582b28b1", "message": "chore: added comment", "committedDate": "2020-08-24T07:32:09Z", "type": "commit"}, {"oid": "61739bb12327dfaf4c04d8b8dab6368098566d3f", "url": "https://github.com/dhis2/dhis2-core/commit/61739bb12327dfaf4c04d8b8dab6368098566d3f", "message": "chore: added javadoc", "committedDate": "2020-08-24T07:32:09Z", "type": "commit"}, {"oid": "357070723c603f36a09e54f12ef16a691834627e", "url": "https://github.com/dhis2/dhis2-core/commit/357070723c603f36a09e54f12ef16a691834627e", "message": "chore: optimized imports", "committedDate": "2020-08-24T07:32:09Z", "type": "commit"}, {"oid": "7af8a9a6f190108fb2498a31e07e8cd5f374bb8c", "url": "https://github.com/dhis2/dhis2-core/commit/7af8a9a6f190108fb2498a31e07e8cd5f374bb8c", "message": "fix conflicts after rebase", "committedDate": "2020-08-24T07:32:45Z", "type": "commit"}, {"oid": "1bff454091a0b7820b277e3b3f08acaf14835feb", "url": "https://github.com/dhis2/dhis2-core/commit/1bff454091a0b7820b277e3b3f08acaf14835feb", "message": "minor", "committedDate": "2020-08-24T07:32:46Z", "type": "commit"}, {"oid": "f26f06066d897eee88acf41776c44f213116dcb5", "url": "https://github.com/dhis2/dhis2-core/commit/f26f06066d897eee88acf41776c44f213116dcb5", "message": "minor", "committedDate": "2020-08-24T07:32:46Z", "type": "commit"}, {"oid": "79170da662cbd611e328f5e20097bd7b9dca7611", "url": "https://github.com/dhis2/dhis2-core/commit/79170da662cbd611e328f5e20097bd7b9dca7611", "message": "fix: fix unit tests by disabling program cache", "committedDate": "2020-08-24T07:32:47Z", "type": "commit"}, {"oid": "7232c5cfd8aba46bbc42c295f116e5628b41fbac", "url": "https://github.com/dhis2/dhis2-core/commit/7232c5cfd8aba46bbc42c295f116e5628b41fbac", "message": "minor", "committedDate": "2020-08-24T07:32:47Z", "type": "commit"}, {"oid": "b3043f6c9dd7c40b383fb1c036cdc15a86d33c22", "url": "https://github.com/dhis2/dhis2-core/commit/b3043f6c9dd7c40b383fb1c036cdc15a86d33c22", "message": "fix: sonar warnings", "committedDate": "2020-08-24T07:38:10Z", "type": "commit"}, {"oid": "9102e2ff75b790dcd8b2692d12f6417cb2d29d0b", "url": "https://github.com/dhis2/dhis2-core/commit/9102e2ff75b790dcd8b2692d12f6417cb2d29d0b", "message": "fix: more sonar warnings fixes + unit tests", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "97c94bd4e175ca3e986bd4e45a118c5aa72ad614", "url": "https://github.com/dhis2/dhis2-core/commit/97c94bd4e175ca3e986bd4e45a118c5aa72ad614", "message": "fix: more sonar warnings fixes", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "244482e44a59886429c975502b2ad68b05940a2b", "url": "https://github.com/dhis2/dhis2-core/commit/244482e44a59886429c975502b2ad68b05940a2b", "message": "minor", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "50f6f1553f50a12b78143898b14b1a1f83e1b43a", "url": "https://github.com/dhis2/dhis2-core/commit/50f6f1553f50a12b78143898b14b1a1f83e1b43a", "message": "fix: expiry days validation check", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "38e2abf929bdc38f908fd1f87103422bcc9e7525", "url": "https://github.com/dhis2/dhis2-core/commit/38e2abf929bdc38f908fd1f87103422bcc9e7525", "message": "fix: un-ignore unit tests ignored in 2017", "committedDate": "2020-08-24T07:38:13Z", "type": "commit"}, {"oid": "b69de01a81d257192bec0d7332426ad46941012b", "url": "https://github.com/dhis2/dhis2-core/commit/b69de01a81d257192bec0d7332426ad46941012b", "message": "fix: Data Value single value update correctly implemented", "committedDate": "2020-08-24T07:38:14Z", "type": "commit"}, {"oid": "6d5dfad4224e06b38ab2316f7204dc8c89b81d1b", "url": "https://github.com/dhis2/dhis2-core/commit/6d5dfad4224e06b38ab2316f7204dc8c89b81d1b", "message": "chore: removed unused interface methods", "committedDate": "2020-08-24T07:38:14Z", "type": "commit"}, {"oid": "573c2307cfe13c64d3194199c4703facd9f06652", "url": "https://github.com/dhis2/dhis2-core/commit/573c2307cfe13c64d3194199c4703facd9f06652", "message": "minor", "committedDate": "2020-08-24T07:38:14Z", "type": "commit"}, {"oid": "573c2307cfe13c64d3194199c4703facd9f06652", "url": "https://github.com/dhis2/dhis2-core/commit/573c2307cfe13c64d3194199c4703facd9f06652", "message": "minor", "committedDate": "2020-08-24T07:38:14Z", "type": "forcePushed"}, {"oid": "2ac1febce672b312940d3ad561852b0db90926fd", "url": "https://github.com/dhis2/dhis2-core/commit/2ac1febce672b312940d3ad561852b0db90926fd", "message": "use ImportSummary instead of Exception for event dates", "committedDate": "2020-08-24T10:50:27Z", "type": "commit"}, {"oid": "0afc06f20ca0da37d98942b17c007f28af21925a", "url": "https://github.com/dhis2/dhis2-core/commit/0afc06f20ca0da37d98942b17c007f28af21925a", "message": "fix: fixes to DataValue handling", "committedDate": "2020-08-25T07:00:39Z", "type": "commit"}, {"oid": "a61dc512c370d29aba9f030a57d4552899241579", "url": "https://github.com/dhis2/dhis2-core/commit/a61dc512c370d29aba9f030a57d4552899241579", "message": "chore: address sonarqube issue with complexity", "committedDate": "2020-08-25T10:17:57Z", "type": "commit"}, {"oid": "afcbc1901a4bffe63f58ba38aea907acece5a9f6", "url": "https://github.com/dhis2/dhis2-core/commit/afcbc1901a4bffe63f58ba38aea907acece5a9f6", "message": "minor", "committedDate": "2020-08-25T10:21:52Z", "type": "commit"}, {"oid": "77b55aa41a3d22e1861d32c509f042dd80f32bdc", "url": "https://github.com/dhis2/dhis2-core/commit/77b55aa41a3d22e1861d32c509f042dd80f32bdc", "message": "fix: load parent ous for programinstances", "committedDate": "2020-05-15T19:30:51Z", "type": "commit"}, {"oid": "bf9ea0ce0cc99b6630683cef9a8f99af13fc0f89", "url": "https://github.com/dhis2/dhis2-core/commit/bf9ea0ce0cc99b6630683cef9a8f99af13fc0f89", "message": "fix: fixed program instance query", "committedDate": "2020-05-18T10:46:31Z", "type": "commit"}, {"oid": "f46e74e21205d01f7523d9fa9135d459a8c68635", "url": "https://github.com/dhis2/dhis2-core/commit/f46e74e21205d01f7523d9fa9135d459a8c68635", "message": "fix: reverted test config", "committedDate": "2020-05-18T10:47:21Z", "type": "commit"}, {"oid": "08edc0d8c0495009c60cb9dc15ea751ad6127b80", "url": "https://github.com/dhis2/dhis2-core/commit/08edc0d8c0495009c60cb9dc15ea751ad6127b80", "message": "fix: check if program needs registration", "committedDate": "2020-05-18T11:48:47Z", "type": "commit"}, {"oid": "0dd3b541aa414143a75cbe5efc021ab783896bc9", "url": "https://github.com/dhis2/dhis2-core/commit/0dd3b541aa414143a75cbe5efc021ab783896bc9", "message": "fix: typo", "committedDate": "2020-05-18T12:54:58Z", "type": "commit"}, {"oid": "80a19c9cd77f7713f831cdbe9c723f142aadfeaf", "url": "https://github.com/dhis2/dhis2-core/commit/80a19c9cd77f7713f831cdbe9c723f142aadfeaf", "message": "fix: refactor insert to execute operation in batch and do a retry in case of failure", "committedDate": "2020-05-18T15:25:27Z", "type": "commit"}, {"oid": "a5a477f06faa4a4452fcee7e623d043935c3e3d4", "url": "https://github.com/dhis2/dhis2-core/commit/a5a477f06faa4a4452fcee7e623d043935c3e3d4", "message": "fix: Transaction isolation", "committedDate": "2020-05-18T15:32:28Z", "type": "commit"}, {"oid": "c86f9c56fea0298891848a07d79a58e925b1d5ac", "url": "https://github.com/dhis2/dhis2-core/commit/c86f9c56fea0298891848a07d79a58e925b1d5ac", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-18T15:32:32Z", "type": "commit"}, {"oid": "fdd125c357e70d48aea322fdda984cb572ec1c19", "url": "https://github.com/dhis2/dhis2-core/commit/fdd125c357e70d48aea322fdda984cb572ec1c19", "message": "fix: Adding summary totals for update/delete", "committedDate": "2020-05-18T16:31:24Z", "type": "commit"}, {"oid": "b2380b005632be3fed4be03fb2f54fe59b37830f", "url": "https://github.com/dhis2/dhis2-core/commit/b2380b005632be3fed4be03fb2f54fe59b37830f", "message": "fix: harmonized insert and update operations to use same batch/retry approach", "committedDate": "2020-05-18T19:30:51Z", "type": "commit"}, {"oid": "e83699c58abc8d3c2eeaf1f577c4627af01b472d", "url": "https://github.com/dhis2/dhis2-core/commit/e83699c58abc8d3c2eeaf1f577c4627af01b472d", "message": "fix: Add data value JSON serializer checking", "committedDate": "2020-05-19T09:57:28Z", "type": "commit"}, {"oid": "342e60c3416337bbbc22e464114c80a8070a036c", "url": "https://github.com/dhis2/dhis2-core/commit/342e60c3416337bbbc22e464114c80a8070a036c", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-19T09:57:54Z", "type": "commit"}, {"oid": "125c8719b8bd06aefee9f762845923d25c1f4225", "url": "https://github.com/dhis2/dhis2-core/commit/125c8719b8bd06aefee9f762845923d25c1f4225", "message": "fix: initialize user to avoid issues during async processing", "committedDate": "2020-05-19T10:29:04Z", "type": "commit"}, {"oid": "4490e4fa2254f554ba096025b8b246e12ebc8b6b", "url": "https://github.com/dhis2/dhis2-core/commit/4490e4fa2254f554ba096025b8b246e12ebc8b6b", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: Add data value JSON serializer checking\n  fix: Ensure a weekly period does not come on two years (#5585)\n  fix: cant update attributeValue after change attribute name (#5494)\n  chore: Add javadoc and rename support methods (#5607)", "committedDate": "2020-05-19T10:39:11Z", "type": "commit"}, {"oid": "227ebc0d7eea92a7625341ad9f5028e125ae3afc", "url": "https://github.com/dhis2/dhis2-core/commit/227ebc0d7eea92a7625341ad9f5028e125ae3afc", "message": "fix: assignedUser should fetch user from userinfo!", "committedDate": "2020-05-19T12:34:04Z", "type": "commit"}, {"oid": "a6f5a4b867ed05b118f48c5dae45fc041d0ab631", "url": "https://github.com/dhis2/dhis2-core/commit/a6f5a4b867ed05b118f48c5dae45fc041d0ab631", "message": "fix: Failing program instance unit test", "committedDate": "2020-05-19T12:40:32Z", "type": "commit"}, {"oid": "929461b2b14f37ce89734acbe1686e4d155f5b95", "url": "https://github.com/dhis2/dhis2-core/commit/929461b2b14f37ce89734acbe1686e4d155f5b95", "message": "test(fix): use skipCache in use  assignment tests", "committedDate": "2020-05-19T13:21:42Z", "type": "commit"}, {"oid": "45fc8812fcc2569b5ff82d0ae325c7a69904d2fe", "url": "https://github.com/dhis2/dhis2-core/commit/45fc8812fcc2569b5ff82d0ae325c7a69904d2fe", "message": "- fix issue with event org unit and IdScheme different from UID\n- add unit test", "committedDate": "2020-05-20T09:55:58Z", "type": "commit"}, {"oid": "3e36097e712e91cea68891c5c90f854d264f2502", "url": "https://github.com/dhis2/dhis2-core/commit/3e36097e712e91cea68891c5c90f854d264f2502", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-20T12:30:14Z", "type": "commit"}, {"oid": "71f26a6f872d7745d1d665730bf9395b611fe52b", "url": "https://github.com/dhis2/dhis2-core/commit/71f26a6f872d7745d1d665730bf9395b611fe52b", "message": "- Add unit test for Program Ou check\n- Moved validation tests to correct package", "committedDate": "2020-05-22T09:32:52Z", "type": "commit"}, {"oid": "b2d0dd60a8344a88bce8c853d115f2d97d02898d", "url": "https://github.com/dhis2/dhis2-core/commit/b2d0dd60a8344a88bce8c853d115f2d97d02898d", "message": "java doc", "committedDate": "2020-05-22T09:32:52Z", "type": "commit"}, {"oid": "5f962d848ae7e5f4a6e184ce08656bc44cd65a12", "url": "https://github.com/dhis2/dhis2-core/commit/5f962d848ae7e5f4a6e184ce08656bc44cd65a12", "message": "java doc", "committedDate": "2020-05-22T09:44:01Z", "type": "commit"}, {"oid": "085ca0d2a3303832d44dde3483f3edcd13f8af5e", "url": "https://github.com/dhis2/dhis2-core/commit/085ca0d2a3303832d44dde3483f3edcd13f8af5e", "message": "chore: improved program SQL query", "committedDate": "2020-05-22T09:54:32Z", "type": "commit"}, {"oid": "a32821dde969902bfeb801ea7722b89efeb99320", "url": "https://github.com/dhis2/dhis2-core/commit/a32821dde969902bfeb801ea7722b89efeb99320", "message": "data value validation wip", "committedDate": "2020-05-22T11:03:07Z", "type": "commit"}, {"oid": "0cde7e238c17d06f0fc8c0c3eb58074920561022", "url": "https://github.com/dhis2/dhis2-core/commit/0cde7e238c17d06f0fc8c0c3eb58074920561022", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-25T07:02:53Z", "type": "commit"}, {"oid": "dc34f97b8e5c58c0a3390a1c8b17487d157daffe", "url": "https://github.com/dhis2/dhis2-core/commit/dc34f97b8e5c58c0a3390a1c8b17487d157daffe", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix(translations): sync translations from transifex (master)\n  fix: Filter result by data readable TET (#5487)\n  refactor: Removing duplication of code in the call of rule engine [DHIS2-7310] (#5606)", "committedDate": "2020-05-25T08:08:30Z", "type": "commit"}, {"oid": "87681d2249b3cfd5608ba6dc7656e77827ea328c", "url": "https://github.com/dhis2/dhis2-core/commit/87681d2249b3cfd5608ba6dc7656e77827ea328c", "message": "test: improve relationship tests cleanup", "committedDate": "2020-05-25T09:55:52Z", "type": "commit"}, {"oid": "f1369e2956f05ca00b04e302a1dc837d02ec16a3", "url": "https://github.com/dhis2/dhis2-core/commit/f1369e2956f05ca00b04e302a1dc837d02ec16a3", "message": "test: fix user assignment tests", "committedDate": "2020-05-25T10:01:02Z", "type": "commit"}, {"oid": "4c5824a79038e0535fd47662ade2022e09374ead", "url": "https://github.com/dhis2/dhis2-core/commit/4c5824a79038e0535fd47662ade2022e09374ead", "message": "test: fix user tests", "committedDate": "2020-05-25T10:08:15Z", "type": "commit"}, {"oid": "8cd3a3ed2d72ae3d1126f1cd286d612189846e3c", "url": "https://github.com/dhis2/dhis2-core/commit/8cd3a3ed2d72ae3d1126f1cd286d612189846e3c", "message": "test: fix user tests flakiness", "committedDate": "2020-05-25T10:16:40Z", "type": "commit"}, {"oid": "abbe9bd8e7ad5c386cfbeb70a3eaae03626f2083", "url": "https://github.com/dhis2/dhis2-core/commit/abbe9bd8e7ad5c386cfbeb70a3eaae03626f2083", "message": "Data Values validation + handling", "committedDate": "2020-05-25T12:34:40Z", "type": "commit"}, {"oid": "c6f23116501997b16ee0c3424c7dc1552cd11625", "url": "https://github.com/dhis2/dhis2-core/commit/c6f23116501997b16ee0c3424c7dc1552cd11625", "message": "fix: storedBy during update", "committedDate": "2020-05-25T14:13:38Z", "type": "commit"}, {"oid": "1e0bf371984fcb10047c4ba830ebb93300de4774", "url": "https://github.com/dhis2/dhis2-core/commit/1e0bf371984fcb10047c4ba830ebb93300de4774", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  test: fix user tests flakiness\n  test: fix user tests\n  test: fix user assignment tests\n  test: improve relationship tests cleanup", "committedDate": "2020-05-25T14:14:03Z", "type": "commit"}, {"oid": "5ef530be398581fc4c2d2d6efe3ff98e7ea83f5d", "url": "https://github.com/dhis2/dhis2-core/commit/5ef530be398581fc4c2d2d6efe3ff98e7ea83f5d", "message": "chore: javadoc", "committedDate": "2020-05-25T14:24:11Z", "type": "commit"}, {"oid": "fbb4c523505f44824c3f8da98406dfec5f46ace1", "url": "https://github.com/dhis2/dhis2-core/commit/fbb4c523505f44824c3f8da98406dfec5f46ace1", "message": "Removed DefaultEventDataValueService", "committedDate": "2020-05-25T14:36:17Z", "type": "commit"}, {"oid": "801528b1afa61931d0b477ef20acf1fc78f02452", "url": "https://github.com/dhis2/dhis2-core/commit/801528b1afa61931d0b477ef20acf1fc78f02452", "message": "test: event import with ouScheme (wip)", "committedDate": "2020-05-25T15:26:13Z", "type": "commit"}, {"oid": "d6cb185c36df48b93b6ddce26c64a484025da19c", "url": "https://github.com/dhis2/dhis2-core/commit/d6cb185c36df48b93b6ddce26c64a484025da19c", "message": "remove docker.sh", "committedDate": "2020-05-25T15:29:31Z", "type": "commit"}, {"oid": "e11b07fce2508e88d26df8620bc9ef528052edeb", "url": "https://github.com/dhis2/dhis2-core/commit/e11b07fce2508e88d26df8620bc9ef528052edeb", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  remove docker.sh\n  test: event import with ouScheme (wip)", "committedDate": "2020-05-25T15:31:21Z", "type": "commit"}, {"oid": "1984a6dc8a80a5c7a6a35cff2c79c99e0d26453e", "url": "https://github.com/dhis2/dhis2-core/commit/1984a6dc8a80a5c7a6a35cff2c79c99e0d26453e", "message": "fix: better missing program stage validation", "committedDate": "2020-05-25T17:44:12Z", "type": "commit"}, {"oid": "3c3f5871c5b1ea8844cf9e94a2108c2f286ac5cd", "url": "https://github.com/dhis2/dhis2-core/commit/3c3f5871c5b1ea8844cf9e94a2108c2f286ac5cd", "message": "test: adds test for ATTRIBUTE id scheme", "committedDate": "2020-05-26T09:28:38Z", "type": "commit"}, {"oid": "e6c09c67f1a5918ee8ff87124a64111b2e962220", "url": "https://github.com/dhis2/dhis2-core/commit/e6c09c67f1a5918ee8ff87124a64111b2e962220", "message": "fix: handle Attribute Scheme for OrgUnits", "committedDate": "2020-05-26T13:00:47Z", "type": "commit"}, {"oid": "c6675c8a85ed0a6f4af7b78a743b3b34a5de9918", "url": "https://github.com/dhis2/dhis2-core/commit/c6675c8a85ed0a6f4af7b78a743b3b34a5de9918", "message": "chore: add javadoc", "committedDate": "2020-05-26T13:08:03Z", "type": "commit"}, {"oid": "c078b4605d4b9454c2f7bb7244483e0773ee047b", "url": "https://github.com/dhis2/dhis2-core/commit/c078b4605d4b9454c2f7bb7244483e0773ee047b", "message": "chore: removed debug output", "committedDate": "2020-05-26T13:10:11Z", "type": "commit"}, {"oid": "452346c3683b89f82171f3c8db2184f6c2a8cc09", "url": "https://github.com/dhis2/dhis2-core/commit/452346c3683b89f82171f3c8db2184f6c2a8cc09", "message": "test: improved reporting", "committedDate": "2020-05-26T14:09:26Z", "type": "commit"}, {"oid": "799231cddc32fe7e60a6978c0dc6988280b485a0", "url": "https://github.com/dhis2/dhis2-core/commit/799231cddc32fe7e60a6978c0dc6988280b485a0", "message": "test: improved reporting", "committedDate": "2020-05-26T14:09:26Z", "type": "commit"}, {"oid": "beb9fbf829ac7234c43b8ee0f564787273a0086f", "url": "https://github.com/dhis2/dhis2-core/commit/beb9fbf829ac7234c43b8ee0f564787273a0086f", "message": "removed ignore from DataValue test", "committedDate": "2020-05-26T15:03:38Z", "type": "commit"}, {"oid": "1fd6dadf5c34bb1a67bd1a92ba633bba3501c0c0", "url": "https://github.com/dhis2/dhis2-core/commit/1fd6dadf5c34bb1a67bd1a92ba633bba3501c0c0", "message": "Add DataValueCheck test", "committedDate": "2020-05-26T19:36:43Z", "type": "commit"}, {"oid": "c7a3dcb06d356166e6606dc9be2726e6b6e83ccc", "url": "https://github.com/dhis2/dhis2-core/commit/c7a3dcb06d356166e6606dc9be2726e6b6e83ccc", "message": "test: fix id generation for events", "committedDate": "2020-05-27T10:57:33Z", "type": "commit"}, {"oid": "5d0893337de9f83d49c65287ee98cf0d8e794326", "url": "https://github.com/dhis2/dhis2-core/commit/5d0893337de9f83d49c65287ee98cf0d8e794326", "message": "test: adds test for event import with program id schemes", "committedDate": "2020-05-27T15:06:38Z", "type": "commit"}, {"oid": "36446b2e1f424ffd35338092e7598754d3acf64c", "url": "https://github.com/dhis2/dhis2-core/commit/36446b2e1f424ffd35338092e7598754d3acf64c", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-28T08:59:37Z", "type": "commit"}, {"oid": "693b67f5196f9d3fce8e68636958e1374de32c45", "url": "https://github.com/dhis2/dhis2-core/commit/693b67f5196f9d3fce8e68636958e1374de32c45", "message": "fix: Org Unit and Program attribute scheme", "committedDate": "2020-05-28T10:07:05Z", "type": "commit"}, {"oid": "1dc64d33c78bfae4814bd6f067bfe0451e810c24", "url": "https://github.com/dhis2/dhis2-core/commit/1dc64d33c78bfae4814bd6f067bfe0451e810c24", "message": "test: fix wrong attribute id for programs test", "committedDate": "2020-05-28T11:33:59Z", "type": "commit"}, {"oid": "539588c1c61d8c966192b80ac099114a64b140f3", "url": "https://github.com/dhis2/dhis2-core/commit/539588c1c61d8c966192b80ac099114a64b140f3", "message": "fix: failing unit tests", "committedDate": "2020-05-28T11:36:35Z", "type": "commit"}, {"oid": "fca07501a65d117eb20da807028b4bcc67967cfd", "url": "https://github.com/dhis2/dhis2-core/commit/fca07501a65d117eb20da807028b4bcc67967cfd", "message": "test: fix name", "committedDate": "2020-05-28T11:58:23Z", "type": "commit"}, {"oid": "e45dbae5b9615c4eac49148c6a2270ed30537ea2", "url": "https://github.com/dhis2/dhis2-core/commit/e45dbae5b9615c4eac49148c6a2270ed30537ea2", "message": "chore: minor", "committedDate": "2020-05-28T13:45:14Z", "type": "commit"}, {"oid": "31dca8a51264f021dbfc4d9ecb48657c4585d89c", "url": "https://github.com/dhis2/dhis2-core/commit/31dca8a51264f021dbfc4d9ecb48657c4585d89c", "message": "fix: success message on Event delete", "committedDate": "2020-05-28T13:45:14Z", "type": "commit"}, {"oid": "b55222babf0aad7678f40a3306364abc6cd12b22", "url": "https://github.com/dhis2/dhis2-core/commit/b55222babf0aad7678f40a3306364abc6cd12b22", "message": "test: adds event import data value validation tests (WIP)", "committedDate": "2020-05-29T10:31:31Z", "type": "commit"}, {"oid": "f078195d27eefccc1a58dd3600ae8e226a004e6e", "url": "https://github.com/dhis2/dhis2-core/commit/f078195d27eefccc1a58dd3600ae8e226a004e6e", "message": "test: fix formatting", "committedDate": "2020-05-29T10:32:54Z", "type": "commit"}, {"oid": "f283bc785f45ba6dae194df9ee1718a9fe57e78a", "url": "https://github.com/dhis2/dhis2-core/commit/f283bc785f45ba6dae194df9ee1718a9fe57e78a", "message": "test: use actions references", "committedDate": "2020-05-29T10:35:10Z", "type": "commit"}, {"oid": "abcd54ef3f601ff527a3d3141490dec633040535", "url": "https://github.com/dhis2/dhis2-core/commit/abcd54ef3f601ff527a3d3141490dec633040535", "message": "test: adds tests for validation of event data values", "committedDate": "2020-06-03T11:50:40Z", "type": "commit"}, {"oid": "8225b0bedb8d9ae8c6d311360bea1d6d97aaa829", "url": "https://github.com/dhis2/dhis2-core/commit/8225b0bedb8d9ae8c6d311360bea1d6d97aaa829", "message": "test: fix compilation error", "committedDate": "2020-06-03T12:16:08Z", "type": "commit"}, {"oid": "ff7b1ea6f57ab9a8b82e34d74f478175efe74b73", "url": "https://github.com/dhis2/dhis2-core/commit/ff7b1ea6f57ab9a8b82e34d74f478175efe74b73", "message": "fix: trigger Data Value validation on event with no data values", "committedDate": "2020-06-03T12:32:57Z", "type": "commit"}, {"oid": "efb6901bcbb4044f4f49e8e6d92efedb3d8377cd", "url": "https://github.com/dhis2/dhis2-core/commit/efb6901bcbb4044f4f49e8e6d92efedb3d8377cd", "message": "test: adds more tests for data value validation", "committedDate": "2020-06-03T14:25:16Z", "type": "commit"}, {"oid": "6f0a9e221514b7d3b9bf3d440df8d06f883b3b73", "url": "https://github.com/dhis2/dhis2-core/commit/6f0a9e221514b7d3b9bf3d440df8d06f883b3b73", "message": "test: adds test for ou validation", "committedDate": "2020-06-04T08:10:05Z", "type": "commit"}, {"oid": "63475482cb77f0dfd588dd6bf45e43767f15f229", "url": "https://github.com/dhis2/dhis2-core/commit/63475482cb77f0dfd588dd6bf45e43767f15f229", "message": "test: more tests for event validation", "committedDate": "2020-06-04T08:34:06Z", "type": "commit"}, {"oid": "60ec9f594e6c0a19e992f9f1994f4dd01cd5f0c1", "url": "https://github.com/dhis2/dhis2-core/commit/60ec9f594e6c0a19e992f9f1994f4dd01cd5f0c1", "message": "test: fix test to use tracker program", "committedDate": "2020-06-04T08:58:57Z", "type": "commit"}, {"oid": "a734ad6b2ed23eaacdfc5da10fbbe804af578749", "url": "https://github.com/dhis2/dhis2-core/commit/a734ad6b2ed23eaacdfc5da10fbbe804af578749", "message": "test: adds test for ou access", "committedDate": "2020-06-04T09:13:13Z", "type": "commit"}, {"oid": "00aecaa3e0291b40a385bdbf8e3fe4e6c772226c", "url": "https://github.com/dhis2/dhis2-core/commit/00aecaa3e0291b40a385bdbf8e3fe4e6c772226c", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-05T07:37:43Z", "type": "commit"}, {"oid": "d6d10b8bb6dc19597aae3b3078c1f6d8aa7d1c83", "url": "https://github.com/dhis2/dhis2-core/commit/d6d10b8bb6dc19597aae3b3078c1f6d8aa7d1c83", "message": "fix: incorrect number of ignored events in report", "committedDate": "2020-06-05T08:04:46Z", "type": "commit"}, {"oid": "58eeea9d8e721d68eb4277236676e7b8c2f26004", "url": "https://github.com/dhis2/dhis2-core/commit/58eeea9d8e721d68eb4277236676e7b8c2f26004", "message": "test: adds more assertions to event import validation tests", "committedDate": "2020-06-05T09:46:03Z", "type": "commit"}, {"oid": "482c8b076ae6a302b15cfe23f34988de8ccb12b1", "url": "https://github.com/dhis2/dhis2-core/commit/482c8b076ae6a302b15cfe23f34988de8ccb12b1", "message": "fix: fail on multiple program instance for a program", "committedDate": "2020-06-08T12:03:27Z", "type": "commit"}, {"oid": "d3dedb32f12b2be15da0b5b4df1da2a6ad253f02", "url": "https://github.com/dhis2/dhis2-core/commit/d3dedb32f12b2be15da0b5b4df1da2a6ad253f02", "message": "chore: add more unit tests", "committedDate": "2020-06-08T17:57:15Z", "type": "commit"}, {"oid": "7f742e3b76f84521a868c50c7d4fb22ba21a6e2a", "url": "https://github.com/dhis2/dhis2-core/commit/7f742e3b76f84521a868c50c7d4fb22ba21a6e2a", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-09T07:29:03Z", "type": "commit"}, {"oid": "227ea0ef48fa7d5cf8e59fe5aeaeda6f7af2192d", "url": "https://github.com/dhis2/dhis2-core/commit/227ea0ef48fa7d5cf8e59fe5aeaeda6f7af2192d", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-09T07:29:28Z", "type": "commit"}, {"oid": "74f5e43d1151907553dc67b45532fdd6a08c5244", "url": "https://github.com/dhis2/dhis2-core/commit/74f5e43d1151907553dc67b45532fdd6a08c5244", "message": "fix: compilation error", "committedDate": "2020-06-09T08:54:39Z", "type": "commit"}, {"oid": "d702d2625451ab7f90c84ef5fe9d39958b28d5ab", "url": "https://github.com/dhis2/dhis2-core/commit/d702d2625451ab7f90c84ef5fe9d39958b28d5ab", "message": "chore: Cleand-up and refactoring", "committedDate": "2020-06-09T12:07:21Z", "type": "commit"}, {"oid": "d0b7d26e802b16ee1163c708f20a0cff655652e0", "url": "https://github.com/dhis2/dhis2-core/commit/d0b7d26e802b16ee1163c708f20a0cff655652e0", "message": "chore: Adding comment to Luciano's TODO", "committedDate": "2020-06-09T12:11:33Z", "type": "commit"}, {"oid": "c7e13820e392a5d51069a457dbef3ccf0089d0b9", "url": "https://github.com/dhis2/dhis2-core/commit/c7e13820e392a5d51069a457dbef3ccf0089d0b9", "message": "fix: update tei using jdbc, preload acl check", "committedDate": "2020-06-10T16:52:56Z", "type": "commit"}, {"oid": "6f57a8a3d05dc7e8088ff70d44c673c57729507e", "url": "https://github.com/dhis2/dhis2-core/commit/6f57a8a3d05dc7e8088ff70d44c673c57729507e", "message": "fix: unit tests failing", "committedDate": "2020-06-11T11:48:53Z", "type": "commit"}, {"oid": "9797675e8cdc239f61e7eaddc56d5b61aa49e6f8", "url": "https://github.com/dhis2/dhis2-core/commit/9797675e8cdc239f61e7eaddc56d5b61aa49e6f8", "message": "fix: unit tests failing 2", "committedDate": "2020-06-11T12:36:08Z", "type": "commit"}, {"oid": "b8c11a55bc349a6b6c2f4f83c1a8ddec2c3a9731", "url": "https://github.com/dhis2/dhis2-core/commit/b8c11a55bc349a6b6c2f4f83c1a8ddec2c3a9731", "message": "fix: Fixing conflicts with master", "committedDate": "2020-06-15T11:42:54Z", "type": "commit"}, {"oid": "150d408c2c839d2ed9794209025614b8ebd6c4d7", "url": "https://github.com/dhis2/dhis2-core/commit/150d408c2c839d2ed9794209025614b8ebd6c4d7", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-15T11:43:16Z", "type": "commit"}, {"oid": "1b8f2dcbc45824e69aa8d2cf4ebbde25bf7cf814", "url": "https://github.com/dhis2/dhis2-core/commit/1b8f2dcbc45824e69aa8d2cf4ebbde25bf7cf814", "message": "fix: handle case where ProgramInstance is not found", "committedDate": "2020-06-15T18:53:19Z", "type": "commit"}, {"oid": "35c9960a6b64d328af2053b8f9c89aa603c97eef", "url": "https://github.com/dhis2/dhis2-core/commit/35c9960a6b64d328af2053b8f9c89aa603c97eef", "message": "fix: NPE during FeatureType check", "committedDate": "2020-06-16T08:32:20Z", "type": "commit"}, {"oid": "2eb684a322ddebc43682ea2c004b222731f6d059", "url": "https://github.com/dhis2/dhis2-core/commit/2eb684a322ddebc43682ea2c004b222731f6d059", "message": "Ignoring test temporarily", "committedDate": "2020-06-16T08:56:07Z", "type": "commit"}, {"oid": "33474d0eb46de6985642af523d1f1b08e7a70a35", "url": "https://github.com/dhis2/dhis2-core/commit/33474d0eb46de6985642af523d1f1b08e7a70a35", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-16T09:12:24Z", "type": "commit"}, {"oid": "cb86164a39756557b36fe0d9a5f54bfe800eeb2d", "url": "https://github.com/dhis2/dhis2-core/commit/cb86164a39756557b36fe0d9a5f54bfe800eeb2d", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-16T09:12:41Z", "type": "commit"}, {"oid": "67dea5df94742e04c65e6749eea5cf820597e429", "url": "https://github.com/dhis2/dhis2-core/commit/67dea5df94742e04c65e6749eea5cf820597e429", "message": "fix: prevent deadlocks when updating TEI by using SKIP LOCKED clause", "committedDate": "2020-06-17T05:55:16Z", "type": "commit"}, {"oid": "026def4ed9087a9c01ecc85621c8adbd9b18c3bc", "url": "https://github.com/dhis2/dhis2-core/commit/026def4ed9087a9c01ecc85621c8adbd9b18c3bc", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-18T07:06:45Z", "type": "commit"}, {"oid": "f33276a486933c2326d62908141e0bc761dd2108", "url": "https://github.com/dhis2/dhis2-core/commit/f33276a486933c2326d62908141e0bc761dd2108", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-18T07:06:45Z", "type": "commit"}, {"oid": "c666a7d0887e4328fc6de26e02f3f39b1f7d2044", "url": "https://github.com/dhis2/dhis2-core/commit/c666a7d0887e4328fc6de26e02f3f39b1f7d2044", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: Add storedBy for AbstractTrackedEntityInstanceService.addTrackedEntityInstance() (#5727)", "committedDate": "2020-06-18T07:06:45Z", "type": "commit"}, {"oid": "e3e98b7a3a46b079bbafc61c6fd2d2ff142269cc", "url": "https://github.com/dhis2/dhis2-core/commit/e3e98b7a3a46b079bbafc61c6fd2d2ff142269cc", "message": "fix: do not use SKIP LOCKED when running H2 based tests", "committedDate": "2020-06-18T07:06:46Z", "type": "commit"}, {"oid": "4b54027447c346ffb9e015155bc0c152a1eceadc", "url": "https://github.com/dhis2/dhis2-core/commit/4b54027447c346ffb9e015155bc0c152a1eceadc", "message": "fix: attempt deadlock fix using cache", "committedDate": "2020-06-18T07:06:46Z", "type": "commit"}, {"oid": "02847cabf9ee6c9b2c8ee5f19e2a9c42cecd648f", "url": "https://github.com/dhis2/dhis2-core/commit/02847cabf9ee6c9b2c8ee5f19e2a9c42cecd648f", "message": "chore: removed ignore from test", "committedDate": "2020-06-18T07:10:36Z", "type": "commit"}, {"oid": "02847cabf9ee6c9b2c8ee5f19e2a9c42cecd648f", "url": "https://github.com/dhis2/dhis2-core/commit/02847cabf9ee6c9b2c8ee5f19e2a9c42cecd648f", "message": "chore: removed ignore from test", "committedDate": "2020-06-18T07:10:36Z", "type": "forcePushed"}, {"oid": "fd6f6153f50138ccb4a63acfd065261f4bf4a8b1", "url": "https://github.com/dhis2/dhis2-core/commit/fd6f6153f50138ccb4a63acfd065261f4bf4a8b1", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-06-23T11:39:31Z", "type": "forcePushed"}, {"oid": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "url": "https://github.com/dhis2/dhis2-core/commit/5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "message": "chore: header fix", "committedDate": "2020-06-29T07:21:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMjg4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446922889", "bodyText": "Some questions:\n\nShould the parent variable actually be called child?\nThe first ou is going to have itself as parent, is this correct?\nCould it be solved using reduce stream function and avoid iterating twice?", "author": "enricocolasante", "createdAt": "2020-06-29T12:13:24Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/SupplierUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SupplierUtils {\n+\n+    static OrganisationUnit getParentHierarchy(OrganisationUnit ou, String path )\n+    {\n+        if ( path.startsWith( \"/\" ) )\n+        {\n+            path = path.substring( 1 );\n+        }\n+        List<String> list = Arrays.asList( path.split( \"/\" ) );\n+        if ( list.size() == 1 && list.get( 0 ).equals( ou.getUid() ) )\n+        {\n+            return null;\n+        }\n+        Collections.reverse( list );\n+\n+        List<OrganisationUnit> ous = list.stream().filter( uid -> !uid.equals( ou.getUid() ) ).map( ouUid -> {\n+            OrganisationUnit o = new OrganisationUnit();\n+            o.setUid( ouUid );\n+            return o;\n+        } ).collect( Collectors.toList() );\n+        OrganisationUnit parent = ous.get( 0 );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/SupplierUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/SupplierUtils.java\nindex 5971b7abc9..adbea8d4d1 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/SupplierUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/SupplierUtils.java\n\n@@ -28,13 +28,13 @@ package org.hisp.dhis.dxf2.events.importer.context;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+\n /**\n  * @author Luciano Fiandesio\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDY5Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446924692", "bodyText": "Copyright after imports?", "author": "enricocolasante", "createdAt": "2020-06-29T12:16:30Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/*", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzA4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313081", "bodyText": "fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T11:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 169005490d..88d981216c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n\n@@ -1,18 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.context;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.assertNotNull;\n-\n-import java.util.List;\n-\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.google.common.collect.Lists;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTQwMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446925401", "bodyText": "Maybe it is not so relevant, but it could be useful an assert to check that all the UID are different", "author": "enricocolasante", "createdAt": "2020-06-29T12:17:49Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class UidGeneratorTest\n+{\n+    private UidGenerator subject;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        subject = new UidGenerator();\n+    }\n+\n+    @Test\n+    public void verifyEventsGetUidAssigned()\n+    {\n+        Event event1 = new Event();\n+        Event event2 = new Event();\n+        Event event3 = new Event();\n+        Event event4 = new Event();\n+        event4.setEvent( \"aaaaaaa\" );\n+\n+        List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n+\n+        assertThat( events, hasSize( 4 ) );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MzE5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448453197", "bodyText": "Fixed, added check to verify that all events have different UID", "author": "luciano-fiandesio", "createdAt": "2020-07-01T15:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\nindex 169005490d..88d981216c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java\n\n@@ -1,18 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.context;\n \n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.assertNotNull;\n-\n-import java.util.List;\n-\n-import org.hisp.dhis.dxf2.events.event.Event;\n-import org.hisp.dhis.dxf2.events.importer.context.UidGenerator;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.google.common.collect.Lists;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTM0MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446929341", "bodyText": "Unused?", "author": "enricocolasante", "createdAt": "2020-06-29T12:24:40Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.hisp.dhis.dxf2.events.event.persistence;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventStore;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.mapper.ProgramStageInstanceMapper;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Service\n+@Slf4j\n+public class  DefaultEventPersistenceService\n+    implements\n+    EventPersistenceService\n+{\n+    private final EventStore jdbcEventStore;\n+\n+    private final IdentifiableObjectManager manager;\n+\n+    public DefaultEventPersistenceService( EventStore jdbcEventStore, IdentifiableObjectManager manager )\n+    {\n+        checkNotNull( jdbcEventStore );\n+        checkNotNull( manager );\n+\n+        this.jdbcEventStore = jdbcEventStore;\n+        this.manager = manager;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void save( WorkContext context, List<Event> events )\n+    {\n+        /*\n+         * Save Events, Notes and Data Values\n+         */\n+        ProgramStageInstanceMapper mapper = new ProgramStageInstanceMapper( context );\n+\n+        jdbcEventStore.saveEvents( events.stream().map( mapper::map ).collect( Collectors.toList() ) );\n+\n+        updateTeis( context, events );\n+    }\n+\n+    /**\n+     * Updates the list of given events using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param events a List of {@see Event}\n+     */\n+\n+    @Override\n+    @Transactional\n+    public void update( final WorkContext context, final List<Event> events ) {\n+\n+        if ( isNotEmpty( events ) )\n+        {\n+            final Map<Event, ProgramStageInstance> eventProgramStageInstanceMap = convertToProgramStageInstances(\n+                new ProgramStageInstanceMapper( context ), events );\n+\n+            jdbcEventStore.updateEvents( new ArrayList<>( eventProgramStageInstanceMap.values() ) );\n+\n+            updateTeis( context, events );\n+        }\n+    }\n+    \n+    private void updateTeis( final WorkContext context, final List<Event> events )\n+    {\n+        List<String> teiUidList = new ArrayList<>();\n+\n+        if ( !context.getImportOptions().isSkipLastUpdated() )\n+        {\n+            for ( Event event : events )\n+            {\n+                final Optional<TrackedEntityInstance> trackedEntityInstance = context\n+                    .getTrackedEntityInstance( event.getUid() );\n+\n+                trackedEntityInstance.ifPresent( t -> teiUidList.add( t.getUid() ) );\n+            }\n+\n+            jdbcEventStore.updateTrackedEntityInstances( teiUidList, context.getImportOptions().getUser() );\n+\n+        }\n+    }\n+\n+    /**\n+     * Deletes the list of events using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param events a List of {@see Event}\n+     */\n+    @Override\n+    @Transactional\n+    public void delete( final WorkContext context, final List<Event> events )\n+    {\n+        if ( isNotEmpty( events ) )\n+        {\n+            jdbcEventStore.delete( events );\n+        }\n+    }\n+\n+    /**\n+     * Deletes the event using a single transaction.\n+     *\n+     * @param context a {@see WorkContext}\n+     * @param event the event to delete {@see Event}\n+     */\n+    @Override\n+    @Transactional\n+    public void delete( final WorkContext context, final Event event )\n+    {\n+        if ( event != null )\n+        {\n+            jdbcEventStore.delete( singletonList( event ) );\n+        }\n+    }\n+\n+    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzM3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313376", "bodyText": "fixed, method removed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T11:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTM0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\nindex 0e0d882aa3..dd6d701bd9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/event/persistence/DefaultEventPersistenceService.java\n\n@@ -162,22 +162,6 @@ public class  DefaultEventPersistenceService\n         }\n     }\n \n-    private void updateTrackedEntityInstance( final TrackedEntityInstance tei, final User user )\n-    {\n-        final TrackedEntityInstance loadedTei = manager.get( TrackedEntityInstance.class, tei.getUid() );\n-\n-        loadedTei.setCreatedAtClient( tei.getCreatedAtClient() );\n-        loadedTei.setLastUpdatedAtClient( tei.getLastUpdatedAtClient() );\n-        loadedTei.setInactive( tei.isInactive() );\n-        loadedTei.setLastSynchronized( tei.getLastSynchronized() );\n-        loadedTei.setCreated( tei.getCreated() );\n-        loadedTei.setLastUpdated( tei.getLastUpdated() );\n-        loadedTei.setUser( tei.getUser() );\n-        loadedTei.setLastUpdatedBy( tei.getLastUpdatedBy() );\n-\n-        manager.update( loadedTei, user );\n-    }\n-\n     private Map<Event, ProgramStageInstance> convertToProgramStageInstances( ProgramStageInstanceMapper mapper,\n         List<Event> events )\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDUyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446930521", "bodyText": "Because of line 239 in DHISFormatter.xml this annotation shouldn't be needed anymore", "author": "enricocolasante", "createdAt": "2020-06-29T12:26:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.function.Supplier;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.hisp.dhis.dxf2.events.importer.ServiceDelegator;\n+import org.hisp.dhis.program.ProgramInstanceStore;\n+import org.hisp.dhis.programrule.ProgramRuleVariableService;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component( \"workContextServiceDelegatorSupplier\" )\n+public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n+{\n+    private final ProgramInstanceStore programInstanceStore;\n+\n+    private final TrackerAccessManager trackerAccessManager;\n+\n+    private final ApplicationEventPublisher applicationEventPublisher;\n+\n+    private final ProgramRuleVariableService programRuleVariableService;\n+\n+    private final CurrentUserService currentUserService;\n+\n+    private final ObjectMapper jsonMapper;\n+\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    public ServiceDelegatorSupplier( ProgramInstanceStore programInstanceStore,\n+        TrackerAccessManager trackerAccessManager, ApplicationEventPublisher applicationEventPublisher,\n+        ProgramRuleVariableService programRuleVariableService, CurrentUserService currentUserService,\n+        ObjectMapper jsonMapper,\n+        @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate)\n+    {\n+        this.programInstanceStore = programInstanceStore;\n+        this.trackerAccessManager = trackerAccessManager;\n+        this.applicationEventPublisher = applicationEventPublisher;\n+        this.programRuleVariableService = programRuleVariableService;\n+        this.currentUserService = currentUserService;\n+        this.jsonMapper =jsonMapper;\n+        this.jdbcTemplate = jdbcTemplate;\n+    }\n+\n+    @Override\n+    public ServiceDelegator get()\n+    {\n+        // @formatter:off", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzY4Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448313683", "bodyText": "Fixed, annotation removed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T11:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMDUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\nindex be25ee539c..1097a4eaa3 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ServiceDelegatorSupplier.java\n\n@@ -79,16 +79,14 @@ public class ServiceDelegatorSupplier implements Supplier<ServiceDelegator>\n     @Override\n     public ServiceDelegator get()\n     {\n-        // @formatter:off\n         return ServiceDelegator.builder()\n-                .programInstanceStore( this.programInstanceStore )\n-                .trackerAccessManager( this.trackerAccessManager )\n-                .applicationEventPublisher( this.applicationEventPublisher )\n-                .programRuleVariableService( this.programRuleVariableService )\n-                .currentUserService( this.currentUserService )\n-                .jsonMapper(jsonMapper)\n-                .jdbcTemplate( this.jdbcTemplate )\n-                .build();\n-        // @formatter:on\n+            .programInstanceStore( this.programInstanceStore )\n+            .trackerAccessManager( this.trackerAccessManager )\n+            .applicationEventPublisher( this.applicationEventPublisher )\n+            .programRuleVariableService( this.programRuleVariableService )\n+            .currentUserService( this.currentUserService )\n+            .jsonMapper( jsonMapper )\n+            .jdbcTemplate( this.jdbcTemplate )\n+            .build();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTcxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446931718", "bodyText": "FIXME here", "author": "enricocolasante", "createdAt": "2020-06-29T12:28:31Z", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/jdbc/batchhandler/DataValueBatchHandlerTest.java", "diffHunk": "@@ -153,6 +154,7 @@ public boolean emptyDatabaseAfterTest()\n     // -------------------------------------------------------------------------\n \n     @Test\n+    @Ignore // FIXME luciano - this test fails with a sql error after upgrading H2", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxODUxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448318519", "bodyText": "This seems to be a problem with the Quick framework. The framework generates the following invalid query:\ninsert into datavalue (dataelementid,periodid,sourceid,categoryoptioncomboid,attributeoptioncomboid,value,storedby,created,lastupdated,comment,followup,deleted) values (1,1,1,1,1,'10','StoredBy','2020-07-01T14:08:26','2020-07-01T14:08:26','Comment',false,false),\n\n(note the parenthesis at the end)", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzMTcxOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDAwMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446934001", "bodyText": "remove this return", "author": "enricocolasante", "createdAt": "2020-06-29T12:32:06Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportStatus.ERROR;\n+import static org.hisp.dhis.program.ProgramStatus.COMPLETED;\n+import static org.hisp.dhis.security.Authorities.F_EDIT_EXPIRED;\n+import static org.hisp.dhis.util.DateUtils.dateIsValid;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+import static org.hisp.dhis.util.DateUtils.removeTimeStamp;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class EventBaseCheck\n+    implements\n+    Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportSummary importSummary = new ImportSummary();\n+        List<String> errors = validate( event, ctx );\n+\n+        if ( !errors.isEmpty() )\n+        {\n+            importSummary.setStatus( ERROR );\n+            importSummary.getConflicts()\n+                .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n+            importSummary.incrementIgnored();\n+\n+            return importSummary;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxOTMwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448319309", "bodyText": "Fixed, removed return", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\nindex 8749f8c0aa..8f47f2aa92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/EventBaseCheck.java\n\n@@ -68,9 +68,7 @@ public class EventBaseCheck\n                 .addAll( errors.stream().map( s -> new ImportConflict( \"Event\", s ) ).collect( Collectors.toList() ) );\n             importSummary.incrementIgnored();\n \n-            return importSummary;\n         }\n-\n         return importSummary;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjIwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r446986200", "bodyText": "TODO?", "author": "enricocolasante", "createdAt": "2020-06-29T13:49:42Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.programrule.engine.DataValueUpdatedEvent;\n+\n+public class PublishEventPostProcessor\n+    implements\n+    Processor\n+{\n+\n+    @Override\n+    public void process( final Event event, final WorkContext ctx )\n+    {\n+        boolean isLinkedWithRuleVariable = false;\n+\n+        for ( final DataValue dv : event.getDataValues() )\n+        {\n+            final DataElement dataElement = ctx.getDataElementMap().get( dv.getDataElement() );\n+\n+            if ( dataElement != null )\n+            {\n+                // TODO: luciano preload the value", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNjc2NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448806764", "bodyText": "Yes, this has to be finalized.", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NjIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java\nindex 754d59ba1a..5389d9f6b5 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/PublishEventPostProcessor.java\n\n@@ -35,6 +35,9 @@ import org.hisp.dhis.dxf2.events.importer.Processor;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.programrule.engine.DataValueUpdatedEvent;\n \n+/**\n+ * @author maikel arabori\n+ */\n public class PublishEventPostProcessor\n     implements\n     Processor\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyMzk1Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r447623952", "bodyText": "If its null, perhaps we should throw an error stating that? Other assumptions might break if we think that there should always be a program instance?", "author": "Bekkalizer", "createdAt": "2020-06-30T11:53:49Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.hisp.dhis.common.BaseIdentifiableObject;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstanceCheck implements Checker\n+{\n+    @Override\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n+\n+        String teiUid = \"\";\n+        if ( trackedEntityInstance.isPresent() )\n+        {\n+            teiUid = trackedEntityInstance.get().getUid();\n+        }\n+        \n+        List<ProgramInstance> programInstances;\n+\n+        if ( programInstance == null ) // Program Instance should be NOT null, after the pre-processing stage", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed0f770edd206b5c14381f2dd40965250be67604", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\nindex e50fd6cc86..cedb66bff9 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java\n\n@@ -35,7 +35,6 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n \n-import org.hisp.dhis.common.BaseIdentifiableObject;\n import org.hisp.dhis.dxf2.events.importer.Checker;\n import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNjk4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448026988", "bodyText": "author header", "author": "mortenoh", "createdAt": "2020-06-30T23:05:26Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxOTU1Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448319552", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNjk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n\n@@ -36,9 +36,14 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzExMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448027111", "bodyText": "No @slf4j lombok ?", "author": "mortenoh", "createdAt": "2020-06-30T23:05:44Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMDMyNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448320325", "bodyText": "@slf4j is not available on interfaces", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n\n@@ -36,9 +36,14 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzg4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448027886", "bodyText": "no need for final keyword here? its already final", "author": "mortenoh", "createdAt": "2020-06-30T23:08:09Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMDU1OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448320558", "bodyText": "Fixed, removed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T12:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n\n@@ -36,9 +36,14 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448028078", "bodyText": "How does this bubble up to the client?", "author": "mortenoh", "createdAt": "2020-06-30T23:08:48Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer;\n+\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+\n+import static org.apache.commons.logging.LogFactory.getLog;\n+\n+public interface EventProcessing\n+{\n+    void process( final WorkContext workContext, final List<Event> events );\n+\n+    Log log = getLog( EventProcessing.class );\n+\n+    class ProcessorRunner\n+    {\n+        private final WorkContext workContext;\n+\n+        private final List<Event> events;\n+\n+        public ProcessorRunner( final WorkContext workContext, final List<Event> events )\n+        {\n+            this.workContext = workContext;\n+            this.events = events;\n+        }\n+\n+        public void run( final List<Class<? extends Processor>> processors )\n+        {\n+            for ( final Event event : events )\n+            {\n+                for ( Class<? extends Processor> processor : processors )\n+                {\n+                    try\n+                    {\n+                        final Processor pre = processor.newInstance();\n+                        pre.process( event, workContext );\n+                    }\n+                    catch ( InstantiationException | IllegalAccessException e )\n+                    {\n+                        log.error( \"An error occurred during Event import processing\", e );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NjA2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448346063", "bodyText": "Good point: it does not. This would be a pretty catastrophic exception, so I guess we can abort the entire process. Thoughts @mortenoh ?", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMzMzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448833335", "bodyText": "We can throw an exception and catch it in CrudControllerAdvice.", "author": "larshelge", "createdAt": "2020-07-02T08:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\nindex a8c7fd1453..f9f192d2eb 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/EventProcessing.java\n\n@@ -36,9 +36,14 @@ import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n \n import static org.apache.commons.logging.LogFactory.getLog;\n \n+/**\n+ * Simple interface that provides processing capabilities on events.\n+ *\n+ * @author maikel arabori\n+ */\n public interface EventProcessing\n {\n-    void process( final WorkContext workContext, final List<Event> events );\n+    void process( WorkContext workContext, List<Event> events );\n \n     Log log = getLog( EventProcessing.class );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTY0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448031646", "bodyText": "author header", "author": "mortenoh", "createdAt": "2020-06-30T23:20:28Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.eventdatavalue.EventDataValue;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+public class DataValueAclCheck implements Checker", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NjM5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448346399", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\nindex 00bce17449..e059ef6e54 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/DataValueAclCheck.java\n\n@@ -43,6 +43,9 @@ import org.hisp.dhis.program.ProgramStageInstance;\n import org.hisp.dhis.trackedentity.TrackerAccessManager;\n import org.hisp.dhis.user.User;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class DataValueAclCheck implements Checker\n {\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjA1Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448032056", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-30T23:21:54Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public abstract class BaseEventAclCheck implements Checker\n+{\n+    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportOptions importOptions = ctx.getImportOptions();\n+\n+        ProgramStageInstance programStageInstance = prepareForAclValidation( ctx, event );\n+\n+        List<String> errors = checkAcl( ctx.getServiceDelegator().getTrackerAccessManager(), importOptions.getUser(),\n+            programStageInstance );\n+\n+        final ImportSummary importSummary = new ImportSummary();\n+\n+        if ( !errors.isEmpty() )\n+        {\n+            errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n+\n+            importSummary.incrementIgnored();\n+            importSummary.setStatus( ImportStatus.ERROR );\n+        }", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0OTA4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448349089", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\nindex 0dfa08d74c..fa8b5e3c39 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/BaseEventAclCheck.java\n\n@@ -62,7 +62,6 @@ public abstract class BaseEventAclCheck implements Checker\n         if ( !errors.isEmpty() )\n         {\n             errors.forEach( error -> importSummary.getConflicts().add( new ImportConflict( event.getUid(), error ) ) );\n-\n             importSummary.incrementIgnored();\n             importSummary.setStatus( ImportStatus.ERROR );\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDQyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034420", "bodyText": "if programInstance == null, we should just return? same test in two logic tests", "author": "mortenoh", "createdAt": "2020-06-30T23:29:45Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.preprocess;\n+\n+import java.sql.ResultSet;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceStore;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+/**\n+ * The goal of this Pre-processor is to assign a Program Instance (Enrollment)\n+ * to the Event getting processed. If the Program Instance can not be assigned,\n+ * the Event will not pass validation.\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramInstancePreProcessor implements Processor\n+{\n+    @Override\n+    public void process( Event event, WorkContext ctx )\n+    {\n+        ProgramInstanceStore programInstanceStore = ctx.getServiceDelegator().getProgramInstanceStore();\n+\n+        Program program = ctx.getProgramsMap().get( event.getProgram() );\n+\n+        if ( program == null )\n+        {\n+            return; // Program is a mandatory value, it will be caught by the validation\n+        }\n+\n+        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n+        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n+\n+        if ( program.isRegistration() && programInstance == null )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDcxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034711", "bodyText": "license order issue, should be before import", "author": "mortenoh", "createdAt": "2020-06-30T23:30:40Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzE4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448347186", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..87497c7aa8 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n\n@@ -1,28 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n-import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.commons.lang3.RandomUtils;\n-import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDc2NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034764", "bodyText": "author header", "author": "mortenoh", "createdAt": "2020-06-30T23:30:49Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class ProgramOrgUnitCheckTest extends BaseValidationTest", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzQ5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448347496", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T13:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..87497c7aa8 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n\n@@ -1,28 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n-import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.commons.lang3.RandomUtils;\n-import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDg2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034863", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-30T23:31:08Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n+import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class ProgramOrgUnitCheckTest extends BaseValidationTest\n+{\n+    private ProgramOrgUnitCheck rule;\n+\n+    @Before\n+    public void setUp()\n+    {\n+        rule = new ProgramOrgUnitCheck();\n+    }\n+\n+    @Test\n+    public void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit()\n+    {\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"ABCDE\", IdScheme.CODE );\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( CodeGenerator.generateUid(), IdScheme.UID );\n+        verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( \"100\", IdScheme.ID );\n+    }\n+\n+    private void verifySuccessWhenProgramHasOrgUnitMatchingEventOrgUnit( String orgUnitId, IdScheme scheme )\n+    {\n+        // assign a UID to the event's org unit\n+        event.setOrgUnit( orgUnitId );\n+\n+        // Prepare data\n+        Program program = createProgram( 'P' );\n+        // make sure that one of the generate Org Units, has the event's UID\n+        program.setOrganisationUnits( create( 5, event.getOrgUnit(), IdScheme.CODE ) );\n+        ProgramInstance pi = new ProgramInstance();\n+        pi.setProgram( program );\n+\n+        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        programInstanceMap.put( event.getUid(), pi );\n+\n+        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n+        importOptions.setOrgUnitIdScheme( IdScheme.CODE.name() );\n+\n+        when( workContext.getImportOptions() ).thenReturn( importOptions );\n+        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n+\n+        // method under test\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+\n+        assertNoError( summary );\n+    }\n+\n+    @Test\n+    public void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()\n+    {\n+        // assign a UID to the event's org unit\n+        event.setOrgUnit( CodeGenerator.generateUid() );\n+\n+        // Prepare data\n+        Program program = createProgram( 'P' );\n+        // make sure that one of the generate Org Units, has the event's UID\n+        program.setOrganisationUnits( create( 5, CodeGenerator.generateUid(), IdScheme.UID ) );\n+        ProgramInstance pi = new ProgramInstance();\n+        pi.setProgram( program );\n+\n+        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n+        programInstanceMap.put( event.getUid(), pi );\n+\n+        ImportOptions importOptions = ImportOptions.getDefaultImportOptions();\n+\n+        when( workContext.getImportOptions() ).thenReturn( importOptions );\n+        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n+\n+        // method under test\n+        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n+\n+        assertHasError( summary, event, \"Program is not assigned to this organisation unit: \" + event.getOrgUnit() );\n+    }\n+\n+    private Set<OrganisationUnit> create( int size, String orgUnit, IdScheme idScheme )\n+    {\n+        Set<OrganisationUnit> result = new HashSet<>();\n+        int rnd = RandomUtils.nextInt( 1, 5 );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NjMzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448396338", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\nindex 4a1bd08cbe..87497c7aa8 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java\n\n@@ -1,28 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.insert.validation;\n \n-import static org.hisp.dhis.DhisConvenienceTest.createOrganisationUnit;\n-import static org.hisp.dhis.DhisConvenienceTest.createProgram;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.commons.lang3.RandomUtils;\n-import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.common.IdScheme;\n-import org.hisp.dhis.dxf2.common.ImportOptions;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.testcontainers.shaded.org.apache.commons.lang.RandomStringUtils;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDk1OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448034958", "bodyText": "license order, before imports", "author": "mortenoh", "createdAt": "2020-06-30T23:31:29Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.validation;\n+\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n+import org.hisp.dhis.util.DateUtils;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/*", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NjY3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448396672", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNDk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\nindex 67cff4abea..25da741b04 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/AttributeOptionComboDateCheckTest.java\n\n@@ -1,23 +1,5 @@\n package org.hisp.dhis.dxf2.events.importer.shared.validation;\n \n-import static org.mockito.Mockito.when;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.common.IllegalQueryException;\n-import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n-import org.hisp.dhis.dxf2.events.importer.validation.BaseValidationTest;\n-import org.hisp.dhis.util.DateUtils;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTE4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035182", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-30T23:32:09Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package org.hisp.dhis.webapi.controller.event.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.common.AssignedUserSelectionMode;\n+import org.hisp.dhis.common.DimensionalObject;\n+import org.hisp.dhis.common.IdSchemes;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.common.QueryFilter;\n+import org.hisp.dhis.common.QueryItem;\n+import org.hisp.dhis.common.QueryOperator;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dataelement.DataElementService;\n+import org.hisp.dhis.dxf2.events.event.EventSearchParams;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramService;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageService;\n+import org.hisp.dhis.program.ProgramStatus;\n+import org.hisp.dhis.query.Order;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.user.CurrentUserService;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class RequestToSearchParamsMapper\n+{\n+    private final CurrentUserService currentUserService;\n+\n+    private final ProgramService programService;\n+\n+    private final OrganisationUnitService organisationUnitService;\n+\n+    private final ProgramStageService programStageService;\n+\n+    private final AclService aclService;\n+\n+    private final TrackedEntityInstanceService entityInstanceService;\n+\n+    private final DataElementService dataElementService;\n+\n+    public RequestToSearchParamsMapper( CurrentUserService currentUserService, ProgramService programService,\n+        OrganisationUnitService organisationUnitService, ProgramStageService programStageService, AclService aclService,\n+        TrackedEntityInstanceService entityInstanceService, DataElementService dataElementService )\n+    {\n+        checkNotNull( currentUserService );\n+        checkNotNull( programService );\n+        checkNotNull( organisationUnitService );\n+        checkNotNull( programStageService );\n+        checkNotNull( aclService );\n+        checkNotNull( entityInstanceService );\n+        checkNotNull( dataElementService );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NzM4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397389", "bodyText": "I guess newline means add a new line between checkNotNull and the dependency setting. Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\nindex 11d5781636..2f94d5797c 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/mapper/RequestToSearchParamsMapper.java\n\n@@ -96,6 +96,7 @@ public class RequestToSearchParamsMapper\n         checkNotNull( aclService );\n         checkNotNull( entityInstanceService );\n         checkNotNull( dataElementService );\n+\n         this.currentUserService = currentUserService;\n         this.programService = programService;\n         this.organisationUnitService = organisationUnitService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTg0NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035844", "bodyText": "author header", "author": "mortenoh", "createdAt": "2020-06-30T23:34:18Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NzU2NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397565", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n\n@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035957", "bodyText": "codestyle, too many newlines for implements and interface", "author": "mortenoh", "createdAt": "2020-06-30T23:34:38Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5Nzg0NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397845", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n\n@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448035999", "bodyText": "remove newline", "author": "mortenoh", "createdAt": "2020-06-30T23:34:45Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n+{\n+", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5Nzk0Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448397947", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n\n@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjI4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036281", "bodyText": "Why not if ( ctx.getImportOptions().isSkipNotifications() ) { return }, less indentation", "author": "mortenoh", "createdAt": "2020-06-30T23:35:28Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.postprocess;\n+\n+import static org.hisp.dhis.event.EventStatus.SCHEDULE;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.notification.event.ProgramStageCompletionNotificationEvent;\n+import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n+import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n+\n+public class ProgramNotificationPostProcessor\n+    implements\n+    Processor\n+{\n+\n+    @Override\n+    public void process( final Event event, final WorkContext ctx )\n+    {\n+        if ( !ctx.getImportOptions().isSkipNotifications() )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\nindex 22a823523a..062da91c01 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/postprocess/ProgramNotificationPostProcessor.java\n\n@@ -39,18 +39,19 @@ import org.hisp.dhis.programrule.engine.StageCompletionEvaluationEvent;\n import org.hisp.dhis.programrule.engine.StageScheduledEvaluationEvent;\n import org.springframework.context.ApplicationEventPublisher;\n \n-public class ProgramNotificationPostProcessor\n-    implements\n-    Processor\n+/**\n+ * @author maikel arabori\n+ */\n+public class ProgramNotificationPostProcessor implements Processor\n {\n-\n     @Override\n     public void process( final Event event, final WorkContext ctx )\n     {\n         if ( !ctx.getImportOptions().isSkipNotifications() )\n         {\n             final ProgramStageInstance programStageInstance = ctx.getProgramStageInstanceMap().get( event.getEvent() );\n-            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator().getApplicationEventPublisher();\n+            final ApplicationEventPublisher applicationEventPublisher = ctx.getServiceDelegator()\n+                .getApplicationEventPublisher();\n \n             if ( programStageInstance.isCompleted() )\n             {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjY4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036686", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:36:53Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwOTIwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448809206", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.utils;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjc0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036740", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-30T23:37:04Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.utils;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import org.hisp.dhis.Constants;\n+\n+/**\n+ * @author Gintare Vilkelyte <vilkelyte.gintare@gmail.com>\n+ */\n+public class JsonObjectBuilder\n+{\n+    private JsonObject jsonObject;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.utils;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjgzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036835", "bodyText": "do we need to use gson here? we already depend on jackson...", "author": "mortenoh", "createdAt": "2020-06-30T23:37:23Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.utils;\n+\n+import com.google.gson.JsonArray;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDA4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448810089", "bodyText": "This is the API end to end project, not dhis2 \"proper\".", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\nindex aac532997e..d7ecd190d9 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/utils/JsonObjectBuilder.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.utils;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036959", "bodyText": "author header", "author": "mortenoh", "createdAt": "2020-06-30T23:37:46Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+\n+public class IdSchemeUtils", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5OTA3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448399075", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 9cd37bc948..8563829a33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n\n@@ -34,12 +34,16 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n+\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk5NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448036995", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-30T23:37:54Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.hisp.dhis.dxf2.events.importer.context;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.hisp.dhis.common.IdScheme;\n+import org.hisp.dhis.common.IdentifiableProperty;\n+\n+public class IdSchemeUtils\n+{\n+    public static String getKey( IdScheme scheme, ResultSet rs )\n+        throws SQLException\n+    {\n+        Object id = rs.getObject( getColumnNameByScheme( scheme ) );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5OTQ5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448399499", "bodyText": "Not sure if I need to add or remove a newline :)", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNjk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\nindex 9cd37bc948..8563829a33 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/IdSchemeUtils.java\n\n@@ -34,12 +34,16 @@ import java.sql.SQLException;\n import org.hisp.dhis.common.IdScheme;\n import org.hisp.dhis.common.IdentifiableProperty;\n \n+/**\n+ * @author Luciano Fiandesio\n+ */\n public class IdSchemeUtils\n {\n     public static String getKey( IdScheme scheme, ResultSet rs )\n         throws SQLException\n     {\n         Object id = rs.getObject( getColumnNameByScheme( scheme ) );\n+\n         if ( id instanceof Long )\n         {\n             return Long.toString( (Long) id );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzIxMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037212", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:38:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDAzNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400036", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 6437d9be2b..718499dc4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzI2Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037267", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-30T23:38:50Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportStatus;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class AttributeOptionComboAclCheck\n+    implements\n+    Checker\n+{\n+    @Override\n+    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n+    {\n+        ImportSummary importSummary = new ImportSummary();\n+        TrackerAccessManager trackerAccessManager = ctx.getServiceDelegator().getTrackerAccessManager();\n+        ImportOptions importOptions = ctx.getImportOptions();\n+        CategoryOptionCombo categoryOptionCombo = ctx.getCategoryOptionComboMap().get( event.getUid() );\n+\n+        List<String> errors = trackerAccessManager.canWrite( importOptions.getUser(), categoryOptionCombo );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDIwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400206", "bodyText": "Fixed (I guess)", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\nindex 6437d9be2b..718499dc4d 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/AttributeOptionComboAclCheck.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzUzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037531", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:39:37Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDQ1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400459", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\nindex cc4c41c05c..0a8b65859c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/OrgUnitCheck.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzY5MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037691", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:40:11Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDcwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400708", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 6471ba8e6a..903ae5d45e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzcyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037726", "bodyText": "style :|", "author": "mortenoh", "createdAt": "2020-06-30T23:40:20Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+\n+public class EventSimpleCheck\n+    implements", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMDk3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448400972", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\nindex 6471ba8e6a..903ae5d45e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/EventSimpleCheck.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzk4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448037987", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:41:13Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTI0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401240", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNzk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\nindex dffd7034f1..d5a57b890e 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/PreUpdateProcessorFactory.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODI3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038278", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:42:13Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTUyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401526", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 85eb44b190..8f0380ac3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODMxMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038313", "bodyText": "style", "author": "mortenoh", "createdAt": "2020-06-30T23:42:19Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n+import static org.hisp.dhis.organisationunit.FeatureType.NONE;\n+import static org.hisp.dhis.system.util.GeoUtils.SRID;\n+import static org.hisp.dhis.system.util.GeoUtils.getGeoJsonPoint;\n+\n+import java.io.IOException;\n+\n+import org.hisp.dhis.dxf2.events.event.Coordinate;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+\n+public class ProgramInstanceGeometryPreProcessor\n+    implements", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTcxMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448401710", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\nindex 85eb44b190..8f0380ac3f 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/preprocess/ProgramInstanceGeometryPreProcessor.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.update.preprocess;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODY5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038696", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:43:44Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMjAzMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448402033", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex 1d3b9266df..d6e77dab92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODc0NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038744", "bodyText": "author header", "author": "mortenoh", "createdAt": "2020-06-30T23:43:55Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.Collections.emptyList;\n+import static org.hisp.dhis.dxf2.events.importer.ImportStrategyUtils.isDelete;\n+import static org.hisp.dhis.importexport.ImportStrategy.DELETE;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.EventChecking;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.springframework.stereotype.Component;\n+\n+@Component( \"eventsDeleteValidationFactory\" )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMjEyNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448402124", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\nindex 1d3b9266df..d6e77dab92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/delete/validation/DeleteValidationFactory.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.delete.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzODk3NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448038974", "bodyText": "We already have this\n    public static String username( User user )\n    {\n        return username( user, \"system-process\" );\n    }\n\ncan it be used instead?", "author": "mortenoh", "createdAt": "2020-06-30T23:44:47Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/user/User.java", "diffHunk": "@@ -414,6 +415,11 @@ public boolean isManagedBy( User user )\n         return false;\n     }\n \n+    public static String getSafeUsername( String username )\n+    {\n+        return StringUtils.isEmpty( username ) ? \"[Unknown]\" : username;\n+    }\n+", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTE4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039187", "bodyText": "author header", "author": "mortenoh", "createdAt": "2020-06-30T23:45:32Z", "path": "dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.hisp.dhis.jdbc;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.springframework.jdbc.core.BatchPreparedStatementSetter;\n+import org.springframework.jdbc.support.KeyHolder;\n+\n+/**\n+ * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n+ * This class allows to execute a JDBC batch update operation using a\n+ * {@see JdbcTemplate} and retrieve the generated primary keys\n+ */\n+public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNTkzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448405938", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\nindex 2d48c5a06e..f221f987f4 100644\n--- a/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n+++ b/dhis-2/dhis-support/dhis-support-jdbc/src/main/java/org/hisp/dhis/jdbc/BatchPreparedStatementSetterWithKeyHolder.java\n\n@@ -40,6 +40,8 @@ import org.springframework.jdbc.support.KeyHolder;\n  * A {@see BatchPreparedStatementSetter} with support for a {@see KeyHolder}\n  * This class allows to execute a JDBC batch update operation using a\n  * {@see JdbcTemplate} and retrieve the generated primary keys\n+ *\n+ * @author Luciano Fiandesio\n  */\n public abstract class BatchPreparedStatementSetterWithKeyHolder<T> implements BatchPreparedStatementSetter\n {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTMyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039328", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:45:58Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjIxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448406215", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 2eedce3462..1976928f92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTM1MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039351", "bodyText": "author header", "author": "mortenoh", "createdAt": "2020-06-30T23:46:04Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.error;\n+import static org.hisp.dhis.dxf2.importsummary.ImportSummary.success;\n+\n+import org.hisp.dhis.dxf2.events.importer.shared.ImmutableEvent;\n+import org.hisp.dhis.dxf2.events.importer.Checker;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.importsummary.ImportConflict;\n+import org.hisp.dhis.dxf2.importsummary.ImportSummary;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+\n+public class ProgramStageInstanceBasicCheck", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjM4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448406384", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\nindex 2eedce3462..1976928f92 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/update/validation/ProgramStageInstanceBasicCheck.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.update.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTY3OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039679", "bodyText": "System.out.println?", "author": "mortenoh", "createdAt": "2020-06-30T23:47:11Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java", "diffHunk": "@@ -114,11 +119,18 @@ public void eventsImportNewEventsFromFile( String fileName, String contentType )\n \n         createdEvents.addAll( importSummaries\n             .stream()\n-            .map( p -> {\n-                return p.getReference();\n-            } )\n+            .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n+        for (ImportSummary is : importSummaries) {\n+\n+            String status = is.getStatus();\n+            if (status.equals(\"ERROR\")) {\n+\n+                System.out.println(is.getDescription());", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxODE4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448818186", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\nindex 9be4c6e030..1f7fb8ee79 100644\n--- a/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n+++ b/dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/tracker/events/EventImportTests.java\n\n@@ -122,15 +122,6 @@ public class EventImportTests\n             .map( ImportSummary::getReference )\n             .collect( toList() ) );\n \n-        for (ImportSummary is : importSummaries) {\n-\n-            String status = is.getStatus();\n-            if (status.equals(\"ERROR\")) {\n-\n-                System.out.println(is.getDescription());\n-            }\n-        }\n-\n         assertThat( importSummaries, Matchers.everyItem( hasProperty( \"status\", Matchers.equalTo( \"SUCCESS\" ) ) ) );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzOTc5MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448039791", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-30T23:47:35Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.hisp.dhis.dxf2.events.importer.shared.preprocess;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Set;\n+\n+import org.hisp.dhis.dxf2.events.event.DataValue;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.event.EventUtils;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.dxf2.events.importer.Processor;\n+\n+/**\n+ * Sets the \"storedBy\" property on the event and on the event's Data Values\n+ * @author Luciano Fiandesio\n+ */\n+public class EventStoredByPreProcessor implements Processor\n+{\n+    @Override\n+    public void process( Event event, WorkContext ctx )\n+    {\n+        String storedBy = EventUtils.getValidUsername( event.getStoredBy(), ctx.getImportOptions() );\n+        event.setStoredBy( storedBy );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\nindex c829adc0fa..1126334562 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/preprocess/EventStoredByPreProcessor.java\n\n@@ -38,6 +38,7 @@ import org.hisp.dhis.dxf2.events.importer.Processor;\n \n /**\n  * Sets the \"storedBy\" property on the event and on the event's Data Values\n+ *\n  * @author Luciano Fiandesio\n  */\n public class EventStoredByPreProcessor implements Processor\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDAwNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040005", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:48:24Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNzM4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448407382", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\nindex a1ed4965c9..ae06814c2c 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis.dxf2.events.importer.insert.validation;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDUyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040521", "bodyText": "package before license", "author": "mortenoh", "createdAt": "2020-06-30T23:50:06Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis;", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNjI1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448806259", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-02T07:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\nindex 83c06f7605..20d124b71c 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/Constants.java\n\n@@ -1,3 +1,5 @@\n+package org.hisp.dhis;\n+\n /*\n  * Copyright (c) 2004-2020, University of Oslo\n  * All rights reserved.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDkxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448040917", "bodyText": "@OverRide ?", "author": "mortenoh", "createdAt": "2020-06-30T23:51:24Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.dxf2.events.importer.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.IdScheme.CODE;\n+import static org.hisp.dhis.common.IdScheme.UID;\n+import static org.hisp.dhis.event.EventStatus.fromInt;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n+{\n+    private final ProgramStageInstanceNoteMapper noteMapper;\n+\n+    public ProgramStageInstanceMapper( WorkContext ctx )\n+    {\n+        super( ctx );\n+        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n+    }\n+\n+    public ProgramStageInstance map( Event event )", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwODIwNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448408205", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MDkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\nindex d42efd3362..aff374cd49 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n\n@@ -58,6 +58,7 @@ public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramSta\n         noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n     }\n \n+    @Override\n     public ProgramStageInstance map( Event event )\n     {\n         ImportOptions importOptions = workContext.getImportOptions();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MTA5MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448041091", "bodyText": "No, that seems wrong.. code for tracker objects is anyways not properly implemented", "author": "mortenoh", "createdAt": "2020-06-30T23:52:00Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.hisp.dhis.dxf2.events.importer.mapper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.IdScheme.CODE;\n+import static org.hisp.dhis.common.IdScheme.UID;\n+import static org.hisp.dhis.event.EventStatus.fromInt;\n+import static org.hisp.dhis.util.DateUtils.parseDate;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hisp.dhis.dxf2.common.ImportOptions;\n+import org.hisp.dhis.dxf2.events.event.Event;\n+import org.hisp.dhis.dxf2.events.importer.context.WorkContext;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramStageInstance>\n+{\n+    private final ProgramStageInstanceNoteMapper noteMapper;\n+\n+    public ProgramStageInstanceMapper( WorkContext ctx )\n+    {\n+        super( ctx );\n+        noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n+    }\n+\n+    public ProgramStageInstance map( Event event )\n+    {\n+        ImportOptions importOptions = workContext.getImportOptions();\n+        \n+        ProgramStageInstance psi = new ProgramStageInstance();\n+        \n+        ProgramStageInstance programStageInstance = this.workContext.getProgramStageInstanceMap().get( event.getUid() );\n+        if ( programStageInstance != null )\n+        {\n+            psi.setId( programStageInstance.getId() );\n+        }\n+\n+        if ( importOptions.getIdSchemes().getProgramStageInstanceIdScheme().equals( CODE ) )\n+        {\n+            // TODO: Is this really correct?\n+            psi.setCode( event.getUid() );", "originalCommit": "5f7f7b668ce08b2e656d6c36cb732f0bbeb756f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwOTgzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5753#discussion_r448409834", "bodyText": "Ok, this was on of the questions I asked in the open points document: https://docs.google.com/document/d/1030nAuKxMSAYopNJj569inGgcJUS3DbqNrU-ZyZgSMI/edit#heading=h.p1u0vhrtwo4q", "author": "luciano-fiandesio", "createdAt": "2020-07-01T14:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0MTA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7032498b0cbac9437a93d7deeb72862937c55a98", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\nindex d42efd3362..aff374cd49 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/mapper/ProgramStageInstanceMapper.java\n\n@@ -58,6 +58,7 @@ public class ProgramStageInstanceMapper extends AbstractMapper<Event, ProgramSta\n         noteMapper = new ProgramStageInstanceNoteMapper( ctx );\n     }\n \n+    @Override\n     public ProgramStageInstance map( Event event )\n     {\n         ImportOptions importOptions = workContext.getImportOptions();\n"}}, {"oid": "cff319f2e53756424b8c85e316066dcbe0765f64", "url": "https://github.com/dhis2/dhis2-core/commit/cff319f2e53756424b8c85e316066dcbe0765f64", "message": "fix: Adding some more fixes relgated to update", "committedDate": "2020-04-27T15:05:20Z", "type": "commit"}, {"oid": "94310c673ebda91d6691529e016f6b84808fb7d8", "url": "https://github.com/dhis2/dhis2-core/commit/94310c673ebda91d6691529e016f6b84808fb7d8", "message": "simplied coc fetching", "committedDate": "2020-04-27T15:05:20Z", "type": "commit"}, {"oid": "9989a74f0ebc6e510979406070b1997aad6c33f1", "url": "https://github.com/dhis2/dhis2-core/commit/9989a74f0ebc6e510979406070b1997aad6c33f1", "message": "fix: Fixing bean injection issue", "committedDate": "2020-04-27T15:05:39Z", "type": "commit"}, {"oid": "55a0a02f8c28bf1b5dc2c2d07f054d62d1e00ed2", "url": "https://github.com/dhis2/dhis2-core/commit/55a0a02f8c28bf1b5dc2c2d07f054d62d1e00ed2", "message": "add exception, add unit test", "committedDate": "2020-04-27T15:05:39Z", "type": "commit"}, {"oid": "597c56815e29b1896caf413d110cb4aaabea827e", "url": "https://github.com/dhis2/dhis2-core/commit/597c56815e29b1896caf413d110cb4aaabea827e", "message": "add uid preprocessor", "committedDate": "2020-04-27T15:06:31Z", "type": "commit"}, {"oid": "1341d670cc0f02db839853e96e4808868a32bc4b", "url": "https://github.com/dhis2/dhis2-core/commit/1341d670cc0f02db839853e96e4808868a32bc4b", "message": "fixes after rebase", "committedDate": "2020-04-27T15:50:56Z", "type": "commit"}, {"oid": "23804e9a6861289c8f011c62534dc1a3479768a1", "url": "https://github.com/dhis2/dhis2-core/commit/23804e9a6861289c8f011c62534dc1a3479768a1", "message": "fix: Using the correct update validator factory", "committedDate": "2020-04-28T09:11:41Z", "type": "commit"}, {"oid": "492a7375407c8ad756c081e639d537eb85bf6a66", "url": "https://github.com/dhis2/dhis2-core/commit/492a7375407c8ad756c081e639d537eb85bf6a66", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-04-28T09:31:57Z", "type": "commit"}, {"oid": "cab517b4376316f631f3cb845c4b17f758a98462", "url": "https://github.com/dhis2/dhis2-core/commit/cab517b4376316f631f3cb845c4b17f758a98462", "message": "chore: Pulling master", "committedDate": "2020-04-28T09:33:04Z", "type": "commit"}, {"oid": "ba1f91c027b67ebe27dd38944075e17982bae5b4", "url": "https://github.com/dhis2/dhis2-core/commit/ba1f91c027b67ebe27dd38944075e17982bae5b4", "message": "fix: fix for insert/update of created/lastupdated", "committedDate": "2020-04-28T09:48:09Z", "type": "commit"}, {"oid": "ca1357ed16bd60574f28b28166d0f0a61ec46808", "url": "https://github.com/dhis2/dhis2-core/commit/ca1357ed16bd60574f28b28166d0f0a61ec46808", "message": "- Simplifed logic to INSERT a PSI\n- DataValues are inserted when adding the PSI\n- Better exception handling", "committedDate": "2020-04-28T13:27:04Z", "type": "commit"}, {"oid": "ecc28f50653a82097ba3f3352c344f53c4a172f1", "url": "https://github.com/dhis2/dhis2-core/commit/ecc28f50653a82097ba3f3352c344f53c4a172f1", "message": "feat: Adding skeleton support for update/retry.", "committedDate": "2020-04-28T14:07:54Z", "type": "commit"}, {"oid": "2705a9a1eb249cddeb666b1588836747424c3ae4", "url": "https://github.com/dhis2/dhis2-core/commit/2705a9a1eb249cddeb666b1588836747424c3ae4", "message": "wip: fix import summary", "committedDate": "2020-04-28T14:24:13Z", "type": "commit"}, {"oid": "a337c49bbe5c945631616093e36a119fecbd1379", "url": "https://github.com/dhis2/dhis2-core/commit/a337c49bbe5c945631616093e36a119fecbd1379", "message": "fix merge conflicts", "committedDate": "2020-04-28T14:30:00Z", "type": "commit"}, {"oid": "493b4b58123c1cfd3a0be6f3fb1b6b3c6e372492", "url": "https://github.com/dhis2/dhis2-core/commit/493b4b58123c1cfd3a0be6f3fb1b6b3c6e372492", "message": "fixed UID assignment and fixed import summary logic", "committedDate": "2020-04-28T16:08:03Z", "type": "commit"}, {"oid": "f22aa69ccab93478ae86dd5e549b0d57f03bcd0b", "url": "https://github.com/dhis2/dhis2-core/commit/f22aa69ccab93478ae86dd5e549b0d57f03bcd0b", "message": "refactor: tiny code fix", "committedDate": "2020-04-28T16:11:51Z", "type": "commit"}, {"oid": "eaafdf7cb127f4921016154b506144307da35c55", "url": "https://github.com/dhis2/dhis2-core/commit/eaafdf7cb127f4921016154b506144307da35c55", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-04-28T16:12:02Z", "type": "commit"}, {"oid": "128915ca19f99b1401e8423eb655d5dc4474a273", "url": "https://github.com/dhis2/dhis2-core/commit/128915ca19f99b1401e8423eb655d5dc4474a273", "message": "fixed: NPE during ACL validation due to missing data", "committedDate": "2020-04-28T17:24:02Z", "type": "commit"}, {"oid": "4e95489c92eff1d14b8ffec4e5d25a667518236a", "url": "https://github.com/dhis2/dhis2-core/commit/4e95489c92eff1d14b8ffec4e5d25a667518236a", "message": "refactor: WorkContextLoader refactoring\n\nRefactor of the WorkContextLoader, so that each \"loader\" has its own\nclass. Main advantage is that loaders can be now (potentiall) be\nexecuted in parallel for additional speed", "committedDate": "2020-04-29T07:55:44Z", "type": "commit"}, {"oid": "5bf80c68547b268f821ba955683ecac2136504c4", "url": "https://github.com/dhis2/dhis2-core/commit/5bf80c68547b268f821ba955683ecac2136504c4", "message": "refactor: Extracting event importing into components", "committedDate": "2020-04-29T11:34:30Z", "type": "commit"}, {"oid": "0109001743c3303b9eedef11009e32610eff936b", "url": "https://github.com/dhis2/dhis2-core/commit/0109001743c3303b9eedef11009e32610eff936b", "message": "fix: event's ou contain full path", "committedDate": "2020-04-29T12:01:47Z", "type": "commit"}, {"oid": "a8dc7970671a992f1e6566c6fa99070d28d310ae", "url": "https://github.com/dhis2/dhis2-core/commit/a8dc7970671a992f1e6566c6fa99070d28d310ae", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  refactor: Extracting event importing into components", "committedDate": "2020-04-29T12:01:55Z", "type": "commit"}, {"oid": "c581de67e035ac50cc09df61c5cb396426fc4bb2", "url": "https://github.com/dhis2/dhis2-core/commit/c581de67e035ac50cc09df61c5cb396426fc4bb2", "message": "test: add supplier unit test", "committedDate": "2020-04-29T12:19:56Z", "type": "commit"}, {"oid": "e3f51af4bfba6812b886adba5f0b6543d4da3da7", "url": "https://github.com/dhis2/dhis2-core/commit/e3f51af4bfba6812b886adba5f0b6543d4da3da7", "message": "chore: fix header", "committedDate": "2020-04-29T12:28:06Z", "type": "commit"}, {"oid": "420aefbf4a2f3e91650dc39530c93c55cb5a3c1d", "url": "https://github.com/dhis2/dhis2-core/commit/420aefbf4a2f3e91650dc39530c93c55cb5a3c1d", "message": "chore: fix imports", "committedDate": "2020-04-29T12:30:10Z", "type": "commit"}, {"oid": "0f648cd31402ca430d3a2a7b656377e0bf255d92", "url": "https://github.com/dhis2/dhis2-core/commit/0f648cd31402ca430d3a2a7b656377e0bf255d92", "message": "chore: add unit tests", "committedDate": "2020-04-29T16:17:02Z", "type": "commit"}, {"oid": "e63c166182087bd309b37ea96085048bae28a480", "url": "https://github.com/dhis2/dhis2-core/commit/e63c166182087bd309b37ea96085048bae28a480", "message": "refactor: Clean-up of AbstractEventService nad JacksonEventService", "committedDate": "2020-04-29T17:17:39Z", "type": "commit"}, {"oid": "debe3bfa365cc50cf81ec020daed71fe37ed5253", "url": "https://github.com/dhis2/dhis2-core/commit/debe3bfa365cc50cf81ec020daed71fe37ed5253", "message": "refactor: Renaming ServiceFacade class", "committedDate": "2020-04-29T17:19:37Z", "type": "commit"}, {"oid": "3b6aa6447c5d475547ca02610d0a6fe546d7e71e", "url": "https://github.com/dhis2/dhis2-core/commit/3b6aa6447c5d475547ca02610d0a6fe546d7e71e", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  refactor: Renaming ServiceFacade class\n  refactor: Clean-up of AbstractEventService nad JacksonEventService", "committedDate": "2020-04-30T11:09:06Z", "type": "commit"}, {"oid": "a8e68c2b0d51c2495ee436bb0209d068e3f345ae", "url": "https://github.com/dhis2/dhis2-core/commit/a8e68c2b0d51c2495ee436bb0209d068e3f345ae", "message": "fix: bug fix and refactoring", "committedDate": "2020-04-30T13:58:43Z", "type": "commit"}, {"oid": "d3b71841ab6a9d2d6fe206b108efded0517396c5", "url": "https://github.com/dhis2/dhis2-core/commit/d3b71841ab6a9d2d6fe206b108efded0517396c5", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-04-30T13:58:59Z", "type": "commit"}, {"oid": "5596b0e33f8231066c1f945748b1c0bedfe4ad22", "url": "https://github.com/dhis2/dhis2-core/commit/5596b0e33f8231066c1f945748b1c0bedfe4ad22", "message": "Removed Hibernate for CocLoader, added unit tests", "committedDate": "2020-04-30T16:38:14Z", "type": "commit"}, {"oid": "ad63ad2ef9bf7427f525a46c956081a48cd10c8b", "url": "https://github.com/dhis2/dhis2-core/commit/ad63ad2ef9bf7427f525a46c956081a48cd10c8b", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: bug fix and refactoring\n  chore(translations): sync translations from transifex (master)", "committedDate": "2020-04-30T16:38:41Z", "type": "commit"}, {"oid": "b61733fa42ff674882a5191758e26e0d238efdda", "url": "https://github.com/dhis2/dhis2-core/commit/b61733fa42ff674882a5191758e26e0d238efdda", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-04T07:17:14Z", "type": "commit"}, {"oid": "0be20aad78b08b224d8ca9be8f0ed66d6174fa0f", "url": "https://github.com/dhis2/dhis2-core/commit/0be20aad78b08b224d8ca9be8f0ed66d6174fa0f", "message": "attribute option combo loader unit tests", "committedDate": "2020-05-04T09:06:51Z", "type": "commit"}, {"oid": "353bf532294c0476d59375c05923575268d8f7b7", "url": "https://github.com/dhis2/dhis2-core/commit/353bf532294c0476d59375c05923575268d8f7b7", "message": "fix: load ACL data for programs", "committedDate": "2020-05-04T11:45:56Z", "type": "commit"}, {"oid": "65b02bd5ba917a1fcf71290357c5fef4f5ea1395", "url": "https://github.com/dhis2/dhis2-core/commit/65b02bd5ba917a1fcf71290357c5fef4f5ea1395", "message": "fix: load user and usergroup access for program stages", "committedDate": "2020-05-04T12:27:48Z", "type": "commit"}, {"oid": "2b52e44928a96c8704ad065eeff03e6d3adf69d4", "url": "https://github.com/dhis2/dhis2-core/commit/2b52e44928a96c8704ad065eeff03e6d3adf69d4", "message": "fix: add useraccess and usergroup access for trackedentitytype", "committedDate": "2020-05-04T12:56:01Z", "type": "commit"}, {"oid": "9158ee6074a90e4ddf77f1ed901dab0eb2016e97", "url": "https://github.com/dhis2/dhis2-core/commit/9158ee6074a90e4ddf77f1ed901dab0eb2016e97", "message": "fix: load User Group and Users\n\nIn order for the security layer to work, each Group Access-aware entity\n(Program, Program Stage and Tracked Entity Type) must link the User\nGroup to the actual Users in the group.\nThe WorkContext now also load and caches this relationship.", "committedDate": "2020-05-04T15:01:41Z", "type": "commit"}, {"oid": "a665b0be18484fd9f44ba1a5a80f42c36d3ff309", "url": "https://github.com/dhis2/dhis2-core/commit/a665b0be18484fd9f44ba1a5a80f42c36d3ff309", "message": "reuse sql in program supplier", "committedDate": "2020-05-04T15:19:57Z", "type": "commit"}, {"oid": "0b36bf3869e13644d816716567d10cd941ac9220", "url": "https://github.com/dhis2/dhis2-core/commit/0b36bf3869e13644d816716567d10cd941ac9220", "message": "fix: Adding datavalues to update and handling query exception", "committedDate": "2020-05-04T17:57:26Z", "type": "commit"}, {"oid": "c928e64ca34537a6aa93eca459f0c87b92d73b3a", "url": "https://github.com/dhis2/dhis2-core/commit/c928e64ca34537a6aa93eca459f0c87b92d73b3a", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-04T17:58:04Z", "type": "commit"}, {"oid": "9644b911b341ea77ac0351b1d54cb468c69108cf", "url": "https://github.com/dhis2/dhis2-core/commit/9644b911b341ea77ac0351b1d54cb468c69108cf", "message": "went through todos in temp class", "committedDate": "2020-05-05T08:05:08Z", "type": "commit"}, {"oid": "0d8213bb428dc25bd36192ece643977b2131ac49", "url": "https://github.com/dhis2/dhis2-core/commit/0d8213bb428dc25bd36192ece643977b2131ac49", "message": "fix: add missing validation check\n\nCheck that if Program Stage is not repeatable and the corresponding\nProgram Instance has at least one Event, then fail", "committedDate": "2020-05-05T10:03:07Z", "type": "commit"}, {"oid": "dc25661d17e95b7c9598999ac5f5614900092b46", "url": "https://github.com/dhis2/dhis2-core/commit/dc25661d17e95b7c9598999ac5f5614900092b46", "message": "fix: add AttributeOptionCombo date validation", "committedDate": "2020-05-05T12:32:56Z", "type": "commit"}, {"oid": "ad97368d5235d9bc20f2cc0ff840a0d00d2b33da", "url": "https://github.com/dhis2/dhis2-core/commit/ad97368d5235d9bc20f2cc0ff840a0d00d2b33da", "message": "fix: Draft TEI update for the Update flow (needs test)", "committedDate": "2020-05-05T12:42:50Z", "type": "commit"}, {"oid": "4b7de70fe4a201f7cbc33f529355f49da9d613ce", "url": "https://github.com/dhis2/dhis2-core/commit/4b7de70fe4a201f7cbc33f529355f49da9d613ce", "message": "fix: add setting of Geometry to event using Postprocessor", "committedDate": "2020-05-05T15:13:02Z", "type": "commit"}, {"oid": "7b9977110bda02f1cae87d30e49479237da75bac", "url": "https://github.com/dhis2/dhis2-core/commit/7b9977110bda02f1cae87d30e49479237da75bac", "message": "chore: add test for geometry preprocessor", "committedDate": "2020-05-05T15:22:46Z", "type": "commit"}, {"oid": "8b8fccefcaad067b6652ae797b80011674b8f62d", "url": "https://github.com/dhis2/dhis2-core/commit/8b8fccefcaad067b6652ae797b80011674b8f62d", "message": "fix: Adding the TEI update for Events Update.", "committedDate": "2020-05-05T15:51:31Z", "type": "commit"}, {"oid": "36473fc92dcda6cab1c6be3b6992461d212804b0", "url": "https://github.com/dhis2/dhis2-core/commit/36473fc92dcda6cab1c6be3b6992461d212804b0", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-05T15:51:41Z", "type": "commit"}, {"oid": "1b9506d31c7983cb131691a94f87d2cee8c5fedc", "url": "https://github.com/dhis2/dhis2-core/commit/1b9506d31c7983cb131691a94f87d2cee8c5fedc", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-05T15:53:20Z", "type": "commit"}, {"oid": "c5fb4eb0c160d7e990a15d8bd4c105e01e41afa7", "url": "https://github.com/dhis2/dhis2-core/commit/c5fb4eb0c160d7e990a15d8bd4c105e01e41afa7", "message": "fix: Preventing NPE", "committedDate": "2020-05-06T09:57:26Z", "type": "commit"}, {"oid": "a051997ecc13da565c0a6d6e1393711191aaba8f", "url": "https://github.com/dhis2/dhis2-core/commit/a051997ecc13da565c0a6d6e1393711191aaba8f", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-06T09:57:34Z", "type": "commit"}, {"oid": "f5007b4d6229c59d66ecca4c30275263f29431c8", "url": "https://github.com/dhis2/dhis2-core/commit/f5007b4d6229c59d66ecca4c30275263f29431c8", "message": "fix: Removing TODO comments", "committedDate": "2020-05-06T14:52:37Z", "type": "commit"}, {"oid": "26d36abfd3748f917de51cc4be6efbe3c36e59be", "url": "https://github.com/dhis2/dhis2-core/commit/26d36abfd3748f917de51cc4be6efbe3c36e59be", "message": "fix: moved Program Instance validation logic to own rule", "committedDate": "2020-05-06T15:43:04Z", "type": "commit"}, {"oid": "32f31affbcfd9e9062fee9fdb410cd1845d1a006", "url": "https://github.com/dhis2/dhis2-core/commit/32f31affbcfd9e9062fee9fdb410cd1845d1a006", "message": "fix: added idscheme related  columns to workcontext queries", "committedDate": "2020-05-06T16:05:50Z", "type": "commit"}, {"oid": "ffa1dea233ce8a30c270694d96932b208b2c5999", "url": "https://github.com/dhis2/dhis2-core/commit/ffa1dea233ce8a30c270694d96932b208b2c5999", "message": "fix: handle IdSchemes across Import", "committedDate": "2020-05-06T19:58:46Z", "type": "commit"}, {"oid": "e52a6fe94daa4a2b9d5446d1c51eddb45a782f7b", "url": "https://github.com/dhis2/dhis2-core/commit/e52a6fe94daa4a2b9d5446d1c51eddb45a782f7b", "message": "fix: error with recordset in program supplier", "committedDate": "2020-05-06T20:10:47Z", "type": "commit"}, {"oid": "158265994708859a7f28736536c5bf465eb559dd", "url": "https://github.com/dhis2/dhis2-core/commit/158265994708859a7f28736536c5bf465eb559dd", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-07T13:03:21Z", "type": "commit"}, {"oid": "d0572bc6c028eeee1b6eea3f0537b1e9127f5b4b", "url": "https://github.com/dhis2/dhis2-core/commit/d0572bc6c028eeee1b6eea3f0537b1e9127f5b4b", "message": "refactor: Unifying event import classes and packages", "committedDate": "2020-05-07T14:38:35Z", "type": "commit"}, {"oid": "d659885ca3ec9d279f0984f6c92ddfcc483b8091", "url": "https://github.com/dhis2/dhis2-core/commit/d659885ca3ec9d279f0984f6c92ddfcc483b8091", "message": "refactor: Making the processor factories more generic", "committedDate": "2020-05-11T13:04:21Z", "type": "commit"}, {"oid": "26ad7d6c09f3fb7e5c6303713698d16570dc4092", "url": "https://github.com/dhis2/dhis2-core/commit/26ad7d6c09f3fb7e5c6303713698d16570dc4092", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-11T13:05:39Z", "type": "commit"}, {"oid": "ffbe24fcacf4254a243a74c1c68bd71b864f4efb", "url": "https://github.com/dhis2/dhis2-core/commit/ffbe24fcacf4254a243a74c1c68bd71b864f4efb", "message": "refactor: Making the validation/checker factory generic", "committedDate": "2020-05-11T14:46:53Z", "type": "commit"}, {"oid": "69394676590fae59f6027c8b45cc19b276136d50", "url": "https://github.com/dhis2/dhis2-core/commit/69394676590fae59f6027c8b45cc19b276136d50", "message": "fix: Adding missing post-processor to update flow", "committedDate": "2020-05-11T16:57:10Z", "type": "commit"}, {"oid": "54d0c48703934027015521f71aea5356553cf7a5", "url": "https://github.com/dhis2/dhis2-core/commit/54d0c48703934027015521f71aea5356553cf7a5", "message": "chore: removed unused methods and variables", "committedDate": "2020-05-11T19:04:39Z", "type": "commit"}, {"oid": "96d4fc0b19188a4eac60b08487d5092ef0bca90d", "url": "https://github.com/dhis2/dhis2-core/commit/96d4fc0b19188a4eac60b08487d5092ef0bca90d", "message": "DataValue validation WIP", "committedDate": "2020-05-11T19:05:58Z", "type": "commit"}, {"oid": "35f3a293a679ef28807145633930be39db6364a8", "url": "https://github.com/dhis2/dhis2-core/commit/35f3a293a679ef28807145633930be39db6364a8", "message": "DataValue validation WIP - 2", "committedDate": "2020-05-11T19:06:02Z", "type": "commit"}, {"oid": "71f5ca58ded1cd14057cef51a7c1ba1d7e713422", "url": "https://github.com/dhis2/dhis2-core/commit/71f5ca58ded1cd14057cef51a7c1ba1d7e713422", "message": "- Updated H2 to 1.4.200 in order to support JSON datatype\n- Switched to PGOject to save JSONB data\n- Removed AssignedUIDPreprocessor and moved the logic in the WorkContext loader\n- Removed \"MVCC=TRUE\" from the H2 connection string, since it's no longer compatible with 1.4.200\n- Fixed bug with Orgunits and single parent", "committedDate": "2020-05-11T19:08:47Z", "type": "commit"}, {"oid": "a877658b3844282020fb2f9d15f1ca4879e44fb6", "url": "https://github.com/dhis2/dhis2-core/commit/a877658b3844282020fb2f9d15f1ca4879e44fb6", "message": "Made all validation checks \"final\", so that the validation loop stops as soon as it encounters an error", "committedDate": "2020-05-11T19:08:50Z", "type": "commit"}, {"oid": "74aceb3bc8c6fee8188dd563342bfe643eec434b", "url": "https://github.com/dhis2/dhis2-core/commit/74aceb3bc8c6fee8188dd563342bfe643eec434b", "message": "Add Javadoc", "committedDate": "2020-05-11T19:08:50Z", "type": "commit"}, {"oid": "b8ec7807347eb526c1112388fafb859a4a05417b", "url": "https://github.com/dhis2/dhis2-core/commit/b8ec7807347eb526c1112388fafb859a4a05417b", "message": "various fixes", "committedDate": "2020-05-11T19:08:50Z", "type": "commit"}, {"oid": "9a8e50341a58b40c0f38cade043d6ef116305cc5", "url": "https://github.com/dhis2/dhis2-core/commit/9a8e50341a58b40c0f38cade043d6ef116305cc5", "message": "removed unused import", "committedDate": "2020-05-11T19:09:21Z", "type": "commit"}, {"oid": "32aaa4ce8b6e5081a58f47b88bad608e0d33d15d", "url": "https://github.com/dhis2/dhis2-core/commit/32aaa4ce8b6e5081a58f47b88bad608e0d33d15d", "message": "Fixed several issues that prevented unit test to pass\n\n- Removed cache for category option combo loading and made program cache \"smarter\"\n- JDBC batch insert is now using jdbcTemplate, in order to participate in an existing Spring transaction\n- Fixed unit tests so that data fixtures are flushed to db prior to executing tests", "committedDate": "2020-05-12T19:35:40Z", "type": "commit"}, {"oid": "4b1fb576b0294d2cf6aa3209957774e4f9bb9de8", "url": "https://github.com/dhis2/dhis2-core/commit/4b1fb576b0294d2cf6aa3209957774e4f9bb9de8", "message": "- fixed bug that didn't correctly check the presence of a PSI in the dataase\n- prevent NPE if a import strategy is missing, during validation and preprocssing\n- force clean session in test", "committedDate": "2020-05-13T09:11:05Z", "type": "commit"}, {"oid": "ddcd70181f8c2b27cc070f07157aea0482dfa2d0", "url": "https://github.com/dhis2/dhis2-core/commit/ddcd70181f8c2b27cc070f07157aea0482dfa2d0", "message": "fix: better pre-loading of ProgramInstances", "committedDate": "2020-05-13T13:54:11Z", "type": "commit"}, {"oid": "08332ed88c6797acc9bba8a8b00f40c6be78e765", "url": "https://github.com/dhis2/dhis2-core/commit/08332ed88c6797acc9bba8a8b00f40c6be78e765", "message": "fix: more tests fixed", "committedDate": "2020-05-13T14:36:03Z", "type": "commit"}, {"oid": "e1c475d8cc73f09ebf9b628f0a1461bd4eea8532", "url": "https://github.com/dhis2/dhis2-core/commit/e1c475d8cc73f09ebf9b628f0a1461bd4eea8532", "message": "fix: all tests green", "committedDate": "2020-05-13T15:20:22Z", "type": "commit"}, {"oid": "5023cd54baa57bf68ae741e0858d77e4bd4a79de", "url": "https://github.com/dhis2/dhis2-core/commit/5023cd54baa57bf68ae741e0858d77e4bd4a79de", "message": "fix: fixes for integration tests", "committedDate": "2020-05-13T15:40:58Z", "type": "commit"}, {"oid": "eb37dcaf8b7628af1aa3bf98c7c5288e39386087", "url": "https://github.com/dhis2/dhis2-core/commit/eb37dcaf8b7628af1aa3bf98c7c5288e39386087", "message": "refactor: Delete events flow", "committedDate": "2020-05-13T16:36:21Z", "type": "commit"}, {"oid": "bba4a1a042cd21b47c48568645828c323cf066d2", "url": "https://github.com/dhis2/dhis2-core/commit/bba4a1a042cd21b47c48568645828c323cf066d2", "message": "fix: Merging conflicts", "committedDate": "2020-05-13T17:10:51Z", "type": "commit"}, {"oid": "d55a8c58115a9e347465aaebbedb26e455217297", "url": "https://github.com/dhis2/dhis2-core/commit/d55a8c58115a9e347465aaebbedb26e455217297", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-14T09:08:50Z", "type": "commit"}, {"oid": "74ae17cfa6640e82d40b8cd4f3ee8facfb7eb2da", "url": "https://github.com/dhis2/dhis2-core/commit/74ae17cfa6640e82d40b8cd4f3ee8facfb7eb2da", "message": "chore: Moving variable declaration down", "committedDate": "2020-05-14T09:54:08Z", "type": "commit"}, {"oid": "75ac4955c98610812aa2dadd10f41c70f7ece3a4", "url": "https://github.com/dhis2/dhis2-core/commit/75ac4955c98610812aa2dadd10f41c70f7ece3a4", "message": "chore: cleanup, added tests", "committedDate": "2020-05-14T11:50:11Z", "type": "commit"}, {"oid": "9e95334c4792669079972e96cddf17e3e344a9d0", "url": "https://github.com/dhis2/dhis2-core/commit/9e95334c4792669079972e96cddf17e3e344a9d0", "message": "chore: minor refactoring of factories", "committedDate": "2020-05-14T11:50:11Z", "type": "commit"}, {"oid": "f4dc36ddb18905be91a692f89763794c9c690298", "url": "https://github.com/dhis2/dhis2-core/commit/f4dc36ddb18905be91a692f89763794c9c690298", "message": "chore: ignored test", "committedDate": "2020-05-14T13:16:48Z", "type": "commit"}, {"oid": "8d5f0dcdb48da3754558946ff089f931a1d20707", "url": "https://github.com/dhis2/dhis2-core/commit/8d5f0dcdb48da3754558946ff089f931a1d20707", "message": "chore: added space to ImportSummary message for increaded readibility", "committedDate": "2020-05-14T14:01:48Z", "type": "commit"}, {"oid": "68319190abd3eb858b11ea16b4e41a5749c5dedb", "url": "https://github.com/dhis2/dhis2-core/commit/68319190abd3eb858b11ea16b4e41a5749c5dedb", "message": "fix: handle persisting geometry for insert/update", "committedDate": "2020-05-14T15:34:46Z", "type": "commit"}, {"oid": "d57c0abd530f3606ec72a674d6c9dfaa70ca5e58", "url": "https://github.com/dhis2/dhis2-core/commit/d57c0abd530f3606ec72a674d6c9dfaa70ca5e58", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-15T07:15:20Z", "type": "commit"}, {"oid": "0c4b51aef4cd463ec2a1e3aeb832159aa5f4ddfc", "url": "https://github.com/dhis2/dhis2-core/commit/0c4b51aef4cd463ec2a1e3aeb832159aa5f4ddfc", "message": "fix: Fixing event validation loop and preventing a few NPEs", "committedDate": "2020-05-15T10:01:09Z", "type": "commit"}, {"oid": "58fdb0526ab39c7e20b8ee71f2feb1a153eb6553", "url": "https://github.com/dhis2/dhis2-core/commit/58fdb0526ab39c7e20b8ee71f2feb1a153eb6553", "message": "fix: minor fix", "committedDate": "2020-05-15T10:03:27Z", "type": "commit"}, {"oid": "ae460d9b075b402eb456aa66b57a611019133a10", "url": "https://github.com/dhis2/dhis2-core/commit/ae460d9b075b402eb456aa66b57a611019133a10", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: Fixing event validation loop and preventing a few NPEs", "committedDate": "2020-05-15T10:10:15Z", "type": "commit"}, {"oid": "41e163d57a54466b3e3eb3b9a402e5698c522ab9", "url": "https://github.com/dhis2/dhis2-core/commit/41e163d57a54466b3e3eb3b9a402e5698c522ab9", "message": "fix: typo", "committedDate": "2020-05-15T10:19:44Z", "type": "commit"}, {"oid": "f22b27c28985687e3c7e66fa28ae1ea02e63eb08", "url": "https://github.com/dhis2/dhis2-core/commit/f22b27c28985687e3c7e66fa28ae1ea02e63eb08", "message": "chore: removed duplicated code", "committedDate": "2020-05-15T10:57:03Z", "type": "commit"}, {"oid": "b246797eb62e3fc150ec95297af37fa9be8b42ca", "url": "https://github.com/dhis2/dhis2-core/commit/b246797eb62e3fc150ec95297af37fa9be8b42ca", "message": "fix: cleaned up jdbc code for saving comments", "committedDate": "2020-05-15T12:12:52Z", "type": "commit"}, {"oid": "5cb7f41ce3a0c6ac0c2536bed2cec46bb1ba97c8", "url": "https://github.com/dhis2/dhis2-core/commit/5cb7f41ce3a0c6ac0c2536bed2cec46bb1ba97c8", "message": "refactor: Removing the isFinal() method from checkers", "committedDate": "2020-05-15T13:12:09Z", "type": "commit"}, {"oid": "1cc2ba73283289d87e3ba6fe6a4221239415b04f", "url": "https://github.com/dhis2/dhis2-core/commit/1cc2ba73283289d87e3ba6fe6a4221239415b04f", "message": "fix: Minor code style", "committedDate": "2020-05-15T14:53:54Z", "type": "commit"}, {"oid": "8a1c54d4a9d5767a9a502c2e7d765a2e4fb3b9b5", "url": "https://github.com/dhis2/dhis2-core/commit/8a1c54d4a9d5767a9a502c2e7d765a2e4fb3b9b5", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE", "committedDate": "2020-05-15T14:56:26Z", "type": "commit"}, {"oid": "0d10a3f5afe1decd5bf0458bfcfba7fa3cd63f7a", "url": "https://github.com/dhis2/dhis2-core/commit/0d10a3f5afe1decd5bf0458bfcfba7fa3cd63f7a", "message": "- fix notes loading in workcontext\n- fix assign uid to notes\n- use jdbc for updating notes\n- make sure sort orders for notes is respected", "committedDate": "2020-05-15T15:35:01Z", "type": "commit"}, {"oid": "a5e5d3c4242203a9214d428a50eef11cc0093f49", "url": "https://github.com/dhis2/dhis2-core/commit/a5e5d3c4242203a9214d428a50eef11cc0093f49", "message": "Merge branch 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core into POST_EVENT_PERFORMANCE\n\n* 'POST_EVENT_PERFORMANCE' of https://github.com/dhis2/dhis2-core:\n  fix: Minor code style\n  refactor: Removing the isFinal() method from checkers\n  test:  org unit deletion handlers (DHIS2-8549) (#5323)", "committedDate": "2020-05-15T15:39:27Z", "type": "commit"}, {"oid": "faeadaf0cce1bb2feedd4e933379e709c2976a28", "url": "https://github.com/dhis2/dhis2-core/commit/faeadaf0cce1bb2feedd4e933379e709c2976a28", "message": "chore: minor", "committedDate": "2020-05-15T16:11:59Z", "type": "commit"}]}