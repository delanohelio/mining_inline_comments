{"pr_number": 5324, "pr_title": "fix: calculate metadata pagination total pages", "pr_createdAt": "2020-04-06T10:51:38Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5324", "timeline": [{"oid": "6152876f5f54f85cd40b9b07282211d37734dc0d", "url": "https://github.com/dhis2/dhis2-core/commit/6152876f5f54f85cd40b9b07282211d37734dc0d", "message": "fix: calculate metadata pagination total pages\n\n- DHIS2-8754\n\nThis fix addresses an issue introduced with this PR: https://github.com/dhis2/dhis2-core/commit/b132f0685b9040f194ee5bb932fc08317e0a6aa8\n\nThe `Pager` object requires a \"total\" value in order to properly calculate the number of pages. The \"total\" is **now** passed to the `Pager` object and it's calculated by executing a count query using the same filter and sorting criteria used for the original query.\nIf the Metadata Query engine requires an in-memory query (because a filter or sort field is non-persisted), then the pagination is executed in memory by the Query Engine and no longer in the controller.", "committedDate": "2020-04-06T10:49:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNDIxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404004215", "bodyText": "spaces around \"json\" are required by our code standard", "author": "vilkg", "createdAt": "2020-04-06T10:59:50Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java", "diffHunk": "@@ -113,7 +113,7 @@ public boolean isEntityCreated()\n \n     public boolean containsImportSummaries()\n     {\n-        return getContentType().contains( \"json\" ) ? !CollectionUtils.isEmpty( getImportSummaries() ) : false;\n+        return getContentType().contains(\"json\") && !CollectionUtils.isEmpty(getImportSummaries());", "originalCommit": "6152876f5f54f85cd40b9b07282211d37734dc0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java\nindex 46ada252fd..d81f7a08ab 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java\n\n@@ -113,7 +113,7 @@ public class ApiResponse\n \n     public boolean containsImportSummaries()\n     {\n-        return getContentType().contains(\"json\") && !CollectionUtils.isEmpty(getImportSummaries());\n+        return getContentType().contains( \"json\" ) && !CollectionUtils.isEmpty( getImportSummaries() );\n     }\n \n     public List<ImportSummary> getImportSummaries()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNzAwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404007007", "bodyText": "To ensure that report upon test failure is useful, I would use rest assure assertions instead of jUnit here. For example:\nresponse.validate() .root(\"pager\") .body(\"\", is(notNullValue())) .body(\"pageCount\", greaterThan(expectedPageCount)) .....\nIf this is used, we will get full request and response printed with assertion error and will be able to better evaluate what went wrong.", "author": "vilkg", "createdAt": "2020-04-06T11:05:28Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/metadata/MetadataPaginationActions.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.hisp.dhis.actions.metadata;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.hamcrest.Matchers;\n+import org.hisp.dhis.actions.RestApiActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.hisp.dhis.helpers.QueryParamsBuilder;\n+import org.hisp.dhis.helpers.config.TestConfiguration;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class MetadataPaginationActions\n+    extends\n+    RestApiActions\n+{\n+    public static String DEFAULT_METADATA_FIELDS = \"displayName,shortName,id,lastUpdated,created,displayDescription,code,publicAccess,access,href,level,displayName,publicAccess,lastUpdated,order\";\n+\n+    public static String DEFAULT_METADATA_FILTER = \"name:ne:default\";\n+\n+    public static String DEFAULT_METADATA_SORT = \"displayName:ASC\";\n+\n+    public MetadataPaginationActions( String endpoint )\n+    {\n+        super( endpoint );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives\n+     *\n+     * @param filter a List of String, containing the expressions to filter metadata on\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param sort a List of String, containing the sort expressions\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> filter, List<String> fields, List<String> sort, int page,\n+        int pageSize )\n+    {\n+        assert filter != null;\n+        assert fields != null && !fields.isEmpty();\n+        assert sort != null && !sort.isEmpty();\n+        QueryParamsBuilder params = new QueryParamsBuilder()\n+            .add( \"filter=\" + String.join( \",\", filter ) )\n+            .add( \"fields=\" + String.join( \",\", fields ) )\n+            .add( \"order=\" + String.join( \",\", sort ) )\n+            .add( \"page=\" + page )\n+            .add( \"pageSize=\" + pageSize );\n+\n+        return get( \"\", params );\n+\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter expression\n+     *\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param sort a List of String, containing the sort expressions\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> fields, List<String> sort, int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), fields, sort, page, pageSize );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter and sort expression\n+     *\n+     * @param fields a List of String, containing the name of the fields to return\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( List<String> fields, int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), fields, toParamList( DEFAULT_METADATA_SORT ), page,\n+            pageSize );\n+    }\n+\n+    /**\n+     * Executes a metadata request using pagination directives.\n+     * Uses a default filter, fields and sort expression\n+     *\n+     * @param page the page to return\n+     * @param pageSize the number of elements to return for each page\n+     * @return an {@see ApiResponse} object\n+     */\n+    public ApiResponse getPaginated( int page, int pageSize )\n+    {\n+        return getPaginated( toParamList( DEFAULT_METADATA_FILTER ), toParamList( DEFAULT_METADATA_FIELDS ),\n+            toParamList( DEFAULT_METADATA_SORT ), page, pageSize );\n+    }\n+\n+    /**\n+     * Assert on the pagination (\"pager\") data within the API response\n+     *\n+     * @param response an {@see ApiResponse} object\n+     * @param expectedTotal the expected minimum total number of metadata items\n+     * @param expectedPageCount the expected minimum total number of pages\n+     * @param expectedPageSize the expected value for page size\n+     * @param expectedPage the expected value for the page\n+     */\n+    public void assertPagination( ApiResponse response, int expectedTotal, int expectedPageCount, int expectedPageSize,\n+        int expectedPage )\n+    {\n+        JsonObject pager = response.extractJsonObject( \"pager\" );", "originalCommit": "6152876f5f54f85cd40b9b07282211d37734dc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNzkyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404007921", "bodyText": "Ah, good point, I'll change it to use RestAssure assertions.", "author": "luciano-fiandesio", "createdAt": "2020-04-06T11:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNzAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81", "chunk": "diff --git a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/metadata/MetadataPaginationActions.java b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/metadata/MetadataPaginationActions.java\nindex 120e9612c5..2bcddeb659 100644\n--- a/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/metadata/MetadataPaginationActions.java\n+++ b/dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/metadata/MetadataPaginationActions.java\n\n@@ -64,7 +64,8 @@ public class MetadataPaginationActions\n     /**\n      * Executes a metadata request using pagination directives\n      *\n-     * @param filter a List of String, containing the expressions to filter metadata on\n+     * @param filter a List of String, containing the expressions to filter metadata\n+     *        on\n      * @param fields a List of String, containing the name of the fields to return\n      * @param sort a List of String, containing the sort expressions\n      * @param page the page to return\n"}}, {"oid": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81", "url": "https://github.com/dhis2/dhis2-core/commit/d7b3d520ecf6ed9e18dcf4260e6609390df9de81", "message": "fix: use Restassured assertions", "committedDate": "2020-04-06T11:40:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NDQ3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404144475", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter( typeReport -> typeReport.getStats().getCreated() != 0 || typeReport.getStats().getImported() != 0)\n          \n          \n            \n                            .filter( typeReport -> typeReport.getStats().getCreated() != 0 || typeReport.getStats().getImported() != 0 )", "author": "stian-sandvold", "createdAt": "2020-04-06T14:39:47Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/RestApiActions.java", "diffHunk": "@@ -280,19 +277,15 @@ private void saveCreatedObjects( ApiResponse response )\n         if ( response.containsImportSummaries() )\n         {\n             List<ImportSummary> importSummaries = response.getSuccessfulImportSummaries();\n-            importSummaries.forEach( importSummary -> {\n-                TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() );\n-            } );\n+            importSummaries.forEach( importSummary -> TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() ));\n             return;\n         }\n \n         if ( response.getTypeReports() != null )\n         {\n             SchemasActions schemasActions = new SchemasActions();\n             response.getTypeReports().stream()\n-                .filter( typeReport -> {\n-                    return typeReport.getStats().getCreated() != 0 || typeReport.getStats().getImported() != 0;\n-                } )\n+                .filter( typeReport -> typeReport.getStats().getCreated() != 0 || typeReport.getStats().getImported() != 0)", "originalCommit": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NDU1NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404144554", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        importSummaries.forEach( importSummary -> TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() ));\n          \n          \n            \n                        importSummaries.forEach( importSummary -> TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() ) );", "author": "stian-sandvold", "createdAt": "2020-04-06T14:39:54Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/RestApiActions.java", "diffHunk": "@@ -280,19 +277,15 @@ private void saveCreatedObjects( ApiResponse response )\n         if ( response.containsImportSummaries() )\n         {\n             List<ImportSummary> importSummaries = response.getSuccessfulImportSummaries();\n-            importSummaries.forEach( importSummary -> {\n-                TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() );\n-            } );\n+            importSummaries.forEach( importSummary -> TestRunStorage.addCreatedEntity( endpoint, importSummary.getReference() ));", "originalCommit": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NTEyNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404145125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .filter( is -> is.getStatus().equalsIgnoreCase( \"SUCCESS\" ))\n          \n          \n            \n                        .filter( is -> is.getStatus().equalsIgnoreCase( \"SUCCESS\" ) )", "author": "stian-sandvold", "createdAt": "2020-04-06T14:40:38Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/dto/ApiResponse.java", "diffHunk": "@@ -154,9 +155,7 @@ public boolean containsImportSummaries()\n     public List<ImportSummary> getSuccessfulImportSummaries()\n     {\n         return getImportSummaries().stream()\n-            .filter( is -> {\n-                return is.getStatus().equalsIgnoreCase( \"SUCCESS\" );\n-            } )\n+            .filter( is -> is.getStatus().equalsIgnoreCase( \"SUCCESS\" ))", "originalCommit": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NTMwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5324#discussion_r404145307", "bodyText": "Triple copyright", "author": "stian-sandvold", "createdAt": "2020-04-06T14:40:53Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/metadata/MetadataPaginationTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2004-2018, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/*\n+ * Copyright (c) 2004-2018, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/*\n+ * Copyright (c) 2004-2018, University of Oslo", "originalCommit": "d7b3d520ecf6ed9e18dcf4260e6609390df9de81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}