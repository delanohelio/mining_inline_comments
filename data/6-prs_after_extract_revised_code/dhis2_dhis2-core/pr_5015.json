{"pr_number": 5015, "pr_title": "[2.34] fix: fetch unique values during metadata import", "pr_createdAt": "2020-03-05T15:30:59Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5015", "timeline": [{"oid": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8", "url": "https://github.com/dhis2/dhis2-core/commit/45ee88cb7fb088f06b03bf5af3dd1e589900c0f8", "message": "fix: fetch unique values during metadata import\n\n- DHIS2-8267\n- Introduce new component that fetches only unique attributes for a\n  Metadata object during Metadata import pre-heat (instead of executing\nsomething like \"select * from table\" now the system executes \"select\ncolumn_a, column_c from table\".\n- Force the query to be read-only to prevent Hibernate to syncronize the\n  data with the database\n- Refactored Metadata import validation into Validation Rules, in order\nto improve testability and \"code-cleaness\"\n- \"forward-port\" from 2.33 c346476902b87567ae335875745c933c2ace61c7", "committedDate": "2020-03-05T15:30:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNTgzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389525835", "bodyText": "Several codestyle issues in this file ( paranthesis missing spaces )", "author": "stian-sandvold", "createdAt": "2020-03-09T08:50:56Z", "path": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+package org.hisp.dhis.preheat;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.hamcrest.collection.IsIterableContainingInAnyOrder;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.query.Query;\n+import org.hisp.dhis.DhisConvenienceTest;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.schema.Property;\n+import org.hisp.dhis.schema.Schema;\n+import org.hisp.dhis.sms.command.SMSCommand;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import com.google.common.collect.Lists;\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@SuppressWarnings(\"unchecked\")\n+public class SchemaToDataFetcherTest extends DhisConvenienceTest\n+{\n+    private SchemaToDataFetcher subject;\n+\n+    @Mock\n+    private SessionFactory sessionFactory;\n+\n+    @Mock\n+    private Session session;\n+    \n+    @Mock\n+    private Query query;\n+    \n+    @Rule\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+\n+    @Before\n+    public void setUp()\n+    {\n+        when( sessionFactory.getCurrentSession() ).thenReturn( session );\n+        subject = new SchemaToDataFetcher( sessionFactory );\n+    }\n+    \n+    @Test\n+    public void verifyInput()\n+    {\n+        assertThat(subject.fetch( null ), hasSize(0));", "originalCommit": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2OTU3MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389569571", "bodyText": "Fixed", "author": "luciano-fiandesio", "createdAt": "2020-03-09T10:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNTgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cd698c5903a60c278342d603fdc862fbb2322bd6", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java\nindex c29a09bb71..966981613b 100644\n--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java\n+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/preheat/SchemaToDataFetcherTest.java\n\n@@ -61,26 +61,26 @@ import org.mockito.junit.MockitoJUnit;\n import org.mockito.junit.MockitoRule;\n \n import com.google.common.collect.Lists;\n+\n /**\n  * @author Luciano Fiandesio\n  */\n-@SuppressWarnings(\"unchecked\")\n-public class SchemaToDataFetcherTest extends DhisConvenienceTest\n+@SuppressWarnings( \"unchecked\" )\n+public class SchemaToDataFetcherTest\n+    extends\n+    DhisConvenienceTest\n {\n-    private SchemaToDataFetcher subject;\n+    @Rule\n+    public MockitoRule mockitoRule = MockitoJUnit.rule();\n \n     @Mock\n     private SessionFactory sessionFactory;\n-\n     @Mock\n     private Session session;\n-    \n     @Mock\n     private Query query;\n-    \n-    @Rule\n-    public MockitoRule mockitoRule = MockitoJUnit.rule();\n \n+    private SchemaToDataFetcher subject;\n \n     @Before\n     public void setUp()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNzM5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389527396", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n          \n          \n            \n                                ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );", "author": "stian-sandvold", "createdAt": "2020-03-09T08:54:26Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.metadata.objectbundle.validation.ValidationUtils.addObjectReports;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SecurityCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext context )\n+    {\n+\n+        if ( importStrategy.isCreateAndUpdate() )\n+        {\n+            TypeReport report = runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+            report.merge( runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context ) );\n+            return report;\n+        }\n+        else if ( importStrategy.isCreate() )\n+        {\n+            return runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context );\n+        }\n+        else if ( importStrategy.isUpdate() )\n+        {\n+            return runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+        }\n+        else\n+        {\n+            return new TypeReport( klass );\n+        }\n+\n+    }\n+\n+    private TypeReport runValidationCheck( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> objects, ImportStrategy importMode, ValidationContext ctx )\n+    {\n+\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        if ( objects == null || objects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        Iterator<IdentifiableObject> iterator = objects.iterator();\n+        PreheatIdentifier identifier = bundle.getPreheatIdentifier();\n+\n+        while ( iterator.hasNext() )\n+        {\n+            IdentifiableObject object = iterator.next();\n+\n+            if ( importMode.isCreate() )\n+            {\n+                if ( !ctx.getAclService().canCreate( bundle.getUser(), klass ) )\n+                {\n+                    ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3000,\n+                        identifier.getIdentifiersWithName( bundle.getUser() ),\n+                        identifier.getIdentifiersWithName( object ) );\n+\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);", "originalCommit": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efb6acebd672051e0b78e57d40dcca49b21adef", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\nindex 46fe037457..5ac837c296 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\n\n@@ -102,7 +102,7 @@ public class SecurityCheck\n                         identifier.getIdentifiersWithName( bundle.getUser() ),\n                         identifier.getIdentifiersWithName( object ) );\n \n-                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );\n                     ctx.markForRemoval( object );\n                     continue;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNzUyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389527520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n          \n          \n            \n                                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );", "author": "stian-sandvold", "createdAt": "2020-03-09T08:54:42Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.metadata.objectbundle.validation.ValidationUtils.addObjectReports;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SecurityCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext context )\n+    {\n+\n+        if ( importStrategy.isCreateAndUpdate() )\n+        {\n+            TypeReport report = runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+            report.merge( runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context ) );\n+            return report;\n+        }\n+        else if ( importStrategy.isCreate() )\n+        {\n+            return runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context );\n+        }\n+        else if ( importStrategy.isUpdate() )\n+        {\n+            return runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+        }\n+        else\n+        {\n+            return new TypeReport( klass );\n+        }\n+\n+    }\n+\n+    private TypeReport runValidationCheck( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> objects, ImportStrategy importMode, ValidationContext ctx )\n+    {\n+\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        if ( objects == null || objects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        Iterator<IdentifiableObject> iterator = objects.iterator();\n+        PreheatIdentifier identifier = bundle.getPreheatIdentifier();\n+\n+        while ( iterator.hasNext() )\n+        {\n+            IdentifiableObject object = iterator.next();\n+\n+            if ( importMode.isCreate() )\n+            {\n+                if ( !ctx.getAclService().canCreate( bundle.getUser(), klass ) )\n+                {\n+                    ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3000,\n+                        identifier.getIdentifiersWithName( bundle.getUser() ),\n+                        identifier.getIdentifiersWithName( object ) );\n+\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                    ctx.markForRemoval( object );\n+                    continue;\n+                }\n+            }\n+            else\n+            {\n+                IdentifiableObject persistedObject = bundle.getPreheat().get( bundle.getPreheatIdentifier(), object );\n+\n+                if ( importMode.isUpdate() )\n+                {\n+                    if ( !ctx.getAclService().canUpdate( bundle.getUser(), persistedObject ) )\n+                    {\n+                        ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3001,\n+                            identifier.getIdentifiersWithName( bundle.getUser() ),\n+                            identifier.getIdentifiersWithName( object ) );\n+\n+                        ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);", "originalCommit": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efb6acebd672051e0b78e57d40dcca49b21adef", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\nindex 46fe037457..5ac837c296 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\n\n@@ -102,7 +102,7 @@ public class SecurityCheck\n                         identifier.getIdentifiersWithName( bundle.getUser() ),\n                         identifier.getIdentifiersWithName( object ) );\n \n-                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );\n                     ctx.markForRemoval( object );\n                     continue;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNzU5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5015#discussion_r389527597", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n          \n          \n            \n                                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );", "author": "stian-sandvold", "createdAt": "2020-03-09T08:54:52Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.hisp.dhis.dxf2.metadata.objectbundle.validation.ValidationUtils.addObjectReports;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class SecurityCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext context )\n+    {\n+\n+        if ( importStrategy.isCreateAndUpdate() )\n+        {\n+            TypeReport report = runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+            report.merge( runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context ) );\n+            return report;\n+        }\n+        else if ( importStrategy.isCreate() )\n+        {\n+            return runValidationCheck( bundle, klass, nonPersistedObjects, ImportStrategy.CREATE, context );\n+        }\n+        else if ( importStrategy.isUpdate() )\n+        {\n+            return runValidationCheck( bundle, klass, persistedObjects, ImportStrategy.UPDATE, context );\n+        }\n+        else\n+        {\n+            return new TypeReport( klass );\n+        }\n+\n+    }\n+\n+    private TypeReport runValidationCheck( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> objects, ImportStrategy importMode, ValidationContext ctx )\n+    {\n+\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        if ( objects == null || objects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        Iterator<IdentifiableObject> iterator = objects.iterator();\n+        PreheatIdentifier identifier = bundle.getPreheatIdentifier();\n+\n+        while ( iterator.hasNext() )\n+        {\n+            IdentifiableObject object = iterator.next();\n+\n+            if ( importMode.isCreate() )\n+            {\n+                if ( !ctx.getAclService().canCreate( bundle.getUser(), klass ) )\n+                {\n+                    ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3000,\n+                        identifier.getIdentifiersWithName( bundle.getUser() ),\n+                        identifier.getIdentifiersWithName( object ) );\n+\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                    ctx.markForRemoval( object );\n+                    continue;\n+                }\n+            }\n+            else\n+            {\n+                IdentifiableObject persistedObject = bundle.getPreheat().get( bundle.getPreheatIdentifier(), object );\n+\n+                if ( importMode.isUpdate() )\n+                {\n+                    if ( !ctx.getAclService().canUpdate( bundle.getUser(), persistedObject ) )\n+                    {\n+                        ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3001,\n+                            identifier.getIdentifiersWithName( bundle.getUser() ),\n+                            identifier.getIdentifiersWithName( object ) );\n+\n+                        ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                        ctx.markForRemoval( object );\n+                        continue;\n+                    }\n+                }\n+                else if ( importMode.isDelete() )\n+                {\n+                    if ( !ctx.getAclService().canDelete( bundle.getUser(), persistedObject ) )\n+                    {\n+                        ErrorReport errorReport = new ErrorReport( klass, ErrorCode.E3002,\n+                            identifier.getIdentifiersWithName( bundle.getUser() ),\n+                            identifier.getIdentifiersWithName( object ) );\n+\n+                        ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);", "originalCommit": "45ee88cb7fb088f06b03bf5af3dd1e589900c0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efb6acebd672051e0b78e57d40dcca49b21adef", "chunk": "diff --git a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\nindex 46fe037457..5ac837c296 100644\n--- a/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\n+++ b/dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/SecurityCheck.java\n\n@@ -102,7 +102,7 @@ public class SecurityCheck\n                         identifier.getIdentifiersWithName( bundle.getUser() ),\n                         identifier.getIdentifiersWithName( object ) );\n \n-                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle);\n+                    ValidationUtils.addObjectReport( errorReport, typeReport, object, bundle );\n                     ctx.markForRemoval( object );\n                     continue;\n                 }\n"}}, {"oid": "8efb6acebd672051e0b78e57d40dcca49b21adef", "url": "https://github.com/dhis2/dhis2-core/commit/8efb6acebd672051e0b78e57d40dcca49b21adef", "message": "Apply suggestions from code review", "committedDate": "2020-03-09T08:55:05Z", "type": "commit"}, {"oid": "cd698c5903a60c278342d603fdc862fbb2322bd6", "url": "https://github.com/dhis2/dhis2-core/commit/cd698c5903a60c278342d603fdc862fbb2322bd6", "message": "chore: formatting", "committedDate": "2020-03-09T10:20:05Z", "type": "commit"}]}