{"pr_number": 1845, "pr_title": "avoid statsdclient varargs in monitor", "pr_createdAt": "2020-09-08T14:53:41Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1845", "timeline": [{"oid": "da9de1393e96acd9b5d67266fe213d049137c45b", "url": "https://github.com/DataDog/dd-trace-java/commit/da9de1393e96acd9b5d67266fe213d049137c45b", "message": "prevent varargs allocation in Monitor", "committedDate": "2020-09-08T14:55:12Z", "type": "forcePushed"}, {"oid": "21156bba40f22e6ba10744dd33094079104de157", "url": "https://github.com/DataDog/dd-trace-java/commit/21156bba40f22e6ba10744dd33094079104de157", "message": "move all caches and functions into internal API", "committedDate": "2020-09-08T15:00:15Z", "type": "commit"}, {"oid": "b83f4c3cad857d5a1a0ccbcbf22a3968fe754f0c", "url": "https://github.com/DataDog/dd-trace-java/commit/b83f4c3cad857d5a1a0ccbcbf22a3968fe754f0c", "message": "make radixtreeboxcache values generic", "committedDate": "2020-09-08T15:00:15Z", "type": "commit"}, {"oid": "d9df230364f800b9292e7e79c038c249e35a36e7", "url": "https://github.com/DataDog/dd-trace-java/commit/d9df230364f800b9292e7e79c038c249e35a36e7", "message": "prevent varargs allocation in Monitor", "committedDate": "2020-09-08T15:00:15Z", "type": "forcePushed"}, {"oid": "c7914f1870daf6e71f472c8fb32d239c3738672b", "url": "https://github.com/DataDog/dd-trace-java/commit/c7914f1870daf6e71f472c8fb32d239c3738672b", "message": "prevent varargs allocation in Monitor", "committedDate": "2020-09-08T15:17:32Z", "type": "commit"}, {"oid": "c7914f1870daf6e71f472c8fb32d239c3738672b", "url": "https://github.com/DataDog/dd-trace-java/commit/c7914f1870daf6e71f472c8fb32d239c3738672b", "message": "prevent varargs allocation in Monitor", "committedDate": "2020-09-08T15:17:32Z", "type": "forcePushed"}, {"oid": "9859aba08f333ee6195377d316a1d2280b58d023", "url": "https://github.com/DataDog/dd-trace-java/commit/9859aba08f333ee6195377d316a1d2280b58d023", "message": "improve test coverage (no indirect coverage now)", "committedDate": "2020-09-08T16:21:10Z", "type": "commit"}, {"oid": "ade00a3a16da855016efaaab0308be99387539bc", "url": "https://github.com/DataDog/dd-trace-java/commit/ade00a3a16da855016efaaab0308be99387539bc", "message": "remove asserts", "committedDate": "2020-09-08T17:49:11Z", "type": "commit"}, {"oid": "ade00a3a16da855016efaaab0308be99387539bc", "url": "https://github.com/DataDog/dd-trace-java/commit/ade00a3a16da855016efaaab0308be99387539bc", "message": "remove asserts", "committedDate": "2020-09-08T17:49:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5NzU5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1845#discussion_r485397592", "bodyText": "So if this is starting to show up, then we should seriously entertain the idea of fixing the statsd client.", "author": "bantonsson", "createdAt": "2020-09-09T07:31:00Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/monitor/Monitor.java", "diffHunk": "@@ -52,14 +66,14 @@ public Monitor(final StatsDClient statsd) {\n   }\n \n   public void onStart(final int queueCapacity) {\n-    statsd.recordGaugeValue(\"queue.max_length\", queueCapacity);\n+    statsd.recordGaugeValue(\"queue.max_length\", queueCapacity, NO_TAGS);", "originalCommit": "c7914f1870daf6e71f472c8fb32d239c3738672b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMTg3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1845#discussion_r485421874", "bodyText": "I started doing that yesterday, but I'm coordinating with the team who are doing a big refactoring. So it's going to be a few weeks before we can actually get 0, 1, 2 tag overloads on. I want this as a stopgap for enabling health metrics by default.", "author": "richardstartin", "createdAt": "2020-09-09T08:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5NzU5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5ODEzNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1845#discussion_r485398134", "bodyText": "What a wonderful piece of code \ud83d\ude09", "author": "bantonsson", "createdAt": "2020-09-09T07:32:04Z", "path": "internal-api/src/test/groovy/datadog/trace/ThreadUtils.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package datadog.trace;\n+\n+import groovy.lang.Closure;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class ThreadUtils {\n+\n+  /**\n+   * Utility to easily run a Closure in parallel, i.e. in spock like this:\n+   *\n+   * <pre>{@code\n+   * def \"some test\"() {\n+   *   expect:\n+   *   runConcurrently(10, 100, {\n+   *     def something = ...\n+   *     def other = ...\n+   *     assert something == other\n+   *   })\n+   * }\n+   * }</pre>\n+   *\n+   * Writing a spock extension was investigated, but it is not possible to run an Invocation\n+   * multiple times concurrently since a lot of the spock internal state and mock scoping is not\n+   * thread safe.\n+   *\n+   * @param concurrency the number of concurrent invocations\n+   * @param totalInvocations the total number of invocations\n+   * @param closure the closure to run\n+   * @return true if everything went well\n+   * @throws Throwable if anything went wrong\n+   */\n+  public static boolean runConcurrently(", "originalCommit": "9859aba08f333ee6195377d316a1d2280b58d023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMTkwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1845#discussion_r485421906", "bodyText": "I tried to import the module but it caused build problems.", "author": "richardstartin", "createdAt": "2020-09-09T08:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5ODEzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5OTM5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1845#discussion_r485399392", "bodyText": "Why was this assert removed?", "author": "bantonsson", "createdAt": "2020-09-09T07:34:30Z", "path": "internal-api/src/main/java/datadog/trace/api/cache/RadixTreeCache.java", "diffHunk": "@@ -33,10 +33,6 @@ public Integer apply(int value) {\n   private final IntFunction<T> mapper;\n \n   public RadixTreeCache(int level1, int level2, IntFunction<T> mapper, int... commonValues) {\n-    assert Integer.bitCount(level1) == 1\n-        && Integer.bitCount(level2) == 1\n-        && level1 > 0\n-        && level2 > 0;", "originalCommit": "ade00a3a16da855016efaaab0308be99387539bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMzQyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1845#discussion_r485423426", "bodyText": "Because the test suite never gives the constructor a case which violates the assert, and some of the branches cannot be guaranteed to be covered even with concurrent testing (one branch handles being beaten in a CAS) this actually brings the branch coverage down to a point where the build will fail sometimes. I could give it 3, 5 or -1, 2 just to prove asserts work, or exclude from coverage tracking (which I think would be far, far worse than removing the assert).", "author": "richardstartin", "createdAt": "2020-09-09T08:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5OTM5Mg=="}], "type": "inlineReview", "revised_code": null}]}