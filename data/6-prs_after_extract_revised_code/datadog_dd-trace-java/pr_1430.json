{"pr_number": 1430, "pr_title": "intern UTF8 encoding of well known constants to reduce allocation in \u2026", "pr_createdAt": "2020-05-05T09:33:10Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1430", "timeline": [{"oid": "4622ff9570f36e053c9b2e4614c1191c48a5fb16", "url": "https://github.com/DataDog/dd-trace-java/commit/4622ff9570f36e053c9b2e4614c1191c48a5fb16", "message": "intern UTF8 encoding of well known constants to reduce allocation in MsgPack writer", "committedDate": "2020-05-05T09:32:01Z", "type": "commit"}, {"oid": "8a0ec88414387d7d8860250186bc2aa4cf356284", "url": "https://github.com/DataDog/dd-trace-java/commit/8a0ec88414387d7d8860250186bc2aa4cf356284", "message": "rationalise component names to ease deduplication of component encodings, aim to deduplicate tags in msgpack serialisation", "committedDate": "2020-05-05T11:39:36Z", "type": "commit"}, {"oid": "977bd6c6b7a0c552e9aac35d9ab0394548bd9abd", "url": "https://github.com/DataDog/dd-trace-java/commit/977bd6c6b7a0c552e9aac35d9ab0394548bd9abd", "message": "reformat DDComponents", "committedDate": "2020-05-05T12:03:50Z", "type": "commit"}, {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "url": "https://github.com/DataDog/dd-trace-java/commit/f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "message": "exclude DDComponentTypes from minimum coverage check", "committedDate": "2020-05-05T13:05:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MDQ4Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420150482", "bodyText": "Please move this to the internal-api project (or somewhere else not \"publicly accessible\").", "author": "tylerbenson", "createdAt": "2020-05-05T14:24:48Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/DDComponents.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.api;\n+\n+public class DDComponents {", "originalCommit": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MTkyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420171924", "bodyText": "moved to internal-api", "author": "richardstartin", "createdAt": "2020-05-05T14:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e2e9a75f8c28652aaba2631f5e46071b21c64712", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/DDComponents.java b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/DDComponents.java\nsimilarity index 98%\nrename from dd-trace-api/src/main/java/datadog/trace/api/DDComponents.java\nrename to internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/DDComponents.java\nindex 343a2caeed..5265a0e239 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/DDComponents.java\n+++ b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/DDComponents.java\n\n@@ -1,4 +1,4 @@\n-package datadog.trace.api;\n+package datadog.trace.bootstrap.instrumentation.api;\n \n public class DDComponents {\n   public static final String ELASTICSEARCH_JAVA = \"elasticsearch-java\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MjQyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420152422", "bodyText": "Should we instead use an LRU cache?", "author": "tylerbenson", "createdAt": "2020-05-05T14:27:19Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package datadog.trace.core;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.api.DDComponents;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringTables {\n+\n+  public static final String SERVICE = \"service\";\n+  public static final String NAME = \"name\";\n+  public static final String RESOURCE = \"resource\";\n+  public static final String TRACE_ID = \"trace_id\";\n+  public static final String SPAN_ID = \"span_id\";\n+  public static final String PARENT_ID = \"parent_id\";\n+  public static final String START = \"start\";\n+  public static final String DURATION = \"duration\";\n+  public static final String TYPE = \"type\";\n+  public static final String ERROR = \"error\";\n+  public static final String METRICS = \"metrics\";\n+  public static final String META = \"meta\";\n+\n+  // intentionally not thread safe; must be maintained to be effectively immutable\n+  // if a constant registration API is added, should be ensured that this is only used during\n+  // startup\n+  private static final Map<String, byte[]> UTF8_INTERN_TABLE = new HashMap<>(256);", "originalCommit": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2MjQ0OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420162449", "bodyText": "no, I don't want to put concurrency control on the hot path.", "author": "richardstartin", "createdAt": "2020-05-05T14:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MjQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NDQzMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420164431", "bodyText": "I figured.  I'm ok with this.", "author": "tylerbenson", "createdAt": "2020-05-05T14:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MjQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "e2e9a75f8c28652aaba2631f5e46071b21c64712", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java b/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\nindex 955e7c2ae8..bfefa87bed 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\n\n@@ -2,7 +2,7 @@ package datadog.trace.core;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n \n-import datadog.trace.api.DDComponents;\n+import datadog.trace.bootstrap.instrumentation.api.DDComponents;\n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.reflect.Field;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MzI2OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420153269", "bodyText": "Most of these strings will not be used in every application.  Is it worth only loading strings that are actually used?", "author": "tylerbenson", "createdAt": "2020-05-05T14:28:25Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package datadog.trace.core;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.api.DDComponents;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringTables {\n+\n+  public static final String SERVICE = \"service\";\n+  public static final String NAME = \"name\";\n+  public static final String RESOURCE = \"resource\";\n+  public static final String TRACE_ID = \"trace_id\";\n+  public static final String SPAN_ID = \"span_id\";\n+  public static final String PARENT_ID = \"parent_id\";\n+  public static final String START = \"start\";\n+  public static final String DURATION = \"duration\";\n+  public static final String TYPE = \"type\";\n+  public static final String ERROR = \"error\";\n+  public static final String METRICS = \"metrics\";\n+  public static final String META = \"meta\";\n+\n+  // intentionally not thread safe; must be maintained to be effectively immutable\n+  // if a constant registration API is added, should be ensured that this is only used during\n+  // startup\n+  private static final Map<String, byte[]> UTF8_INTERN_TABLE = new HashMap<>(256);\n+\n+  static {\n+    internConstantsUTF8(StringTables.class);\n+    internConstantsUTF8(Tags.class);\n+    internConstantsUTF8(DDSpanTypes.class);\n+    internConstantsUTF8(DDComponents.class);", "originalCommit": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2MzM4NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420163385", "bodyText": "The total footprint is small kilobytes, I don't think it is worth the potential complexity of registration.", "author": "richardstartin", "createdAt": "2020-05-05T14:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MzI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NDU3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420164575", "bodyText": "I figured.  I'm ok with this.", "author": "tylerbenson", "createdAt": "2020-05-05T14:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MzI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2e9a75f8c28652aaba2631f5e46071b21c64712", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java b/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\nindex 955e7c2ae8..bfefa87bed 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\n\n@@ -2,7 +2,7 @@ package datadog.trace.core;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n \n-import datadog.trace.api.DDComponents;\n+import datadog.trace.bootstrap.instrumentation.api.DDComponents;\n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.reflect.Field;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1NDIzMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420154231", "bodyText": "I was wondering how all those fields were getting referenced... clever.", "author": "tylerbenson", "createdAt": "2020-05-05T14:29:37Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package datadog.trace.core;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.api.DDComponents;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringTables {\n+\n+  public static final String SERVICE = \"service\";\n+  public static final String NAME = \"name\";\n+  public static final String RESOURCE = \"resource\";\n+  public static final String TRACE_ID = \"trace_id\";\n+  public static final String SPAN_ID = \"span_id\";\n+  public static final String PARENT_ID = \"parent_id\";\n+  public static final String START = \"start\";\n+  public static final String DURATION = \"duration\";\n+  public static final String TYPE = \"type\";\n+  public static final String ERROR = \"error\";\n+  public static final String METRICS = \"metrics\";\n+  public static final String META = \"meta\";\n+\n+  // intentionally not thread safe; must be maintained to be effectively immutable\n+  // if a constant registration API is added, should be ensured that this is only used during\n+  // startup\n+  private static final Map<String, byte[]> UTF8_INTERN_TABLE = new HashMap<>(256);\n+\n+  static {\n+    internConstantsUTF8(StringTables.class);\n+    internConstantsUTF8(Tags.class);\n+    internConstantsUTF8(DDSpanTypes.class);\n+    internConstantsUTF8(DDComponents.class);\n+  }\n+\n+  public static byte[] getBytesUTF8(String value) {\n+    byte[] bytes = UTF8_INTERN_TABLE.get(value);\n+    return null == bytes ? value.getBytes(UTF_8) : bytes;\n+  }\n+\n+  private static void internConstantsUTF8(Class<?> clazz) {\n+    for (Field field : clazz.getDeclaredFields()) {\n+      if (Modifier.isStatic(field.getModifiers())\n+          && Modifier.isPublic(field.getModifiers())\n+          && field.getType() == String.class) {", "originalCommit": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e9a75f8c28652aaba2631f5e46071b21c64712", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java b/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\nindex 955e7c2ae8..bfefa87bed 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\n\n@@ -2,7 +2,7 @@ package datadog.trace.core;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n \n-import datadog.trace.api.DDComponents;\n+import datadog.trace.bootstrap.instrumentation.api.DDComponents;\n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.reflect.Field;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1ODUwMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420158500", "bodyText": "Since UTF8_INTERN_TABLE is not an LRU cache, I think component will be the only case where the tag will likely be interned (thanks to DDComponents). Is this intentional? Should we extend this to other values?", "author": "tylerbenson", "createdAt": "2020-05-05T14:35:24Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/MsgpackFormatWriter.java", "diffHunk": "@@ -18,78 +19,99 @@ public void writeListHeader(final int size, final MessagePacker destination) thr\n   }\n \n   @Override\n-  public void writeListFooter(final MessagePacker destination) throws IOException {}\n+  public void writeListFooter(final MessagePacker destination) {}\n \n   @Override\n   public void writeMapHeader(final int size, final MessagePacker destination) throws IOException {\n     destination.packMapHeader(size);\n   }\n \n   @Override\n-  public void writeMapFooter(final MessagePacker destination) throws IOException {}\n+  public void writeMapFooter(final MessagePacker destination) {}\n \n   @Override\n   public void writeString(final String key, final String value, final MessagePacker destination)\n       throws IOException {\n-    destination.packString(key);\n+    writeStringUTF8(key, destination);\n     if (value == null) {\n       destination.packNil();\n     } else {\n       destination.packString(value);\n     }\n   }\n \n+  @Override\n+  public void writeTag(String key, String value, MessagePacker destination) throws IOException {\n+    // there's a good chance that the tag value will be something we have interned\n+    writeStringUTF8(key, destination);\n+    if (value == null) {\n+      destination.packNil();\n+    } else {\n+      writeStringUTF8(value, destination);\n+    }\n+  }", "originalCommit": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NTQ1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420165459", "bodyText": "span types are also interned. Again, I don't think an LRU cache as opposed to an immutable constant pool is the right abstraction here because these lookups go into a CPU intensive pipeline, any concurrency control will slow these lookups down.", "author": "richardstartin", "createdAt": "2020-05-05T14:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1ODUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2ODU0Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420168547", "bodyText": "Span types are not added with this method, so I think component will be the only thing that applies.", "author": "tylerbenson", "createdAt": "2020-05-05T14:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1ODUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3NjMzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420176339", "bodyText": "What about here? https://github.com/DataDog/dd-trace-java/blob/master/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/BaseDecorator.java#L45", "author": "richardstartin", "createdAt": "2020-05-05T14:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1ODUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MzIxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420183211", "bodyText": "That's deceiving... after the trace is finished but before serializing it gets removed as a tag and set as a field: https://github.com/DataDog/dd-trace-java/blob/master/dd-trace-core/src/main/java/datadog/trace/core/processor/rule/SpanTypeRule.java", "author": "tylerbenson", "createdAt": "2020-05-05T15:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1ODUwMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e2e9a75f8c28652aaba2631f5e46071b21c64712", "url": "https://github.com/DataDog/dd-trace-java/commit/e2e9a75f8c28652aaba2631f5e46071b21c64712", "message": "move DDComponents to internal-api", "committedDate": "2020-05-05T14:51:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MTE3Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420171176", "bodyText": "That's so beautiful:)\nI think we can even remove the 1st argument of this function.", "author": "lpriima", "createdAt": "2020-05-05T14:51:31Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package datadog.trace.core;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.api.DDComponents;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringTables {\n+\n+  public static final String SERVICE = \"service\";\n+  public static final String NAME = \"name\";\n+  public static final String RESOURCE = \"resource\";\n+  public static final String TRACE_ID = \"trace_id\";\n+  public static final String SPAN_ID = \"span_id\";\n+  public static final String PARENT_ID = \"parent_id\";\n+  public static final String START = \"start\";\n+  public static final String DURATION = \"duration\";\n+  public static final String TYPE = \"type\";\n+  public static final String ERROR = \"error\";\n+  public static final String METRICS = \"metrics\";\n+  public static final String META = \"meta\";\n+\n+  // intentionally not thread safe; must be maintained to be effectively immutable\n+  // if a constant registration API is added, should be ensured that this is only used during\n+  // startup\n+  private static final Map<String, byte[]> UTF8_INTERN_TABLE = new HashMap<>(256);\n+\n+  static {\n+    internConstantsUTF8(StringTables.class);\n+    internConstantsUTF8(Tags.class);\n+    internConstantsUTF8(DDSpanTypes.class);\n+    internConstantsUTF8(DDComponents.class);\n+  }\n+\n+  public static byte[] getBytesUTF8(String value) {\n+    byte[] bytes = UTF8_INTERN_TABLE.get(value);\n+    return null == bytes ? value.getBytes(UTF_8) : bytes;\n+  }\n+\n+  private static void internConstantsUTF8(Class<?> clazz) {\n+    for (Field field : clazz.getDeclaredFields()) {\n+      if (Modifier.isStatic(field.getModifiers())\n+          && Modifier.isPublic(field.getModifiers())\n+          && field.getType() == String.class) {\n+        try {\n+          intern(UTF8_INTERN_TABLE, (String) field.get(null), UTF_8);\n+        } catch (IllegalAccessException e) {\n+          // won't happen\n+        }\n+      }\n+    }\n+  }\n+\n+  private static void intern(Map<String, byte[]> table, String value, Charset encoding) {", "originalCommit": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26415cb25fb8266bc6a12e7ed2674fbb9d1e1ad0", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java b/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\nindex 955e7c2ae8..9499af5395 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/StringTables.java\n\n@@ -2,8 +2,8 @@ package datadog.trace.core;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n \n-import datadog.trace.api.DDComponents;\n import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.DDComponents;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n"}}, {"oid": "26415cb25fb8266bc6a12e7ed2674fbb9d1e1ad0", "url": "https://github.com/DataDog/dd-trace-java/commit/26415cb25fb8266bc6a12e7ed2674fbb9d1e1ad0", "message": "formatting", "committedDate": "2020-05-05T15:04:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NjU4Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420186582", "bodyText": "@richardartoul you can see the span type set here.", "author": "tylerbenson", "createdAt": "2020-05-05T15:11:44Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java", "diffHunk": "@@ -84,18 +101,18 @@ public void writeTrace(final List<DDSpan> trace, final DEST destination) throws\n   public void writeDDSpan(final DDSpan span, final DEST destination) throws IOException {\n     // Some of the tests rely on the specific ordering here.\n     writeMapHeader(12, destination); // must match count below.\n-    /* 1  */ writeString(\"service\", span.getServiceName(), destination);\n-    /* 2  */ writeString(\"name\", span.getOperationName(), destination);\n-    /* 3  */ writeString(\"resource\", span.getResourceName(), destination);\n-    /* 4  */ writeBigInteger(\"trace_id\", span.getTraceId(), destination);\n-    /* 5  */ writeBigInteger(\"span_id\", span.getSpanId(), destination);\n-    /* 6  */ writeBigInteger(\"parent_id\", span.getParentId(), destination);\n-    /* 7  */ writeLong(\"start\", span.getStartTime(), destination);\n-    /* 8  */ writeLong(\"duration\", span.getDurationNano(), destination);\n-    /* 9  */ writeString(\"type\", span.getType(), destination);\n-    /* 10 */ writeInt(\"error\", span.getError(), destination);\n-    /* 11 */ writeNumberMap(\"metrics\", span.getMetrics(), destination);\n-    /* 12 */ writeStringMap(\"meta\", span.getMeta(), destination);\n+    /* 1  */ writeString(SERVICE, span.getServiceName(), destination);\n+    /* 2  */ writeString(NAME, span.getOperationName(), destination);\n+    /* 3  */ writeString(RESOURCE, span.getResourceName(), destination);\n+    /* 4  */ writeBigInteger(TRACE_ID, span.getTraceId(), destination);\n+    /* 5  */ writeBigInteger(SPAN_ID, span.getSpanId(), destination);\n+    /* 6  */ writeBigInteger(PARENT_ID, span.getParentId(), destination);\n+    /* 7  */ writeLong(START, span.getStartTime(), destination);\n+    /* 8  */ writeLong(DURATION, span.getDurationNano(), destination);\n+    /* 9  */ writeString(TYPE, span.getType(), destination);", "originalCommit": "26415cb25fb8266bc6a12e7ed2674fbb9d1e1ad0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5NTExOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420195118", "bodyText": "Writing this via the lookup table now, thanks.", "author": "richardstartin", "createdAt": "2020-05-05T15:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NjU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5d2a2208f3a7aceaa4fc82055fb7c3b8c7fa3adc", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java b/dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java\nindex e232a1a26f..c33f185dbf 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java\n\n@@ -109,7 +109,7 @@ public abstract class FormatWriter<DEST> {\n     /* 6  */ writeBigInteger(PARENT_ID, span.getParentId(), destination);\n     /* 7  */ writeLong(START, span.getStartTime(), destination);\n     /* 8  */ writeLong(DURATION, span.getDurationNano(), destination);\n-    /* 9  */ writeString(TYPE, span.getType(), destination);\n+    /* 9  */ writeTag(TYPE, span.getType(), destination);\n     /* 10 */ writeInt(ERROR, span.getError(), destination);\n     /* 11 */ writeNumberMap(METRICS, span.getMetrics(), destination);\n     /* 12 */ writeStringMap(META, span.getMeta(), destination);\n"}}, {"oid": "5d2a2208f3a7aceaa4fc82055fb7c3b8c7fa3adc", "url": "https://github.com/DataDog/dd-trace-java/commit/5d2a2208f3a7aceaa4fc82055fb7c3b8c7fa3adc", "message": "write span type via string table lookup", "committedDate": "2020-05-05T15:22:25Z", "type": "commit"}]}