{"pr_number": 1363, "pr_title": "exception sampler changes", "pr_createdAt": "2020-04-13T14:00:10Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1363", "timeline": [{"oid": "ed25c98ab37c4c176f81483986fac45756cebce3", "url": "https://github.com/DataDog/dd-trace-java/commit/ed25c98ab37c4c176f81483986fac45756cebce3", "message": "Simplify code a bit", "committedDate": "2020-04-13T13:59:16Z", "type": "commit"}, {"oid": "3fd1fa9d82de06b4a7add2ddf8defb7ed424a845", "url": "https://github.com/DataDog/dd-trace-java/commit/3fd1fa9d82de06b4a7add2ddf8defb7ed424a845", "message": "Make gradle happy", "committedDate": "2020-04-13T13:59:27Z", "type": "commit"}, {"oid": "b39b37db7e3d27de23f725c7751e06c7b5089273", "url": "https://github.com/DataDog/dd-trace-java/commit/b39b37db7e3d27de23f725c7751e06c7b5089273", "message": "Load our event classe to make sure they are loading fine\n\nTo avoid accidentally breaking customer code by instrumentation.", "committedDate": "2020-04-13T14:06:56Z", "type": "commit"}, {"oid": "873ca2209ec1f3352a95562890c7bcf976bb78c9", "url": "https://github.com/DataDog/dd-trace-java/commit/873ca2209ec1f3352a95562890c7bcf976bb78c9", "message": "Revert change to load our exception event class\n\nWe cannot do this because it is not visible on apps classloader after\ninstrumentation has been applied.", "committedDate": "2020-04-13T14:50:27Z", "type": "commit"}, {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae", "url": "https://github.com/DataDog/dd-trace-java/commit/556e96e1e5c649d2a854e89eb84e951de4750eae", "message": "Add exception cause information to exception event", "committedDate": "2020-04-13T14:50:34Z", "type": "commit"}, {"oid": "dc689f037c7644db5aaf21eaec1b324c2be2aa34", "url": "https://github.com/DataDog/dd-trace-java/commit/dc689f037c7644db5aaf21eaec1b324c2be2aa34", "message": "Remove array based EMA calculations", "committedDate": "2020-04-13T16:52:28Z", "type": "commit"}, {"oid": "62765c9d0b9b1b7602f440176819246df8402fae", "url": "https://github.com/DataDog/dd-trace-java/commit/62765c9d0b9b1b7602f440176819246df8402fae", "message": "Minor tests cleanup", "committedDate": "2020-04-13T17:09:46Z", "type": "commit"}, {"oid": "c927438b79f3159dad9a92d074977c90506914e5", "url": "https://github.com/DataDog/dd-trace-java/commit/c927438b79f3159dad9a92d074977c90506914e5", "message": "Define mockito dependency", "committedDate": "2020-04-13T17:46:43Z", "type": "commit"}, {"oid": "3889014026f62fdf4a1dde6f5ffe87c239f164e0", "url": "https://github.com/DataDog/dd-trace-java/commit/3889014026f62fdf4a1dde6f5ffe87c239f164e0", "message": "Inject common executor into ExceptionSampler\n\nOriginal implementation had bugs in it which were not covered with tests.", "committedDate": "2020-04-13T18:38:12Z", "type": "commit"}, {"oid": "0dc63c7e382b033636e6ed336ea2997e9b80149f", "url": "https://github.com/DataDog/dd-trace-java/commit/0dc63c7e382b033636e6ed336ea2997e9b80149f", "message": "Simnplify sampler tests\n\nRunning multiple threads blocked on phaser should have exactly the\nsame effect as just starting new threads on each iteration - which is simpler.", "committedDate": "2020-04-13T18:43:47Z", "type": "commit"}, {"oid": "7438b588f79dac662e9be75a382d063f0ff10acd", "url": "https://github.com/DataDog/dd-trace-java/commit/7438b588f79dac662e9be75a382d063f0ff10acd", "message": "Use sfl4j", "committedDate": "2020-04-13T18:47:24Z", "type": "commit"}, {"oid": "b560c7a39574aa65fbb5b9b51aaa491994d21776", "url": "https://github.com/DataDog/dd-trace-java/commit/b560c7a39574aa65fbb5b9b51aaa491994d21776", "message": "Merge branch 'jb/PROF-581_exceptions_sampler' into mar-kolya/exception-sampler-changes", "committedDate": "2020-04-13T23:31:23Z", "type": "commit"}, {"oid": "cb1c15bf2302b7b84235c4b2481978e7878dfdad", "url": "https://github.com/DataDog/dd-trace-java/commit/cb1c15bf2302b7b84235c4b2481978e7878dfdad", "message": "Use new safe periodic tasks", "committedDate": "2020-04-14T01:05:56Z", "type": "commit"}, {"oid": "9f401865918f86b9dc57e66d21cc19f17373a691", "url": "https://github.com/DataDog/dd-trace-java/commit/9f401865918f86b9dc57e66d21cc19f17373a691", "message": "Make gradle happy temporarily\n\nAdd temporary fix to gradle to make things compile.\nWill have to open another PR to make things beautiful.", "committedDate": "2020-04-14T01:08:51Z", "type": "forcePushed"}, {"oid": "47a3241988dd541e3803387a87c8ce49e448711f", "url": "https://github.com/DataDog/dd-trace-java/commit/47a3241988dd541e3803387a87c8ce49e448711f", "message": "Make gradle happy temporarily\n\nAdd temporary fix to gradle to make things compile.\nWill have to open another PR to make things beautiful.", "committedDate": "2020-04-14T01:27:05Z", "type": "commit"}, {"oid": "47a3241988dd541e3803387a87c8ce49e448711f", "url": "https://github.com/DataDog/dd-trace-java/commit/47a3241988dd541e3803387a87c8ce49e448711f", "message": "Make gradle happy temporarily\n\nAdd temporary fix to gradle to make things compile.\nWill have to open another PR to make things beautiful.", "committedDate": "2020-04-14T01:27:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODQyOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407558429", "bodyText": "Nit: This is unnecessary. Since Java 8 the effectively immutable variables are treated as such without the necessity of declaring them final. But I guess this is done by the auto-formatter plugin ...", "author": "jbachorik", "createdAt": "2020-04-13T16:05:16Z", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionProfiling.java", "diffHunk": "@@ -36,7 +35,7 @@ public ExceptionSampleEvent process(final Exception e) {\n     // always record the exception in histogram\n     final boolean firstHit = histogram.record(e);\n \n-    boolean sampled = sampler.sample();\n+    final boolean sampled = sampler.sample();", "originalCommit": "556e96e1e5c649d2a854e89eb84e951de4750eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1NjIyMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408056221", "bodyText": "Yeah, this is done by autoformatting", "author": "mar-kolya", "createdAt": "2020-04-14T11:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODQyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODgyOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407558828", "bodyText": "Did the auto-formatter do this as well? It is not really conventional to have one-liner javadoc.", "author": "jbachorik", "createdAt": "2020-04-13T16:05:59Z", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java", "diffHunk": "@@ -17,28 +17,42 @@\n   @Label(\"Exception message\")\n   private final String message;\n \n-  /**\n-   * JFR may truncate the stack trace - so store original length as well.\n-   */\n+  /** JFR may truncate the stack trace - so store original length as well. */", "originalCommit": "556e96e1e5c649d2a854e89eb84e951de4750eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1Njg4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408056884", "bodyText": "Yeah, I'm not doing this manually", "author": "mar-kolya", "createdAt": "2020-04-14T11:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a72093e2367f4b0e18a87213b815ab33e896f858", "chunk": "diff --git a/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java b/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java\nindex accca50ade..76fad32eb5 100644\n--- a/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java\n+++ b/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java\n\n@@ -21,12 +21,6 @@ public class ExceptionSampleEvent extends Event {\n   @Label(\"Exception stackdepth\")\n   private final int stackDepth;\n \n-  @Label(\"Cause type\")\n-  private final String causeType;\n-\n-  @Label(\"Cause message\")\n-  private final String causeMessage;\n-\n   @Label(\"Sampled\")\n   private final boolean sampled;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MjY0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407562643", "bodyText": "I am not really convinced this should be here. There can be a chain of causes - why are we capturing just the first one? There are certainly situations when only 3rd+ cause starts to be really interesting. If we want to capture all the causes down to the root we would need to somehow fit them into one string, which could become quite long :/\nIMO, we should think about all the consequences before we commit to providing this info.", "author": "jbachorik", "createdAt": "2020-04-13T16:13:05Z", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java", "diffHunk": "@@ -17,28 +17,42 @@\n   @Label(\"Exception message\")\n   private final String message;\n \n-  /**\n-   * JFR may truncate the stack trace - so store original length as well.\n-   */\n+  /** JFR may truncate the stack trace - so store original length as well. */\n   @Label(\"Exception stackdepth\")\n   private final int stackDepth;\n \n+  @Label(\"Cause type\")\n+  private final String causeType;\n+\n+  @Label(\"Cause message\")\n+  private final String causeMessage;\n+", "originalCommit": "556e96e1e5c649d2a854e89eb84e951de4750eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MjYyMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408072621", "bodyText": "removed", "author": "mar-kolya", "createdAt": "2020-04-14T11:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MjY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a72093e2367f4b0e18a87213b815ab33e896f858", "chunk": "diff --git a/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java b/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java\nindex accca50ade..76fad32eb5 100644\n--- a/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java\n+++ b/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java\n\n@@ -21,12 +21,6 @@ public class ExceptionSampleEvent extends Event {\n   @Label(\"Exception stackdepth\")\n   private final int stackDepth;\n \n-  @Label(\"Cause type\")\n-  private final String causeType;\n-\n-  @Label(\"Cause message\")\n-  private final String causeMessage;\n-\n   @Label(\"Sampled\")\n   private final boolean sampled;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2OTE3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407969172", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * for compensate for too rapid changes in the incoming events rate and maintain the target average\n          \n          \n            \n             * to compensate for too rapid changes in the incoming events rate and maintain the target average", "author": "jbachorik", "createdAt": "2020-04-14T08:47:46Z", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/StreamingSampler.java", "diffHunk": "@@ -16,40 +13,31 @@\n  * A streaming (non-remembering) sampler.\n  *\n  * <p>The sampler attempts to generate at most N samples per fixed time window in randomized\n- * fashion. For this it divides the timeline into 'profiling windows' of constant length/duration.\n- * Each profiling window targets a constant number of samples which are scattered randomly (uniform distribution)\n- * throughout the window duration and once the window is over the real stats of incoming events and the number of\n- * gathered samples is used to recompute the target probability to use in the following window.\n- * </p>\n- * <p>\n- * This will guarantee, if the windows are not excessively large, that the sampler will be able to adjust\n- * to the changes in the rate of incoming events.\n- * </p>\n- * <p>\n- * However, there might so rapid changes in incoming events rate that we will optimistically use all allowed samples\n- * well before the current window has elapsed or, on the other end of the spectrum, there will be to few incoming events\n- * and the sampler will not be able to generate the target number of samples.\n- * </p>\n- * <p>\n- * To smooth out these hicups the sampler maintains an under/over-sampling budget which can be used for compensate\n- * for too rapid changes in the incoming events rate and maintain the target average number of samples per window.\n- * </p>\n+ * fashion. For this it divides the timeline into 'sampling windows' of constant duration. Each\n+ * sampling window targets a constant number of samples which are scattered randomly (uniform\n+ * distribution) throughout the window duration and once the window is over the real stats of\n+ * incoming events and the number of gathered samples is used to recompute the target probability to\n+ * use in the following window.\n+ *\n+ * <p>This will guarantee, if the windows are not excessively large, that the sampler will be able\n+ * to adjust to the changes in the rate of incoming events.\n+ *\n+ * <p>However, there might so rapid changes in incoming events rate that we will optimistically use\n+ * all allowed samples well before the current window has elapsed or, on the other end of the\n+ * spectrum, there will be to few incoming events and the sampler will not be able to generate the\n+ * target number of samples.\n+ *\n+ * <p>To smooth out these hicups the sampler maintains an under-sampling budget which can be used\n+ * for compensate for too rapid changes in the incoming events rate and maintain the target average", "originalCommit": "47a3241988dd541e3803387a87c8ce49e448711f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bc73d5452a8293d54958ff8dd46e319d0511a1e", "chunk": "diff --git a/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/StreamingSampler.java b/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/StreamingSampler.java\nindex 96fd2916cd..454b515b48 100644\n--- a/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/StreamingSampler.java\n+++ b/dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/StreamingSampler.java\n\n@@ -28,7 +28,7 @@ import java.util.concurrent.atomic.LongAdder;\n  * target number of samples.\n  *\n  * <p>To smooth out these hicups the sampler maintains an under-sampling budget which can be used\n- * for compensate for too rapid changes in the incoming events rate and maintain the target average\n+ * to compensate for too rapid changes in the incoming events rate and maintain the target average\n  * number of samples per window.\n  */\n class StreamingSampler {\n"}}, {"oid": "0bc73d5452a8293d54958ff8dd46e319d0511a1e", "url": "https://github.com/DataDog/dd-trace-java/commit/0bc73d5452a8293d54958ff8dd46e319d0511a1e", "message": "javadoc fix\n\nCo-Authored-By: Jaroslav Bachorik <jaroslav.bachorik@datadoghq.com>", "committedDate": "2020-04-14T11:14:01Z", "type": "commit"}, {"oid": "1068a7e2a5810f0e822537c37d85c0cba490a54c", "url": "https://github.com/DataDog/dd-trace-java/commit/1068a7e2a5810f0e822537c37d85c0cba490a54c", "message": "Add sourceset for java11\n\nwithout it changing java version affects whole project", "committedDate": "2020-04-14T11:42:01Z", "type": "commit"}, {"oid": "a72093e2367f4b0e18a87213b815ab33e896f858", "url": "https://github.com/DataDog/dd-trace-java/commit/a72093e2367f4b0e18a87213b815ab33e896f858", "message": "Remove exception cause\n\nwe will have to think more about this", "committedDate": "2020-04-14T11:42:01Z", "type": "commit"}]}