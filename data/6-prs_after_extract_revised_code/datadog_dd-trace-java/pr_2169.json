{"pr_number": 2169, "pr_title": "Support for pre-defined profiler templates", "pr_createdAt": "2020-12-07T14:27:43Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2169", "timeline": [{"oid": "1eb298a7ce157d68ecc7fe7f2928df90ceec774c", "url": "https://github.com/DataDog/dd-trace-java/commit/1eb298a7ce157d68ecc7fe7f2928df90ceec774c", "message": "Support for pre-defined profiler templates", "committedDate": "2020-12-07T14:48:15Z", "type": "forcePushed"}, {"oid": "4846d02a934fcd2ea0e538ef0b0a2ba04540dd6b", "url": "https://github.com/DataDog/dd-trace-java/commit/4846d02a934fcd2ea0e538ef0b0a2ba04540dd6b", "message": "Support for pre-defined profiler templates", "committedDate": "2020-12-07T15:33:51Z", "type": "forcePushed"}, {"oid": "97d81381b348afdee888c00730cb2c755a356e33", "url": "https://github.com/DataDog/dd-trace-java/commit/97d81381b348afdee888c00730cb2c755a356e33", "message": "Support for pre-defined profiler templates", "committedDate": "2020-12-09T11:15:14Z", "type": "commit"}, {"oid": "97d81381b348afdee888c00730cb2c755a356e33", "url": "https://github.com/DataDog/dd-trace-java/commit/97d81381b348afdee888c00730cb2c755a356e33", "message": "Support for pre-defined profiler templates", "committedDate": "2020-12-09T11:15:14Z", "type": "forcePushed"}, {"oid": "59451a425e687800f3534010b54880b4d4e844b2", "url": "https://github.com/DataDog/dd-trace-java/commit/59451a425e687800f3534010b54880b4d4e844b2", "message": "OldObjectSample is not enabled in the default config", "committedDate": "2020-12-09T11:36:05Z", "type": "commit"}, {"oid": "4e293cc883e67bef6a487f30636d3fd96418480b", "url": "https://github.com/DataDog/dd-trace-java/commit/4e293cc883e67bef6a487f30636d3fd96418480b", "message": "Make level information extraction resilient to config formatting errors", "committedDate": "2020-12-09T12:49:01Z", "type": "commit"}, {"oid": "424afc805930e27b623734bb7fef643941b32b81", "url": "https://github.com/DataDog/dd-trace-java/commit/424afc805930e27b623734bb7fef643941b32b81", "message": "Use predefined templates", "committedDate": "2020-12-11T15:47:52Z", "type": "commit"}, {"oid": "8fd6a758cf6b0ab36ea4798c43425764476bdae8", "url": "https://github.com/DataDog/dd-trace-java/commit/8fd6a758cf6b0ab36ea4798c43425764476bdae8", "message": "Fix dd.jfp", "committedDate": "2020-12-11T17:03:37Z", "type": "commit"}, {"oid": "ddc040b72b94a3584afc012637e97f6b4937365a", "url": "https://github.com/DataDog/dd-trace-java/commit/ddc040b72b94a3584afc012637e97f6b4937365a", "message": "Fix typos", "committedDate": "2020-12-11T17:23:42Z", "type": "commit"}, {"oid": "f4db6ad7a5aaffff1c48af51baaf55d23c3a1cd4", "url": "https://github.com/DataDog/dd-trace-java/commit/f4db6ad7a5aaffff1c48af51baaf55d23c3a1cd4", "message": "Throw IOExcetpion for an invalid override to be consistent with previous behaviour", "committedDate": "2020-12-14T08:38:27Z", "type": "commit"}, {"oid": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8", "url": "https://github.com/DataDog/dd-trace-java/commit/d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8", "message": "Allow extension-less definition of built-in template", "committedDate": "2020-12-15T11:45:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5NjE3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544096179", "bodyText": "forget to delete ?", "author": "lpriima", "createdAt": "2020-12-16T08:17:08Z", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/OpenJdkController.java", "diffHunk": "@@ -22,12 +22,14 @@\n import java.time.Duration;\n import java.util.Map;\n import jdk.jfr.Recording;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * This is the implementation of the controller for OpenJDK. It should work for JDK 11+ today, and\n  * unmodified for JDK 8+ once JFR has been back-ported. The Oracle JDK implementation will be far\n  * messier... ;)\n  */\n+@Slf4j", "originalCommit": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDExNTc3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544115770", "bodyText": "Right. Will remove.", "author": "jbachorik", "createdAt": "2020-12-16T08:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5NjE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e92f6ff5c2097730c7c80e71fe3bea22ca10739f", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/OpenJdkController.java b/dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/OpenJdkController.java\nindex 4c1240ff8e..fa8bba2903 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/OpenJdkController.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/OpenJdkController.java\n\n@@ -22,14 +22,12 @@ import java.io.IOException;\n import java.time.Duration;\n import java.util.Map;\n import jdk.jfr.Recording;\n-import lombok.extern.slf4j.Slf4j;\n \n /**\n  * This is the implementation of the controller for OpenJDK. It should work for JDK 11+ today, and\n  * unmodified for JDK 8+ once JFR has been back-ported. The Oracle JDK implementation will be far\n  * messier... ;)\n  */\n-@Slf4j\n public final class OpenJdkController implements Controller {\n   // Visible for testing\n   static final String JFP = \"jfr/dd.jfp\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5ODgyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544098820", "bodyText": "I can suggest to test {\"minimal\", \"minimal\"} to cover path where you add .jfp", "author": "lpriima", "createdAt": "2020-12-16T08:21:24Z", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/test/java/com/datadog/profiling/controller/openjdk/JfpUtilsTest.java", "diffHunk": "@@ -29,4 +40,22 @@ public void testLoadingContinuousConfigWithOverride() throws IOException {\n     assertEquals(\"true\", config.get(CONFIG_ENTRY));\n     assertEquals(\"200\", config.get(CONFIG_OVERRIDE_ENTRY));\n   }\n+\n+  @ParameterizedTest\n+  @ValueSource(strings = {\"minimal\", \"minimal.jfp\"})", "originalCommit": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMDcxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544120715", "bodyText": "This is actually testing that - the parameter values are there exactly to check both fully specified and with no extension.", "author": "jbachorik", "createdAt": "2020-12-16T08:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5ODgyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNDM3Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544104373", "bodyText": "These lines don't deal with closable resources, so they can be moved outside/before try {} block and maybe use try-with:\n      if (!overridesFileName.toLowerCase().endsWith(JFP_EXTENSION)) {\n        overridesFileName = overridesFileName + JFP_EXTENSION;\n      }\n      File override = new File(overridesFileName);\n      try (InputStream overrideStream =\n          override.exists()\n              ? new FileInputStream(override)\n              : getNamedResource(OVERRIDES_PATH + overridesFileName)) {\n        result.putAll(readJfpFile(overrideStream));  // `readJfpFile` already has a null check\n      }", "author": "lpriima", "createdAt": "2020-12-16T08:30:01Z", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/JfpUtils.java", "diffHunk": "@@ -53,15 +57,37 @@ private static InputStream getNamedResource(final String name) {\n   }\n \n   public static Map<String, String> readNamedJfpResource(\n-      final String name, final String overridesFile) throws IOException {\n-    final Map<String, String> result;\n+      final String name, String overridesFileName) throws IOException {\n+    final Map<String, String> result = new HashMap<>();\n+\n     try (final InputStream stream = getNamedResource(name)) {\n-      result = readJfpFile(stream);\n+      result.putAll(readJfpFile(stream));\n     }\n \n-    if (overridesFile != null) {\n-      try (final InputStream stream = new FileInputStream(overridesFile)) {\n-        result.putAll(readJfpFile(stream));\n+    if (overridesFileName != null) {\n+      InputStream overrideStream = null;\n+      try {\n+        if (!overridesFileName.toLowerCase().endsWith(JFP_EXTENSION)) {\n+          overridesFileName = overridesFileName + JFP_EXTENSION;\n+        }\n+        File override = new File(overridesFileName);", "originalCommit": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTg4MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544121881", "bodyText": "Yep. It can be simplified. Will take a look.", "author": "jbachorik", "createdAt": "2020-12-16T08:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNDM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e92f6ff5c2097730c7c80e71fe3bea22ca10739f", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/JfpUtils.java b/dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/JfpUtils.java\nindex f2bfdd6f5c..22341678e5 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/JfpUtils.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/JfpUtils.java\n\n@@ -65,29 +65,19 @@ final class JfpUtils {\n     }\n \n     if (overridesFileName != null) {\n-      InputStream overrideStream = null;\n-      try {\n-        if (!overridesFileName.toLowerCase().endsWith(JFP_EXTENSION)) {\n-          overridesFileName = overridesFileName + JFP_EXTENSION;\n-        }\n-        File override = new File(overridesFileName);\n-        if (override.exists()) {\n-          overrideStream = new FileInputStream(override);\n-        } else {\n-          overrideStream = getNamedResource(OVERRIDES_PATH + overridesFileName);\n-        }\n+      if (!overridesFileName.toLowerCase().endsWith(JFP_EXTENSION)) {\n+        overridesFileName = overridesFileName + JFP_EXTENSION;\n+      }\n+      File override = new File(overridesFileName);\n+      try (InputStream overrideStream =\n+          override.exists()\n+              ? new FileInputStream(override)\n+              : getNamedResource(OVERRIDES_PATH + overridesFileName)) {\n         if (overrideStream != null) {\n           result.putAll(readJfpFile(overrideStream));\n         } else {\n           throw new IOException(\"Invalid override file \" + overridesFileName);\n         }\n-      } finally {\n-        if (overrideStream != null) {\n-          try {\n-            overrideStream.close();\n-          } catch (IOException ignored) {\n-          }\n-        }\n       }\n     }\n     return Collections.unmodifiableMap(result);\n"}}, {"oid": "e92f6ff5c2097730c7c80e71fe3bea22ca10739f", "url": "https://github.com/DataDog/dd-trace-java/commit/e92f6ff5c2097730c7c80e71fe3bea22ca10739f", "message": "Use try-with-resources", "committedDate": "2020-12-16T09:01:34Z", "type": "commit"}]}