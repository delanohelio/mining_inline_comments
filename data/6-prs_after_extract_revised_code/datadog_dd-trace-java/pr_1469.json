{"pr_number": 1469, "pr_title": "Add new method returns ThreadInfo", "pr_createdAt": "2020-05-18T15:45:02Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1469", "timeline": [{"oid": "6a9e4d2ea93b059516ae1299c71c6084da3dd113", "url": "https://github.com/DataDog/dd-trace-java/commit/6a9e4d2ea93b059516ae1299c71c6084da3dd113", "message": "Add new method returns ThreadInfo", "committedDate": "2020-05-18T15:43:02Z", "type": "commit"}, {"oid": "f8d3884aa6ebf180268a451bea4e60d266dbc848", "url": "https://github.com/DataDog/dd-trace-java/commit/f8d3884aa6ebf180268a451bea4e60d266dbc848", "message": "improve test coverage", "committedDate": "2020-05-18T16:29:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NzY0Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r426777646", "bodyText": "Where does the need for this to be a collection originate from? Can we make do with this being a long[] everywhere given that this won't be public API (won't it?)", "author": "richardstartin", "createdAt": "2020-05-18T17:15:02Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "diffHunk": "@@ -30,4 +26,24 @@\n     }\n     return stackTraces;\n   }\n+\n+  @Override\n+  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {", "originalCommit": "f8d3884aa6ebf180268a451bea4e60d266dbc848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMTI4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r427111289", "bodyText": "The underlying call is indeed a long[] for the JMX call, but in the end we may change for other thing. So I won't to lock the api to an implementation.", "author": "jpbempel", "createdAt": "2020-05-19T08:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NzY0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTczNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r427131735", "bodyText": "Does the other thing take a List<Long> and return a List<ThreadInfo>? The wrapping here doesn't really abstract the underlying call.", "author": "richardstartin", "createdAt": "2020-05-19T08:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NzY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2b9da97318332255efd4a8aa3ccef6cb1e038a6c", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java b/dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java\nindex 1549f2aa46..93da40dfac 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java\n\n@@ -14,36 +10,24 @@ public class JmxThreadStackProvider implements ThreadStackProvider {\n   public static final ThreadStackProvider INSTANCE = new JmxThreadStackProvider();\n \n   @Override\n-  public List<StackTraceElement[]> getStackTrace(List<Long> threadIds) {\n-    long[] ids = convertIds(threadIds);\n-    ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(ids); // maxDepth?\n+  public StackTraceElement[][] getStackTrace(long[] threadIds) {\n+    ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(threadIds); // maxDepth?\n     if (threadInfos.length == 0) {\n-      return Collections.emptyList();\n+      return ThreadStackProvider.EMPTY_STACKTRACE_ARRAY;\n     }\n-    List<StackTraceElement[]> stackTraces = new ArrayList<>();\n+    StackTraceElement[][] stackTraces = new StackTraceElement[threadInfos.length][];\n     for (int i = 0; i < threadInfos.length; i++) {\n-      stackTraces.add(threadInfos[i].getStackTrace());\n+      stackTraces[i] = threadInfos[i].getStackTrace();\n     }\n     return stackTraces;\n   }\n \n   @Override\n-  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {\n-    long[] ids = convertIds(threadIds);\n-    ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(ids); // maxDepth?\n+  public ThreadInfo[] getThreadInfo(long[] threadIds) {\n+    ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(threadIds); // maxDepth?\n     if (threadInfos.length == 0) {\n-      return Collections.emptyList();\n+      return ThreadStackProvider.EMPTY_THERADINFO_ARRAY;\n     }\n-    return Arrays.asList(threadInfos);\n-  }\n-\n-  private long[] convertIds(List<Long> threadIds) {\n-    long[] ids = new long[threadIds.size()];\n-    int idx = 0;\n-    for (Long id : threadIds) {\n-      ids[idx] = id;\n-      idx++;\n-    }\n-    return ids;\n+    return threadInfos;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODI3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r426778279", "bodyText": "Who consumes this API? Is there a reason they can't consume ThreadInfo[] given that's what we're wrapping elsewhere?", "author": "richardstartin", "createdAt": "2020-05-18T17:16:12Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java", "diffHunk": "@@ -9,4 +10,9 @@\n   public List<StackTraceElement[]> getStackTrace(List<Long> threadIds) {\n     return Collections.emptyList();\n   }\n+\n+  @Override\n+  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {", "originalCommit": "f8d3884aa6ebf180268a451bea4e60d266dbc848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMTUyMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r427111523", "bodyText": "same remark than above", "author": "jpbempel", "createdAt": "2020-05-19T08:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2b9da97318332255efd4a8aa3ccef6cb1e038a6c", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java b/dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java\nindex cb486cd2fa..52234b918a 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java\n\n@@ -1,18 +1,16 @@\n package datadog.trace.core.util;\n \n import java.lang.management.ThreadInfo;\n-import java.util.Collections;\n-import java.util.List;\n \n public class NoneThreadStackProvider implements ThreadStackProvider {\n \n   @Override\n-  public List<StackTraceElement[]> getStackTrace(List<Long> threadIds) {\n-    return Collections.emptyList();\n+  public StackTraceElement[][] getStackTrace(long[] threadIds) {\n+    return ThreadStackProvider.EMPTY_STACKTRACE_ARRAY;\n   }\n \n   @Override\n-  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {\n-    return Collections.emptyList();\n+  public ThreadInfo[] getThreadInfo(long[] threadIds) {\n+    return ThreadStackProvider.EMPTY_THERADINFO_ARRAY;\n   }\n }\n"}}, {"oid": "2b9da97318332255efd4a8aa3ccef6cb1e038a6c", "url": "https://github.com/DataDog/dd-trace-java/commit/2b9da97318332255efd4a8aa3ccef6cb1e038a6c", "message": "Use arrays instead of lists", "committedDate": "2020-05-19T08:55:22Z", "type": "commit"}]}