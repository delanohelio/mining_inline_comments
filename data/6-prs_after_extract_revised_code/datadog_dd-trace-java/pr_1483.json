{"pr_number": 1483, "pr_title": "PROF-1560: Fix simple type constant pool handling", "pr_createdAt": "2020-05-21T13:41:47Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1483", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNjQ1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429106453", "bodyText": "nit: I was expecting for a bool a something like computedHashCode\nif you want to express the need to computeHashCode, maybe: needsComputeHashCode or\nisComputedHashCode`", "author": "jpbempel", "createdAt": "2020-05-22T08:13:38Z", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.datadog.profiling.jfr;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import lombok.Generated;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+@Generated\n+final class ImmutableMapEntry<K, V> implements Map.Entry<K, V> {\n+  private volatile boolean computeHashCode = true;\n+  private int hashCode;\n+\n+  @Getter private final K key;\n+  @Getter private final V value;\n+\n+  ImmutableMapEntry(@NonNull K key, V value) {\n+    this.key = key;\n+    this.value = value;\n+  }\n+\n+  @Override\n+  public V setValue(V v) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    ImmutableMapEntry<?, ?> that = (ImmutableMapEntry<?, ?>) o;\n+    return key.equals(that.key) && Objects.equals(value, that.value);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    if (computeHashCode) {", "originalCommit": "3d803dd789c1340227d8ec166231225f5ed60567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMDQ1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429120452", "bodyText": "Yep. Lost-in-translation - I meant computeHashCode?, but yes I will change the name", "author": "jbachorik", "createdAt": "2020-05-22T08:43:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNjQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "65fe706d6f22f8d433d1ebf8c41c3acec135c5f0", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\nindex f30efe4759..61298ae233 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\n\n@@ -2,6 +2,7 @@ package com.datadog.profiling.jfr;\n \n import java.util.Map;\n import java.util.Objects;\n+\n import lombok.Generated;\n import lombok.Getter;\n import lombok.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwODQ4Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429108487", "bodyText": "optional: volatile is not require here, like for string this is a benign race.\nworst case you compute hashcode couple of  times for concurrent requests", "author": "jpbempel", "createdAt": "2020-05-22T08:18:11Z", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.datadog.profiling.jfr;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import lombok.Generated;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+@Generated\n+final class ImmutableMapEntry<K, V> implements Map.Entry<K, V> {\n+  private volatile boolean computeHashCode = true;", "originalCommit": "3d803dd789c1340227d8ec166231225f5ed60567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExOTA1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429119056", "bodyText": "I was pondering this - however, without volatile there is no guarantee that the hashCode value will ever be visible to other threads/cores (since it is not volatile itself).\nPerhaps making hashCode volatile instead would make the intention more clear? The number of load/store points would be exactly the same.", "author": "jbachorik", "createdAt": "2020-05-22T08:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwODQ4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNDkxOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429124919", "bodyText": "I would consider the hashCode field as a cache, and if reading/writing to it without any volatile is good enough for the String implementation in the standard library, then I think it's good enough for this code as well.\nOne could use 0 as an illegal/uninitialized hashCode and compute/assign it if it's 0 and skip the extra boolean.", "author": "bantonsson", "createdAt": "2020-05-22T08:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwODQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "65fe706d6f22f8d433d1ebf8c41c3acec135c5f0", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\nindex f30efe4759..61298ae233 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\n\n@@ -2,6 +2,7 @@ package com.datadog.profiling.jfr;\n \n import java.util.Map;\n import java.util.Objects;\n+\n import lombok.Generated;\n import lombok.Getter;\n import lombok.NonNull;\n"}}, {"oid": "65fe706d6f22f8d433d1ebf8c41c3acec135c5f0", "url": "https://github.com/DataDog/dd-trace-java/commit/65fe706d6f22f8d433d1ebf8c41c3acec135c5f0", "message": "PROF-1560: Fix simple type constant pool handling\n\nAlso fix equals/hashCode for all types participating in metadata and constant pool.", "committedDate": "2020-05-22T09:56:33Z", "type": "commit"}, {"oid": "6f5e0a1832f6bcd941497e1e75b7fa4dbce01b35", "url": "https://github.com/DataDog/dd-trace-java/commit/6f5e0a1832f6bcd941497e1e75b7fa4dbce01b35", "message": "Make formatting happy", "committedDate": "2020-05-22T09:56:33Z", "type": "commit"}, {"oid": "a7c6a9a9b01ce2554e7ab7998746ff19d6a123c3", "url": "https://github.com/DataDog/dd-trace-java/commit/a7c6a9a9b01ce2554e7ab7998746ff19d6a123c3", "message": "Exclude JMXSampler from coverage test", "committedDate": "2020-05-22T09:56:33Z", "type": "commit"}, {"oid": "463c9237b9731f2fe7051f12d6133f0ee1ef935d", "url": "https://github.com/DataDog/dd-trace-java/commit/463c9237b9731f2fe7051f12d6133f0ee1ef935d", "message": "Fix @ContentType annotation structure", "committedDate": "2020-05-22T09:56:33Z", "type": "commit"}, {"oid": "363e15fb0396cb89d96283aaed257b93a58bc426", "url": "https://github.com/DataDog/dd-trace-java/commit/363e15fb0396cb89d96283aaed257b93a58bc426", "message": "Simplify hashCode caching", "committedDate": "2020-05-22T09:56:33Z", "type": "commit"}, {"oid": "8052e88f2e667a26112f16f6c5e5b5c25fe1899f", "url": "https://github.com/DataDog/dd-trace-java/commit/8052e88f2e667a26112f16f6c5e5b5c25fe1899f", "message": "Add test for expected number of samples", "committedDate": "2020-05-22T09:56:50Z", "type": "commit"}, {"oid": "df6b5a121e8a5aa6ba1a77c59ea49f17c8b902c3", "url": "https://github.com/DataDog/dd-trace-java/commit/df6b5a121e8a5aa6ba1a77c59ea49f17c8b902c3", "message": "Fix metadata size computation", "committedDate": "2020-05-22T09:56:50Z", "type": "commit"}, {"oid": "ee0df85afe990745934c64b3ab22fba8b0c8685a", "url": "https://github.com/DataDog/dd-trace-java/commit/ee0df85afe990745934c64b3ab22fba8b0c8685a", "message": "Include back the 'id' field in equals/hashCode computation of BaseType", "committedDate": "2020-05-22T09:56:50Z", "type": "commit"}, {"oid": "ee0df85afe990745934c64b3ab22fba8b0c8685a", "url": "https://github.com/DataDog/dd-trace-java/commit/ee0df85afe990745934c64b3ab22fba8b0c8685a", "message": "Include back the 'id' field in equals/hashCode computation of BaseType", "committedDate": "2020-05-22T09:56:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTg1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429155859", "bodyText": "Is this guaranteed to not be 0?", "author": "bantonsson", "createdAt": "2020-05-22T09:58:35Z", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java", "diffHunk": "@@ -26,4 +31,26 @@ public Annotation(Type type, String value) {\n   public static boolean isAnnotationType(Type type) {\n     return ANNOTATION_SUPER_TYPE_NAME.equals(type.getSupertype());\n   }\n+\n+  @Generated\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    Annotation that = (Annotation) o;\n+    return type.equals(that.type) && Objects.equals(value, that.value);\n+  }\n+\n+  @Generated\n+  @Override\n+  public int hashCode() {\n+    if (hashCode == 0) {\n+      hashCode = Objects.hash(type, value);", "originalCommit": "ee0df85afe990745934c64b3ab22fba8b0c8685a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NzcyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429157724", "bodyText": "One could use 0 as an illegal/uninitialized hashCode and compute/assign it if it's 0 and skip the extra boolean.\n\nI thought you knew :)\nMost probably it is not guaranteed. A hash computation may easily return 0 and would not be breaking the contract. But Objects.hash() is assigning '0' to null values. In this case non null values will have most probably != 0 hash - unless some hand-crafted hashCode method of a sub-element returns negative values.", "author": "jbachorik", "createdAt": "2020-05-22T10:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4ODg5NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429188894", "bodyText": "Yeah, it seems unlikely, but the calculation in  Objects.hash(...) could over/under-flow. I would guard against it by bumping a 0 hash to something else, but maybe that's a bit defensive?", "author": "bantonsson", "createdAt": "2020-05-22T11:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NDYxMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429194613", "bodyText": "Maybe a bit - the calculation can overflow but if all references are using the same algorithm it would take a very deep tree or enormous amount of fields.", "author": "jbachorik", "createdAt": "2020-05-22T11:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTE3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429205179", "bodyText": "Added a NonZeroHashCode utility class to generate non-0 hashcodes.", "author": "jbachorik", "createdAt": "2020-05-22T11:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "72692ea9a155fc1ce5ab057c23130419ed91d6e0", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\nindex 958ea4422f..ce08285d18 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\n\n@@ -32,6 +34,7 @@ public final class Annotation {\n     return ANNOTATION_SUPER_TYPE_NAME.equals(type.getSupertype());\n   }\n \n+  // use Lombok @Generated to skip jacoco coverage verification\n   @Generated\n   @Override\n   public boolean equals(Object o) {\n"}}, {"oid": "129f72e8fc40bb0e997f1aba2ab48889b659c002", "url": "https://github.com/DataDog/dd-trace-java/commit/129f72e8fc40bb0e997f1aba2ab48889b659c002", "message": "Formatting!", "committedDate": "2020-05-22T10:17:04Z", "type": "commit"}, {"oid": "b6cc9dadde88392bc6101519c7554c8dccd43b21", "url": "https://github.com/DataDog/dd-trace-java/commit/b6cc9dadde88392bc6101519c7554c8dccd43b21", "message": "Revert MetadataTest", "committedDate": "2020-05-22T10:34:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MzkzMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429193931", "bodyText": "This seems to be some thingy that lombok is planning to add automatically - what is the point of using this manually?", "author": "mar-kolya", "createdAt": "2020-05-22T11:31:07Z", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java", "diffHunk": "@@ -26,4 +31,26 @@ public Annotation(Type type, String value) {\n   public static boolean isAnnotationType(Type type) {\n     return ANNOTATION_SUPER_TYPE_NAME.equals(type.getSupertype());\n   }\n+\n+  @Generated", "originalCommit": "b6cc9dadde88392bc6101519c7554c8dccd43b21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTM2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429195366", "bodyText": "Excluding the method from code coverage test. There is no other way to instruct jacoco not to check certain methods.\nAnd having to write all-combinations tests for equals and hashCode (what should be the test for hash code after all?) - because the class is so simple even single branch miss will make the check fail - is a huge PITA.", "author": "jbachorik", "createdAt": "2020-05-22T11:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MzkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NjA1Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429196057", "bodyText": "I see... mind adding something like //To skip coverage checks to such lines so people like myself would stop asking stupid questions?", "author": "mar-kolya", "createdAt": "2020-05-22T11:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MzkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NjMwNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429196304", "bodyText": "Good idea on using annotation, btw!", "author": "mar-kolya", "createdAt": "2020-05-22T11:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MzkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NzM2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429197368", "bodyText": "FWIW I've used https://jqno.nl/equalsverifier/ in the past to actually verify equals and hashCode - and it is quite simple to use", "author": "mar-kolya", "createdAt": "2020-05-22T11:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MzkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNDc1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429204753", "bodyText": "Ah, thanks! Will take a look at the tool!\nIn the meantime I added comments.", "author": "jbachorik", "createdAt": "2020-05-22T11:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MzkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "72692ea9a155fc1ce5ab057c23130419ed91d6e0", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\nindex 958ea4422f..ce08285d18 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\n\n@@ -32,6 +34,7 @@ public final class Annotation {\n     return ANNOTATION_SUPER_TYPE_NAME.equals(type.getSupertype());\n   }\n \n+  // use Lombok @Generated to skip jacoco coverage verification\n   @Generated\n   @Override\n   public boolean equals(Object o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTEzMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429195130", "bodyText": "What is the point of this annotation? If the whole class was generated with some tool could you please add some comments explaining how it was made in case we need to do this in the future?.", "author": "mar-kolya", "createdAt": "2020-05-22T11:34:06Z", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.datadog.profiling.jfr;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import lombok.Generated;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+@Generated", "originalCommit": "b6cc9dadde88392bc6101519c7554c8dccd43b21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTc4NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429205785", "bodyText": "Explained in the prev comment.", "author": "jbachorik", "createdAt": "2020-05-22T12:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "72692ea9a155fc1ce5ab057c23130419ed91d6e0", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\nindex 6957eeaf33..25804b8c1c 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/ImmutableMapEntry.java\n\n@@ -1,11 +1,13 @@\n package com.datadog.profiling.jfr;\n \n+import com.datadog.profiling.util.NonZeroHashCode;\n import java.util.Map;\n import java.util.Objects;\n import lombok.Generated;\n import lombok.Getter;\n import lombok.NonNull;\n \n+// use Lombok @Generated to skip jacoco coverage verification\n @Generated\n final class ImmutableMapEntry<K, V> implements Map.Entry<K, V> {\n   private int hashCode = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTQxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429195411", "bodyText": "I think we should use accessors instead of public fields. There is zero downside and apart from being tradition this also makes easier to track how these are used.", "author": "mar-kolya", "createdAt": "2020-05-22T11:34:51Z", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java", "diffHunk": "@@ -1,8 +1,13 @@\n package com.datadog.profiling.jfr;\n \n+import java.util.Objects;\n+import lombok.Generated;\n+\n /** A struct-like representation of a JFR annotation */\n public final class Annotation {\n   public static final String ANNOTATION_SUPER_TYPE_NAME = \"java.lang.annotation.Annotation\";\n+  private int hashCode = 0;\n+\n   public final Type type;\n   public final String value;", "originalCommit": "b6cc9dadde88392bc6101519c7554c8dccd43b21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNDkxMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429204912", "bodyText": "Ok, not really related to this change but I converted the fields to getters.", "author": "jbachorik", "createdAt": "2020-05-22T11:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODU0Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1483#discussion_r429208546", "bodyText": "thanks!", "author": "mar-kolya", "createdAt": "2020-05-22T12:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "72692ea9a155fc1ce5ab057c23130419ed91d6e0", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\nindex 958ea4422f..ce08285d18 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/jfr/Annotation.java\n\n@@ -1,15 +1,17 @@\n package com.datadog.profiling.jfr;\n \n+import com.datadog.profiling.util.NonZeroHashCode;\n import java.util.Objects;\n import lombok.Generated;\n+import lombok.Getter;\n \n /** A struct-like representation of a JFR annotation */\n public final class Annotation {\n   public static final String ANNOTATION_SUPER_TYPE_NAME = \"java.lang.annotation.Annotation\";\n   private int hashCode = 0;\n \n-  public final Type type;\n-  public final String value;\n+  @Getter private final Type type;\n+  @Getter private final String value;\n \n   /**\n    * Create a new {@linkplain Annotation} instance\n"}}, {"oid": "72692ea9a155fc1ce5ab057c23130419ed91d6e0", "url": "https://github.com/DataDog/dd-trace-java/commit/72692ea9a155fc1ce5ab057c23130419ed91d6e0", "message": "Addressing review comments", "committedDate": "2020-05-22T11:57:16Z", "type": "commit"}, {"oid": "b6c1210f86cf8d93ae5949636776155e44b2e203", "url": "https://github.com/DataDog/dd-trace-java/commit/b6c1210f86cf8d93ae5949636776155e44b2e203", "message": "Update missed references to Annotation fields", "committedDate": "2020-05-22T12:05:11Z", "type": "commit"}, {"oid": "54a685b6e65bd0c8bcac45b4b5e4ffd327a70149", "url": "https://github.com/DataDog/dd-trace-java/commit/54a685b6e65bd0c8bcac45b4b5e4ffd327a70149", "message": "Placate code coverage gods", "committedDate": "2020-05-22T14:06:21Z", "type": "commit"}, {"oid": "7084320ead48a1b00abda1cbccc7e4a22f05d9bd", "url": "https://github.com/DataDog/dd-trace-java/commit/7084320ead48a1b00abda1cbccc7e4a22f05d9bd", "message": "Formatting!", "committedDate": "2020-05-22T14:24:10Z", "type": "commit"}]}