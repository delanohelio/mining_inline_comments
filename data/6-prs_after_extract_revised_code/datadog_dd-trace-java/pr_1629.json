{"pr_number": 1629, "pr_title": "Cache the UTF8 bytes for prepared statements", "pr_createdAt": "2020-06-25T10:22:11Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1629", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2MTYwNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1629#discussion_r445461607", "bodyText": "I would be tempted to make this a wrapper around a raw byte[] and implement the CharSequence basics.", "author": "richardstartin", "createdAt": "2020-06-25T10:29:29Z", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.bootstrap.instrumentation.api;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * Class that wraps a {@code String} and caches the UTF8 byte representation. Implements {@code\n+ * CharSequence} so that it can be mixed with normal{@code String} instances.\n+ */\n+public final class UTF8BytesString implements CharSequence {\n+  public static UTF8BytesString create(String string) {\n+    if (string == null) {\n+      return null;\n+    } else {\n+      // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n+      // very String, we create a new wrapper String that we hold on to instead.\n+      return new UTF8BytesString(new String(string));\n+    }\n+  }\n+\n+  public static UTF8BytesString create(CharSequence chars) {\n+    if (chars == null) {\n+      return null;\n+    } else if (chars instanceof UTF8BytesString) {\n+      return (UTF8BytesString) chars;\n+    } else if (chars instanceof String) {\n+      return create((String) chars);\n+    } else {\n+      return new UTF8BytesString(String.valueOf(chars));\n+    }\n+  }\n+\n+  private final String string;", "originalCommit": "f4536eae809cc632593703f790d55db99f85e2ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92824b4c64d3e63bce2030c828f72ae93ea1fd2e", "chunk": "diff --git a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\ndeleted file mode 100644\nindex a83d503bcc..0000000000\n--- a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\n+++ /dev/null\n\n@@ -1,91 +0,0 @@\n-package datadog.trace.bootstrap.instrumentation.api;\n-\n-import java.nio.charset.StandardCharsets;\n-\n-/**\n- * Class that wraps a {@code String} and caches the UTF8 byte representation. Implements {@code\n- * CharSequence} so that it can be mixed with normal{@code String} instances.\n- */\n-public final class UTF8BytesString implements CharSequence {\n-  public static UTF8BytesString create(String string) {\n-    if (string == null) {\n-      return null;\n-    } else {\n-      // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n-      // very String, we create a new wrapper String that we hold on to instead.\n-      return new UTF8BytesString(new String(string));\n-    }\n-  }\n-\n-  public static UTF8BytesString create(CharSequence chars) {\n-    if (chars == null) {\n-      return null;\n-    } else if (chars instanceof UTF8BytesString) {\n-      return (UTF8BytesString) chars;\n-    } else if (chars instanceof String) {\n-      return create((String) chars);\n-    } else {\n-      return new UTF8BytesString(String.valueOf(chars));\n-    }\n-  }\n-\n-  private final String string;\n-  private byte[] utf8Bytes = null;\n-\n-  private UTF8BytesString(String string) {\n-    this.string = string;\n-  }\n-\n-  /**\n-   * Returns a <code>byte[]</code> representing the UTF8 encoding of the wrapped {@code String}.\n-   * Please note that the same <code>byte[]</code> will be returned on each call, and the caller is\n-   * bound by honor, and the fear of purgatory, to not modify the <code>byte[]</code>.\n-   *\n-   * @return the byte array of the UTF8 encode string\n-   */\n-  public byte[] getUtf8Bytes() {\n-    byte[] bytes = this.utf8Bytes;\n-    // This race condition is intentional and benign.\n-    // The worst that can happen is that an identical value is produced and written into the field.\n-    if (bytes == null) {\n-      this.utf8Bytes = bytes = this.string.getBytes(StandardCharsets.UTF_8);\n-    }\n-    return bytes;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return string;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null) return false;\n-    String that = null;\n-    if (o instanceof UTF8BytesString) {\n-      that = ((UTF8BytesString) o).string;\n-    }\n-    return this.string.equals(that);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return this.string.hashCode();\n-  }\n-\n-  @Override\n-  public int length() {\n-    return this.string.length();\n-  }\n-\n-  @Override\n-  public char charAt(int index) {\n-    return this.string.charAt(index);\n-  }\n-\n-  @Override\n-  public CharSequence subSequence(int start, int end) {\n-    return this.string.subSequence(start, end);\n-  }\n-}\n"}}, {"oid": "e549e3d105ab009a3f7979e053c1a88b84fca954", "url": "https://github.com/DataDog/dd-trace-java/commit/e549e3d105ab009a3f7979e053c1a88b84fca954", "message": "Cache UTF8 bytes for JDBC prepared statements", "committedDate": "2020-06-25T11:14:53Z", "type": "forcePushed"}, {"oid": "50d6404ad9c1d95b576a4951c09f64e5a5de7f1e", "url": "https://github.com/DataDog/dd-trace-java/commit/50d6404ad9c1d95b576a4951c09f64e5a5de7f1e", "message": "Cache UTF8 bytes for JDBC prepared statements", "committedDate": "2020-06-25T11:17:01Z", "type": "forcePushed"}, {"oid": "221535dde62802052155d25a7410c831148e5e16", "url": "https://github.com/DataDog/dd-trace-java/commit/221535dde62802052155d25a7410c831148e5e16", "message": "Cache UTF8 bytes for JDBC prepared statements", "committedDate": "2020-06-26T06:57:04Z", "type": "forcePushed"}, {"oid": "92824b4c64d3e63bce2030c828f72ae93ea1fd2e", "url": "https://github.com/DataDog/dd-trace-java/commit/92824b4c64d3e63bce2030c828f72ae93ea1fd2e", "message": "Change resource name from String to CharSequence to enable caching Type", "committedDate": "2020-06-26T07:54:12Z", "type": "commit"}, {"oid": "ec44aa2005042b2178b5863e3cc4bc70ee8933b4", "url": "https://github.com/DataDog/dd-trace-java/commit/ec44aa2005042b2178b5863e3cc4bc70ee8933b4", "message": "Cache UTF8 bytes for JDBC prepared statements", "committedDate": "2020-06-26T07:54:20Z", "type": "commit"}, {"oid": "ec44aa2005042b2178b5863e3cc4bc70ee8933b4", "url": "https://github.com/DataDog/dd-trace-java/commit/ec44aa2005042b2178b5863e3cc4bc70ee8933b4", "message": "Cache UTF8 bytes for JDBC prepared statements", "committedDate": "2020-06-26T07:54:20Z", "type": "forcePushed"}]}