{"pr_number": 1366, "pr_title": "Make `CommonTaskExecutor` periodic tasks safe", "pr_createdAt": "2020-04-13T19:59:18Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1366", "timeline": [{"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "url": "https://github.com/DataDog/dd-trace-java/commit/1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "message": "Make `CommonTaskExecutor` periodic tasks safe\n\n* Verify that we can schedule task and catch exceptions.\nThis should help to avoid additional exceptions on app crash during\n  startup.\n\n* Avoid holding strong references from within executor to make sure\n  that things can get GCed.", "committedDate": "2020-04-13T20:04:31Z", "type": "commit"}, {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "url": "https://github.com/DataDog/dd-trace-java/commit/1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "message": "Make `CommonTaskExecutor` periodic tasks safe\n\n* Verify that we can schedule task and catch exceptions.\nThis should help to avoid additional exceptions on app crash during\n  startup.\n\n* Avoid holding strong references from within executor to make sure\n  that things can get GCed.", "committedDate": "2020-04-13T20:04:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5MjEwMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407692100", "bodyText": "This should be private.", "author": "tylerbenson", "createdAt": "2020-04-13T20:11:10Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -82,4 +124,79 @@ public void run() {\n       }\n     }\n   }\n+\n+  public interface Task<T> {\n+    void run(T target);\n+  }\n+\n+  public static class PeriodicTask<T> implements Runnable {", "originalCommit": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTI2MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407721260", "bodyText": "fixed", "author": "mar-kolya", "createdAt": "2020-04-13T21:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5MjEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "d86093c4741d819c86a8f94880de380721e2a994", "chunk": "diff --git a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\nindex 957f5455c1..8094501ba6 100644\n--- a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n+++ b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n\n@@ -129,12 +137,12 @@ public final class CommonTaskExecutor extends AbstractExecutorService {\n     void run(T target);\n   }\n \n-  public static class PeriodicTask<T> implements Runnable {\n+  private static class PeriodicTask<T> implements Runnable {\n     private final WeakReference<T> target;\n     private final Task<T> task;\n     private volatile ScheduledFuture<?> future = null;\n \n-    private PeriodicTask(final Task<T> task, final T target) {\n+    public PeriodicTask(final Task<T> task, final T target) {\n       this.target = new WeakReference<>(target);\n       this.task = task;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NDE1MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407694151", "bodyText": "Should we remove this class and have WeakMap use the CommonTaskExecutor directly?  Seems like the extra abstraction is unnecessary now.", "author": "tylerbenson", "createdAt": "2020-04-13T20:15:08Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Cleaner.java", "diffHunk": "@@ -12,47 +10,25 @@\n \n   <T> void scheduleCleaning(", "originalCommit": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMzEzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407703137", "bodyText": "There's also some tests in CleanerTest that would make sense to migrate to the common class that exercise this canceling logic.", "author": "tylerbenson", "createdAt": "2020-04-13T20:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NDE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNTY0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407735640", "bodyText": "should be addressed now", "author": "mar-kolya", "createdAt": "2020-04-13T21:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NDE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "eee11f5ce0f7fc29bf41e06ca0b763f8b4aa4474", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Cleaner.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Cleaner.java\ndeleted file mode 100644\nindex f55ce65239..0000000000\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Cleaner.java\n+++ /dev/null\n\n@@ -1,34 +0,0 @@\n-package datadog.trace.agent.tooling;\n-\n-import datadog.common.exec.CommonTaskExecutor;\n-import datadog.common.exec.CommonTaskExecutor.Task;\n-import java.util.concurrent.TimeUnit;\n-import lombok.extern.slf4j.Slf4j;\n-\n-@Slf4j\n-class Cleaner {\n-\n-  <T> void scheduleCleaning(\n-      final T target, final Adapter<T> adapter, final long frequency, final TimeUnit unit) {\n-    CommonTaskExecutor.INSTANCE.scheduleAtFixedRate(\n-        new CleaningTask(adapter), target, frequency, frequency, unit, \"cleaner for \" + target);\n-  }\n-\n-  // Important to use explicit class to avoid implicit hard references to target\n-  private static class CleaningTask<T> implements Task<T> {\n-    private final Adapter<T> adapter;\n-\n-    public CleaningTask(final Adapter<T> adapter) {\n-      this.adapter = adapter;\n-    }\n-\n-    @Override\n-    public void run(final T target) {\n-      adapter.clean(target);\n-    }\n-  }\n-\n-  public interface Adapter<T> {\n-    void clean(T target);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NjA3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407696075", "bodyText": "Consider removing SpanCleaner and have this accept the list of pendingTraces instead. (Implement the run logic above directly.)", "author": "tylerbenson", "createdAt": "2020-04-13T20:18:47Z", "path": "dd-trace-ot/src/main/java/datadog/opentracing/PendingTrace.java", "diffHunk": "@@ -312,4 +319,17 @@ public void close() {\n       run();\n     }\n   }\n+\n+  /*\n+   * Important to use explicit class to avoid implicit hard references to cleaners from within executor.\n+   */\n+  private static class SpanCleanerTask implements Task<SpanCleaner> {\n+\n+    static final SpanCleanerTask INSTANCE = new SpanCleanerTask();\n+\n+    @Override\n+    public void run(final SpanCleaner target) {", "originalCommit": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczODM4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407738380", "bodyText": "if (cleaner != null) {\n      cleaner.close();\n    }\n\n\nthis makes things somewhat more interesting since we cannot hold reference to pending traces inside the task.\n\nWould it be ok if I add a fixme for now here - this seems less trivial change?", "author": "mar-kolya", "createdAt": "2020-04-13T21:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NjA3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5ODI5Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407698293", "bodyText": "Add a comment explaining why we're returning this, though I think it might be better to explicitly return after each case instead of at the bottom.", "author": "tylerbenson", "createdAt": "2020-04-13T20:22:57Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -25,9 +28,48 @@ private CommonTaskExecutor() {\n     }\n   }\n \n-  public ScheduledFuture<?> scheduleAtFixedRate(\n-      final Runnable command, final long initialDelay, final long period, final TimeUnit unit) {\n-    return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);\n+  /**\n+   * Run {@code task} periodically providing it with {@code target}\n+   *\n+   * <p>Important implementation detail here is that internally we do not hold any strong references\n+   * to {@code target} which means it can be GCed even while periodic task is still scheduled.\n+   *\n+   * <p>If {@code target} is GCed periodic task is canceled.\n+   *\n+   * @param task task to run. Important: must not hold any strong references to target (or anything\n+   *     else non static)\n+   * @param target target object to pass to task\n+   * @param initialDelay initialDelay, see {@link\n+   *     ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long, TimeUnit)}\n+   * @param period period, see {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable, long,\n+   *     long, TimeUnit)}\n+   * @param unit unit, see {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long,\n+   *     TimeUnit)}\n+   * @param name name to use in logs when task cannot be scheduled\n+   * @return future that can be canceled\n+   */\n+  public <T> ScheduledFuture<?> scheduleAtFixedRate(\n+      final Task<T> task,\n+      final T target,\n+      final long initialDelay,\n+      final long period,\n+      final TimeUnit unit,\n+      final String name) {\n+    if (CommonTaskExecutor.INSTANCE.isShutdown()) {\n+      log.warn(\"Periodic task scheduler is shutdown. Will not run: {}\", name);\n+    } else {\n+      try {\n+        final PeriodicTask<T> periodicTask = new PeriodicTask<>(task, target);\n+        final ScheduledFuture<?> future =\n+            executorService.scheduleAtFixedRate(\n+                new PeriodicTask<>(task, target), initialDelay, period, unit);\n+        periodicTask.setFuture(future);\n+        return future;\n+      } catch (final RejectedExecutionException e) {\n+        log.warn(\"Cleaning task rejected. Will not run: {}\", name);\n+      }\n+    }\n+    return new UnscheduledFuture(name);", "originalCommit": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTE4MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407721181", "bodyText": "I've added comments, not sure returning at each case would make things much more readable though :)", "author": "mar-kolya", "createdAt": "2020-04-13T21:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5ODI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d86093c4741d819c86a8f94880de380721e2a994", "chunk": "diff --git a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\nindex 957f5455c1..8094501ba6 100644\n--- a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n+++ b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n\n@@ -36,6 +36,10 @@ public final class CommonTaskExecutor extends AbstractExecutorService {\n    *\n    * <p>If {@code target} is GCed periodic task is canceled.\n    *\n+   * <p>This method should be able to schedule task in majority of cases. The only reasonable case\n+   * when this would fail is when task is being scheduled during JVM shutdown. In this case this\n+   * method will return 'fake' future that can still be canceled to avoid confusing callers.\n+   *\n    * @param task task to run. Important: must not hold any strong references to target (or anything\n    *     else non static)\n    * @param target target object to pass to task\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5ODYzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407698637", "bodyText": "No longer just Cleaning task.", "author": "tylerbenson", "createdAt": "2020-04-13T20:23:32Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -25,9 +28,48 @@ private CommonTaskExecutor() {\n     }\n   }\n \n-  public ScheduledFuture<?> scheduleAtFixedRate(\n-      final Runnable command, final long initialDelay, final long period, final TimeUnit unit) {\n-    return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);\n+  /**\n+   * Run {@code task} periodically providing it with {@code target}\n+   *\n+   * <p>Important implementation detail here is that internally we do not hold any strong references\n+   * to {@code target} which means it can be GCed even while periodic task is still scheduled.\n+   *\n+   * <p>If {@code target} is GCed periodic task is canceled.\n+   *\n+   * @param task task to run. Important: must not hold any strong references to target (or anything\n+   *     else non static)\n+   * @param target target object to pass to task\n+   * @param initialDelay initialDelay, see {@link\n+   *     ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long, TimeUnit)}\n+   * @param period period, see {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable, long,\n+   *     long, TimeUnit)}\n+   * @param unit unit, see {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long,\n+   *     TimeUnit)}\n+   * @param name name to use in logs when task cannot be scheduled\n+   * @return future that can be canceled\n+   */\n+  public <T> ScheduledFuture<?> scheduleAtFixedRate(\n+      final Task<T> task,\n+      final T target,\n+      final long initialDelay,\n+      final long period,\n+      final TimeUnit unit,\n+      final String name) {\n+    if (CommonTaskExecutor.INSTANCE.isShutdown()) {\n+      log.warn(\"Periodic task scheduler is shutdown. Will not run: {}\", name);\n+    } else {\n+      try {\n+        final PeriodicTask<T> periodicTask = new PeriodicTask<>(task, target);\n+        final ScheduledFuture<?> future =\n+            executorService.scheduleAtFixedRate(\n+                new PeriodicTask<>(task, target), initialDelay, period, unit);\n+        periodicTask.setFuture(future);\n+        return future;\n+      } catch (final RejectedExecutionException e) {\n+        log.warn(\"Cleaning task rejected. Will not run: {}\", name);", "originalCommit": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTY4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407721680", "bodyText": "Fixed", "author": "mar-kolya", "createdAt": "2020-04-13T21:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5ODYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "d86093c4741d819c86a8f94880de380721e2a994", "chunk": "diff --git a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\nindex 957f5455c1..8094501ba6 100644\n--- a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n+++ b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n\n@@ -36,6 +36,10 @@ public final class CommonTaskExecutor extends AbstractExecutorService {\n    *\n    * <p>If {@code target} is GCed periodic task is canceled.\n    *\n+   * <p>This method should be able to schedule task in majority of cases. The only reasonable case\n+   * when this would fail is when task is being scheduled during JVM shutdown. In this case this\n+   * method will return 'fake' future that can still be canceled to avoid confusing callers.\n+   *\n    * @param task task to run. Important: must not hold any strong references to target (or anything\n    *     else non static)\n    * @param target target object to pass to task\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5OTAyNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407699027", "bodyText": "not really...", "author": "tylerbenson", "createdAt": "2020-04-13T20:24:13Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -82,4 +124,79 @@ public void run() {\n       }\n     }\n   }\n+\n+  public interface Task<T> {\n+    void run(T target);\n+  }\n+\n+  public static class PeriodicTask<T> implements Runnable {\n+    private final WeakReference<T> target;\n+    private final Task<T> task;\n+    private volatile ScheduledFuture<?> future = null;\n+\n+    private PeriodicTask(final Task<T> task, final T target) {\n+      this.target = new WeakReference<>(target);\n+      this.task = task;\n+    }\n+\n+    @Override\n+    public void run() {\n+      final T t = target.get();\n+      if (t != null) {\n+        task.run(t);\n+      } else if (future != null) {\n+        future.cancel(false);\n+      }\n+    }\n+\n+    public void setFuture(final ScheduledFuture<?> future) {\n+      this.future = future;\n+    }\n+  }\n+\n+  // Unscheduled future\n+  @Slf4j\n+  public static class UnscheduledFuture implements ScheduledFuture<Object> {\n+    private final String name;\n+\n+    public UnscheduledFuture(final String name) {\n+      this.name = name;\n+    }\n+\n+    @Override\n+    public long getDelay(final TimeUnit unit) {\n+      return 0;\n+    }\n+\n+    @Override\n+    public int compareTo(final Delayed o) {\n+      return 0;\n+    }\n+\n+    @Override\n+    public boolean cancel(final boolean mayInterruptIfRunning) {\n+      log.debug(\"Cancelling future for: {}\", name);", "originalCommit": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTQ5OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407721499", "bodyText": "Kind of made it cleaner, hopfully :).\nLet me know if you have preferred wording.", "author": "mar-kolya", "createdAt": "2020-04-13T21:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5OTAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "d86093c4741d819c86a8f94880de380721e2a994", "chunk": "diff --git a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\nindex 957f5455c1..8094501ba6 100644\n--- a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n+++ b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n\n@@ -129,12 +137,12 @@ public final class CommonTaskExecutor extends AbstractExecutorService {\n     void run(T target);\n   }\n \n-  public static class PeriodicTask<T> implements Runnable {\n+  private static class PeriodicTask<T> implements Runnable {\n     private final WeakReference<T> target;\n     private final Task<T> task;\n     private volatile ScheduledFuture<?> future = null;\n \n-    private PeriodicTask(final Task<T> task, final T target) {\n+    public PeriodicTask(final Task<T> task, final T target) {\n       this.target = new WeakReference<>(target);\n       this.task = task;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMTcwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407701706", "bodyText": "Also private...", "author": "tylerbenson", "createdAt": "2020-04-13T20:29:12Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -82,4 +124,79 @@ public void run() {\n       }\n     }\n   }\n+\n+  public interface Task<T> {\n+    void run(T target);\n+  }\n+\n+  public static class PeriodicTask<T> implements Runnable {\n+    private final WeakReference<T> target;\n+    private final Task<T> task;\n+    private volatile ScheduledFuture<?> future = null;\n+\n+    private PeriodicTask(final Task<T> task, final T target) {\n+      this.target = new WeakReference<>(target);\n+      this.task = task;\n+    }\n+\n+    @Override\n+    public void run() {\n+      final T t = target.get();\n+      if (t != null) {\n+        task.run(t);\n+      } else if (future != null) {\n+        future.cancel(false);\n+      }\n+    }\n+\n+    public void setFuture(final ScheduledFuture<?> future) {\n+      this.future = future;\n+    }\n+  }\n+\n+  // Unscheduled future\n+  @Slf4j\n+  public static class UnscheduledFuture implements ScheduledFuture<Object> {", "originalCommit": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxODE4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407718184", "bodyText": "I was thinking about this and my thoughts were: it is possible to have a usecase when caller would want to know if things have been scheduled... this is why I'm returning this to begin with... But maybe it is too convoluted for now.", "author": "mar-kolya", "createdAt": "2020-04-13T21:00:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMTcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "d86093c4741d819c86a8f94880de380721e2a994", "chunk": "diff --git a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\nindex 957f5455c1..8094501ba6 100644\n--- a/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n+++ b/utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java\n\n@@ -129,12 +137,12 @@ public final class CommonTaskExecutor extends AbstractExecutorService {\n     void run(T target);\n   }\n \n-  public static class PeriodicTask<T> implements Runnable {\n+  private static class PeriodicTask<T> implements Runnable {\n     private final WeakReference<T> target;\n     private final Task<T> task;\n     private volatile ScheduledFuture<?> future = null;\n \n-    private PeriodicTask(final Task<T> task, final T target) {\n+    public PeriodicTask(final Task<T> task, final T target) {\n       this.target = new WeakReference<>(target);\n       this.task = task;\n     }\n"}}, {"oid": "d86093c4741d819c86a8f94880de380721e2a994", "url": "https://github.com/DataDog/dd-trace-java/commit/d86093c4741d819c86a8f94880de380721e2a994", "message": "Minor CR fixes and some comments", "committedDate": "2020-04-13T21:05:30Z", "type": "commit"}, {"oid": "683477bd601d689149f4d6c96b7003df3037c486", "url": "https://github.com/DataDog/dd-trace-java/commit/683477bd601d689149f4d6c96b7003df3037c486", "message": "Simplify WeakMapSuppliers\n\nAlso move CleanerTest to PeriodicSchedulingTest", "committedDate": "2020-04-13T21:30:31Z", "type": "commit"}, {"oid": "eee11f5ce0f7fc29bf41e06ca0b763f8b4aa4474", "url": "https://github.com/DataDog/dd-trace-java/commit/eee11f5ce0f7fc29bf41e06ca0b763f8b4aa4474", "message": "Remove Cleaner class", "committedDate": "2020-04-13T21:34:31Z", "type": "commit"}, {"oid": "96fcb278b67904e6975e15fcd0acab5eaab6b8be", "url": "https://github.com/DataDog/dd-trace-java/commit/96fcb278b67904e6975e15fcd0acab5eaab6b8be", "message": "Add comment", "committedDate": "2020-04-13T21:41:25Z", "type": "commit"}, {"oid": "b1589c38199ea84c47dcd7099bf53866bc1b75ee", "url": "https://github.com/DataDog/dd-trace-java/commit/b1589c38199ea84c47dcd7099bf53866bc1b75ee", "message": "Fix unit test", "committedDate": "2020-04-13T21:51:20Z", "type": "commit"}, {"oid": "bef848ec2df5ba6b5083db0276636c4ad5b9e8cb", "url": "https://github.com/DataDog/dd-trace-java/commit/bef848ec2df5ba6b5083db0276636c4ad5b9e8cb", "message": "Disable coverage and add TODO", "committedDate": "2020-04-13T22:44:18Z", "type": "commit"}]}