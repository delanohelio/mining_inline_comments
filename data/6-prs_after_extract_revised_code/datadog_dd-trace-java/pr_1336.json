{"pr_number": 1336, "pr_title": "add ...\"metrics\":{\"_dd.measured\":1}... to every span", "pr_createdAt": "2020-03-24T09:49:07Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1336", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5MjI2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1336#discussion_r397392268", "bodyText": "I'd prefer to avoid double-brace initialization, since it will create another class.\nI think we could just addAll the default metrics.  That would also avoid repeating a bit code.", "author": "dougqh", "createdAt": "2020-03-24T19:00:59Z", "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java", "diffHunk": "@@ -308,12 +311,18 @@ public DDTracer getTracer() {\n \n   public Map<String, Number> getMetrics() {\n     final Map<String, Number> metrics = this.metrics.get();\n-    return metrics == null ? EMPTY_METRICS : metrics;\n+    return metrics == null ? DEFAULT_METRICS : metrics;\n   }\n \n   public void setMetric(final String key, final Number value) {\n     if (metrics.get() == null) {\n-      metrics.compareAndSet(null, new ConcurrentHashMap<String, Number>());\n+      metrics.compareAndSet(\n+          null,\n+          new ConcurrentHashMap<String, Number>() {", "originalCommit": "d0ae50004e82b248e9579d7c808d194396b5387d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MzQ2Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1336#discussion_r397543462", "bodyText": "agree", "author": "lpriima", "createdAt": "2020-03-25T00:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5MjI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "04bac3be2d8f97d0aff1c04bc7b698058df8fa8e", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java b/dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java\nindex 9d44c72194..38ad5535d4 100644\n--- a/dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java\n+++ b/dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java\n\n@@ -316,13 +315,7 @@ public class DDSpanContext implements io.opentracing.SpanContext {\n \n   public void setMetric(final String key, final Number value) {\n     if (metrics.get() == null) {\n-      metrics.compareAndSet(\n-          null,\n-          new ConcurrentHashMap<String, Number>() {\n-            {\n-              put(DD_MEASURED, DD_MEASURED_DEFAULT);\n-            }\n-          });\n+      metrics.compareAndSet(null, new ConcurrentHashMap<>(DEFAULT_METRICS));\n     }\n     if (value instanceof Float) {\n       metrics.get().put(key, value.doubleValue());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDMzNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1336#discussion_r397394335", "bodyText": "Generally, I think this bit of clean-up is good.\nHowever, we're working on changing the OpenTelemetry split right now, so this might create merge conflicts.", "author": "dougqh", "createdAt": "2020-03-24T19:04:45Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java", "diffHunk": "@@ -34,6 +34,10 @@\n \n   private final OT32Span NOOP_SPAN = new OT32Span(\"\", NoopSpan.INSTANCE);\n \n+  private Tracer.SpanBuilder buildSpan(final String spanName) {", "originalCommit": "d0ae50004e82b248e9579d7c808d194396b5387d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MzM5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1336#discussion_r397543390", "bodyText": "reverted", "author": "lpriima", "createdAt": "2020-03-25T00:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "04bac3be2d8f97d0aff1c04bc7b698058df8fa8e", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java\nindex 93fae3f50f..55b17b5d35 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java\n\n@@ -34,10 +34,6 @@ public final class OpenTracing32 implements TracerAPI {\n \n   private final OT32Span NOOP_SPAN = new OT32Span(\"\", NoopSpan.INSTANCE);\n \n-  private Tracer.SpanBuilder buildSpan(final String spanName) {\n-    return tracer.buildSpan(spanName);\n-  }\n-\n   @Override\n   public AgentSpan startSpan(final String spanName) {\n     return new OT32Span(spanName);\n"}}, {"oid": "97a8cedc6f0f36fe24eb89c4e45f906087524354", "url": "https://github.com/DataDog/dd-trace-java/commit/97a8cedc6f0f36fe24eb89c4e45f906087524354", "message": "add ...\"metrics\":{\"_dd.measured\":1}... to every span", "committedDate": "2020-03-24T22:09:26Z", "type": "commit"}, {"oid": "04bac3be2d8f97d0aff1c04bc7b698058df8fa8e", "url": "https://github.com/DataDog/dd-trace-java/commit/04bac3be2d8f97d0aff1c04bc7b698058df8fa8e", "message": "update tests to always have \"metrics\":{\"_dd.measured\":1} in every span", "committedDate": "2020-03-24T22:09:26Z", "type": "commit"}, {"oid": "04bac3be2d8f97d0aff1c04bc7b698058df8fa8e", "url": "https://github.com/DataDog/dd-trace-java/commit/04bac3be2d8f97d0aff1c04bc7b698058df8fa8e", "message": "update tests to always have \"metrics\":{\"_dd.measured\":1} in every span", "committedDate": "2020-03-24T22:09:26Z", "type": "forcePushed"}]}