{"pr_number": 1341, "pr_title": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "pr_createdAt": "2020-03-26T09:11:11Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1341", "timeline": [{"oid": "32ce5c13acea50ff28a96cf33dd08f925fa8df35", "url": "https://github.com/DataDog/dd-trace-java/commit/32ce5c13acea50ff28a96cf33dd08f925fa8df35", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-03-26T09:15:49Z", "type": "forcePushed"}, {"oid": "13a9f8991c69fdcb1648b37146ea87fa8802009b", "url": "https://github.com/DataDog/dd-trace-java/commit/13a9f8991c69fdcb1648b37146ea87fa8802009b", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-03-26T16:38:57Z", "type": "forcePushed"}, {"oid": "64b19494c118c44a921cfa0019ebd945d172895a", "url": "https://github.com/DataDog/dd-trace-java/commit/64b19494c118c44a921cfa0019ebd945d172895a", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-03-26T17:42:44Z", "type": "forcePushed"}, {"oid": "a2f65eca1b7972d231aaca73106942c5107a380b", "url": "https://github.com/DataDog/dd-trace-java/commit/a2f65eca1b7972d231aaca73106942c5107a380b", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-03-26T19:54:57Z", "type": "forcePushed"}, {"oid": "7f214d0beb8f471857432688ec1d85abe434465c", "url": "https://github.com/DataDog/dd-trace-java/commit/7f214d0beb8f471857432688ec1d85abe434465c", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-03-26T20:47:04Z", "type": "forcePushed"}, {"oid": "3324860fa78152ea760bd6992783c48e76e02506", "url": "https://github.com/DataDog/dd-trace-java/commit/3324860fa78152ea760bd6992783c48e76e02506", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-03-26T20:47:53Z", "type": "forcePushed"}, {"oid": "44bbae6e75e77b951bf3a7f91cfc3ebc8db01e33", "url": "https://github.com/DataDog/dd-trace-java/commit/44bbae6e75e77b951bf3a7f91cfc3ebc8db01e33", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-03-26T22:45:14Z", "type": "forcePushed"}, {"oid": "a547030f41fb0defd73384a9cc389dcc09cf9ca1", "url": "https://github.com/DataDog/dd-trace-java/commit/a547030f41fb0defd73384a9cc389dcc09cf9ca1", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-03-27T06:43:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NjU4Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r401946583", "bodyText": "Multicatch?", "author": "randomanderson", "createdAt": "2020-04-01T22:27:00Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -991,10 +989,43 @@ private static String propertyNameToEnvironmentVariableName(final String setting\n    * @param setting The setting name, e.g. `service.name`\n    * @return The public facing system property name\n    */\n+  @NonNull\n   private static String propertyNameToSystemPropertyName(final String setting) {\n     return PREFIX + setting;\n   }\n \n+  /**\n+   * @param value to parse by tClass::valueOf\n+   * @param tClass should contain static parsing method \"T valueOf(String)\"\n+   * @param defaultValue\n+   * @param <T>\n+   * @return value == null || value.trim().isEmpty() ? defaultValue : tClass.valueOf(value)\n+   * @throws NumberFormatException\n+   */\n+  private static <T> T valueOf(final String value, final Class<T> tClass, final T defaultValue) {\n+    if (tClass == null || value == null || value.trim().isEmpty()) {\n+      log.debug(\"valueOf: using defaultValue '{}' for '{}' of '{}' \", defaultValue, value, tClass);\n+      return defaultValue;\n+    }\n+    try {\n+      return (T)\n+          MethodHandles.publicLookup()\n+              .findStatic(tClass, \"valueOf\", MethodType.methodType(tClass, String.class))\n+              .invoke(value);\n+    } catch (NumberFormatException e) {\n+      throw e;\n+    } catch (NoSuchMethodException e) {\n+      log.debug(\"Can't invoke 'valueOf': \", e);\n+      throw new NumberFormatException(e.toString());\n+    } catch (IllegalAccessException e) {\n+      log.debug(\"Can't access 'valueOf': \", e);\n+      throw new NumberFormatException(e.toString());", "originalCommit": "a547030f41fb0defd73384a9cc389dcc09cf9ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYyMzA3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r402623074", "bodyText": "Ok, but no different debug msg will be available.", "author": "lpriima", "createdAt": "2020-04-02T22:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NjU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "926365b59131b7618f8a92bcf2c2b3a999883d23", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex f47e0aeec1..5d80d557d7 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -1002,8 +1051,9 @@ public class Config {\n    * @return value == null || value.trim().isEmpty() ? defaultValue : tClass.valueOf(value)\n    * @throws NumberFormatException\n    */\n-  private static <T> T valueOf(final String value, final Class<T> tClass, final T defaultValue) {\n-    if (tClass == null || value == null || value.trim().isEmpty()) {\n+  private static <T> T valueOf(\n+      final String value, @NonNull final Class<T> tClass, final T defaultValue) {\n+    if (value == null || value.trim().isEmpty()) {\n       log.debug(\"valueOf: using defaultValue '{}' for '{}' of '{}' \", defaultValue, value, tClass);\n       return defaultValue;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzYyNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r401953625", "bodyText": "While I don't necessarily agree with removing the generic enum handling, I can't argue against it because we haven't needed another enum setting \ud83e\udd37\u200d\u2642\nHowever, with the change, the current method names of:\n\nconvertStringSetToEnumSet\ngetEnumSetSettingFromEnvironmentOrDefault\ngetPropertySetValue\n\nare confusing/inaccurate", "author": "randomanderson", "createdAt": "2020-04-01T22:45:35Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -1129,29 +1173,29 @@ private static Double getPropertyDoubleValue(\n     return Collections.unmodifiableList(Arrays.asList(tokens));\n   }\n \n-  private static Set<String> parseStringIntoSetOfNonEmptyStrings(\n-      final String str, final String regex) {\n+  @NonNull\n+  private static Set<String> parseStringIntoSetOfNonEmptyStrings(final String str) {\n     // Using LinkedHashSet to preserve original string order\n     final Set<String> result = new LinkedHashSet<>();\n     // Java returns single value when splitting an empty string. We do not need that value, so\n     // we need to throw it out.\n-    for (final String value : str.split(regex)) {\n+    for (final String value : str.split(SPLIT_BY_SPACE_OR_COMMA_REGEX)) {\n       if (!value.isEmpty()) {\n         result.add(value);\n       }\n     }\n     return Collections.unmodifiableSet(result);\n   }\n \n-  private static <V extends Enum<V>> Set<V> convertStringSetToEnumSet(\n-      final Set<String> input, final Class<V> clazz) {\n+  @NonNull\n+  private static Set<PropagationStyle> convertStringSetToEnumSet(final Set<String> input) {", "originalCommit": "a547030f41fb0defd73384a9cc389dcc09cf9ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0MTAwOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r402641009", "bodyText": "My point is we don't need generalisation(generic) if we don't use it for any other type argument more than a year (or some other significant timeline).\nAll these 3 method names were confusing even before this change, because they were using LinkedHashSet (iterates over elements in the same order they were added to Map) inside and never used actual EnumSet ( https://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html ) class where iteration order of entries is always the same according to declaration values in Enum. Anyway, it's a good point and I've renamed these 3 methods.", "author": "lpriima", "createdAt": "2020-04-02T22:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwNTUxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406805511", "bodyText": "Given the generic nature of Config, I'd probably vote to leave it, but I don't feel strongly.\nOn the whole, I find Config both too specific and too generic at the same time.\nI really like Config to handle String to primitive conversions better -- especially for List, Maps, but long term, I'd like the details of the precise variables moved elsewhere.\nI also find adding a new variable tedious but more importantly error prone.  I think a new design could fix that, but I think we should talk through the design first.", "author": "dougqh", "createdAt": "2020-04-10T15:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "926365b59131b7618f8a92bcf2c2b3a999883d23", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex f47e0aeec1..5d80d557d7 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -1188,7 +1235,8 @@ public class Config {\n   }\n \n   @NonNull\n-  private static Set<PropagationStyle> convertStringSetToEnumSet(final Set<String> input) {\n+  private static Set<PropagationStyle> convertStringSetToPropagationStyleSet(\n+      final Set<String> input) {\n     // Using LinkedHashSet to preserve original string order\n     final Set<PropagationStyle> result = new LinkedHashSet<>();\n     for (final String value : input) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzc2Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r402413762", "bodyText": "These are intentionally public and part of the public API...", "author": "tylerbenson", "createdAt": "2020-04-02T15:41:17Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -45,99 +48,104 @@\n \n   private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n \n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String SERVICE_NAME = \"service.name\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String WRITER_TYPE = \"writer.type\";\n-  public static final String AGENT_HOST = \"agent.host\";\n-  public static final String TRACE_AGENT_PORT = \"trace.agent.port\";\n-  public static final String AGENT_PORT_LEGACY = \"agent.port\";\n-  public static final String AGENT_UNIX_DOMAIN_SOCKET = \"trace.agent.unix.domain.socket\";\n-  public static final String PRIORITY_SAMPLING = \"priority.sampling\";\n-  public static final String TRACE_RESOLVER_ENABLED = \"trace.resolver.enabled\";\n-  public static final String SERVICE_MAPPING = \"service.mapping\";\n-\n-  public static final String TAGS = \"tags\";\n+  private static final String CONFIGURATION_FILE = \"trace.config\";", "originalCommit": "a547030f41fb0defd73384a9cc389dcc09cf9ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxODk5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r402418990", "bodyText": "I'd like to understand why if you have some context, considering these aren't part of the act of tracing", "author": "devinsba", "createdAt": "2020-04-02T15:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNzc2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r402507761", "bodyText": "The original intent was to allow people to provide custom config via a Properties using the get(Properties) method:\n  public static Config get(final Properties properties) {\n    if (properties == null || properties.isEmpty()) {\n      return INSTANCE;\n    } else {\n      return new Config(properties, INSTANCE);\n    }\n  }\nWhere these fields being public can be used as keys instead of the raw strings.  This is mainly for someone using dd-trace-ot and not dd-java-agent.\nTo be clear, I don't love the design... it was done a long time ago when the config was MUCH simpler.  Just saying this is not exactly a harmless change as some people might be using it.  If we want it changed, it should be a separate PR.", "author": "tylerbenson", "createdAt": "2020-04-02T17:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "926365b59131b7618f8a92bcf2c2b3a999883d23", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex f47e0aeec1..5d80d557d7 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -48,104 +48,137 @@ public class Config {\n \n   private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n \n-  private static final String CONFIGURATION_FILE = \"trace.config\";\n-  private static final String SERVICE_NAME = \"service.name\";\n-  private static final String TRACE_ENABLED = \"trace.enabled\";\n-  private static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  private static final String WRITER_TYPE = \"writer.type\";\n-  private static final String AGENT_HOST = \"agent.host\";\n-  private static final String TRACE_AGENT_PORT = \"trace.agent.port\";\n-  private static final String AGENT_PORT_LEGACY = \"agent.port\";\n-  private static final String AGENT_UNIX_DOMAIN_SOCKET = \"trace.agent.unix.domain.socket\";\n-  private static final String PRIORITY_SAMPLING = \"priority.sampling\";\n-  private static final String TRACE_RESOLVER_ENABLED = \"trace.resolver.enabled\";\n-  private static final String SERVICE_MAPPING = \"service.mapping\";\n+  @Deprecated public static final String CONFIGURATION_FILE = \"trace.config\";\n+  @Deprecated public static final String SERVICE_NAME = \"service.name\";\n+  @Deprecated public static final String TRACE_ENABLED = \"trace.enabled\";\n+  @Deprecated public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n+  @Deprecated public static final String WRITER_TYPE = \"writer.type\";\n+  @Deprecated public static final String AGENT_HOST = \"agent.host\";\n+  @Deprecated public static final String TRACE_AGENT_PORT = \"trace.agent.port\";\n+  @Deprecated public static final String AGENT_PORT_LEGACY = \"agent.port\";\n+\n+  @Deprecated\n+  public static final String AGENT_UNIX_DOMAIN_SOCKET = \"trace.agent.unix.domain.socket\";\n+\n+  @Deprecated public static final String PRIORITY_SAMPLING = \"priority.sampling\";\n+  @Deprecated public static final String TRACE_RESOLVER_ENABLED = \"trace.resolver.enabled\";\n+  @Deprecated public static final String SERVICE_MAPPING = \"service.mapping\";\n \n   private static final String ENV = \"env\";\n   private static final String VERSION = \"version\";\n   private static final String TAGS = \"tags\";\n   @Deprecated // Use dd.tags instead\n-  private static final String GLOBAL_TAGS = \"trace.global.tags\";\n-  private static final String SPAN_TAGS = \"trace.span.tags\";\n-  private static final String JMX_TAGS = \"trace.jmx.tags\";\n-\n-  private static final String TRACE_ANALYTICS_ENABLED = \"trace.analytics.enabled\";\n-  private static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  private static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  private static final String TRACE_EXECUTORS = \"trace.executors\";\n-  private static final String TRACE_METHODS = \"trace.methods\";\n-  private static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  private static final String TRACE_SAMPLING_SERVICE_RULES = \"trace.sampling.service.rules\";\n-  private static final String TRACE_SAMPLING_OPERATION_RULES = \"trace.sampling.operation.rules\";\n-  private static final String TRACE_SAMPLE_RATE = \"trace.sample.rate\";\n-  private static final String TRACE_RATE_LIMIT = \"trace.rate.limit\";\n-  private static final String TRACE_REPORT_HOSTNAME = \"trace.report-hostname\";\n-  private static final String HEADER_TAGS = \"trace.header.tags\";\n-  private static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  private static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  private static final String HTTP_SERVER_TAG_QUERY_STRING = \"http.server.tag.query-string\";\n-  private static final String HTTP_CLIENT_TAG_QUERY_STRING = \"http.client.tag.query-string\";\n-  private static final String HTTP_CLIENT_HOST_SPLIT_BY_DOMAIN =\n-      \"trace.http.client.split-by-domain\";\n-  private static final String DB_CLIENT_HOST_SPLIT_BY_INSTANCE =\n-      \"trace.db.client.split-by-instance\";\n-  private static final String SPLIT_BY_TAGS = \"trace.split-by-tags\";\n-  private static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  private static final String PARTIAL_FLUSH_MIN_SPANS = \"trace.partial.flush.min.spans\";\n-  private static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n+  public static final String GLOBAL_TAGS = \"trace.global.tags\";\n+  @Deprecated public static final String SPAN_TAGS = \"trace.span.tags\";\n+  @Deprecated public static final String JMX_TAGS = \"trace.jmx.tags\";\n+\n+  @Deprecated public static final String TRACE_ANALYTICS_ENABLED = \"trace.analytics.enabled\";\n+  @Deprecated public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n+  @Deprecated public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n+  @Deprecated public static final String TRACE_EXECUTORS = \"trace.executors\";\n+  @Deprecated public static final String TRACE_METHODS = \"trace.methods\";\n+  @Deprecated public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n+\n+  @Deprecated\n+  public static final String TRACE_SAMPLING_SERVICE_RULES = \"trace.sampling.service.rules\";\n+\n+  @Deprecated\n+  public static final String TRACE_SAMPLING_OPERATION_RULES = \"trace.sampling.operation.rules\";\n+\n+  @Deprecated public static final String TRACE_SAMPLE_RATE = \"trace.sample.rate\";\n+  @Deprecated public static final String TRACE_RATE_LIMIT = \"trace.rate.limit\";\n+  @Deprecated public static final String TRACE_REPORT_HOSTNAME = \"trace.report-hostname\";\n+  @Deprecated public static final String HEADER_TAGS = \"trace.header.tags\";\n+  @Deprecated public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n+  @Deprecated public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n+\n+  @Deprecated\n+  public static final String HTTP_SERVER_TAG_QUERY_STRING = \"http.server.tag.query-string\";\n+\n+  @Deprecated\n+  public static final String HTTP_CLIENT_TAG_QUERY_STRING = \"http.client.tag.query-string\";\n+\n+  @Deprecated\n+  public static final String HTTP_CLIENT_HOST_SPLIT_BY_DOMAIN = \"trace.http.client.split-by-domain\";\n+\n+  @Deprecated\n+  public static final String DB_CLIENT_HOST_SPLIT_BY_INSTANCE = \"trace.db.client.split-by-instance\";\n+\n+  @Deprecated public static final String SPLIT_BY_TAGS = \"trace.split-by-tags\";\n+  @Deprecated public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n+  @Deprecated public static final String PARTIAL_FLUSH_MIN_SPANS = \"trace.partial.flush.min.spans\";\n+\n+  @Deprecated\n+  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n       \"trace.runtime.context.field.injection\";\n-  private static final String PROPAGATION_STYLE_EXTRACT = \"propagation.style.extract\";\n-  private static final String PROPAGATION_STYLE_INJECT = \"propagation.style.inject\";\n-\n-  private static final String JMX_FETCH_ENABLED = \"jmxfetch.enabled\";\n-  private static final String JMX_FETCH_CONFIG_DIR = \"jmxfetch.config.dir\";\n-  private static final String JMX_FETCH_CONFIG = \"jmxfetch.config\";\n-  private static final String JMX_FETCH_METRICS_CONFIGS = \"jmxfetch.metrics-configs\";\n-  private static final String JMX_FETCH_CHECK_PERIOD = \"jmxfetch.check-period\";\n-  private static final String JMX_FETCH_REFRESH_BEANS_PERIOD = \"jmxfetch.refresh-beans-period\";\n-  private static final String JMX_FETCH_STATSD_HOST = \"jmxfetch.statsd.host\";\n-  private static final String JMX_FETCH_STATSD_PORT = \"jmxfetch.statsd.port\";\n-\n-  private static final String HEALTH_METRICS_ENABLED = \"trace.health.metrics.enabled\";\n-  private static final String HEALTH_METRICS_STATSD_HOST = \"trace.health.metrics.statsd.host\";\n-  private static final String HEALTH_METRICS_STATSD_PORT = \"trace.health.metrics.statsd.port\";\n-\n-  private static final String LOGS_INJECTION_ENABLED = \"logs.injection\";\n-\n-  private static final String PROFILING_ENABLED = \"profiling.enabled\";\n-  private static final String PROFILING_URL = \"profiling.url\";\n-\n-  private static final String PROFILING_API_KEY = \"profiling.api-key\";\n-  private static final String PROFILING_API_KEY_FILE = \"profiling.api-key-file\";\n-  private static final String PROFILING_API_KEY_OLD = \"profiling.apikey\";\n-  private static final String PROFILING_API_KEY_FILE_OLD = \"profiling.apikey.file\";\n-  private static final String PROFILING_TAGS = \"profiling.tags\";\n-  private static final String PROFILING_START_DELAY = \"profiling.start-delay\";\n+\n+  @Deprecated public static final String PROPAGATION_STYLE_EXTRACT = \"propagation.style.extract\";\n+  @Deprecated public static final String PROPAGATION_STYLE_INJECT = \"propagation.style.inject\";\n+\n+  @Deprecated public static final String JMX_FETCH_ENABLED = \"jmxfetch.enabled\";\n+  @Deprecated public static final String JMX_FETCH_CONFIG_DIR = \"jmxfetch.config.dir\";\n+  @Deprecated public static final String JMX_FETCH_CONFIG = \"jmxfetch.config\";\n+  @Deprecated public static final String JMX_FETCH_METRICS_CONFIGS = \"jmxfetch.metrics-configs\";\n+  @Deprecated public static final String JMX_FETCH_CHECK_PERIOD = \"jmxfetch.check-period\";\n+\n+  @Deprecated\n+  public static final String JMX_FETCH_REFRESH_BEANS_PERIOD = \"jmxfetch.refresh-beans-period\";\n+\n+  @Deprecated public static final String JMX_FETCH_STATSD_HOST = \"jmxfetch.statsd.host\";\n+  @Deprecated public static final String JMX_FETCH_STATSD_PORT = \"jmxfetch.statsd.port\";\n+\n+  @Deprecated public static final String HEALTH_METRICS_ENABLED = \"trace.health.metrics.enabled\";\n+\n+  @Deprecated\n+  public static final String HEALTH_METRICS_STATSD_HOST = \"trace.health.metrics.statsd.host\";\n+\n+  @Deprecated\n+  public static final String HEALTH_METRICS_STATSD_PORT = \"trace.health.metrics.statsd.port\";\n+\n+  @Deprecated public static final String LOGS_INJECTION_ENABLED = \"logs.injection\";\n+\n+  @Deprecated public static final String PROFILING_ENABLED = \"profiling.enabled\";\n+  @Deprecated public static final String PROFILING_URL = \"profiling.url\";\n+\n+  @Deprecated public static final String PROFILING_API_KEY = \"profiling.api-key\";\n+  @Deprecated public static final String PROFILING_API_KEY_FILE = \"profiling.api-key-file\";\n+  @Deprecated public static final String PROFILING_API_KEY_OLD = \"profiling.apikey\";\n+  @Deprecated public static final String PROFILING_API_KEY_FILE_OLD = \"profiling.apikey.file\";\n+  @Deprecated public static final String PROFILING_TAGS = \"profiling.tags\";\n+  @Deprecated public static final String PROFILING_START_DELAY = \"profiling.start-delay\";\n   // DANGEROUS! May lead on sigsegv on JVMs before 14\n   // Not intended for production use\n-  private static final String PROFILING_START_FORCE_FIRST =\n+  @Deprecated\n+  public static final String PROFILING_START_FORCE_FIRST =\n       \"profiling.experimental.start-force-first\";\n-  private static final String PROFILING_UPLOAD_PERIOD = \"profiling.upload.period\";\n-  private static final String PROFILING_TEMPLATE_OVERRIDE_FILE =\n+\n+  @Deprecated public static final String PROFILING_UPLOAD_PERIOD = \"profiling.upload.period\";\n+\n+  @Deprecated\n+  public static final String PROFILING_TEMPLATE_OVERRIDE_FILE =\n       \"profiling.jfr-template-override-file\";\n-  private static final String PROFILING_UPLOAD_TIMEOUT = \"profiling.upload.timeout\";\n-  private static final String PROFILING_UPLOAD_COMPRESSION = \"profiling.upload.compression\";\n-  private static final String PROFILING_PROXY_HOST = \"profiling.proxy.host\";\n-  private static final String PROFILING_PROXY_PORT = \"profiling.proxy.port\";\n-  private static final String PROFILING_PROXY_USERNAME = \"profiling.proxy.username\";\n-  private static final String PROFILING_PROXY_PASSWORD = \"profiling.proxy.password\";\n+\n+  @Deprecated public static final String PROFILING_UPLOAD_TIMEOUT = \"profiling.upload.timeout\";\n+\n+  @Deprecated\n+  public static final String PROFILING_UPLOAD_COMPRESSION = \"profiling.upload.compression\";\n+\n+  @Deprecated public static final String PROFILING_PROXY_HOST = \"profiling.proxy.host\";\n+  @Deprecated public static final String PROFILING_PROXY_PORT = \"profiling.proxy.port\";\n+  @Deprecated public static final String PROFILING_PROXY_USERNAME = \"profiling.proxy.username\";\n+  @Deprecated public static final String PROFILING_PROXY_PASSWORD = \"profiling.proxy.password\";\n \n   public static final String RUNTIME_ID_TAG = \"runtime-id\";\n-  private static final String SERVICE = \"service\";\n-  private static final String SERVICE_TAG = SERVICE;\n-  private static final String HOST_TAG = \"host\";\n+  public static final String SERVICE = \"service\";\n+  @Deprecated public static final String SERVICE_TAG = SERVICE;\n+  @Deprecated public static final String HOST_TAG = \"host\";\n   public static final String LANGUAGE_TAG_KEY = \"language\";\n   public static final String LANGUAGE_TAG_VALUE = \"jvm\";\n \n   public static final String DEFAULT_SERVICE_NAME = \"unnamed-java-app\";\n \n   private static final boolean DEFAULT_TRACE_ENABLED = true;\n-  private static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n+  @Deprecated public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n   public static final String DD_AGENT_WRITER_TYPE = \"DDAgentWriter\";\n   public static final String LOGGING_WRITER_TYPE = \"LoggingWriter\";\n   private static final String DEFAULT_AGENT_WRITER_TYPE = DD_AGENT_WRITER_TYPE;\n"}}, {"oid": "926365b59131b7618f8a92bcf2c2b3a999883d23", "url": "https://github.com/DataDog/dd-trace-java/commit/926365b59131b7618f8a92bcf2c2b3a999883d23", "message": "mark unused public fields @Deprecated in Config.java", "committedDate": "2020-04-03T16:55:53Z", "type": "forcePushed"}, {"oid": "097dc6f6f6eaefe0a8c876b5c1c50bc8dbcbc147", "url": "https://github.com/DataDog/dd-trace-java/commit/097dc6f6f6eaefe0a8c876b5c1c50bc8dbcbc147", "message": "mark unused public fields @Deprecated in Config.java", "committedDate": "2020-04-03T20:27:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1ODQ1MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r404158451", "bodyText": "In the pase @Deprecated here was used to signal that given config parameter is deprecated and should not be used\nDeprecating everything breaks this - what's the new process?", "author": "mar-kolya", "createdAt": "2020-04-06T14:57:30Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -48,101 +51,140 @@\n \n   private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n \n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n+  @Deprecated public static final String CONFIGURATION_FILE = \"trace.config\";\n   public static final String SITE = \"site\";\n-  public static final String SERVICE_NAME = \"service.name\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String WRITER_TYPE = \"writer.type\";\n-  public static final String AGENT_HOST = \"agent.host\";\n-  public static final String TRACE_AGENT_PORT = \"trace.agent.port\";\n-  public static final String AGENT_PORT_LEGACY = \"agent.port\";\n+  @Deprecated public static final String SERVICE_NAME = \"service.name\";\n+  @Deprecated public static final String TRACE_ENABLED = \"trace.enabled\";\n+  @Deprecated public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n+  @Deprecated public static final String WRITER_TYPE = \"writer.type\";\n+  @Deprecated public static final String AGENT_HOST = \"agent.host\";\n+  @Deprecated public static final String TRACE_AGENT_PORT = \"trace.agent.port\";\n+  @Deprecated public static final String AGENT_PORT_LEGACY = \"agent.port\";", "originalCommit": "097dc6f6f6eaefe0a8c876b5c1c50bc8dbcbc147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwOTY3MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406609671", "bodyText": "ok", "author": "lpriima", "createdAt": "2020-04-10T05:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1ODQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e88ed3e42d3b6a5c421cbc5ed22711d4a17d45e", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex 150229ea7e..30c3843f61 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -52,6 +52,8 @@ public class Config {\n   private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n \n   @Deprecated public static final String CONFIGURATION_FILE = \"trace.config\";\n+  public static final String API_KEY = \"api-key\";\n+  public static final String API_KEY_FILE = \"api-key-file\";\n   public static final String SITE = \"site\";\n   @Deprecated public static final String SERVICE_NAME = \"service.name\";\n   @Deprecated public static final String TRACE_ENABLED = \"trace.enabled\";\n"}}, {"oid": "6e88ed3e42d3b6a5c421cbc5ed22711d4a17d45e", "url": "https://github.com/DataDog/dd-trace-java/commit/6e88ed3e42d3b6a5c421cbc5ed22711d4a17d45e", "message": "mark unused public fields @Deprecated in Config.java", "committedDate": "2020-04-06T22:42:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1MTIxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r404151214", "bodyText": "Can you clarify the motivation for this change?", "author": "tylerbenson", "createdAt": "2020-04-06T14:48:28Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -496,8 +537,9 @@ private String profilingProxyPasswordMasker() {\n     log.debug(\"New instance: {}\", this);\n   }\n \n-  // Read order: Properties -> Parent\n-  private Config(final Properties properties, final Config parent) {\n+  // Read order: Properties -> Default INSTANCE\n+  private Config(final Properties properties) {\n+    final Config parent = INSTANCE;", "originalCommit": "097dc6f6f6eaefe0a8c876b5c1c50bc8dbcbc147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MDM2MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r405140360", "bodyText": "this constructor is always calling with second parameter INSTANCE  .", "author": "lpriima", "createdAt": "2020-04-07T22:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1MTIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDkwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406810906", "bodyText": "While I understand the motivation, I think I prefer the old way.\nIn general, I think we have too much direct use of statics and singletons throughout the codebase.  I suppose there's an argument that this reduces the number of places where we access INSTANCE, but I still feel like the prior way was a bit cleaner.", "author": "dougqh", "createdAt": "2020-04-10T15:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1MTIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "6e88ed3e42d3b6a5c421cbc5ed22711d4a17d45e", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex 150229ea7e..30c3843f61 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -534,6 +556,9 @@ public class Config {\n     profilingProxyUsername = getSettingFromEnvironment(PROFILING_PROXY_USERNAME, null);\n     profilingProxyPassword = getSettingFromEnvironment(PROFILING_PROXY_PASSWORD, null);\n \n+    // Setting this last because we have a few places where this can come from\n+    apiKey = tmpApiKey;\n+\n     log.debug(\"New instance: {}\", this);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3NDY4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r404874689", "bodyText": "Instead of deleting, please update this to reference it:\nhttps://github.com/DataDog/dd-trace-java/blob/master/dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java#L68", "author": "tylerbenson", "createdAt": "2020-04-07T14:55:20Z", "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java", "diffHunk": "@@ -23,7 +23,6 @@\n @Slf4j\n public class DDSpanContext implements io.opentracing.SpanContext {\n   public static final String PRIORITY_SAMPLING_KEY = \"_sampling_priority_v1\";\n-  public static final String SAMPLE_RATE_KEY = \"_sample_rate\";", "originalCommit": "6e88ed3e42d3b6a5c421cbc5ed22711d4a17d45e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNjczMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406836733", "bodyText": "ok", "author": "lpriima", "createdAt": "2020-04-10T16:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3NDY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "12b5b0ab08770f4092fc78521146867b1338d605", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java b/dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java\nindex dbb1674d3f..38ad5535d4 100644\n--- a/dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java\n+++ b/dd-trace-ot/src/main/java/datadog/opentracing/DDSpanContext.java\n\n@@ -23,6 +23,7 @@ import lombok.extern.slf4j.Slf4j;\n @Slf4j\n public class DDSpanContext implements io.opentracing.SpanContext {\n   public static final String PRIORITY_SAMPLING_KEY = \"_sampling_priority_v1\";\n+  public static final String SAMPLE_RATE_KEY = \"_sample_rate\";\n   public static final String ORIGIN_KEY = \"_dd.origin\";\n   public static final String DD_MEASURED = \"_dd.measured\";\n   public static final Number DD_MEASURED_DEFAULT = 1;\n"}}, {"oid": "221ebca4feb908a80c93e16a26a343c5da880417", "url": "https://github.com/DataDog/dd-trace-java/commit/221ebca4feb908a80c93e16a26a343c5da880417", "message": "keep unused public fields untouched", "committedDate": "2020-04-08T22:30:59Z", "type": "forcePushed"}, {"oid": "81777f393c7deb7581e24f6f0be547ff399ad56d", "url": "https://github.com/DataDog/dd-trace-java/commit/81777f393c7deb7581e24f6f0be547ff399ad56d", "message": "keep unused public fields untouched", "committedDate": "2020-04-08T22:32:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDMyNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406814327", "bodyText": "Looks like we've largely settled on keeping the public fields, I think that's the right choice for now.\nGiven that, I think I fold SERVICE and SERVICE_TAG together again.\nI'm going to draw up a plan for how we might start to deprecate Config, but for now, I think we should keep the changes modest.", "author": "dougqh", "createdAt": "2020-04-10T15:40:38Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -139,7 +143,8 @@\n   public static final String PROFILING_PROXY_PASSWORD = \"profiling.proxy.password\";\n \n   public static final String RUNTIME_ID_TAG = \"runtime-id\";\n-  public static final String SERVICE_TAG = \"service\";\n+  private static final String SERVICE = \"service\";\n+  public static final String SERVICE_TAG = SERVICE;", "originalCommit": "81777f393c7deb7581e24f6f0be547ff399ad56d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21d5d038887d6d0f2984c6401c9072406f9850c0", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex afc24e8849..30c3843f61 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -126,26 +154,34 @@ public class Config {\n   public static final String PROFILING_API_KEY_VERY_OLD = \"profiling.apikey\";\n   @Deprecated // Use dd.api-key-file instead\n   public static final String PROFILING_API_KEY_FILE_VERY_OLD = \"profiling.apikey.file\";\n-  public static final String PROFILING_TAGS = \"profiling.tags\";\n-  public static final String PROFILING_START_DELAY = \"profiling.start-delay\";\n+  @Deprecated public static final String PROFILING_TAGS = \"profiling.tags\";\n+  @Deprecated public static final String PROFILING_START_DELAY = \"profiling.start-delay\";\n   // DANGEROUS! May lead on sigsegv on JVMs before 14\n   // Not intended for production use\n+  @Deprecated\n   public static final String PROFILING_START_FORCE_FIRST =\n       \"profiling.experimental.start-force-first\";\n-  public static final String PROFILING_UPLOAD_PERIOD = \"profiling.upload.period\";\n+\n+  @Deprecated public static final String PROFILING_UPLOAD_PERIOD = \"profiling.upload.period\";\n+\n+  @Deprecated\n   public static final String PROFILING_TEMPLATE_OVERRIDE_FILE =\n       \"profiling.jfr-template-override-file\";\n-  public static final String PROFILING_UPLOAD_TIMEOUT = \"profiling.upload.timeout\";\n+\n+  @Deprecated public static final String PROFILING_UPLOAD_TIMEOUT = \"profiling.upload.timeout\";\n+\n+  @Deprecated\n   public static final String PROFILING_UPLOAD_COMPRESSION = \"profiling.upload.compression\";\n-  public static final String PROFILING_PROXY_HOST = \"profiling.proxy.host\";\n-  public static final String PROFILING_PROXY_PORT = \"profiling.proxy.port\";\n-  public static final String PROFILING_PROXY_USERNAME = \"profiling.proxy.username\";\n-  public static final String PROFILING_PROXY_PASSWORD = \"profiling.proxy.password\";\n+\n+  @Deprecated public static final String PROFILING_PROXY_HOST = \"profiling.proxy.host\";\n+  @Deprecated public static final String PROFILING_PROXY_PORT = \"profiling.proxy.port\";\n+  @Deprecated public static final String PROFILING_PROXY_USERNAME = \"profiling.proxy.username\";\n+  @Deprecated public static final String PROFILING_PROXY_PASSWORD = \"profiling.proxy.password\";\n \n   public static final String RUNTIME_ID_TAG = \"runtime-id\";\n   private static final String SERVICE = \"service\";\n-  public static final String SERVICE_TAG = SERVICE;\n-  public static final String HOST_TAG = \"host\";\n+  @Deprecated public static final String SERVICE_TAG = SERVICE;\n+  @Deprecated public static final String HOST_TAG = \"host\";\n   public static final String LANGUAGE_TAG_KEY = \"language\";\n   public static final String LANGUAGE_TAG_VALUE = \"jvm\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNTE5NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406815195", "bodyText": "The one bit I'd caution against here is that we probably want to avoid creating synthetic accessors as well, so sometimes, I err on the side of making things package visible.\nNot that synthetic accessors are terribly expensive in either time or space, but I'd rather not add to overhead if we can easily avoid it.", "author": "dougqh", "createdAt": "2020-04-10T15:42:48Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -318,8 +323,8 @@ private String profilingProxyPasswordMasker() {\n   private static Properties propertiesFromConfigFile;\n \n   // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n+  // Visible for testing: groovy tests can access private ctor perfectly fine\n+  private Config() {", "originalCommit": "81777f393c7deb7581e24f6f0be547ff399ad56d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12b5b0ab08770f4092fc78521146867b1338d605", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex afc24e8849..5dc753a186 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -323,8 +323,8 @@ public class Config {\n   private static Properties propertiesFromConfigFile;\n \n   // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing: groovy tests can access private ctor perfectly fine\n-  private Config() {\n+  // Visible for testing\n+  Config() {\n     propertiesFromConfigFile = loadConfigurationFile();\n \n     runtimeId = UUID.randomUUID().toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMDM1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406820353", "bodyText": "ASIDE: I actually feel that the better opportunity to clean-up Config lies in these various static helpers.\nRight now, we sprinkle propertyNameToSystemPropertyName, etc around the code, but I think that could be encapsulated.  If we made a Config.Lookup helper class, then we could have a few variations...\nPropertiesLookup, EnvLookup -- those could handle applying the appropriate name transformation.\nAdditionally, we could have a CompositeLookup that handles look first at Env then Properties then Parent.\nThat said, I don't want to do that as part of this PR for a couple reasons.\n1 - I'd like to separate bigger refactorings / non-functional changes from functional changes.\nIt looks like we separated the commits (which is good), but at certain size, I think we should separate the PRs as well.  Admittedly, we need to all be better about doing such a separation -- and this PR isn't quite so big that I find it problematic, but I think Config needs a more serious overall and that should be done by itself.\n2 - Kind of the same point as above, but I'd like to get the functional change released sooner rather than later.  And right now, we're debating largely non-functional pieces, I don't want to add to that the problem by changing Config enen more.", "author": "dougqh", "createdAt": "2020-04-10T15:54:39Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -910,7 +917,7 @@ private static String getSettingFromEnvironment(final String name, final String\n     }\n \n     // If value is not defined yet, we look at properties optionally defined in a properties file\n-    value = propertiesFromConfigFile.getProperty(propertyNameToSystemPropertyName(name));\n+    value = propertiesFromConfigFile.getProperty(systemPropertyName);", "originalCommit": "81777f393c7deb7581e24f6f0be547ff399ad56d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMDYwMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406820600", "bodyText": "I like the additions of @nonnull.  I wouldn't mind us doing more of that.", "author": "dougqh", "createdAt": "2020-04-10T15:55:12Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -931,7 +939,8 @@ private static String getSettingFromEnvironment(final String name, final String\n    *\n    * @deprecated This method should only be used internally. Use the explicit getter instead.\n    */\n-  public static List<String> getListSettingFromEnvironment(\n+  @NonNull", "originalCommit": "81777f393c7deb7581e24f6f0be547ff399ad56d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyNTIwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406825206", "bodyText": "it's lombok runtime check. I'd prefer compile time annotations check.", "author": "lpriima", "createdAt": "2020-04-10T16:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMDYwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMTM5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406821397", "bodyText": "I appreciate the addition of static.  I'd like us to be more careful about making helpers static when appropriate.", "author": "dougqh", "createdAt": "2020-04-10T15:57:08Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -996,28 +997,22 @@ private static Integer getIntegerSettingFromEnvironment(\n    * Calls {@link #getSettingFromEnvironment(String, String)} and converts the result to a set of\n    * strings splitting by space or comma.\n    */\n-  private static <T extends Enum<T>> Set<T> getEnumSetSettingFromEnvironment(\n-      final String name,\n-      final String defaultValue,\n-      final Class<T> clazz,\n-      final boolean emptyResultMeansUseDefault) {\n+  private static Set<PropagationStyle> getPropagationStyleSetSettingFromEnvironmentOrDefault(\n+      final String name, final String defaultValue) {\n     final String value = getSettingFromEnvironment(name, defaultValue);\n-    Set<T> result =\n-        convertStringSetToEnumSet(\n-            parseStringIntoSetOfNonEmptyStrings(value, SPLIT_BY_SPACE_OR_COMMA_REGEX), clazz);\n+    Set<PropagationStyle> result =\n+        convertStringSetToPropagationStyleSet(parseStringIntoSetOfNonEmptyStrings(value));\n \n-    if (emptyResultMeansUseDefault && result.isEmpty()) {\n+    if (result.isEmpty()) {\n       // Treat empty parsing result as no value and use default instead\n       result =\n-          convertStringSetToEnumSet(\n-              parseStringIntoSetOfNonEmptyStrings(defaultValue, SPLIT_BY_SPACE_OR_COMMA_REGEX),\n-              clazz);\n+          convertStringSetToPropagationStyleSet(parseStringIntoSetOfNonEmptyStrings(defaultValue));\n     }\n \n     return result;\n   }\n \n-  private Set<Integer> getIntegerRangeSettingFromEnvironment(\n+  private static Set<Integer> getIntegerRangeSettingFromEnvironment(", "originalCommit": "81777f393c7deb7581e24f6f0be547ff399ad56d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffdaefb39a2c9d8a0769c46ad659fb139ba02d7c", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex afc24e8849..4f49ce7f50 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -997,16 +1004,15 @@ public class Config {\n    * Calls {@link #getSettingFromEnvironment(String, String)} and converts the result to a set of\n    * strings splitting by space or comma.\n    */\n-  private static Set<PropagationStyle> getPropagationStyleSetSettingFromEnvironmentOrDefault(\n+  private static Set<PropagationStyle> getEnumSetSettingFromEnvironmentOrDefault(\n       final String name, final String defaultValue) {\n     final String value = getSettingFromEnvironment(name, defaultValue);\n     Set<PropagationStyle> result =\n-        convertStringSetToPropagationStyleSet(parseStringIntoSetOfNonEmptyStrings(value));\n+        convertStringSetToEnumSet(parseStringIntoSetOfNonEmptyStrings(value));\n \n     if (result.isEmpty()) {\n       // Treat empty parsing result as no value and use default instead\n-      result =\n-          convertStringSetToPropagationStyleSet(parseStringIntoSetOfNonEmptyStrings(defaultValue));\n+      result = convertStringSetToEnumSet(parseStringIntoSetOfNonEmptyStrings(defaultValue));\n     }\n \n     return result;\n"}}, {"oid": "ffdaefb39a2c9d8a0769c46ad659fb139ba02d7c", "url": "https://github.com/DataDog/dd-trace-java/commit/ffdaefb39a2c9d8a0769c46ad659fb139ba02d7c", "message": "DD_SERVICE; DD_ENV; DD_VERSION env vars support", "committedDate": "2020-04-10T16:39:22Z", "type": "commit"}, {"oid": "bcc745f28f53d8c6b0f7868e07516d2a829d822a", "url": "https://github.com/DataDog/dd-trace-java/commit/bcc745f28f53d8c6b0f7868e07516d2a829d822a", "message": "Config.valueOf(\"\", null, \"\") with throw NPE", "committedDate": "2020-04-10T16:39:22Z", "type": "commit"}, {"oid": "21d5d038887d6d0f2984c6401c9072406f9850c0", "url": "https://github.com/DataDog/dd-trace-java/commit/21d5d038887d6d0f2984c6401c9072406f9850c0", "message": "mark unused public fields @Deprecated in Config.java", "committedDate": "2020-04-10T16:39:22Z", "type": "commit"}, {"oid": "6911c0a1dc11a028d3b73813d6c121136918abd3", "url": "https://github.com/DataDog/dd-trace-java/commit/6911c0a1dc11a028d3b73813d6c121136918abd3", "message": "keep unused public fields untouched", "committedDate": "2020-04-10T16:39:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjgwNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406842804", "bodyText": "Isn't this more or less functionally equivalent to enumSet support that came before?  Just not public?", "author": "dougqh", "createdAt": "2020-04-10T16:48:13Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -1048,10 +1044,41 @@ private static String propertyNameToEnvironmentVariableName(final String setting\n    * @param setting The setting name, e.g. `service.name`\n    * @return The public facing system property name\n    */\n+  @NonNull\n   private static String propertyNameToSystemPropertyName(final String setting) {\n     return PREFIX + setting;\n   }\n \n+  /**\n+   * @param value to parse by tClass::valueOf\n+   * @param tClass should contain static parsing method \"T valueOf(String)\"\n+   * @param defaultValue\n+   * @param <T>\n+   * @return value == null || value.trim().isEmpty() ? defaultValue : tClass.valueOf(value)\n+   * @throws NumberFormatException\n+   */\n+  private static <T> T valueOf(\n+      final String value, @NonNull final Class<T> tClass, final T defaultValue) {\n+    if (value == null || value.trim().isEmpty()) {\n+      log.debug(\"valueOf: using defaultValue '{}' for '{}' of '{}' \", defaultValue, value, tClass);\n+      return defaultValue;\n+    }\n+    try {\n+      return (T)\n+          MethodHandles.publicLookup()", "originalCommit": "81777f393c7deb7581e24f6f0be547ff399ad56d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzgyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406843826", "bodyText": "I appreciate the use of MethodHandles.  I think we've actually been using reflection in places where we should really be using MethodHandles; however, I'm not sure this is one of those places.\nI think just looping over the enum values and checking name is probably a little more intuitive and probably faster, too.  (Although, this code shouldn't be performance critical.)\nAlso, I don't really like exposing a name in the code directly out to the config.\nI think this can lead to subtle & surprising breaking changes, but that's a problem that already existed.", "author": "dougqh", "createdAt": "2020-04-10T16:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDM2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406850368", "bodyText": "Isn't this more or less functionally equivalent to enumSet support that came before? Just not public?\n\nNo. It's not related to \"enumSet support that came before\". We never used the java.util.EnumSet class here. We only used \"enumSet\" string  in function names, which created confusion and was potentially dangerous before. And it's discussed here: #1341 (comment)\nThis valueOf method is used for parsing Integer/Boolean/Float/Double:\nhttps://github.com/DataDog/dd-trace-java/pull/1341/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR954\nhttps://github.com/DataDog/dd-trace-java/pull/1341/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR963\nhttps://github.com/DataDog/dd-trace-java/pull/1341/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR974\nhttps://github.com/DataDog/dd-trace-java/pull/1341/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR982\nhttps://github.com/DataDog/dd-trace-java/pull/1341/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR988\nhttps://github.com/DataDog/dd-trace-java/pull/1341/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR1095\nhttps://github.com/DataDog/dd-trace-java/pull/1341/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR1100\nhttps://github.com/DataDog/dd-trace-java/pull/1341/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR1105", "author": "lpriima", "createdAt": "2020-04-10T17:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjgwNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "12b5b0ab08770f4092fc78521146867b1338d605", "url": "https://github.com/DataDog/dd-trace-java/commit/12b5b0ab08770f4092fc78521146867b1338d605", "message": "retrun 2arg Config ctor", "committedDate": "2020-04-10T16:50:34Z", "type": "commit"}, {"oid": "12b5b0ab08770f4092fc78521146867b1338d605", "url": "https://github.com/DataDog/dd-trace-java/commit/12b5b0ab08770f4092fc78521146867b1338d605", "message": "retrun 2arg Config ctor", "committedDate": "2020-04-10T16:50:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NzMxMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406847312", "bodyText": "I like the try with resources here.  Although, I'm little uncertain about moving the Process inline.\nIt also looks we're not handling the exit code of the Process, but that's not new.", "author": "dougqh", "createdAt": "2020-04-10T16:58:31Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -1275,12 +1314,11 @@ private String getHostName() {\n     }\n \n     // Try hostname command\n-    try {\n-      final Process process = Runtime.getRuntime().exec(\"hostname\");\n-      final BufferedReader reader =\n-          new BufferedReader(new InputStreamReader(process.getInputStream()));\n+    try (final BufferedReader reader =", "originalCommit": "12b5b0ab08770f4092fc78521146867b1338d605", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NzY2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406877666", "bodyText": "from here it looks like the old SERVICE_NAME will take precedence over the new SERVICE, is that the intention?", "author": "tylerbenson", "createdAt": "2020-04-10T18:11:35Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -338,7 +343,9 @@ private String profilingProxyPasswordMasker() {\n       }\n     }\n     site = getSettingFromEnvironment(SITE, DEFAULT_SITE);\n-    serviceName = getSettingFromEnvironment(SERVICE_NAME, DEFAULT_SERVICE_NAME);\n+    serviceName =\n+        getSettingFromEnvironment(\n+            SERVICE_NAME, getSettingFromEnvironment(SERVICE, DEFAULT_SERVICE_NAME));", "originalCommit": "12b5b0ab08770f4092fc78521146867b1338d605", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MTAyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1341#discussion_r406981022", "bodyText": "yes", "author": "lpriima", "createdAt": "2020-04-10T23:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NzY2Ng=="}], "type": "inlineReview", "revised_code": null}]}