{"pr_number": 1185, "pr_title": "Remove Jackson from dd-trace-ot", "pr_createdAt": "2020-01-22T23:10:22Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1185", "timeline": [{"oid": "c3404ea61ce197f2bb3d278a9e66928d9405ae17", "url": "https://github.com/DataDog/dd-trace-java/commit/c3404ea61ce197f2bb3d278a9e66928d9405ae17", "message": "Remove Jackson from dd-trace-ot\n\nReduced the size of dd-java-agent jar by about 2 MB. Jackson is not removed completely though as it is still a dependency of jmxfetch.\n\nTrace serialization is primarily done directly with msgpack.\nResponse deserialization and LoggingWriter serialization is done with mochi.\n\nMsgpack Serialization buffer still not being reused though.", "committedDate": "2020-01-23T00:50:26Z", "type": "forcePushed"}, {"oid": "af212af4f510772d150eaa0b59bb186ad2ccf387", "url": "https://github.com/DataDog/dd-trace-java/commit/af212af4f510772d150eaa0b59bb186ad2ccf387", "message": "Remove Jackson from dd-trace-ot\n\nReduced the size of dd-java-agent jar by about 2 MB. Jackson is not removed completely though as it is still a dependency of jmxfetch.\n\nTrace serialization is primarily done directly with msgpack.\nResponse deserialization and LoggingWriter serialization is done with mochi.\n\nMsgpack Serialization buffer still not being reused though.", "committedDate": "2020-01-23T01:09:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NzI1MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1185#discussion_r370147251", "bodyText": "else with an exception for unsupported types?", "author": "dougqh", "createdAt": "2020-01-23T14:25:59Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/serialization/FormatWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package datadog.trace.common.serialization;\n+\n+import datadog.opentracing.DDSpan;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class FormatWriter<DEST> {\n+  public abstract void writeKey(String key, DEST destination) throws IOException;\n+\n+  public abstract void writeListHeader(int size, DEST destination) throws IOException;\n+\n+  public abstract void writeListFooter(DEST destination) throws IOException;\n+\n+  public abstract void writeMapHeader(int size, DEST destination) throws IOException;\n+\n+  public abstract void writeMapFooter(DEST destination) throws IOException;\n+\n+  public abstract void writeString(String key, String value, DEST destination) throws IOException;\n+\n+  public abstract void writeShort(String key, short value, DEST destination) throws IOException;\n+\n+  public abstract void writeByte(String key, byte value, DEST destination) throws IOException;\n+\n+  public abstract void writeInt(String key, int value, DEST destination) throws IOException;\n+\n+  public abstract void writeLong(String key, long value, DEST destination) throws IOException;\n+\n+  public abstract void writeFloat(String key, float value, DEST destination) throws IOException;\n+\n+  public abstract void writeDouble(String key, double value, DEST destination) throws IOException;\n+\n+  public abstract void writeBigInteger(String key, BigInteger value, DEST destination)\n+      throws IOException;\n+\n+  public void writeNumber(final String key, final Number value, final DEST destination)\n+      throws IOException {\n+    if (value instanceof Double) {\n+      writeDouble(key, value.doubleValue(), destination);\n+    } else if (value instanceof Long) {\n+      writeLong(key, value.longValue(), destination);\n+    } else if (value instanceof Integer) {\n+      writeInt(key, value.intValue(), destination);\n+    } else if (value instanceof Float) {\n+      writeFloat(key, value.floatValue(), destination);\n+    } else if (value instanceof Byte) {\n+      writeByte(key, value.byteValue(), destination);\n+    } else if (value instanceof Short) {\n+      writeShort(key, value.shortValue(), destination);\n+    }", "originalCommit": "af212af4f510772d150eaa0b59bb186ad2ccf387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "697d4972a8cb75be75cbf62dde4166be7b72e1c9", "url": "https://github.com/DataDog/dd-trace-java/commit/697d4972a8cb75be75cbf62dde4166be7b72e1c9", "message": "Remove Jackson from dd-trace-ot\n\nReduced the size of dd-java-agent jar by about 2 MB. Jackson is not removed completely though as it is still a dependency of jmxfetch.\n\nTrace serialization is primarily done directly with msgpack.\nResponse deserialization and LoggingWriter serialization is done with mochi.\n\nMsgpack Serialization buffer still not being reused though.", "committedDate": "2020-01-31T20:59:43Z", "type": "commit"}, {"oid": "697d4972a8cb75be75cbf62dde4166be7b72e1c9", "url": "https://github.com/DataDog/dd-trace-java/commit/697d4972a8cb75be75cbf62dde4166be7b72e1c9", "message": "Remove Jackson from dd-trace-ot\n\nReduced the size of dd-java-agent jar by about 2 MB. Jackson is not removed completely though as it is still a dependency of jmxfetch.\n\nTrace serialization is primarily done directly with msgpack.\nResponse deserialization and LoggingWriter serialization is done with mochi.\n\nMsgpack Serialization buffer still not being reused though.", "committedDate": "2020-01-31T20:59:43Z", "type": "forcePushed"}]}