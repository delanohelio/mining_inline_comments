{"pr_number": 2129, "pr_title": "Add support for JBoss LogManager and early LogContextScopeListener registration", "pr_createdAt": "2020-11-27T16:44:19Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2129", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY5OTM0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531699348", "bodyText": "This should only happen once, right?", "author": "richardstartin", "createdAt": "2020-11-27T16:57:54Z", "path": "dd-java-agent/instrumentation/jboss-logmanager/src/main/java/datadog/trace/instrumentation/jbosslogmanager/JBossLogManagerMDCInstrumentation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package datadog.trace.instrumentation.jbosslogmanager;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.agent.tooling.log.LogContextScopeListener;\n+import datadog.trace.api.Config;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JBossLogManagerMDCInstrumentation extends Instrumenter.Default {\n+  public static final String MDC_INSTRUMENTATION_NAME = \"jboss-logmanager\";\n+\n+  public JBossLogManagerMDCInstrumentation() {\n+    super(MDC_INSTRUMENTATION_NAME);\n+  }\n+\n+  @Override\n+  protected boolean defaultEnabled() {\n+    return Config.get().isLogsInjectionEnabled();\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.jboss.logmanager.MDC\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isTypeInitializer(),\n+        JBossLogManagerMDCInstrumentation.class.getName() + \"$MDCContextAdvice\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\"datadog.trace.agent.tooling.log.LogContextScopeListener\"};\n+  }\n+\n+  public static class MDCContextAdvice {", "originalCommit": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMDg4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531700889", "bodyText": "Yes only once for the the MDC singleton.", "author": "bantonsson", "createdAt": "2020-11-27T17:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY5OTM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "255917652ceb485f3b059844c92a2835a370ea89", "chunk": "diff --git a/dd-java-agent/instrumentation/jboss-logmanager/src/main/java/datadog/trace/instrumentation/jbosslogmanager/JBossLogManagerMDCInstrumentation.java b/dd-java-agent/instrumentation/jboss-logmanager/src/main/java/datadog/trace/instrumentation/jbosslogmanager/JBossLogManagerMDCInstrumentation.java\nindex 2ec6b5dace..3c9f935b60 100644\n--- a/dd-java-agent/instrumentation/jboss-logmanager/src/main/java/datadog/trace/instrumentation/jbosslogmanager/JBossLogManagerMDCInstrumentation.java\n+++ b/dd-java-agent/instrumentation/jboss-logmanager/src/main/java/datadog/trace/instrumentation/jbosslogmanager/JBossLogManagerMDCInstrumentation.java\n\n@@ -8,6 +8,7 @@ import com.google.auto.service.AutoService;\n import datadog.trace.agent.tooling.Instrumenter;\n import datadog.trace.agent.tooling.log.LogContextScopeListener;\n import datadog.trace.api.Config;\n+import datadog.trace.api.GlobalTracer;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMTc4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531701780", "bodyText": "\ud83d\udc4d I want a linter to find all the cases where we don't check the result of a CAS!", "author": "richardstartin", "createdAt": "2020-11-27T17:04:29Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java", "diffHunk": "@@ -35,11 +35,44 @@ public void addScopeListener(ScopeListener listener) {}\n \n   public static void registerIfAbsent(Tracer p) {\n     if (p != null && p != NO_OP) {\n-      provider.compareAndSet(NO_OP, p);\n+      boolean installed = provider.compareAndSet(NO_OP, p);", "originalCommit": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27230a0098e5f4ac002b812750b9f998542d9598", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java b/dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java\nindex 6191741507..8869262cf2 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java\n\n@@ -49,12 +49,18 @@ public class GlobalTracer {\n     return provider.get();\n   }\n \n+  // --------------------------------------------------------------------------------\n+  // All code below is to support the callback registration in WithGlobalTracer\n+  // --------------------------------------------------------------------------------\n+\n+  // Needs to use a read that can't be reordered for the code in WithGlobalTracer to be correct\n   static boolean isTracerInstalled() {\n     return provider.get() != NO_OP;\n   }\n \n   private static final AtomicReference<Callback> installationCallback = new AtomicReference<>(null);\n \n+  // Needs to use a read that can't be reordered for the code in WithGlobalTracer to be correct\n   static boolean isCallbackInstalled() {\n     return installationCallback.get() != null;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNDQ0OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531704449", "bodyText": "I don't really like this because this could break if the implementation of GlobalTracer.isTracerInstalled became reorderable. Should this all be delegated to GlobalTracer?", "author": "richardstartin", "createdAt": "2020-11-27T17:12:01Z", "path": "internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package datadog.trace.api;\n+\n+import static datadog.trace.api.GlobalTracer.isTracerInstalled;\n+\n+import java.util.LinkedList;\n+\n+public class WithGlobalTracer {\n+\n+  private static final Object lock = new Object();\n+  private static LinkedList<Callback> registeredCallbacks = null;\n+\n+  /**\n+   * Register a callback to be run when the global tracer is installed, or execute it right now if\n+   * the tracer is installed.\n+   */\n+  public static void registerOrExecute(Callback callback) {\n+    boolean shouldExecute = true;\n+    if (!isTracerInstalled()) {", "originalCommit": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNTIzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531705232", "bodyText": "I would prefer to not expose this whole thing in the public api. That's why it isn't in the GlobalTracer. I can add comments about the relationships if that helps.", "author": "bantonsson", "createdAt": "2020-11-27T17:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNDQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "27230a0098e5f4ac002b812750b9f998542d9598", "chunk": "diff --git a/internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java b/internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java\nindex 0bc0734fc9..e23f756481 100644\n--- a/internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java\n+++ b/internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java\n\n@@ -4,14 +4,23 @@ import static datadog.trace.api.GlobalTracer.isTracerInstalled;\n \n import java.util.LinkedList;\n \n+/**\n+ * Internal API for registering callbacks that will execute as soon as there is a global tracer\n+ * installed, or immediately if the global tracer is already installed.\n+ *\n+ * <p>The code is separate from {@link GlobalTracer} to not expose this mechanism to end users. It\n+ * is also based on the assumption that registering callbacks is a rare thing, and as of this\n+ * writing the only code doing it is the various MDC log injection instrumentations.\n+ */\n public class WithGlobalTracer {\n-\n+  // Use a plain lock here to guard a normal LinkedList, since there will be very few callbacks\n+  // registered before there is a global tracer installed, and iteration only happens once.\n   private static final Object lock = new Object();\n   private static LinkedList<Callback> registeredCallbacks = null;\n \n   /**\n    * Register a callback to be run when the global tracer is installed, or execute it right now if\n-   * the tracer is installed.\n+   * the tracer is already installed.\n    */\n   public static void registerOrExecute(Callback callback) {\n     boolean shouldExecute = true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNzMwMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531707303", "bodyText": "I looked at this for a while and had some doubts about the implementation strategy, but think that this is probably among the best and simplest options, especially if this is rare.", "author": "richardstartin", "createdAt": "2020-11-27T17:20:51Z", "path": "internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package datadog.trace.api;\n+\n+import static datadog.trace.api.GlobalTracer.isTracerInstalled;\n+\n+import java.util.LinkedList;\n+\n+public class WithGlobalTracer {", "originalCommit": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MTQ1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r532441453", "bodyText": "Added comments to explain the assumption that it is very rare.", "author": "bantonsson", "createdAt": "2020-11-30T09:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNzMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "27230a0098e5f4ac002b812750b9f998542d9598", "chunk": "diff --git a/internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java b/internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java\nindex 0bc0734fc9..e23f756481 100644\n--- a/internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java\n+++ b/internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java\n\n@@ -4,14 +4,23 @@ import static datadog.trace.api.GlobalTracer.isTracerInstalled;\n \n import java.util.LinkedList;\n \n+/**\n+ * Internal API for registering callbacks that will execute as soon as there is a global tracer\n+ * installed, or immediately if the global tracer is already installed.\n+ *\n+ * <p>The code is separate from {@link GlobalTracer} to not expose this mechanism to end users. It\n+ * is also based on the assumption that registering callbacks is a rare thing, and as of this\n+ * writing the only code doing it is the various MDC log injection instrumentations.\n+ */\n public class WithGlobalTracer {\n-\n+  // Use a plain lock here to guard a normal LinkedList, since there will be very few callbacks\n+  // registered before there is a global tracer installed, and iteration only happens once.\n   private static final Object lock = new Object();\n   private static LinkedList<Callback> registeredCallbacks = null;\n \n   /**\n    * Register a callback to be run when the global tracer is installed, or execute it right now if\n-   * the tracer is installed.\n+   * the tracer is already installed.\n    */\n   public static void registerOrExecute(Callback callback) {\n     boolean shouldExecute = true;\n"}}, {"oid": "27230a0098e5f4ac002b812750b9f998542d9598", "url": "https://github.com/DataDog/dd-trace-java/commit/27230a0098e5f4ac002b812750b9f998542d9598", "message": "Add quarkus logging smoke test", "committedDate": "2020-11-30T09:07:10Z", "type": "forcePushed"}, {"oid": "c590356a0e6ae54338c04ec8b1e688812ad00350", "url": "https://github.com/DataDog/dd-trace-java/commit/c590356a0e6ae54338c04ec8b1e688812ad00350", "message": "Add quarkus logging smoke test", "committedDate": "2020-11-30T09:27:44Z", "type": "forcePushed"}, {"oid": "44a05f88b54ef413b7853a44dfd35e881ee310ed", "url": "https://github.com/DataDog/dd-trace-java/commit/44a05f88b54ef413b7853a44dfd35e881ee310ed", "message": "Add quarkus logging smoke test", "committedDate": "2020-11-30T10:03:00Z", "type": "forcePushed"}, {"oid": "e399a5806d46b36c4e50d5fbdacf5c01fe04b4f3", "url": "https://github.com/DataDog/dd-trace-java/commit/e399a5806d46b36c4e50d5fbdacf5c01fe04b4f3", "message": "Add quarkus logging smoke test", "committedDate": "2020-11-30T10:35:13Z", "type": "forcePushed"}, {"oid": "e2b904a98158539d0f21ddefc9ee302fe0384964", "url": "https://github.com/DataDog/dd-trace-java/commit/e2b904a98158539d0f21ddefc9ee302fe0384964", "message": "Add quarkus logging smoke test", "committedDate": "2020-11-30T11:36:23Z", "type": "forcePushed"}, {"oid": "0f93a9a9de45e82e6460fe5addf1e6e567801393", "url": "https://github.com/DataDog/dd-trace-java/commit/0f93a9a9de45e82e6460fe5addf1e6e567801393", "message": "Add quarkus logging smoke test", "committedDate": "2020-11-30T13:42:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMDQ5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r532620497", "bodyText": "I have a nagging suspicion that there's a ! missing here, but I need to trace through this on paper to be sure", "author": "mcculls", "createdAt": "2020-11-30T14:05:51Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java", "diffHunk": "@@ -35,11 +35,50 @@ public void addScopeListener(ScopeListener listener) {}\n \n   public static void registerIfAbsent(Tracer p) {\n     if (p != null && p != NO_OP) {\n-      provider.compareAndSet(NO_OP, p);\n+      boolean installed = provider.compareAndSet(NO_OP, p);\n+      if (installed) {\n+        Callback callback = installationCallback.getAndSet(null);\n+        if (callback != null) {\n+          callback.installed(p);\n+        }\n+      }\n     }\n   }\n \n   public static Tracer get() {\n     return provider.get();\n   }\n+\n+  // --------------------------------------------------------------------------------\n+  // All code below is to support the callback registration in WithGlobalTracer\n+  // --------------------------------------------------------------------------------\n+\n+  // Needs to use a read that can't be reordered for the code in WithGlobalTracer to be correct\n+  static boolean isTracerInstalled() {\n+    return provider.get() != NO_OP;\n+  }\n+\n+  private static final AtomicReference<Callback> installationCallback = new AtomicReference<>(null);\n+\n+  // Needs to use a read that can't be reordered for the code in WithGlobalTracer to be correct\n+  static boolean isCallbackInstalled() {\n+    return installationCallback.get() != null;\n+  }\n+\n+  static boolean registerInstallationCallback(Callback callback) {\n+    if (!isTracerInstalled()) {\n+      boolean installed = installationCallback.compareAndSet(null, callback);\n+      // Check if the tracer was installed while we were doing this, and try to back out\n+      if (installed && isTracerInstalled()) {\n+        installed = installationCallback.compareAndSet(callback, null);", "originalCommit": "0f93a9a9de45e82e6460fe5addf1e6e567801393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyNDc0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r532624742", "bodyText": "So the logic here is that if we installed the callback, but now someone has installed a tracer, isTracerInstalled(), then we try to remove our callback so we know if someone has picked up our callback. This is so we don't end up in the case where the someone that installed the tracer missed our callback, and it will never be called.", "author": "bantonsson", "createdAt": "2020-11-30T14:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMDQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzMzUxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r532633514", "bodyText": "So if someone hasn't picked up our callback then this CaS will return true, which then means shouldExecute == false in registerOrExecute? Won't that leave listeners waiting to be registered since the listener wasn't picked up?", "author": "mcculls", "createdAt": "2020-11-30T14:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMDQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MTE0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r532641140", "bodyText": "Yes! Thank you. Awesome catch. Messed it up during cleanup.", "author": "bantonsson", "createdAt": "2020-11-30T14:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMDQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c2cc27611fb9e064040476be13937add388f5c7d", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java b/dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java\nindex 8869262cf2..1a3c384f32 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java\n\n@@ -70,7 +70,7 @@ public class GlobalTracer {\n       boolean installed = installationCallback.compareAndSet(null, callback);\n       // Check if the tracer was installed while we were doing this, and try to back out\n       if (installed && isTracerInstalled()) {\n-        installed = installationCallback.compareAndSet(callback, null);\n+        installed = !installationCallback.compareAndSet(callback, null);\n       }\n       return installed;\n     } else {\n"}}, {"oid": "c2cc27611fb9e064040476be13937add388f5c7d", "url": "https://github.com/DataDog/dd-trace-java/commit/c2cc27611fb9e064040476be13937add388f5c7d", "message": "Add quarkus logging smoke test", "committedDate": "2020-11-30T14:41:21Z", "type": "forcePushed"}, {"oid": "255917652ceb485f3b059844c92a2835a370ea89", "url": "https://github.com/DataDog/dd-trace-java/commit/255917652ceb485f3b059844c92a2835a370ea89", "message": "Add MDC log injection support for JBoss Log Manager", "committedDate": "2020-12-01T09:35:21Z", "type": "commit"}, {"oid": "de8866fbf1fde762b5790856895e480622138f83", "url": "https://github.com/DataDog/dd-trace-java/commit/de8866fbf1fde762b5790856895e480622138f83", "message": "Add forked tests to coverage report", "committedDate": "2020-12-01T09:35:21Z", "type": "commit"}, {"oid": "677c675a0554f250c26004cb55a7cb9550baa1dd", "url": "https://github.com/DataDog/dd-trace-java/commit/677c675a0554f250c26004cb55a7cb9550baa1dd", "message": "Delay LogContextScopeListener registration if necessary", "committedDate": "2020-12-01T09:35:21Z", "type": "commit"}, {"oid": "b34ccbc048a7087ea6d393dc1e6e319c470dcb82", "url": "https://github.com/DataDog/dd-trace-java/commit/b34ccbc048a7087ea6d393dc1e6e319c470dcb82", "message": "Add quarkus logging smoke test", "committedDate": "2020-12-01T09:35:21Z", "type": "commit"}, {"oid": "b34ccbc048a7087ea6d393dc1e6e319c470dcb82", "url": "https://github.com/DataDog/dd-trace-java/commit/b34ccbc048a7087ea6d393dc1e6e319c470dcb82", "message": "Add quarkus logging smoke test", "committedDate": "2020-12-01T09:35:21Z", "type": "forcePushed"}]}