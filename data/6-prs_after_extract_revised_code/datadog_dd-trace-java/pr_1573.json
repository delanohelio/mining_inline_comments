{"pr_number": 1573, "pr_title": "Enable propagation of trace start time and recording of e2e durations on message spans", "pr_createdAt": "2020-06-11T11:57:34Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1573", "timeline": [{"oid": "c49ab7f9df506c3ab2ccd54d09af7926f3270e30", "url": "https://github.com/DataDog/dd-trace-java/commit/c49ab7f9df506c3ab2ccd54d09af7926f3270e30", "message": "add span start time to baggage if it doesn't already exist, plus enabling config", "committedDate": "2020-06-11T09:09:51Z", "type": "commit"}, {"oid": "42dc073b9f7a1aecdf50457a6958951fa4f97575", "url": "https://github.com/DataDog/dd-trace-java/commit/42dc073b9f7a1aecdf50457a6958951fa4f97575", "message": "only need one class for KafkaDecorator", "committedDate": "2020-06-11T09:22:17Z", "type": "commit"}, {"oid": "a8dd779f3bfed5e9821706b6732a8cb830f47c12", "url": "https://github.com/DataDog/dd-trace-java/commit/a8dd779f3bfed5e9821706b6732a8cb830f47c12", "message": "add e2e duration to kafka consumer spans", "committedDate": "2020-06-11T12:11:33Z", "type": "commit"}, {"oid": "651017cbe6446d8f9b896561112076e77a152cd4", "url": "https://github.com/DataDog/dd-trace-java/commit/651017cbe6446d8f9b896561112076e77a152cd4", "message": "remove unnecessary rabbitmq decorator classes", "committedDate": "2020-06-11T12:11:33Z", "type": "commit"}, {"oid": "b8162821606018c9db07a1edb672dec24d58bd68", "url": "https://github.com/DataDog/dd-trace-java/commit/b8162821606018c9db07a1edb672dec24d58bd68", "message": "record duration since trace start in rabbit consumer spans", "committedDate": "2020-06-11T12:11:33Z", "type": "commit"}, {"oid": "b8162821606018c9db07a1edb672dec24d58bd68", "url": "https://github.com/DataDog/dd-trace-java/commit/b8162821606018c9db07a1edb672dec24d58bd68", "message": "record duration since trace start in rabbit consumer spans", "committedDate": "2020-06-11T12:11:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438879325", "bodyText": "Do we want this to be span_end - trace_start?", "author": "devinsba", "createdAt": "2020-06-11T15:37:03Z", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -69,11 +65,21 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(PARTITION, record.partition());\n       span.setTag(OFFSET, record.offset());\n       span.setTag(InstrumentationTags.DD_MEASURED, true);\n-      // don't record a duration if the message was sent from an old Kafka client\n+      long spanStartTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n+      if (endToEndDurationsEnabled) {\n+        String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n+        if (null != traceStartTime) {\n+          // not being defensive here because we own the lifecycle of this value\n+          span.setTag(\n+              RECORD_END_TO_END_DURATION_MS,", "originalCommit": "b8162821606018c9db07a1edb672dec24d58bd68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4MzkwMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438883902", "bodyText": "Yes, we do, thanks for querying this.", "author": "richardstartin", "createdAt": "2020-06-11T15:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NTExOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438885118", "bodyText": "I originally suggested the responsibility of setting the tag be done in a TraceInterceptor, so it could use the span end time and so they could be in control of it.  If we want to do it without requiring a TraceInterceptor, we might not have an option.", "author": "tylerbenson", "createdAt": "2020-06-11T15:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NTQwNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438885407", "bodyText": "One more. Given that this is a number, do they want this exposed as a metric instead of a tag?", "author": "devinsba", "createdAt": "2020-06-11T15:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxMTE3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438911172", "bodyText": "I think this issue is orthogonal to the TraceInterceptor interface, and it's hard to tell how that would help, but this was a good catch.\nRegarding tag vs metric, it doesn't make much difference, but I have an abandoned PR to move numeric tags to metrics for efficiency reasons which might be worth revisiting.", "author": "richardstartin", "createdAt": "2020-06-11T16:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNjUzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438926537", "bodyText": "From our conversations, I don't think we're ready to tackle adding a TraceInterceptor concept yet.  While I think we might eventually want a plug-in mechanism for out-of-tree additions, I think that's something requires careful design and is too large to be in scope for this particular change.\nIf at some point, we design a suitable TraceInterceptor, we can refactor this code to leverage that mechanism at a later time.  Although, in general, I'm still not keen on trace/span post-processing for core functionality because I think it obscures what's happening and likely harms performance as well.", "author": "dougqh", "createdAt": "2020-06-11T16:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "30d1dee2035fb9f8d45a2f41a68ba9fbc9daa641", "chunk": "diff --git a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java\nindex d99a997528..a8f9dd84bf 100644\n--- a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java\n+++ b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java\n\n@@ -65,23 +67,33 @@ public class KafkaDecorator extends ClientDecorator {\n       span.setTag(PARTITION, record.partition());\n       span.setTag(OFFSET, record.offset());\n       span.setTag(InstrumentationTags.DD_MEASURED, true);\n-      long spanStartTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n-      if (endToEndDurationsEnabled) {\n-        String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n-        if (null != traceStartTime) {\n-          // not being defensive here because we own the lifecycle of this value\n-          span.setTag(\n-              RECORD_END_TO_END_DURATION_MS,\n-              Math.max(0L, spanStartTime - Long.parseLong(traceStartTime)));\n-        }\n-      }\n       // TODO - do we really need both? This mechanism already adds a lot of... baggage.\n       // check to not record a duration if the message was sent from an old Kafka client\n       if (record.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {\n+        long consumeTime = NANOSECONDS.toMillis(span.getStartTime());\n         final long produceTime = record.timestamp();\n-        span.setTag(RECORD_QUEUE_TIME_MS, Math.max(0L, spanStartTime - produceTime));\n+        span.setTag(RECORD_QUEUE_TIME_MS, Math.max(0L, consumeTime - produceTime));\n+      }\n+    }\n+  }\n+\n+  public void finishConsumerSpan(final AgentSpan span) {\n+    long now = Clock.currentMicroTime();\n+    if (endToEndDurationsEnabled) {\n+      String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n+      if (null != traceStartTime) {\n+        // we want to use the span end time, so need its duration, which is set\n+        // on finish, but don't want to risk modifying the span after\n+        // finishing it, in case it gets published, causing possible\n+        // (functional) race conditions with the trace processing rules.\n+        // getting the current time is a reasonable compromise.\n+        // not being defensive here because we own the lifecycle of this value\n+        span.setTag(\n+            RECORD_END_TO_END_DURATION_MS,\n+            Math.max(0L, MICROSECONDS.toMillis(now) - Long.parseLong(traceStartTime)));\n       }\n     }\n+    span.finish(now);\n   }\n \n   public void onProduce(final AgentSpan span, final ProducerRecord record) {\n"}}, {"oid": "30d1dee2035fb9f8d45a2f41a68ba9fbc9daa641", "url": "https://github.com/DataDog/dd-trace-java/commit/30d1dee2035fb9f8d45a2f41a68ba9fbc9daa641", "message": "use span end time for e2e transaction duration", "committedDate": "2020-06-11T16:21:15Z", "type": "forcePushed"}, {"oid": "d545ff9420dad68d43728a4cdfb7694a250f012a", "url": "https://github.com/DataDog/dd-trace-java/commit/d545ff9420dad68d43728a4cdfb7694a250f012a", "message": "use span end time for e2e transaction duration", "committedDate": "2020-06-11T16:40:43Z", "type": "forcePushed"}, {"oid": "b62b4244fffcdece4b0f9506591729dc19a4bb78", "url": "https://github.com/DataDog/dd-trace-java/commit/b62b4244fffcdece4b0f9506591729dc19a4bb78", "message": "use span end time for e2e transaction duration", "committedDate": "2020-06-11T16:50:12Z", "type": "commit"}, {"oid": "b62b4244fffcdece4b0f9506591729dc19a4bb78", "url": "https://github.com/DataDog/dd-trace-java/commit/b62b4244fffcdece4b0f9506591729dc19a4bb78", "message": "use span end time for e2e transaction duration", "committedDate": "2020-06-11T16:50:12Z", "type": "forcePushed"}]}