{"pr_number": 1752, "pr_title": "Add a config to disable thread pool executor instrumentation for all wrapped tasks", "pr_createdAt": "2020-08-05T14:42:26Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1752", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzOTgyMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469339823", "bodyText": "Might it be possible/still correct to hoist this into a final boolean variable? Are rules updated on the fly?", "author": "richardstartin", "createdAt": "2020-08-12T15:20:33Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java", "diffHunk": "@@ -51,18 +52,24 @@ public ThreadPoolExecutorInstrumentation() {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-\n-      if (queue.isEmpty()) {\n-        try {\n-          queue.offer(new GenericRunnable());\n-          queue.clear(); // Remove the Runnable we just added.\n-        } catch (final ClassCastException | IllegalArgumentException e) {\n-          // These errors indicate the queue is fundamentally incompatible with wrapped runnables.\n-          // We must disable the executor instance to avoid passing wrapped runnables later.\n-          ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n-        } catch (final Exception e) {\n-          // Other errors might indicate the queue is not fully initialized.\n-          // We might want to disable for those too, but for now just ignore.\n+      // We disabable this way because this instrumentation is only used to call\n+      // disableExecutorForWrappedTasks. Therefore disabling the instrumentation explictly will not\n+      // work, for this instrumentation disabling for all executors is more of the intention\n+      if (!Config.get().isRuleEnabled(\"thread_pool_executor.wrapped_runnables\")) {", "originalCommit": "27a42b1520504c7aed3b0c656b674c2dc7e84196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDMxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469350311", "bodyText": "This is called on construction, so I'm less worried about the cost, but I'm not sure isRuleEnabled is the right method to call.", "author": "tylerbenson", "createdAt": "2020-08-12T15:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzOTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3NDA1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469374053", "bodyText": "I think you mean that isRuleEnabled was intended for the rule processors? I don't know that this isn't a tracing rule though so I think that method name could use some updating, this is enabling or disabling a flag for the tracer", "author": "devinsba", "createdAt": "2020-08-12T16:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzOTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODc0OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r470038749", "bodyText": "yeah, it was intended originally for tag interceptors and renamed when I introduced rule processors.  I guess you can leave it as is.  Not that big of deal.", "author": "tylerbenson", "createdAt": "2020-08-13T15:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzOTgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "ffc3b6bd43b28b77d4747920a1a2a1ea223287bb", "chunk": "diff --git a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\nindex bdbc403491..9f5cd49384 100644\n--- a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\n+++ b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\n\n@@ -52,10 +52,8 @@ public class ThreadPoolExecutorInstrumentation extends Instrumenter.Default {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-      // We disabable this way because this instrumentation is only used to call\n-      // disableExecutorForWrappedTasks. Therefore disabling the instrumentation explictly will not\n-      // work, for this instrumentation disabling for all executors is more of the intention\n-      if (!Config.get().isRuleEnabled(\"thread_pool_executor.wrapped_runnables\")) {\n+      if (!Config.getBooleanSettingFromEnvironment(\n+          \"integration.thread-pool-executor.enabled\", true)) {\n         ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n       } else {\n         if (queue.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MzUyNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469343527", "bodyText": "OK, so this checks compatibility. How can we be sure a consumer doesn't see the value? Could it cause an error in the consumer?", "author": "richardstartin", "createdAt": "2020-08-12T15:25:47Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java", "diffHunk": "@@ -51,18 +52,24 @@ public ThreadPoolExecutorInstrumentation() {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-\n-      if (queue.isEmpty()) {\n-        try {\n-          queue.offer(new GenericRunnable());\n-          queue.clear(); // Remove the Runnable we just added.\n-        } catch (final ClassCastException | IllegalArgumentException e) {\n-          // These errors indicate the queue is fundamentally incompatible with wrapped runnables.\n-          // We must disable the executor instance to avoid passing wrapped runnables later.\n-          ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n-        } catch (final Exception e) {\n-          // Other errors might indicate the queue is not fully initialized.\n-          // We might want to disable for those too, but for now just ignore.\n+      // We disabable this way because this instrumentation is only used to call\n+      // disableExecutorForWrappedTasks. Therefore disabling the instrumentation explictly will not\n+      // work, for this instrumentation disabling for all executors is more of the intention\n+      if (!Config.get().isRuleEnabled(\"thread_pool_executor.wrapped_runnables\")) {\n+        ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n+      } else {\n+        if (queue.isEmpty()) {\n+          try {\n+            queue.offer(new GenericRunnable());", "originalCommit": "27a42b1520504c7aed3b0c656b674c2dc7e84196", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MjM0Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469352347", "bodyText": "This is definitely a possible issue source if people do weird things. I couldn't find a better way to test than this.\nI'm not entirely convinced this check is necessary actually. I can't think of a case in which a lambda would get wrapped (passed through execute/submit/etc.), and not be a plain Runnable. Maybe a custom ThreadPoolExecutor impl which has a submit/execute that takes a concrete type that implements runnable. I'm not sure how bytebuddy would view such a method", "author": "devinsba", "createdAt": "2020-08-12T15:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MzUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM2MjgwNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469362804", "bodyText": "I wonder if it would work reliably because of erasure of the queue's generic type. Where are you expecting the CCE to happen? Custom queues?", "author": "richardstartin", "createdAt": "2020-08-12T15:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MzUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM2MzQ5Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469363496", "bodyText": "It might just result in generic type pollution and I suspect you couldn't detect incompatibility without being the consumer.", "author": "richardstartin", "createdAt": "2020-08-12T15:50:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MzUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM2NTQzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469365433", "bodyText": "To be clear this code was already here, but yeah I would expect custom Queues", "author": "devinsba", "createdAt": "2020-08-12T15:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MzUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3MDU4NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469370585", "bodyText": "I thought this was new, sorry. I still wonder if it's correct and has no dangerous side effects.", "author": "richardstartin", "createdAt": "2020-08-12T16:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MzUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "ffc3b6bd43b28b77d4747920a1a2a1ea223287bb", "chunk": "diff --git a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\nindex bdbc403491..9f5cd49384 100644\n--- a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\n+++ b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\n\n@@ -52,10 +52,8 @@ public class ThreadPoolExecutorInstrumentation extends Instrumenter.Default {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-      // We disabable this way because this instrumentation is only used to call\n-      // disableExecutorForWrappedTasks. Therefore disabling the instrumentation explictly will not\n-      // work, for this instrumentation disabling for all executors is more of the intention\n-      if (!Config.get().isRuleEnabled(\"thread_pool_executor.wrapped_runnables\")) {\n+      if (!Config.getBooleanSettingFromEnvironment(\n+          \"integration.thread-pool-executor.enabled\", true)) {\n         ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n       } else {\n         if (queue.isEmpty()) {\n"}}, {"oid": "6ed2a9bf2fd77bbac650a83691b4a51f66c5d2cb", "url": "https://github.com/DataDog/dd-trace-java/commit/6ed2a9bf2fd77bbac650a83691b4a51f66c5d2cb", "message": "Back to the same module", "committedDate": "2020-08-12T15:52:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2ODcwNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469468707", "bodyText": "disable", "author": "richardstartin", "createdAt": "2020-08-12T18:47:49Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java", "diffHunk": "@@ -51,18 +52,24 @@ public ThreadPoolExecutorInstrumentation() {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-\n-      if (queue.isEmpty()) {\n-        try {\n-          queue.offer(new GenericRunnable());\n-          queue.clear(); // Remove the Runnable we just added.\n-        } catch (final ClassCastException | IllegalArgumentException e) {\n-          // These errors indicate the queue is fundamentally incompatible with wrapped runnables.\n-          // We must disable the executor instance to avoid passing wrapped runnables later.\n-          ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n-        } catch (final Exception e) {\n-          // Other errors might indicate the queue is not fully initialized.\n-          // We might want to disable for those too, but for now just ignore.\n+      // We disabable this way because this instrumentation is only used to call", "originalCommit": "6ed2a9bf2fd77bbac650a83691b4a51f66c5d2cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffc3b6bd43b28b77d4747920a1a2a1ea223287bb", "chunk": "diff --git a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\nindex bdbc403491..9f5cd49384 100644\n--- a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\n+++ b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java\n\n@@ -52,10 +52,8 @@ public class ThreadPoolExecutorInstrumentation extends Instrumenter.Default {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-      // We disabable this way because this instrumentation is only used to call\n-      // disableExecutorForWrappedTasks. Therefore disabling the instrumentation explictly will not\n-      // work, for this instrumentation disabling for all executors is more of the intention\n-      if (!Config.get().isRuleEnabled(\"thread_pool_executor.wrapped_runnables\")) {\n+      if (!Config.getBooleanSettingFromEnvironment(\n+          \"integration.thread-pool-executor.enabled\", true)) {\n         ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n       } else {\n         if (queue.isEmpty()) {\n"}}, {"oid": "ffc3b6bd43b28b77d4747920a1a2a1ea223287bb", "url": "https://github.com/DataDog/dd-trace-java/commit/ffc3b6bd43b28b77d4747920a1a2a1ea223287bb", "message": "So that's odd...", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "a3ad83f1879252ca3ef5ec16b6e1ff26e205ee55", "url": "https://github.com/DataDog/dd-trace-java/commit/a3ad83f1879252ca3ef5ec16b6e1ff26e205ee55", "message": "Maybe", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "76987ec1d39fb7f7cbbc9d6f00e6a02ef1740d84", "url": "https://github.com/DataDog/dd-trace-java/commit/76987ec1d39fb7f7cbbc9d6f00e6a02ef1740d84", "message": "broken", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "62cb77705112948017f894483b0d67dbda0480be", "url": "https://github.com/DataDog/dd-trace-java/commit/62cb77705112948017f894483b0d67dbda0480be", "message": "Apparently ConfigUtil is global???", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "d9af1dff97628799ce150803ed469dc42a84f36d", "url": "https://github.com/DataDog/dd-trace-java/commit/d9af1dff97628799ce150803ed469dc42a84f36d", "message": "Now to fix the test", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "0432b6496c387f1df8271244966b299cd405802b", "url": "https://github.com/DataDog/dd-trace-java/commit/0432b6496c387f1df8271244966b299cd405802b", "message": "This test should be failing...........", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "6ae4927494387d386fdd01f9903d1b8f06aa0bcd", "url": "https://github.com/DataDog/dd-trace-java/commit/6ae4927494387d386fdd01f9903d1b8f06aa0bcd", "message": "I think I got it working......", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "40d885790aecaea35b7ef77aacf4c520ab79e111", "url": "https://github.com/DataDog/dd-trace-java/commit/40d885790aecaea35b7ef77aacf4c520ab79e111", "message": "I think this property name is better:", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "130c552a88a78b2fda183696ce0b1e7fd2b775ff", "url": "https://github.com/DataDog/dd-trace-java/commit/130c552a88a78b2fda183696ce0b1e7fd2b775ff", "message": "Add a comment", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "b4859d51b8e5e739f5f4035cae7b13f35da56c1f", "url": "https://github.com/DataDog/dd-trace-java/commit/b4859d51b8e5e739f5f4035cae7b13f35da56c1f", "message": "Address a couple comments", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "39814f24e9d988d57e89c6dfdd306820efd72f1c", "url": "https://github.com/DataDog/dd-trace-java/commit/39814f24e9d988d57e89c6dfdd306820efd72f1c", "message": "Back to the same module", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "3891beebf31d6042d2425ba8e9f62cc01efe960a", "url": "https://github.com/DataDog/dd-trace-java/commit/3891beebf31d6042d2425ba8e9f62cc01efe960a", "message": "Fix typos", "committedDate": "2020-08-13T16:34:27Z", "type": "commit"}, {"oid": "3891beebf31d6042d2425ba8e9f62cc01efe960a", "url": "https://github.com/DataDog/dd-trace-java/commit/3891beebf31d6042d2425ba8e9f62cc01efe960a", "message": "Fix typos", "committedDate": "2020-08-13T16:34:27Z", "type": "forcePushed"}]}