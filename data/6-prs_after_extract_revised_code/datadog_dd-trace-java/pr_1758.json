{"pr_number": 1758, "pr_title": "Add synchronization while adding dd tags to thread context(MDC) map", "pr_createdAt": "2020-08-07T05:24:23Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1758", "timeline": [{"oid": "673a7538ebe28ff8fd48c1f1f4e0bee4d657cf13", "url": "https://github.com/DataDog/dd-trace-java/commit/673a7538ebe28ff8fd48c1f1f4e0bee4d657cf13", "message": "test MDC getCopyOfContextMap", "committedDate": "2020-08-13T09:10:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyODA1MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1758#discussion_r469828051", "bodyText": "this check was already here : https://github.com/DataDog/dd-trace-java/pull/1758/files#diff-c0f391488f8a9b254794c9f452e9756fL43", "author": "lpriima", "createdAt": "2020-08-13T09:40:48Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java", "diffHunk": "@@ -71,9 +71,7 @@ private static Method findMethodWithNamesByOrder(\n \n   public static <T> ThreadLocal<T> create(T origThreadLocalValue)\n       throws InvocationTargetException, IllegalAccessException {\n-    if (origThreadLocalValue instanceof Map) {", "originalCommit": "673a7538ebe28ff8fd48c1f1f4e0bee4d657cf13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4eb830ae6324dbb319336c978ce73345ef196514", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java\nindex e5a4055c11..b7017f0d3c 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java\n\n@@ -71,6 +71,9 @@ public class ThreadLocalWithDDTagsInitValue<T> extends ThreadLocal<T> {\n \n   public static <T> ThreadLocal<T> create(T origThreadLocalValue)\n       throws InvocationTargetException, IllegalAccessException {\n+    // eg logback implementation uses synchronization on old instance of the map:\n+    // https://github.com/qos-ch/logback/blob/a6356170acfa6ce6e2383477bf80e6cae8a82d80/logback-classic/src/main/java/ch/qos/logback/classic/util/LogbackMDCAdapter.java#L77\n+    // here we try to follow this contract:\n     synchronized (origThreadLocalValue) {\n       putToMap(origThreadLocalValue, LogContextScopeListener.LOG_CONTEXT_DD_TAGS);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0Njc5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1758#discussion_r469846790", "bodyText": "\ud83d\udc4d\nMaybe a comment about the fact that this works since LogbackMDCAdapter is wrapping the Map in Collections.synchronizedMap.", "author": "bantonsson", "createdAt": "2020-08-13T10:14:03Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java", "diffHunk": "@@ -71,9 +71,7 @@ private static Method findMethodWithNamesByOrder(\n \n   public static <T> ThreadLocal<T> create(T origThreadLocalValue)\n       throws InvocationTargetException, IllegalAccessException {\n-    if (origThreadLocalValue instanceof Map) {\n-      ((Map) origThreadLocalValue).putAll(LogContextScopeListener.LOG_CONTEXT_DD_TAGS);\n-    } else {\n+    synchronized (origThreadLocalValue) {", "originalCommit": "673a7538ebe28ff8fd48c1f1f4e0bee4d657cf13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MTE0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1758#discussion_r470051141", "bodyText": "I agree that this warrants a nice comment block.", "author": "tylerbenson", "createdAt": "2020-08-13T15:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0Njc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "4eb830ae6324dbb319336c978ce73345ef196514", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java\nindex e5a4055c11..b7017f0d3c 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java\n\n@@ -71,6 +71,9 @@ public class ThreadLocalWithDDTagsInitValue<T> extends ThreadLocal<T> {\n \n   public static <T> ThreadLocal<T> create(T origThreadLocalValue)\n       throws InvocationTargetException, IllegalAccessException {\n+    // eg logback implementation uses synchronization on old instance of the map:\n+    // https://github.com/qos-ch/logback/blob/a6356170acfa6ce6e2383477bf80e6cae8a82d80/logback-classic/src/main/java/ch/qos/logback/classic/util/LogbackMDCAdapter.java#L77\n+    // here we try to follow this contract:\n     synchronized (origThreadLocalValue) {\n       putToMap(origThreadLocalValue, LogContextScopeListener.LOG_CONTEXT_DD_TAGS);\n     }\n"}}, {"oid": "131df187d06b415fee40ab6adbabe9b5c8877afe", "url": "https://github.com/DataDog/dd-trace-java/commit/131df187d06b415fee40ab6adbabe9b5c8877afe", "message": "test MDC getCopyOfContextMap", "committedDate": "2020-08-13T18:32:42Z", "type": "forcePushed"}, {"oid": "4eb830ae6324dbb319336c978ce73345ef196514", "url": "https://github.com/DataDog/dd-trace-java/commit/4eb830ae6324dbb319336c978ce73345ef196514", "message": "test MDC getCopyOfContextMap", "committedDate": "2020-08-14T04:28:01Z", "type": "commit"}, {"oid": "4eb830ae6324dbb319336c978ce73345ef196514", "url": "https://github.com/DataDog/dd-trace-java/commit/4eb830ae6324dbb319336c978ce73345ef196514", "message": "test MDC getCopyOfContextMap", "committedDate": "2020-08-14T04:28:01Z", "type": "forcePushed"}]}