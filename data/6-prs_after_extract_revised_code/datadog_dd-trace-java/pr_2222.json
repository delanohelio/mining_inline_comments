{"pr_number": 2222, "pr_title": "Extend Tracer to Instrument Quartz", "pr_createdAt": "2020-12-17T22:05:20Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2222", "timeline": [{"oid": "854351a84b5cc55bf8645af2b447a9a5da905177", "url": "https://github.com/DataDog/dd-trace-java/commit/854351a84b5cc55bf8645af2b447a9a5da905177", "message": "add initial quartz instrumentation", "committedDate": "2021-01-13T19:28:42Z", "type": "commit"}, {"oid": "0d4fc5f75702bbbb23371191eb0e162fde780d71", "url": "https://github.com/DataDog/dd-trace-java/commit/0d4fc5f75702bbbb23371191eb0e162fde780d71", "message": "remove relics from springscheduler copy", "committedDate": "2021-01-13T19:28:43Z", "type": "commit"}, {"oid": "a5b5265c7ab26a73cb7b30a6f0362602a0d89da0", "url": "https://github.com/DataDog/dd-trace-java/commit/a5b5265c7ab26a73cb7b30a6f0362602a0d89da0", "message": "add muzzle reference", "committedDate": "2021-01-13T19:28:43Z", "type": "commit"}, {"oid": "8965f56ab8f208cfa2eee656864bfcbab18cad43", "url": "https://github.com/DataDog/dd-trace-java/commit/8965f56ab8f208cfa2eee656864bfcbab18cad43", "message": "wrap up quartz instrumentation", "committedDate": "2021-01-13T19:28:43Z", "type": "commit"}, {"oid": "bac432716050a9258621be8a28f5ec7e557c6211", "url": "https://github.com/DataDog/dd-trace-java/commit/bac432716050a9258621be8a28f5ec7e557c6211", "message": "[APMJAVA-468] added unit tests for Quartz instrumentation", "committedDate": "2021-01-13T19:28:43Z", "type": "commit"}, {"oid": "cb5cb624126645c35a2b347854e252ccc473289c", "url": "https://github.com/DataDog/dd-trace-java/commit/cb5cb624126645c35a2b347854e252ccc473289c", "message": "[JAVAAPM-468] Refactored Quartz instrumentation to remove unnecessary tags", "committedDate": "2021-01-13T19:28:43Z", "type": "commit"}, {"oid": "cb5cb624126645c35a2b347854e252ccc473289c", "url": "https://github.com/DataDog/dd-trace-java/commit/cb5cb624126645c35a2b347854e252ccc473289c", "message": "[JAVAAPM-468] Refactored Quartz instrumentation to remove unnecessary tags", "committedDate": "2021-01-13T19:28:43Z", "type": "forcePushed"}, {"oid": "347f52e0fea1d7bd9889cc5733c3928cec4a77b1", "url": "https://github.com/DataDog/dd-trace-java/commit/347f52e0fea1d7bd9889cc5733c3928cec4a77b1", "message": "[JAVAAPM-468] Rollback wrong changes", "committedDate": "2021-01-13T21:34:56Z", "type": "commit"}, {"oid": "27eff794597a3db9b03763e043dcbbd675b74741", "url": "https://github.com/DataDog/dd-trace-java/commit/27eff794597a3db9b03763e043dcbbd675b74741", "message": "[JAVAAPM-468] change Quartz to compile only", "committedDate": "2021-01-13T21:56:14Z", "type": "commit"}, {"oid": "6aadf6cceef0f0980cabd58dc87921cec5a5f3e4", "url": "https://github.com/DataDog/dd-trace-java/commit/6aadf6cceef0f0980cabd58dc87921cec5a5f3e4", "message": "Change Quartz module name to reflect lowest version", "committedDate": "2021-01-13T23:31:51Z", "type": "commit"}, {"oid": "6660ae2ae955a754f29e7862a22d312fbb08b8d8", "url": "https://github.com/DataDog/dd-trace-java/commit/6660ae2ae955a754f29e7862a22d312fbb08b8d8", "message": "Fixed codenarc errors in ci", "committedDate": "2021-01-14T00:41:17Z", "type": "commit"}, {"oid": "47c19e86992b6487b83812aa5fc9fb22c4001439", "url": "https://github.com/DataDog/dd-trace-java/commit/47c19e86992b6487b83812aa5fc9fb22c4001439", "message": "Fixed quartz directory naming, added spotlessApply", "committedDate": "2021-01-14T01:44:20Z", "type": "commit"}, {"oid": "c8c0403bafb6a75ff92bcb385f78b2a4fe37444c", "url": "https://github.com/DataDog/dd-trace-java/commit/c8c0403bafb6a75ff92bcb385f78b2a4fe37444c", "message": "Remove service name verification", "committedDate": "2021-01-14T03:22:13Z", "type": "commit"}, {"oid": "457507bb1666402cde1f235340edff0690d018b4", "url": "https://github.com/DataDog/dd-trace-java/commit/457507bb1666402cde1f235340edff0690d018b4", "message": "removed unnecessary tags", "committedDate": "2021-01-14T03:34:41Z", "type": "commit"}, {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587", "url": "https://github.com/DataDog/dd-trace-java/commit/fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587", "message": "increased test limit for string table", "committedDate": "2021-01-14T16:11:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4ODk4Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r557588983", "bodyText": "Are there common ways to use quartz that would bypass this mechanism? (For example, is a job still created if quartz is configured via xml.)", "author": "tylerbenson", "createdAt": "2021-01-14T18:03:31Z", "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.DECORATE;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.JOB_INSTANCE;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.*;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.quartz.JobExecutionContext;\n+\n+@AutoService(Instrumenter.class)\n+public final class QuartzSchedulingInstrumentation extends Instrumenter.Tracing {\n+\n+  public QuartzSchedulingInstrumentation() {\n+    super(\"quartz\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.quartz.Job\"));", "originalCommit": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcxODEyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r557718122", "bodyText": "I think the way jobs are specified is pretty consistent so it is unlikely that there is an exception. I will also add a test for this to verify it against XML configs, to be extra careful.", "author": "kevinfwl", "createdAt": "2021-01-14T21:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4ODk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a519dd07d0761ca50caf9e5c446d511045522219", "chunk": "diff --git a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java\nindex ca9c824125..5874fbd398 100644\n--- a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java\n+++ b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java\n\n@@ -4,7 +4,7 @@ import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.im\n import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n import static datadog.trace.instrumentation.quartz.QuartzDecorator.DECORATE;\n-import static datadog.trace.instrumentation.quartz.QuartzDecorator.JOB_INSTANCE;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.SCHEDULED_CALL;\n import static java.util.Collections.singletonMap;\n import static net.bytebuddy.matcher.ElementMatchers.*;\n import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n"}}, {"oid": "80864f151c126c27492a7208a3cf0059934fca31", "url": "https://github.com/DataDog/dd-trace-java/commit/80864f151c126c27492a7208a3cf0059934fca31", "message": "added test for XML config, fixed latestDepTest version", "committedDate": "2021-01-15T03:33:13Z", "type": "commit"}, {"oid": "a840e2488ee5d82b5a4dcd6e8749995daa0a265a", "url": "https://github.com/DataDog/dd-trace-java/commit/a840e2488ee5d82b5a4dcd6e8749995daa0a265a", "message": "added test for propagation, increased time interval between jobs", "committedDate": "2021-01-15T18:31:37Z", "type": "commit"}, {"oid": "ba9b493b3942f649c361d7c0487abe79252dd84b", "url": "https://github.com/DataDog/dd-trace-java/commit/ba9b493b3942f649c361d7c0487abe79252dd84b", "message": "add job scheduling to run under trace", "committedDate": "2021-01-19T17:56:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0NzQ1OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561047458", "bodyText": "@andrewsouthard1 do you have opinions on what the operation name for this should be?  I'm thinking quartz.execute, job.execute, or scheduled.execute might be better.", "author": "tylerbenson", "createdAt": "2021-01-20T15:20:51Z", "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.SchedulerException;\n+\n+@Slf4j\n+public class QuartzDecorator extends BaseDecorator {\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"job.instance\");", "originalCommit": "ba9b493b3942f649c361d7c0487abe79252dd84b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE1MjIxOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561152218", "bodyText": "What does spring scheduling do today or other schedulers? If we have a consistency my thought is we stick to that.", "author": "andrewsouthard1", "createdAt": "2021-01-20T17:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0NzQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE2NTY5Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561165696", "bodyText": "Looks like we use scheduled.call in spring scheduling, so perhaps replace with that?", "author": "tylerbenson", "createdAt": "2021-01-20T18:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0NzQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84", "chunk": "diff --git a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\nindex 9682938411..1003525ca6 100644\n--- a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\n+++ b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\n\n@@ -18,7 +18,7 @@ import org.quartz.SchedulerException;\n \n @Slf4j\n public class QuartzDecorator extends BaseDecorator {\n-  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"job.instance\");\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"scheduled.call\");\n   public static final QuartzDecorator DECORATE = new QuartzDecorator();\n \n   private QuartzDecorator() {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0ODIzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561048233", "bodyText": "Do we need to associate it with a method name too or will it always be just execute?", "author": "tylerbenson", "createdAt": "2021-01-20T15:21:53Z", "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.SchedulerException;\n+\n+@Slf4j\n+public class QuartzDecorator extends BaseDecorator {\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"job.instance\");\n+  public static final QuartzDecorator DECORATE = new QuartzDecorator();\n+\n+  private QuartzDecorator() {}\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"quartz\"};\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"quartz\";\n+  }\n+\n+  public AgentSpan onExecute(final AgentSpan span, JobExecutionContext context) {\n+    if (context != null) {\n+      span.setTag(DDTags.RESOURCE_NAME, context.getJobInstance().getClass()).toString();", "originalCommit": "ba9b493b3942f649c361d7c0487abe79252dd84b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA2NzEzMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561067130", "bodyText": "I believe for Quartz, it will always be execute since all Job classes have to implement the function.", "author": "kevinfwl", "createdAt": "2021-01-20T15:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0ODIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84", "chunk": "diff --git a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\nindex 9682938411..1003525ca6 100644\n--- a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\n+++ b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\n\n@@ -18,7 +18,7 @@ import org.quartz.SchedulerException;\n \n @Slf4j\n public class QuartzDecorator extends BaseDecorator {\n-  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"job.instance\");\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"scheduled.call\");\n   public static final QuartzDecorator DECORATE = new QuartzDecorator();\n \n   private QuartzDecorator() {}\n"}}, {"oid": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84", "url": "https://github.com/DataDog/dd-trace-java/commit/73e07f603a8e3e88c2debf39e366d3e9ae0d5d84", "message": "Fixed issues regarding PR", "committedDate": "2021-01-20T18:47:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIwOTYzNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561209635", "bodyText": "Update the field name too please...", "author": "tylerbenson", "createdAt": "2021-01-20T19:12:25Z", "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n @Slf4j\n public class QuartzDecorator extends BaseDecorator {\n-  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"job.instance\");\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"scheduled.call\");", "originalCommit": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a519dd07d0761ca50caf9e5c446d511045522219", "chunk": "diff --git a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\nindex 1003525ca6..06f4ae08fc 100644\n--- a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\n+++ b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\n\n@@ -18,7 +18,7 @@ import org.quartz.SchedulerException;\n \n @Slf4j\n public class QuartzDecorator extends BaseDecorator {\n-  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"scheduled.call\");\n+  public static final CharSequence SCHEDULED_CALL = UTF8BytesString.createConstant(\"scheduled.call\");\n   public static final QuartzDecorator DECORATE = new QuartzDecorator();\n \n   private QuartzDecorator() {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIxMDI1NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561210255", "bodyText": "Do you think this will be useful to users?", "author": "tylerbenson", "createdAt": "2021-01-20T19:13:37Z", "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.SchedulerException;\n+\n+@Slf4j\n+public class QuartzDecorator extends BaseDecorator {\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"scheduled.call\");\n+  public static final QuartzDecorator DECORATE = new QuartzDecorator();\n+\n+  private QuartzDecorator() {}\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"quartz\"};\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"quartz\";\n+  }\n+\n+  public AgentSpan onExecute(final AgentSpan span, JobExecutionContext context) {\n+    if (context != null) {\n+      span.setTag(DDTags.RESOURCE_NAME, context.getJobInstance().getClass()).toString();\n+      try {\n+        span.setTag(QUARTZ_SCHEDULER, context.getScheduler().getSchedulerName());", "originalCommit": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIyMDA1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561220056", "bodyText": "I was thinking it might help uniquely identify a scheduler if multiple scheduler instances are running. On second thought, it shouldn't be too important.", "author": "kevinfwl", "createdAt": "2021-01-20T19:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIxMDI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a519dd07d0761ca50caf9e5c446d511045522219", "chunk": "diff --git a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\nindex 1003525ca6..06f4ae08fc 100644\n--- a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\n+++ b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java\n\n@@ -18,7 +18,7 @@ import org.quartz.SchedulerException;\n \n @Slf4j\n public class QuartzDecorator extends BaseDecorator {\n-  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"scheduled.call\");\n+  public static final CharSequence SCHEDULED_CALL = UTF8BytesString.createConstant(\"scheduled.call\");\n   public static final QuartzDecorator DECORATE = new QuartzDecorator();\n \n   private QuartzDecorator() {}\n"}}, {"oid": "a519dd07d0761ca50caf9e5c446d511045522219", "url": "https://github.com/DataDog/dd-trace-java/commit/a519dd07d0761ca50caf9e5c446d511045522219", "message": "Fixed PR comments", "committedDate": "2021-01-20T19:31:36Z", "type": "commit"}, {"oid": "dc41aef62c99f47ce201aeb71bf101ded974bd50", "url": "https://github.com/DataDog/dd-trace-java/commit/dc41aef62c99f47ce201aeb71bf101ded974bd50", "message": "applied spotlessApply", "committedDate": "2021-01-21T01:54:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk3OTc4Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561979787", "bodyText": "I'm not sure this comment is accurate.", "author": "tylerbenson", "createdAt": "2021-01-21T15:38:51Z", "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.DECORATE;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.SCHEDULED_CALL;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.*;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.quartz.JobExecutionContext;\n+\n+@AutoService(Instrumenter.class)\n+public final class QuartzSchedulingInstrumentation extends Instrumenter.Tracing {\n+\n+  public QuartzSchedulingInstrumentation() {\n+    super(\"quartz\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.quartz.Job\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"execute\"))\n+            .and(takesArgument(0, named(\"org.quartz.JobExecutionContext\"))),\n+        QuartzSchedulingInstrumentation.class.getName() + \"$QuartzSchedulingAdvice\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".QuartzDecorator\"};\n+  }\n+\n+  public static class QuartzSchedulingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static AgentScope enter(@Advice.Argument(0) JobExecutionContext context) {\n+      //      ignore active span", "originalCommit": "dc41aef62c99f47ce201aeb71bf101ded974bd50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk4NTYyOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561985629", "bodyText": "Will remove the comment", "author": "kevinfwl", "createdAt": "2021-01-21T15:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk3OTc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "581422e1986d47ce3bedb99fbfd22b1b8c452d9b", "chunk": "diff --git a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java\nindex 5874fbd398..a70e18b1fc 100644\n--- a/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java\n+++ b/dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java\n\n@@ -50,7 +50,6 @@ public final class QuartzSchedulingInstrumentation extends Instrumenter.Tracing\n   public static class QuartzSchedulingAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static AgentScope enter(@Advice.Argument(0) JobExecutionContext context) {\n-      //      ignore active span\n       final AgentSpan span = startSpan(SCHEDULED_CALL);\n       DECORATE.afterStart(span);\n       DECORATE.onExecute(span, context);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk4MDgzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561980832", "bodyText": "I think these should be removed.", "author": "tylerbenson", "createdAt": "2021-01-21T15:40:06Z", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/InstrumentationTags.java", "diffHunk": "@@ -69,6 +69,14 @@\n   public static final String EVENT = \"event\";\n   public static final String MESSAGE = \"message\";\n   public static final String HANDLER_TYPE = \"handler.type\";\n+  public static final String QUARTZ_JOB_DETAIL = \"quartz.job.detail\";\n+  public static final String QUARTZ_JOB_NAME = \"quartz.job.name\";\n+  public static final String QUARTZ_JOB_GROUP = \"quartz.job.group\";\n+  public static final String QUARTZ_SCHEDULER_ACTUAL_TIME = \"quartz.time.actualFireTime\";\n+  public static final String QUARTZ_SCHEDULER_FIRED_TIME = \"quartz.time.scheduledFireTime\";\n+  public static final String QUARTZ_SCHEDULER = \"quartz.scheduler\";", "originalCommit": "dc41aef62c99f47ce201aeb71bf101ded974bd50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "581422e1986d47ce3bedb99fbfd22b1b8c452d9b", "chunk": "diff --git a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/InstrumentationTags.java b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/InstrumentationTags.java\nindex e3f7371a5a..971758090b 100644\n--- a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/InstrumentationTags.java\n+++ b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/InstrumentationTags.java\n\n@@ -69,12 +69,8 @@ public class InstrumentationTags {\n   public static final String EVENT = \"event\";\n   public static final String MESSAGE = \"message\";\n   public static final String HANDLER_TYPE = \"handler.type\";\n-  public static final String QUARTZ_JOB_DETAIL = \"quartz.job.detail\";\n   public static final String QUARTZ_JOB_NAME = \"quartz.job.name\";\n   public static final String QUARTZ_JOB_GROUP = \"quartz.job.group\";\n-  public static final String QUARTZ_SCHEDULER_ACTUAL_TIME = \"quartz.time.actualFireTime\";\n-  public static final String QUARTZ_SCHEDULER_FIRED_TIME = \"quartz.time.scheduledFireTime\";\n-  public static final String QUARTZ_SCHEDULER = \"quartz.scheduler\";\n   public static final String QUARTZ_TRIGGER_NAME = \"quartz.trigger.name\";\n   public static final String QUARTZ_TRIGGER_GROUP = \"quartz.trigger.group\";\n   public static final String REQUEST_PREDICATE = \"request.predicate\";\n"}}, {"oid": "581422e1986d47ce3bedb99fbfd22b1b8c452d9b", "url": "https://github.com/DataDog/dd-trace-java/commit/581422e1986d47ce3bedb99fbfd22b1b8c452d9b", "message": "Remove unnecessary comments", "committedDate": "2021-01-21T15:46:59Z", "type": "commit"}, {"oid": "284d8ca03832e937e86cbd2d0b4faf295a23e3a4", "url": "https://github.com/DataDog/dd-trace-java/commit/284d8ca03832e937e86cbd2d0b4faf295a23e3a4", "message": "ensure a new trace is created per job", "committedDate": "2021-01-22T04:46:02Z", "type": "commit"}, {"oid": "2dfbb719fbe10b9cd889eb7222ff8b65a56a0f63", "url": "https://github.com/DataDog/dd-trace-java/commit/2dfbb719fbe10b9cd889eb7222ff8b65a56a0f63", "message": "fixed spotlessapply", "committedDate": "2021-01-26T01:50:27Z", "type": "commit"}]}