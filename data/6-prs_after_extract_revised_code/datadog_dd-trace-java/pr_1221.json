{"pr_number": 1221, "pr_title": "Add TraceProcessor and move some existing functionality to rules", "pr_createdAt": "2020-02-13T22:18:31Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1221", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MTY2Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r379151663", "bodyText": "Note, minor risk of a breaking change here in exchange for better consistency.", "author": "tylerbenson", "createdAt": "2020-02-13T22:19:46Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -86,11 +87,11 @@ private String normalizePath(final String path) {\n     return PATH_MIXED_ALPHANUMERICS.matcher(path).replaceAll(\"?\");\n   }\n \n-  private String addMethodIfAvailable(final DDSpanContext context, String path) {\n+  private String addMethodIfAvailable(final Map<String, String> meta, String path) {\n     // if the verb (GET, POST ...) is present, add it\n-    final String verb = (String) context.getTags().get(Tags.HTTP_METHOD.getKey());\n+    final String verb = meta.get(Tags.HTTP_METHOD.getKey());\n     if (verb != null && !verb.isEmpty()) {\n-      path = verb + \" \" + path;\n+      path = verb.toUpperCase() + \" \" + path;", "originalCommit": "db8be071033d29562ba02b8b6efd041f0478a643", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3a0b6d72a295494bf16f155f143aa4d08c46d51", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\nindex 32280c351e..6b433e24dc 100644\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\n+++ b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\n\n@@ -87,11 +88,11 @@ public class URLAsResourceNameRule implements TraceProcessor.Rule {\n     return PATH_MIXED_ALPHANUMERICS.matcher(path).replaceAll(\"?\");\n   }\n \n-  private String addMethodIfAvailable(final Map<String, String> meta, String path) {\n+  private String addMethodIfAvailable(final Map<String, Object> meta, String path) {\n     // if the verb (GET, POST ...) is present, add it\n-    final String verb = meta.get(Tags.HTTP_METHOD.getKey());\n-    if (verb != null && !verb.isEmpty()) {\n-      path = verb.toUpperCase() + \" \" + path;\n+    final Object verb = meta.get(Tags.HTTP_METHOD.getKey());\n+    if (verb != null && !verb.toString().isEmpty()) {\n+      path = verb.toString().toUpperCase() + \" \" + path;\n     }\n     return path;\n   }\n"}}, {"oid": "17c25f8f032327d6f474a486490eb82a559a7ea3", "url": "https://github.com/DataDog/dd-trace-java/commit/17c25f8f032327d6f474a486490eb82a559a7ea3", "message": "Stop setting error tag and update tests.", "committedDate": "2020-03-19T21:57:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjEwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395812106", "bodyText": "This change seems unrelated; why are we making it?", "author": "dougqh", "createdAt": "2020-03-20T18:14:03Z", "path": "dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java", "diffHunk": "@@ -29,7 +29,7 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    final AgentSpan span = startSpan(\"aws.command\");", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMTA4Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402601083", "bodyText": "This is related to the removal of OperationDecorator.", "author": "tylerbenson", "createdAt": "2020-04-02T21:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java b/dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java\nindex 5c8f208d31..bdb4ca44d6 100644\n--- a/dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java\n+++ b/dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java\n\n@@ -29,7 +29,7 @@ public class TracingRequestHandler extends RequestHandler2 {\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    final AgentSpan span = startSpan(\"aws.http\");\n+    final AgentSpan span = startSpan(\"aws.command\");\n     decorate.afterStart(span);\n     decorate.onRequest(span, request);\n     request.addHandlerContext(SCOPE_CONTEXT_KEY, activateSpan(span, true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNDMyOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395814329", "bodyText": "I'm debating whether placing the list of Rules in the TraceProcessor is the right choice.\nAn alternative would be to associate a set of rules with a span as construction, but to defer execution until the end.\nI'm not sure if that's better or not in this case -- just suggesting an alternative.", "author": "dougqh", "createdAt": "2020-03-20T18:18:17Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMzA5Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402603096", "bodyText": "I see how that could work, but not sure if it would offer significant benefit.", "author": "tylerbenson", "createdAt": "2020-04-02T21:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNDMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\nindex 3981ddd4ee..8e1585fb93 100644\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\n+++ b/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\n\n@@ -2,11 +2,6 @@ package datadog.trace.common.processor;\n \n import datadog.opentracing.DDSpan;\n import datadog.trace.api.Config;\n-import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n-import datadog.trace.common.processor.rule.DBStatementRule;\n-import datadog.trace.common.processor.rule.ErrorRule;\n-import datadog.trace.common.processor.rule.ResourceNameRule;\n-import datadog.trace.common.processor.rule.SpanTypeRule;\n import datadog.trace.common.processor.rule.Status404Rule;\n import datadog.trace.common.processor.rule.Status5XXRule;\n import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNDk0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395814943", "bodyText": "The List + the loop in onTraceComplete effectively comprise a CompositeRule.\nI think it might be better to explicit introduce a CompositeRule class.", "author": "dougqh", "createdAt": "2020-03-20T18:19:33Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =\n+      new Rule[] {", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\nindex 3981ddd4ee..8e1585fb93 100644\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\n+++ b/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\n\n@@ -2,11 +2,6 @@ package datadog.trace.common.processor;\n \n import datadog.opentracing.DDSpan;\n import datadog.trace.api.Config;\n-import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n-import datadog.trace.common.processor.rule.DBStatementRule;\n-import datadog.trace.common.processor.rule.ErrorRule;\n-import datadog.trace.common.processor.rule.ResourceNameRule;\n-import datadog.trace.common.processor.rule.SpanTypeRule;\n import datadog.trace.common.processor.rule.Status404Rule;\n import datadog.trace.common.processor.rule.Status5XXRule;\n import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzU0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395817548", "bodyText": "Mongo special case here for Mongo strikes me as problematic from both an encapsulation & maintenance standpoint.  This really makes me think that we might be better off attaching rules as each span construction -- or at least having an obvious way to override with a integration specific substitute rule.", "author": "dougqh", "createdAt": "2020-03-20T18:24:32Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n+ * after obfuscation.\n+ */\n+public class DBStatementRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"DBStatementAsResourceName\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n+      // Special case: Mongo", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNTM5MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402605391", "bodyText": "This was a carry over from DBStatementAsResourceName that I didn't want to unwind.", "author": "tylerbenson", "createdAt": "2020-04-02T21:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNzYyNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405117625", "bodyText": "Understandable, but if we're going to undertake a new design, I'd like the new design to have the ability to unwind that mess.  Right now, it isn't clear to me that there's a way to do so.", "author": "dougqh", "createdAt": "2020-04-07T21:15:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java\ndeleted file mode 100644\nindex b4d751591d..0000000000\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java\n+++ /dev/null\n\n@@ -1,37 +0,0 @@\n-package datadog.trace.common.processor.rule;\n-\n-import datadog.opentracing.DDSpan;\n-import datadog.trace.common.processor.TraceProcessor;\n-import io.opentracing.tag.Tags;\n-import java.util.Collection;\n-import java.util.Map;\n-\n-/**\n- * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n- * after obfuscation.\n- */\n-public class DBStatementRule implements TraceProcessor.Rule {\n-  @Override\n-  public String[] aliases() {\n-    return new String[] {\"DBStatementAsResourceName\"};\n-  }\n-\n-  @Override\n-  public void processSpan(\n-      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n-    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n-      // Special case: Mongo\n-      // Skip the decorators\n-      if (tags.containsKey(Tags.COMPONENT.getKey())\n-          && \"java-mongo\".equals(tags.get(Tags.COMPONENT.getKey()))) {\n-        return;\n-      }\n-\n-      final String statement = tags.get(Tags.DB_STATEMENT.getKey()).toString();\n-      if (!statement.isEmpty()) {\n-        span.setResourceName(statement);\n-      }\n-      span.setTag(Tags.DB_STATEMENT.getKey(), (String) null); // Remove the tag\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxODY1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395818653", "bodyText": "The instanceof checks here strike me as a bit messy as well.\nI've wondered for awhile whether we should have a Tags class rather than using Map<String, Object>.\nThe error prone checks here -- lead to think the answer is yes.", "author": "dougqh", "createdAt": "2020-03-20T18:26:41Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts error tag to field */\n+public class ErrorRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"ErrorFlag\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.ERROR.getKey())) {", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNjY0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402606645", "bodyText": "I'm not opposed to this, but prob not in this PR.", "author": "tylerbenson", "createdAt": "2020-04-02T21:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxODY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMDAxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405120014", "bodyText": "Okay", "author": "dougqh", "createdAt": "2020-04-07T21:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxODY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java\ndeleted file mode 100644\nindex 49c0b3e112..0000000000\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java\n+++ /dev/null\n\n@@ -1,29 +0,0 @@\n-package datadog.trace.common.processor.rule;\n-\n-import datadog.opentracing.DDSpan;\n-import datadog.trace.common.processor.TraceProcessor;\n-import io.opentracing.tag.Tags;\n-import java.util.Collection;\n-import java.util.Map;\n-\n-/** Converts error tag to field */\n-public class ErrorRule implements TraceProcessor.Rule {\n-  @Override\n-  public String[] aliases() {\n-    return new String[] {\"ErrorFlag\"};\n-  }\n-\n-  @Override\n-  public void processSpan(\n-      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n-    if (tags.containsKey(Tags.ERROR.getKey())) {\n-      final Object value = tags.get(Tags.ERROR.getKey());\n-      if (value instanceof Boolean) {\n-        span.setError((Boolean) value);\n-      } else {\n-        span.setError(Boolean.parseBoolean(value.toString()));\n-      }\n-      span.setTag(Tags.ERROR, null); // Remove the tag\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxOTI3OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395819278", "bodyText": "containsKey followed by get is redundant -- unless we're expecting maps with null values.", "author": "dougqh", "createdAt": "2020-03-20T18:27:58Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts span type tag to field */\n+public class SpanTypeRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"SpanTypeDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(DDTags.SPAN_TYPE)) {", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java\ndeleted file mode 100644\nindex 5b1f409f84..0000000000\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package datadog.trace.common.processor.rule;\n-\n-import datadog.opentracing.DDSpan;\n-import datadog.trace.api.DDTags;\n-import datadog.trace.common.processor.TraceProcessor;\n-import java.util.Collection;\n-import java.util.Map;\n-\n-/** Converts span type tag to field */\n-public class SpanTypeRule implements TraceProcessor.Rule {\n-  @Override\n-  public String[] aliases() {\n-    return new String[] {\"SpanTypeDecorator\"};\n-  }\n-\n-  @Override\n-  public void processSpan(\n-      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n-    if (tags.containsKey(DDTags.SPAN_TYPE)) {\n-      span.setSpanType(tags.get(DDTags.SPAN_TYPE).toString());\n-      span.setTag(DDTags.SPAN_TYPE, (String) null); // Remove the tag\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxOTQ4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395819480", "bodyText": "I think I understand what is happening here, but this looks odd and error prone.", "author": "dougqh", "createdAt": "2020-03-20T18:28:22Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts span type tag to field */\n+public class SpanTypeRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"SpanTypeDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(DDTags.SPAN_TYPE)) {\n+      span.setSpanType(tags.get(DDTags.SPAN_TYPE).toString());", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java\ndeleted file mode 100644\nindex 5b1f409f84..0000000000\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package datadog.trace.common.processor.rule;\n-\n-import datadog.opentracing.DDSpan;\n-import datadog.trace.api.DDTags;\n-import datadog.trace.common.processor.TraceProcessor;\n-import java.util.Collection;\n-import java.util.Map;\n-\n-/** Converts span type tag to field */\n-public class SpanTypeRule implements TraceProcessor.Rule {\n-  @Override\n-  public String[] aliases() {\n-    return new String[] {\"SpanTypeDecorator\"};\n-  }\n-\n-  @Override\n-  public void processSpan(\n-      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n-    if (tags.containsKey(DDTags.SPAN_TYPE)) {\n-      span.setSpanType(tags.get(DDTags.SPAN_TYPE).toString());\n-      span.setTag(DDTags.SPAN_TYPE, (String) null); // Remove the tag\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTA3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395821075", "bodyText": "Not handling a NumberFormatException from parseInt.", "author": "dougqh", "createdAt": "2020-03-20T18:31:39Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Mark all 5xx status codes as an error */\n+public class Status5XXRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"Status5XXDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n+      final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n+      final int responseCode =\n+          value instanceof Integer ? (int) value : Integer.parseInt(value.toString());", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b3a0b6d72a295494bf16f155f143aa4d08c46d51", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java\nindex 107a58b2c9..507920b664 100644\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java\n+++ b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java\n\n@@ -18,9 +18,14 @@ public class Status5XXRule implements TraceProcessor.Rule {\n       final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n     if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n       final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n-      final int responseCode =\n-          value instanceof Integer ? (int) value : Integer.parseInt(value.toString());\n-      span.setError(500 <= responseCode && responseCode < 600);\n+      try {\n+        final int responseCode =\n+            value instanceof Integer ? (int) value : Integer.parseInt(value.toString());\n+        span.setError(500 <= responseCode && responseCode < 600);\n+      } catch (final NumberFormatException ex) {\n+        // If using Tags.HTTP_STATUS, value should always be an Integer,\n+        // but lets catch NumberFormatException just to be safe.\n+      }\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTQwMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395821401", "bodyText": "This logic was repeated elsewhere.  I think we should find a better to encapsulate it.", "author": "dougqh", "createdAt": "2020-03-20T18:32:18Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -1,38 +1,40 @@\n-package datadog.opentracing.decorators;\n+package datadog.trace.common.processor.rule;\n \n+import datadog.opentracing.DDSpan;\n import datadog.opentracing.DDSpanContext;\n-import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.regex.Pattern;\n \n-public class URLAsResourceName extends AbstractDecorator {\n+public class URLAsResourceNameRule implements TraceProcessor.Rule {\n \n   // Matches any path segments with numbers in them. (exception for versioning: \"/v1/\")\n   public static final Pattern PATH_MIXED_ALPHANUMERICS =\n       Pattern.compile(\"(?<=/)(?![vV]\\\\d{1,2}/)(?:[^\\\\/\\\\d\\\\?]*[\\\\d]+[^\\\\/\\\\?]*)\");\n \n-  public URLAsResourceName() {\n-    super();\n-    setMatchingTag(Tags.HTTP_URL.getKey());\n-    setReplacementTag(DDTags.RESOURCE_NAME);\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"URLAsResourceName\"};\n   }\n \n   @Override\n-  public boolean shouldSetTag(final DDSpanContext context, final String tag, final Object value) {\n-    final String statusCode = String.valueOf(context.getTags().get(Tags.HTTP_STATUS.getKey()));\n-    // do nothing if the status code is already set and equals to 404.\n-    // TODO: it assumes that Status404Decorator is active. If it's not, it will lead to unexpected\n-    // behaviors\n-    if (value == null || statusCode != null && statusCode.equals(\"404\")) {\n-      return true;\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    final DDSpanContext context = span.context();\n+    final Object httpStatus = tags.get(Tags.HTTP_STATUS.getKey());\n+    if (context.isResourceNameSet()", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNDcwMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402614703", "bodyText": "This logic is similar, but not the same as Status404Rule", "author": "tylerbenson", "createdAt": "2020-04-02T21:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMzQ3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405123472", "bodyText": "Yes, there are slight differences, but I think some sharing is possible.\nisResourceNameSet() and statusCode checks are the same.\nHowever if there was a helper class to handle the int conversion and comparisons, I think the repetition would be smaller and less problematic.\nI'm okay with not fixing this now, but I think there is a problem here.", "author": "dougqh", "createdAt": "2020-04-07T21:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\nindex 6b433e24dc..32280c351e 100644\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\n+++ b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\n\n@@ -21,18 +21,17 @@ public class URLAsResourceNameRule implements TraceProcessor.Rule {\n \n   @Override\n   public void processSpan(\n-      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+      final DDSpan span, final Map<String, String> meta, final Collection<DDSpan> trace) {\n     final DDSpanContext context = span.context();\n-    final Object httpStatus = tags.get(Tags.HTTP_STATUS.getKey());\n     if (context.isResourceNameSet()\n-        || tags.get(Tags.HTTP_URL.getKey()) == null\n-        || (httpStatus != null && (httpStatus.equals(404) || httpStatus.equals(\"404\")))) {\n+        || meta.get(Tags.HTTP_URL.getKey()) == null\n+        || \"404\".equals(meta.get(Tags.HTTP_STATUS.getKey()))) {\n       return;\n     }\n \n-    final String rawPath = rawPathFromUrlString(tags.get(Tags.HTTP_URL.getKey()).toString().trim());\n+    final String rawPath = rawPathFromUrlString(meta.get(Tags.HTTP_URL.getKey()).trim());\n     final String normalizedPath = normalizePath(rawPath);\n-    final String resourceName = addMethodIfAvailable(tags, normalizedPath);\n+    final String resourceName = addMethodIfAvailable(meta, normalizedPath);\n \n     context.setResourceName(resourceName);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395822223", "bodyText": "I don't think this needs to be under the lock.  Any synchronization for each span should be handled elsewhere.", "author": "dougqh", "createdAt": "2020-03-20T18:34:03Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ListWriter.java", "diffHunk": "@@ -10,15 +11,17 @@\n \n /** List writer used by tests mostly */\n public class ListWriter extends CopyOnWriteArrayList<List<DDSpan>> implements Writer {\n+  private final TraceProcessor processor = new TraceProcessor();\n   private final List<CountDownLatch> latches = new ArrayList<>();\n \n   public List<DDSpan> firstTrace() {\n     return get(0);\n   }\n \n   @Override\n-  public void write(final List<DDSpan> trace) {\n+  public void write(List<DDSpan> trace) {\n     synchronized (latches) {\n+      trace = processor.onTraceComplete(trace);", "originalCommit": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNTU0Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402615546", "bodyText": "Are you suggesting moving it outside the lock? Does it make much difference either way?", "author": "tylerbenson", "createdAt": "2020-04-02T21:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNzYzNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405127634", "bodyText": "Right, this shouldn't be under the lock.\nThe extra work will increase the lock hold time -- and that can actually have quite the impact.\nFor instance, adaptive spinning could cause the lock to be promoted from a spin lock to full lock.\nBut more importantly, the synchronization here needs to come from the spans not this lock.\nAny additional synchronization isn't helping and just increases the likelihood of a deadlock.", "author": "dougqh", "createdAt": "2020-04-07T21:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNzIzMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r406427230", "bodyText": "ListWriter is primarily used for unit tests.  I'm not so sure it will make a big difference either way.  I can move it outside though if you really want me to.", "author": "tylerbenson", "createdAt": "2020-04-09T19:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzYxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r406857614", "bodyText": "Fair enough.\nWe've got a bit of problem using very coarse grained locking -- even around concurrent collections, so this jumped out at me, but I suppose in this instance, it is okay.", "author": "dougqh", "createdAt": "2020-04-10T17:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b3a0b6d72a295494bf16f155f143aa4d08c46d51", "url": "https://github.com/DataDog/dd-trace-java/commit/b3a0b6d72a295494bf16f155f143aa4d08c46d51", "message": "Fix test", "committedDate": "2020-04-06T16:16:59Z", "type": "forcePushed"}, {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234", "url": "https://github.com/DataDog/dd-trace-java/commit/bb7a77add08f42637e62b744b6fb8694592c4234", "message": "Fix test", "committedDate": "2020-04-06T16:36:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDE2MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r404370160", "bodyText": "I know this is just a copy of Status5XXDecorator but how does this not break overriding the error range with dd.http.server.error.statuses?", "author": "randomanderson", "createdAt": "2020-04-06T20:32:57Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Mark all 5xx status codes as an error */\n+public class Status5XXRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"Status5XXDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n+      final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n+      try {\n+        final int responseCode =\n+            value instanceof Integer ? (int) value : Integer.parseInt(value.toString());\n+        span.setError(500 <= responseCode && responseCode < 600);", "originalCommit": "bb7a77add08f42637e62b744b6fb8694592c4234", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMzA3MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r404403071", "bodyText": "Good question... I'll have to investigate that further.", "author": "tylerbenson", "createdAt": "2020-04-06T21:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java\nindex 507920b664..6b6238551f 100644\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java\n+++ b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java\n\n@@ -15,17 +15,10 @@ public class Status5XXRule implements TraceProcessor.Rule {\n \n   @Override\n   public void processSpan(\n-      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n-    if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n-      final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n-      try {\n-        final int responseCode =\n-            value instanceof Integer ? (int) value : Integer.parseInt(value.toString());\n-        span.setError(500 <= responseCode && responseCode < 600);\n-      } catch (final NumberFormatException ex) {\n-        // If using Tags.HTTP_STATUS, value should always be an Integer,\n-        // but lets catch NumberFormatException just to be safe.\n-      }\n+      final DDSpan span, final Map<String, String> meta, final Collection<DDSpan> trace) {\n+    if (!span.context().getErrorFlag() && meta.containsKey(Tags.HTTP_STATUS.getKey())) {\n+      final int responseCode = Integer.parseInt(meta.get(Tags.HTTP_STATUS.getKey()));\n+      span.setError(500 <= responseCode && responseCode < 600);\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODkwMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405118903", "bodyText": "Doesn't this have the potential to raise an NPE?", "author": "dougqh", "createdAt": "2020-04-07T21:18:05Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n+ * after obfuscation.\n+ */\n+public class DBStatementRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"DBStatementAsResourceName\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n+      // Special case: Mongo\n+      // Skip the decorators\n+      if (tags.containsKey(Tags.COMPONENT.getKey())\n+          && \"java-mongo\".equals(tags.get(Tags.COMPONENT.getKey()))) {\n+        return;\n+      }\n+\n+      final String statement = tags.get(Tags.DB_STATEMENT.getKey()).toString();", "originalCommit": "bb7a77add08f42637e62b744b6fb8694592c4234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java\ndeleted file mode 100644\nindex b4d751591d..0000000000\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java\n+++ /dev/null\n\n@@ -1,37 +0,0 @@\n-package datadog.trace.common.processor.rule;\n-\n-import datadog.opentracing.DDSpan;\n-import datadog.trace.common.processor.TraceProcessor;\n-import io.opentracing.tag.Tags;\n-import java.util.Collection;\n-import java.util.Map;\n-\n-/**\n- * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n- * after obfuscation.\n- */\n-public class DBStatementRule implements TraceProcessor.Rule {\n-  @Override\n-  public String[] aliases() {\n-    return new String[] {\"DBStatementAsResourceName\"};\n-  }\n-\n-  @Override\n-  public void processSpan(\n-      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n-    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n-      // Special case: Mongo\n-      // Skip the decorators\n-      if (tags.containsKey(Tags.COMPONENT.getKey())\n-          && \"java-mongo\".equals(tags.get(Tags.COMPONENT.getKey()))) {\n-        return;\n-      }\n-\n-      final String statement = tags.get(Tags.DB_STATEMENT.getKey()).toString();\n-      if (!statement.isEmpty()) {\n-        span.setResourceName(statement);\n-      }\n-      span.setTag(Tags.DB_STATEMENT.getKey(), (String) null); // Remove the tag\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNDI2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405124268", "bodyText": "This looks better than the prior version, but it would be nice to eliminate the second call to verb.toString()", "author": "dougqh", "createdAt": "2020-04-07T21:28:33Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -86,11 +88,11 @@ private String normalizePath(final String path) {\n     return PATH_MIXED_ALPHANUMERICS.matcher(path).replaceAll(\"?\");\n   }\n \n-  private String addMethodIfAvailable(final DDSpanContext context, String path) {\n+  private String addMethodIfAvailable(final Map<String, Object> meta, String path) {\n     // if the verb (GET, POST ...) is present, add it\n-    final String verb = (String) context.getTags().get(Tags.HTTP_METHOD.getKey());\n-    if (verb != null && !verb.isEmpty()) {\n-      path = verb + \" \" + path;\n+    final Object verb = meta.get(Tags.HTTP_METHOD.getKey());\n+    if (verb != null && !verb.toString().isEmpty()) {", "originalCommit": "bb7a77add08f42637e62b744b6fb8694592c4234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\nindex 6b433e24dc..32280c351e 100644\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\n+++ b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java\n\n@@ -88,11 +87,11 @@ public class URLAsResourceNameRule implements TraceProcessor.Rule {\n     return PATH_MIXED_ALPHANUMERICS.matcher(path).replaceAll(\"?\");\n   }\n \n-  private String addMethodIfAvailable(final Map<String, Object> meta, String path) {\n+  private String addMethodIfAvailable(final Map<String, String> meta, String path) {\n     // if the verb (GET, POST ...) is present, add it\n-    final Object verb = meta.get(Tags.HTTP_METHOD.getKey());\n-    if (verb != null && !verb.toString().isEmpty()) {\n-      path = verb.toString().toUpperCase() + \" \" + path;\n+    final String verb = meta.get(Tags.HTTP_METHOD.getKey());\n+    if (verb != null && !verb.isEmpty()) {\n+      path = verb.toUpperCase() + \" \" + path;\n     }\n     return path;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMDQwNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405130405", "bodyText": "Are you still calling them decorators?\nI understanding supporting the old config, but maybe the method name should be changed.", "author": "dougqh", "createdAt": "2020-04-07T21:41:29Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =\n+      new Rule[] {\n+        // Rules are applied in order.\n+        new DBStatementRule(),\n+        new ResourceNameRule(),\n+        new SpanTypeRule(),\n+        new Status5XXRule(),\n+        new ErrorRule(),\n+        new URLAsResourceNameRule(),\n+        new Status404Rule(),\n+        new AnalyticsSampleRateRule(),\n+      };\n+\n+  private final List<Rule> rules;\n+\n+  public TraceProcessor() {\n+\n+    rules = new ArrayList<>(DEFAULT_RULES.length);\n+    for (final Rule rule : DEFAULT_RULES) {\n+      if (isEnabled(rule)) {\n+        rules.add(rule);\n+      }\n+    }\n+  }\n+\n+  private static boolean isEnabled(final Rule rule) {\n+    boolean enabled = Config.get().isDecoratorEnabled(rule.getClass().getSimpleName());\n+    for (final String alias : rule.aliases()) {\n+      enabled &= Config.get().isDecoratorEnabled(alias);", "originalCommit": "bb7a77add08f42637e62b744b6fb8694592c4234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\nindex 3981ddd4ee..8e1585fb93 100644\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\n+++ b/dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java\n\n@@ -2,11 +2,6 @@ package datadog.trace.common.processor;\n \n import datadog.opentracing.DDSpan;\n import datadog.trace.api.Config;\n-import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n-import datadog.trace.common.processor.rule.DBStatementRule;\n-import datadog.trace.common.processor.rule.ErrorRule;\n-import datadog.trace.common.processor.rule.ResourceNameRule;\n-import datadog.trace.common.processor.rule.SpanTypeRule;\n import datadog.trace.common.processor.rule.Status404Rule;\n import datadog.trace.common.processor.rule.Status5XXRule;\n import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMTUyOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405131528", "bodyText": "containsKey / get again.\nThis does raises a question about the thread safety.  What is the hand-off policy for the span between the creating thread and the processing thread?", "author": "dougqh", "createdAt": "2020-04-07T21:43:47Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts error tag to field */\n+public class ErrorRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"ErrorFlag\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.ERROR.getKey())) {", "originalCommit": "bb7a77add08f42637e62b744b6fb8694592c4234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "chunk": "diff --git a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java b/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java\ndeleted file mode 100644\nindex 49c0b3e112..0000000000\n--- a/dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java\n+++ /dev/null\n\n@@ -1,29 +0,0 @@\n-package datadog.trace.common.processor.rule;\n-\n-import datadog.opentracing.DDSpan;\n-import datadog.trace.common.processor.TraceProcessor;\n-import io.opentracing.tag.Tags;\n-import java.util.Collection;\n-import java.util.Map;\n-\n-/** Converts error tag to field */\n-public class ErrorRule implements TraceProcessor.Rule {\n-  @Override\n-  public String[] aliases() {\n-    return new String[] {\"ErrorFlag\"};\n-  }\n-\n-  @Override\n-  public void processSpan(\n-      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n-    if (tags.containsKey(Tags.ERROR.getKey())) {\n-      final Object value = tags.get(Tags.ERROR.getKey());\n-      if (value instanceof Boolean) {\n-        span.setError((Boolean) value);\n-      } else {\n-        span.setError(Boolean.parseBoolean(value.toString()));\n-      }\n-      span.setTag(Tags.ERROR, null); // Remove the tag\n-    }\n-  }\n-}\n"}}, {"oid": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "url": "https://github.com/DataDog/dd-trace-java/commit/73fb7aa2b68a5d8aced24eca7dce97ed43429216", "message": "Add TraceProcessor and move some existing functionality to rules\n\nSpecifically, the Status5XXRule, URLAsResourceNameRule, and Status404Rule.", "committedDate": "2020-04-13T17:59:11Z", "type": "commit"}, {"oid": "97efa307d3e1a49393285f27df99922435e54a3f", "url": "https://github.com/DataDog/dd-trace-java/commit/97efa307d3e1a49393285f27df99922435e54a3f", "message": "Stop setting error tag and update tests.", "committedDate": "2020-04-13T17:59:11Z", "type": "commit"}, {"oid": "2028b100098777cdabc883d14e21e05af655c9f8", "url": "https://github.com/DataDog/dd-trace-java/commit/2028b100098777cdabc883d14e21e05af655c9f8", "message": "Move ErrorFlag to TraceProcessor", "committedDate": "2020-04-13T17:59:11Z", "type": "commit"}, {"oid": "329e79b8012b0c80e13fdf90d510d27cfcff1ad4", "url": "https://github.com/DataDog/dd-trace-java/commit/329e79b8012b0c80e13fdf90d510d27cfcff1ad4", "message": "Move SpanTypeDecorator to SpanTypeRule", "committedDate": "2020-04-13T17:59:11Z", "type": "commit"}, {"oid": "f0eb73ef12b8e9dcb3d4b524e07779c0a98d33ee", "url": "https://github.com/DataDog/dd-trace-java/commit/f0eb73ef12b8e9dcb3d4b524e07779c0a98d33ee", "message": "Use tags instead of meta\n\nwhich includes baggage.", "committedDate": "2020-04-13T17:59:11Z", "type": "commit"}, {"oid": "c288f69e645712d14267575367c94ec21f7e2026", "url": "https://github.com/DataDog/dd-trace-java/commit/c288f69e645712d14267575367c94ec21f7e2026", "message": "Move ResourceNameDecorator to ResourceNameRule", "committedDate": "2020-04-13T17:59:11Z", "type": "commit"}, {"oid": "7650efe5ed8c4d332df621f0b1bae8017d47acc1", "url": "https://github.com/DataDog/dd-trace-java/commit/7650efe5ed8c4d332df621f0b1bae8017d47acc1", "message": "Move AnalyticsSampleRateDecorator to AnalyticsSampleRateRule", "committedDate": "2020-04-13T19:54:51Z", "type": "commit"}, {"oid": "7614fa42e0fab5aecf9f7af9a740e30b265bca3e", "url": "https://github.com/DataDog/dd-trace-java/commit/7614fa42e0fab5aecf9f7af9a740e30b265bca3e", "message": "Move DBStatementAsResourceName to DBStatementRule", "committedDate": "2020-04-13T19:54:52Z", "type": "commit"}, {"oid": "8170f7bc7b0d1392a0155fdd7df04a094a556387", "url": "https://github.com/DataDog/dd-trace-java/commit/8170f7bc7b0d1392a0155fdd7df04a094a556387", "message": "Various fixes", "committedDate": "2020-04-13T19:55:37Z", "type": "commit"}, {"oid": "df97f90fec692dd710312e6e5954b8cd855c14d9", "url": "https://github.com/DataDog/dd-trace-java/commit/df97f90fec692dd710312e6e5954b8cd855c14d9", "message": "Remove OperationDecorator", "committedDate": "2020-04-13T19:55:37Z", "type": "commit"}, {"oid": "60226086c3a36ef5281d3e06af51e60d11f8c219", "url": "https://github.com/DataDog/dd-trace-java/commit/60226086c3a36ef5281d3e06af51e60d11f8c219", "message": "Catch NumberFormatException", "committedDate": "2020-04-13T21:06:12Z", "type": "commit"}, {"oid": "d1dc756b129efeb2dc36667e935610e97ee5905b", "url": "https://github.com/DataDog/dd-trace-java/commit/d1dc756b129efeb2dc36667e935610e97ee5905b", "message": "Fix issues from code reviews.", "committedDate": "2020-04-13T21:06:12Z", "type": "commit"}, {"oid": "aa77bb7bf8b2cf0783ca54477c80218b78b8bdf0", "url": "https://github.com/DataDog/dd-trace-java/commit/aa77bb7bf8b2cf0783ca54477c80218b78b8bdf0", "message": "Fix tests.\n\nFix tests.", "committedDate": "2020-04-13T21:07:49Z", "type": "forcePushed"}, {"oid": "3aa803489b250a8a6f78a85051e336bf2498a49b", "url": "https://github.com/DataDog/dd-trace-java/commit/3aa803489b250a8a6f78a85051e336bf2498a49b", "message": "Fix tests.", "committedDate": "2020-04-13T22:03:53Z", "type": "commit"}, {"oid": "3aa803489b250a8a6f78a85051e336bf2498a49b", "url": "https://github.com/DataDog/dd-trace-java/commit/3aa803489b250a8a6f78a85051e336bf2498a49b", "message": "Fix tests.", "committedDate": "2020-04-13T22:03:53Z", "type": "forcePushed"}, {"oid": "11c71e1d5d0a4f97d16a025085d15ae941e08eac", "url": "https://github.com/DataDog/dd-trace-java/commit/11c71e1d5d0a4f97d16a025085d15ae941e08eac", "message": "Avoid setting the error tag\n\nand test fixes.", "committedDate": "2020-04-14T16:21:51Z", "type": "commit"}]}