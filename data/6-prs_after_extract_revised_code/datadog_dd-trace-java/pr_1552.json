{"pr_number": 1552, "pr_title": "Fix sampling", "pr_createdAt": "2020-06-05T15:36:26Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1552", "timeline": [{"oid": "5dea4833816133c16df89932525e4065bbea558c", "url": "https://github.com/DataDog/dd-trace-java/commit/5dea4833816133c16df89932525e4065bbea558c", "message": "Fix sampling\n\nmade threadIds in JMXsampler a set, so you cannot add dumplicates now\nskip stacks dispatching when no scope found", "committedDate": "2020-06-05T15:35:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r437995387", "bodyText": "compute() does not seem to be strictly necessary here - simple jmxSessions.put(threadId, createNewSession(id, threadId, scopeStackCollector) should be enough and would avoid creating a lambda capture.", "author": "jbachorik", "createdAt": "2020-06-10T09:40:28Z", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -20,11 +20,9 @@ public JMXSessionFactory() {\n   public Session createSession(String id, Thread thread) {\n     ScopeManager scopeManager = threadScopeMapper.forThread(thread);\n     ScopeStackCollector scopeStackCollector = scopeManager.startScope(id);\n-\n     long threadId = thread.getId();\n-    JMXSession session = createNewSession(id, threadId, scopeStackCollector);\n-    jmxSessions.put(threadId, session);\n-    return session;\n+    return jmxSessions.compute(", "originalCommit": "5dea4833816133c16df89932525e4065bbea558c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNTA3Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438025073", "bodyText": "done", "author": "jpbempel", "createdAt": "2020-06-10T10:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAzMzEzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438033133", "bodyText": "in fact compute returns me directly the created session that happened under atomic operation which I can't do with put which returns me the old value", "author": "jpbempel", "createdAt": "2020-06-10T10:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDAxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438074017", "bodyText": "You would have the new value precomputed, right? No need to get the value back from the map operation. I'm a bit concerned that we may end up calling createNewSession() multiple times during compute() (if CAS fails the value is recomputed).\nSo this leaves piggybacking on the concurrent map CAS synchronization for createNewSession() the only reason why compute should be used instead of put. Can you, please, put a comment there so someone does not 'optimize' the code by calling put in the future?", "author": "jbachorik", "createdAt": "2020-06-10T12:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyNzQ3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438127475", "bodyText": "compute() method will not call createNewSession multiple times: there is no CAS loop in compute.\nI added a comment for justifying the usage of compute", "author": "jpbempel", "createdAt": "2020-06-10T13:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f85307b2eb97c0ff6745f2ee272dd80db9b20118", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java\nindex e590eaa3f3..9bfbe52aa2 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java\n\n@@ -21,8 +21,7 @@ public class JMXSessionFactory implements SessionFactory {\n     ScopeManager scopeManager = threadScopeMapper.forThread(thread);\n     ScopeStackCollector scopeStackCollector = scopeManager.startScope(id);\n     long threadId = thread.getId();\n-    return jmxSessions.compute(\n-        threadId, (key, jmxSession) -> createNewSession(id, threadId, scopeStackCollector));\n+    return jmxSessions.put(threadId, createNewSession(id, threadId, scopeStackCollector));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NzQ3Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r437997477", "bodyText": "What about using Arrays.binarySearch() instead - and if the key is not present inserting it at the position indicated by binarySearch() result to maintain sorted array. Would be beneficial for >10 tracked threads.", "author": "jbachorik", "createdAt": "2020-06-10T09:43:47Z", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "diffHunk": "@@ -48,6 +47,10 @@ public void addThreadId(long threadId) {\n     }\n     do {\n       prev = threadIds.get();\n+      // check if already exists\n+      for (int i = 0; i < prev.length; i++) {\n+        if (prev[i] == threadId) return;\n+      }", "originalCommit": "5dea4833816133c16df89932525e4065bbea558c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNTE1NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438025155", "bodyText": "done", "author": "jpbempel", "createdAt": "2020-06-10T10:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NzQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f85307b2eb97c0ff6745f2ee272dd80db9b20118", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java\nindex 8f2393307a..0bf9fa2f74 100644\n--- a/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java\n+++ b/dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java\n\n@@ -47,12 +47,14 @@ class JMXSampler {\n     }\n     do {\n       prev = threadIds.get();\n+      int idx = Arrays.binarySearch(prev, threadId);\n       // check if already exists\n-      for (int i = 0; i < prev.length; i++) {\n-        if (prev[i] == threadId) return;\n-      }\n+      if (idx >= 0)\n+        return;\n+      idx = -idx - 1;\n       tmpArray = Arrays.copyOf(prev, prev.length + 1);\n-      tmpArray[tmpArray.length - 1] = threadId;\n+      System.arraycopy(tmpArray, idx, tmpArray, idx +1, prev.length - idx);\n+      tmpArray[idx] = threadId;\n     } while (!threadIds.compareAndSet(prev, tmpArray));\n   }\n \n"}}, {"oid": "f85307b2eb97c0ff6745f2ee272dd80db9b20118", "url": "https://github.com/DataDog/dd-trace-java/commit/f85307b2eb97c0ff6745f2ee272dd80db9b20118", "message": "add binarySearch & replace compute by put", "committedDate": "2020-06-10T10:32:36Z", "type": "commit"}, {"oid": "f3f4a3e24b8631166284a90dc622b1fa255143f3", "url": "https://github.com/DataDog/dd-trace-java/commit/f3f4a3e24b8631166284a90dc622b1fa255143f3", "message": "revert to compute", "committedDate": "2020-06-10T10:50:41Z", "type": "commit"}, {"oid": "e9a8ca4e6f106974839f7f9dd180e7eec8e93e52", "url": "https://github.com/DataDog/dd-trace-java/commit/e9a8ca4e6f106974839f7f9dd180e7eec8e93e52", "message": "add comment", "committedDate": "2020-06-10T13:35:46Z", "type": "commit"}, {"oid": "4228945a2e87d7492468ada880bc5a46c9ea70df", "url": "https://github.com/DataDog/dd-trace-java/commit/4228945a2e87d7492468ada880bc5a46c9ea70df", "message": "fix formatting", "committedDate": "2020-06-10T13:46:23Z", "type": "commit"}]}