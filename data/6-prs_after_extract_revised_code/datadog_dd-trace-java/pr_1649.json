{"pr_number": 1649, "pr_title": "Automatic service naming", "pr_createdAt": "2020-07-02T08:14:36Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1649", "timeline": [{"oid": "1e955ea6096db1e7610828443cabf774992b9fa1", "url": "https://github.com/DataDog/dd-trace-java/commit/1e955ea6096db1e7610828443cabf774992b9fa1", "message": "Modified Config.java to include service name autodetection for Oracle JDKs", "committedDate": "2020-07-02T08:11:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDMwOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r448834309", "bodyText": "Then I think we should change those tests rather than introduce test-aware behaviour here.", "author": "richardstartin", "createdAt": "2020-07-02T08:26:37Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -1469,6 +1470,53 @@ private static String getHostName() {\n     return null;\n   }\n \n+  /**\n+   * Returns autodetected service name based on the java process command line. Tipically, the\n+   * autodetection will return either the JAR filename or the java main class.\n+   */\n+  private static String autodetectServiceName(final String defaultValue) {\n+    /*\n+     Testing purposes\n+     Automatic detection breaks the tests that assert default values.\n+     To fix that, it is checked if the method is executed from a DDSpecification\n+    */\n+    if (System.getProperty(\"DDSpecification\") != null", "originalCommit": "1e955ea6096db1e7610828443cabf774992b9fa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1NTgxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r448855811", "bodyText": "Good point.\nThat was my first approach, but the autodetection algorithm is based on process command line, and unfortunately there is no a standard way to obtain this info. Totally platform dependant.\nI think that implies either all default values are mocked in all tests to obtain the service name deterministically (this could make the tests that assert default values useless), or the default behaviour is maintained as always, and only in the specific tests are configured the proper platform values and assert the expected service name.\nTBH, not super fan of poluting production code with this test-aware behaviour, but I assumed this tradeoff to maintain the testability as high as possibly.", "author": "drodriguezhdez", "createdAt": "2020-07-02T09:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MzI3Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r448863277", "bodyText": "I'm not necessarily suggesting that it isn't the most pragmatic solution, but seeing this makes me quite uncomfortable because it points to a missing abstraction from the Config class. We should first capture an environment, and then use it. Tests would then depend on (and control) what's in the captured environment, and we would have a simple test which demonstrates that we can actually capture an environment from properties, environment variables and config files. This would also do away with the practice of setting system properties in test setup.\nThis feels like quite a large design change to propose as part of this otherwise simple set of changes, but want to leave this open for others to discuss if there are other ways to avoid test-aware logic.", "author": "richardstartin", "createdAt": "2020-07-02T09:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a716daf622a2312a5b3467ca301b7eba4f978d86", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex b21d61baab..86b785f533 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -1470,53 +1494,6 @@ public class Config {\n     return null;\n   }\n \n-  /**\n-   * Returns autodetected service name based on the java process command line. Tipically, the\n-   * autodetection will return either the JAR filename or the java main class.\n-   */\n-  private static String autodetectServiceName(final String defaultValue) {\n-    /*\n-     Testing purposes\n-     Automatic detection breaks the tests that assert default values.\n-     To fix that, it is checked if the method is executed from a DDSpecification\n-    */\n-    if (System.getProperty(\"DDSpecification\") != null\n-        && !System.getProperty(\"DDSpecification\").equals(\"\")) {\n-      return defaultValue;\n-    }\n-\n-    if (System.getenv(\"JAVA_MAIN_CLASS\") != null) {\n-      return System.getenv(\"JAVA_MAIN_CLASS\");\n-    }\n-\n-    // Oracle JDKs\n-    if (System.getProperty(\"sun.java.command\") != null) {\n-      return extractJarOrClass(System.getProperty(\"sun.java.command\"), defaultValue);\n-    }\n-\n-    // TODO Others JDKs\n-\n-    return defaultValue;\n-  }\n-\n-  private static String extractJarOrClass(final String command, final String defaultValue) {\n-    if (command == null || command.equals(\"\")) {\n-      return defaultValue;\n-    }\n-\n-    final String[] split = command.split(\" \");\n-    if (split.length < 1 || split[0] == null || split[0].equals(\"\")) {\n-      return defaultValue;\n-    }\n-\n-    final String candidate = split[0];\n-    if (candidate.endsWith(\".jar\")) {\n-      return new File(candidate).getName();\n-    }\n-\n-    return candidate;\n-  }\n-\n   // This has to be placed after all other static fields to give them a chance to initialize\n   private static final Config INSTANCE = new Config();\n \n"}}, {"oid": "a716daf622a2312a5b3467ca301b7eba4f978d86", "url": "https://github.com/DataDog/dd-trace-java/commit/a716daf622a2312a5b3467ca301b7eba4f978d86", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T08:42:50Z", "type": "forcePushed"}, {"oid": "e702a9493c6cae0780a3bc69c14931c8cd811c54", "url": "https://github.com/DataDog/dd-trace-java/commit/e702a9493c6cae0780a3bc69c14931c8cd811c54", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T10:52:23Z", "type": "forcePushed"}, {"oid": "1defdb76d6f1058cd93488c43663a9bb0338b1a5", "url": "https://github.com/DataDog/dd-trace-java/commit/1defdb76d6f1058cd93488c43663a9bb0338b1a5", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T13:28:12Z", "type": "forcePushed"}, {"oid": "64e8c88577baaaaac3dd08801e3bf8175673a215", "url": "https://github.com/DataDog/dd-trace-java/commit/64e8c88577baaaaac3dd08801e3bf8175673a215", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T13:31:59Z", "type": "forcePushed"}, {"oid": "418f4a1bb6288f4043dbfe1070dca22969e56e62", "url": "https://github.com/DataDog/dd-trace-java/commit/418f4a1bb6288f4043dbfe1070dca22969e56e62", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T13:44:42Z", "type": "commit"}, {"oid": "418f4a1bb6288f4043dbfe1070dca22969e56e62", "url": "https://github.com/DataDog/dd-trace-java/commit/418f4a1bb6288f4043dbfe1070dca22969e56e62", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T13:44:42Z", "type": "forcePushed"}, {"oid": "1f2e4767df6f9b3247a34a550e35dbc0df39d398", "url": "https://github.com/DataDog/dd-trace-java/commit/1f2e4767df6f9b3247a34a550e35dbc0df39d398", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-03T15:14:50Z", "type": "forcePushed"}, {"oid": "a5786748479b828d5d70a5a505d82dbd8f29711e", "url": "https://github.com/DataDog/dd-trace-java/commit/a5786748479b828d5d70a5a505d82dbd8f29711e", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-06T07:13:29Z", "type": "forcePushed"}, {"oid": "98f882b16efee534a55bcf2cf1e9f8213b60da98", "url": "https://github.com/DataDog/dd-trace-java/commit/98f882b16efee534a55bcf2cf1e9f8213b60da98", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-06T07:47:47Z", "type": "forcePushed"}, {"oid": "c0693ee32f760233c20f1b8ca59bea348372d856", "url": "https://github.com/DataDog/dd-trace-java/commit/c0693ee32f760233c20f1b8ca59bea348372d856", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-06T07:54:59Z", "type": "commit"}, {"oid": "c0693ee32f760233c20f1b8ca59bea348372d856", "url": "https://github.com/DataDog/dd-trace-java/commit/c0693ee32f760233c20f1b8ca59bea348372d856", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-06T07:54:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Mzk4Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r450093982", "bodyText": "redundant check, extractJarOrClass is already testing against null command", "author": "jpbempel", "createdAt": "2020-07-06T09:21:07Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.api.env;\n+\n+import datadog.trace.api.config.GeneralConfig;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * The {@code CapturedEnvironment} instance keeps those {@code Config} values which are platform\n+ * dependant.\n+ */\n+@Slf4j\n+public class CapturedEnvironment {\n+\n+  private static final CapturedEnvironment INSTANCE = new CapturedEnvironment();\n+\n+  @Getter private final Map<String, String> properties;\n+\n+  CapturedEnvironment() {\n+    properties = new HashMap<>();\n+    properties.put(GeneralConfig.SERVICE_NAME, autodetectServiceName());\n+  }\n+\n+  // Testing purposes\n+  static void useFixedEnv(final Map<String, String> props) {\n+    INSTANCE.properties.clear();\n+\n+    for (final Map.Entry<String, String> entry : props.entrySet()) {\n+      INSTANCE.properties.put(entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  /**\n+   * Returns autodetected service name based on the java process command line. Typically, the\n+   * autodetection will return either the JAR filename or the java main class.\n+   */\n+  private String autodetectServiceName() {\n+    // Besides \"sun.java.command\" property is not an standard, all main JDKs has set this property.\n+    // Tested on:\n+    // - OracleJDK, OpenJDK, AdoptOpenJDK, IBM JDK, Azul Zulu JDK, Amazon Coretto JDK\n+    if (System.getProperty(\"sun.java.command\") != null) {", "originalCommit": "c0693ee32f760233c20f1b8ca59bea348372d856", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5d602aaa713d942c24ffa4f16e3af8128ecb444", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java b/dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java\nindex 0b9243ad26..2076fe5945 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java\n\n@@ -40,11 +40,7 @@ public class CapturedEnvironment {\n     // Besides \"sun.java.command\" property is not an standard, all main JDKs has set this property.\n     // Tested on:\n     // - OracleJDK, OpenJDK, AdoptOpenJDK, IBM JDK, Azul Zulu JDK, Amazon Coretto JDK\n-    if (System.getProperty(\"sun.java.command\") != null) {\n-      return extractJarOrClass(System.getProperty(\"sun.java.command\"));\n-    }\n-\n-    return null;\n+    return extractJarOrClass(System.getProperty(\"sun.java.command\"));\n   }\n \n   private String extractJarOrClass(final String command) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5NDc2Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r450094763", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (split.length < 1 || split[0].equals(\"\")) {\n          \n          \n            \n                if (split.length == 0 || split[0].equals(\"\")) {", "author": "jpbempel", "createdAt": "2020-07-06T09:22:26Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.api.env;\n+\n+import datadog.trace.api.config.GeneralConfig;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * The {@code CapturedEnvironment} instance keeps those {@code Config} values which are platform\n+ * dependant.\n+ */\n+@Slf4j\n+public class CapturedEnvironment {\n+\n+  private static final CapturedEnvironment INSTANCE = new CapturedEnvironment();\n+\n+  @Getter private final Map<String, String> properties;\n+\n+  CapturedEnvironment() {\n+    properties = new HashMap<>();\n+    properties.put(GeneralConfig.SERVICE_NAME, autodetectServiceName());\n+  }\n+\n+  // Testing purposes\n+  static void useFixedEnv(final Map<String, String> props) {\n+    INSTANCE.properties.clear();\n+\n+    for (final Map.Entry<String, String> entry : props.entrySet()) {\n+      INSTANCE.properties.put(entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  /**\n+   * Returns autodetected service name based on the java process command line. Typically, the\n+   * autodetection will return either the JAR filename or the java main class.\n+   */\n+  private String autodetectServiceName() {\n+    // Besides \"sun.java.command\" property is not an standard, all main JDKs has set this property.\n+    // Tested on:\n+    // - OracleJDK, OpenJDK, AdoptOpenJDK, IBM JDK, Azul Zulu JDK, Amazon Coretto JDK\n+    if (System.getProperty(\"sun.java.command\") != null) {\n+      return extractJarOrClass(System.getProperty(\"sun.java.command\"));\n+    }\n+\n+    return null;\n+  }\n+\n+  private String extractJarOrClass(final String command) {\n+    if (command == null || command.equals(\"\")) {\n+      return null;\n+    }\n+\n+    final String[] split = command.trim().split(\" \");\n+    if (split.length < 1 || split[0].equals(\"\")) {", "originalCommit": "c0693ee32f760233c20f1b8ca59bea348372d856", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5d602aaa713d942c24ffa4f16e3af8128ecb444", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java b/dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java\nindex 0b9243ad26..2076fe5945 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java\n\n@@ -40,11 +40,7 @@ public class CapturedEnvironment {\n     // Besides \"sun.java.command\" property is not an standard, all main JDKs has set this property.\n     // Tested on:\n     // - OracleJDK, OpenJDK, AdoptOpenJDK, IBM JDK, Azul Zulu JDK, Amazon Coretto JDK\n-    if (System.getProperty(\"sun.java.command\") != null) {\n-      return extractJarOrClass(System.getProperty(\"sun.java.command\"));\n-    }\n-\n-    return null;\n+    return extractJarOrClass(System.getProperty(\"sun.java.command\"));\n   }\n \n   private String extractJarOrClass(final String command) {\n"}}, {"oid": "f5d602aaa713d942c24ffa4f16e3af8128ecb444", "url": "https://github.com/DataDog/dd-trace-java/commit/f5d602aaa713d942c24ffa4f16e3af8128ecb444", "message": "Apply suggestions from PR feedback.", "committedDate": "2020-07-06T10:03:39Z", "type": "commit"}, {"oid": "49baa00573b7f41a80a88a0341bd47aebd828a4f", "url": "https://github.com/DataDog/dd-trace-java/commit/49baa00573b7f41a80a88a0341bd47aebd828a4f", "message": "Added tests to demonstrate the manually configured properties have prevalence over captured env props.", "committedDate": "2020-07-07T07:11:09Z", "type": "commit"}, {"oid": "8d7fdf22a045e532a706dab2aca06aa92ed61dc9", "url": "https://github.com/DataDog/dd-trace-java/commit/8d7fdf22a045e532a706dab2aca06aa92ed61dc9", "message": "Remove .jar suffix to service name based on JAR name", "committedDate": "2020-07-08T12:14:13Z", "type": "commit"}]}