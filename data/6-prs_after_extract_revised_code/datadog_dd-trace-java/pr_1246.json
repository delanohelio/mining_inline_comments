{"pr_number": 1246, "pr_title": "improve hash calculation cache pool", "pr_createdAt": "2020-02-21T17:29:45Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1246", "timeline": [{"oid": "9d7682f7764e1176a0ee770214754e0051b5c546", "url": "https://github.com/DataDog/dd-trace-java/commit/9d7682f7764e1176a0ee770214754e0051b5c546", "message": "Fix hashcode calculation in TypeCacheKey\n\nUsing potentially very large number for a mod is probably not very effective", "committedDate": "2020-02-21T17:22:51Z", "type": "commit"}, {"oid": "f736c425ffebef3cd02d25eb702108802120cfcf", "url": "https://github.com/DataDog/dd-trace-java/commit/f736c425ffebef3cd02d25eb702108802120cfcf", "message": "TypeCacheKey are different if hash codes are different\n\nAnd this is very easy to check", "committedDate": "2020-02-21T17:23:41Z", "type": "commit"}, {"oid": "d4c6d86e6d74c575ed71433d9c955715266e01c6", "url": "https://github.com/DataDog/dd-trace-java/commit/d4c6d86e6d74c575ed71433d9c955715266e01c6", "message": "Do not use zero for hashcode\n\nSeems like this may have odd sideeffects", "committedDate": "2020-02-21T17:24:09Z", "type": "commit"}, {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543", "url": "https://github.com/DataDog/dd-trace-java/commit/00c268e6d8acf642f0810f25a3d9e64b7f639543", "message": "Add equivalence check to TypeCacheKey", "committedDate": "2020-02-21T17:24:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzM3Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r382727376", "bodyText": "Nice -- did these two changes reduce the collision rate?\nMostly just curious", "author": "dougqh", "createdAt": "2020-02-21T18:07:35Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -140,7 +140,7 @@ final long approximateSize() {\n       this.loaderRef = loaderRef;\n       this.className = className;\n \n-      hashCode = (int) (31 * this.loaderHash) ^ className.hashCode();\n+      hashCode = 31 * this.loaderHash + className.hashCode();", "originalCommit": "00c268e6d8acf642f0810f25a3d9e64b7f639543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NjU2MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r382746560", "bodyText": "I didn't check, but I did notice that before equals falled down to string comparison way too often.", "author": "mar-kolya", "createdAt": "2020-02-21T18:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MzQ0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r383483442", "bodyText": "Yes, that might have more to do with the loader hash.  I think the change of the bootstrap hash is good, but I'm not so sure about the other parts.\nHere, I was using a variation on FNV: https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\nI suspect this can be improved, but I'm not so sure that switching from ^ to + is a good idea.", "author": "dougqh", "createdAt": "2020-02-24T20:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0NjY0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r383746642", "bodyText": "I think + is used by java.util.Arrays, and 'promoted' by things like Guava (java.util.Arrays has a bit different formula, but in our case I think it will produce only constant difference).\nAs far as I can see FNV performs all calculation on bytes and then 'collects' result in int - ensuring mixing within values. I'm not sure how different this is from current implementation in this code. Also FNV uses 'carefully selected' prime and offset.\nFWIW in my quick test on 1000 iterations of hash(r.nextInt() % 10, r.nextInt() % 100) new implementation routinely produces better results (less collisions) than old one.", "author": "mar-kolya", "createdAt": "2020-02-25T09:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzM3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODkxOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r382728918", "bodyText": "Does this case get exercised?  I believe the outer layer always creates a new TypeCacheKey, so this probably doesn't get exercised much.\nI did try a separate branch where I used ImmutableTypeCacheKeys for put and used a thread local MutableTypeCacheKey for look-up.  That did slightly reduce allocation but the allocation from evicting and then rematerializing still dominated and there was no measurable reduction in GCs or impact on start-up.", "author": "dougqh", "createdAt": "2020-02-21T18:11:03Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,11 +150,19 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      if (this == obj) {", "originalCommit": "00c268e6d8acf642f0810f25a3d9e64b7f639543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0Njc1OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r382746758", "bodyText": "I do not think I have direct data on this... would you like me to remove this?", "author": "mar-kolya", "createdAt": "2020-02-21T18:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4NDgyOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r383484828", "bodyText": "Yes, I don't think is helping -- probably hurting slightly.", "author": "dougqh", "createdAt": "2020-02-24T20:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTU5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r383749597", "bodyText": "I think it will be optimized away eventually by JVM, but I've removed it anyway.", "author": "mar-kolya", "createdAt": "2020-02-25T09:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "31b5652d104545a44d781666c4ae07acc0f87f17", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\nsimilarity index 98%\nrename from dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java\nrename to dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\nindex a598eddbee..4d83ccc6be 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\n\n@@ -154,10 +154,6 @@ public class DDCachingPoolStrategy implements PoolStrategy {\n         return false;\n       }\n \n-      if (this == obj) {\n-        return true;\n-      }\n-\n       final TypeCacheKey that = (TypeCacheKey) obj;\n \n       if (hashCode != that.hashCode) {\n"}}, {"oid": "41db97ea0fb43ef2c2906126b350dc6a54e46b2f", "url": "https://github.com/DataDog/dd-trace-java/commit/41db97ea0fb43ef2c2906126b350dc6a54e46b2f", "message": "Merge branch 'master' into mar-kolya/improve-hash-calclulation-cache-pool", "committedDate": "2020-02-25T09:18:25Z", "type": "commit"}, {"oid": "31b5652d104545a44d781666c4ae07acc0f87f17", "url": "https://github.com/DataDog/dd-trace-java/commit/31b5652d104545a44d781666c4ae07acc0f87f17", "message": "Remove reference check from TypeCacheKey", "committedDate": "2020-02-25T09:19:47Z", "type": "commit"}, {"oid": "aefcc477cbb8058849e1f8234c77dfe9936964d3", "url": "https://github.com/DataDog/dd-trace-java/commit/aefcc477cbb8058849e1f8234c77dfe9936964d3", "message": "Simplify TypePoolCacheKey equals\n\nWe have to check string equivalence regardless of classloader state", "committedDate": "2020-02-25T10:58:18Z", "type": "commit"}, {"oid": "50793e524485e6a3b48136d3f4f4e852e76236b9", "url": "https://github.com/DataDog/dd-trace-java/commit/50793e524485e6a3b48136d3f4f4e852e76236b9", "message": "Make sure that same classloaders get same weak ref", "committedDate": "2020-02-25T13:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2Mjk4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384062986", "bodyText": "I was mostly assuming that hashCode comparisons had already been done.\nThe idea behind the loaderHash comparison was that it provides a fast exit for some hash collisions.", "author": "dougqh", "createdAt": "2020-02-25T19:01:41Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,18 +153,23 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (loaderHash != that.loaderHash) return false;\n+      if (hashCode != that.hashCode) {", "originalCommit": "50793e524485e6a3b48136d3f4f4e852e76236b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f74d0fef36dd689ae4dd745bdf3b3be6a1dc60", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\nindex 94cde8d482..9040089283 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\n\n@@ -159,7 +156,7 @@ public class DDCachingPoolStrategy implements PoolStrategy {\n \n       final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (hashCode != that.hashCode) {\n+      if (loaderHash != that.loaderHash) {\n         return false;\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODgxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384068811", "bodyText": "Yes, this part is debatable but still quite deliberate.\nThe loaderRef reference equivalence check was placed before the className.equals check because it is faster.\nThe order is reversed for the slow path because I want to avoid calling Reference.get whenever possible.\nThe reason being that concurrency GCs will \"strengthen\" the reference on a get call.\nhttps://github.com/real-logic/agrona/blob/master/agrona/src/main/java/org/agrona/References.java has a nice explanation.", "author": "dougqh", "createdAt": "2020-02-25T19:12:56Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,18 +153,23 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (loaderHash != that.loaderHash) return false;\n+      if (hashCode != that.hashCode) {\n+        return false;\n+      }\n+\n+      if (className.equals(that.className)) {", "originalCommit": "50793e524485e6a3b48136d3f4f4e852e76236b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExODU5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384118590", "bodyText": "I think performance wise this check is equivalent.\nIt was:\n\nequivalence check for references\nimmediately after equals on class name in both branches\n\nNow:\n\nEquals in classname first\nequivalence check if first passes.\n\nSo if anything we save equivalence check in some cases. Strings were compared anyway.", "author": "mar-kolya", "createdAt": "2020-02-25T20:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0ODM3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384148372", "bodyText": "Yes, that's a fair point -- and if we put back the loaderHash check that covers a fast exit for loader mismatch.", "author": "dougqh", "createdAt": "2020-02-25T21:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNjU2MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384336560", "bodyText": "I've put that back", "author": "mar-kolya", "createdAt": "2020-02-26T08:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "96f74d0fef36dd689ae4dd745bdf3b3be6a1dc60", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\nindex 94cde8d482..9040089283 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java\n\n@@ -159,7 +156,7 @@ public class DDCachingPoolStrategy implements PoolStrategy {\n \n       final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (hashCode != that.hashCode) {\n+      if (loaderHash != that.loaderHash) {\n         return false;\n       }\n \n"}}, {"oid": "82dd2aa1b3970695901e72fb8eed7199179ed882", "url": "https://github.com/DataDog/dd-trace-java/commit/82dd2aa1b3970695901e72fb8eed7199179ed882", "message": "Revert \"Make sure that same classloaders get same weak ref\"\n\nThis reverts commit 50793e524485e6a3b48136d3f4f4e852e76236b9.", "committedDate": "2020-02-25T20:47:42Z", "type": "commit"}, {"oid": "82dd2aa1b3970695901e72fb8eed7199179ed882", "url": "https://github.com/DataDog/dd-trace-java/commit/82dd2aa1b3970695901e72fb8eed7199179ed882", "message": "Revert \"Make sure that same classloaders get same weak ref\"\n\nThis reverts commit 50793e524485e6a3b48136d3f4f4e852e76236b9.", "committedDate": "2020-02-25T20:47:42Z", "type": "forcePushed"}, {"oid": "96f74d0fef36dd689ae4dd745bdf3b3be6a1dc60", "url": "https://github.com/DataDog/dd-trace-java/commit/96f74d0fef36dd689ae4dd745bdf3b3be6a1dc60", "message": "Compare loader hashes", "committedDate": "2020-02-25T20:53:12Z", "type": "commit"}]}