{"pr_number": 1883, "pr_title": "Add instrumentation for ScheduledExecutorService, dormant integration testing for spanner session creation dependent on PendingTrace changes", "pr_createdAt": "2020-09-18T08:30:59Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1883", "timeline": [{"oid": "1d1ffdebe714e13fab82e62edf9a1802048f0d7b", "url": "https://github.com/DataDog/dd-trace-java/commit/1d1ffdebe714e13fab82e62edf9a1802048f0d7b", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)", "committedDate": "2020-09-18T09:20:33Z", "type": "forcePushed"}, {"oid": "d503e5bccf4532f5d966af94ab0d745bb7aacf25", "url": "https://github.com/DataDog/dd-trace-java/commit/d503e5bccf4532f5d966af94ab0d745bb7aacf25", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)", "committedDate": "2020-09-18T09:52:58Z", "type": "forcePushed"}, {"oid": "007003ff353fe95b2b2dc31c4e6afcf09858345d", "url": "https://github.com/DataDog/dd-trace-java/commit/007003ff353fe95b2b2dc31c4e6afcf09858345d", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)", "committedDate": "2020-09-18T10:04:27Z", "type": "forcePushed"}, {"oid": "22d05fe42174757e536c4e6489152c09c1f2b877", "url": "https://github.com/DataDog/dd-trace-java/commit/22d05fe42174757e536c4e6489152c09c1f2b877", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)", "committedDate": "2020-09-18T11:36:40Z", "type": "forcePushed"}, {"oid": "22d05fe42174757e536c4e6489152c09c1f2b877", "url": "https://github.com/DataDog/dd-trace-java/commit/22d05fe42174757e536c4e6489152c09c1f2b877", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)", "committedDate": "2020-09-18T11:36:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MzExMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490963113", "bodyText": "Thank you. I've been too lazy to do anything about these.", "author": "bantonsson", "createdAt": "2020-09-18T13:50:16Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/CallableWrapper.java", "diffHunk": "@@ -22,11 +22,13 @@ public Object call() throws Exception {\n   }\n \n   public static Callable<?> wrapIfNeeded(final Callable<?> task) {\n-    // We wrap only lambdas' anonymous classes and if given object has not already been wrapped.\n-    // Anonymous classes have '/' in class name which is not allowed in 'normal' classes.\n-    if (task.getClass().getName().contains(\"/\") && (!(task instanceof CallableWrapper))) {\n-      log.debug(\"Wrapping callable task {}\", task);\n-      return new CallableWrapper(task);\n+    if (!(task instanceof CallableWrapper)) {", "originalCommit": "800f646a659ae4263c73a8e11799e6d6638c4e46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NDMyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490964322", "bodyText": "Nice", "author": "bantonsson", "createdAt": "2020-09-18T13:52:01Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java", "diffHunk": "@@ -27,22 +27,22 @@\n    * Only apply executor instrumentation to whitelisted executors. To apply to all executors, use\n    * override setting above.\n    */\n-  private final Collection<String> WHITELISTED_EXECUTORS;\n+  private final Collection<String> PERMITTED_EXECUTORS;", "originalCommit": "800f646a659ae4263c73a8e11799e6d6638c4e46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d56602a2bc72c9c9405eca5cafce0d47c5d74da9", "chunk": "diff --git a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java\nindex d47970ad79..78ec84d493 100644\n--- a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java\n+++ b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java\n\n@@ -27,22 +27,22 @@ public abstract class AbstractExecutorInstrumentation extends Instrumenter.Defau\n    * Only apply executor instrumentation to whitelisted executors. To apply to all executors, use\n    * override setting above.\n    */\n-  private final Collection<String> PERMITTED_EXECUTORS;\n+  private final Collection<String> WHITELISTED_EXECUTORS;\n \n   /**\n    * Some frameworks have their executors defined as anon classes inside other classes. Referencing\n    * anon classes by name would be fragile, so instead we will use list of class prefix names. Since\n    * checking this list is more expensive (O(n)) we should try to keep it short.\n    */\n-  private final Collection<String> PERMITTED_EXECUTORS_PREFIXES;\n+  private final Collection<String> WHITELISTED_EXECUTORS_PREFIXES;\n \n   public AbstractExecutorInstrumentation(final String... additionalNames) {\n     super(EXEC_NAME, additionalNames);\n \n     if (TRACE_ALL_EXECUTORS) {\n       log.info(\"Tracing all executors enabled.\");\n-      PERMITTED_EXECUTORS = Collections.emptyList();\n-      PERMITTED_EXECUTORS_PREFIXES = Collections.emptyList();\n+      WHITELISTED_EXECUTORS = Collections.emptyList();\n+      WHITELISTED_EXECUTORS_PREFIXES = Collections.emptyList();\n     } else {\n       final String[] whitelist = {\n         \"akka.actor.ActorSystemImpl$$anon$1\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NjkxNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490966916", "bodyText": "How costly is this? I mean if you schedule something it probably isn't time critical, but anyway it's String comparisons.", "author": "bantonsson", "createdAt": "2020-09-18T13:55:58Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExecutorInstrumentationUtils;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ScheduledExecutorServiceInstrumentation extends Instrumenter.Default {\n+\n+  public ScheduledExecutorServiceInstrumentation() {\n+    super(\"java.util.concurrent.ScheduledThreadPoolExecutor\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // targeting the concrete type because it's an implementation detail\n+    // that this executor's submit calls schedule, and our instrumentation\n+    // is not idempotent\n+    return named(\"java.util.concurrent.ScheduledThreadPoolExecutor\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        named(\"schedule\").and(takesArgument(0, Runnable.class)),\n+        ScheduledExecutorServiceInstrumentation.class.getName() + \"$ScheduleRunnableAdvice\");\n+    transformers.put(\n+        named(\"schedule\").and(takesArgument(0, Callable.class)),\n+        ScheduledExecutorServiceInstrumentation.class.getName() + \"$ScheduleCallableAdvice\");\n+    return transformers;\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    final Map<String, String> map = new HashMap<>(4);\n+    map.put(Runnable.class.getName(), State.class.getName());\n+    map.put(Callable.class.getName(), State.class.getName());\n+    map.put(Future.class.getName(), State.class.getName());\n+    return Collections.unmodifiableMap(map);\n+  }\n+\n+  public static class ScheduleRunnableAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static State enterSchedule(\n+        @Advice.This final Executor executor,\n+        @Advice.Argument(value = 0, readOnly = false) Runnable task) {\n+      if (task.getClass().getName().startsWith(\"datadog.common.exec.\")) {\n+        // don't instrument our background tasks!\n+        return null;\n+      }\n+      final TraceScope scope = activeScope();\n+      task = new RunnableWrapper(task);\n+      final ContextStore<Runnable, State> contextStore =\n+          InstrumentationContext.get(Runnable.class, State.class);\n+      return ExecutorInstrumentationUtils.setupState(contextStore, task, scope);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void exitSchedule(\n+        @Advice.This final Executor executor,\n+        @Advice.Enter final State state,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Return final Future future) {\n+      if (state != null && future != null) {\n+        final ContextStore<Future, State> contextStore =\n+            InstrumentationContext.get(Future.class, State.class);\n+        contextStore.put(future, state);\n+      }\n+      ExecutorInstrumentationUtils.cleanUpOnMethodExit(executor, state, throwable);\n+    }\n+  }\n+\n+  public static class ScheduleCallableAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static State enterSchedule(\n+        @Advice.This final Executor executor,\n+        @Advice.Argument(value = 0, readOnly = false) Callable task) {\n+      if (task.getClass().getName().startsWith(\"datadog.common.exec.\")) {", "originalCommit": "800f646a659ae4263c73a8e11799e6d6638c4e46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2ODMzMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490968330", "bodyText": "Yes - @mcculls has a better solution to this which is for us not to use ScheduledExecutorService ourselves at all. This will disappear soon.", "author": "richardstartin", "createdAt": "2020-09-18T13:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NjkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3MjU2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490972568", "bodyText": "We also need to avoid instrumenting tasks from profiling system start up!", "author": "richardstartin", "createdAt": "2020-09-18T14:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NjkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NDAxMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490984012", "bodyText": "I've removing this, we can avoid this by checking if the active scope is defined or not", "author": "richardstartin", "createdAt": "2020-09-18T14:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NjkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "99bf6d878707148e723f9552f1051a9a0e48662d", "chunk": "diff --git a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java\nindex 1cbf13f969..c19baad51d 100644\n--- a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java\n+++ b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java\n\n@@ -66,15 +66,14 @@ public class ScheduledExecutorServiceInstrumentation extends Instrumenter.Defaul\n     public static State enterSchedule(\n         @Advice.This final Executor executor,\n         @Advice.Argument(value = 0, readOnly = false) Runnable task) {\n-      if (task.getClass().getName().startsWith(\"datadog.common.exec.\")) {\n-        // don't instrument our background tasks!\n-        return null;\n-      }\n       final TraceScope scope = activeScope();\n-      task = new RunnableWrapper(task);\n-      final ContextStore<Runnable, State> contextStore =\n-          InstrumentationContext.get(Runnable.class, State.class);\n-      return ExecutorInstrumentationUtils.setupState(contextStore, task, scope);\n+      if (null != scope) {\n+        task = new RunnableWrapper(task);\n+        final ContextStore<Runnable, State> contextStore =\n+            InstrumentationContext.get(Runnable.class, State.class);\n+        return ExecutorInstrumentationUtils.setupState(contextStore, task, scope);\n+      }\n+      return null;\n     }\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n"}}, {"oid": "99bf6d878707148e723f9552f1051a9a0e48662d", "url": "https://github.com/DataDog/dd-trace-java/commit/99bf6d878707148e723f9552f1051a9a0e48662d", "message": "defence against instrumenting our own background tasks", "committedDate": "2020-09-18T14:21:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNjAyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r491006024", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"java.util.concurrent.ScheduledThreadPoolExecutor\");\n          \n          \n            \n                super(\"java-concurrent\");", "author": "tylerbenson", "createdAt": "2020-09-18T14:54:53Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExecutorInstrumentationUtils;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ScheduledExecutorServiceInstrumentation extends Instrumenter.Default {\n+\n+  public ScheduledExecutorServiceInstrumentation() {\n+    super(\"java.util.concurrent.ScheduledThreadPoolExecutor\");", "originalCommit": "99bf6d878707148e723f9552f1051a9a0e48662d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNDQ4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r491014484", "bodyText": "well, it only instruments one specific implementation?", "author": "richardstartin", "createdAt": "2020-09-18T15:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNjAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1MjYwOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r491052609", "bodyText": "then it should be something like \"java-concurrent\", \"scheduled-threadpool-executor\" or something like that.", "author": "tylerbenson", "createdAt": "2020-09-18T16:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNjAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "bc27ab87f989b1df4af74011b73d62d8f9a044af", "chunk": "diff --git a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java\nindex c19baad51d..41231bb6ad 100644\n--- a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java\n+++ b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java\n\n@@ -28,7 +28,7 @@ import net.bytebuddy.matcher.ElementMatcher;\n public class ScheduledExecutorServiceInstrumentation extends Instrumenter.Default {\n \n   public ScheduledExecutorServiceInstrumentation() {\n-    super(\"java.util.concurrent.ScheduledThreadPoolExecutor\");\n+    super(\"java-concurrent\", \"scheduled-executor\");\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNzMzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r491007339", "bodyText": "Do we still want to keep the schedule method advice above?", "author": "tylerbenson", "createdAt": "2020-09-18T14:56:48Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaExecutorInstrumentation.java", "diffHunk": "@@ -81,6 +81,9 @@\n     public static State enterJobSubmit(\n         @Advice.This final Executor executor,\n         @Advice.Argument(value = 0, readOnly = false) Runnable task) {\n+      // there are cased like ScheduledExecutorService.submit (which we instrument)", "originalCommit": "99bf6d878707148e723f9552f1051a9a0e48662d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwODIzMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r491008231", "bodyText": "yes, for other executors. We can move them over one by one as we discover those where submit calls in to schedule", "author": "richardstartin", "createdAt": "2020-09-18T14:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNzMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d388f521693462404d0864c6c626ce04410674ce", "chunk": "diff --git a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaExecutorInstrumentation.java b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaExecutorInstrumentation.java\nindex a973576e91..036e83e916 100644\n--- a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaExecutorInstrumentation.java\n+++ b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaExecutorInstrumentation.java\n\n@@ -85,14 +85,16 @@ public final class JavaExecutorInstrumentation extends AbstractExecutorInstrumen\n       // which calls ScheduledExecutorService.schedule (which we also instrument)\n       // where all of this could be dodged the second time\n       final TraceScope scope = activeScope();\n-      final Runnable newTask = RunnableWrapper.wrapIfNeeded(task);\n-      // It is important to check potentially wrapped task if we can instrument task in this\n-      // executor. Some executors do not support wrapped tasks.\n-      if (ExecutorInstrumentationUtils.shouldAttachStateToTask(newTask, executor)) {\n-        task = newTask;\n-        final ContextStore<Runnable, State> contextStore =\n-            InstrumentationContext.get(Runnable.class, State.class);\n-        return ExecutorInstrumentationUtils.setupState(contextStore, newTask, scope);\n+      if (null != scope) {\n+        final Runnable newTask = RunnableWrapper.wrapIfNeeded(task);\n+        // It is important to check potentially wrapped task if we can instrument task in this\n+        // executor. Some executors do not support wrapped tasks.\n+        if (ExecutorInstrumentationUtils.shouldAttachStateToTask(newTask, executor)) {\n+          task = newTask;\n+          final ContextStore<Runnable, State> contextStore =\n+              InstrumentationContext.get(Runnable.class, State.class);\n+          return ExecutorInstrumentationUtils.setupState(contextStore, newTask, scope);\n+        }\n       }\n       return null;\n     }\n"}}, {"oid": "bc27ab87f989b1df4af74011b73d62d8f9a044af", "url": "https://github.com/DataDog/dd-trace-java/commit/bc27ab87f989b1df4af74011b73d62d8f9a044af", "message": "rename instrumentation", "committedDate": "2020-09-18T17:05:28Z", "type": "forcePushed"}, {"oid": "d1695417c7865943f4cc986011713c57be546b14", "url": "https://github.com/DataDog/dd-trace-java/commit/d1695417c7865943f4cc986011713c57be546b14", "message": "rename instrumentation", "committedDate": "2020-09-18T17:34:48Z", "type": "forcePushed"}, {"oid": "a552f88403246ce15a4baa70466c0f62e62c5b83", "url": "https://github.com/DataDog/dd-trace-java/commit/a552f88403246ce15a4baa70466c0f62e62c5b83", "message": "rename instrumentation", "committedDate": "2020-09-18T17:41:32Z", "type": "forcePushed"}, {"oid": "b9036d6134c2882709c149b8580d393b9b9c77d7", "url": "https://github.com/DataDog/dd-trace-java/commit/b9036d6134c2882709c149b8580d393b9b9c77d7", "message": "rename instrumentation", "committedDate": "2020-09-18T17:44:57Z", "type": "forcePushed"}, {"oid": "39d36af8fe2f5907a0c1973b6549f426e68c6ad6", "url": "https://github.com/DataDog/dd-trace-java/commit/39d36af8fe2f5907a0c1973b6549f426e68c6ad6", "message": "rename instrumentation", "committedDate": "2020-09-18T17:59:14Z", "type": "forcePushed"}, {"oid": "a9ae57d9e10db3852b4cf0c8e2a75f18dc761023", "url": "https://github.com/DataDog/dd-trace-java/commit/a9ae57d9e10db3852b4cf0c8e2a75f18dc761023", "message": "add test without spring async which fails more reliably", "committedDate": "2020-09-21T11:01:17Z", "type": "forcePushed"}, {"oid": "3eb0cc04c49b5452560197d87736d20a72185e56", "url": "https://github.com/DataDog/dd-trace-java/commit/3eb0cc04c49b5452560197d87736d20a72185e56", "message": "add test without spring async which fails more reliably", "committedDate": "2020-09-21T12:54:05Z", "type": "forcePushed"}, {"oid": "d388f521693462404d0864c6c626ce04410674ce", "url": "https://github.com/DataDog/dd-trace-java/commit/d388f521693462404d0864c6c626ce04410674ce", "message": "add test without spring async which fails more reliably", "committedDate": "2020-09-22T13:46:29Z", "type": "forcePushed"}, {"oid": "e839b02c53aec24795ca757dd83fa479be708b94", "url": "https://github.com/DataDog/dd-trace-java/commit/e839b02c53aec24795ca757dd83fa479be708b94", "message": "Add Reiterating RedefinitionStrategy\n\nThis ensures that any classes that may have been loaded by the agent in the process of transforming will also be given a chance to be instrumented in a subsequent pass.", "committedDate": "2020-09-23T10:52:32Z", "type": "forcePushed"}, {"oid": "3dc7f21d41519086a8268014d80d053f971c6808", "url": "https://github.com/DataDog/dd-trace-java/commit/3dc7f21d41519086a8268014d80d053f971c6808", "message": "Add Reiterating RedefinitionStrategy\n\nThis ensures that any classes that may have been loaded by the agent in the process of transforming will also be given a chance to be instrumented in a subsequent pass.", "committedDate": "2020-09-23T14:10:48Z", "type": "forcePushed"}, {"oid": "2797ed1bbdf7983911087b39677330de7f8f765b", "url": "https://github.com/DataDog/dd-trace-java/commit/2797ed1bbdf7983911087b39677330de7f8f765b", "message": "add test without spring async which fails more reliably", "committedDate": "2020-09-23T14:10:48Z", "type": "forcePushed"}, {"oid": "f94f286dee541a8e6ceec4154c71acebccbab1bc", "url": "https://github.com/DataDog/dd-trace-java/commit/f94f286dee541a8e6ceec4154c71acebccbab1bc", "message": "add test without spring async which fails more reliably", "committedDate": "2020-09-23T17:45:33Z", "type": "forcePushed"}, {"oid": "d56602a2bc72c9c9405eca5cafce0d47c5d74da9", "url": "https://github.com/DataDog/dd-trace-java/commit/d56602a2bc72c9c9405eca5cafce0d47c5d74da9", "message": "failing spanner client test (servlet spans lost)", "committedDate": "2020-09-24T13:39:56Z", "type": "commit"}, {"oid": "7690cfdfdb167c0b7268c5991560e2a1659d73fa", "url": "https://github.com/DataDog/dd-trace-java/commit/7690cfdfdb167c0b7268c5991560e2a1659d73fa", "message": "don't instrument ScheduledThreadPoolExecutor generically because submit calls schedule, implement specialised instrumentation for ScheduledThreadPoolExecutor", "committedDate": "2020-09-24T13:39:56Z", "type": "commit"}, {"oid": "5c57aef8a156bd1dd4b4488f2541969e2393d5e5", "url": "https://github.com/DataDog/dd-trace-java/commit/5c57aef8a156bd1dd4b4488f2541969e2393d5e5", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)", "committedDate": "2020-09-24T13:39:56Z", "type": "commit"}, {"oid": "4db7b36053d6fb8eee41d5785408df5b588a41bf", "url": "https://github.com/DataDog/dd-trace-java/commit/4db7b36053d6fb8eee41d5785408df5b588a41bf", "message": "defence against instrumenting our own background tasks", "committedDate": "2020-09-24T13:39:56Z", "type": "commit"}, {"oid": "5f7a96e9c867e050fa6c4120c70f8a885726a83c", "url": "https://github.com/DataDog/dd-trace-java/commit/5f7a96e9c867e050fa6c4120c70f8a885726a83c", "message": "rename instrumentation", "committedDate": "2020-09-24T13:39:56Z", "type": "commit"}, {"oid": "c701e286cd6668bec3feee3a7da199ab90904344", "url": "https://github.com/DataDog/dd-trace-java/commit/c701e286cd6668bec3feee3a7da199ab90904344", "message": "add test without spring async which fails more reliably", "committedDate": "2020-09-24T13:39:56Z", "type": "commit"}, {"oid": "c701e286cd6668bec3feee3a7da199ab90904344", "url": "https://github.com/DataDog/dd-trace-java/commit/c701e286cd6668bec3feee3a7da199ab90904344", "message": "add test without spring async which fails more reliably", "committedDate": "2020-09-24T13:39:56Z", "type": "forcePushed"}, {"oid": "9adb59447d3c212fb98663469b2a3e916a658be1", "url": "https://github.com/DataDog/dd-trace-java/commit/9adb59447d3c212fb98663469b2a3e916a658be1", "message": "don't eagerly wrap", "committedDate": "2020-09-24T18:56:12Z", "type": "commit"}, {"oid": "73998ba689f711c7c287a975a44b0e5e0007cc26", "url": "https://github.com/DataDog/dd-trace-java/commit/73998ba689f711c7c287a975a44b0e5e0007cc26", "message": "ignore spanner tests until PendingTrace continuation counting is dropped", "committedDate": "2020-09-24T18:56:56Z", "type": "commit"}]}