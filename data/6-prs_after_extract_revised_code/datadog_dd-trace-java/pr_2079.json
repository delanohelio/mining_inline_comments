{"pr_number": 2079, "pr_title": "tracing for ListIterator of kafka.ConsumerRecords", "pr_createdAt": "2020-11-16T13:14:20Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2079", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1OTI0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r524259243", "bodyText": "\ud83d\udc4d", "author": "richardstartin", "createdAt": "2020-11-16T13:16:11Z", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaConsumerInstrumentation.java", "diffHunk": "@@ -75,7 +75,8 @@ public KafkaConsumerInstrumentation() {\n   public static class IterableAdvice {\n \n     @Advice.OnMethodExit(suppress = Throwable.class)\n-    public static void wrap(@Advice.Return(readOnly = false) Iterable<ConsumerRecord> iterable) {\n+    public static void wrap(\n+        @Advice.Return(readOnly = false) Iterable<ConsumerRecord<?, ?>> iterable) {", "originalCommit": "1b9c5b7071720058d3558cd1869d81f0eade1e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1OTk0Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r524259946", "bodyText": "\ud83d\udc4d", "author": "richardstartin", "createdAt": "2020-11-16T13:17:19Z", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingListIterator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package datadog.trace.instrumentation.kafka_clients;\n+\n+import java.util.ListIterator;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+\n+public class TracingListIterator extends TracingIterator\n+    implements ListIterator<ConsumerRecord<?, ?>> {\n+\n+  private final ListIterator<ConsumerRecord<?, ?>> delegateIterator;\n+\n+  public TracingListIterator(\n+      ListIterator<ConsumerRecord<?, ?>> delegateIterator,\n+      CharSequence operationName,\n+      KafkaDecorator decorator) {", "originalCommit": "1b9c5b7071720058d3558cd1869d81f0eade1e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdef3a48486db9b2c58b5cd595e1ad695355e69a", "chunk": "diff --git a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingListIterator.java b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingListIterator.java\nindex 7edf8c1f23..e27ac1c9e7 100644\n--- a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingListIterator.java\n+++ b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingListIterator.java\n\n@@ -18,13 +18,13 @@ public class TracingListIterator extends TracingIterator\n \n   @Override\n   public boolean hasPrevious() {\n-    scopePreCheck();\n+    maybeClosePreviousIterationScope();\n     return delegateIterator.hasPrevious();\n   }\n \n   @Override\n   public ConsumerRecord<?, ?> previous() {\n-    scopePreCheck();\n+    maybeClosePreviousIterationScope();\n     final ConsumerRecord<?, ?> prev = delegateIterator.previous();\n     decorate(prev);\n     return prev;\n"}}, {"oid": "bdef3a48486db9b2c58b5cd595e1ad695355e69a", "url": "https://github.com/DataDog/dd-trace-java/commit/bdef3a48486db9b2c58b5cd595e1ad695355e69a", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-16T23:15:03Z", "type": "forcePushed"}, {"oid": "42240e96fd9fe1b36863cce950369d9ec5dfed91", "url": "https://github.com/DataDog/dd-trace-java/commit/42240e96fd9fe1b36863cce950369d9ec5dfed91", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-17T10:45:37Z", "type": "forcePushed"}, {"oid": "362766c1543763138eec076f48edff75d9ea134b", "url": "https://github.com/DataDog/dd-trace-java/commit/362766c1543763138eec076f48edff75d9ea134b", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-17T15:57:56Z", "type": "forcePushed"}, {"oid": "20f840db42d2ba87761be4ed89b336e42c24f8db", "url": "https://github.com/DataDog/dd-trace-java/commit/20f840db42d2ba87761be4ed89b336e42c24f8db", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-18T02:36:13Z", "type": "forcePushed"}, {"oid": "79f94e5bdb73a7232233f6ede3e8aa56ea71309d", "url": "https://github.com/DataDog/dd-trace-java/commit/79f94e5bdb73a7232233f6ede3e8aa56ea71309d", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-19T08:22:17Z", "type": "forcePushed"}, {"oid": "3edca41565dc5be5627491044adb73ed3dad4140", "url": "https://github.com/DataDog/dd-trace-java/commit/3edca41565dc5be5627491044adb73ed3dad4140", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-19T10:09:40Z", "type": "forcePushed"}, {"oid": "afc5a82a3c7d78ebe263bff98ef430a6a4a4db66", "url": "https://github.com/DataDog/dd-trace-java/commit/afc5a82a3c7d78ebe263bff98ef430a6a4a4db66", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-20T10:32:30Z", "type": "forcePushed"}, {"oid": "bb14e634f0535cafdd3bf7ed7479f62fa4a41e53", "url": "https://github.com/DataDog/dd-trace-java/commit/bb14e634f0535cafdd3bf7ed7479f62fa4a41e53", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-23T11:33:01Z", "type": "forcePushed"}, {"oid": "a91d0c9eb0d1dac7623f0c9faf38cc95b8e10edd", "url": "https://github.com/DataDog/dd-trace-java/commit/a91d0c9eb0d1dac7623f0c9faf38cc95b8e10edd", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-11-30T17:51:29Z", "type": "forcePushed"}, {"oid": "743049e5453369297208bb062a673f9bb9d06100", "url": "https://github.com/DataDog/dd-trace-java/commit/743049e5453369297208bb062a673f9bb9d06100", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-12-01T19:29:41Z", "type": "forcePushed"}, {"oid": "6cc871cc49a996c00eac5da4566bfe92c144c4ba", "url": "https://github.com/DataDog/dd-trace-java/commit/6cc871cc49a996c00eac5da4566bfe92c144c4ba", "message": "Formatting", "committedDate": "2020-12-03T02:53:49Z", "type": "forcePushed"}, {"oid": "7eb50115e072539471ddbd8ef5261e0343d0631a", "url": "https://github.com/DataDog/dd-trace-java/commit/7eb50115e072539471ddbd8ef5261e0343d0631a", "message": "Formatting", "committedDate": "2020-12-03T03:55:03Z", "type": "forcePushed"}, {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1", "url": "https://github.com/DataDog/dd-trace-java/commit/4ae89aafb6f5cfea37b988462aded10259cec6d1", "message": "Add 'TracingListIterator' to helper classes", "committedDate": "2020-12-04T08:22:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4NDIzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535984233", "bodyText": "does this need to be an atomic?", "author": "richardstartin", "createdAt": "2020-12-04T10:09:05Z", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -1,18 +1,26 @@\n package datadog.trace.instrumentation.kafka_clients;\n \n import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import org.apache.kafka.clients.consumer.ConsumerRecord;\n \n-public class TracingList extends TracingIterable implements List<ConsumerRecord> {\n-  private final List<ConsumerRecord> delegate;\n+public class TracingList implements List<ConsumerRecord<?, ?>> {\n+  private final List<ConsumerRecord<?, ?>> delegate;\n+  private final CharSequence operationName;\n+  private final KafkaDecorator decorator;\n+\n+  // TODO: not thread safe wrapping\n+  //  in case of batch consumer and requesting iterator of consumed list from different threads\n+  private boolean firstIteration = true;", "originalCommit": "4ae89aafb6f5cfea37b988462aded10259cec6d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NzczNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535997736", "bodyText": "wasn't before:\nhttps://github.com/DataDog/dd-trace-java/blob/master/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterable.java#L27", "author": "lpriima", "createdAt": "2020-12-04T10:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4NDIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "6c4960143d4ecf2536ca33248efd1154f0822b7b", "chunk": "diff --git a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\nindex ac60d64801..2a61bd99b3 100644\n--- a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\n+++ b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\n\n@@ -4,16 +4,14 @@ import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import org.apache.kafka.clients.consumer.ConsumerRecord;\n \n public class TracingList implements List<ConsumerRecord<?, ?>> {\n   private final List<ConsumerRecord<?, ?>> delegate;\n   private final CharSequence operationName;\n   private final KafkaDecorator decorator;\n-\n-  // TODO: not thread safe wrapping\n-  //  in case of batch consumer and requesting iterator of consumed list from different threads\n-  private boolean firstIteration = true;\n+  private final AtomicBoolean firstIteration = new AtomicBoolean(true);\n \n   public TracingList(\n       final List<ConsumerRecord<?, ?>> delegate,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4NDQ3OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535984478", "bodyText": "should this be a cas?", "author": "richardstartin", "createdAt": "2020-12-04T10:09:26Z", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -113,25 +126,25 @@ public int lastIndexOf(final Object o) {\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator() {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator();\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator() {\n+    return listIterator(0);\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator(final int index) {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator(index);\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n+    final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n+    if (firstIteration) {\n+      maybeTracingListIterator =\n+          new TracingListIterator(delegate.listIterator(index), operationName, decorator);\n+      firstIteration = false;", "originalCommit": "4ae89aafb6f5cfea37b988462aded10259cec6d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c4960143d4ecf2536ca33248efd1154f0822b7b", "chunk": "diff --git a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\nindex ac60d64801..2a61bd99b3 100644\n--- a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\n+++ b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\n\n@@ -133,10 +131,9 @@ public class TracingList implements List<ConsumerRecord<?, ?>> {\n   @Override\n   public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n     final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n-    if (firstIteration) {\n+    if (firstIteration.compareAndSet(true, false)) {\n       maybeTracingListIterator =\n           new TracingListIterator(delegate.listIterator(index), operationName, decorator);\n-      firstIteration = false;\n     } else {\n       maybeTracingListIterator = delegate.listIterator(index);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NDI1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535994252", "bodyText": "Shouldn't we only call maybeClosePreviousIterationScope() if delegateIterator.hasNext() returns false? I mean you could call hasNext() and still do some work before you call next().", "author": "bantonsson", "createdAt": "2020-12-04T10:24:41Z", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterator.java", "diffHunk": "@@ -36,40 +36,43 @@ public TracingIterator(\n \n   @Override\n   public boolean hasNext() {\n-    if (currentScope != null) {\n-      finish();\n-    }\n+    maybeClosePreviousIterationScope();\n     return delegateIterator.hasNext();", "originalCommit": "4ae89aafb6f5cfea37b988462aded10259cec6d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5Mjk0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r538192942", "bodyText": "Thanks. I think your suggestion covers more cases.", "author": "lpriima", "createdAt": "2020-12-08T09:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NDI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6c4960143d4ecf2536ca33248efd1154f0822b7b", "chunk": "diff --git a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterator.java b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterator.java\nindex 59aa8e524b..e03ab8d3be 100644\n--- a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterator.java\n+++ b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterator.java\n\n@@ -36,24 +36,18 @@ public class TracingIterator implements Iterator<ConsumerRecord<?, ?>> {\n \n   @Override\n   public boolean hasNext() {\n-    maybeClosePreviousIterationScope();\n+    maybeCloseCurrentScope();\n     return delegateIterator.hasNext();\n   }\n \n   @Override\n   public ConsumerRecord<?, ?> next() {\n-    maybeClosePreviousIterationScope(); // in case they didn't call hasNext()...\n+    maybeCloseCurrentScope(); // in case they didn't call hasNext()...\n     final ConsumerRecord<?, ?> next = delegateIterator.next();\n     decorate(next);\n     return next;\n   }\n \n-  protected void maybeClosePreviousIterationScope() {\n-    if (currentScope != null) {\n-      finish();\n-    }\n-  }\n-\n   protected void decorate(ConsumerRecord<?, ?> val) {\n     try {\n       if (val != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODk2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535998966", "bodyText": "I'm curious why we only do tracing on the first iterator. What is the rationale?", "author": "bantonsson", "createdAt": "2020-12-04T10:32:24Z", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -113,25 +126,25 @@ public int lastIndexOf(final Object o) {\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator() {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator();\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator() {\n+    return listIterator(0);\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator(final int index) {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator(index);\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n+    final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n+    if (firstIteration) {", "originalCommit": "4ae89aafb6f5cfea37b988462aded10259cec6d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMTA2OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r536021069", "bodyText": "rationale here is the \"hope\" that iteration will be performed only once in thread:\nhttps://github.com/DataDog/dd-trace-java/blob/master/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterable.java#L25\nthat's the assumption so far.", "author": "lpriima", "createdAt": "2020-12-04T11:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMzc2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r536023768", "bodyText": "Yes, I get that, but what is the downside of always returning a TracingListIterator?", "author": "bantonsson", "createdAt": "2020-12-04T11:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3ODgyMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r538178821", "bodyText": "every iteration will add spans. No obvious downsides which I can see. I think the instrumentation before supported only the very basic code pattern. I've changed it.", "author": "lpriima", "createdAt": "2020-12-08T09:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6c4960143d4ecf2536ca33248efd1154f0822b7b", "chunk": "diff --git a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\nindex ac60d64801..2a61bd99b3 100644\n--- a/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\n+++ b/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java\n\n@@ -133,10 +131,9 @@ public class TracingList implements List<ConsumerRecord<?, ?>> {\n   @Override\n   public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n     final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n-    if (firstIteration) {\n+    if (firstIteration.compareAndSet(true, false)) {\n       maybeTracingListIterator =\n           new TracingListIterator(delegate.listIterator(index), operationName, decorator);\n-      firstIteration = false;\n     } else {\n       maybeTracingListIterator = delegate.listIterator(index);\n     }\n"}}, {"oid": "6c4960143d4ecf2536ca33248efd1154f0822b7b", "url": "https://github.com/DataDog/dd-trace-java/commit/6c4960143d4ecf2536ca33248efd1154f0822b7b", "message": "make ConsumerRecord Iterator wrapping thread safe", "committedDate": "2020-12-07T06:44:54Z", "type": "forcePushed"}, {"oid": "1ab19f2abef7c49e408978f0b3b1f11af373408b", "url": "https://github.com/DataDog/dd-trace-java/commit/1ab19f2abef7c49e408978f0b3b1f11af373408b", "message": "Close scope inside hasNext() and hasPrevious() only for last iteration", "committedDate": "2020-12-08T09:55:42Z", "type": "forcePushed"}, {"oid": "c8a48efcc2fa947d00bb7b0762582bcaeb1c0cee", "url": "https://github.com/DataDog/dd-trace-java/commit/c8a48efcc2fa947d00bb7b0762582bcaeb1c0cee", "message": "Close scope inside hasNext() and hasPrevious() only for last iteration", "committedDate": "2020-12-08T09:57:20Z", "type": "forcePushed"}, {"oid": "455272289171a7b62c15f648d392de572ac15bd5", "url": "https://github.com/DataDog/dd-trace-java/commit/455272289171a7b62c15f648d392de572ac15bd5", "message": "Close scope inside hasNext() and hasPrevious() only for last iteration", "committedDate": "2020-12-08T20:56:42Z", "type": "forcePushed"}, {"oid": "7c7e298a208de0f574a8cbd479ccd78ee9f8c03e", "url": "https://github.com/DataDog/dd-trace-java/commit/7c7e298a208de0f574a8cbd479ccd78ee9f8c03e", "message": "test iteration backwards over ConsumerRecords", "committedDate": "2020-12-09T09:41:29Z", "type": "forcePushed"}, {"oid": "3f70943504de6faa0a91d6ba84a8bc0510437828", "url": "https://github.com/DataDog/dd-trace-java/commit/3f70943504de6faa0a91d6ba84a8bc0510437828", "message": "tracing for ListIterator of kafka.ConsumerRecords", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "b86a6a8b2bb96cf74160f6272bfd53ad7704cb38", "url": "https://github.com/DataDog/dd-trace-java/commit/b86a6a8b2bb96cf74160f6272bfd53ad7704cb38", "message": "bach consumer kafka test improvement", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "36b2a2aa45d304a747fc476271bfb63f31433986", "url": "https://github.com/DataDog/dd-trace-java/commit/36b2a2aa45d304a747fc476271bfb63f31433986", "message": "Formatting", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "d168a6e9e0d11cb6948ced17801544fb1602dfcc", "url": "https://github.com/DataDog/dd-trace-java/commit/d168a6e9e0d11cb6948ced17801544fb1602dfcc", "message": "check batch consumtion out of order", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "a539edea2bbd90d245d9f083f1375d63b301686e", "url": "https://github.com/DataDog/dd-trace-java/commit/a539edea2bbd90d245d9f083f1375d63b301686e", "message": "Add 'TracingListIterator' to helper classes", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "6e1b04405ed9a0fb4c43483f2414fe86948885a5", "url": "https://github.com/DataDog/dd-trace-java/commit/6e1b04405ed9a0fb4c43483f2414fe86948885a5", "message": "make ConsumerRecord Iterator wrapping thread safe", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "4a2d12c35402507c1e64e568010ab32a14fa308d", "url": "https://github.com/DataDog/dd-trace-java/commit/4a2d12c35402507c1e64e568010ab32a14fa308d", "message": "Return tracing iterator every time for ConsumerRecords", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "9d87ca9826038870266ba7ee0935e7460e772081", "url": "https://github.com/DataDog/dd-trace-java/commit/9d87ca9826038870266ba7ee0935e7460e772081", "message": "Close scope inside hasNext() and hasPrevious() only for last iteration", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "3c019b7c56d85c37dd7848f8fdd25dff2fe3f8ad", "url": "https://github.com/DataDog/dd-trace-java/commit/3c019b7c56d85c37dd7848f8fdd25dff2fe3f8ad", "message": "test iteration backwards over ConsumerRecords", "committedDate": "2020-12-09T09:51:17Z", "type": "commit"}, {"oid": "3c019b7c56d85c37dd7848f8fdd25dff2fe3f8ad", "url": "https://github.com/DataDog/dd-trace-java/commit/3c019b7c56d85c37dd7848f8fdd25dff2fe3f8ad", "message": "test iteration backwards over ConsumerRecords", "committedDate": "2020-12-09T09:51:17Z", "type": "forcePushed"}]}