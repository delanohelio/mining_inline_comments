{"pr_number": 2171, "pr_title": "Extend DD_TRACE_METHODS to support wildcarded method argument", "pr_createdAt": "2020-12-07T20:40:47Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2171", "timeline": [{"oid": "2d9572cb4a3b6a4a1a94d45db44efd9e4f2250c7", "url": "https://github.com/DataDog/dd-trace-java/commit/2d9572cb4a3b6a4a1a94d45db44efd9e4f2250c7", "message": "add support for wildcards in place of method names", "committedDate": "2020-12-07T14:43:22Z", "type": "commit"}, {"oid": "b52bf35d59013908ce1965105ebe800445312071", "url": "https://github.com/DataDog/dd-trace-java/commit/b52bf35d59013908ce1965105ebe800445312071", "message": "update warning message", "committedDate": "2020-12-07T15:19:45Z", "type": "commit"}, {"oid": "9f4aa9692c1fc929143a8ddea9963f0a8c7f3fc8", "url": "https://github.com/DataDog/dd-trace-java/commit/9f4aa9692c1fc929143a8ddea9963f0a8c7f3fc8", "message": "update transformer to support wildcard method config", "committedDate": "2020-12-07T20:38:05Z", "type": "commit"}, {"oid": "f92321762c017e1fb2e79fc518ca877941712c6e", "url": "https://github.com/DataDog/dd-trace-java/commit/f92321762c017e1fb2e79fc518ca877941712c6e", "message": "spotless", "committedDate": "2020-12-07T20:39:40Z", "type": "commit"}, {"oid": "2953126bca8da2546f5414b06dd1512a3fa2f2e8", "url": "https://github.com/DataDog/dd-trace-java/commit/2953126bca8da2546f5414b06dd1512a3fa2f2e8", "message": "add private method support", "committedDate": "2020-12-07T22:34:25Z", "type": "commit"}, {"oid": "e1b7c077f8a816332c0593bc51de89e414326ac4", "url": "https://github.com/DataDog/dd-trace-java/commit/e1b7c077f8a816332c0593bc51de89e414326ac4", "message": "fix instrumentation and add initial test", "committedDate": "2020-12-08T22:39:26Z", "type": "commit"}, {"oid": "6c36c63f4baff6c06722e77b94d0f90bcd5a9578", "url": "https://github.com/DataDog/dd-trace-java/commit/6c36c63f4baff6c06722e77b94d0f90bcd5a9578", "message": "add configtest", "committedDate": "2020-12-09T03:04:12Z", "type": "commit"}, {"oid": "55b930ce5c66d9cdc192c91b18e8d9cf6b4efbb3", "url": "https://github.com/DataDog/dd-trace-java/commit/55b930ce5c66d9cdc192c91b18e8d9cf6b4efbb3", "message": "experiment with any()", "committedDate": "2020-12-09T16:08:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3OTAwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r539479008", "bodyText": "I think toString should also be included, along with getters and setters.", "author": "tylerbenson", "createdAt": "2020-12-09T16:57:55Z", "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -147,7 +148,11 @@ public TracerClassInstrumentation(final String className, final Set<String> meth\n       ElementMatcher.Junction<MethodDescription> methodMatchers = null;\n       for (final String methodName : methodNames) {\n         if (methodMatchers == null) {\n-          methodMatchers = named(methodName);\n+          if (methodName.equals(\"*\")) {\n+            methodMatchers = not(isAbstract()).and(noneOf(\"hashCode\", \"equals\"));", "originalCommit": "6c36c63f4baff6c06722e77b94d0f90bcd5a9578", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0400ec31b8510ff4f571ed0f18890f49b67963b", "chunk": "diff --git a/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java b/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\nindex 3d1e08077f..c5e826c3d7 100644\n--- a/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\n+++ b/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\n\n@@ -149,7 +149,13 @@ public class TraceConfigInstrumentation implements Instrumenter {\n       for (final String methodName : methodNames) {\n         if (methodMatchers == null) {\n           if (methodName.equals(\"*\")) {\n-            methodMatchers = not(isAbstract()).and(noneOf(\"hashCode\", \"equals\"));\n+            methodMatchers =\n+                not(\n+                    isHashCode()\n+                        .or(isEquals())\n+                        .or(isToString())\n+                        .or(isConstructor())\n+                        .or(isSynthetic()));\n           } else {\n             methodMatchers = named(methodName);\n           }\n"}}, {"oid": "b0400ec31b8510ff4f571ed0f18890f49b67963b", "url": "https://github.com/DataDog/dd-trace-java/commit/b0400ec31b8510ff4f571ed0f18890f49b67963b", "message": "modify element matchers and add initial tests", "committedDate": "2020-12-09T19:48:16Z", "type": "commit"}, {"oid": "e03d8d51303ad04feafb134a90f0536cf1a0beba", "url": "https://github.com/DataDog/dd-trace-java/commit/e03d8d51303ad04feafb134a90f0536cf1a0beba", "message": "add testing for interfaces and abstract classes", "committedDate": "2020-12-09T21:05:04Z", "type": "commit"}, {"oid": "4fa87428e2d64e715193a267b708f3e083c61411", "url": "https://github.com/DataDog/dd-trace-java/commit/4fa87428e2d64e715193a267b708f3e083c61411", "message": "accommodate codenarc tests", "committedDate": "2020-12-09T22:29:53Z", "type": "commit"}, {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c", "url": "https://github.com/DataDog/dd-trace-java/commit/d05ba728d9b1eb9cab05b64952483b174817770c", "message": "codenarc", "committedDate": "2020-12-10T00:32:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTM5MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r539849391", "bodyText": "I thought spotless check should fail on star imports ...", "author": "lpriima", "createdAt": "2020-12-10T05:09:27Z", "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -2,7 +2,7 @@\n \n import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.*;", "originalCommit": "d05ba728d9b1eb9cab05b64952483b174817770c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2MzQ1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540063456", "bodyText": "it's a limitation of spotless, but you can add a custom rule for this: diffplug/spotless#240 (comment)", "author": "mcculls", "createdAt": "2020-12-10T10:43:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2NDQwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540064408", "bodyText": "@ziquanmiao could you change this wildcard import to explicit imports of the used types?", "author": "mcculls", "createdAt": "2020-12-10T10:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIwNDE5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540204197", "bodyText": "ill fix and explicitly import the ones I use", "author": "ziquanmiao", "createdAt": "2020-12-10T14:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ec3295ee4e3ec265f79adf228de8f240359b00d1", "chunk": "diff --git a/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java b/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\nindex c5e826c3d7..275b1fc010 100644\n--- a/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\n+++ b/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\n\n@@ -2,7 +2,14 @@ package datadog.trace.instrumentation.trace_annotation;\n \n import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n-import static net.bytebuddy.matcher.ElementMatchers.*;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isEquals;\n+import static net.bytebuddy.matcher.ElementMatchers.isFinalizer;\n+import static net.bytebuddy.matcher.ElementMatchers.isHashCode;\n+import static net.bytebuddy.matcher.ElementMatchers.isSynthetic;\n+import static net.bytebuddy.matcher.ElementMatchers.isToString;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n \n import com.google.auto.service.AutoService;\n import datadog.trace.agent.tooling.Instrumenter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2NjgxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540066814", "bodyText": "This now accepts spaces in package/class names which doesn't sound right", "author": "mcculls", "createdAt": "2020-12-10T10:48:24Z", "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -32,8 +32,9 @@\n @AutoService(Instrumenter.class)\n public class TraceConfigInstrumentation implements Instrumenter {\n \n-  static final String PACKAGE_CLASS_NAME_REGEX = \"[\\\\w.\\\\$]+\";\n-  private static final String METHOD_LIST_REGEX = \"\\\\s*(?:\\\\w+\\\\s*,)*\\\\s*(?:\\\\w+\\\\s*,?)\\\\s*\";\n+  static final String PACKAGE_CLASS_NAME_REGEX = \"[\\\\w .\\\\$]+\";", "originalCommit": "d05ba728d9b1eb9cab05b64952483b174817770c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec3295ee4e3ec265f79adf228de8f240359b00d1", "chunk": "diff --git a/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java b/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\nindex c5e826c3d7..275b1fc010 100644\n--- a/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\n+++ b/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\n\n@@ -32,7 +39,7 @@ import net.bytebuddy.matcher.ElementMatcher;\n @AutoService(Instrumenter.class)\n public class TraceConfigInstrumentation implements Instrumenter {\n \n-  static final String PACKAGE_CLASS_NAME_REGEX = \"[\\\\w .\\\\$]+\";\n+  static final String PACKAGE_CLASS_NAME_REGEX = \"[\\\\w.\\\\$]+\";\n   private static final String METHOD_LIST_REGEX =\n       \"\\\\s*(?:\\\\*|(?:\\\\w+\\\\s*,)*\\\\s*(?:\\\\w+\\\\s*,?))\\\\s*\";\n   private static final String CONFIG_FORMAT =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MDgzNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540070834", "bodyText": "I'd also add isFinalizer because I've seen issues intercepting that in the past on other AOP systems", "author": "mcculls", "createdAt": "2020-12-10T10:54:18Z", "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -147,7 +148,17 @@ public TracerClassInstrumentation(final String className, final Set<String> meth\n       ElementMatcher.Junction<MethodDescription> methodMatchers = null;\n       for (final String methodName : methodNames) {\n         if (methodMatchers == null) {\n-          methodMatchers = named(methodName);\n+          if (methodName.equals(\"*\")) {\n+            methodMatchers =\n+                not(\n+                    isHashCode()\n+                        .or(isEquals())\n+                        .or(isToString())\n+                        .or(isConstructor())\n+                        .or(isSynthetic()));", "originalCommit": "d05ba728d9b1eb9cab05b64952483b174817770c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcxMzI5OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540713299", "bodyText": "and test that calls each of these method types and no span is created", "author": "lpriima", "createdAt": "2020-12-11T06:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MDgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ec3295ee4e3ec265f79adf228de8f240359b00d1", "chunk": "diff --git a/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java b/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\nindex c5e826c3d7..275b1fc010 100644\n--- a/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\n+++ b/dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java\n\n@@ -154,6 +161,7 @@ public class TraceConfigInstrumentation implements Instrumenter {\n                     isHashCode()\n                         .or(isEquals())\n                         .or(isToString())\n+                        .or(isFinalizer())\n                         .or(isConstructor())\n                         .or(isSynthetic()));\n           } else {\n"}}, {"oid": "ec3295ee4e3ec265f79adf228de8f240359b00d1", "url": "https://github.com/DataDog/dd-trace-java/commit/ec3295ee4e3ec265f79adf228de8f240359b00d1", "message": "explicit imports, remove whitespace, add finalizer support", "committedDate": "2020-12-10T14:35:33Z", "type": "commit"}, {"oid": "b7ed8609fb728047ed706e1ea31e2b89e44ecb22", "url": "https://github.com/DataDog/dd-trace-java/commit/b7ed8609fb728047ed706e1ea31e2b89e44ecb22", "message": "ignore getters and setters and update test for abstract classes", "committedDate": "2020-12-10T21:18:03Z", "type": "commit"}, {"oid": "8154b28be90bce063299bf52386aab50d2e3b0d7", "url": "https://github.com/DataDog/dd-trace-java/commit/8154b28be90bce063299bf52386aab50d2e3b0d7", "message": "accommodate interface tests", "committedDate": "2020-12-10T22:47:14Z", "type": "commit"}, {"oid": "dd8de9e3b842821099670c76eff811e7ac864fd1", "url": "https://github.com/DataDog/dd-trace-java/commit/dd8de9e3b842821099670c76eff811e7ac864fd1", "message": "add more tests", "committedDate": "2020-12-11T16:27:59Z", "type": "commit"}, {"oid": "a34065a97293c18cddf3ccff60d7fe5cb4fc3a35", "url": "https://github.com/DataDog/dd-trace-java/commit/a34065a97293c18cddf3ccff60d7fe5cb4fc3a35", "message": "fix codenarc test failure", "committedDate": "2020-12-11T18:58:07Z", "type": "commit"}]}