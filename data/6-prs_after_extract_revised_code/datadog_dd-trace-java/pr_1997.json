{"pr_number": 1997, "pr_title": "Add Scala Controllers and Actions to Play smoke tests", "pr_createdAt": "2020-10-16T12:47:13Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1997", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MzEzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506383139", "bodyText": "invokeExact?", "author": "richardstartin", "createdAt": "2020-10-16T12:53:31Z", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+    }\n+    if (apply != null) {\n+      try {\n+        MethodType mt = MethodType.methodType(RequestHeader.class, String.class, String.class);\n+        withTag = lookup.findVirtual(RequestHeader.class, \"withTag\", mt);\n+      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+      }\n+    }\n+    WITH_TAG = withTag;\n+    APPLY = apply;\n+  }\n+\n+  public static Request withTag(final Request request, final String key, final String value) {\n+    Request newRequest = request;\n+    if (APPLY != null) {\n+      try {\n+        RequestHeader newHeader = request;\n+        if (WITH_TAG != null) {\n+          newHeader = (RequestHeader) WITH_TAG.invoke(request, key, value);", "originalCommit": "27cf65c83fec846e8436d1b65c6e4c1168a47813", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2MzU3OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506563578", "bodyText": "Absolutely.", "author": "bantonsson", "createdAt": "2020-10-16T15:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MzEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "chunk": "diff --git a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java b/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\nindex 5b3c76bdde..0e9d829309 100644\n--- a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\n+++ b/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\n\n@@ -42,12 +42,13 @@ public class RequestHelper {\n       try {\n         RequestHeader newHeader = request;\n         if (WITH_TAG != null) {\n-          newHeader = (RequestHeader) WITH_TAG.invoke(request, key, value);\n+          newHeader = (RequestHeader) WITH_TAG.invokeExact((RequestHeader) request, key, value);\n         } else {\n           newHeader = Play24WithTag.withTag(request, key, value);\n         }\n         if (newHeader != newRequest) {\n-          newRequest = (Request) APPLY.invoke(Request$.MODULE$, newHeader, request.body());\n+          // This is calling the apply method on the Scala `object` `Request`\n+          newRequest = (Request) APPLY.invokeExact(Request$.MODULE$, newHeader, request.body());\n         }\n       } catch (Throwable ignored) {\n       }\n"}}, {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "url": "https://github.com/DataDog/dd-trace-java/commit/676bb5fc6c62416a6ac64a160304c889621d8a8f", "message": "Don't add multiple play.request spans for play 2.4+", "committedDate": "2020-10-16T15:48:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0Njc5MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506646791", "bodyText": "Could you add a comment here when you'd expect the lookup to fail?", "author": "tylerbenson", "createdAt": "2020-10-16T18:15:59Z", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {", "originalCommit": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMjIzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507502239", "bodyText": "Sure, I'll add a comment that we actually don't expect this to fail.", "author": "bantonsson", "createdAt": "2020-10-19T06:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0Njc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "chunk": "diff --git a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java b/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\ndeleted file mode 100644\nindex 0e9d829309..0000000000\n--- a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\n+++ /dev/null\n\n@@ -1,120 +0,0 @@\n-package datadog.trace.instrumentation.play24;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import java.util.function.Supplier;\n-import play.api.mvc.Headers;\n-import play.api.mvc.Request;\n-import play.api.mvc.Request$;\n-import play.api.mvc.RequestHeader;\n-import scala.Function0;\n-import scala.collection.immutable.Map;\n-import scala.runtime.AbstractFunction0;\n-\n-public class RequestHelper {\n-  private static final MethodHandle WITH_TAG;\n-  private static final MethodHandle APPLY;\n-\n-  static {\n-    MethodHandle withTag = null;\n-    MethodHandle apply = null;\n-    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n-    try {\n-      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n-      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n-    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-    }\n-    if (apply != null) {\n-      try {\n-        MethodType mt = MethodType.methodType(RequestHeader.class, String.class, String.class);\n-        withTag = lookup.findVirtual(RequestHeader.class, \"withTag\", mt);\n-      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-      }\n-    }\n-    WITH_TAG = withTag;\n-    APPLY = apply;\n-  }\n-\n-  public static Request withTag(final Request request, final String key, final String value) {\n-    Request newRequest = request;\n-    if (APPLY != null) {\n-      try {\n-        RequestHeader newHeader = request;\n-        if (WITH_TAG != null) {\n-          newHeader = (RequestHeader) WITH_TAG.invokeExact((RequestHeader) request, key, value);\n-        } else {\n-          newHeader = Play24WithTag.withTag(request, key, value);\n-        }\n-        if (newHeader != newRequest) {\n-          // This is calling the apply method on the Scala `object` `Request`\n-          newRequest = (Request) APPLY.invokeExact(Request$.MODULE$, newHeader, request.body());\n-        }\n-      } catch (Throwable ignored) {\n-      }\n-    }\n-    return newRequest;\n-  }\n-\n-  public static final class Play24WithTag {\n-    private static final MethodHandle COPY;\n-\n-    static {\n-      MethodHandle copy = null;\n-      MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n-      try {\n-        Class<?> m = Map.class;\n-        Class<?> s = String.class;\n-        Class<?> f = Function0.class;\n-        MethodType mt =\n-            MethodType.methodType(\n-                RequestHeader.class, long.class, m, s, s, s, s, m, Headers.class, f, f);\n-        copy = lookup.findVirtual(RequestHeader.class, \"copy\", mt);\n-      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-      }\n-      COPY = copy;\n-    }\n-\n-    public static RequestHeader withTag(\n-        final RequestHeader header, final String key, final String value) {\n-      RequestHeader newHeader = header;\n-      if (COPY != null) {\n-        try {\n-          newHeader =\n-              (RequestHeader)\n-                  COPY.invokeExact(\n-                      header,\n-                      header.id(),\n-                      header.tags().updated(key, value),\n-                      header.uri(),\n-                      header.path(),\n-                      header.method(),\n-                      header.version(),\n-                      header.queryString(),\n-                      header.headers(),\n-                      (Function0) SFunction0.from(header::remoteAddress),\n-                      (Function0) SFunction0.from(header::secure));\n-        } catch (Throwable ignore) {\n-        }\n-      }\n-      return newHeader;\n-    }\n-  }\n-\n-  public static class SFunction0<T> extends AbstractFunction0<T> {\n-    private final Supplier<T> supplier;\n-\n-    public static <A> SFunction0<A> from(final Supplier<A> supplier) {\n-      return new SFunction0<>(supplier);\n-    }\n-\n-    private SFunction0(final Supplier<T> supplier) {\n-      this.supplier = supplier;\n-    }\n-\n-    @Override\n-    public T apply() {\n-      return supplier.get();\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzE2Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506647163", "bodyText": "Would this be better in the catch instead?", "author": "tylerbenson", "createdAt": "2020-10-16T18:16:44Z", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+    }\n+    if (apply != null) {", "originalCommit": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNTIyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507505220", "bodyText": "It's checking for the opposite, i.e. that we found apply, and only then do we try to find the withTag method.", "author": "bantonsson", "createdAt": "2020-10-19T06:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "chunk": "diff --git a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java b/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\ndeleted file mode 100644\nindex 0e9d829309..0000000000\n--- a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\n+++ /dev/null\n\n@@ -1,120 +0,0 @@\n-package datadog.trace.instrumentation.play24;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import java.util.function.Supplier;\n-import play.api.mvc.Headers;\n-import play.api.mvc.Request;\n-import play.api.mvc.Request$;\n-import play.api.mvc.RequestHeader;\n-import scala.Function0;\n-import scala.collection.immutable.Map;\n-import scala.runtime.AbstractFunction0;\n-\n-public class RequestHelper {\n-  private static final MethodHandle WITH_TAG;\n-  private static final MethodHandle APPLY;\n-\n-  static {\n-    MethodHandle withTag = null;\n-    MethodHandle apply = null;\n-    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n-    try {\n-      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n-      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n-    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-    }\n-    if (apply != null) {\n-      try {\n-        MethodType mt = MethodType.methodType(RequestHeader.class, String.class, String.class);\n-        withTag = lookup.findVirtual(RequestHeader.class, \"withTag\", mt);\n-      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-      }\n-    }\n-    WITH_TAG = withTag;\n-    APPLY = apply;\n-  }\n-\n-  public static Request withTag(final Request request, final String key, final String value) {\n-    Request newRequest = request;\n-    if (APPLY != null) {\n-      try {\n-        RequestHeader newHeader = request;\n-        if (WITH_TAG != null) {\n-          newHeader = (RequestHeader) WITH_TAG.invokeExact((RequestHeader) request, key, value);\n-        } else {\n-          newHeader = Play24WithTag.withTag(request, key, value);\n-        }\n-        if (newHeader != newRequest) {\n-          // This is calling the apply method on the Scala `object` `Request`\n-          newRequest = (Request) APPLY.invokeExact(Request$.MODULE$, newHeader, request.body());\n-        }\n-      } catch (Throwable ignored) {\n-      }\n-    }\n-    return newRequest;\n-  }\n-\n-  public static final class Play24WithTag {\n-    private static final MethodHandle COPY;\n-\n-    static {\n-      MethodHandle copy = null;\n-      MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n-      try {\n-        Class<?> m = Map.class;\n-        Class<?> s = String.class;\n-        Class<?> f = Function0.class;\n-        MethodType mt =\n-            MethodType.methodType(\n-                RequestHeader.class, long.class, m, s, s, s, s, m, Headers.class, f, f);\n-        copy = lookup.findVirtual(RequestHeader.class, \"copy\", mt);\n-      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-      }\n-      COPY = copy;\n-    }\n-\n-    public static RequestHeader withTag(\n-        final RequestHeader header, final String key, final String value) {\n-      RequestHeader newHeader = header;\n-      if (COPY != null) {\n-        try {\n-          newHeader =\n-              (RequestHeader)\n-                  COPY.invokeExact(\n-                      header,\n-                      header.id(),\n-                      header.tags().updated(key, value),\n-                      header.uri(),\n-                      header.path(),\n-                      header.method(),\n-                      header.version(),\n-                      header.queryString(),\n-                      header.headers(),\n-                      (Function0) SFunction0.from(header::remoteAddress),\n-                      (Function0) SFunction0.from(header::secure));\n-        } catch (Throwable ignore) {\n-        }\n-      }\n-      return newHeader;\n-    }\n-  }\n-\n-  public static class SFunction0<T> extends AbstractFunction0<T> {\n-    private final Supplier<T> supplier;\n-\n-    public static <A> SFunction0<A> from(final Supplier<A> supplier) {\n-      return new SFunction0<>(supplier);\n-    }\n-\n-    private SFunction0(final Supplier<T> supplier) {\n-      this.supplier = supplier;\n-    }\n-\n-    @Override\n-    public T apply() {\n-      return supplier.get();\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzgyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506647822", "bodyText": "Please add a comment describing the motivation for this class.", "author": "tylerbenson", "createdAt": "2020-10-16T18:18:05Z", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {", "originalCommit": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMjY2Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507502667", "bodyText": "Absolutely. I'll add comments about the motivation and the control flow.", "author": "bantonsson", "createdAt": "2020-10-19T06:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "chunk": "diff --git a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java b/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\ndeleted file mode 100644\nindex 0e9d829309..0000000000\n--- a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java\n+++ /dev/null\n\n@@ -1,120 +0,0 @@\n-package datadog.trace.instrumentation.play24;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import java.util.function.Supplier;\n-import play.api.mvc.Headers;\n-import play.api.mvc.Request;\n-import play.api.mvc.Request$;\n-import play.api.mvc.RequestHeader;\n-import scala.Function0;\n-import scala.collection.immutable.Map;\n-import scala.runtime.AbstractFunction0;\n-\n-public class RequestHelper {\n-  private static final MethodHandle WITH_TAG;\n-  private static final MethodHandle APPLY;\n-\n-  static {\n-    MethodHandle withTag = null;\n-    MethodHandle apply = null;\n-    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n-    try {\n-      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n-      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n-    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-    }\n-    if (apply != null) {\n-      try {\n-        MethodType mt = MethodType.methodType(RequestHeader.class, String.class, String.class);\n-        withTag = lookup.findVirtual(RequestHeader.class, \"withTag\", mt);\n-      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-      }\n-    }\n-    WITH_TAG = withTag;\n-    APPLY = apply;\n-  }\n-\n-  public static Request withTag(final Request request, final String key, final String value) {\n-    Request newRequest = request;\n-    if (APPLY != null) {\n-      try {\n-        RequestHeader newHeader = request;\n-        if (WITH_TAG != null) {\n-          newHeader = (RequestHeader) WITH_TAG.invokeExact((RequestHeader) request, key, value);\n-        } else {\n-          newHeader = Play24WithTag.withTag(request, key, value);\n-        }\n-        if (newHeader != newRequest) {\n-          // This is calling the apply method on the Scala `object` `Request`\n-          newRequest = (Request) APPLY.invokeExact(Request$.MODULE$, newHeader, request.body());\n-        }\n-      } catch (Throwable ignored) {\n-      }\n-    }\n-    return newRequest;\n-  }\n-\n-  public static final class Play24WithTag {\n-    private static final MethodHandle COPY;\n-\n-    static {\n-      MethodHandle copy = null;\n-      MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n-      try {\n-        Class<?> m = Map.class;\n-        Class<?> s = String.class;\n-        Class<?> f = Function0.class;\n-        MethodType mt =\n-            MethodType.methodType(\n-                RequestHeader.class, long.class, m, s, s, s, s, m, Headers.class, f, f);\n-        copy = lookup.findVirtual(RequestHeader.class, \"copy\", mt);\n-      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n-      }\n-      COPY = copy;\n-    }\n-\n-    public static RequestHeader withTag(\n-        final RequestHeader header, final String key, final String value) {\n-      RequestHeader newHeader = header;\n-      if (COPY != null) {\n-        try {\n-          newHeader =\n-              (RequestHeader)\n-                  COPY.invokeExact(\n-                      header,\n-                      header.id(),\n-                      header.tags().updated(key, value),\n-                      header.uri(),\n-                      header.path(),\n-                      header.method(),\n-                      header.version(),\n-                      header.queryString(),\n-                      header.headers(),\n-                      (Function0) SFunction0.from(header::remoteAddress),\n-                      (Function0) SFunction0.from(header::secure));\n-        } catch (Throwable ignore) {\n-        }\n-      }\n-      return newHeader;\n-    }\n-  }\n-\n-  public static class SFunction0<T> extends AbstractFunction0<T> {\n-    private final Supplier<T> supplier;\n-\n-    public static <A> SFunction0<A> from(final Supplier<A> supplier) {\n-      return new SFunction0<>(supplier);\n-    }\n-\n-    private SFunction0(final Supplier<T> supplier) {\n-      this.supplier = supplier;\n-    }\n-\n-    @Override\n-    public T apply() {\n-      return supplier.get();\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0OTA3Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506649077", "bodyText": "What impact will this have?  Does this mean that the first action in the filter chain will be the only one with a span?  (Am I thinking about it right as a filter chain?)", "author": "tylerbenson", "createdAt": "2020-10-16T18:20:33Z", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java", "diffHunk": "@@ -37,6 +43,9 @@ public static AgentScope onEnter(@Advice.Argument(0) final Request req) {\n \n     final AgentScope scope = activateSpan(span);\n     scope.setAsyncPropagation(true);\n+\n+    req = RequestHelper.withTag(req, \"_dd_HasPlayRequestSpan\", \"true\");", "originalCommit": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMzU2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507503568", "bodyText": "Yes, it means that we will only add a play.request span automatically once. All the actions will be executed inside that span. I should have added a more descriptive comment in the PR description.", "author": "bantonsson", "createdAt": "2020-10-19T06:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0OTA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNTgyMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507505823", "bodyText": "Forgot to mention that this is how the span looks in java already , since the java actions are built up in a separate class from the action class that we instrument.", "author": "bantonsson", "createdAt": "2020-10-19T06:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0OTA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "chunk": "diff --git a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java b/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java\nindex 0269abebd9..ea37ece2fa 100644\n--- a/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java\n+++ b/dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java\n\n@@ -43,9 +37,6 @@ public class PlayAdvice {\n \n     final AgentScope scope = activateSpan(span);\n     scope.setAsyncPropagation(true);\n-\n-    req = RequestHelper.withTag(req, \"_dd_HasPlayRequestSpan\", \"true\");\n-\n     return scope;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MDA2Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506650067", "bodyText": "I assume this is the key distinction here for java (vs the base case)...", "author": "tylerbenson", "createdAt": "2020-10-16T18:22:41Z", "path": "dd-smoke-tests/play-2.4/app/controllers/JController.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package controllers;\n+\n+import actions.*;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.util.GlobalTracer;\n+import javax.inject.Inject;\n+import play.Configuration;\n+import play.libs.F.*;\n+import play.libs.ws.*;\n+import play.mvc.*;\n+import play.mvc.With;\n+\n+public class JController extends Controller {\n+\n+  private final WSClient ws;\n+  private final String clientRequestBase;\n+\n+  @Inject\n+  public JController(WSClient ws, Configuration configuration) {\n+    this.ws = ws;\n+    this.clientRequestBase =\n+        configuration.getString(\"client.request.base\", \"http://localhost:0/broken/\");\n+  }\n+\n+  @With({Action1.class, Action2.class})", "originalCommit": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "chunk": "diff --git a/dd-smoke-tests/play-2.4/app/controllers/JController.java b/dd-smoke-tests/play-2.4/app/controllers/JController.java\ndeleted file mode 100644\nindex 62f4986453..0000000000\n--- a/dd-smoke-tests/play-2.4/app/controllers/JController.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-package controllers;\n-\n-import actions.*;\n-import io.opentracing.Scope;\n-import io.opentracing.Span;\n-import io.opentracing.Tracer;\n-import io.opentracing.util.GlobalTracer;\n-import javax.inject.Inject;\n-import play.Configuration;\n-import play.libs.F.*;\n-import play.libs.ws.*;\n-import play.mvc.*;\n-import play.mvc.With;\n-\n-public class JController extends Controller {\n-\n-  private final WSClient ws;\n-  private final String clientRequestBase;\n-\n-  @Inject\n-  public JController(WSClient ws, Configuration configuration) {\n-    this.ws = ws;\n-    this.clientRequestBase =\n-        configuration.getString(\"client.request.base\", \"http://localhost:0/broken/\");\n-  }\n-\n-  @With({Action1.class, Action2.class})\n-  public Promise<Result> doGet(final Integer id) {\n-    Tracer tracer = GlobalTracer.get();\n-    Span span = tracer.buildSpan(\"do-get\").start();\n-    Scope scope = tracer.scopeManager().activate(span);\n-    try {\n-      if (id > 0) {\n-        return ws.url(clientRequestBase + id)\n-            .get()\n-            .map(response -> status(response.getStatus(), \"J Got '\" + response.getBody() + \"'\"));\n-      } else {\n-        return Promise.pure(badRequest(\"No ID.\"));\n-      }\n-    } finally {\n-      scope.close();\n-      span.finish();\n-    }\n-  }\n-}\n"}}, {"oid": "c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "url": "https://github.com/DataDog/dd-trace-java/commit/c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "message": "Add Scala Controller to Play 2.6 smoke tests", "committedDate": "2020-10-19T07:37:36Z", "type": "commit"}, {"oid": "3596d89deb4d631184293322e46c7f6310e1caa7", "url": "https://github.com/DataDog/dd-trace-java/commit/3596d89deb4d631184293322e46c7f6310e1caa7", "message": "Don't add multiple play.request spans for play 2.6+", "committedDate": "2020-10-19T07:37:36Z", "type": "commit"}, {"oid": "0924b986c8618e34312ae8658a7d2b6717545eba", "url": "https://github.com/DataDog/dd-trace-java/commit/0924b986c8618e34312ae8658a7d2b6717545eba", "message": "Add Scala Controller to Play 2.5 smoke tests", "committedDate": "2020-10-19T07:37:36Z", "type": "commit"}, {"oid": "909c305257678151f21e4fa0dfaa4edcc4e780fd", "url": "https://github.com/DataDog/dd-trace-java/commit/909c305257678151f21e4fa0dfaa4edcc4e780fd", "message": "Play 2.4 smoke test with filters, actions and client requests", "committedDate": "2020-10-19T07:37:37Z", "type": "commit"}, {"oid": "b8369b283dc7e0955f2103d1ef957b5c98184bca", "url": "https://github.com/DataDog/dd-trace-java/commit/b8369b283dc7e0955f2103d1ef957b5c98184bca", "message": "Don't add multiple play.request spans for play 2.4+", "committedDate": "2020-10-19T07:37:37Z", "type": "commit"}, {"oid": "b8369b283dc7e0955f2103d1ef957b5c98184bca", "url": "https://github.com/DataDog/dd-trace-java/commit/b8369b283dc7e0955f2103d1ef957b5c98184bca", "message": "Don't add multiple play.request spans for play 2.4+", "committedDate": "2020-10-19T07:37:37Z", "type": "forcePushed"}]}