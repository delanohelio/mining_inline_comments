{"pr_number": 1717, "pr_title": "Move Spring Scheduling RunnableWrapper to separate class", "pr_createdAt": "2020-07-27T19:07:43Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1717", "timeline": [{"oid": "cc6c5d5be22d018ce2add142166a4e2324d46239", "url": "https://github.com/DataDog/dd-trace-java/commit/cc6c5d5be22d018ce2add142166a4e2324d46239", "message": "Move Spring Scheduling RunnableWrapper to separate class\n\nThis works around an edge case where Spring Sleuth tries to load the RunnableWrapper's enclosing class:\nhttps://github.com/spring-projects/spring-framework/blob/v5.2.2.RELEASE/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java#L233\n\nSince the enclosing class is on a separate class loader, this fails and results in an exception.", "committedDate": "2020-07-27T19:03:12Z", "type": "commit"}, {"oid": "3cf7c5f882359d8d0bcce5e3c4b18ab34d68c88e", "url": "https://github.com/DataDog/dd-trace-java/commit/3cf7c5f882359d8d0bcce5e3c4b18ab34d68c88e", "message": "Forgot the period...", "committedDate": "2020-07-27T19:39:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM3NzI4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1717#discussion_r461377284", "bodyText": "So this comment is completely unrelated AFAICS, and just utterly confusing.", "author": "bantonsson", "createdAt": "2020-07-28T07:33:49Z", "path": "dd-java-agent/instrumentation/spring-scheduling-3.1/src/main/java/datadog/trace/instrumentation/springscheduling/SpringSchedulingRunnableWrapper.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package datadog.trace.instrumentation.springscheduling;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.springscheduling.SpringSchedulingDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+public class SpringSchedulingRunnableWrapper implements Runnable {\n+  private final Runnable runnable;\n+\n+  private SpringSchedulingRunnableWrapper(final Runnable runnable) {\n+    this.runnable = runnable;\n+  }\n+\n+  @Override\n+  public void run() {\n+    final AgentSpan span = startSpan(\"scheduled.call\");\n+    DECORATE.afterStart(span);\n+\n+    try (final AgentScope scope = activateSpan(span)) {\n+      DECORATE.onRun(span, runnable);\n+      scope.setAsyncPropagation(true);\n+\n+      try {\n+        runnable.run();\n+      } catch (final Throwable throwable) {\n+        DECORATE.onError(span, throwable);\n+        throw throwable;\n+      }\n+    } finally {\n+      DECORATE.beforeFinish(span);\n+      span.finish();\n+    }\n+  }\n+\n+  public static Runnable wrapIfNeeded(final Runnable task) {\n+    // We wrap only lambdas' anonymous classes and if given object has not already been wrapped.\n+    // Anonymous classes have '/' in class name which is not allowed in 'normal' classes.", "originalCommit": "3cf7c5f882359d8d0bcce5e3c4b18ab34d68c88e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}