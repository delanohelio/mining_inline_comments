{"pr_number": 1760, "pr_title": "Rework string handling", "pr_createdAt": "2020-08-10T11:36:44Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1760", "timeline": [{"oid": "3e5173af7fb566df17417cf0317254e89e26ab48", "url": "https://github.com/DataDog/dd-trace-java/commit/3e5173af7fb566df17417cf0317254e89e26ab48", "message": "abstract UTF8ByteString data", "committedDate": "2020-08-10T11:54:25Z", "type": "commit"}, {"oid": "4dec856c89d7436a822dcfd30a369937aedb69b3", "url": "https://github.com/DataDog/dd-trace-java/commit/4dec856c89d7436a822dcfd30a369937aedb69b3", "message": "failing test with some Chinese characters", "committedDate": "2020-08-10T11:54:25Z", "type": "commit"}, {"oid": "363f7c2125fc8740c10fdee468d71451385858da", "url": "https://github.com/DataDog/dd-trace-java/commit/363f7c2125fc8740c10fdee468d71451385858da", "message": "fix flawed ASCII detection which fails on some CJK characters", "committedDate": "2020-08-10T11:54:25Z", "type": "commit"}, {"oid": "adb4cdde516ed237a60695c888e4de647b15c9df", "url": "https://github.com/DataDog/dd-trace-java/commit/adb4cdde516ed237a60695c888e4de647b15c9df", "message": "use String.getBytes for short strings on newer JVMs", "committedDate": "2020-08-10T11:54:25Z", "type": "commit"}, {"oid": "9116ca69f0959cfb195f0c61eadaf87a7ac897a8", "url": "https://github.com/DataDog/dd-trace-java/commit/9116ca69f0959cfb195f0c61eadaf87a7ac897a8", "message": "consolidate UTF8ByteString data in a page list", "committedDate": "2020-08-10T11:54:25Z", "type": "commit"}, {"oid": "9116ca69f0959cfb195f0c61eadaf87a7ac897a8", "url": "https://github.com/DataDog/dd-trace-java/commit/9116ca69f0959cfb195f0c61eadaf87a7ac897a8", "message": "consolidate UTF8ByteString data in a page list", "committedDate": "2020-08-10T11:54:25Z", "type": "forcePushed"}, {"oid": "e1549c6d639ea5d82885b3e081f331d06aed3156", "url": "https://github.com/DataDog/dd-trace-java/commit/e1549c6d639ea5d82885b3e081f331d06aed3156", "message": "justifying changes to revapi", "committedDate": "2020-08-10T12:18:29Z", "type": "commit"}, {"oid": "fefae769d7f2f1d8b9240aef622226890a5983e2", "url": "https://github.com/DataDog/dd-trace-java/commit/fefae769d7f2f1d8b9240aef622226890a5983e2", "message": "test exceptional path", "committedDate": "2020-08-10T13:56:10Z", "type": "commit"}, {"oid": "fefae769d7f2f1d8b9240aef622226890a5983e2", "url": "https://github.com/DataDog/dd-trace-java/commit/fefae769d7f2f1d8b9240aef622226890a5983e2", "message": "test exceptional path", "committedDate": "2020-08-10T13:56:10Z", "type": "forcePushed"}, {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e", "url": "https://github.com/DataDog/dd-trace-java/commit/6c7f7a18a359c22e365269fb5459e9758190a49e", "message": "reinstate usage of cache for string encoding for the sake of coverage metrics until it can be removed entirely", "committedDate": "2020-08-10T14:23:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MDc4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468360788", "bodyText": "Nice change", "author": "bantonsson", "createdAt": "2020-08-11T06:45:34Z", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -29,28 +36,25 @@ public static UTF8BytesString create(CharSequence chars) {\n     }\n   }\n \n+  private static final Allocator ALLOCATOR = new Allocator();\n+\n   private final String string;\n   private byte[] utf8Bytes = null;\n+  private int offset;\n+  private int length;\n \n   private UTF8BytesString(String string) {\n     this.string = string;\n+    ALLOCATOR.allocate(string, this);\n   }\n \n-  /**\n-   * Returns a <code>byte[]</code> representing the UTF8 encoding of the wrapped {@code String}.\n-   * Please note that the same <code>byte[]</code> will be returned on each call, and the caller is\n-   * bound by honor, and the fear of purgatory, to not modify the <code>byte[]</code>.\n-   *\n-   * @return the byte array of the UTF8 encode string\n-   */\n-  public byte[] getUtf8Bytes() {\n-    byte[] bytes = this.utf8Bytes;\n-    // This race condition is intentional and benign.\n-    // The worst that can happen is that an identical value is produced and written into the field.\n-    if (bytes == null) {\n-      this.utf8Bytes = bytes = this.string.getBytes(StandardCharsets.UTF_8);\n-    }\n-    return bytes;\n+  /** Writes the UTF8 encoding of the wrapped {@code String}. */\n+  public void transferTo(ByteBuffer buffer) {", "originalCommit": "6c7f7a18a359c22e365269fb5459e9758190a49e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "be9e50ec5153b4919509b6ebb899956e7b11c059", "chunk": "diff --git a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\nindex d7d5e51a0a..d0708afa32 100644\n--- a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\n+++ b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\n\n@@ -9,30 +9,28 @@ import java.util.List;\n /**\n  * Class that wraps a {@code String} and caches the UTF8 byte representation. Implements {@code\n  * CharSequence} so that it can be mixed with normal{@code String} instances.\n- *\n- * <p>This class should be used judiciously for strings known not to vary much in the application's\n- * lifecycle, such as constants and effective constant (e.g. resource names)\n  */\n public final class UTF8BytesString implements CharSequence {\n-  public static UTF8BytesString create(String string) {\n-    if (string == null) {\n-      return null;\n-    } else {\n-      // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n-      // very String, we create a new wrapper String that we hold on to instead.\n-      return new UTF8BytesString(string);\n-    }\n+\n+  /*\n+   * This method should be used judiciously for strings known not to vary much in the application's\n+   * lifecycle, such as constants and effective constant (e.g. resource names)\n+   */\n+  public static UTF8BytesString createConstant(CharSequence string) {\n+    return create(string, true);\n   }\n \n   public static UTF8BytesString create(CharSequence chars) {\n-    if (chars == null) {\n+    return create(chars, false);\n+  }\n+\n+  private static UTF8BytesString create(CharSequence sequence, boolean constant) {\n+    if (null == sequence) {\n       return null;\n-    } else if (chars instanceof UTF8BytesString) {\n-      return (UTF8BytesString) chars;\n-    } else if (chars instanceof String) {\n-      return create((String) chars);\n+    } else if (sequence instanceof UTF8BytesString) {\n+      return (UTF8BytesString) sequence;\n     } else {\n-      return new UTF8BytesString(String.valueOf(chars));\n+      return new UTF8BytesString(sequence, constant);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4OTk1NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468389954", "bodyText": "So this no longer matches up to the comment on the line above it. We cache UTF8BytesStringin a WeakMap in datadog.trace.instrumentation.jdbc.JDBCMaps, and as far as I can tell from running some experiments, only the key is treated as a weak reference, and if we don't make a copy String here, nothing will ever be removed from that map.", "author": "bantonsson", "createdAt": "2020-08-11T07:47:06Z", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -13,7 +20,7 @@ public static UTF8BytesString create(String string) {\n     } else {\n       // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n       // very String, we create a new wrapper String that we hold on to instead.\n-      return new UTF8BytesString(new String(string));\n+      return new UTF8BytesString(string);", "originalCommit": "6c7f7a18a359c22e365269fb5459e9758190a49e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5Nzc5NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468397794", "bodyText": "Sorry this was an automated refactor suggested by IDEA, I'll roll it back.", "author": "richardstartin", "createdAt": "2020-08-11T08:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4OTk1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQxNDk4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468414986", "bodyText": "Do you mean the private constructor? The other create method hopefully does the right thing by calling this method for String.", "author": "bantonsson", "createdAt": "2020-08-11T08:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4OTk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "be9e50ec5153b4919509b6ebb899956e7b11c059", "chunk": "diff --git a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\nindex d7d5e51a0a..d0708afa32 100644\n--- a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\n+++ b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\n\n@@ -9,30 +9,28 @@ import java.util.List;\n /**\n  * Class that wraps a {@code String} and caches the UTF8 byte representation. Implements {@code\n  * CharSequence} so that it can be mixed with normal{@code String} instances.\n- *\n- * <p>This class should be used judiciously for strings known not to vary much in the application's\n- * lifecycle, such as constants and effective constant (e.g. resource names)\n  */\n public final class UTF8BytesString implements CharSequence {\n-  public static UTF8BytesString create(String string) {\n-    if (string == null) {\n-      return null;\n-    } else {\n-      // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n-      // very String, we create a new wrapper String that we hold on to instead.\n-      return new UTF8BytesString(string);\n-    }\n+\n+  /*\n+   * This method should be used judiciously for strings known not to vary much in the application's\n+   * lifecycle, such as constants and effective constant (e.g. resource names)\n+   */\n+  public static UTF8BytesString createConstant(CharSequence string) {\n+    return create(string, true);\n   }\n \n   public static UTF8BytesString create(CharSequence chars) {\n-    if (chars == null) {\n+    return create(chars, false);\n+  }\n+\n+  private static UTF8BytesString create(CharSequence sequence, boolean constant) {\n+    if (null == sequence) {\n       return null;\n-    } else if (chars instanceof UTF8BytesString) {\n-      return (UTF8BytesString) chars;\n-    } else if (chars instanceof String) {\n-      return create((String) chars);\n+    } else if (sequence instanceof UTF8BytesString) {\n+      return (UTF8BytesString) sequence;\n     } else {\n-      return new UTF8BytesString(String.valueOf(chars));\n+      return new UTF8BytesString(sequence, constant);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468391844", "bodyText": "I'm a bit afraid that we might leak things here if this gets used from the wrong place. Should there be a more ominous name for creating a UTF8BytesString that is allocated this way?", "author": "bantonsson", "createdAt": "2020-08-11T07:50:46Z", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -29,28 +36,25 @@ public static UTF8BytesString create(CharSequence chars) {\n     }\n   }\n \n+  private static final Allocator ALLOCATOR = new Allocator();\n+\n   private final String string;\n   private byte[] utf8Bytes = null;\n+  private int offset;\n+  private int length;\n \n   private UTF8BytesString(String string) {\n     this.string = string;\n+    ALLOCATOR.allocate(string, this);", "originalCommit": "6c7f7a18a359c22e365269fb5459e9758190a49e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5ODUxMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468398512", "bodyText": "Yes, we could, my intention was that we would use this lots for constants, or things we cache because we think they're effectively constant. In the comparatively rare case that we put something unusual in trace, we'd just use String", "author": "richardstartin", "createdAt": "2020-08-11T08:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5OTAxNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468399016", "bodyText": "Two separate methods calling in to different constructors might be a good idea indeed", "author": "richardstartin", "createdAt": "2020-08-11T08:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ4OTM4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468489389", "bodyText": "Addressed this, there's now a createConstant which copies the bytes into a \"page\". If we can move all constants over to using CharSequences I will use it to store them, and allocate constants at instrumentation load time, and remove the centralised \"string table\". This should eliminate a large number fo hash map lookups.", "author": "richardstartin", "createdAt": "2020-08-11T10:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUwOTc4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468509788", "bodyText": "Great. Removing the hash lookups is exactly where I was hoping that we'd end up!", "author": "bantonsson", "createdAt": "2020-08-11T11:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "be9e50ec5153b4919509b6ebb899956e7b11c059", "chunk": "diff --git a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\nindex d7d5e51a0a..d0708afa32 100644\n--- a/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\n+++ b/internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java\n\n@@ -9,30 +9,28 @@ import java.util.List;\n /**\n  * Class that wraps a {@code String} and caches the UTF8 byte representation. Implements {@code\n  * CharSequence} so that it can be mixed with normal{@code String} instances.\n- *\n- * <p>This class should be used judiciously for strings known not to vary much in the application's\n- * lifecycle, such as constants and effective constant (e.g. resource names)\n  */\n public final class UTF8BytesString implements CharSequence {\n-  public static UTF8BytesString create(String string) {\n-    if (string == null) {\n-      return null;\n-    } else {\n-      // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n-      // very String, we create a new wrapper String that we hold on to instead.\n-      return new UTF8BytesString(string);\n-    }\n+\n+  /*\n+   * This method should be used judiciously for strings known not to vary much in the application's\n+   * lifecycle, such as constants and effective constant (e.g. resource names)\n+   */\n+  public static UTF8BytesString createConstant(CharSequence string) {\n+    return create(string, true);\n   }\n \n   public static UTF8BytesString create(CharSequence chars) {\n-    if (chars == null) {\n+    return create(chars, false);\n+  }\n+\n+  private static UTF8BytesString create(CharSequence sequence, boolean constant) {\n+    if (null == sequence) {\n       return null;\n-    } else if (chars instanceof UTF8BytesString) {\n-      return (UTF8BytesString) chars;\n-    } else if (chars instanceof String) {\n-      return create((String) chars);\n+    } else if (sequence instanceof UTF8BytesString) {\n+      return (UTF8BytesString) sequence;\n     } else {\n-      return new UTF8BytesString(String.valueOf(chars));\n+      return new UTF8BytesString(sequence, constant);\n     }\n   }\n \n"}}, {"oid": "be9e50ec5153b4919509b6ebb899956e7b11c059", "url": "https://github.com/DataDog/dd-trace-java/commit/be9e50ec5153b4919509b6ebb899956e7b11c059", "message": "differentiate between constant and non-constant UTF8ByteString instances", "committedDate": "2020-08-11T10:54:54Z", "type": "forcePushed"}, {"oid": "3a40488800590b618867b142e14cd74ae909c29e", "url": "https://github.com/DataDog/dd-trace-java/commit/3a40488800590b618867b142e14cd74ae909c29e", "message": "differentiate between constant and non-constant UTF8ByteString instances", "committedDate": "2020-08-11T11:12:07Z", "type": "commit"}, {"oid": "3a40488800590b618867b142e14cd74ae909c29e", "url": "https://github.com/DataDog/dd-trace-java/commit/3a40488800590b618867b142e14cd74ae909c29e", "message": "differentiate between constant and non-constant UTF8ByteString instances", "committedDate": "2020-08-11T11:12:07Z", "type": "forcePushed"}]}