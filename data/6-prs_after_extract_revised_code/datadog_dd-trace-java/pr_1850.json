{"pr_number": 1850, "pr_title": "Enable OpenTracing to inherit the async propagation from enclosing scope", "pr_createdAt": "2020-09-09T13:15:46Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1850", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NjQ0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r485646441", "bodyText": "do we even CAS this anywhere? Can it be volatile boolean?", "author": "richardstartin", "createdAt": "2020-09-09T14:15:01Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -124,7 +133,7 @@ protected ScopeStack scopeStack() {\n     /** Continuation that created this scope. May be null. */\n     private final ContinuableScopeManager.Continuation continuation;\n     /** Flag to propagate this scope across async boundaries. */\n-    private final AtomicBoolean isAsyncPropagating = new AtomicBoolean(false);\n+    private final AtomicBoolean isAsyncPropagating;", "originalCommit": "9b853ac6458e7c2541d25f15ef0050d3c2038a33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0ODIxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r485648215", "bodyText": "I think this can indeed be volatile boolean", "author": "richardstartin", "createdAt": "2020-09-09T14:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwNjYzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r486106639", "bodyText": "Yup, I think you are right.", "author": "bantonsson", "createdAt": "2020-09-10T06:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NjQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5d6fcd3e02f8e277f986e69a77d28ee96e202ec7", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java b/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\nindex 1dcc75d9cd..e02b30f34a 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\n\n@@ -133,7 +170,7 @@ public class ContinuableScopeManager implements AgentScopeManager {\n     /** Continuation that created this scope. May be null. */\n     private final ContinuableScopeManager.Continuation continuation;\n     /** Flag to propagate this scope across async boundaries. */\n-    private final AtomicBoolean isAsyncPropagating;\n+    private volatile boolean isAsyncPropagating;\n \n     private final ScopeSource source;\n \n"}}, {"oid": "5d6fcd3e02f8e277f986e69a77d28ee96e202ec7", "url": "https://github.com/DataDog/dd-trace-java/commit/5d6fcd3e02f8e277f986e69a77d28ee96e202ec7", "message": "Inherit async propagation from active scope for OT", "committedDate": "2020-09-10T09:09:56Z", "type": "forcePushed"}, {"oid": "bdd8b9a0aac473563384a03334c7cf443ea7f206", "url": "https://github.com/DataDog/dd-trace-java/commit/bdd8b9a0aac473563384a03334c7cf443ea7f206", "message": "Inherit async propagation from active scope for OT", "committedDate": "2020-09-10T09:49:43Z", "type": "forcePushed"}, {"oid": "a817fc0ba3195901cf9fe6deae419a7a64850f47", "url": "https://github.com/DataDog/dd-trace-java/commit/a817fc0ba3195901cf9fe6deae419a7a64850f47", "message": "Inherit async propagation from active scope for OT", "committedDate": "2020-09-10T10:37:21Z", "type": "forcePushed"}, {"oid": "525b3f7c8c4ad37eb080a776cedc2685e20f0769", "url": "https://github.com/DataDog/dd-trace-java/commit/525b3f7c8c4ad37eb080a776cedc2685e20f0769", "message": "Make all scope activation inherit async propagation by default", "committedDate": "2020-09-14T13:33:20Z", "type": "forcePushed"}, {"oid": "86da37f3227b4891d6dfac3aa9ebb9bcad20fbe6", "url": "https://github.com/DataDog/dd-trace-java/commit/86da37f3227b4891d6dfac3aa9ebb9bcad20fbe6", "message": "Inherit async propagation from active scope for OT", "committedDate": "2020-09-14T12:06:02Z", "type": "forcePushed"}, {"oid": "541ae4a998e8dc6219a2cd2e5c6aa5d8e3e5fa54", "url": "https://github.com/DataDog/dd-trace-java/commit/541ae4a998e8dc6219a2cd2e5c6aa5d8e3e5fa54", "message": "Inherit async propagation from active scope for OT", "committedDate": "2020-09-28T15:56:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5Nzk1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r496097956", "bodyText": "I hate the convention of adding final to all parameters - I find it adds it adds at least six characters of noise to every line - but I don't like the inconsistency here either, and because some people use an IDE plugin which applies rules on file save this will result in style diffs when they change this file.", "author": "richardstartin", "createdAt": "2020-09-28T16:57:05Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -87,12 +106,40 @@ public AgentScope activate(final AgentSpan span, final ScopeSource source) {\n       return AgentTracer.NoopAgentScope.INSTANCE;\n     }\n \n-    return handleSpan(null, span, source);\n+    return handleSpan(\n+        inheritAsyncPropagation ? active : null,\n+        null,\n+        span,\n+        source,\n+        overrideAsyncPropagation,\n+        isAsyncPropagating);\n   }\n \n   private ContinuableScope handleSpan(\n-      final Continuation continuation, final AgentSpan span, final ScopeSource source) {\n-    final ContinuableScope scope = new ContinuableScope(this, continuation, span, source);\n+      final Continuation continuation,\n+      final AgentSpan span,\n+      final ScopeSource source,\n+      boolean overrideAsyncPropagation,", "originalCommit": "541ae4a998e8dc6219a2cd2e5c6aa5d8e3e5fa54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDY3MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r496460671", "bodyText": "Fine, I'll change it, but I think such auto rules should be illegal.", "author": "bantonsson", "createdAt": "2020-09-29T06:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5Nzk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "914720f60d34c16a511704f87c9463a550185f25", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java b/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\nindex 3926cf4b87..e325b4a878 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\n\n@@ -119,8 +119,8 @@ public class ContinuableScopeManager implements AgentScopeManager {\n       final Continuation continuation,\n       final AgentSpan span,\n       final ScopeSource source,\n-      boolean overrideAsyncPropagation,\n-      boolean isAsyncPropagating) {\n+      final boolean overrideAsyncPropagation,\n+      final boolean isAsyncPropagating) {\n     ContinuableScope active = inheritAsyncPropagation ? scopeStack().top() : null;\n     return handleSpan(\n         active, continuation, span, source, overrideAsyncPropagation, isAsyncPropagating);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5ODE0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r496098144", "bodyText": "\ud83e\udd47", "author": "richardstartin", "createdAt": "2020-09-28T16:57:23Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -124,7 +171,7 @@ protected ScopeStack scopeStack() {\n     /** Continuation that created this scope. May be null. */\n     private final ContinuableScopeManager.Continuation continuation;\n     /** Flag to propagate this scope across async boundaries. */\n-    private final AtomicBoolean isAsyncPropagating = new AtomicBoolean(false);\n+    private volatile boolean isAsyncPropagating;", "originalCommit": "541ae4a998e8dc6219a2cd2e5c6aa5d8e3e5fa54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNzc2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r496727766", "bodyText": "I think it might not even need to be volatile...", "author": "tylerbenson", "createdAt": "2020-09-29T13:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5ODE0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5OTY4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r496099680", "bodyText": "What do true and false correspond to here? I know I can go and look at the signature but it's a context switch. Can we hoist them out into named variables to make the code self-documenting?", "author": "richardstartin", "createdAt": "2020-09-28T16:59:13Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -337,13 +386,13 @@ private Continuation register() {\n     @Override\n     public AgentScope activate() {\n       if (used.compareAndSet(false, true)) {\n-        final AgentScope scope = scopeManager.handleSpan(this, spanUnderScope, source);\n+        final AgentScope scope = scopeManager.handleSpan(this, spanUnderScope, source, true, false);", "originalCommit": "541ae4a998e8dc6219a2cd2e5c6aa5d8e3e5fa54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDg5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1850#discussion_r496460892", "bodyText": "Sure, I'll move them out for readbility.", "author": "bantonsson", "createdAt": "2020-09-29T07:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5OTY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "914720f60d34c16a511704f87c9463a550185f25", "chunk": "diff --git a/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java b/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\nindex 3926cf4b87..e325b4a878 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java\n\n@@ -385,14 +385,21 @@ public class ContinuableScopeManager implements AgentScopeManager {\n \n     @Override\n     public AgentScope activate() {\n+      // Setting the new scope that is being activated to not have async propagation by default\n+      // to be backwards compatible with the existing behavior that the instrumentations expect.\n+      final boolean overrideAsyncPropagation = true;\n+      final boolean isAsyncPropagating = false;\n       if (used.compareAndSet(false, true)) {\n-        final AgentScope scope = scopeManager.handleSpan(this, spanUnderScope, source, true, false);\n+        final AgentScope scope =\n+            scopeManager.handleSpan(\n+                this, spanUnderScope, source, overrideAsyncPropagation, isAsyncPropagating);\n         log.debug(\"t_id={} -> activating continuation {}\", spanUnderScope.getTraceId(), this);\n         return scope;\n       } else {\n         log.debug(\n             \"Failed to activate continuation. Reusing a continuation not allowed. Spans may be reported separately.\");\n-        return scopeManager.handleSpan(null, spanUnderScope, source, true, false);\n+        return scopeManager.handleSpan(\n+            null, spanUnderScope, source, overrideAsyncPropagation, isAsyncPropagating);\n       }\n     }\n \n"}}, {"oid": "914720f60d34c16a511704f87c9463a550185f25", "url": "https://github.com/DataDog/dd-trace-java/commit/914720f60d34c16a511704f87c9463a550185f25", "message": "Inherit async propagation from active scope for OT", "committedDate": "2020-09-29T07:48:36Z", "type": "commit"}, {"oid": "914720f60d34c16a511704f87c9463a550185f25", "url": "https://github.com/DataDog/dd-trace-java/commit/914720f60d34c16a511704f87c9463a550185f25", "message": "Inherit async propagation from active scope for OT", "committedDate": "2020-09-29T07:48:36Z", "type": "forcePushed"}]}