{"pr_number": 1543, "pr_title": "Send data to trace agent when no API key is given", "pr_createdAt": "2020-06-04T16:17:14Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1543", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTE5NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r435421195", "bodyText": "Thanks for fixing all the typos! :)", "author": "mar-kolya", "createdAt": "2020-06-04T17:19:04Z", "path": "dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java", "diffHunk": "@@ -128,7 +128,7 @@ public ProfileUploader(final Config config) {\n     * PID (see PidHelper for details),\n     * Profiler version\n     Since Config returns unmodifiable map we have to do copy here.\n-    Ideally we should improve this logic and avoid copy, but performace impact is very limtied\n+    Ideally we should improve this logic and avoid copy, but performance impact is very limited", "originalCommit": "33af4c388e14b6510116e9a5c0e306a0518d4e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5fe45de39b46c373d618ba28b65b8ccece0df17", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java b/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\nindex 2bdd3e81b2..7014b006ca 100644\n--- a/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\n+++ b/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\n\n@@ -122,7 +122,7 @@ public final class ProfileUploader {\n   public ProfileUploader(final Config config) {\n     url = config.getFinalProfilingUrl();\n     apiKey = config.getApiKey();\n-\n+    log.info(\"Creating ProfileUploader with url {} and key {}\", url, apiKey);\n     /*\n     FIXME: currently `Config` class cannot get access to some pieces of information we need here:\n     * PID (see PidHelper for details),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjU5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r435422597", "bodyText": "You probably would want to return profilingUrl if it was configured... in fact regardless of apiKey status if user forced profilingUrl that is probably what should be used.", "author": "mar-kolya", "createdAt": "2020-06-04T17:21:28Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -848,10 +849,20 @@ public float getInstrumentationAnalyticsSampleRate(final String... aliases) {\n   }\n \n   public String getFinalProfilingUrl() {\n-    if (profilingUrl == null) {\n-      return String.format(PROFILING_URL_TEMPLATE, site);\n+    // TODO: how does precedence work?\n+    //  we have the profilingUrl configuration, the local trace agent default and the apiKey\n+    // if there's no API key we return the local trace agent\n+    // if there's an API key we check the profile URL setting\n+    // OR\n+    // we check if there's a URL\n+    if (apiKey != null) {\n+      if (profilingUrl == null) {\n+        return String.format(PROFILING_REMOTE_URL_TEMPLATE, site);\n+      } else {\n+        return profilingUrl;\n+      }\n     } else {\n-      return profilingUrl;\n+      return String.format(PROFILING_LOCAL_URL_TEMPLATE, agentHost, agentPort);", "originalCommit": "33af4c388e14b6510116e9a5c0e306a0518d4e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfc41beec1479fac77a32a087f8a61db09f5e802", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex 992ce9d405..916e21c535 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -849,19 +849,14 @@ public class Config {\n   }\n \n   public String getFinalProfilingUrl() {\n-    // TODO: how does precedence work?\n-    //  we have the profilingUrl configuration, the local trace agent default and the apiKey\n-    // if there's no API key we return the local trace agent\n-    // if there's an API key we check the profile URL setting\n-    // OR\n-    // we check if there's a URL\n-    if (apiKey != null) {\n-      if (profilingUrl == null) {\n-        return String.format(PROFILING_REMOTE_URL_TEMPLATE, site);\n-      } else {\n-        return profilingUrl;\n-      }\n+    if (profilingUrl != null) {\n+      // when profilingUrl is set we use it regardless of apiKey\n+      return profilingUrl;\n+    } else if (apiKey != null) {\n+      // when profilingUrl is not set and apiKey is set we send directly to our intake\n+      return String.format(PROFILING_REMOTE_URL_TEMPLATE, site);\n     } else {\n+      // when profilingUrl and apiKey are not set we send to the dd trace agent running locally\n       return String.format(PROFILING_LOCAL_URL_TEMPLATE, agentHost, agentPort);\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjc2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r435422761", "bodyText": "I think there is logic that disables profiling completely if there is no key...", "author": "mar-kolya", "createdAt": "2020-06-04T17:21:46Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -848,10 +849,20 @@ public float getInstrumentationAnalyticsSampleRate(final String... aliases) {\n   }\n \n   public String getFinalProfilingUrl() {\n-    if (profilingUrl == null) {\n-      return String.format(PROFILING_URL_TEMPLATE, site);\n+    // TODO: how does precedence work?\n+    //  we have the profilingUrl configuration, the local trace agent default and the apiKey\n+    // if there's no API key we return the local trace agent\n+    // if there's an API key we check the profile URL setting\n+    // OR\n+    // we check if there's a URL\n+    if (apiKey != null) {", "originalCommit": "33af4c388e14b6510116e9a5c0e306a0518d4e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NjA3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r436886072", "bodyText": "I searched the code for apiKey and did some random browsing but I couldn't find where we do this, I only found the api key being set in config depending on files being present and some test configuration.\nI haven't checked the test suites yet and I've not deployed to my devenv without a key yet, I assume that will show me what the existing behaviour is \ud83d\ude04", "author": "cimi", "createdAt": "2020-06-08T17:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "bfc41beec1479fac77a32a087f8a61db09f5e802", "chunk": "diff --git a/dd-trace-api/src/main/java/datadog/trace/api/Config.java b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\nindex 992ce9d405..916e21c535 100644\n--- a/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n+++ b/dd-trace-api/src/main/java/datadog/trace/api/Config.java\n\n@@ -849,19 +849,14 @@ public class Config {\n   }\n \n   public String getFinalProfilingUrl() {\n-    // TODO: how does precedence work?\n-    //  we have the profilingUrl configuration, the local trace agent default and the apiKey\n-    // if there's no API key we return the local trace agent\n-    // if there's an API key we check the profile URL setting\n-    // OR\n-    // we check if there's a URL\n-    if (apiKey != null) {\n-      if (profilingUrl == null) {\n-        return String.format(PROFILING_REMOTE_URL_TEMPLATE, site);\n-      } else {\n-        return profilingUrl;\n-      }\n+    if (profilingUrl != null) {\n+      // when profilingUrl is set we use it regardless of apiKey\n+      return profilingUrl;\n+    } else if (apiKey != null) {\n+      // when profilingUrl is not set and apiKey is set we send directly to our intake\n+      return String.format(PROFILING_REMOTE_URL_TEMPLATE, site);\n     } else {\n+      // when profilingUrl and apiKey are not set we send to the dd trace agent running locally\n       return String.format(PROFILING_LOCAL_URL_TEMPLATE, agentHost, agentPort);\n     }\n   }\n"}}, {"oid": "bfc41beec1479fac77a32a087f8a61db09f5e802", "url": "https://github.com/DataDog/dd-trace-java/commit/bfc41beec1479fac77a32a087f8a61db09f5e802", "message": "Send data to trace agent when no API key is given", "committedDate": "2020-06-08T16:52:08Z", "type": "forcePushed"}, {"oid": "a5fe45de39b46c373d618ba28b65b8ccece0df17", "url": "https://github.com/DataDog/dd-trace-java/commit/a5fe45de39b46c373d618ba28b65b8ccece0df17", "message": "Send data to trace agent when no API key is given", "committedDate": "2020-06-09T15:28:10Z", "type": "forcePushed"}, {"oid": "5fd590b12bc76c942a9d2933a1fcbfe0bd60b450", "url": "https://github.com/DataDog/dd-trace-java/commit/5fd590b12bc76c942a9d2933a1fcbfe0bd60b450", "message": "Send data to trace agent when no API key is given", "committedDate": "2020-06-09T16:56:11Z", "type": "forcePushed"}, {"oid": "54f4c151565027d54531c63ad3ba9b6fe1e976c4", "url": "https://github.com/DataDog/dd-trace-java/commit/54f4c151565027d54531c63ad3ba9b6fe1e976c4", "message": "Send data to trace agent when no API key is given", "committedDate": "2020-06-09T17:17:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0Nzg3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438047874", "bodyText": "Tests should be updated for these changes", "author": "mar-kolya", "createdAt": "2020-06-10T11:20:05Z", "path": "dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java", "diffHunk": "@@ -301,16 +302,20 @@ private void makeUploadRequest(final RecordingType type, final RecordingData dat\n     bodyBuilder.addPart(DATA_HEADERS, body);\n     final RequestBody requestBody = bodyBuilder.build();\n \n-    final Request request =\n+    final Request.Builder requestBuilder =\n         new Request.Builder()\n             .url(url)\n-            .addHeader(HEADER_DD_API_KEY, apiKey)\n             // Note: this header is used to disable tracing of profiling requests\n             .addHeader(DATADOG_META_LANG, JAVA_LANG)\n-            .post(requestBody)\n-            .build();\n-\n-    client.newCall(request).enqueue(RESPONSE_CALLBACK);\n+            .post(requestBody);\n+    if (apiKey != null) {\n+      requestBuilder.addHeader(HEADER_DD_API_KEY, apiKey);\n+    }\n+    final String containerId = ContainerInfo.get().getContainerId();\n+    if (containerId != null) {\n+      requestBuilder.addHeader(HEADER_DD_CONTAINER_ID, containerId);\n+    }\n+    client.newCall(requestBuilder.build()).enqueue(RESPONSE_CALLBACK);", "originalCommit": "aaa8512d85c7d743c8f24c563e3949c895bddf76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNDc1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438234759", "bodyText": "I've removed the container id changes from here and I've added a test for computing the URL when no API key is present.\nThe only change missing a test in this PR is checking that when we don't have an API key, no API key header is added to the http request - I thought it's trivial, but I'm happy to add it if you disagree.", "author": "cimi", "createdAt": "2020-06-10T15:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0Nzg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "28a83c93fefb3f93bfb7dfd449bb92dcde12e497", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java b/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\nindex 06476ffaf6..2b64da09a9 100644\n--- a/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\n+++ b/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\n\n@@ -311,10 +310,7 @@ public final class ProfileUploader {\n     if (apiKey != null) {\n       requestBuilder.addHeader(HEADER_DD_API_KEY, apiKey);\n     }\n-    final String containerId = ContainerInfo.get().getContainerId();\n-    if (containerId != null) {\n-      requestBuilder.addHeader(HEADER_DD_CONTAINER_ID, containerId);\n-    }\n+\n     client.newCall(requestBuilder.build()).enqueue(RESPONSE_CALLBACK);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0ODI3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438048274", "bodyText": "Do we have to do copy-pasting?", "author": "mar-kolya", "createdAt": "2020-06-10T11:20:54Z", "path": "dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ContainerInfo.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.datadog.profiling.uploader;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Parses container information from /proc/self/cgroup.\n+ *\n+ * <p>Copied from dd-trace-core/src/main/java/datadog/trace/core/ContainerInfo.java", "originalCommit": "aaa8512d85c7d743c8f24c563e3949c895bddf76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0ODY0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438048641", "bodyText": "Also, it seems to me that container-related stuff can go in separate PR just to simplify review", "author": "mar-kolya", "createdAt": "2020-06-10T11:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0ODI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MDQ3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438050474", "bodyText": "Seems like easiest solution here would be to move ContainerInfo to new package in utils and use it from there in both places. @tylerbenson any objections to this?", "author": "mar-kolya", "createdAt": "2020-06-10T11:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0ODI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMDk3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438230972", "bodyText": "\ud83d\udc4d I'll open another PR for the container ID changes.", "author": "cimi", "createdAt": "2020-06-10T15:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0ODI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "28a83c93fefb3f93bfb7dfd449bb92dcde12e497", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ContainerInfo.java b/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ContainerInfo.java\ndeleted file mode 100644\nindex 27ad9bd64a..0000000000\n--- a/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ContainerInfo.java\n+++ /dev/null\n\n@@ -1,133 +0,0 @@\n-package com.datadog.profiling.uploader;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.text.ParseException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * Parses container information from /proc/self/cgroup.\n- *\n- * <p>Copied from dd-trace-core/src/main/java/datadog/trace/core/ContainerInfo.java\n- */\n-@Getter\n-@Setter\n-@Slf4j\n-class ContainerInfo {\n-  private static final Path CGROUP_DEFAULT_PROCFILE = Paths.get(\"/proc/self/cgroup\");\n-  private static final String UUID_REGEX =\n-      \"[0-9a-f]{8}[-_][0-9a-f]{4}[-_][0-9a-f]{4}[-_][0-9a-f]{4}[-_][0-9a-f]{12}\";\n-  private static final String CONTAINER_REGEX = \"[0-9a-f]{64}\";\n-  private static final Pattern LINE_PATTERN = Pattern.compile(\"(\\\\d+):([^:]*):(.+)$\");\n-  private static final Pattern POD_PATTERN =\n-      Pattern.compile(\"(?:.+)?pod(\" + UUID_REGEX + \")(?:.slice)?$\");\n-  private static final Pattern CONTAINER_PATTERN =\n-      Pattern.compile(\"(?:.+)?(\" + UUID_REGEX + \"|\" + CONTAINER_REGEX + \")(?:.scope)?$\");\n-\n-  private static final ContainerInfo INSTANCE;\n-\n-  public String containerId;\n-  public String podId;\n-  public List<CGroupInfo> cGroups = new ArrayList<>();\n-\n-  static {\n-    ContainerInfo containerInfo = new ContainerInfo();\n-    if (ContainerInfo.isRunningInContainer()) {\n-      try {\n-        containerInfo = ContainerInfo.fromDefaultProcFile();\n-      } catch (final IOException | ParseException e) {\n-        log.error(\"Unable to parse proc file\");\n-      }\n-    }\n-\n-    INSTANCE = containerInfo;\n-  }\n-\n-  @Getter\n-  @Setter\n-  public static class CGroupInfo {\n-    public int id;\n-    public String path;\n-    public List<String> controllers;\n-    public String containerId;\n-    public String podId;\n-  }\n-\n-  public static ContainerInfo get() {\n-    return INSTANCE;\n-  }\n-\n-  public static boolean isRunningInContainer() {\n-    return Files.isReadable(CGROUP_DEFAULT_PROCFILE);\n-  }\n-\n-  public static ContainerInfo fromDefaultProcFile() throws IOException, ParseException {\n-    final String content = new String(Files.readAllBytes(CGROUP_DEFAULT_PROCFILE));\n-    if (content.isEmpty()) {\n-      log.debug(\"Proc file is empty\");\n-      return new ContainerInfo();\n-    }\n-    return parse(content);\n-  }\n-\n-  public static ContainerInfo parse(final String cgroupsContent) throws ParseException {\n-    final ContainerInfo containerInfo = new ContainerInfo();\n-\n-    final String[] lines = cgroupsContent.split(\"\\n\");\n-    for (final String line : lines) {\n-      final CGroupInfo cGroupInfo = parseLine(line);\n-\n-      containerInfo.getCGroups().add(cGroupInfo);\n-\n-      if (cGroupInfo.getPodId() != null) {\n-        containerInfo.setPodId(cGroupInfo.getPodId());\n-      }\n-\n-      if (cGroupInfo.getContainerId() != null) {\n-        containerInfo.setContainerId(cGroupInfo.getContainerId());\n-      }\n-    }\n-\n-    return containerInfo;\n-  }\n-\n-  static CGroupInfo parseLine(final String line) throws ParseException {\n-    final Matcher matcher = LINE_PATTERN.matcher(line);\n-\n-    if (!matcher.matches()) {\n-      throw new ParseException(\"Unable to match cgroup\", 0);\n-    }\n-\n-    final CGroupInfo cGroupInfo = new CGroupInfo();\n-    cGroupInfo.setId(Integer.parseInt(matcher.group(1)));\n-    cGroupInfo.setControllers(Arrays.asList(matcher.group(2).split(\",\")));\n-\n-    final String path = matcher.group(3);\n-    final String[] pathParts = path.split(\"/\");\n-\n-    cGroupInfo.setPath(path);\n-\n-    if (pathParts.length >= 1) {\n-      final Matcher containerIdMatcher = CONTAINER_PATTERN.matcher(pathParts[pathParts.length - 1]);\n-      final String containerId = containerIdMatcher.matches() ? containerIdMatcher.group(1) : null;\n-      cGroupInfo.setContainerId(containerId);\n-    }\n-\n-    if (pathParts.length >= 2) {\n-      final Matcher podIdMatcher = POD_PATTERN.matcher(pathParts[pathParts.length - 2]);\n-      final String podId = podIdMatcher.matches() ? podIdMatcher.group(1) : null;\n-      cGroupInfo.setPodId(podId);\n-    }\n-\n-    return cGroupInfo;\n-  }\n-}\n"}}, {"oid": "28a83c93fefb3f93bfb7dfd449bb92dcde12e497", "url": "https://github.com/DataDog/dd-trace-java/commit/28a83c93fefb3f93bfb7dfd449bb92dcde12e497", "message": "Send data to trace agent when no API key is given", "committedDate": "2020-06-10T15:32:07Z", "type": "forcePushed"}, {"oid": "1e88bb8bfda0e87daffc0df6a27ad698b8c74606", "url": "https://github.com/DataDog/dd-trace-java/commit/1e88bb8bfda0e87daffc0df6a27ad698b8c74606", "message": "Send data to trace agent when no API key is given", "committedDate": "2020-06-10T16:42:23Z", "type": "forcePushed"}, {"oid": "1253cce0bb965a101c7322fea397cad8ebf13106", "url": "https://github.com/DataDog/dd-trace-java/commit/1253cce0bb965a101c7322fea397cad8ebf13106", "message": "Send data to trace agent when no API key is given", "committedDate": "2020-06-10T16:56:50Z", "type": "commit"}, {"oid": "1253cce0bb965a101c7322fea397cad8ebf13106", "url": "https://github.com/DataDog/dd-trace-java/commit/1253cce0bb965a101c7322fea397cad8ebf13106", "message": "Send data to trace agent when no API key is given", "committedDate": "2020-06-10T16:56:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNjM0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438636348", "bodyText": "Nit: Given that this will become the default, I'm not sure this log line is very useful", "author": "AlexJF", "createdAt": "2020-06-11T08:48:00Z", "path": "dd-java-agent/agent-profiling/src/main/java/com/datadog/profiling/agent/ProfilingAgent.java", "diffHunk": "@@ -40,10 +40,9 @@ public static synchronized void run(final boolean isStartingFirst)\n         return;\n       }\n       if (config.getApiKey() == null) {\n-        log.info(\"Profiling: no API key. Profiling is disabled.\");\n-        return;\n-      }\n-      if (!API_KEY_REGEX.test(config.getApiKey())) {\n+        log.info(\n+            \"Profiling: no API key configured. An API key is not required for profiling when sending data to the local datadog-agent.\");", "originalCommit": "1253cce0bb965a101c7322fea397cad8ebf13106", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05d1d983f34faa98674e514c1f4cfd2f22666f89", "chunk": "diff --git a/dd-java-agent/agent-profiling/src/main/java/com/datadog/profiling/agent/ProfilingAgent.java b/dd-java-agent/agent-profiling/src/main/java/com/datadog/profiling/agent/ProfilingAgent.java\nindex 1b822e620c..24d8e407ef 100644\n--- a/dd-java-agent/agent-profiling/src/main/java/com/datadog/profiling/agent/ProfilingAgent.java\n+++ b/dd-java-agent/agent-profiling/src/main/java/com/datadog/profiling/agent/ProfilingAgent.java\n\n@@ -39,10 +39,7 @@ public class ProfilingAgent {\n         log.info(\"Profiling: disabled\");\n         return;\n       }\n-      if (config.getApiKey() == null) {\n-        log.info(\n-            \"Profiling: no API key configured. An API key is not required for profiling when sending data to the local datadog-agent.\");\n-      } else if (!API_KEY_REGEX.test(config.getApiKey())) {\n+      if (config.getApiKey() != null && !API_KEY_REGEX.test(config.getApiKey())) {\n         log.info(\n             \"Profiling: API key doesn't match expected format, expected to get a 32 character hex string. Profiling is disabled. {} \",\n             config.getApiKey());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4MDc1Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438680757", "bodyText": "Can we add a helpful message in case we're hitting the agent and the response is 404?\nLike dd-trace-go is doing here: https://github.com/DataDog/dd-trace-go/blob/v1/profiler/upload.go#L113\nWhich looks like this in logs:\n2020/06/11 10:06:21 Datadog Tracer v1.25.0 ERROR: Failed to upload profile: Datadog Agent is not accepting profiles. Agent-based profiling deployments require Datadog Agent >= 7.20", "author": "AlexJF", "createdAt": "2020-06-11T10:08:37Z", "path": "dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java", "diffHunk": "@@ -301,16 +301,17 @@ private void makeUploadRequest(final RecordingType type, final RecordingData dat\n     bodyBuilder.addPart(DATA_HEADERS, body);\n     final RequestBody requestBody = bodyBuilder.build();\n \n-    final Request request =\n+    final Request.Builder requestBuilder =\n         new Request.Builder()\n             .url(url)\n-            .addHeader(HEADER_DD_API_KEY, apiKey)\n             // Note: this header is used to disable tracing of profiling requests\n             .addHeader(DATADOG_META_LANG, JAVA_LANG)\n-            .post(requestBody)\n-            .build();\n+            .post(requestBody);\n+    if (apiKey != null) {\n+      requestBuilder.addHeader(HEADER_DD_API_KEY, apiKey);\n+    }\n \n-    client.newCall(request).enqueue(RESPONSE_CALLBACK);\n+    client.newCall(requestBuilder.build()).enqueue(RESPONSE_CALLBACK);", "originalCommit": "1253cce0bb965a101c7322fea397cad8ebf13106", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8c63d722884c2e9c7b1e237b312747ee0efa3e9a", "url": "https://github.com/DataDog/dd-trace-java/commit/8c63d722884c2e9c7b1e237b312747ee0efa3e9a", "message": "Merge pull request #1550 from DataDog/bantonsson/scopevent-long-ids\n\nSwitch DDScopeEvent ids to long and remove hex String caching", "committedDate": "2020-06-10T14:29:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNjY5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1543#discussion_r438806690", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      } else {\n          \n          \n            \n                      } else if (config.getApiKey() == null && response.getStatusCode() == 404) {\n          \n      \n    \n    \n  \n\nOr whatever is the equivalent code to get to the statuscode.\nIf it is deemed to help with readability we could also add a config.isProfilingAgentless() function that basically returns the result of config.apiKey != null", "author": "AlexJF", "createdAt": "2020-06-11T13:57:17Z", "path": "dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java", "diffHunk": "@@ -90,14 +91,16 @@\n       new Callback() {\n         @Override\n         public void onFailure(final Call call, final IOException e) {\n-          log.warn(\"Failed to upload profile\", e);\n+          HttpUrl url = call.request().url();\n+          log.warn(\"Failed to upload profile to {}\", url, e);\n         }\n \n         @Override\n         public void onResponse(final Call call, final Response response) {\n           if (response.isSuccessful()) {\n             log.debug(\"Upload done\");\n           } else {", "originalCommit": "edcf34808e5f4a4a60bdbb4e04b0f2682224c663", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05d1d983f34faa98674e514c1f4cfd2f22666f89", "chunk": "diff --git a/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java b/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\nindex b9c6acc7c3..caa9857fd0 100644\n--- a/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\n+++ b/dd-java-agent/agent-profiling/profiling-uploader/src/main/java/com/datadog/profiling/uploader/ProfileUploader.java\n\n@@ -100,7 +100,13 @@ public final class ProfileUploader {\n           if (response.isSuccessful()) {\n             log.debug(\"Upload done\");\n           } else {\n-            log.warn(\"Datadog Agent is not accepting profiles. Agent-based profiling deployments require Datadog Agent >= 7.20\");\n+            String apiKey = call.request().header(HEADER_DD_API_KEY);\n+            if (response.code() == 404 && apiKey == null) {\n+              // if no API key and not found error we assume we're sending to the agent\n+              log.warn(\n+                  \"Datadog Agent is not accepting profiles. Agent-based profiling deployments require Datadog Agent >= 7.20\");\n+            }\n+\n             log.warn(\n                 \"Failed to upload profile: unexpected response code {} {}\",\n                 response.message(),\n"}}, {"oid": "05d1d983f34faa98674e514c1f4cfd2f22666f89", "url": "https://github.com/DataDog/dd-trace-java/commit/05d1d983f34faa98674e514c1f4cfd2f22666f89", "message": "Improve logging for failed profile uploads", "committedDate": "2020-06-11T14:16:00Z", "type": "forcePushed"}, {"oid": "35734f79f4b44950aa4baaa725f8d00c188b3d6a", "url": "https://github.com/DataDog/dd-trace-java/commit/35734f79f4b44950aa4baaa725f8d00c188b3d6a", "message": "Improve logging for failed profile uploads", "committedDate": "2020-06-11T15:57:38Z", "type": "commit"}, {"oid": "35734f79f4b44950aa4baaa725f8d00c188b3d6a", "url": "https://github.com/DataDog/dd-trace-java/commit/35734f79f4b44950aa4baaa725f8d00c188b3d6a", "message": "Improve logging for failed profile uploads", "committedDate": "2020-06-11T15:57:38Z", "type": "forcePushed"}]}