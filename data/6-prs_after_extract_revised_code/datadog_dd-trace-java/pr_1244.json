{"pr_number": 1244, "pr_title": "ClassLoaderMatcher put to Guava Cache outside critical section", "pr_createdAt": "2020-02-21T07:05:28Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1244", "timeline": [{"oid": "e8a916eedadb6414298a8e438c8755619818a619", "url": "https://github.com/DataDog/dd-trace-java/commit/e8a916eedadb6414298a8e438c8755619818a619", "message": "ClassLoaderMatcher switch to Guava Cache", "committedDate": "2020-02-21T11:32:51Z", "type": "forcePushed"}, {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3", "url": "https://github.com/DataDog/dd-trace-java/commit/37bcb4e288b0c501d3df3b44048b2f50847236d3", "message": "ClassLoaderMatcher switch to Guava Cache", "committedDate": "2020-02-21T11:58:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTIyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382725226", "bodyText": "It might be better to allow some redundant work outside the critical section then do a put -- rather than using get with CacheLoader.  But we'd definitely have to measure.", "author": "dougqh", "createdAt": "2020-02-21T18:02:32Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(\n+                new CacheLoader<ClassLoader, Boolean>() {\n+                  @Override\n+                  public Boolean load(ClassLoader cl) {\n+                    for (final String name : names) {", "originalCommit": "37bcb4e288b0c501d3df3b44048b2f50847236d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4NDUzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382984533", "bodyText": "You right. For me it shows 0.25 seconds faster satrtup of spring-petclinic.", "author": "lpriima", "createdAt": "2020-02-23T08:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3ODU0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r383978542", "bodyText": "updated", "author": "lpriima", "createdAt": "2020-02-25T16:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "97d93294431c719ae54e81d9ebb210a7649e0b3e", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\nindex 7137f3835d..f951ccaebb 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\n\n@@ -107,41 +109,41 @@ public class ClassLoaderMatcher {\n     }\n   }\n \n-  public static class ClassLoaderHasClassMatcher\n+  private static class ClassLoaderHasNoResourceMatcher\n       extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n-\n-    private final LoadingCache<ClassLoader, Boolean> cache =\n+    private final Cache<ClassLoader, Boolean> cache =\n         CacheBuilder.newBuilder()\n             .weakKeys()\n-            .build(\n-                new CacheLoader<ClassLoader, Boolean>() {\n-                  @Override\n-                  public Boolean load(ClassLoader cl) {\n-                    for (final String name : names) {\n-                      if (cl.getResource(Utils.getResourceName(name)) == null) {\n-                        return false;\n-                      }\n-                    }\n-                    return true;\n-                  }\n-                });\n+            .concurrencyLevel(Runtime.getRuntime().availableProcessors())\n+            .build();\n \n-    private final String[] names;\n+    private final String[] resources;\n \n-    private ClassLoaderHasClassMatcher(final String... names) {\n-      this.names = names;\n+    private ClassLoaderHasNoResourceMatcher(final String... resources) {\n+      this.resources = resources;\n     }\n \n-    @Override\n-    public boolean matches(final ClassLoader target) {\n-      if (target != null) {\n-        try {\n-          return cache.get(target);\n-        } catch (ExecutionException e) {\n-          log.warn(\"Can't get from cache\", e);\n+    private boolean hasNoResources(ClassLoader cl) {\n+      for (final String resource : resources) {\n+        if (cl.getResource(resource) == null) {\n+          return true;\n         }\n       }\n       return false;\n     }\n+\n+    @Override\n+    public boolean matches(final ClassLoader cl) {\n+      if (cl == null) {\n+        return false;\n+      }\n+      Boolean v = cache.getIfPresent(cl);\n+      if (v != null) {\n+        return v;\n+      }\n+      v = hasNoResources(cl);\n+      cache.put(cl, v);\n+      return v;\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTYxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382725611", "bodyText": "I think this should probably be an error.", "author": "dougqh", "createdAt": "2020-02-21T18:03:26Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -60,19 +69,13 @@ private boolean shouldSkipClass(final ClassLoader loader) {\n       return false;\n     }\n \n-    private boolean shouldSkipInstance(final ClassLoader loader) {\n-      return SKIP_CACHE.computeIfAbsent(loader, this);\n-    }\n-\n-    @Override\n-    public Boolean get(final ClassLoader loader) {\n-      final boolean skip = !delegatesToBootstrap(loader);\n-      if (skip) {\n-        log.debug(\n-            \"skipping classloader instance {} of type {}\", loader, loader.getClass().getName());\n+    private static boolean shouldSkipInstance(final ClassLoader loader) {\n+      try {\n+        return skipCache.get(loader);\n+      } catch (ExecutionException e) {\n+        log.warn(\"Exception while getting from cache\", e);", "originalCommit": "37bcb4e288b0c501d3df3b44048b2f50847236d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDMxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382880314", "bodyText": "From my looking at code checked exception never might happen in get, because loader (https://github.com/DataDog/dd-trace-java/pull/1244/files#diff-4923261bc6c9ae6cc686fc457a9d2ae6R41) can't  throw exception. But contract is so vague : https://github.com/google/guava/wiki/CachesExplained#interruption", "author": "lpriima", "createdAt": "2020-02-22T03:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3ODM3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r383978370", "bodyText": "updated", "author": "lpriima", "createdAt": "2020-02-25T16:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "97d93294431c719ae54e81d9ebb210a7649e0b3e", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\nindex 7137f3835d..f951ccaebb 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\n\n@@ -73,7 +75,7 @@ public class ClassLoaderMatcher {\n       try {\n         return skipCache.get(loader);\n       } catch (ExecutionException e) {\n-        log.warn(\"Exception while getting from cache\", e);\n+        log.error(\"Exception while getting from cache\", e);\n       }\n       return false;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTgxMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382735813", "bodyText": "We might also want to set the concurrency level.  I picked 8 for the type cache.\nAlthough, we should add a configuration option in a separate PR -- and maybe auto-select by availableProcessors.", "author": "dougqh", "createdAt": "2020-02-21T18:25:52Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(", "originalCommit": "37bcb4e288b0c501d3df3b44048b2f50847236d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MzUwNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382753504", "bodyText": "Be careful with availableProcessors - it may be a lie in k8s land...", "author": "mar-kolya", "createdAt": "2020-02-21T19:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3Mzk3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r384073970", "bodyText": "Yes, that is true.  We probably want to a cap on it.  Although, I suspect for concurrency level we're better off err-ing slightly on the high-side.", "author": "dougqh", "createdAt": "2020-02-25T19:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4ODQxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r384088411", "bodyText": "capped on 8.", "author": "lpriima", "createdAt": "2020-02-25T19:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "97d93294431c719ae54e81d9ebb210a7649e0b3e", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\nindex 7137f3835d..f951ccaebb 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java\n\n@@ -107,41 +109,41 @@ public class ClassLoaderMatcher {\n     }\n   }\n \n-  public static class ClassLoaderHasClassMatcher\n+  private static class ClassLoaderHasNoResourceMatcher\n       extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n-\n-    private final LoadingCache<ClassLoader, Boolean> cache =\n+    private final Cache<ClassLoader, Boolean> cache =\n         CacheBuilder.newBuilder()\n             .weakKeys()\n-            .build(\n-                new CacheLoader<ClassLoader, Boolean>() {\n-                  @Override\n-                  public Boolean load(ClassLoader cl) {\n-                    for (final String name : names) {\n-                      if (cl.getResource(Utils.getResourceName(name)) == null) {\n-                        return false;\n-                      }\n-                    }\n-                    return true;\n-                  }\n-                });\n+            .concurrencyLevel(Runtime.getRuntime().availableProcessors())\n+            .build();\n \n-    private final String[] names;\n+    private final String[] resources;\n \n-    private ClassLoaderHasClassMatcher(final String... names) {\n-      this.names = names;\n+    private ClassLoaderHasNoResourceMatcher(final String... resources) {\n+      this.resources = resources;\n     }\n \n-    @Override\n-    public boolean matches(final ClassLoader target) {\n-      if (target != null) {\n-        try {\n-          return cache.get(target);\n-        } catch (ExecutionException e) {\n-          log.warn(\"Can't get from cache\", e);\n+    private boolean hasNoResources(ClassLoader cl) {\n+      for (final String resource : resources) {\n+        if (cl.getResource(resource) == null) {\n+          return true;\n         }\n       }\n       return false;\n     }\n+\n+    @Override\n+    public boolean matches(final ClassLoader cl) {\n+      if (cl == null) {\n+        return false;\n+      }\n+      Boolean v = cache.getIfPresent(cl);\n+      if (v != null) {\n+        return v;\n+      }\n+      v = hasNoResources(cl);\n+      cache.put(cl, v);\n+      return v;\n+    }\n   }\n }\n"}}, {"oid": "97d93294431c719ae54e81d9ebb210a7649e0b3e", "url": "https://github.com/DataDog/dd-trace-java/commit/97d93294431c719ae54e81d9ebb210a7649e0b3e", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-23T08:52:55Z", "type": "forcePushed"}, {"oid": "2232486a5431d3c027d2957ff2cdf5834b0cca3d", "url": "https://github.com/DataDog/dd-trace-java/commit/2232486a5431d3c027d2957ff2cdf5834b0cca3d", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-25T05:04:14Z", "type": "forcePushed"}, {"oid": "b1a371d02161c67a010c3592ce45fd3ac34d6a9d", "url": "https://github.com/DataDog/dd-trace-java/commit/b1a371d02161c67a010c3592ce45fd3ac34d6a9d", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-25T05:58:10Z", "type": "forcePushed"}, {"oid": "57d3b373c318f376676c67ef3ff575f4feba43c4", "url": "https://github.com/DataDog/dd-trace-java/commit/57d3b373c318f376676c67ef3ff575f4feba43c4", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-25T19:48:08Z", "type": "forcePushed"}, {"oid": "23f97c0544f5598ff63b4ce99955209daecfb78a", "url": "https://github.com/DataDog/dd-trace-java/commit/23f97c0544f5598ff63b4ce99955209daecfb78a", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-25T19:50:12Z", "type": "forcePushed"}, {"oid": "fc0444650d75b546762696f053b269ec4756667c", "url": "https://github.com/DataDog/dd-trace-java/commit/fc0444650d75b546762696f053b269ec4756667c", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-25T19:56:24Z", "type": "forcePushed"}, {"oid": "464d71eb1e9ce266fb612ad041487222ecb935cc", "url": "https://github.com/DataDog/dd-trace-java/commit/464d71eb1e9ce266fb612ad041487222ecb935cc", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-25T21:54:36Z", "type": "forcePushed"}, {"oid": "885212ee3630e14c75f399f82f32f2e4a6e618c7", "url": "https://github.com/DataDog/dd-trace-java/commit/885212ee3630e14c75f399f82f32f2e4a6e618c7", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-27T21:12:23Z", "type": "commit"}, {"oid": "885212ee3630e14c75f399f82f32f2e4a6e618c7", "url": "https://github.com/DataDog/dd-trace-java/commit/885212ee3630e14c75f399f82f32f2e4a6e618c7", "message": "ClassLoaderHasNoResourceMatcher: put to cache outside critical section", "committedDate": "2020-02-27T21:12:23Z", "type": "forcePushed"}]}