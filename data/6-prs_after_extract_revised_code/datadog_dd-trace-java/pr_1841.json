{"pr_number": 1841, "pr_title": "Add the EnsureTrace prioritization strategy.", "pr_createdAt": "2020-09-07T15:14:37Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1841", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwMDcxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1841#discussion_r484500717", "bodyText": "If you rebase off master there is a configProvider.getEnum which would clean this up I think. The configuration parameter would be defined by the enum values themselves.", "author": "richardstartin", "createdAt": "2020-09-07T15:47:09Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -537,8 +539,20 @@ private static Writer createWriter(\n             TimeUnit.SECONDS.toMillis(config.getAgentTimeout()),\n             Config.get().isTraceAgentV05Enabled());\n \n+    final String prioritizationType = config.getPrioritizationType();", "originalCommit": "6e86396e8cb79e9bbc9533c451f5817fff915516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwOTkzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1841#discussion_r484509937", "bodyText": "As we commented offline, there is no a configProvider instance in CoreTracer yet. This will be refactored in the future.", "author": "drodriguezhdez", "createdAt": "2020-09-07T16:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwMDcxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwMTE2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1841#discussion_r484501166", "bodyText": "Please use the enum instead", "author": "richardstartin", "createdAt": "2020-09-07T15:48:20Z", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/PrioritizationConstants.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.bootstrap.instrumentation.api;\n+\n+public final class PrioritizationConstants {", "originalCommit": "6e86396e8cb79e9bbc9533c451f5817fff915516", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f74f520171c76792a924716af204295cc072d80c", "url": "https://github.com/DataDog/dd-trace-java/commit/f74f520171c76792a924716af204295cc072d80c", "message": "Add the EnsureTrace prioritization strategy.", "committedDate": "2020-09-07T15:49:33Z", "type": "commit"}, {"oid": "f74f520171c76792a924716af204295cc072d80c", "url": "https://github.com/DataDog/dd-trace-java/commit/f74f520171c76792a924716af204295cc072d80c", "message": "Add the EnsureTrace prioritization strategy.", "committedDate": "2020-09-07T15:49:33Z", "type": "forcePushed"}, {"oid": "35716c71a702db06b6b394d2bf15b56d29412472", "url": "https://github.com/DataDog/dd-trace-java/commit/35716c71a702db06b6b394d2bf15b56d29412472", "message": "Fix EnsureTrace flush test", "committedDate": "2020-09-08T07:28:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxMDAzMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1841#discussion_r485010030", "bodyText": "I think rather than Queue; this should either be...\n create(Queue primary, Queue secondary)\nOR\ncreate(Queue<List> primary, Queue<List> secondary)", "author": "dougqh", "createdAt": "2020-09-08T15:28:24Z", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/Prioritization.java", "diffHunk": "@@ -10,33 +10,87 @@\n import java.util.concurrent.TimeUnit;\n \n public enum Prioritization {\n+  ENSURE_TRACE {\n+    @Override\n+    public PrioritizationStrategy create(", "originalCommit": "35716c71a702db06b6b394d2bf15b56d29412472", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMjExNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1841#discussion_r485032114", "bodyText": "There was a discussion about this at the time. Accepting Object allows the flush messages and avoids allocating wrappers, but it has downsides, so we don't want this ever escaping the package.", "author": "richardstartin", "createdAt": "2020-09-08T16:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxMDAzMA=="}], "type": "inlineReview", "revised_code": null}]}