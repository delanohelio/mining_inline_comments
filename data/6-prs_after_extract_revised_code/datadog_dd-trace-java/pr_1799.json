{"pr_number": 1799, "pr_title": "CI-App: Set CI and git tags in test spans", "pr_createdAt": "2020-08-25T09:29:33Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1799", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478264637", "bodyText": "Have you considered introducing a \"CISpanDecorator\" interface or similar which has method(s) this decorator could call to add CI tags to a span? Then you could have Jenkins and Gitlab implementations of that interface (and a shared abstract class with common code) and select the appropriate implementation in the TestDecorator constructor. It should also let you re-use the selected span decorator in TestFrameworkTest rather than have to repeat all those methods and constants everywhere.\nThis would avoid mixing all these different constants and methods in the same class and make clear which are specific to Jenkins/Gitlab. Also makes it easier to add other CI pipelines in the future.", "author": "mcculls", "createdAt": "2020-08-27T08:57:57Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -2,19 +2,68 @@\n \n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.api.DDTags;\n+import datadog.trace.api.sampling.PrioritySampling;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public abstract class TestDecorator extends BaseDecorator {\n-  public static final String TEST_PASS = \"PASS\";\n-  public static final String TEST_FAIL = \"FAIL\";\n-  public static final String TEST_SKIP = \"SKIP\";\n+\n+  public static final String TEST_PASS = \"pass\";\n+  public static final String TEST_FAIL = \"fail\";\n+  public static final String TEST_SKIP = \"skip\";\n+\n+  public static final String JENKINS = \"JENKINS_URL\";\n+  static final String JENKINS_PROVIDER_NAME = \"jenkins\";\n+  static final String JENKINS_PIPELINE_ID = \"BUILD_TAG\";\n+  static final String JENKINS_PIPELINE_NUMBER = \"BUILD_NUMBER\";\n+  static final String JENKINS_PIPELINE_URL = \"BUILD_URL\";\n+  static final String JENKINS_JOB_URL = \"JOB_URL\";\n+  static final String JENKINS_WORKSPACE_PATH = \"WORKSPACE\";\n+  static final String JENKINS_GIT_REPOSITORY_URL = \"GIT_URL\";\n+  static final String JENKINS_GIT_COMMIT = \"GIT_COMMIT\";\n+  static final String JENKINS_GIT_BRANCH = \"GIT_BRANCH\";", "originalCommit": "7d7ea796685f958598b4ee571430619261c7bfc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NDY0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478274643", "bodyText": "Good point. Yes, I considered that option, but I realized that all implemented decorators have a reused hierarchy. In this case, the hypothetical CIDecorator is inseparable from the TestDecorator, so that's why I chose not to separate it. Apart from that, I didn't want to \"pollute\" the span decorators package with decorators that cannot be reused. I preferred to have it encapsulated in the TestDecorator class.", "author": "drodriguezhdez", "createdAt": "2020-08-27T09:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4NTg0OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478285849", "bodyText": "Separating it would make this PR much smaller though - because you could then pass that span decorator through JUnit4Decorator.DECORATE and TestNGDecorator.DECORATE and simply call the method to decorate the span instead of having to duplicate all those methods across the two test hierarchies.\nIt also makes it easier for someone else to add a CI specific tag, since they just need to add it in one place and they don't have to remember to also add it to the JUnit4 and TestNG base types.", "author": "mcculls", "createdAt": "2020-08-27T09:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4NzQ3MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478287471", "bodyText": "Note it doesn't have to be in the \"span decorators\" package - just extracting the code that adds CI tags to a separate type (with Jenkins and Gitlab implementations) so it can be passed around using composition is enough.", "author": "mcculls", "createdAt": "2020-08-27T09:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwMzk5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478303992", "bodyText": "As we talked offline, totally agree with the benefits you mention, but I'm not totally sure if we want those not-reusable decorators as separate classes. Note that this PR has only 2 CI implementations, but the number will grow to more than 10. If we're comfortable with having this level of granularity for those decorators, I'll change it \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-08-27T10:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "258c1df38951d03618340b33b8e2a9272d452a3f", "chunk": "diff --git a/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java b/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java\nindex 14306599ce..0767e8688e 100644\n--- a/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java\n+++ b/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java\n\n@@ -9,62 +9,14 @@ import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n-import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public abstract class TestDecorator extends BaseDecorator {\n-\n   public static final String TEST_PASS = \"pass\";\n   public static final String TEST_FAIL = \"fail\";\n   public static final String TEST_SKIP = \"skip\";\n \n-  public static final String JENKINS = \"JENKINS_URL\";\n-  static final String JENKINS_PROVIDER_NAME = \"jenkins\";\n-  static final String JENKINS_PIPELINE_ID = \"BUILD_TAG\";\n-  static final String JENKINS_PIPELINE_NUMBER = \"BUILD_NUMBER\";\n-  static final String JENKINS_PIPELINE_URL = \"BUILD_URL\";\n-  static final String JENKINS_JOB_URL = \"JOB_URL\";\n-  static final String JENKINS_WORKSPACE_PATH = \"WORKSPACE\";\n-  static final String JENKINS_GIT_REPOSITORY_URL = \"GIT_URL\";\n-  static final String JENKINS_GIT_COMMIT = \"GIT_COMMIT\";\n-  static final String JENKINS_GIT_BRANCH = \"GIT_BRANCH\";\n-\n-  public static final String GITLAB = \"GITLAB_CI\";\n-  static final String GITLAB_PROVIDER_NAME = \"gitlab\";\n-  static final String GITLAB_PIPELINE_ID = \"CI_PIPELINE_ID\";\n-  static final String GITLAB_PIPELINE_NUMBER = \"CI_PIPELINE_IID\";\n-  static final String GITLAB_PIPELINE_URL = \"CI_PIPELINE_URL\";\n-  static final String GITLAB_JOB_URL = \"CI_JOB_URL\";\n-  static final String GITLAB_WORKSPACE_PATH = \"CI_PROJECT_DIR\";\n-  static final String GITLAB_GIT_REPOSITORY_URL = \"CI_REPOSITORY_URL\";\n-  static final String GITLAB_GIT_COMMIT = \"CI_COMMIT_SHA\";\n-  static final String GITLAB_GIT_BRANCH = \"CI_COMMIT_BRANCH\";\n-  static final String GITLAB_GIT_TAG = \"CI_COMMIT_TAG\";\n-\n-  @Getter private boolean isCI;\n-  @Getter private String ciProviderName;\n-  @Getter private String ciPipelineId;\n-  @Getter private String ciPipelineNumber;\n-  @Getter private String ciPipelineUrl;\n-  @Getter private String ciJobUrl;\n-  @Getter private String ciWorkspacePath;\n-  @Getter private String gitRepositoryUrl;\n-  @Getter private String gitCommit;\n-  @Getter private String gitBranch;\n-  @Getter private String gitTag;\n-\n-  public TestDecorator() {\n-    // CI and Git information is obtained\n-    // from different environment variables\n-    // depending on which CI server is running the build.\n-    if (System.getenv(JENKINS) != null) {\n-      setJenkinsData();\n-    } else if (System.getenv(GITLAB) != null) {\n-      setGitLabData();\n-    }\n-  }\n-\n   protected abstract String testFramework();\n \n   protected String spanKind() {\n"}}, {"oid": "258c1df38951d03618340b33b8e2a9272d452a3f", "url": "https://github.com/DataDog/dd-trace-java/commit/258c1df38951d03618340b33b8e2a9272d452a3f", "message": "Set SamplingPriority to SAMPLER_KEEP", "committedDate": "2020-08-27T14:55:44Z", "type": "commit"}, {"oid": "6f1f7831b9546f17d3d34aaee34d5afb2f690ac5", "url": "https://github.com/DataDog/dd-trace-java/commit/6f1f7831b9546f17d3d34aaee34d5afb2f690ac5", "message": "Added CI and Git tags to Test traces", "committedDate": "2020-08-27T14:56:40Z", "type": "commit"}, {"oid": "ae3aeaca1685606db7a63f701907257996a91ed9", "url": "https://github.com/DataDog/dd-trace-java/commit/ae3aeaca1685606db7a63f701907257996a91ed9", "message": "Added comments", "committedDate": "2020-08-27T14:56:52Z", "type": "commit"}, {"oid": "227fb5128566806ffe97fd62705e84c9092b2541", "url": "https://github.com/DataDog/dd-trace-java/commit/227fb5128566806ffe97fd62705e84c9092b2541", "message": "Reverting sampling priority forcing", "committedDate": "2020-08-27T14:56:52Z", "type": "commit"}, {"oid": "683029afb0acbaaf70d1e54a170a025e69f51603", "url": "https://github.com/DataDog/dd-trace-java/commit/683029afb0acbaaf70d1e54a170a025e69f51603", "message": "Added CI and Git tags to JUnit5 instrumentation.", "committedDate": "2020-08-27T15:03:39Z", "type": "commit"}, {"oid": "683029afb0acbaaf70d1e54a170a025e69f51603", "url": "https://github.com/DataDog/dd-trace-java/commit/683029afb0acbaaf70d1e54a170a025e69f51603", "message": "Added CI and Git tags to JUnit5 instrumentation.", "committedDate": "2020-08-27T15:03:39Z", "type": "forcePushed"}, {"oid": "454d252de63cb6e12436bd73603988d30cf951a4", "url": "https://github.com/DataDog/dd-trace-java/commit/454d252de63cb6e12436bd73603988d30cf951a4", "message": "Add skip_reason tag to JUnit4 and TestNG test traces", "committedDate": "2020-08-27T15:27:04Z", "type": "commit"}]}