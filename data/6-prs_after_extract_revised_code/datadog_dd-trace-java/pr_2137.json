{"pr_number": 2137, "pr_title": "improve string handling", "pr_createdAt": "2020-11-30T23:12:57Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2137", "timeline": [{"oid": "5361b8a6fa892477b694db7904fea2cd53fd8bf3", "url": "https://github.com/DataDog/dd-trace-java/commit/5361b8a6fa892477b694db7904fea2cd53fd8bf3", "message": "improve check for membership of the same package in the reference creator", "committedDate": "2020-11-30T23:10:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwNDk5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533204997", "bodyText": "Won't this also match when to is in a sub package as well, i.e. to = \"foo/bar/baz/SomeClass\" and from = \"foo/bar/OtherClass\" ?", "author": "bantonsson", "createdAt": "2020-12-01T09:21:40Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -81,13 +81,8 @@\n     return references;\n   }\n \n-  /**\n-   * Get the package of an internal class name.\n-   *\n-   * <p>foo/bar/Baz -> foo/bar/\n-   */\n-  private static String internalPackageName(final String internalName) {\n-    return internalName.replaceAll(\"/[^/]+$\", \"\");\n+  private static boolean samePackage(String from, String to) {\n+    return from.regionMatches(0, to, 0, from.lastIndexOf('/') + 1);", "originalCommit": "dae13bf444ca29216a0ffd88cb6f7db5e1cf18dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIxNDk0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533214941", "bodyText": "\ud83e\udd26", "author": "richardstartin", "createdAt": "2020-12-01T09:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwNDk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a0203620d0b3bdca41b04cebeb9323328695710a", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java\nindex e4395aecd8..d5455ef308 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java\n\n@@ -82,7 +82,9 @@ public class ReferenceCreator extends ClassVisitor {\n   }\n \n   private static boolean samePackage(String from, String to) {\n-    return from.regionMatches(0, to, 0, from.lastIndexOf('/') + 1);\n+    int fromLength = from.lastIndexOf('/');\n+    int toLength = to.lastIndexOf('/');\n+    return fromLength == toLength && from.regionMatches(0, to, 0, fromLength + 1);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwOTM4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533209389", "bodyText": "Could we pull out the getInternalName() calls? Even though they're just substring calls it feels unnecessary.", "author": "bantonsson", "createdAt": "2020-12-01T09:24:40Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -98,8 +93,7 @@ private static String internalPackageName(final String internalName) {\n   private static Reference.Flag computeMinimumClassAccess(final Type from, final Type to) {\n     if (from.getInternalName().equalsIgnoreCase(to.getInternalName())) {\n       return Reference.Flag.PRIVATE_OR_HIGHER;\n-    } else if (internalPackageName(from.getInternalName())\n-        .equals(internalPackageName(to.getInternalName()))) {\n+    } else if (samePackage(from.getInternalName(), to.getInternalName())) {", "originalCommit": "dae13bf444ca29216a0ffd88cb6f7db5e1cf18dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI0MzUxMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533243512", "bodyText": "Yes, I hadn't realised this was allocating a substring every time (this was just a search for all String.replaceAll after yesterday's find) - I've changed things to avoid calling it more often than necessary.", "author": "richardstartin", "createdAt": "2020-12-01T09:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwOTM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a0203620d0b3bdca41b04cebeb9323328695710a", "chunk": "diff --git a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java\nindex e4395aecd8..d5455ef308 100644\n--- a/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java\n+++ b/dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java\n\n@@ -90,10 +92,10 @@ public class ReferenceCreator extends ClassVisitor {\n    *\n    * @return A reference flag with the required level of access.\n    */\n-  private static Reference.Flag computeMinimumClassAccess(final Type from, final Type to) {\n-    if (from.getInternalName().equalsIgnoreCase(to.getInternalName())) {\n+  private static Reference.Flag computeMinimumClassAccess(final String from, final String to) {\n+    if (from.equalsIgnoreCase(to)) {\n       return Reference.Flag.PRIVATE_OR_HIGHER;\n-    } else if (samePackage(from.getInternalName(), to.getInternalName())) {\n+    } else if (samePackage(from, to)) {\n       return Reference.Flag.PACKAGE_OR_HIGHER;\n     } else {\n       return Reference.Flag.PUBLIC;\n"}}, {"oid": "a0203620d0b3bdca41b04cebeb9323328695710a", "url": "https://github.com/DataDog/dd-trace-java/commit/a0203620d0b3bdca41b04cebeb9323328695710a", "message": "pull repetitive calls to Type.getInternalName(), which allocates a substring each time it's called", "committedDate": "2020-12-01T09:56:32Z", "type": "forcePushed"}, {"oid": "2dea7236705f2078ada6b865ab18859eddfb8d3d", "url": "https://github.com/DataDog/dd-trace-java/commit/2dea7236705f2078ada6b865ab18859eddfb8d3d", "message": "remove inefficient use of String.replaceAll in Google HTTP client instrumentation", "committedDate": "2020-12-01T09:58:26Z", "type": "commit"}, {"oid": "9f9dd0ac7ab8477c8eef0a7ab753f422d5c674aa", "url": "https://github.com/DataDog/dd-trace-java/commit/9f9dd0ac7ab8477c8eef0a7ab753f422d5c674aa", "message": "pull repetitive calls to Type.getInternalName(), which allocates a substring each time it's called", "committedDate": "2020-12-01T09:58:37Z", "type": "commit"}, {"oid": "9f9dd0ac7ab8477c8eef0a7ab753f422d5c674aa", "url": "https://github.com/DataDog/dd-trace-java/commit/9f9dd0ac7ab8477c8eef0a7ab753f422d5c674aa", "message": "pull repetitive calls to Type.getInternalName(), which allocates a substring each time it's called", "committedDate": "2020-12-01T09:58:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDI4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533284284", "bodyText": "could this use url.replace(\"%20\", \"+\") since it's just a literal replacement and no regex is involved?", "author": "mcculls", "createdAt": "2020-12-01T10:22:12Z", "path": "dd-java-agent/instrumentation/google-http-client/src/main/java/datadog/trace/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "diffHunk": "@@ -23,7 +25,7 @@ protected URI url(final HttpRequest httpRequest) throws URISyntaxException {\n     // Google uses %20 (space) instead of \"+\" for spaces in the fragment\n     // Add \"+\" back for consistency with the other http client instrumentations\n     final String url = httpRequest.getUrl().build();\n-    final String fixedUrl = url.replaceAll(\"%20\", \"+\");\n+    final String fixedUrl = URL_REPLACEMENT.matcher(url).replaceAll(\"+\");", "originalCommit": "9f9dd0ac7ab8477c8eef0a7ab753f422d5c674aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxOTE0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533319140", "bodyText": "Here's the implementation of that in JDK8:\n    public String replace(CharSequence target, CharSequence replacement) {\n        return Pattern.compile(target.toString(), Pattern.LITERAL).matcher(\n                this).replaceAll(Matcher.quoteReplacement(replacement.toString()));\n    }", "author": "richardstartin", "createdAt": "2020-12-01T10:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNDIxMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533324213", "bodyText": "thanks, I'd forgotten JDK8 still used that approach", "author": "mcculls", "createdAt": "2020-12-01T11:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDI4NA=="}], "type": "inlineReview", "revised_code": null}]}