{"pr_number": 1528, "pr_title": "Use ClassValue to store ThreadLocal call depth", "pr_createdAt": "2020-06-03T13:20:24Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1528", "timeline": [{"oid": "e3b0145b1af50a6c684527f6e03c797babf3c4da", "url": "https://github.com/DataDog/dd-trace-java/commit/e3b0145b1af50a6c684527f6e03c797babf3c4da", "message": "Reuse CallDepth HasMap nodes", "committedDate": "2020-06-03T10:43:18Z", "type": "commit"}, {"oid": "be73bf9ca46d412ed8a115fdbc93928dc6f8c636", "url": "https://github.com/DataDog/dd-trace-java/commit/be73bf9ca46d412ed8a115fdbc93928dc6f8c636", "message": "store ThreadLocal per-class depths in a ClassValue map", "committedDate": "2020-06-03T14:45:41Z", "type": "forcePushed"}, {"oid": "f183719eddfa86afcdacef5bcf31f003693878e1", "url": "https://github.com/DataDog/dd-trace-java/commit/f183719eddfa86afcdacef5bcf31f003693878e1", "message": "store ThreadLocal per-class depths in a ClassValue map", "committedDate": "2020-06-03T14:49:57Z", "type": "forcePushed"}, {"oid": "5f69a124432c26e5a8fc679cba2af0d598a471f5", "url": "https://github.com/DataDog/dd-trace-java/commit/5f69a124432c26e5a8fc679cba2af0d598a471f5", "message": "store ThreadLocal per-class depths in a ClassValue map", "committedDate": "2020-06-03T14:54:48Z", "type": "commit"}, {"oid": "5f69a124432c26e5a8fc679cba2af0d598a471f5", "url": "https://github.com/DataDog/dd-trace-java/commit/5f69a124432c26e5a8fc679cba2af0d598a471f5", "message": "store ThreadLocal per-class depths in a ClassValue map", "committedDate": "2020-06-03T14:54:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDcyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1528#discussion_r434630724", "bodyText": "Crazy idea, but instead of removing, should we just reset the depth to 0?", "author": "tylerbenson", "createdAt": "2020-06-03T14:55:23Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/CallDepthThreadLocalMap.java", "diffHunk": "@@ -1,36 +1,45 @@\n package datadog.trace.bootstrap;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n /**\n  * Utility to track nested instrumentation.\n  *\n  * <p>For example, this can be used to track nested calls to super() in constructors by calling\n  * #incrementCallDepth at the beginning of each constructor.\n  */\n public class CallDepthThreadLocalMap {\n-  private static final ThreadLocal<Map<Object, Integer>> TLS =\n-      new ThreadLocal<Map<Object, Integer>>() {\n+\n+  private static final ClassValue<ThreadLocalDepth> TLS =\n+      new ClassValue<ThreadLocalDepth>() {\n         @Override\n-        public Map<Object, Integer> initialValue() {\n-          return new HashMap<>();\n+        protected ThreadLocalDepth computeValue(Class<?> type) {\n+          return new ThreadLocalDepth();\n         }\n       };\n \n-  public static int incrementCallDepth(final Object k) {\n-    final Map<Object, Integer> map = TLS.get();\n-    Integer depth = map.get(k);\n-    if (depth == null) {\n-      depth = 0;\n-    } else {\n-      depth += 1;\n+  public static int incrementCallDepth(final Class<?> k) {\n+    return TLS.get(k).get().increment();\n+  }\n+\n+  public static void reset(final Class<?> k) {\n+    TLS.get(k).remove();", "originalCommit": "5f69a124432c26e5a8fc679cba2af0d598a471f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0ODIxMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1528#discussion_r434648213", "bodyText": "@bantonsson what do you think? On the one hand, this is a recipe for a memory leak with non cached threads, on the other it's a parsimonious approach when threads are cached.", "author": "richardstartin", "createdAt": "2020-06-03T15:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MDY0Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1528#discussion_r434650647", "bodyText": "I actually think that it's fine to leave the Depth in there. I mean if people are creating threads and they don't run to completion, they have other issues.", "author": "bantonsson", "createdAt": "2020-06-03T15:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NDM3Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1528#discussion_r434654377", "bodyText": "Done", "author": "richardstartin", "createdAt": "2020-06-03T15:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "42c488a0b28b3978a9f2586024772c77e9e24721", "chunk": "diff --git a/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/CallDepthThreadLocalMap.java b/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/CallDepthThreadLocalMap.java\nindex dd2a8af04f..c044c1c845 100644\n--- a/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/CallDepthThreadLocalMap.java\n+++ b/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/CallDepthThreadLocalMap.java\n\n@@ -21,7 +21,7 @@ public class CallDepthThreadLocalMap {\n   }\n \n   public static void reset(final Class<?> k) {\n-    TLS.get(k).remove();\n+    TLS.get(k).get().depth = 0;\n   }\n \n   private static final class Depth {\n"}}, {"oid": "42c488a0b28b3978a9f2586024772c77e9e24721", "url": "https://github.com/DataDog/dd-trace-java/commit/42c488a0b28b3978a9f2586024772c77e9e24721", "message": "reinitialise Depth rather than removing ThreadLocal", "committedDate": "2020-06-03T15:25:21Z", "type": "commit"}]}