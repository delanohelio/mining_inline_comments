{"pr_number": 1360, "pr_title": "Add instrumentation to detect the route at the beginning of the spring request", "pr_createdAt": "2020-04-09T18:55:07Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1360", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNzc0Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406427747", "bodyText": "I guess this doesn't have to implement Filter since it's not being used as one, but since we don't have access to the functional interfaces there doesn't really seem to be a better type in my mind", "author": "devinsba", "createdAt": "2020-04-09T19:28:23Z", "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/HandlerMappingResourceNameFilter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.springweb;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springweb.SpringWebHttpServerDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import org.springframework.web.servlet.HandlerExecutionChain;\n+import org.springframework.web.servlet.HandlerMapping;\n+\n+public class HandlerMappingResourceNameFilter implements Filter {", "originalCommit": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMDI1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406430259", "bodyText": "Yeah, that was my thought also...  If there's a better generic interface that takes a single argument I'd be happy to use that instead.", "author": "tylerbenson", "createdAt": "2020-04-09T19:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNzc0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3ODQ2Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406878462", "bodyText": "Do we want log here?  Add a health metric?", "author": "dougqh", "createdAt": "2020-04-10T18:13:35Z", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java", "diffHunk": "@@ -58,12 +61,32 @@ protected Integer status(final HttpServletResponse httpServletResponse) {\n   public AgentSpan onRequest(final AgentSpan span, final HttpServletRequest request) {\n     assert span != null;\n     if (request != null) {\n-      span.setTag(\"servlet.context\", request.getContextPath());\n       span.setTag(\"servlet.path\", request.getServletPath());\n+      span.setTag(\"servlet.context\", request.getContextPath());\n+      onContext(span, request, request.getServletContext());\n     }\n     return super.onRequest(span, request);\n   }\n \n+  /**\n+   * This method executes the filter created by\n+   * datadog.trace.instrumentation.springweb.DispatcherServletInstrumentation$HandlerMappingAdvice.\n+   * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n+   * chain.\n+   */\n+  private void onContext(\n+      final AgentSpan span, final HttpServletRequest request, final ServletContext context) {\n+    final Object attribute = context.getAttribute(\"dd.dispatcher-filter\");\n+    if (attribute instanceof Filter) {\n+      final Filter filter = (Filter) attribute;\n+      try {\n+        request.setAttribute(DD_SPAN_ATTRIBUTE, span);\n+        filter.doFilter(request, null, null);\n+      } catch (final IOException | ServletException e) {\n+      }", "originalCommit": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDYzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r408350637", "bodyText": "I added a log statement, even though the exception is never thrown.  If we had a better shared interface we could avoid the try/catch (filter doesn't actually need to implement the Filter interface).", "author": "tylerbenson", "createdAt": "2020-04-14T18:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3ODQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ada2fdf62944a26451998c5c4a83a9397cee9040", "chunk": "diff --git a/dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java b/dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java\nindex 0c9822d6c3..d939ae2764 100644\n--- a/dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java\n+++ b/dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java\n\n@@ -78,11 +80,11 @@ public class Servlet3Decorator\n       final AgentSpan span, final HttpServletRequest request, final ServletContext context) {\n     final Object attribute = context.getAttribute(\"dd.dispatcher-filter\");\n     if (attribute instanceof Filter) {\n-      final Filter filter = (Filter) attribute;\n+      request.setAttribute(DD_SPAN_ATTRIBUTE, span);\n       try {\n-        request.setAttribute(DD_SPAN_ATTRIBUTE, span);\n-        filter.doFilter(request, null, null);\n+        ((Filter) attribute).doFilter(request, null, null);\n       } catch (final IOException | ServletException e) {\n+        log.debug(\"Exception unexpectedly thrown by filter\", e);\n       }\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNDkzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406904939", "bodyText": "This seems completely unrelated.  While it is small, generally, I'd prefer to keep clean-up to what is relevant to the change at hand.", "author": "dougqh", "createdAt": "2020-04-10T19:21:06Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RunnableInstrumentation.java", "diffHunk": "@@ -37,9 +37,7 @@ public RunnableInstrumentation() {\n \n   @Override\n   public Map<String, String> contextStore() {\n-    final Map<String, String> map = new HashMap<>();\n-    map.put(Runnable.class.getName(), State.class.getName());\n-    return Collections.unmodifiableMap(map);\n+    return singletonMap(Runnable.class.getName(), State.class.getName());", "originalCommit": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64161d93c9c9ea1ecd95ee77ef72baccd6bd996f", "chunk": "diff --git a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RunnableInstrumentation.java b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RunnableInstrumentation.java\nindex b1f0934156..6280120066 100644\n--- a/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RunnableInstrumentation.java\n+++ b/dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RunnableInstrumentation.java\n\n@@ -37,7 +37,9 @@ public final class RunnableInstrumentation extends Instrumenter.Default {\n \n   @Override\n   public Map<String, String> contextStore() {\n-    return singletonMap(Runnable.class.getName(), State.class.getName());\n+    final Map<String, String> map = new HashMap<>();\n+    map.put(Runnable.class.getName(), State.class.getName());\n+    return Collections.unmodifiableMap(map);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTY0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406905641", "bodyText": "Should setAttribute be inside the try?", "author": "dougqh", "createdAt": "2020-04-10T19:22:57Z", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java", "diffHunk": "@@ -58,12 +61,32 @@ protected Integer status(final HttpServletResponse httpServletResponse) {\n   public AgentSpan onRequest(final AgentSpan span, final HttpServletRequest request) {\n     assert span != null;\n     if (request != null) {\n-      span.setTag(\"servlet.context\", request.getContextPath());\n       span.setTag(\"servlet.path\", request.getServletPath());\n+      span.setTag(\"servlet.context\", request.getContextPath());\n+      onContext(span, request, request.getServletContext());\n     }\n     return super.onRequest(span, request);\n   }\n \n+  /**\n+   * This method executes the filter created by\n+   * datadog.trace.instrumentation.springweb.DispatcherServletInstrumentation$HandlerMappingAdvice.\n+   * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n+   * chain.\n+   */\n+  private void onContext(\n+      final AgentSpan span, final HttpServletRequest request, final ServletContext context) {\n+    final Object attribute = context.getAttribute(\"dd.dispatcher-filter\");\n+    if (attribute instanceof Filter) {\n+      final Filter filter = (Filter) attribute;\n+      try {\n+        request.setAttribute(DD_SPAN_ATTRIBUTE, span);", "originalCommit": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ada2fdf62944a26451998c5c4a83a9397cee9040", "chunk": "diff --git a/dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java b/dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java\nindex 0c9822d6c3..d939ae2764 100644\n--- a/dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java\n+++ b/dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java\n\n@@ -78,11 +80,11 @@ public class Servlet3Decorator\n       final AgentSpan span, final HttpServletRequest request, final ServletContext context) {\n     final Object attribute = context.getAttribute(\"dd.dispatcher-filter\");\n     if (attribute instanceof Filter) {\n-      final Filter filter = (Filter) attribute;\n+      request.setAttribute(DD_SPAN_ATTRIBUTE, span);\n       try {\n-        request.setAttribute(DD_SPAN_ATTRIBUTE, span);\n-        filter.doFilter(request, null, null);\n+        ((Filter) attribute).doFilter(request, null, null);\n       } catch (final IOException | ServletException e) {\n+        log.debug(\"Exception unexpectedly thrown by filter\", e);\n       }\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTExNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r407671114", "bodyText": "I realize this didn't change in this PR, but I'll ask anyway.\nI'd expect scope.close to be inside of a finally block, but usually, it is not.\nI'd actually expect XDecorator.beforeFinish to be inside a finally block as well.\nMaybe, the first two lines don't typically raise exceptions; however, we might not know because of the suppress=Throwable.\nBasically, I'm concerned that this code is not obviously correct.  From looking around, this seems to be a general problem with our resource handling.", "author": "dougqh", "createdAt": "2020-04-13T19:30:50Z", "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -79,11 +132,6 @@ public static void stopSpan(\n       DECORATE_RENDER.beforeFinish(scope);\n       scope.close();", "originalCommit": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDU0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r408340543", "bodyText": "It's true that exceptions thrown from our decorators could cause problems in many places... That should probably be addressed as a separate issue.", "author": "tylerbenson", "createdAt": "2020-04-14T18:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTExNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "64161d93c9c9ea1ecd95ee77ef72baccd6bd996f", "url": "https://github.com/DataDog/dd-trace-java/commit/64161d93c9c9ea1ecd95ee77ef72baccd6bd996f", "message": "Add instrumentation to detect the route at the beginning of the spring request\n\nInstead of waiting till the handler is called, otherwise if a response is returned by a filter then the proper name wouldn't be set and would fall back to the URL.", "committedDate": "2020-04-14T18:19:14Z", "type": "commit"}, {"oid": "ada2fdf62944a26451998c5c4a83a9397cee9040", "url": "https://github.com/DataDog/dd-trace-java/commit/ada2fdf62944a26451998c5c4a83a9397cee9040", "message": "Ensure RequestDispatcher span is part of expected trace", "committedDate": "2020-04-14T18:31:46Z", "type": "forcePushed"}, {"oid": "ce006e14056443ee856e888fe313844e7563d4c1", "url": "https://github.com/DataDog/dd-trace-java/commit/ce006e14056443ee856e888fe313844e7563d4c1", "message": "Ensure RequestDispatcher span is part of expected trace", "committedDate": "2020-04-14T18:56:16Z", "type": "commit"}, {"oid": "ce006e14056443ee856e888fe313844e7563d4c1", "url": "https://github.com/DataDog/dd-trace-java/commit/ce006e14056443ee856e888fe313844e7563d4c1", "message": "Ensure RequestDispatcher span is part of expected trace", "committedDate": "2020-04-14T18:56:16Z", "type": "forcePushed"}]}