{"pr_number": 1480, "pr_title": "GatherVcfs and MergeVcfs: add COMMENT=  + GatherVcfs SORT", "pr_createdAt": "2020-03-03T13:55:18Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1480", "timeline": [{"oid": "225a4a98333433b94e3613324f2805d25f73b00a", "url": "https://github.com/broadinstitute/picard/commit/225a4a98333433b94e3613324f2805d25f73b00a", "message": "comment and sort gathervcfs", "committedDate": "2020-03-03T11:42:53Z", "type": "commit"}, {"oid": "e2d15197cdf695e9fe6422f2f9b23c326e199b87", "url": "https://github.com/broadinstitute/picard/commit/e2d15197cdf695e9fe6422f2f9b23c326e199b87", "message": "add first variant in list", "committedDate": "2020-03-03T13:13:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4MTUzOA==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r395881538", "bodyText": "This documentation is unclear...I needed to read the code to understand what you mean.\nExplain that the program will assume that the variants in the files come from non overlapping regions, but that while each file is itself sorted, the order that the files are provided in is not to be trusted. If TRUE, instead of sorting all the variants, the program will concatenate the variants from the files using the order of the first variant in each file as the order of the files.\nAlso, \"SORT\" is not a good name, since it's is used elsewhere to mean that the outputs will be sorted....I suggest you use REORDER_INPUT_BY_FIRST_VARIANT", "author": "yfarjoun", "createdAt": "2020-03-20T20:45:21Z", "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,24 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"Re-order the INPUT files according to order of their first variant.\", optional = true, shortName = \"S\")", "originalCommit": "e2d15197cdf695e9fe6422f2f9b23c326e199b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7285e96db0d59dc0943d7d1e650addf3850cc24c", "chunk": "diff --git a/src/main/java/picard/vcf/GatherVcfs.java b/src/main/java/picard/vcf/GatherVcfs.java\nindex d0a5108b5..79b99c65c 100644\n--- a/src/main/java/picard/vcf/GatherVcfs.java\n+++ b/src/main/java/picard/vcf/GatherVcfs.java\n\n@@ -52,12 +52,16 @@ public class GatherVcfs extends CommandLineProgram {\n     @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n     public List<String>  COMMENT = new ArrayList<>();\n     \n-    @Argument(doc = \"Re-order the INPUT files according to order of their first variant.\", optional = true, shortName = \"S\")\n-    public boolean  SORT = false;\n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+            + \"but the order of the files in INPUT is untrusted. \"\n+            + \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file.\",\n+            optional = true, shortName = \"S\")\n+    public boolean  REORDER_INPUT_BY_FIRST_VARIANT = false;\n \n     private static final Log log = Log.getInstance(GatherVcfs.class);\n \n-    /** sort VCFs using first variant */\n+    /** class used to sort VCFs using the first variant */\n     private static class FirstVariantInVcf {\n         final File vcfFile;\n         VariantContext firstVariant = null;// may be null if the vcf is empty\n"}}, {"oid": "7285e96db0d59dc0943d7d1e650addf3850cc24c", "url": "https://github.com/broadinstitute/picard/commit/7285e96db0d59dc0943d7d1e650addf3850cc24c", "message": "fix comments for https://github.com/broadinstitute/picard/pull/1480/files#r395881538", "committedDate": "2020-04-28T10:52:48Z", "type": "commit"}, {"oid": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "url": "https://github.com/broadinstitute/picard/commit/c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "message": "Merge branch 'master' into pl_vcfcomments", "committedDate": "2020-04-28T11:44:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNjYwOA==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425136608", "bodyText": "It would be clearer here if you start with what the option is doing and then explain the reason:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n          \n          \n            \n                @Argument(doc = \"If 'true' the program will reorder INPUT according \"\n          \n          \n            \n                        + \"to the genomic location of the first variant in each file. \"\n          \n          \n            \n                        + \"this is useful since the order of variants in each file in INPUT come from non overlapping regions \"\n          \n          \n            \n                        + \" but the order of the files in INPUT is untrusted.\",\n          \n          \n            \n                optional = true, shortName = \"RI\")", "author": "gbggrant", "createdAt": "2020-05-14T13:29:27Z", "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72ab8a49262122d00ebba826af1f5df02d3c5f56", "chunk": "diff --git a/src/main/java/picard/vcf/GatherVcfs.java b/src/main/java/picard/vcf/GatherVcfs.java\nindex 79b99c65c..77caaa3b7 100644\n--- a/src/main/java/picard/vcf/GatherVcfs.java\n+++ b/src/main/java/picard/vcf/GatherVcfs.java\n\n@@ -52,7 +52,11 @@ public class GatherVcfs extends CommandLineProgram {\n     @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n     public List<String>  COMMENT = new ArrayList<>();\n     \n-    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+    @Argument(doc = \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file. \"\n+            + \"this is useful since the order of variants in each file in INPUT come from non overlapping regions \"\n+            + \" but the order of the files in INPUT is untrusted.\",\n+    optional = true, shortName = \"RI\")\n             + \"but the order of the files in INPUT is untrusted. \"\n             + \"If 'true' the program will reorder INPUT according \"\n             + \"to the genomic location of the first variant in each file.\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzODM1MA==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425138350", "bodyText": "'reorder'\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** class used to sort VCFs using the first variant */\n          \n          \n            \n                /** class used to reorder input VCFs using the first variant */", "author": "gbggrant", "createdAt": "2020-05-14T13:31:40Z", "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+            + \"but the order of the files in INPUT is untrusted. \"\n+            + \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file.\",\n+            optional = true, shortName = \"S\")\n+    public boolean  REORDER_INPUT_BY_FIRST_VARIANT = false;\n \n     private static final Log log = Log.getInstance(GatherVcfs.class);\n \n+    /** class used to sort VCFs using the first variant */", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72ab8a49262122d00ebba826af1f5df02d3c5f56", "chunk": "diff --git a/src/main/java/picard/vcf/GatherVcfs.java b/src/main/java/picard/vcf/GatherVcfs.java\nindex 79b99c65c..77caaa3b7 100644\n--- a/src/main/java/picard/vcf/GatherVcfs.java\n+++ b/src/main/java/picard/vcf/GatherVcfs.java\n\n@@ -52,7 +52,11 @@ public class GatherVcfs extends CommandLineProgram {\n     @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n     public List<String>  COMMENT = new ArrayList<>();\n     \n-    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+    @Argument(doc = \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file. \"\n+            + \"this is useful since the order of variants in each file in INPUT come from non overlapping regions \"\n+            + \" but the order of the files in INPUT is untrusted.\",\n+    optional = true, shortName = \"RI\")\n             + \"but the order of the files in INPUT is untrusted. \"\n             + \"If 'true' the program will reorder INPUT according \"\n             + \"to the genomic location of the first variant in each file.\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzODgwMA==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425138800", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    VariantContext firstVariant = null;// may be null if the vcf is empty\n          \n          \n            \n                    VariantContext firstVariant = null;   // may be null if the vcf is empty", "author": "gbggrant", "createdAt": "2020-05-14T13:32:20Z", "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -45,9 +48,28 @@\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"Output VCF file.\")\n     public File OUTPUT;\n+    \n+    @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n+    public List<String>  COMMENT = new ArrayList<>();\n+    \n+    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+            + \"but the order of the files in INPUT is untrusted. \"\n+            + \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file.\",\n+            optional = true, shortName = \"S\")\n+    public boolean  REORDER_INPUT_BY_FIRST_VARIANT = false;\n \n     private static final Log log = Log.getInstance(GatherVcfs.class);\n \n+    /** class used to sort VCFs using the first variant */\n+    private static class FirstVariantInVcf {\n+        final File vcfFile;\n+        VariantContext firstVariant = null;// may be null if the vcf is empty", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72ab8a49262122d00ebba826af1f5df02d3c5f56", "chunk": "diff --git a/src/main/java/picard/vcf/GatherVcfs.java b/src/main/java/picard/vcf/GatherVcfs.java\nindex 79b99c65c..77caaa3b7 100644\n--- a/src/main/java/picard/vcf/GatherVcfs.java\n+++ b/src/main/java/picard/vcf/GatherVcfs.java\n\n@@ -52,7 +52,11 @@ public class GatherVcfs extends CommandLineProgram {\n     @Argument(doc = \"Comment(s) to include in the merged output file's header.\", optional = true, shortName = \"CO\")\n     public List<String>  COMMENT = new ArrayList<>();\n     \n-    @Argument(doc = \"The variants in INPUT come from non overlapping regions \"\n+    @Argument(doc = \"If 'true' the program will reorder INPUT according \"\n+            + \"to the genomic location of the first variant in each file. \"\n+            + \"this is useful since the order of variants in each file in INPUT come from non overlapping regions \"\n+            + \" but the order of the files in INPUT is untrusted.\",\n+    optional = true, shortName = \"RI\")\n             + \"but the order of the files in INPUT is untrusted. \"\n             + \"If 'true' the program will reorder INPUT according \"\n             + \"to the genomic location of the first variant in each file.\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MDIzOQ==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425140239", "bodyText": "add braces:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n          \n          \n            \n                                    if (vcfcxt.firstVariant == null) {\n          \n          \n            \n                                        log.info(\"No variant in \" + f);\n          \n          \n            \n                                     }", "author": "gbggrant", "createdAt": "2020-05-14T13:34:13Z", "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bcb065868b2b13d7dd7f0fb17b611d365797636", "chunk": "diff --git a/src/main/java/picard/vcf/GatherVcfs.java b/src/main/java/picard/vcf/GatherVcfs.java\nindex 79b99c65c..cde661e40 100644\n--- a/src/main/java/picard/vcf/GatherVcfs.java\n+++ b/src/main/java/picard/vcf/GatherVcfs.java\n\n@@ -149,7 +153,9 @@ public class GatherVcfs extends CommandLineProgram {\n                 try (VCFFileReader in = new VCFFileReader(f, false)) {\n                     try (CloseableIterator<VariantContext> iter = in.iterator()) {\n                         vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n-                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                        if (vcfcxt.firstVariant == null) {\n+                            log.info(\"No variant in \" + f);\n+                         }\n                     }\n                 }\n                 filesandvariants.add(vcfcxt);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MTQyOQ==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425141429", "bodyText": "space\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (A.firstVariant==null) {\n          \n          \n            \n                            if (A.firstVariant == null) {", "author": "gbggrant", "createdAt": "2020-05-14T13:35:50Z", "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bcb065868b2b13d7dd7f0fb17b611d365797636", "chunk": "diff --git a/src/main/java/picard/vcf/GatherVcfs.java b/src/main/java/picard/vcf/GatherVcfs.java\nindex 79b99c65c..cde661e40 100644\n--- a/src/main/java/picard/vcf/GatherVcfs.java\n+++ b/src/main/java/picard/vcf/GatherVcfs.java\n\n@@ -149,7 +153,9 @@ public class GatherVcfs extends CommandLineProgram {\n                 try (VCFFileReader in = new VCFFileReader(f, false)) {\n                     try (CloseableIterator<VariantContext> iter = in.iterator()) {\n                         vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n-                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                        if (vcfcxt.firstVariant == null) {\n+                            log.info(\"No variant in \" + f);\n+                         }\n                     }\n                 }\n                 filesandvariants.add(vcfcxt);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MTc3OQ==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425141779", "bodyText": "space and braces\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (B.firstVariant==null) return 0;\n          \n          \n            \n                                if (B.firstVariant == null) {\n          \n          \n            \n                                    return 0;\n          \n          \n            \n                                }", "author": "gbggrant", "createdAt": "2020-05-14T13:36:20Z", "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {\n+                    if (B.firstVariant==null) return 0;", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bcb065868b2b13d7dd7f0fb17b611d365797636", "chunk": "diff --git a/src/main/java/picard/vcf/GatherVcfs.java b/src/main/java/picard/vcf/GatherVcfs.java\nindex 79b99c65c..cde661e40 100644\n--- a/src/main/java/picard/vcf/GatherVcfs.java\n+++ b/src/main/java/picard/vcf/GatherVcfs.java\n\n@@ -149,7 +153,9 @@ public class GatherVcfs extends CommandLineProgram {\n                 try (VCFFileReader in = new VCFFileReader(f, false)) {\n                     try (CloseableIterator<VariantContext> iter = in.iterator()) {\n                         vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n-                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                        if (vcfcxt.firstVariant == null) {\n+                            log.info(\"No variant in \" + f);\n+                         }\n                     }\n                 }\n                 filesandvariants.add(vcfcxt);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MjYwMg==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425142602", "bodyText": "spaces and braces\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (A.firstVariant!=null && B.firstVariant==null) return -1;\n          \n          \n            \n                            if (A.firstVariant != null && B.firstVariant == null) {\n          \n          \n            \n                                return -1;\n          \n          \n            \n                            }", "author": "gbggrant", "createdAt": "2020-05-14T13:37:28Z", "path": "src/main/java/picard/vcf/GatherVcfs.java", "diffHunk": "@@ -105,15 +127,47 @@ private boolean areAllBlockCompressed(final List<File> input) {\n \n     /**\n      * Validates that all headers contain the same set of genotyped samples and that files are in order by position of first record.\n+     * @return the reordered list of files\n      */\n-    private static void assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n-        final VCFHeader header = new VCFFileReader(inputFiles.get(0), false).getFileHeader();\n+    private List<File> assertSameSamplesAndValidOrdering(final List<File> inputFiles) {\n+        final VCFHeader header;\n+        try (VCFFileReader reader = new VCFFileReader(inputFiles.get(0), false)) {\n+            header = reader.getFileHeader();\n+        }\n         final SAMSequenceDictionary dict = header.getSequenceDictionary();\n         final VariantContextComparator comparator = new VariantContextComparator(header.getSequenceDictionary());\n         final List<String> samples = header.getGenotypeSamples();\n \n         File lastFile = null;\n         VariantContext lastContext = null;\n+        \n+        if (REORDER_INPUT_BY_FIRST_VARIANT) {\n+            final List<FirstVariantInVcf> filesandvariants = new ArrayList<>(inputFiles.size());\n+            /* open each input file and get the first variant */\n+            for (final File f : inputFiles) {\n+                final FirstVariantInVcf vcfcxt = new FirstVariantInVcf(f);\n+                try (VCFFileReader in = new VCFFileReader(f, false)) {\n+                    try (CloseableIterator<VariantContext> iter = in.iterator()) {\n+                        vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n+                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                    }\n+                }\n+                filesandvariants.add(vcfcxt);\n+            }\n+            /* order the files according to the position of their 1st variant */\n+            Collections.sort(filesandvariants, (A,B)->{\n+                if (A.firstVariant==null) {\n+                    if (B.firstVariant==null) return 0;\n+                    return 1;\n+                }\n+                if (A.firstVariant!=null && B.firstVariant==null) return -1;", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bcb065868b2b13d7dd7f0fb17b611d365797636", "chunk": "diff --git a/src/main/java/picard/vcf/GatherVcfs.java b/src/main/java/picard/vcf/GatherVcfs.java\nindex 79b99c65c..cde661e40 100644\n--- a/src/main/java/picard/vcf/GatherVcfs.java\n+++ b/src/main/java/picard/vcf/GatherVcfs.java\n\n@@ -149,7 +153,9 @@ public class GatherVcfs extends CommandLineProgram {\n                 try (VCFFileReader in = new VCFFileReader(f, false)) {\n                     try (CloseableIterator<VariantContext> iter = in.iterator()) {\n                         vcfcxt.firstVariant = ( iter.hasNext() ? iter.next() : null );\n-                        if (vcfcxt.firstVariant == null) log.info(\"No variant in \" + f);\n+                        if (vcfcxt.firstVariant == null) {\n+                            log.info(\"No variant in \" + f);\n+                         }\n                     }\n                 }\n                 filesandvariants.add(vcfcxt);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MzU2Mg==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425143562", "bodyText": "spacing here (and on the next 4 lines)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},\n          \n          \n            \n                            {Arrays.asList(shard1, shard2, shard3), vcf, 0, false},", "author": "gbggrant", "createdAt": "2020-05-14T13:38:47Z", "path": "src/test/java/picard/vcf/GatherVcfsTest.java", "diffHunk": "@@ -47,33 +47,40 @@ public void setup() throws IOException {\n     @DataProvider\n     public Object[][] vcfshards() {\n         return new Object[][]{\n-                {Arrays.asList(shard1,shard2,shard3), vcf, 0},\n-                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1},\n-                {Arrays.asList(shard1,shard3,shard2), vcf, 1},\n-                {Arrays.asList(shard3,shard1,shard2), vcf, 1} ,\n-                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0},\n-                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1},\n-                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1},\n-                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1}\n+                {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "019a6e6a5c57f71e32905b0ea68be0ed74db0822", "chunk": "diff --git a/src/test/java/picard/vcf/GatherVcfsTest.java b/src/test/java/picard/vcf/GatherVcfsTest.java\nindex 64461d96e..7db144cc9 100644\n--- a/src/test/java/picard/vcf/GatherVcfsTest.java\n+++ b/src/test/java/picard/vcf/GatherVcfsTest.java\n\n@@ -47,7 +47,7 @@ public class GatherVcfsTest extends CommandLineProgramTest {\n     @DataProvider\n     public Object[][] vcfshards() {\n         return new Object[][]{\n-                {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},\n+                {Arrays.asList(shard1, shard2, shard3), vcf, 0, false},\n                 {Arrays.asList(shard3,shard1,shard2), vcf, 0, true},\n                 {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1, false},\n                 {Arrays.asList(shard1,shard3,shard2), vcf, 1, false},\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MzkwOA==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425143908", "bodyText": "'reorder'\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean sort) throws IOException {\n          \n          \n            \n                public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean reorder) throws IOException {", "author": "gbggrant", "createdAt": "2020-05-14T13:39:15Z", "path": "src/test/java/picard/vcf/GatherVcfsTest.java", "diffHunk": "@@ -47,33 +47,40 @@ public void setup() throws IOException {\n     @DataProvider\n     public Object[][] vcfshards() {\n         return new Object[][]{\n-                {Arrays.asList(shard1,shard2,shard3), vcf, 0},\n-                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1},\n-                {Arrays.asList(shard1,shard3,shard2), vcf, 1},\n-                {Arrays.asList(shard3,shard1,shard2), vcf, 1} ,\n-                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0},\n-                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1},\n-                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1},\n-                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1}\n+                {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},\n+                {Arrays.asList(shard3,shard1,shard2), vcf, 0, true},\n+                {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1, false},\n+                {Arrays.asList(shard1,shard3,shard2), vcf, 1, false},\n+                {Arrays.asList(shard3,shard1,shard2), vcf, 1, false} ,\n+                {Arrays.asList(shard1_gz, shard2_gz, shard3), vcf_gz, 0, false},\n+                {Arrays.asList(shard1_gz, shard2_bad_gz, shard3), vcf_gz, 1, false},\n+                {Arrays.asList(shard1_gz, shard3_gz, shard2), vcf_gz, 1, false},\n+                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 1, false},\n+                {Arrays.asList(shard3_gz, shard1_gz, shard2), vcf_gz, 0, true}\n         };\n     }\n \n     @Test(dataProvider = \"vcfshards\")\n-    public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal) throws IOException {\n-\n+    public void TestGatherFiles(final List<File> inputFiles, final File expectedOutput, final int expectedRetVal, boolean sort) throws IOException {", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "019a6e6a5c57f71e32905b0ea68be0ed74db0822", "chunk": "diff --git a/src/test/java/picard/vcf/GatherVcfsTest.java b/src/test/java/picard/vcf/GatherVcfsTest.java\nindex 64461d96e..7db144cc9 100644\n--- a/src/test/java/picard/vcf/GatherVcfsTest.java\n+++ b/src/test/java/picard/vcf/GatherVcfsTest.java\n\n@@ -47,7 +47,7 @@ public class GatherVcfsTest extends CommandLineProgramTest {\n     @DataProvider\n     public Object[][] vcfshards() {\n         return new Object[][]{\n-                {Arrays.asList(shard1,shard2,shard3), vcf, 0, false},\n+                {Arrays.asList(shard1, shard2, shard3), vcf, 0, false},\n                 {Arrays.asList(shard3,shard1,shard2), vcf, 0, true},\n                 {Arrays.asList(shard1,shard2_bad,shard3), vcf, 1, false},\n                 {Arrays.asList(shard1,shard3,shard2), vcf, 1, false},\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0NDM2MA==", "url": "https://github.com/broadinstitute/picard/pull/1480#discussion_r425144360", "bodyText": "space\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\",\".vcf\");\n          \n          \n            \n                    final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\", \".vcf\");", "author": "gbggrant", "createdAt": "2020-05-14T13:39:50Z", "path": "src/test/java/picard/vcf/MergeVcfsTest.java", "diffHunk": "@@ -11,4 +20,21 @@\n     protected CommandLineProgram getProgram() {\n         return new MergeVcfs();\n     }\n+    \n+    @Test\n+    public void TestComments() throws IOException {\n+        final String comment1 = \"This is a comment\";\n+        final List<String> args = new ArrayList<>();\n+        final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\",\".vcf\");", "originalCommit": "c2f0de6fcd4f4ec432cc4d4fd3b15cb0b3a6d233", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "865c495af891d39cb0b34c402c0c77c33e75b208", "chunk": "diff --git a/src/test/java/picard/vcf/MergeVcfsTest.java b/src/test/java/picard/vcf/MergeVcfsTest.java\nindex cf7b9bc4e..72be57d64 100644\n--- a/src/test/java/picard/vcf/MergeVcfsTest.java\n+++ b/src/test/java/picard/vcf/MergeVcfsTest.java\n\n@@ -25,7 +25,7 @@ public class MergeVcfsTest extends AbstractVcfMergingClpTester {\n     public void TestComments() throws IOException {\n         final String comment1 = \"This is a comment\";\n         final List<String> args = new ArrayList<>();\n-        final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\",\".vcf\");\n+        final File output = VcfTestUtils.createTemporaryIndexedFile(\"result\", \".vcf\");\n \n         args.add(\"INPUT=\" + TEST_DATA_PATH + \"mini.vcf\");\n         args.add(\"OUTPUT=\" + output.getAbsolutePath());\n"}}, {"oid": "72ab8a49262122d00ebba826af1f5df02d3c5f56", "url": "https://github.com/broadinstitute/picard/commit/72ab8a49262122d00ebba826af1f5df02d3c5f56", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:47:33Z", "type": "commit"}, {"oid": "fc666042909bd86ddb84d2b9f53adb24e860e193", "url": "https://github.com/broadinstitute/picard/commit/fc666042909bd86ddb84d2b9f53adb24e860e193", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:47:48Z", "type": "commit"}, {"oid": "d815c048c7d41c3adfd9ef49349d756d1960c62c", "url": "https://github.com/broadinstitute/picard/commit/d815c048c7d41c3adfd9ef49349d756d1960c62c", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:48:05Z", "type": "commit"}, {"oid": "5bcb065868b2b13d7dd7f0fb17b611d365797636", "url": "https://github.com/broadinstitute/picard/commit/5bcb065868b2b13d7dd7f0fb17b611d365797636", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\r\n\r\nbraces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:48:23Z", "type": "commit"}, {"oid": "60c489f7682949b3168bbf8b4f80bb2eefc3507b", "url": "https://github.com/broadinstitute/picard/commit/60c489f7682949b3168bbf8b4f80bb2eefc3507b", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\r\n\r\nadded spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:48:43Z", "type": "commit"}, {"oid": "e88e3bc0a4a509ad86622ef3389024a4276d47b8", "url": "https://github.com/broadinstitute/picard/commit/e88e3bc0a4a509ad86622ef3389024a4276d47b8", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\r\n\r\nadded spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:48:59Z", "type": "commit"}, {"oid": "019a6e6a5c57f71e32905b0ea68be0ed74db0822", "url": "https://github.com/broadinstitute/picard/commit/019a6e6a5c57f71e32905b0ea68be0ed74db0822", "message": "Update src/test/java/picard/vcf/GatherVcfsTest.java\r\n\r\nadd spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:49:16Z", "type": "commit"}, {"oid": "dfeec0fc8641e143865d738959def8117419395f", "url": "https://github.com/broadinstitute/picard/commit/dfeec0fc8641e143865d738959def8117419395f", "message": "Update src/main/java/picard/vcf/GatherVcfs.java\r\n\r\nadd spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:49:34Z", "type": "commit"}, {"oid": "865c495af891d39cb0b34c402c0c77c33e75b208", "url": "https://github.com/broadinstitute/picard/commit/865c495af891d39cb0b34c402c0c77c33e75b208", "message": "Update src/test/java/picard/vcf/MergeVcfsTest.java\r\n\r\nadded spaces\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:49:54Z", "type": "commit"}, {"oid": "b9ddb28fa12d351dd84d76ae426f992e1d666b2e", "url": "https://github.com/broadinstitute/picard/commit/b9ddb28fa12d351dd84d76ae426f992e1d666b2e", "message": "Update src/test/java/picard/vcf/GatherVcfsTest.java\r\n\r\nrename sort->reorder\n\nCo-authored-by: George Grant <ggrant@broadinstitute.org>", "committedDate": "2020-05-14T13:50:17Z", "type": "commit"}, {"oid": "6796c6df2e6e527abf41a011f9e00c62542015a7", "url": "https://github.com/broadinstitute/picard/commit/6796c6df2e6e527abf41a011f9e00c62542015a7", "message": "Merge branch 'master' into pl_vcfcomments", "committedDate": "2020-05-14T13:59:41Z", "type": "commit"}, {"oid": "e725f2d0f5fa7b9a4ce9ba84ad2a9f01026e7410", "url": "https://github.com/broadinstitute/picard/commit/e725f2d0f5fa7b9a4ce9ba84ad2a9f01026e7410", "message": "fix variable decl", "committedDate": "2020-05-14T14:20:05Z", "type": "commit"}, {"oid": "206d92f007438d002b70f81e9b2555fdda585747", "url": "https://github.com/broadinstitute/picard/commit/206d92f007438d002b70f81e9b2555fdda585747", "message": "rename variable", "committedDate": "2020-05-15T12:21:35Z", "type": "commit"}, {"oid": "5f97a0d87d9718774d02f1c1d7fc141579eb6d35", "url": "https://github.com/broadinstitute/picard/commit/5f97a0d87d9718774d02f1c1d7fc141579eb6d35", "message": "Merge branch 'master' into pl_vcfcomments", "committedDate": "2020-05-15T20:23:07Z", "type": "commit"}]}