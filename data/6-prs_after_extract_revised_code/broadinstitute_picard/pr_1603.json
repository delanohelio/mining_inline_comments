{"pr_number": 1603, "pr_title": "Add flowcell location stratifier for CollectSamErrorMetrics", "pr_createdAt": "2020-11-05T17:58:11Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1603", "timeline": [{"oid": "e4a1f937b0b69c7afbba6c62160ef87381880e3a", "url": "https://github.com/broadinstitute/picard/commit/e4a1f937b0b69c7afbba6c62160ef87381880e3a", "message": "add-location-stratifier", "committedDate": "2020-10-13T19:31:55Z", "type": "commit"}, {"oid": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e", "url": "https://github.com/broadinstitute/picard/commit/15896ec79e07375d2e8cf7cd0f1c317d0f39942e", "message": "first", "committedDate": "2020-11-05T17:40:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2ODk3OA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518368978", "bodyText": "since there already is a tile stratifier, it woudl seem more consistent to just add x & y stratifier (or one stratifiyer for x and one for y?) and then use it in conjunction with the Tile stratifier\nIs there a reason this cannot work?", "author": "yfarjoun", "createdAt": "2020-11-05T21:15:00Z", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -481,6 +487,39 @@ public String getSuffix() {\n         }\n     }\n \n+\n+    /**\n+     * Stratifies base based on location within each tile\n+     */\n+    public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n+        final int locationBinSize;\n+        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+\n+        @Override\n+        public String stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);\n+                String tile = Integer.toString(location.getTile());\n+                String x = Integer.toString(location.getX() / LOCATION_BIN_SIZE);\n+                String y = Integer.toString(location.getY() / LOCATION_BIN_SIZE);\n+                return (tile + \"_\" + x + \"_\" + y);", "originalCommit": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NjgyOA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518376828", "bodyText": "Not that I know of, I can try it out and see how it compares (in terms of speed) to the way it is configured currently", "author": "mollysacks", "createdAt": "2020-11-05T21:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2ODk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "743e548a7a6e1b0f0079efac8c9ec1056fecc5ec", "chunk": "diff --git a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\nindex 14d19de09..ddaf1d2fa 100644\n--- a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n+++ b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n\n@@ -487,19 +500,63 @@ public class ReadBaseStratification {\n         }\n     }\n \n+    /**\n+     * Stratifies base into their read's Y coordinate which is parsed from the read-name.\n+     */\n+    public static class FlowCellYStratifier extends PositionBasedStratifier<Integer> {\n+\n+        @Override\n+        public Integer stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                readNameParser.addLocationInformation(sam.getReadName(), location);\n+                return location.getY() / LOCATION_BIN_SIZE;\n+            } catch (final IllegalArgumentException ignored) {\n+                return null;\n+            }\n+        }\n+\n+\n+        @Override\n+        public String getSuffix() {\n+            return \"y\";\n+        }\n+    }\n+\n+    /**\n+     * Stratifies base into their read's X coordinate which is parsed from the read-name.\n+     */\n+    public static class FlowCellXStratifier extends PositionBasedStratifier<Integer> {\n+\n+        @Override\n+        public Integer stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                readNameParser.addLocationInformation(sam.getReadName(), location);\n+                return location.getX() / LOCATION_BIN_SIZE;\n+            } catch (final IllegalArgumentException ignored) {\n+                return null;\n+            }\n+        }\n+\n+        @Override\n+        public String getSuffix() {\n+            return \"x\";\n+        }\n+    }\n \n     /**\n      * Stratifies base based on location within each tile\n      */\n     public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n         final int locationBinSize;\n-        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+        private static ReadNameParser readNameParser = new ReadNameParser();\n \n         @Override\n         public String stratify(final SAMRecord sam) {\n             try {\n                 final PhysicalLocation location = new PhysicalLocationInt();\n-                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);\n+                readNameParser.addLocationInformation(sam.getReadName(), location);\n                 String tile = Integer.toString(location.getTile());\n                 String x = Integer.toString(location.getX() / LOCATION_BIN_SIZE);\n                 String y = Integer.toString(location.getY() / LOCATION_BIN_SIZE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzMDMxNQ==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518830315", "bodyText": "This method is actually inherited by OpticalDuplicateFinder from ReadNameParser, so for clarity better to use a ReadNameParser object since you're not doing anything related to optical duplicates here.", "author": "kachulis", "createdAt": "2020-11-06T15:36:03Z", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -481,6 +487,39 @@ public String getSuffix() {\n         }\n     }\n \n+\n+    /**\n+     * Stratifies base based on location within each tile\n+     */\n+    public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n+        final int locationBinSize;\n+        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+\n+        @Override\n+        public String stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);", "originalCommit": "15896ec79e07375d2e8cf7cd0f1c317d0f39942e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MDY0Nw==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r518880647", "bodyText": "ok, should I change that in the existing tile stratifier as well?", "author": "mollysacks", "createdAt": "2020-11-06T16:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzMDMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "743e548a7a6e1b0f0079efac8c9ec1056fecc5ec", "chunk": "diff --git a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\nindex 14d19de09..ddaf1d2fa 100644\n--- a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n+++ b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n\n@@ -487,19 +500,63 @@ public class ReadBaseStratification {\n         }\n     }\n \n+    /**\n+     * Stratifies base into their read's Y coordinate which is parsed from the read-name.\n+     */\n+    public static class FlowCellYStratifier extends PositionBasedStratifier<Integer> {\n+\n+        @Override\n+        public Integer stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                readNameParser.addLocationInformation(sam.getReadName(), location);\n+                return location.getY() / LOCATION_BIN_SIZE;\n+            } catch (final IllegalArgumentException ignored) {\n+                return null;\n+            }\n+        }\n+\n+\n+        @Override\n+        public String getSuffix() {\n+            return \"y\";\n+        }\n+    }\n+\n+    /**\n+     * Stratifies base into their read's X coordinate which is parsed from the read-name.\n+     */\n+    public static class FlowCellXStratifier extends PositionBasedStratifier<Integer> {\n+\n+        @Override\n+        public Integer stratify(final SAMRecord sam) {\n+            try {\n+                final PhysicalLocation location = new PhysicalLocationInt();\n+                readNameParser.addLocationInformation(sam.getReadName(), location);\n+                return location.getX() / LOCATION_BIN_SIZE;\n+            } catch (final IllegalArgumentException ignored) {\n+                return null;\n+            }\n+        }\n+\n+        @Override\n+        public String getSuffix() {\n+            return \"x\";\n+        }\n+    }\n \n     /**\n      * Stratifies base based on location within each tile\n      */\n     public static class FlowCellLocationStratifier extends RecordStratifier<String> {\n         final int locationBinSize;\n-        private static OpticalDuplicateFinder opticalDuplicateFinder = new OpticalDuplicateFinder();\n+        private static ReadNameParser readNameParser = new ReadNameParser();\n \n         @Override\n         public String stratify(final SAMRecord sam) {\n             try {\n                 final PhysicalLocation location = new PhysicalLocationInt();\n-                opticalDuplicateFinder.addLocationInformation(sam.getReadName(), location);\n+                readNameParser.addLocationInformation(sam.getReadName(), location);\n                 String tile = Integer.toString(location.getTile());\n                 String x = Integer.toString(location.getX() / LOCATION_BIN_SIZE);\n                 String y = Integer.toString(location.getY() / LOCATION_BIN_SIZE);\n"}}, {"oid": "743e548a7a6e1b0f0079efac8c9ec1056fecc5ec", "url": "https://github.com/broadinstitute/picard/commit/743e548a7a6e1b0f0079efac8c9ec1056fecc5ec", "message": "edits", "committedDate": "2020-11-12T14:35:10Z", "type": "commit"}, {"oid": "9139b657a787bd628d1548e1abae38f9a4a9e041", "url": "https://github.com/broadinstitute/picard/commit/9139b657a787bd628d1548e1abae38f9a4a9e041", "message": "testing", "committedDate": "2020-11-12T15:03:14Z", "type": "commit"}, {"oid": "b05bcf4c7a4cd8e88b8e28333539d76624c7e0ed", "url": "https://github.com/broadinstitute/picard/commit/b05bcf4c7a4cd8e88b8e28333539d76624c7e0ed", "message": "make-travis-pass", "committedDate": "2020-11-12T15:35:12Z", "type": "commit"}, {"oid": "adc0f424c7723d73fbcdcfe52062db0855a30686", "url": "https://github.com/broadinstitute/picard/commit/adc0f424c7723d73fbcdcfe52062db0855a30686", "message": "Merge branch 'master' into ms_location_stratifier", "committedDate": "2020-11-12T20:57:26Z", "type": "commit"}, {"oid": "5450766d205be9cd8b9163d448ddaa913d303392", "url": "https://github.com/broadinstitute/picard/commit/5450766d205be9cd8b9163d448ddaa913d303392", "message": "Update CollectSamErrorMetrics.java", "committedDate": "2020-11-13T14:15:07Z", "type": "commit"}, {"oid": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "url": "https://github.com/broadinstitute/picard/commit/cf680969e320838f9acbb8b7dd2f58dbcd456516", "message": "Update ReadBaseStratification.java\n\ndelete original location stratifier (replaced with x/y)", "committedDate": "2020-11-13T14:18:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDY5Ng==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523234696", "bodyText": "perhaps a comment to explain why this field is static?", "author": "yfarjoun", "createdAt": "2020-11-13T21:12:09Z", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {\n+        @Override\n+        public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInfo) {\n+            return stratify(recordAndOffset.getRecord());\n+        }\n+        static ReadNameParser readNameParser = new ReadNameParser();", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDgwMQ==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523234801", "bodyText": "also, I think it can be made final, right?", "author": "yfarjoun", "createdAt": "2020-11-13T21:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b114f662905e887e100fbe9518f055c4f0c08962", "chunk": "diff --git a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\nindex 32b1baae8..6a0423ddf 100644\n--- a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n+++ b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n\n@@ -115,7 +117,8 @@ public class ReadBaseStratification {\n         public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInfo) {\n             return stratify(recordAndOffset.getRecord());\n         }\n-        static ReadNameParser readNameParser = new ReadNameParser();\n+        //Static ReadNameParser so that cache of read names/ PhysicalLocations is shared between all PositionBasedStratifiers\n+        static final ReadNameParser readNameParser = new ReadNameParser();\n \n         abstract T stratify(final SAMRecord sam);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzODAyMg==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523238022", "bodyText": "hmmm. I think that storing a map with all the names of the reads is not the best design....I suspect that each read will be reads, queried a few different ways (tile, x, y, etc) and then move on. so perhaps use a Cache instead of a full map? see picard/sam/SamErrorMetric/ReadBaseStratification.java:272 for an example.", "author": "yfarjoun", "createdAt": "2020-11-13T21:19:51Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -27,6 +29,8 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n+    private Map<String, PhysicalLocation> locationMap = new HashMap<>();", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b114f662905e887e100fbe9518f055c4f0c08962", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 2be7e2efb..8ac46b32f 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -29,7 +32,7 @@ public class ReadNameParser implements Serializable {\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Map<String, PhysicalLocation> locationMap = new HashMap<>();\n+    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().build();\n \n     private final int[] tmpLocationFields = new int[3]; // for optimization of addLocationInformation\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTUyMw==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523239523", "bodyText": "final", "author": "yfarjoun", "createdAt": "2020-11-13T21:23:19Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                locationMap.put(readName, loc);\n+            }\n+            return b;\n+        } else {\n+            PhysicalLocation location = locationMap.get(readName);", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b114f662905e887e100fbe9518f055c4f0c08962", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 2be7e2efb..8ac46b32f 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -133,24 +136,22 @@ public class ReadNameParser implements Serializable {\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        if (!locationMap.containsKey(readName)) {\n-            final boolean b = readLocationInformation(readName, loc);\n-            if (b) {\n-                locationMap.put(readName, loc);\n+        final PhysicalLocation location = locationCache.getIfPresent(readName);\n+        if (location == null) {\n+            if (readLocationInformation(readName, loc)) {\n+                locationCache.put(readName, loc);\n+                return true;\n             }\n-            return b;\n+            // return false if read name cannot be parsed\n+            return false;\n         } else {\n-            PhysicalLocation location = locationMap.get(readName);\n             loc.setTile(location.getTile());\n             loc.setX(location.getX());\n             loc.setY(location.getY());\n             return true;\n         }\n-\n     }\n \n-\n-\n     /**\n      * Given a string, splits the string by the delimiter, and returns the the last three fields parsed as integers.  Parsing a field\n      * considers only a sequence of digits up until the first non-digit character.  The three values are stored in the passed-in array.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MDIzNA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523240234", "bodyText": "since you are going to have both if and elseit would be easier to read the code if you removed the ! and switched the cases", "author": "yfarjoun", "createdAt": "2020-11-13T21:24:47Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b114f662905e887e100fbe9518f055c4f0c08962", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 2be7e2efb..8ac46b32f 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -133,24 +136,22 @@ public class ReadNameParser implements Serializable {\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        if (!locationMap.containsKey(readName)) {\n-            final boolean b = readLocationInformation(readName, loc);\n-            if (b) {\n-                locationMap.put(readName, loc);\n+        final PhysicalLocation location = locationCache.getIfPresent(readName);\n+        if (location == null) {\n+            if (readLocationInformation(readName, loc)) {\n+                locationCache.put(readName, loc);\n+                return true;\n             }\n-            return b;\n+            // return false if read name cannot be parsed\n+            return false;\n         } else {\n-            PhysicalLocation location = locationMap.get(readName);\n             loc.setTile(location.getTile());\n             loc.setX(location.getX());\n             loc.setY(location.getY());\n             return true;\n         }\n-\n     }\n \n-\n-\n     /**\n      * Given a string, splits the string by the delimiter, and returns the the last three fields parsed as integers.  Parsing a field\n      * considers only a sequence of digits up until the first non-digit character.  The three values are stored in the passed-in array.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTYxOA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523241618", "bodyText": "remove b?\nif(readLocationInformation(readName, loc)){\n   locationMap......\n   return true;\n}\nreturn false;\n} else {\n...\n}", "author": "yfarjoun", "createdAt": "2020-11-13T21:28:01Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b114f662905e887e100fbe9518f055c4f0c08962", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 2be7e2efb..8ac46b32f 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -133,24 +136,22 @@ public class ReadNameParser implements Serializable {\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        if (!locationMap.containsKey(readName)) {\n-            final boolean b = readLocationInformation(readName, loc);\n-            if (b) {\n-                locationMap.put(readName, loc);\n+        final PhysicalLocation location = locationCache.getIfPresent(readName);\n+        if (location == null) {\n+            if (readLocationInformation(readName, loc)) {\n+                locationCache.put(readName, loc);\n+                return true;\n             }\n-            return b;\n+            // return false if read name cannot be parsed\n+            return false;\n         } else {\n-            PhysicalLocation location = locationMap.get(readName);\n             loc.setTile(location.getTile());\n             loc.setX(location.getX());\n             loc.setY(location.getY());\n             return true;\n         }\n-\n     }\n \n-\n-\n     /**\n      * Given a string, splits the string by the delimiter, and returns the the last three fields parsed as integers.  Parsing a field\n      * considers only a sequence of digits up until the first non-digit character.  The three values are stored in the passed-in array.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTgxNQ==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523241815", "bodyText": "remove spurious new lines", "author": "yfarjoun", "createdAt": "2020-11-13T21:28:31Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -128,6 +132,25 @@ public boolean addLocationInformation(final String readName, final PhysicalLocat\n         }\n     }\n \n+    public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n+        if (!locationMap.containsKey(readName)) {\n+            final boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                locationMap.put(readName, loc);\n+            }\n+            return b;\n+        } else {\n+            PhysicalLocation location = locationMap.get(readName);\n+            loc.setTile(location.getTile());\n+            loc.setX(location.getX());\n+            loc.setY(location.getY());\n+            return true;\n+        }\n+", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b114f662905e887e100fbe9518f055c4f0c08962", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 2be7e2efb..8ac46b32f 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -133,24 +136,22 @@ public class ReadNameParser implements Serializable {\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        if (!locationMap.containsKey(readName)) {\n-            final boolean b = readLocationInformation(readName, loc);\n-            if (b) {\n-                locationMap.put(readName, loc);\n+        final PhysicalLocation location = locationCache.getIfPresent(readName);\n+        if (location == null) {\n+            if (readLocationInformation(readName, loc)) {\n+                locationCache.put(readName, loc);\n+                return true;\n             }\n-            return b;\n+            // return false if read name cannot be parsed\n+            return false;\n         } else {\n-            PhysicalLocation location = locationMap.get(readName);\n             loc.setTile(location.getTile());\n             loc.setX(location.getX());\n             loc.setY(location.getY());\n             return true;\n         }\n-\n     }\n \n-\n-\n     /**\n      * Given a string, splits the string by the delimiter, and returns the the last three fields parsed as integers.  Parsing a field\n      * considers only a sequence of digits up until the first non-digit character.  The three values are stored in the passed-in array.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MjA3Mw==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523242073", "bodyText": "why does this ned to be serializable?", "author": "yfarjoun", "createdAt": "2020-11-13T21:29:10Z", "path": "src/main/java/picard/sam/util/PhysicalLocation.java", "diffHunk": "@@ -1,11 +1,13 @@\n package picard.sam.util;\n \n+import java.io.Serializable;\n+\n /**\n  * Small interface that provides access to the physical location information about a cluster.\n  * All values should be defaulted to -1 if unavailable.  ReadGroup and Tile should only allow\n  * non-zero positive integers, x and y coordinates may be negative.\n  */\n-public interface PhysicalLocation {\n+public interface PhysicalLocation extends Serializable {", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NjMwOA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524286308", "bodyText": "Travis was failing with java.io.NotSerializableException: picard.sam.util.PhysicalLocationInt (https://travis-ci.com/github/broadinstitute/picard/jobs/434802169), making PhysicalLocation serializable solved the issue.", "author": "mollysacks", "createdAt": "2020-11-16T13:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTIyNw==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524375227", "bodyText": "so a comment, \"needs to be Serializable since it is a field in ReadNameParser which is Serializable.\" would help here.", "author": "yfarjoun", "createdAt": "2020-11-16T15:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MjA3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243061", "bodyText": "You should be able to clamp down on the template T here and make it an Integer, right? if in the future somebody thinks of non-integer positions, we can open it up again....", "author": "yfarjoun", "createdAt": "2020-11-13T21:31:19Z", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -100,6 +107,19 @@ public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInf\n         abstract T stratify(final SAMRecord sam);\n     }\n \n+    /**\n+     * A simple position based stratifier for cases when only the record suffices\n+     */\n+    abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzE3NA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243174", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract static class PositionBasedStratifier<T extends Comparable<T>> implements RecordAndOffsetStratifier<T> {\n          \n          \n            \n                abstract static class PositionBasedStratifier implements RecordAndOffsetStratifier<Integer> {", "author": "yfarjoun", "createdAt": "2020-11-13T21:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzI3MA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243270", "bodyText": "and this will simplify the downstream", "author": "yfarjoun", "createdAt": "2020-11-13T21:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTM0OA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524375348", "bodyText": "why not do this?", "author": "yfarjoun", "createdAt": "2020-11-16T15:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MjY4Ng==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524552686", "bodyText": "don't ignore me :-)", "author": "yfarjoun", "createdAt": "2020-11-16T20:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MzQyNA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r525283424", "bodyText": "oops I thought I already changed this! Sorry about that", "author": "mollysacks", "createdAt": "2020-11-17T16:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b114f662905e887e100fbe9518f055c4f0c08962", "chunk": "diff --git a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\nindex 32b1baae8..6a0423ddf 100644\n--- a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n+++ b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n\n@@ -115,7 +117,8 @@ public class ReadBaseStratification {\n         public T stratify(RecordAndOffset recordAndOffset, SAMLocusAndReference locusInfo) {\n             return stratify(recordAndOffset.getRecord());\n         }\n-        static ReadNameParser readNameParser = new ReadNameParser();\n+        //Static ReadNameParser so that cache of read names/ PhysicalLocations is shared between all PositionBasedStratifiers\n+        static final ReadNameParser readNameParser = new ReadNameParser();\n \n         abstract T stratify(final SAMRecord sam);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzU2Mw==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243563", "bodyText": "put into 3 lines:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void setLocationBinSize(int locationBinSize) { LOCATION_BIN_SIZE = locationBinSize; }\n          \n          \n            \n                public static void setLocationBinSize(int locationBinSize) { \n          \n          \n            \n                   LOCATION_BIN_SIZE = locationBinSize; \n          \n          \n            \n                }", "author": "yfarjoun", "createdAt": "2020-11-13T21:32:33Z", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -73,6 +75,11 @@ public static void setLongHomopolymer(int longHomopolymer) {\n         LONG_HOMOPOLYMER = longHomopolymer;\n     }\n \n+    /**\n+     * defaults to 2500\n+     **/\n+    public static void setLocationBinSize(int locationBinSize) { LOCATION_BIN_SIZE = locationBinSize; }", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fce58d19b3a84d33a7c43814f33183a803f00794", "chunk": "diff --git a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\nindex 32b1baae8..3cd6521ea 100644\n--- a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n+++ b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n\n@@ -78,7 +78,9 @@ public class ReadBaseStratification {\n     /**\n      * defaults to 2500\n      **/\n-    public static void setLocationBinSize(int locationBinSize) { LOCATION_BIN_SIZE = locationBinSize; }\n+    public static void setLocationBinSize(int locationBinSize) { \n+       LOCATION_BIN_SIZE = locationBinSize; \n+    }\n \n     /* ******* general-use classes, for defining and creating new stratifiers ***********/\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzY4OA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r523243688", "bodyText": "are these all used?", "author": "yfarjoun", "createdAt": "2020-11-13T21:32:50Z", "path": "src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java", "diffHunk": "@@ -37,6 +37,7 @@\n import picard.sam.util.Pair;\n import picard.sam.util.PhysicalLocation;", "originalCommit": "cf680969e320838f9acbb8b7dd2f58dbcd456516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MDY3Nw==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524280677", "bodyText": "There's one that isn't used, I'll delete it", "author": "mollysacks", "createdAt": "2020-11-16T13:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "f7528771cc38952dd130bca1bb12e7b2c02a70d2", "chunk": "diff --git a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\nindex 32b1baae8..6599d52cd 100644\n--- a/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n+++ b/src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n\n@@ -33,7 +33,6 @@ import htsjdk.samtools.util.Log;\n import htsjdk.samtools.util.SamLocusIterator.RecordAndOffset;\n import htsjdk.samtools.util.SequenceUtil;\n import org.broadinstitute.barclay.argparser.CommandLineParser;\n-import picard.sam.markduplicates.util.OpticalDuplicateFinder;\n import picard.sam.util.Pair;\n import picard.sam.util.PhysicalLocation;\n import picard.sam.util.PhysicalLocationInt;\n"}}, {"oid": "fce58d19b3a84d33a7c43814f33183a803f00794", "url": "https://github.com/broadinstitute/picard/commit/fce58d19b3a84d33a7c43814f33183a803f00794", "message": "Update src/main/java/picard/sam/SamErrorMetric/ReadBaseStratification.java\n\nCo-authored-by: Yossi Farjoun <farjoun@broadinstitute.org>", "committedDate": "2020-11-16T13:51:18Z", "type": "commit"}, {"oid": "b114f662905e887e100fbe9518f055c4f0c08962", "url": "https://github.com/broadinstitute/picard/commit/b114f662905e887e100fbe9518f055c4f0c08962", "message": "edits", "committedDate": "2020-11-16T15:02:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDU4Ng==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524370586", "bodyText": "without a maximumSize this doesn't actually evict any entries....", "author": "yfarjoun", "createdAt": "2020-11-16T15:51:03Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -29,7 +32,7 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Map<String, PhysicalLocation> locationMap = new HashMap<>();\n+    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().build();", "originalCommit": "b114f662905e887e100fbe9518f055c4f0c08962", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MTY3Ng==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524371676", "bodyText": "what should I set as maximumSize?", "author": "mollysacks", "createdAt": "2020-11-16T15:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MzI5MQ==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524373291", "bodyText": "I dont' think it should matter much. I imagine that 1 would be enough....but we can use 20 to be \"safe\"", "author": "yfarjoun", "createdAt": "2020-11-16T15:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "624a8fb2d2a1f6b5f486d86a2f3eb7cf4d56f085", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 8ac46b32f..e56b5b2d7 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -32,7 +32,7 @@ public class ReadNameParser implements Serializable {\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().build();\n+    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().maximumSize(20).build();\n \n     private final int[] tmpLocationFields = new int[3]; // for optimization of addLocationInformation\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTkwNg==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524375906", "bodyText": "remove soem newlines here.", "author": "yfarjoun", "createdAt": "2020-11-16T15:57:20Z", "path": "src/test/java/picard/sam/SamErrorMetric/ReadBaseStratificationTest.java", "diffHunk": "@@ -25,10 +25,17 @@\n public class ReadBaseStratificationTest {\n \n     @BeforeClass\n-    public void setup() {\n+    public void setupLH() {\n         ReadBaseStratification.setLongHomopolymer(6);\n     }\n \n+    @BeforeClass\n+    public void setupLBS() {\n+        ReadBaseStratification.setLocationBinSize(1000);\n+    }\n+", "originalCommit": "b114f662905e887e100fbe9518f055c4f0c08962", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "624a8fb2d2a1f6b5f486d86a2f3eb7cf4d56f085", "chunk": "diff --git a/src/test/java/picard/sam/SamErrorMetric/ReadBaseStratificationTest.java b/src/test/java/picard/sam/SamErrorMetric/ReadBaseStratificationTest.java\nindex 335972898..be6a46747 100644\n--- a/src/test/java/picard/sam/SamErrorMetric/ReadBaseStratificationTest.java\n+++ b/src/test/java/picard/sam/SamErrorMetric/ReadBaseStratificationTest.java\n\n@@ -34,8 +32,6 @@ public class ReadBaseStratificationTest {\n         ReadBaseStratification.setLocationBinSize(1000);\n     }\n \n-\n-\n     @DataProvider\n     public Object[][] baseStratifierData() {\n         return new Object[][]{\n"}}, {"oid": "624a8fb2d2a1f6b5f486d86a2f3eb7cf4d56f085", "url": "https://github.com/broadinstitute/picard/commit/624a8fb2d2a1f6b5f486d86a2f3eb7cf4d56f085", "message": "fixes", "committedDate": "2020-11-16T16:47:04Z", "type": "commit"}, {"oid": "0546ad9f7108364bba9d3958ba692802cb3d8616", "url": "https://github.com/broadinstitute/picard/commit/0546ad9f7108364bba9d3958ba692802cb3d8616", "message": "speed-up", "committedDate": "2020-11-16T19:52:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MDk2MA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524550960", "bodyText": "strings should be compared with .equals()", "author": "yfarjoun", "createdAt": "2020-11-16T20:26:09Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {", "originalCommit": "0546ad9f7108364bba9d3958ba692802cb3d8616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57fcb88b242caa1986bad122ea9e5cd7e796a502", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 8ae902650..eac33c6a2 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -138,11 +138,12 @@ public class ReadNameParser implements Serializable {\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        if (readName != readNameStored) {\n-            boolean b = readLocationInformation(readName, loc);\n-            if (b) {\n+        if (!readName.equals(readNameStored)) {\n+            if (readLocationInformation(readName, loc)) {\n                 readNameStored = readName;\n-                physicalLocationStored = loc;\n+                physicalLocationStored.setX(loc.getX());\n+                physicalLocationStored.setY(loc.getY());\n+                physicalLocationStored.setTile(loc.getTile());\n                 return true;\n             }\n             // return false if read name cannot be parsed\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MTU2NA==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524551564", "bodyText": "no need for this temp variable, b, just put the read....() statement in the if(.)", "author": "yfarjoun", "createdAt": "2020-11-16T20:27:11Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {\n+            boolean b = readLocationInformation(readName, loc);\n+            if (b) {", "originalCommit": "0546ad9f7108364bba9d3958ba692802cb3d8616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57fcb88b242caa1986bad122ea9e5cd7e796a502", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 8ae902650..eac33c6a2 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -138,11 +138,12 @@ public class ReadNameParser implements Serializable {\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        if (readName != readNameStored) {\n-            boolean b = readLocationInformation(readName, loc);\n-            if (b) {\n+        if (!readName.equals(readNameStored)) {\n+            if (readLocationInformation(readName, loc)) {\n                 readNameStored = readName;\n-                physicalLocationStored = loc;\n+                physicalLocationStored.setX(loc.getX());\n+                physicalLocationStored.setY(loc.getY());\n+                physicalLocationStored.setTile(loc.getTile());\n                 return true;\n             }\n             // return false if read name cannot be parsed\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MTY4OQ==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524551689", "bodyText": "can be initialized with null.", "author": "yfarjoun", "createdAt": "2020-11-16T20:27:24Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -32,7 +32,9 @@\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private Cache<String, PhysicalLocation> locationCache = CacheBuilder.newBuilder().maximumSize(20).build();\n+    private String readNameStored = new String();", "originalCommit": "0546ad9f7108364bba9d3958ba692802cb3d8616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57fcb88b242caa1986bad122ea9e5cd7e796a502", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 8ae902650..eac33c6a2 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -32,9 +32,9 @@ public class ReadNameParser implements Serializable {\n      */\n     public static final String DEFAULT_READ_NAME_REGEX = \"<optimized capture of last three ':' separated fields as numeric values>\".intern();\n \n-    private String readNameStored = new String();\n+    private String readNameStored = null;\n \n-    private PhysicalLocation physicalLocationStored = new PhysicalLocationInt();\n+    private PhysicalLocation physicalLocationStored = null;\n \n     private final int[] tmpLocationFields = new int[3]; // for optimization of addLocationInformation\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MjIzMQ==", "url": "https://github.com/broadinstitute/picard/pull/1603#discussion_r524552231", "bodyText": "since you don't control loc, and it isn't immutable, it would be better to copy over the contents into physicalLocationStored rather than keeping a reference...", "author": "yfarjoun", "createdAt": "2020-11-16T20:28:33Z", "path": "src/main/java/picard/sam/util/ReadNameParser.java", "diffHunk": "@@ -136,18 +138,19 @@ private boolean readLocationInformation(final String readName, final PhysicalLoc\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        final PhysicalLocation location = locationCache.getIfPresent(readName);\n-        if (location == null) {\n-            if (readLocationInformation(readName, loc)) {\n-                locationCache.put(readName, loc);\n+        if (readName != readNameStored) {\n+            boolean b = readLocationInformation(readName, loc);\n+            if (b) {\n+                readNameStored = readName;\n+                physicalLocationStored = loc;", "originalCommit": "0546ad9f7108364bba9d3958ba692802cb3d8616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57fcb88b242caa1986bad122ea9e5cd7e796a502", "chunk": "diff --git a/src/main/java/picard/sam/util/ReadNameParser.java b/src/main/java/picard/sam/util/ReadNameParser.java\nindex 8ae902650..eac33c6a2 100644\n--- a/src/main/java/picard/sam/util/ReadNameParser.java\n+++ b/src/main/java/picard/sam/util/ReadNameParser.java\n\n@@ -138,11 +138,12 @@ public class ReadNameParser implements Serializable {\n     }\n \n     public boolean addLocationInformation(final String readName, final PhysicalLocation loc){\n-        if (readName != readNameStored) {\n-            boolean b = readLocationInformation(readName, loc);\n-            if (b) {\n+        if (!readName.equals(readNameStored)) {\n+            if (readLocationInformation(readName, loc)) {\n                 readNameStored = readName;\n-                physicalLocationStored = loc;\n+                physicalLocationStored.setX(loc.getX());\n+                physicalLocationStored.setY(loc.getY());\n+                physicalLocationStored.setTile(loc.getTile());\n                 return true;\n             }\n             // return false if read name cannot be parsed\n"}}, {"oid": "57fcb88b242caa1986bad122ea9e5cd7e796a502", "url": "https://github.com/broadinstitute/picard/commit/57fcb88b242caa1986bad122ea9e5cd7e796a502", "message": "changes", "committedDate": "2020-11-16T20:35:47Z", "type": "commit"}, {"oid": "c5bc5ceb837f30c373fca30da1abe35c27ead3a5", "url": "https://github.com/broadinstitute/picard/commit/c5bc5ceb837f30c373fca30da1abe35c27ead3a5", "message": "fix-npe", "committedDate": "2020-11-16T22:44:30Z", "type": "commit"}, {"oid": "f7528771cc38952dd130bca1bb12e7b2c02a70d2", "url": "https://github.com/broadinstitute/picard/commit/f7528771cc38952dd130bca1bb12e7b2c02a70d2", "message": "remove-template", "committedDate": "2020-11-17T16:08:37Z", "type": "commit"}]}