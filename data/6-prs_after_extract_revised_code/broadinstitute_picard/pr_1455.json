{"pr_number": 1455, "pr_title": "Fix non-symmetry bug in FingerprintChecker", "pr_createdAt": "2020-01-22T16:36:00Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1455", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2OTA0NA==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r369769044", "bodyText": "For the reviewer, this is the bug fix....most of everything else is window dressing.", "author": "yfarjoun", "createdAt": "2020-01-22T19:50:54Z", "path": "src/main/java/picard/fingerprint/HaplotypeProbabilities.java", "diffHunk": "@@ -213,16 +220,16 @@ public double shiftedLogEvidenceProbabilityGivenOtherEvidence(final HaplotypePro\n         if (!this.haplotypeBlock.equals(otherHp.getHaplotype())) {\n             throw new IllegalArgumentException(\"Haplotypes are from different HaplotypeBlocks!\");\n         }\n-        /** Get the posterior from the other otherHp. Use this posterior as the prior to calculate probability.\n-         *\n-         *   P(hap|x,y) = P(x|hap,y) P(hap|y) / P(x|y)\n-         *              = P(x | hap) * P(hap | y) / P(x)\n-         *                likelihood * other.posterior\n-         *\n-         *              = P(x|hap) P(y|hap) P(hap)/P(x)P(y)\n-         *              = A P(x| hap) P(y| hap) P(hap)  # where A is an unknown scaling factor\n+        /* Get the posterior from the other otherHp. Use this posterior as the prior to calculate probability.\n+\n+            P(hap|x,y) = P(x|hap,y) P(hap|y) / P(x|y)\n+                       = P(x | hap) * P(hap | y) / P(x)\n+                         likelihood * other.posterior\n+\n+                       = P(x|hap) P(y|hap) P(hap)/P(x)P(y)\n+                       = A P(x| hap) P(y| hap) P(hap)  # where A is an unknown scaling factor\n          */\n-        return shiftedLogEvidenceProbabilityUsingGenotypeFrequencies(otherHp.getPosteriorProbabilities());\n+        return shiftedLogEvidenceProbabilityUsingGenotypeFrequencies(otherHp.getPosteriorLikelihoods());", "originalCommit": "643e9015af71fdec20063ec1a13f8875561d8771", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e2b0d9a90d42deedbad2a89349ffd05dda04d595", "url": "https://github.com/broadinstitute/picard/commit/e2b0d9a90d42deedbad2a89349ffd05dda04d595", "message": "Found a bug in the fingerprinting code that resulted in non-symmetric results: LOD(a,b) != LOD(b,a)\n\nThe problem was that the __normlized__ posterior was used as the prior in the denominator of the LOD calculation.\nThe correct thing to do is to use the __unnormalized__ posterior array which is what this commit does.\n\nOther changes include:\n\n- more tests\n- cleaup\n\n- Found a disabled test laying around...enabled it and more cleanup.\n\n-move \"randomSublist\" to a more appropriate place", "committedDate": "2020-02-10T19:54:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5OTk4MQ==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r380799981", "bodyText": "New public APIs should have tests.", "author": "pshapiro4broad", "createdAt": "2020-02-18T16:49:19Z", "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -285,6 +324,38 @@ public static int indexOfMin(final double[] nums) {\n         return pNormalizeLogProbability(likelihoods);\n     }\n \n+    /**\n+     * Takes a complete set of mutually exclusive logLikelihoods and converts them to probabilities\n+     * with no rescaling. Will throw if underflow is detected (if all the likelihoods are less than -300)\n+     */\n+    public static double[] getProbabilityFromLog(final double[] lLikelihood) {", "originalCommit": "e2b0d9a90d42deedbad2a89349ffd05dda04d595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b72f535d102403de5ca25849367cfc3417b2ff7f", "chunk": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex 810534b90..6b78e176e 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n\n@@ -362,14 +362,18 @@ final public class MathUtil {\n      * 0.9999999999999999 >= p >= (1-0.9999999999999999)/(lPosteriors.length-1)\n      */\n     public static double[] pNormalizeLogProbability(final double[] lPosterior) {\n+\n+        final double[] tmp = new double[lPosterior.length];\n+        if (lPosterior.length == 0) {\n+            return tmp;\n+        }\n+\n         // Note: bumping all the LLs so that the biggest is 300 ensures that we have the\n         // widest range possible when unlogging them before one of them underflows. 10^300 is\n         // near the maximum before you hit positive infinity.\n-\n         final double maxLikelihood = max(lPosterior);\n         final double bump = 300 - maxLikelihood;\n \n-        final double[] tmp = new double[lPosterior.length];\n         double total = 0;\n         for (int i = 0; i < lPosterior.length; ++i) {\n             tmp[i] = pow(10, lPosterior[i] + bump);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjIyNg==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r380802226", "bodyText": "Would be nice to reformat this too", "author": "pshapiro4broad", "createdAt": "2020-02-18T16:52:59Z", "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -441,7 +556,34 @@ public static double klDivergance(double[] measured, double[] distribution) {\n         return retVal;\n     }\n \n-    /** \n+    /**\n+     * A small utility function to choose n random elements (un-shuffled) from a list\n+     *\n+     * @param list A list of elements\n+     * @param n    a number of elements requested from list\n+     * @return a list of n randomly chosen (but in the original order) elements from list.\n+     * If the list has less than n elements it is returned in its entirety.\n+     */\n+    public static <T> List<T> randomSublist(final List<T> list, final int n) {\n+        int availableElements = list.size();\n+        if (availableElements <= n) return list;", "originalCommit": "e2b0d9a90d42deedbad2a89349ffd05dda04d595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deab7fa11840cd5f8ff2c629ddea96d27c92254a", "chunk": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex 810534b90..c61a03144 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n\n@@ -559,24 +563,28 @@ final public class MathUtil {\n     /**\n      * A small utility function to choose n random elements (un-shuffled) from a list\n      *\n-     * @param list A list of elements\n-     * @param n    a number of elements requested from list\n+     * @param list   A list of elements\n+     * @param n      a number of elements requested from list\n+     * @param random a Random object to use for subsetting\n      * @return a list of n randomly chosen (but in the original order) elements from list.\n      * If the list has less than n elements it is returned in its entirety.\n      */\n-    public static <T> List<T> randomSublist(final List<T> list, final int n) {\n+    public static <T> List<T> randomSublist(final List<T> list, final int n, final Random random) {\n         int availableElements = list.size();\n-        if (availableElements <= n) return list;\n+        if (availableElements <= n) {\n+            return list;\n+        }\n \n         int stillNeeded = n;\n-        final Random rg = new Random();\n         final List<T> shortList = new ArrayList<>(n);\n         for (final T aList : list) {\n-            if (rg.nextDouble() < stillNeeded / (double) availableElements) {\n+            if (random.nextDouble() < stillNeeded / (double) availableElements) {\n                 shortList.add(aList);\n                 stillNeeded--;\n             }\n-            if (stillNeeded == 0) break; // fast out if do not need more elements\n+            if (stillNeeded == 0) {\n+                break; // fast out if do not need more elements\n+            }\n             availableElements--;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjkyNA==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r380802924", "bodyText": "Any reason to not use Math.random() here?", "author": "pshapiro4broad", "createdAt": "2020-02-18T16:53:59Z", "path": "src/main/java/picard/util/MathUtil.java", "diffHunk": "@@ -441,7 +556,34 @@ public static double klDivergance(double[] measured, double[] distribution) {\n         return retVal;\n     }\n \n-    /** \n+    /**\n+     * A small utility function to choose n random elements (un-shuffled) from a list\n+     *\n+     * @param list A list of elements\n+     * @param n    a number of elements requested from list\n+     * @return a list of n randomly chosen (but in the original order) elements from list.\n+     * If the list has less than n elements it is returned in its entirety.\n+     */\n+    public static <T> List<T> randomSublist(final List<T> list, final int n) {\n+        int availableElements = list.size();\n+        if (availableElements <= n) return list;\n+\n+        int stillNeeded = n;\n+        final Random rg = new Random();", "originalCommit": "e2b0d9a90d42deedbad2a89349ffd05dda04d595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deab7fa11840cd5f8ff2c629ddea96d27c92254a", "chunk": "diff --git a/src/main/java/picard/util/MathUtil.java b/src/main/java/picard/util/MathUtil.java\nindex 810534b90..c61a03144 100644\n--- a/src/main/java/picard/util/MathUtil.java\n+++ b/src/main/java/picard/util/MathUtil.java\n\n@@ -559,24 +563,28 @@ final public class MathUtil {\n     /**\n      * A small utility function to choose n random elements (un-shuffled) from a list\n      *\n-     * @param list A list of elements\n-     * @param n    a number of elements requested from list\n+     * @param list   A list of elements\n+     * @param n      a number of elements requested from list\n+     * @param random a Random object to use for subsetting\n      * @return a list of n randomly chosen (but in the original order) elements from list.\n      * If the list has less than n elements it is returned in its entirety.\n      */\n-    public static <T> List<T> randomSublist(final List<T> list, final int n) {\n+    public static <T> List<T> randomSublist(final List<T> list, final int n, final Random random) {\n         int availableElements = list.size();\n-        if (availableElements <= n) return list;\n+        if (availableElements <= n) {\n+            return list;\n+        }\n \n         int stillNeeded = n;\n-        final Random rg = new Random();\n         final List<T> shortList = new ArrayList<>(n);\n         for (final T aList : list) {\n-            if (rg.nextDouble() < stillNeeded / (double) availableElements) {\n+            if (random.nextDouble() < stillNeeded / (double) availableElements) {\n                 shortList.add(aList);\n                 stillNeeded--;\n             }\n-            if (stillNeeded == 0) break; // fast out if do not need more elements\n+            if (stillNeeded == 0) {\n+                break; // fast out if do not need more elements\n+            }\n             availableElements--;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0Nzg1Ng==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382047856", "bodyText": "Unless there's a need to use it elsewhere, I would make this private.", "author": "pshapiro4broad", "createdAt": "2020-02-20T14:51:35Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -88,6 +89,8 @@\n     public static final int DEFAULT_MINIMUM_MAPPING_QUALITY = 10;\n     public static final int DEFAULT_MINIMUM_BASE_QUALITY = 20;\n     public static final int DEFAULT_MAXIMAL_PL_DIFFERENCE = 30;\n+    // used sometimes to subset loci. Fix the random seed so that the results are deterministic\n+    public static final Random random = new Random(42);", "originalCommit": "3826ca5eef0fd1a72ba63b233ac44dc24559168d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "001f859ddf3c9127f32e559c1af366472139f0ca", "chunk": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex c35369f4a..e66b53381 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n\n@@ -89,8 +88,6 @@ public class FingerprintChecker {\n     public static final int DEFAULT_MINIMUM_MAPPING_QUALITY = 10;\n     public static final int DEFAULT_MINIMUM_BASE_QUALITY = 20;\n     public static final int DEFAULT_MAXIMAL_PL_DIFFERENCE = 30;\n-    // used sometimes to subset loci. Fix the random seed so that the results are deterministic\n-    public static final Random random = new Random(42);\n \n     private final HaplotypeMap haplotypes;\n     private int minimumBaseQuality = DEFAULT_MINIMUM_BASE_QUALITY;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0ODE2MA==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382048160", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads,random);\n          \n          \n            \n                            final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads, random);", "author": "pshapiro4broad", "createdAt": "2020-02-20T14:51:55Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -633,7 +634,7 @@ private FingerprintIdDetails createUnknownFP(final Path samFile, final SAMRecord\n                 final Snp snp = this.haplotypes.getSnp(info.getSequenceName(), info.getPosition());\n \n                 // randomly select locusMaxReads elements from the list\n-                final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = randomSublist(info.getRecordAndPositions(), locusMaxReads);\n+                final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads,random);", "originalCommit": "3826ca5eef0fd1a72ba63b233ac44dc24559168d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "001f859ddf3c9127f32e559c1af366472139f0ca", "chunk": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex c35369f4a..e66b53381 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n\n@@ -634,7 +631,7 @@ public class FingerprintChecker {\n                 final Snp snp = this.haplotypes.getSnp(info.getSequenceName(), info.getPosition());\n \n                 // randomly select locusMaxReads elements from the list\n-                final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads,random);\n+                final List<SamLocusIterator.RecordAndOffset> recordAndOffsetList = MathUtil.randomSublist(info.getRecordAndOffsets(), locusMaxReads);\n \n                 for (final SamLocusIterator.RecordAndOffset rec : recordAndOffsetList) {\n                     final SAMReadGroupRecord rg = rec.getRecord().getReadGroup();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MDEwMA==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382050100", "bodyText": "Could write this as\n        final List<Integer> list = Arrays.asList(1, 2, 3);", "author": "pshapiro4broad", "createdAt": "2020-02-20T14:54:52Z", "path": "src/test/java/picard/util/MathUtilTest.java", "diffHunk": "@@ -84,6 +88,19 @@ private void assertEquals(final double[] actual, final double[] expected) {\n         }\n     }\n \n+    @Test\n+    public void testRandomSublist() {\n+        final Random random = new Random();\n+        final List<Integer> list = new ArrayList<>();", "originalCommit": "3826ca5eef0fd1a72ba63b233ac44dc24559168d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "001f859ddf3c9127f32e559c1af366472139f0ca", "chunk": "diff --git a/src/test/java/picard/util/MathUtilTest.java b/src/test/java/picard/util/MathUtilTest.java\nindex c9fb1b74a..ad571b26d 100644\n--- a/src/test/java/picard/util/MathUtilTest.java\n+++ b/src/test/java/picard/util/MathUtilTest.java\n\n@@ -90,15 +89,15 @@ public class MathUtilTest {\n \n     @Test\n     public void testRandomSublist() {\n-        final Random random = new Random();\n+\n         final List<Integer> list = new ArrayList<>();\n         list.add(1);\n         list.add(2);\n         list.add(3);\n \n-        Assert.assertEquals(list, MathUtil.randomSublist(list, 3, random));\n-        Assert.assertEquals(list, MathUtil.randomSublist(list, 4, random));\n-        Assert.assertEquals(MathUtil.randomSublist(list, 2, random).size(), 2);\n+        Assert.assertEquals(list, MathUtil.randomSublist(list, 3));\n+        Assert.assertEquals(list, MathUtil.randomSublist(list, 4));\n+        Assert.assertEquals(MathUtil.randomSublist(list, 2).size(), 2);\n     }\n \n     @Test(dataProvider = \"divideDoubleTestCases\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MDYzNw==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382050637", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final File metricsFile = File.createTempFile(\"crosscheck\",\".crosscheck_metrics\");\n          \n          \n            \n                    final File metricsFile = File.createTempFile(\"crosscheck\", \".crosscheck_metrics\");", "author": "pshapiro4broad", "createdAt": "2020-02-20T14:55:44Z", "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -143,27 +160,30 @@ public void testTerminateOnBadFile() {\n         final File na12891_r1 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.r1.sam\");\n         final File na12891_r2 = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.r2.sam\");\n         final File na12892_r1 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.r1.sam\");\n-        final File na12892_r2 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.r1.sam\");\n+        final File na12892_r2 = new File(TEST_DATA_DIR, \"NA12892.over.fingerprints.r2.sam\");\n \n         final File na12891_noRg = new File(TEST_DATA_DIR, \"NA12891.over.fingerprints.noRgTag.sam\");\n \n         return new Object[][]{\n                 {na12891_r1, na12891_r2, true, true},\n                 {na12892_r1, na12892_r2, true, true},\n                 {na12892_r1, na12891_r2, false, true},\n-                {na12892_r1, na12891_noRg, false, true},\n                 {na12891_r1, na12891_noRg, true, true},\n+                {na12892_r1, na12891_noRg, false, true},\n \n-                {na12891_r1, na12891_r2, true, false},\n-                {na12892_r1, na12892_r2, true, false},\n-                {na12892_r1, na12891_r2, false, false},\n-                {na12892_r1, na12891_noRg, false, false},\n-                {na12891_r1, na12891_noRg, true, false}\n+                {na12891_r2, na12891_r2, true, false},\n+                {na12892_r2, na12892_r2, true, false},\n+                {na12892_r2, na12891_r2, false, false},\n+                {na12891_r2, na12891_noRg, true, false},\n+                {na12892_r2, na12891_noRg, false, false},\n         };\n     }\n \n     @Test(dataProvider = \"checkFingerprintsSamDataProvider\")\n-    public void testCheckFingerprintsSam(final File samFile1, final File samFile2, final boolean expectedMatch, final boolean silent) {\n+    public void testCheckFingerprintsSam(final File samFile1, final File samFile2, final boolean expectedMatch, final boolean silent) throws IOException {\n+\n+        final File metricsFile = File.createTempFile(\"crosscheck\",\".crosscheck_metrics\");", "originalCommit": "3826ca5eef0fd1a72ba63b233ac44dc24559168d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "001f859ddf3c9127f32e559c1af366472139f0ca", "chunk": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 99a3f4d31..16fcfb80d 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n\n@@ -182,7 +181,7 @@ public class FingerprintCheckerTest {\n     @Test(dataProvider = \"checkFingerprintsSamDataProvider\")\n     public void testCheckFingerprintsSam(final File samFile1, final File samFile2, final boolean expectedMatch, final boolean silent) throws IOException {\n \n-        final File metricsFile = File.createTempFile(\"crosscheck\",\".crosscheck_metrics\");\n+        final File metricsFile = File.createTempFile(\"crosscheck\", \".crosscheck_metrics\");\n         metricsFile.deleteOnExit();\n \n         final String[] args = {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MDgyMQ==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382050821", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"OUTPUT=\"+metricsFile.getAbsolutePath()\n          \n          \n            \n                            \"OUTPUT=\" + metricsFile.getAbsolutePath()", "author": "pshapiro4broad", "createdAt": "2020-02-20T14:55:59Z", "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -173,9 +193,29 @@ public void testCheckFingerprintsSam(final File samFile1, final File samFile2, f\n                 \"I=\" + samFile2.getAbsolutePath(),\n                 \"VALIDATION_STRINGENCY=\" + (silent ? \"SILENT\" : \"LENIENT\"),\n                 \"CROSSCHECK_BY=FILE\",\n+                \"OUTPUT=\"+metricsFile.getAbsolutePath()", "originalCommit": "3826ca5eef0fd1a72ba63b233ac44dc24559168d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "001f859ddf3c9127f32e559c1af366472139f0ca", "chunk": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 99a3f4d31..16fcfb80d 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n\n@@ -193,7 +192,7 @@ public class FingerprintCheckerTest {\n                 \"I=\" + samFile2.getAbsolutePath(),\n                 \"VALIDATION_STRINGENCY=\" + (silent ? \"SILENT\" : \"LENIENT\"),\n                 \"CROSSCHECK_BY=FILE\",\n-                \"OUTPUT=\"+metricsFile.getAbsolutePath()\n+                \"OUTPUT=\" + metricsFile.getAbsolutePath()\n         };\n \n         Assert.assertEquals(new CrosscheckFingerprints().instanceMain(args), expectedMatch ? 0 : 1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MTM2Nw==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382051367", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for(Fingerprint fp1:fp1Map.values()){\n          \n          \n            \n                    for (Fingerprint fp1 : fp1Map.values()) {", "author": "pshapiro4broad", "createdAt": "2020-02-20T14:56:46Z", "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -124,13 +124,30 @@ public void testCheckFingerprintsVcf(final File vcfFile, final File genotypesFil\n \n     @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n     public void testFingerprintVcf(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n-                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) throws IOException {\n+                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n         final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n         final Map<FingerprintIdDetails, Fingerprint> fp1 = fpChecker.fingerprintVcf(vcfFile.toPath());\n \n         Assert.assertFalse(fp1.isEmpty());\n     }\n \n+\n+    @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n+    public void testFingerprintSwapEqual(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n+                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n+        final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+        final Map<FingerprintIdDetails, Fingerprint> fp1Map = fpChecker.fingerprintVcf(vcfFile.toPath());\n+        final Map<FingerprintIdDetails, Fingerprint> fp2Map = fpChecker.fingerprintVcf(genotypesFile.toPath());\n+\n+        for(Fingerprint fp1:fp1Map.values()){", "originalCommit": "3826ca5eef0fd1a72ba63b233ac44dc24559168d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "001f859ddf3c9127f32e559c1af366472139f0ca", "chunk": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 99a3f4d31..16fcfb80d 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n\n@@ -131,19 +131,18 @@ public class FingerprintCheckerTest {\n         Assert.assertFalse(fp1.isEmpty());\n     }\n \n-\n     @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n     public void testFingerprintSwapEqual(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n-                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n+                                         final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n         final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n         final Map<FingerprintIdDetails, Fingerprint> fp1Map = fpChecker.fingerprintVcf(vcfFile.toPath());\n         final Map<FingerprintIdDetails, Fingerprint> fp2Map = fpChecker.fingerprintVcf(genotypesFile.toPath());\n \n-        for(Fingerprint fp1:fp1Map.values()){\n-            for(Fingerprint fp2:fp2Map.values()) {\n+        for (Fingerprint fp1 : fp1Map.values()) {\n+            for (Fingerprint fp2 : fp2Map.values()) {\n                 final MatchResults matchResults12 = FingerprintChecker.calculateMatchResults(fp1, fp2);\n                 final MatchResults matchResults21 = FingerprintChecker.calculateMatchResults(fp2, fp1);\n-                compareDoubleWithAccuracy(matchResults12.getLOD(),matchResults21.getLOD(),1e-10);\n+                compareDoubleWithAccuracy(matchResults12.getLOD(), matchResults21.getLOD(), 1e-10);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1MTU4Mg==", "url": "https://github.com/broadinstitute/picard/pull/1455#discussion_r382051582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            compareDoubleWithAccuracy(matchResults12.getLOD(),matchResults21.getLOD(),1e-10);\n          \n          \n            \n                            compareDoubleWithAccuracy(matchResults12.getLOD(),matchResults21.getLOD(), 1e-10);", "author": "pshapiro4broad", "createdAt": "2020-02-20T14:57:04Z", "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -124,13 +124,30 @@ public void testCheckFingerprintsVcf(final File vcfFile, final File genotypesFil\n \n     @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n     public void testFingerprintVcf(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n-                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) throws IOException {\n+                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n         final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n         final Map<FingerprintIdDetails, Fingerprint> fp1 = fpChecker.fingerprintVcf(vcfFile.toPath());\n \n         Assert.assertFalse(fp1.isEmpty());\n     }\n \n+\n+    @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n+    public void testFingerprintSwapEqual(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n+                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n+        final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n+        final Map<FingerprintIdDetails, Fingerprint> fp1Map = fpChecker.fingerprintVcf(vcfFile.toPath());\n+        final Map<FingerprintIdDetails, Fingerprint> fp2Map = fpChecker.fingerprintVcf(genotypesFile.toPath());\n+\n+        for(Fingerprint fp1:fp1Map.values()){\n+            for(Fingerprint fp2:fp2Map.values()) {\n+                final MatchResults matchResults12 = FingerprintChecker.calculateMatchResults(fp1, fp2);\n+                final MatchResults matchResults21 = FingerprintChecker.calculateMatchResults(fp2, fp1);\n+                compareDoubleWithAccuracy(matchResults12.getLOD(),matchResults21.getLOD(),1e-10);", "originalCommit": "3826ca5eef0fd1a72ba63b233ac44dc24559168d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "001f859ddf3c9127f32e559c1af366472139f0ca", "chunk": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 99a3f4d31..16fcfb80d 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n\n@@ -131,19 +131,18 @@ public class FingerprintCheckerTest {\n         Assert.assertFalse(fp1.isEmpty());\n     }\n \n-\n     @Test(dataProvider = \"checkFingerprintsVcfDataProvider\")\n     public void testFingerprintSwapEqual(final File vcfFile, final File genotypesFile, final String observedSampleAlias, final String expectedSampleAlias,\n-                                   final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n+                                         final double llExpectedSample, final double llRandomSample, final double lodExpectedSample) {\n         final FingerprintChecker fpChecker = new FingerprintChecker(SUBSETTED_HAPLOTYPE_DATABASE_FOR_TESTING);\n         final Map<FingerprintIdDetails, Fingerprint> fp1Map = fpChecker.fingerprintVcf(vcfFile.toPath());\n         final Map<FingerprintIdDetails, Fingerprint> fp2Map = fpChecker.fingerprintVcf(genotypesFile.toPath());\n \n-        for(Fingerprint fp1:fp1Map.values()){\n-            for(Fingerprint fp2:fp2Map.values()) {\n+        for (Fingerprint fp1 : fp1Map.values()) {\n+            for (Fingerprint fp2 : fp2Map.values()) {\n                 final MatchResults matchResults12 = FingerprintChecker.calculateMatchResults(fp1, fp2);\n                 final MatchResults matchResults21 = FingerprintChecker.calculateMatchResults(fp2, fp1);\n-                compareDoubleWithAccuracy(matchResults12.getLOD(),matchResults21.getLOD(),1e-10);\n+                compareDoubleWithAccuracy(matchResults12.getLOD(), matchResults21.getLOD(), 1e-10);\n             }\n         }\n     }\n"}}, {"oid": "001f859ddf3c9127f32e559c1af366472139f0ca", "url": "https://github.com/broadinstitute/picard/commit/001f859ddf3c9127f32e559c1af366472139f0ca", "message": "Found a bug in the fingerprinting code that resulted in non-symmetric results: LOD(a,b) != LOD(b,a)\n\nThe problem was that the __normlized__ posterior was used as the prior in the denominator of the LOD calculation.\nThe correct thing to do is to use the __unnormalized__ posterior array which is what this commit does.\n\nOther changes include:\n\n- more tests\n- cleaup\n\n- Found a disabled test laying around...enabled it and more cleanup.\n\n-move \"randomSublist\" to a more appropriate place", "committedDate": "2020-02-20T20:38:20Z", "type": "commit"}, {"oid": "b72f535d102403de5ca25849367cfc3417b2ff7f", "url": "https://github.com/broadinstitute/picard/commit/b72f535d102403de5ca25849367cfc3417b2ff7f", "message": "- responding to review comments (found a bug!)", "committedDate": "2020-02-20T20:38:20Z", "type": "commit"}, {"oid": "deab7fa11840cd5f8ff2c629ddea96d27c92254a", "url": "https://github.com/broadinstitute/picard/commit/deab7fa11840cd5f8ff2c629ddea96d27c92254a", "message": "- responding to more review comments.", "committedDate": "2020-02-20T20:38:20Z", "type": "commit"}, {"oid": "82dfdf1bfc71fe3afe43e660411319589d9de3f5", "url": "https://github.com/broadinstitute/picard/commit/82dfdf1bfc71fe3afe43e660411319589d9de3f5", "message": "- responding to review comments.", "committedDate": "2020-02-20T20:51:52Z", "type": "commit"}, {"oid": "82dfdf1bfc71fe3afe43e660411319589d9de3f5", "url": "https://github.com/broadinstitute/picard/commit/82dfdf1bfc71fe3afe43e660411319589d9de3f5", "message": "- responding to review comments.", "committedDate": "2020-02-20T20:51:52Z", "type": "forcePushed"}, {"oid": "e7a979b3584bfabca9639c292273a9e70e388b43", "url": "https://github.com/broadinstitute/picard/commit/e7a979b3584bfabca9639c292273a9e70e388b43", "message": "Merge branch 'master' into yf_fix_fingerprinting_non-symmetry_bug", "committedDate": "2020-02-20T23:28:14Z", "type": "commit"}]}