{"pr_number": 1608, "pr_title": "Add functionality to not combine abutting intervals", "pr_createdAt": "2020-11-16T20:10:06Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1608", "timeline": [{"oid": "3e36c3eef2361f01fd438b54aff2df58343ddcaf", "url": "https://github.com/broadinstitute/picard/commit/3e36c3eef2361f01fd438b54aff2df58343ddcaf", "message": "Added functionality to recreate interval list with abutting intervals kept separate, plus tests", "committedDate": "2020-11-16T19:57:34Z", "type": "commit"}, {"oid": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "url": "https://github.com/broadinstitute/picard/commit/c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "message": "Added some comments in the tests, newlines at end of data files", "committedDate": "2020-11-16T20:02:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547249", "bodyText": "I'm not sure I understand why this is inherently incompatible with UNION. I get that currently the htsjdk uniqued method combines abbutting intervals, but I don't see why it has to be that way....it seems plausible, to work around it by using the lower-level getUniqueIntervals directly.", "author": "yfarjoun", "createdAt": "2020-11-16T20:19:31Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -513,6 +519,9 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n         if (COUNT_OUTPUT != null && OUTPUT_VALUE == Output.NONE) {\n             errorMsgs.add(\"COUNT_OUTPUT was provided but OUTPUT_VALUE is set to NONE.\");\n         }\n+        if (ACTION == Action.UNION && DONT_COMBINE_ABUTTING) {\n+            errorMsgs.add(\"ACTION=UNION action combines abutting intervals by default, so it is incompatible with DONT_COMBINE_ABUTTING=true.\");", "originalCommit": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU4MTIxMg==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524581212", "bodyText": "There is an additional wrinkle, that getUniqueIntervals returns List<Intervals> whereas uniqued() returns IntervalList, and there is no constructor that takes in a List<Intervals> and turns it into an IntervalList. I can see if there's a way to do this with addAll() and removing the old intervals. If you have any ideas let me know.", "author": "tmelman", "createdAt": "2020-11-16T21:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU5NzgxMw==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524597813", "bodyText": "you can replicate the htsjdk code to make a private method that also allows you to state \"mergeAbutting\", right? eventually perhaps someone will push that down to htsdjk.", "author": "yfarjoun", "createdAt": "2020-11-16T21:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NTk1NQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r527955955", "bodyText": "Fixed @yfarjoun", "author": "tmelman", "createdAt": "2020-11-20T20:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f37b707cc9bc00179f4778eb3f46ad51b12707e5", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 1570ea8e8..6de463477 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -519,10 +548,6 @@ public class IntervalListTools extends CommandLineProgram {\n         if (COUNT_OUTPUT != null && OUTPUT_VALUE == Output.NONE) {\n             errorMsgs.add(\"COUNT_OUTPUT was provided but OUTPUT_VALUE is set to NONE.\");\n         }\n-        if (ACTION == Action.UNION && DONT_COMBINE_ABUTTING) {\n-            errorMsgs.add(\"ACTION=UNION action combines abutting intervals by default, so it is incompatible with DONT_COMBINE_ABUTTING=true.\");\n-        }\n-\n         return errorMsgs.isEmpty() ? null : errorMsgs.toArray(new String[0]);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NDE1NA==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524544154", "bodyText": "remove commented out old code", "author": "kachulis", "createdAt": "2020-11-16T20:13:56Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +405,18 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n             UNIQUE = true;\n         }\n \n         final IntervalList possiblySortedResult = SORT ? result.sorted() : result;\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n         //only get unique if this has been asked unless inverting (since the invert will return a unique list)\n-        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();\n+//        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();", "originalCommit": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b153ccc11b59202fb3efa94c0f009c242d04779", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 1570ea8e8..e14e6e284 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -409,14 +419,19 @@ public class IntervalListTools extends CommandLineProgram {\n             UNIQUE = true;\n         }\n \n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;\n+            UNIQUE = true;\n+        }\n+\n         final IntervalList possiblySortedResult = SORT ? result.sorted() : result;\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n         //only get unique if this has been asked unless inverting (since the invert will return a unique list)\n-//        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();\n-        final boolean CONCATENATE_NAMES = true;\n-        final boolean ENFORCE_SAME_STRANDS = false;\n-        List<Interval> finalIntervals = UNIQUE ? IntervalList.getUniqueIntervals(possiblyInvertedResult, !DONT_COMBINE_ABUTTING, CONCATENATE_NAMES, ENFORCE_SAME_STRANDS) : possiblyInvertedResult.getIntervals();\n+//        final boolean CONCATENATE_NAMES = true;\n+//        final boolean ENFORCE_SAME_STRANDS = false;\n+//        List<Interval> finalIntervals = UNIQUE ? IntervalList.getUniqueIntervals(possiblyInvertedResult, !DONT_COMBINE_ABUTTING, CONCATENATE_NAMES, ENFORCE_SAME_STRANDS) : possiblyInvertedResult.getIntervals();\n+        List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, DONT_COMBINE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();\n \n         if (BREAK_BANDS_AT_MULTIPLES_OF > 0) {\n             finalIntervals = IntervalList.breakIntervalsAtBandMultiples(finalIntervals, BREAK_BANDS_AT_MULTIPLES_OF);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzA1Mw==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547053", "bodyText": "don't need the timeOut since you're testing on very small files.", "author": "kachulis", "createdAt": "2020-11-16T20:19:15Z", "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)", "originalCommit": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6109c84bdf407302c8cabc9c480e1ab9a4f46f7", "chunk": "diff --git a/src/test/java/picard/util/IntervalListToolsTest.java b/src/test/java/picard/util/IntervalListToolsTest.java\nindex d22488279..45d50f66f 100644\n--- a/src/test/java/picard/util/IntervalListToolsTest.java\n+++ b/src/test/java/picard/util/IntervalListToolsTest.java\n\n@@ -438,6 +438,7 @@ public class IntervalListToolsTest extends CommandLineProgramTest {\n             final List<String> args = new ArrayList<>();\n             args.add(\"INPUT=\" + abutting);\n             args.add(\"OUTPUT=\" + ilOut);\n+            args.add(\"ACTION=CONCAT\"); // optional, will work without this\n             args.add(\"UNIQUE=\"+true); //Note: do not use ACTION=UNION or it will by default combine abutting intervals\n             args.add(\"DONT_COMBINE_ABUTTING=\"+true);\n             Assert.assertEquals(runPicardCommandLine(args), 0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzMyNQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524547325", "bodyText": "unneeded brackets (maybe this used to be inside a try block?)", "author": "kachulis", "createdAt": "2020-11-16T20:19:39Z", "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)\n+    public void testCombineAbuttingIntervals() throws IOException {\n+        // Test the default behavior of UNION, which is to combine abutting and overlapping intervals.\n+        //gather\n+        final File ilOut = File.createTempFile(\"IntervalListTools\", \".interval_list\");\n+        ilOut.deleteOnExit();\n+        {", "originalCommit": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU4MTk2Mw==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524581963", "bodyText": "I was wondering about this, I copied and pasted from another test. Happy to remove! :)", "author": "tmelman", "createdAt": "2020-11-16T21:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0NzMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b6109c84bdf407302c8cabc9c480e1ab9a4f46f7", "chunk": "diff --git a/src/test/java/picard/util/IntervalListToolsTest.java b/src/test/java/picard/util/IntervalListToolsTest.java\nindex d22488279..45d50f66f 100644\n--- a/src/test/java/picard/util/IntervalListToolsTest.java\n+++ b/src/test/java/picard/util/IntervalListToolsTest.java\n\n@@ -438,6 +438,7 @@ public class IntervalListToolsTest extends CommandLineProgramTest {\n             final List<String> args = new ArrayList<>();\n             args.add(\"INPUT=\" + abutting);\n             args.add(\"OUTPUT=\" + ilOut);\n+            args.add(\"ACTION=CONCAT\"); // optional, will work without this\n             args.add(\"UNIQUE=\"+true); //Note: do not use ACTION=UNION or it will by default combine abutting intervals\n             args.add(\"DONT_COMBINE_ABUTTING=\"+true);\n             Assert.assertEquals(runPicardCommandLine(args), 0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MDg1NQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r524550855", "bodyText": "Would like to see some tests of the other actions as well.  And I think you can combine this with testCombineAbuttingIntervals and use a DataProvider", "author": "kachulis", "createdAt": "2020-11-16T20:25:58Z", "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -406,4 +409,63 @@ public void testLargeScatters() throws IOException {\n \n         Assert.assertEquals(gather, original);\n     }\n+\n+    @Test(timeOut = 40_000)\n+    public void testCombineAbuttingIntervals() throws IOException {\n+        // Test the default behavior of UNION, which is to combine abutting and overlapping intervals.\n+        //gather\n+        final File ilOut = File.createTempFile(\"IntervalListTools\", \".interval_list\");\n+        ilOut.deleteOnExit();\n+        {\n+            final List<String> args = new ArrayList<>();\n+            args.add(\"INPUT=\" + abutting);\n+            args.add(\"OUTPUT=\" + ilOut);\n+            args.add(\"ACTION=UNION\"); // Note: ACTION=UNION is equivalent to UNIQUE=true and DONT_COMBINE_ABUTTING=false, or defaults\n+            Assert.assertEquals(runPicardCommandLine(args), 0);\n+        }\n+        final IntervalList gather = IntervalList.fromFile(ilOut);\n+        final IntervalList original = IntervalList.fromFile(abutting_combined);\n+\n+        Assert.assertEquals(gather, original); // equal to expected output\n+    }\n+    @Test(timeOut = 40_000)\n+    public void testDontCombineAbuttingIntervals() throws IOException {", "originalCommit": "c3ebb23acb8588b8fbec71b759341b14bfd0e30c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NjEzMg==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r527956132", "bodyText": "Fixed @kachulis", "author": "tmelman", "createdAt": "2020-11-20T20:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MDg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b6109c84bdf407302c8cabc9c480e1ab9a4f46f7", "chunk": "diff --git a/src/test/java/picard/util/IntervalListToolsTest.java b/src/test/java/picard/util/IntervalListToolsTest.java\nindex d22488279..45d50f66f 100644\n--- a/src/test/java/picard/util/IntervalListToolsTest.java\n+++ b/src/test/java/picard/util/IntervalListToolsTest.java\n\n@@ -438,6 +438,7 @@ public class IntervalListToolsTest extends CommandLineProgramTest {\n             final List<String> args = new ArrayList<>();\n             args.add(\"INPUT=\" + abutting);\n             args.add(\"OUTPUT=\" + ilOut);\n+            args.add(\"ACTION=CONCAT\"); // optional, will work without this\n             args.add(\"UNIQUE=\"+true); //Note: do not use ACTION=UNION or it will by default combine abutting intervals\n             args.add(\"DONT_COMBINE_ABUTTING=\"+true);\n             Assert.assertEquals(runPicardCommandLine(args), 0);\n"}}, {"oid": "0ff478590bf608cf18a8b6ad576c26fc3e5bea9d", "url": "https://github.com/broadinstitute/picard/commit/0ff478590bf608cf18a8b6ad576c26fc3e5bea9d", "message": "Edited the USAGE_DETAILS to include example for this functionality", "committedDate": "2020-11-16T20:41:06Z", "type": "commit"}, {"oid": "b6109c84bdf407302c8cabc9c480e1ab9a4f46f7", "url": "https://github.com/broadinstitute/picard/commit/b6109c84bdf407302c8cabc9c480e1ab9a4f46f7", "message": "Added comment in the tests about using ACTION=CONCAT", "committedDate": "2020-11-16T20:41:50Z", "type": "commit"}, {"oid": "9b153ccc11b59202fb3efa94c0f009c242d04779", "url": "https://github.com/broadinstitute/picard/commit/9b153ccc11b59202fb3efa94c0f009c242d04779", "message": "Made DONT_MERGE_ABUTTING work with Union", "committedDate": "2020-11-18T21:39:34Z", "type": "commit"}, {"oid": "f37b707cc9bc00179f4778eb3f46ad51b12707e5", "url": "https://github.com/broadinstitute/picard/commit/f37b707cc9bc00179f4778eb3f46ad51b12707e5", "message": "Addressed code review changes to make DONT_MERGE_ABUTTING work with all actions (especially UNION)", "committedDate": "2020-11-20T20:31:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MjQwNQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r529842405", "bodyText": "\ud83d\udc4d", "author": "kachulis", "createdAt": "2020-11-24T19:58:27Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -328,10 +337,13 @@ void output(final long totalBaseCount, final long intervalCount, final PrintStre\n \n         UNION(\"Like CONCATENATE but with UNIQUE and SORT implied, the result being the set-wise union of all INPUTS, \" +\n                 \"with overlapping and abutting intervals merged into one.\", false) {\n-            @Override\n-            IntervalList act(final IntervalList firstList, final IntervalList ignored) {\n-                return super.act(firstList.sorted().uniqued(), ignored);\n-            }\n+//            @Override\n+//            IntervalList act(final IntervalList firstList, final IntervalList ignored) {\n+////                return super.act(firstList.sorted().uniqued(), ignored);\n+//                return super.act(IntervalListTools.uniqued(firstList.sorted(), false), ignored);\n+//            }\n+// Before I delete this code block: I'm removing this in order to move this functionality down to the \"doWork()\" subroutine,", "originalCommit": "f37b707cc9bc00179f4778eb3f46ad51b12707e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 6de463477..31d47253a 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -336,15 +336,7 @@ public class IntervalListTools extends CommandLineProgram {\n                 \"intervals implied. Will result in a possibly unsorted list unless requested otherwise.\", false),\n \n         UNION(\"Like CONCATENATE but with UNIQUE and SORT implied, the result being the set-wise union of all INPUTS, \" +\n-                \"with overlapping and abutting intervals merged into one.\", false) {\n-//            @Override\n-//            IntervalList act(final IntervalList firstList, final IntervalList ignored) {\n-////                return super.act(firstList.sorted().uniqued(), ignored);\n-//                return super.act(IntervalListTools.uniqued(firstList.sorted(), false), ignored);\n-//            }\n-// Before I delete this code block: I'm removing this in order to move this functionality down to the \"doWork()\" subroutine,\n-// so that it works with \"DONT_MERGE_ABUTTING\" and only does \"uniqued()\" once.\n-        },\n+                \"with overlapping and abutting intervals merged into one.\", false),\n \n         INTERSECT(\"The sorted and merged set of all loci that are contained in all of the INPUTs.\", false) {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTEwNg==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r529871106", "bodyText": "why does this need to return an IntervalList? can't you let it return a list of intervals instead?  You immediately call getIntervals() on it the only place I see it used, so it seems like a lot of unneeded converting back and forth between lists of intervals and interval lists.", "author": "kachulis", "createdAt": "2020-11-24T20:54:02Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -501,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "originalCommit": "f37b707cc9bc00179f4778eb3f46ad51b12707e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNjE1NQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r529926155", "bodyText": "Because I'm reproducing the functionality of \"uniqued\" in htsjdk's IntervalList. The idea is to have a \"uniqued\" method that we can one day add to their code base in a PR. Alternatively they have a \"getUniqueIntervals()\" method that rerturns a List of Intervals. I could use that but this makes for cleaner code with all the defaults.\ntl;dr: this was purely a design decision, I don't have a strong preference on which way to do it, and I'm happy to change it to according to your preferences, as you will also be interacting with it.", "author": "tmelman", "createdAt": "2020-11-24T22:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0MzE1OA==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r530443158", "bodyText": "I see, that seems reasonable then", "author": "kachulis", "createdAt": "2020-11-25T15:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MTEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 6de463477..31d47253a 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -514,7 +506,7 @@ public class IntervalListTools extends CommandLineProgram {\n                 .orElse(null);\n     }\n \n-    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+    private static IntervalList uniqued(IntervalList nonUnique, boolean mergeAbutting) {\n         // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n         // Returns an IntervalList.\n         // Inputs:\n"}}, {"oid": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "url": "https://github.com/broadinstitute/picard/commit/7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "message": "Merge branch 'master' into tamar_adjacent_intervals", "committedDate": "2020-12-03T20:50:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNTk5OQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536335999", "bodyText": "I'd add a \"//TODO:'' item to move this to htsjdk and use that once we can. (possibly adding issues that can be referenced)", "author": "yfarjoun", "createdAt": "2020-12-04T19:39:23Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "originalCommit": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 6de463477..31d47253a 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -514,7 +506,7 @@ public class IntervalListTools extends CommandLineProgram {\n                 .orElse(null);\n     }\n \n-    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+    private static IntervalList uniqued(IntervalList nonUnique, boolean mergeAbutting) {\n         // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n         // Returns an IntervalList.\n         // Inputs:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzA5Mg==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536337092", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();\n          \n          \n            \n                    List<Interval> finalIntervals = UNIQUE ? uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();", "author": "yfarjoun", "createdAt": "2020-12-04T19:41:17Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;\n             UNIQUE = true;\n         }\n \n         final IntervalList possiblySortedResult = SORT ? result.sorted() : result;\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n-        //only get unique if this has been asked unless inverting (since the invert will return a unique list)\n-        List<Interval> finalIntervals = UNIQUE ? possiblyInvertedResult.uniqued().getIntervals() : possiblyInvertedResult.getIntervals();\n+        //only get unique if this has been asked OR if action is UNION, unless inverting (since the invert will return a unique list)\n+        List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();", "originalCommit": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 6de463477..31d47253a 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -429,7 +421,7 @@ public class IntervalListTools extends CommandLineProgram {\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n         //only get unique if this has been asked OR if action is UNION, unless inverting (since the invert will return a unique list)\n-        List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();\n+        List<Interval> finalIntervals = UNIQUE ? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();\n \n         if (BREAK_BANDS_AT_MULTIPLES_OF > 0) {\n             finalIntervals = IntervalList.breakIntervalsAtBandMultiples(finalIntervals, BREAK_BANDS_AT_MULTIPLES_OF);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzY1OA==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536337658", "bodyText": "We tend to use camelCase for variables and methods\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n          \n          \n            \n                private static IntervalList uniqued(IntervalList nonUnique, boolean mergeAbutting) {", "author": "yfarjoun", "createdAt": "2020-12-04T19:42:15Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {", "originalCommit": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 6de463477..31d47253a 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -514,7 +506,7 @@ public class IntervalListTools extends CommandLineProgram {\n                 .orElse(null);\n     }\n \n-    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+    private static IntervalList uniqued(IntervalList nonUnique, boolean mergeAbutting) {\n         // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n         // Returns an IntervalList.\n         // Inputs:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536338240", "bodyText": "why are these in variables? you can just put true,false in the method call, no?", "author": "yfarjoun", "createdAt": "2020-12-04T19:43:21Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -495,6 +514,22 @@ private IntervalList openIntervalLists(final List<File> files, BinaryOperator<In\n                 .orElse(null);\n     }\n \n+    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+        // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n+        // Returns an IntervalList.\n+        // Inputs:\n+        //  - non_unique: an IntervalList to be operated on\n+        //  - merge_abutting: a boolean to combine abutting intervals (if true) or not (if false).\n+        // Outputs:\n+        //  - an IntervalList that is uniqued with overlapping intervals merged, and abutting intervals handled per the boolean flag.\n+        final boolean CONCATENATE_NAMES = true;", "originalCommit": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwOTU4Ng==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536409586", "bodyText": "I definitely can, it just makes for more readable code. Purely design decision, happy to change it", "author": "tmelman", "createdAt": "2020-12-04T22:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDM2OA==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536410368", "bodyText": "OK. So in that case, just change the variable names to camelCase", "author": "yfarjoun", "createdAt": "2020-12-04T22:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzEzNQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536417135", "bodyText": "done \ud83d\udc4d :)", "author": "tmelman", "createdAt": "2020-12-04T22:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzODI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 6de463477..31d47253a 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -514,7 +506,7 @@ public class IntervalListTools extends CommandLineProgram {\n                 .orElse(null);\n     }\n \n-    private static IntervalList uniqued(IntervalList non_unique, boolean merge_abutting) {\n+    private static IntervalList uniqued(IntervalList nonUnique, boolean mergeAbutting) {\n         // A subroutine to replace htsjdk's IntervalList \"unique()\" method, which combines abutting intervals by default.\n         // Returns an IntervalList.\n         // Inputs:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536343805", "bodyText": "if UNIQUE sorts by default, shouldn't this be SORT=false?", "author": "yfarjoun", "createdAt": "2020-12-04T19:53:50Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -402,15 +416,20 @@ protected int doWork() {\n         final IntervalList result = ACTION.act(lists, secondLists);\n \n         if (INVERT) {\n-            SORT = false; // no need to sort, since return will be sorted by definition.\n+            SORT = false; // no need to sort, since uniqued() output will be sorted by definition.\n+            UNIQUE = true;\n+        }\n+\n+        if (ACTION == Action.UNION) { // UNION is basically Action.CONCAT with SORT and UNIQUE\n+            SORT = true;", "originalCommit": "7455b44366d3fc1fa2818a6205d47ced9a87b9ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDIxMA==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536410210", "bodyText": "per the previous implementation, UNION assumes sort and unique are true. so if action is union we have to reproduce that behavior.", "author": "tmelman", "createdAt": "2020-12-04T22:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTI5MQ==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536411291", "bodyText": "I guess I'm confused by why the INVERT==true branch claims (in the comments) that theres no need to sort, and here there seems to be a need to sort again.", "author": "yfarjoun", "createdAt": "2020-12-04T22:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMjUxMA==", "url": "https://github.com/broadinstitute/picard/pull/1608#discussion_r536412510", "bodyText": "theres a bit of a loop of flags and actions overlapping lol\u2026 but I don't know what \"UNION\" would be with \"UNIQUE\" false.", "author": "tmelman", "createdAt": "2020-12-04T22:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MzgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 6de463477..31d47253a 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -429,7 +421,7 @@ public class IntervalListTools extends CommandLineProgram {\n         final IntervalList possiblyInvertedResult = INVERT ? IntervalList.invert(possiblySortedResult) : possiblySortedResult;\n \n         //only get unique if this has been asked OR if action is UNION, unless inverting (since the invert will return a unique list)\n-        List<Interval> finalIntervals = UNIQUE? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();\n+        List<Interval> finalIntervals = UNIQUE ? IntervalListTools.uniqued(possiblyInvertedResult, !DONT_MERGE_ABUTTING).getIntervals() : possiblyInvertedResult.getIntervals();\n \n         if (BREAK_BANDS_AT_MULTIPLES_OF > 0) {\n             finalIntervals = IntervalList.breakIntervalsAtBandMultiples(finalIntervals, BREAK_BANDS_AT_MULTIPLES_OF);\n"}}, {"oid": "ce854d1b15fed7373c444fad41c2119f1c642a2a", "url": "https://github.com/broadinstitute/picard/commit/ce854d1b15fed7373c444fad41c2119f1c642a2a", "message": "Addressed code review comments", "committedDate": "2020-12-04T22:16:58Z", "type": "commit"}, {"oid": "f9a1e477655b3275ca6d5b81b05194547f1a0a98", "url": "https://github.com/broadinstitute/picard/commit/f9a1e477655b3275ca6d5b81b05194547f1a0a98", "message": "Addressed code review comments", "committedDate": "2020-12-04T22:18:48Z", "type": "commit"}]}