{"pr_number": 1556, "pr_title": "Make Fingerprint checking fail when run on a truly unsorted file (currently it returns a non-informative fingerprint)", "pr_createdAt": "2020-08-04T14:19:36Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1556", "timeline": [{"oid": "344cc06c573a2b2fb8a56921651518a4431eb530", "url": "https://github.com/broadinstitute/picard/commit/344cc06c573a2b2fb8a56921651518a4431eb530", "message": "- fix fingerprintChecker test\n- make sure that fingerprint checker fails on sam file with \"unsorted\" sort order if it fails to find any information.\n- add test.\n- add logging to inform whether (sam) file is being read using an index or not.", "committedDate": "2020-08-04T14:17:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5NDI2NQ==", "url": "https://github.com/broadinstitute/picard/pull/1556#discussion_r465094265", "bodyText": "Is it usual to log before throw in picard? Normally I would expect code to throw and then rely on the catch point to log. This is also usually shorter to write as code has (potentially) many throw points but few catch points.", "author": "pshapiro4broad", "createdAt": "2020-08-04T14:29:56Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -575,6 +582,12 @@ public IntervalList getLociToGenotype(final Collection<Fingerprint> fingerprints\n             }\n         }\n \n+        if (!foundALocus && in.getFileHeader().getSortOrder()!= SAMFileHeader.SortOrder.coordinate) {\n+            final PicardException noReadsFound = new PicardException(String.format(\"Couldn't even find one locus with reads to fingerprint in file %s, which in addition isn't coordinate-sorted. Please sort the file and try again.\", samFile));\n+            log.error(noReadsFound);", "originalCommit": "344cc06c573a2b2fb8a56921651518a4431eb530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3NDM0Ng==", "url": "https://github.com/broadinstitute/picard/pull/1556#discussion_r465174346", "bodyText": "I used it because I wanted to see that the error that is thrown is what I expect...there was a bug previously and this test succeeded by failing in a different way....should change back.", "author": "yfarjoun", "createdAt": "2020-08-04T16:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5NDI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "abd94f2d6840b1cd28cf0ffebdf267da9fdf756f", "chunk": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 4b4f2b23a..c4bedb63f 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n\n@@ -575,17 +575,13 @@ public class FingerprintChecker {\n                         usedReadNames.add(readName);\n                     }\n                 } else {\n-                    final PicardException e = new PicardException(\"Unknown read group: \" + rg + \" in file: \" + samFile);\n-                    log.error(e);\n-                    throw e;\n+                    throw new PicardException(\"Unknown read group: \" + rg + \" in file: \" + samFile);\n                 }\n             }\n         }\n \n-        if (!foundALocus && in.getFileHeader().getSortOrder()!= SAMFileHeader.SortOrder.coordinate) {\n-            final PicardException noReadsFound = new PicardException(String.format(\"Couldn't even find one locus with reads to fingerprint in file %s, which in addition isn't coordinate-sorted. Please sort the file and try again.\", samFile));\n-            log.error(noReadsFound);\n-            throw noReadsFound;\n+        if (!foundALocus && in.getFileHeader().getSortOrder() != SAMFileHeader.SortOrder.coordinate) {\n+            throw new PicardException(String.format(\"Couldn't even find one locus with reads to fingerprint in file %s, which in addition isn't coordinate-sorted. Please sort the file and try again.\", samFile));\n         }\n \n         return fingerprintsByReadGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5NDY3Mw==", "url": "https://github.com/broadinstitute/picard/pull/1556#discussion_r465094673", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!foundALocus && in.getFileHeader().getSortOrder()!= SAMFileHeader.SortOrder.coordinate) {\n          \n          \n            \n                    if (!foundALocus && in.getFileHeader().getSortOrder() != SAMFileHeader.SortOrder.coordinate) {", "author": "pshapiro4broad", "createdAt": "2020-08-04T14:30:24Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -575,6 +582,12 @@ public IntervalList getLociToGenotype(final Collection<Fingerprint> fingerprints\n             }\n         }\n \n+        if (!foundALocus && in.getFileHeader().getSortOrder()!= SAMFileHeader.SortOrder.coordinate) {", "originalCommit": "344cc06c573a2b2fb8a56921651518a4431eb530", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abd94f2d6840b1cd28cf0ffebdf267da9fdf756f", "chunk": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 4b4f2b23a..c4bedb63f 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n\n@@ -575,17 +575,13 @@ public class FingerprintChecker {\n                         usedReadNames.add(readName);\n                     }\n                 } else {\n-                    final PicardException e = new PicardException(\"Unknown read group: \" + rg + \" in file: \" + samFile);\n-                    log.error(e);\n-                    throw e;\n+                    throw new PicardException(\"Unknown read group: \" + rg + \" in file: \" + samFile);\n                 }\n             }\n         }\n \n-        if (!foundALocus && in.getFileHeader().getSortOrder()!= SAMFileHeader.SortOrder.coordinate) {\n-            final PicardException noReadsFound = new PicardException(String.format(\"Couldn't even find one locus with reads to fingerprint in file %s, which in addition isn't coordinate-sorted. Please sort the file and try again.\", samFile));\n-            log.error(noReadsFound);\n-            throw noReadsFound;\n+        if (!foundALocus && in.getFileHeader().getSortOrder() != SAMFileHeader.SortOrder.coordinate) {\n+            throw new PicardException(String.format(\"Couldn't even find one locus with reads to fingerprint in file %s, which in addition isn't coordinate-sorted. Please sort the file and try again.\", samFile));\n         }\n \n         return fingerprintsByReadGroup;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5NDc5OQ==", "url": "https://github.com/broadinstitute/picard/pull/1556#discussion_r465094799", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                foundALocus=true;\n          \n          \n            \n                                foundALocus = true;", "author": "pshapiro4broad", "createdAt": "2020-08-04T14:30:35Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -556,6 +562,7 @@ public IntervalList getLociToGenotype(final Collection<Fingerprint> fingerprints\n                 }\n \n                 if (fingerprintIdDetailsMap.containsKey(rg)) {\n+                    foundALocus=true;", "originalCommit": "344cc06c573a2b2fb8a56921651518a4431eb530", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abd94f2d6840b1cd28cf0ffebdf267da9fdf756f", "chunk": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 4b4f2b23a..c4bedb63f 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n\n@@ -562,7 +562,7 @@ public class FingerprintChecker {\n                 }\n \n                 if (fingerprintIdDetailsMap.containsKey(rg)) {\n-                    foundALocus=true;\n+                    foundALocus = true;\n                     details = fingerprintIdDetailsMap.get(rg);\n \n                     final String readName = rec.getRecord().getReadName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5NTA1Mg==", "url": "https://github.com/broadinstitute/picard/pull/1556#discussion_r465095052", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!in.hasIndex()){\n          \n          \n            \n                    if (!in.hasIndex()) {", "author": "pshapiro4broad", "createdAt": "2020-08-04T14:30:56Z", "path": "src/main/java/picard/fingerprint/FingerprintChecker.java", "diffHunk": "@@ -480,6 +480,12 @@ public IntervalList getLociToGenotype(final Collection<Fingerprint> fingerprints\n \n         checkDictionaryGoodForFingerprinting(in.getFileHeader().getSequenceDictionary());\n \n+        if(!in.hasIndex()){", "originalCommit": "344cc06c573a2b2fb8a56921651518a4431eb530", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abd94f2d6840b1cd28cf0ffebdf267da9fdf756f", "chunk": "diff --git a/src/main/java/picard/fingerprint/FingerprintChecker.java b/src/main/java/picard/fingerprint/FingerprintChecker.java\nindex 4b4f2b23a..c4bedb63f 100644\n--- a/src/main/java/picard/fingerprint/FingerprintChecker.java\n+++ b/src/main/java/picard/fingerprint/FingerprintChecker.java\n\n@@ -480,7 +480,7 @@ public class FingerprintChecker {\n \n         checkDictionaryGoodForFingerprinting(in.getFileHeader().getSequenceDictionary());\n \n-        if(!in.hasIndex()){\n+        if (!in.hasIndex()) {\n             log.warn(String.format(\"Operating without an index! We could be here for a while. (%s)\", samFile));\n         } else {\n             log.info(String.format(\"Reading an indexed file (%s)\", samFile));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5ODY0OQ==", "url": "https://github.com/broadinstitute/picard/pull/1556#discussion_r465098649", "bodyText": "unnecessary new\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new Object[]{\"NA12891.over.fingerprints.r1.sam\", true},\n          \n          \n            \n                           {\"NA12891.over.fingerprints.r1.sam\", true},", "author": "pshapiro4broad", "createdAt": "2020-08-04T14:35:44Z", "path": "src/test/java/picard/fingerprint/FingerprintCheckerTest.java", "diffHunk": "@@ -151,11 +151,26 @@ public void testFingerprintSwapEqual(final File vcfFile, final File genotypesFil\n         }\n     }\n \n-    @Test(expectedExceptions = PicardException.class)\n-    public void testTerminateOnBadFile() {\n+    @DataProvider\n+    Object[][] samFilesforFingerprinting() {\n+        return new Object[][]{\n+                new Object[]{\"NA12891.over.fingerprints.r1.sam\", true},", "originalCommit": "344cc06c573a2b2fb8a56921651518a4431eb530", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abd94f2d6840b1cd28cf0ffebdf267da9fdf756f", "chunk": "diff --git a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\nindex 828c5d3a2..303667e9a 100644\n--- a/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n+++ b/src/test/java/picard/fingerprint/FingerprintCheckerTest.java\n\n@@ -154,9 +154,9 @@ public class FingerprintCheckerTest {\n     @DataProvider\n     Object[][] samFilesforFingerprinting() {\n         return new Object[][]{\n-                new Object[]{\"NA12891.over.fingerprints.r1.sam\", true},\n-                new Object[]{\"aligned_queryname_sorted.sam\", false},\n-                new Object[]{\"aligned_unsorted.sam\", false},\n+                {\"NA12891.over.fingerprints.r1.sam\", true},\n+                {\"aligned_queryname_sorted.sam\", false},\n+                {\"aligned_unsorted.sam\", false},\n         };\n     }\n \n"}}, {"oid": "abd94f2d6840b1cd28cf0ffebdf267da9fdf756f", "url": "https://github.com/broadinstitute/picard/commit/abd94f2d6840b1cd28cf0ffebdf267da9fdf756f", "message": "- responding to review comments", "committedDate": "2020-08-04T16:27:09Z", "type": "commit"}]}