{"pr_number": 1497, "pr_title": "GL-970.  Have CompareMetrics consider two NaN metrics equal", "pr_createdAt": "2020-04-13T15:17:25Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1497", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1NzE2Nw==", "url": "https://github.com/broadinstitute/picard/pull/1497#discussion_r407557167", "bodyText": "Can use fewer parens\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if ((!Double.isNaN(numValue1)) || (!Double.isNaN(numValue2))) {\n          \n          \n            \n                            if (!Double.isNaN(numValue1) || !Double.isNaN(numValue2)) {", "author": "pshapiro4broad", "createdAt": "2020-04-13T16:02:57Z", "path": "src/main/java/picard/analysis/CompareMetrics.java", "diffHunk": "@@ -267,7 +267,11 @@ protected SimpleResult compareMetricValues(final Object value1, final Object val\n             if (value1 instanceof Number) {\n                 double numValue1 = ((Number) value1).doubleValue();\n                 double numValue2 = ((Number) value2).doubleValue();\n-                double relativeChange = (numValue1 == 0 && numValue2 == 0) ? 0 : (numValue1 == 0) ? Double.MAX_VALUE : (numValue1 - numValue2) / numValue2;\n+                double relativeChange = 0;\n+                if ((!Double.isNaN(numValue1)) || (!Double.isNaN(numValue2))) {", "originalCommit": "0d514a2f666c44744d11588db578f375e8986c67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b9ee87061372502d1f4d6cf5e438bad8a67737", "chunk": "diff --git a/src/main/java/picard/analysis/CompareMetrics.java b/src/main/java/picard/analysis/CompareMetrics.java\nindex 1b0e2ca92..bfc4713d9 100644\n--- a/src/main/java/picard/analysis/CompareMetrics.java\n+++ b/src/main/java/picard/analysis/CompareMetrics.java\n\n@@ -267,26 +267,26 @@ public class CompareMetrics extends CommandLineProgram {\n             if (value1 instanceof Number) {\n                 double numValue1 = ((Number) value1).doubleValue();\n                 double numValue2 = ((Number) value2).doubleValue();\n-                double relativeChange = 0;\n-                if ((!Double.isNaN(numValue1)) || (!Double.isNaN(numValue2))) {\n-                    // For purposes of metrics comparison, NaN == NaN\n-                    relativeChange = (numValue1 == 0 && numValue2 == 0) ? 0 : (numValue1 == 0) ? Double.MAX_VALUE : (numValue1 - numValue2) / numValue2;\n+                double absoluteChange = 0;\n+                if (!Double.isNaN(numValue1) || !Double.isNaN(numValue2)) {\n+                    absoluteChange = numValue2 - numValue1;\n                 }\n-                if (relativeChange != 0) {\n+                if (absoluteChange != 0) {\n+                    double relativeChange = numValue1 == 0 ? Double.MAX_VALUE : absoluteChange / numValue1;\n                     if (MetricToAllowableRelativeChange.containsKey(metricName)) {\n                         double allowableRelativeChange = MetricToAllowableRelativeChange.get(metricName);\n                         if (Math.abs(relativeChange) >= allowableRelativeChange) {\n                             equal = false;\n-                            description = \"Changed by \" + relativeChange +\n-                                    \" which is outside of the allowable tolerance of \" + allowableRelativeChange;\n+                            description = \"Changed by \" + absoluteChange + \" (relative change of \" + relativeChange +\n+                                    \") which is outside of the allowable relative change tolerance of \" + allowableRelativeChange;\n                         } else {\n                             equal = true;\n-                            description = \"Changed by \" + relativeChange +\n-                                    \" which is within the allowable tolerance of \" + allowableRelativeChange;\n+                            description = \"Changed by \" + absoluteChange + \" (relative change of \" + relativeChange +\n+                                    \") which is within the allowable relative change tolerance of \" + allowableRelativeChange;\n                         }\n                     } else {\n                         equal = false;\n-                        description = \"Changed by \" + relativeChange;\n+                        description = \"Changed by \" + absoluteChange + \" (relative change of \" + relativeChange + \")\";\n                     }\n                 }\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzUwNA==", "url": "https://github.com/broadinstitute/picard/pull/1497#discussion_r407593504", "bodyText": "Under what conditions is it possible for absoluteChange to be non-zero and for (numValue1 == 0 && numValue2 == 0) to be true? Are this trying to avoid dividing by zero?\nAlso this code now divides by numValue1 and before it divided by numValue2, is that a fix?", "author": "pshapiro4broad", "createdAt": "2020-04-13T17:09:48Z", "path": "src/main/java/picard/analysis/CompareMetrics.java", "diffHunk": "@@ -267,22 +267,26 @@ protected SimpleResult compareMetricValues(final Object value1, final Object val\n             if (value1 instanceof Number) {\n                 double numValue1 = ((Number) value1).doubleValue();\n                 double numValue2 = ((Number) value2).doubleValue();\n-                double relativeChange = (numValue1 == 0 && numValue2 == 0) ? 0 : (numValue1 == 0) ? Double.MAX_VALUE : (numValue1 - numValue2) / numValue2;\n-                if (relativeChange != 0) {\n+                double absoluteChange = 0;\n+                if (!Double.isNaN(numValue1) || !Double.isNaN(numValue2)) {\n+                    absoluteChange = numValue2 - numValue1;\n+                }\n+                if (absoluteChange != 0) {\n+                    double relativeChange = (numValue1 == 0 && numValue2 == 0) ? 0 : (numValue1 == 0) ? Double.MAX_VALUE : absoluteChange / numValue1;", "originalCommit": "5ed9f9f671fdfbb90261f80818e6ae13caf36e31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxMzI0Mg==", "url": "https://github.com/broadinstitute/picard/pull/1497#discussion_r407613242", "bodyText": "Yes, that's to avoid the divide by zero.\nI've changed the code to be comparison of the second metric, relative to the first metric, so that's why the denominator has changed.\nchange = (value2 - value1) / value1", "author": "gbggrant", "createdAt": "2020-04-13T17:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNDQ1Ng==", "url": "https://github.com/broadinstitute/picard/pull/1497#discussion_r407634456", "bodyText": "That explains the second numValue1 == 0 check. But I don't see how (numValue1 == 0 && numValue2 == 0) can be true if absoluteChange is not zero.", "author": "pshapiro4broad", "createdAt": "2020-04-13T18:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1OTM2MA==", "url": "https://github.com/broadinstitute/picard/pull/1497#discussion_r407659360", "bodyText": "Probably true, the problem with doing lots of incremental changes.", "author": "gbggrant", "createdAt": "2020-04-13T19:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NjUwMg==", "url": "https://github.com/broadinstitute/picard/pull/1497#discussion_r407666502", "bodyText": "And it's really not even a problem if the numerator is 0.", "author": "gbggrant", "createdAt": "2020-04-13T19:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "21b9ee87061372502d1f4d6cf5e438bad8a67737", "chunk": "diff --git a/src/main/java/picard/analysis/CompareMetrics.java b/src/main/java/picard/analysis/CompareMetrics.java\nindex 9b2022218..bfc4713d9 100644\n--- a/src/main/java/picard/analysis/CompareMetrics.java\n+++ b/src/main/java/picard/analysis/CompareMetrics.java\n\n@@ -272,7 +272,7 @@ public class CompareMetrics extends CommandLineProgram {\n                     absoluteChange = numValue2 - numValue1;\n                 }\n                 if (absoluteChange != 0) {\n-                    double relativeChange = (numValue1 == 0 && numValue2 == 0) ? 0 : (numValue1 == 0) ? Double.MAX_VALUE : absoluteChange / numValue1;\n+                    double relativeChange = numValue1 == 0 ? Double.MAX_VALUE : absoluteChange / numValue1;\n                     if (MetricToAllowableRelativeChange.containsKey(metricName)) {\n                         double allowableRelativeChange = MetricToAllowableRelativeChange.get(metricName);\n                         if (Math.abs(relativeChange) >= allowableRelativeChange) {\n"}}, {"oid": "21b9ee87061372502d1f4d6cf5e438bad8a67737", "url": "https://github.com/broadinstitute/picard/commit/21b9ee87061372502d1f4d6cf5e438bad8a67737", "message": "GL-970.\nHave CompareMetrics consider two NaN metrics equal\nAdded absolute difference", "committedDate": "2020-04-13T22:49:09Z", "type": "commit"}, {"oid": "21b9ee87061372502d1f4d6cf5e438bad8a67737", "url": "https://github.com/broadinstitute/picard/commit/21b9ee87061372502d1f4d6cf5e438bad8a67737", "message": "GL-970.\nHave CompareMetrics consider two NaN metrics equal\nAdded absolute difference", "committedDate": "2020-04-13T22:49:09Z", "type": "forcePushed"}]}