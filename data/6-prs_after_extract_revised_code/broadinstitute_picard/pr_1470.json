{"pr_number": 1470, "pr_title": "GL-853 Modify VcfToAdpc to handle multiple samples.", "pr_createdAt": "2020-02-16T21:08:47Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1470", "timeline": [{"oid": "a229b85c3370924cbb1c8988fceb88b00505ebba", "url": "https://github.com/broadinstitute/picard/commit/a229b85c3370924cbb1c8988fceb88b00505ebba", "message": "Modify VcfToAdpc to handle multiple samples.\nPut NaN in the adc.bin file if normalized intensity is null.\nOutput files containing number of samples and markers (useful for running VerifyIDIntensity itself).\nAdded tests", "committedDate": "2020-02-24T14:42:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NDM2OA==", "url": "https://github.com/broadinstitute/picard/pull/1470#discussion_r384054368", "bodyText": "Should this also check the NUM_MARKERS_FILE?", "author": "jessicaway", "createdAt": "2020-02-25T18:46:38Z", "path": "src/main/java/picard/arrays/VcfToAdpc.java", "diffHunk": "@@ -62,55 +68,85 @@\n                     \"An adpc.bin file is a binary file containing genotyping array intensity data that can be exported \" +\n                     \"by Illumina's GenomeStudio and Beadstudio analysis tools. The adpc.bin file is used as an input to \" +\n                     \"<a href='https://genome.sph.umich.edu/wiki/VerifyIDintensity'>VerifyIDintensity</a> a tool for \" +\n-                    \"detecting and estimating sample contamination of Illumina genotyping array data.\" +\n+                    \"detecting and estimating sample contamination of Illumina genotyping array data. \" +\n+                    \"If more than one VCF is used, they must all have the same number of loci.\" +\n                     \"<h4>Usage example:</h4>\" +\n                     \"<pre>\" +\n                     \"java -jar picard.jar VcfToAdpc \\\\<br />\" +\n                     \"      VCF=input.vcf \\\\<br />\" +\n-                    \"      OUTPUT=output.adpc.bin\" +\n+                    \"      OUTPUT=output.adpc.bin \\\\<br />\" +\n+                    \"      SAMPLES_FILE=output.samples.txt \\\\<br />\" +\n+                    \"      NUM_MARKERS_FILE=output.num_markers.txt \\\\<br />\" +\n                     \"</pre>\";\n \n \n     private final Log log = Log.getInstance(VcfToAdpc.class);\n \n-    @Argument(doc = \"The Input VCF\")\n-    public File VCF;\n+    @Argument(doc = \"One or more VCF files containing array intensity data.\")\n+    public List<File> VCF;\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output (adpc.bin) file to write.\")\n     public File OUTPUT;\n \n+    @Argument(shortName = \"SF\", doc = \"A text file into which the names of the samples will be written. \" +\n+            \"These will be in the same order as the data in the adpc.bin file.\")\n+    public File SAMPLES_FILE;\n+\n+    @Argument(shortName = \"NMF\", doc = \"A text file into which the number of loci in the VCF will be written. \" +\n+            \"This is useful for calling verifyIDIntensity.\")\n+    public File NUM_MARKERS_FILE;\n+\n     @Override\n     protected int doWork() {\n-        IOUtil.assertFileIsReadable(VCF);\n+        final List<File> inputs = IOUtil.unrollFiles(VCF, IOUtil.VCF_EXTENSIONS);\n+        IOUtil.assertFilesAreWritable(inputs);\n+        IOUtil.assertFileIsWritable(SAMPLES_FILE);", "originalCommit": "a229b85c3370924cbb1c8988fceb88b00505ebba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1OTcyMw==", "url": "https://github.com/broadinstitute/picard/pull/1470#discussion_r384059723", "bodyText": "Yes.", "author": "gbggrant", "createdAt": "2020-02-25T18:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NDM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "53834b374e21dd61dc3d54f9604ff7a1585af234", "chunk": "diff --git a/src/main/java/picard/arrays/VcfToAdpc.java b/src/main/java/picard/arrays/VcfToAdpc.java\nindex bc6ea772d..3fabb1a00 100644\n--- a/src/main/java/picard/arrays/VcfToAdpc.java\n+++ b/src/main/java/picard/arrays/VcfToAdpc.java\n\n@@ -99,8 +99,9 @@ public class VcfToAdpc extends CommandLineProgram {\n     @Override\n     protected int doWork() {\n         final List<File> inputs = IOUtil.unrollFiles(VCF, IOUtil.VCF_EXTENSIONS);\n-        IOUtil.assertFilesAreWritable(inputs);\n+        IOUtil.assertFilesAreReadable(inputs);\n         IOUtil.assertFileIsWritable(SAMPLES_FILE);\n+        IOUtil.assertFileIsWritable(NUM_MARKERS_FILE);\n         IOUtil.assertFileIsWritable(OUTPUT);\n         final List<String> sampleNames = new ArrayList<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NTE5Nw==", "url": "https://github.com/broadinstitute/picard/pull/1470#discussion_r384055197", "bodyText": "Do we need to check writeable? The previous check was for readable", "author": "jessicaway", "createdAt": "2020-02-25T18:47:59Z", "path": "src/main/java/picard/arrays/VcfToAdpc.java", "diffHunk": "@@ -62,55 +68,85 @@\n                     \"An adpc.bin file is a binary file containing genotyping array intensity data that can be exported \" +\n                     \"by Illumina's GenomeStudio and Beadstudio analysis tools. The adpc.bin file is used as an input to \" +\n                     \"<a href='https://genome.sph.umich.edu/wiki/VerifyIDintensity'>VerifyIDintensity</a> a tool for \" +\n-                    \"detecting and estimating sample contamination of Illumina genotyping array data.\" +\n+                    \"detecting and estimating sample contamination of Illumina genotyping array data. \" +\n+                    \"If more than one VCF is used, they must all have the same number of loci.\" +\n                     \"<h4>Usage example:</h4>\" +\n                     \"<pre>\" +\n                     \"java -jar picard.jar VcfToAdpc \\\\<br />\" +\n                     \"      VCF=input.vcf \\\\<br />\" +\n-                    \"      OUTPUT=output.adpc.bin\" +\n+                    \"      OUTPUT=output.adpc.bin \\\\<br />\" +\n+                    \"      SAMPLES_FILE=output.samples.txt \\\\<br />\" +\n+                    \"      NUM_MARKERS_FILE=output.num_markers.txt \\\\<br />\" +\n                     \"</pre>\";\n \n \n     private final Log log = Log.getInstance(VcfToAdpc.class);\n \n-    @Argument(doc = \"The Input VCF\")\n-    public File VCF;\n+    @Argument(doc = \"One or more VCF files containing array intensity data.\")\n+    public List<File> VCF;\n \n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output (adpc.bin) file to write.\")\n     public File OUTPUT;\n \n+    @Argument(shortName = \"SF\", doc = \"A text file into which the names of the samples will be written. \" +\n+            \"These will be in the same order as the data in the adpc.bin file.\")\n+    public File SAMPLES_FILE;\n+\n+    @Argument(shortName = \"NMF\", doc = \"A text file into which the number of loci in the VCF will be written. \" +\n+            \"This is useful for calling verifyIDIntensity.\")\n+    public File NUM_MARKERS_FILE;\n+\n     @Override\n     protected int doWork() {\n-        IOUtil.assertFileIsReadable(VCF);\n+        final List<File> inputs = IOUtil.unrollFiles(VCF, IOUtil.VCF_EXTENSIONS);\n+        IOUtil.assertFilesAreWritable(inputs);", "originalCommit": "a229b85c3370924cbb1c8988fceb88b00505ebba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1OTk5Nw==", "url": "https://github.com/broadinstitute/picard/pull/1470#discussion_r384059997", "bodyText": "Oof.  Yeah, just mistranscribed that.", "author": "gbggrant", "createdAt": "2020-02-25T18:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NTE5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "53834b374e21dd61dc3d54f9604ff7a1585af234", "chunk": "diff --git a/src/main/java/picard/arrays/VcfToAdpc.java b/src/main/java/picard/arrays/VcfToAdpc.java\nindex bc6ea772d..3fabb1a00 100644\n--- a/src/main/java/picard/arrays/VcfToAdpc.java\n+++ b/src/main/java/picard/arrays/VcfToAdpc.java\n\n@@ -99,8 +99,9 @@ public class VcfToAdpc extends CommandLineProgram {\n     @Override\n     protected int doWork() {\n         final List<File> inputs = IOUtil.unrollFiles(VCF, IOUtil.VCF_EXTENSIONS);\n-        IOUtil.assertFilesAreWritable(inputs);\n+        IOUtil.assertFilesAreReadable(inputs);\n         IOUtil.assertFileIsWritable(SAMPLES_FILE);\n+        IOUtil.assertFileIsWritable(NUM_MARKERS_FILE);\n         IOUtil.assertFileIsWritable(OUTPUT);\n         final List<String> sampleNames = new ArrayList<>();\n \n"}}, {"oid": "53834b374e21dd61dc3d54f9604ff7a1585af234", "url": "https://github.com/broadinstitute/picard/commit/53834b374e21dd61dc3d54f9604ff7a1585af234", "message": "Modify VcfToAdpc to handle multiple samples.\nPut NaN in the adc.bin file if normalized intensity is null.\nOutput files containing number of samples and markers (useful for running VerifyIDIntensity itself).\nAdded tests", "committedDate": "2020-02-26T16:18:49Z", "type": "commit"}, {"oid": "53834b374e21dd61dc3d54f9604ff7a1585af234", "url": "https://github.com/broadinstitute/picard/commit/53834b374e21dd61dc3d54f9604ff7a1585af234", "message": "Modify VcfToAdpc to handle multiple samples.\nPut NaN in the adc.bin file if normalized intensity is null.\nOutput files containing number of samples and markers (useful for running VerifyIDIntensity itself).\nAdded tests", "committedDate": "2020-02-26T16:18:49Z", "type": "forcePushed"}]}