{"pr_number": 1517, "pr_title": "GL-670 Generate BPM.CSV from BPM file", "pr_createdAt": "2020-05-27T15:03:40Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1517", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NDc2MA==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431384760", "bodyText": "final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    InfiniumEGTFile infiniumEGTFile;\n          \n          \n            \n                    final InfiniumEGTFile infiniumEGTFile;", "author": "jessicaway", "createdAt": "2020-05-27T19:16:41Z", "path": "src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package picard.arrays.illumina;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.BufferedWriter;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DecimalFormat;\n+import java.util.StringJoiner;\n+\n+/**\n+ * A simple program to convert an Illumina bpm (bead pool manifest file) into a normalization manifest (bpm.csv) file\n+ * The normalization manifest (bpm.csv) is a simple text file generated by Illumina tools - it has a specific format\n+ * and is used by ZCall .\n+ */\n+@CommandLineProgramProperties(\n+        summary = BpmToNormalizationManifestCsv.USAGE_DETAILS,\n+        oneLineSummary = \"Program to convert an Illumina bpm file into a bpm.csv file.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class BpmToNormalizationManifestCsv extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"BpmToNormalizationManifestCsv takes an Illumina BPM (Bead Pool Manifest) file and generates an Illumina-formatted bpm.csv file from it. \" +\n+                    \"A bpm.csv is a file that was generated by an old version of Illumina's Autocall software. \" +\n+                    \"Since it contained normalization IDs (needed to calculate normalized intensities), it came into use in several programs \" +\n+                    \"notably zCall (https://github.com/jigold/zCall).\" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar BpmToNormalizationManifestCsv \\\\<br />\" +\n+                    \"      INPUT=input.bpm \\\\<br />\" +\n+                    \"      CLUSTER_FILE=input.egt \\\\<br />\" +\n+                    \"      OUTPUT=output.bpm.csv\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"The Illumina Bead Pool Manifest (.bpm) file\")\n+    public File INPUT;\n+\n+    @Argument(shortName = \"CF\", doc = \"An Illumina cluster file (egt)\")\n+    public File CLUSTER_FILE;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output (bpm.csv) file to write.\")\n+    public File OUTPUT;\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(CLUSTER_FILE);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        InfiniumEGTFile infiniumEGTFile;", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java b/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\nindex ebdf66649..adaac5f33 100644\n--- a/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\n+++ b/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\n\n@@ -9,13 +9,9 @@ import picard.cmdline.CommandLineProgram;\n import picard.cmdline.StandardOptionDefinitions;\n \n import java.io.BufferedWriter;\n-import java.io.DataInputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.OutputStreamWriter;\n-import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.text.DecimalFormat;\n import java.util.StringJoiner;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NTIyNw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431385227", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    IlluminaBPMFile bpmFile;\n          \n          \n            \n                    final IlluminaBPMFile bpmFile;", "author": "jessicaway", "createdAt": "2020-05-27T19:17:15Z", "path": "src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package picard.arrays.illumina;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.BufferedWriter;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DecimalFormat;\n+import java.util.StringJoiner;\n+\n+/**\n+ * A simple program to convert an Illumina bpm (bead pool manifest file) into a normalization manifest (bpm.csv) file\n+ * The normalization manifest (bpm.csv) is a simple text file generated by Illumina tools - it has a specific format\n+ * and is used by ZCall .\n+ */\n+@CommandLineProgramProperties(\n+        summary = BpmToNormalizationManifestCsv.USAGE_DETAILS,\n+        oneLineSummary = \"Program to convert an Illumina bpm file into a bpm.csv file.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class BpmToNormalizationManifestCsv extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"BpmToNormalizationManifestCsv takes an Illumina BPM (Bead Pool Manifest) file and generates an Illumina-formatted bpm.csv file from it. \" +\n+                    \"A bpm.csv is a file that was generated by an old version of Illumina's Autocall software. \" +\n+                    \"Since it contained normalization IDs (needed to calculate normalized intensities), it came into use in several programs \" +\n+                    \"notably zCall (https://github.com/jigold/zCall).\" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar BpmToNormalizationManifestCsv \\\\<br />\" +\n+                    \"      INPUT=input.bpm \\\\<br />\" +\n+                    \"      CLUSTER_FILE=input.egt \\\\<br />\" +\n+                    \"      OUTPUT=output.bpm.csv\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"The Illumina Bead Pool Manifest (.bpm) file\")\n+    public File INPUT;\n+\n+    @Argument(shortName = \"CF\", doc = \"An Illumina cluster file (egt)\")\n+    public File CLUSTER_FILE;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output (bpm.csv) file to write.\")\n+    public File OUTPUT;\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(CLUSTER_FILE);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        InfiniumEGTFile infiniumEGTFile;\n+        try {\n+            infiniumEGTFile = new InfiniumEGTFile(CLUSTER_FILE);\n+        } catch (IOException e) {\n+            throw new PicardException(\"Error reading cluster file '\" + CLUSTER_FILE.getAbsolutePath() + \"'\", e);\n+        }\n+\n+        IlluminaBPMFile bpmFile;", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMDIxMg==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431430212", "bodyText": "done", "author": "gbggrant", "createdAt": "2020-05-27T20:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NTIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java b/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\nindex ebdf66649..adaac5f33 100644\n--- a/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\n+++ b/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\n\n@@ -9,13 +9,9 @@ import picard.cmdline.CommandLineProgram;\n import picard.cmdline.StandardOptionDefinitions;\n \n import java.io.BufferedWriter;\n-import java.io.DataInputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.OutputStreamWriter;\n-import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.text.DecimalFormat;\n import java.util.StringJoiner;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NjE4Ng==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431386186", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DecimalFormat df = new DecimalFormat((\"0.0000\"));\n          \n          \n            \n                    final DecimalFormat df = new DecimalFormat((\"0.0000\"));", "author": "jessicaway", "createdAt": "2020-05-27T19:18:05Z", "path": "src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package picard.arrays.illumina;\n+\n+import htsjdk.samtools.util.IOUtil;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import picard.PicardException;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+\n+import java.io.BufferedWriter;\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DecimalFormat;\n+import java.util.StringJoiner;\n+\n+/**\n+ * A simple program to convert an Illumina bpm (bead pool manifest file) into a normalization manifest (bpm.csv) file\n+ * The normalization manifest (bpm.csv) is a simple text file generated by Illumina tools - it has a specific format\n+ * and is used by ZCall .\n+ */\n+@CommandLineProgramProperties(\n+        summary = BpmToNormalizationManifestCsv.USAGE_DETAILS,\n+        oneLineSummary = \"Program to convert an Illumina bpm file into a bpm.csv file.\",\n+        programGroup = picard.cmdline.programgroups.GenotypingArraysProgramGroup.class\n+)\n+@DocumentedFeature\n+public class BpmToNormalizationManifestCsv extends CommandLineProgram {\n+    static final String USAGE_DETAILS =\n+            \"BpmToNormalizationManifestCsv takes an Illumina BPM (Bead Pool Manifest) file and generates an Illumina-formatted bpm.csv file from it. \" +\n+                    \"A bpm.csv is a file that was generated by an old version of Illumina's Autocall software. \" +\n+                    \"Since it contained normalization IDs (needed to calculate normalized intensities), it came into use in several programs \" +\n+                    \"notably zCall (https://github.com/jigold/zCall).\" +\n+                    \"<h4>Usage example:</h4>\" +\n+                    \"<pre>\" +\n+                    \"java -jar picard.jar BpmToNormalizationManifestCsv \\\\<br />\" +\n+                    \"      INPUT=input.bpm \\\\<br />\" +\n+                    \"      CLUSTER_FILE=input.egt \\\\<br />\" +\n+                    \"      OUTPUT=output.bpm.csv\" +\n+                    \"</pre>\";\n+\n+    @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME, doc = \"The Illumina Bead Pool Manifest (.bpm) file\")\n+    public File INPUT;\n+\n+    @Argument(shortName = \"CF\", doc = \"An Illumina cluster file (egt)\")\n+    public File CLUSTER_FILE;\n+\n+    @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME, doc = \"The output (bpm.csv) file to write.\")\n+    public File OUTPUT;\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(CLUSTER_FILE);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        InfiniumEGTFile infiniumEGTFile;\n+        try {\n+            infiniumEGTFile = new InfiniumEGTFile(CLUSTER_FILE);\n+        } catch (IOException e) {\n+            throw new PicardException(\"Error reading cluster file '\" + CLUSTER_FILE.getAbsolutePath() + \"'\", e);\n+        }\n+\n+        IlluminaBPMFile bpmFile;\n+        try (final DataInputStream inputStream = new DataInputStream(new FileInputStream(INPUT))) {\n+            bpmFile = new IlluminaBPMFile(inputStream);\n+        } catch (IOException e) {\n+            throw new PicardException(\"Error reading bpm file '\" + INPUT.getAbsolutePath() + \"'\", e);\n+        }\n+\n+        DecimalFormat df = new DecimalFormat((\"0.0000\"));", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java b/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\nindex ebdf66649..adaac5f33 100644\n--- a/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\n+++ b/src/main/java/picard/arrays/illumina/BpmToNormalizationManifestCsv.java\n\n@@ -9,13 +9,9 @@ import picard.cmdline.CommandLineProgram;\n import picard.cmdline.StandardOptionDefinitions;\n \n import java.io.BufferedWriter;\n-import java.io.DataInputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.OutputStreamWriter;\n-import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.text.DecimalFormat;\n import java.util.StringJoiner;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MDM5Ng==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431390396", "bodyText": "Is this necessary?", "author": "jessicaway", "createdAt": "2020-05-27T19:25:01Z", "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5MzkzMQ==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r433293931", "bodyText": "Nope - getting rid of it.", "author": "gbggrant", "createdAt": "2020-06-01T15:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\nindex 935a90fea..6cee427b5 100644\n--- a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n+++ b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n\n@@ -3,6 +3,8 @@ package picard.arrays.illumina;\n import picard.PicardException;\n \n import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.util.Set;\n import java.util.TreeSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MTE5Mw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431391193", "bodyText": "true", "author": "jessicaway", "createdAt": "2020-05-27T19:26:34Z", "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);\n+\n+        try {\n+            final byte[] formatIdentifier = new byte[BPM_IDENTIFIER.length()];\n+            for (int i = 0; i < formatIdentifier.length; i++) {\n+                formatIdentifier[i] = parseByte();\n+            }\n+\n+            final String identifier = new String(formatIdentifier);\n+            setIdentifier(identifier);\n+            if (!identifier.equals(BPM_IDENTIFIER)) {\n+                throw new PicardException(\"Invalid identifier '\" + identifier + \"' for BPM file\");\n+            }\n+            setFileVersion(parseByte());\n+            if (getFileVersion() != 1) {\n+                throw new PicardException(\"Unknown BPM version (\" + getFileVersion() + \")\");\n+            }\n+            int version = parseInt();\n+            final int versionFlag = 0x1000;\n+            if ((version & versionFlag) == versionFlag) {\n+                version ^= versionFlag;\n+            }\n+            if (version > 5 || version < 3) {\n+                throw new PicardException(\"Unsupported BPM version (\" + version + \")\");\n+            }\n+            manifestName = parseString();\n+            if (version > 1) {", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMTUwOQ==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431431509", "bodyText": "Thanks.", "author": "gbggrant", "createdAt": "2020-05-27T20:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MTE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDMwOA==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r433294308", "bodyText": "Done", "author": "gbggrant", "createdAt": "2020-06-01T15:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\nindex 935a90fea..6cee427b5 100644\n--- a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n+++ b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n\n@@ -3,6 +3,8 @@ package picard.arrays.illumina;\n import picard.PicardException;\n \n import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.util.Set;\n import java.util.TreeSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MzI3Ng==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431393276", "bodyText": "Could probably use a hashset here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<Integer> uniqueNormalizationIdsSet = new TreeSet<>();\n          \n          \n            \n                    final Set<Integer> uniqueNormalizationIdsSet = new HashSet<>();", "author": "jessicaway", "createdAt": "2020-05-27T19:30:19Z", "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);\n+\n+        try {\n+            final byte[] formatIdentifier = new byte[BPM_IDENTIFIER.length()];\n+            for (int i = 0; i < formatIdentifier.length; i++) {\n+                formatIdentifier[i] = parseByte();\n+            }\n+\n+            final String identifier = new String(formatIdentifier);\n+            setIdentifier(identifier);\n+            if (!identifier.equals(BPM_IDENTIFIER)) {\n+                throw new PicardException(\"Invalid identifier '\" + identifier + \"' for BPM file\");\n+            }\n+            setFileVersion(parseByte());\n+            if (getFileVersion() != 1) {\n+                throw new PicardException(\"Unknown BPM version (\" + getFileVersion() + \")\");\n+            }\n+            int version = parseInt();\n+            final int versionFlag = 0x1000;\n+            if ((version & versionFlag) == versionFlag) {\n+                version ^= versionFlag;\n+            }\n+            if (version > 5 || version < 3) {\n+                throw new PicardException(\"Unsupported BPM version (\" + version + \")\");\n+            }\n+            manifestName = parseString();\n+            if (version > 1) {\n+                controlConfig = parseString();\n+            }\n+            numLoci = parseInt();\n+\n+            readData();\n+        } finally {\n+            stream.close();\n+        }\n+    }\n+\n+    private void readData() throws IOException {\n+        // Skip the index block\n+        stream.skipBytes(4 * numLoci);\n+\n+        // Read the names\n+        String[] names = new String[numLoci];\n+        for (int i = 0; i < numLoci; i++) {\n+            names[i] = parseString();\n+        }\n+\n+        // Read the normalization ids.\n+        allNormalizationIds = parseByteArrayAsInts(numLoci);\n+        Set<Integer> uniqueNormalizationIdsSet = new TreeSet<>();", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\nindex 935a90fea..6cee427b5 100644\n--- a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n+++ b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n\n@@ -3,6 +3,8 @@ package picard.arrays.illumina;\n import picard.PicardException;\n \n import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.util.Set;\n import java.util.TreeSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NDE5Ng==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431394196", "bodyText": "may not need to initialize as null", "author": "jessicaway", "createdAt": "2020-05-27T19:31:59Z", "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);\n+\n+        try {\n+            final byte[] formatIdentifier = new byte[BPM_IDENTIFIER.length()];\n+            for (int i = 0; i < formatIdentifier.length; i++) {\n+                formatIdentifier[i] = parseByte();\n+            }\n+\n+            final String identifier = new String(formatIdentifier);\n+            setIdentifier(identifier);\n+            if (!identifier.equals(BPM_IDENTIFIER)) {\n+                throw new PicardException(\"Invalid identifier '\" + identifier + \"' for BPM file\");\n+            }\n+            setFileVersion(parseByte());\n+            if (getFileVersion() != 1) {\n+                throw new PicardException(\"Unknown BPM version (\" + getFileVersion() + \")\");\n+            }\n+            int version = parseInt();\n+            final int versionFlag = 0x1000;\n+            if ((version & versionFlag) == versionFlag) {\n+                version ^= versionFlag;\n+            }\n+            if (version > 5 || version < 3) {\n+                throw new PicardException(\"Unsupported BPM version (\" + version + \")\");\n+            }\n+            manifestName = parseString();\n+            if (version > 1) {\n+                controlConfig = parseString();\n+            }\n+            numLoci = parseInt();\n+\n+            readData();\n+        } finally {\n+            stream.close();\n+        }\n+    }\n+\n+    private void readData() throws IOException {\n+        // Skip the index block\n+        stream.skipBytes(4 * numLoci);\n+\n+        // Read the names\n+        String[] names = new String[numLoci];\n+        for (int i = 0; i < numLoci; i++) {\n+            names[i] = parseString();\n+        }\n+\n+        // Read the normalization ids.\n+        allNormalizationIds = parseByteArrayAsInts(numLoci);\n+        Set<Integer> uniqueNormalizationIdsSet = new TreeSet<>();\n+\n+        // Initialize the locus entries\n+        locusEntries = new IlluminaBPMLocusEntry[numLoci];\n+        for (int i = 0; i < numLoci; i++) {", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMjU4NQ==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431432585", "bodyText": "that is true.", "author": "gbggrant", "createdAt": "2020-05-27T20:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NDE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDUyNw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r433294527", "bodyText": "Done", "author": "gbggrant", "createdAt": "2020-06-01T15:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NDE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\nindex 935a90fea..6cee427b5 100644\n--- a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n+++ b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n\n@@ -3,6 +3,8 @@ package picard.arrays.illumina;\n import picard.PicardException;\n \n import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.util.Set;\n import java.util.TreeSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTA5Nw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431395097", "bodyText": "Consider refactoring into a separate method", "author": "jessicaway", "createdAt": "2020-05-27T19:33:41Z", "path": "src/main/java/picard/arrays/illumina/IlluminaBPMFile.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package picard.arrays.illumina;\n+\n+import picard.PicardException;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * A class to parse the contents of an Illumina Bead Pool Manifest (BPM) file\n+ *\n+ * A BPM file contains metadata (including the alleles, mapping and normalization information) on an Illumina Genotyping Array\n+ * Each type of genotyping array has a specific BPM .\n+ *\n+ */\n+public class IlluminaBPMFile extends InfiniumDataFile {\n+    private static final String BPM_IDENTIFIER = \"BPM\";\n+\n+    private String manifestName = null;\n+    private String controlConfig = null;\n+    private int numLoci = 0;\n+    private IlluminaBPMLocusEntry[] locusEntries = null;\n+\n+    private int[] allNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds = null;\n+\n+    public IlluminaBPMFile(DataInputStream stream) throws IOException {\n+        super(stream, true);\n+        parse();\n+    }\n+\n+    /**\n+     * Main parsing method.\n+     *\n+     * @throws IOException thrown when there is a problem reading the Bead Pool Manifest\n+     */\n+    private void parse() throws IOException {\n+\n+        stream.mark(0);\n+\n+        try {\n+            final byte[] formatIdentifier = new byte[BPM_IDENTIFIER.length()];\n+            for (int i = 0; i < formatIdentifier.length; i++) {\n+                formatIdentifier[i] = parseByte();\n+            }\n+\n+            final String identifier = new String(formatIdentifier);\n+            setIdentifier(identifier);\n+            if (!identifier.equals(BPM_IDENTIFIER)) {\n+                throw new PicardException(\"Invalid identifier '\" + identifier + \"' for BPM file\");\n+            }\n+            setFileVersion(parseByte());\n+            if (getFileVersion() != 1) {\n+                throw new PicardException(\"Unknown BPM version (\" + getFileVersion() + \")\");\n+            }\n+            int version = parseInt();\n+            final int versionFlag = 0x1000;\n+            if ((version & versionFlag) == versionFlag) {\n+                version ^= versionFlag;\n+            }\n+            if (version > 5 || version < 3) {\n+                throw new PicardException(\"Unsupported BPM version (\" + version + \")\");\n+            }\n+            manifestName = parseString();\n+            if (version > 1) {\n+                controlConfig = parseString();\n+            }\n+            numLoci = parseInt();\n+\n+            readData();\n+        } finally {\n+            stream.close();\n+        }\n+    }\n+\n+    private void readData() throws IOException {\n+        // Skip the index block\n+        stream.skipBytes(4 * numLoci);\n+\n+        // Read the names\n+        String[] names = new String[numLoci];\n+        for (int i = 0; i < numLoci; i++) {\n+            names[i] = parseString();\n+        }\n+\n+        // Read the normalization ids.\n+        allNormalizationIds = parseByteArrayAsInts(numLoci);\n+        Set<Integer> uniqueNormalizationIdsSet = new TreeSet<>();\n+\n+        // Initialize the locus entries\n+        locusEntries = new IlluminaBPMLocusEntry[numLoci];\n+        for (int i = 0; i < numLoci; i++) {\n+            locusEntries[i] = null;\n+        }\n+\n+        // Read the locus entries.\n+        for (int i = 0; i < numLoci; i++) {", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDEzMQ==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r433974131", "bodyText": "I've refactored it into a separate method.", "author": "gbggrant", "createdAt": "2020-06-02T15:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\nindex 935a90fea..6cee427b5 100644\n--- a/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n+++ b/src/main/java/picard/arrays/illumina/IlluminaBPMFile.java\n\n@@ -3,6 +3,8 @@ package picard.arrays.illumina;\n import picard.PicardException;\n \n import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.util.Set;\n import java.util.TreeSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5ODI4Nw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431398287", "bodyText": "Consider passing the InfiniumDataFile into the constructor and parsing there", "author": "jessicaway", "createdAt": "2020-05-27T19:39:51Z", "path": "src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package picard.arrays.illumina;\n+\n+/**\n+ * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n+ */\n+public class IlluminaBPMLocusEntry {", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDU5OA==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r433974598", "bodyText": "I'm going to hold off on that for now.  Maybe in another PR", "author": "gbggrant", "createdAt": "2020-06-02T15:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5ODI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java b/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\nindex f4a0aed27..a8d399b3d 100644\n--- a/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\n+++ b/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\n\n@@ -4,38 +4,70 @@ package picard.arrays.illumina;\n  * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n  */\n public class IlluminaBPMLocusEntry {\n-    String ilmnId;              // IlmnID (probe identifier) of locus\n-    String name;                // Name (variant identifier) of locus\n-    int index;                  // Index of this entry.\n-    String ilmnStrand;          // Illumina Strand value\n-    String snp;                 // SNP value for locus (e.g., [A/C])\n-    String chrom;               // Chromosome for the locus (e.g., XY)\n-    String ploidy;              // Ploidy\n+    // IlmnID (probe identifier) of locus\n+    String ilmnId;\n+\n+    // Name (variant identifier) of locus\n+    String name;\n+\n+    // Index of this entry.\n+    int index;\n+\n+    // Illumina Strand value\n+    String ilmnStrand;\n+\n+    // SNP value for locus (e.g., [A/C])\n+    String snp;\n+\n+    // Chromosome for the locus (e.g., XY)\n+    String chrom;\n+\n+    String ploidy;\n+\n     String species;\n-    int mapInfo;                // Mapping location of locus\n-    String customerStrand;      // Customer Strand\n-    int addressA;               // AddressA ID of locus\n-    String alleleAProbeSeq;     // CSV files or BPM files with version 4 data block\n-    int addressB;               // AddressB ID of locus (0 if none)\n-    String alleleBProbeSeq;     // CSV files or BPM files with version 4 data block (empty if none)\n+\n+    // Mapping location of locus\n+    int mapInfo;\n+\n+    // Customer Strand\n+    String customerStrand;\n+\n+    // AddressA ID of locus\n+    int addressA;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String alleleAProbeSeq;\n+\n+    // AddressB ID of locus (0 if none)\n+    int addressB;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block (empty if none)\n+    String alleleBProbeSeq;\n \n     String genomeBuild;\n     String source;\n     String sourceVersion;\n     String sourceStrand;\n-    String sourceSeq;           // CSV files or BPM files with version 4 data block\n-    String topGenomicSeq;       // CSV files or BPM files with version 4 data block\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String sourceSeq;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String topGenomicSeq;\n \n     int expClusters;\n     int intensityOnly;\n-    int assayType;              // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n+\n+   // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n+    int assayType;\n \n     float fracA;\n     float fracC;\n     float fracT;\n     float fracG;\n \n-    String refStrand;           // Refstrand annotation\n+    // Refstrand annotation\n+    String refStrand;\n \n     // Not part of the locusEntry record in the BPM, added here for convenience\n     int normalizationId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5ODgzNA==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431398834", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int assayType;              // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n          \n          \n            \n               // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n          \n          \n            \n                int assayType;", "author": "jessicaway", "createdAt": "2020-05-27T19:40:59Z", "path": "src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package picard.arrays.illumina;\n+\n+/**\n+ * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n+ */\n+public class IlluminaBPMLocusEntry {\n+    String ilmnId;              // IlmnID (probe identifier) of locus\n+    String name;                // Name (variant identifier) of locus\n+    int index;                  // Index of this entry.\n+    String ilmnStrand;          // Illumina Strand value\n+    String snp;                 // SNP value for locus (e.g., [A/C])\n+    String chrom;               // Chromosome for the locus (e.g., XY)\n+    String ploidy;              // Ploidy\n+    String species;\n+    int mapInfo;                // Mapping location of locus\n+    String customerStrand;      // Customer Strand\n+    int addressA;               // AddressA ID of locus\n+    String alleleAProbeSeq;     // CSV files or BPM files with version 4 data block\n+    int addressB;               // AddressB ID of locus (0 if none)\n+    String alleleBProbeSeq;     // CSV files or BPM files with version 4 data block (empty if none)\n+\n+    String genomeBuild;\n+    String source;\n+    String sourceVersion;\n+    String sourceStrand;\n+    String sourceSeq;           // CSV files or BPM files with version 4 data block\n+    String topGenomicSeq;       // CSV files or BPM files with version 4 data block\n+\n+    int expClusters;\n+    int intensityOnly;\n+    int assayType;              // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java b/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\nindex f4a0aed27..a8d399b3d 100644\n--- a/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\n+++ b/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\n\n@@ -4,38 +4,70 @@ package picard.arrays.illumina;\n  * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n  */\n public class IlluminaBPMLocusEntry {\n-    String ilmnId;              // IlmnID (probe identifier) of locus\n-    String name;                // Name (variant identifier) of locus\n-    int index;                  // Index of this entry.\n-    String ilmnStrand;          // Illumina Strand value\n-    String snp;                 // SNP value for locus (e.g., [A/C])\n-    String chrom;               // Chromosome for the locus (e.g., XY)\n-    String ploidy;              // Ploidy\n+    // IlmnID (probe identifier) of locus\n+    String ilmnId;\n+\n+    // Name (variant identifier) of locus\n+    String name;\n+\n+    // Index of this entry.\n+    int index;\n+\n+    // Illumina Strand value\n+    String ilmnStrand;\n+\n+    // SNP value for locus (e.g., [A/C])\n+    String snp;\n+\n+    // Chromosome for the locus (e.g., XY)\n+    String chrom;\n+\n+    String ploidy;\n+\n     String species;\n-    int mapInfo;                // Mapping location of locus\n-    String customerStrand;      // Customer Strand\n-    int addressA;               // AddressA ID of locus\n-    String alleleAProbeSeq;     // CSV files or BPM files with version 4 data block\n-    int addressB;               // AddressB ID of locus (0 if none)\n-    String alleleBProbeSeq;     // CSV files or BPM files with version 4 data block (empty if none)\n+\n+    // Mapping location of locus\n+    int mapInfo;\n+\n+    // Customer Strand\n+    String customerStrand;\n+\n+    // AddressA ID of locus\n+    int addressA;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String alleleAProbeSeq;\n+\n+    // AddressB ID of locus (0 if none)\n+    int addressB;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block (empty if none)\n+    String alleleBProbeSeq;\n \n     String genomeBuild;\n     String source;\n     String sourceVersion;\n     String sourceStrand;\n-    String sourceSeq;           // CSV files or BPM files with version 4 data block\n-    String topGenomicSeq;       // CSV files or BPM files with version 4 data block\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String sourceSeq;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String topGenomicSeq;\n \n     int expClusters;\n     int intensityOnly;\n-    int assayType;              // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n+\n+   // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n+    int assayType;\n \n     float fracA;\n     float fracC;\n     float fracT;\n     float fracG;\n \n-    String refStrand;           // Refstrand annotation\n+    // Refstrand annotation\n+    String refStrand;\n \n     // Not part of the locusEntry record in the BPM, added here for convenience\n     int normalizationId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwMTk3MQ==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431401971", "bodyText": "parseBoolean() ?", "author": "jessicaway", "createdAt": "2020-05-27T19:47:04Z", "path": "src/main/java/picard/arrays/illumina/InfiniumEGTFile.java", "diffHunk": "@@ -151,16 +157,11 @@ private void parseFloats(float[] array) throws IOException {\n \n     private void readHeaderData() throws IOException {\n         setFileVersion(parseInt());\n-        // skip gcVersion\n-        skipString();\n-        // skip clusterVersion\n-        skipString();\n-        // skip callVersion\n-        skipString();\n-        // skip normalizationVersion\n-        skipString();\n-        // skip dataCreated\n-        skipString();\n+        gencallVersion = parseString();\n+        clusterVersion = parseString();\n+        callVersion = parseString();\n+        normalizationVersion = parseString();\n+        dateCreated = parseString();\n         // skip isWGT\n         skipBoolean();", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzNDYxOA==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431434618", "bodyText": "yup", "author": "gbggrant", "createdAt": "2020-05-27T20:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwMTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/InfiniumEGTFile.java b/src/main/java/picard/arrays/illumina/InfiniumEGTFile.java\nindex 311719bd4..7c792e154 100644\n--- a/src/main/java/picard/arrays/illumina/InfiniumEGTFile.java\n+++ b/src/main/java/picard/arrays/illumina/InfiniumEGTFile.java\n\n@@ -162,12 +163,15 @@ public class InfiniumEGTFile extends InfiniumDataFile implements AutoCloseable {\n         callVersion = parseString();\n         normalizationVersion = parseString();\n         dateCreated = parseString();\n-        // skip isWGT\n-        skipBoolean();\n+        isWGT = parseByte() != '\\0';\n \n         if (getFileVersion() == INVALID_FILE_VERSION) {\n             throw new IOException(\"Version '\" + INVALID_FILE_VERSION + \"' unsupported\");\n         }\n         manifestName = parseString();\n     }\n+\n+    public String getManifestName() {\n+        return manifestName;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwMjYxNw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431402617", "bodyText": "null is default", "author": "jessicaway", "createdAt": "2020-05-27T19:48:13Z", "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -82,7 +84,10 @@\n     public static final byte AB_CALL = 2;\n     public static final byte BB_CALL = 3;\n \n-    private final InfiniumNormalizationManifest normalizationManifest;\n+    // Normalization Ids as pulled from the BPM file\n+    private int[] allNormalizationIds = null;", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzODk3Mg==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431438972", "bodyText": "Yup", "author": "gbggrant", "createdAt": "2020-05-27T21:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwMjYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\nindex b59e9d93e..8a331e22f 100644\n--- a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n+++ b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n\n@@ -85,12 +86,13 @@ public class InfiniumGTCFile extends InfiniumDataFile implements AutoCloseable {\n     public static final byte BB_CALL = 3;\n \n     // Normalization Ids as pulled from the BPM file\n-    private int[] allNormalizationIds = null;\n+    private int[] allNormalizationIds;\n \n-    private Integer[] uniqueNormalizationIds = null;\n+    private Integer[] uniqueNormalizationIds;\n \n     private int numberOfSnps;\n     private int ploidy;\n+\n     // 1 = Diploid, 2 = Autopolyploid, 3 = Allopolyploid\n     private int ploidyType;\n     private String sampleName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTExNw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431405117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        illuminaBPMFile = new IlluminaBPMFile(inputStream);\n          \n          \n            \n                        illuminaBPMFile = new IlluminaBPMFile(bpmFile);\n          \n      \n    \n    \n  \n\nAnd make IlluminaBPMFile autocloseable", "author": "jessicaway", "createdAt": "2020-05-27T19:53:15Z", "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -163,12 +169,17 @@ public void close() throws IOException {\n         stream.close();\n     }\n \n-    InfiniumGTCFile(final DataInputStream gtcStream) throws IOException {\n-        super(gtcStream, true);\n-        this.normalizationManifest = null;\n-        parse();\n-    }\n+    private void loadNormalizationIds(final File bpmFile) {\n+        IlluminaBPMFile illuminaBPMFile;\n+        try (final DataInputStream inputStream = new DataInputStream(new FileInputStream(bpmFile))) {\n+            illuminaBPMFile = new IlluminaBPMFile(inputStream);", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MjI5Nw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431442297", "bodyText": "yup", "author": "gbggrant", "createdAt": "2020-05-27T21:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTExNw=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\nindex b59e9d93e..8a331e22f 100644\n--- a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n+++ b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n\n@@ -170,9 +172,7 @@ public class InfiniumGTCFile extends InfiniumDataFile implements AutoCloseable {\n     }\n \n     private void loadNormalizationIds(final File bpmFile) {\n-        IlluminaBPMFile illuminaBPMFile;\n-        try (final DataInputStream inputStream = new DataInputStream(new FileInputStream(bpmFile))) {\n-            illuminaBPMFile = new IlluminaBPMFile(inputStream);\n+        try (IlluminaBPMFile illuminaBPMFile = new IlluminaBPMFile(bpmFile)) {\n             allNormalizationIds = illuminaBPMFile.getAllNormalizationIds();\n             uniqueNormalizationIds = illuminaBPMFile.getUniqueNormalizationIds();\n         } catch (IOException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjExNQ==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431406115", "bodyText": "always true", "author": "jessicaway", "createdAt": "2020-05-27T19:55:13Z", "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -221,7 +232,7 @@ private void parse() throws IOException {\n             stream.close();\n         }\n \n-        if ((normalizationManifest != null) && (normalizationManifest.getNormIds() != null)) {\n+        if (allNormalizationIds != null) {", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDgwNQ==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r433294805", "bodyText": "Done", "author": "gbggrant", "createdAt": "2020-06-01T15:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\nindex b59e9d93e..8a331e22f 100644\n--- a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n+++ b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n\n@@ -232,9 +232,7 @@ public class InfiniumGTCFile extends InfiniumDataFile implements AutoCloseable {\n             stream.close();\n         }\n \n-        if (allNormalizationIds != null) {\n-            normalizeIntensities();\n-        }\n+        normalizeIntensities();\n     }\n \n     private void normalizeIntensities() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjUzMw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431406533", "bodyText": "simplify\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if ((allNormalizationIds != null) && (allNormalizationIds.length > i)) {\n          \n          \n            \n                        if (allNormalizationIds.length > i) {", "author": "jessicaway", "createdAt": "2020-05-27T19:56:01Z", "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -230,15 +241,14 @@ private void normalizeIntensities() {\n         normalizedXIntensities = new float[numberOfSnps];\n         normalizedYIntensities = new float[numberOfSnps];\n \n-        final int[] normIds = normalizationManifest.getNormIds();\n         for (int i = 0; i < rawXIntensities.length; i++) {\n             final int rawX = rawXIntensities[i];\n             final int rawY = rawYIntensities[i];\n \n             final int normId;\n             int normIndex = -1;\n-            if ((normIds != null) && (normIds.length > i)) {\n-                normId = normIds[i];\n+            if ((allNormalizationIds != null) && (allNormalizationIds.length > i)) {", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDk1Mw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r433294953", "bodyText": "Done.", "author": "gbggrant", "createdAt": "2020-06-01T15:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\nindex b59e9d93e..8a331e22f 100644\n--- a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n+++ b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n\n@@ -232,9 +232,7 @@ public class InfiniumGTCFile extends InfiniumDataFile implements AutoCloseable {\n             stream.close();\n         }\n \n-        if (allNormalizationIds != null) {\n-            normalizeIntensities();\n-        }\n+        normalizeIntensities();\n     }\n \n     private void normalizeIntensities() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjk1Nw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r431406957", "bodyText": "always true", "author": "jessicaway", "createdAt": "2020-05-27T19:56:55Z", "path": "src/main/java/picard/arrays/illumina/InfiniumGTCFile.java", "diffHunk": "@@ -495,7 +505,7 @@ private void parseTransformations(final InfiniumFileTOC toc) throws IOException\n     }\n \n     private void normalizeAndCalculateStatistics() {\n-        if (normalizationManifest.getNormIds() != null) {\n+        if (allNormalizationIds != null) {", "originalCommit": "1ed3c8120d44ef9e0f14005a748fcc2ea2879259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NTgyNw==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r433295827", "bodyText": "Done", "author": "gbggrant", "createdAt": "2020-06-01T15:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\nindex b59e9d93e..8a331e22f 100644\n--- a/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n+++ b/src/main/java/picard/arrays/illumina/InfiniumGTCFile.java\n\n@@ -505,9 +503,7 @@ public class InfiniumGTCFile extends InfiniumDataFile implements AutoCloseable {\n     }\n \n     private void normalizeAndCalculateStatistics() {\n-        if (allNormalizationIds != null) {\n-            normalizeIntensities();\n-        }\n+        normalizeIntensities();\n         calculateStatistics();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1Nzk3OQ==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r434157979", "bodyText": "generally prefer comments on separate lines", "author": "jessicaway", "createdAt": "2020-06-02T20:31:25Z", "path": "src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package picard.arrays.illumina;\n+\n+/**\n+ * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n+ */\n+public class IlluminaBPMLocusEntry {\n+    String ilmnId;              // IlmnID (probe identifier) of locus", "originalCommit": "c1ebffd5845faa4b06c146ae99aa90a4699bf63b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTY4OA==", "url": "https://github.com/broadinstitute/picard/pull/1517#discussion_r434189688", "bodyText": "Thanks.  Forgot to get them all", "author": "gbggrant", "createdAt": "2020-06-02T21:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1Nzk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "chunk": "diff --git a/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java b/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\nindex 5047411de..a8d399b3d 100644\n--- a/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\n+++ b/src/main/java/picard/arrays/illumina/IlluminaBPMLocusEntry.java\n\n@@ -4,30 +4,60 @@ package picard.arrays.illumina;\n  * A simple class to represent a locus entry in an Illumina Bead Pool Manifest (BPM) file\n  */\n public class IlluminaBPMLocusEntry {\n-    String ilmnId;              // IlmnID (probe identifier) of locus\n-    String name;                // Name (variant identifier) of locus\n-    int index;                  // Index of this entry.\n-    String ilmnStrand;          // Illumina Strand value\n-    String snp;                 // SNP value for locus (e.g., [A/C])\n-    String chrom;               // Chromosome for the locus (e.g., XY)\n-    String ploidy;              // Ploidy\n+    // IlmnID (probe identifier) of locus\n+    String ilmnId;\n+\n+    // Name (variant identifier) of locus\n+    String name;\n+\n+    // Index of this entry.\n+    int index;\n+\n+    // Illumina Strand value\n+    String ilmnStrand;\n+\n+    // SNP value for locus (e.g., [A/C])\n+    String snp;\n+\n+    // Chromosome for the locus (e.g., XY)\n+    String chrom;\n+\n+    String ploidy;\n+\n     String species;\n-    int mapInfo;                // Mapping location of locus\n-    String customerStrand;      // Customer Strand\n-    int addressA;               // AddressA ID of locus\n-    String alleleAProbeSeq;     // CSV files or BPM files with version 4 data block\n-    int addressB;               // AddressB ID of locus (0 if none)\n-    String alleleBProbeSeq;     // CSV files or BPM files with version 4 data block (empty if none)\n+\n+    // Mapping location of locus\n+    int mapInfo;\n+\n+    // Customer Strand\n+    String customerStrand;\n+\n+    // AddressA ID of locus\n+    int addressA;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String alleleAProbeSeq;\n+\n+    // AddressB ID of locus (0 if none)\n+    int addressB;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block (empty if none)\n+    String alleleBProbeSeq;\n \n     String genomeBuild;\n     String source;\n     String sourceVersion;\n     String sourceStrand;\n-    String sourceSeq;           // CSV files or BPM files with version 4 data block\n-    String topGenomicSeq;       // CSV files or BPM files with version 4 data block\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String sourceSeq;\n+\n+    // Only populated in CSV files or BPM files with version 4 data block\n+    String topGenomicSeq;\n \n     int expClusters;\n     int intensityOnly;\n+\n    // Identifies type of assay (0 - Infinium II , 1 - Infinium I (A/T), 2 - Infinium I (G/C)\n     int assayType;\n \n"}}, {"oid": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "url": "https://github.com/broadinstitute/picard/commit/16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "message": "GtcFile now uses bpm rather than bpm.csv\nHave CompareGtcFiles use IlluminaBPMFile\nPass the actual bpm file to the IlluminaBPMFile constructor - no longer pass in DataInputStream.", "committedDate": "2020-06-02T21:41:44Z", "type": "commit"}, {"oid": "16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "url": "https://github.com/broadinstitute/picard/commit/16c5e8d37d0b5f2b9fe80bd71211e5d44460f649", "message": "GtcFile now uses bpm rather than bpm.csv\nHave CompareGtcFiles use IlluminaBPMFile\nPass the actual bpm file to the IlluminaBPMFile constructor - no longer pass in DataInputStream.", "committedDate": "2020-06-02T21:41:44Z", "type": "forcePushed"}]}