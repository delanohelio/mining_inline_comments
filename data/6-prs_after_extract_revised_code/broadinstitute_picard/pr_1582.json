{"pr_number": 1582, "pr_title": "Support standard input in `IntervalListTools`", "pr_createdAt": "2020-09-24T20:31:22Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1582", "timeline": [{"oid": "dc7bd0ec388edb061e70a1c4dc96d9053396709e", "url": "https://github.com/broadinstitute/picard/commit/dc7bd0ec388edb061e70a1c4dc96d9053396709e", "message": "first", "committedDate": "2020-09-24T20:27:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwNDc0Nw==", "url": "https://github.com/broadinstitute/picard/pull/1582#discussion_r494604747", "bodyText": "Do you want a unit test to cover this?", "author": "nh13", "createdAt": "2020-09-24T20:54:42Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -596,7 +596,8 @@ static IntervalListInputType forFile(final File intervalListExtractable) {\n                     }\n                 }\n             }\n-            throw new SAMException(\"Cannot figure out type of file \" + intervalListExtractable.getAbsolutePath() + \" from extension. Current implementation understands the following types: \" + Arrays.toString(IntervalListInputType.values()));", "originalCommit": "dc7bd0ec388edb061e70a1c4dc96d9053396709e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "74406f6588ff0b7ec5e7efaf3b275e2a2deab425", "url": "https://github.com/broadinstitute/picard/commit/74406f6588ff0b7ec5e7efaf3b275e2a2deab425", "message": "testing", "committedDate": "2020-09-25T18:10:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NDM5Mg==", "url": "https://github.com/broadinstitute/picard/pull/1582#discussion_r495164392", "bodyText": "Since this test is essentially identical to the one above, it would be better to modify the @dataProvider so that it creates objects of the form {IntervalListTools.Action, File}, and provide the input file as a second argument to testAllActions", "author": "yfarjoun", "createdAt": "2020-09-25T18:34:11Z", "path": "src/test/java/picard/util/IntervalListToolsTest.java", "diffHunk": "@@ -115,6 +116,25 @@ public void testAllActions(final IntervalListTools.Action action) throws IOExcep\n         Assert.assertEquals(runPicardCommandLine(args), 0);\n     }\n \n+    // test that all actions work for standard input, but not test output at all.\n+    @Test(dataProvider = \"ActionsTest\")", "originalCommit": "74406f6588ff0b7ec5e7efaf3b275e2a2deab425", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "364146a233671212bf0859181bd69f7efaef93e7", "chunk": "diff --git a/src/test/java/picard/util/IntervalListToolsTest.java b/src/test/java/picard/util/IntervalListToolsTest.java\nindex da80f4b26..450f0deb6 100644\n--- a/src/test/java/picard/util/IntervalListToolsTest.java\n+++ b/src/test/java/picard/util/IntervalListToolsTest.java\n\n@@ -94,38 +95,21 @@ public class IntervalListToolsTest extends CommandLineProgramTest {\n \n     @DataProvider\n     public Iterator<Object[]> ActionsTest() {\n-        return Arrays.stream(IntervalListTools.Action.values()).map(a -> new Object[]{a}).iterator();\n+        final Stream stream1 = Arrays.stream(IntervalListTools.Action.values()).map(a -> new Object[]{a, scatterable});\n+        final Stream stream2 = Arrays.stream(IntervalListTools.Action.values()).map(a -> new Object[]{a, scatterableStdin});\n+        return Stream.concat(stream1, stream2).iterator();\n     }\n \n     // test that all actions work. but not test output at all.\n     @Test(dataProvider = \"ActionsTest\")\n-    public void testAllActions(final IntervalListTools.Action action) throws IOException {\n+    public void testAllActions(final IntervalListTools.Action action, final File file) throws IOException {\n         final File ilOut = File.createTempFile(\"IntervalListTools\", \"interval_list\");\n         ilOut.deleteOnExit();\n \n         final List<String> args = new ArrayList<>();\n \n         args.add(\"ACTION=\" + action.toString());\n-        args.add(\"INPUT=\" + scatterable);\n-\n-        if (action.takesSecondInput) {\n-            args.add(\"SECOND_INPUT=\" + secondInput);\n-        }\n-        args.add(\"OUTPUT=\" + ilOut);\n-\n-        Assert.assertEquals(runPicardCommandLine(args), 0);\n-    }\n-\n-    // test that all actions work for standard input, but not test output at all.\n-    @Test(dataProvider = \"ActionsTest\")\n-    public void testAllActionsStandardInput(final IntervalListTools.Action action) throws IOException {\n-        final File ilOut = File.createTempFile(\"IntervalListTools\", \"interval_list\");\n-        ilOut.deleteOnExit();\n-\n-        final List<String> args = new ArrayList<>();\n-\n-        args.add(\"ACTION=\" + action.toString());\n-        args.add(\"INPUT=\" + scatterableStdin);\n+        args.add(\"INPUT=\" + file);\n \n         if (action.takesSecondInput) {\n             args.add(\"SECOND_INPUT=\" + secondInput);\n"}}, {"oid": "6c76b07ae9d84e78b1160a2a3cafaf4ba6069623", "url": "https://github.com/broadinstitute/picard/commit/6c76b07ae9d84e78b1160a2a3cafaf4ba6069623", "message": "testing-fix", "committedDate": "2020-09-28T15:15:06Z", "type": "commit"}, {"oid": "364146a233671212bf0859181bd69f7efaef93e7", "url": "https://github.com/broadinstitute/picard/commit/364146a233671212bf0859181bd69f7efaef93e7", "message": "delete-extra-test", "committedDate": "2020-09-28T15:16:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMzAwNg==", "url": "https://github.com/broadinstitute/picard/pull/1582#discussion_r497003006", "bodyText": "How about specifically noting that for standard input one should write /dev/stdin as the input file?", "author": "yfarjoun", "createdAt": "2020-09-29T19:48:47Z", "path": "src/main/java/picard/util/IntervalListTools.java", "diffHunk": "@@ -237,7 +237,8 @@\n \n     @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME,\n             doc = \"One or more interval lists. If multiple interval lists are provided the output is the\" +\n-                    \"result of merging the inputs. Supported formats are interval_list and VCF.\", minElements = 1)\n+                    \"result of merging the inputs. Supported formats are interval_list and VCF.\" +\n+                    \"If file extension is unrecognized, assumes file is interval_list\", minElements = 1)", "originalCommit": "364146a233671212bf0859181bd69f7efaef93e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d964099032e90e61f07072145c45d88196ec42b9", "chunk": "diff --git a/src/main/java/picard/util/IntervalListTools.java b/src/main/java/picard/util/IntervalListTools.java\nindex 89c9ab66c..dbd90ceb2 100644\n--- a/src/main/java/picard/util/IntervalListTools.java\n+++ b/src/main/java/picard/util/IntervalListTools.java\n\n@@ -238,7 +238,8 @@ public class IntervalListTools extends CommandLineProgram {\n     @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME,\n             doc = \"One or more interval lists. If multiple interval lists are provided the output is the\" +\n                     \"result of merging the inputs. Supported formats are interval_list and VCF.\" +\n-                    \"If file extension is unrecognized, assumes file is interval_list\", minElements = 1)\n+                    \"If file extension is unrecognized, assumes file is interval_list\" +\n+                    \"For standard input (stdin), write /dev/stdin as the input file\", minElements = 1)\n     public List<File> INPUT;\n \n     @Argument(doc = \"The output interval list file to write (if SCATTER_COUNT == 1) or the directory into which \" +\n"}}, {"oid": "d964099032e90e61f07072145c45d88196ec42b9", "url": "https://github.com/broadinstitute/picard/commit/d964099032e90e61f07072145c45d88196ec42b9", "message": "update-doc", "committedDate": "2020-09-29T20:28:44Z", "type": "commit"}]}