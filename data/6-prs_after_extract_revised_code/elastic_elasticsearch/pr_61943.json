{"pr_number": 61943, "pr_title": "[ML] Add incremental id during data frame analytics reindexing", "pr_createdAt": "2020-09-03T17:31:10Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61943", "timeline": [{"oid": "5d1d2af110a449a3c888d6c3df1496f438b81665", "url": "https://github.com/elastic/elasticsearch/commit/5d1d2af110a449a3c888d6c3df1496f438b81665", "message": "[ML] Add incremental id during data frame analytics reindexing\n\nPreviously, we added a copy of the `_id` during reindexing and sorted\nthe destination index on that. This allowed us to traverse the docs in the\ndestination index in a stable order multiple times and with efficiency.\nHowever, the destination index being sorted means we cannot have `nested`\ntyped fields. This is a problem as it does not allow us to provide\na good experience with our evaluate API when it comes to computing\nmetrics for specific classes, features, etc.\n\nThis commit changes the approach in order to result to a destination\nindex that allows nested fields.\n\nInstead of adding a copy of the `_id` field, we now add an incremental\nid that we can use to traverse the docs in a stable order. We also\nensure we always assign the same incremental id to the same doc from\nthe source indices by sorting on `_seq_no` during reindexing. That\nin combination with the reindexing API using scroll gives us a stable\norder as scroll uses the (`_index`, `_doc`, shard_id) tuple to resolve ties.\n\nThe extractor now does not need to scroll. Instead we sort on the incremental\nid and we do ranged searches to avoid the sort-all-docs overhead.\n\nFinally, the `TestDocsIterator` is simply changed to search_after the incremental id.\n\nWith these changes data frame analytics jobs do not use scroll at any part.\n\nHaving all these in place, the commit adds the `nested` types to the necessary\nfields of `classification` and `regression` analyses results.", "committedDate": "2020-09-03T17:23:18Z", "type": "commit"}, {"oid": "88b2b43aade2579f50f31e6fadad8d5e86651a00", "url": "https://github.com/elastic/elasticsearch/commit/88b2b43aade2579f50f31e6fadad8d5e86651a00", "message": "Move classification/regression feature importance mappings to respective classes", "committedDate": "2020-09-03T17:51:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjYwMg==", "url": "https://github.com/elastic/elasticsearch/pull/61943#discussion_r483146602", "bodyText": "This is a tad nuanced. Could you add a comment here explaining the indirection for object reference reuse in the script parameters?", "author": "benwtrent", "createdAt": "2020-09-03T17:37:05Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java", "diffHunk": "@@ -263,11 +268,25 @@ private void reindexDataframeAndStartAnalysis(DataFrameAnalyticsTask task, DataF\n                 reindexRequest.setRefresh(true);\n                 reindexRequest.setSourceIndices(config.getSource().getIndex());\n                 reindexRequest.setSourceQuery(config.getSource().getParsedQuery());\n+                reindexRequest.getSearchRequest().allowPartialSearchResults(false);\n                 reindexRequest.getSearchRequest().source().fetchSource(config.getSource().getSourceFiltering());\n+                reindexRequest.getSearchRequest().source().sort(SeqNoFieldMapper.NAME, SortOrder.ASC);\n                 reindexRequest.setDestIndex(config.getDest().getIndex());\n-                reindexRequest.setScript(new Script(\"ctx._source.\" + DestinationIndex.ID_COPY + \" = ctx._id\"));\n+\n+                // We explicitly set slices to 1 as we cannot parallelize in order to have the incremental id\n+                reindexRequest.setSlices(1);\n+                Map<String, Object> counterValueParam = new HashMap<>();\n+                counterValueParam.put(\"value\", -1);\n+                reindexRequest.setScript(", "originalCommit": "5d1d2af110a449a3c888d6c3df1496f438b81665", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1NTAyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61943#discussion_r483155029", "bodyText": "Ah, yes, of course!", "author": "dimitris-athanasiou", "createdAt": "2020-09-03T17:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "6e42303235c0c0af332d5935f2163b035aac9854", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java\nindex 05af9ffe89a..aa84fda1f70 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/DataFrameAnalyticsManager.java\n\n@@ -281,6 +281,8 @@ public class DataFrameAnalyticsManager {\n                     new Script(\n                         Script.DEFAULT_SCRIPT_TYPE,\n                         Script.DEFAULT_SCRIPT_LANG,\n+                        // We use indirection here because top level params are immutable.\n+                        // This is a work around at the moment but the plan is to make this a feature of reindex API.\n                         \"ctx._source.\" + DestinationIndex.INCREMENTAL_ID + \" = ++params.counter.value\",\n                         Collections.singletonMap(\"counter\", counterValueParam)\n                     )\n"}}, {"oid": "6e42303235c0c0af332d5935f2163b035aac9854", "url": "https://github.com/elastic/elasticsearch/commit/6e42303235c0c0af332d5935f2163b035aac9854", "message": "Add comment on indirection", "committedDate": "2020-09-03T17:53:48Z", "type": "commit"}, {"oid": "a794ccad75e8fe5ea370803459ed421a19cbfe63", "url": "https://github.com/elastic/elasticsearch/commit/a794ccad75e8fe5ea370803459ed421a19cbfe63", "message": "Merge branch 'master' into add-incremental-id-during-dfa-reindexing", "committedDate": "2020-09-03T17:54:16Z", "type": "commit"}]}