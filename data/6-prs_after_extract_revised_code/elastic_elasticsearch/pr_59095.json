{"pr_number": 59095, "pr_title": "Data stream admin actions are now index-level actions", "pr_createdAt": "2020-07-06T19:16:20Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59095", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTk3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/59095#discussion_r450535979", "bodyText": "This is a significant change to the behavior of the delete data stream request when a specified data stream is not present, but without this change, lots of tests running with security enabled fail because security resolves wildcard patterns to individual names including indices and those incorrectly trigger this ResourceNotFoundException error.", "author": "danhermann", "createdAt": "2020-07-06T23:48:45Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/DeleteDataStreamAction.java", "diffHunk": "@@ -176,16 +200,6 @@ static ClusterState removeDataStream(MetadataDeleteIndexService deleteIndexServi\n                 snapshottingDataStreams.addAll(SnapshotsService.snapshottingDataStreams(currentState, dataStreams));\n             }\n \n-            if (dataStreams.isEmpty()) {\n-                // if only a match-all pattern was specified and no data streams were found because none exist, do not\n-                // fail with data stream missing exception\n-                if (request.names.length == 1 && Regex.isMatchAllPattern(request.names[0])) {\n-                    return currentState;\n-                }\n-                throw new ResourceNotFoundException(\"data_streams matching [\" + Strings.arrayToCommaDelimitedString(request.names) +\n-                    \"] not found\");\n-            }\n-", "originalCommit": "ac9109e256432c35899c37026dcb201aa839f821", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5NjkzNw==", "url": "https://github.com/elastic/elasticsearch/pull/59095#discussion_r450696937", "bodyText": "I also don't see a way around this.", "author": "martijnvg", "createdAt": "2020-07-07T08:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTk3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5ODAxNA==", "url": "https://github.com/elastic/elasticsearch/pull/59095#discussion_r450698014", "bodyText": "at least this hack is removed :)", "author": "martijnvg", "createdAt": "2020-07-07T08:33:05Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/ClusterPrivilegeResolver.java", "diffHunk": "@@ -201,8 +201,6 @@ public static NamedClusterPrivilege resolve(String name) {\n     public static boolean isClusterAction(String actionName) {\n         return actionName.startsWith(\"cluster:\") ||\n             actionName.startsWith(\"indices:admin/template/\") ||\n-            // todo: hack until we implement security of data_streams\n-            actionName.startsWith(\"indices:admin/data_stream/\") ||", "originalCommit": "ac9109e256432c35899c37026dcb201aa839f821", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMzA5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59095#discussion_r450713095", "bodyText": "I think the wildcard logic is incorrect here with security enabled? This test fails: org.elasticsearch.xpack.security.CoreWithSecurityClientYamlTestSuiteIT > test {yaml=indices.data_stream/10_basic/Get data stream}\nIn this case there are no matching resources, so the expression gets rewritten to: *,-*. With this logic here,\nthis means that all data streams get included, because there is no logic that removes data streams if -* is used. We can add this logic (logic that deals with -[something] here, or we can use the index name expressions resolver and filter out anything that isn't a data stream?", "author": "martijnvg", "createdAt": "2020-07-07T08:57:29Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamAction.java", "diffHunk": "@@ -169,22 +198,31 @@ protected void masterOperation(Task task, Request request, ClusterState state,\n             Map<String, DataStream> dataStreams = clusterState.metadata().dataStreams();\n \n             // return all data streams if no name was specified\n-            final String requestedName = request.name == null ? \"*\" : request.name;\n+            final String[] requestedNames = request.names == null || request.names.length == 0 ? new String[]{\"*\"} : request.names;\n \n-            final List<DataStream> results = new ArrayList<>();\n+            boolean hasWildcard = false;\n+            final Set<DataStream> results = new HashSet<>();\n+            for (String requestedName : requestedNames) {\n                 if (Regex.isSimpleMatchPattern(requestedName)) {", "originalCommit": "ac9109e256432c35899c37026dcb201aa839f821", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MzA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/59095#discussion_r451653063", "bodyText": "Good catch. I fixed the underlying name resolution issue here: #59191", "author": "danhermann", "createdAt": "2020-07-08T15:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMzA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "507fa32458edd314e5c3f01329edf6a88f969e19", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamAction.java\nindex 60736066b4f..a69ad25c463 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamAction.java\n\n@@ -191,38 +286,33 @@ public class GetDataStreamAction extends ActionType<GetDataStreamAction.Response\n         @Override\n         protected void masterOperation(Task task, Request request, ClusterState state,\n                                        ActionListener<Response> listener) throws Exception {\n-            listener.onResponse(new Response(getDataStreams(state, request)));\n-        }\n-\n-        static List<DataStream> getDataStreams(ClusterState clusterState, Request request) {\n-            Map<String, DataStream> dataStreams = clusterState.metadata().dataStreams();\n-\n-            // return all data streams if no name was specified\n-            final String[] requestedNames = request.names == null || request.names.length == 0 ? new String[]{\"*\"} : request.names;\n-\n-            boolean hasWildcard = false;\n-            final Set<DataStream> results = new HashSet<>();\n-            for (String requestedName : requestedNames) {\n-                if (Regex.isSimpleMatchPattern(requestedName)) {\n-                    hasWildcard = true;\n-                    for (Map.Entry<String, DataStream> entry : dataStreams.entrySet()) {\n-                        if (Regex.simpleMatch(requestedName, entry.getKey())) {\n-                            results.add(entry.getValue());\n-                        }\n-                    }\n-                } else if (dataStreams.containsKey(requestedName)) {\n-                    results.add(dataStreams.get(requestedName));\n+            List<DataStream> dataStreams = getDataStreams(state, indexNameExpressionResolver, request);\n+            List<Response.DataStreamInfo> dataStreamInfos = new ArrayList<>(dataStreams.size());\n+            for (DataStream dataStream : dataStreams) {\n+                String indexTemplate = MetadataIndexTemplateService.findV2Template(state.metadata(), dataStream.getName(), false);\n+                String ilmPolicyName = null;\n+                if (indexTemplate != null) {\n+                    Settings settings = MetadataIndexTemplateService.resolveSettings(state.metadata(), indexTemplate);\n+                    ilmPolicyName = settings.get(\"index.lifecycle.name\");\n+                } else {\n+                    logger.warn(\"couldn't find any matching template for data stream [{}]. has it been restored (and possibly renamed)\" +\n+                        \"from a snapshot?\", dataStream.getName());\n                 }\n+                ClusterStateHealth streamHealth = new ClusterStateHealth(state,\n+                    dataStream.getIndices().stream().map(Index::getName).toArray(String[]::new));\n+                dataStreamInfos.add(new Response.DataStreamInfo(dataStream, streamHealth.getStatus(), indexTemplate, ilmPolicyName));\n             }\n+            listener.onResponse(new Response(dataStreamInfos));\n+        }\n \n-            if (hasWildcard == false && results.size() == 0) {\n-                throw new ResourceNotFoundException(\n-                    \"data stream(s) matching [\" + Strings.arrayToCommaDelimitedString(request.names) + \"] not found\");\n-            }\n+        static List<DataStream> getDataStreams(ClusterState clusterState, IndexNameExpressionResolver iner, Request request) {\n+            List<String> results = iner.dataStreamNames(clusterState, request.indicesOptions(), request.names);\n+            Map<String, DataStream> dataStreams = clusterState.metadata().dataStreams();\n \n-            List<DataStream> resultList = new ArrayList<>(results);\n-            resultList.sort(Comparator.comparing(DataStream::getName));\n-            return resultList;\n+            return results.stream()\n+                .map(dataStreams::get)\n+                .sorted(Comparator.comparing(DataStream::getName))\n+                .collect(Collectors.toList());\n         }\n \n         @Override\n"}}, {"oid": "507fa32458edd314e5c3f01329edf6a88f969e19", "url": "https://github.com/elastic/elasticsearch/commit/507fa32458edd314e5c3f01329edf6a88f969e19", "message": "Data stream admin actions are now index-level actions", "committedDate": "2020-07-10T16:29:24Z", "type": "commit"}, {"oid": "507fa32458edd314e5c3f01329edf6a88f969e19", "url": "https://github.com/elastic/elasticsearch/commit/507fa32458edd314e5c3f01329edf6a88f969e19", "message": "Data stream admin actions are now index-level actions", "committedDate": "2020-07-10T16:29:24Z", "type": "forcePushed"}]}