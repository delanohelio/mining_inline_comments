{"pr_number": 63917, "pr_title": "DocumentMapperParser to no longer depend directly on MapperService", "pr_createdAt": "2020-10-20T09:52:45Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63917", "timeline": [{"oid": "ed0a07c700e482c1124d5d0426c2f40affdd8e86", "url": "https://github.com/elastic/elasticsearch/commit/ed0a07c700e482c1124d5d0426c2f40affdd8e86", "message": "DocumentMapperParser to no longer depend directly on MapperService (#63850)\n\nThis change was mainly triggered by the need for `MapperService` to pass `this` during its constructor when creating `DocumentMapperParser`. Also, `MapperService` is carried around in some places where only a subset of it is needed.\n\nWith this change we rather carry around the components that are strictly needed, in a couple of cases functions that `MapperService` provides, which helps clarifying the dependency between `DocumentMapperParser`, `DocumentMapper` and `MapperService`, as well as removing the need for MapperService to pass `this` to `DocumentMapperParser`", "committedDate": "2020-10-20T09:51:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NjcwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63917#discussion_r508366705", "bodyText": "@romseygeek as part of the backport, due to this call to documentMapper that takes a type, I had to make this argument a function, and the corresponding method in MapperService now takes a String argument. Is that good enough or can you thin of further simplications?", "author": "javanna", "createdAt": "2020-10-20T09:54:27Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java", "diffHunk": "@@ -46,49 +45,38 @@\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.function.Function;\n import java.util.stream.Stream;\n \n \n public class DocumentMapper implements ToXContentFragment {\n \n     public static class Builder {\n-\n-        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers = new LinkedHashMap<>();\n+        private final Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> metadataMappers;\n         private final RootObjectMapper rootObjectMapper;\n         private final Mapper.BuilderContext builderContext;\n         private final IndexSettings indexSettings;\n         private final IndexAnalyzers indexAnalyzers;\n-        private final DocumentMapperParser documentMapperParser;\n         private final DocumentParser documentParser;\n \n         private Map<String, Object> meta;\n \n         public Builder(RootObjectMapper.Builder builder, MapperService mapperService) {\n-            this.indexSettings = mapperService.getIndexSettings();\n-            this.indexAnalyzers = mapperService.getIndexAnalyzers();\n-            this.documentMapperParser = mapperService.documentMapperParser();\n-            this.documentParser = mapperService.documentParser();\n+            this(builder, mapperService.getIndexSettings(), mapperService.getIndexAnalyzers(), mapperService.documentParser(),\n+                mapperService::getMetadataMappers);\n+        }\n+\n+        Builder(RootObjectMapper.Builder builder,\n+                IndexSettings indexSettings,\n+                IndexAnalyzers indexAnalyzers,\n+                DocumentParser documentParser,\n+                Function<String, Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper>> metadataMappersFunction) {\n+            this.indexSettings = indexSettings;\n+            this.indexAnalyzers = indexAnalyzers;\n+            this.documentParser = documentParser;\n             this.builderContext = new Mapper.BuilderContext(indexSettings.getSettings(), new ContentPath(1));\n             this.rootObjectMapper = builder.build(builderContext);\n-            final String type = rootObjectMapper.name();\n-            final DocumentMapper existingMapper = mapperService.documentMapper(type);", "originalCommit": "ed0a07c700e482c1124d5d0426c2f40affdd8e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3Mzc1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63917#discussion_r508373756", "bodyText": "I think it fine; it's not beautiful, but that's types for you.", "author": "romseygeek", "createdAt": "2020-10-20T10:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NjcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f7807973ac0922d1b9455580eb9d7ae2c4c1496b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java\nindex 19055696d22..eb335a1dc03 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java\n\n@@ -42,7 +42,6 @@ import org.elasticsearch.search.internal.SearchContext;\n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.function.Function;\n"}}, {"oid": "f7807973ac0922d1b9455580eb9d7ae2c4c1496b", "url": "https://github.com/elastic/elasticsearch/commit/f7807973ac0922d1b9455580eb9d7ae2c4c1496b", "message": "checkstyle", "committedDate": "2020-10-20T10:11:43Z", "type": "commit"}, {"oid": "5b5d40e4c39b38389052a727dcb290eae3196e59", "url": "https://github.com/elastic/elasticsearch/commit/5b5d40e4c39b38389052a727dcb290eae3196e59", "message": "Merge branch '7.x' into backport/63850", "committedDate": "2020-10-20T12:06:55Z", "type": "commit"}]}