{"pr_number": 64366, "pr_title": "Fixup rare terms", "pr_createdAt": "2020-10-29T16:50:57Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64366", "timeline": [{"oid": "8aa6612f46aa4632c4feb25ae0f3e5b38035dacc", "url": "https://github.com/elastic/elasticsearch/commit/8aa6612f46aa4632c4feb25ae0f3e5b38035dacc", "message": "Fixup rare terms\n\nIn #64016 I caused a bug in rare_terms where we would rewrite the\ncurrent leaf and remove all hits from it, causing us to trip an\nassertion. This didn't happen before because previously we never rewrote\nthe current leaf. The fix involves cleaning up the state that the\ndeferring collector uses if we end up removing all hits.\n\nThis requires some super intimate knowledge of how\n`BestBucketsDeferringCollector` works so I decided to move the\nimplementation of that mergin from `MergingBucketsDeferringCollector`\ninto `BestBucketsDeferringCollector`. This means that\n`MergingBucketsDeferringCollector` is pretty much empty now. So I've\ndeprecated it and will remove it entirely in an subsequent change.\n\nCloses #64356", "committedDate": "2020-10-29T16:52:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MjMxMg==", "url": "https://github.com/elastic/elasticsearch/pull/64366#discussion_r514492312", "bodyText": "I know you just transcribed this from the old comment, but it might be nice to define \"best\" here.  Like what criteria it uses.", "author": "not-napoleon", "createdAt": "2020-10-29T18:53:41Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferableBucketAggregator.java", "diffHunk": "@@ -52,28 +52,37 @@ protected void doPreCollection() throws IOException {\n         List<BucketCollector> deferredAggregations = null;\n         for (int i = 0; i < subAggregators.length; ++i) {\n             if (shouldDefer(subAggregators[i])) {\n-                if (recordingWrapper == null) {\n-                    recordingWrapper = getDeferringCollector();\n+                if (deferringCollector == null) {\n+                    deferringCollector = buildDeferringCollector();\n                     deferredAggregations = new ArrayList<>(subAggregators.length);\n                     deferredAggregationNames = new ArrayList<>(subAggregators.length);\n                 }\n                 deferredAggregations.add(subAggregators[i]);\n                 deferredAggregationNames.add(subAggregators[i].name());\n-                subAggregators[i] = recordingWrapper.wrap(subAggregators[i]);\n+                subAggregators[i] = deferringCollector.wrap(subAggregators[i]);\n             } else {\n                 collectors.add(subAggregators[i]);\n             }\n         }\n-        if (recordingWrapper != null) {\n-            recordingWrapper.setDeferredCollector(deferredAggregations);\n-            collectors.add(recordingWrapper);\n+        if (deferringCollector != null) {\n+            deferringCollector.setDeferredCollector(deferredAggregations);\n+            collectors.add(deferringCollector);\n         }\n         collectableSubAggregators = MultiBucketCollector.wrap(collectors);\n     }\n \n-    public DeferringBucketCollector getDeferringCollector() {\n-        // Default impl is a collector that selects the best buckets\n-        // but an alternative defer policy may be based on best docs.\n+    /**\n+     * Get the deferring collector.\n+     */\n+    protected DeferringBucketCollector deferringCollector() {\n+        return deferringCollector;\n+    }\n+\n+    /**\n+     * Build the {@link DeferringBucketCollector}. The default implementation\n+     * selects the best buckets but some aggs want to do something else.", "originalCommit": "8aa6612f46aa4632c4feb25ae0f3e5b38035dacc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNTA0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64366#discussion_r514505041", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-10-29T19:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MjMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "97e6e9cfed8f8dfba1501f6f226e6cf79a824383", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferableBucketAggregator.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferableBucketAggregator.java\nindex cb0e380d582..8b671d7aedb 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferableBucketAggregator.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferableBucketAggregator.java\n\n@@ -80,7 +80,8 @@ public abstract class DeferableBucketAggregator extends BucketsAggregator {\n \n     /**\n      * Build the {@link DeferringBucketCollector}. The default implementation\n-     * selects the best buckets but some aggs want to do something else.\n+     * replays all hits against the buckets selected by\n+     * {#link {@link DeferringBucketCollector#prepareSelectedBuckets(long...)}.\n      */\n     protected DeferringBucketCollector buildDeferringCollector() {\n         return new BestBucketsDeferringCollector(topLevelQuery(), searcher(), descendsFromGlobalAggregator(parent()));\n"}}, {"oid": "97e6e9cfed8f8dfba1501f6f226e6cf79a824383", "url": "https://github.com/elastic/elasticsearch/commit/97e6e9cfed8f8dfba1501f6f226e6cf79a824383", "message": "Explain", "committedDate": "2020-10-29T19:17:02Z", "type": "commit"}]}