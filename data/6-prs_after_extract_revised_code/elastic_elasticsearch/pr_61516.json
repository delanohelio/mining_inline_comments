{"pr_number": 61516, "pr_title": "Fix doc-update interceptor for indices with DLS and FLS", "pr_createdAt": "2020-08-25T10:08:45Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61516", "timeline": [{"oid": "b2af210d17190245be62f558f1b37b142c90906a", "url": "https://github.com/elastic/elasticsearch/commit/b2af210d17190245be62f558f1b37b142c90906a", "message": "Done", "committedDate": "2020-08-25T10:06:36Z", "type": "commit"}, {"oid": "bd4a0e9e1580887b7afe425cb6eddfb6d9a7921c", "url": "https://github.com/elastic/elasticsearch/commit/bd4a0e9e1580887b7afe425cb6eddfb6d9a7921c", "message": "Unused import", "committedDate": "2020-08-25T10:16:11Z", "type": "commit"}, {"oid": "a70d87a49102ddae2017850402f0f21dd8e11880", "url": "https://github.com/elastic/elasticsearch/commit/a70d87a49102ddae2017850402f0f21dd8e11880", "message": "Mhm", "committedDate": "2020-08-25T10:50:55Z", "type": "commit"}, {"oid": "f2b18e7244a40f68a979272f181c8e68283ae8c0", "url": "https://github.com/elastic/elasticsearch/commit/f2b18e7244a40f68a979272f181c8e68283ae8c0", "message": "assert is not suitable yet", "committedDate": "2020-08-25T13:05:32Z", "type": "commit"}, {"oid": "223f4326386521fe341adb99ec855fe9e6aa4932", "url": "https://github.com/elastic/elasticsearch/commit/223f4326386521fe341adb99ec855fe9e6aa4932", "message": "Tests", "committedDate": "2020-08-25T18:41:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2NDg4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61516#discussion_r476664889", "bodyText": "This if must go away and be replaced with an assert, but the assert currently trips for enrich policies which make use of reindex.", "author": "albertzaharovits", "createdAt": "2020-08-25T18:49:29Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java", "diffHunk": "@@ -43,32 +43,33 @@ public BulkShardRequestInterceptor(ThreadPool threadPool, XPackLicenseState lice\n     public void intercept(RequestInfo requestInfo, AuthorizationEngine authzEngine, AuthorizationInfo authorizationInfo,\n                           ActionListener<Void> listener) {\n         boolean shouldIntercept = licenseState.isSecurityEnabled();\n-        var licenseChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));\n+        var featureUsageChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));\n         if (requestInfo.getRequest() instanceof BulkShardRequest && shouldIntercept) {\n             IndicesAccessControl indicesAccessControl = threadContext.getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n-\n-            final BulkShardRequest bulkShardRequest = (BulkShardRequest) requestInfo.getRequest();\n-            for (BulkItemRequest bulkItemRequest : bulkShardRequest.items()) {\n-                IndicesAccessControl.IndexAccessControl indexAccessControl =\n-                    indicesAccessControl.getIndexPermissions(bulkItemRequest.index());\n-                boolean found = false;\n-                if (indexAccessControl != null) {\n-                    boolean fls = indexAccessControl.getFieldPermissions().hasFieldLevelSecurity();\n-                    boolean dls = indexAccessControl.getDocumentPermissions().hasDocumentLevelPermissions();\n-                    if (fls || dls) {\n-                        if (licenseChecker.get() && bulkItemRequest.request() instanceof UpdateRequest) {\n+            BulkShardRequest bulkShardRequest = (BulkShardRequest) requestInfo.getRequest();\n+            // this uses the {@code BulkShardRequest#index()} because the {@code bulkItemRequest#index()}\n+            // can still be an unresolved date math expression\n+            IndicesAccessControl.IndexAccessControl indexAccessControl = indicesAccessControl.getIndexPermissions(bulkShardRequest.index());\n+            // TODO replace if condition with assertion\n+            if (indexAccessControl != null) {", "originalCommit": "223f4326386521fe341adb99ec855fe9e6aa4932", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8654a386301844579a6615a27486ed6af1209bfe", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java\nindex a59bffa41a0..2923557b7f6 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java\n\n@@ -43,7 +43,7 @@ public class BulkShardRequestInterceptor implements RequestInterceptor {\n     public void intercept(RequestInfo requestInfo, AuthorizationEngine authzEngine, AuthorizationInfo authorizationInfo,\n                           ActionListener<Void> listener) {\n         boolean shouldIntercept = licenseState.isSecurityEnabled();\n-        var featureUsageChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));\n+        var licenseChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));\n         if (requestInfo.getRequest() instanceof BulkShardRequest && shouldIntercept) {\n             IndicesAccessControl indicesAccessControl = threadContext.getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n             BulkShardRequest bulkShardRequest = (BulkShardRequest) requestInfo.getRequest();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4MjA3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61516#discussion_r478182075", "bodyText": "Nit: redundant parenthesis around (UpdateRequest) indicesRequest", "author": "ywangd", "createdAt": "2020-08-27T06:33:05Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/UpdateRequestInterceptor.java", "diffHunk": "@@ -33,6 +33,17 @@ protected void disableFeatures(IndicesRequest updateRequest, boolean fieldLevelS\n             \"is enabled\", RestStatus.BAD_REQUEST));\n     }\n \n+    @Override\n+    String[] requestIndices(IndicesRequest indicesRequest) {\n+        if (indicesRequest instanceof UpdateRequest) {\n+            UpdateRequest updateRequest = ((UpdateRequest) indicesRequest);", "originalCommit": "223f4326386521fe341adb99ec855fe9e6aa4932", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d59293d9a4427c65d059200b996b657f156b951", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/UpdateRequestInterceptor.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/UpdateRequestInterceptor.java\nindex 37d6946475c..c619c90424e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/UpdateRequestInterceptor.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/UpdateRequestInterceptor.java\n\n@@ -36,7 +36,7 @@ public class UpdateRequestInterceptor extends FieldAndDocumentLevelSecurityReque\n     @Override\n     String[] requestIndices(IndicesRequest indicesRequest) {\n         if (indicesRequest instanceof UpdateRequest) {\n-            UpdateRequest updateRequest = ((UpdateRequest) indicesRequest);\n+            UpdateRequest updateRequest = (UpdateRequest) indicesRequest;\n             if (updateRequest.getShardId() != null) {\n                 return new String[]{updateRequest.getShardId().getIndexName()};\n             }\n"}}, {"oid": "8b45893b365eeff292e83f81c60aa955bdae6a70", "url": "https://github.com/elastic/elasticsearch/commit/8b45893b365eeff292e83f81c60aa955bdae6a70", "message": "Merge branch 'master' into fix_bulk_shard_req_interceptor_for_date_expressions", "committedDate": "2020-08-31T13:03:00Z", "type": "commit"}, {"oid": "1d59293d9a4427c65d059200b996b657f156b951", "url": "https://github.com/elastic/elasticsearch/commit/1d59293d9a4427c65d059200b996b657f156b951", "message": "Nit", "committedDate": "2020-08-31T13:12:54Z", "type": "commit"}, {"oid": "02f5f690c2f92e371f3c30a7e14c3b48e8bf6575", "url": "https://github.com/elastic/elasticsearch/commit/02f5f690c2f92e371f3c30a7e14c3b48e8bf6575", "message": "Merge branch 'master' into fix_bulk_shard_req_interceptor_for_date_expressions", "committedDate": "2020-09-07T12:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzOTAzNg==", "url": "https://github.com/elastic/elasticsearch/pull/61516#discussion_r484639036", "bodyText": "Why would we randomise on this rather than just have 2 tests?\nIt feels like having a permanent test with datemath would be a good thing.", "author": "tvernum", "createdAt": "2020-09-08T04:09:12Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/DocumentAndFieldLevelSecurityTests.java", "diffHunk": "@@ -144,6 +149,38 @@ public void testSimpleQuery() {\n         assertThat(response.getHits().getAt(1).getSourceAsMap().get(\"field2\").toString(), equalTo(\"value2\"));\n     }\n \n+    public void testUpdatesAreRejected() {\n+        String indexName = randomFrom(\"<test-{2015.05.05||+1d}>\", \"test\");", "originalCommit": "02f5f690c2f92e371f3c30a7e14c3b48e8bf6575", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2NzE1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61516#discussion_r484867153", "bodyText": "I've made it a for-each to replace the randomisation.\nI would've opted for a separate test myself, but since this is an integration test, I've accommodated the requirement to not have exhaustive ITs by using randomisation.", "author": "albertzaharovits", "createdAt": "2020-09-08T12:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzOTAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8654a386301844579a6615a27486ed6af1209bfe", "chunk": "diff --git a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/DocumentAndFieldLevelSecurityTests.java b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/DocumentAndFieldLevelSecurityTests.java\nindex c8d859e5417..1384928bae8 100644\n--- a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/DocumentAndFieldLevelSecurityTests.java\n+++ b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/DocumentAndFieldLevelSecurityTests.java\n\n@@ -150,35 +151,38 @@ public class DocumentAndFieldLevelSecurityTests extends SecurityIntegTestCase {\n     }\n \n     public void testUpdatesAreRejected() {\n-        String indexName = randomFrom(\"<test-{2015.05.05||+1d}>\", \"test\");\n-        assertAcked(client().admin().indices().prepareCreate(indexName)\n-                .setMapping(\"id\", \"type=keyword\", \"field1\", \"type=text\", \"field2\", \"type=text\")\n-                .setSettings(Settings.builder()\n-                        .put(\"index.number_of_replicas\", 0)\n-                        .put(\"index.number_of_shards\", 1))\n-        );\n-        client().prepareIndex(indexName).setId(\"1\").setSource(\"id\", \"1\", \"field1\", \"value1\")\n-                .setRefreshPolicy(IMMEDIATE)\n-                .get();\n+        for (String indexName : List.of(\"<test-{2015.05.05||+1d}>\", \"test\")) {\n+            assertAcked(client().admin().indices().prepareCreate(indexName)\n+                    .setMapping(\"id\", \"type=keyword\", \"field1\", \"type=text\", \"field2\", \"type=text\")\n+                    .setSettings(Settings.builder()\n+                            .put(\"index.number_of_replicas\", 0)\n+                            .put(\"index.number_of_shards\", 1))\n+            );\n+            client().prepareIndex(indexName).setId(\"1\").setSource(\"id\", \"1\", \"field1\", \"value1\")\n+                    .setRefreshPolicy(IMMEDIATE)\n+                    .get();\n \n-        ElasticsearchSecurityException exception = expectThrows(ElasticsearchSecurityException.class, () -> {\n-            client().filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER,\n-                    basicAuthHeaderValue(\"user1\", USERS_PASSWD)))\n-                    .prepareUpdate(indexName, \"1\")\n-                    .setDoc(Requests.INDEX_CONTENT_TYPE, \"field2\", \"value2\")\n+            ElasticsearchSecurityException exception = expectThrows(ElasticsearchSecurityException.class, () -> {\n+                client().filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER,\n+                        basicAuthHeaderValue(\"user1\", USERS_PASSWD)))\n+                        .prepareUpdate(indexName, \"1\")\n+                        .setDoc(Requests.INDEX_CONTENT_TYPE, \"field2\", \"value2\")\n+                        .get();\n+            });\n+            assertThat(exception.getDetailedMessage(), containsString(\"Can't execute an update request if field or document level \" +\n+                    \"security\"));\n+\n+            BulkResponse bulkResponse = client().filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue(\"user1\",\n+                    USERS_PASSWD)))\n+                    .prepareBulk()\n+                    .add(client().prepareUpdate(indexName, \"1\")\n+                            .setDoc(Requests.INDEX_CONTENT_TYPE, \"field2\", \"value2\"))\n                     .get();\n-        });\n-        assertThat(exception.getDetailedMessage(), containsString(\"Can't execute an update request if field or document level security\"));\n-\n-        BulkResponse bulkResponse = client().filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue(\"user1\",\n-                USERS_PASSWD)))\n-                .prepareBulk()\n-                .add(client().prepareUpdate(indexName, \"1\")\n-                        .setDoc(Requests.INDEX_CONTENT_TYPE, \"field2\", \"value2\"))\n-                .get();\n-        assertThat(bulkResponse.getItems().length, is(1));\n-        assertThat(bulkResponse.getItems()[0].getFailureMessage(), containsString(\"Can't execute a bulk item request with update requests\" +\n-                \" embedded if field or document level security is enabled\"));\n+            assertThat(bulkResponse.getItems().length, is(1));\n+            assertThat(bulkResponse.getItems()[0].getFailureMessage(), containsString(\"Can't execute a bulk item request with update \" +\n+                    \"requests\" +\n+                    \" embedded if field or document level security is enabled\"));\n+        }\n     }\n \n     public void testDLSIsAppliedBeforeFLS() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzOTQ4MA==", "url": "https://github.com/elastic/elasticsearch/pull/61516#discussion_r484639480", "bodyText": "The previous name seems more appropriate to me. The purpose is to check the license allows the feature, not to track usage.", "author": "tvernum", "createdAt": "2020-09-08T04:11:16Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java", "diffHunk": "@@ -43,32 +43,33 @@ public BulkShardRequestInterceptor(ThreadPool threadPool, XPackLicenseState lice\n     public void intercept(RequestInfo requestInfo, AuthorizationEngine authzEngine, AuthorizationInfo authorizationInfo,\n                           ActionListener<Void> listener) {\n         boolean shouldIntercept = licenseState.isSecurityEnabled();\n-        var licenseChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));\n+        var featureUsageChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));", "originalCommit": "02f5f690c2f92e371f3c30a7e14c3b48e8bf6575", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2NDIwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/61516#discussion_r484864201", "bodyText": "I've reverted the name change.", "author": "albertzaharovits", "createdAt": "2020-09-08T12:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzOTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "8654a386301844579a6615a27486ed6af1209bfe", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java\nindex a59bffa41a0..2923557b7f6 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/BulkShardRequestInterceptor.java\n\n@@ -43,7 +43,7 @@ public class BulkShardRequestInterceptor implements RequestInterceptor {\n     public void intercept(RequestInfo requestInfo, AuthorizationEngine authzEngine, AuthorizationInfo authorizationInfo,\n                           ActionListener<Void> listener) {\n         boolean shouldIntercept = licenseState.isSecurityEnabled();\n-        var featureUsageChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));\n+        var licenseChecker = new MemoizedSupplier<>(() -> licenseState.checkFeature(Feature.SECURITY_DLS_FLS));\n         if (requestInfo.getRequest() instanceof BulkShardRequest && shouldIntercept) {\n             IndicesAccessControl indicesAccessControl = threadContext.getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n             BulkShardRequest bulkShardRequest = (BulkShardRequest) requestInfo.getRequest();\n"}}, {"oid": "6bb8e39a1bd59ef56002b13e6dad5621aa48407b", "url": "https://github.com/elastic/elasticsearch/commit/6bb8e39a1bd59ef56002b13e6dad5621aa48407b", "message": "Merge branch 'master' into fix_bulk_shard_req_interceptor_for_date_expressions", "committedDate": "2020-09-08T11:42:21Z", "type": "commit"}, {"oid": "8654a386301844579a6615a27486ed6af1209bfe", "url": "https://github.com/elastic/elasticsearch/commit/8654a386301844579a6615a27486ed6af1209bfe", "message": "Review", "committedDate": "2020-09-08T12:05:13Z", "type": "commit"}, {"oid": "d3b73045428630793637ee03ce71498f789afd29", "url": "https://github.com/elastic/elasticsearch/commit/d3b73045428630793637ee03ce71498f789afd29", "message": "Merge branch 'master' into fix_bulk_shard_req_interceptor_for_date_expressions", "committedDate": "2020-09-14T15:14:32Z", "type": "commit"}, {"oid": "d4bdaa2086b02f9e158f0e8b769f10147a52cf5b", "url": "https://github.com/elastic/elasticsearch/commit/d4bdaa2086b02f9e158f0e8b769f10147a52cf5b", "message": "Merge branch 'master' into fix_bulk_shard_req_interceptor_for_date_expressions", "committedDate": "2020-09-22T06:43:55Z", "type": "commit"}]}