{"pr_number": 52437, "pr_title": "Do not lock on reads of XPackLicenseState", "pr_createdAt": "2020-02-17T19:20:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52437", "timeline": [{"oid": "925ab5de7425811e0b64b12505a7e17e42b3248b", "url": "https://github.com/elastic/elasticsearch/commit/925ab5de7425811e0b64b12505a7e17e42b3248b", "message": "Do not lock on reads of XPackLicenseState\n\nXPackLicenseState reads to necessary to validate a number of cluster\noperations. This reads occasionally occur on transport threads which\nshould not be blocked. Currently we sychronize when reading. However,\nthis is unecessary as only a single piece of state is updateable. This\ncommit makes this state volatile and removes the locking.", "committedDate": "2020-02-17T18:30:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MzQ3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52437#discussion_r380363477", "bodyText": "I wonder if because of the frequency of the pattern of reading status multiple times in a single method, a safer approach would be the use of a read/write lock. This way, future new method that read the status multiple times would be less likely to be coded incorrectly, since the pattern around reads elsewhere would clearly stand out as first requiring grabbing the read lock.", "author": "jasontedor", "createdAt": "2020-02-17T20:57:46Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -292,7 +292,11 @@ private static boolean isBasic(OperationMode mode) {\n     private final boolean isSecurityEnabled;\n     private final boolean isSecurityExplicitlyEnabled;\n \n-    private Status status = new Status(OperationMode.TRIAL, true);\n+    // Since Status is the only field that can be updated, we do not need to synchronize access to\n+    // XPackLicenseState. However, if status is read multiple times in a method, a local variable should be\n+    // be used to avoid update races. If additional volatile state is added to XPackLicenseState, we may need\n+    // to reintroduce synchronization.\n+    private volatile Status status = new Status(OperationMode.TRIAL, true);", "originalCommit": "925ab5de7425811e0b64b12505a7e17e42b3248b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3fcef2372e1d8dceda767c4a8421c04ad675bd0f", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex a1beb6f0012..51399b07136 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -288,15 +291,16 @@ public class XPackLicenseState {\n         }\n     }\n \n+    // State lock which will allow reading the state as long as an active write is not occurring.\n+    private final ReentrantReadWriteLock stateLock = new ReentrantReadWriteLock();\n+    private final ReleasableLock readLock = new ReleasableLock(stateLock.readLock());\n+    private final ReleasableLock writeLock = new ReleasableLock(stateLock.writeLock());\n+\n     private final List<LicenseStateListener> listeners;\n     private final boolean isSecurityEnabled;\n     private final boolean isSecurityExplicitlyEnabled;\n \n-    // Since Status is the only field that can be updated, we do not need to synchronize access to\n-    // XPackLicenseState. However, if status is read multiple times in a method, a local variable should be\n-    // be used to avoid update races. If additional volatile state is added to XPackLicenseState, we may need\n-    // to reintroduce synchronization.\n-    private volatile Status status = new Status(OperationMode.TRIAL, true);\n+    private Status status = new Status(OperationMode.TRIAL, true);\n \n     public XPackLicenseState(Settings settings) {\n         this.listeners = new CopyOnWriteArrayList<>();\n"}}, {"oid": "3fcef2372e1d8dceda767c4a8421c04ad675bd0f", "url": "https://github.com/elastic/elasticsearch/commit/3fcef2372e1d8dceda767c4a8421c04ad675bd0f", "message": "Changes", "committedDate": "2020-02-18T02:02:16Z", "type": "commit"}, {"oid": "2568826167b7107fbd430292f62219e91a29ebc1", "url": "https://github.com/elastic/elasticsearch/commit/2568826167b7107fbd430292f62219e91a29ebc1", "message": "Change", "committedDate": "2020-02-18T16:26:10Z", "type": "commit"}, {"oid": "65cee4ce0fc059c20e6871194bad25ea8bb0f240", "url": "https://github.com/elastic/elasticsearch/commit/65cee4ce0fc059c20e6871194bad25ea8bb0f240", "message": "Changes", "committedDate": "2020-02-18T17:20:08Z", "type": "commit"}, {"oid": "5d4a2b19db7ae122f5d5371ed35bdcabec7c352c", "url": "https://github.com/elastic/elasticsearch/commit/5d4a2b19db7ae122f5d5371ed35bdcabec7c352c", "message": "Merge remote-tracking branch 'upstream/master' into no_long_on_xpack_state", "committedDate": "2020-02-18T18:07:03Z", "type": "commit"}]}