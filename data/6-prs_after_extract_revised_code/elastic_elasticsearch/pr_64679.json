{"pr_number": 64679, "pr_title": "Fix SetSingleNodeAllocateStep for data tier deployments", "pr_createdAt": "2020-11-06T00:07:19Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64679", "timeline": [{"oid": "d5d8a451f352653b92ff0b23c3af83e9c5a095df", "url": "https://github.com/elastic/elasticsearch/commit/d5d8a451f352653b92ff0b23c3af83e9c5a095df", "message": "Fix SetSingleNodeAllocateStep for data tier deployments\n\nWhen the `shrink` action in ILM chooses a random node to assign the shards to, it checks the\n`FilterAllocationDecider` to see whether the node can hold the shards (looping through all nodes\nuntil it can find one that can hold them). A previous implementation of data tier allocation used\n`FilterAllocationDecider`, but the current one uses a custom decider: `DataTierAllocationDecider`.\nThis decider needs to be used within the `SetSingleNodeAllocateStep` so that the shrink action\ndoesn't attempt to allocate an index with the \"data_warm\" preference to a node with the \"data_hot\"\nrole.\n\nThis commit adds this decider and a test to exhibit the behavior.", "committedDate": "2020-11-06T00:01:15Z", "type": "commit"}, {"oid": "b03eb2d4d29e9fb7c750069a2880fd6372eee840", "url": "https://github.com/elastic/elasticsearch/commit/b03eb2d4d29e9fb7c750069a2880fd6372eee840", "message": "Merge branch 'master' into fix-shrink-on-tiers", "committedDate": "2020-11-06T00:22:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MzQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64679#discussion_r518643431", "bodyText": "Yes! thanks for configuring this \u2764\ufe0f", "author": "andreidan", "createdAt": "2020-11-06T09:58:53Z", "path": "x-pack/plugin/ilm/src/internalClusterTest/java/org/elasticsearch/xpack/ilm/ILMMultiNodeIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ilm;\n+\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleRequest;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleResponse;\n+import org.elasticsearch.xpack.core.ilm.IndexLifecycleExplainResponse;\n+import org.elasticsearch.xpack.core.ilm.LifecyclePolicy;\n+import org.elasticsearch.xpack.core.ilm.LifecycleSettings;\n+import org.elasticsearch.xpack.core.ilm.Phase;\n+import org.elasticsearch.xpack.core.ilm.RolloverAction;\n+import org.elasticsearch.xpack.core.ilm.ShrinkAction;\n+import org.elasticsearch.xpack.core.ilm.action.ExplainLifecycleAction;\n+import org.elasticsearch.xpack.core.ilm.action.PutLifecycleAction;\n+import org.elasticsearch.xpack.datastreams.DataStreamsPlugin;\n+import org.junit.After;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class ILMMultiNodeIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(LocalStateCompositeXPackPlugin.class, DataStreamsPlugin.class, IndexLifecycle.class);\n+    }\n+\n+    @Override\n+    protected Settings nodeSettings(int nodeOrdinal) {\n+        return Settings.builder().put(super.nodeSettings(nodeOrdinal))\n+            .put(LifecycleSettings.LIFECYCLE_POLL_INTERVAL, \"1s\")\n+            // This just generates less churn and makes it easier to read the log file if needed", "originalCommit": "b03eb2d4d29e9fb7c750069a2880fd6372eee840", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NTk0OA==", "url": "https://github.com/elastic/elasticsearch/pull/64679#discussion_r518645948", "bodyText": "should we lift this into EsIntegTestCase.cleanUpCluster? Maybe in a follow-up PR?", "author": "andreidan", "createdAt": "2020-11-06T10:03:10Z", "path": "x-pack/plugin/ilm/src/internalClusterTest/java/org/elasticsearch/xpack/ilm/ILMMultiNodeIT.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ilm;\n+\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleRequest;\n+import org.elasticsearch.xpack.core.ilm.ExplainLifecycleResponse;\n+import org.elasticsearch.xpack.core.ilm.IndexLifecycleExplainResponse;\n+import org.elasticsearch.xpack.core.ilm.LifecyclePolicy;\n+import org.elasticsearch.xpack.core.ilm.LifecycleSettings;\n+import org.elasticsearch.xpack.core.ilm.Phase;\n+import org.elasticsearch.xpack.core.ilm.RolloverAction;\n+import org.elasticsearch.xpack.core.ilm.ShrinkAction;\n+import org.elasticsearch.xpack.core.ilm.action.ExplainLifecycleAction;\n+import org.elasticsearch.xpack.core.ilm.action.PutLifecycleAction;\n+import org.elasticsearch.xpack.datastreams.DataStreamsPlugin;\n+import org.junit.After;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class ILMMultiNodeIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Arrays.asList(LocalStateCompositeXPackPlugin.class, DataStreamsPlugin.class, IndexLifecycle.class);\n+    }\n+\n+    @Override\n+    protected Settings nodeSettings(int nodeOrdinal) {\n+        return Settings.builder().put(super.nodeSettings(nodeOrdinal))\n+            .put(LifecycleSettings.LIFECYCLE_POLL_INTERVAL, \"1s\")\n+            // This just generates less churn and makes it easier to read the log file if needed\n+            .put(LifecycleSettings.LIFECYCLE_HISTORY_INDEX_ENABLED, false)\n+            .build();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        try {\n+            client().execute(DeleteDataStreamAction.INSTANCE, new DeleteDataStreamAction.Request(new String[]{index})).get();", "originalCommit": "b03eb2d4d29e9fb7c750069a2880fd6372eee840", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}