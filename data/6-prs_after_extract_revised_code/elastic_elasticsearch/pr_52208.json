{"pr_number": 52208, "pr_title": "Add Bulk stats track the bulk per shard", "pr_createdAt": "2020-02-11T14:39:27Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52208", "timeline": [{"oid": "270e8d54b29ba5b50921215ac0c5ba0770976070", "url": "https://github.com/elastic/elasticsearch/commit/270e8d54b29ba5b50921215ac0c5ba0770976070", "message": "Add Bulk stats track the bulk sizes per shard and the time spent on the bulk shard request (#50536)(#47345)", "committedDate": "2020-02-11T10:17:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjQ4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379662489", "bodyText": "This time doesn't take into account rejections, meaning that rejections still increment the stats (since onRejection also calls finishRequest). This brings up a larger question, should rejected bulk operations contribute to the time and size?", "author": "dakrone", "createdAt": "2020-02-14T21:54:35Z", "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java", "diffHunk": "@@ -187,6 +189,7 @@ private void finishRequest() {\n                     () -> new WritePrimaryResult<>(\n                         context.getBulkShardRequest(), context.buildShardResponse(), context.getLocationToSync(), null,\n                         context.getPrimary(), logger));\n+                primary.getBulkOperationListener().afterBulk(request.totalSizeInBytes(), System.nanoTime() - startBulkTime);", "originalCommit": "270e8d54b29ba5b50921215ac0c5ba0770976070", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyODU3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379828573", "bodyText": "This stats is important to reflect the processing power of bulk operations, and I feel that rejected bulk operations should not contribute to the time and size, because the processing power of bulk operations can become untrusted when there is a large number of rejections. So is it appropriate for me to put statistics at the end of the doRun interface ?", "author": "zhichen", "createdAt": "2020-02-15T12:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0d05e87ddcc8f6b784e47e7f49e5aa488ca35db9", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\nindex 828147e9973..3a28b4eba17 100644\n--- a/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n\n@@ -189,7 +190,6 @@ public class TransportShardBulkAction extends TransportWriteAction<BulkShardRequ\n                     () -> new WritePrimaryResult<>(\n                         context.getBulkShardRequest(), context.buildShardResponse(), context.getLocationToSync(), null,\n                         context.getPrimary(), logger));\n-                primary.getBulkOperationListener().afterBulk(request.totalSizeInBytes(), System.nanoTime() - startBulkTime);\n             }\n         }.run();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2Mzg4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379663889", "bodyText": "Can you rename this to totalOperations to make it clearer what it's the total of?", "author": "dakrone", "createdAt": "2020-02-14T21:58:33Z", "path": "server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.bulk.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class BulkStats implements Writeable, ToXContentFragment {\n+\n+    private long total = 0;", "originalCommit": "270e8d54b29ba5b50921215ac0c5ba0770976070", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyODcxMg==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379828712", "bodyText": "Yes , it's much clearer", "author": "zhichen", "createdAt": "2020-02-15T12:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2Mzg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0d05e87ddcc8f6b784e47e7f49e5aa488ca35db9", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java b/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\nindex 63dfd68d488..dad40c41868 100644\n--- a/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\n+++ b/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\n\n@@ -28,10 +28,15 @@ import org.elasticsearch.common.xcontent.ToXContentFragment;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import java.io.IOException;\n+import java.util.Objects;\n \n+/**\n+ * Bulk related statistics, including the time and size of shard bulk requests,\n+ * starting at the shard level and allowing aggregation to indices and node level\n+ */\n public class BulkStats implements Writeable, ToXContentFragment {\n \n-    private long total = 0;\n+    private long totalOperations = 0;\n     private long totalTimeInMillis = 0;\n     private long totalSizeInBytes = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2Mzk0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379663946", "bodyText": "Please add some javadocs for this class", "author": "dakrone", "createdAt": "2020-02-14T21:58:43Z", "path": "server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.bulk.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class BulkStats implements Writeable, ToXContentFragment {", "originalCommit": "270e8d54b29ba5b50921215ac0c5ba0770976070", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyODcyMg==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379828722", "bodyText": "Sure!", "author": "zhichen", "createdAt": "2020-02-15T12:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2Mzk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0d05e87ddcc8f6b784e47e7f49e5aa488ca35db9", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java b/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\nindex 63dfd68d488..dad40c41868 100644\n--- a/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\n+++ b/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\n\n@@ -28,10 +28,15 @@ import org.elasticsearch.common.xcontent.ToXContentFragment;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import java.io.IOException;\n+import java.util.Objects;\n \n+/**\n+ * Bulk related statistics, including the time and size of shard bulk requests,\n+ * starting at the shard level and allowing aggregation to indices and node level\n+ */\n public class BulkStats implements Writeable, ToXContentFragment {\n \n-    private long total = 0;\n+    private long totalOperations = 0;\n     private long totalTimeInMillis = 0;\n     private long totalSizeInBytes = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NDI2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379664261", "bodyText": "This would be clearer as \"total_operations\" I think", "author": "dakrone", "createdAt": "2020-02-14T21:59:40Z", "path": "server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.bulk.stats;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+\n+public class BulkStats implements Writeable, ToXContentFragment {\n+\n+    private long total = 0;\n+    private long totalTimeInMillis = 0;\n+    private long totalSizeInBytes = 0;\n+\n+    public BulkStats() {\n+\n+    }\n+\n+    public BulkStats(StreamInput in) throws IOException {\n+        total = in.readVLong();\n+        totalTimeInMillis = in.readVLong();\n+        totalSizeInBytes = in.readVLong();\n+    }\n+\n+    public BulkStats(long total, long totalTimeInMillis, long totalSizeInBytes) {\n+        this.total = total;\n+        this.totalTimeInMillis = totalTimeInMillis;\n+        this.totalSizeInBytes = totalSizeInBytes;\n+    }\n+\n+    public void add(BulkStats bulkStats) {\n+        addTotals(bulkStats);\n+    }\n+\n+    public void addTotals(BulkStats bulkStats) {\n+        if (bulkStats == null) {\n+            return;\n+        }\n+        this.total += bulkStats.total;\n+        this.totalTimeInMillis += bulkStats.totalTimeInMillis;\n+        this.totalSizeInBytes += bulkStats.totalSizeInBytes;\n+    }\n+\n+    public long getTotalSizeInBytes() {\n+        return totalSizeInBytes;\n+    }\n+\n+    public long getTotal() {\n+        return total;\n+    }\n+\n+    public TimeValue getTotalTime() {\n+        return new TimeValue(totalTimeInMillis);\n+    }\n+\n+    public long getTotalTimeInMillis() {\n+        return totalTimeInMillis;\n+    }\n+\n+    @Override public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVLong(total);\n+        out.writeVLong(totalTimeInMillis);\n+        out.writeVLong(totalSizeInBytes);\n+    }\n+\n+    @Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {\n+        builder.startObject(Fields.BULK);\n+        builder.field(Fields.TOTAL, total);\n+        builder.humanReadableField(Fields.TOTAL_TIME_IN_MILLIS, Fields.TOTAL_TIME, getTotalTime());\n+        builder.field(Fields.TOTAL_SIZE_IN_BYTES, totalSizeInBytes);\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    static final class Fields {\n+        static final String BULK = \"bulk\";\n+        static final String TOTAL = \"total\";", "originalCommit": "270e8d54b29ba5b50921215ac0c5ba0770976070", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d05e87ddcc8f6b784e47e7f49e5aa488ca35db9", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java b/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\nindex 63dfd68d488..dad40c41868 100644\n--- a/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\n+++ b/server/src/main/java/org/elasticsearch/index/bulk/stats/BulkStats.java\n\n@@ -28,10 +28,15 @@ import org.elasticsearch.common.xcontent.ToXContentFragment;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import java.io.IOException;\n+import java.util.Objects;\n \n+/**\n+ * Bulk related statistics, including the time and size of shard bulk requests,\n+ * starting at the shard level and allowing aggregation to indices and node level\n+ */\n public class BulkStats implements Writeable, ToXContentFragment {\n \n-    private long total = 0;\n+    private long totalOperations = 0;\n     private long totalTimeInMillis = 0;\n     private long totalSizeInBytes = 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTI0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379665245", "bodyText": "Could you add some javadocs for this class please?", "author": "dakrone", "createdAt": "2020-02-14T22:02:27Z", "path": "server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.bulk.stats;\n+\n+import org.elasticsearch.common.metrics.CounterMetric;\n+import org.elasticsearch.common.metrics.MeanMetric;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class ShardBulkStats implements BulkOperationListener {", "originalCommit": "270e8d54b29ba5b50921215ac0c5ba0770976070", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d05e87ddcc8f6b784e47e7f49e5aa488ca35db9", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java b/server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java\nindex ec3b1ded3c3..8f1869c1ec2 100644\n--- a/server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java\n+++ b/server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java\n\n@@ -21,9 +21,14 @@ package org.elasticsearch.index.bulk.stats;\n \n import org.elasticsearch.common.metrics.CounterMetric;\n import org.elasticsearch.common.metrics.MeanMetric;\n+import org.elasticsearch.index.shard.IndexShard;\n \n import java.util.concurrent.TimeUnit;\n \n+/**\n+ * Internal class that maintains relevant shard bulk statistics / metrics.\n+ * @see IndexShard\n+ */\n public class ShardBulkStats implements BulkOperationListener {\n \n     private final StatsHolder totalStats = new StatsHolder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NzM1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r379667353", "bodyText": "This would be better extending AbstractWireSerializingTestCase<BulkStats> and then implementing the createRandomInstance, mutateInstance, and instanceReader methods. We use that for testing wire serialization, equality, etc so we don't have to write the same tests for each class.", "author": "dakrone", "createdAt": "2020-02-14T22:09:18Z", "path": "server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.bulk.stats;\n+\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.io.IOException;\n+\n+public class BulkStatsTests extends ESTestCase {", "originalCommit": "270e8d54b29ba5b50921215ac0c5ba0770976070", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d05e87ddcc8f6b784e47e7f49e5aa488ca35db9", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java b/server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java\nindex 74101a464e8..d5c70f7908f 100644\n--- a/server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java\n\n@@ -19,24 +19,34 @@\n \n package org.elasticsearch.index.bulk.stats;\n \n-import org.elasticsearch.common.io.stream.BytesStreamOutput;\n-import org.elasticsearch.common.io.stream.StreamInput;\n-import org.elasticsearch.test.ESTestCase;\n-\n-import java.io.IOException;\n-\n-public class BulkStatsTests extends ESTestCase {\n-\n-    public void testSerialize() throws IOException {\n-        BulkStats stats = new BulkStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n-        BytesStreamOutput out = new BytesStreamOutput();\n-        stats.writeTo(out);\n-        StreamInput input = out.bytes().streamInput();\n-        BulkStats read = new BulkStats(input);\n-        assertEquals(-1, input.read());\n-        assertEquals(stats.getTotal(), read.getTotal());\n-        assertEquals(stats.getTotalTime(), read.getTotalTime());\n-        assertEquals(stats.getTotalSizeInBytes(), read.getTotalSizeInBytes());\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+\n+public class BulkStatsTests extends AbstractWireSerializingTestCase<BulkStats> {\n+\n+    @Override\n+    protected Writeable.Reader<BulkStats> instanceReader() {\n+        return BulkStats::new;\n+    }\n+\n+    @Override\n+    protected BulkStats createTestInstance() {\n+        return new BulkStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n+    }\n+\n+    @Override\n+    protected BulkStats mutateInstance(BulkStats instance) {\n+        BulkStats mutateBulkStats = new BulkStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n+        switch (between(0, 1)) {\n+            case 0:\n+                break;\n+            case 1:\n+                mutateBulkStats.add(instance);\n+                break;\n+            default:\n+                throw new AssertionError(\"Illegal randomisation branch\");\n+        }\n+        return mutateBulkStats;\n     }\n \n     public void testAddTotals() {\n"}}, {"oid": "0d05e87ddcc8f6b784e47e7f49e5aa488ca35db9", "url": "https://github.com/elastic/elasticsearch/commit/0d05e87ddcc8f6b784e47e7f49e5aa488ca35db9", "message": "Refactoring bulk stats test and add some java docs as mentioned in the review.", "committedDate": "2020-02-15T12:24:12Z", "type": "commit"}, {"oid": "d988e98fffcfeb5b97be63cef50b5847b1a470a2", "url": "https://github.com/elastic/elasticsearch/commit/d988e98fffcfeb5b97be63cef50b5847b1a470a2", "message": "Adjust the code style", "committedDate": "2020-02-15T12:50:22Z", "type": "commit"}, {"oid": "bc32e4e7aa30f2f2a0ee9c58d15c93a25f3944c0", "url": "https://github.com/elastic/elasticsearch/commit/bc32e4e7aa30f2f2a0ee9c58d15c93a25f3944c0", "message": "fix xpack monitoring test case.", "committedDate": "2020-02-15T14:02:03Z", "type": "commit"}, {"oid": "efcff23f0de73ebd568a1d05b112a311c24a0ac6", "url": "https://github.com/elastic/elasticsearch/commit/efcff23f0de73ebd568a1d05b112a311c24a0ac6", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-02-17T16:13:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMDk5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r381420993", "bodyText": "I believe this should be moved to before the finishRequest(), finishing the request entails running a number of things that happen as part of the listener passed in to this method, and while it could be good to capture the time spent doing those things, right now we do not capture them for the replica operation (since they are done after shardOperationOnReplica is called.\nIf we want to stick with tracking only the indexing time (rather than refresh, checkpoint update, etc), we should track the time prior to the finishRequest() call", "author": "dakrone", "createdAt": "2020-02-19T17:15:37Z", "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java", "diffHunk": "@@ -166,6 +168,7 @@ protected void doRun() throws Exception {\n                 }\n                 // We're done, there's no more operations to execute so we resolve the wrapped listener\n                 finishRequest();\n+                primary.getBulkOperationListener().afterBulk(request.totalSizeInBytes(), System.nanoTime() - startBulkTime);", "originalCommit": "efcff23f0de73ebd568a1d05b112a311c24a0ac6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMDUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r381810524", "bodyText": "I get it, track the time prior to the finishRequest() also ensures that the same events are captured on primary and replic", "author": "zhichen", "createdAt": "2020-02-20T06:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyMDk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ff52c8083d9bdac3a1d1a6dceee8447da856535f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\nindex d581cdd718c..c45e98f7243 100644\n--- a/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n\n@@ -166,9 +166,9 @@ public class TransportShardBulkAction extends TransportWriteAction<BulkShardRequ\n                     }\n                     assert context.isInitial(); // either completed and moved to next or reset\n                 }\n+                primary.getBulkOperationListener().afterBulk(request.totalSizeInBytes(), System.nanoTime() - startBulkTime);\n                 // We're done, there's no more operations to execute so we resolve the wrapped listener\n                 finishRequest();\n-                primary.getBulkOperationListener().afterBulk(request.totalSizeInBytes(), System.nanoTime() - startBulkTime);\n             }\n \n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyODU0OA==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r381428548", "bodyText": "This isn't mutating the instance in the right way, here's a better mutation:\nprotected BulkStats mutateInstance(BulkStats instance) {\n  switch (between(0, 2)) {\n    case 0:\n      return new BulkStats(randomValueOtherThan(instance.getTotalOperations(), ESTestCase::randomNonNegativeLong),\n          instance.getTotalTimeInMillis(), instance.getTotalSizeInBytes());\n    case 1:\n      return new BulkStats(instance.getTotalOperations(),\n          randomValueOtherThan(instance.getTotalTimeInMillis(), ESTestCase::randomNonNegativeLong),\n          instance.getTotalSizeInBytes());\n    case 2:\n      return new BulkStats(instance.getTotalOperations(), instance.getTotalTimeInMillis(),\n          randomValueOtherThan(instance.getTotalSizeInBytes(), ESTestCase::randomNonNegativeLong));\n    default:\n      throw new AssertionError(\"Illegal randomisation branch\");\n  }\n}\nWhere each branch mutates only a single value, and we ensure that we don't randomly get the same value by unlucky chance and cause a test failure.\n(I didn't test this code, it might have a syntax error, it's just an example)", "author": "dakrone", "createdAt": "2020-02-19T17:28:31Z", "path": "server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.bulk.stats;\n+\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+\n+public class BulkStatsTests extends AbstractWireSerializingTestCase<BulkStats> {\n+\n+    @Override\n+    protected Writeable.Reader<BulkStats> instanceReader() {\n+        return BulkStats::new;\n+    }\n+\n+    @Override\n+    protected BulkStats createTestInstance() {\n+        return new BulkStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n+    }\n+\n+    @Override\n+    protected BulkStats mutateInstance(BulkStats instance) {\n+        BulkStats mutateBulkStats = new BulkStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n+        switch (between(0, 1)) {\n+            case 0:\n+                break;\n+            case 1:\n+                mutateBulkStats.add(instance);\n+                break;\n+            default:\n+                throw new AssertionError(\"Illegal randomisation branch\");\n+        }\n+        return mutateBulkStats;\n+    }", "originalCommit": "efcff23f0de73ebd568a1d05b112a311c24a0ac6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff52c8083d9bdac3a1d1a6dceee8447da856535f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java b/server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java\nindex d5c70f7908f..5086b8dd9bd 100644\n--- a/server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/bulk/stats/BulkStatsTests.java\n\n@@ -21,6 +21,7 @@ package org.elasticsearch.index.bulk.stats;\n \n import org.elasticsearch.common.io.stream.Writeable;\n import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+import org.elasticsearch.test.ESTestCase;\n \n public class BulkStatsTests extends AbstractWireSerializingTestCase<BulkStats> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyOTM2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r381429362", "bodyText": "I don't think we need to index 500 documents here? We could probably get away with a smaller amount like 20, so that the test doesn't take as long? Was this added to try and ensure that the total time was greater than 0?", "author": "dakrone", "createdAt": "2020-02-19T17:29:58Z", "path": "server/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java", "diffHunk": "@@ -1067,6 +1077,33 @@ public void testFilterCacheStats() throws Exception {\n         assertThat(response.getTotal().queryCache.getMemorySizeInBytes(), equalTo(0L));\n     }\n \n+    public void testBulkStats() throws Exception {\n+        final String index = \"test\";\n+        assertAcked(prepareCreate(index).setSettings(settingsBuilder().put(\"index.number_of_shards\", 2)\n+            .put(\"index.number_of_replicas\", 1)));\n+        ensureGreen();\n+        final BulkRequest request1 = new BulkRequest();\n+        for (int i = 0; i < 500; ++i) {", "originalCommit": "efcff23f0de73ebd568a1d05b112a311c24a0ac6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwNzQ5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r381807499", "bodyText": "Yes ,  in order to routiing to two different shards and  ensure that the total time was greater than 0.  As you said , 20 documents is enough.", "author": "zhichen", "createdAt": "2020-02-20T06:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyOTM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ff52c8083d9bdac3a1d1a6dceee8447da856535f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java b/server/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java\nindex c8a5ebf3f2a..5933b50f7df 100644\n--- a/server/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java\n+++ b/server/src/test/java/org/elasticsearch/indices/stats/IndexStatsIT.java\n\n@@ -1083,13 +1083,13 @@ public class IndexStatsIT extends ESIntegTestCase {\n             .put(\"index.number_of_replicas\", 1)));\n         ensureGreen();\n         final BulkRequest request1 = new BulkRequest();\n-        for (int i = 0; i < 500; ++i) {\n+        for (int i = 0; i < 20; ++i) {\n             request1.add(new IndexRequest(index).source(Collections.singletonMap(\"key\", \"value\" + i)))\n                 .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n         }\n         BulkResponse bulkResponse = client().bulk(request1).get();\n         assertThat(bulkResponse.hasFailures(), equalTo(false));\n-        assertThat(bulkResponse.getItems().length, equalTo(500));\n+        assertThat(bulkResponse.getItems().length, equalTo(20));\n         for (BulkItemResponse bulkItemResponse : bulkResponse) {\n             assertThat(bulkItemResponse.getIndex(), equalTo(index));\n         }\n"}}, {"oid": "ff52c8083d9bdac3a1d1a6dceee8447da856535f", "url": "https://github.com/elastic/elasticsearch/commit/ff52c8083d9bdac3a1d1a6dceee8447da856535f", "message": "Track the exponentially weighted moving average for the time and the size of shard bulk requests and modify bulk stats tests as mentioned in the review", "committedDate": "2020-02-20T06:34:52Z", "type": "commit"}, {"oid": "bbbd37062b9653c7d555ecf700d269eadce99d1c", "url": "https://github.com/elastic/elasticsearch/commit/bbbd37062b9653c7d555ecf700d269eadce99d1c", "message": "Track the exponentially weighted moving average for the time and the size of shard bulk requests and modify bulk stats tests as mentioned in the review", "committedDate": "2020-02-20T08:31:52Z", "type": "commit"}, {"oid": "7419f46da0b351b5240e5e9ff660b15fb0de1dd5", "url": "https://github.com/elastic/elasticsearch/commit/7419f46da0b351b5240e5e9ff660b15fb0de1dd5", "message": "Track the exponentially weighted moving average for the time and the size of shard bulk requests and modify bulk stats tests as mentioned in the review", "committedDate": "2020-02-20T09:35:53Z", "type": "commit"}, {"oid": "87fcdd61d478435ed07a1b9647068bfaada29f24", "url": "https://github.com/elastic/elasticsearch/commit/87fcdd61d478435ed07a1b9647068bfaada29f24", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-02-20T11:03:51Z", "type": "commit"}, {"oid": "ad28121a1526cb612ce2d37b6a571b12ef212418", "url": "https://github.com/elastic/elasticsearch/commit/ad28121a1526cb612ce2d37b6a571b12ef212418", "message": "fix bwc cat shard case.", "committedDate": "2020-02-20T15:54:25Z", "type": "commit"}, {"oid": "b32acaa8b5ee759b26a4e40c799fb4503ed261af", "url": "https://github.com/elastic/elasticsearch/commit/b32acaa8b5ee759b26a4e40c799fb4503ed261af", "message": "fix bwc cat shard case.", "committedDate": "2020-02-20T16:26:15Z", "type": "commit"}, {"oid": "5e07ed5177ea4ca3d0b74c9899bd3fe993341722", "url": "https://github.com/elastic/elasticsearch/commit/5e07ed5177ea4ca3d0b74c9899bd3fe993341722", "message": "fix bwc cat shard case.", "committedDate": "2020-02-21T02:13:16Z", "type": "commit"}, {"oid": "894331ae375cdb3632e6a35e5bd590565c646b95", "url": "https://github.com/elastic/elasticsearch/commit/894331ae375cdb3632e6a35e5bd590565c646b95", "message": "Merge branch 'master' into master", "committedDate": "2020-02-21T03:15:07Z", "type": "commit"}, {"oid": "2a7e06e0bf8275d538f7e06bd74fcba828db9f57", "url": "https://github.com/elastic/elasticsearch/commit/2a7e06e0bf8275d538f7e06bd74fcba828db9f57", "message": "Missing avg time in monitoring-es.json", "committedDate": "2020-02-21T04:25:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMTM3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r382721375", "bodyText": "I think rather than the null check above, it would be better to initialize these to new ExponentiallyWeightedMovingAverage(ALPHA, 0.0). We could then get rid of the null check in afterBulk(...) as well as stats()", "author": "dakrone", "createdAt": "2020-02-21T17:53:56Z", "path": "server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.bulk.stats;\n+\n+import org.elasticsearch.common.ExponentiallyWeightedMovingAverage;\n+import org.elasticsearch.common.metrics.CounterMetric;\n+import org.elasticsearch.common.metrics.MeanMetric;\n+import org.elasticsearch.index.shard.IndexShard;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Internal class that maintains relevant shard bulk statistics / metrics.\n+ * @see IndexShard\n+ */\n+public class ShardBulkStats implements BulkOperationListener {\n+\n+    private final StatsHolder totalStats = new StatsHolder();\n+    private static final double ALPHA = 0.1;\n+\n+    public BulkStats stats() {\n+        return totalStats.stats();\n+    }\n+\n+    @Override\n+    public void afterBulk(long shardBulkSizeInBytes, long tookInNanos) {\n+        totalStats.totalSizeInBytes.inc(shardBulkSizeInBytes);\n+        totalStats.shardBulkMetric.inc(tookInNanos);\n+        if (totalStats.timeInMillis == null) {\n+            totalStats.timeInMillis = new ExponentiallyWeightedMovingAverage(ALPHA, tookInNanos);\n+        } else {\n+            totalStats.timeInMillis.addValue(tookInNanos);\n+        }\n+        if (totalStats.sizeInBytes == null) {\n+            totalStats.sizeInBytes = new ExponentiallyWeightedMovingAverage(ALPHA, shardBulkSizeInBytes);\n+        } else {\n+            totalStats.sizeInBytes.addValue(shardBulkSizeInBytes);\n+        }\n+    }\n+\n+    static final class StatsHolder {\n+        final MeanMetric shardBulkMetric = new MeanMetric();\n+        final CounterMetric totalSizeInBytes = new CounterMetric();\n+        ExponentiallyWeightedMovingAverage timeInMillis;\n+        ExponentiallyWeightedMovingAverage sizeInBytes;", "originalCommit": "2a7e06e0bf8275d538f7e06bd74fcba828db9f57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyOTIzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r382729231", "bodyText": "@dakrone Thanks for reviewing .\nI used to do the same thing here as you mentioned, using initialAvg as 0.0, but when the first bulk request came in, it turned out to be 0.1 * newValue. I think this is not my desired results, so I became an first shard bulk statistics to initialize the EWMA.\nWhy do you think of 0.1 * newValue in line with expectations", "author": "zhichen", "createdAt": "2020-02-21T18:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNDcxNg==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r383414716", "bodyText": "I think I would prefer to have the average slowly build up over a period of requests rather than have the check for every bulk request? I need to benchmark this change prior to merging, so we can leave it as-is and see if the overhead is noticeable.", "author": "dakrone", "createdAt": "2020-02-24T17:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNzg1NA==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r383417854", "bodyText": "ok, I agree with you. What else do I need to do here? @dakrone", "author": "zhichen", "createdAt": "2020-02-24T17:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMjEwMA==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r383422100", "bodyText": "I need to benchmark this branch to see whether there is any overhead to the extra stat collecting.", "author": "dakrone", "createdAt": "2020-02-24T17:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMTM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNTY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52208#discussion_r383425642", "bodyText": "I just initialize ewma to new ExponentiallyWeightedMovingAverage(ALPHA, 0.0) and remove  null check in afterBulk(...) as well as stats() !  Does it matter \uff1f", "author": "zhichen", "createdAt": "2020-02-24T18:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMTM3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7a5e64c48a22bceebd63bffa7f9bbbf670ba56b1", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java b/server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java\nindex a5f10ac319d..db09a983198 100644\n--- a/server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java\n+++ b/server/src/main/java/org/elasticsearch/index/bulk/stats/ShardBulkStats.java\n\n@@ -43,31 +43,23 @@ public class ShardBulkStats implements BulkOperationListener {\n     public void afterBulk(long shardBulkSizeInBytes, long tookInNanos) {\n         totalStats.totalSizeInBytes.inc(shardBulkSizeInBytes);\n         totalStats.shardBulkMetric.inc(tookInNanos);\n-        if (totalStats.timeInMillis == null) {\n-            totalStats.timeInMillis = new ExponentiallyWeightedMovingAverage(ALPHA, tookInNanos);\n-        } else {\n-            totalStats.timeInMillis.addValue(tookInNanos);\n-        }\n-        if (totalStats.sizeInBytes == null) {\n-            totalStats.sizeInBytes = new ExponentiallyWeightedMovingAverage(ALPHA, shardBulkSizeInBytes);\n-        } else {\n-            totalStats.sizeInBytes.addValue(shardBulkSizeInBytes);\n-        }\n+        totalStats.timeInMillis.addValue(tookInNanos);\n+        totalStats.sizeInBytes.addValue(shardBulkSizeInBytes);\n     }\n \n     static final class StatsHolder {\n         final MeanMetric shardBulkMetric = new MeanMetric();\n         final CounterMetric totalSizeInBytes = new CounterMetric();\n-        ExponentiallyWeightedMovingAverage timeInMillis;\n-        ExponentiallyWeightedMovingAverage sizeInBytes;\n+        ExponentiallyWeightedMovingAverage timeInMillis = new ExponentiallyWeightedMovingAverage(ALPHA, 0.0);\n+        ExponentiallyWeightedMovingAverage sizeInBytes = new ExponentiallyWeightedMovingAverage(ALPHA, 0.0);\n \n         BulkStats stats() {\n             return new BulkStats(\n                 shardBulkMetric.count(),\n                 TimeUnit.NANOSECONDS.toMillis(shardBulkMetric.sum()),\n                 totalSizeInBytes.count(),\n-                timeInMillis == null ? 0L : TimeUnit.NANOSECONDS.toMillis((long) timeInMillis.getAverage()),\n-                sizeInBytes == null ? 0L : (long) sizeInBytes.getAverage());\n+                TimeUnit.NANOSECONDS.toMillis((long) timeInMillis.getAverage()),\n+                (long) sizeInBytes.getAverage());\n         }\n     }\n }\n"}}, {"oid": "7a5e64c48a22bceebd63bffa7f9bbbf670ba56b1", "url": "https://github.com/elastic/elasticsearch/commit/7a5e64c48a22bceebd63bffa7f9bbbf670ba56b1", "message": "initialize ewma to new ExponentiallyWeightedMovingAverage(ALPHA, 0.0)", "committedDate": "2020-02-24T17:55:31Z", "type": "commit"}, {"oid": "53642f46ba005b9e4500d8a4857d9de2b3cdf585", "url": "https://github.com/elastic/elasticsearch/commit/53642f46ba005b9e4500d8a4857d9de2b3cdf585", "message": "Merge branch 'master' into master", "committedDate": "2020-02-24T17:57:36Z", "type": "commit"}, {"oid": "9f2686fab13c2a3a7c6a53acd542c46f38eb73b7", "url": "https://github.com/elastic/elasticsearch/commit/9f2686fab13c2a3a7c6a53acd542c46f38eb73b7", "message": "Merge branch 'master' into master", "committedDate": "2020-03-16T15:59:52Z", "type": "commit"}, {"oid": "f6e3fb5efd9eca2bfe050e2c1d3ae91c9754ec84", "url": "https://github.com/elastic/elasticsearch/commit/f6e3fb5efd9eca2bfe050e2c1d3ae91c9754ec84", "message": "Merge branch 'master' into master", "committedDate": "2020-04-17T17:27:20Z", "type": "commit"}]}