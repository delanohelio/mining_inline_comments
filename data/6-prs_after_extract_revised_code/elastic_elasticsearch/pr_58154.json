{"pr_number": 58154, "pr_title": "Add include_data_streams flag for authorization", "pr_createdAt": "2020-06-16T00:29:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58154", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MTUyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r440671529", "bodyText": "I think we can move this method to IndicesRequest?", "author": "martijnvg", "createdAt": "2020-06-16T08:20:06Z", "path": "server/src/main/java/org/elasticsearch/action/IndicesRequest.java", "diffHunk": "@@ -45,5 +45,12 @@\n          * Sets the indices that the action relates to.\n          */\n         IndicesRequest indices(String... indices);\n+\n+        /**\n+         * Determines whether the action should be applied to data streams\n+         */\n+        default boolean includeDataStreams() {", "originalCommit": "e3a1644052a7174622f68e4879b07a00425b0f7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "279f4f43f7f9e112dab4e9e00301f7ae27dfda6e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/IndicesRequest.java b/server/src/main/java/org/elasticsearch/action/IndicesRequest.java\nindex 50d27acc05a..0bf302ae98d 100644\n--- a/server/src/main/java/org/elasticsearch/action/IndicesRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/IndicesRequest.java\n\n@@ -40,17 +40,17 @@ public interface IndicesRequest {\n      */\n     IndicesOptions indicesOptions();\n \n+    /**\n+     * Determines whether the action should be applied to data streams\n+     */\n+    default boolean includeDataStreams() {\n+        return false;\n+    }\n+\n     interface Replaceable extends IndicesRequest {\n         /**\n          * Sets the indices that the action relates to.\n          */\n         IndicesRequest indices(String... indices);\n-\n-        /**\n-         * Determines whether the action should be applied to data streams\n-         */\n-        default boolean includeDataStreams() {\n-            return false;\n-        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5OTMwMA==", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r441299300", "bodyText": "I think we should change the default here, because most indices based action will be supporting data streams.", "author": "martijnvg", "createdAt": "2020-06-17T06:02:22Z", "path": "server/src/main/java/org/elasticsearch/action/IndicesRequest.java", "diffHunk": "@@ -40,6 +40,13 @@\n      */\n     IndicesOptions indicesOptions();\n \n+    /**\n+     * Determines whether the action should be applied to data streams\n+     */\n+    default boolean includeDataStreams() {\n+        return false;", "originalCommit": "d02f15d51f11a239c3a474a470a38565669a996e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTU1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r441569555", "bodyText": "Let's keep the default to false. After all apis that need to support data stream resolution have been changed to do that, we can revisit what the default should be.", "author": "martijnvg", "createdAt": "2020-06-17T14:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5OTMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "9125043b084af89a91976197168b2cad709e41ea", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/IndicesRequest.java b/server/src/main/java/org/elasticsearch/action/IndicesRequest.java\nindex 0bf302ae98d..de11bb875e2 100644\n--- a/server/src/main/java/org/elasticsearch/action/IndicesRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/IndicesRequest.java\n\n@@ -41,7 +41,9 @@ public interface IndicesRequest {\n     IndicesOptions indicesOptions();\n \n     /**\n-     * Determines whether the action should be applied to data streams\n+     * Determines whether the request should be applied to data streams. When {@code false}, none of the names or\n+     * wildcard expressions in {@link #indices} should be applied to or expanded to any data streams. All layers\n+     * involved in the request's fulfillment including security, name resolution, etc., should respect this flag.\n      */\n     default boolean includeDataStreams() {\n         return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzNDA3NA==", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r441334074", "bodyText": "I think we should change this resolveLocalIndices() method here. I think we should change the indicesOptions parameter to request (and pass down the request from where it is being invoked).\nThen change the concreteIndices() method this method invokes. Remove the options and indexExpressions parameters and add request parameter (of type IndicesRequest). Then\nin the body of this method derive the indicesOptions and indices from the request parameter.", "author": "martijnvg", "createdAt": "2020-06-17T07:22:49Z", "path": "server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java", "diffHunk": "@@ -457,8 +457,8 @@ private void executeLocalSearch(Task task, SearchTimeProvider timeProvider, Sear\n         if (localIndices == null) {\n             return Index.EMPTY_ARRAY; //don't search on any local index (happens when only remote indices were specified)\n         }\n-        return indexNameExpressionResolver.concreteIndices(clusterState, indicesOptions, true,\n-            timeProvider.getAbsoluteStartMillis(), localIndices.indices());\n+        return indexNameExpressionResolver.concreteIndices(clusterState, indicesOptions, localIndices,", "originalCommit": "d02f15d51f11a239c3a474a470a38565669a996e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "279f4f43f7f9e112dab4e9e00301f7ae27dfda6e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java\nindex 75bf3b7d181..7ebcd4100fd 100644\n--- a/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java\n\n@@ -451,14 +451,12 @@ public class TransportSearchAction extends HandledTransportAction<SearchRequest,\n     }\n \n     private Index[] resolveLocalIndices(OriginalIndices localIndices,\n-                                IndicesOptions indicesOptions,\n                                 ClusterState clusterState,\n                                 SearchTimeProvider timeProvider) {\n         if (localIndices == null) {\n             return Index.EMPTY_ARRAY; //don't search on any local index (happens when only remote indices were specified)\n         }\n-        return indexNameExpressionResolver.concreteIndices(clusterState, indicesOptions, localIndices,\n-            timeProvider.getAbsoluteStartMillis());\n+        return indexNameExpressionResolver.concreteIndices(clusterState, localIndices, timeProvider.getAbsoluteStartMillis());\n     }\n \n     private void executeSearch(SearchTask task, SearchTimeProvider timeProvider, SearchRequest searchRequest,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzkyMw==", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r442427923", "bodyText": "I gave it more thought than it probably warrants.\nOverall I am OK with the change, but I would suggest we move this whole logic( if (entry.getValue().getType() != IndexAbstraction.Type.DATA_STREAM || includeDataStreams) {) to \n  \n    \n      elasticsearch/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java\n    \n    \n         Line 113\n      in\n      2925056\n    \n    \n    \n    \n\n        \n          \n           final ResolvedIndices.Builder resolvedIndicesBuilder = new ResolvedIndices.Builder(); \n        \n    \n  \n\n\nThis is the place where we deal with the entities (open/close indices and aliases) behind the \"authorised\" names, and I believe it would help us to keep complexity under control in an already messy spaghetti.", "author": "albertzaharovits", "createdAt": "2020-06-18T18:40:23Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java", "diffHunk": "@@ -500,15 +500,21 @@ GetUserPrivilegesResponse buildUserPrivilegesResponseObject(Role userRole) {\n         return new GetUserPrivilegesResponse(cluster, conditionalCluster, indices, application, runAs);\n     }\n \n-    static List<String> resolveAuthorizedIndicesFromRole(Role role, String action, Map<String, IndexAbstraction> aliasAndIndexLookup) {\n-        Predicate<String> predicate = role.allowedIndicesMatcher(action);\n+    static List<String> resolveAuthorizedIndicesFromRole(Role role, RequestInfo requestInfo, Map<String, IndexAbstraction> lookup) {\n+        Predicate<String> predicate = role.allowedIndicesMatcher(requestInfo.getAction());\n+\n+        // do not include data streams for actions that do not operate on data streams\n+        TransportRequest request = requestInfo.getRequest();\n+        boolean includeDataStreams = (request instanceof IndicesRequest) && ((IndicesRequest) request).includeDataStreams();\n \n         List<String> indicesAndAliases = new ArrayList<>();\n         // TODO: can this be done smarter? I think there are usually more indices/aliases in the cluster then indices defined a roles?\n-        for (Map.Entry<String, IndexAbstraction> entry : aliasAndIndexLookup.entrySet()) {\n+        for (Map.Entry<String, IndexAbstraction> entry : lookup.entrySet()) {\n             String aliasOrIndex = entry.getKey();\n             if (predicate.test(aliasOrIndex)) {\n-                indicesAndAliases.add(aliasOrIndex);\n+                if (entry.getValue().getType() != IndexAbstraction.Type.DATA_STREAM || includeDataStreams) {\n+                    indicesAndAliases.add(aliasOrIndex);\n+                }\n             }", "originalCommit": "d11c6c94742769ff22386935843963d5135da425", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMDAzMw==", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r442430033", "bodyText": "Would moving the logic to IndicesAndAliasesResolver still achieve the desired result? The problem is that all requests that implement IndicesRequest.Replaceable have their requested indices replaced with the result of the loadAuthorizedIndices call and this causes problems for the requests such as GET /_alias that do not (and should not) operate on data streams.", "author": "danhermann", "createdAt": "2020-06-18T18:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNDE2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r442434161", "bodyText": "What I mean is to move the whole processing on loadAuthorizedIndices, as you've proposed, over to the method in IndicesAndAliasesResolver. I think the outcome is the same, but it feels to me like a better place for these kind of processing on index names based on requests. Makes sense?", "author": "albertzaharovits", "createdAt": "2020-06-18T18:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/58154#discussion_r442435828", "bodyText": "Ah, thanks for the clarification. I will make that change.", "author": "danhermann", "createdAt": "2020-06-18T18:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "9125043b084af89a91976197168b2cad709e41ea", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java\nindex c9d807a18c3..99764879b80 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java\n\n@@ -507,17 +508,22 @@ public class RBACEngine implements AuthorizationEngine {\n         TransportRequest request = requestInfo.getRequest();\n         boolean includeDataStreams = (request instanceof IndicesRequest) && ((IndicesRequest) request).includeDataStreams();\n \n-        List<String> indicesAndAliases = new ArrayList<>();\n+        Set<String> indicesAndAliases = new HashSet<>();\n         // TODO: can this be done smarter? I think there are usually more indices/aliases in the cluster then indices defined a roles?\n         for (Map.Entry<String, IndexAbstraction> entry : lookup.entrySet()) {\n-            String aliasOrIndex = entry.getKey();\n-            if (predicate.test(aliasOrIndex)) {\n-                if (entry.getValue().getType() != IndexAbstraction.Type.DATA_STREAM || includeDataStreams) {\n-                    indicesAndAliases.add(aliasOrIndex);\n+            String indexAbstraction = entry.getKey();\n+            if (predicate.test(indexAbstraction)) {\n+                if (entry.getValue().getType() != IndexAbstraction.Type.DATA_STREAM) {\n+                    indicesAndAliases.add(indexAbstraction);\n+                } else if (includeDataStreams) {\n+                    // add data stream and its backing indices for any authorized data streams\n+                    indicesAndAliases.addAll(entry.getValue().getIndices().stream()\n+                        .map(i -> i.getIndex().getName()).collect(Collectors.toList()));\n+                    indicesAndAliases.add(indexAbstraction);\n                 }\n             }\n         }\n-        return Collections.unmodifiableList(indicesAndAliases);\n+        return Collections.unmodifiableList(new ArrayList<>(indicesAndAliases));\n     }\n \n     private void buildIndicesAccessControl(Authentication authentication, String action,\n"}}, {"oid": "279f4f43f7f9e112dab4e9e00301f7ae27dfda6e", "url": "https://github.com/elastic/elasticsearch/commit/279f4f43f7f9e112dab4e9e00301f7ae27dfda6e", "message": "add include_data_streams flag for authorization", "committedDate": "2020-07-02T18:29:10Z", "type": "forcePushed"}, {"oid": "9125043b084af89a91976197168b2cad709e41ea", "url": "https://github.com/elastic/elasticsearch/commit/9125043b084af89a91976197168b2cad709e41ea", "message": "add include_data_streams flag for authorization", "committedDate": "2020-07-03T03:00:07Z", "type": "commit"}, {"oid": "9125043b084af89a91976197168b2cad709e41ea", "url": "https://github.com/elastic/elasticsearch/commit/9125043b084af89a91976197168b2cad709e41ea", "message": "add include_data_streams flag for authorization", "committedDate": "2020-07-03T03:00:07Z", "type": "forcePushed"}, {"oid": "3bd06a87b7b1a7ab53518fdb01f58b3a0bb8c9a8", "url": "https://github.com/elastic/elasticsearch/commit/3bd06a87b7b1a7ab53518fdb01f58b3a0bb8c9a8", "message": "fix test", "committedDate": "2020-07-03T03:44:21Z", "type": "commit"}]}