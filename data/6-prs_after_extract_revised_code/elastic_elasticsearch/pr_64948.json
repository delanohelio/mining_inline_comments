{"pr_number": 64948, "pr_title": "Adding a warning header when a license is about to expire", "pr_createdAt": "2020-11-11T16:05:08Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64948", "timeline": [{"oid": "f85a62432d1cab0c24a5cf5b4b5efebe402c0f63", "url": "https://github.com/elastic/elasticsearch/commit/f85a62432d1cab0c24a5cf5b4b5efebe402c0f63", "message": "This change adds a warning header when a license is about to expire\n\nResolves #60562", "committedDate": "2020-11-11T16:03:48Z", "type": "commit"}, {"oid": "af38237928955e54cab5d6da544ffddfabab603f", "url": "https://github.com/elastic/elasticsearch/commit/af38237928955e54cab5d6da544ffddfabab603f", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-11T16:52:24Z", "type": "commit"}, {"oid": "70461a2b97617c8d0f6577f45afb4328e9b7b3f6", "url": "https://github.com/elastic/elasticsearch/commit/70461a2b97617c8d0f6577f45afb4328e9b7b3f6", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-11T16:59:18Z", "type": "commit"}, {"oid": "f6e3cebe217b738eafe41c272c1553b2d95cf676", "url": "https://github.com/elastic/elasticsearch/commit/f6e3cebe217b738eafe41c272c1553b2d95cf676", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-11T19:55:39Z", "type": "commit"}, {"oid": "e52f2318e01cf795d97f4c2f9a5422d12d4909a8", "url": "https://github.com/elastic/elasticsearch/commit/e52f2318e01cf795d97f4c2f9a5422d12d4909a8", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-12T09:41:38Z", "type": "commit"}, {"oid": "10029990758325d0400f7b2abc5a2607e4a99dbf", "url": "https://github.com/elastic/elasticsearch/commit/10029990758325d0400f7b2abc5a2607e4a99dbf", "message": "This change adds realm name of the realm used to perform authentication to the responses of _security/oidc/authenticate and _security/oidc/authenticate APIs\n\nResolves #53161", "committedDate": "2020-11-12T20:07:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NTU0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524965547", "bodyText": "s/avILble/available. Nit: also change the description of the Status class above to add the expiration date", "author": "jkakavas", "createdAt": "2020-11-17T08:25:13Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -400,9 +404,13 @@ private static boolean isBasic(OperationMode mode) {\n         /** True if the license is active, or false if it is expired. */\n         final boolean active;\n \n-        Status(OperationMode mode, boolean active) {\n+        /** The current expiration date of the license; Long.MAX_VALUE if not avILble yet. */", "originalCommit": "10029990758325d0400f7b2abc5a2607e4a99dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b1b8da48bd1baf0b67b14d28c3c14de634c5a93", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex c99f6b03f46..b06785566f3 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -404,7 +404,7 @@ public class XPackLicenseState {\n         /** True if the license is active, or false if it is expired. */\n         final boolean active;\n \n-        /** The current expiration date of the license; Long.MAX_VALUE if not avILble yet. */\n+        /** The current expiration date of the license; Long.MAX_VALUE if not available yet. */\n         final long licenseExpiryDate;\n \n         Status(OperationMode mode, boolean active, long licenseExpiryDate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MTM2NA==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524971364", "bodyText": "I think we'd need to access this by calling checkAgainstStatus instead of accessing the licenseExpiryDate  field directly", "author": "jkakavas", "createdAt": "2020-11-17T08:34:59Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -508,9 +517,18 @@ public boolean isActive() {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0\n+            && now > status.licenseExpiryDate - GRACE_PERIOD_DURATION.getMillis()) {", "originalCommit": "10029990758325d0400f7b2abc5a2607e4a99dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b1b8da48bd1baf0b67b14d28c3c14de634c5a93", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex c99f6b03f46..b06785566f3 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -522,8 +522,7 @@ public class XPackLicenseState {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n \n-        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0\n-            && now > status.licenseExpiryDate - GRACE_PERIOD_DURATION.getMillis()) {\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n             HeaderWarning.addWarning(\"Your license will expire in [{}] days. \" +\n                     \"Contact your administrator or update your license for continued use of features\",\n                 TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MjA5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524972097", "bodyText": "nit: if (feature....", "author": "jkakavas", "createdAt": "2020-11-17T08:36:14Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -508,9 +517,18 @@ public boolean isActive() {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0", "originalCommit": "10029990758325d0400f7b2abc5a2607e4a99dbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b1b8da48bd1baf0b67b14d28c3c14de634c5a93", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex c99f6b03f46..b06785566f3 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -522,8 +522,7 @@ public class XPackLicenseState {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n \n-        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0\n-            && now > status.licenseExpiryDate - GRACE_PERIOD_DURATION.getMillis()) {\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n             HeaderWarning.addWarning(\"Your license will expire in [{}] days. \" +\n                     \"Contact your administrator or update your license for continued use of features\",\n                 TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MzYxNg==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524973616", "bodyText": "I'm not sure about the wording here but I'll defer to a native speaker and maybe get Fabio's input too?\nMaybe s/update/renew ?  and s/for continued use of/in order to continue using the licensed ?", "author": "jkakavas", "createdAt": "2020-11-17T08:38:45Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -508,9 +517,18 @@ public boolean isActive() {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0\n+            && now > status.licenseExpiryDate - GRACE_PERIOD_DURATION.getMillis()) {\n+            HeaderWarning.addWarning(\"Your license will expire in [{}] days. \" +\n+                    \"Contact your administrator or update your license for continued use of features\",", "originalCommit": "10029990758325d0400f7b2abc5a2607e4a99dbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NzM3MA==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524997370", "bodyText": "This is the wording Kibana has. I talked to Fabio and he suggested us to be consistant with wording when possible.", "author": "BigPandaToo", "createdAt": "2020-11-17T09:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MzYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5Nzg3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r524997876", "bodyText": "SGTM then!", "author": "jkakavas", "createdAt": "2020-11-17T09:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MzYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "7b1b8da48bd1baf0b67b14d28c3c14de634c5a93", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex c99f6b03f46..b06785566f3 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -522,8 +522,7 @@ public class XPackLicenseState {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n \n-        if(feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0\n-            && now > status.licenseExpiryDate - GRACE_PERIOD_DURATION.getMillis()) {\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n             HeaderWarning.addWarning(\"Your license will expire in [{}] days. \" +\n                     \"Contact your administrator or update your license for continued use of features\",\n                 TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now));\n"}}, {"oid": "7b1b8da48bd1baf0b67b14d28c3c14de634c5a93", "url": "https://github.com/elastic/elasticsearch/commit/7b1b8da48bd1baf0b67b14d28c3c14de634c5a93", "message": "Adding doc for the new API introduced by #64517 - /_security/saml/metadata/{realm}\n\nRelated to #49018", "committedDate": "2020-11-17T21:47:44Z", "type": "commit"}, {"oid": "ffcd72bed08f16f5d9603a0cb2e9885955a86a95", "url": "https://github.com/elastic/elasticsearch/commit/ffcd72bed08f16f5d9603a0cb2e9885955a86a95", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-17T22:37:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDkwMg==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r525994902", "bodyText": "If we're in the grace period, shouldn't this say has expired ?", "author": "tvernum", "createdAt": "2020-11-18T10:56:54Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -508,9 +517,17 @@ public boolean isActive() {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n+            HeaderWarning.addWarning(\"Your license will expire in [{}] days. \" +", "originalCommit": "ffcd72bed08f16f5d9603a0cb2e9885955a86a95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAwMDA4OA==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r526000088", "bodyText": "I'll double-check with Fabio. This is the only message Kibana has and the idea was to be consistent when possible.", "author": "BigPandaToo", "createdAt": "2020-11-18T11:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA4MDY5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r526080695", "bodyText": "I don't think we have a grace period anymore. AFAIK we have warnings before the expiration date, and no service after that. Could you please double check what isLicenseExpiring() assumes?", "author": "bytebilly", "createdAt": "2020-11-18T13:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4MDI1OA==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r526580258", "bodyText": "We still have a grace period. We may not in the future, but we do now.", "author": "tvernum", "createdAt": "2020-11-19T04:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY2MTYxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r526661615", "bodyText": "(sorry I cannot find the description of the full approach, so it may be already this)\nWhat about having two separate checks with two separate messages?\n\n7 days before expiration \u2014\u00a0expiration: \"will expire in N days\"\nexpiration \u2014\u00a0end of grace period: \"has expired N days ago\"", "author": "bytebilly", "createdAt": "2020-11-19T08:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMDMyNw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527130327", "bodyText": "I changed the behaviour to have 3 different messages:\n\n7 days before expiration \u2014 expiration: \"will expire in N days\"\n<1 days before expiration: \"expires today\"\n\n\nexpiration: \"has expired N days ago\"\n\n\n\nIf grace period is over this code should be irrelevant as the license is not active.", "author": "BigPandaToo", "createdAt": "2020-11-19T19:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMTkzNg==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527131936", "bodyText": "Also, addad a test", "author": "BigPandaToo", "createdAt": "2020-11-19T19:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex b06785566f3..24e43f9098d 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -514,6 +516,7 @@ public class XPackLicenseState {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NTMzNg==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r525995336", "bodyText": "Why is this dependent on the GRACE_PERIOD ? It seems to be a co-incidence that they're both 7days, but they shouldn't be tied to one another.", "author": "tvernum", "createdAt": "2020-11-18T10:57:35Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -627,6 +644,22 @@ public boolean isAllowedByLicense(OperationMode minimumMode, boolean needActive)\n         });\n     }\n \n+    /**\n+     * Test whether current license expires in less than {@code GRACE_PERIOD_DURATION}.", "originalCommit": "ffcd72bed08f16f5d9603a0cb2e9885955a86a95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAwMDczOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r526000739", "bodyText": "Good point, I'll add new const", "author": "BigPandaToo", "createdAt": "2020-11-18T11:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NTMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex b06785566f3..24e43f9098d 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -645,15 +651,15 @@ public class XPackLicenseState {\n     }\n \n     /**\n-     * Test whether current license expires in less than {@code GRACE_PERIOD_DURATION}.\n+     * Test whether current license expires in less than {@code LICENSE_EXPIRATION_WARNING_PERIOD}.\n      *\n      * @param now  Current time in milliseconds\n      *\n-     * @return true if current license expires in less than {@code GRACE_PERIOD_DURATION}, otherwise false\n+     * @return true if current license expires in less than {@code LICENSE_EXPIRATION_WARNING_PERIOD}, otherwise false\n      */\n     public boolean isLicenseExpiring(long now) {\n         return checkAgainstStatus(status -> {\n-            if (now > status.licenseExpiryDate - GRACE_PERIOD_DURATION.getMillis()) {\n+            if (now > status.licenseExpiryDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n                 return true;\n             }\n             return false;\n"}}, {"oid": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "url": "https://github.com/elastic/elasticsearch/commit/34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "message": "Adding a warning header when a license is about to expire\n\nResolves #60562", "committedDate": "2020-11-19T18:39:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4NzcxMw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527587713", "bodyText": "Given what this does, would it make sense to name it shouldWarnAboutLicense() ?", "author": "jkakavas", "createdAt": "2020-11-20T10:12:25Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -627,6 +650,22 @@ public boolean isAllowedByLicense(OperationMode minimumMode, boolean needActive)\n         });\n     }\n \n+    /**\n+     * Test whether current license expires in less than {@code LICENSE_EXPIRATION_WARNING_PERIOD}.\n+     *\n+     * @param now  Current time in milliseconds\n+     *\n+     * @return true if current license expires in less than {@code LICENSE_EXPIRATION_WARNING_PERIOD}, otherwise false\n+     */\n+    public boolean isLicenseExpiring(long now) {", "originalCommit": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 24e43f9098d..b0b22da2571 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -650,20 +636,9 @@ public class XPackLicenseState {\n         });\n     }\n \n-    /**\n-     * Test whether current license expires in less than {@code LICENSE_EXPIRATION_WARNING_PERIOD}.\n-     *\n-     * @param now  Current time in milliseconds\n-     *\n-     * @return true if current license expires in less than {@code LICENSE_EXPIRATION_WARNING_PERIOD}, otherwise false\n-     */\n-    public boolean isLicenseExpiring(long now) {\n-        return checkAgainstStatus(status -> {\n-            if (now > status.licenseExpiryDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n-                return true;\n-            }\n-            return false;\n-        });\n+    /** Return the current license expiration date. */\n+    public long getLicenseExpiryDate() {\n+        return executeAgainstStatus(status -> status.licenseExpiryDate);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5NjExNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527596115", "bodyText": "Do we have to do the double update dance here? setLicensingExpirationDate is the only thing that calls update with anything other than Long.MAX_VALUE, what cluster state could trigger the license state (Expiration date) to change ?", "author": "jkakavas", "createdAt": "2020-11-20T10:26:44Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -235,8 +293,42 @@ private void enableLicensing(License.OperationMode operationMode) throws Excepti\n             // re-apply the update in case any node received an updated cluster state that triggered the license state\n             // to change\n             for (XPackLicenseState licenseState : internalCluster().getInstances(XPackLicenseState.class)) {\n-                licenseState.update(operationMode, true, null);\n+                licenseState.update(operationMode, true, Long.MAX_VALUE, null);\n             }\n         }, 30L, TimeUnit.SECONDS);\n     }\n+\n+    private void setLicensingExpirationDate(License.OperationMode operationMode, long expirationDate) throws Exception {\n+        // do this in an await busy since there is a chance that the setting expiration date of the license is\n+        // overwritten by some other cluster activity and the node throws an exception while we\n+        // wait for things to stabilize!\n+        assertBusy(() -> {\n+            // first update the license so we can execute monitoring actions", "originalCommit": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0NDk4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r528944987", "bodyText": "Probably, not. Removed the second update, left hte assertBusy though.", "author": "BigPandaToo", "createdAt": "2020-11-23T19:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5NjExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb", "chunk": "diff --git a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\nindex 9fcb3e41542..824edc97b2c 100644\n--- a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n+++ b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n\n@@ -299,11 +299,7 @@ public class LicensingTests extends SecurityIntegTestCase {\n     }\n \n     private void setLicensingExpirationDate(License.OperationMode operationMode, long expirationDate) throws Exception {\n-        // do this in an await busy since there is a chance that the setting expiration date of the license is\n-        // overwritten by some other cluster activity and the node throws an exception while we\n-        // wait for things to stabilize!\n         assertBusy(() -> {\n-            // first update the license so we can execute monitoring actions\n             for (XPackLicenseState licenseState : internalCluster().getInstances(XPackLicenseState.class)) {\n                 licenseState.update(operationMode, true, expirationDate, null);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwNjM4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527606385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final String expiryMessage = days == 0? \"expires today\":\n          \n          \n            \n                        final String expiryMessage = days == 0 ? \"expires today\" :", "author": "jkakavas", "createdAt": "2020-11-20T10:44:06Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -505,12 +516,24 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":", "originalCommit": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 24e43f9098d..b0b22da2571 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -525,15 +520,6 @@ public class XPackLicenseState {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n \n-        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n-            final long days = TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now);\n-            final String expiryMessage = days == 0? \"expires today\":\n-                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n-                String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));\n-            HeaderWarning.addWarning(\"Your license {}. \" +\n-                    \"Contact your administrator or update your license for continued use of features\", expiryMessage);\n-        }\n-\n         return allowed;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwNjc3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r527606773", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n          \n          \n            \n                            (days > 0 ? String.format(Locale.ROOT, \"will expire in [%d] days\", days):", "author": "jkakavas", "createdAt": "2020-11-20T10:44:48Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -505,12 +516,24 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":\n+                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):", "originalCommit": "34efa0e099fa6d7f7dc174aeadb1c2dbe992a94e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 24e43f9098d..b0b22da2571 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -525,15 +520,6 @@ public class XPackLicenseState {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n \n-        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 && isLicenseExpiring(now)) {\n-            final long days = TimeUnit.MILLISECONDS.toDays(status.licenseExpiryDate - now);\n-            final String expiryMessage = days == 0? \"expires today\":\n-                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n-                String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));\n-            HeaderWarning.addWarning(\"Your license {}. \" +\n-                    \"Contact your administrator or update your license for continued use of features\", expiryMessage);\n-        }\n-\n         return allowed;\n     }\n \n"}}, {"oid": "fbbd2fa2363e6711c47837769dfe33e0e38b125c", "url": "https://github.com/elastic/elasticsearch/commit/fbbd2fa2363e6711c47837769dfe33e0e38b125c", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-23T16:05:16Z", "type": "commit"}, {"oid": "a57d4b163070c635f73eec402e0fd2842e887650", "url": "https://github.com/elastic/elasticsearch/commit/a57d4b163070c635f73eec402e0fd2842e887650", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-23T17:17:23Z", "type": "commit"}, {"oid": "1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb", "url": "https://github.com/elastic/elasticsearch/commit/1ecfa75beb0ef3fe218bf5f6c9e28ae4297c7bfb", "message": "Addressing the PR feedback", "committedDate": "2020-11-23T20:13:41Z", "type": "commit"}, {"oid": "1ed1cb2741104d21cdb6458403a9a672ad26b65a", "url": "https://github.com/elastic/elasticsearch/commit/1ed1cb2741104d21cdb6458403a9a672ad26b65a", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-26T10:19:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMjY4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r530932686", "bodyText": "Not necessary?  This method doesn't appear to use Math.abs().", "author": "droberts195", "createdAt": "2020-11-26T10:37:38Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -507,12 +513,15 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")", "originalCommit": "1ed1cb2741104d21cdb6458403a9a672ad26b65a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NjkzMw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r530966933", "bodyText": "Leftover from the previous iteration, but will come back handy with the next one )", "author": "BigPandaToo", "createdAt": "2020-11-26T11:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMjY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "07fa3e2d67ea5250e0c9dce9ca8688f3b632f8b3", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 60dd82ffce7..9a0bc7228c2 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -518,10 +523,21 @@ public class XPackLicenseState {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n         long now = System.currentTimeMillis();\n+        long licenseExpirationDate = getLicenseExpiryDate();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n \n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n+            now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":\n+                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n+                    String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));\n+            HeaderWarning.addWarning(\"Your license {}. \" +\n+                \"Contact your administrator or update your license for continued use of features\", expiryMessage);\n+        }\n+\n         return allowed;\n     }\n \n"}}, {"oid": "80ca874c54b20bec12bf7d8c914ba3f21fa546e1", "url": "https://github.com/elastic/elasticsearch/commit/80ca874c54b20bec12bf7d8c914ba3f21fa546e1", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-26T11:23:23Z", "type": "commit"}, {"oid": "07fa3e2d67ea5250e0c9dce9ca8688f3b632f8b3", "url": "https://github.com/elastic/elasticsearch/commit/07fa3e2d67ea5250e0c9dce9ca8688f3b632f8b3", "message": "Switching back to adding the header during featureCheck to allow\nwarnings when authentication is disabled as well. Adding filterHeader\nimplementation to SecurityRestFilter exception handling to remove all\nthe warnings if authentication fails.", "committedDate": "2020-11-26T18:26:59Z", "type": "commit"}, {"oid": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8", "url": "https://github.com/elastic/elasticsearch/commit/39e7ca7b5d29c8efa4519895b67d4843f387d3f8", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-11-30T19:17:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NjMwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533096305", "bodyText": "For expired licenses, I think it's preferable to just print out the date that is expired, rather than calculate how lonh ago that was.\nThat's what the log warning does and it seems neater for this case.\n\nLICENSE [EXPIRED] ON [SUNDAY, NOVEMBER 29, 2020]\n\nThe number of days makes sense for \"will expire\" because it creates a sense of urgency, but once it's expired I think the date is a better option.", "author": "tvernum", "createdAt": "2020-12-01T06:17:11Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -507,12 +518,26 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n+        long licenseExpirationDate = getLicenseExpiryDate();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n+            now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":\n+                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n+                    String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));", "originalCommit": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MDk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533690997", "bodyText": "Changed the wording to \"license expired on [EEEE, MMMM DD, YYYY]\". For the sace of keeping the headers relatively short kept the rest of the message the same.", "author": "BigPandaToo", "createdAt": "2020-12-01T20:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NjMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d27df6f4d69e968dc39e417ef3abafc441ffa4cb", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 9a0bc7228c2..2b0ca8c69ca 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -522,18 +522,18 @@ public class XPackLicenseState {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n-        long now = System.currentTimeMillis();\n-        long licenseExpirationDate = getLicenseExpiryDate();\n+        final long licenseExpiryDate = getLicenseExpiryDate();\n+        final long diff = licenseExpiryDate - System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n \n         if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n-            now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n-            final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n-            final String expiryMessage = days == 0? \"expires today\":\n-                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n-                    String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));\n+            LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() > diff) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(diff);\n+            final String expiryMessage = (days == 0 && diff > 0)? \"expires today\":\n+                (diff > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n+                    String.format(Locale.ROOT, \"expired on [%s]\", LicenseService.DATE_FORMATTER.formatMillis(licenseExpiryDate)));\n             HeaderWarning.addWarning(\"Your license {}. \" +\n                 \"Contact your administrator or update your license for continued use of features\", expiryMessage);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODE0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533098149", "bodyText": "I think we should be doing the first round of calculations in millis, not in days otherwise we potentially says \"expires today\" after the expiry date (because it's less than 1 day expired)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n          \n          \n            \n                        now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n          \n          \n            \n                        final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n          \n          \n            \n                        final String expiryMessage = days == 0? \"expires today\":\n          \n          \n            \n                            (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n          \n          \n            \n                                String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));\n          \n          \n            \n                \n          \n          \n            \n                    if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0) {\n          \n          \n            \n                        final long expiryMillis = licenseExpirationDate - now;        \n          \n          \n            \n                        if (expiryMillis < LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n          \n          \n            \n                            final String expiryMessage;\n          \n          \n            \n                            if (expiryMillis <= 0) {\n          \n          \n            \n                                expiryMessage = \"expired on [\" + DATE_FORMATTER.formatMillis(expirationMillis) + \"]\";\n          \n          \n            \n                            } else {\n          \n          \n            \n                                final long days = TimeUnit.MILLISECONDS.toDays(expiryMillis);\n          \n          \n            \n                                expiryMessage = days == 0 ? \"expires today\": \n          \n          \n            \n                                   String.format(Locale.ROOT, \"will expire in [%d] days\", days);\n          \n          \n            \n                            }", "author": "tvernum", "createdAt": "2020-12-01T06:23:02Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -507,12 +518,26 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        long now = System.currentTimeMillis();\n+        long licenseExpirationDate = getLicenseExpiryDate();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n+            now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n+            final String expiryMessage = days == 0? \"expires today\":\n+                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n+                    String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));", "originalCommit": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MTE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533691166", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-12-01T20:11:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d27df6f4d69e968dc39e417ef3abafc441ffa4cb", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 9a0bc7228c2..2b0ca8c69ca 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -522,18 +522,18 @@ public class XPackLicenseState {\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n-        long now = System.currentTimeMillis();\n-        long licenseExpirationDate = getLicenseExpiryDate();\n+        final long licenseExpiryDate = getLicenseExpiryDate();\n+        final long diff = licenseExpiryDate - System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n \n         if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n-            now >  licenseExpirationDate - LICENSE_EXPIRATION_WARNING_PERIOD.getMillis()) {\n-            final long days = TimeUnit.MILLISECONDS.toDays(licenseExpirationDate - now);\n-            final String expiryMessage = days == 0? \"expires today\":\n-                (days > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n-                    String.format(Locale.ROOT, \"has expired [%d] days ago\", Math.abs(days)));\n+            LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() > diff) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(diff);\n+            final String expiryMessage = (days == 0 && diff > 0)? \"expires today\":\n+                (diff > 0? String.format(Locale.ROOT, \"will expire in [%d] days\", days):\n+                    String.format(Locale.ROOT, \"expired on [%s]\", LicenseService.DATE_FORMATTER.formatMillis(licenseExpiryDate)));\n             HeaderWarning.addWarning(\"Your license {}. \" +\n                 \"Contact your administrator or update your license for continued use of features\", expiryMessage);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODk2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533098963", "bodyText": "Do we have a test for this anywhere?", "author": "tvernum", "createdAt": "2020-12-01T06:25:31Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java", "diffHunk": "@@ -100,6 +102,14 @@ private void handleException(String actionType, RestRequest request, RestChannel\n                 @Override\n                 protected boolean skipStackTrace() { return restStatus == RestStatus.UNAUTHORIZED; }\n \n+                @Override\n+                public Map<String, List<String>> filterHeaders(Map<String, List<String>> headers) {\n+                    if (headers.containsKey(\"Warning\")) {\n+                        return Maps.copyMapWithRemovedEntry(headers, \"Warning\");\n+                    }\n+                    return headers;\n+                }\n+", "originalCommit": "39e7ca7b5d29c8efa4519895b67d4843f387d3f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MTYzMw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r533691633", "bodyText": "Added a test to verify Warnings are removed if authN fails.", "author": "BigPandaToo", "createdAt": "2020-12-01T20:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODk2Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d27df6f4d69e968dc39e417ef3abafc441ffa4cb", "url": "https://github.com/elastic/elasticsearch/commit/d27df6f4d69e968dc39e417ef3abafc441ffa4cb", "message": "Changing the wording for \"expired\" message to be consistent with the log\n messages; changing \"today\" calculation; adding a test case for failing\n authN to make sure we remove the warning header", "committedDate": "2020-12-01T19:42:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMTY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r534701659", "bodyText": "In general we prefer to use Matcher based assertions because they provide better context when something fails.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(afterWarningHeaders.size() == 1);\n          \n          \n            \n                    assertTrue(afterWarningHeaders.stream().anyMatch(v ->v.contains(\"Your license will expire in [6] days. \" +\n          \n          \n            \n                        \"Contact your administrator or update your license for continued use of features\")));\n          \n          \n            \n                    assertThat(afterWarningHeaders, Matchers.hasSize(1));\n          \n          \n            \n                    assertThat(afterWarningHeaders, Matchers.contains(\"Your license will expire in [6] days. \" +\n          \n          \n            \n                        \"Contact your administrator or update your license for continued use of features\"));\n          \n      \n    \n    \n  \n\n(Although, technically, the first assertion is redundant, because the `contains matcher already checks size)", "author": "tvernum", "createdAt": "2020-12-03T05:59:21Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -192,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        Response response = getRestClient().performRequest(request);\n+\n+        List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(beforeWarningHeaders.isEmpty());\n+\n+        License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n+            License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n+        long now = System.currentTimeMillis();\n+        long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(afterWarningHeaders.size() == 1);\n+        assertTrue(afterWarningHeaders.stream().anyMatch(v ->v.contains(\"Your license will expire in [6] days. \" +\n+            \"Contact your administrator or update your license for continued use of features\")));", "originalCommit": "d27df6f4d69e968dc39e417ef3abafc441ffa4cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "chunk": "diff --git a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\nindex b5e93d2e836..f3e7a9b2777 100644\n--- a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n+++ b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n\n@@ -225,9 +225,9 @@ public class LicensingTests extends SecurityIntegTestCase {\n \n         List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n \n-        assertTrue(afterWarningHeaders.size() == 1);\n-        assertTrue(afterWarningHeaders.stream().anyMatch(v ->v.contains(\"Your license will expire in [6] days. \" +\n-            \"Contact your administrator or update your license for continued use of features\")));\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now + 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n"}}, {"oid": "a3f2eba6fbe9239d9bfc67dcb0c0f55cacd29126", "url": "https://github.com/elastic/elasticsearch/commit/a3f2eba6fbe9239d9bfc67dcb0c0f55cacd29126", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-12-03T17:52:59Z", "type": "commit"}, {"oid": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "url": "https://github.com/elastic/elasticsearch/commit/b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "message": "Small changes in the way we verify header in tests", "committedDate": "2020-12-03T18:58:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODQ5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535948497", "bodyText": "Do we want to remove all warning headers on authentication failure?", "author": "jkakavas", "createdAt": "2020-12-04T09:14:39Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java", "diffHunk": "@@ -100,6 +102,14 @@ private void handleException(String actionType, RestRequest request, RestChannel\n                 @Override\n                 protected boolean skipStackTrace() { return restStatus == RestStatus.UNAUTHORIZED; }\n \n+                @Override\n+                public Map<String, List<String>> filterHeaders(Map<String, List<String>> headers) {\n+                    if (headers.containsKey(\"Warning\")) {", "originalCommit": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NzM5NA==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535997394", "bodyText": "Yes, it is intentional (see Tim's comment above). If Authentication fails it does make sense to not reveal any additional information", "author": "BigPandaToo", "createdAt": "2020-12-04T10:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODQ5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MDA0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535950041", "bodyText": "I think you can use a randomAlphaNumericOfLength , or a permutation of TEST_PASSWORD plus some random string for whenever we need this, other than defining it here. That's just personal preference, no strong views, feel free to keep as is if you prefer it", "author": "jkakavas", "createdAt": "2020-12-04T09:16:56Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/test/SecuritySettingsSourceField.java", "diffHunk": "@@ -10,6 +10,7 @@\n public final class SecuritySettingsSourceField {\n     public static final SecureString TEST_PASSWORD_SECURE_STRING = new SecureString(\"x-pack-test-password\".toCharArray());\n     public static final String TEST_PASSWORD = \"x-pack-test-password\";\n+    public static final String TEST_INVALID_PASSWORD = \"invalid-test-password\";", "originalCommit": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MDg2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535950861", "bodyText": "use assertThat ?", "author": "jkakavas", "createdAt": "2020-12-04T09:18:15Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -190,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        Response response = getRestClient().performRequest(request);\n+\n+        List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(beforeWarningHeaders.isEmpty());", "originalCommit": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dc8b9c80857634bd34794740d64f0f4440b7074", "chunk": "diff --git a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\nindex f3e7a9b2777..d54035bd57f 100644\n--- a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n+++ b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n\n@@ -208,45 +208,33 @@ public class LicensingTests extends SecurityIntegTestCase {\n         options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n             new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n         request.setOptions(options);\n-\n         Response response = getRestClient().performRequest(request);\n-\n         List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n-\n         assertTrue(beforeWarningHeaders.isEmpty());\n-\n         License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n             License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n         long now = System.currentTimeMillis();\n+\n         long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n             \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now + 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license expires today. \" +\n             \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now - 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         long finalNewExpirationDate = newExpirationDate;\n         String expiredMessage = String.format(Locale.ROOT, \"Your license expired on [%s]. \",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MTI2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535951265", "bodyText": "nit: Do we need all the empty lines?", "author": "jkakavas", "createdAt": "2020-12-04T09:18:50Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -190,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+", "originalCommit": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dc8b9c80857634bd34794740d64f0f4440b7074", "chunk": "diff --git a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\nindex f3e7a9b2777..d54035bd57f 100644\n--- a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n+++ b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n\n@@ -208,45 +208,33 @@ public class LicensingTests extends SecurityIntegTestCase {\n         options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n             new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n         request.setOptions(options);\n-\n         Response response = getRestClient().performRequest(request);\n-\n         List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n-\n         assertTrue(beforeWarningHeaders.isEmpty());\n-\n         License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n             License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n         long now = System.currentTimeMillis();\n+\n         long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n             \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now + 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license expires today. \" +\n             \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now - 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         long finalNewExpirationDate = newExpirationDate;\n         String expiredMessage = String.format(Locale.ROOT, \"Your license expired on [%s]. \",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1NjQzMg==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535956432", "bodyText": "I Guess we are fine with the message in warnigns and subtleties of toDays and being close to midnight in a given timezone , right? I think we are, just asking for completeness.", "author": "jkakavas", "createdAt": "2020-12-04T09:26:50Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -509,12 +520,26 @@ public boolean isActive() {\n     /**\n      * Checks whether the given feature is allowed, tracking the last usage time.\n      */\n+    @SuppressForbidden(reason = \"Argument to Math.abs() is definitely not Long.MIN_VALUE\")\n     public boolean checkFeature(Feature feature) {\n         boolean allowed = isAllowed(feature);\n         LongAccumulator maxEpochAccumulator = lastUsed.get(feature);\n+        final long licenseExpiryDate = getLicenseExpiryDate();\n+        final long diff = licenseExpiryDate - System.currentTimeMillis();\n         if (maxEpochAccumulator != null) {\n             maxEpochAccumulator.accumulate(epochMillisProvider.getAsLong());\n         }\n+\n+        if (feature.minimumOperationMode.compareTo(OperationMode.BASIC) > 0 &&\n+            LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() > diff) {\n+            final long days = TimeUnit.MILLISECONDS.toDays(diff);", "originalCommit": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNTcwNw==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r536005707", "bodyText": "I believe we are :)", "author": "BigPandaToo", "createdAt": "2020-12-04T10:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1NjQzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1ODE1NA==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535958154", "bodyText": "use assertThat ?", "author": "jkakavas", "createdAt": "2020-12-04T09:29:24Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -190,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        Response response = getRestClient().performRequest(request);\n+\n+        List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(beforeWarningHeaders.isEmpty());\n+\n+        License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n+            License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n+        long now = System.currentTimeMillis();\n+        long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+\n+        newExpirationDate = now + 300000;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license expires today. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+\n+        newExpirationDate = now - 300000;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        long finalNewExpirationDate = newExpirationDate;\n+        String expiredMessage = String.format(Locale.ROOT, \"Your license expired on [%s]. \",\n+            LicenseService.DATE_FORMATTER.formatMillis(finalNewExpirationDate));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(expiredMessage +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+    }\n+\n+    public void testWarningHeaderAuthenticationFailed() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_INVALID_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n+            License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n+        long now = System.currentTimeMillis();\n+        long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+        Header[] headers = null;\n+        try {\n+            getRestClient().performRequest(request);\n+        } catch (ResponseException e) {\n+            headers = e.getResponse().getHeaders();\n+            List<String> afterWarningHeaders= getWarningHeaders(e.getResponse().getHeaders());\n+            assertThat(afterWarningHeaders, Matchers.hasSize(0));\n+        }\n+        assertTrue(headers != null && headers.length == 3);", "originalCommit": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dc8b9c80857634bd34794740d64f0f4440b7074", "chunk": "diff --git a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\nindex f3e7a9b2777..d54035bd57f 100644\n--- a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n+++ b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n\n@@ -208,45 +208,33 @@ public class LicensingTests extends SecurityIntegTestCase {\n         options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n             new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n         request.setOptions(options);\n-\n         Response response = getRestClient().performRequest(request);\n-\n         List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n-\n         assertTrue(beforeWarningHeaders.isEmpty());\n-\n         License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n             License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n         long now = System.currentTimeMillis();\n+\n         long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n             \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now + 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license expires today. \" +\n             \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now - 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         long finalNewExpirationDate = newExpirationDate;\n         String expiredMessage = String.format(Locale.ROOT, \"Your license expired on [%s]. \",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1ODYzMg==", "url": "https://github.com/elastic/elasticsearch/pull/64948#discussion_r535958632", "bodyText": "nit suggestion : testNoWarningHeaderWhenAuthenticationFailed", "author": "jkakavas", "createdAt": "2020-12-04T09:30:07Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java", "diffHunk": "@@ -190,6 +202,82 @@ public void testNodeJoinWithoutSecurityExplicitlyEnabled() throws Exception {\n         }\n     }\n \n+    public void testWarningHeader() throws Exception {\n+        Request request = new Request(\"GET\", \"/_security/user\");\n+        RequestOptions.Builder options = request.getOptions().toBuilder();\n+        options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n+            new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n+        request.setOptions(options);\n+\n+        Response response = getRestClient().performRequest(request);\n+\n+        List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n+\n+        assertTrue(beforeWarningHeaders.isEmpty());\n+\n+        License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n+            License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n+        long now = System.currentTimeMillis();\n+        long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+\n+        newExpirationDate = now + 300000;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license expires today. \" +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+\n+        newExpirationDate = now - 300000;\n+        setLicensingExpirationDate(mode, newExpirationDate);\n+\n+        response = getRestClient().performRequest(request);\n+\n+        afterWarningHeaders= getWarningHeaders(response.getHeaders());\n+\n+        assertThat(afterWarningHeaders, Matchers.hasSize(1));\n+        long finalNewExpirationDate = newExpirationDate;\n+        String expiredMessage = String.format(Locale.ROOT, \"Your license expired on [%s]. \",\n+            LicenseService.DATE_FORMATTER.formatMillis(finalNewExpirationDate));\n+        assertThat(afterWarningHeaders.get(0), Matchers.containsString(expiredMessage +\n+            \"Contact your administrator or update your license for continued use of features\"));\n+    }\n+\n+    public void testWarningHeaderAuthenticationFailed() throws Exception {", "originalCommit": "b8773e3ca0aa2d03e11f9ae14c91049afef922b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dc8b9c80857634bd34794740d64f0f4440b7074", "chunk": "diff --git a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\nindex f3e7a9b2777..d54035bd57f 100644\n--- a/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n+++ b/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/license/LicensingTests.java\n\n@@ -208,45 +208,33 @@ public class LicensingTests extends SecurityIntegTestCase {\n         options.addHeader(\"Authorization\", basicAuthHeaderValue(SecuritySettingsSource.TEST_USER_NAME,\n             new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray())));\n         request.setOptions(options);\n-\n         Response response = getRestClient().performRequest(request);\n-\n         List<String> beforeWarningHeaders = getWarningHeaders(response.getHeaders());\n-\n         assertTrue(beforeWarningHeaders.isEmpty());\n-\n         License.OperationMode mode = randomFrom(License.OperationMode.GOLD, License.OperationMode.PLATINUM,\n             License.OperationMode.ENTERPRISE, License.OperationMode.STANDARD);\n         long now = System.currentTimeMillis();\n+\n         long newExpirationDate = now + LICENSE_EXPIRATION_WARNING_PERIOD.getMillis() - 1;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         List<String> afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license will expire in [6] days. \" +\n             \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now + 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         assertThat(afterWarningHeaders.get(0), Matchers.containsString(\"Your license expires today. \" +\n             \"Contact your administrator or update your license for continued use of features\"));\n \n         newExpirationDate = now - 300000;\n         setLicensingExpirationDate(mode, newExpirationDate);\n-\n         response = getRestClient().performRequest(request);\n-\n         afterWarningHeaders= getWarningHeaders(response.getHeaders());\n-\n         assertThat(afterWarningHeaders, Matchers.hasSize(1));\n         long finalNewExpirationDate = newExpirationDate;\n         String expiredMessage = String.format(Locale.ROOT, \"Your license expired on [%s]. \",\n"}}, {"oid": "8dc8b9c80857634bd34794740d64f0f4440b7074", "url": "https://github.com/elastic/elasticsearch/commit/8dc8b9c80857634bd34794740d64f0f4440b7074", "message": "Nit changes", "committedDate": "2020-12-04T10:45:45Z", "type": "commit"}, {"oid": "a939ae85a7ae6cac7fe20ae9e5653b0c689c6efd", "url": "https://github.com/elastic/elasticsearch/commit/a939ae85a7ae6cac7fe20ae9e5653b0c689c6efd", "message": "Merge branch 'master' into Warning_header", "committedDate": "2020-12-04T11:41:05Z", "type": "commit"}]}