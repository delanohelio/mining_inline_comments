{"pr_number": 57361, "pr_title": "Fold some of sig_terms into terms", "pr_createdAt": "2020-05-29T13:50:47Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57361", "timeline": [{"oid": "7f7d79eb49c5ec1697aa4f4cefc3725005137a03", "url": "https://github.com/elastic/elasticsearch/commit/7f7d79eb49c5ec1697aa4f4cefc3725005137a03", "message": "Fold some of sig_terms into terms\n\nThis merges the global-ordinals-based implementation for\n`significant_terms` into the global-ordinals-based implementation of\n`terms`, removing a bunch of copy and pasted code that is subtly\ndifferent across the two implementations and replacing it with an\nexplicit `ResultStrategy` with nice stuff like Javadoc.\n\nThe actual behavior is mostly unchanged, though I was able to remove a\nredundant copy of bytes representing the string from the result\nconstruction phase of `significant_terms`.", "committedDate": "2020-05-29T13:23:44Z", "type": "commit"}, {"oid": "a98e32f34b55ef46118dbf329ac50be08263a39c", "url": "https://github.com/elastic/elasticsearch/commit/a98e32f34b55ef46118dbf329ac50be08263a39c", "message": "Add missing", "committedDate": "2020-05-29T14:43:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNjcyMA==", "url": "https://github.com/elastic/elasticsearch/pull/57361#discussion_r432536720", "bodyText": "Nit: Maybe run the formatter on this method declaration?", "author": "not-napoleon", "createdAt": "2020-05-29T14:46:27Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java", "diffHunk": "@@ -65,16 +69,17 @@\n     // first defined one.\n     // So currently for each instance of this aggregator the acceptedglobalValues will be computed, this is unnecessary\n     // especially if this agg is on a second layer or deeper.\n-    protected final LongPredicate acceptedGlobalOrdinals;\n-    protected final long valueCount;\n-    protected final GlobalOrdLookupFunction lookupGlobalOrd;\n+    private final LongPredicate acceptedGlobalOrdinals;\n+    private final long valueCount;\n+    private final GlobalOrdLookupFunction lookupGlobalOrd;\n     protected final CollectionStrategy collectionStrategy;\n \n     public interface GlobalOrdLookupFunction {\n         BytesRef apply(long ord) throws IOException;\n     }\n \n     public GlobalOrdinalsStringTermsAggregator(String name, AggregatorFactories factories,", "originalCommit": "7f7d79eb49c5ec1697aa4f4cefc3725005137a03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwODM5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57361#discussion_r432708393", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-05-29T20:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNjcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "8bb1d227da98606246ec1e1be6ded255735c7a96", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\nindex aa7043dd9cf..83126c3385f 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\n\n@@ -78,21 +78,24 @@ public class GlobalOrdinalsStringTermsAggregator extends AbstractStringTermsAggr\n         BytesRef apply(long ord) throws IOException;\n     }\n \n-    public GlobalOrdinalsStringTermsAggregator(String name, AggregatorFactories factories,\n-                                               Function<GlobalOrdinalsStringTermsAggregator, ResultStrategy<?, ?, ?>> resultStrategy,\n-                                               ValuesSource.Bytes.WithOrdinals valuesSource,\n-                                               BucketOrder order,\n-                                               DocValueFormat format,\n-                                               BucketCountThresholds bucketCountThresholds,\n-                                               IncludeExclude.OrdinalsFilter includeExclude,\n-                                               SearchContext context,\n-                                               Aggregator parent,\n-                                               boolean remapGlobalOrds,\n-                                               SubAggCollectionMode collectionMode,\n-                                               boolean showTermDocCountError,\n-                                               Map<String, Object> metadata) throws IOException {\n+    public GlobalOrdinalsStringTermsAggregator(\n+        String name,\n+        AggregatorFactories factories,\n+        Function<GlobalOrdinalsStringTermsAggregator, ResultStrategy<?, ?, ?>> resultStrategy,\n+        ValuesSource.Bytes.WithOrdinals valuesSource,\n+        BucketOrder order,\n+        DocValueFormat format,\n+        BucketCountThresholds bucketCountThresholds,\n+        IncludeExclude.OrdinalsFilter includeExclude,\n+        SearchContext context,\n+        Aggregator parent,\n+        boolean remapGlobalOrds,\n+        SubAggCollectionMode collectionMode,\n+        boolean showTermDocCountError,\n+        Map<String, Object> metadata\n+    ) throws IOException {\n         super(name, factories, context, parent, order, format, bucketCountThresholds, collectionMode, showTermDocCountError, metadata);\n-        this.resultStrategy = resultStrategy.apply(this);\n+        this.resultStrategy = resultStrategy.apply(this); // ResultStrategy needs a reference to the Aggregator to do its job.\n         this.valuesSource = valuesSource;\n         final IndexReader reader = context.searcher().getIndexReader();\n         final SortedSetDocValues values = reader.leaves().size() > 0 ?\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NzA3MA==", "url": "https://github.com/elastic/elasticsearch/pull/57361#discussion_r432547070", "bodyText": "Nit: Since the syntax backing this is somewhat rare in aggs, maybe toss a quick comment here that we need the reference to this in order to construct the closure?  I figured it out, but did a double take when I first saw it.", "author": "not-napoleon", "createdAt": "2020-05-29T15:02:18Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java", "diffHunk": "@@ -87,6 +92,7 @@ public GlobalOrdinalsStringTermsAggregator(String name, AggregatorFactories fact\n                                                boolean showTermDocCountError,\n                                                Map<String, Object> metadata) throws IOException {\n         super(name, factories, context, parent, order, format, bucketCountThresholds, collectionMode, showTermDocCountError, metadata);\n+        this.resultStrategy = resultStrategy.apply(this);", "originalCommit": "7f7d79eb49c5ec1697aa4f4cefc3725005137a03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwOTE3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57361#discussion_r432709176", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-05-29T20:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NzA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "8bb1d227da98606246ec1e1be6ded255735c7a96", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\nindex aa7043dd9cf..83126c3385f 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\n\n@@ -78,21 +78,24 @@ public class GlobalOrdinalsStringTermsAggregator extends AbstractStringTermsAggr\n         BytesRef apply(long ord) throws IOException;\n     }\n \n-    public GlobalOrdinalsStringTermsAggregator(String name, AggregatorFactories factories,\n-                                               Function<GlobalOrdinalsStringTermsAggregator, ResultStrategy<?, ?, ?>> resultStrategy,\n-                                               ValuesSource.Bytes.WithOrdinals valuesSource,\n-                                               BucketOrder order,\n-                                               DocValueFormat format,\n-                                               BucketCountThresholds bucketCountThresholds,\n-                                               IncludeExclude.OrdinalsFilter includeExclude,\n-                                               SearchContext context,\n-                                               Aggregator parent,\n-                                               boolean remapGlobalOrds,\n-                                               SubAggCollectionMode collectionMode,\n-                                               boolean showTermDocCountError,\n-                                               Map<String, Object> metadata) throws IOException {\n+    public GlobalOrdinalsStringTermsAggregator(\n+        String name,\n+        AggregatorFactories factories,\n+        Function<GlobalOrdinalsStringTermsAggregator, ResultStrategy<?, ?, ?>> resultStrategy,\n+        ValuesSource.Bytes.WithOrdinals valuesSource,\n+        BucketOrder order,\n+        DocValueFormat format,\n+        BucketCountThresholds bucketCountThresholds,\n+        IncludeExclude.OrdinalsFilter includeExclude,\n+        SearchContext context,\n+        Aggregator parent,\n+        boolean remapGlobalOrds,\n+        SubAggCollectionMode collectionMode,\n+        boolean showTermDocCountError,\n+        Map<String, Object> metadata\n+    ) throws IOException {\n         super(name, factories, context, parent, order, format, bucketCountThresholds, collectionMode, showTermDocCountError, metadata);\n-        this.resultStrategy = resultStrategy.apply(this);\n+        this.resultStrategy = resultStrategy.apply(this); // ResultStrategy needs a reference to the Aggregator to do its job.\n         this.valuesSource = valuesSource;\n         final IndexReader reader = context.searcher().getIndexReader();\n         final SortedSetDocValues values = reader.leaves().size() > 0 ?\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0OTM1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57361#discussion_r432549355", "bodyText": "Nit: maybe update the javadoc to say this can only be used for StandardTerms?", "author": "not-napoleon", "createdAt": "2020-05-29T15:06:08Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java", "diffHunk": "@@ -276,15 +227,14 @@ protected void doClose() {\n                        SubAggCollectionMode collectionMode,\n                        boolean showTermDocCountError,\n                        Map<String, Object> metadata) throws IOException {\n-            super(name, factories, valuesSource, order, format, bucketCountThresholds, null,\n+            super(name, factories, a -> a.new StandardTermsResults(), valuesSource, order, format, bucketCountThresholds, null,", "originalCommit": "7f7d79eb49c5ec1697aa4f4cefc3725005137a03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMDI2MA==", "url": "https://github.com/elastic/elasticsearch/pull/57361#discussion_r432710260", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-05-29T20:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0OTM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bb1d227da98606246ec1e1be6ded255735c7a96", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\nindex aa7043dd9cf..83126c3385f 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java\n\n@@ -202,31 +205,38 @@ public class GlobalOrdinalsStringTermsAggregator extends AbstractStringTermsAggr\n \n     @Override\n     protected void doClose() {\n-        Releasables.close(collectionStrategy);\n+        Releasables.close(resultStrategy, collectionStrategy);\n     }\n \n     /**\n-     * Variant of {@link GlobalOrdinalsStringTermsAggregator} that resolves global ordinals post segment collection\n-     * instead of on the fly for each match.This is beneficial for low cardinality fields, because it can reduce\n-     * the amount of look-ups significantly.\n+     * Variant of {@link GlobalOrdinalsStringTermsAggregator} that\n+     * resolves global ordinals post segment collection instead of on the fly\n+     * for each match.This is beneficial for low cardinality fields, because\n+     * it can reduce the amount of look-ups significantly.\n+     * <p>\n+     * This is only supported for the standard {@code terms} aggregation and\n+     * doesn't support {@code significant_terms} so this forces\n+     * {@link StandardTermsResults}.\n      */\n     static class LowCardinality extends GlobalOrdinalsStringTermsAggregator {\n \n         private LongUnaryOperator mapping;\n         private IntArray segmentDocCounts;\n \n-        LowCardinality(String name,\n-                       AggregatorFactories factories,\n-                       ValuesSource.Bytes.WithOrdinals valuesSource,\n-                       BucketOrder order,\n-                       DocValueFormat format,\n-                       BucketCountThresholds bucketCountThresholds,\n-                       SearchContext context,\n-                       Aggregator parent,\n-                       boolean forceDenseMode,\n-                       SubAggCollectionMode collectionMode,\n-                       boolean showTermDocCountError,\n-                       Map<String, Object> metadata) throws IOException {\n+        LowCardinality(\n+            String name,\n+            AggregatorFactories factories,\n+            ValuesSource.Bytes.WithOrdinals valuesSource,\n+            BucketOrder order,\n+            DocValueFormat format,\n+            BucketCountThresholds bucketCountThresholds,\n+            SearchContext context,\n+            Aggregator parent,\n+            boolean forceDenseMode,\n+            SubAggCollectionMode collectionMode,\n+            boolean showTermDocCountError,\n+            Map<String, Object> metadata\n+        ) throws IOException {\n             super(name, factories, a -> a.new StandardTermsResults(), valuesSource, order, format, bucketCountThresholds, null,\n                 context, parent, forceDenseMode, collectionMode, showTermDocCountError, metadata);\n             assert factories == null || factories.countAggregators() == 0;\n"}}, {"oid": "001df04451401e7e42284c16a701620c357937d0", "url": "https://github.com/elastic/elasticsearch/commit/001df04451401e7e42284c16a701620c357937d0", "message": "Merge branch 'master' into global_ords_result_strategy", "committedDate": "2020-05-29T19:58:23Z", "type": "commit"}, {"oid": "8bb1d227da98606246ec1e1be6ded255735c7a96", "url": "https://github.com/elastic/elasticsearch/commit/8bb1d227da98606246ec1e1be6ded255735c7a96", "message": "Feedback", "committedDate": "2020-05-29T20:06:18Z", "type": "commit"}]}