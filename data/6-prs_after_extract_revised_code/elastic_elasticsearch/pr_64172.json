{"pr_number": 64172, "pr_title": "Converted aggregate_metric_double field mapper to parameterized mapper", "pr_createdAt": "2020-10-26T15:29:32Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64172", "timeline": [{"oid": "37346b620359379bfa4784cbcc0aa1221e93edb2", "url": "https://github.com/elastic/elasticsearch/commit/37346b620359379bfa4784cbcc0aa1221e93edb2", "message": "Refactored AggregateDoubleMetricFieldMapper\n\nMade it extend ParametrizedFieldMapper.\nAlso, AggregateDoubleMetricFieldMapperTests extend MapperTestCa", "committedDate": "2020-10-26T15:19:08Z", "type": "commit"}, {"oid": "05a0a45bb2daffeb159340070b1ef644c7b07269", "url": "https://github.com/elastic/elasticsearch/commit/05a0a45bb2daffeb159340070b1ef644c7b07269", "message": "Merge branch 'feature/aggregate-metrics' into agg-metric-parameterized-mapper", "committedDate": "2020-10-26T15:20:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1Nzk0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64172#discussion_r512057943", "bodyText": "nit: can we have {} around the throw clause?", "author": "romseygeek", "createdAt": "2020-10-26T15:37:55Z", "path": "x-pack/plugin/mapper-aggregate-metric/src/main/java/org/elasticsearch/xpack/aggregatemetric/mapper/AggregateDoubleMetricFieldMapper.java", "diffHunk": "@@ -102,95 +101,89 @@ public static String subfieldName(String fieldName, Metric metric) {\n     }\n \n     public static class Defaults {\n-        public static final Explicit<Boolean> IGNORE_MALFORMED = new Explicit<>(false, false);\n-        public static final Explicit<Set<Metric>> METRICS = new Explicit<>(Collections.emptySet(), false);\n-        public static final Explicit<Metric> DEFAULT_METRIC = new Explicit<>(Metric.max, false);\n-        public static final FieldType FIELD_TYPE = new FieldType();\n+        public static final Set<Metric> METRICS = Collections.emptySet();\n+        public static final Metric DEFAULT_METRIC = Metric.max;\n     }\n \n-    static class Builder extends FieldMapper.Builder {\n-\n-        private Boolean ignoreMalformed;\n-\n-        /**\n-         * The aggregated metrics supported by the field type\n-         */\n-        private Set<Metric> metrics;\n-\n-        /**\n-         * Set the default metric so that query operations are delegated to it.\n-         */\n-        private Metric defaultMetric;\n-\n-        Builder(String name) {\n-            super(name, Defaults.FIELD_TYPE);\n-        }\n+    public static class Builder extends ParametrizedFieldMapper.Builder {\n \n-        public AggregateDoubleMetricFieldMapper.Builder ignoreMalformed(boolean ignoreMalformed) {\n-            this.ignoreMalformed = ignoreMalformed;\n-            return this;\n-        }\n-\n-        protected Explicit<Boolean> ignoreMalformed(BuilderContext context) {\n-            if (ignoreMalformed != null) {\n-                return new Explicit<>(ignoreMalformed, true);\n-            }\n-            if (context.indexSettings() != null) {\n-                return new Explicit<>(IGNORE_MALFORMED_SETTING.get(context.indexSettings()), false);\n-            }\n-            return AggregateDoubleMetricFieldMapper.Defaults.IGNORE_MALFORMED;\n-        }\n+        private final Parameter<Map<String, String>> meta = Parameter.metaParam();\n \n-        public AggregateDoubleMetricFieldMapper.Builder defaultMetric(Metric defaultMetric) {\n-            this.defaultMetric = defaultMetric;\n-            return this;\n-        }\n+        private final Parameter<Boolean> ignoreMalformed;\n \n-        protected Explicit<Metric> defaultMetric(BuilderContext context) {\n-            if (defaultMetric != null) {\n-                if (metrics != null && metrics.contains(defaultMetric) == false) {\n-                    // The default_metric is not defined in the \"metrics\" field\n-                    throw new IllegalArgumentException(\"Metric [\" + defaultMetric + \"] is not defined in the metrics field.\");\n+        private final Parameter<Set<Metric>> metrics = new Parameter<>(Names.METRICS, false, () -> Defaults.METRICS, (n, c, o) -> {\n+            @SuppressWarnings(\"unchecked\")\n+            List<String> metricsList = (List<String>) o;\n+            EnumSet<Metric> parsedMetrics = EnumSet.noneOf(Metric.class);\n+            for (String s : metricsList) {\n+                try {\n+                    Metric m = Metric.valueOf(s);\n+                    parsedMetrics.add(m);\n+                } catch (IllegalArgumentException e) {\n+                    throw new IllegalArgumentException(\"Metric [\" + s + \"] is not supported.\", e);\n                 }\n-                return new Explicit<>(defaultMetric, true);\n             }\n-\n-            // If a single metric is contained, this should be the default\n-            if (metrics != null && metrics.size() == 1) {\n-                return new Explicit<>(metrics.iterator().next(), false);\n+            return parsedMetrics;\n+        }, m -> toType(m).metrics).setValidator(v -> {\n+            if (v == null || v.isEmpty()) {\n+                throw new IllegalArgumentException(\"Property [\" + Names.METRICS + \"] is required for field [\" + name() + \"].\");\n             }\n+        });\n \n-            if (metrics.contains(Defaults.DEFAULT_METRIC.value())) {\n-                return Defaults.DEFAULT_METRIC;\n-            }\n-            throw new IllegalArgumentException(\n-                \"Property [\" + Names.DEFAULT_METRIC.getPreferredName() + \"] must be set for field [\" + name() + \"].\"\n+        /**\n+         * Set the default metric so that query operations are delegated to it.\n+         */\n+        private final Parameter<Metric> defaultMetric = new Parameter<>(\n+            Names.DEFAULT_METRIC,\n+            true,\n+            () -> Defaults.DEFAULT_METRIC,\n+            (n, c, o) -> {\n+                try {\n+                    return Metric.valueOf(o.toString());\n+                } catch (IllegalArgumentException e) {\n+                    throw new IllegalArgumentException(\"Metric [\" + o.toString() + \"] is not supported.\", e);\n+                }\n+            },\n+            m -> toType(m).defaultMetric\n+        );\n+\n+        public Builder(String name, Boolean ignoreMalformedByDefault) {\n+            super(name);\n+            this.ignoreMalformed = Parameter.boolParam(\n+                Names.IGNORE_MALFORMED,\n+                true,\n+                m -> toType(m).ignoreMalformed,\n+                ignoreMalformedByDefault\n             );\n         }\n \n-        public AggregateDoubleMetricFieldMapper.Builder metrics(EnumSet<Metric> metrics) {\n-            this.metrics = metrics;\n-            return this;\n-        }\n-\n-        protected Explicit<Set<Metric>> metrics(BuilderContext context) {\n-            if (metrics != null) {\n-                return new Explicit<>(metrics, true);\n-            }\n-            return Defaults.METRICS;\n+        @Override\n+        protected List<Parameter<?>> getParameters() {\n+            return List.of(ignoreMalformed, metrics, defaultMetric, meta);\n         }\n \n         @Override\n         public AggregateDoubleMetricFieldMapper build(BuilderContext context) {\n-            if (metrics == null || metrics.isEmpty()) {\n-                throw new IllegalArgumentException(\n-                    \"Property [\" + Names.METRICS.getPreferredName() + \"] must be set for field [\" + name() + \"].\"\n+            if (defaultMetric.isConfigured() == false) {\n+                // If a single metric is contained, this should be the default\n+                if (metrics.getValue().size() == 1) {\n+                    Metric m = metrics.getValue().iterator().next();\n+                    defaultMetric.setValue(m);\n+                }\n+\n+                if (metrics.getValue().contains(defaultMetric.getValue()) == false) throw new IllegalArgumentException(", "originalCommit": "05a0a45bb2daffeb159340070b1ef644c7b07269", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "472b45ae6ac8c486c64fdbd731c09a1e9b0c1fd3", "chunk": "diff --git a/x-pack/plugin/mapper-aggregate-metric/src/main/java/org/elasticsearch/xpack/aggregatemetric/mapper/AggregateDoubleMetricFieldMapper.java b/x-pack/plugin/mapper-aggregate-metric/src/main/java/org/elasticsearch/xpack/aggregatemetric/mapper/AggregateDoubleMetricFieldMapper.java\nindex 4f45693c236..a0fab61a083 100644\n--- a/x-pack/plugin/mapper-aggregate-metric/src/main/java/org/elasticsearch/xpack/aggregatemetric/mapper/AggregateDoubleMetricFieldMapper.java\n+++ b/x-pack/plugin/mapper-aggregate-metric/src/main/java/org/elasticsearch/xpack/aggregatemetric/mapper/AggregateDoubleMetricFieldMapper.java\n\n@@ -171,9 +171,9 @@ public class AggregateDoubleMetricFieldMapper extends ParametrizedFieldMapper {\n                     defaultMetric.setValue(m);\n                 }\n \n-                if (metrics.getValue().contains(defaultMetric.getValue()) == false) throw new IllegalArgumentException(\n-                    \"Property [\" + Names.DEFAULT_METRIC + \"] must be set for field [\" + name() + \"].\"\n-                );\n+                if (metrics.getValue().contains(defaultMetric.getValue()) == false) {\n+                    throw new IllegalArgumentException(\"Property [\" + Names.DEFAULT_METRIC + \"] must be set for field [\" + name() + \"].\");\n+                }\n             }\n \n             if (metrics.getValue().contains(defaultMetric.getValue()) == false) {\n"}}, {"oid": "472b45ae6ac8c486c64fdbd731c09a1e9b0c1fd3", "url": "https://github.com/elastic/elasticsearch/commit/472b45ae6ac8c486c64fdbd731c09a1e9b0c1fd3", "message": "Addressed reviewer comments", "committedDate": "2020-10-26T17:34:50Z", "type": "commit"}, {"oid": "f60329ea50fe41884bf153a9e662b70163dae4d6", "url": "https://github.com/elastic/elasticsearch/commit/f60329ea50fe41884bf153a9e662b70163dae4d6", "message": "Minor changes to error messages", "committedDate": "2020-10-26T21:28:59Z", "type": "commit"}, {"oid": "06c4f11dd9c6e51a0f2bae5948b6bfe4f33fc8e4", "url": "https://github.com/elastic/elasticsearch/commit/06c4f11dd9c6e51a0f2bae5948b6bfe4f33fc8e4", "message": "Merge branch 'feature/aggregate-metrics' into agg-metric-parameterized-mapper", "committedDate": "2020-10-27T10:13:02Z", "type": "commit"}]}