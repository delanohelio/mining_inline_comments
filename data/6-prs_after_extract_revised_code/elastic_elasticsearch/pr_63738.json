{"pr_number": 63738, "pr_title": "Rework parent-join to not require access to DocumentMapper", "pr_createdAt": "2020-10-15T12:49:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63738", "timeline": [{"oid": "5e8d9a2b1436d88e483960cea4da16af43dddd6f", "url": "https://github.com/elastic/elasticsearch/commit/5e8d9a2b1436d88e483960cea4da16af43dddd6f", "message": "WIP", "committedDate": "2020-10-12T17:26:43Z", "type": "commit"}, {"oid": "94677abf81f56bff6958fead064325eaf709c161", "url": "https://github.com/elastic/elasticsearch/commit/94677abf81f56bff6958fead064325eaf709c161", "message": "Merge remote-tracking branch 'origin/master' into mapper/join", "committedDate": "2020-10-15T07:47:27Z", "type": "commit"}, {"oid": "69e26177a1336738501ab3e711328136ca53f0e4", "url": "https://github.com/elastic/elasticsearch/commit/69e26177a1336738501ab3e711328136ca53f0e4", "message": "compiles", "committedDate": "2020-10-15T09:19:24Z", "type": "commit"}, {"oid": "d63079df3e8a3db09fa84dfb2fa8207750b303cd", "url": "https://github.com/elastic/elasticsearch/commit/d63079df3e8a3db09fa84dfb2fa8207750b303cd", "message": "Merge remote-tracking branch 'origin/master' into mapper/join", "committedDate": "2020-10-15T09:19:27Z", "type": "commit"}, {"oid": "4c6dc26dc8b1d091511e6640d2140a7b3e2d85a4", "url": "https://github.com/elastic/elasticsearch/commit/4c6dc26dc8b1d091511e6640d2140a7b3e2d85a4", "message": "Convert all to parametrized mappers; data shared via Joiner object on metadata field", "committedDate": "2020-10-15T10:47:44Z", "type": "commit"}, {"oid": "2bff02ef95c26b1c26d7bf8046903fc4939a2fce", "url": "https://github.com/elastic/elasticsearch/commit/2bff02ef95c26b1c26d7bf8046903fc4939a2fce", "message": "inner hits tests", "committedDate": "2020-10-15T12:39:37Z", "type": "commit"}, {"oid": "60fe6984334c75e3fd537c9444a8b5397d18a938", "url": "https://github.com/elastic/elasticsearch/commit/60fe6984334c75e3fd537c9444a8b5397d18a938", "message": "Merge remote-tracking branch 'origin/master' into mapper/join", "committedDate": "2020-10-15T13:23:40Z", "type": "commit"}, {"oid": "94881383264490f3fba12b851218a15b6d525e64", "url": "https://github.com/elastic/elasticsearch/commit/94881383264490f3fba12b851218a15b6d525e64", "message": "Undo parametrization; move LateParsingQuery back into HasChildQueryBuilder", "committedDate": "2020-10-15T14:54:39Z", "type": "commit"}, {"oid": "dc374f4c4dec20dd81059ccbe20806e432ee1741", "url": "https://github.com/elastic/elasticsearch/commit/dc374f4c4dec20dd81059ccbe20806e432ee1741", "message": "unwind a couple more changes", "committedDate": "2020-10-15T14:59:32Z", "type": "commit"}, {"oid": "a36a52c616904daa39f307afd42f4bea7329af82", "url": "https://github.com/elastic/elasticsearch/commit/a36a52c616904daa39f307afd42f4bea7329af82", "message": "Merge remote-tracking branch 'origin/master' into mapper/join", "committedDate": "2020-10-15T15:01:49Z", "type": "commit"}, {"oid": "ba97d3518d4f09bc8145a7cc6e0754eb6c6e90c5", "url": "https://github.com/elastic/elasticsearch/commit/ba97d3518d4f09bc8145a7cc6e0754eb6c6e90c5", "message": "imports", "committedDate": "2020-10-15T15:20:03Z", "type": "commit"}, {"oid": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "url": "https://github.com/elastic/elasticsearch/commit/c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "message": "javadocs", "committedDate": "2020-10-15T15:26:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2MzMxNg==", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506163316", "bodyText": "nit: is there a reason why this method starts with get while the two above don't?", "author": "javanna", "createdAt": "2020-10-16T08:23:38Z", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {\n+        if (isMapped.test(MetaJoinFieldMapper.NAME) == false) {\n+            return null;\n+        }\n+        MetaJoinFieldMapper.MetaJoinFieldType ft\n+            = (MetaJoinFieldMapper.MetaJoinFieldType) getFieldType.apply(MetaJoinFieldMapper.NAME);\n+        String joinField = ft.getJoinField();\n+        if (isMapped.test(joinField) == false) {\n+            return null;\n+        }\n+        ParentJoinFieldMapper.JoinFieldType jft =\n+            (ParentJoinFieldMapper.JoinFieldType) getFieldType.apply(joinField);\n+        return jft.getJoiner();\n+    }\n+\n+    private final Map<String, Set<String>> parentsToChildren = new HashMap<>();\n+    private final Map<String, String> childrenToParents = new HashMap<>();\n+\n+    private final String joinField;\n+\n+    /**\n+     * Constructs a Joiner based on a join field and a set of relations\n+     */\n+    public Joiner(String joinField, List<Relations> relations) {\n+        this.joinField = joinField;\n+        for (Relations r : relations) {\n+            for (String child : r.children) {\n+                parentsToChildren.put(r.parent, r.children);\n+                if (childrenToParents.containsKey(child)) {\n+                    throw new IllegalArgumentException(\"[\" + child + \"] cannot have multiple parents\");\n+                }\n+                childrenToParents.put(child, r.parent);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @return the join field for the index\n+     */\n+    public String getJoinField() {\n+        return joinField;\n+    }\n+\n+    /**\n+     * @return a filter for documents of a specific join type\n+     */\n+    public Query filter(String relationType) {\n+        return new TermQuery(new Term(joinField, relationType));\n+    }\n+\n+    /**\n+     * @return a filter for parent documents of a specific child type\n+     */\n+    public Query parentFilter(String childType) {\n+        return new TermQuery(new Term(joinField, childrenToParents.get(childType)));\n+    }\n+\n+    /**\n+     * @return a filter for child documents of a specific parent type\n+     */\n+    public Query getChildrenFilter(String parentType) {", "originalCommit": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "chunk": "diff --git a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\nindex ca7284fe13a..6a23ff82434 100644\n--- a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\n+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\n\n@@ -41,7 +41,7 @@ import java.util.function.Predicate;\n /**\n  * Utility class to help build join queries and aggregations, based on a join_field\n  */\n-public class Joiner {\n+public final class Joiner {\n \n     /**\n      * Get the Joiner for this context, or {@code null} if none is configured\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2ODgxNg==", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506168816", "bodyText": "shall we make this package private?", "author": "javanna", "createdAt": "2020-10-16T08:29:40Z", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {", "originalCommit": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "chunk": "diff --git a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\nindex ca7284fe13a..6a23ff82434 100644\n--- a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\n+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\n\n@@ -41,7 +41,7 @@ import java.util.function.Predicate;\n /**\n  * Utility class to help build join queries and aggregations, based on a join_field\n  */\n-public class Joiner {\n+public final class Joiner {\n \n     /**\n      * Get the Joiner for this context, or {@code null} if none is configured\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3MDgxMA==", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506170810", "bodyText": "could this be package private?", "author": "javanna", "createdAt": "2020-10-16T08:31:55Z", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(QueryShardContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(AggregationContext context) {\n+        return getJoiner(context::isFieldMapped, context::getFieldType);\n+    }\n+\n+    /**\n+     * Get the Joiner for this context, or {@code null} if none is configured\n+     */\n+    public static Joiner getJoiner(Predicate<String> isMapped, Function<String, MappedFieldType> getFieldType) {\n+        if (isMapped.test(MetaJoinFieldMapper.NAME) == false) {\n+            return null;\n+        }\n+        MetaJoinFieldMapper.MetaJoinFieldType ft\n+            = (MetaJoinFieldMapper.MetaJoinFieldType) getFieldType.apply(MetaJoinFieldMapper.NAME);\n+        String joinField = ft.getJoinField();\n+        if (isMapped.test(joinField) == false) {\n+            return null;\n+        }\n+        ParentJoinFieldMapper.JoinFieldType jft =\n+            (ParentJoinFieldMapper.JoinFieldType) getFieldType.apply(joinField);\n+        return jft.getJoiner();\n+    }\n+\n+    private final Map<String, Set<String>> parentsToChildren = new HashMap<>();\n+    private final Map<String, String> childrenToParents = new HashMap<>();\n+\n+    private final String joinField;\n+\n+    /**\n+     * Constructs a Joiner based on a join field and a set of relations\n+     */\n+    public Joiner(String joinField, List<Relations> relations) {", "originalCommit": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "chunk": "diff --git a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\nindex ca7284fe13a..6a23ff82434 100644\n--- a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\n+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\n\n@@ -41,7 +41,7 @@ import java.util.function.Predicate;\n /**\n  * Utility class to help build join queries and aggregations, based on a join_field\n  */\n-public class Joiner {\n+public final class Joiner {\n \n     /**\n      * Get the Joiner for this context, or {@code null} if none is configured\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3MDk3MA==", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506170970", "bodyText": "make this final?", "author": "javanna", "createdAt": "2020-10-16T08:32:05Z", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.BooleanClause;\n+import org.apache.lucene.search.BooleanQuery;\n+import org.apache.lucene.search.ConstantScoreQuery;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.TermQuery;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.support.AggregationContext;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+/**\n+ * Utility class to help build join queries and aggregations, based on a join_field\n+ */\n+public class Joiner {", "originalCommit": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "chunk": "diff --git a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\nindex ca7284fe13a..6a23ff82434 100644\n--- a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\n+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Joiner.java\n\n@@ -41,7 +41,7 @@ import java.util.function.Predicate;\n /**\n  * Utility class to help build join queries and aggregations, based on a join_field\n  */\n-public class Joiner {\n+public final class Joiner {\n \n     /**\n      * Get the Joiner for this context, or {@code null} if none is configured\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3Mzk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506173955", "bodyText": "parse looks unused?", "author": "javanna", "createdAt": "2020-10-16T08:35:29Z", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Relations.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.join.mapper;\n+\n+import org.elasticsearch.common.xcontent.support.XContentMapValues;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Defines a relationship between a parent type and a set of child types\n+ */\n+class Relations {\n+\n+    final String parent;\n+    final Set<String> children;\n+\n+    Relations(String parent, Set<String> children) {\n+        this.parent = parent;\n+        this.children = children;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Relations relation = (Relations) o;\n+        return Objects.equals(parent, relation.parent) &&\n+            Objects.equals(children, relation.children);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(parent, children);\n+    }\n+\n+    static List<Relations> parse(Object node) {", "originalCommit": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "chunk": "diff --git a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Relations.java b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Relations.java\nindex 3a039b5f01b..acc396651db 100644\n--- a/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Relations.java\n+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/mapper/Relations.java\n\n@@ -19,14 +19,6 @@\n \n package org.elasticsearch.join.mapper;\n \n-import org.elasticsearch.common.xcontent.support.XContentMapValues;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3NTI0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63738#discussion_r506175241", "bodyText": "you may also remove getMapper from this class , one less usage of getMapperService ;)", "author": "javanna", "createdAt": "2020-10-16T08:37:02Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -187,6 +189,11 @@ public MappedFieldType getFieldType(String path) {\n             return context.getFieldType(path);\n         }\n \n+        @Override\n+        public boolean isFieldMapped(String field) {", "originalCommit": "c593a31662f7ce8e22e8a0cdb0ccf321a7e352ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\nindex 12a08372126..f2735b3eb2d 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\n\n@@ -194,11 +191,6 @@ public abstract class AggregationContext {\n             return context.isFieldMapped(field);\n         }\n \n-        @Override\n-        public Mapper getMapper(String path) {\n-            return context.getMapperService().documentMapper().mappers().getMapper(path);\n-        }\n-\n         @Override\n         public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> scriptContext) {\n             return context.compile(script, scriptContext);\n"}}, {"oid": "3d9afe0c36a6fc0bf925be3ad2dbc5b765c4f1d1", "url": "https://github.com/elastic/elasticsearch/commit/3d9afe0c36a6fc0bf925be3ad2dbc5b765c4f1d1", "message": "Merge remote-tracking branch 'origin/master' into mapper/join", "committedDate": "2020-10-16T13:38:05Z", "type": "commit"}, {"oid": "9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "url": "https://github.com/elastic/elasticsearch/commit/9febddd2353ab3a6a7b4d47be30d99fea72b19e6", "message": "deef", "committedDate": "2020-10-16T13:52:22Z", "type": "commit"}, {"oid": "c15707b237a4ecd18cc23f343755d7adbadf1ab1", "url": "https://github.com/elastic/elasticsearch/commit/c15707b237a4ecd18cc23f343755d7adbadf1ab1", "message": "Merge branch 'master' into mapper/join", "committedDate": "2020-10-19T10:28:59Z", "type": "commit"}]}