{"pr_number": 62358, "pr_title": "Wait for relocations and disk threshold monitor in DiskThresholdDeciderIT", "pr_createdAt": "2020-09-15T09:07:30Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62358", "timeline": [{"oid": "0f77829c0f5d83c21915dbc6f64a9010b0bfe55d", "url": "https://github.com/elastic/elasticsearch/commit/0f77829c0f5d83c21915dbc6f64a9010b0bfe55d", "message": "Wait for relocations and disk threshold monitor in DiskThresholdDeciderIT", "committedDate": "2020-09-15T08:58:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5ODQ0OA==", "url": "https://github.com/elastic/elasticsearch/pull/62358#discussion_r488598448", "bodyText": "refreshDiskUsage triggers a reroute, shouldn't we have that outside the busy assert and just make sure the the CS application is fully processed by busy asserting on the line below only? That should be all that's needed?", "author": "original-brownbear", "createdAt": "2020-09-15T11:41:08Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderIT.java", "diffHunk": "@@ -151,13 +150,17 @@ public void testHighWatermarkNotExceeded() throws InterruptedException {\n         // reduce disk size of node 0 so that no shards fit below the high watermark, forcing all shards onto the other data node\n         // (subtract the translog size since the disk threshold decider ignores this and may therefore move the shard back again)\n         fileSystemProvider.getTestFileStore(dataNode0Path).setTotalSpace(minShardSize + WATERMARK_BYTES - 1L);\n-        refreshDiskUsage();\n-        assertThat(getShardRoutings(dataNode0Id), empty());\n+        assertBusy(() -> {\n+            refreshDiskUsage();", "originalCommit": "0f77829c0f5d83c21915dbc6f64a9010b0bfe55d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4OTg0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62358#discussion_r489389845", "bodyText": "I agree, I think you're right.", "author": "tlrx", "createdAt": "2020-09-16T12:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5ODQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c946582b2f09ab070127f4cc459cbda2d96b7f69", "chunk": "diff --git a/server/src/internalClusterTest/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderIT.java b/server/src/internalClusterTest/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderIT.java\nindex 05a4c2304f6..f75e9bfe23f 100644\n--- a/server/src/internalClusterTest/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderIT.java\n+++ b/server/src/internalClusterTest/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderIT.java\n\n@@ -150,17 +150,13 @@ public class DiskThresholdDeciderIT extends ESIntegTestCase {\n         // reduce disk size of node 0 so that no shards fit below the high watermark, forcing all shards onto the other data node\n         // (subtract the translog size since the disk threshold decider ignores this and may therefore move the shard back again)\n         fileSystemProvider.getTestFileStore(dataNode0Path).setTotalSpace(minShardSize + WATERMARK_BYTES - 1L);\n-        assertBusy(() -> {\n-            refreshDiskUsage();\n-            assertThat(getShardRoutings(dataNode0Id), empty());\n-        });\n+        refreshDiskUsage();\n+        assertBusy(() -> assertThat(getShardRoutings(dataNode0Id), empty()));\n \n         // increase disk size of node 0 to allow just enough room for one shard, and check that it's rebalanced back\n         fileSystemProvider.getTestFileStore(dataNode0Path).setTotalSpace(minShardSize + WATERMARK_BYTES + 1L);\n-        assertBusy(() -> {\n-            refreshDiskUsage();\n-            assertThat(getShardRoutings(dataNode0Id), hasSize(1));\n-        });\n+        refreshDiskUsage();\n+        assertBusy(() -> assertThat(getShardRoutings(dataNode0Id), hasSize(1)));\n     }\n \n     private Set<ShardRouting> getShardRoutings(String nodeId) {\n"}}, {"oid": "c946582b2f09ab070127f4cc459cbda2d96b7f69", "url": "https://github.com/elastic/elasticsearch/commit/c946582b2f09ab070127f4cc459cbda2d96b7f69", "message": "feedback", "committedDate": "2020-09-16T10:18:22Z", "type": "commit"}]}