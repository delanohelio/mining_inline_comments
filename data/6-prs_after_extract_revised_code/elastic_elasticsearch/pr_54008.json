{"pr_number": 54008, "pr_title": "Scripting: stats per context in nodes stats", "pr_createdAt": "2020-03-23T18:18:10Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54008", "timeline": [{"oid": "40aa585ac4f86f274f08c06e0693f9fc2c938b70", "url": "https://github.com/elastic/elasticsearch/commit/40aa585ac4f86f274f08c06e0693f9fc2c938b70", "message": "Scripting: stats per context in nodes stats", "committedDate": "2020-03-23T18:17:45Z", "type": "commit"}, {"oid": "89b93111fa66f5838a0f3ec2286029d653f54eb2", "url": "https://github.com/elastic/elasticsearch/commit/89b93111fa66f5838a0f3ec2286029d653f54eb2", "message": "ScriptContextStats -> ScriptCacheStats", "committedDate": "2020-03-23T19:19:44Z", "type": "commit"}, {"oid": "b3dd8a33c5ed6acf0b7ccbc841130378739fd479", "url": "https://github.com/elastic/elasticsearch/commit/b3dd8a33c5ed6acf0b7ccbc841130378739fd479", "message": "scriptCache -> script_cache", "committedDate": "2020-03-23T20:46:19Z", "type": "commit"}, {"oid": "e3f93be3b2a80d270210b08d4d67ee9d0124e127", "url": "https://github.com/elastic/elasticsearch/commit/e3f93be3b2a80d270210b08d4d67ee9d0124e127", "message": "Avoid duplicating COMPILATIONS", "committedDate": "2020-03-23T23:45:53Z", "type": "commit"}, {"oid": "11fdb994c664af45ce750bad4e4105e7a8f4f248", "url": "https://github.com/elastic/elasticsearch/commit/11fdb994c664af45ce750bad4e4105e7a8f4f248", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into fix/50152-painless-limit-per-context__06__stats-api", "committedDate": "2020-03-23T23:59:47Z", "type": "commit"}, {"oid": "322b061b8ffda11493036f88379b2364bd7b7112", "url": "https://github.com/elastic/elasticsearch/commit/322b061b8ffda11493036f88379b2364bd7b7112", "message": "Fix merge conflicts in CacheHolder.cacheStats", "committedDate": "2020-03-24T00:15:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MTk5OA==", "url": "https://github.com/elastic/elasticsearch/pull/54008#discussion_r397261998", "bodyText": "Will this become onOrAfter(Version.V_7_7_0) once bwc tests are handled?", "author": "williamrandolph", "createdAt": "2020-03-24T15:52:31Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java", "diffHunk": "@@ -108,6 +113,11 @@ public NodeStats(StreamInput in) throws IOException {\n         discoveryStats = in.readOptionalWriteable(DiscoveryStats::new);\n         ingestStats = in.readOptionalWriteable(IngestStats::new);\n         adaptiveSelectionStats = in.readOptionalWriteable(AdaptiveSelectionStats::new);\n+        if (in.getVersion().after(Version.V_7_7_0)) {", "originalCommit": "322b061b8ffda11493036f88379b2364bd7b7112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwMzE2NA==", "url": "https://github.com/elastic/elasticsearch/pull/54008#discussion_r397303164", "bodyText": "v7.7.0 is feature frozen today.  I'm not sure I'll make that, so I expected to keep this as-is, but interested in thoughts.", "author": "stu-elastic", "createdAt": "2020-03-24T16:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MTk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNzY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54008#discussion_r397307659", "bodyText": "You likely wont' make it, but the logic should always be written with onOrAfter. Once the freeze happens (the branch is cut), the 7.8 constant will be added, and you can update to that.", "author": "rjernst", "createdAt": "2020-03-24T16:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MTk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2OTc5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54008#discussion_r398769799", "bodyText": "Done.", "author": "stu-elastic", "createdAt": "2020-03-26T17:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "6e31f1a9fd8089f4f02566cd18161e5b924cc88d", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java\nindex 8aa6861ad5e..a9858a38d5d 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java\n\n@@ -113,7 +113,7 @@ public class NodeStats extends BaseNodeResponse implements ToXContentFragment {\n         discoveryStats = in.readOptionalWriteable(DiscoveryStats::new);\n         ingestStats = in.readOptionalWriteable(IngestStats::new);\n         adaptiveSelectionStats = in.readOptionalWriteable(AdaptiveSelectionStats::new);\n-        if (in.getVersion().after(Version.V_7_7_0)) {\n+        if (in.getVersion().onOrAfter(Version.V_7_8_0)) {\n             scriptCacheStats = in.readOptionalWriteable(ScriptCacheStats::new);\n         } else {\n             scriptCacheStats = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4OTE2MA==", "url": "https://github.com/elastic/elasticsearch/pull/54008#discussion_r397289160", "bodyText": "I think it would be less confusing if this value matched the parameter in NodeStatsRequest (i.e. script_cache). I think in all other cases the option in the request matches the key in the response.", "author": "williamrandolph", "createdAt": "2020-03-24T16:26:36Z", "path": "server/src/main/java/org/elasticsearch/script/ScriptCacheStats.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.script;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ScriptCacheStats implements Writeable, ToXContentFragment {\n+    private final Map<String,ScriptStats> context;\n+    private final ScriptStats general;\n+\n+    public ScriptCacheStats(Map<String, ScriptStats> context) {\n+        this.context = Collections.unmodifiableMap(context);\n+        this.general = null;\n+    }\n+\n+    public ScriptCacheStats(ScriptStats general) {\n+        this.general = Objects.requireNonNull(general);\n+        this.context = null;\n+    }\n+\n+    public ScriptCacheStats(StreamInput in) throws IOException {\n+        boolean isContext = in.readBoolean();\n+        if (isContext) {\n+            general = new ScriptStats(in);\n+            context = null;\n+            return;\n+        }\n+\n+        general = null;\n+        int size = in.readInt();\n+        Map<String,ScriptStats> context = new HashMap<>(size);\n+        for (int i=0; i < size; i++) {\n+            String name = in.readString();\n+            context.put(name, new ScriptStats(in));\n+        }\n+        this.context = Collections.unmodifiableMap(context);\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        if (general != null) {\n+            out.writeBoolean(false);\n+            general.writeTo(out);\n+            return;\n+        }\n+\n+        out.writeBoolean(true);\n+        out.writeInt(context.size());\n+        for (String name: context.keySet().stream().sorted().collect(Collectors.toList())) {\n+            out.writeString(name);\n+            context.get(name).writeTo(out);\n+        }\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject(Fields.SCRIPT_CONTEXT_STATS);\n+        builder.startObject(Fields.SUM);\n+        if (general != null) {\n+            builder.field(ScriptStats.Fields.COMPILATIONS, general.getCompilations());\n+            builder.field(ScriptStats.Fields.CACHE_EVICTIONS, general.getCacheEvictions());\n+            builder.field(ScriptStats.Fields.COMPILATION_LIMIT_TRIGGERED, general.getCompilationLimitTriggered());\n+            builder.endObject().endObject();\n+            return builder;\n+        }\n+\n+        ScriptStats sum = ScriptStats.sum(context.values());\n+        builder.field(ScriptStats.Fields.COMPILATIONS, sum.getCompilations());\n+        builder.field(ScriptStats.Fields.CACHE_EVICTIONS, sum.getCacheEvictions());\n+        builder.field(ScriptStats.Fields.COMPILATION_LIMIT_TRIGGERED, sum.getCompilationLimitTriggered());\n+        builder.endObject();\n+\n+        builder.startArray(Fields.CONTEXTS);\n+        for (String name: context.keySet().stream().sorted().collect(Collectors.toList())) {\n+            ScriptStats stats = context.get(name);\n+            builder.startObject();\n+            builder.field(Fields.CONTEXT, name);\n+            builder.field(ScriptStats.Fields.COMPILATIONS, stats.getCompilations());\n+            builder.field(ScriptStats.Fields.CACHE_EVICTIONS, stats.getCacheEvictions());\n+            builder.field(ScriptStats.Fields.COMPILATION_LIMIT_TRIGGERED, stats.getCompilationLimitTriggered());\n+            builder.endObject();\n+        }\n+        builder.endArray();\n+        builder.endObject();\n+\n+        return builder;\n+    }\n+\n+    static final class Fields {\n+        static final String SCRIPT_CONTEXT_STATS = \"script_context\";", "originalCommit": "322b061b8ffda11493036f88379b2364bd7b7112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNDI3NA==", "url": "https://github.com/elastic/elasticsearch/pull/54008#discussion_r397304274", "bodyText": "Done.", "author": "stu-elastic", "createdAt": "2020-03-24T16:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4OTE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "85cb4e850755bb8ea2aa4abfcebe446ec01b4b0b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/script/ScriptCacheStats.java b/server/src/main/java/org/elasticsearch/script/ScriptCacheStats.java\nindex b823d118cad..978ad780eab 100644\n--- a/server/src/main/java/org/elasticsearch/script/ScriptCacheStats.java\n+++ b/server/src/main/java/org/elasticsearch/script/ScriptCacheStats.java\n\n@@ -82,7 +82,7 @@ public class ScriptCacheStats implements Writeable, ToXContentFragment {\n \n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n-        builder.startObject(Fields.SCRIPT_CONTEXT_STATS);\n+        builder.startObject(Fields.SCRIPT_CACHE_STATS);\n         builder.startObject(Fields.SUM);\n         if (general != null) {\n             builder.field(ScriptStats.Fields.COMPILATIONS, general.getCompilations());\n"}}, {"oid": "85cb4e850755bb8ea2aa4abfcebe446ec01b4b0b", "url": "https://github.com/elastic/elasticsearch/commit/85cb4e850755bb8ea2aa4abfcebe446ec01b4b0b", "message": "script_context -> script_cache", "committedDate": "2020-03-24T16:43:18Z", "type": "commit"}, {"oid": "ad1dc9fb8dbbd86c0168d2de257407ac2280d565", "url": "https://github.com/elastic/elasticsearch/commit/ad1dc9fb8dbbd86c0168d2de257407ac2280d565", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into fix/50152-painless-limit-per-context__06__stats-api", "committedDate": "2020-03-24T20:44:03Z", "type": "commit"}, {"oid": "3a2c96dd54f0d10ba758b9be63c2d73e136aa088", "url": "https://github.com/elastic/elasticsearch/commit/3a2c96dd54f0d10ba758b9be63c2d73e136aa088", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into fix/50152-painless-limit-per-context__06__stats-api", "committedDate": "2020-03-25T19:57:09Z", "type": "commit"}, {"oid": "01bd2eea48de784e7897bf260125174ca4a9ec82", "url": "https://github.com/elastic/elasticsearch/commit/01bd2eea48de784e7897bf260125174ca4a9ec82", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into fix/50152-painless-limit-per-context__06__stats-api", "committedDate": "2020-03-26T16:05:19Z", "type": "commit"}, {"oid": "6e31f1a9fd8089f4f02566cd18161e5b924cc88d", "url": "https://github.com/elastic/elasticsearch/commit/6e31f1a9fd8089f4f02566cd18161e5b924cc88d", "message": "Add tests", "committedDate": "2020-03-26T17:39:19Z", "type": "commit"}, {"oid": "7eaa01af885df3cbe8f8d2f2a704a396fd4d1b85", "url": "https://github.com/elastic/elasticsearch/commit/7eaa01af885df3cbe8f8d2f2a704a396fd4d1b85", "message": "Test sum", "committedDate": "2020-03-26T18:27:35Z", "type": "commit"}, {"oid": "bbe5678cef61203aa7241acf58ed1ffe397e28a0", "url": "https://github.com/elastic/elasticsearch/commit/bbe5678cef61203aa7241acf58ed1ffe397e28a0", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into fix/50152-painless-limit-per-context__06__stats-api", "committedDate": "2020-03-26T18:49:29Z", "type": "commit"}]}