{"pr_number": 66044, "pr_title": "Clean up some aggregation tests", "pr_createdAt": "2020-12-08T16:50:59Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66044", "timeline": [{"oid": "ce63f67d7609b8da8bca1fbe44ef26e3ecb1eb05", "url": "https://github.com/elastic/elasticsearch/commit/ce63f67d7609b8da8bca1fbe44ef26e3ecb1eb05", "message": "Clean up some aggregation tests\n\nThis rewrites two tests for aggregations to use `AggregatorTestCase`'s\nsimpler way of making `Aggregator`s, allowing us to remove a ctor on\n`ProductionAggregationContext` that we weren't happy about. Now there is\nonly a single test call to `ProductionAggregationContext` and we can\nremove that soon.", "committedDate": "2020-12-08T16:50:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM1ODU2MA==", "url": "https://github.com/elastic/elasticsearch/pull/66044#discussion_r539358560", "bodyText": "Oh, hey, moving this off of ESSingleNodeTestCase is a win!", "author": "not-napoleon", "createdAt": "2020-12-09T14:37:12Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java", "diffHunk": "@@ -19,54 +19,109 @@\n \n package org.elasticsearch.search.aggregations;\n \n-import org.elasticsearch.common.xcontent.XContentParser;\n-import org.elasticsearch.common.xcontent.json.JsonXContent;\n-import org.elasticsearch.index.IndexService;\n-import org.elasticsearch.search.aggregations.MultiBucketConsumerService.MultiBucketConsumer;\n-import org.elasticsearch.search.aggregations.support.AggregationContext.ProductionAggregationContext;\n-import org.elasticsearch.test.ESSingleNodeTestCase;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.RandomIndexWriter;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.store.Directory;\n+import org.elasticsearch.index.mapper.KeywordFieldMapper.KeywordFieldType;\n+import org.elasticsearch.script.AggregationScript;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.TopHitsAggregationBuilder;\n \n import java.io.IOException;\n \n+import static org.mockito.Matchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n-public class AggregationCollectorTests extends ESSingleNodeTestCase {\n+public class AggregationCollectorTests extends AggregatorTestCase {", "originalCommit": "ce63f67d7609b8da8bca1fbe44ef26e3ecb1eb05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "954c0800b5d9331c350a9994b68fad1881eb598e", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java\nindex 356f12414b2..126d8f19bac 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java\n\n@@ -38,35 +38,35 @@ import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class AggregationCollectorTests extends AggregatorTestCase {\n-    public void testTermsDoesntNeedScores() throws IOException {\n+    public void testTerms() throws IOException {\n         assertFalse(needsScores(termsBuilder().field(\"f\")));\n     }\n \n-    public void testSubTermsDoesntNeedScores() throws IOException {\n+    public void testSubTerms() throws IOException {\n         assertFalse(needsScores(termsBuilder().field(\"f\").subAggregation(new TermsAggregationBuilder(\"i\").field(\"f\"))));\n     }\n \n-    public void testScriptDoesntNeedScoresIfScriptDoesntNeedScores() throws IOException {\n+    public void testScoreConsumingScript() throws IOException {\n         assertFalse(needsScores(termsBuilder().script(new Script(\"no_scores\"))));\n     }\n \n-    public void testScriptNeedsScoresIfScriptNeedsScores() throws IOException {\n+    public void testNonScoreConsumingScript() throws IOException {\n         assertTrue(needsScores(termsBuilder().script(new Script(\"with_scores\"))));\n     }\n \n-    public void testSubScriptDoesntNeedScoresIfSubScriptDoesntNeedScores() throws IOException {\n+    public void testSubScoreConsumingScript() throws IOException {\n         assertFalse(needsScores(termsBuilder().field(\"f\").subAggregation(termsBuilder().script(new Script(\"no_scores\")))));\n     }\n \n-    public void testSubScriptNeedsScoresIfSubScriptNeedsScores() throws IOException {\n+    public void testSubNonScoreConsumingScript() throws IOException {\n         assertTrue(needsScores(termsBuilder().field(\"f\").subAggregation(termsBuilder().script(new Script(\"with_scores\")))));\n     }\n \n-    public void testTopHitsNeedsScores() throws IOException {\n+    public void testTopHits() throws IOException {\n         assertTrue(needsScores(new TopHitsAggregationBuilder(\"h\")));\n     }\n \n-    public void testSubTopHitsNeedsScores() throws IOException {\n+    public void testSubTopHits() throws IOException {\n         assertTrue(needsScores(termsBuilder().field(\"f\").subAggregation(new TopHitsAggregationBuilder(\"h\"))));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2MjUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/66044#discussion_r539362524", "bodyText": "I am not a fan of this method of documenting tests. CamelCase sentences are hard to read, and with many similar names it's easy to miss the differences between two of them.  Maybe just name this something like testSubScriptNoScore and add a javadoc noting what it's intended to test?  Same for the other very long test names.", "author": "not-napoleon", "createdAt": "2020-12-09T14:41:58Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java", "diffHunk": "@@ -19,54 +19,109 @@\n \n package org.elasticsearch.search.aggregations;\n \n-import org.elasticsearch.common.xcontent.XContentParser;\n-import org.elasticsearch.common.xcontent.json.JsonXContent;\n-import org.elasticsearch.index.IndexService;\n-import org.elasticsearch.search.aggregations.MultiBucketConsumerService.MultiBucketConsumer;\n-import org.elasticsearch.search.aggregations.support.AggregationContext.ProductionAggregationContext;\n-import org.elasticsearch.test.ESSingleNodeTestCase;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.RandomIndexWriter;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.store.Directory;\n+import org.elasticsearch.index.mapper.KeywordFieldMapper.KeywordFieldType;\n+import org.elasticsearch.script.AggregationScript;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.TopHitsAggregationBuilder;\n \n import java.io.IOException;\n \n+import static org.mockito.Matchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n-public class AggregationCollectorTests extends ESSingleNodeTestCase {\n+public class AggregationCollectorTests extends AggregatorTestCase {\n+    public void testTermsDoesntNeedScores() throws IOException {\n+        assertFalse(needsScores(termsBuilder().field(\"f\")));\n+    }\n+\n+    public void testSubTermsDoesntNeedScores() throws IOException {\n+        assertFalse(needsScores(termsBuilder().field(\"f\").subAggregation(new TermsAggregationBuilder(\"i\").field(\"f\"))));\n+    }\n+\n+    public void testScriptDoesntNeedScoresIfScriptDoesntNeedScores() throws IOException {\n+        assertFalse(needsScores(termsBuilder().script(new Script(\"no_scores\"))));\n+    }\n+\n+    public void testScriptNeedsScoresIfScriptNeedsScores() throws IOException {\n+        assertTrue(needsScores(termsBuilder().script(new Script(\"with_scores\"))));\n+    }\n \n-    public void testNeedsScores() throws Exception {\n-        IndexService index = createIndex(\"idx\");\n-        client().prepareIndex(\"idx\").setId(\"1\").setSource(\"f\", 5).execute().get();\n-        client().admin().indices().prepareRefresh(\"idx\").get();\n+    public void testSubScriptDoesntNeedScoresIfSubScriptDoesntNeedScores() throws IOException {", "originalCommit": "ce63f67d7609b8da8bca1fbe44ef26e3ecb1eb05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0ODYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/66044#discussion_r539548638", "bodyText": "I like having a test for each thing. I could go either way on the long names. I'll change them.", "author": "nik9000", "createdAt": "2020-12-09T18:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2MjUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "954c0800b5d9331c350a9994b68fad1881eb598e", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java\nindex 356f12414b2..126d8f19bac 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/AggregationCollectorTests.java\n\n@@ -38,35 +38,35 @@ import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class AggregationCollectorTests extends AggregatorTestCase {\n-    public void testTermsDoesntNeedScores() throws IOException {\n+    public void testTerms() throws IOException {\n         assertFalse(needsScores(termsBuilder().field(\"f\")));\n     }\n \n-    public void testSubTermsDoesntNeedScores() throws IOException {\n+    public void testSubTerms() throws IOException {\n         assertFalse(needsScores(termsBuilder().field(\"f\").subAggregation(new TermsAggregationBuilder(\"i\").field(\"f\"))));\n     }\n \n-    public void testScriptDoesntNeedScoresIfScriptDoesntNeedScores() throws IOException {\n+    public void testScoreConsumingScript() throws IOException {\n         assertFalse(needsScores(termsBuilder().script(new Script(\"no_scores\"))));\n     }\n \n-    public void testScriptNeedsScoresIfScriptNeedsScores() throws IOException {\n+    public void testNonScoreConsumingScript() throws IOException {\n         assertTrue(needsScores(termsBuilder().script(new Script(\"with_scores\"))));\n     }\n \n-    public void testSubScriptDoesntNeedScoresIfSubScriptDoesntNeedScores() throws IOException {\n+    public void testSubScoreConsumingScript() throws IOException {\n         assertFalse(needsScores(termsBuilder().field(\"f\").subAggregation(termsBuilder().script(new Script(\"no_scores\")))));\n     }\n \n-    public void testSubScriptNeedsScoresIfSubScriptNeedsScores() throws IOException {\n+    public void testSubNonScoreConsumingScript() throws IOException {\n         assertTrue(needsScores(termsBuilder().field(\"f\").subAggregation(termsBuilder().script(new Script(\"with_scores\")))));\n     }\n \n-    public void testTopHitsNeedsScores() throws IOException {\n+    public void testTopHits() throws IOException {\n         assertTrue(needsScores(new TopHitsAggregationBuilder(\"h\")));\n     }\n \n-    public void testSubTopHitsNeedsScores() throws IOException {\n+    public void testSubTopHits() throws IOException {\n         assertTrue(needsScores(termsBuilder().field(\"f\").subAggregation(new TopHitsAggregationBuilder(\"h\"))));\n     }\n \n"}}, {"oid": "a36eef9911d964afd08202054cedf548707a60af", "url": "https://github.com/elastic/elasticsearch/commit/a36eef9911d964afd08202054cedf548707a60af", "message": "Merge branch 'master' into drop_shameful_ctor", "committedDate": "2020-12-09T18:57:57Z", "type": "commit"}, {"oid": "954c0800b5d9331c350a9994b68fad1881eb598e", "url": "https://github.com/elastic/elasticsearch/commit/954c0800b5d9331c350a9994b68fad1881eb598e", "message": "Shorten names", "committedDate": "2020-12-09T19:14:55Z", "type": "commit"}]}