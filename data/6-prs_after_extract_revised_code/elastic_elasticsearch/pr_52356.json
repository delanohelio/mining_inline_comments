{"pr_number": 52356, "pr_title": "Implement ILM policy for .ml-state* indices", "pr_createdAt": "2020-02-14T10:53:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52356", "timeline": [{"oid": "5355111743b8197ba4763b8e0f6fcc0d190e717c", "url": "https://github.com/elastic/elasticsearch/commit/5355111743b8197ba4763b8e0f6fcc0d190e717c", "message": "Implement ILM policy for .ml-state* indices", "committedDate": "2020-02-14T10:56:06Z", "type": "forcePushed"}, {"oid": "707007eaa35c219f62408ff801eef1e09bb0dbe8", "url": "https://github.com/elastic/elasticsearch/commit/707007eaa35c219f62408ff801eef1e09bb0dbe8", "message": "Implement ILM policy for .ml-state* indices", "committedDate": "2020-02-17T10:48:01Z", "type": "forcePushed"}, {"oid": "d765bc7fcf5b548ed47b9248181ea3f7187f248b", "url": "https://github.com/elastic/elasticsearch/commit/d765bc7fcf5b548ed47b9248181ea3f7187f248b", "message": "Implement ILM policy for .ml-state* indices", "committedDate": "2020-02-17T12:41:32Z", "type": "forcePushed"}, {"oid": "121932b56291e3c0056745b5477b789dad463723", "url": "https://github.com/elastic/elasticsearch/commit/121932b56291e3c0056745b5477b789dad463723", "message": "Implement ILM policy for .ml-state* indices", "committedDate": "2020-02-17T12:49:03Z", "type": "forcePushed"}, {"oid": "1357d19d73e89f361cc74d2b473441fcf9553e51", "url": "https://github.com/elastic/elasticsearch/commit/1357d19d73e89f361cc74d2b473441fcf9553e51", "message": "Implement ILM policy for .ml-state* indices", "committedDate": "2020-02-19T10:37:41Z", "type": "forcePushed"}, {"oid": "f5f1bf0d3ce1cc336a36dc8d217efe85cbba2517", "url": "https://github.com/elastic/elasticsearch/commit/f5f1bf0d3ce1cc336a36dc8d217efe85cbba2517", "message": "Implement ILM policy for .ml-state* indices", "committedDate": "2020-02-19T10:48:06Z", "type": "forcePushed"}, {"oid": "265623716fd57f22e0f156a6042e8f3a3a7ef31b", "url": "https://github.com/elastic/elasticsearch/commit/265623716fd57f22e0f156a6042e8f3a3a7ef31b", "message": "Rename ML_STATE to INITIAL_ML_STATE", "committedDate": "2020-02-19T11:39:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI3MjkxMw==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r381272913", "bodyText": "There's an edge case here, which is that it's sorting on the concrete index names, and those could have been modified during a major version upgrade.\nFor example, if .ml-state was first created in 5.5 then in 6.8 the migration assistant would have reindexed it to .reindexed-6-ml-state with an alias of .ml-state (in addition to the .ml-state-write alias).  Sorting in reverse would put . reindexed-6-ml-state before .ml-state-000042.\nIt would be safer to create a custom comparator that extracts the last 6 digits from the name for concrete names that end with a dash followed by 6 digits, and 000000 otherwise.", "author": "droberts195", "createdAt": "2020-02-19T12:57:13Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java", "diffHunk": "@@ -89,64 +107,105 @@ public static String configIndexName() {\n     }\n \n     /**\n-     * Create the .ml-state index (if necessary)\n-     * Create the .ml-state-write alias for the .ml-state index (if necessary)\n+     * Creates the .ml-state-000001 index (if necessary)\n+     * Creates the .ml-state-write alias for the .ml-state-000001 index (if necessary)\n      */\n     public static void createStateIndexAndAliasIfNecessary(Client client, ClusterState state, final ActionListener<Boolean> finalListener) {\n-\n-        if (state.getMetaData().getAliasAndIndexLookup().containsKey(jobStateIndexWriteAlias())) {\n-            finalListener.onResponse(false);\n-            return;\n+        IndexNameExpressionResolver indexNameExpressionResolver = new IndexNameExpressionResolver();\n+        String[] stateIndices =\n+            indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.lenientExpandOpen(), jobStateIndexPattern());\n+        Optional<IndexMetaData> indexPointedByCurrentWriteAlias = state.getMetaData().hasAlias(\".ml-state-write\")\n+            ? state.getMetaData().getAliasAndIndexLookup().get(\".ml-state-write\").getIndices().stream().findFirst()\n+            : Optional.empty();\n+        String legacyJobStateIndex = AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX;\n+\n+        if (stateIndices.length == 0) {\n+            if (indexPointedByCurrentWriteAlias.isEmpty()) {\n+                createInitialStateIndex(client, true, finalListener);\n+                return;\n+            }\n+            logger.error(\n+                \"There are no indices matching '.ml-state*' pattern but '.ml-state-write' alias points at [{}]. \"\n+                + \"This should never happen.\",\n+                indexPointedByCurrentWriteAlias.get());\n+        } else if (stateIndices.length == 1 && stateIndices[0].equals(legacyJobStateIndex)) {\n+            if (indexPointedByCurrentWriteAlias.isEmpty()) {\n+                createInitialStateIndex(client, true, finalListener);\n+                return;\n+            }\n+            if (indexPointedByCurrentWriteAlias.get().getIndex().getName().equals(legacyJobStateIndex)) {\n+                createInitialStateIndex(\n+                    client,\n+                    false,\n+                    ActionListener.wrap(\n+                        unused -> updateStateWriteAlias(client, legacyJobStateIndex, initialJobStateIndex(), finalListener),\n+                        finalListener::onFailure)\n+                );\n+                return;\n+            }\n+            logger.error(\n+                \"There is exactly one index (i.e. '.ml-state') matching '.ml-state*' pattern but '.ml-state-write' alias points at [{}]. \"\n+                + \"This should never happen.\",\n+                indexPointedByCurrentWriteAlias.get());\n+        } else {\n+            if (indexPointedByCurrentWriteAlias.isEmpty()) {\n+                Arrays.sort(stateIndices, Collections.reverseOrder());", "originalCommit": "265623716fd57f22e0f156a6042e8f3a3a7ef31b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5OTc5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r381899796", "bodyText": "Done.\nGood catch. I was not aware of the renaming performed by migration assistant.\nI've also applied this suggestion in #52510  (rename .ml-state to .ml-state-000001) which is a prerequisite for this ILM PR (turned WIP again).", "author": "przemekwitek", "createdAt": "2020-02-20T10:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI3MjkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5OTEyNw==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r382599127", "bodyText": "I rebased this PR on the .ml-state renaming PR and fixed the tests.\nPTAL", "author": "przemekwitek", "createdAt": "2020-02-21T14:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI3MjkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "1de4e4c168d6fa75bb8f500b27ed9a40421ea1cd", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java\nindex 5706bf68d31..ee386ba0a87 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java\n\n@@ -126,7 +151,7 @@ public final class AnomalyDetectorsIndex {\n             }\n             logger.error(\n                 \"There are no indices matching '.ml-state*' pattern but '.ml-state-write' alias points at [{}]. \"\n-                + \"This should never happen.\",\n+                    + \"This should never happen.\",\n                 indexPointedByCurrentWriteAlias.get());\n         } else if (stateIndices.length == 1 && stateIndices[0].equals(legacyJobStateIndex)) {\n             if (indexPointedByCurrentWriteAlias.isEmpty()) {\n"}}, {"oid": "1de4e4c168d6fa75bb8f500b27ed9a40421ea1cd", "url": "https://github.com/elastic/elasticsearch/commit/1de4e4c168d6fa75bb8f500b27ed9a40421ea1cd", "message": "Implement custom comparator for state index names", "committedDate": "2020-02-20T20:20:07Z", "type": "forcePushed"}, {"oid": "379f6c9a1ebf1f6b96ec1444675688a9b3698649", "url": "https://github.com/elastic/elasticsearch/commit/379f6c9a1ebf1f6b96ec1444675688a9b3698649", "message": "Implement custom comparator for state index names", "committedDate": "2020-02-20T20:29:48Z", "type": "forcePushed"}, {"oid": "e0bb5b1693fd68d37be64db5aff1538f2679f693", "url": "https://github.com/elastic/elasticsearch/commit/e0bb5b1693fd68d37be64db5aff1538f2679f693", "message": "Apply ILM template settings only when ILM plugin is enabled", "committedDate": "2020-02-21T12:01:11Z", "type": "forcePushed"}, {"oid": "f6d27fffa9c5acd289acd4a7cc5298d29102a67d", "url": "https://github.com/elastic/elasticsearch/commit/f6d27fffa9c5acd289acd4a7cc5298d29102a67d", "message": "Fix MachineLearningLicensingTests and AutodetectProcessManagerTests tests", "committedDate": "2020-02-21T14:05:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3Mjk0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r382772947", "bodyText": "What happens if .ml-state-write is a concrete index? I may have missed a logic branch somewhere.", "author": "benwtrent", "createdAt": "2020-02-21T19:47:06Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java", "diffHunk": "@@ -120,60 +138,99 @@ public static String configIndexName() {\n     public static void createStateIndexAndAliasIfNecessary(Client client, ClusterState state, IndexNameExpressionResolver resolver,\n                                                            final ActionListener<Boolean> finalListener) {\n \n-        if (state.getMetaData().getAliasAndIndexLookup().containsKey(jobStateIndexWriteAlias())) {\n-            finalListener.onResponse(false);\n-            return;\n-        }\n+        String[] stateIndices = resolver.concreteIndexNames(state, IndicesOptions.lenientExpandOpen(), jobStateIndexPattern());\n+        Optional<IndexMetaData> indexPointedByCurrentWriteAlias = state.getMetaData().hasAlias(\".ml-state-write\")", "originalCommit": "f6d27fffa9c5acd289acd4a7cc5298d29102a67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3NTgxOA==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r386975818", "bodyText": "Our code never creates such a situation (i.e. a concrete index named .ml-state-write). It may occur if there is a bug in our code or the user creates .ml-state-write index before creating an ML job.\nSo I'm wondering what is the right thing to do in such a case. Is it even possible to have both index and alias named .ml-state-write? Let me find out...", "author": "przemekwitek", "createdAt": "2020-03-03T12:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3Mjk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4OTQ2NA==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r386989464", "bodyText": "I verified that when an index \".ml-state-write\" exists, one cannot create an alias with the same name:\n{\n  \"error\": {\n    \"root_cause\": [\n      {\n        \"type\": \"invalid_alias_name_exception\",\n        \"reason\": \"Invalid alias name [.ml-state-write], an index exists with the same name as the alias\",\n        \"index_uuid\": \"YyvpSSoSQc6yoBq69Q0gDg\",\n        \"index\": \".ml-state-write\"\n      }\n    ],\n    \"type\": \"invalid_alias_name_exception\",\n    \"reason\": \"Invalid alias name [.ml-state-write], an index exists with the same name as the alias\",\n    \"index_uuid\": \"YyvpSSoSQc6yoBq69Q0gDg\",\n    \"index\": \".ml-state-write\"\n  },\n  \"status\": 400\n}\n\nSo I'd propose to leave the code as it is because this situation (pre-existing .ml-state-write index) is unlikely and could have as well happened before this PR.\nAn alternative would be to throw an exception if such a situation is detected. WDYT?", "author": "przemekwitek", "createdAt": "2020-03-03T12:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3Mjk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5NTA3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r386995079", "bodyText": "@droberts195: Did you give thumb up for leaving the code as it is or for throwing an exception?", "author": "przemekwitek", "createdAt": "2020-03-03T12:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3Mjk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0ODA2OA==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r387048068", "bodyText": "Sorry for the ambiguity.  I was giving thumbs up to\n\nSo I'd propose to leave the code as it is\n\n.ml-state-write should not really exist as a concrete index.  We have never used this name for a concrete index and if a user has then that's at the level of hacking the system in an unsupported way.  I am sure there are masses of other checks we could add for users creating indices that would confuse our code, but we haven't added such checks because we don't expect this sort of hacking and in practice people who ask for help haven't done this.", "author": "droberts195", "createdAt": "2020-03-03T14:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3Mjk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1MTY5MA==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r387051690", "bodyText": "Cool, thanks for confirming.", "author": "przemekwitek", "createdAt": "2020-03-03T14:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3Mjk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e1f40611722864e0af620b230393e86b573e5aea", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java\nindex 219db21b06a..faa921971a2 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndex.java\n\n@@ -137,100 +80,13 @@ public final class AnomalyDetectorsIndex {\n      */\n     public static void createStateIndexAndAliasIfNecessary(Client client, ClusterState state, IndexNameExpressionResolver resolver,\n                                                            final ActionListener<Boolean> finalListener) {\n-\n-        String[] stateIndices = resolver.concreteIndexNames(state, IndicesOptions.lenientExpandOpen(), jobStateIndexPattern());\n-        Optional<IndexMetaData> indexPointedByCurrentWriteAlias = state.getMetaData().hasAlias(\".ml-state-write\")\n-            ? state.getMetaData().getAliasAndIndexLookup().get(\".ml-state-write\").getIndices().stream().findFirst()\n-            : Optional.empty();\n-        String legacyJobStateIndex = AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX;\n-\n-        if (stateIndices.length == 0) {\n-            if (indexPointedByCurrentWriteAlias.isEmpty()) {\n-                createInitialStateIndex(client, true, finalListener);\n-                return;\n-            }\n-            logger.error(\n-                \"There are no indices matching '.ml-state*' pattern but '.ml-state-write' alias points at [{}]. \"\n-                    + \"This should never happen.\",\n-                indexPointedByCurrentWriteAlias.get());\n-        } else if (stateIndices.length == 1 && stateIndices[0].equals(legacyJobStateIndex)) {\n-            if (indexPointedByCurrentWriteAlias.isEmpty()) {\n-                createInitialStateIndex(client, true, finalListener);\n-                return;\n-            }\n-            if (indexPointedByCurrentWriteAlias.get().getIndex().getName().equals(legacyJobStateIndex)) {\n-                createInitialStateIndex(\n-                    client,\n-                    false,\n-                    ActionListener.wrap(\n-                        unused -> updateStateWriteAlias(client, legacyJobStateIndex, initialJobStateIndex(), finalListener),\n-                        finalListener::onFailure)\n-                );\n-                return;\n-            }\n-            logger.error(\n-                \"There is exactly one index (i.e. '.ml-state') matching '.ml-state*' pattern but '.ml-state-write' alias points at [{}]. \"\n-                    + \"This should never happen.\",\n-                indexPointedByCurrentWriteAlias.get());\n-        } else {\n-            if (indexPointedByCurrentWriteAlias.isEmpty()) {\n-                assert stateIndices.length > 0;\n-                String latestStateIndex = Arrays.stream(stateIndices).max(STATE_INDEX_NAME_COMPARATOR).get();\n-                updateStateWriteAlias(client, null, latestStateIndex, finalListener);\n-                return;\n-            }\n-        }\n-        // If the .ml-state-write alias is set, there is nothing more to do.\n-        finalListener.onResponse(false);\n-    }\n-\n-    private static void createInitialStateIndex(Client client, boolean withAlias, ActionListener<Boolean> finalListener) {\n-        CreateIndexRequestBuilder requestBuilder = client.admin()\n-            .indices()\n-            .prepareCreate(initialJobStateIndex());\n-        if (withAlias) {\n-            requestBuilder.addAlias(new Alias(jobStateIndexWriteAlias()));\n-        }\n-        CreateIndexRequest request = requestBuilder.request();\n-\n-        executeAsyncWithOrigin(client.threadPool().getThreadContext(),\n-            ML_ORIGIN,\n-            request,\n-            ActionListener.<CreateIndexResponse>wrap(\n-                createIndexResponse -> finalListener.onResponse(true),\n-                createIndexFailure -> {\n-                    // If it was created between our last check, and this request being handled, we should add the alias\n-                    // Adding an alias that already exists is idempotent. So, no need to double check if the alias exists\n-                    // as well.\n-                    if (ExceptionsHelper.unwrapCause(createIndexFailure) instanceof ResourceAlreadyExistsException) {\n-                        updateStateWriteAlias(client, null, initialJobStateIndex(), finalListener);\n-                    } else {\n-                        finalListener.onFailure(createIndexFailure);\n-                    }\n-                }),\n-            client.admin().indices()::create);\n-    }\n-\n-    private static void updateStateWriteAlias(Client client,\n-                                              @Nullable String currentIndex,\n-                                              String newIndex,\n-                                              ActionListener<Boolean> finalListener) {\n-        IndicesAliasesRequestBuilder requestBuilder = client.admin()\n-            .indices()\n-            .prepareAliases()\n-            .addAlias(newIndex, jobStateIndexWriteAlias());\n-        if (currentIndex != null) {\n-            requestBuilder.removeAlias(currentIndex, jobStateIndexWriteAlias());\n-        }\n-        IndicesAliasesRequest request = requestBuilder.request();\n-\n-        executeAsyncWithOrigin(client.threadPool().getThreadContext(),\n-            ML_ORIGIN,\n-            request,\n-            ActionListener.<AcknowledgedResponse>wrap(\n-                resp -> finalListener.onResponse(resp.isAcknowledged()),\n-                finalListener::onFailure),\n-            client.admin().indices()::aliases);\n+        MlIndexAndAlias.createIndexAndAliasIfNecessary(\n+            client,\n+            state,\n+            resolver,\n+            AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX,\n+            AnomalyDetectorsIndex.jobStateIndexWriteAlias(),\n+            finalListener);\n     }\n \n     public static String resultsMapping() {\n"}}, {"oid": "e1f40611722864e0af620b230393e86b573e5aea", "url": "https://github.com/elastic/elasticsearch/commit/e1f40611722864e0af620b230393e86b573e5aea", "message": "Adapt the code to the refactoring done in MlIndexAndAlias class", "committedDate": "2020-03-03T10:44:21Z", "type": "forcePushed"}, {"oid": "fdd0b04844d50e67927e6df866ea583078a17ae5", "url": "https://github.com/elastic/elasticsearch/commit/fdd0b04844d50e67927e6df866ea583078a17ae5", "message": "Add ILM plugin to MlSingleNodeTestCase so that ILM settings in .ml-state work", "committedDate": "2020-03-03T12:39:14Z", "type": "forcePushed"}, {"oid": "7d7aa358f34412ec248985b5d05cd987295f84bf", "url": "https://github.com/elastic/elasticsearch/commit/7d7aa358f34412ec248985b5d05cd987295f84bf", "message": "Add ILM plugin to MlSingleNodeTestCase so that ILM settings in .ml-state work", "committedDate": "2020-03-04T08:08:45Z", "type": "forcePushed"}, {"oid": "a4b35c420700de6d59886033c3178058ce725253", "url": "https://github.com/elastic/elasticsearch/commit/a4b35c420700de6d59886033c3178058ce725253", "message": "Add ILM plugin to MlSingleNodeTestCase so that ILM settings in .ml-state work", "committedDate": "2020-03-04T08:28:01Z", "type": "forcePushed"}, {"oid": "95ab96ea4f6fc475a30cea74cfb8c6e8cb9c4c28", "url": "https://github.com/elastic/elasticsearch/commit/95ab96ea4f6fc475a30cea74cfb8c6e8cb9c4c28", "message": "Add ILM plugin to MlSingleNodeTestCase so that ILM settings in .ml-state work", "committedDate": "2020-03-04T09:13:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMzk1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r388403959", "bodyText": "What is the scope of the name state_index_ilm_policy here (the first argument)?  Is it local to the ML plugin or is it global across the whole of Elasticsearch?  If it is global I think it should be changed to ml_state_index_ilm_policy.\nAlso, all the other policies set up by X-Pack plugins use hyphens instead of underscores in their names and don't contain the word \"index\", so probably ml-state-ilm-policy would be better for product-wide consistency.", "author": "droberts195", "createdAt": "2020-03-05T16:20:09Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java", "diffHunk": "@@ -59,6 +58,9 @@\n \n     private static final IndexTemplateConfig STATS_TEMPLATE = statsTemplate();\n \n+    private static final LifecyclePolicyConfig ANOMALY_DETECTION_STATE_ILM_POLICY =\n+        new LifecyclePolicyConfig(\"state_index_ilm_policy\", ANOMALY_DETECTION_PATH + \"state_index_ilm_policy.json\");", "originalCommit": "63f312369d365b622f76660e439c0ee874c818ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NDc1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52356#discussion_r388454755", "bodyText": "You're right, ILM, SLM and Watcher use this format.\nSo I've made my name consistent with them.\nNote that I purposely did not change the file name (state_index_ilm_policy.json) as I wanted it to be consistent with state_index_template.json we already have in the same directory.", "author": "przemekwitek", "createdAt": "2020-03-05T17:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMzk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0caa02f4fb6b3a0d0cc3de4609849381234523a0", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\nindex 0c59b0944a8..6c205f23bb2 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\n\n@@ -58,8 +58,9 @@ public class MlIndexTemplateRegistry extends IndexTemplateRegistry {\n \n     private static final IndexTemplateConfig STATS_TEMPLATE = statsTemplate();\n \n-    private static final LifecyclePolicyConfig ANOMALY_DETECTION_STATE_ILM_POLICY =\n-        new LifecyclePolicyConfig(\"state_index_ilm_policy\", ANOMALY_DETECTION_PATH + \"state_index_ilm_policy.json\");\n+    private static final String ML_STATE_ILM_POLICY_NAME = \"ml-state-ilm-policy\";\n+    private static final LifecyclePolicyConfig ML_STATE_ILM_POLICY =\n+        new LifecyclePolicyConfig(ML_STATE_ILM_POLICY_NAME, ANOMALY_DETECTION_PATH + \"state_index_ilm_policy.json\");\n \n     private static IndexTemplateConfig configTemplate() {\n         Map<String, String> variables = new HashMap<>();\n"}}, {"oid": "0caa02f4fb6b3a0d0cc3de4609849381234523a0", "url": "https://github.com/elastic/elasticsearch/commit/0caa02f4fb6b3a0d0cc3de4609849381234523a0", "message": "Rename ILM policy for ML state index", "committedDate": "2020-03-05T17:51:53Z", "type": "forcePushed"}, {"oid": "f8af618ab12f01efab208d7a9fd966732412b697", "url": "https://github.com/elastic/elasticsearch/commit/f8af618ab12f01efab208d7a9fd966732412b697", "message": "Implement ILM policy for .ml-state* indices", "committedDate": "2020-03-09T09:19:38Z", "type": "commit"}, {"oid": "e0c33501de399e1c77bbb26daadac5a89953d438", "url": "https://github.com/elastic/elasticsearch/commit/e0c33501de399e1c77bbb26daadac5a89953d438", "message": "Implement ILM policy for .ml-state* indices", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "fbae198eb7803888ab0c0e42c670ff9c727d0aa0", "url": "https://github.com/elastic/elasticsearch/commit/fbae198eb7803888ab0c0e42c670ff9c727d0aa0", "message": "Adapt tests to the new state index name (.ml-state-000001)", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "ebf0449651cb91e9b833b13b987f634c3778bf58", "url": "https://github.com/elastic/elasticsearch/commit/ebf0449651cb91e9b833b13b987f634c3778bf58", "message": "Implement custom comparator for state index names", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "93c2108f38eb1ae0155ff727b18733999f233b6d", "url": "https://github.com/elastic/elasticsearch/commit/93c2108f38eb1ae0155ff727b18733999f233b6d", "message": "Apply ILM template settings only when ILM plugin is enabled", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "93ca49433747553035ec7729d648334acc8c1926", "url": "https://github.com/elastic/elasticsearch/commit/93ca49433747553035ec7729d648334acc8c1926", "message": "Adapt the code to the new way of using resolver", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "8f9ab818d01074be76d05451eb933a031befcf79", "url": "https://github.com/elastic/elasticsearch/commit/8f9ab818d01074be76d05451eb933a031befcf79", "message": "Fix MachineLearningLicensingTests and AutodetectProcessManagerTests tests", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "5e16857041af9fb9b96f43e22fafaded367853df", "url": "https://github.com/elastic/elasticsearch/commit/5e16857041af9fb9b96f43e22fafaded367853df", "message": "Adapt the code to the refactoring done in MlIndexAndAlias class", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "cadebd1f0b3de5127339a6f35218fe50164a2ddb", "url": "https://github.com/elastic/elasticsearch/commit/cadebd1f0b3de5127339a6f35218fe50164a2ddb", "message": "Add ILM plugin to MlSingleNodeTestCase so that ILM settings in .ml-state work", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "392d4ea4cc2cbd1cf9dc93a7ec1baa67f9cdd191", "url": "https://github.com/elastic/elasticsearch/commit/392d4ea4cc2cbd1cf9dc93a7ec1baa67f9cdd191", "message": "Fix DeleteExpiredDataIT test so that it indexes docs to .ml-state-000001 rather than .ml-state-write", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "93689c0460dcb65c30d9c2faf2183b4f7038bc26", "url": "https://github.com/elastic/elasticsearch/commit/93689c0460dcb65c30d9c2faf2183b4f7038bc26", "message": "Rename ILM policy for ML state index", "committedDate": "2020-03-09T09:19:39Z", "type": "commit"}, {"oid": "93689c0460dcb65c30d9c2faf2183b4f7038bc26", "url": "https://github.com/elastic/elasticsearch/commit/93689c0460dcb65c30d9c2faf2183b4f7038bc26", "message": "Rename ILM policy for ML state index", "committedDate": "2020-03-09T09:19:39Z", "type": "forcePushed"}]}