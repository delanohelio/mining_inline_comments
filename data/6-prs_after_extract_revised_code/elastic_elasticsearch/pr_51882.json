{"pr_number": 51882, "pr_title": "Introduce jvm.options.d for customizing JVM options", "pr_createdAt": "2020-02-04T18:59:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51882", "timeline": [{"oid": "386de64b21d94830e4cc47411c3190455dd2d034", "url": "https://github.com/elastic/elasticsearch/commit/386de64b21d94830e4cc47411c3190455dd2d034", "message": "Introduce jvm.options.d for customizing JVM options\n\nThis commit introduces the ability to override JVM options by adding\ncustom JVM options files to a jvm.options.d directory. This simplifies\nadministration of Elasticsearch by not requiring administrators to keep\nthe root jvm.options file in sync with changes that we make to the root\njvm.options file. Instead, they are not expected to modify this file but\ninstead supply their own in jvm.options.d. In Docker installations, this\nmeans they can bind mount this directory in. In future versions of\nElasticsearch, we can consider removing the root jvm.options file\n(instead, providing all options there as system JVM options).", "committedDate": "2020-02-04T18:58:11Z", "type": "commit"}, {"oid": "e8a16854d0727a589cce96b4fb1114adc5a0d3e1", "url": "https://github.com/elastic/elasticsearch/commit/e8a16854d0727a589cce96b4fb1114adc5a0d3e1", "message": "Do not encourage editing root jvm.options file", "committedDate": "2020-02-04T19:00:37Z", "type": "commit"}, {"oid": "98a315c97ee01a765d0880b1b9d7ea207d0bac91", "url": "https://github.com/elastic/elasticsearch/commit/98a315c97ee01a765d0880b1b9d7ea207d0bac91", "message": "Remove unneeded method", "committedDate": "2020-02-04T19:01:45Z", "type": "commit"}, {"oid": "50b7090ac13b2b2046f481710e9076b63502a8e5", "url": "https://github.com/elastic/elasticsearch/commit/50b7090ac13b2b2046f481710e9076b63502a8e5", "message": "Fix javadoc", "committedDate": "2020-02-04T19:41:25Z", "type": "commit"}, {"oid": "ef7c11ceb982bb0e938dd8617db64fda50f29308", "url": "https://github.com/elastic/elasticsearch/commit/ef7c11ceb982bb0e938dd8617db64fda50f29308", "message": "Update heap size docs", "committedDate": "2020-02-04T19:46:26Z", "type": "commit"}, {"oid": "72c2ceb0ecc43ed14ec7b6f1b052a796841b96c7", "url": "https://github.com/elastic/elasticsearch/commit/72c2ceb0ecc43ed14ec7b6f1b052a796841b96c7", "message": "Update docs/reference/setup/jvm-options.asciidoc\n\nCo-Authored-By: Mark Vieira <portugee@gmail.com>", "committedDate": "2020-02-04T19:50:00Z", "type": "commit"}, {"oid": "e609aaddb87bd3cfdfc0639e6a2fbff9f29ed9ce", "url": "https://github.com/elastic/elasticsearch/commit/e609aaddb87bd3cfdfc0639e6a2fbff9f29ed9ce", "message": "Fix imports", "committedDate": "2020-02-04T20:03:54Z", "type": "commit"}, {"oid": "57e29ecda23c12b907173394ef01ec113e35e07a", "url": "https://github.com/elastic/elasticsearch/commit/57e29ecda23c12b907173394ef01ec113e35e07a", "message": "Merge branch 'master' into jvm.options.d", "committedDate": "2020-02-04T20:18:14Z", "type": "commit"}, {"oid": "7c5da0a46a18cf65ce0a4ece2d711ae123a819c2", "url": "https://github.com/elastic/elasticsearch/commit/7c5da0a46a18cf65ce0a4ece2d711ae123a819c2", "message": "Create jvm.options.d in Docker image", "committedDate": "2020-02-05T00:20:39Z", "type": "commit"}, {"oid": "7d4f1511b05f61cb5dc67e938544baaabb79caf7", "url": "https://github.com/elastic/elasticsearch/commit/7d4f1511b05f61cb5dc67e938544baaabb79caf7", "message": "Do not require existence", "committedDate": "2020-02-05T00:20:40Z", "type": "commit"}, {"oid": "d388d85283d13c01108a749b035dd088f98b4f63", "url": "https://github.com/elastic/elasticsearch/commit/d388d85283d13c01108a749b035dd088f98b4f63", "message": "Merge branch 'master' into jvm.options.d", "committedDate": "2020-02-06T02:07:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1MjQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51882#discussion_r375752431", "bodyText": "I found this a little hard to grok, so I whipped up a non-stream version, just FYI.\nfinal List<Path> jvmOptionsFiles = new ArrayList<>();\njvmOptionsFiles.add(Paths.get(args[0], \"jvm.options\"));\n\nfinal File jvmOptionsDirectory = Paths.get(args[0], \"jvm.options.d\").toFile();\nif (jvmOptionsDirectory.isDirectory()) {\n    final File[] files = jvmOptionsDirectory.listFiles();\n    Arrays.sort(files, Comparator.comparing(File::getName));\n\n    for (File file : files) {\n        jvmOptionsFiles.add(file.toPath());\n    }\n}", "author": "pugnascotia", "createdAt": "2020-02-06T10:25:27Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java", "diffHunk": "@@ -53,82 +55,88 @@\n      * The main entry point. The exit code is 0 if the JVM options were successfully parsed, otherwise the exit code is 1. If an improperly\n      * formatted line is discovered, the line is output to standard error.\n      *\n-     * @param args the args to the program which should consist of a single option, the path to the JVM options\n+     * @param args the args to the program which should consist of a single option, the path to ES_PATH_CONF\n      */\n     public static void main(final String[] args) throws InterruptedException, IOException {\n         if (args.length != 1) {\n-            throw new IllegalArgumentException(\"expected one argument specifying path to jvm.options but was \" + Arrays.toString(args));\n+            throw new IllegalArgumentException(\"expected one argument specifying path to ES_PATH_CONF but was \" + Arrays.toString(args));\n         }\n+\n+        final Stream<Path> jvmOptionsFiles;", "originalCommit": "d388d85283d13c01108a749b035dd088f98b4f63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2OTk5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51882#discussion_r376069995", "bodyText": "Okay I pushed something else, what do you think now?", "author": "jasontedor", "createdAt": "2020-02-06T20:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1MjQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa13f953fda1b0f9f609af1133cae99cafdd8e10", "chunk": "diff --git a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java\nindex acbca2a54f8..5f17263f98a 100644\n--- a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java\n+++ b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java\n\n@@ -62,52 +63,55 @@ final class JvmOptionsParser {\n             throw new IllegalArgumentException(\"expected one argument specifying path to ES_PATH_CONF but was \" + Arrays.toString(args));\n         }\n \n-        final Stream<Path> jvmOptionsFiles;\n-        final Path rootJvmOptions = Paths.get(args[0], \"jvm.options\");\n+        final ArrayList<Path> jvmOptionsFiles = new ArrayList<>();\n+        jvmOptionsFiles.add(Paths.get(args[0], \"jvm.options\"));\n+\n         final Path jvmOptionsDirectory = Paths.get(args[0], \"jvm.options.d\");\n+\n         if (Files.isDirectory(jvmOptionsDirectory)) {\n-            final Stream<Path> jvmOptionsDirectoryFiles = Files.list(Paths.get(args[0], \"jvm.options.d\"));\n-            jvmOptionsFiles = Stream.concat(Stream.of(rootJvmOptions), jvmOptionsDirectoryFiles.sorted())\n-                .onClose(jvmOptionsDirectoryFiles::close);\n-        } else {\n-            jvmOptionsFiles = Stream.of(rootJvmOptions);\n+            try (DirectoryStream<Path> jvmOptionsDirectoryFiles =\n+                     Files.newDirectoryStream(Paths.get(args[0], \"jvm.options.d\"), \"*.options\")) {\n+                for (final Path jvmOptionsDirectoryFile : jvmOptionsDirectoryFiles) {\n+                    jvmOptionsFiles.add(jvmOptionsDirectoryFile);\n+                }\n+            }\n+\n         }\n \n         final List<String> jvmOptions = new ArrayList<>();\n-        try (jvmOptionsFiles) {\n-            for (final Path jvmOptionsFile : (Iterable<Path>) jvmOptionsFiles::iterator) {\n-                final SortedMap<Integer, String> invalidLines = new TreeMap<>();\n-                try (\n-                    InputStream is = Files.newInputStream(jvmOptionsFile);\n-                    Reader reader = new InputStreamReader(is, StandardCharsets.UTF_8);\n-                    BufferedReader br = new BufferedReader(reader)\n-                ) {\n-                    parse(JavaVersion.majorVersion(JavaVersion.CURRENT), br, jvmOptions::add, invalidLines::put);\n-                }\n-                if (invalidLines.isEmpty() == false) {\n-                    final String errorMessage = String.format(\n+\n+        for (final Path jvmOptionsFile : jvmOptionsFiles) {\n+            final SortedMap<Integer, String> invalidLines = new TreeMap<>();\n+            try (\n+                InputStream is = Files.newInputStream(jvmOptionsFile);\n+                Reader reader = new InputStreamReader(is, StandardCharsets.UTF_8);\n+                BufferedReader br = new BufferedReader(reader)\n+            ) {\n+                parse(JavaVersion.majorVersion(JavaVersion.CURRENT), br, jvmOptions::add, invalidLines::put);\n+            }\n+            if (invalidLines.isEmpty() == false) {\n+                final String errorMessage = String.format(\n+                    Locale.ROOT,\n+                    \"encountered [%d] error%s parsing [%s]\",\n+                    invalidLines.size(),\n+                    invalidLines.size() == 1 ? \"\" : \"s\",\n+                    jvmOptionsFile\n+                );\n+                Launchers.errPrintln(errorMessage);\n+                int count = 0;\n+                for (final Map.Entry<Integer, String> entry : invalidLines.entrySet()) {\n+                    count++;\n+                    final String message = String.format(\n                         Locale.ROOT,\n-                        \"encountered [%d] error%s parsing [%s]\",\n-                        invalidLines.size(),\n-                        invalidLines.size() == 1 ? \"\" : \"s\",\n-                        jvmOptionsFile\n+                        \"[%d]: encountered improperly formatted JVM option in [%s] on line number [%d]: [%s]\",\n+                        count,\n+                        jvmOptionsFile,\n+                        entry.getKey(),\n+                        entry.getValue()\n                     );\n-                    Launchers.errPrintln(errorMessage);\n-                    int count = 0;\n-                    for (final Map.Entry<Integer, String> entry : invalidLines.entrySet()) {\n-                        count++;\n-                        final String message = String.format(\n-                            Locale.ROOT,\n-                            \"[%d]: encountered improperly formatted JVM option in [%s] on line number [%d]: [%s]\",\n-                            count,\n-                            jvmOptionsFile,\n-                            entry.getKey(),\n-                            entry.getValue()\n-                        );\n-                        Launchers.errPrintln(message);\n-                    }\n-                    Launchers.exit(1);\n+                    Launchers.errPrintln(message);\n                 }\n+                Launchers.exit(1);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1MjgzNA==", "url": "https://github.com/elastic/elasticsearch/pull/51882#discussion_r375752834", "bodyText": "Should we files the files e.g. only include those ending with .options? Then we'd filter out any backup files, text files etc.", "author": "pugnascotia", "createdAt": "2020-02-06T10:26:05Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java", "diffHunk": "@@ -53,82 +55,88 @@\n      * The main entry point. The exit code is 0 if the JVM options were successfully parsed, otherwise the exit code is 1. If an improperly\n      * formatted line is discovered, the line is output to standard error.\n      *\n-     * @param args the args to the program which should consist of a single option, the path to the JVM options\n+     * @param args the args to the program which should consist of a single option, the path to ES_PATH_CONF\n      */\n     public static void main(final String[] args) throws InterruptedException, IOException {\n         if (args.length != 1) {\n-            throw new IllegalArgumentException(\"expected one argument specifying path to jvm.options but was \" + Arrays.toString(args));\n+            throw new IllegalArgumentException(\"expected one argument specifying path to ES_PATH_CONF but was \" + Arrays.toString(args));\n         }\n+\n+        final Stream<Path> jvmOptionsFiles;\n+        final Path rootJvmOptions = Paths.get(args[0], \"jvm.options\");\n+        final Path jvmOptionsDirectory = Paths.get(args[0], \"jvm.options.d\");\n+        if (Files.isDirectory(jvmOptionsDirectory)) {\n+            final Stream<Path> jvmOptionsDirectoryFiles = Files.list(Paths.get(args[0], \"jvm.options.d\"));", "originalCommit": "d388d85283d13c01108a749b035dd088f98b4f63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA3MDA3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51882#discussion_r376070077", "bodyText": "I incorporated this idea.", "author": "jasontedor", "createdAt": "2020-02-06T20:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1MjgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "fa13f953fda1b0f9f609af1133cae99cafdd8e10", "chunk": "diff --git a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java\nindex acbca2a54f8..5f17263f98a 100644\n--- a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java\n+++ b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java\n\n@@ -62,52 +63,55 @@ final class JvmOptionsParser {\n             throw new IllegalArgumentException(\"expected one argument specifying path to ES_PATH_CONF but was \" + Arrays.toString(args));\n         }\n \n-        final Stream<Path> jvmOptionsFiles;\n-        final Path rootJvmOptions = Paths.get(args[0], \"jvm.options\");\n+        final ArrayList<Path> jvmOptionsFiles = new ArrayList<>();\n+        jvmOptionsFiles.add(Paths.get(args[0], \"jvm.options\"));\n+\n         final Path jvmOptionsDirectory = Paths.get(args[0], \"jvm.options.d\");\n+\n         if (Files.isDirectory(jvmOptionsDirectory)) {\n-            final Stream<Path> jvmOptionsDirectoryFiles = Files.list(Paths.get(args[0], \"jvm.options.d\"));\n-            jvmOptionsFiles = Stream.concat(Stream.of(rootJvmOptions), jvmOptionsDirectoryFiles.sorted())\n-                .onClose(jvmOptionsDirectoryFiles::close);\n-        } else {\n-            jvmOptionsFiles = Stream.of(rootJvmOptions);\n+            try (DirectoryStream<Path> jvmOptionsDirectoryFiles =\n+                     Files.newDirectoryStream(Paths.get(args[0], \"jvm.options.d\"), \"*.options\")) {\n+                for (final Path jvmOptionsDirectoryFile : jvmOptionsDirectoryFiles) {\n+                    jvmOptionsFiles.add(jvmOptionsDirectoryFile);\n+                }\n+            }\n+\n         }\n \n         final List<String> jvmOptions = new ArrayList<>();\n-        try (jvmOptionsFiles) {\n-            for (final Path jvmOptionsFile : (Iterable<Path>) jvmOptionsFiles::iterator) {\n-                final SortedMap<Integer, String> invalidLines = new TreeMap<>();\n-                try (\n-                    InputStream is = Files.newInputStream(jvmOptionsFile);\n-                    Reader reader = new InputStreamReader(is, StandardCharsets.UTF_8);\n-                    BufferedReader br = new BufferedReader(reader)\n-                ) {\n-                    parse(JavaVersion.majorVersion(JavaVersion.CURRENT), br, jvmOptions::add, invalidLines::put);\n-                }\n-                if (invalidLines.isEmpty() == false) {\n-                    final String errorMessage = String.format(\n+\n+        for (final Path jvmOptionsFile : jvmOptionsFiles) {\n+            final SortedMap<Integer, String> invalidLines = new TreeMap<>();\n+            try (\n+                InputStream is = Files.newInputStream(jvmOptionsFile);\n+                Reader reader = new InputStreamReader(is, StandardCharsets.UTF_8);\n+                BufferedReader br = new BufferedReader(reader)\n+            ) {\n+                parse(JavaVersion.majorVersion(JavaVersion.CURRENT), br, jvmOptions::add, invalidLines::put);\n+            }\n+            if (invalidLines.isEmpty() == false) {\n+                final String errorMessage = String.format(\n+                    Locale.ROOT,\n+                    \"encountered [%d] error%s parsing [%s]\",\n+                    invalidLines.size(),\n+                    invalidLines.size() == 1 ? \"\" : \"s\",\n+                    jvmOptionsFile\n+                );\n+                Launchers.errPrintln(errorMessage);\n+                int count = 0;\n+                for (final Map.Entry<Integer, String> entry : invalidLines.entrySet()) {\n+                    count++;\n+                    final String message = String.format(\n                         Locale.ROOT,\n-                        \"encountered [%d] error%s parsing [%s]\",\n-                        invalidLines.size(),\n-                        invalidLines.size() == 1 ? \"\" : \"s\",\n-                        jvmOptionsFile\n+                        \"[%d]: encountered improperly formatted JVM option in [%s] on line number [%d]: [%s]\",\n+                        count,\n+                        jvmOptionsFile,\n+                        entry.getKey(),\n+                        entry.getValue()\n                     );\n-                    Launchers.errPrintln(errorMessage);\n-                    int count = 0;\n-                    for (final Map.Entry<Integer, String> entry : invalidLines.entrySet()) {\n-                        count++;\n-                        final String message = String.format(\n-                            Locale.ROOT,\n-                            \"[%d]: encountered improperly formatted JVM option in [%s] on line number [%d]: [%s]\",\n-                            count,\n-                            jvmOptionsFile,\n-                            entry.getKey(),\n-                            entry.getValue()\n-                        );\n-                        Launchers.errPrintln(message);\n-                    }\n-                    Launchers.exit(1);\n+                    Launchers.errPrintln(message);\n                 }\n+                Launchers.exit(1);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NjYyOA==", "url": "https://github.com/elastic/elasticsearch/pull/51882#discussion_r375756628", "bodyText": "Nit - I'd use a static import of Matchers, personally.", "author": "pugnascotia", "createdAt": "2020-02-06T10:33:40Z", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/PackageTests.java", "diffHunk": "@@ -298,7 +299,23 @@ public void test81CustomPathConfAndJvmOptions() throws Exception {\n         });\n     }\n \n-    public void test82SystemdMask() throws Exception {\n+    public void test82CustomJvmOptionsDirectoryFile() throws Exception {\n+        final Path heapOptions = installation.config(Paths.get(\"jvm.options.d\", \"heap.options\"));\n+        try {\n+            append(heapOptions, \"-Xms512m\\n-Xmx512m\\n\");\n+\n+            startElasticsearch();\n+\n+            final String nodesResponse = makeRequest(Request.Get(\"http://localhost:9200/_nodes\"));\n+            assertThat(nodesResponse, CoreMatchers.containsString(\"\\\"heap_init_in_bytes\\\":536870912\"));", "originalCommit": "d388d85283d13c01108a749b035dd088f98b4f63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0NzAzNg==", "url": "https://github.com/elastic/elasticsearch/pull/51882#discussion_r376047036", "bodyText": "I pushed 3a2bf7b.", "author": "jasontedor", "createdAt": "2020-02-06T19:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NjYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "3a2bf7bb82895991d8cb0c66304938bcccc47b72", "chunk": "diff --git a/qa/os/src/test/java/org/elasticsearch/packaging/test/PackageTests.java b/qa/os/src/test/java/org/elasticsearch/packaging/test/PackageTests.java\nindex 97b657f3fed..9065854eb31 100644\n--- a/qa/os/src/test/java/org/elasticsearch/packaging/test/PackageTests.java\n+++ b/qa/os/src/test/java/org/elasticsearch/packaging/test/PackageTests.java\n\n@@ -307,7 +306,7 @@ public class PackageTests extends PackagingTestCase {\n             startElasticsearch();\n \n             final String nodesResponse = makeRequest(Request.Get(\"http://localhost:9200/_nodes\"));\n-            assertThat(nodesResponse, CoreMatchers.containsString(\"\\\"heap_init_in_bytes\\\":536870912\"));\n+            assertThat(nodesResponse, containsString(\"\\\"heap_init_in_bytes\\\":536870912\"));\n \n             stopElasticsearch();\n         } finally {\n"}}, {"oid": "454a8996a026e1cab908e832f3d457788e9fc4bd", "url": "https://github.com/elastic/elasticsearch/commit/454a8996a026e1cab908e832f3d457788e9fc4bd", "message": "Merge branch 'master' into jvm.options.d", "committedDate": "2020-02-06T19:48:56Z", "type": "commit"}, {"oid": "5738f7187183830519c7c0a01dbc61b8f02e1104", "url": "https://github.com/elastic/elasticsearch/commit/5738f7187183830519c7c0a01dbc61b8f02e1104", "message": "Update Docker docs", "committedDate": "2020-02-06T19:49:03Z", "type": "commit"}, {"oid": "3a2bf7bb82895991d8cb0c66304938bcccc47b72", "url": "https://github.com/elastic/elasticsearch/commit/3a2bf7bb82895991d8cb0c66304938bcccc47b72", "message": "Fix static import", "committedDate": "2020-02-06T19:49:07Z", "type": "commit"}, {"oid": "ccb522c395c85003b3d5cdce9682520e489bf4e7", "url": "https://github.com/elastic/elasticsearch/commit/ccb522c395c85003b3d5cdce9682520e489bf4e7", "message": "Cleanup docs", "committedDate": "2020-02-06T19:56:31Z", "type": "commit"}, {"oid": "e0b1f324be71ef61e97ed70a06a38bc0bfe6dd20", "url": "https://github.com/elastic/elasticsearch/commit/e0b1f324be71ef61e97ed70a06a38bc0bfe6dd20", "message": "Remove filename", "committedDate": "2020-02-06T19:57:38Z", "type": "commit"}, {"oid": "fa13f953fda1b0f9f609af1133cae99cafdd8e10", "url": "https://github.com/elastic/elasticsearch/commit/fa13f953fda1b0f9f609af1133cae99cafdd8e10", "message": "Simplify and require .options", "committedDate": "2020-02-06T20:16:33Z", "type": "commit"}, {"oid": "0bc68bd81d4c07f02425db61c03db92aeb9b03c9", "url": "https://github.com/elastic/elasticsearch/commit/0bc68bd81d4c07f02425db61c03db92aeb9b03c9", "message": "Remove lexicographic processing", "committedDate": "2020-02-06T20:16:53Z", "type": "commit"}, {"oid": "6695f7563464f132984afb57266a0a23ea6d9bf6", "url": "https://github.com/elastic/elasticsearch/commit/6695f7563464f132984afb57266a0a23ea6d9bf6", "message": "Unspecified processing order", "committedDate": "2020-02-06T20:22:20Z", "type": "commit"}, {"oid": "e5ea0c397edfa45b5d8486dc2eeecef1ae7ad4d8", "url": "https://github.com/elastic/elasticsearch/commit/e5ea0c397edfa45b5d8486dc2eeecef1ae7ad4d8", "message": "Now sort", "committedDate": "2020-02-06T20:26:59Z", "type": "commit"}, {"oid": "5b2c725e009568b080c03b12248ff56d780313fb", "url": "https://github.com/elastic/elasticsearch/commit/5b2c725e009568b080c03b12248ff56d780313fb", "message": "Cleanup", "committedDate": "2020-02-06T20:36:47Z", "type": "commit"}, {"oid": "886b1a2fb3d1111c2e2e211e2b3c6c8cd6eaee9c", "url": "https://github.com/elastic/elasticsearch/commit/886b1a2fb3d1111c2e2e211e2b3c6c8cd6eaee9c", "message": "Formatting", "committedDate": "2020-02-06T21:20:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5ODk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51882#discussion_r376298997", "bodyText": "What do you think about adding a third file, e.g. third.options.disabled, to prove that files have to end with .options? Up to you.", "author": "pugnascotia", "createdAt": "2020-02-07T09:43:46Z", "path": "qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java", "diffHunk": "@@ -251,6 +251,46 @@ public void test70CustomPathConfAndJvmOptions() throws Exception {\n         }\n     }\n \n+    public void test71CustomJvmOptionsDirectoryFile() throws Exception {\n+        final Path heapOptions = installation.config(Paths.get(\"jvm.options.d\", \"heap.options\"));\n+        try {\n+            append(heapOptions, \"-Xms512m\\n-Xmx512m\\n\");\n+\n+            startElasticsearch();\n+\n+            final String nodesResponse = makeRequest(Request.Get(\"http://localhost:9200/_nodes\"));\n+            assertThat(nodesResponse, containsString(\"\\\"heap_init_in_bytes\\\":536870912\"));\n+\n+            stopElasticsearch();\n+        } finally {\n+            rm(heapOptions);\n+        }\n+    }\n+\n+    public void test72CustomJvmOptionsDirectoryFilesAreProcessedInSortedOrder() throws Exception {\n+        final Path firstOptions = installation.config(Paths.get(\"jvm.options.d\", \"first.options\"));\n+        final Path secondOptions = installation.config(Paths.get(\"jvm.options.d\", \"second.options\"));", "originalCommit": "886b1a2fb3d1111c2e2e211e2b3c6c8cd6eaee9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NTc1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51882#discussion_r376395759", "bodyText": "I pushed a test for this.", "author": "jasontedor", "createdAt": "2020-02-07T13:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5ODk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "34dc1d7b78bcdd7e33388687fa5d5307f0ae2910", "chunk": "diff --git a/qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java b/qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java\nindex d0010f91f08..612e2ee0159 100644\n--- a/qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java\n+++ b/qa/os/src/test/java/org/elasticsearch/packaging/test/ArchiveTests.java\n\n@@ -291,6 +291,22 @@ public class ArchiveTests extends PackagingTestCase {\n         }\n     }\n \n+    public void test73CustomJvmOptionsDirectoryFilesWithoutOptionsExtensionIgnored() throws Exception {\n+        final Path jvmOptionsIgnored = installation.config(Paths.get(\"jvm.options.d\", \"jvm.options.ignored\"));\n+        try {\n+            append(jvmOptionsIgnored, \"-Xms512\\n-Xmx512m\\n\");\n+\n+            startElasticsearch();\n+\n+            final String nodesResponse = makeRequest(Request.Get(\"http://localhost:9200/_nodes\"));\n+            assertThat(nodesResponse, containsString(\"\\\"heap_init_in_bytes\\\":1073741824\"));\n+\n+            stopElasticsearch();\n+        } finally {\n+            rm(jvmOptionsIgnored);\n+        }\n+    }\n+\n     public void test80RelativePathConf() throws Exception {\n \n         final Path temp = getTempDir().resolve(\"esconf-alternate\");\n"}}, {"oid": "53e7073c7154151c880a41a7e9f751f75feb5d04", "url": "https://github.com/elastic/elasticsearch/commit/53e7073c7154151c880a41a7e9f751f75feb5d04", "message": "Merge branch 'master' into jvm.options.d", "committedDate": "2020-02-07T12:35:08Z", "type": "commit"}, {"oid": "34dc1d7b78bcdd7e33388687fa5d5307f0ae2910", "url": "https://github.com/elastic/elasticsearch/commit/34dc1d7b78bcdd7e33388687fa5d5307f0ae2910", "message": "Add test, fix permissions?", "committedDate": "2020-02-07T13:02:03Z", "type": "commit"}, {"oid": "e2fe7fc645d8c292605062d9f6a004d3544e4463", "url": "https://github.com/elastic/elasticsearch/commit/e2fe7fc645d8c292605062d9f6a004d3544e4463", "message": "Add permissions check", "committedDate": "2020-02-07T13:07:05Z", "type": "commit"}, {"oid": "397727567ee1eedce6a70b7e4cdcd913cf972ff2", "url": "https://github.com/elastic/elasticsearch/commit/397727567ee1eedce6a70b7e4cdcd913cf972ff2", "message": "Fix lintian", "committedDate": "2020-02-07T15:41:49Z", "type": "commit"}, {"oid": "c7e8cca1c8e47a0d019d433a541f552174ff467f", "url": "https://github.com/elastic/elasticsearch/commit/c7e8cca1c8e47a0d019d433a541f552174ff467f", "message": "Fix ordering of test", "committedDate": "2020-02-07T15:51:04Z", "type": "commit"}, {"oid": "69d8c31657f02af1931e9b8e6675030309993472", "url": "https://github.com/elastic/elasticsearch/commit/69d8c31657f02af1931e9b8e6675030309993472", "message": "Fix some tests", "committedDate": "2020-02-07T17:04:55Z", "type": "commit"}, {"oid": "70a0e6c896ecb84c47492697b28f8ee884a5f87a", "url": "https://github.com/elastic/elasticsearch/commit/70a0e6c896ecb84c47492697b28f8ee884a5f87a", "message": "Merge branch 'master' into jvm.options.d", "committedDate": "2020-02-08T02:48:33Z", "type": "commit"}, {"oid": "7fd24a3049ddf27307c211474ae33da2c9e05667", "url": "https://github.com/elastic/elasticsearch/commit/7fd24a3049ddf27307c211474ae33da2c9e05667", "message": "Merge branch 'master' into jvm.options.d", "committedDate": "2020-02-08T17:13:20Z", "type": "commit"}, {"oid": "7f02018d0485c5675eacbe287545d131442ca329", "url": "https://github.com/elastic/elasticsearch/commit/7f02018d0485c5675eacbe287545d131442ca329", "message": "Update jvm.options.d config file packaging", "committedDate": "2020-02-08T19:27:06Z", "type": "commit"}, {"oid": "9a0bb16abee5c3fc85507cbd2a735db2c1175c3f", "url": "https://github.com/elastic/elasticsearch/commit/9a0bb16abee5c3fc85507cbd2a735db2c1175c3f", "message": "Properly purge on Debian", "committedDate": "2020-02-08T20:40:27Z", "type": "commit"}]}