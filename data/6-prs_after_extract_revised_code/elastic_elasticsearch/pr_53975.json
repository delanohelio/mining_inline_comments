{"pr_number": 53975, "pr_title": "CacheBufferedIndexInput should throw EOFException", "pr_createdAt": "2020-03-23T13:26:15Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53975", "timeline": [{"oid": "b6ca7dba326e5c352d8e5fa21223588d81e1be5a", "url": "https://github.com/elastic/elasticsearch/commit/b6ca7dba326e5c352d8e5fa21223588d81e1be5a", "message": "CacheBufferedIndexInput should throw EOFException\n\nInputStream#read may return -1 if it reaches EOF. This is unexpected in a\n`CacheBufferedIndexInput` but may happen if, for instance, the underlying file\nis truncated. Today we don't handle this specially and an EOF can cause strange\nbehaviour, often throwing an `ArrayIndexOutOfBoundsException`. This commit adds\nbetter handling for EOF by throwing an `EOFException`.", "committedDate": "2020-03-23T13:22:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0ODUzMg==", "url": "https://github.com/elastic/elasticsearch/pull/53975#discussion_r396448532", "bodyText": "Replaces len with bytesRead in case of a partial read. I think this was technically ok before since we would proceed to overwrite the junk bytes with correct ones, but it was confusing.", "author": "DaveCTurner", "createdAt": "2020-03-23T13:27:12Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheBufferedIndexInput.java", "diffHunk": "@@ -214,7 +219,11 @@ private int readDirectly(long start, long end, byte[] buffer, int offset) throws\n             while (remaining > 0) {\n                 final int len = (remaining < copyBuffer.length) ? (int) remaining : copyBuffer.length;\n                 int bytesRead = input.read(copyBuffer, 0, len);\n-                System.arraycopy(copyBuffer, 0, buffer, offset + bytesCopied, len);\n+                if (bytesRead == -1) {\n+                    throw new EOFException(String.format(Locale.ROOT,\n+                        \"unexpected EOF reading [%d-%d] ([%d] bytes remaining) from %s\", start, end, remaining, cacheFileReference));\n+                }\n+                System.arraycopy(copyBuffer, 0, buffer, offset + bytesCopied, bytesRead);", "originalCommit": "b6ca7dba326e5c352d8e5fa21223588d81e1be5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}