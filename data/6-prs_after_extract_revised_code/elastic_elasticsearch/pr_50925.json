{"pr_number": 50925, "pr_title": "EQL: Replace EqlSearchResponse.Hits parser with ObjectParser", "pr_createdAt": "2020-01-13T15:39:37Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50925", "timeline": [{"oid": "c0a5a7a73443d9129fadd9b4b8155111af4a1050", "url": "https://github.com/elastic/elasticsearch/commit/c0a5a7a73443d9129fadd9b4b8155111af4a1050", "message": "EQL: Replace EqlSearchResponse.Hits parser with ObjectParser\n\nReplaces the existing hand-build Hits parser with a\nConstructingObjectParser version.\n\nRelates to #49581", "committedDate": "2020-01-13T15:37:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg3MTg3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50925#discussion_r365871879", "bodyText": "I didn't implement this path since it existed in the original parser only for backward compatibility with the older version hits total and shouldn't occur in this version.", "author": "imotov", "createdAt": "2020-01-13T15:40:31Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchResponse.java", "diffHunk": "@@ -414,53 +411,30 @@ public void writeTo(StreamOutput out) throws IOException {\n             }\n         }\n \n+        private static final ConstructingObjectParser<EqlSearchResponse.Hits, Void> PARSER =\n+            new ConstructingObjectParser<>(\"eql/search_response_count\", true,\n+                args -> {\n+                    int i = 0;\n+                    @SuppressWarnings(\"unchecked\") List<SearchHit> searchHits = (List<SearchHit>) args[i++];\n+                    @SuppressWarnings(\"unchecked\") List<Sequence> sequences = (List<Sequence>) args[i++];\n+                    @SuppressWarnings(\"unchecked\") List<Count> counts = (List<Count>) args[i++];\n+                    TotalHits totalHits = (TotalHits) args[i];\n+                    return new EqlSearchResponse.Hits(searchHits, sequences, counts, totalHits);\n+                });\n+\n+        static {\n+            PARSER.declareObjectArray(ConstructingObjectParser.optionalConstructorArg(), (p, c) -> SearchHit.fromXContent(p),\n+                new ParseField(Fields.EVENTS));\n+            PARSER.declareObjectArray(ConstructingObjectParser.optionalConstructorArg(), Sequence.PARSER,\n+                new ParseField(Fields.SEQUENCES));\n+            PARSER.declareObjectArray(ConstructingObjectParser.optionalConstructorArg(), Count.PARSER,\n+                new ParseField(Fields.COUNTS));\n+            PARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), (p, c) -> SearchHits.parseTotalHitsFragment(p),\n+                new ParseField(Fields.TOTAL));\n+        }\n+\n         public static Hits fromXContent(XContentParser parser) throws IOException {\n-            if (parser.currentToken() != XContentParser.Token.START_OBJECT) {\n-                parser.nextToken();\n-                ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation);\n-            }\n-            XContentParser.Token token = parser.currentToken();\n-            String currentFieldName = null;\n-            TotalHits totalHits = null;\n-            ArrayList<SearchHit> searchHits = null;\n-            ArrayList<Sequence> sequences = null;\n-            ArrayList<Count> counts = null;\n-\n-            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n-                if (token == XContentParser.Token.FIELD_NAME) {\n-                    currentFieldName = parser.currentName();\n-                } else if (token.isValue()) {", "originalCommit": "c0a5a7a73443d9129fadd9b4b8155111af4a1050", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}