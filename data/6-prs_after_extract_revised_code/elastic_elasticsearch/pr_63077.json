{"pr_number": 63077, "pr_title": "Remove dependency of Geometry queries with mapped type names", "pr_createdAt": "2020-09-30T13:35:37Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63077", "timeline": [{"oid": "f0f4dee959fc860bb1a2d3bf60e3a9bc41ceb9cd", "url": "https://github.com/elastic/elasticsearch/commit/f0f4dee959fc860bb1a2d3bf60e3a9bc41ceb9cd", "message": "Remove dependency of Geometry queries with mapped types", "committedDate": "2020-09-30T13:22:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MzU2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63077#discussion_r497563562", "bodyText": "Do we need this double indirection, or would it make more sense to collapse QueryProcessor into GeoShapeQueryable directly?", "author": "romseygeek", "createdAt": "2020-09-30T14:38:50Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.geo.ShapeRelation;\n+import org.elasticsearch.common.geo.SpatialStrategy;\n+import org.elasticsearch.geometry.Geometry;\n+import org.elasticsearch.index.query.QueryShardContext;\n+\n+/**\n+ * Implemented by {@link org.elasticsearch.index.mapper.MappedFieldType} that support\n+ * GeoShape queries.\n+ */\n+public interface GeoShapeQueryable {\n+\n+    QueryProcessor geometryQueryBuilder();", "originalCommit": "f0f4dee959fc860bb1a2d3bf60e3a9bc41ceb9cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0NjExNg==", "url": "https://github.com/elastic/elasticsearch/pull/63077#discussion_r497646116", "bodyText": "I am fine with removing the indirection if @imotov agrees.", "author": "iverase", "createdAt": "2020-09-30T16:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxNDgxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/63077#discussion_r497714819", "bodyText": "No objections.", "author": "imotov", "createdAt": "2020-09-30T18:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MzU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4bc0545ad5b20dc42d28b371039c2fbb938edbd2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java\nindex 4b004cefb80..2c7662316ae 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java\n\n@@ -31,19 +31,11 @@ import org.elasticsearch.index.query.QueryShardContext;\n  */\n public interface GeoShapeQueryable {\n \n-    QueryProcessor geometryQueryBuilder();\n+    Query geoShapeQuery(Geometry shape, String fieldName, ShapeRelation relation, QueryShardContext context);\n \n-    /**\n-     * interface representing a query builder that generates a query from the given geometry\n-     */\n-    interface QueryProcessor {\n-        Query process(Geometry shape, String fieldName, ShapeRelation relation, QueryShardContext context);\n-\n-        @Deprecated\n-        default Query process(Geometry shape, String fieldName, SpatialStrategy strategy, ShapeRelation relation,\n-                              QueryShardContext context) {\n-            return process(shape, fieldName, relation, context);\n-        }\n+    @Deprecated\n+    default Query geoShapeQuery(Geometry shape, String fieldName, SpatialStrategy strategy, ShapeRelation relation,\n+                          QueryShardContext context) {\n+        return geoShapeQuery(shape, fieldName, relation, context);\n     }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NTk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/63077#discussion_r497565958", "bodyText": "And maybe call this shapeQuery rather than process, to match up with termQuery etc on other field types?", "author": "romseygeek", "createdAt": "2020-09-30T14:41:45Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.elasticsearch.common.geo.ShapeRelation;\n+import org.elasticsearch.common.geo.SpatialStrategy;\n+import org.elasticsearch.geometry.Geometry;\n+import org.elasticsearch.index.query.QueryShardContext;\n+\n+/**\n+ * Implemented by {@link org.elasticsearch.index.mapper.MappedFieldType} that support\n+ * GeoShape queries.\n+ */\n+public interface GeoShapeQueryable {\n+\n+    QueryProcessor geometryQueryBuilder();\n+\n+    /**\n+     * interface representing a query builder that generates a query from the given geometry\n+     */\n+    interface QueryProcessor {\n+        Query process(Geometry shape, String fieldName, ShapeRelation relation, QueryShardContext context);", "originalCommit": "f0f4dee959fc860bb1a2d3bf60e3a9bc41ceb9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bc0545ad5b20dc42d28b371039c2fbb938edbd2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java\nindex 4b004cefb80..2c7662316ae 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeQueryable.java\n\n@@ -31,19 +31,11 @@ import org.elasticsearch.index.query.QueryShardContext;\n  */\n public interface GeoShapeQueryable {\n \n-    QueryProcessor geometryQueryBuilder();\n+    Query geoShapeQuery(Geometry shape, String fieldName, ShapeRelation relation, QueryShardContext context);\n \n-    /**\n-     * interface representing a query builder that generates a query from the given geometry\n-     */\n-    interface QueryProcessor {\n-        Query process(Geometry shape, String fieldName, ShapeRelation relation, QueryShardContext context);\n-\n-        @Deprecated\n-        default Query process(Geometry shape, String fieldName, SpatialStrategy strategy, ShapeRelation relation,\n-                              QueryShardContext context) {\n-            return process(shape, fieldName, relation, context);\n-        }\n+    @Deprecated\n+    default Query geoShapeQuery(Geometry shape, String fieldName, SpatialStrategy strategy, ShapeRelation relation,\n+                          QueryShardContext context) {\n+        return geoShapeQuery(shape, fieldName, relation, context);\n     }\n-\n }\n"}}, {"oid": "4bc0545ad5b20dc42d28b371039c2fbb938edbd2", "url": "https://github.com/elastic/elasticsearch/commit/4bc0545ad5b20dc42d28b371039c2fbb938edbd2", "message": "remove indirection", "committedDate": "2020-10-01T06:17:29Z", "type": "commit"}]}