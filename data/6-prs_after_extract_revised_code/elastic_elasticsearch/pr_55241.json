{"pr_number": 55241, "pr_title": "SQL: Implement scripting inside aggs", "pr_createdAt": "2020-04-15T14:46:28Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55241", "timeline": [{"oid": "57bd9c05f801f31fcb541b178caee9ddb1ce6176", "url": "https://github.com/elastic/elasticsearch/commit/57bd9c05f801f31fcb541b178caee9ddb1ce6176", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271", "committedDate": "2020-04-15T14:48:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3OTY0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r408979641", "bodyText": "So this code becomes:\nObject argument = asFieldOrLiteralOrScript(c.field());\n\n           if (c.distinct()) {\n                    return new CardinalityAgg(id, argument);\n                } else {\n                    return new FilterExistsAgg(id, argument);\n                }", "author": "costin", "createdAt": "2020-04-15T16:36:12Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -523,10 +524,19 @@ public QueryTranslation translate(Expression exp, boolean onAggs, TranslatorHand\n \n         @Override\n         protected LeafAgg toAgg(String id, Count c) {\n-            if (c.distinct()) {\n-                return new CardinalityAgg(id, field(c));\n+            if (fieldOrLiteral(c)) {\n+                if (c.distinct()) {\n+                    return new CardinalityAgg(id, field(c));\n+                } else {\n+                    return new FilterExistsAgg(id, field(c));\n+                }\n             } else {\n-                return new FilterExistsAgg(id, field(c));\n+                ScriptTemplate scriptTemplate = ((Function) c.field()).asScript();\n+                if (c.distinct()) {\n+                    return new CardinalityAgg(id, scriptTemplate);\n+                } else {\n+                    return new FilterExistsAgg(id, scriptTemplate);\n+                }\n             }", "originalCommit": "57bd9c05f801f31fcb541b178caee9ddb1ce6176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\nindex d2494e23fc2..b4a787b3efc 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n\n@@ -524,19 +527,10 @@ final class QueryTranslator {\n \n         @Override\n         protected LeafAgg toAgg(String id, Count c) {\n-            if (fieldOrLiteral(c)) {\n-                if (c.distinct()) {\n-                    return new CardinalityAgg(id, field(c));\n-                } else {\n-                    return new FilterExistsAgg(id, field(c));\n-                }\n+            if (c.distinct()) {\n+                return new CardinalityAgg(id, getFieldOrLiteralOrScript(c));\n             } else {\n-                ScriptTemplate scriptTemplate = ((Function) c.field()).asScript();\n-                if (c.distinct()) {\n-                    return new CardinalityAgg(id, scriptTemplate);\n-                } else {\n-                    return new FilterExistsAgg(id, scriptTemplate);\n-                }\n+                return new FilterExistsAgg(id, getFieldOrLiteralOrScript(c));\n             }\n         }\n     }\n"}}, {"oid": "db0202d317ee32fe948849a5aed3fcfdd4bc5f4e", "url": "https://github.com/elastic/elasticsearch/commit/db0202d317ee32fe948849a5aed3fcfdd4bc5f4e", "message": "added tests", "committedDate": "2020-04-15T16:59:06Z", "type": "forcePushed"}, {"oid": "8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "url": "https://github.com/elastic/elasticsearch/commit/8bbfaa1dc8bf80f0723f70fdad9df17d8966987d", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271", "committedDate": "2020-04-15T19:36:15Z", "type": "forcePushed"}, {"oid": "1002af1369790a48c65a3ee7fd4119a05c69c69e", "url": "https://github.com/elastic/elasticsearch/commit/1002af1369790a48c65a3ee7fd4119a05c69c69e", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271", "committedDate": "2020-04-15T19:43:41Z", "type": "commit"}, {"oid": "1002af1369790a48c65a3ee7fd4119a05c69c69e", "url": "https://github.com/elastic/elasticsearch/commit/1002af1369790a48c65a3ee7fd4119a05c69c69e", "message": "SQL: Implement scripting inside aggs\n\nImplement the use of scalar functions inside aggregate functions.\nThis allows for complex expressions inside aggregations, with or without\nGROUBY as well as with or without a HAVING clause. e.g.:\n\n```\nSELECT MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) AS max, b\nFROM test\nGROUP BY b\nHAVING MAX(CASE WHEN a IS NULL then -1 ELSE abs(a * 10) + 1 END) > 5\n```\n\nScalar functions are still not allowed for `KURTOSIS` and `SKEWNESS` as\nthis is currently not implemented on the ElasticSearch side.\n\nFixes: #29980\nFixes: #36865\nFixes: #37271", "committedDate": "2020-04-15T19:43:41Z", "type": "forcePushed"}, {"oid": "18b38d1f62aa154498c18c75920aed91a8d300dd", "url": "https://github.com/elastic/elasticsearch/commit/18b38d1f62aa154498c18c75920aed91a8d300dd", "message": "Avoid instantiating SqlFunctionRegistry multiple times", "committedDate": "2020-04-15T20:02:21Z", "type": "commit"}, {"oid": "30f0be69b1c10b8b11daeaebd37e4f0c479d0c27", "url": "https://github.com/elastic/elasticsearch/commit/30f0be69b1c10b8b11daeaebd37e4f0c479d0c27", "message": "remove unused import", "committedDate": "2020-04-15T20:18:34Z", "type": "commit"}, {"oid": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "url": "https://github.com/elastic/elasticsearch/commit/b8bc29f350f24b22bde8b9096a95d4273dd822fe", "message": "re-arrange imports", "committedDate": "2020-04-15T20:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNzU3NA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409127574", "bodyText": "This method seems to be used in one place as such extracting it in a different class doesn't add much value since there's no reuse.\nThe name also indicates that - a method specific to cardinality/count.", "author": "costin", "createdAt": "2020-04-15T20:54:00Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/gen/script/Scripts.java", "diffHunk": "@@ -66,6 +66,13 @@ public static ScriptTemplate nullSafeFilter(ScriptTemplate script) {\n                 DataTypes.BOOLEAN);\n     }\n \n+    public static ScriptTemplate isNotNullCardinality(ScriptTemplate script) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "chunk": "diff --git a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/gen/script/Scripts.java b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/gen/script/Scripts.java\nindex dd76d4cf6f5..5a66bba66d3 100644\n--- a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/gen/script/Scripts.java\n+++ b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/gen/script/Scripts.java\n\n@@ -66,13 +66,6 @@ public final class Scripts {\n                 DataTypes.BOOLEAN);\n     }\n \n-    public static ScriptTemplate isNotNullCardinality(ScriptTemplate script) {\n-        return new ScriptTemplate(formatTemplate(\n-                format(Locale.ROOT, \"{ql}.isNotNull(%s)\", script.template())),\n-                script.params(),\n-                DataTypes.BOOLEAN);\n-    }\n-\n     public static ScriptTemplate nullSafeSort(ScriptTemplate script) {\n         String methodName = script.outputType().isNumeric() ? \"nullSafeSortNumeric\" : \"nullSafeSortString\";\n         return new ScriptTemplate(formatTemplate(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMTY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409131696", "bodyText": "String.valueOf(arg.fold())\nThere's rarely a reason to cast to a Literal", "author": "costin", "createdAt": "2020-04-15T21:02:06Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -240,15 +236,11 @@ static String nameOf(Expression e) {\n         }\n     }\n \n-    static String dateFormat(Expression e) {\n-        if (e instanceof DateTimeFunction) {\n-            return ((DateTimeFunction) e).dateTimeFormat();\n-        }\n-        return null;\n-    }\n-\n     static String field(AggregateFunction af) {\n         Expression arg = af.field();\n+        if (arg.foldable()) {\n+            return String.valueOf(((Literal) arg).value());", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\nindex 34a80f1c55b..726150c0979 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n\n@@ -236,15 +235,14 @@ final class QueryTranslator {\n         }\n     }\n \n-    static String field(AggregateFunction af) {\n-        Expression arg = af.field();\n+    static String field(AggregateFunction af, Expression arg) {\n         if (arg.foldable()) {\n-            return String.valueOf(((Literal) arg).value());\n+            return String.valueOf(arg.fold());\n         }\n         if (arg instanceof FieldAttribute) {\n             FieldAttribute field = (FieldAttribute) arg;\n             // COUNT(DISTINCT) uses cardinality aggregation which works on exact values (not changed by analyzers or normalizers)\n-            if (af instanceof Count && ((Count) af).distinct()) {\n+            if ((af instanceof Count && ((Count) af).distinct()) || af instanceof TopHits) {\n                 // use the `keyword` version of the field, if there is one\n                 return field.exactAttribute().name();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjM3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409132371", "bodyText": "return  isFieldOrLiteral(af) ?  field(af) : ((ScalarFunction) af.field()).asScript()", "author": "costin", "createdAt": "2020-04-15T21:03:24Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {\n         if (e == null) {\n             return null;\n         }\n         if (e instanceof FieldAttribute) {\n             return ((FieldAttribute) e).exactAttribute().name();\n         }\n+        if (e instanceof ScalarFunction) {\n+            return ((ScalarFunction) e).asScript();\n+        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", e.nodeString(), af.nodeString());\n     }\n \n+    private static boolean isFieldOrLiteral(AggregateFunction af) {\n+        return af.field().foldable() || af.field() instanceof FieldAttribute;\n+    }\n+\n+    private static Object getFieldOrLiteralOrScript(AggregateFunction af) {\n+        if (isFieldOrLiteral(af)) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzNDEwNA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409134104", "bodyText": "The logic from topAggsFieldOrScript and this method is similar and should be reused - I like the instanceof check for Scalar instead of the direct cast; a bit verbose but safe.", "author": "costin", "createdAt": "2020-04-15T21:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\nindex 34a80f1c55b..726150c0979 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n\n@@ -236,15 +235,14 @@ final class QueryTranslator {\n         }\n     }\n \n-    static String field(AggregateFunction af) {\n-        Expression arg = af.field();\n+    static String field(AggregateFunction af, Expression arg) {\n         if (arg.foldable()) {\n-            return String.valueOf(((Literal) arg).value());\n+            return String.valueOf(arg.fold());\n         }\n         if (arg instanceof FieldAttribute) {\n             FieldAttribute field = (FieldAttribute) arg;\n             // COUNT(DISTINCT) uses cardinality aggregation which works on exact values (not changed by analyzers or normalizers)\n-            if (af instanceof Count && ((Count) af).distinct()) {\n+            if ((af instanceof Count && ((Count) af).distinct()) || af instanceof TopHits) {\n                 // use the `keyword` version of the field, if there is one\n                 return field.exactAttribute().name();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMjkxNA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409132914", "bodyText": "get prefix is for getter - use something like toField.. or asField..", "author": "costin", "createdAt": "2020-04-15T21:04:22Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {\n         if (e == null) {\n             return null;\n         }\n         if (e instanceof FieldAttribute) {\n             return ((FieldAttribute) e).exactAttribute().name();\n         }\n+        if (e instanceof ScalarFunction) {\n+            return ((ScalarFunction) e).asScript();\n+        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", e.nodeString(), af.nodeString());\n     }\n \n+    private static boolean isFieldOrLiteral(AggregateFunction af) {\n+        return af.field().foldable() || af.field() instanceof FieldAttribute;\n+    }\n+\n+    private static Object getFieldOrLiteralOrScript(AggregateFunction af) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\nindex 34a80f1c55b..726150c0979 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n\n@@ -236,15 +235,14 @@ final class QueryTranslator {\n         }\n     }\n \n-    static String field(AggregateFunction af) {\n-        Expression arg = af.field();\n+    static String field(AggregateFunction af, Expression arg) {\n         if (arg.foldable()) {\n-            return String.valueOf(((Literal) arg).value());\n+            return String.valueOf(arg.fold());\n         }\n         if (arg instanceof FieldAttribute) {\n             FieldAttribute field = (FieldAttribute) arg;\n             // COUNT(DISTINCT) uses cardinality aggregation which works on exact values (not changed by analyzers or normalizers)\n-            if (af instanceof Count && ((Count) af).distinct()) {\n+            if ((af instanceof Count && ((Count) af).distinct()) || af instanceof TopHits) {\n                 // use the `keyword` version of the field, if there is one\n                 return field.exactAttribute().name();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMzIyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409133221", "bodyText": "This can be moved under the TopHit agg class", "author": "costin", "createdAt": "2020-04-15T21:04:57Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -258,23 +250,35 @@ static String field(AggregateFunction af) {\n             }\n             return field.name();\n         }\n-        if (arg instanceof Literal) {\n-            return String.valueOf(((Literal) arg).value());\n-        }\n         throw new SqlIllegalArgumentException(\"Does not know how to convert argument {} for function {}\", arg.nodeString(),\n                                               af.nodeString());\n     }\n \n-    private static String topAggsField(AggregateFunction af, Expression e) {\n+    private static Object topAggsFieldOrScript(AggregateFunction af, Expression e) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxMDA2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409410065", "bodyText": "Consolidated into one method.", "author": "matriv", "createdAt": "2020-04-16T09:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMzIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\nindex 34a80f1c55b..726150c0979 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n\n@@ -236,15 +235,14 @@ final class QueryTranslator {\n         }\n     }\n \n-    static String field(AggregateFunction af) {\n-        Expression arg = af.field();\n+    static String field(AggregateFunction af, Expression arg) {\n         if (arg.foldable()) {\n-            return String.valueOf(((Literal) arg).value());\n+            return String.valueOf(arg.fold());\n         }\n         if (arg instanceof FieldAttribute) {\n             FieldAttribute field = (FieldAttribute) arg;\n             // COUNT(DISTINCT) uses cardinality aggregation which works on exact values (not changed by analyzers or normalizers)\n-            if (af instanceof Count && ((Count) af).distinct()) {\n+            if ((af instanceof Count && ((Count) af).distinct()) || af instanceof TopHits) {\n                 // use the `keyword` version of the field, if there is one\n                 return field.exactAttribute().name();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0MTQ5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409141496", "bodyText": "Thinking a bit more about this, a better solution might be creating a simple DTO specific for Agg that can hold either a String or a ScriptTemplate.\nThat one would handle the hashCode, equals, etc.\nFurther more maybe extend it to accept behavior by accepting a ValuesSourceAggregationBuilder and internally call either field or script based on its content.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Agg(String id, Object fieldOrScript) {\n          \n          \n            \n                Agg(String id, AggTarget target) {\n          \n          \n            \n                   this.target = target;\n          \n          \n            \n                }\n          \n          \n            \n                ...\n          \n          \n            \n                class AggTarget {\n          \n          \n            \n                    private final String fieldName;\n          \n          \n            \n                    private final ScriptTemplate script;\n          \n          \n            \n                    \n          \n          \n            \n                    ...\n          \n          \n            \n                    \n          \n          \n            \n                    ValuesSourceAggregationBuilder with(ValuesSourceAggregationBuilder aggBuilder) {\n          \n          \n            \n                        if (field != null) {\n          \n          \n            \n                             aggBuilder.field(field);\n          \n          \n            \n                         }\n          \n          \n            \n                         else {\n          \n          \n            \n                             aggBuilder.script(scriptTemplate.asScript());\n          \n          \n            \n                          }\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nThis would improve LeafAgg which would improve toBuilder and call AggTarget so that subclasses would only have to create the ValueSourceAggregationBuilder. In fact we could just declare them as a method reference for a string:\npublic abstract class LeafAgg extends Agg {\n\n    LeafAgg(String id, AggTarget target) {\n        super(id, target);\n    }\n\n    ValuesSourceAggregationBuilder builder() {\n         return aggBuilder.apply(id()).with(aggTarget);\n    }\n\n    protected abstract Function<String, ValuesSourceAggregationBuilder> aggBuilder();\nso that subclasses would now look like:\npublic class CardinalityAgg extends LeafAgg {\n\n    public CardinalityAgg(String id, AggTarget aggTarget) {\n        super(id, aggTarget);\n    }\n\n    @Override\n    ValuesSourceAggregationBuilder aggBuilder() {\n        return AggregationBuilders::cardinality;\n    }\n}", "author": "costin", "createdAt": "2020-04-15T21:22:14Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -17,10 +20,19 @@\n \n     private final String id;\n     private final String fieldName;\n+    private final ScriptTemplate scriptTemplate;\n \n-    Agg(String id, String fieldName) {\n+    Agg(String id, Object fieldOrScript) {", "originalCommit": "b8bc29f350f24b22bde8b9096a95d4273dd822fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5NTk0MA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409495940", "bodyText": "Thx @costin, It's cleaner this way!", "author": "matriv", "createdAt": "2020-04-16T11:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0MTQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\nindex 402ada7aa10..0cb3d780861 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\n\n@@ -19,37 +16,25 @@ import static java.lang.String.format;\n public abstract class Agg {\n \n     private final String id;\n-    private final String fieldName;\n-    private final ScriptTemplate scriptTemplate;\n+    private final AggTarget target;\n \n-    Agg(String id, Object fieldOrScript) {\n+    Agg(String id, AggTarget target) {\n         this.id = id;\n-        if (fieldOrScript instanceof String) {\n-            this.fieldName = (String) fieldOrScript;\n-            this.scriptTemplate = null;\n-        } else if (fieldOrScript instanceof ScriptTemplate) {\n-            this.fieldName = null;\n-            this.scriptTemplate = (ScriptTemplate) fieldOrScript;\n-        } else {\n-            throw new SqlIllegalArgumentException(\"Argument of an aggregate function should be String or ScriptTemplate\");\n-        }\n+        Objects.requireNonNull(target, \"AggTarget must not be null\");\n+        this.target = target;\n     }\n \n     public String id() {\n         return id;\n     }\n \n-    protected String fieldName() {\n-        return fieldName;\n-    }\n-\n-    public ScriptTemplate scriptTemplate() {\n-        return scriptTemplate;\n+    public AggTarget target() {\n+        return target;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(id, fieldName, scriptTemplate);\n+        return Objects.hash(id) + target.hashCode();\n     }\n \n     @Override\n"}}, {"oid": "ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "url": "https://github.com/elastic/elasticsearch/commit/ea82403eb74f8aa7c1e954d4471c4350ecb13f34", "message": "Address comments", "committedDate": "2020-04-16T08:58:59Z", "type": "commit"}, {"oid": "fabece71f4d5aed991dc31765f412d4574af1c8d", "url": "https://github.com/elastic/elasticsearch/commit/fabece71f4d5aed991dc31765f412d4574af1c8d", "message": "fix check for matrix aggs", "committedDate": "2020-04-16T10:10:26Z", "type": "commit"}, {"oid": "5dae3ae643d8f5018e1201ec225045e12b8ffbce", "url": "https://github.com/elastic/elasticsearch/commit/5dae3ae643d8f5018e1201ec225045e12b8ffbce", "message": "Add one more ordering test", "committedDate": "2020-04-16T11:00:41Z", "type": "commit"}, {"oid": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "url": "https://github.com/elastic/elasticsearch/commit/2ef7067aa600d8bae79a5caddb48687c4bc1a508", "message": "use a POJO for fielname or script", "committedDate": "2020-04-16T11:52:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNTkwOA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409505908", "bodyText": "Objects.hash(id, target)", "author": "costin", "createdAt": "2020-04-16T12:11:35Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -19,37 +16,25 @@\n public abstract class Agg {\n \n     private final String id;\n-    private final String fieldName;\n-    private final ScriptTemplate scriptTemplate;\n+    private final AggTarget target;\n \n-    Agg(String id, Object fieldOrScript) {\n+    Agg(String id, AggTarget target) {\n         this.id = id;\n-        if (fieldOrScript instanceof String) {\n-            this.fieldName = (String) fieldOrScript;\n-            this.scriptTemplate = null;\n-        } else if (fieldOrScript instanceof ScriptTemplate) {\n-            this.fieldName = null;\n-            this.scriptTemplate = (ScriptTemplate) fieldOrScript;\n-        } else {\n-            throw new SqlIllegalArgumentException(\"Argument of an aggregate function should be String or ScriptTemplate\");\n-        }\n+        Objects.requireNonNull(target, \"AggTarget must not be null\");\n+        this.target = target;\n     }\n \n     public String id() {\n         return id;\n     }\n \n-    protected String fieldName() {\n-        return fieldName;\n-    }\n-\n-    public ScriptTemplate scriptTemplate() {\n-        return scriptTemplate;\n+    public AggTarget target() {\n+        return target;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(id, fieldName, scriptTemplate);\n+        return Objects.hash(id) + target.hashCode();", "originalCommit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86f701e647277d51821a62934282ca13455cb38c", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\nindex 0cb3d780861..875ff56e2a1 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\n\n@@ -16,25 +16,25 @@ import static java.lang.String.format;\n public abstract class Agg {\n \n     private final String id;\n-    private final AggTarget target;\n+    private final AggSource source;\n \n-    Agg(String id, AggTarget target) {\n+    Agg(String id, AggSource source) {\n         this.id = id;\n-        Objects.requireNonNull(target, \"AggTarget must not be null\");\n-        this.target = target;\n+        Objects.requireNonNull(source, \"AggSource must not be null\");\n+        this.source = source;\n     }\n \n     public String id() {\n         return id;\n     }\n \n-    public AggTarget target() {\n-        return target;\n+    public AggSource source() {\n+        return source;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(id) + target.hashCode();\n+        return Objects.hash(id) + source.hashCode();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODYwMg==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409508602", "bodyText": "The name is leaking implementation details - why not addTarget()?", "author": "costin", "createdAt": "2020-04-16T12:16:21Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/LeafAgg.java", "diffHunk": "@@ -6,12 +6,18 @@\n package org.elasticsearch.xpack.sql.querydsl.agg;\n \n import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n \n public abstract class LeafAgg extends Agg {\n \n-    LeafAgg(String id, String fieldName) {\n-        super(id, fieldName);\n+    LeafAgg(String id, AggTarget target) {\n+        super(id, target);\n     }\n \n     abstract AggregationBuilder toBuilder();\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    protected ValuesSourceAggregationBuilder addFieldOrScript(ValuesSourceAggregationBuilder builder) {", "originalCommit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxMDYwMA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409510600", "bodyText": "Yep, forgot to rename that, thx.", "author": "matriv", "createdAt": "2020-04-16T12:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwODYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "86f701e647277d51821a62934282ca13455cb38c", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/LeafAgg.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/LeafAgg.java\nindex 750667c6028..00d36e14dbf 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/LeafAgg.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/LeafAgg.java\n\n@@ -10,14 +10,14 @@ import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuil\n \n public abstract class LeafAgg extends Agg {\n \n-    LeafAgg(String id, AggTarget target) {\n-        super(id, target);\n+    LeafAgg(String id, AggSource source) {\n+        super(id, source);\n     }\n \n     abstract AggregationBuilder toBuilder();\n \n     @SuppressWarnings(\"rawtypes\")\n-    protected ValuesSourceAggregationBuilder addFieldOrScript(ValuesSourceAggregationBuilder builder) {\n-        return target().with(builder);\n+    protected ValuesSourceAggregationBuilder addAggSource(ValuesSourceAggregationBuilder builder) {\n+        return source().with(builder);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409519334", "bodyText": "Can this error message be improved?\n\nwhy is it mentioning matrix stats, isn't this an implementation detail?\nnot a biggie and can be left as is, but can the message be more targeted to the exact aggregate function? (mention only KURTOSIS or SKEWNESS)", "author": "astefan", "createdAt": "2020-04-16T12:34:29Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -535,104 +528,122 @@ protected LeafAgg toAgg(String id, Count c) {\n \n         @Override\n         protected LeafAgg toAgg(String id, Sum s) {\n-            return new SumAgg(id, field(s));\n+            return new SumAgg(id, asFieldOrLiteralOrScript(s));\n         }\n     }\n \n     static class Avgs extends SingleValueAggTranslator<Avg> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Avg a) {\n-            return new AvgAgg(id, field(a));\n+            return new AvgAgg(id, asFieldOrLiteralOrScript(a));\n         }\n     }\n \n     static class Maxes extends SingleValueAggTranslator<Max> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Max m) {\n-            return new MaxAgg(id, field(m));\n+            return new MaxAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class Mins extends SingleValueAggTranslator<Min> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Min m) {\n-            return new MinAgg(id, field(m));\n+            return new MinAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class MADs extends SingleValueAggTranslator<MedianAbsoluteDeviation> {\n         @Override\n         protected LeafAgg toAgg(String id, MedianAbsoluteDeviation m) {\n-            return new MedianAbsoluteDeviationAgg(id, field(m));\n+            return new MedianAbsoluteDeviationAgg(id, asFieldOrLiteralOrScript(m));\n         }\n     }\n \n     static class Firsts extends TopHitsAggTranslator<First> {\n \n         @Override\n         protected LeafAgg toAgg(String id, First f) {\n-            return new TopHitsAgg(id, topAggsField(f, f.field()), f.dataType(),\n-                topAggsField(f, f.orderField()), f.orderField() == null ? null : f.orderField().dataType(), SortOrder.ASC);\n+            return new TopHitsAgg(\n+                id,\n+                asFieldOrLiteralOrScript(f, f.field()),\n+                f.dataType(),\n+                asFieldOrLiteralOrScript(f, f.orderField()),\n+                f.orderField() == null ? null : f.orderField().dataType(),\n+                SortOrder.ASC\n+            );\n         }\n     }\n \n     static class Lasts extends TopHitsAggTranslator<Last> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Last l) {\n-            return new TopHitsAgg(id, topAggsField(l, l.field()), l.dataType(),\n-                topAggsField(l, l.orderField()), l.orderField() == null ? null : l.orderField().dataType(), SortOrder.DESC);\n+            return new TopHitsAgg(\n+                id,\n+                asFieldOrLiteralOrScript(l, l.field()),\n+                l.dataType(),\n+                asFieldOrLiteralOrScript(l, l.orderField()),\n+                l.orderField() == null ? null : l.orderField().dataType(),\n+                SortOrder.DESC\n+            );\n         }\n     }\n \n     static class StatsAggs extends CompoundAggTranslator<Stats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, Stats s) {\n-            return new StatsAgg(id, field(s));\n+            return new StatsAgg(id, asFieldOrLiteralOrScript(s));\n         }\n     }\n \n     static class ExtendedStatsAggs extends CompoundAggTranslator<ExtendedStats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, ExtendedStats e) {\n-            return new ExtendedStatsAgg(id, field(e));\n+            return new ExtendedStatsAgg(id, asFieldOrLiteralOrScript(e));\n         }\n     }\n \n     static class MatrixStatsAggs extends CompoundAggTranslator<MatrixStats> {\n \n         @Override\n         protected LeafAgg toAgg(String id, MatrixStats m) {\n-            return new MatrixStatsAgg(id, singletonList(field(m)));\n+            if (isFieldOrLiteral(m.field())) {\n+                return new MatrixStatsAgg(id, singletonList(field(m, m.field())));\n+            }\n+            throw new SqlIllegalArgumentException(\n+                \"Cannot use scalar functions or operators: [{}] in matrix stats \" + \"aggregate functions [KURTOSIS] and [SKEWNESS]\",", "originalCommit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUyOTQyMg==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409529422", "bodyText": "why is it mentioning matrix stats, isn't this an implementation detail?\n\n\nYep, I can remove that.\n\n\nnot a biggie and can be left as is, but can the message be more targeted to the exact aggregate function? (mention only KURTOSIS or SKEWNESS)\n\n\nNot really, I've tried it,  because we don't have the original function anymore here, only MatrixStats. I was considering checking that earlier on the functions themselves, but then resolveType() didn't seem to me a good place to add such a verification, since it's regarding the DataType and not if the arg is field or function.", "author": "matriv", "createdAt": "2020-04-16T12:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc3MzIyOA==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409773228", "bodyText": "This is better handled in the verifier by checking that Kurtosis & co (namely MatrixStatsEnclosed) don't have a scalar expression as argument.\nFurther more I would add an issue to extend the aggregation to support scripts not just fields.", "author": "costin", "createdAt": "2020-04-16T18:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5Mzc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409793757", "bodyText": "Created issue: #55344", "author": "matriv", "createdAt": "2020-04-16T19:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "45458799873cac06dc903e2ba57e12d5657e1a77", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\nindex f5e569ad9dd..a7aa2b60104 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java\n\n@@ -617,7 +617,7 @@ final class QueryTranslator {\n                 return new MatrixStatsAgg(id, singletonList(field(m, m.field())));\n             }\n             throw new SqlIllegalArgumentException(\n-                \"Cannot use scalar functions or operators: [{}] in matrix stats \" + \"aggregate functions [KURTOSIS] and [SKEWNESS]\",\n+                \"Cannot use scalar functions or operators: [{}] in aggregate functions [KURTOSIS] and [SKEWNESS]\",\n                 m.field().toString()\n             );\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUyMDIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55241#discussion_r409520215", "bodyText": "You could move this call as the first in the constructor, no?", "author": "astefan", "createdAt": "2020-04-16T12:35:57Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java", "diffHunk": "@@ -16,24 +16,25 @@\n public abstract class Agg {\n \n     private final String id;\n-    private final String fieldName;\n+    private final AggTarget target;\n \n-    Agg(String id, String fieldName) {\n+    Agg(String id, AggTarget target) {\n         this.id = id;\n-        this.fieldName = fieldName;\n+        Objects.requireNonNull(target, \"AggTarget must not be null\");", "originalCommit": "2ef7067aa600d8bae79a5caddb48687c4bc1a508", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86f701e647277d51821a62934282ca13455cb38c", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\nindex 0cb3d780861..875ff56e2a1 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Agg.java\n\n@@ -16,25 +16,25 @@ import static java.lang.String.format;\n public abstract class Agg {\n \n     private final String id;\n-    private final AggTarget target;\n+    private final AggSource source;\n \n-    Agg(String id, AggTarget target) {\n+    Agg(String id, AggSource source) {\n         this.id = id;\n-        Objects.requireNonNull(target, \"AggTarget must not be null\");\n-        this.target = target;\n+        Objects.requireNonNull(source, \"AggSource must not be null\");\n+        this.source = source;\n     }\n \n     public String id() {\n         return id;\n     }\n \n-    public AggTarget target() {\n-        return target;\n+    public AggSource source() {\n+        return source;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(id) + target.hashCode();\n+        return Objects.hash(id) + source.hashCode();\n     }\n \n     @Override\n"}}, {"oid": "86f701e647277d51821a62934282ca13455cb38c", "url": "https://github.com/elastic/elasticsearch/commit/86f701e647277d51821a62934282ca13455cb38c", "message": "rename class and method", "committedDate": "2020-04-16T12:43:08Z", "type": "commit"}, {"oid": "45458799873cac06dc903e2ba57e12d5657e1a77", "url": "https://github.com/elastic/elasticsearch/commit/45458799873cac06dc903e2ba57e12d5657e1a77", "message": "address more comments", "committedDate": "2020-04-16T12:52:30Z", "type": "commit"}, {"oid": "4dc7a8118538a0189c646602219c89329c5183fa", "url": "https://github.com/elastic/elasticsearch/commit/4dc7a8118538a0189c646602219c89329c5183fa", "message": "fix docs", "committedDate": "2020-04-16T12:59:14Z", "type": "commit"}, {"oid": "a54145dd53cf8f1d3b49313c0212df7ab61f8dfd", "url": "https://github.com/elastic/elasticsearch/commit/a54145dd53cf8f1d3b49313c0212df7ab61f8dfd", "message": "address comments", "committedDate": "2020-04-16T19:49:14Z", "type": "commit"}, {"oid": "126460bacaa6fa49ce12e076cd3e722fa8745bd3", "url": "https://github.com/elastic/elasticsearch/commit/126460bacaa6fa49ce12e076cd3e722fa8745bd3", "message": "fix imports", "committedDate": "2020-04-16T19:59:19Z", "type": "commit"}]}