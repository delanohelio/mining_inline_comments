{"pr_number": 54530, "pr_title": "Get data stream accepts single search parameter", "pr_createdAt": "2020-03-31T19:54:39Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54530", "timeline": [{"oid": "1007d1b0e7a232e3557d29892c12dd0cc6d3922a", "url": "https://github.com/elastic/elasticsearch/commit/1007d1b0e7a232e3557d29892c12dd0cc6d3922a", "message": "wip", "committedDate": "2020-03-31T17:43:31Z", "type": "commit"}, {"oid": "4295de2df6305e29a34dc9f80579094eecbc128f", "url": "https://github.com/elastic/elasticsearch/commit/4295de2df6305e29a34dc9f80579094eecbc128f", "message": "get data stream with single search parameter", "committedDate": "2020-03-31T19:47:14Z", "type": "commit"}, {"oid": "c68d0b35662b2aa3952e0f897320bba537afff21", "url": "https://github.com/elastic/elasticsearch/commit/c68d0b35662b2aa3952e0f897320bba537afff21", "message": "Merge branch 'master' into get_single_data_stream", "committedDate": "2020-03-31T20:00:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3MTgwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401371801", "bodyText": "This should be readOptionalString() instead of readString(), since the name maybe null.\nThis is also why I think the test fails.", "author": "martijnvg", "createdAt": "2020-04-01T05:56:35Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java", "diffHunk": "@@ -72,26 +73,26 @@ public ActionRequestValidationException validate() {\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.names = in.readStringArray();\n+            this.name = in.readString();", "originalCommit": "c68d0b35662b2aa3952e0f897320bba537afff21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4adb826148e503f79dc0e401e8170a6129e5e448", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\nindex 9a4a51abbe6..61b49a2a1ba 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n\n@@ -73,13 +73,13 @@ public class GetDataStreamsAction extends ActionType<GetDataStreamsAction.Respon\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.name = in.readString();\n+            this.name = in.readOptionalString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeString(name);\n+            out.writeOptionalString(name);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3MTk2OA==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401371968", "bodyText": "This should be writeOptionalString() instead of writeString()", "author": "martijnvg", "createdAt": "2020-04-01T05:57:07Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java", "diffHunk": "@@ -72,26 +73,26 @@ public ActionRequestValidationException validate() {\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.names = in.readStringArray();\n+            this.name = in.readString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeStringArray(names);\n+            out.writeString(name);", "originalCommit": "c68d0b35662b2aa3952e0f897320bba537afff21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4adb826148e503f79dc0e401e8170a6129e5e448", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\nindex 9a4a51abbe6..61b49a2a1ba 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n\n@@ -73,13 +73,13 @@ public class GetDataStreamsAction extends ActionType<GetDataStreamsAction.Respon\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.name = in.readString();\n+            this.name = in.readOptionalString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeString(name);\n+            out.writeOptionalString(name);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3MjE4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401372187", "bodyText": "Objects.equals(...) should be used here.", "author": "martijnvg", "createdAt": "2020-04-01T05:57:51Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java", "diffHunk": "@@ -72,26 +73,26 @@ public ActionRequestValidationException validate() {\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.names = in.readStringArray();\n+            this.name = in.readString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeStringArray(names);\n+            out.writeString(name);\n         }\n \n         @Override\n         public boolean equals(Object o) {\n             if (this == o) return true;\n             if (o == null || getClass() != o.getClass()) return false;\n             Request request = (Request) o;\n-            return Arrays.equals(names, request.names);\n+            return name.equals(request.name);", "originalCommit": "c68d0b35662b2aa3952e0f897320bba537afff21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4adb826148e503f79dc0e401e8170a6129e5e448", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\nindex 9a4a51abbe6..61b49a2a1ba 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n\n@@ -73,13 +73,13 @@ public class GetDataStreamsAction extends ActionType<GetDataStreamsAction.Respon\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.name = in.readString();\n+            this.name = in.readOptionalString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeString(name);\n+            out.writeOptionalString(name);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3MjMwMw==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401372303", "bodyText": "Objects.hashCode(...) should be used here.", "author": "martijnvg", "createdAt": "2020-04-01T05:58:08Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java", "diffHunk": "@@ -72,26 +73,26 @@ public ActionRequestValidationException validate() {\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.names = in.readStringArray();\n+            this.name = in.readString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeStringArray(names);\n+            out.writeString(name);\n         }\n \n         @Override\n         public boolean equals(Object o) {\n             if (this == o) return true;\n             if (o == null || getClass() != o.getClass()) return false;\n             Request request = (Request) o;\n-            return Arrays.equals(names, request.names);\n+            return name.equals(request.name);\n         }\n \n         @Override\n         public int hashCode() {\n-            return Arrays.hashCode(names);\n+            return name.hashCode();", "originalCommit": "c68d0b35662b2aa3952e0f897320bba537afff21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4adb826148e503f79dc0e401e8170a6129e5e448", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\nindex 9a4a51abbe6..61b49a2a1ba 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n\n@@ -73,13 +73,13 @@ public class GetDataStreamsAction extends ActionType<GetDataStreamsAction.Respon\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.name = in.readString();\n+            this.name = in.readOptionalString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeString(name);\n+            out.writeOptionalString(name);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3MzI0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401373247", "bodyText": "maybe also specify null as a value here?", "author": "martijnvg", "createdAt": "2020-04-01T06:00:48Z", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java", "diffHunk": "@@ -42,21 +43,15 @@\n \n     @Override\n     protected Request createTestInstance() {\n-        return new Request(generateRandomStringArray(8, 8, false));\n-    }\n-\n-    public void testValidateRequest() {\n-        GetDataStreamsAction.Request req = new GetDataStreamsAction.Request(new String[]{});\n-        ActionRequestValidationException e = req.validate();\n-        assertNull(e);\n+        return new Request(randomAlphaOfLength(8) + (randomBoolean() ? \"*\" : \"\"));", "originalCommit": "c68d0b35662b2aa3952e0f897320bba537afff21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2ODIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401468225", "bodyText": "maybe also randomly specify just \"*\" here?", "author": "henningandersen", "createdAt": "2020-04-01T09:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3MzI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4adb826148e503f79dc0e401e8170a6129e5e448", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\nindex a6c9d8226ea..71e89d8040b 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\n\n@@ -43,10 +43,25 @@ public class GetDataStreamsRequestTests extends AbstractWireSerializingTestCase<\n \n     @Override\n     protected Request createTestInstance() {\n-        return new Request(randomAlphaOfLength(8) + (randomBoolean() ? \"*\" : \"\"));\n+        final String searchParameter;\n+        switch (randomIntBetween(1, 4)) {\n+            case 1:\n+                searchParameter = randomAlphaOfLength(8);\n+                break;\n+            case 2:\n+                searchParameter = randomAlphaOfLength(8) + \"*\";\n+                break;\n+            case 3:\n+                searchParameter = \"*\";\n+                break;\n+            default:\n+                searchParameter = null;\n+                break;\n+        }\n+        return new Request(searchParameter);\n     }\n \n-    public void testGetDataStreams() {\n+    public void testGetDataStream() {\n         final String dataStreamName = \"my-data-stream\";\n         DataStream existingDataStream = new DataStream(dataStreamName, \"timestamp\", Collections.emptyList());\n         ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2MzgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401463828", "bodyText": "I think there is a BWC issue here since the original code is in the 7.7 branch? Probably easiest to just make it 7.7 compatible here (and in the read above) rather than other workarounds.", "author": "henningandersen", "createdAt": "2020-04-01T09:05:41Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java", "diffHunk": "@@ -72,26 +73,26 @@ public ActionRequestValidationException validate() {\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.names = in.readStringArray();\n+            this.name = in.readString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeStringArray(names);\n+            out.writeString(name);", "originalCommit": "c68d0b35662b2aa3952e0f897320bba537afff21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4adb826148e503f79dc0e401e8170a6129e5e448", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\nindex 9a4a51abbe6..61b49a2a1ba 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsAction.java\n\n@@ -73,13 +73,13 @@ public class GetDataStreamsAction extends ActionType<GetDataStreamsAction.Respon\n \n         public Request(StreamInput in) throws IOException {\n             super(in);\n-            this.name = in.readString();\n+            this.name = in.readOptionalString();\n         }\n \n         @Override\n         public void writeTo(StreamOutput out) throws IOException {\n             super.writeTo(out);\n-            out.writeString(name);\n+            out.writeOptionalString(name);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzE4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401467189", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testGetDataStreams() {\n          \n          \n            \n                public void testGetDataStream() {", "author": "henningandersen", "createdAt": "2020-04-01T09:11:20Z", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java", "diffHunk": "@@ -42,21 +43,15 @@\n \n     @Override\n     protected Request createTestInstance() {\n-        return new Request(generateRandomStringArray(8, 8, false));\n-    }\n-\n-    public void testValidateRequest() {\n-        GetDataStreamsAction.Request req = new GetDataStreamsAction.Request(new String[]{});\n-        ActionRequestValidationException e = req.validate();\n-        assertNull(e);\n+        return new Request(randomAlphaOfLength(8) + (randomBoolean() ? \"*\" : \"\"));\n     }\n \n     public void testGetDataStreams() {", "originalCommit": "c68d0b35662b2aa3952e0f897320bba537afff21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4adb826148e503f79dc0e401e8170a6129e5e448", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\nindex a6c9d8226ea..71e89d8040b 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\n\n@@ -43,10 +43,25 @@ public class GetDataStreamsRequestTests extends AbstractWireSerializingTestCase<\n \n     @Override\n     protected Request createTestInstance() {\n-        return new Request(randomAlphaOfLength(8) + (randomBoolean() ? \"*\" : \"\"));\n+        final String searchParameter;\n+        switch (randomIntBetween(1, 4)) {\n+            case 1:\n+                searchParameter = randomAlphaOfLength(8);\n+                break;\n+            case 2:\n+                searchParameter = randomAlphaOfLength(8) + \"*\";\n+                break;\n+            case 3:\n+                searchParameter = \"*\";\n+                break;\n+            default:\n+                searchParameter = null;\n+                break;\n+        }\n+        return new Request(searchParameter);\n     }\n \n-    public void testGetDataStreams() {\n+    public void testGetDataStream() {\n         final String dataStreamName = \"my-data-stream\";\n         DataStream existingDataStream = new DataStream(dataStreamName, \"timestamp\", Collections.emptyList());\n         ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2OTgyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/54530#discussion_r401469825", "bodyText": "I think we should add a bit more tests:\n\nGet non existent data stream based on wildcard (which should return empty array).\nGet data stream based on wildcard, returning multiple.", "author": "henningandersen", "createdAt": "2020-04-01T09:15:43Z", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java", "diffHunk": "@@ -65,8 +60,9 @@ public void testGetDataStreams() {\n     public void testGetNonexistentDataStream() {", "originalCommit": "c68d0b35662b2aa3952e0f897320bba537afff21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4adb826148e503f79dc0e401e8170a6129e5e448", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\nindex a6c9d8226ea..71e89d8040b 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/datastream/GetDataStreamsRequestTests.java\n\n@@ -57,6 +72,37 @@ public class GetDataStreamsRequestTests extends AbstractWireSerializingTestCase<\n         assertThat(dataStreams.get(0).getName(), equalTo(dataStreamName));\n     }\n \n+    public void testGetDataStreamsWithWildcards() {\n+        final String[] dataStreamNames = {\"my-data-stream\", \"another-data-stream\"};\n+        DataStream ds1 = new DataStream(dataStreamNames[0], \"timestamp\", Collections.emptyList());\n+        DataStream ds2 = new DataStream(dataStreamNames[1], \"timestamp\", Collections.emptyList());\n+        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n+            .metadata(Metadata.builder().dataStreams(\n+                Map.of(dataStreamNames[0], ds1, dataStreamNames[1], ds2)).build())\n+            .build();\n+\n+        GetDataStreamsAction.Request req = new GetDataStreamsAction.Request(dataStreamNames[1].substring(0, 5) + \"*\");\n+        List<DataStream> dataStreams = GetDataStreamsAction.TransportAction.getDataStreams(cs, req);\n+        assertThat(dataStreams.size(), equalTo(1));\n+        assertThat(dataStreams.get(0).getName(), equalTo(dataStreamNames[1]));\n+\n+        req = new GetDataStreamsAction.Request(\"*\");\n+        dataStreams = GetDataStreamsAction.TransportAction.getDataStreams(cs, req);\n+        assertThat(dataStreams.size(), equalTo(2));\n+        assertThat(dataStreams.get(0).getName(), equalTo(dataStreamNames[1]));\n+        assertThat(dataStreams.get(1).getName(), equalTo(dataStreamNames[0]));\n+\n+        req = new GetDataStreamsAction.Request((String) null);\n+        dataStreams = GetDataStreamsAction.TransportAction.getDataStreams(cs, req);\n+        assertThat(dataStreams.size(), equalTo(2));\n+        assertThat(dataStreams.get(0).getName(), equalTo(dataStreamNames[1]));\n+        assertThat(dataStreams.get(1).getName(), equalTo(dataStreamNames[0]));\n+\n+        req = new GetDataStreamsAction.Request(\"matches-none*\");\n+        dataStreams = GetDataStreamsAction.TransportAction.getDataStreams(cs, req);\n+        assertThat(dataStreams.size(), equalTo(0));\n+    }\n+\n     public void testGetNonexistentDataStream() {\n         final String dataStreamName = \"my-data-stream\";\n         ClusterState cs = ClusterState.builder(new ClusterName(\"_name\")).build();\n"}}, {"oid": "4adb826148e503f79dc0e401e8170a6129e5e448", "url": "https://github.com/elastic/elasticsearch/commit/4adb826148e503f79dc0e401e8170a6129e5e448", "message": "review comments", "committedDate": "2020-04-01T17:02:31Z", "type": "commit"}, {"oid": "4aae22e6bf3a003302f273aa2d6541085cfc786d", "url": "https://github.com/elastic/elasticsearch/commit/4aae22e6bf3a003302f273aa2d6541085cfc786d", "message": "Merge branch 'master' into get_single_data_stream", "committedDate": "2020-04-01T17:11:26Z", "type": "commit"}, {"oid": "2ee21eca88e3a76dd9d6e8d7e10f4857e683a1e9", "url": "https://github.com/elastic/elasticsearch/commit/2ee21eca88e3a76dd9d6e8d7e10f4857e683a1e9", "message": "fix test", "committedDate": "2020-04-01T17:34:52Z", "type": "commit"}, {"oid": "8a12c75c0522a6e75afe8e11a74cd5f67708c11e", "url": "https://github.com/elastic/elasticsearch/commit/8a12c75c0522a6e75afe8e11a74cd5f67708c11e", "message": "Merge branch 'master' into get_single_data_stream", "committedDate": "2020-04-02T16:00:08Z", "type": "commit"}, {"oid": "f37811e7d4934807d93ffb92c860281a500875da", "url": "https://github.com/elastic/elasticsearch/commit/f37811e7d4934807d93ffb92c860281a500875da", "message": "fix test", "committedDate": "2020-04-02T16:22:04Z", "type": "commit"}, {"oid": "a2b7ff4e54c8de834c68d5ae60dd208211998151", "url": "https://github.com/elastic/elasticsearch/commit/a2b7ff4e54c8de834c68d5ae60dd208211998151", "message": "Merge branch 'master' into get_single_data_stream", "committedDate": "2020-04-02T17:17:53Z", "type": "commit"}, {"oid": "6e8b8b394f47f359d5bebbe09f1d1f9944180dea", "url": "https://github.com/elastic/elasticsearch/commit/6e8b8b394f47f359d5bebbe09f1d1f9944180dea", "message": "remove explicit null", "committedDate": "2020-04-03T13:50:47Z", "type": "commit"}]}