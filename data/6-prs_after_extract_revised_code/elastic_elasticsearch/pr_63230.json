{"pr_number": 63230, "pr_title": "[client] Add simple support for gzip compression", "pr_createdAt": "2020-10-05T08:46:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63230", "timeline": [{"oid": "98203fbf8d889de1cf088944af30ad7ee50ff3a5", "url": "https://github.com/elastic/elasticsearch/commit/98203fbf8d889de1cf088944af30ad7ee50ff3a5", "message": "[client] Add simple support for gzip compression\n\nAdds a `RestClient.setCompressionEnabled()` setting that will gzip-\ncompress request bodies and add a `Accept-Encoding: gzip` header so\nthat the ES server can send compressed responses.", "committedDate": "2020-10-05T10:08:38Z", "type": "forcePushed"}, {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1", "url": "https://github.com/elastic/elasticsearch/commit/7b4aeee4de1555e2a476981d01a69c8a7934ade1", "message": "[client] Add simple support for gzip compression\n\nAdds a `RestClient.setCompressionEnabled()` setting that will gzip-\ncompress request bodies and add a `Accept-Encoding: gzip` header so\nthat the ES server can send compressed responses.", "committedDate": "2020-10-05T13:29:49Z", "type": "commit"}, {"oid": "7b4aeee4de1555e2a476981d01a69c8a7934ade1", "url": "https://github.com/elastic/elasticsearch/commit/7b4aeee4de1555e2a476981d01a69c8a7934ade1", "message": "[client] Add simple support for gzip compression\n\nAdds a `RestClient.setCompressionEnabled()` setting that will gzip-\ncompress request bodies and add a `Accept-Encoding: gzip` header so\nthat the ES server can send compressed responses.", "committedDate": "2020-10-05T13:29:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0Nzc3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500047776", "bodyText": "I believe this can remain static", "author": "andreidan", "createdAt": "2020-10-06T07:02:05Z", "path": "client/rest/src/main/java/org/elasticsearch/client/RestClient.java", "diffHunk": "@@ -543,7 +551,7 @@ private static void addSuppressedException(Exception suppressedException, Except\n         }\n     }\n \n-    private static HttpRequestBase createHttpRequest(String method, URI uri, HttpEntity entity) {\n+    private HttpRequestBase createHttpRequest(String method, URI uri, HttpEntity entity) {", "originalCommit": "7b4aeee4de1555e2a476981d01a69c8a7934ade1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMzAwNw==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500103007", "bodyText": "See comment on addRequestBody.", "author": "swallez", "createdAt": "2020-10-06T08:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0Nzc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fe4b90f04ed6bf64271a089a25bd3dd016312b59", "chunk": "diff --git a/client/rest/src/main/java/org/elasticsearch/client/RestClient.java b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java\nindex 9b0bd43a96a..e7851223514 100644\n--- a/client/rest/src/main/java/org/elasticsearch/client/RestClient.java\n+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java\n\n@@ -551,32 +551,32 @@ public class RestClient implements Closeable {\n         }\n     }\n \n-    private HttpRequestBase createHttpRequest(String method, URI uri, HttpEntity entity) {\n+    private static HttpRequestBase createHttpRequest(String method, URI uri, HttpEntity entity, boolean compressionEnabled) {\n         switch(method.toUpperCase(Locale.ROOT)) {\n             case HttpDeleteWithEntity.METHOD_NAME:\n-                return addRequestBody(new HttpDeleteWithEntity(uri), entity);\n+                return addRequestBody(new HttpDeleteWithEntity(uri), entity, compressionEnabled);\n             case HttpGetWithEntity.METHOD_NAME:\n-                return addRequestBody(new HttpGetWithEntity(uri), entity);\n+                return addRequestBody(new HttpGetWithEntity(uri), entity, compressionEnabled);\n             case HttpHead.METHOD_NAME:\n-                return addRequestBody(new HttpHead(uri), entity);\n+                return addRequestBody(new HttpHead(uri), entity, compressionEnabled);\n             case HttpOptions.METHOD_NAME:\n-                return addRequestBody(new HttpOptions(uri), entity);\n+                return addRequestBody(new HttpOptions(uri), entity, compressionEnabled);\n             case HttpPatch.METHOD_NAME:\n-                return addRequestBody(new HttpPatch(uri), entity);\n+                return addRequestBody(new HttpPatch(uri), entity, compressionEnabled);\n             case HttpPost.METHOD_NAME:\n                 HttpPost httpPost = new HttpPost(uri);\n-                addRequestBody(httpPost, entity);\n+                addRequestBody(httpPost, entity, compressionEnabled);\n                 return httpPost;\n             case HttpPut.METHOD_NAME:\n-                return addRequestBody(new HttpPut(uri), entity);\n+                return addRequestBody(new HttpPut(uri), entity, compressionEnabled);\n             case HttpTrace.METHOD_NAME:\n-                return addRequestBody(new HttpTrace(uri), entity);\n+                return addRequestBody(new HttpTrace(uri), entity, compressionEnabled);\n             default:\n                 throw new UnsupportedOperationException(\"http method not supported: \" + method);\n         }\n     }\n \n-    private HttpRequestBase addRequestBody(HttpRequestBase httpRequest, HttpEntity entity) {\n+    private static HttpRequestBase addRequestBody(HttpRequestBase httpRequest, HttpEntity entity, boolean compressionEnabled) {\n         if (entity != null) {\n             if (httpRequest instanceof HttpEntityEnclosingRequestBase) {\n                 if (compressionEnabled) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0ODA0OA==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500048048", "bodyText": "This can remain static and receive the comporessionEnabled flag as parameter", "author": "andreidan", "createdAt": "2020-10-06T07:02:45Z", "path": "client/rest/src/main/java/org/elasticsearch/client/RestClient.java", "diffHunk": "@@ -568,9 +576,12 @@ private static HttpRequestBase createHttpRequest(String method, URI uri, HttpEnt\n         }\n     }\n \n-    private static HttpRequestBase addRequestBody(HttpRequestBase httpRequest, HttpEntity entity) {\n+    private HttpRequestBase addRequestBody(HttpRequestBase httpRequest, HttpEntity entity) {", "originalCommit": "7b4aeee4de1555e2a476981d01a69c8a7934ade1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMjkyNA==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500102924", "bodyText": "That's what I initially did, but it required to change all call sites to add compressionEnabled as a paramter  and this felt wrong since it's a class field. Since both createHttpRequest and addRequestBody are private, making them instance methods should be ok as they now need to access instance data.", "author": "swallez", "createdAt": "2020-10-06T08:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0ODA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MTU2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500171561", "bodyText": "It's a minor thing (especially as you mention, they are private methods), but I think the methods (should you choose to keep them static functions) will be more expressive in terms of what they're meant to do and what influences their behaviour.", "author": "andreidan", "createdAt": "2020-10-06T10:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0ODA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4MzQxMA==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500183410", "bodyText": "I see your point even if passing a class field through 2 methods calls to keep them static feels a bit verbose. Fixed in fe4b90f", "author": "swallez", "createdAt": "2020-10-06T10:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0ODA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "fe4b90f04ed6bf64271a089a25bd3dd016312b59", "chunk": "diff --git a/client/rest/src/main/java/org/elasticsearch/client/RestClient.java b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java\nindex 9b0bd43a96a..e7851223514 100644\n--- a/client/rest/src/main/java/org/elasticsearch/client/RestClient.java\n+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java\n\n@@ -551,32 +551,32 @@ public class RestClient implements Closeable {\n         }\n     }\n \n-    private HttpRequestBase createHttpRequest(String method, URI uri, HttpEntity entity) {\n+    private static HttpRequestBase createHttpRequest(String method, URI uri, HttpEntity entity, boolean compressionEnabled) {\n         switch(method.toUpperCase(Locale.ROOT)) {\n             case HttpDeleteWithEntity.METHOD_NAME:\n-                return addRequestBody(new HttpDeleteWithEntity(uri), entity);\n+                return addRequestBody(new HttpDeleteWithEntity(uri), entity, compressionEnabled);\n             case HttpGetWithEntity.METHOD_NAME:\n-                return addRequestBody(new HttpGetWithEntity(uri), entity);\n+                return addRequestBody(new HttpGetWithEntity(uri), entity, compressionEnabled);\n             case HttpHead.METHOD_NAME:\n-                return addRequestBody(new HttpHead(uri), entity);\n+                return addRequestBody(new HttpHead(uri), entity, compressionEnabled);\n             case HttpOptions.METHOD_NAME:\n-                return addRequestBody(new HttpOptions(uri), entity);\n+                return addRequestBody(new HttpOptions(uri), entity, compressionEnabled);\n             case HttpPatch.METHOD_NAME:\n-                return addRequestBody(new HttpPatch(uri), entity);\n+                return addRequestBody(new HttpPatch(uri), entity, compressionEnabled);\n             case HttpPost.METHOD_NAME:\n                 HttpPost httpPost = new HttpPost(uri);\n-                addRequestBody(httpPost, entity);\n+                addRequestBody(httpPost, entity, compressionEnabled);\n                 return httpPost;\n             case HttpPut.METHOD_NAME:\n-                return addRequestBody(new HttpPut(uri), entity);\n+                return addRequestBody(new HttpPut(uri), entity, compressionEnabled);\n             case HttpTrace.METHOD_NAME:\n-                return addRequestBody(new HttpTrace(uri), entity);\n+                return addRequestBody(new HttpTrace(uri), entity, compressionEnabled);\n             default:\n                 throw new UnsupportedOperationException(\"http method not supported: \" + method);\n         }\n     }\n \n-    private HttpRequestBase addRequestBody(HttpRequestBase httpRequest, HttpEntity entity) {\n+    private static HttpRequestBase addRequestBody(HttpRequestBase httpRequest, HttpEntity entity, boolean compressionEnabled) {\n         if (entity != null) {\n             if (httpRequest instanceof HttpEntityEnclosingRequestBase) {\n                 if (compressionEnabled) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1NjY0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500056647", "bodyText": "please use { }  (avoiding them is error-prone (see apple goto issue) and harder to read)", "author": "andreidan", "createdAt": "2020-10-06T07:20:33Z", "path": "client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class RestClientGzipCompressionTests extends RestClientTestCase {\n+\n+    private static HttpServer httpServer;\n+\n+    @BeforeClass\n+    public static void startHttpServer() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.createContext(\"/\", new GzipResponseHandler());\n+        httpServer.start();\n+    }\n+\n+    @AfterClass\n+    public static void stopHttpServers() throws IOException {\n+        httpServer.stop(0);\n+        httpServer = null;\n+    }\n+\n+    /**\n+     * A response handler that accepts gzip-encoded data and replies request and response encoding values\n+     * followed by the request body. The response is compressed if \"Accept-Encoding\" is \"gzip\".\n+     */\n+    private static class GzipResponseHandler implements HttpHandler {\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+\n+            // Decode body (if any)\n+            String contentEncoding = exchange.getRequestHeaders().getFirst(\"Content-Encoding\");\n+            InputStream body = exchange.getRequestBody();\n+            if (\"gzip\".equals(contentEncoding)) {\n+                body = new GZIPInputStream(body);\n+            }\n+            byte[] bytes = readAll(body);\n+\n+            boolean compress = \"gzip\".equals(exchange.getRequestHeaders().getFirst(\"Accept-Encoding\"));\n+            if (compress) {\n+                exchange.getResponseHeaders().add(\"Content-Encoding\", \"gzip\");\n+            }\n+\n+            exchange.sendResponseHeaders(200, 0);\n+\n+            // Encode response if needed\n+            OutputStream out = exchange.getResponseBody();\n+            if (compress) {\n+                out = new GZIPOutputStream(out);\n+            }\n+\n+            // Outputs <request-encoding|null>#<response-encoding|null>#<request-body>\n+            out.write(String.valueOf(contentEncoding).getBytes(StandardCharsets.UTF_8));\n+            out.write('#');\n+            out.write((compress ? \"gzip\" : \"null\").getBytes(StandardCharsets.UTF_8));\n+            out.write('#');\n+            out.write(bytes);\n+            out.close();\n+\n+            exchange.close();\n+        }\n+    }\n+\n+    /** Read all bytes of an input stream and close it. */\n+    private static byte[] readAll(InputStream in) throws IOException {\n+        byte[] buffer = new byte[1024];\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        int len = 0;\n+        while ((len = in.read(buffer)) > 0) bos.write(buffer, 0, len);", "originalCommit": "7b4aeee4de1555e2a476981d01a69c8a7934ade1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA5OTU1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500099559", "bodyText": "Fixed in 560b78d", "author": "swallez", "createdAt": "2020-10-06T08:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1NjY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "560b78d1ffd535cad2a307cc4e16ca80a72b8ab4", "chunk": "diff --git a/client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java b/client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java\nindex 7d691676eda..faa86b11f5a 100644\n--- a/client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java\n+++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java\n\n@@ -105,7 +105,9 @@ public class RestClientGzipCompressionTests extends RestClientTestCase {\n         byte[] buffer = new byte[1024];\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         int len = 0;\n-        while ((len = in.read(buffer)) > 0) bos.write(buffer, 0, len);\n+        while ((len = in.read(buffer)) > 0) {\n+            bos.write(buffer, 0, len);\n+        }\n         in.close();\n         return bos.toByteArray();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1OTU2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500059561", "bodyText": "Is this custom encoding needed given the response headers will have the Content-Encoding header to be verified in the tests?", "author": "andreidan", "createdAt": "2020-10-06T07:26:02Z", "path": "client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.elasticsearch.mocksocket.MockHttpServer;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class RestClientGzipCompressionTests extends RestClientTestCase {\n+\n+    private static HttpServer httpServer;\n+\n+    @BeforeClass\n+    public static void startHttpServer() throws Exception {\n+        httpServer = MockHttpServer.createHttp(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        httpServer.createContext(\"/\", new GzipResponseHandler());\n+        httpServer.start();\n+    }\n+\n+    @AfterClass\n+    public static void stopHttpServers() throws IOException {\n+        httpServer.stop(0);\n+        httpServer = null;\n+    }\n+\n+    /**\n+     * A response handler that accepts gzip-encoded data and replies request and response encoding values\n+     * followed by the request body. The response is compressed if \"Accept-Encoding\" is \"gzip\".\n+     */\n+    private static class GzipResponseHandler implements HttpHandler {\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+\n+            // Decode body (if any)\n+            String contentEncoding = exchange.getRequestHeaders().getFirst(\"Content-Encoding\");\n+            InputStream body = exchange.getRequestBody();\n+            if (\"gzip\".equals(contentEncoding)) {\n+                body = new GZIPInputStream(body);\n+            }\n+            byte[] bytes = readAll(body);\n+\n+            boolean compress = \"gzip\".equals(exchange.getRequestHeaders().getFirst(\"Accept-Encoding\"));\n+            if (compress) {\n+                exchange.getResponseHeaders().add(\"Content-Encoding\", \"gzip\");\n+            }\n+\n+            exchange.sendResponseHeaders(200, 0);\n+\n+            // Encode response if needed\n+            OutputStream out = exchange.getResponseBody();\n+            if (compress) {\n+                out = new GZIPOutputStream(out);\n+            }\n+\n+            // Outputs <request-encoding|null>#<response-encoding|null>#<request-body>\n+            out.write(String.valueOf(contentEncoding).getBytes(StandardCharsets.UTF_8));\n+            out.write('#');\n+            out.write((compress ? \"gzip\" : \"null\").getBytes(StandardCharsets.UTF_8));\n+            out.write('#');", "originalCommit": "7b4aeee4de1555e2a476981d01a69c8a7934ade1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMzU5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500103593", "bodyText": "Writing the request and response encoding in the response body is meant to allow the test to check what their values are from the server point of view, along with checking that both sides correctly encoded/decoded data if needed (i.e. both server and client were able to read the entity bodies).\nSince from the caller's perspective all this is transparent and it receives an unencoded entity, we should expect Content-Encoding to be removed.\nTesting further, I think the current behavior is buggy. When a gzip-encoded response is received:\n\nresponse.getEntity().getContentEncoding() is null (thanks to GZIPDecompressingEntity)\nresponse.getHeader(\"Content-Encoding\") is gzip\n\nAs the entity presented to the application is no more encoded, both values should be null. We should therefore remove the response's Content-Encoding header in RestClient.convertResponse where gzipped responses are decoded.\nWDYT?", "author": "swallez", "createdAt": "2020-10-06T08:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1OTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NTQ4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500165489", "bodyText": "That's a great point @swallez\nWould you like do add that support as part of this PR or open an issue and fix it separately?", "author": "andreidan", "createdAt": "2020-10-06T10:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1OTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NzUwNw==", "url": "https://github.com/elastic/elasticsearch/pull/63230#discussion_r500177507", "bodyText": "Let's focus on request compression in this PR. I've opened #63314 for it.", "author": "swallez", "createdAt": "2020-10-06T10:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1OTU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "560b78d1ffd535cad2a307cc4e16ca80a72b8ab4", "chunk": "diff --git a/client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java b/client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java\nindex 7d691676eda..faa86b11f5a 100644\n--- a/client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java\n+++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientGzipCompressionTests.java\n\n@@ -105,7 +105,9 @@ public class RestClientGzipCompressionTests extends RestClientTestCase {\n         byte[] buffer = new byte[1024];\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         int len = 0;\n-        while ((len = in.read(buffer)) > 0) bos.write(buffer, 0, len);\n+        while ((len = in.read(buffer)) > 0) {\n+            bos.write(buffer, 0, len);\n+        }\n         in.close();\n         return bos.toByteArray();\n     }\n"}}, {"oid": "560b78d1ffd535cad2a307cc4e16ca80a72b8ab4", "url": "https://github.com/elastic/elasticsearch/commit/560b78d1ffd535cad2a307cc4e16ca80a72b8ab4", "message": "Avoid paren-less one liners", "committedDate": "2020-10-06T08:28:13Z", "type": "commit"}, {"oid": "fe4b90f04ed6bf64271a089a25bd3dd016312b59", "url": "https://github.com/elastic/elasticsearch/commit/fe4b90f04ed6bf64271a089a25bd3dd016312b59", "message": "Keep request creation methods static", "committedDate": "2020-10-06T10:50:50Z", "type": "commit"}]}