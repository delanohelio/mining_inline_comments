{"pr_number": 53244, "pr_title": "EQL: Use In from QL", "pr_createdAt": "2020-03-06T20:56:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53244", "timeline": [{"oid": "0870f6f4cb28f06aa91b2f087b67451e13a39d68", "url": "https://github.com/elastic/elasticsearch/commit/0870f6f4cb28f06aa91b2f087b67451e13a39d68", "message": "EQL: Use In from QL", "committedDate": "2020-03-06T20:55:34Z", "type": "commit"}, {"oid": "fcbe3e8f00375029f9f4d302034d434f240d5679", "url": "https://github.com/elastic/elasticsearch/commit/fcbe3e8f00375029f9f4d302034d434f240d5679", "message": "EQL: Add more In tests", "committedDate": "2020-03-13T15:27:04Z", "type": "commit"}, {"oid": "09a6c0ccd042a09a0100b49c71604d8f11dda076", "url": "https://github.com/elastic/elasticsearch/commit/09a6c0ccd042a09a0100b49c71604d8f11dda076", "message": "EQL: Test In duplicates", "committedDate": "2020-03-13T15:30:43Z", "type": "commit"}, {"oid": "bf2c4efe42705aec8f901ed97043db1d5193b867", "url": "https://github.com/elastic/elasticsearch/commit/bf2c4efe42705aec8f901ed97043db1d5193b867", "message": "EQL: Add test for In mixed types", "committedDate": "2020-03-13T16:03:50Z", "type": "commit"}, {"oid": "cfc5c2891c0a0767509418376f0734842bd81290", "url": "https://github.com/elastic/elasticsearch/commit/cfc5c2891c0a0767509418376f0734842bd81290", "message": "Merge branch 'master' into eql/in-nodes", "committedDate": "2020-03-15T21:00:02Z", "type": "commit"}, {"oid": "84fdacd0e6c0568ca7c79cf550d0adb9a7ce9b23", "url": "https://github.com/elastic/elasticsearch/commit/84fdacd0e6c0568ca7c79cf550d0adb9a7ce9b23", "message": "Merge remote-tracking branch 'origin/master' into eql/in-nodes", "committedDate": "2020-03-16T16:10:58Z", "type": "commit"}, {"oid": "fe7cb9abee84a29dba6f15997a3a60a15da70eb2", "url": "https://github.com/elastic/elasticsearch/commit/fe7cb9abee84a29dba6f15997a3a60a15da70eb2", "message": "EQL: Copy In translation to QL", "committedDate": "2020-03-18T16:14:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyOTQ5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394529495", "bodyText": "I would just check the terms and opcode not the boost - that's a default we don't influence.", "author": "costin", "createdAt": "2020-03-18T17:43:43Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java", "diffHunk": "@@ -45,18 +45,13 @@\n             },\n             {\"inFilter\", \"process where process_name in (\\\"python.exe\\\", \\\"SMSS.exe\\\", \\\"explorer.exe\\\")\",\n                     new Object[]{\n-                            \"\\\"term\\\":{\\\"process_name\\\":{\\\"value\\\":\\\"python.exe\\\"\",\n-                            \"\\\"term\\\":{\\\"process_name\\\":{\\\"value\\\":\\\"SMSS.exe\\\"\",\n-                            \"\\\"term\\\":{\\\"process_name\\\":{\\\"value\\\":\\\"explorer.exe\\\"\",\n+                            \"{\\\"terms\\\":{\\\"process_name\\\":[\\\"python.exe\\\",\\\"SMSS.exe\\\",\\\"explorer.exe\\\"],\\\"boost\\\":1.0}}],\\\"boost\\\":1.0}}\",\n                     }\n             },\n             {\"equalsAndInFilter\", \"process where process_path == \\\"*\\\\\\\\red_ttp\\\\\\\\wininit.*\\\" and opcode in (0,1,2,3)\",\n                     new Object[]{\n                             \"\\\"wildcard\\\":{\\\"process_path\\\":{\\\"wildcard\\\":\\\"*\\\\\\\\\\\\\\\\red_ttp\\\\\\\\\\\\\\\\wininit.*\\\"\",\n-                            \"\\\"term\\\":{\\\"opcode\\\":{\\\"value\\\":0\",\n-                            \"\\\"term\\\":{\\\"opcode\\\":{\\\"value\\\":1\",\n-                            \"\\\"term\\\":{\\\"opcode\\\":{\\\"value\\\":2\",\n-                            \"\\\"term\\\":{\\\"opcode\\\":{\\\"value\\\":3\",\n+                            \"{\\\"terms\\\":{\\\"opcode\\\":[0,1,2,3],\\\"boost\\\":1.0}}],\\\"boost\\\":1.0}}\",", "originalCommit": "fe7cb9abee84a29dba6f15997a3a60a15da70eb2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58c6250d8b78e16fd42dc9fab3a497c94c1f655b", "chunk": "diff --git a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java\nindex 388c22725f8..2146e561c71 100644\n--- a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java\n+++ b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderOkTests.java\n\n@@ -45,13 +45,13 @@ public class QueryFolderOkTests extends AbstractQueryFolderTestCase {\n             },\n             {\"inFilter\", \"process where process_name in (\\\"python.exe\\\", \\\"SMSS.exe\\\", \\\"explorer.exe\\\")\",\n                     new Object[]{\n-                            \"{\\\"terms\\\":{\\\"process_name\\\":[\\\"python.exe\\\",\\\"SMSS.exe\\\",\\\"explorer.exe\\\"],\\\"boost\\\":1.0}}],\\\"boost\\\":1.0}}\",\n+                            \"{\\\"terms\\\":{\\\"process_name\\\":[\\\"python.exe\\\",\\\"SMSS.exe\\\",\\\"explorer.exe\\\"],\",\n                     }\n             },\n             {\"equalsAndInFilter\", \"process where process_path == \\\"*\\\\\\\\red_ttp\\\\\\\\wininit.*\\\" and opcode in (0,1,2,3)\",\n                     new Object[]{\n                             \"\\\"wildcard\\\":{\\\"process_path\\\":{\\\"wildcard\\\":\\\"*\\\\\\\\\\\\\\\\red_ttp\\\\\\\\\\\\\\\\wininit.*\\\"\",\n-                            \"{\\\"terms\\\":{\\\"opcode\\\":[0,1,2,3],\\\"boost\\\":1.0}}],\\\"boost\\\":1.0}}\",\n+                            \"{\\\"terms\\\":{\\\"opcode\\\":[0,1,2,3]\",\n                     }\n             },\n     };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzMDQ1NA==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394530454", "bodyText": "What's the behavior of wildcard string in In - are they supported or not? Should we check their existence and if we discover some, throw an error? Or better yet convert them into Equals and And.\nI can see how somebody doing an equals against two patterns might be tempted to use an In with both of them instead.", "author": "costin", "createdAt": "2020-03-18T17:45:14Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -41,28 +42,36 @@\n import org.elasticsearch.xpack.ql.querydsl.query.RegexQuery;\n import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n import org.elasticsearch.xpack.ql.querydsl.query.TermQuery;\n+import org.elasticsearch.xpack.ql.querydsl.query.TermsQuery;\n import org.elasticsearch.xpack.ql.querydsl.query.WildcardQuery;\n import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n import org.elasticsearch.xpack.ql.util.Check;\n+import org.elasticsearch.xpack.ql.util.CollectionUtils;\n import org.elasticsearch.xpack.ql.util.Holder;\n \n import java.time.OffsetTime;\n import java.time.ZonedDateTime;\n import java.time.temporal.TemporalAccessor;\n+import java.util.LinkedHashSet;\n import java.util.List;\n+import java.util.Set;\n+\n \n public final class ExpressionTranslators {\n \n     public static final String DATE_FORMAT = \"strict_date_time\";\n     public static final String TIME_FORMAT = \"strict_hour_minute_second_millis\";\n \n-    \n+\n     public static final List<ExpressionTranslator<?>> QUERY_TRANSLATORS = List.of(\n             new BinaryComparisons(),\n             new Ranges(),\n             new BinaryLogic(),\n             new Nots(),\n             new Likes(),\n+            new InComparisons(),", "originalCommit": "fe7cb9abee84a29dba6f15997a3a60a15da70eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MDgzNg==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394540836", "bodyText": "great question.\nIn is always exact match (+/- case-sensitivity for ES).\nwe use the wildcard function when matching multiple patterns: wildcard(command_line, \"*localgroup*\", \"*group*\", \"*user*\").\nthere has been a little confusion by some users that have used in with wildcards, so we can change that behavior if that reduces friction. I've avoided that so far, because it would quietly change the behavior of existing syntax. But eventually it may make sense to switch.", "author": "rw-access", "createdAt": "2020-03-18T18:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzMDQ1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzNDExNw==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394534117", "bodyText": "If you're comfortable, please update the rule in SQL as well similar to Ranges or BinaryLogic - essentially extend this one from QL and add the if/else block with onAggs.", "author": "costin", "createdAt": "2020-03-18T17:51:06Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -314,6 +323,36 @@ public static Query doTranslate(Range r, TranslatorHandler handler) {\n         }\n     }\n \n+    public static class InComparisons extends ExpressionTranslator<In> {", "originalCommit": "fe7cb9abee84a29dba6f15997a3a60a15da70eb2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6757d01e376a233c45537814452b43d7ff84b94", "chunk": "diff --git a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\nindex d3297a8de02..d50e3093ce9 100644\n--- a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\n+++ b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\n\n@@ -329,7 +329,7 @@ public final class ExpressionTranslators {\n             return doTranslate(in, handler);\n         }\n \n-        protected Query doTranslate(In in, TranslatorHandler handler) {\n+        public static Query doTranslate(In in, TranslatorHandler handler) {\n             Query q;\n             if (in.value() instanceof FieldAttribute) {\n                 // equality should always be against an exact match (which is important for strings)\n"}}, {"oid": "d6757d01e376a233c45537814452b43d7ff84b94", "url": "https://github.com/elastic/elasticsearch/commit/d6757d01e376a233c45537814452b43d7ff84b94", "message": "SQL: Use InComparisons from QL", "committedDate": "2020-03-18T18:11:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NzQ1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394547453", "bodyText": "One thing to note @costin is that SqlDataTypeConverter isn't available in QL,  so this is now just valueOf. Looks like SQL tests are still passing though\n\n  \n    \n      elasticsearch/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\n    \n    \n         Line 345\n      in\n      d6757d0\n    \n    \n    \n    \n\n        \n          \n           set.add(valueOf(e));", "author": "rw-access", "createdAt": "2020-03-18T18:13:25Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java", "diffHunk": "@@ -461,23 +456,7 @@ protected QueryTranslation asQuery(In in, boolean onAggs, TranslatorHandler hand\n                 aggFilter = new AggFilter(id(in.value()), in.asScript());\n             }\n             else {\n-                Query q = null;\n-                if (in.value() instanceof FieldAttribute) {\n-                    // equality should always be against an exact match (which is important for strings)\n-                    FieldAttribute fa = (FieldAttribute) in.value();\n-                    List<Expression> list = in.list();\n-                    // TODO: this needs to be handled inside the optimizer\n-                    list.removeIf(e -> DataTypes.isNull(e.dataType()));\n-                    DataType dt = list.get(0).dataType();\n-                    Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(list.size()));\n-                    for (Expression e : list) {\n-                        set.add(SqlDataTypeConverter.convert(e.fold(), dt));", "originalCommit": "d6757d01e376a233c45537814452b43d7ff84b94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NDQ2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394584466", "bodyText": "This can addressed by adding a convertTo() method which by default uses DataTypeConverter inside QL and SqlDataTypeConverter inside SQL.\nThat said, if the tests are passing across the board I would leave this as is to avoid doing any implicit conversion.\nPotentially add a comment mentioning that before there was a conversion happening to help track this down in case a weird bug occurs in the future.", "author": "costin", "createdAt": "2020-03-18T19:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NzQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4ODA3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r395188077", "bodyText": "Looks like the failing tests are from the SQL tests so the solution would be to keep the extend converTo in the SQL ExpressionTranslator and use SqlDataTypeConverter there as before.", "author": "costin", "createdAt": "2020-03-19T17:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NzQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyODQ5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r395928493", "bodyText": "Looking some more, I see this method that could also work. Could just make it public instead of protected and use this. What do you think makes the most sense?\n\n  \n    \n      elasticsearch/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/operator/comparison/In.java\n    \n    \n        Lines 106 to 112\n      in\n      7425042\n    \n    \n    \n    \n\n        \n          \n           protected List<Object> foldAndConvertListOfValues(List<Expression> list, DataType dataType) { \n        \n\n        \n          \n               List<Object> values = new ArrayList<>(list.size()); \n        \n\n        \n          \n               for (Expression e : list) { \n        \n\n        \n          \n                   values.add(DataTypeConverter.convert(Foldables.valueOf(e), dataType)); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return values; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nAnd since In is subclassed in SQL, this has an override for SqlDataTypeConverter\n\n  \n    \n      elasticsearch/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/operator/comparison/In.java\n    \n    \n        Lines 106 to 112\n      in\n      7425042\n    \n    \n    \n    \n\n        \n          \n           protected List<Object> foldAndConvertListOfValues(List<Expression> list, DataType dataType) { \n        \n\n        \n          \n               List<Object> values = new ArrayList<>(list.size()); \n        \n\n        \n          \n               for (Expression e : list) { \n        \n\n        \n          \n                   values.add(DataTypeConverter.convert(Foldables.valueOf(e), dataType)); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return values; \n        \n\n        \n          \n           }", "author": "rw-access", "createdAt": "2020-03-20T23:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NzQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NDI1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r396764256", "bodyText": "I think you're suggesting to use the foldAndConvertList from In outside of it.\nWe're trying to prevent that since when we expanded the types, it was discovered that there were quite a number of implicit conversions which are simply bad practices since they appear \"magic\" and allow lenient behavior.\nWe actually had a Foldables class that did that but it wasn't used anywhere outside In hence why it got moved there.\nIf we are to make it public and end up using it, we're back where we started.\nThis method might fix the current sets of tests however I expect more ExpressionTranslation rule in the future to require the valueOf method and thus delegation to the appropriate converter for their respective projects.", "author": "costin", "createdAt": "2020-03-23T21:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NzQ1Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "58c6250d8b78e16fd42dc9fab3a497c94c1f655b", "url": "https://github.com/elastic/elasticsearch/commit/58c6250d8b78e16fd42dc9fab3a497c94c1f655b", "message": "EQL: Remove boost checks from QueryFolderOkTests", "committedDate": "2020-03-18T18:14:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0OTM3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394549372", "bodyText": "I noticed that this exception changed. Should this also be the case for testPropertyEquationFilterUnsupported?\nhttps://github.com/elastic/elasticsearch/pull/53244/files#diff-3132b6847876733b6fd2161331f9d044L13-R17", "author": "rw-access", "createdAt": "2020-03-18T18:16:40Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -17,9 +18,10 @@ public void testPropertyEquationFilterUnsupported() {\n     }\n \n     public void testPropertyEquationInClauseFilterUnsupported() {\n-        QlIllegalArgumentException e = expectThrows(QlIllegalArgumentException.class,\n+        VerificationException e = expectThrows(VerificationException.class,", "originalCommit": "d6757d01e376a233c45537814452b43d7ff84b94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NTYxMw==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394585613", "bodyText": "Not sure I follow - the other test doesn't have a in query so I don't think it should.", "author": "costin", "createdAt": "2020-03-18T19:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0OTM3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0OTYzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53244#discussion_r394549639", "bodyText": "Behavior slightly changed. See comment in SQL\nhttps://github.com/elastic/elasticsearch/pull/53244/files#r394547453", "author": "rw-access", "createdAt": "2020-03-18T18:17:09Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -314,6 +323,36 @@ public static Query doTranslate(Range r, TranslatorHandler handler) {\n         }\n     }\n \n+    public static class InComparisons extends ExpressionTranslator<In> {\n+\n+        protected Query asQuery(In in, TranslatorHandler handler) {\n+            return doTranslate(in, handler);\n+        }\n+\n+        public static Query doTranslate(In in, TranslatorHandler handler) {\n+            Query q;\n+            if (in.value() instanceof FieldAttribute) {\n+                // equality should always be against an exact match (which is important for strings)\n+                FieldAttribute fa = (FieldAttribute) in.value();\n+                List<Expression> list = in.list();\n+\n+                // TODO: this needs to be handled inside the optimizer\n+                list.removeIf(e -> DataTypes.isNull(e.dataType()));\n+                DataType dt = list.get(0).dataType();\n+                Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(list.size()));\n+\n+                for (Expression e : list) {\n+                    set.add(valueOf(e));", "originalCommit": "d6757d01e376a233c45537814452b43d7ff84b94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e26862ccbf468b9504ba0063ee87940a53c86b58", "chunk": "diff --git a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\nindex d50e3093ce9..cd003dc55d1 100644\n--- a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\n+++ b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\n\n@@ -342,7 +349,7 @@ public final class ExpressionTranslators {\n                 Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(list.size()));\n \n                 for (Expression e : list) {\n-                    set.add(valueOf(e));\n+                    set.add(handler.convert(valueOf(e), dt));\n                 }\n \n                 q = new TermsQuery(in.source(), fa.exactAttribute().name(), set);\n"}}, {"oid": "632fdd035c10a271f2337de0016a3278634bdef4", "url": "https://github.com/elastic/elasticsearch/commit/632fdd035c10a271f2337de0016a3278634bdef4", "message": "Merge remote-tracking branch 'origin/master' into eql/in-nodes", "committedDate": "2020-03-18T18:20:30Z", "type": "commit"}, {"oid": "867ee33a105715bfb71142bb0790861342660e30", "url": "https://github.com/elastic/elasticsearch/commit/867ee33a105715bfb71142bb0790861342660e30", "message": "Merge remote-tracking branch 'origin/master' into eql/in-nodes", "committedDate": "2020-03-20T22:53:06Z", "type": "commit"}, {"oid": "e26862ccbf468b9504ba0063ee87940a53c86b58", "url": "https://github.com/elastic/elasticsearch/commit/e26862ccbf468b9504ba0063ee87940a53c86b58", "message": "QL: Add TranslatorHandler.convert", "committedDate": "2020-03-23T22:39:04Z", "type": "commit"}, {"oid": "be55ca387de0da38325e97c1269ef0f5fbb1ab2b", "url": "https://github.com/elastic/elasticsearch/commit/be55ca387de0da38325e97c1269ef0f5fbb1ab2b", "message": "Merge remote-tracking branch 'origin/master' into eql/in-nodes", "committedDate": "2020-03-24T22:36:37Z", "type": "commit"}, {"oid": "48cd40cb7b30b7042099cf77c7c7fbf5d92c767d", "url": "https://github.com/elastic/elasticsearch/commit/48cd40cb7b30b7042099cf77c7c7fbf5d92c767d", "message": "Merge remote-tracking branch 'origin/master' into eql/in-nodes", "committedDate": "2020-03-24T22:36:54Z", "type": "commit"}, {"oid": "7458c3a2fb6d4246898645fd8b7561f7c0a0b21d", "url": "https://github.com/elastic/elasticsearch/commit/7458c3a2fb6d4246898645fd8b7561f7c0a0b21d", "message": "Merge remote-tracking branch 'origin/master' into eql/in-nodes", "committedDate": "2020-03-30T20:20:51Z", "type": "commit"}]}