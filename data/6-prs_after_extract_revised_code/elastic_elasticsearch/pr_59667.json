{"pr_number": 59667, "pr_title": "Use different G1GC options for small heaps", "pr_createdAt": "2020-07-15T20:50:17Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59667", "timeline": [{"oid": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c", "url": "https://github.com/elastic/elasticsearch/commit/7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c", "message": "Use the parallel collector for small heaps\n\n    Our benchmarks have demonstrated that Elasticsearch performs better with\n    the parallel collector than with the default G1 collector when the heap\n    size is small. With this commit we ergonomically choose the parallel\n    collector for heap sizes smaller than (and including) 4GB and turn real\n    memory circuit breaker off when running with  ParallelGC.\nCo-authored-by: Evgenia Badiyanova <evgenia.badiyanova@elastic.co>\nCo-authored-by: Daniel Mitterdorfer <daniel.mitterdorfer@elastic.co>", "committedDate": "2020-07-15T20:48:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMjg0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r459312846", "bodyText": "Drive-by comment, feel free to ignore - should we pass Pattern.COMMENTS here so that we can break up the regex with whitespace, to make it easier to read?", "author": "pugnascotia", "createdAt": "2020-07-23T09:07:30Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,53 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        // Use ParallelGC for heaps <= 4GB unless the user has explicitly set the garbage collector\n+        JvmOption g1 = finalJvmOptions.get(\"UseG1GC\");\n+        if (heapSize <= 4 * 1024 * 1024 * 1024 && g1.getMandatoryValue().equals(\"true\") && g1.isCommandLineOrigin() == false) {\n+            ergonomicChoices.add(\"-XX:+UseParallelGC\");\n+        }\n+        System.out.println(\"HEre inn\");\n         return ergonomicChoices;\n     }\n \n     private static final Pattern OPTION = Pattern.compile(\n-        \"^\\\\s*\\\\S+\\\\s+(?<flag>\\\\S+)\\\\s+:?=\\\\s+(?<value>\\\\S+)?\\\\s+\\\\{[^}]+?\\\\}\\\\s+\\\\{[^}]+}\"\n+        \"^\\\\s*\\\\S+\\\\s+(?<flag>\\\\S+)\\\\s+:?=\\\\s+(?<value>\\\\S+)?\\\\s+\\\\{[^}]+?\\\\}\\\\s+\\\\{(?<origin>[^}]+)}\"", "originalCommit": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2003331d318cc37610d512c8c5f71e50913032a6", "chunk": "diff --git a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\nindex d6cd49947f2..42c68180a9e 100644\n--- a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n+++ b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n\n@@ -59,12 +59,11 @@ final class JvmErgonomics {\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n-        // Use ParallelGC for heaps <= 4GB unless the user has explicitly set the garbage collector\n-        JvmOption g1 = finalJvmOptions.get(\"UseG1GC\");\n-        if (heapSize <= 4 * 1024 * 1024 * 1024 && g1.getMandatoryValue().equals(\"true\") && g1.isCommandLineOrigin() == false) {\n+        final boolean useParallelGC = extractUseParallelGC(finalJvmOptions, heapSize);\n+        if (useParallelGC) {\n             ergonomicChoices.add(\"-XX:+UseParallelGC\");\n         }\n-        System.out.println(\"HEre inn\");\n+\n         return ergonomicChoices;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3MTg2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r457671865", "bodyText": "Can we use Booleans.parseBoolean? Also, please use == false for negation.", "author": "rjernst", "createdAt": "2020-07-20T20:27:12Z", "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -69,7 +69,10 @@\n     private final Map<String, CircuitBreaker> breakers;\n \n     public static final Setting<Boolean> USE_REAL_MEMORY_USAGE_SETTING =\n-        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", true, Property.NodeScope);\n+        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", settings -> {\n+            // turn real memory circuit breaker off for ParallelGC\n+            return String.valueOf(!JvmInfo.jvmInfo().useParallelGC().equals(\"true\"));", "originalCommit": "7d987ba1425e9a8a13efb7b3527c2d0c6a92a55c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2003331d318cc37610d512c8c5f71e50913032a6", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\nindex 5e30b447c32..f63816c53c2 100644\n--- a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n+++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n\n@@ -71,7 +71,7 @@ public class HierarchyCircuitBreakerService extends CircuitBreakerService {\n     public static final Setting<Boolean> USE_REAL_MEMORY_USAGE_SETTING =\n         Setting.boolSetting(\"indices.breaker.total.use_real_memory\", settings -> {\n             // turn real memory circuit breaker off for ParallelGC\n-            return String.valueOf(!JvmInfo.jvmInfo().useParallelGC().equals(\"true\"));\n+            return String.valueOf(Booleans.parseBoolean(JvmInfo.jvmInfo().useParallelGC()) == false);\n         }, Property.NodeScope);\n \n     public static final Setting<ByteSizeValue> TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING =\n"}}, {"oid": "ab6059d28d8b14f2c7ed2ef7b1abfa50df9effa9", "url": "https://github.com/elastic/elasticsearch/commit/ab6059d28d8b14f2c7ed2ef7b1abfa50df9effa9", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into master-ergonomics-parallelgc", "committedDate": "2020-07-28T23:48:10Z", "type": "commit"}, {"oid": "2655315881e80def2ac3dc30a29ee6b0523e0181", "url": "https://github.com/elastic/elasticsearch/commit/2655315881e80def2ac3dc30a29ee6b0523e0181", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into master-ergonomics-parallelgc", "committedDate": "2020-07-29T13:34:03Z", "type": "commit"}, {"oid": "2003331d318cc37610d512c8c5f71e50913032a6", "url": "https://github.com/elastic/elasticsearch/commit/2003331d318cc37610d512c8c5f71e50913032a6", "message": "Addressed some comments and fixed tests.", "committedDate": "2020-07-29T18:48:41Z", "type": "commit"}, {"oid": "3c05949b26dc81ba7e26a0f772c4a84cefba73ec", "url": "https://github.com/elastic/elasticsearch/commit/3c05949b26dc81ba7e26a0f772c4a84cefba73ec", "message": "Fix precomit erorrs", "committedDate": "2020-07-29T23:51:49Z", "type": "commit"}, {"oid": "818226a63d0b78d1ac408b38b7dace41adabf5e0", "url": "https://github.com/elastic/elasticsearch/commit/818226a63d0b78d1ac408b38b7dace41adabf5e0", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into master-ergonomics-parallelgc", "committedDate": "2020-07-30T00:24:19Z", "type": "commit"}, {"oid": "f14d2cdb234b3ed56a63dbeb269c28747b56d6e6", "url": "https://github.com/elastic/elasticsearch/commit/f14d2cdb234b3ed56a63dbeb269c28747b56d6e6", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into master-ergonomics-parallelgc", "committedDate": "2020-07-31T16:18:55Z", "type": "commit"}, {"oid": "4d033a498deaf7081b1e93fb54dd0a273da753ee", "url": "https://github.com/elastic/elasticsearch/commit/4d033a498deaf7081b1e93fb54dd0a273da753ee", "message": "Fix test", "committedDate": "2020-07-31T16:19:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0MzkwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r464843909", "bodyText": "In #46751, a check is made purely against the parent breaker, relying on this being the real memory circuit breaker. This PR disables that PR by default for small heaps.\nI seem to remember seeing that approach (just checking the parent breaker, now that we have real memory circuit breaker) has come up a few times.", "author": "henningandersen", "createdAt": "2020-08-04T07:07:57Z", "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -69,7 +69,10 @@\n     private final Map<String, CircuitBreaker> breakers;\n \n     public static final Setting<Boolean> USE_REAL_MEMORY_USAGE_SETTING =\n-        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", true, Property.NodeScope);\n+        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", settings -> {\n+            // turn real memory circuit breaker off for ParallelGC\n+            return String.valueOf(Booleans.parseBoolean(JvmInfo.jvmInfo().useParallelGC()) == false);", "originalCommit": "4d033a498deaf7081b1e93fb54dd0a273da753ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0e34fe0630ceb28e4370523cac174ca58cda87a", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\nindex f63816c53c2..007aff09882 100644\n--- a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n+++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n\n@@ -69,19 +69,16 @@ public class HierarchyCircuitBreakerService extends CircuitBreakerService {\n     private final Map<String, CircuitBreaker> breakers;\n \n     public static final Setting<Boolean> USE_REAL_MEMORY_USAGE_SETTING =\n-        Setting.boolSetting(\"indices.breaker.total.use_real_memory\", settings -> {\n-            // turn real memory circuit breaker off for ParallelGC\n-            return String.valueOf(Booleans.parseBoolean(JvmInfo.jvmInfo().useParallelGC()) == false);\n-        }, Property.NodeScope);\n+            Setting.boolSetting(\"indices.breaker.total.use_real_memory\", true, Property.NodeScope);\n \n     public static final Setting<ByteSizeValue> TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING =\n-        Setting.memorySizeSetting(\"indices.breaker.total.limit\", settings -> {\n-            if (USE_REAL_MEMORY_USAGE_SETTING.get(settings)) {\n-                return \"95%\";\n-            } else {\n-                return \"70%\";\n-            }\n-        }, Property.Dynamic, Property.NodeScope);\n+            Setting.memorySizeSetting(\"indices.breaker.total.limit\", settings -> {\n+                if (USE_REAL_MEMORY_USAGE_SETTING.get(settings)) {\n+                    return \"95%\";\n+                } else {\n+                    return \"70%\";\n+                }\n+            }, Property.Dynamic, Property.NodeScope);\n \n     public static final Setting<ByteSizeValue> FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING =\n         Setting.memorySizeSetting(\"indices.breaker.fielddata.limit\", \"40%\", Property.Dynamic, Property.NodeScope);\n"}}, {"oid": "9008ede953098e9ce1df646848f27880238270ec", "url": "https://github.com/elastic/elasticsearch/commit/9008ede953098e9ce1df646848f27880238270ec", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into master-ergonomics-parallelgc", "committedDate": "2020-09-22T22:47:07Z", "type": "commit"}, {"oid": "d0e34fe0630ceb28e4370523cac174ca58cda87a", "url": "https://github.com/elastic/elasticsearch/commit/d0e34fe0630ceb28e4370523cac174ca58cda87a", "message": "Changed the ergonomics heuristic to use G1GC  with tuned options instead\nof ParallelGC", "committedDate": "2020-09-29T12:37:51Z", "type": "commit"}, {"oid": "70b4de9c0a15165532e92d3ebaf3645d99ccb1d9", "url": "https://github.com/elastic/elasticsearch/commit/70b4de9c0a15165532e92d3ebaf3645d99ccb1d9", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into master-ergonomics-parallelgc", "committedDate": "2020-09-29T12:38:21Z", "type": "commit"}, {"oid": "a6f5302e8910fbf259854b1f9fe81a18d855b845", "url": "https://github.com/elastic/elasticsearch/commit/a6f5302e8910fbf259854b1f9fe81a18d855b845", "message": "fix precomit errors", "committedDate": "2020-09-29T15:17:04Z", "type": "commit"}, {"oid": "ffec016f0f63c877fdee1d12a288002db52731c0", "url": "https://github.com/elastic/elasticsearch/commit/ffec016f0f63c877fdee1d12a288002db52731c0", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into master-ergonomics-parallelgc", "committedDate": "2020-09-29T15:48:21Z", "type": "commit"}, {"oid": "80b713b170e56d89a59ac4faa9755123e7505d59", "url": "https://github.com/elastic/elasticsearch/commit/80b713b170e56d89a59ac4faa9755123e7505d59", "message": "Fix precomit errors", "committedDate": "2020-09-29T16:01:40Z", "type": "commit"}, {"oid": "411cfd422de27ffe6eb1e406c1d105793f75bf75", "url": "https://github.com/elastic/elasticsearch/commit/411cfd422de27ffe6eb1e406c1d105793f75bf75", "message": "Fix indentation", "committedDate": "2020-10-01T14:19:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzM2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r498863361", "bodyText": "I think we should turn the heap size check into heapSize < 8L << 30, since java before version 15 will round the region size down, causing a 7.99GB heap to have a region size of 2MB.", "author": "henningandersen", "createdAt": "2020-10-02T14:39:20Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -116,12 +146,30 @@ private JvmErgonomics() {\n     }\n \n     // package private for testing\n-    static Long extractHeapSize(final Map<String, Optional<String>> finalJvmOptions) {\n-        return Long.parseLong(finalJvmOptions.get(\"MaxHeapSize\").get());\n+    static Long extractHeapSize(final Map<String, JvmOption> finalJvmOptions) {\n+        return Long.parseLong(finalJvmOptions.get(\"MaxHeapSize\").getMandatoryValue());\n+    }\n+\n+    static long extractMaxDirectMemorySize(final Map<String, JvmOption> finalJvmOptions) {\n+        return Long.parseLong(finalJvmOptions.get(\"MaxDirectMemorySize\").getMandatoryValue());\n+    }\n+\n+    // Tune G1GC options for heaps <= 4GB unless the user has explicitly set G1HeapRegionSize\n+    static boolean tuneG1GCForSmallHeap(final Map<String, JvmOption> finalJvmOptions, final long heapSize) {\n+        JvmOption g1GC = finalJvmOptions.get(\"UseG1GC\");\n+        JvmOption g1GCHeapRegion = finalJvmOptions.get(\"G1HeapRegionSize\");\n+        return (heapSize <= 4L << 30 && g1GC.getMandatoryValue().equals(\"true\") && g1GCHeapRegion.isCommandLineOrigin() == false);", "originalCommit": "411cfd422de27ffe6eb1e406c1d105793f75bf75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzMDk5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499030993", "bodyText": "Sorry missread the comment. Make sense, so the tuning options will be for heaps strictly smaller than 8G.", "author": "ebadyano", "createdAt": "2020-10-02T20:16:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ec2b8917bb3dd04759466ed6cc5c3a5aefabcb0c", "chunk": "diff --git a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\nindex 11759371896..aff04ad6ebe 100644\n--- a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n+++ b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n\n@@ -154,19 +156,25 @@ final class JvmErgonomics {\n         return Long.parseLong(finalJvmOptions.get(\"MaxDirectMemorySize\").getMandatoryValue());\n     }\n \n-    // Tune G1GC options for heaps <= 4GB unless the user has explicitly set G1HeapRegionSize\n+    // Tune G1GC options for heaps < 8GB unless the user has explicitly set G1HeapRegionSize\n     static boolean tuneG1GCForSmallHeap(final Map<String, JvmOption> finalJvmOptions, final long heapSize) {\n         JvmOption g1GC = finalJvmOptions.get(\"UseG1GC\");\n         JvmOption g1GCHeapRegion = finalJvmOptions.get(\"G1HeapRegionSize\");\n-        return (heapSize <= 4L << 30 && g1GC.getMandatoryValue().equals(\"true\") && g1GCHeapRegion.isCommandLineOrigin() == false);\n+        JvmOption g1GCReservePercent = finalJvmOptions.get(\"G1ReservePercent\");\n+        JvmOption g1GCInitiatingHeapOccupancyPercent = finalJvmOptions.get(\"InitiatingHeapOccupancyPercent\");\n+        return (heapSize < 8L << 30\n+            && g1GC.getMandatoryValue().equals(\"true\")\n+            && g1GCHeapRegion.isCommandLineOrigin() == false\n+            && g1GCReservePercent.isCommandLineOrigin() == false\n+            && g1GCInitiatingHeapOccupancyPercent.isCommandLineOrigin() == false);\n     }\n \n-    // Tune G1GC options for heaps > 4GB unless the user has explicitly set -XX:G1ReservePercent or -XX:InitiatingHeapOccupancyPercent\n+    // Tune G1GC options for heaps >= 8GB unless the user has explicitly set -XX:G1ReservePercent or -XX:InitiatingHeapOccupancyPercent\n     static boolean tuneG1GCForLargeHeap(final Map<String, JvmOption> finalJvmOptions, final long heapSize) {\n         JvmOption g1GC = finalJvmOptions.get(\"UseG1GC\");\n         JvmOption g1GCReservePercent = finalJvmOptions.get(\"G1ReservePercent\");\n         JvmOption g1GCInitiatingHeapOccupancyPercent = finalJvmOptions.get(\"InitiatingHeapOccupancyPercent\");\n-        return (heapSize > 4L << 30\n+        return (heapSize >= 8L << 30\n             && g1GC.getMandatoryValue().equals(\"true\")\n             && g1GCReservePercent.isCommandLineOrigin() == false\n             && g1GCInitiatingHeapOccupancyPercent.isCommandLineOrigin() == false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MDcyMw==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r498880723", "bodyText": "As mentioned on another channel, I think we should make reserve pct 15 rather than the default 10 - to stay safely clear of real memory circuit breaker exceptions.\nI also think we should add in the IHOP always if it is not defined, just to be safe. It should not matter for performance since G1 will adaptively adjust the value.", "author": "henningandersen", "createdAt": "2020-10-02T15:07:32Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,55 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {\n+            ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");", "originalCommit": "411cfd422de27ffe6eb1e406c1d105793f75bf75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec2b8917bb3dd04759466ed6cc5c3a5aefabcb0c", "chunk": "diff --git a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\nindex 11759371896..aff04ad6ebe 100644\n--- a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n+++ b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n\n@@ -63,6 +63,8 @@ final class JvmErgonomics {\n         final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n         if (tuneG1GCForSmallHeap) {\n             ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");\n         } else if (tuneG1GCForLargeHeap) {\n             ergonomicChoices.add(\"-XX:G1ReservePercent=25\");\n             ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=30\");\n"}}, {"oid": "ec2b8917bb3dd04759466ed6cc5c3a5aefabcb0c", "url": "https://github.com/elastic/elasticsearch/commit/ec2b8917bb3dd04759466ed6cc5c3a5aefabcb0c", "message": "Addressed Henning's and Ryan's comments.", "committedDate": "2020-10-02T20:32:07Z", "type": "commit"}, {"oid": "8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6", "url": "https://github.com/elastic/elasticsearch/commit/8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into master-ergonomics-parallelgc", "committedDate": "2020-10-02T23:25:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxMTE2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499811163", "bodyText": "I think we should use 30 in this case too.", "author": "henningandersen", "createdAt": "2020-10-05T19:06:34Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,57 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {\n+            ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");", "originalCommit": "8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac9a5686bfe5c1b475a72d9f13ca8ce12e27905c", "chunk": "diff --git a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\nindex aff04ad6ebe..1e8090127f0 100644\n--- a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n+++ b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n\n@@ -59,15 +59,19 @@ final class JvmErgonomics {\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+\n         final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n-        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n-        if (tuneG1GCForSmallHeap) {\n+        final boolean tuneG1GCHeapRegion = tuneG1GCHeapRegion(finalJvmOptions, tuneG1GCForSmallHeap);\n+        final int tuneG1GCReservePercent = tuneG1GCReservePercent(finalJvmOptions, tuneG1GCForSmallHeap);\n+        final int tuneG1GCInitiatingHeapOccupancyPercent = tuneG1GCInitiatingHeapOccupancyPercent(finalJvmOptions, tuneG1GCForSmallHeap);\n+        if (tuneG1GCHeapRegion) {\n             ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n-            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n-            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");\n-        } else if (tuneG1GCForLargeHeap) {\n-            ergonomicChoices.add(\"-XX:G1ReservePercent=25\");\n-            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=30\");\n+        }\n+        if (tuneG1GCReservePercent != 0) {\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=\" + tuneG1GCReservePercent);\n+        }\n+        if (tuneG1GCInitiatingHeapOccupancyPercent != 0) {\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=\" + tuneG1GCInitiatingHeapOccupancyPercent);\n         }\n \n         return ergonomicChoices;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNTc3NA==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499815774", "bodyText": "I think it is surprising that if you manually specify any of the 3 parameters you loose all 3. For instance if they decide to raise G1ReservePercent to 20, the region size adjustment is lost.\nI think the check in tuneG1GCForSmallHeap should only check heap size and maybe that G1 is in use.\nThe code below should then only add options where there is no existing command line origin option.\nAlternatively (to the last part), we could swap the two lines here:\n\n  \n    \n      elasticsearch/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java\n    \n    \n         Line 144\n      in\n      01dc110\n    \n    \n    \n    \n\n        \n          \n           finalJvmOptions.addAll(substitutedJvmOptions); \n        \n    \n  \n\n\nto be:\n        finalJvmOptions.addAll(ergonomicJvmOptions);\n        finalJvmOptions.addAll(substitutedJvmOptions);\n\nsince that would ensure that the original command line options override the ergonomics picked here.", "author": "henningandersen", "createdAt": "2020-10-05T19:15:26Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,57 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {", "originalCommit": "8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac9a5686bfe5c1b475a72d9f13ca8ce12e27905c", "chunk": "diff --git a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\nindex aff04ad6ebe..1e8090127f0 100644\n--- a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n+++ b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n\n@@ -59,15 +59,19 @@ final class JvmErgonomics {\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+\n         final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n-        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n-        if (tuneG1GCForSmallHeap) {\n+        final boolean tuneG1GCHeapRegion = tuneG1GCHeapRegion(finalJvmOptions, tuneG1GCForSmallHeap);\n+        final int tuneG1GCReservePercent = tuneG1GCReservePercent(finalJvmOptions, tuneG1GCForSmallHeap);\n+        final int tuneG1GCInitiatingHeapOccupancyPercent = tuneG1GCInitiatingHeapOccupancyPercent(finalJvmOptions, tuneG1GCForSmallHeap);\n+        if (tuneG1GCHeapRegion) {\n             ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n-            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n-            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");\n-        } else if (tuneG1GCForLargeHeap) {\n-            ergonomicChoices.add(\"-XX:G1ReservePercent=25\");\n-            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=30\");\n+        }\n+        if (tuneG1GCReservePercent != 0) {\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=\" + tuneG1GCReservePercent);\n+        }\n+        if (tuneG1GCInitiatingHeapOccupancyPercent != 0) {\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=\" + tuneG1GCInitiatingHeapOccupancyPercent);\n         }\n \n         return ergonomicChoices;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNjMxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499816319", "bodyText": "Same comment as above, is surprising that if one of them is specified you loose the other. In particular if IHOP is specified, it seems quite dangerous to no longer set G1ReservePercent.", "author": "henningandersen", "createdAt": "2020-10-05T19:16:28Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java", "diffHunk": "@@ -53,25 +53,57 @@ private JvmErgonomics() {\n      */\n     static List<String> choose(final List<String> userDefinedJvmOptions) throws InterruptedException, IOException {\n         final List<String> ergonomicChoices = new ArrayList<>();\n-        final Map<String, Optional<String>> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n+        final Map<String, JvmOption> finalJvmOptions = finalJvmOptions(userDefinedJvmOptions);\n         final long heapSize = extractHeapSize(finalJvmOptions);\n         final long maxDirectMemorySize = extractMaxDirectMemorySize(finalJvmOptions);\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+        final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n+        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n+        if (tuneG1GCForSmallHeap) {\n+            ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");\n+        } else if (tuneG1GCForLargeHeap) {", "originalCommit": "8d3c734c0d21861f2fc11f3ec0baa994e8d2dee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NDg2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/59667#discussion_r499854866", "bodyText": "Thank you for catching this, I updated the pr.", "author": "ebadyano", "createdAt": "2020-10-05T20:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNjMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ac9a5686bfe5c1b475a72d9f13ca8ce12e27905c", "chunk": "diff --git a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\nindex aff04ad6ebe..1e8090127f0 100644\n--- a/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n+++ b/distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmErgonomics.java\n\n@@ -59,15 +59,19 @@ final class JvmErgonomics {\n         if (maxDirectMemorySize == 0) {\n             ergonomicChoices.add(\"-XX:MaxDirectMemorySize=\" + heapSize / 2);\n         }\n+\n         final boolean tuneG1GCForSmallHeap = tuneG1GCForSmallHeap(finalJvmOptions, heapSize);\n-        final boolean tuneG1GCForLargeHeap = tuneG1GCForLargeHeap(finalJvmOptions, heapSize);\n-        if (tuneG1GCForSmallHeap) {\n+        final boolean tuneG1GCHeapRegion = tuneG1GCHeapRegion(finalJvmOptions, tuneG1GCForSmallHeap);\n+        final int tuneG1GCReservePercent = tuneG1GCReservePercent(finalJvmOptions, tuneG1GCForSmallHeap);\n+        final int tuneG1GCInitiatingHeapOccupancyPercent = tuneG1GCInitiatingHeapOccupancyPercent(finalJvmOptions, tuneG1GCForSmallHeap);\n+        if (tuneG1GCHeapRegion) {\n             ergonomicChoices.add(\"-XX:G1HeapRegionSize=4m\");\n-            ergonomicChoices.add(\"-XX:G1ReservePercent=15\");\n-            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=45\");\n-        } else if (tuneG1GCForLargeHeap) {\n-            ergonomicChoices.add(\"-XX:G1ReservePercent=25\");\n-            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=30\");\n+        }\n+        if (tuneG1GCReservePercent != 0) {\n+            ergonomicChoices.add(\"-XX:G1ReservePercent=\" + tuneG1GCReservePercent);\n+        }\n+        if (tuneG1GCInitiatingHeapOccupancyPercent != 0) {\n+            ergonomicChoices.add(\"-XX:InitiatingHeapOccupancyPercent=\" + tuneG1GCInitiatingHeapOccupancyPercent);\n         }\n \n         return ergonomicChoices;\n"}}, {"oid": "ac9a5686bfe5c1b475a72d9f13ca8ce12e27905c", "url": "https://github.com/elastic/elasticsearch/commit/ac9a5686bfe5c1b475a72d9f13ca8ce12e27905c", "message": "Address Henning's comments", "committedDate": "2020-10-05T20:16:03Z", "type": "commit"}, {"oid": "f326f5ba3c5f0811dd7ee6bde8f999c19638b028", "url": "https://github.com/elastic/elasticsearch/commit/f326f5ba3c5f0811dd7ee6bde8f999c19638b028", "message": "address Henning's comments", "committedDate": "2020-10-05T20:27:02Z", "type": "commit"}, {"oid": "5ddb619f1a2a3d9d0b1b2997485e48cd211b6d9f", "url": "https://github.com/elastic/elasticsearch/commit/5ddb619f1a2a3d9d0b1b2997485e48cd211b6d9f", "message": "Fix tests", "committedDate": "2020-10-05T20:41:31Z", "type": "commit"}, {"oid": "d628ff90dba6492fca680c3523bcd2b973ac03d8", "url": "https://github.com/elastic/elasticsearch/commit/d628ff90dba6492fca680c3523bcd2b973ac03d8", "message": "Fix precommit tests", "committedDate": "2020-10-05T20:59:33Z", "type": "commit"}, {"oid": "d8a38403c2a5e213367eb1a64ea6bcfac05d1163", "url": "https://github.com/elastic/elasticsearch/commit/d8a38403c2a5e213367eb1a64ea6bcfac05d1163", "message": "Fix logic", "committedDate": "2020-10-05T21:19:51Z", "type": "commit"}, {"oid": "f2e999acdaf1a27117a30636b026d1c277b2edb0", "url": "https://github.com/elastic/elasticsearch/commit/f2e999acdaf1a27117a30636b026d1c277b2edb0", "message": "Add an extra test for when non G1GC policy is set", "committedDate": "2020-10-06T14:15:36Z", "type": "commit"}]}