{"pr_number": 61858, "pr_title": "Add a template parameter to override auto_create_index value", "pr_createdAt": "2020-09-02T14:58:14Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61858", "timeline": [{"oid": "ee50924bd00397e4e01f9fc499e61d2893b01a18", "url": "https://github.com/elastic/elasticsearch/commit/ee50924bd00397e4e01f9fc499e61d2893b01a18", "message": "Override auto-create index behaviour via a template flag", "committedDate": "2020-08-03T15:15:35Z", "type": "commit"}, {"oid": "f62c83b2ccd790b4b631ef786c4c6387f227991d", "url": "https://github.com/elastic/elasticsearch/commit/f62c83b2ccd790b4b631ef786c4c6387f227991d", "message": "WIP - trying to test watcher", "committedDate": "2020-08-04T19:52:20Z", "type": "commit"}, {"oid": "097d9f567297cd296ce38f4f21fe25f1c361d631", "url": "https://github.com/elastic/elasticsearch/commit/097d9f567297cd296ce38f4f21fe25f1c361d631", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-01T13:23:16Z", "type": "commit"}, {"oid": "3bb580ca7a16b15405b93b95bba4116657ed0e33", "url": "https://github.com/elastic/elasticsearch/commit/3bb580ca7a16b15405b93b95bba4116657ed0e33", "message": "Fixes", "committedDate": "2020-09-02T10:10:36Z", "type": "commit"}, {"oid": "42cfc007eb7e2486a4ef11aa3fcf34264cbd20a7", "url": "https://github.com/elastic/elasticsearch/commit/42cfc007eb7e2486a4ef11aa3fcf34264cbd20a7", "message": "Remove logging", "committedDate": "2020-09-02T14:35:48Z", "type": "commit"}, {"oid": "8c173711811b8577eb8360b3b84caf4f23b66796", "url": "https://github.com/elastic/elasticsearch/commit/8c173711811b8577eb8360b3b84caf4f23b66796", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-02T15:07:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1ODIxNg==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r482958216", "bodyText": "We talked about the auto create index logic and the allow auto create template flag yesterday. This logic is invoked from the bulk action and is evaluated on the coordinating node. While the decision the auto create an index or data stream is done in the AutoCreateAction on the elected master node.\nThe reason why we decided to make the decision to auto create an index or data stream in the AutoCreateAction and not here is, because if for some reason a node is lacking behind and doesn't have all the templates then an index is auto created instead of a data stream. Fixing the erroneous situation requires a lot of manual work, hence we moved making this decision to elected master node.\nThe question is whether the auto create index check (with this enhancement) should be moved to AutoCreateAction class too, so that all the decisions are made on the elected master node.\nI'm currently thinking the following:\n\nIn the case a coordinating node doesn't have the latest action.auto_create_index setting values or composable index templates then the worst that can happen is a new few write requests fail, because the target index doesn't exist.\nCurrently if action.auto_create_index is set to false then also data streams are no longer created. I think this is a bug, because the name of the setting implies auto creation of indices only.\nIf this logic is moved to AutoCreateAction class then the overhead is that remote requests are made to the elected master node in the case target indices don't exist. Most requests will index into an existing data stream or index, so the cost is acceptable.\nI remember that we eventually want to deprecate and remove the action.auto_create_index setting, but I may be mistaken.\n\nIf we are going to remove action.auto_create_index with the new allow auto create template flag then I think let's keep it here? And then maybe also add logic here that if a non existing index matches with a template that auto create data streams then checking the action.auto_create_index setting should be ignored?", "author": "martijnvg", "createdAt": "2020-09-03T12:59:45Z", "path": "server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java", "diffHunk": "@@ -67,6 +62,13 @@ public boolean shouldAutoCreate(String index, ClusterState state) {\n         if (resolver.hasIndexAbstraction(index, state)) {\n             return false;\n         }\n+\n+        // Templates can override the AUTO_CREATE_INDEX_SETTING setting\n+        final ComposableIndexTemplate template = findTemplate(index, state.metadata());\n+        if (template != null && template.getAllowAutoCreate()) {", "originalCommit": "8c173711811b8577eb8360b3b84caf4f23b66796", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85abcbc721a3cf86a8d8b325e5b6038ed89dd98f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java b/server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java\nindex 4d40f55fe3e..a276061f646 100644\n--- a/server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java\n+++ b/server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java\n\n@@ -65,7 +65,7 @@ public final class AutoCreateIndex {\n \n         // Templates can override the AUTO_CREATE_INDEX_SETTING setting\n         final ComposableIndexTemplate template = findTemplate(index, state.metadata());\n-        if (template != null && template.getAllowAutoCreate()) {\n+        if (template != null && template.getAllowAutoCreate() != null && template.getAllowAutoCreate()) {\n             return true;\n         }\n \n"}}, {"oid": "9a1e10ac9900dcf2d4dceffbdf8370af77ba43ae", "url": "https://github.com/elastic/elasticsearch/commit/9a1e10ac9900dcf2d4dceffbdf8370af77ba43ae", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-04T09:12:37Z", "type": "commit"}, {"oid": "961cfcf792de36cc688c87271cc4c2dcba2e3c65", "url": "https://github.com/elastic/elasticsearch/commit/961cfcf792de36cc688c87271cc4c2dcba2e3c65", "message": "Use AutoCreateIndex in AutoCreateAction", "committedDate": "2020-09-09T11:17:54Z", "type": "commit"}, {"oid": "41fdcb3907271c7e5a91cefcad157c39ebd0c7bf", "url": "https://github.com/elastic/elasticsearch/commit/41fdcb3907271c7e5a91cefcad157c39ebd0c7bf", "message": "Imports", "committedDate": "2020-09-10T14:42:01Z", "type": "commit"}, {"oid": "22280339dd25212af07115449f448fa1aa678a63", "url": "https://github.com/elastic/elasticsearch/commit/22280339dd25212af07115449f448fa1aa678a63", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-10T14:42:06Z", "type": "commit"}, {"oid": "b00297e5e09ab23a05a2058cabe5c1e86d3864a0", "url": "https://github.com/elastic/elasticsearch/commit/b00297e5e09ab23a05a2058cabe5c1e86d3864a0", "message": "Fixes", "committedDate": "2020-09-14T10:57:15Z", "type": "commit"}, {"oid": "ad5021def7e035c361494bb73cd7d3b5e441b892", "url": "https://github.com/elastic/elasticsearch/commit/ad5021def7e035c361494bb73cd7d3b5e441b892", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-14T12:20:04Z", "type": "commit"}, {"oid": "ad9e699cb813c432dd4265569eb8605fae779aca", "url": "https://github.com/elastic/elasticsearch/commit/ad9e699cb813c432dd4265569eb8605fae779aca", "message": "Fix compile error", "committedDate": "2020-09-14T12:42:23Z", "type": "commit"}, {"oid": "c42e3cebae0183aee5c03ea4e80423ce2d961d5b", "url": "https://github.com/elastic/elasticsearch/commit/c42e3cebae0183aee5c03ea4e80423ce2d961d5b", "message": "Tweak ComposableIndexTemplate serialisation under code changes land in 7.10", "committedDate": "2020-09-14T15:39:32Z", "type": "commit"}, {"oid": "6a689b26b0a7f7dbb3769457f6158055d993077c", "url": "https://github.com/elastic/elasticsearch/commit/6a689b26b0a7f7dbb3769457f6158055d993077c", "message": "Fix auto create index bug", "committedDate": "2020-09-16T10:23:00Z", "type": "commit"}, {"oid": "f81a5106a9e1d4ca4bf5e431fb33b42741e7729b", "url": "https://github.com/elastic/elasticsearch/commit/f81a5106a9e1d4ca4bf5e431fb33b42741e7729b", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-16T12:31:40Z", "type": "commit"}, {"oid": "2d54d2c6c79b007a813d367c901fb49dae35921e", "url": "https://github.com/elastic/elasticsearch/commit/2d54d2c6c79b007a813d367c901fb49dae35921e", "message": "Test fix", "committedDate": "2020-09-16T12:54:14Z", "type": "commit"}, {"oid": "85abcbc721a3cf86a8d8b325e5b6038ed89dd98f", "url": "https://github.com/elastic/elasticsearch/commit/85abcbc721a3cf86a8d8b325e5b6038ed89dd98f", "message": "Handle null Boolean", "committedDate": "2020-09-16T13:47:01Z", "type": "commit"}, {"oid": "eb299a0936449cac3e4758b508b03f65cd9c3b00", "url": "https://github.com/elastic/elasticsearch/commit/eb299a0936449cac3e4758b508b03f65cd9c3b00", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-18T11:00:01Z", "type": "commit"}, {"oid": "a3e3691da0d2ac82251d99884035afcd5d3624b3", "url": "https://github.com/elastic/elasticsearch/commit/a3e3691da0d2ac82251d99884035afcd5d3624b3", "message": "Imports", "committedDate": "2020-09-18T11:08:29Z", "type": "commit"}, {"oid": "9421140135bd9c79a1be9f0cc740b3ad670669e8", "url": "https://github.com/elastic/elasticsearch/commit/9421140135bd9c79a1be9f0cc740b3ad670669e8", "message": "Checkstyle", "committedDate": "2020-09-18T15:13:19Z", "type": "commit"}, {"oid": "ebb42d4a1085279f04e5f82c41db574a56bd871c", "url": "https://github.com/elastic/elasticsearch/commit/ebb42d4a1085279f04e5f82c41db574a56bd871c", "message": "Tweaks", "committedDate": "2020-09-18T15:26:59Z", "type": "commit"}, {"oid": "a93cfb2b10fdc41b3d746e0e5fcb2a88e673d664", "url": "https://github.com/elastic/elasticsearch/commit/a93cfb2b10fdc41b3d746e0e5fcb2a88e673d664", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-18T15:50:33Z", "type": "commit"}, {"oid": "bfe8c8c4666ef56323d504747fd296e796121ccb", "url": "https://github.com/elastic/elasticsearch/commit/bfe8c8c4666ef56323d504747fd296e796121ccb", "message": "Post-merge fix", "committedDate": "2020-09-18T15:52:14Z", "type": "commit"}, {"oid": "2694fb2776c4f710f9159bf85c5412d6ff535af9", "url": "https://github.com/elastic/elasticsearch/commit/2694fb2776c4f710f9159bf85c5412d6ff535af9", "message": "Update synthentics template to add allow_auto_create", "committedDate": "2020-09-18T16:03:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTE5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r491155195", "bodyText": "Typically, we set this to V.8_0_0 until after we backport", "author": "jaymode", "createdAt": "2020-09-18T19:41:51Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java", "diffHunk": "@@ -132,6 +138,11 @@ public ComposableIndexTemplate(StreamInput in) throws IOException {\n         } else {\n             this.dataStreamTemplate = null;\n         }\n+        if (in.getVersion().after(Version.V_7_10_0)) {", "originalCommit": "2694fb2776c4f710f9159bf85c5412d6ff535af9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5Mzk1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r492593957", "bodyText": "Ah, I wasn't sure what the convention was here. Does that mean that the backport has V_7_10_0 and master has V_8_0_0, or do we also adjust master?", "author": "pugnascotia", "createdAt": "2020-09-22T09:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "39abb3816a8884705ae406a2b6be9fc33d9a7217", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java b/server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java\nindex f5934c2ddd1..cb23d51ab67 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java\n\n@@ -138,7 +138,7 @@ public class ComposableIndexTemplate extends AbstractDiffable<ComposableIndexTem\n         } else {\n             this.dataStreamTemplate = null;\n         }\n-        if (in.getVersion().after(Version.V_7_10_0)) {\n+        if (in.getVersion().after(Version.V_8_0_0)) {\n             this.allowAutoCreate = in.readOptionalBoolean();\n         } else {\n             this.allowAutoCreate = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NzAzNA==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r491157034", "bodyText": "we probably don't want this change to go in?", "author": "jaymode", "createdAt": "2020-09-18T19:46:11Z", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java", "diffHunk": "@@ -430,7 +430,7 @@ private boolean hasTemplate(final ClusterState clusterState, final String templa\n \n     // FIXME this should use the IndexTemplateMetadataUpgrader\n     private void putTemplate(String template, String source, ActionListener<AcknowledgedResponse> listener) {\n-        logger.debug(\"installing template [{}]\", template);\n+        logger.warn(\"installing template [{}]\", template);", "originalCommit": "2694fb2776c4f710f9159bf85c5412d6ff535af9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5NDAzOA==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r492594038", "bodyText": "Indeed \ud83d\udc4d", "author": "pugnascotia", "createdAt": "2020-09-22T09:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NzAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "4b9034aea89ed39b671e4f59f608001edcb91f31", "chunk": "diff --git a/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java\nindex 90e77963857..131bda16cd5 100644\n--- a/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java\n+++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java\n\n@@ -430,7 +430,7 @@ public class LocalExporter extends Exporter implements ClusterStateListener, Cle\n \n     // FIXME this should use the IndexTemplateMetadataUpgrader\n     private void putTemplate(String template, String source, ActionListener<AcknowledgedResponse> listener) {\n-        logger.warn(\"installing template [{}]\", template);\n+        logger.debug(\"installing template [{}]\", template);\n \n         PutIndexTemplateRequest request = new PutIndexTemplateRequest(template).source(source, XContentType.JSON);\n         assert !Thread.currentThread().isInterrupted() : \"current thread has been interrupted before putting index template!!!\";\n"}}, {"oid": "5d5eeb440e6d6e7ce3c5b0c41b8f31e0c4e63340", "url": "https://github.com/elastic/elasticsearch/commit/5d5eeb440e6d6e7ce3c5b0c41b8f31e0c4e63340", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-22T09:20:38Z", "type": "commit"}, {"oid": "39abb3816a8884705ae406a2b6be9fc33d9a7217", "url": "https://github.com/elastic/elasticsearch/commit/39abb3816a8884705ae406a2b6be9fc33d9a7217", "message": "Address review feedback", "committedDate": "2020-09-22T09:23:16Z", "type": "commit"}, {"oid": "4b9034aea89ed39b671e4f59f608001edcb91f31", "url": "https://github.com/elastic/elasticsearch/commit/4b9034aea89ed39b671e4f59f608001edcb91f31", "message": "Address review feedback", "committedDate": "2020-09-22T09:45:17Z", "type": "commit"}, {"oid": "ce8c2ed9d123df5406af2ff6ec493722da1a31bd", "url": "https://github.com/elastic/elasticsearch/commit/ce8c2ed9d123df5406af2ff6ec493722da1a31bd", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-22T11:11:56Z", "type": "commit"}, {"oid": "2e9a4c716a8e432701e42a0c8065dccccc2bf030", "url": "https://github.com/elastic/elasticsearch/commit/2e9a4c716a8e432701e42a0c8065dccccc2bf030", "message": "Specify the same version for ser/deser\n\nHonestly, what was I thinking.", "committedDate": "2020-09-22T13:48:46Z", "type": "commit"}, {"oid": "d5db431bf8c31c06f28565011149289e203b2fe0", "url": "https://github.com/elastic/elasticsearch/commit/d5db431bf8c31c06f28565011149289e203b2fe0", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-24T11:47:39Z", "type": "commit"}, {"oid": "1d0770988fe672838603ce7aa7e15263e1dd90e4", "url": "https://github.com/elastic/elasticsearch/commit/1d0770988fe672838603ce7aa7e15263e1dd90e4", "message": "Fix stupid typo", "committedDate": "2020-09-24T11:47:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMjMzNw==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r494432337", "bodyText": "I think we need to do a little more for this to be a full feature and only fall back to the setting if the value is null in the template:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (template != null && template.getAllowAutoCreate() != null && template.getAllowAutoCreate()) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (template != null && template.getAllowAutoCreate() != null) {\n          \n          \n            \n                        if (template.getAllowAutoCreate()) {\n          \n          \n            \n                            return true;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            // explicit false overrides AUTO_CREATE_INDEX_SETTING\n          \n          \n            \n                            throw new IndexNotFoundException(\"composable template [\" + template.getIndexPatterns() + \"] forbids index auto creation\");\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "author": "jaymode", "createdAt": "2020-09-24T15:56:58Z", "path": "server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java", "diffHunk": "@@ -67,6 +62,13 @@ public boolean shouldAutoCreate(String index, ClusterState state) {\n         if (resolver.hasIndexAbstraction(index, state)) {\n             return false;\n         }\n+\n+        // Templates can override the AUTO_CREATE_INDEX_SETTING setting\n+        final ComposableIndexTemplate template = findTemplate(index, state.metadata());\n+        if (template != null && template.getAllowAutoCreate() != null && template.getAllowAutoCreate()) {\n+            return true;\n+        }", "originalCommit": "1d0770988fe672838603ce7aa7e15263e1dd90e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93e2440d98bd07edfc7dd22ec8f85ebdb805858f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java b/server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java\nindex 3f823bc6fb3..379afc046ed 100644\n--- a/server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java\n+++ b/server/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java\n\n@@ -65,8 +65,13 @@ public final class AutoCreateIndex {\n \n         // Templates can override the AUTO_CREATE_INDEX_SETTING setting\n         final ComposableIndexTemplate template = findTemplate(index, state.metadata());\n-        if (template != null && template.getAllowAutoCreate() != null && template.getAllowAutoCreate()) {\n-            return true;\n+        if (template != null && template.getAllowAutoCreate() != null) {\n+            if (template.getAllowAutoCreate()) {\n+                return true;\n+            } else {\n+                // An explicit false value overrides AUTO_CREATE_INDEX_SETTING\n+                throw new IndexNotFoundException(\"composable template \" + template.indexPatterns() + \" forbids index auto creation\");\n+            }\n         }\n \n         // One volatile read, so that all checks are done against the same instance:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0ODU0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r494648543", "bodyText": "Can we define a constant for this version? It's less error-prone to only have to update it in one place when backporting.", "author": "gwbrown", "createdAt": "2020-09-24T22:37:55Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java", "diffHunk": "@@ -132,6 +138,11 @@ public ComposableIndexTemplate(StreamInput in) throws IOException {\n         } else {\n             this.dataStreamTemplate = null;\n         }\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {", "originalCommit": "1d0770988fe672838603ce7aa7e15263e1dd90e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93e2440d98bd07edfc7dd22ec8f85ebdb805858f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java b/server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java\nindex c34b52db935..28efd3e0593 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/ComposableIndexTemplate.java\n\n@@ -138,7 +140,7 @@ public class ComposableIndexTemplate extends AbstractDiffable<ComposableIndexTem\n         } else {\n             this.dataStreamTemplate = null;\n         }\n-        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+        if (in.getVersion().onOrAfter(ALLOW_AUTO_CREATE_VERSION)) {\n             this.allowAutoCreate = in.readOptionalBoolean();\n         } else {\n             this.allowAutoCreate = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY1NDI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r494654250", "bodyText": "Could you add a positive version of this test case where the template has allow_auto_create=null, but action.auto_create_index is a pattern that allows creation of the index? This might be paranoia, but unit tests are cheap.", "author": "gwbrown", "createdAt": "2020-09-24T22:55:21Z", "path": "server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java", "diffHunk": "@@ -191,6 +192,86 @@ public void testUpdate() {\n         assertThat(autoCreateIndex.getAutoCreate().getExpressions().get(0).v1(), equalTo(\"logs-*\"));\n     }\n \n+    /**\n+     * Check that if a template matches the index to be created, but that template does not have a value\n+     * for the allow_auto_create setting at all, then it does not cause the auto-create logic to trip over\n+     * on a null value.\n+     */\n+    public void testCanHandleNullAutoCreateSettingInTemplate() {", "originalCommit": "1d0770988fe672838603ce7aa7e15263e1dd90e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "93e2440d98bd07edfc7dd22ec8f85ebdb805858f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java b/server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java\nindex 16e08fabb3f..13a4b23e59c 100644\n--- a/server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java\n\n@@ -192,6 +192,33 @@ public class AutoCreateIndexTests extends ESTestCase {\n         assertThat(autoCreateIndex.getAutoCreate().getExpressions().get(0).v1(), equalTo(\"logs-*\"));\n     }\n \n+    /**\n+     * Check that if a template matches the index to be created, but that template does not have a value\n+     * for the allow_auto_create setting at all, and the auto_create_index setting matches the index\n+     * to be created, then the null in the template does not override the auto_create_index logic and the\n+     * index can be created.\n+     */\n+    public void testNullAllowAutoCreateInTemplateDoesNotOverrideMatchingAutoCreateIndexSetting() {\n+        String randomIndex = randomAlphaOfLengthBetween(2, 10);\n+        final ComposableIndexTemplate template = new ComposableIndexTemplate(\n+            List.of(randomIndex.charAt(0) + \"*\"),\n+            null,\n+            List.of(),\n+            null,\n+            null,\n+            Map.of(),\n+            null,\n+            null\n+        );\n+\n+        final Metadata metadata = Metadata.builder().indexTemplates(Map.of(\"test_template\", template)).build();\n+        final ClusterState clusterState = ClusterState.builder(buildClusterState()).metadata(metadata).build();\n+\n+        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), randomIndex.charAt(0) + \"*\").build();\n+        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n+        assertTrue(autoCreateIndex.shouldAutoCreate(randomIndex, clusterState));\n+    }\n+\n     /**\n      * Check that if a template matches the index to be created, but that template does not have a value\n      * for the allow_auto_create setting at all, then it does not cause the auto-create logic to trip over\n"}}, {"oid": "36b9ca8580be9b2ce68ca40454569b5c39e3886e", "url": "https://github.com/elastic/elasticsearch/commit/36b9ca8580be9b2ce68ca40454569b5c39e3886e", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-09-28T10:32:40Z", "type": "commit"}, {"oid": "93e2440d98bd07edfc7dd22ec8f85ebdb805858f", "url": "https://github.com/elastic/elasticsearch/commit/93e2440d98bd07edfc7dd22ec8f85ebdb805858f", "message": "Address review comments", "committedDate": "2020-09-28T11:08:25Z", "type": "commit"}, {"oid": "4a2e64c85312130a20c2e97cc40e14a58fcde260", "url": "https://github.com/elastic/elasticsearch/commit/4a2e64c85312130a20c2e97cc40e14a58fcde260", "message": "Increment some template versions due to the new setting", "committedDate": "2020-09-28T11:15:25Z", "type": "commit"}, {"oid": "82ad6e46e7268ad7b11da38cfd00eded94fc4fde", "url": "https://github.com/elastic/elasticsearch/commit/82ad6e46e7268ad7b11da38cfd00eded94fc4fde", "message": "Add Java REST tests for auto-creating indices", "committedDate": "2020-09-28T13:02:29Z", "type": "commit"}, {"oid": "6022b3c35e5996b1cfe6a44db64dde824ea86292", "url": "https://github.com/elastic/elasticsearch/commit/6022b3c35e5996b1cfe6a44db64dde824ea86292", "message": "Checkstyle", "committedDate": "2020-09-28T13:53:12Z", "type": "commit"}, {"oid": "41b2fc6588c839ff91af7e354eed44726295f523", "url": "https://github.com/elastic/elasticsearch/commit/41b2fc6588c839ff91af7e354eed44726295f523", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-10-12T13:26:28Z", "type": "commit"}, {"oid": "6127caf1c0fc37feaca3f3bc6446df140bd77150", "url": "https://github.com/elastic/elasticsearch/commit/6127caf1c0fc37feaca3f3bc6446df140bd77150", "message": "Update component template docs", "committedDate": "2020-10-12T13:33:45Z", "type": "commit"}, {"oid": "9d6b6cf42129484a50ef9d08a267f8df3d116e03", "url": "https://github.com/elastic/elasticsearch/commit/9d6b6cf42129484a50ef9d08a267f8df3d116e03", "message": "Checkstyle", "committedDate": "2020-10-12T14:14:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r503520499", "bodyText": "How do data streams interact with auto-creation and does it make sense to have both on the same template? I know that you can create a data stream via \"auto-creation\", but I'm not sure exactly how that's implemented.", "author": "gwbrown", "createdAt": "2020-10-12T20:38:07Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/history/SnapshotLifecycleTemplateRegistry.java", "diffHunk": "@@ -37,8 +37,9 @@\n     // version 1: initial\n     // version 2: converted to hidden index\n     // version 3: templates moved to composable templates\n-    // version 4: add `allow_auto_create` setting\n-    public static final int INDEX_TEMPLATE_VERSION = 4;\n+    // version 4:converted data stream\n+    // version 5: add `allow_auto_create` setting", "originalCommit": "41b2fc6588c839ff91af7e354eed44726295f523", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODA3NA==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r503808074", "bodyText": "According to the AutoCreateAction class, data streams are always auto-created. I'm not sure whether that answers your question?", "author": "pugnascotia", "createdAt": "2020-10-13T09:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2ODk1NA==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r504068954", "bodyText": "Thanks - in that case, my question is: Is there a benefit to setting allow_auto_create: true on a data stream template? If not, we should revert the changes to this template and not increase the template version.\nWhat happens if a data stream template has allow_auto_create: false? Today, it looks like the data stream will be auto-created anyway. Is that the behavior we want? @martijnvg, you've already commented on this PR - any input on that point?", "author": "gwbrown", "createdAt": "2020-10-13T15:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0OTYyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r504549625", "bodyText": "This is an interesting point. Right now, there's no benefit to adding allow_auto_create to data stream templates. However, it seems to me that the user experience would be more consistent if the auto-creation of data streams was also subject to the auto_create_index setting. Then an administrator could stop their users from e.g. creating a slew of logs-*-* data streams.\n@martijnvg I believe you added the code to auto-create data streams - what is your view here?", "author": "pugnascotia", "createdAt": "2020-10-14T09:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNjY5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r507716692", "bodyText": "I've changed AutoCreateAction so that data streams are now also subject to auto_create_index, and added an integration test. I tried reworking the exist auto-create IT, but as it's under qa the data stream API wasn't available.", "author": "pugnascotia", "createdAt": "2020-10-19T12:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDQ5OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c0394e4da0efacbf0d3eaee45de6f47e5ff784f2", "url": "https://github.com/elastic/elasticsearch/commit/c0394e4da0efacbf0d3eaee45de6f47e5ff784f2", "message": "Docs tweak", "committedDate": "2020-10-13T09:17:22Z", "type": "commit"}, {"oid": "cbfbb9826f3bc362b2158a50f88a8b027b8a3685", "url": "https://github.com/elastic/elasticsearch/commit/cbfbb9826f3bc362b2158a50f88a8b027b8a3685", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-10-13T09:17:37Z", "type": "commit"}, {"oid": "383d6ffc3d9c5272f3747ef9596327327f6e3941", "url": "https://github.com/elastic/elasticsearch/commit/383d6ffc3d9c5272f3747ef9596327327f6e3941", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-10-19T09:47:56Z", "type": "commit"}, {"oid": "61ab28ecaaed2915c7b1002434575d9410cd3bca", "url": "https://github.com/elastic/elasticsearch/commit/61ab28ecaaed2915c7b1002434575d9410cd3bca", "message": "Make data stream subject to auto_create_index", "committedDate": "2020-10-19T10:35:00Z", "type": "commit"}, {"oid": "6c4c81769993bfc544e0909cf6484e98f4f7a740", "url": "https://github.com/elastic/elasticsearch/commit/6c4c81769993bfc544e0909cf6484e98f4f7a740", "message": "Add tests for auto-creating data streams", "committedDate": "2020-10-19T12:44:31Z", "type": "commit"}, {"oid": "ed692c7d595e6caa7d3e7a807b49825eda4a14bf", "url": "https://github.com/elastic/elasticsearch/commit/ed692c7d595e6caa7d3e7a807b49825eda4a14bf", "message": "Formatting", "committedDate": "2020-10-19T13:23:34Z", "type": "commit"}, {"oid": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc", "url": "https://github.com/elastic/elasticsearch/commit/e8617b681aa8b33ad79a0a4dd53086f253e3d5fc", "message": "Merge branch 'master' into 20640-auto-create-templates", "committedDate": "2020-10-19T18:52:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r508060737", "bodyText": "Moving this call here has the side effect of also applying action.auto_create_index to data streams if the template does not have allow_auto_create set, which I don't think is what we wanted to do.", "author": "gwbrown", "createdAt": "2020-10-19T21:03:24Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java", "diffHunk": "@@ -116,25 +116,25 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n+                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n+\n+                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n+                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);", "originalCommit": "e8617b681aa8b33ad79a0a4dd53086f253e3d5fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDA4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r508374087", "bodyText": "I must have misunderstood - to clarify, were you expecting that all I was going to do was apply the value of allow_auto_create to data streams, as opposed to also making them subject to auto_create_index? I'm happy to implement either, it just seemed strange that a user could control auto-creation for indices, but not for data streams. @jaymode what's your feeling here?", "author": "pugnascotia", "createdAt": "2020-10-20T10:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5OTA4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r508699083", "bodyText": "At this point, making action.auto_create_index apply to data streams would be a breaking change, no? With allow_auto_create, that's a new feature so we can define the behavior however we want, but we have to be more careful with behavior we've already shipped.", "author": "gwbrown", "createdAt": "2020-10-20T17:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzODA3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509138076", "bodyText": "Ah, that's a good point. I'll rework the code.", "author": "pugnascotia", "createdAt": "2020-10-21T09:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5Mzg5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509193896", "bodyText": "I've reworked AutoCreateAction - what do you think about the docs for allow_auto_create, is it worth discussing the difference between indices and data streams w.r.t the new template setting?", "author": "pugnascotia", "createdAt": "2020-10-21T11:16:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM2NTk4OA==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509365988", "bodyText": "I think the fact that action.auto_create_index controls whether data streams can be auto created can be seen as a bug. Something that we missed during development. I would prefer that action.auto_create_index doesn't affect the auto creation of data streams.", "author": "martijnvg", "createdAt": "2020-10-21T15:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzMjcxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r509932719", "bodyText": "Never mind my comment. The PR is doing what I suggested in my comment.", "author": "martijnvg", "createdAt": "2020-10-22T07:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDczNw=="}], "type": "inlineReview", "revised_code": {"commit": "0482f5cb8f89c067293766f584c9ed5f20767ffa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java\nindex 00966f007c1..46334a1ff81 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java\n\n@@ -116,25 +116,36 @@ public final class AutoCreateAction extends ActionType<CreateIndexResponse> {\n \n                 @Override\n                 public ClusterState execute(ClusterState currentState) throws Exception {\n-                    final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n-\n-                    // This will throw an exception if the index or data stream does not exist and creating it is prohibited.\n-                    final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);\n+                    final ComposableIndexTemplate template = resolveTemplate(request, currentState.metadata());\n \n-                    if (shouldAutoCreate == false) {\n-                        // The index or data stream already exists.\n-                        return currentState;\n-                    }\n+                    if (template != null && template.getDataStreamTemplate() != null) {\n+                        // This expression only evaluates to true when the argument is non-null and false\n+                        if (Boolean.FALSE.equals(template.getAllowAutoCreate())) {\n+                            throw new IndexNotFoundException(\n+                                \"composable template \" + template.indexPatterns() + \" forbids index auto creation\"\n+                            );\n+                        }\n \n-                    final DataStreamTemplate dataStreamTemplate = resolveAutoCreateDataStream(request, currentState.metadata());\n-                    if (dataStreamTemplate != null) {\n                         CreateDataStreamClusterStateUpdateRequest createRequest = new CreateDataStreamClusterStateUpdateRequest(\n-                            request.index(), request.masterNodeTimeout(), request.timeout());\n-                        ClusterState clusterState =  metadataCreateDataStreamService.createDataStream(createRequest, currentState);\n+                            request.index(),\n+                            request.masterNodeTimeout(),\n+                            request.timeout()\n+                        );\n+                        ClusterState clusterState = metadataCreateDataStreamService.createDataStream(createRequest, currentState);\n                         indexNameRef.set(clusterState.metadata().dataStreams().get(request.index()).getIndices().get(0).getName());\n                         return clusterState;\n                     } else {\n+                        String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index());\n                         indexNameRef.set(indexName);\n+\n+                        // This will throw an exception if the index does not exist and creating it is prohibited\n+                        final boolean shouldAutoCreate = autoCreateIndex.shouldAutoCreate(indexName, currentState);\n+\n+                        if (shouldAutoCreate == false) {\n+                            // The index already exists.\n+                            return currentState;\n+                        }\n+\n                         CreateIndexClusterStateUpdateRequest updateRequest =\n                             new CreateIndexClusterStateUpdateRequest(request.cause(), indexName, request.index())\n                                 .ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout());\n"}}, {"oid": "4f051af5c0842e944de6e315b12433621e3d143b", "url": "https://github.com/elastic/elasticsearch/commit/4f051af5c0842e944de6e315b12433621e3d143b", "message": "Fix max/min aggs for unsigned_long (#63904)\n\nMax and min aggs were producing wrong results for unsigned_long field\r\nif field was indexed. If field is indexed for max/min aggs instead of\r\nfield data, we use values from indexed Points, values of which\r\nare derived using method pointReaderIfPossible. Before\r\nUnsignedLongFieldType#pointReaderIfPossible was incorrectly\r\nproducing values, as it failed to shift them back to original\r\nvalues.\r\n\r\nThis patch fixes method pointReaderIfPossible to produce\r\ncorrect original values.\r\n\r\nRelates to #60050", "committedDate": "2020-10-21T11:10:28Z", "type": "commit"}, {"oid": "44d7d6619a680ab72ebb7493e436e2a9451f2b6b", "url": "https://github.com/elastic/elasticsearch/commit/44d7d6619a680ab72ebb7493e436e2a9451f2b6b", "message": "Add APM configuration index to Kibana system indices (#63756)\n\n* Add APM index to Kibana system indices, making it \r\naccessible through the _kibana endpoint and giving it the\r\nsame access privileges as the other Kibana system indices.\r\n* Parameterize kibana system index tests by index name", "committedDate": "2020-10-21T11:10:28Z", "type": "commit"}, {"oid": "e145266634a3e9f44d4888165bb5e3dcddca411b", "url": "https://github.com/elastic/elasticsearch/commit/e145266634a3e9f44d4888165bb5e3dcddca411b", "message": "[ML] Rename evaluation metric result fields to value (#63809)\n\nRenames data frame analytics _evaluate API results as follows:\r\n\r\n  - per class accuracy renamed from `accuracy` to `value`\r\n  - per class precision renamed from `precision` to `value`\r\n  - per class recall renamed from `recall` to `value`\r\n  - auc_roc `score` renamed to `value` for both outlier detection and classification", "committedDate": "2020-10-21T11:10:28Z", "type": "commit"}, {"oid": "9e8221a0ef4c1543184ace665be92ea23410ca12", "url": "https://github.com/elastic/elasticsearch/commit/9e8221a0ef4c1543184ace665be92ea23410ca12", "message": "Update gradle wrapper to Gradle 6.7 (#62386)\n\n- Ignore Memory Manager thread in Gradle thread filter\r\n- Update gradle wrapper to 6.7 GA release", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "dd7a22fcabb764f123074ede7e0ea258e196513a", "url": "https://github.com/elastic/elasticsearch/commit/dd7a22fcabb764f123074ede7e0ea258e196513a", "message": "Add snapshot shard size based test in DiskThresholdDeciderTests (#63546)\n\nThis commit adds a test in DiskThresholdDeciderTests that verifies\r\n the allocation of a snapshot recovery source based shard in the \r\nsituation where the snapshot shard size was successfully provided \r\nby the SnapshotInfoService introduced in #61906 and when the \r\nservice failed to provide the size.\r\n\r\nRelates #61906", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "cfca1e4186933d99d9b0cbd028d8ee05fac827ce", "url": "https://github.com/elastic/elasticsearch/commit/cfca1e4186933d99d9b0cbd028d8ee05fac827ce", "message": "DocumentMapperParser to no longer depend directly on MapperService (#63850)\n\nThis change was mainly triggered by the need for `MapperService` to pass `this` during its constructor when creating `DocumentMapperParser`. Also, `MapperService` is carried around in some places where only a subset of it is needed.\r\n\r\nWith this change we rather carry around the components that are strictly needed, in a couple of cases functions that `MapperService` provides, which helps clarifying the dependency between `DocumentMapperParser`, `DocumentMapper` and `MapperService`, as well as removing the need for MapperService to pass `this` to `DocumentMapperParser`", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "85c0b5483d79bff8768d5140527d2d3dfaf52074", "url": "https://github.com/elastic/elasticsearch/commit/85c0b5483d79bff8768d5140527d2d3dfaf52074", "message": "Composite aggregation must check live docs when the index is sorted (#63864)\n\nThis change ensures that the live docs are checked in the composite aggregator\r\nwhen the index is sorted.", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "0204f0af7a9f0544420d96be865fad39869747bd", "url": "https://github.com/elastic/elasticsearch/commit/0204f0af7a9f0544420d96be865fad39869747bd", "message": "Fix build tools integTest failure after vault update (#63914)", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "eae0eaac87f06dcf903203d570d2bec2ab73237a", "url": "https://github.com/elastic/elasticsearch/commit/eae0eaac87f06dcf903203d570d2bec2ab73237a", "message": "Upgrade to lucene-8.7.0-snapshot-72d8528c3a6 (#63912)", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "d9aea1c83beee93cbfa667b7e9e998d42cd268f8", "url": "https://github.com/elastic/elasticsearch/commit/d9aea1c83beee93cbfa667b7e9e998d42cd268f8", "message": "[ML] fix inference binary classification predication label and feature importance (#63688)\n\nWhen calculating feature importance, the leaf values directly correlate the value of the importance.\r\n\r\nConsequently, positive leaf values -> positive feature importance\r\n\r\nnegative leaf values -> negative feature importance.\r\n\r\nIt follows that for binary classification, this is done such that the importance relates to the leaf values, which relate directly to the \"probability of class 1\".\r\n\r\nSo, the feature importance calculated is always for the importance as it relates to class 1.\r\n\r\nThe inverse is the importance as it relates to class 0.", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "13ef3ab3ea4c63e2235ad70c32a80d367c2a8d29", "url": "https://github.com/elastic/elasticsearch/commit/13ef3ab3ea4c63e2235ad70c32a80d367c2a8d29", "message": "Move clone snapshot API page. (#63902)", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "4bdc32227c2c178fbe7ccf38f74669667e7463e7", "url": "https://github.com/elastic/elasticsearch/commit/4bdc32227c2c178fbe7ccf38f74669667e7463e7", "message": "Remove two redundant DocumentMapper methods (#63922)\n\nDocumentMapper exposes field types and object mappers through specific getter methods, that call the corresponding getters exposed by MappingLookup. MappingLookup is though exposed directly by DocumentMapper, hence there is no need for additional methods other than the one to retrieve the mapping lookup object.", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "c3d1981021cb59698bf6893be92d31af78bd2bee", "url": "https://github.com/elastic/elasticsearch/commit/c3d1981021cb59698bf6893be92d31af78bd2bee", "message": "make sure AggregationTest creates reduced aggregations. (#63931)\n\nThe test calls InternalAggregationTestCase#createTestInstanceForXContent() instead of InternalAggregationTestCase#createTestInstance() (The method needs to become public)", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "ae05665c4c4d4ccaab18f8a5fecd81c755b8b66f", "url": "https://github.com/elastic/elasticsearch/commit/ae05665c4c4d4ccaab18f8a5fecd81c755b8b66f", "message": "[ML] adding new flag exclude_generated that removes generated fields in GET config APIs (#63899)\n\nWhen exporting and cloning ml configurations in a cluster it can be\r\nfrustrating to remove all the fields that were generated by\r\nthe plugin. Especially as the number of these fields change\r\nfrom version to version.\r\n\r\nThis flag, exclude_generated, allows the GET config APIs to return\r\nconfigurations with these generated fields removed.\r\n\r\nAPIs supporting this flag: \r\n- GET _ml/anomaly_detection/<job_id>\r\n- GET _ml/datafeeds/<datafeed_id>\r\n- GET _ml/data_frame/analytics/<analytics_id>\r\n\r\nThe following fields are not returned in the objects:\r\n\r\n- any field that is not user settable (e.g. version, create_time)\r\n- any field that is a calculated default value (e.g. datafeed chunking_config)\r\n- any field that is automatically set via another Elastic stack process (e.g. anomaly job custom_settings.created_by)\r\n\r\nrelates to #63055", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "2cd82f2b46c7e88e368df03102f85ac81a827c65", "url": "https://github.com/elastic/elasticsearch/commit/2cd82f2b46c7e88e368df03102f85ac81a827c65", "message": "[Transform] add new exclude_generated flag to GET transform (#63093)\n\nThis adds a new flag `exclude_generated` for GET transform API.\r\n\r\nThis flag is useful for when a transform needs to be cloned within a cluster or exported/imported between clusters.\r\n\r\nIt removes certain fields that are not able to be set via the PUT api (e.g. version, create_time).\r\n\r\nrelates https://github.com/elastic/elasticsearch/issues/63055", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "8bf7976f50b4acf4ea64a994cc1bca14b8d482ab", "url": "https://github.com/elastic/elasticsearch/commit/8bf7976f50b4acf4ea64a994cc1bca14b8d482ab", "message": "Gradle - compatible REST test plugin - adopt bwc artifact (#63629)\n\nUse newly exposed bwc:minor / checkout artifact as opposed to coding directly against\r\nthe output of a bwc:minor checkout task. The copy test/api tasks have been updated\r\nto lazily compute the subset of the files from the configuration. This is to facilitate\r\ncompatible testing which needs to filter singular bwc:minor checkout in core/x-pack/project\r\nset of files. By default (unless explicitly requested) the copy test/api tasks will continue\r\nto use the full fileTree of the configuration.\r\n\r\nrelated: #63173", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "b4cc55c82232dbebd7ae90383d02c2c6fe5377bf", "url": "https://github.com/elastic/elasticsearch/commit/b4cc55c82232dbebd7ae90383d02c2c6fe5377bf", "message": "Remove documentMapperParser method from MapperService (#63938)\n\nMapperService allows to retrieve its internal DocumentMapperParser instance. Such method is only used in tests, and always to parse mappings which is already exposed by MapperService through a specific parse method.\r\n\r\nThis commit removes the getter for DocumentMapperParser from MapperService in favour of calling MapperService#parse", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "1545c0aa78ee8c5cf2ff87ae3e171f05a65ba4e9", "url": "https://github.com/elastic/elasticsearch/commit/1545c0aa78ee8c5cf2ff87ae3e171f05a65ba4e9", "message": "Minor FieldTypeLookup tweaks (#63944)\n\nRemove the default constructor, make the class final and adjust visibility of its methods: if the class is package private, it makes little sense to have public methods.", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "55172b6bc0a2c072f9b80a3fc595429ec35ea36d", "url": "https://github.com/elastic/elasticsearch/commit/55172b6bc0a2c072f9b80a3fc595429ec35ea36d", "message": "[Transform] add support for unsigned_long data type (#63940)\n\nadd support for unsigned_long, which required a change in\r\nwriting out integer results properly, because coerce is not\r\nsupported for unsigned_long\r\n\r\nfixes #63871", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "9a9b96b30b9fa89810a81c4e087898aba1842951", "url": "https://github.com/elastic/elasticsearch/commit/9a9b96b30b9fa89810a81c4e087898aba1842951", "message": "Make agg test less confusing (#63952)\n\nWe have an `@After` annotated method in `AggregatorTestCase` that cleans\r\nup releasibles. But it was `private`! Confusingly, it seemed to be\r\nworking! I'm not sure why. This makes it public which is a little more\r\nsensible.", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "7db889c79cd9462ae7fa611753d154f84cac08b7", "url": "https://github.com/elastic/elasticsearch/commit/7db889c79cd9462ae7fa611753d154f84cac08b7", "message": "Add a test for regex usage to runtime fields (#63951)\n\nNow that we've got regexes enabled by default (#63029) this adds a test\r\nto runtime fields just to make sure that it works with regexes. It does,\r\nbut this adds a test to make sure it continues to work.", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "70f758e198ca0ffa52ae1d7779906ad5c510f778", "url": "https://github.com/elastic/elasticsearch/commit/70f758e198ca0ffa52ae1d7779906ad5c510f778", "message": "[ML] Extend default evaluation metrics to all available (#63939)\n\nThis commit extends the set of default metrics for the\r\ndata frame analytics evaluation API to all available metrics.\r\nThe motivation is that if the user skips setting an explicit\r\nset of metrics, they get most of the evaluation offering.", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "1376afd82871398bf0ad5c0f56824e6d3352cebc", "url": "https://github.com/elastic/elasticsearch/commit/1376afd82871398bf0ad5c0f56824e6d3352cebc", "message": "geo_point runtime field implementation (#63164)\n\nRun time field that emits geo points from lat/lon values.", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "dec6ea937fe0d2c6687f77b0eef2a7f4c39ed5ee", "url": "https://github.com/elastic/elasticsearch/commit/dec6ea937fe0d2c6687f77b0eef2a7f4c39ed5ee", "message": "Mute CoreValuesSourceTypeTests.testDatePrepareRoundingWithDocs (#63970)\n\nRelates to #63969", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "00b0bdff6a396656286abbc54525241cb89291f7", "url": "https://github.com/elastic/elasticsearch/commit/00b0bdff6a396656286abbc54525241cb89291f7", "message": "Handle range query edge case (#63397)\n\nCurrently when searching with an empty string as lower bound for a range query\r\non text-based fields we return all documents when 'gte' is used (including the\r\nlower bound) but no documents when 'gt' is used. This might seem\r\ncounterintuitive since every value should be greate than the empty string. \r\nThe bug has been fixed in Lucene and this PR adds a test for assuring we observe\r\nthe fixed behaviour on searches now.\r\n\r\nCloses #63386", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "473975c4d57f5795c61ed0fb53f8771c0517ddb6", "url": "https://github.com/elastic/elasticsearch/commit/473975c4d57f5795c61ed0fb53f8771c0517ddb6", "message": "Mute DatafeedJobsIT#testDatafeedTimingStats_DatafeedRecreated (#63974)\n\nRelates to #63973", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "f45ea3068cd65b6f5b12d7b9de90e1bb19620fbc", "url": "https://github.com/elastic/elasticsearch/commit/f45ea3068cd65b6f5b12d7b9de90e1bb19620fbc", "message": "Mute FieldSortIT#testCastDate (#63972)\n\nRelates to #63719", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "0482f5cb8f89c067293766f584c9ed5f20767ffa", "url": "https://github.com/elastic/elasticsearch/commit/0482f5cb8f89c067293766f584c9ed5f20767ffa", "message": "Only subject data streams to allow_auto_create, not auto_create_index", "committedDate": "2020-10-21T11:10:29Z", "type": "commit"}, {"oid": "421679d02c310eb2e6f5f7498b000f8deb404f55", "url": "https://github.com/elastic/elasticsearch/commit/421679d02c310eb2e6f5f7498b000f8deb404f55", "message": "Merge remote-tracking branch 'upstream/master' into 20640-auto-create-templates", "committedDate": "2020-10-21T11:11:23Z", "type": "commit"}, {"oid": "6bd545661d510b7846627124e495ceb6ce65dbbd", "url": "https://github.com/elastic/elasticsearch/commit/6bd545661d510b7846627124e495ceb6ce65dbbd", "message": "Tweak docs\r\n\r\nMention data streams in the docs changes.\n\nCo-authored-by: Gordon Brown <arcsech@gmail.com>", "committedDate": "2020-10-22T08:29:59Z", "type": "commit"}, {"oid": "0fd0f84799db02991f1fa84342288354d32fdc03", "url": "https://github.com/elastic/elasticsearch/commit/0fd0f84799db02991f1fa84342288354d32fdc03", "message": "Merge branch 'master' into 20640-auto-create-templates", "committedDate": "2020-10-22T09:49:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3NzMwNg==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r511877306", "bodyText": "Maybe distribution/archives/integ-test-zip is a better place for this test class? Given that it doesn't extend HttpSmokeTestCase and this test class doesn't seem to require to start a node with special settings or plugins.", "author": "martijnvg", "createdAt": "2020-10-26T11:01:39Z", "path": "qa/smoke-test-http/src/test/java/org/elasticsearch/http/AutoCreateIndexIT.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.http;\n+\n+import org.elasticsearch.action.support.AutoCreateIndex;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class AutoCreateIndexIT extends ESRestTestCase {", "originalCommit": "0fd0f84799db02991f1fa84342288354d32fdc03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkyNDQ1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61858#discussion_r511924456", "bodyText": "I'm honestly not sure. I tried before to find out where is the \"correct\" place for REST tests, but couldn't get a clear answer. I think I'll leave this test alone and start an email thread about it. I feel that it ought to be easier to say where a REST test should live.", "author": "pugnascotia", "createdAt": "2020-10-26T12:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3NzMwNg=="}], "type": "inlineReview", "revised_code": null}]}