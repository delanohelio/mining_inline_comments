{"pr_number": 63134, "pr_title": "[ML] optimize delete expired snapshots", "pr_createdAt": "2020-10-01T15:42:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63134", "timeline": [{"oid": "5cc7c45473510b57140232293977ba8628567bd1", "url": "https://github.com/elastic/elasticsearch/commit/5cc7c45473510b57140232293977ba8628567bd1", "message": "[ML] optimize delete expired snapshots\n\nWhen deleting expired snapshots, we do an individual delete action per snapshot per job.\n\nWe should instead gather the expired snapshots and delete them in a single call.\n\nThis commit achieves this and a side-effect is there is less audit log spam on nightly cleanup\n\ncloses https://github.com/elastic/elasticsearch/issues/62875", "committedDate": "2020-10-01T15:41:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Mjk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498362997", "bodyText": "Maybe we could just say {0} expired model snapshots deleted (where {0} is how many).  We could be deleting 24 per day if they've been changed to be every hour, and that would make the message very verbose.  The fact that these are the ones that have expired should be OK for the audit log.", "author": "droberts195", "createdAt": "2020-10-01T16:12:24Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "diffHunk": "@@ -144,6 +144,7 @@\n     public static final String JOB_AUDIT_SNAPSHOT_STORED = \"Job model snapshot with id [{0}] stored\";\n     public static final String JOB_AUDIT_REVERTED = \"Job model snapshot reverted to ''{0}''\";\n     public static final String JOB_AUDIT_SNAPSHOT_DELETED = \"Model snapshot [{0}] with description ''{1}'' deleted\";\n+    public static final String JOB_AUDIT_SNAPSHOTS_DELETED = \"Model snapshots {0} with descriptions {1} deleted\";", "originalCommit": "5cc7c45473510b57140232293977ba8628567bd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3MTQxMg==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498371412", "bodyText": "@droberts195 diggin' it", "author": "benwtrent", "createdAt": "2020-10-01T16:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Mjk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "371c61b1821acb06e02fd0d748167b8a38e5f140", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java\nindex 222aafbfde4..ad885062665 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java\n\n@@ -144,7 +144,7 @@ public final class Messages {\n     public static final String JOB_AUDIT_SNAPSHOT_STORED = \"Job model snapshot with id [{0}] stored\";\n     public static final String JOB_AUDIT_REVERTED = \"Job model snapshot reverted to ''{0}''\";\n     public static final String JOB_AUDIT_SNAPSHOT_DELETED = \"Model snapshot [{0}] with description ''{1}'' deleted\";\n-    public static final String JOB_AUDIT_SNAPSHOTS_DELETED = \"Model snapshots {0} with descriptions {1} deleted\";\n+    public static final String JOB_AUDIT_SNAPSHOTS_DELETED = \"[{0}] expired model snapshots deleted\";\n     public static final String JOB_AUDIT_FILTER_UPDATED_ON_PROCESS = \"Updated filter [{0}] in running process\";\n     public static final String JOB_AUDIT_CALENDARS_UPDATED_ON_PROCESS = \"Updated calendars in running process\";\n     public static final String JOB_AUDIT_MEMORY_STATUS_SOFT_LIMIT = \"Job memory status changed to soft_limit; memory pruning will now be \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Nzk0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498367942", "bodyText": "Even though the audit message can be made less verbose, the debug should continue to list every ID and description, just in case something ever goes wrong with which snapshots are getting deleted.", "author": "droberts195", "createdAt": "2020-10-01T16:20:26Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java", "diffHunk": "@@ -208,65 +219,53 @@ public void onResponse(SearchResponse searchResponse) {\n                             } while (timestampMs >= nextToKeepMs);\n                             continue;\n                         }\n-                        JobSnapshotId idPair = new JobSnapshotId(\n-                            stringFieldValueOrNull(hit, Job.ID.getPreferredName()),\n-                            stringFieldValueOrNull(hit, ModelSnapshotField.SNAPSHOT_ID.getPreferredName()));\n+                        String jobId = stringFieldValueOrNull(hit, Job.ID.getPreferredName());\n+                        String snapshotId = stringFieldValueOrNull(hit, ModelSnapshotField.SNAPSHOT_ID.getPreferredName());\n \n-                        if (idPair.hasNullValue() == false) {\n-                            snapshotIds.add(idPair);\n+                        if (jobId != null && snapshotId != null) {\n+                            jobResultsProvider.getModelSnapshot(\n+                                jobId,\n+                                snapshotId,\n+                                // We are safe to grab this snapshot as the query is by DOC ID and we already filtered out the\n+                                // currently active snapshot earlier in the call chain\n+                                (shots) -> snapshots.add(shots.result),\n+                                (failure) ->\n+                                    LOGGER.warn(new ParameterizedMessage(\"[{}] failed to find snapshot [{}]\", jobId, snapshotId), failure)\n+                                );\n                         }\n                     }\n-                    deleteModelSnapshots(new VolatileCursorIterator<>(snapshotIds), listener);\n+                    deleteModelSnapshots(snapshots, jobId, listener);\n                 } catch (Exception e) {\n                     onFailure(e);\n                 }\n             }\n \n             @Override\n             public void onFailure(Exception e) {\n-                listener.onFailure(new ElasticsearchException(\"[\" + jobId +  \"] Search for expired snapshots failed\", e));\n+                listener.onFailure(new ElasticsearchException(\"[{}] Search for expired snapshots failed\", e, jobId));\n             }\n         };\n     }\n \n-    private void deleteModelSnapshots(Iterator<JobSnapshotId> modelSnapshotIterator, ActionListener<Boolean> listener) {\n-        if (modelSnapshotIterator.hasNext() == false) {\n+    private void deleteModelSnapshots(List<ModelSnapshot> modelSnapshots, String jobId, ActionListener<Boolean> listener) {\n+        if (modelSnapshots.isEmpty()) {\n             listener.onResponse(true);\n             return;\n         }\n-        JobSnapshotId idPair = modelSnapshotIterator.next();\n-        DeleteModelSnapshotAction.Request deleteSnapshotRequest =\n-            new DeleteModelSnapshotAction.Request(idPair.jobId, idPair.snapshotId);\n-        deleteSnapshotRequest.setParentTask(getParentTaskId());\n-        client.execute(DeleteModelSnapshotAction.INSTANCE, deleteSnapshotRequest, new ActionListener<>() {\n-                @Override\n-                public void onResponse(AcknowledgedResponse response) {\n-                    try {\n-                        deleteModelSnapshots(modelSnapshotIterator, listener);\n-                    } catch (Exception e) {\n-                        onFailure(e);\n-                    }\n-                }\n+        JobDataDeleter deleter = new JobDataDeleter(client, jobId);\n+        deleter.deleteModelSnapshots(modelSnapshots, ActionListener.wrap(\n+            bulkResponse -> {\n+                String msg = Messages.getMessage(\n+                    Messages.JOB_AUDIT_SNAPSHOTS_DELETED,\n+                    modelSnapshots.stream().map(ModelSnapshot::getSnapshotId),\n+                    modelSnapshots.stream().map(ModelSnapshot::getDescription));\n \n-                @Override\n-                public void onFailure(Exception e) {\n-                    listener.onFailure(new ElasticsearchException(\"[\" + idPair.jobId +  \"] Failed to delete snapshot [\"\n-                            + idPair.snapshotId + \"]\", e));\n-                }\n-            });\n+                auditor.info(jobId, msg);\n+                LOGGER.debug(() -> new ParameterizedMessage(\"[{}] {}\", jobId, msg));", "originalCommit": "5cc7c45473510b57140232293977ba8628567bd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3MTU0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498371543", "bodyText": "no doubt!", "author": "benwtrent", "createdAt": "2020-10-01T16:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Nzk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "371c61b1821acb06e02fd0d748167b8a38e5f140", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\nindex 84be7721485..a46452bf3af 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\n\n@@ -255,13 +256,13 @@ public class ExpiredModelSnapshotsRemover extends AbstractExpiredJobDataRemover\n         JobDataDeleter deleter = new JobDataDeleter(client, jobId);\n         deleter.deleteModelSnapshots(modelSnapshots, ActionListener.wrap(\n             bulkResponse -> {\n-                String msg = Messages.getMessage(\n-                    Messages.JOB_AUDIT_SNAPSHOTS_DELETED,\n-                    modelSnapshots.stream().map(ModelSnapshot::getSnapshotId),\n-                    modelSnapshots.stream().map(ModelSnapshot::getDescription));\n-\n-                auditor.info(jobId, msg);\n-                LOGGER.debug(() -> new ParameterizedMessage(\"[{}] {}\", jobId, msg));\n+                auditor.info(jobId, Messages.getMessage(Messages.JOB_AUDIT_SNAPSHOTS_DELETED, modelSnapshots.size()));\n+                LOGGER.debug(() -> new ParameterizedMessage(\n+                    \"[{}] deleted model snapshots {} with descriptions {}\",\n+                    jobId,\n+                    modelSnapshots.stream().map(ModelSnapshot::getSnapshotId).collect(Collectors.toList()),\n+                    modelSnapshots.stream().map(ModelSnapshot::getDescription).collect(Collectors.toList())\n+                ));\n                 listener.onResponse(true);\n             },\n             listener::onFailure\n"}}, {"oid": "371c61b1821acb06e02fd0d748167b8a38e5f140", "url": "https://github.com/elastic/elasticsearch/commit/371c61b1821acb06e02fd0d748167b8a38e5f140", "message": "addressing pr comments", "committedDate": "2020-10-01T16:41:02Z", "type": "commit"}, {"oid": "474670fc65225d9fb2efd4648d763f9b3749030c", "url": "https://github.com/elastic/elasticsearch/commit/474670fc65225d9fb2efd4648d763f9b3749030c", "message": "addressing asynchronicity and reducing number of queries", "committedDate": "2020-10-01T18:13:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMDk1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498430956", "bodyText": "I am not sure how this test ever passed?\nI think it is meant to test the mixed retention between two jobs, but it appears to give the same job two of the snapshots?\nI adjusted it it for the new format so that this other old snapshot is part of job-2", "author": "benwtrent", "createdAt": "2020-10-01T18:14:58Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java", "diffHunk": "@@ -97,35 +112,44 @@ public void testRemove_GivenJobsWithMixedRetentionPolicies() {\n         Date oneDayAgo = new Date(now.getTime() - TimeValue.timeValueDays(1).getMillis());\n         SearchHit snapshot1_1 = createModelSnapshotQueryHit(\"job-1\", \"fresh-snapshot\", oneDayAgo);\n         searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshot1_1)));\n+        SearchHit snapshot2_1 = createModelSnapshotQueryHit(\"job-2\", \"fresh-snapshot\", oneDayAgo);\n+        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshot2_1)));\n \n         // It needs to be strictly more than 7 days before the most recent snapshot, hence the extra millisecond\n         Date eightDaysAndOneMsAgo = new Date(now.getTime() - TimeValue.timeValueDays(8).getMillis() - 1);\n-        SearchHit snapshotToBeDeleted = createModelSnapshotQueryHit(\"job-1\", \"old-snapshot\", eightDaysAndOneMsAgo);\n-\n-\n-        searchResponses.add(\n-            AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshotToBeDeleted)));\n-\n-        SearchHit snapshot2_1 = createModelSnapshotQueryHit(\"job-1\", \"snapshots-1_1\", eightDaysAndOneMsAgo);", "originalCommit": "474670fc65225d9fb2efd4648d763f9b3749030c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NjI3NA==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498786274", "bodyText": "It's one of those tests where due to the complexity of the mocking it's very unclear what production code is being tested, and what's really being tested is the test itself.\nThe idea before was that job two had a 17 day retention period, so the search we were doing directly against the results index (without calling the model snapshots endpoint) would return nothing.  This was represented by searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.emptyList())); in the old code.", "author": "droberts195", "createdAt": "2020-10-02T12:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMDk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNzk5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498817993", "bodyText": "@droberts195 I will update my mocks so that for job-2 nothing is returned", "author": "benwtrent", "createdAt": "2020-10-02T13:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMDk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1bdb6b53d8731b3890add41e0efe8e2cacc24e74", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\nindex 6e2585c9336..bf3aa6e1849 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\n\n@@ -120,16 +120,13 @@ public class ExpiredModelSnapshotsRemoverTests extends ESTestCase {\n         Map<String, List<ModelSnapshot>> snapshotResponses = new HashMap<>();\n         snapshotResponses.put(\"job-1\",\n             Arrays.asList(\n-                createModelSnapshot(\"job-1\", \"active\", oneDayAgo),\n-                createModelSnapshot(\"job-1\", \"fresh-snapshot\", oneDayAgo),\n+                // Keeping active as its expiration is not known. We can assume \"worst case\" and verify it is not removed\n+                createModelSnapshot(\"job-1\", \"active\", eightDaysAndOneMsAgo),\n                 createModelSnapshot(\"job-1\", \"old-snapshot\", eightDaysAndOneMsAgo)\n                 ));\n-        snapshotResponses.put(\"job-2\",\n-            Arrays.asList(\n-                createModelSnapshot(\"job-2\", \"active\", oneDayAgo),\n-                createModelSnapshot(\"job-2\", \"snapshots-1_1\", eightDaysAndOneMsAgo),\n-                createModelSnapshot(\"job-2\", \"fresh-snapshot\", oneDayAgo)\n-            ));\n+        // Retention days for job-2 is 17 days, consequently, its query should return anything as we don't ask for snapshots\n+        // created AFTER 17 days ago\n+        snapshotResponses.put(\"job-2\", Collections.emptyList());\n         givenClientRequestsSucceed(searchResponses, snapshotResponses);\n         createExpiredModelSnapshotsRemover(jobs.iterator()).remove(1.0f, listener, () -> false);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMTQ2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498431461", "bodyText": "I was running into async callback hell. But, if we just use the underlying modelSnapshots request from here and then filter out the assigned snapshot later, we reduce the number of calls and it flows more cleanly.", "author": "benwtrent", "createdAt": "2020-10-01T18:15:51Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java", "diffHunk": "@@ -157,116 +163,84 @@ protected void removeDataBefore(\n             listener.onResponse(true);\n             return;\n         }\n-        LOGGER.debug(\"Considering model snapshots of job [{}] that have a timestamp before [{}] for removal\", job.getId(), cutoffEpochMs);\n-\n-        SearchRequest searchRequest = new SearchRequest();\n-        searchRequest.indices(AnomalyDetectorsIndex.jobResultsAliasedName(job.getId()));\n-\n-        QueryBuilder activeSnapshotFilter = QueryBuilders.termQuery(\n-            ModelSnapshotField.SNAPSHOT_ID.getPreferredName(), job.getModelSnapshotId());\n-        QueryBuilder retainFilter = QueryBuilders.termQuery(ModelSnapshot.RETAIN.getPreferredName(), true);\n-        QueryBuilder query = createQuery(job.getId(), cutoffEpochMs)\n-            .filter(QueryBuilders.existsQuery(ModelSnapshot.SNAPSHOT_DOC_COUNT.getPreferredName()))\n-            .mustNot(activeSnapshotFilter)\n-            .mustNot(retainFilter);\n-\n-        SearchSourceBuilder source = new SearchSourceBuilder();\n-        source.query(query);\n-        source.size(MODEL_SNAPSHOT_SEARCH_SIZE);\n-        source.sort(ModelSnapshot.TIMESTAMP.getPreferredName());\n-        source.fetchSource(false);\n-        source.docValueField(Job.ID.getPreferredName(), null);\n-        source.docValueField(ModelSnapshotField.SNAPSHOT_ID.getPreferredName(), null);\n-        source.docValueField(ModelSnapshot.TIMESTAMP.getPreferredName(), \"epoch_millis\");\n-        searchRequest.source(source);\n-        searchRequest.setParentTask(getParentTaskId());\n+        LOGGER.debug(() -> new ParameterizedMessage(\n+            \"Considering model snapshots of job [{}] that have a timestamp before [{}] for removal\",\n+            job.getId(),\n+            cutoffEpochMs));\n \n         long deleteAllBeforeMs = (job.getModelSnapshotRetentionDays() == null)\n             ? 0 : latestTimeMs - TimeValue.timeValueDays(job.getModelSnapshotRetentionDays()).getMillis();\n-        client.execute(SearchAction.INSTANCE, searchRequest, new ThreadedActionListener<>(LOGGER, threadPool,\n-            MachineLearning.UTILITY_THREAD_POOL_NAME, expiredSnapshotsListener(job.getId(), deleteAllBeforeMs, listener), false));\n+        ActionListener<QueryPage<ModelSnapshot>> snapshotsListener = expiredSnapshotsListener(job, deleteAllBeforeMs, listener);\n+        jobResultsProvider.modelSnapshots(job.getId(),", "originalCommit": "474670fc65225d9fb2efd4648d763f9b3749030c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49e5ea913b96a603b584809f7f9ef4a61933bd47", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\nindex 97f91f39875..dc7d1afbb01 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\n\n@@ -193,7 +193,8 @@ public class ExpiredModelSnapshotsRemover extends AbstractExpiredJobDataRemover\n                 try {\n                     List<ModelSnapshot> snapshots = new ArrayList<>();\n                     for (ModelSnapshot snapshot: searchResponse.results()) {\n-                        if (snapshot.getSnapshotId().equals(job.getModelSnapshotId())) {\n+                        // We don't want to delete the currently used snapshot or a snapshot marked to be retained\n+                        if (snapshot.getSnapshotId().equals(job.getModelSnapshotId()) || snapshot.isRetain()) {\n                             continue;\n                         }\n                         if (snapshot.getTimestamp() == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMTYyMA==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498431620", "bodyText": "Since we have to worry about the currently used model snapshot.", "author": "benwtrent", "createdAt": "2020-10-01T18:16:08Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java", "diffHunk": "@@ -157,116 +163,84 @@ protected void removeDataBefore(\n             listener.onResponse(true);\n             return;\n         }\n-        LOGGER.debug(\"Considering model snapshots of job [{}] that have a timestamp before [{}] for removal\", job.getId(), cutoffEpochMs);\n-\n-        SearchRequest searchRequest = new SearchRequest();\n-        searchRequest.indices(AnomalyDetectorsIndex.jobResultsAliasedName(job.getId()));\n-\n-        QueryBuilder activeSnapshotFilter = QueryBuilders.termQuery(\n-            ModelSnapshotField.SNAPSHOT_ID.getPreferredName(), job.getModelSnapshotId());\n-        QueryBuilder retainFilter = QueryBuilders.termQuery(ModelSnapshot.RETAIN.getPreferredName(), true);\n-        QueryBuilder query = createQuery(job.getId(), cutoffEpochMs)\n-            .filter(QueryBuilders.existsQuery(ModelSnapshot.SNAPSHOT_DOC_COUNT.getPreferredName()))\n-            .mustNot(activeSnapshotFilter)\n-            .mustNot(retainFilter);\n-\n-        SearchSourceBuilder source = new SearchSourceBuilder();\n-        source.query(query);\n-        source.size(MODEL_SNAPSHOT_SEARCH_SIZE);\n-        source.sort(ModelSnapshot.TIMESTAMP.getPreferredName());\n-        source.fetchSource(false);\n-        source.docValueField(Job.ID.getPreferredName(), null);\n-        source.docValueField(ModelSnapshotField.SNAPSHOT_ID.getPreferredName(), null);\n-        source.docValueField(ModelSnapshot.TIMESTAMP.getPreferredName(), \"epoch_millis\");\n-        searchRequest.source(source);\n-        searchRequest.setParentTask(getParentTaskId());\n+        LOGGER.debug(() -> new ParameterizedMessage(\n+            \"Considering model snapshots of job [{}] that have a timestamp before [{}] for removal\",\n+            job.getId(),\n+            cutoffEpochMs));\n \n         long deleteAllBeforeMs = (job.getModelSnapshotRetentionDays() == null)\n             ? 0 : latestTimeMs - TimeValue.timeValueDays(job.getModelSnapshotRetentionDays()).getMillis();\n-        client.execute(SearchAction.INSTANCE, searchRequest, new ThreadedActionListener<>(LOGGER, threadPool,\n-            MachineLearning.UTILITY_THREAD_POOL_NAME, expiredSnapshotsListener(job.getId(), deleteAllBeforeMs, listener), false));\n+        ActionListener<QueryPage<ModelSnapshot>> snapshotsListener = expiredSnapshotsListener(job, deleteAllBeforeMs, listener);\n+        jobResultsProvider.modelSnapshots(job.getId(),\n+            0,\n+            MODEL_SNAPSHOT_SEARCH_SIZE,\n+            null,\n+            String.valueOf(cutoffEpochMs),\n+            ModelSnapshot.TIMESTAMP.getPreferredName(),\n+            true,\n+            null,\n+            snapshotsListener::onResponse,\n+            snapshotsListener::onFailure);\n     }\n \n-    private ActionListener<SearchResponse> expiredSnapshotsListener(String jobId, long deleteAllBeforeMs,\n-                                                                    ActionListener<Boolean> listener) {\n+    private ActionListener<QueryPage<ModelSnapshot>> expiredSnapshotsListener(Job job,\n+                                                                              long deleteAllBeforeMs,\n+                                                                              ActionListener<Boolean> listener) {\n         return new ActionListener<>() {\n             @Override\n-            public void onResponse(SearchResponse searchResponse) {\n+            public void onResponse(QueryPage<ModelSnapshot> searchResponse) {\n                 long nextToKeepMs = deleteAllBeforeMs;\n                 try {\n-                    List<JobSnapshotId> snapshotIds = new ArrayList<>();\n-                    for (SearchHit hit : searchResponse.getHits()) {\n-                        String timestamp = stringFieldValueOrNull(hit, ModelSnapshot.TIMESTAMP.getPreferredName());\n-                        if (timestamp == null) {\n-                            LOGGER.warn(\"Model snapshot document [{}] has a null timestamp field\", hit.getId());\n+                    List<ModelSnapshot> snapshots = new ArrayList<>();\n+                    for (ModelSnapshot snapshot: searchResponse.results()) {\n+                        if (snapshot.getSnapshotId().equals(job.getModelSnapshotId())) {", "originalCommit": "474670fc65225d9fb2efd4648d763f9b3749030c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49e5ea913b96a603b584809f7f9ef4a61933bd47", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\nindex 97f91f39875..dc7d1afbb01 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java\n\n@@ -193,7 +193,8 @@ public class ExpiredModelSnapshotsRemover extends AbstractExpiredJobDataRemover\n                 try {\n                     List<ModelSnapshot> snapshots = new ArrayList<>();\n                     for (ModelSnapshot snapshot: searchResponse.results()) {\n-                        if (snapshot.getSnapshotId().equals(job.getModelSnapshotId())) {\n+                        // We don't want to delete the currently used snapshot or a snapshot marked to be retained\n+                        if (snapshot.getSnapshotId().equals(job.getModelSnapshotId()) || snapshot.isRetain()) {\n                             continue;\n                         }\n                         if (snapshot.getTimestamp() == null) {\n"}}, {"oid": "49e5ea913b96a603b584809f7f9ef4a61933bd47", "url": "https://github.com/elastic/elasticsearch/commit/49e5ea913b96a603b584809f7f9ef4a61933bd47", "message": "respect retain", "committedDate": "2020-10-02T11:41:03Z", "type": "commit"}, {"oid": "5f7028394ab807f5fe2764f2cd7944e5b85bd02e", "url": "https://github.com/elastic/elasticsearch/commit/5f7028394ab807f5fe2764f2cd7944e5b85bd02e", "message": "fixing sort order", "committedDate": "2020-10-02T12:00:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498792642", "bodyText": "The model snapshots function shouldn't be returning snapshots from one day ago because the retention period is 7 days and a cutoff was supplied in https://github.com/elastic/elasticsearch/pull/63134/files#diff-496e9b129f2db0ef429636501b6974baR178\nI think it's working because the thinning out functionality is ignoring the extra ones.  But I don't think the code path being tested here is the code path that would get executed in production with the configured settings.", "author": "droberts195", "createdAt": "2020-10-02T12:34:14Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java", "diffHunk": "@@ -97,35 +112,44 @@ public void testRemove_GivenJobsWithMixedRetentionPolicies() {\n         Date oneDayAgo = new Date(now.getTime() - TimeValue.timeValueDays(1).getMillis());\n         SearchHit snapshot1_1 = createModelSnapshotQueryHit(\"job-1\", \"fresh-snapshot\", oneDayAgo);\n         searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshot1_1)));\n+        SearchHit snapshot2_1 = createModelSnapshotQueryHit(\"job-2\", \"fresh-snapshot\", oneDayAgo);\n+        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshot2_1)));\n \n         // It needs to be strictly more than 7 days before the most recent snapshot, hence the extra millisecond\n         Date eightDaysAndOneMsAgo = new Date(now.getTime() - TimeValue.timeValueDays(8).getMillis() - 1);\n-        SearchHit snapshotToBeDeleted = createModelSnapshotQueryHit(\"job-1\", \"old-snapshot\", eightDaysAndOneMsAgo);\n-\n-\n-        searchResponses.add(\n-            AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshotToBeDeleted)));\n-\n-        SearchHit snapshot2_1 = createModelSnapshotQueryHit(\"job-1\", \"snapshots-1_1\", eightDaysAndOneMsAgo);\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshot2_1)));\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.emptyList()));\n-\n-        givenClientRequestsSucceed(searchResponses);\n+        Map<String, List<ModelSnapshot>> snapshotResponses = new HashMap<>();\n+        snapshotResponses.put(\"job-1\",\n+            Arrays.asList(\n+                createModelSnapshot(\"job-1\", \"active\", oneDayAgo),\n+                createModelSnapshot(\"job-1\", \"fresh-snapshot\", oneDayAgo),", "originalCommit": "5f7028394ab807f5fe2764f2cd7944e5b85bd02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxMTkyNg==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498811926", "bodyText": ". But I don't think the code path being tested here is the code path that would get executed in production with the configured settings.\n\nI understand. Including it is just a mocking mistake and the actual code path of \"return only things before this timestamp\" is not exercised. I could capture the query to check.\nBut I think the proof of this thing working is in the true integration tests (I will unmute the one you mentioned)", "author": "benwtrent", "createdAt": "2020-10-02T13:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODM5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498818395", "bodyText": "I will update the mocks\nBut I do think it is nice to test that active is not removed (since we are not filtering it in the query anylonger). I will make it 8days old for job-1. An admittedly rare case, but a good one to cover.", "author": "benwtrent", "createdAt": "2020-10-02T13:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NjM3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498846377", "bodyText": "Yes, it's good to test active.  Good idea to make that old enough that it would have been deleted.", "author": "droberts195", "createdAt": "2020-10-02T14:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1bdb6b53d8731b3890add41e0efe8e2cacc24e74", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\nindex 6e2585c9336..bf3aa6e1849 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\n\n@@ -120,16 +120,13 @@ public class ExpiredModelSnapshotsRemoverTests extends ESTestCase {\n         Map<String, List<ModelSnapshot>> snapshotResponses = new HashMap<>();\n         snapshotResponses.put(\"job-1\",\n             Arrays.asList(\n-                createModelSnapshot(\"job-1\", \"active\", oneDayAgo),\n-                createModelSnapshot(\"job-1\", \"fresh-snapshot\", oneDayAgo),\n+                // Keeping active as its expiration is not known. We can assume \"worst case\" and verify it is not removed\n+                createModelSnapshot(\"job-1\", \"active\", eightDaysAndOneMsAgo),\n                 createModelSnapshot(\"job-1\", \"old-snapshot\", eightDaysAndOneMsAgo)\n                 ));\n-        snapshotResponses.put(\"job-2\",\n-            Arrays.asList(\n-                createModelSnapshot(\"job-2\", \"active\", oneDayAgo),\n-                createModelSnapshot(\"job-2\", \"snapshots-1_1\", eightDaysAndOneMsAgo),\n-                createModelSnapshot(\"job-2\", \"fresh-snapshot\", oneDayAgo)\n-            ));\n+        // Retention days for job-2 is 17 days, consequently, its query should return anything as we don't ask for snapshots\n+        // created AFTER 17 days ago\n+        snapshotResponses.put(\"job-2\", Collections.emptyList());\n         givenClientRequestsSucceed(searchResponses, snapshotResponses);\n         createExpiredModelSnapshotsRemover(jobs.iterator()).remove(1.0f, listener, () -> false);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5Mjg3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498792877", "bodyText": "The model snapshots function shouldn't be returning snapshots from one or eight days ago because the retention period is 17 days and a cutoff was supplied in https://github.com/elastic/elasticsearch/pull/63134/files#diff-496e9b129f2db0ef429636501b6974baR178", "author": "droberts195", "createdAt": "2020-10-02T12:34:44Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java", "diffHunk": "@@ -97,35 +112,44 @@ public void testRemove_GivenJobsWithMixedRetentionPolicies() {\n         Date oneDayAgo = new Date(now.getTime() - TimeValue.timeValueDays(1).getMillis());\n         SearchHit snapshot1_1 = createModelSnapshotQueryHit(\"job-1\", \"fresh-snapshot\", oneDayAgo);\n         searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshot1_1)));\n+        SearchHit snapshot2_1 = createModelSnapshotQueryHit(\"job-2\", \"fresh-snapshot\", oneDayAgo);\n+        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshot2_1)));\n \n         // It needs to be strictly more than 7 days before the most recent snapshot, hence the extra millisecond\n         Date eightDaysAndOneMsAgo = new Date(now.getTime() - TimeValue.timeValueDays(8).getMillis() - 1);\n-        SearchHit snapshotToBeDeleted = createModelSnapshotQueryHit(\"job-1\", \"old-snapshot\", eightDaysAndOneMsAgo);\n-\n-\n-        searchResponses.add(\n-            AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshotToBeDeleted)));\n-\n-        SearchHit snapshot2_1 = createModelSnapshotQueryHit(\"job-1\", \"snapshots-1_1\", eightDaysAndOneMsAgo);\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.singletonList(snapshot2_1)));\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponseFromHits(Collections.emptyList()));\n-\n-        givenClientRequestsSucceed(searchResponses);\n+        Map<String, List<ModelSnapshot>> snapshotResponses = new HashMap<>();\n+        snapshotResponses.put(\"job-1\",\n+            Arrays.asList(\n+                createModelSnapshot(\"job-1\", \"active\", oneDayAgo),\n+                createModelSnapshot(\"job-1\", \"fresh-snapshot\", oneDayAgo),\n+                createModelSnapshot(\"job-1\", \"old-snapshot\", eightDaysAndOneMsAgo)\n+                ));\n+        snapshotResponses.put(\"job-2\",\n+            Arrays.asList(\n+                createModelSnapshot(\"job-2\", \"active\", oneDayAgo),\n+                createModelSnapshot(\"job-2\", \"snapshots-1_1\", eightDaysAndOneMsAgo),\n+                createModelSnapshot(\"job-2\", \"fresh-snapshot\", oneDayAgo)", "originalCommit": "5f7028394ab807f5fe2764f2cd7944e5b85bd02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxMjQ0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63134#discussion_r498812441", "bodyText": "OK, this is a mocking mistake. The change will not change the results of test.\nIt is nice to know though that even if the query is \"wrong\" that returns the snapshots, they are still not deleted :)", "author": "benwtrent", "createdAt": "2020-10-02T13:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5Mjg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1bdb6b53d8731b3890add41e0efe8e2cacc24e74", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\nindex 6e2585c9336..bf3aa6e1849 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\n\n@@ -120,16 +120,13 @@ public class ExpiredModelSnapshotsRemoverTests extends ESTestCase {\n         Map<String, List<ModelSnapshot>> snapshotResponses = new HashMap<>();\n         snapshotResponses.put(\"job-1\",\n             Arrays.asList(\n-                createModelSnapshot(\"job-1\", \"active\", oneDayAgo),\n-                createModelSnapshot(\"job-1\", \"fresh-snapshot\", oneDayAgo),\n+                // Keeping active as its expiration is not known. We can assume \"worst case\" and verify it is not removed\n+                createModelSnapshot(\"job-1\", \"active\", eightDaysAndOneMsAgo),\n                 createModelSnapshot(\"job-1\", \"old-snapshot\", eightDaysAndOneMsAgo)\n                 ));\n-        snapshotResponses.put(\"job-2\",\n-            Arrays.asList(\n-                createModelSnapshot(\"job-2\", \"active\", oneDayAgo),\n-                createModelSnapshot(\"job-2\", \"snapshots-1_1\", eightDaysAndOneMsAgo),\n-                createModelSnapshot(\"job-2\", \"fresh-snapshot\", oneDayAgo)\n-            ));\n+        // Retention days for job-2 is 17 days, consequently, its query should return anything as we don't ask for snapshots\n+        // created AFTER 17 days ago\n+        snapshotResponses.put(\"job-2\", Collections.emptyList());\n         givenClientRequestsSucceed(searchResponses, snapshotResponses);\n         createExpiredModelSnapshotsRemover(jobs.iterator()).remove(1.0f, listener, () -> false);\n \n"}}, {"oid": "1bdb6b53d8731b3890add41e0efe8e2cacc24e74", "url": "https://github.com/elastic/elasticsearch/commit/1bdb6b53d8731b3890add41e0efe8e2cacc24e74", "message": "adjusting tests", "committedDate": "2020-10-02T14:02:54Z", "type": "commit"}, {"oid": "f903c6a46ba7f68e5d3902ab24eba885c50f59a6", "url": "https://github.com/elastic/elasticsearch/commit/f903c6a46ba7f68e5d3902ab24eba885c50f59a6", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-fix-delete-log-spam", "committedDate": "2020-10-02T14:03:07Z", "type": "commit"}]}