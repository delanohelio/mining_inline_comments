{"pr_number": 56928, "pr_title": "Allow field mappers to retrieve fields from source.", "pr_createdAt": "2020-05-19T01:00:58Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56928", "timeline": [{"oid": "8ae330a1f075d50ee14e3e86fab75b1969778097", "url": "https://github.com/elastic/elasticsearch/commit/8ae330a1f075d50ee14e3e86fab75b1969778097", "message": "Introduce a method FieldMapper#lookupValues to retrieve fields from source.", "committedDate": "2020-05-19T02:04:22Z", "type": "forcePushed"}, {"oid": "66e6018004bc8a3c8735753806ba384c3d996284", "url": "https://github.com/elastic/elasticsearch/commit/66e6018004bc8a3c8735753806ba384c3d996284", "message": "Introduce a method FieldMapper#lookupValues to retrieve fields from source.", "committedDate": "2020-05-19T03:29:12Z", "type": "forcePushed"}, {"oid": "00e879dc48f1b95826db620bdcbf6f3b9c54bcaa", "url": "https://github.com/elastic/elasticsearch/commit/00e879dc48f1b95826db620bdcbf6f3b9c54bcaa", "message": "Introduce a method FieldMapper#lookupValues to retrieve fields from source.", "committedDate": "2020-05-19T03:54:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NjkzMw==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r427246933", "bodyText": "nit: I was wondering if we should use covariance here and anywhere we return Strings, like we do for other types.", "author": "javanna", "createdAt": "2020-05-19T12:01:56Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -187,6 +187,11 @@ public KeywordFieldMapper build(BuilderContext context) {\n         }\n     }\n \n+    @Override\n+    protected Object parseSourceValue(Object value) {", "originalCommit": "00e879dc48f1b95826db620bdcbf6f3b9c54bcaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMDE5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r427500199", "bodyText": "You do return a Number from NumberFieldMapper#parseValue. It feels like a good thing to do.", "author": "nik9000", "createdAt": "2020-05-19T18:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NjkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxODg4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428218886", "bodyText": "\ud83d\udc4d I agree that we should use the most specific type, had missed a couple classes here.\nA note that @javanna mentioned it could be helpful to return BytesRef here instead of String. I tried it out and found it simpler to use strings for now -- we can adjust it later if you end up using this API and need a change.", "author": "jtibshirani", "createdAt": "2020-05-20T18:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI0NjkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "fab49e7cf0b792bcb95e7e5ebfb3d6ce941c84d0", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java\nindex 2898c8fa9d1..7a9dcd14942 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java\n\n@@ -188,7 +188,7 @@ public final class KeywordFieldMapper extends FieldMapper {\n     }\n \n     @Override\n-    protected Object parseSourceValue(Object value) {\n+    protected String parseSourceValue(Object value) {\n         return value.toString();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMDgyNw==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r427500827", "bodyText": "Could add a space after :? I have trouble reading it as a ternary without for some reason!", "author": "nik9000", "createdAt": "2020-05-19T18:09:00Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/RangeType.java", "diffHunk": "@@ -619,14 +629,17 @@ public Object parseTo(RangeFieldMapper.RangeFieldType fieldType, XContentParser\n     public abstract Query withinQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n     public abstract Query containsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n     public abstract Query intersectsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo);\n-    public Object parse(Object value, boolean coerce) {\n-        return numberType.parse(value, coerce);\n-    }\n+\n     public Query rangeQuery(String field, boolean hasDocValues, Object from, Object to, boolean includeFrom, boolean includeTo,\n                             ShapeRelation relation, @Nullable ZoneId timeZone, @Nullable DateMathParser dateMathParser,\n                             QueryShardContext context) {\n-        Object lower = from == null ? minValue() : parse(from, false);\n-        Object upper = to == null ? maxValue() : parse(to, false);\n+        Object lower = from == null ? minValue() : parseValue(from, false, dateMathParser);\n+        Object upper = to == null ? maxValue() :parseValue(to, false, dateMathParser);", "originalCommit": "00e879dc48f1b95826db620bdcbf6f3b9c54bcaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNzYzNA==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428217634", "bodyText": "Oops, thanks. I actually opened #56976 to refactor RangeType separately -- once that's merged I'll rebase this PR on top of it.", "author": "jtibshirani", "createdAt": "2020-05-20T18:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwMDgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "fab49e7cf0b792bcb95e7e5ebfb3d6ce941c84d0", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/RangeType.java b/server/src/main/java/org/elasticsearch/index/mapper/RangeType.java\nindex b9499f6d672..61243a06c4a 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/RangeType.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/RangeType.java\n\n@@ -634,7 +634,7 @@ public enum RangeType {\n                             ShapeRelation relation, @Nullable ZoneId timeZone, @Nullable DateMathParser dateMathParser,\n                             QueryShardContext context) {\n         Object lower = from == null ? minValue() : parseValue(from, false, dateMathParser);\n-        Object upper = to == null ? maxValue() :parseValue(to, false, dateMathParser);\n+        Object upper = to == null ? maxValue() : parseValue(to, false, dateMathParser);\n         return createRangeQuery(field, hasDocValues, lower, upper, includeFrom, includeTo, relation);\n     }\n \n"}}, {"oid": "fab49e7cf0b792bcb95e7e5ebfb3d6ce941c84d0", "url": "https://github.com/elastic/elasticsearch/commit/fab49e7cf0b792bcb95e7e5ebfb3d6ce941c84d0", "message": "Convert murmur3 and token_count values to strings.", "committedDate": "2020-05-20T21:28:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3MDc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428770757", "bodyText": "Keywords shouldn't also consider ignore_above and the extraction from _source to happen with this value in mind?", "author": "astefan", "createdAt": "2020-05-21T16:34:07Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java", "diffHunk": "@@ -187,6 +187,11 @@ public KeywordFieldMapper build(BuilderContext context) {\n         }\n     }\n \n+    @Override\n+    protected String parseSourceValue(Object value) {\n+        return value.toString();", "originalCommit": "ce0e04f846ef95d65889aa5b95f748a6ff7c9df2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4NDQ1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428784452", "bodyText": "I'm planning to tackle ignore_above (and likely null_value too) in a follow-up PR.", "author": "jtibshirani", "createdAt": "2020-05-21T16:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3MDc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6216fd8621a439f6574cce9a034ccd0b767db85b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java\nindex 7a9dcd14942..400fbf02b0f 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java\n\n@@ -188,7 +188,7 @@ public final class KeywordFieldMapper extends FieldMapper {\n     }\n \n     @Override\n-    protected String parseSourceValue(Object value) {\n+    protected Object parseSourceValue(Object value) {\n         return value.toString();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3NzA1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428777059", "bodyText": "Really minor: all the indentations for the lines containing method calls in testLookupValues are inconsistent compared to the other methods in this class.", "author": "astefan", "createdAt": "2020-05-21T16:44:57Z", "path": "x-pack/plugin/mapper-constant-keyword/src/test/java/org/elasticsearch/xpack/constantkeyword/mapper/ConstantKeywordFieldMapperTests.java", "diffHunk": "@@ -127,4 +130,27 @@ public void testMeta() throws Exception {\n                 new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n         assertEquals(mapping3, mapper.mappingSource().toString());\n     }\n+\n+    public void testLookupValues() throws Exception {\n+        IndexService indexService = createIndex(\"test\");\n+        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n+            .startObject(\"properties\").startObject(\"field\").field(\"type\", \"constant_keyword\")", "originalCommit": "ce0e04f846ef95d65889aa5b95f748a6ff7c9df2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4NjEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428786102", "bodyText": "\ud83d\udc4d", "author": "jtibshirani", "createdAt": "2020-05-21T17:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3NzA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1ac1404bd28377107652bb7a81a21b4d24843bf", "chunk": "diff --git a/x-pack/plugin/mapper-constant-keyword/src/test/java/org/elasticsearch/xpack/constantkeyword/mapper/ConstantKeywordFieldMapperTests.java b/x-pack/plugin/mapper-constant-keyword/src/test/java/org/elasticsearch/xpack/constantkeyword/mapper/ConstantKeywordFieldMapperTests.java\nindex e2755a66197..b97f79b5940 100644\n--- a/x-pack/plugin/mapper-constant-keyword/src/test/java/org/elasticsearch/xpack/constantkeyword/mapper/ConstantKeywordFieldMapperTests.java\n+++ b/x-pack/plugin/mapper-constant-keyword/src/test/java/org/elasticsearch/xpack/constantkeyword/mapper/ConstantKeywordFieldMapperTests.java\n\n@@ -134,8 +134,8 @@ public class ConstantKeywordFieldMapperTests extends FieldMapperTestCase<Constan\n     public void testLookupValues() throws Exception {\n         IndexService indexService = createIndex(\"test\");\n         String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n-            .startObject(\"properties\").startObject(\"field\").field(\"type\", \"constant_keyword\")\n-            .endObject().endObject().endObject().endObject());\n+                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"constant_keyword\")\n+                .endObject().endObject().endObject().endObject());\n         DocumentMapper mapper = indexService.mapperService().merge(\"_doc\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n         assertEquals(mapping, mapper.mappingSource().toString());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3Nzk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/56928#discussion_r428777958", "bodyText": "Same comment as the one for keyword field: shouldn't ignore_above be considered when parsing the source?", "author": "astefan", "createdAt": "2020-05-21T16:46:26Z", "path": "x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java", "diffHunk": "@@ -551,6 +551,11 @@ protected void parseCreateField(ParseContext context) throws IOException {\n         parseDoc.addAll(fields);\n     }\n \n+    @Override\n+    protected String parseSourceValue(Object value) {\n+        return value.toString();", "originalCommit": "ce0e04f846ef95d65889aa5b95f748a6ff7c9df2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6216fd8621a439f6574cce9a034ccd0b767db85b", "chunk": "diff --git a/x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java b/x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java\nindex 75fbd996670..973e8350523 100644\n--- a/x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java\n+++ b/x-pack/plugin/wildcard/src/main/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldMapper.java\n\n@@ -552,8 +894,8 @@ public class WildcardFieldMapper extends FieldMapper {\n     }\n \n     @Override\n-    protected String parseSourceValue(Object value) {\n-        return value.toString();\n+    protected Object parseSourceValue(Object value) {\n+        return value;\n     }\n \n     // For internal use by Lucene only - used to define ngram index\n"}}, {"oid": "6216fd8621a439f6574cce9a034ccd0b767db85b", "url": "https://github.com/elastic/elasticsearch/commit/6216fd8621a439f6574cce9a034ccd0b767db85b", "message": "Introduce a method FieldMapper#lookupValues to retrieve fields from source.", "committedDate": "2020-05-28T04:05:30Z", "type": "commit"}, {"oid": "f44f6c381f3d3479f43859c2f0cfa15a968a3b07", "url": "https://github.com/elastic/elasticsearch/commit/f44f6c381f3d3479f43859c2f0cfa15a968a3b07", "message": "Ensure parseSourceValue returns strings when possible.", "committedDate": "2020-05-28T04:05:30Z", "type": "commit"}, {"oid": "a09d71f3bbc831074f044aeb37a301d191a01bdd", "url": "https://github.com/elastic/elasticsearch/commit/a09d71f3bbc831074f044aeb37a301d191a01bdd", "message": "Convert murmur3 and token_count values to strings.", "committedDate": "2020-05-28T04:05:30Z", "type": "commit"}, {"oid": "dcf54e9903a304c129023aad4041f73f39e8e94f", "url": "https://github.com/elastic/elasticsearch/commit/dcf54e9903a304c129023aad4041f73f39e8e94f", "message": "Format dates based on the mapping format.", "committedDate": "2020-05-28T04:05:30Z", "type": "commit"}, {"oid": "27e36ef68f2f7d0d2f52c7c03c496827839d129d", "url": "https://github.com/elastic/elasticsearch/commit/27e36ef68f2f7d0d2f52c7c03c496827839d129d", "message": "Make sure to format dates within range types.", "committedDate": "2020-05-28T04:05:30Z", "type": "commit"}, {"oid": "f1ac1404bd28377107652bb7a81a21b4d24843bf", "url": "https://github.com/elastic/elasticsearch/commit/f1ac1404bd28377107652bb7a81a21b4d24843bf", "message": "Fix indentation.", "committedDate": "2020-05-28T04:05:30Z", "type": "commit"}, {"oid": "f2d259be25627b3b047ba40ef42c3daac565b0fe", "url": "https://github.com/elastic/elasticsearch/commit/f2d259be25627b3b047ba40ef42c3daac565b0fe", "message": "Standardize IP fields.", "committedDate": "2020-05-28T04:05:30Z", "type": "commit"}, {"oid": "f2d259be25627b3b047ba40ef42c3daac565b0fe", "url": "https://github.com/elastic/elasticsearch/commit/f2d259be25627b3b047ba40ef42c3daac565b0fe", "message": "Standardize IP fields.", "committedDate": "2020-05-28T04:05:30Z", "type": "forcePushed"}]}