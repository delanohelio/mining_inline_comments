{"pr_number": 57278, "pr_title": "Make AnnotationPersister use bulk requests instead of indexing individual documents", "pr_createdAt": "2020-05-28T12:39:51Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57278", "timeline": [{"oid": "45b649412990280a0d6f0e3c2cef1b042dd0c833", "url": "https://github.com/elastic/elasticsearch/commit/45b649412990280a0d6f0e3c2cef1b042dd0c833", "message": "Make AnnotationPersister use bulk requests instead of indexing individual documents", "committedDate": "2020-05-28T13:03:41Z", "type": "forcePushed"}, {"oid": "f6e6dde2ebcfa2325d7818a4737ff02ac523dca7", "url": "https://github.com/elastic/elasticsearch/commit/f6e6dde2ebcfa2325d7818a4737ff02ac523dca7", "message": "Make AnnotationPersister use bulk requests instead of indexing individual documents", "committedDate": "2020-05-28T13:56:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MDc3OA==", "url": "https://github.com/elastic/elasticsearch/pull/57278#discussion_r432350778", "bodyText": "nit: make bulkRequest.numberOfActions() a Supplier so it is only called if trace logging is enabled.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.trace(\"[{}] ES API CALL: bulk request with {} actions\", jobId, bulkRequest.numberOfActions());\n          \n          \n            \n                        logger.trace(\"[{}] ES API CALL: bulk request with {} actions\",  () -> jobId, () -> bulkRequest.numberOfActions());", "author": "davidkyle", "createdAt": "2020-05-29T08:59:36Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/annotations/AnnotationPersister.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.annotations;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.xpack.core.common.notifications.AbstractAuditor;\n+import org.elasticsearch.xpack.core.ml.annotations.Annotation;\n+import org.elasticsearch.xpack.core.ml.annotations.AnnotationIndex;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Persists annotations to Elasticsearch index.\n+ */\n+public class AnnotationPersister {\n+\n+    private static final Logger logger = LogManager.getLogger(AnnotationPersister.class);\n+\n+    private static final int DEFAULT_BULK_LIMIT = 10_000;\n+\n+    private final ResultsPersisterService resultsPersisterService;\n+    private final AbstractAuditor<?> auditor;\n+    /**\n+     * Execute bulk requests when they reach this size\n+     */\n+    private final int bulkLimit;\n+\n+    public AnnotationPersister(ResultsPersisterService resultsPersisterService, AbstractAuditor<?> auditor) {\n+        this(resultsPersisterService, auditor, DEFAULT_BULK_LIMIT);\n+    }\n+\n+    // For testing\n+    AnnotationPersister(ResultsPersisterService resultsPersisterService, AbstractAuditor<?> auditor, int bulkLimit) {\n+        this.resultsPersisterService = Objects.requireNonNull(resultsPersisterService);\n+        this.auditor = Objects.requireNonNull(auditor);\n+        this.bulkLimit = bulkLimit;\n+    }\n+\n+    /**\n+     * Persists the given annotation to annotations index.\n+     *\n+     * @param annotationId existing annotation id. If {@code null}, a new annotation will be created and id will be assigned automatically\n+     * @param annotation annotation to be persisted\n+     * @return tuple of the form (annotation id, annotation object)\n+     */\n+    public Tuple<String, Annotation> persistAnnotation(@Nullable String annotationId, Annotation annotation) {\n+        Objects.requireNonNull(annotation);\n+        String jobId = annotation.getJobId();\n+        BulkResponse bulkResponse = bulkPersisterBuilder(jobId).persistAnnotation(annotationId, annotation).executeRequest();\n+        assert bulkResponse.getItems().length == 1;\n+        return Tuple.tuple(bulkResponse.getItems()[0].getId(), annotation);\n+    }\n+\n+    public Builder bulkPersisterBuilder(String jobId) {\n+        return new Builder(jobId);\n+    }\n+\n+    public class Builder {\n+\n+        private final String jobId;\n+        private BulkRequest bulkRequest = new BulkRequest(AnnotationIndex.WRITE_ALIAS_NAME);\n+        private Supplier<Boolean> shouldRetry = () -> true;\n+\n+        private Builder(String jobId) {\n+            this.jobId = Objects.requireNonNull(jobId);\n+        }\n+\n+        public Builder shouldRetry(Supplier<Boolean> shouldRetry) {\n+            this.shouldRetry = Objects.requireNonNull(shouldRetry);\n+            return this;\n+        }\n+\n+        public Builder persistAnnotation(Annotation annotation) {\n+            return persistAnnotation(null, annotation);\n+        }\n+\n+        public Builder persistAnnotation(@Nullable String annotationId, Annotation annotation) {\n+            Objects.requireNonNull(annotation);\n+            try (XContentBuilder xContentBuilder = annotation.toXContent(XContentFactory.jsonBuilder(), ToXContent.EMPTY_PARAMS)) {\n+                bulkRequest.add(new IndexRequest().id(annotationId).source(xContentBuilder));\n+            } catch (IOException e) {\n+                logger.error(new ParameterizedMessage(\"[{}] Error serialising annotation\", jobId), e);\n+            }\n+\n+            if (bulkRequest.numberOfActions() >= bulkLimit) {\n+                executeRequest();\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Execute the bulk action\n+         */\n+        public BulkResponse executeRequest() {\n+            if (bulkRequest.numberOfActions() == 0) {\n+                return null;\n+            }\n+            logger.trace(\"[{}] ES API CALL: bulk request with {} actions\", jobId, bulkRequest.numberOfActions());", "originalCommit": "f6e6dde2ebcfa2325d7818a4737ff02ac523dca7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwNDgyMA==", "url": "https://github.com/elastic/elasticsearch/pull/57278#discussion_r432404820", "bodyText": "Done.", "author": "przemekwitek", "createdAt": "2020-05-29T10:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MDc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "8862f8472ce47cb98221d8828a358fbef6f6cfd1", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/annotations/AnnotationPersister.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/annotations/AnnotationPersister.java\nindex 758b14dc126..3744e3e1a5b 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/annotations/AnnotationPersister.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/annotations/AnnotationPersister.java\n\n@@ -111,7 +111,7 @@ public class AnnotationPersister {\n             if (bulkRequest.numberOfActions() == 0) {\n                 return null;\n             }\n-            logger.trace(\"[{}] ES API CALL: bulk request with {} actions\", jobId, bulkRequest.numberOfActions());\n+            logger.trace(\"[{}] ES API CALL: bulk request with {} actions\", () -> jobId, () -> bulkRequest.numberOfActions());\n             BulkResponse bulkResponse =\n                 resultsPersisterService.bulkIndexWithRetry(\n                     bulkRequest, jobId, shouldRetry, msg -> auditor.warning(jobId, \"Bulk indexing of annotations failed \" + msg));\n"}}, {"oid": "8862f8472ce47cb98221d8828a358fbef6f6cfd1", "url": "https://github.com/elastic/elasticsearch/commit/8862f8472ce47cb98221d8828a358fbef6f6cfd1", "message": "Give JobResultsPersister.Builder.shouldRetry default value.", "committedDate": "2020-05-29T10:52:24Z", "type": "forcePushed"}, {"oid": "a97ec60839508812c219ea2a1b27ed49147d2aeb", "url": "https://github.com/elastic/elasticsearch/commit/a97ec60839508812c219ea2a1b27ed49147d2aeb", "message": "Make AnnotationPersister use bulk requests instead of indexing individual documents", "committedDate": "2020-05-29T11:15:53Z", "type": "commit"}, {"oid": "ddaa7429805c4b566cb54de0b80405965ba3b6b9", "url": "https://github.com/elastic/elasticsearch/commit/ddaa7429805c4b566cb54de0b80405965ba3b6b9", "message": "Apply review comments", "committedDate": "2020-05-29T11:15:53Z", "type": "commit"}, {"oid": "dff6e6ddb4022515cab6f689ea7d64987e89ff80", "url": "https://github.com/elastic/elasticsearch/commit/dff6e6ddb4022515cab6f689ea7d64987e89ff80", "message": "Give JobResultsPersister.Builder.shouldRetry default value.", "committedDate": "2020-05-29T11:15:53Z", "type": "commit"}, {"oid": "dff6e6ddb4022515cab6f689ea7d64987e89ff80", "url": "https://github.com/elastic/elasticsearch/commit/dff6e6ddb4022515cab6f689ea7d64987e89ff80", "message": "Give JobResultsPersister.Builder.shouldRetry default value.", "committedDate": "2020-05-29T11:15:53Z", "type": "forcePushed"}]}