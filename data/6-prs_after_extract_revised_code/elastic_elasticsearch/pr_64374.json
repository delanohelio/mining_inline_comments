{"pr_number": 64374, "pr_title": "Add `runtime_mappings` to search request", "pr_createdAt": "2020-10-29T18:19:48Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64374", "timeline": [{"oid": "706da74631d905f928fa92d4a633356307f49871", "url": "https://github.com/elastic/elasticsearch/commit/706da74631d905f928fa92d4a633356307f49871", "message": "Add `runtime_mappings` to search request\n\nThis adds a way to specify the `runtime_mappings` on a search request\nwhich are always \"runtime\" fields. It looks like:\n```\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -XPOST -uelastic:password -HContent-Type:application/json 'localhost:9200/test/_bulk?pretty&refresh' -d'\n{\"index\": {}}\n{\"animal\": \"cat\", \"sound\": \"meow\"}\n{\"index\": {}}\n{\"animal\": \"dog\", \"sound\": \"woof\"}\n{\"index\": {}}\n{\"animal\": \"snake\", \"sound\": \"hisssssssssssssssss\"}\n'\n\ncurl -XPOST -uelastic:password -HContent-Type:application/json localhost:9200/test/_search?pretty -d'\n{\n  \"runtime_mappings\": {\n    \"animal.upper\": {\n      \"type\": \"keyword\",\n      \"script\": \"for (String s : doc[\\\"animal.keyword\\\"]) {emit(s.toUpperCase())}\"\n    }\n  },\n  \"query\": {\n    \"match\": {\n      \"animal.upper\": \"DOG\"\n    }\n  }\n}'\n```", "committedDate": "2020-10-29T18:21:54Z", "type": "forcePushed"}, {"oid": "706da74631d905f928fa92d4a633356307f49871", "url": "https://github.com/elastic/elasticsearch/commit/706da74631d905f928fa92d4a633356307f49871", "message": "Add `runtime_mappings` to search request\n\nThis adds a way to specify the `runtime_mappings` on a search request\nwhich are always \"runtime\" fields. It looks like:\n```\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -XPOST -uelastic:password -HContent-Type:application/json 'localhost:9200/test/_bulk?pretty&refresh' -d'\n{\"index\": {}}\n{\"animal\": \"cat\", \"sound\": \"meow\"}\n{\"index\": {}}\n{\"animal\": \"dog\", \"sound\": \"woof\"}\n{\"index\": {}}\n{\"animal\": \"snake\", \"sound\": \"hisssssssssssssssss\"}\n'\n\ncurl -XPOST -uelastic:password -HContent-Type:application/json localhost:9200/test/_search?pretty -d'\n{\n  \"runtime_mappings\": {\n    \"animal.upper\": {\n      \"type\": \"keyword\",\n      \"script\": \"for (String s : doc[\\\"animal.keyword\\\"]) {emit(s.toUpperCase())}\"\n    }\n  },\n  \"query\": {\n    \"match\": {\n      \"animal.upper\": \"DOG\"\n    }\n  }\n}'\n```", "committedDate": "2020-10-29T18:21:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MTU2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r514981563", "bodyText": "nice tricks! ;)", "author": "javanna", "createdAt": "2020-10-30T09:52:18Z", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -522,4 +592,28 @@ public SimilarityService getSimilarityService() {\n     public BitsetFilterCache getBitsetFilterCache() {\n         return bitsetFilterCache;\n     }\n+\n+    private static Map<String, MappedFieldType> parseRuntimeMappings(\n+        Map<String, Object> mappings,\n+        Supplier<Mapper.TypeParser.ParserContext> parserContextSupplier,\n+        IndexSettings indexSettings\n+    ) {\n+        Map<String, MappedFieldType> runtimeMappings = new HashMap<>();\n+        for (Map.Entry<String, Object> entry : mappings.entrySet()) {\n+            String field = entry.getKey();\n+            if (entry.getValue() instanceof Map == false) {\n+                throw new ElasticsearchParseException(\"runtime mappings must be a map type\");\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, Object> node = (Map<String, Object>) entry.getValue();\n+            // Replace the type until we have native support for the runtime section \n+            Object oldRuntimeType = node.put(\"runtime_type\", node.remove(\"type\"));\n+            if (oldRuntimeType != null) {\n+                throw new ElasticsearchParseException(\"use [type] in [runtime_mappings] instead of [runtime_type]\");\n+            }\n+            runtimeMappings.put(field, buildFieldType(\"runtime\", field, node, parserContextSupplier.get(), indexSettings));", "originalCommit": "706da74631d905f928fa92d4a633356307f49871", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8000de1d49d990852be698a8b839158a275fba71", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\nindex ff350edba57..635de7d686d 100644\n--- a/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\n+++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\n\n@@ -605,7 +641,7 @@ public class QueryShardContext extends QueryRewriteContext {\n                 throw new ElasticsearchParseException(\"runtime mappings must be a map type\");\n             }\n             @SuppressWarnings(\"unchecked\")\n-            Map<String, Object> node = (Map<String, Object>) entry.getValue();\n+            Map<String, Object> node = new HashMap<>((Map<String, Object>) entry.getValue());\n             // Replace the type until we have native support for the runtime section \n             Object oldRuntimeType = node.put(\"runtime_type\", node.remove(\"type\"));\n             if (oldRuntimeType != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MjA4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r514982081", "bodyText": "When I looked I think that this one gets a search source builder, so it seemed that runtime mappings can be specified, hence we should use them?", "author": "javanna", "createdAt": "2020-10-30T09:53:18Z", "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java", "diffHunk": "@@ -233,7 +235,8 @@ protected MultiSearchResponse shardOperation(Request request, ShardId shardId) t\n                     shardId.id(),\n                     searcher,\n                     () -> { throw new UnsupportedOperationException(); },\n-                    null\n+                    null,\n+                    emptyMap()  // NOCOMMIT is it right not to use the runtime mappings?", "originalCommit": "706da74631d905f928fa92d4a633356307f49871", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "747220e6658b3bc0d88649f5d085b34931271045", "chunk": "diff --git a/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java b/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\nindex 1ece72b2e4b..44a9248aae8 100644\n--- a/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\n+++ b/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\n\n@@ -236,7 +236,7 @@ public class EnrichShardMultiSearchAction extends ActionType<MultiSearchResponse\n                     searcher,\n                     () -> { throw new UnsupportedOperationException(); },\n                     null,\n-                    emptyMap()  // NOCOMMIT is it right not to use the runtime mappings?\n+                    emptyMap()  // Enrich doesn't support defining runtime fields\n                 );\n                 final MultiSearchResponse.Item[] items = new MultiSearchResponse.Item[request.multiSearchRequest.requests().size()];\n                 for (int i = 0; i < request.multiSearchRequest.requests().size(); i++) {\n"}}, {"oid": "bf4a4e9df5089732a15714a26ce3db31f0986455", "url": "https://github.com/elastic/elasticsearch/commit/bf4a4e9df5089732a15714a26ce3db31f0986455", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-02T14:53:05Z", "type": "commit"}, {"oid": "ff7575018d5ac8b0c64ea05f4c1ed9961930e2b5", "url": "https://github.com/elastic/elasticsearch/commit/ff7575018d5ac8b0c64ea05f4c1ed9961930e2b5", "message": "WIP", "committedDate": "2020-11-02T21:09:31Z", "type": "commit"}, {"oid": "5104963d32c08a6527b2ed503b4b528f3e25dbc7", "url": "https://github.com/elastic/elasticsearch/commit/5104963d32c08a6527b2ed503b4b528f3e25dbc7", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-02T23:01:22Z", "type": "commit"}, {"oid": "730cf922c553b19c5934adf2f5cfb8305047887c", "url": "https://github.com/elastic/elasticsearch/commit/730cf922c553b19c5934adf2f5cfb8305047887c", "message": "WIP", "committedDate": "2020-11-03T19:38:42Z", "type": "commit"}, {"oid": "80fc471e115fffd5abd7be51e180754b4ebff994", "url": "https://github.com/elastic/elasticsearch/commit/80fc471e115fffd5abd7be51e180754b4ebff994", "message": "Some of my own tests", "committedDate": "2020-11-04T14:45:54Z", "type": "commit"}, {"oid": "a94ccd6d03e96d0d7e1cf8ad48403ae293cfe33d", "url": "https://github.com/elastic/elasticsearch/commit/a94ccd6d03e96d0d7e1cf8ad48403ae293cfe33d", "message": "WIP", "committedDate": "2020-11-04T15:11:59Z", "type": "commit"}, {"oid": "c0a65bada63e92183fada05c942a4862cf2e9410", "url": "https://github.com/elastic/elasticsearch/commit/c0a65bada63e92183fada05c942a4862cf2e9410", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-04T15:12:37Z", "type": "commit"}, {"oid": "19f9746a73645cce3ddf626f90f0df03aa2f409a", "url": "https://github.com/elastic/elasticsearch/commit/19f9746a73645cce3ddf626f90f0df03aa2f409a", "message": "Unit tests", "committedDate": "2020-11-04T15:30:00Z", "type": "forcePushed"}, {"oid": "19f9746a73645cce3ddf626f90f0df03aa2f409a", "url": "https://github.com/elastic/elasticsearch/commit/19f9746a73645cce3ddf626f90f0df03aa2f409a", "message": "Unit tests", "committedDate": "2020-11-04T15:30:00Z", "type": "commit"}, {"oid": "05d0c9c26a1e56134a29c3084109084290c4075f", "url": "https://github.com/elastic/elasticsearch/commit/05d0c9c26a1e56134a29c3084109084290c4075f", "message": "Drop nocommit\n\nTons of callers, we need this", "committedDate": "2020-11-04T15:33:00Z", "type": "commit"}, {"oid": "747220e6658b3bc0d88649f5d085b34931271045", "url": "https://github.com/elastic/elasticsearch/commit/747220e6658b3bc0d88649f5d085b34931271045", "message": "Drop another nocommit", "committedDate": "2020-11-04T15:39:29Z", "type": "commit"}, {"oid": "8000de1d49d990852be698a8b839158a275fba71", "url": "https://github.com/elastic/elasticsearch/commit/8000de1d49d990852be698a8b839158a275fba71", "message": "checkstyle", "committedDate": "2020-11-04T19:41:27Z", "type": "commit"}, {"oid": "a1d09159297a96680da6dc3c6feff91acc9dfab8", "url": "https://github.com/elastic/elasticsearch/commit/a1d09159297a96680da6dc3c6feff91acc9dfab8", "message": "Can we do dynamic mappings?", "committedDate": "2020-11-04T22:42:51Z", "type": "commit"}, {"oid": "0d7cae13d68ff809106cd1bb52bf636dc708ac73", "url": "https://github.com/elastic/elasticsearch/commit/0d7cae13d68ff809106cd1bb52bf636dc708ac73", "message": "Add runtime mappings to collapse", "committedDate": "2020-11-05T01:09:29Z", "type": "commit"}, {"oid": "b17eff0d7389819cb8c8efd3ea31da662e5af3fa", "url": "https://github.com/elastic/elasticsearch/commit/b17eff0d7389819cb8c8efd3ea31da662e5af3fa", "message": "Fixup dynamic mapping", "committedDate": "2020-11-05T01:16:35Z", "type": "commit"}, {"oid": "e95ed207ae4f74079bcd3a02b91bd698629a5916", "url": "https://github.com/elastic/elasticsearch/commit/e95ed207ae4f74079bcd3a02b91bd698629a5916", "message": "Handle _all", "committedDate": "2020-11-05T13:55:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExMzQwNg==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518113406", "bodyText": "how are you planning to address this? Should the method in MapperService take the runtime mappings as argument or is that too intrusive of a change?", "author": "javanna", "createdAt": "2020-11-05T14:55:56Z", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -243,7 +301,21 @@ public boolean hasMappings() {\n      * type then the fields will be returned with a type prefix.\n      */\n     public Set<String> simpleMatchToIndexNames(String pattern) {\n-        return mapperService.simpleMatchToFullName(pattern);\n+        // TODO remove the duplication with MapperService and FieldTypeLookup", "originalCommit": "05d0c9c26a1e56134a29c3084109084290c4075f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1NTIwOA==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518155208", "bodyText": "I was hoping to not think about it today. Pushing the runtime mappings over might do. I'll have a look once I get all the tests happy.", "author": "nik9000", "createdAt": "2020-11-05T15:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExMzQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMzAyMg==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518323022", "bodyText": "After looking a little more I wonder if the duplication is that bad - its another check of isSimpleMatchPattern when there are runtime fields. Compared to iterating a HashMap it seems ok.", "author": "nik9000", "createdAt": "2020-11-05T19:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExMzQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "218314e03d602f35d297a25d832d6db3db99fddd", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\nindex debbe094678..ec5d3140e99 100644\n--- a/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\n+++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\n\n@@ -301,7 +301,6 @@ public class QueryShardContext extends QueryRewriteContext {\n      * type then the fields will be returned with a type prefix.\n      */\n     public Set<String> simpleMatchToIndexNames(String pattern) {\n-        // TODO remove the duplication with MapperService and FieldTypeLookup\n         if (runtimeMappings.isEmpty()) {\n             return mapperService.simpleMatchToFullName(pattern);\n         }\n"}}, {"oid": "c2100371ffd6e03a55a0fd3e1c84330618ab6f4e", "url": "https://github.com/elastic/elasticsearch/commit/c2100371ffd6e03a55a0fd3e1c84330618ab6f4e", "message": "Refactor", "committedDate": "2020-11-05T16:46:05Z", "type": "commit"}, {"oid": "685085695d0ce26ba55d0ba290755b5eabdd0311", "url": "https://github.com/elastic/elasticsearch/commit/685085695d0ce26ba55d0ba290755b5eabdd0311", "message": "Refactor", "committedDate": "2020-11-05T16:59:35Z", "type": "commit"}, {"oid": "88926d44ed9992615319b4d52c096d98be2d8d61", "url": "https://github.com/elastic/elasticsearch/commit/88926d44ed9992615319b4d52c096d98be2d8d61", "message": "Missing tests", "committedDate": "2020-11-05T17:12:56Z", "type": "commit"}, {"oid": "99d3e7d69514af5ea489ac4a40fc33c67baa786b", "url": "https://github.com/elastic/elasticsearch/commit/99d3e7d69514af5ea489ac4a40fc33c67baa786b", "message": "Handle matching many", "committedDate": "2020-11-05T17:25:01Z", "type": "commit"}, {"oid": "88be56b1c07bb4312aee68b7985a97a6302d0b30", "url": "https://github.com/elastic/elasticsearch/commit/88be56b1c07bb4312aee68b7985a97a6302d0b30", "message": "cleanup", "committedDate": "2020-11-05T17:40:36Z", "type": "commit"}, {"oid": "7ca23810487eb362c02f903f55b5961ad1d06640", "url": "https://github.com/elastic/elasticsearch/commit/7ca23810487eb362c02f903f55b5961ad1d06640", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-05T17:46:57Z", "type": "commit"}, {"oid": "458df74bc3de9800f7e73069ad9a6a2cbf83e46c", "url": "https://github.com/elastic/elasticsearch/commit/458df74bc3de9800f7e73069ad9a6a2cbf83e46c", "message": "precommit", "committedDate": "2020-11-05T17:50:25Z", "type": "commit"}, {"oid": "f82f41ece7f5e6a94cebb1ac29df143a4d6c5245", "url": "https://github.com/elastic/elasticsearch/commit/f82f41ece7f5e6a94cebb1ac29df143a4d6c5245", "message": "Fixup other test", "committedDate": "2020-11-05T19:01:25Z", "type": "commit"}, {"oid": "f348d663d62b1422314cd20c84234d9b5f224e06", "url": "https://github.com/elastic/elasticsearch/commit/f348d663d62b1422314cd20c84234d9b5f224e06", "message": "Fixup", "committedDate": "2020-11-05T19:47:24Z", "type": "commit"}, {"oid": "cf63463666ce7d1bf412991f833c3e0c3218f9b6", "url": "https://github.com/elastic/elasticsearch/commit/cf63463666ce7d1bf412991f833c3e0c3218f9b6", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-05T20:43:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDA1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518630052", "bodyText": "I guess at some point we're going to need to integrate runtime fields into dynamic mappings in core code?", "author": "romseygeek", "createdAt": "2020-11-06T09:35:49Z", "path": "x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.test.search;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.DateFieldMapper;\n+import org.elasticsearch.test.rest.yaml.ClientYamlTestCandidate;\n+import org.elasticsearch.test.rest.yaml.ESClientYamlSuiteTestCase;\n+import org.elasticsearch.test.rest.yaml.section.ApiCallSection;\n+import org.elasticsearch.test.rest.yaml.section.ExecutableSection;\n+import org.elasticsearch.xpack.runtimefields.test.CoreTestTranslater;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * Runs elasticsearch's core rest tests disabling all mappings and replacing them\n+ * with runtime fields defined on the search request that load from {@code _source}. Tests\n+ * that configure the field in a way that are not supported by runtime fields are skipped.\n+ */\n+public class CoreTestsWithSearchRuntimeFieldsIT extends ESClientYamlSuiteTestCase {\n+    public CoreTestsWithSearchRuntimeFieldsIT(@Name(\"yaml\") ClientYamlTestCandidate testCandidate) {\n+        super(testCandidate);\n+    }\n+\n+    @Override\n+    protected boolean randomizeContentType() { // NOCOMMIT remove me\n+        return false;\n+    }\n+\n+    @ParametersFactory\n+    public static Iterable<Object[]> parameters() throws Exception {\n+        return new SearchRequestRuntimeFieldTranslater().parameters();\n+    }\n+\n+    /**\n+     * Translating the tests is fairly difficult here because instead of ES\n+     * tracking the mappings we have to track them. We don't have to do it as\n+     * well as ES, just well enough that we can decorate the search requests\n+     * with types that make most tests \"just work\".\n+     */\n+    private static class SearchRequestRuntimeFieldTranslater extends CoreTestTranslater {\n+        @Override\n+        protected Map<String, Object> dynamicTemplateFor(String type) {\n+            return dynamicTemplateToDisableRuntimeCompatibleFields(type);\n+        }\n+\n+        @Override\n+        protected Suite suite(ClientYamlTestCandidate candidate) {\n+            return new Suite(candidate) {\n+                private Map<String, Map<String, Map<String, Object>>> runtimeMappingsAfterSetup;\n+                private Map<String, Set<String>> mappedFieldsAfterSetup;\n+                private Map<String, Map<String, Map<String, Object>>> runtimeMappings;\n+                private Map<String, Set<String>> mappedFields;\n+\n+                @Override\n+                public boolean modifySections(List<ExecutableSection> executables) {\n+                    if (runtimeMappingsAfterSetup == null) {\n+                        // We're modifying the setup section\n+                        runtimeMappings = new HashMap<>();\n+                        mappedFields = new HashMap<>();\n+                        if (false == super.modifySections(executables)) {\n+                            return false;\n+                        }\n+                        runtimeMappingsAfterSetup = unmodifiableMap(runtimeMappings);\n+                        runtimeMappings = null;\n+                        mappedFieldsAfterSetup = unmodifiableMap(mappedFields);\n+                        mappedFields = null;\n+                        return true;\n+                    }\n+                    runtimeMappings = new HashMap<>(runtimeMappingsAfterSetup);\n+                    mappedFields = new HashMap<>(mappedFieldsAfterSetup);\n+                    return super.modifySections(executables);\n+                }\n+\n+                @Override\n+                protected boolean modifyMappingProperties(String index, Map<String, Object> properties) {\n+                    Map<String, Object> untouchedMapping = new HashMap<>();\n+                    Map<String, Map<String, Object>> runtimeMapping = new HashMap<>();\n+                    if (false == runtimeifyMappingProperties(properties, untouchedMapping, runtimeMapping)) {\n+                        return false;\n+                    }\n+                    properties.clear();\n+                    properties.putAll(untouchedMapping);\n+                    mappedFields.put(index, untouchedMapping.keySet());\n+                    runtimeMappings.put(index, runtimeMapping);\n+                    return true;\n+                }\n+\n+                @Override\n+                protected boolean modifySearch(ApiCallSection search) {\n+                    if (search.getBodies().isEmpty()) {\n+                        search.addBody(new HashMap<>());\n+                    }\n+                    for (Map<String, Object> body : search.getBodies()) {\n+                        Map<?, ?> runtimeMapping = runtimeMappings(search.getParams().get(\"index\"));\n+                        if (runtimeMapping == null) {\n+                            return false;\n+                        }\n+                        body.put(\"runtime_mappings\", runtimeMapping);\n+                    }\n+                    return true;\n+                }\n+\n+                private Map<?, ?> runtimeMappings(String index) {\n+                    if (index == null) {\n+                        return mergeMappings(new String[] { \"*\" });\n+                    }\n+                    String[] patterns = Arrays.stream(index.split(\",\")).map(m -> m.equals(\"_all\") ? \"*\" : m).toArray(String[]::new);\n+                    if (patterns.length == 0 && Regex.isSimpleMatchPattern(patterns[0])) {\n+                        return runtimeMappings.get(patterns[0]);\n+                    }\n+                    return mergeMappings(patterns);\n+                }\n+\n+                private Map<?, ?> mergeMappings(String[] patterns) {\n+                    Map<String, Map<String, Object>> merged = new HashMap<>();\n+                    for (Map.Entry<String, Map<String, Map<String, Object>>> indexEntry : runtimeMappings.entrySet()) {\n+                        if (false == Regex.simpleMatch(patterns, indexEntry.getKey())) {\n+                            continue;\n+                        }\n+                        for (Map.Entry<String, Map<String, Object>> field : indexEntry.getValue().entrySet()) {\n+                            Map<String, Object> mergedConfig = merged.get(field.getKey());\n+                            if (mergedConfig == null) {\n+                                merged.put(field.getKey(), field.getValue());\n+                            } else if (false == mergedConfig.equals(field.getValue())) {\n+                                // The two indices have different runtime mappings for a field so we have to give up on running the test.\n+                                return null;\n+                            }\n+                        }\n+                    }\n+                    for (Map.Entry<String, Set<String>> indexEntry : mappedFields.entrySet()) {\n+                        if (false == Regex.simpleMatch(patterns, indexEntry.getKey())) {\n+                            continue;\n+                        }\n+                        for (String mappedField : indexEntry.getValue()) {\n+                            if (merged.containsKey(mappedField)) {\n+                                // We have a runtime mappings for a field *and* regular mapping. We can't make this test work so skip it.\n+                                return null;\n+                            }\n+                        }\n+                    }\n+                    return merged;\n+                }\n+\n+                @Override\n+                protected boolean handleIndex(IndexRequest index) {\n+                    /*\n+                     * Ok! Let's reverse engineer dynamic mapping. Sort of. We're\n+                     * really just looking to figure out which of the runtime fields\n+                     * is \"close enough\" to what dynamic mapping would do.\n+                     */\n+                    if (index.getPipeline() != null) {", "originalCommit": "cf63463666ce7d1bf412991f833c3e0c3218f9b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDk3OA==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518744978", "bodyText": "The \"mapped\" version of these tests gets to use dynamic mappings. The \"search request\" version has to use dynamic mappings to disable the fields so that we can \"prove\" that we're replacing them with search requests.\nI guess another option is for me to hack the search requests and issue a get mapping or field caps request before hand to try to construct the search request based on the disabled mappings that I made. I didn't have that option when I first wrote the code so I did the dynamic mapping stuff. Its kind of nasty so maybe I should replace it with that...... I'd be ok doing it now if you feel strongly about it but I'd also be ok leaving this for a while.", "author": "nik9000", "createdAt": "2020-11-06T13:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3MDkyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518770921", "bodyText": "I think I'm getting confused between dynamic mappings and dynamic templates anyway.  Let's leave it as it is, but maybe open a separate issue to consider reworking it so it doesn't get lost?", "author": "romseygeek", "createdAt": "2020-11-06T14:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3NjI1OA==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r518776258", "bodyText": "#64716", "author": "nik9000", "createdAt": "2020-11-06T14:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYzMDA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b336ff3f87026cb3d9481f74b16ba9841bdab266", "chunk": "diff --git a/x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java b/x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java\nindex 40723d997c9..02092699ecc 100644\n--- a/x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java\n+++ b/x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java\n\n@@ -37,11 +37,6 @@ public class CoreTestsWithSearchRuntimeFieldsIT extends ESClientYamlSuiteTestCas\n         super(testCandidate);\n     }\n \n-    @Override\n-    protected boolean randomizeContentType() { // NOCOMMIT remove me\n-        return false;\n-    }\n-\n     @ParametersFactory\n     public static Iterable<Object[]> parameters() throws Exception {\n         return new SearchRequestRuntimeFieldTranslater().parameters();\n"}}, {"oid": "fe5f32ebd26cc46bb2ba1b951854f904811c6135", "url": "https://github.com/elastic/elasticsearch/commit/fe5f32ebd26cc46bb2ba1b951854f904811c6135", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-06T13:27:42Z", "type": "commit"}, {"oid": "67736fb6a595295c96e3fb3120d393ca40eeb0de", "url": "https://github.com/elastic/elasticsearch/commit/67736fb6a595295c96e3fb3120d393ca40eeb0de", "message": "Extra test!", "committedDate": "2020-11-06T14:01:27Z", "type": "commit"}, {"oid": "3bd10285fb9c693f615dd3690b9f0f8d6154b660", "url": "https://github.com/elastic/elasticsearch/commit/3bd10285fb9c693f615dd3690b9f0f8d6154b660", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-06T15:15:45Z", "type": "commit"}, {"oid": "af11288dbd1c6febed3554f387b9d92967d80885", "url": "https://github.com/elastic/elasticsearch/commit/af11288dbd1c6febed3554f387b9d92967d80885", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-06T15:55:20Z", "type": "commit"}, {"oid": "139ef5f0542361ff15af2dfd20d11a53c6c23c67", "url": "https://github.com/elastic/elasticsearch/commit/139ef5f0542361ff15af2dfd20d11a53c6c23c67", "message": "More test", "committedDate": "2020-11-06T15:58:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyNzU3NA==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519727574", "bodyText": "Not extremely sure, but is it worth removing this constructor?", "author": "javanna", "createdAt": "2020-11-09T11:09:09Z", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -122,16 +131,63 @@ public QueryShardContext(int shardId,\n                              BooleanSupplier allowExpensiveQueries,\n                              ValuesSourceRegistry valuesSourceRegistry) {\n         this(shardId, indexSettings, bigArrays, bitsetFilterCache, indexFieldDataLookup, mapperService, similarityService,\n-                scriptService, xContentRegistry, namedWriteableRegistry, client, searcher, nowInMillis, indexNameMatcher,\n-                new Index(RemoteClusterAware.buildRemoteIndexName(clusterAlias, indexSettings.getIndex().getName()),\n-                        indexSettings.getIndex().getUUID()), allowExpensiveQueries, valuesSourceRegistry);\n+                scriptService, xContentRegistry, namedWriteableRegistry, client, searcher, nowInMillis, clusterAlias,\n+                indexNameMatcher, allowExpensiveQueries, valuesSourceRegistry, emptyMap());", "originalCommit": "139ef5f0542361ff15af2dfd20d11a53c6c23c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg2MTY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519861642", "bodyText": "It looks like I'd have to touch 15 files or something to do it. Would you be ok if I did it in a follow up change to keep this one ever so slightly smaller?", "author": "nik9000", "createdAt": "2020-11-09T14:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyNzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NTYzMg==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519955632", "bodyText": "fine", "author": "javanna", "createdAt": "2020-11-09T16:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyNzU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b336ff3f87026cb3d9481f74b16ba9841bdab266", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\nindex 715702a40c4..41c7ab793b6 100644\n--- a/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\n+++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\n\n@@ -179,7 +179,7 @@ public class QueryShardContext extends QueryRewriteContext {\n             ),\n             allowExpensiveQueries,\n             valuesSourceRegistry,\n-            parseRuntimeMappings(runtimeMappings, mapperService::parserContext, indexSettings)\n+            parseRuntimeMappings(runtimeMappings, mapperService, indexSettings)\n         );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNjA1MA==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519736050", "bodyText": "why do we need to mock mapper service now in some tests compared to before?", "author": "javanna", "createdAt": "2020-11-09T11:24:05Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java", "diffHunk": "@@ -231,7 +233,7 @@ public void testRangeQueryWithIndexSort() {\n         IndexSettings indexSettings = new IndexSettings(indexMetadata, settings);\n \n         QueryShardContext context = new QueryShardContext(0, indexSettings,\n-            BigArrays.NON_RECYCLING_INSTANCE, null, null, null, null, null, xContentRegistry(), writableRegistry(),\n+            BigArrays.NON_RECYCLING_INSTANCE, null, null, mock(MapperService.class), null, null, xContentRegistry(), writableRegistry(),", "originalCommit": "139ef5f0542361ff15af2dfd20d11a53c6c23c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg2MzMwNw==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519863307", "bodyText": "Because we're doing a method reference to it. Let me check if I can stomp that.", "author": "nik9000", "createdAt": "2020-11-09T14:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNjA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "b336ff3f87026cb3d9481f74b16ba9841bdab266", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java b/server/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java\nindex b4b819d6d7e..95e09f22925 100644\n--- a/server/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/mapper/DateFieldTypeTests.java\n\n@@ -233,7 +231,7 @@ public class DateFieldTypeTests extends FieldTypeTestCase {\n         IndexSettings indexSettings = new IndexSettings(indexMetadata, settings);\n \n         QueryShardContext context = new QueryShardContext(0, indexSettings,\n-            BigArrays.NON_RECYCLING_INSTANCE, null, null, mock(MapperService.class), null, null, xContentRegistry(), writableRegistry(),\n+            BigArrays.NON_RECYCLING_INSTANCE, null, null, null, null, null, xContentRegistry(), writableRegistry(),\n             null, null, () -> 0L, null, null, () -> true, null);\n \n         MappedFieldType ft = new DateFieldType(\"field\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczOTYyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519739621", "bodyText": "you meant randomRuntimeMappings ?", "author": "javanna", "createdAt": "2020-11-09T11:30:27Z", "path": "server/src/test/java/org/elasticsearch/search/AbstractSearchTestCase.java", "diffHunk": "@@ -91,7 +91,22 @@ protected SearchSourceBuilder createSearchSourceBuilder() {\n                 SuggestBuilderTests::randomSuggestBuilder,\n                 QueryRescorerBuilderTests::randomRescoreBuilder,\n                 randomExtBuilders,\n-                CollapseBuilderTests::randomCollapseBuilder);\n+                CollapseBuilderTests::randomCollapseBuilder,\n+                AbstractSearchTestCase::randomRandomMappings);\n+    }\n+\n+    public static Map<String, Object> randomRandomMappings() {", "originalCommit": "139ef5f0542361ff15af2dfd20d11a53c6c23c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5NzI1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519897259", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-11-09T15:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczOTYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1843ddbdabedec91ab2fdbb9313fa03e40dc7a2", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/AbstractSearchTestCase.java b/server/src/test/java/org/elasticsearch/search/AbstractSearchTestCase.java\nindex 7bef2d5811f..8b82205c5ef 100644\n--- a/server/src/test/java/org/elasticsearch/search/AbstractSearchTestCase.java\n+++ b/server/src/test/java/org/elasticsearch/search/AbstractSearchTestCase.java\n\n@@ -92,10 +92,10 @@ public abstract class AbstractSearchTestCase extends ESTestCase {\n                 QueryRescorerBuilderTests::randomRescoreBuilder,\n                 randomExtBuilders,\n                 CollapseBuilderTests::randomCollapseBuilder,\n-                AbstractSearchTestCase::randomRandomMappings);\n+                AbstractSearchTestCase::randomRuntimeMappings);\n     }\n \n-    public static Map<String, Object> randomRandomMappings() {\n+    public static Map<String, Object> randomRuntimeMappings() {\n         int count = between(1, 100);\n         Map<String, Object> runtimeFields = new HashMap<>(count);\n         while (runtimeFields.size() < count) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0MDk1NA==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519740954", "bodyText": "can you expand on why?", "author": "javanna", "createdAt": "2020-11-09T11:32:55Z", "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java", "diffHunk": "@@ -233,7 +235,8 @@ protected MultiSearchResponse shardOperation(Request request, ShardId shardId) t\n                     shardId.id(),\n                     searcher,\n                     () -> { throw new UnsupportedOperationException(); },\n-                    null\n+                    null,\n+                    emptyMap()  // Enrich doesn't support defining runtime fields", "originalCommit": "139ef5f0542361ff15af2dfd20d11a53c6c23c67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b336ff3f87026cb3d9481f74b16ba9841bdab266", "chunk": "diff --git a/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java b/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\nindex 44a9248aae8..52f821199a0 100644\n--- a/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\n+++ b/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\n\n@@ -231,12 +231,18 @@ public class EnrichShardMultiSearchAction extends ActionType<MultiSearchResponse\n             final IndexShard indexShard = indicesService.getShardOrNull(shardId);\n             try (Engine.Searcher searcher = indexShard.acquireSearcher(\"enrich_msearch\")) {\n                 final FieldsVisitor visitor = new FieldsVisitor(true);\n+                /*\n+                 * Enrich doesn't support defining runtime fields in the search\n+                 * request so we use an empty map to signal that they aren't\n+                 * any.\n+                 */\n+                Map<String, Object> runtimeFields = emptyMap();\n                 final QueryShardContext context = indexService.newQueryShardContext(\n                     shardId.id(),\n                     searcher,\n                     () -> { throw new UnsupportedOperationException(); },\n                     null,\n-                    emptyMap()  // Enrich doesn't support defining runtime fields\n+                    runtimeFields\n                 );\n                 final MultiSearchResponse.Item[] items = new MultiSearchResponse.Item[request.multiSearchRequest.requests().size()];\n                 for (int i = 0; i < request.multiSearchRequest.requests().size(); i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0NDExNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519744115", "bodyText": "can this be removed now?", "author": "javanna", "createdAt": "2020-11-09T11:38:49Z", "path": "x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.test.search;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Name;\n+import com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\n+\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.index.mapper.DateFieldMapper;\n+import org.elasticsearch.test.rest.yaml.ClientYamlTestCandidate;\n+import org.elasticsearch.test.rest.yaml.ESClientYamlSuiteTestCase;\n+import org.elasticsearch.test.rest.yaml.section.ApiCallSection;\n+import org.elasticsearch.test.rest.yaml.section.ExecutableSection;\n+import org.elasticsearch.xpack.runtimefields.test.CoreTestTranslater;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * Runs elasticsearch's core rest tests disabling all mappings and replacing them\n+ * with runtime fields defined on the search request that load from {@code _source}. Tests\n+ * that configure the field in a way that are not supported by runtime fields are skipped.\n+ */\n+public class CoreTestsWithSearchRuntimeFieldsIT extends ESClientYamlSuiteTestCase {\n+    public CoreTestsWithSearchRuntimeFieldsIT(@Name(\"yaml\") ClientYamlTestCandidate testCandidate) {\n+        super(testCandidate);\n+    }\n+\n+    @Override\n+    protected boolean randomizeContentType() { // NOCOMMIT remove me", "originalCommit": "139ef5f0542361ff15af2dfd20d11a53c6c23c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3MTA5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519871093", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-11-09T14:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0NDExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b336ff3f87026cb3d9481f74b16ba9841bdab266", "chunk": "diff --git a/x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java b/x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java\nindex 40723d997c9..02092699ecc 100644\n--- a/x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java\n+++ b/x-pack/plugin/runtime-fields/qa/core-with-search/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/test/search/CoreTestsWithSearchRuntimeFieldsIT.java\n\n@@ -37,11 +37,6 @@ public class CoreTestsWithSearchRuntimeFieldsIT extends ESClientYamlSuiteTestCas\n         super(testCandidate);\n     }\n \n-    @Override\n-    protected boolean randomizeContentType() { // NOCOMMIT remove me\n-        return false;\n-    }\n-\n     @ParametersFactory\n     public static Iterable<Object[]> parameters() throws Exception {\n         return new SearchRequestRuntimeFieldTranslater().parameters();\n"}}, {"oid": "a50d17a0b89d43e755422220f4254cb6eac1da0a", "url": "https://github.com/elastic/elasticsearch/commit/a50d17a0b89d43e755422220f4254cb6eac1da0a", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-09T14:39:52Z", "type": "commit"}, {"oid": "b336ff3f87026cb3d9481f74b16ba9841bdab266", "url": "https://github.com/elastic/elasticsearch/commit/b336ff3f87026cb3d9481f74b16ba9841bdab266", "message": "Iter", "committedDate": "2020-11-09T15:23:23Z", "type": "commit"}, {"oid": "f0f6d69aa3cdc93145955ee82d11ccfcd9735ff4", "url": "https://github.com/elastic/elasticsearch/commit/f0f6d69aa3cdc93145955ee82d11ccfcd9735ff4", "message": "Fixup", "committedDate": "2020-11-09T15:24:45Z", "type": "commit"}, {"oid": "218314e03d602f35d297a25d832d6db3db99fddd", "url": "https://github.com/elastic/elasticsearch/commit/218314e03d602f35d297a25d832d6db3db99fddd", "message": "remove TODO\n\nnot much duplication", "committedDate": "2020-11-09T15:26:17Z", "type": "commit"}, {"oid": "93ebadc911f207bad26818d08010b98ee17a4518", "url": "https://github.com/elastic/elasticsearch/commit/93ebadc911f207bad26818d08010b98ee17a4518", "message": "Drop noop change", "committedDate": "2020-11-09T15:27:37Z", "type": "commit"}, {"oid": "a1843ddbdabedec91ab2fdbb9313fa03e40dc7a2", "url": "https://github.com/elastic/elasticsearch/commit/a1843ddbdabedec91ab2fdbb9313fa03e40dc7a2", "message": "Clean up build", "committedDate": "2020-11-09T16:01:21Z", "type": "commit"}, {"oid": "34abd68240e9111965339454ee5361fff682cac6", "url": "https://github.com/elastic/elasticsearch/commit/34abd68240e9111965339454ee5361fff682cac6", "message": "Fail if sending runtime fields to old", "committedDate": "2020-11-09T16:25:22Z", "type": "commit"}, {"oid": "34abd68240e9111965339454ee5361fff682cac6", "url": "https://github.com/elastic/elasticsearch/commit/34abd68240e9111965339454ee5361fff682cac6", "message": "Fail if sending runtime fields to old", "committedDate": "2020-11-09T16:25:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0OTU1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519949559", "bodyText": "Maybe call this out as Version.V_8_0_0 explicitly so it doesn't start failing once master is on v9?", "author": "romseygeek", "createdAt": "2020-11-09T16:35:57Z", "path": "server/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java", "diffHunk": "@@ -93,16 +92,18 @@ private static void assertParseSearchSource(SearchSourceBuilder testBuilder, XCo\n     }\n \n     public void testSerialization() throws IOException {\n-        SearchSourceBuilder testBuilder = createSearchSourceBuilder();\n-        try (BytesStreamOutput output = new BytesStreamOutput()) {\n-            testBuilder.writeTo(output);\n-            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry)) {\n-                SearchSourceBuilder deserializedBuilder = new SearchSourceBuilder(in);\n-                assertEquals(deserializedBuilder, testBuilder);\n-                assertEquals(deserializedBuilder.hashCode(), testBuilder.hashCode());\n-                assertNotSame(deserializedBuilder, testBuilder);\n-            }\n-        }\n+        SearchSourceBuilder original = createSearchSourceBuilder();\n+        SearchSourceBuilder copy = copyBuilder(original);\n+        assertEquals(copy, original);\n+        assertEquals(copy.hashCode(), original.hashCode());\n+        assertNotSame(copy, original);\n+    }\n+\n+    public void testSerializingWithRuntimeFieldsBeforeSupportedThrows() {\n+        SearchSourceBuilder original = new SearchSourceBuilder().runtimeMappings(randomRuntimeMappings());\n+        Version v = Version.CURRENT.minimumCompatibilityVersion();", "originalCommit": "34abd68240e9111965339454ee5361fff682cac6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NDMzNw==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519954337", "bodyText": "When we go to v9.0.0 we'll want to remove the test anyway. Frankly, I think we'll blast the test as soon as I'm done backporting because we'll be able to send to 7.11.0. This v will be a bit more complex in the backport.", "author": "nik9000", "createdAt": "2020-11-09T16:42:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0OTU1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f91f5670c613baec68bbfb906e001f19e4bee97d", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java b/server/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java\nindex a219e5540d9..c68f8243640 100644\n--- a/server/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java\n\n@@ -101,7 +101,7 @@ public class SearchSourceBuilderTests extends AbstractSearchTestCase {\n \n     public void testSerializingWithRuntimeFieldsBeforeSupportedThrows() {\n         SearchSourceBuilder original = new SearchSourceBuilder().runtimeMappings(randomRuntimeMappings());\n-        Version v = Version.CURRENT.minimumCompatibilityVersion();\n+        Version v = Version.V_8_0_0.minimumCompatibilityVersion();\n         Exception e = expectThrows(IllegalArgumentException.class, () -> copyBuilder(original, v));\n         assertThat(e.getMessage(), equalTo(\"Versions before 8.0.0 don't support [runtime_mappings] and search was sent to [\" + v + \"]\"));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NzA1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519957051", "bodyText": "I was wondering about this line: is it good also for runtime fields?", "author": "javanna", "createdAt": "2020-11-09T16:45:34Z", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -287,12 +363,21 @@ public boolean isSourceEnabled() {\n      * Generally used to handle unmapped fields in the context of sorting.\n      */\n     public MappedFieldType buildAnonymousFieldType(String type) {\n-        final Mapper.TypeParser.ParserContext parserContext = mapperService.parserContext();\n+        return buildFieldType(type, \"__anonymous_\" + type, Collections.emptyMap(), mapperService.parserContext(), indexSettings);\n+    }\n+\n+    private static MappedFieldType buildFieldType(\n+        String type,\n+        String field,\n+        Map<String, Object> node,\n+        Mapper.TypeParser.ParserContext parserContext,\n+        IndexSettings indexSettings\n+    ) {\n         Mapper.TypeParser typeParser = parserContext.typeParser(type);\n         if (typeParser == null) {\n             throw new IllegalArgumentException(\"No mapper found for type [\" + type + \"]\");\n         }\n-        final Mapper.Builder builder = typeParser.parse(\"__anonymous_\" + type, Collections.emptyMap(), parserContext);\n+        Mapper.Builder builder = typeParser.parse(field, node, parserContext);\n         Mapper mapper = builder.build(new ContentPath(1));", "originalCommit": "34abd68240e9111965339454ee5361fff682cac6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2NDA0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519964043", "bodyText": "The new ContentPath(1) bit?", "author": "nik9000", "createdAt": "2020-11-09T16:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2NjM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519966381", "bodyText": "yes", "author": "javanna", "createdAt": "2020-11-09T16:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5MjY3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519992675", "bodyText": "I looked around a bit and I'm not sure why anonymous fields use 1 here instead of 0 or 123 or any other number. I think we don't end up in the positions of building a path to add anyway. I'll do some more experimenting to see if I can make something \"funny\" if this is set to 0.", "author": "nik9000", "createdAt": "2020-11-09T17:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NzA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2d8e2045a6eb6ba90933c9e5e152035d2492d4b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\nindex ec5d3140e99..07447cf790e 100644\n--- a/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\n+++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java\n\n@@ -378,7 +378,7 @@ public class QueryShardContext extends QueryRewriteContext {\n             throw new IllegalArgumentException(\"No mapper found for type [\" + type + \"]\");\n         }\n         Mapper.Builder builder = typeParser.parse(field, node, parserContext);\n-        Mapper mapper = builder.build(new ContentPath(1));\n+        Mapper mapper = builder.build(new ContentPath(0));\n         if (mapper instanceof FieldMapper) {\n             return ((FieldMapper)mapper).fieldType();\n         }\n"}}, {"oid": "f91f5670c613baec68bbfb906e001f19e4bee97d", "url": "https://github.com/elastic/elasticsearch/commit/f91f5670c613baec68bbfb906e001f19e4bee97d", "message": "Pin version", "committedDate": "2020-11-09T16:52:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2ODE3NA==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519968174", "bodyText": "shall we initialize it with empty list and make sure that it can never be null, then we can remove the boolean flag in the serialization methods?", "author": "javanna", "createdAt": "2020-11-09T16:56:55Z", "path": "server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java", "diffHunk": "@@ -191,6 +193,8 @@ public static HighlightBuilder highlight() {\n \n     private PointInTimeBuilder pointInTimeBuilder = null;\n \n+    private Map<String, Object> runtimeMappings = null;", "originalCommit": "f91f5670c613baec68bbfb906e001f19e4bee97d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3OTc5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519979797", "bodyText": "I was using the pattern from stuff like sort, but I see that lots of stuff uses the emptyMap style. I'll swap.", "author": "nik9000", "createdAt": "2020-11-09T17:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2ODE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f19c2c1cc3b5d468a2479f3d62f5d66953b54425", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java b/server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java\nindex 943f1a1aea1..09b62b36248 100644\n--- a/server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java\n\n@@ -193,7 +194,7 @@ public final class SearchSourceBuilder implements Writeable, ToXContentObject, R\n \n     private PointInTimeBuilder pointInTimeBuilder = null;\n \n-    private Map<String, Object> runtimeMappings = null;\n+    private Map<String, Object> runtimeMappings = emptyMap();\n \n     /**\n      * Constructs a new search source builder.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MTk5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519971993", "bodyText": "can you extract this behaviour to the description of the PR so it is highlighted? I think it makes sense but it differs from how we've done these things in the past.", "author": "javanna", "createdAt": "2020-11-09T17:02:14Z", "path": "server/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java", "diffHunk": "@@ -93,16 +92,18 @@ private static void assertParseSearchSource(SearchSourceBuilder testBuilder, XCo\n     }\n \n     public void testSerialization() throws IOException {\n-        SearchSourceBuilder testBuilder = createSearchSourceBuilder();\n-        try (BytesStreamOutput output = new BytesStreamOutput()) {\n-            testBuilder.writeTo(output);\n-            try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), namedWriteableRegistry)) {\n-                SearchSourceBuilder deserializedBuilder = new SearchSourceBuilder(in);\n-                assertEquals(deserializedBuilder, testBuilder);\n-                assertEquals(deserializedBuilder.hashCode(), testBuilder.hashCode());\n-                assertNotSame(deserializedBuilder, testBuilder);\n-            }\n-        }\n+        SearchSourceBuilder original = createSearchSourceBuilder();\n+        SearchSourceBuilder copy = copyBuilder(original);\n+        assertEquals(copy, original);\n+        assertEquals(copy.hashCode(), original.hashCode());\n+        assertNotSame(copy, original);\n+    }\n+\n+    public void testSerializingWithRuntimeFieldsBeforeSupportedThrows() {\n+        SearchSourceBuilder original = new SearchSourceBuilder().runtimeMappings(randomRuntimeMappings());\n+        Version v = Version.V_8_0_0.minimumCompatibilityVersion();\n+        Exception e = expectThrows(IllegalArgumentException.class, () -> copyBuilder(original, v));\n+        assertThat(e.getMessage(), equalTo(\"Versions before 8.0.0 don't support [runtime_mappings] and search was sent to [\" + v + \"]\"));", "originalCommit": "f91f5670c613baec68bbfb906e001f19e4bee97d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3ODU3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519978575", "bodyText": "I do this most of the time I implement something. But, sure!", "author": "nik9000", "createdAt": "2020-11-09T17:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MTk5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MjU5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519972595", "bodyText": "you have expanded the comment but not the why :) What made you decide that enrich does not support runtime fields defined in the search request?", "author": "javanna", "createdAt": "2020-11-09T17:03:05Z", "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java", "diffHunk": "@@ -229,11 +231,18 @@ protected MultiSearchResponse shardOperation(Request request, ShardId shardId) t\n             final IndexShard indexShard = indicesService.getShardOrNull(shardId);\n             try (Engine.Searcher searcher = indexShard.acquireSearcher(\"enrich_msearch\")) {\n                 final FieldsVisitor visitor = new FieldsVisitor(true);\n+                /*\n+                 * Enrich doesn't support defining runtime fields in the search", "originalCommit": "f91f5670c613baec68bbfb906e001f19e4bee97d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3ODMxNw==", "url": "https://github.com/elastic/elasticsearch/pull/64374#discussion_r519978317", "bodyText": "I didn't so much make the choice as not add it as a new feature. I'll send a new comment.", "author": "nik9000", "createdAt": "2020-11-09T17:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MjU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2d8e2045a6eb6ba90933c9e5e152035d2492d4b", "chunk": "diff --git a/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java b/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\nindex 52f821199a0..7cd1e853669 100644\n--- a/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\n+++ b/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichShardMultiSearchAction.java\n\n@@ -232,8 +232,10 @@ public class EnrichShardMultiSearchAction extends ActionType<MultiSearchResponse\n             try (Engine.Searcher searcher = indexShard.acquireSearcher(\"enrich_msearch\")) {\n                 final FieldsVisitor visitor = new FieldsVisitor(true);\n                 /*\n-                 * Enrich doesn't support defining runtime fields in the search\n-                 * request so we use an empty map to signal that they aren't\n+                 * Enrich doesn't support defining runtime fields in its\n+                 * configuration. We could add support for that if we'd\n+                 * like it but, for now at least, you can't configure any\n+                 * runtime fields so it is safe to build the context without\n                  * any.\n                  */\n                 Map<String, Object> runtimeFields = emptyMap();\n"}}, {"oid": "a2d8e2045a6eb6ba90933c9e5e152035d2492d4b", "url": "https://github.com/elastic/elasticsearch/commit/a2d8e2045a6eb6ba90933c9e5e152035d2492d4b", "message": "iter", "committedDate": "2020-11-09T17:32:48Z", "type": "commit"}, {"oid": "f19c2c1cc3b5d468a2479f3d62f5d66953b54425", "url": "https://github.com/elastic/elasticsearch/commit/f19c2c1cc3b5d468a2479f3d62f5d66953b54425", "message": "Default to emptyMap", "committedDate": "2020-11-09T17:52:00Z", "type": "commit"}, {"oid": "993e784ade5ce7c2522cfe9c5d136bff1c475902", "url": "https://github.com/elastic/elasticsearch/commit/993e784ade5ce7c2522cfe9c5d136bff1c475902", "message": "Merge branch 'master' into runtime_mappings", "committedDate": "2020-11-09T17:58:25Z", "type": "commit"}, {"oid": "862d02adbadba602aebcaaf6bb04fe122bde11ce", "url": "https://github.com/elastic/elasticsearch/commit/862d02adbadba602aebcaaf6bb04fe122bde11ce", "message": "fixup", "committedDate": "2020-11-09T18:08:31Z", "type": "commit"}, {"oid": "3a26fe4a0671555d1cf14bf04535e79f7b9e9b38", "url": "https://github.com/elastic/elasticsearch/commit/3a26fe4a0671555d1cf14bf04535e79f7b9e9b38", "message": "iter", "committedDate": "2020-11-09T18:10:44Z", "type": "commit"}, {"oid": "f66b3e2024f2628451141eaa7e3be9b3c61c8d41", "url": "https://github.com/elastic/elasticsearch/commit/f66b3e2024f2628451141eaa7e3be9b3c61c8d41", "message": "Put it back", "committedDate": "2020-11-09T19:08:07Z", "type": "commit"}, {"oid": "6dfb44fe9a5b2b01cb42b56da45b9e8f9a3ff8dc", "url": "https://github.com/elastic/elasticsearch/commit/6dfb44fe9a5b2b01cb42b56da45b9e8f9a3ff8dc", "message": "Fixup", "committedDate": "2020-11-09T20:05:02Z", "type": "commit"}]}