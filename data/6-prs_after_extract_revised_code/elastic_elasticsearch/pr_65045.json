{"pr_number": 65045, "pr_title": "Optimize shard sorting logic for allocation.", "pr_createdAt": "2020-11-16T08:00:02Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65045", "timeline": [{"oid": "be53a1b6dc5ced6cc6ba76771217470d986a3498", "url": "https://github.com/elastic/elasticsearch/commit/be53a1b6dc5ced6cc6ba76771217470d986a3498", "message": "Optimize shard sort logic for allocation.", "committedDate": "2020-11-16T07:46:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2MDM1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/65045#discussion_r523960355", "bodyText": "What you're saying is that this line always returns something nonzero. I think you're right, but would you add an assertion to that effect?", "author": "DaveCTurner", "createdAt": "2020-11-16T08:15:32Z", "path": "server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java", "diffHunk": "@@ -770,16 +770,14 @@ private void allocateUnassigned() {\n                 if (o1.primary() ^ o2.primary()) {\n                     return o1.primary() ? -1 : 1;\n                 }\n-                final int indexCmp;\n-                if ((indexCmp = o1.getIndexName().compareTo(o2.getIndexName())) == 0) {\n+                if (o1.getIndexName().compareTo(o2.getIndexName()) == 0) {\n                     return o1.getId() - o2.getId();\n                 }\n                 // this comparator is more expensive than all the others up there\n                 // that's why it's added last even though it could be easier to read\n                 // if we'd apply it earlier. this comparator will only differentiate across\n                 // indices all shards of the same index is treated equally.\n-                final int secondary = secondaryComparator.compare(o1, o2);\n-                return secondary == 0 ? indexCmp : secondary;\n+                return secondaryComparator.compare(o1, o2);", "originalCommit": "be53a1b6dc5ced6cc6ba76771217470d986a3498", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NzgxNg==", "url": "https://github.com/elastic/elasticsearch/pull/65045#discussion_r523967816", "bodyText": "Hi @DaveCTurner , assertion added. Thanks.", "author": "howardhuanghua", "createdAt": "2020-11-16T08:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2MDM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "69c94a678ad0d77001a843fa9c460677ce84e03f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java\nindex 5f3964dcd26..177023f2980 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java\n\n@@ -777,7 +777,9 @@ public class BalancedShardsAllocator implements ShardsAllocator {\n                 // that's why it's added last even though it could be easier to read\n                 // if we'd apply it earlier. this comparator will only differentiate across\n                 // indices all shards of the same index is treated equally.\n-                return secondaryComparator.compare(o1, o2);\n+                final int secondary = secondaryComparator.compare(o1, o2);\n+                assert secondary != 0 : \"Index names are equal, should be returned early.\";\n+                return secondary;\n             };\n             /*\n              * we use 2 arrays and move replicas to the second array once we allocated an identical\n"}}, {"oid": "69c94a678ad0d77001a843fa9c460677ce84e03f", "url": "https://github.com/elastic/elasticsearch/commit/69c94a678ad0d77001a843fa9c460677ce84e03f", "message": "add assertion to make sure index names are not equal.", "committedDate": "2020-11-16T08:28:28Z", "type": "commit"}]}