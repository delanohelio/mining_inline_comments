{"pr_number": 53685, "pr_title": "Merge analyze and write phases in Painless \"user\" tree", "pr_createdAt": "2020-03-17T17:31:07Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53685", "timeline": [{"oid": "0b79ef6cce1f104dcae348064e0f4e6ae7c00202", "url": "https://github.com/elastic/elasticsearch/commit/0b79ef6cce1f104dcae348064e0f4e6ae7c00202", "message": "remove isNull from AExpression", "committedDate": "2020-02-26T18:49:14Z", "type": "commit"}, {"oid": "73256422481516411cbb40a9b5b4c5adf3251bbd", "url": "https://github.com/elastic/elasticsearch/commit/73256422481516411cbb40a9b5b4c5adf3251bbd", "message": "remove explicit cast optimization", "committedDate": "2020-02-26T18:54:14Z", "type": "commit"}, {"oid": "6e414972a159844347bc414fb1b124d5335b1f58", "url": "https://github.com/elastic/elasticsearch/commit/6e414972a159844347bc414fb1b124d5335b1f58", "message": "remove modification of semantic tree for casting", "committedDate": "2020-02-26T19:51:51Z", "type": "commit"}, {"oid": "247080b292a621c41b4c8c360f40378e2bff2ea4", "url": "https://github.com/elastic/elasticsearch/commit/247080b292a621c41b4c8c360f40378e2bff2ea4", "message": "remove ECast node", "committedDate": "2020-02-26T20:07:16Z", "type": "commit"}, {"oid": "63e904f6abf0a97b2269df137f8123d4d1094775", "url": "https://github.com/elastic/elasticsearch/commit/63e904f6abf0a97b2269df137f8123d4d1094775", "message": "Merge branch 'master' into trees11", "committedDate": "2020-02-26T20:24:37Z", "type": "commit"}, {"oid": "0e126117911dfadc1f60c01540c225d4f913b9e8", "url": "https://github.com/elastic/elasticsearch/commit/0e126117911dfadc1f60c01540c225d4f913b9e8", "message": "start of input/output in expressions", "committedDate": "2020-02-26T20:29:20Z", "type": "commit"}, {"oid": "f7ae0e7303c495099bec1a1e8e1318c1bd70e9e0", "url": "https://github.com/elastic/elasticsearch/commit/f7ae0e7303c495099bec1a1e8e1318c1bd70e9e0", "message": "partial change for input and output in expression nodes", "committedDate": "2020-02-26T20:32:20Z", "type": "commit"}, {"oid": "3a2b443237d5dc86a460ea842c9baa7efb7aacb7", "url": "https://github.com/elastic/elasticsearch/commit/3a2b443237d5dc86a460ea842c9baa7efb7aacb7", "message": "add input/output objects for expressions", "committedDate": "2020-02-26T21:05:07Z", "type": "commit"}, {"oid": "8dfb933a3dd14f1224a2b1929604efd27a2c074b", "url": "https://github.com/elastic/elasticsearch/commit/8dfb933a3dd14f1224a2b1929604efd27a2c074b", "message": "fix shift bug in EBinary", "committedDate": "2020-02-26T21:05:27Z", "type": "commit"}, {"oid": "6a811decb652cf458aa603da9d80b6b8e922bdd1", "url": "https://github.com/elastic/elasticsearch/commit/6a811decb652cf458aa603da9d80b6b8e922bdd1", "message": "add input/output to statements", "committedDate": "2020-02-26T22:21:10Z", "type": "commit"}, {"oid": "07180d922b792873c2c782e5173db2fea614a463", "url": "https://github.com/elastic/elasticsearch/commit/07180d922b792873c2c782e5173db2fea614a463", "message": "Merge branch 'master' into trees11", "committedDate": "2020-03-02T16:28:13Z", "type": "commit"}, {"oid": "02f7bb96bc10203e3c55228dfcb4bb711f0f3705", "url": "https://github.com/elastic/elasticsearch/commit/02f7bb96bc10203e3c55228dfcb4bb711f0f3705", "message": "Merge branch 'trees11' into trees12", "committedDate": "2020-03-02T16:28:28Z", "type": "commit"}, {"oid": "ab9c2c7a5d151a402326e1e4e71058c5b9cee7cc", "url": "https://github.com/elastic/elasticsearch/commit/ab9c2c7a5d151a402326e1e4e71058c5b9cee7cc", "message": "Merge branch 'trees12' into trees13", "committedDate": "2020-03-02T20:17:29Z", "type": "commit"}, {"oid": "115c8e0dabfd8add0e5615c436543eeb6df8b876", "url": "https://github.com/elastic/elasticsearch/commit/115c8e0dabfd8add0e5615c436543eeb6df8b876", "message": "response to pr comment", "committedDate": "2020-03-02T23:51:02Z", "type": "commit"}, {"oid": "9a96289a5b29bfe1eec5dd5e9a6cd7322b09c8ac", "url": "https://github.com/elastic/elasticsearch/commit/9a96289a5b29bfe1eec5dd5e9a6cd7322b09c8ac", "message": "Merge branch 'master' into trees11", "committedDate": "2020-03-03T00:53:27Z", "type": "commit"}, {"oid": "d23d394638cbf67bd66b476327eb2eecd2c3da4e", "url": "https://github.com/elastic/elasticsearch/commit/d23d394638cbf67bd66b476327eb2eecd2c3da4e", "message": "Merge branch 'trees11' into trees12", "committedDate": "2020-03-03T00:58:37Z", "type": "commit"}, {"oid": "3d6018ca222f19d9a96496cd71245bec3f515ab5", "url": "https://github.com/elastic/elasticsearch/commit/3d6018ca222f19d9a96496cd71245bec3f515ab5", "message": "Merge branch 'trees12' into trees13", "committedDate": "2020-03-03T00:58:51Z", "type": "commit"}, {"oid": "39a8806da415ba1691046c659f214a7300b34681", "url": "https://github.com/elastic/elasticsearch/commit/39a8806da415ba1691046c659f214a7300b34681", "message": "Merge branch 'master' into trees12", "committedDate": "2020-03-03T19:36:31Z", "type": "commit"}, {"oid": "55364296b579d118849ddac36c8fa1541a05b467", "url": "https://github.com/elastic/elasticsearch/commit/55364296b579d118849ddac36c8fa1541a05b467", "message": "Merge branch 'trees12' into trees13", "committedDate": "2020-03-03T19:38:35Z", "type": "commit"}, {"oid": "ceb8967dc45e72e37cc22ac9e0dbcbbaacd8cd42", "url": "https://github.com/elastic/elasticsearch/commit/ceb8967dc45e72e37cc22ac9e0dbcbbaacd8cd42", "message": "t Merge branch 'master' into trees12", "committedDate": "2020-03-09T16:35:00Z", "type": "commit"}, {"oid": "f65d4a76e9e40d4da236932fed508897efa16c84", "url": "https://github.com/elastic/elasticsearch/commit/f65d4a76e9e40d4da236932fed508897efa16c84", "message": "Merge branch 'trees12' into trees13", "committedDate": "2020-03-09T16:35:19Z", "type": "commit"}, {"oid": "d9061478d29eb56148cda18350fc039fbceeaf4d", "url": "https://github.com/elastic/elasticsearch/commit/d9061478d29eb56148cda18350fc039fbceeaf4d", "message": "Merge branch 'master' into trees12", "committedDate": "2020-03-09T20:52:46Z", "type": "commit"}, {"oid": "08cf4768313147b745df85e77dff2f1bba8928cb", "url": "https://github.com/elastic/elasticsearch/commit/08cf4768313147b745df85e77dff2f1bba8928cb", "message": "Merge branch 'trees12' into trees13", "committedDate": "2020-03-09T20:53:04Z", "type": "commit"}, {"oid": "94891dc7731709a204b3cf3602b8d6301f549eb9", "url": "https://github.com/elastic/elasticsearch/commit/94891dc7731709a204b3cf3602b8d6301f549eb9", "message": "Merge branch 'trees12' into trees15", "committedDate": "2020-03-09T20:53:48Z", "type": "commit"}, {"oid": "5ef8186149cc5f6c8f26609e7f2866b286b223c8", "url": "https://github.com/elastic/elasticsearch/commit/5ef8186149cc5f6c8f26609e7f2866b286b223c8", "message": "Merge branch 'master' into trees13", "committedDate": "2020-03-09T22:02:34Z", "type": "commit"}, {"oid": "4e13cb3372146d86ba847341dabd84c8492a68a5", "url": "https://github.com/elastic/elasticsearch/commit/4e13cb3372146d86ba847341dabd84c8492a68a5", "message": "Merge branch 'trees13' into trees15", "committedDate": "2020-03-09T22:02:59Z", "type": "commit"}, {"oid": "a92f642274a0784be6c0ee44f983c0a97969e3d9", "url": "https://github.com/elastic/elasticsearch/commit/a92f642274a0784be6c0ee44f983c0a97969e3d9", "message": "Merge branch 'master' into trees13", "committedDate": "2020-03-10T15:57:19Z", "type": "commit"}, {"oid": "f140b25aad4eea1d7116f02db41cb831fa10c59a", "url": "https://github.com/elastic/elasticsearch/commit/f140b25aad4eea1d7116f02db41cb831fa10c59a", "message": "Merge branch 'trees13' into trees15", "committedDate": "2020-03-10T15:57:34Z", "type": "commit"}, {"oid": "dd407758e5475104aed77ac40d41459853c24694", "url": "https://github.com/elastic/elasticsearch/commit/dd407758e5475104aed77ac40d41459853c24694", "message": "updated expression nodes to remove member state", "committedDate": "2020-03-10T19:58:24Z", "type": "commit"}, {"oid": "7f6e5d679ec7af2beeb30ec48780b9276fa394f5", "url": "https://github.com/elastic/elasticsearch/commit/7f6e5d679ec7af2beeb30ec48780b9276fa394f5", "message": "update statements to remove most mutable state", "committedDate": "2020-03-10T22:02:34Z", "type": "commit"}, {"oid": "79a801b4a0d223b37f3b450c265bf234f33b2e94", "url": "https://github.com/elastic/elasticsearch/commit/79a801b4a0d223b37f3b450c265bf234f33b2e94", "message": "fix def optimization", "committedDate": "2020-03-10T22:39:21Z", "type": "commit"}, {"oid": "b3f52b3bbab4bdae27da895b35d9608900463a8b", "url": "https://github.com/elastic/elasticsearch/commit/b3f52b3bbab4bdae27da895b35d9608900463a8b", "message": "remove SField", "committedDate": "2020-03-10T22:45:28Z", "type": "commit"}, {"oid": "074b7e52becdaaf1efc400f429a60b6ed68858d8", "url": "https://github.com/elastic/elasticsearch/commit/074b7e52becdaaf1efc400f429a60b6ed68858d8", "message": "fix def optimization in assignment", "committedDate": "2020-03-10T23:11:26Z", "type": "commit"}, {"oid": "b79c54c1eb7fa0531e4d2f95b4bd5bb114870170", "url": "https://github.com/elastic/elasticsearch/commit/b79c54c1eb7fa0531e4d2f95b4bd5bb114870170", "message": "response to pr comments", "committedDate": "2020-03-13T20:11:08Z", "type": "commit"}, {"oid": "e7cbaaa2a4c53f243ace54755bdf604a2e8d4cc5", "url": "https://github.com/elastic/elasticsearch/commit/e7cbaaa2a4c53f243ace54755bdf604a2e8d4cc5", "message": "Merge branch 'master' into trees13", "committedDate": "2020-03-13T20:32:49Z", "type": "commit"}, {"oid": "5e16f35184bfa86b6cb35c791205dffc708104fa", "url": "https://github.com/elastic/elasticsearch/commit/5e16f35184bfa86b6cb35c791205dffc708104fa", "message": "Merge branch 'master' into trees13", "committedDate": "2020-03-16T15:01:44Z", "type": "commit"}, {"oid": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "url": "https://github.com/elastic/elasticsearch/commit/a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "message": "Merge branch 'trees13' into trees15", "committedDate": "2020-03-16T15:29:50Z", "type": "commit"}, {"oid": "73f9d12fb7a242bec7f2587f9e89c227d3706021", "url": "https://github.com/elastic/elasticsearch/commit/73f9d12fb7a242bec7f2587f9e89c227d3706021", "message": "Merge branch 'master' into trees15", "committedDate": "2020-03-17T15:57:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTUzMA==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395339530", "bodyText": "Consider changing this to i.", "author": "stu-elastic", "createdAt": "2020-03-19T21:50:15Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EListInit.java", "diffHunk": "@@ -29,76 +29,75 @@\n import org.elasticsearch.painless.symbol.ScriptRoot;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n \n import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n \n /**\n  * Represents a list initialization shortcut.\n  */\n-public final class EListInit extends AExpression {\n-    private final List<AExpression> values;\n+public class EListInit extends AExpression {\n \n-    private PainlessConstructor constructor = null;\n-    private PainlessMethod method = null;\n+    protected final List<AExpression> values;\n \n     public EListInit(Location location, List<AExpression> values) {\n         super(location);\n \n-        this.values = values;\n+        this.values = Collections.unmodifiableList(Objects.requireNonNull(values));\n     }\n \n     @Override\n-    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n-        this.input = input;\n-        output = new Output();\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        Output output = new Output();\n \n         if (input.read == false) {\n             throw createError(new IllegalArgumentException(\"Must read from list initializer.\"));\n         }\n \n         output.actual = ArrayList.class;\n \n-        constructor = scriptRoot.getPainlessLookup().lookupPainlessConstructor(output.actual, 0);\n+        PainlessConstructor constructor = scriptRoot.getPainlessLookup().lookupPainlessConstructor(output.actual, 0);\n \n         if (constructor == null) {\n             throw createError(new IllegalArgumentException(\n                     \"constructor [\" + typeToCanonicalTypeName(output.actual) + \", <init>/0] not found\"));\n         }\n \n-        method = scriptRoot.getPainlessLookup().lookupPainlessMethod(output.actual, false, \"add\", 1);\n+        PainlessMethod method = scriptRoot.getPainlessLookup().lookupPainlessMethod(output.actual, false, \"add\", 1);\n \n         if (method == null) {\n             throw createError(new IllegalArgumentException(\"method [\" + typeToCanonicalTypeName(output.actual) + \", add/1] not found\"));\n         }\n \n+        List<Output> valueOutputs = new ArrayList<>(values.size());\n+\n         for (int index = 0; index < values.size(); ++index) {\n             AExpression expression = values.get(index);\n \n             Input expressionInput = new Input();\n             expressionInput.expected = def.class;\n             expressionInput.internal = true;\n-            expression.analyze(scriptRoot, scope, expressionInput);\n-            expression.cast();\n+            Output expressionOutput = expression.analyze(classNode, scriptRoot, scope, expressionInput);\n+            expression.cast(expressionInput, expressionOutput);\n+            valueOutputs.add(expressionOutput);\n         }\n \n-        return output;\n-    }\n-\n-    @Override\n-    ListInitializationNode write(ClassNode classNode) {\n         ListInitializationNode listInitializationNode = new ListInitializationNode();\n \n-        for (AExpression value : values) {\n-            listInitializationNode.addArgumentNode(value.cast(value.write(classNode)));\n+        for (int value = 0; value < values.size(); ++value) {", "originalCommit": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5MTg4OA==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396691888", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-03-23T19:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EListInit.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EListInit.java\nindex 30fa7b2f2f1..cb49bce8a11 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EListInit.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EListInit.java\n\n@@ -29,28 +29,29 @@ import org.elasticsearch.painless.lookup.def;\n import org.elasticsearch.painless.symbol.ScriptRoot;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n \n import static org.elasticsearch.painless.lookup.PainlessLookupUtility.typeToCanonicalTypeName;\n \n /**\n  * Represents a list initialization shortcut.\n  */\n-public class EListInit extends AExpression {\n+public final class EListInit extends AExpression {\n+    private final List<AExpression> values;\n \n-    protected final List<AExpression> values;\n+    private PainlessConstructor constructor = null;\n+    private PainlessMethod method = null;\n \n     public EListInit(Location location, List<AExpression> values) {\n         super(location);\n \n-        this.values = Collections.unmodifiableList(Objects.requireNonNull(values));\n+        this.values = values;\n     }\n \n     @Override\n-    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n-        Output output = new Output();\n+    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n+        this.input = input;\n+        output = new Output();\n \n         if (input.read == false) {\n             throw createError(new IllegalArgumentException(\"Must read from list initializer.\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MDY2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395340661", "bodyText": "i", "author": "stu-elastic", "createdAt": "2020-03-19T21:53:01Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArray.java", "diffHunk": "@@ -60,34 +61,34 @@ Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n             throw createError(new IllegalArgumentException(\"Not a type [\" + this.type + \"].\"));\n         }\n \n+        List<Output> argumentOutputs = new ArrayList<>();\n+\n         for (int argument = 0; argument < arguments.size(); ++argument) {\n             AExpression expression = arguments.get(argument);\n \n             Input expressionInput = new Input();\n             expressionInput.expected = initialize ? clazz.getComponentType() : int.class;\n             expressionInput.internal = true;\n-            expression.analyze(scriptRoot, scope, expressionInput);\n-            expression.cast();\n+            Output expressionOutput = expression.analyze(classNode, scriptRoot, scope, expressionInput);\n+            expression.cast(expressionInput, expressionOutput);\n+            argumentOutputs.add(expressionOutput);\n         }\n \n         output.actual = clazz;\n \n-        return output;\n-    }\n-\n-    @Override\n-    NewArrayNode write(ClassNode classNode) {\n         NewArrayNode newArrayNode = new NewArrayNode();\n \n-        for (AExpression argument : arguments) {\n-            newArrayNode.addArgumentNode(argument.cast(argument.write(classNode)));\n+        for (int argument = 0; argument < arguments.size(); ++ argument) {", "originalCommit": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Mjc4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396692787", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-03-23T19:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MDY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArray.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArray.java\nindex ba11a3bc28f..73603d79e6c 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArray.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArray.java\n\n@@ -61,34 +60,34 @@ public class ENewArray extends AExpression {\n             throw createError(new IllegalArgumentException(\"Not a type [\" + this.type + \"].\"));\n         }\n \n-        List<Output> argumentOutputs = new ArrayList<>();\n-\n         for (int argument = 0; argument < arguments.size(); ++argument) {\n             AExpression expression = arguments.get(argument);\n \n             Input expressionInput = new Input();\n             expressionInput.expected = initialize ? clazz.getComponentType() : int.class;\n             expressionInput.internal = true;\n-            Output expressionOutput = expression.analyze(classNode, scriptRoot, scope, expressionInput);\n-            expression.cast(expressionInput, expressionOutput);\n-            argumentOutputs.add(expressionOutput);\n+            expression.analyze(scriptRoot, scope, expressionInput);\n+            expression.cast();\n         }\n \n         output.actual = clazz;\n \n+        return output;\n+    }\n+\n+    @Override\n+    NewArrayNode write(ClassNode classNode) {\n         NewArrayNode newArrayNode = new NewArrayNode();\n \n-        for (int argument = 0; argument < arguments.size(); ++ argument) {\n-            newArrayNode.addArgumentNode(arguments.get(argument).cast(argumentOutputs.get(argument)));\n+        for (AExpression argument : arguments) {\n+            newArrayNode.addArgumentNode(argument.cast(argument.write(classNode)));\n         }\n \n         newArrayNode.setLocation(location);\n         newArrayNode.setExpressionType(output.actual);\n         newArrayNode.setInitialize(initialize);\n \n-        output.expressionNode = newArrayNode;\n-\n-        return output;\n+        return newArrayNode;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MTE4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395341185", "bodyText": "If this isn't gonna get fixed right away, consider cutting an issue to address this.", "author": "stu-elastic", "createdAt": "2020-03-19T21:54:25Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java", "diffHunk": "@@ -34,11 +35,11 @@\n /**\n  * Represents a function reference.\n  */\n-public final class ENewArrayFunctionRef extends AExpression implements ILambda {\n-    private final String type;\n+public class ENewArrayFunctionRef extends AExpression implements ILambda {\n \n-    private SFunction function;\n-    private FunctionRef ref;\n+    protected final String type;\n+\n+    // TODO: make local", "originalCommit": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMDI1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396710252", "bodyText": "Added issue.", "author": "jdconrad", "createdAt": "2020-03-23T19:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MTE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java\nindex 32162b74c94..0a132c12e5a 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java\n\n@@ -35,11 +34,11 @@ import java.util.Objects;\n /**\n  * Represents a function reference.\n  */\n-public class ENewArrayFunctionRef extends AExpression implements ILambda {\n+public final class ENewArrayFunctionRef extends AExpression implements ILambda {\n+    private final String type;\n \n-    protected final String type;\n-\n-    // TODO: make local\n+    private SFunction function;\n+    private FunctionRef ref;\n     private String defPointer;\n \n     public ENewArrayFunctionRef(Location location, String type) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MTY4OA==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395341688", "bodyText": "Consider moving this closer to assignment.", "author": "stu-elastic", "createdAt": "2020-03-19T21:55:35Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java", "diffHunk": "@@ -48,17 +49,18 @@ public ENewArrayFunctionRef(Location location, String type) {\n     }\n \n     @Override\n-    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n-        this.input = input;\n-        output = new Output();\n+    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n+        FunctionRef ref;", "originalCommit": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMzM5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396713396", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-03-23T19:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MTY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java\nindex 32162b74c94..0a132c12e5a 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENewArrayFunctionRef.java\n\n@@ -49,18 +48,17 @@ public class ENewArrayFunctionRef extends AExpression implements ILambda {\n     }\n \n     @Override\n-    Output analyze(ClassNode classNode, ScriptRoot scriptRoot, Scope scope, Input input) {\n-        FunctionRef ref;\n-\n-        Output output = new Output();\n+    Output analyze(ScriptRoot scriptRoot, Scope scope, Input input) {\n+        this.input = input;\n+        output = new Output();\n \n         SReturn code = new SReturn(location, new ENewArray(location, type, Arrays.asList(new EVariable(location, \"size\")), false));\n-        SFunction function = new SFunction(\n+        function = new SFunction(\n                 location, type, scriptRoot.getNextSyntheticName(\"newarray\"),\n                 Collections.singletonList(\"int\"), Collections.singletonList(\"size\"),\n                 new SBlock(location, Collections.singletonList(code)), true, true, true, false);\n         function.generateSignature(scriptRoot.getPainlessLookup());\n-        FunctionNode functionNode = function.writeFunction(classNode, scriptRoot);\n+        function.analyze(scriptRoot);\n         scriptRoot.getFunctionTable().addFunction(function.name, function.returnType, function.typeParameters, true, true);\n \n         if (input.expected == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0Mjc3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395342773", "bodyText": "If these aren't going to be the extension point, no need to change visibility.", "author": "stu-elastic", "createdAt": "2020-03-19T21:58:10Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENumeric.java", "diffHunk": "@@ -23,20 +23,17 @@\n import org.elasticsearch.painless.Scope;\n import org.elasticsearch.painless.ir.ClassNode;\n import org.elasticsearch.painless.ir.ConstantNode;\n-import org.elasticsearch.painless.ir.ExpressionNode;\n import org.elasticsearch.painless.symbol.ScriptRoot;\n \n import java.util.Objects;\n \n /**\n  * Represents a non-decimal numeric constant.\n  */\n-public final class ENumeric extends AExpression {\n+public class ENumeric extends AExpression {\n \n-    private final String value;\n-    private int radix;\n-\n-    protected Object constant;\n+    protected final String value;", "originalCommit": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNDUyMw==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396704523", "bodyText": "If it's all right I would like to leave this for now as extending the nodes is currently the only way to do an extension point in the user tree. As other design ideas are explored, it seems more appropriate to modify them then.\nEdit: especially, as a better design is not a guarantee right now", "author": "jdconrad", "createdAt": "2020-03-23T19:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0Mjc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENumeric.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENumeric.java\nindex 1e548252f1a..f7cbe681b63 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENumeric.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ENumeric.java\n\n@@ -23,6 +23,7 @@ import org.elasticsearch.painless.Location;\n import org.elasticsearch.painless.Scope;\n import org.elasticsearch.painless.ir.ClassNode;\n import org.elasticsearch.painless.ir.ConstantNode;\n+import org.elasticsearch.painless.ir.ExpressionNode;\n import org.elasticsearch.painless.symbol.ScriptRoot;\n \n import java.util.Objects;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDk3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395344979", "bodyText": "Punt to issue.", "author": "stu-elastic", "createdAt": "2020-03-19T22:03:30Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PBrace.java", "diffHunk": "@@ -34,11 +34,12 @@\n /**\n  * Represents an array load/store and defers to a child subnode.\n  */\n-public final class PBrace extends AStoreable {\n+public class PBrace extends AStoreable {\n \n-    private AExpression index;\n+    protected final AExpression index;\n \n-    private AStoreable sub = null;\n+    // TODO: make local", "originalCommit": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxNDA4NA==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396714084", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-03-23T19:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PBrace.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PBrace.java\nindex a76bab35881..684b015aa83 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PBrace.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/PBrace.java\n\n@@ -34,12 +34,11 @@ import java.util.Objects;\n /**\n  * Represents an array load/store and defers to a child subnode.\n  */\n-public class PBrace extends AStoreable {\n+public final class PBrace extends AStoreable {\n \n-    protected final AExpression index;\n+    private AExpression index;\n \n-    // TODO: make local\n-    private boolean isDefOptimized = false;\n+    private AStoreable sub = null;\n \n     public PBrace(Location location, AExpression prefix, AExpression index) {\n         super(location, prefix);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODA0NA==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r395348044", "bodyText": "Punt to issue.", "author": "stu-elastic", "createdAt": "2020-03-19T22:11:13Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java", "diffHunk": "@@ -121,7 +118,8 @@ void generateSignature(PainlessLookup painlessLookup) {\n                 PainlessLookupUtility.typeToJavaType(returnType), paramClasses).toMethodDescriptorString());\n     }\n \n-    void analyze(ScriptRoot scriptRoot) {\n+    // TODO: decouple from ir", "originalCommit": "a6a0b3be7c0e7f8d018c17a9a849127b16d119b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxNDgzNA==", "url": "https://github.com/elastic/elasticsearch/pull/53685#discussion_r396714834", "bodyText": "Removed as this TODO no longer makes sense.", "author": "jdconrad", "createdAt": "2020-03-23T19:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java\nindex 9efbeebd0fe..96bf040099a 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java\n\n@@ -118,8 +121,7 @@ public class SFunction extends ANode {\n                 PainlessLookupUtility.typeToJavaType(returnType), paramClasses).toMethodDescriptorString());\n     }\n \n-    // TODO: decouple from ir\n-    FunctionNode writeFunction(ClassNode classNode, ScriptRoot scriptRoot) {\n+    void analyze(ScriptRoot scriptRoot) {\n         FunctionScope functionScope = newFunctionScope(returnType);\n \n         for (int index = 0; index < typeParameters.size(); ++index) {\n"}}, {"oid": "2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "url": "https://github.com/elastic/elasticsearch/commit/2086dcc7bd960b807cb73b67d16b8f3dd0b8520e", "message": "Merge branch 'master' into trees13", "committedDate": "2020-03-23T18:23:38Z", "type": "commit"}, {"oid": "5b13acf186abc89455dec770be71f4f68bfb1ebf", "url": "https://github.com/elastic/elasticsearch/commit/5b13acf186abc89455dec770be71f4f68bfb1ebf", "message": "Merge branch 'trees13' into trees15", "committedDate": "2020-03-23T18:23:51Z", "type": "commit"}, {"oid": "a6ed5d16496c1fa75b98a5b4b19c7010714c202a", "url": "https://github.com/elastic/elasticsearch/commit/a6ed5d16496c1fa75b98a5b4b19c7010714c202a", "message": "response to PR comments", "committedDate": "2020-03-23T19:51:09Z", "type": "commit"}, {"oid": "f4fde396ea8b0ac20168a38ffccfdb8a885218ac", "url": "https://github.com/elastic/elasticsearch/commit/f4fde396ea8b0ac20168a38ffccfdb8a885218ac", "message": "Merge branch 'master' into trees15", "committedDate": "2020-03-23T21:49:27Z", "type": "commit"}, {"oid": "31de473abafb275bcf9bad89bb5304aa96a75ff7", "url": "https://github.com/elastic/elasticsearch/commit/31de473abafb275bcf9bad89bb5304aa96a75ff7", "message": "fix more todos", "committedDate": "2020-03-23T21:54:39Z", "type": "commit"}, {"oid": "e084de95c9cfa69307152d0b0958bebe160e2f13", "url": "https://github.com/elastic/elasticsearch/commit/e084de95c9cfa69307152d0b0958bebe160e2f13", "message": "fix issue number", "committedDate": "2020-03-23T22:16:42Z", "type": "commit"}]}