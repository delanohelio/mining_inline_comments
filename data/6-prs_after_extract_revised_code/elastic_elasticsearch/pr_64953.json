{"pr_number": 64953, "pr_title": "Remove SearchContext from constructing aggregations", "pr_createdAt": "2020-11-11T17:03:35Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64953", "timeline": [{"oid": "488d9942b3dc810f4174f9c48c29d611635943aa", "url": "https://github.com/elastic/elasticsearch/commit/488d9942b3dc810f4174f9c48c29d611635943aa", "message": "WIP", "committedDate": "2020-10-30T21:26:11Z", "type": "commit"}, {"oid": "401eb57adb467bc714b6708902d6261eeddcd2a1", "url": "https://github.com/elastic/elasticsearch/commit/401eb57adb467bc714b6708902d6261eeddcd2a1", "message": "Drop SearchContext from agg ctors", "committedDate": "2020-10-30T21:26:11Z", "type": "commit"}, {"oid": "83c4f3040d847de9021ae818dc8944211fa786cd", "url": "https://github.com/elastic/elasticsearch/commit/83c4f3040d847de9021ae818dc8944211fa786cd", "message": "Merge branch 'master' into agg_search_context_1", "committedDate": "2020-11-05T21:09:00Z", "type": "commit"}, {"oid": "d0fa993c4aeccf93c8534e7517ea304dbb662c30", "url": "https://github.com/elastic/elasticsearch/commit/d0fa993c4aeccf93c8534e7517ea304dbb662c30", "message": "Cleanup", "committedDate": "2020-11-05T21:25:10Z", "type": "commit"}, {"oid": "a6e7cc99f591f3b5eab317c1a4b082ba9d76698a", "url": "https://github.com/elastic/elasticsearch/commit/a6e7cc99f591f3b5eab317c1a4b082ba9d76698a", "message": "Merge branch 'master' into agg_search_context_1", "committedDate": "2020-11-06T17:00:43Z", "type": "commit"}, {"oid": "c6df281244e57f87627290efb62dfcf37f2d106a", "url": "https://github.com/elastic/elasticsearch/commit/c6df281244e57f87627290efb62dfcf37f2d106a", "message": "Don't stick to SearchContext", "committedDate": "2020-11-06T17:39:20Z", "type": "commit"}, {"oid": "121737be91de22daba4d20a429f3905ba43a4954", "url": "https://github.com/elastic/elasticsearch/commit/121737be91de22daba4d20a429f3905ba43a4954", "message": "Markup", "committedDate": "2020-11-06T17:47:44Z", "type": "commit"}, {"oid": "fe1b0cfc1aedc7f42a12dbee3aa5e4c47061148f", "url": "https://github.com/elastic/elasticsearch/commit/fe1b0cfc1aedc7f42a12dbee3aa5e4c47061148f", "message": "WIP", "committedDate": "2020-11-06T17:50:33Z", "type": "commit"}, {"oid": "6a6e99b1d1d3cb30c6043e55edf6754a0e2b2e0d", "url": "https://github.com/elastic/elasticsearch/commit/6a6e99b1d1d3cb30c6043e55edf6754a0e2b2e0d", "message": "Merge branch 'master' into agg_search_context_1", "committedDate": "2020-11-11T15:34:44Z", "type": "commit"}, {"oid": "04235f4e2812fb99ef9544991e2eda51b903e968", "url": "https://github.com/elastic/elasticsearch/commit/04235f4e2812fb99ef9544991e2eda51b903e968", "message": "Extras", "committedDate": "2020-11-11T15:43:57Z", "type": "commit"}, {"oid": "1fd4cdb4aec8e2ff3032fb04c4a380b36183783e", "url": "https://github.com/elastic/elasticsearch/commit/1fd4cdb4aec8e2ff3032fb04c4a380b36183783e", "message": "Figure out", "committedDate": "2020-11-11T16:44:36Z", "type": "commit"}, {"oid": "ced2dbf272d85fa5c862b27c99651f9f2028baee", "url": "https://github.com/elastic/elasticsearch/commit/ced2dbf272d85fa5c862b27c99651f9f2028baee", "message": "Merge branch 'master' into agg_search_context_1", "committedDate": "2020-11-11T17:08:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyOTY0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64953#discussion_r525429647", "bodyText": "Does changing the exception type here preserve the HTTP status code if we hit this error?  If not, that might be a breaking change.  I think I saw a couple of other exception type changes, same question applies.", "author": "not-napoleon", "createdAt": "2020-11-17T19:27:57Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorFactory.java", "diffHunk": "@@ -95,45 +90,46 @@ public Aggregator createInternal(SearchContext searchContext,\n             combineScript,\n             combineScriptParams,\n             reduceScript,\n-            searchContext,\n+            context,\n             parent,\n             metadata\n         );\n     }\n \n-    private static Script deepCopyScript(Script script, SearchShardTarget shardTarget, Map<String, Object> aggParams) {\n+    private static Script deepCopyScript(Script script, Map<String, Object> aggParams) {\n         if (script != null) {\n-            Map<String, Object> params = mergeParams(aggParams, deepCopyParams(script.getParams(), shardTarget));\n+            Map<String, Object> params = mergeParams(aggParams, deepCopyParams(script.getParams()));\n             return new Script(script.getType(), script.getLang(), script.getIdOrCode(), params);\n         } else {\n             return null;\n         }\n     }\n \n     @SuppressWarnings({ \"unchecked\" })\n-    static <T> T deepCopyParams(T original, SearchShardTarget shardTarget) {\n+    static <T> T deepCopyParams(T original) {\n         T clone;\n         if (original instanceof Map) {\n             Map<?, ?> originalMap = (Map<?, ?>) original;\n             Map<Object, Object> clonedMap = new HashMap<>();\n             for (Map.Entry<?, ?> e : originalMap.entrySet()) {\n-                clonedMap.put(deepCopyParams(e.getKey(), shardTarget), deepCopyParams(e.getValue(), shardTarget));\n+                clonedMap.put(deepCopyParams(e.getKey()), deepCopyParams(e.getValue()));\n             }\n             clone = (T) clonedMap;\n         } else if (original instanceof List) {\n             List<?> originalList = (List<?>) original;\n             List<Object> clonedList = new ArrayList<>();\n             for (Object o : originalList) {\n-                clonedList.add(deepCopyParams(o, shardTarget));\n+                clonedList.add(deepCopyParams(o));\n             }\n             clone = (T) clonedList;\n         } else if (original instanceof String || original instanceof Integer || original instanceof Long || original instanceof Short\n             || original instanceof Byte || original instanceof Float || original instanceof Double || original instanceof Character\n             || original instanceof Boolean) {\n             clone = original;\n         } else {\n-            throw new SearchParseException(shardTarget,\n-                \"Can only clone primitives, String, ArrayList, and HashMap. Found: \" + original.getClass().getCanonicalName(), null);\n+            throw new IllegalArgumentException(", "originalCommit": "ced2dbf272d85fa5c862b27c99651f9f2028baee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NzgxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64953#discussion_r530667819", "bodyText": "IllegalArgumentException is a 400. SearchParseException is also.", "author": "nik9000", "createdAt": "2020-11-25T22:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyOTY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4beebac9949bbee87b3da133abacd77572472e0a", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorFactory.java b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorFactory.java\nindex 9dc7436d4d7..6d820a3b9a1 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorFactory.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorFactory.java\n\n@@ -90,15 +95,15 @@ class ScriptedMetricAggregatorFactory extends AggregatorFactory {\n             combineScript,\n             combineScriptParams,\n             reduceScript,\n-            context,\n+            searchContext,\n             parent,\n             metadata\n         );\n     }\n \n-    private static Script deepCopyScript(Script script, Map<String, Object> aggParams) {\n+    private static Script deepCopyScript(Script script, SearchShardTarget shardTarget, Map<String, Object> aggParams) {\n         if (script != null) {\n-            Map<String, Object> params = mergeParams(aggParams, deepCopyParams(script.getParams()));\n+            Map<String, Object> params = mergeParams(aggParams, deepCopyParams(script.getParams(), shardTarget));\n             return new Script(script.getType(), script.getLang(), script.getIdOrCode(), params);\n         } else {\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ5NTIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64953#discussion_r525495225", "bodyText": "This is nitpicky even for me, but I don't think this javadoc is adding any knowledge.", "author": "not-napoleon", "createdAt": "2020-11-17T20:24:57Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -151,24 +171,121 @@ public final AggregationUsageService getUsageService() {\n      */\n     public abstract NestedScope nestedScope();\n \n+    /**\n+     * Build a {@linkplain SubSearchContext} to power an aggregation fetching top hits.\n+     * Try to avoid using this because it pulls in a ton of dependencies.\n+     */\n+    public abstract SubSearchContext subSearchContext();\n+\n+    /**\n+     * Cause this aggregation to be released when the search is finished. \n+     */\n+    public abstract void addReleasable(Aggregator aggregator);\n+\n+    public abstract MultiBucketConsumer multiBucketConsumer();\n+\n+    /**\n+     * Get the filter cache.\n+     */\n+    public abstract BitsetFilterCache bitsetFilterCache();\n+    // TODO it is unclear why we can't just use the IndexSearcher which already caches\n+\n+    /**\n+     * Build a {@linkplain BucketedSort}.", "originalCommit": "ced2dbf272d85fa5c862b27c99651f9f2028baee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4beebac9949bbee87b3da133abacd77572472e0a", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\nindex 287d0798705..f2735b3eb2d 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\n\n@@ -171,121 +151,24 @@ public abstract class AggregationContext {\n      */\n     public abstract NestedScope nestedScope();\n \n-    /**\n-     * Build a {@linkplain SubSearchContext} to power an aggregation fetching top hits.\n-     * Try to avoid using this because it pulls in a ton of dependencies.\n-     */\n-    public abstract SubSearchContext subSearchContext();\n-\n-    /**\n-     * Cause this aggregation to be released when the search is finished. \n-     */\n-    public abstract void addReleasable(Aggregator aggregator);\n-\n-    public abstract MultiBucketConsumer multiBucketConsumer();\n-\n-    /**\n-     * Get the filter cache.\n-     */\n-    public abstract BitsetFilterCache bitsetFilterCache();\n-    // TODO it is unclear why we can't just use the IndexSearcher which already caches\n-\n-    /**\n-     * Build a {@linkplain BucketedSort}.\n-     */\n-    public abstract BucketedSort buildBucketedSort(SortBuilder<?> sort, int size, BucketedSort.ExtraData values) throws IOException;\n-\n-    /**\n-     * Get a deterministic random seed based for this particular shard.\n-     */\n-    public abstract int shardRandomSeed();\n-\n-    /**\n-     * How many millis have passed since we started the search?\n-     */\n-    public abstract long getRelativeTimeInMillis();\n-\n-    /**\n-     * Has the search been cancelled?\n-     */\n-    public abstract boolean isCancelled();\n-\n-    /**\n-     * The circuit breaker used to account for aggs.\n-     */\n-    public abstract CircuitBreaker breaker();\n-\n-    public abstract Analyzer indexAnalyzer();\n-\n     /**\n      * Implementation of {@linkplain AggregationContext} for production usage\n-     * that wraps our ubiquitous {@link QueryShardContext} and anything else\n-     * specific to aggregations. Unit tests should generally avoid using this\n-     * because it requires a <strong>huge</strong> portion of a real\n-     * Elasticsearch node.\n+     * that wraps our ubiquitous {@link QueryShardContext} and the top level\n+     * {@link Query}. Unit tests should avoid using this because it requires\n+     * a <strong>huge</strong> portion of a real Elasticsearch node.\n      */\n     public static class ProductionAggregationContext extends AggregationContext {\n         private final QueryShardContext context;\n-        private final Query topLevelQuery;\n-        private final AggregationProfiler profiler;\n-        private final MultiBucketConsumer multiBucketConsumer;\n-        private final Supplier<SubSearchContext> subSearchContextBuilder;\n-        private final Consumer<Aggregator> addReleasable;\n-        private final BitsetFilterCache bitsetFilterCache;\n-        private final int randomSeed;\n-        private final LongSupplier relativeTimeInMillis;\n-        private final Supplier<Boolean> isCancelled;\n-\n-        public ProductionAggregationContext(SearchContext context, MultiBucketConsumer multiBucketConsumer) {\n-            this( // TODO we'd prefer to not use SearchContext everywhere but we have a bunch of tests that use this now\n-                context.getQueryShardContext(),\n-                context.query() == null ? new MatchAllDocsQuery() : context.query(),\n-                context.getProfilers() == null ? null : context.getProfilers().getAggregationProfiler(),\n-                multiBucketConsumer,\n-                () -> new SubSearchContext(context).parsedQuery(context.parsedQuery()).fetchFieldsContext(context.fetchFieldsContext()),\n-                context::addReleasable,\n-                context.bitsetFilterCache(),\n-                context.indexShard().shardId().hashCode(),\n-                context::getRelativeTimeInMillis,\n-                context::isCancelled\n-            );\n-        }\n+        private final Query query;\n \n-        public ProductionAggregationContext(\n-            QueryShardContext context,\n-            Query topLevelQuery,\n-            @Nullable AggregationProfiler profiler,\n-            MultiBucketConsumer multiBucketConsumer,\n-            Supplier<SubSearchContext> subSearchContextBuilder,\n-            Consumer<Aggregator> addReleasable,\n-            BitsetFilterCache bitsetFilterCache,\n-            int randomSeed,\n-            LongSupplier relativeTimeInMillis,\n-            Supplier<Boolean> isCancelled\n-        ) {\n+        public ProductionAggregationContext(QueryShardContext context, Query query) {\n             this.context = context;\n-            this.topLevelQuery = topLevelQuery;\n-            this.profiler = profiler;\n-            this.multiBucketConsumer = multiBucketConsumer;\n-            this.subSearchContextBuilder = subSearchContextBuilder;\n-            this.addReleasable = addReleasable;\n-            this.bitsetFilterCache = bitsetFilterCache;\n-            this.randomSeed = randomSeed;\n-            this.relativeTimeInMillis = relativeTimeInMillis;\n-            this.isCancelled = isCancelled;\n+            this.query = query;\n         }\n \n         @Override\n         public Query query() {\n-            return topLevelQuery;\n-        }\n-\n-        @Override\n-        public Aggregator profileIfEnabled(Aggregator agg) throws IOException {\n-            if (profiler == null) {\n-                return agg;\n-            }\n-            return new ProfilingAggregator(agg, profiler);\n+            return query;\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyMDQwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64953#discussion_r525520401", "bodyText": "This feels like a call that's hiding a volatile read.  Can we put a note about thread behavior on it?", "author": "not-napoleon", "createdAt": "2020-11-17T20:59:00Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java", "diffHunk": "@@ -151,24 +171,121 @@ public final AggregationUsageService getUsageService() {\n      */\n     public abstract NestedScope nestedScope();\n \n+    /**\n+     * Build a {@linkplain SubSearchContext} to power an aggregation fetching top hits.\n+     * Try to avoid using this because it pulls in a ton of dependencies.\n+     */\n+    public abstract SubSearchContext subSearchContext();\n+\n+    /**\n+     * Cause this aggregation to be released when the search is finished. \n+     */\n+    public abstract void addReleasable(Aggregator aggregator);\n+\n+    public abstract MultiBucketConsumer multiBucketConsumer();\n+\n+    /**\n+     * Get the filter cache.\n+     */\n+    public abstract BitsetFilterCache bitsetFilterCache();\n+    // TODO it is unclear why we can't just use the IndexSearcher which already caches\n+\n+    /**\n+     * Build a {@linkplain BucketedSort}.\n+     */\n+    public abstract BucketedSort buildBucketedSort(SortBuilder<?> sort, int size, BucketedSort.ExtraData values) throws IOException;\n+\n+    /**\n+     * Get a deterministic random seed based for this particular shard.\n+     */\n+    public abstract int shardRandomSeed();\n+\n+    /**\n+     * How many millis have passed since we started the search?\n+     */\n+    public abstract long getRelativeTimeInMillis();\n+\n+    /**\n+     * Has the search been cancelled?", "originalCommit": "ced2dbf272d85fa5c862b27c99651f9f2028baee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4beebac9949bbee87b3da133abacd77572472e0a", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\nindex 287d0798705..f2735b3eb2d 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregationContext.java\n\n@@ -171,121 +151,24 @@ public abstract class AggregationContext {\n      */\n     public abstract NestedScope nestedScope();\n \n-    /**\n-     * Build a {@linkplain SubSearchContext} to power an aggregation fetching top hits.\n-     * Try to avoid using this because it pulls in a ton of dependencies.\n-     */\n-    public abstract SubSearchContext subSearchContext();\n-\n-    /**\n-     * Cause this aggregation to be released when the search is finished. \n-     */\n-    public abstract void addReleasable(Aggregator aggregator);\n-\n-    public abstract MultiBucketConsumer multiBucketConsumer();\n-\n-    /**\n-     * Get the filter cache.\n-     */\n-    public abstract BitsetFilterCache bitsetFilterCache();\n-    // TODO it is unclear why we can't just use the IndexSearcher which already caches\n-\n-    /**\n-     * Build a {@linkplain BucketedSort}.\n-     */\n-    public abstract BucketedSort buildBucketedSort(SortBuilder<?> sort, int size, BucketedSort.ExtraData values) throws IOException;\n-\n-    /**\n-     * Get a deterministic random seed based for this particular shard.\n-     */\n-    public abstract int shardRandomSeed();\n-\n-    /**\n-     * How many millis have passed since we started the search?\n-     */\n-    public abstract long getRelativeTimeInMillis();\n-\n-    /**\n-     * Has the search been cancelled?\n-     */\n-    public abstract boolean isCancelled();\n-\n-    /**\n-     * The circuit breaker used to account for aggs.\n-     */\n-    public abstract CircuitBreaker breaker();\n-\n-    public abstract Analyzer indexAnalyzer();\n-\n     /**\n      * Implementation of {@linkplain AggregationContext} for production usage\n-     * that wraps our ubiquitous {@link QueryShardContext} and anything else\n-     * specific to aggregations. Unit tests should generally avoid using this\n-     * because it requires a <strong>huge</strong> portion of a real\n-     * Elasticsearch node.\n+     * that wraps our ubiquitous {@link QueryShardContext} and the top level\n+     * {@link Query}. Unit tests should avoid using this because it requires\n+     * a <strong>huge</strong> portion of a real Elasticsearch node.\n      */\n     public static class ProductionAggregationContext extends AggregationContext {\n         private final QueryShardContext context;\n-        private final Query topLevelQuery;\n-        private final AggregationProfiler profiler;\n-        private final MultiBucketConsumer multiBucketConsumer;\n-        private final Supplier<SubSearchContext> subSearchContextBuilder;\n-        private final Consumer<Aggregator> addReleasable;\n-        private final BitsetFilterCache bitsetFilterCache;\n-        private final int randomSeed;\n-        private final LongSupplier relativeTimeInMillis;\n-        private final Supplier<Boolean> isCancelled;\n-\n-        public ProductionAggregationContext(SearchContext context, MultiBucketConsumer multiBucketConsumer) {\n-            this( // TODO we'd prefer to not use SearchContext everywhere but we have a bunch of tests that use this now\n-                context.getQueryShardContext(),\n-                context.query() == null ? new MatchAllDocsQuery() : context.query(),\n-                context.getProfilers() == null ? null : context.getProfilers().getAggregationProfiler(),\n-                multiBucketConsumer,\n-                () -> new SubSearchContext(context).parsedQuery(context.parsedQuery()).fetchFieldsContext(context.fetchFieldsContext()),\n-                context::addReleasable,\n-                context.bitsetFilterCache(),\n-                context.indexShard().shardId().hashCode(),\n-                context::getRelativeTimeInMillis,\n-                context::isCancelled\n-            );\n-        }\n+        private final Query query;\n \n-        public ProductionAggregationContext(\n-            QueryShardContext context,\n-            Query topLevelQuery,\n-            @Nullable AggregationProfiler profiler,\n-            MultiBucketConsumer multiBucketConsumer,\n-            Supplier<SubSearchContext> subSearchContextBuilder,\n-            Consumer<Aggregator> addReleasable,\n-            BitsetFilterCache bitsetFilterCache,\n-            int randomSeed,\n-            LongSupplier relativeTimeInMillis,\n-            Supplier<Boolean> isCancelled\n-        ) {\n+        public ProductionAggregationContext(QueryShardContext context, Query query) {\n             this.context = context;\n-            this.topLevelQuery = topLevelQuery;\n-            this.profiler = profiler;\n-            this.multiBucketConsumer = multiBucketConsumer;\n-            this.subSearchContextBuilder = subSearchContextBuilder;\n-            this.addReleasable = addReleasable;\n-            this.bitsetFilterCache = bitsetFilterCache;\n-            this.randomSeed = randomSeed;\n-            this.relativeTimeInMillis = relativeTimeInMillis;\n-            this.isCancelled = isCancelled;\n+            this.query = query;\n         }\n \n         @Override\n         public Query query() {\n-            return topLevelQuery;\n-        }\n-\n-        @Override\n-        public Aggregator profileIfEnabled(Aggregator agg) throws IOException {\n-            if (profiler == null) {\n-                return agg;\n-            }\n-            return new ProfilingAggregator(agg, profiler);\n+            return query;\n         }\n \n         @Override\n"}}, {"oid": "4beebac9949bbee87b3da133abacd77572472e0a", "url": "https://github.com/elastic/elasticsearch/commit/4beebac9949bbee87b3da133abacd77572472e0a", "message": "Fixup reduceRandom tests", "committedDate": "2020-11-18T23:03:48Z", "type": "commit"}, {"oid": "d152725b977e780b6eea3c52477f9360529a3455", "url": "https://github.com/elastic/elasticsearch/commit/d152725b977e780b6eea3c52477f9360529a3455", "message": "Merge branch 'master' into agg_search_context_1", "committedDate": "2020-11-19T14:26:51Z", "type": "commit"}, {"oid": "a36b1ac23f5dc059d7b2da680eded648984da3e0", "url": "https://github.com/elastic/elasticsearch/commit/a36b1ac23f5dc059d7b2da680eded648984da3e0", "message": "Checkstyle", "committedDate": "2020-11-19T14:33:56Z", "type": "commit"}, {"oid": "98c452b844d81a49aa62e44c3abbee64ddc5fda1", "url": "https://github.com/elastic/elasticsearch/commit/98c452b844d81a49aa62e44c3abbee64ddc5fda1", "message": "Come on!", "committedDate": "2020-11-19T14:35:22Z", "type": "commit"}, {"oid": "744e097cb1ef5c5cff727e23d31f1dc8ac60f9a1", "url": "https://github.com/elastic/elasticsearch/commit/744e097cb1ef5c5cff727e23d31f1dc8ac60f9a1", "message": "moar checkstyle", "committedDate": "2020-11-19T14:39:39Z", "type": "commit"}, {"oid": "3d2667956e72f1469c71e41ccd7f68c8705583d9", "url": "https://github.com/elastic/elasticsearch/commit/3d2667956e72f1469c71e41ccd7f68c8705583d9", "message": "Merge branch 'master' into agg_search_context_1", "committedDate": "2020-11-25T21:39:20Z", "type": "commit"}, {"oid": "366d22cb5c0098a5de8815de2f796e29260423ce", "url": "https://github.com/elastic/elasticsearch/commit/366d22cb5c0098a5de8815de2f796e29260423ce", "message": "Explain", "committedDate": "2020-11-25T22:15:42Z", "type": "commit"}, {"oid": "f79f9e6f55079f082e7204785a04536d13fc5fa2", "url": "https://github.com/elastic/elasticsearch/commit/f79f9e6f55079f082e7204785a04536d13fc5fa2", "message": "Fixup", "committedDate": "2020-11-25T22:22:41Z", "type": "commit"}, {"oid": "1813b6c3fa80ba0703cdb18d27d616426bddc69c", "url": "https://github.com/elastic/elasticsearch/commit/1813b6c3fa80ba0703cdb18d27d616426bddc69c", "message": "Rollup?", "committedDate": "2020-11-30T16:52:42Z", "type": "commit"}, {"oid": "0e680d05bd5f66e8c5da8754538242adcf21b714", "url": "https://github.com/elastic/elasticsearch/commit/0e680d05bd5f66e8c5da8754538242adcf21b714", "message": "Merge branch 'master' into agg_search_context_1", "committedDate": "2020-11-30T17:02:57Z", "type": "commit"}]}