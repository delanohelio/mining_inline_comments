{"pr_number": 54358, "pr_title": "Add Azure support for ranged read blob operations", "pr_createdAt": "2020-03-27T17:00:50Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54358", "timeline": [{"oid": "575e306f8fea86f75c38001a5139064890d926f4", "url": "https://github.com/elastic/elasticsearch/commit/575e306f8fea86f75c38001a5139064890d926f4", "message": "Add Azure support for ranged read blob operations", "committedDate": "2020-03-27T16:58:00Z", "type": "commit"}, {"oid": "29823c7e14a869e6350c96fc00532b39e0f11c10", "url": "https://github.com/elastic/elasticsearch/commit/29823c7e14a869e6350c96fc00532b39e0f11c10", "message": "Revert something that should not have been commited", "committedDate": "2020-03-30T08:20:11Z", "type": "commit"}, {"oid": "f1835d5126a477044e27d51648e240099b3402dd", "url": "https://github.com/elastic/elasticsearch/commit/f1835d5126a477044e27d51648e240099b3402dd", "message": "Speed up tests", "committedDate": "2020-03-30T08:20:20Z", "type": "commit"}, {"oid": "8d25d74f1516b02f856f0ae8b41bbf704b2ab7e9", "url": "https://github.com/elastic/elasticsearch/commit/8d25d74f1516b02f856f0ae8b41bbf704b2ab7e9", "message": "Merge branch 'feature/searchable-snapshots' into add-azure-range-blob-dl", "committedDate": "2020-03-30T09:11:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwMjgyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/54358#discussion_r400102821", "bodyText": "Why make this way more aggressive? I don't see the harm in doing so ... seems like we don't need these long timeout here, just wondering? :)", "author": "original-brownbear", "createdAt": "2020-03-30T10:58:13Z", "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java", "diffHunk": "@@ -128,7 +135,7 @@ private BlobContainer createBlobContainer(final int maxRetries) {\n         final AzureStorageService service = new AzureStorageService(clientSettings.build()) {\n             @Override\n             RetryPolicyFactory createRetryPolicy(final AzureStorageSettings azureStorageSettings) {\n-                return new RetryExponentialRetry(1, 100, 500, azureStorageSettings.getMaxRetries());\n+                return new RetryExponentialRetry(1, 10, 100, azureStorageSettings.getMaxRetries());", "originalCommit": "8d25d74f1516b02f856f0ae8b41bbf704b2ab7e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzOTc4OA==", "url": "https://github.com/elastic/elasticsearch/pull/54358#discussion_r400839788", "bodyText": "While looking at this class I found them a bit high, specially when a high number of retries (5) is picked up so I lowered them. If that causes any issue on CI I'll restore the previous values.", "author": "tlrx", "createdAt": "2020-03-31T11:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwMjgyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNTI1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54358#discussion_r400105255", "bodyText": "Maybe try { ... } finally { exchange.close()} around the whole handler so we don't get weird exceptions from the REST mock if an assertion trips?", "author": "original-brownbear", "createdAt": "2020-03-30T11:02:48Z", "path": "plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java", "diffHunk": "@@ -198,6 +214,57 @@ public void testReadBlobWithRetries() throws Exception {\n         }\n     }\n \n+    public void testReadRangeBlobWithRetries() throws Exception {\n+        final int maxRetries = randomIntBetween(1, 5);\n+        final CountDown countDownHead = new CountDown(maxRetries);\n+        final CountDown countDownGet = new CountDown(maxRetries);\n+        final byte[] bytes = randomBlobContent();\n+        httpServer.createContext(\"/container/read_range_blob_max_retries\", exchange -> {\n+            Streams.readFully(exchange.getRequestBody());\n+            if (\"HEAD\".equals(exchange.getRequestMethod())) {\n+                if (countDownHead.countDown()) {\n+                    exchange.getResponseHeaders().add(\"Content-Type\", \"application/octet-stream\");\n+                    exchange.getResponseHeaders().add(\"x-ms-blob-content-length\", String.valueOf(bytes.length));\n+                    exchange.getResponseHeaders().add(\"x-ms-blob-type\", \"blockblob\");\n+                    exchange.sendResponseHeaders(RestStatus.OK.getStatus(), -1);\n+                    exchange.close();", "originalCommit": "8d25d74f1516b02f856f0ae8b41bbf704b2ab7e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzOTE4MA==", "url": "https://github.com/elastic/elasticsearch/pull/54358#discussion_r400839180", "bodyText": "Sure", "author": "tlrx", "createdAt": "2020-03-31T11:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNTI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8792f29d6891bb384566a852ac732edcb1de2c42", "chunk": "diff --git a/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java\nindex 87d992daeea..7ac1b605013 100644\n--- a/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java\n+++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureBlobContainerRetriesTests.java\n\n@@ -220,38 +221,39 @@ public class AzureBlobContainerRetriesTests extends ESTestCase {\n         final CountDown countDownGet = new CountDown(maxRetries);\n         final byte[] bytes = randomBlobContent();\n         httpServer.createContext(\"/container/read_range_blob_max_retries\", exchange -> {\n-            Streams.readFully(exchange.getRequestBody());\n-            if (\"HEAD\".equals(exchange.getRequestMethod())) {\n-                if (countDownHead.countDown()) {\n-                    exchange.getResponseHeaders().add(\"Content-Type\", \"application/octet-stream\");\n-                    exchange.getResponseHeaders().add(\"x-ms-blob-content-length\", String.valueOf(bytes.length));\n-                    exchange.getResponseHeaders().add(\"x-ms-blob-type\", \"blockblob\");\n-                    exchange.sendResponseHeaders(RestStatus.OK.getStatus(), -1);\n-                    exchange.close();\n-                    return;\n+            try {\n+                Streams.readFully(exchange.getRequestBody());\n+                if (\"HEAD\".equals(exchange.getRequestMethod())) {\n+                    if (countDownHead.countDown()) {\n+                        exchange.getResponseHeaders().add(\"Content-Type\", \"application/octet-stream\");\n+                        exchange.getResponseHeaders().add(\"x-ms-blob-content-length\", String.valueOf(bytes.length));\n+                        exchange.getResponseHeaders().add(\"x-ms-blob-type\", \"blockblob\");\n+                        exchange.sendResponseHeaders(RestStatus.OK.getStatus(), -1);\n+                        return;\n+                    }\n+                } else if (\"GET\".equals(exchange.getRequestMethod())) {\n+                    if (countDownGet.countDown()) {\n+                        final int rangeStart = getRangeStart(exchange);\n+                        assertThat(rangeStart, lessThan(bytes.length));\n+                        final Optional<Integer> rangeEnd = getRangeEnd(exchange);\n+                        assertThat(rangeEnd.isPresent(), is(true));\n+                        assertThat(rangeEnd.get(), greaterThanOrEqualTo(rangeStart));\n+                        final int length = (rangeEnd.get() - rangeStart) + 1;\n+                        assertThat(length, lessThanOrEqualTo(bytes.length - rangeStart));\n+                        exchange.getResponseHeaders().add(\"Content-Type\", \"application/octet-stream\");\n+                        exchange.getResponseHeaders().add(\"x-ms-blob-content-length\", String.valueOf(length));\n+                        exchange.getResponseHeaders().add(\"x-ms-blob-type\", \"blockblob\");\n+                        exchange.sendResponseHeaders(RestStatus.OK.getStatus(), length);\n+                        exchange.getResponseBody().write(bytes, rangeStart, length);\n+                        return;\n+                    }\n                 }\n-            } else if (\"GET\".equals(exchange.getRequestMethod())) {\n-                if (countDownGet.countDown()) {\n-                    final int rangeStart = getRangeStart(exchange);\n-                    assertThat(rangeStart, lessThan(bytes.length));\n-                    final Optional<Integer> rangeEnd = getRangeEnd(exchange);\n-                    assertThat(rangeEnd.isPresent(), is(true));\n-                    assertThat(rangeEnd.get(), greaterThanOrEqualTo(rangeStart));\n-                    final int length = (rangeEnd.get() - rangeStart) + 1;\n-                    assertThat(length, lessThanOrEqualTo(bytes.length - rangeStart));\n-                    exchange.getResponseHeaders().add(\"Content-Type\", \"application/octet-stream\");\n-                    exchange.getResponseHeaders().add(\"x-ms-blob-content-length\", String.valueOf(length));\n-                    exchange.getResponseHeaders().add(\"x-ms-blob-type\", \"blockblob\");\n-                    exchange.sendResponseHeaders(RestStatus.OK.getStatus(), length);\n-                    exchange.getResponseBody().write(bytes, rangeStart, length);\n-                    exchange.close();\n-                    return;\n+                if (randomBoolean()) {\n+                    AzureHttpHandler.sendError(exchange, randomFrom(RestStatus.INTERNAL_SERVER_ERROR, RestStatus.SERVICE_UNAVAILABLE));\n                 }\n+            } finally {\n+                exchange.close();\n             }\n-            if (randomBoolean()) {\n-                AzureHttpHandler.sendError(exchange, randomFrom(RestStatus.INTERNAL_SERVER_ERROR, RestStatus.SERVICE_UNAVAILABLE));\n-            }\n-            exchange.close();\n         });\n \n         final BlobContainer blobContainer = createBlobContainer(maxRetries);\n"}}, {"oid": "8792f29d6891bb384566a852ac732edcb1de2c42", "url": "https://github.com/elastic/elasticsearch/commit/8792f29d6891bb384566a852ac732edcb1de2c42", "message": "apply feedback", "committedDate": "2020-03-31T11:46:18Z", "type": "commit"}, {"oid": "e21848879242529175a0049f307ee9fe2cf3dd7b", "url": "https://github.com/elastic/elasticsearch/commit/e21848879242529175a0049f307ee9fe2cf3dd7b", "message": "Merge branch 'feature/searchable-snapshots' into add-azure-range-blob-dl", "committedDate": "2020-04-01T08:17:57Z", "type": "commit"}]}