{"pr_number": 53492, "pr_title": "Add file type-based exclusion setting for searchable snapshots cache", "pr_createdAt": "2020-03-12T16:08:59Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53492", "timeline": [{"oid": "807b524e1b76e28b7c70253ceb110fd183346d22", "url": "https://github.com/elastic/elasticsearch/commit/807b524e1b76e28b7c70253ceb110fd183346d22", "message": "Add cache blacklist setting\n\nAllows for example to configure searchable snapshots to avoid caching certain types of files, for example stored fields.", "committedDate": "2020-03-12T16:03:30Z", "type": "commit"}, {"oid": "af16ba55578428f04030d8d59dbcc74b7dcfeb89", "url": "https://github.com/elastic/elasticsearch/commit/af16ba55578428f04030d8d59dbcc74b7dcfeb89", "message": "Merge branch 'feature/searchable-snapshots' into snapshot-cache-blacklist", "committedDate": "2020-03-13T08:31:38Z", "type": "commit"}, {"oid": "6fe97a41fd86852492c52f664186accc13015bdc", "url": "https://github.com/elastic/elasticsearch/commit/6fe97a41fd86852492c52f664186accc13015bdc", "message": "Fix test", "committedDate": "2020-03-13T08:32:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyMDIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/53492#discussion_r392120206", "bodyText": "I don't think we need to pass all the index settings here, maybe just the black list?", "author": "tlrx", "createdAt": "2020-03-13T09:38:21Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java", "diffHunk": "@@ -170,7 +174,7 @@ public static Directory create(RepositoriesService repositories,\n         if (SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings.getSettings())) {\n             final Path cacheDir = shardPath.getDataPath().resolve(\"snapshots\").resolve(snapshotId.getUUID());\n             directory = new CacheDirectory(directory, cache, cacheDir, snapshotId, indexId, shardPath.getShardId(),\n-                currentTimeNanosSupplier);\n+                indexSettings.getSettings(), currentTimeNanosSupplier);", "originalCommit": "6fe97a41fd86852492c52f664186accc13015bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzODg5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53492#discussion_r392138896", "bodyText": "I was expecting other properties to be configured in the same way in the future, so found it easier to just pass the setting.", "author": "ywelsch", "createdAt": "2020-03-13T10:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyMDIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "d840f0570826b3576febc98e02fd1b1c2f8f5df4", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java\nindex a860a81ee0b..5d3edea3f63 100644\n--- a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java\n+++ b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotDirectory.java\n\n@@ -166,36 +260,27 @@ public class SearchableSnapshotDirectory extends BaseDirectory {\n         final IndexId indexId = new IndexId(indexSettings.getIndex().getName(), SNAPSHOT_INDEX_ID_SETTING.get(indexSettings.getSettings()));\n         final BlobContainer blobContainer = blobStoreRepository.shardContainer(indexId, shardPath.getShardId().id());\n \n-        final SnapshotId snapshotId = new SnapshotId(SNAPSHOT_SNAPSHOT_NAME_SETTING.get(indexSettings.getSettings()),\n-            SNAPSHOT_SNAPSHOT_ID_SETTING.get(indexSettings.getSettings()));\n+        final SnapshotId snapshotId = new SnapshotId(\n+            SNAPSHOT_SNAPSHOT_NAME_SETTING.get(indexSettings.getSettings()),\n+            SNAPSHOT_SNAPSHOT_ID_SETTING.get(indexSettings.getSettings())\n+        );\n         final BlobStoreIndexShardSnapshot snapshot = blobStoreRepository.loadShardSnapshot(blobContainer, snapshotId);\n \n-        Directory directory = new SearchableSnapshotDirectory(snapshot, blobContainer);\n-        if (SNAPSHOT_CACHE_ENABLED_SETTING.get(indexSettings.getSettings())) {\n-            final Path cacheDir = shardPath.getDataPath().resolve(\"snapshots\").resolve(snapshotId.getUUID());\n-            directory = new CacheDirectory(directory, cache, cacheDir, snapshotId, indexId, shardPath.getShardId(),\n-                indexSettings.getSettings(), currentTimeNanosSupplier);\n-        }\n-        directory = new InMemoryNoOpCommitDirectory(directory);\n-\n-        final IndexWriterConfig indexWriterConfig = new IndexWriterConfig(null)\n-            .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n-            .setMergePolicy(NoMergePolicy.INSTANCE);\n-\n-        try (IndexWriter indexWriter = new IndexWriter(directory, indexWriterConfig)) {\n-            final Map<String, String> userData = new HashMap<>();\n-            indexWriter.getLiveCommitData().forEach(e -> userData.put(e.getKey(), e.getValue()));\n-\n-            final String translogUUID = Translog.createEmptyTranslog(shardPath.resolveTranslog(),\n-                Long.parseLong(userData.get(SequenceNumbers.LOCAL_CHECKPOINT_KEY)),\n-                shardPath.getShardId(), 0L);\n-\n-            userData.put(Translog.TRANSLOG_UUID_KEY, translogUUID);\n-            indexWriter.setLiveCommitData(userData.entrySet());\n-            indexWriter.commit();\n-        }\n-\n-        return directory;\n+        final Path cacheDir = shardPath.getDataPath().resolve(\"snapshots\").resolve(snapshotId.getUUID());\n+        Files.createDirectories(cacheDir);\n+\n+        return new InMemoryNoOpCommitDirectory(\n+            new SearchableSnapshotDirectory(\n+                blobContainer,\n+                snapshot,\n+                snapshotId,\n+                indexId,\n+                shardPath.getShardId(),\n+                indexSettings.getSettings(),\n+                currentTimeNanosSupplier,\n+                cache,\n+                cacheDir\n+            )\n+        );\n     }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyNDk5NA==", "url": "https://github.com/elastic/elasticsearch/pull/53492#discussion_r392124994", "bodyText": "Let's just use IndexFileNames.getExtension() and in case of no extension always cache if name.startsWith(IndexFileNames.SEGMENTS) || name.equals(IndexFileNames.OLD_SEGMENTS_GEN) ?", "author": "tlrx", "createdAt": "2020-03-13T09:48:08Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java", "diffHunk": "@@ -383,4 +396,17 @@ private static boolean assertFileChannelOpen(FileChannel fileChannel) {\n         assert fileChannel.isOpen();\n         return true;\n     }\n+\n+    private static String getExtension(String name) {\n+        int i = name.lastIndexOf('.');\n+        if (i == -1) {\n+            return \"\";\n+        }\n+        return name.substring(i + 1);\n+    }\n+\n+    private boolean isBlackListedFromCache(String name) {\n+        String ext = getExtension(name);", "originalCommit": "6fe97a41fd86852492c52f664186accc13015bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTYwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53492#discussion_r392145605", "bodyText": "fixed in a2c5489", "author": "ywelsch", "createdAt": "2020-03-13T10:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyNDk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "a2c5489c225f62ba751166c5c0d186fa19140bda", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java\nindex 913de6b61cc..5f9bff9820f 100644\n--- a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java\n+++ b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheDirectory.java\n\n@@ -397,16 +398,8 @@ public class CacheDirectory extends FilterDirectory {\n         return true;\n     }\n \n-    private static String getExtension(String name) {\n-        int i = name.lastIndexOf('.');\n-        if (i == -1) {\n-            return \"\";\n-        }\n-        return name.substring(i + 1);\n-    }\n-\n     private boolean isBlackListedFromCache(String name) {\n-        String ext = getExtension(name);\n-        return blacklistedFileExtensions.contains(ext);\n+        final String ext = IndexFileNames.getExtension(name);\n+        return ext != null && blacklistedFileExtensions.contains(ext);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyNTMxNA==", "url": "https://github.com/elastic/elasticsearch/pull/53492#discussion_r392125314", "bodyText": "Can we remove .cfs from this list?", "author": "tlrx", "createdAt": "2020-03-13T09:48:47Z", "path": "x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsIntegTests.java", "diffHunk": "@@ -122,12 +123,19 @@ public void testCreateAndRestoreSearchableSnapshot() throws Exception {\n         final boolean cacheEnabled = randomBoolean();\n         logger.info(\"--> restoring index [{}] with cache [{}]\", restoredIndexName, cacheEnabled ? \"enabled\" : \"disabled\");\n \n+        Settings.Builder indexSettingsBuilder = Settings.builder()\n+            .put(SearchableSnapshots.SNAPSHOT_CACHE_ENABLED_SETTING.getKey(), cacheEnabled)\n+            .put(IndexSettings.INDEX_CHECK_ON_STARTUP.getKey(), Boolean.FALSE.toString());\n+        final List<String> nonCachedExtensions;\n+        if (randomBoolean()) {\n+            nonCachedExtensions = randomSubsetOf(Arrays.asList(\"fdt\", \"fdx\", \"nvd\", \"dvd\", \"tip\", \"cfs\", \"dim\"));", "originalCommit": "6fe97a41fd86852492c52f664186accc13015bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzODA5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53492#discussion_r392138091", "bodyText": "why?\nThis is just a random list to test this functionality on. What's in there is not so important. And I don't think that we are force-merging in this test, so .cfs could be a reality here.", "author": "ywelsch", "createdAt": "2020-03-13T10:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyNTMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MzU2NA==", "url": "https://github.com/elastic/elasticsearch/pull/53492#discussion_r392143564", "bodyText": "why?\n\nMy request was mostly motivated by reducing the number of small requests executed to the fixtures as it makes debug a lot more difficult, but this test does not run on fixture so you can just forget my comment. Sorry for the noise.", "author": "tlrx", "createdAt": "2020-03-13T10:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyNTMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "e85c68c22ea8ba6747d5e7b48fdca28f0af84433", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsIntegTests.java b/x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsIntegTests.java\nindex 0a61dceb383..29a4f7e12ff 100644\n--- a/x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsIntegTests.java\n+++ b/x-pack/plugin/searchable-snapshots/src/test/java/org/elasticsearch/xpack/searchablesnapshots/SearchableSnapshotsIntegTests.java\n\n@@ -133,6 +133,10 @@ public class SearchableSnapshotsIntegTests extends ESIntegTestCase {\n         } else {\n             nonCachedExtensions = Collections.emptyList();\n         }\n+        if (randomBoolean()) {\n+            indexSettingsBuilder.put(SearchableSnapshots.SNAPSHOT_UNCACHED_CHUNK_SIZE_SETTING.getKey(),\n+                new ByteSizeValue(randomLongBetween(10, 100_000)));\n+        }\n         final MountSearchableSnapshotRequest req = new MountSearchableSnapshotRequest(restoredIndexName, fsRepoName,\n             snapshotInfo.snapshotId().getName(), indexName,\n             indexSettingsBuilder.build(), Strings.EMPTY_ARRAY, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyNTk2MA==", "url": "https://github.com/elastic/elasticsearch/pull/53492#discussion_r392125960", "bodyText": "@DaveCTurner might have an opinion on this value", "author": "tlrx", "createdAt": "2020-03-13T09:50:04Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java", "diffHunk": "@@ -105,9 +105,13 @@ public InputStream readBlob(String blobName, long position, long length) throws\n     }\n \n     @Override\n-    public long readBlobPreferredLength() {\n+    public long readBlobPreferredLength(boolean cachedRead) {\n         // This container returns streams that must be fully consumed, so we tell consumers to make bounded requests.\n-        return new ByteSizeValue(32, ByteSizeUnit.MB).getBytes();\n+        if (cachedRead) {\n+            return new ByteSizeValue(32, ByteSizeUnit.MB).getBytes();\n+        } else {\n+            return new ByteSizeValue(512, ByteSizeUnit.KB).getBytes();", "originalCommit": "6fe97a41fd86852492c52f664186accc13015bdc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d840f0570826b3576febc98e02fd1b1c2f8f5df4", "chunk": "diff --git a/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java\nindex eebf7ab6a04..77e796a851e 100644\n--- a/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java\n+++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java\n\n@@ -105,13 +105,9 @@ class S3BlobContainer extends AbstractBlobContainer {\n     }\n \n     @Override\n-    public long readBlobPreferredLength(boolean cachedRead) {\n+    public long readBlobPreferredLength() {\n         // This container returns streams that must be fully consumed, so we tell consumers to make bounded requests.\n-        if (cachedRead) {\n-            return new ByteSizeValue(32, ByteSizeUnit.MB).getBytes();\n-        } else {\n-            return new ByteSizeValue(512, ByteSizeUnit.KB).getBytes();\n-        }\n+        return new ByteSizeValue(32, ByteSizeUnit.MB).getBytes();\n     }\n \n     /**\n"}}, {"oid": "a2c5489c225f62ba751166c5c0d186fa19140bda", "url": "https://github.com/elastic/elasticsearch/commit/a2c5489c225f62ba751166c5c0d186fa19140bda", "message": "Use IndexFileNames.getExtension", "committedDate": "2020-03-13T10:19:36Z", "type": "commit"}, {"oid": "d840f0570826b3576febc98e02fd1b1c2f8f5df4", "url": "https://github.com/elastic/elasticsearch/commit/d840f0570826b3576febc98e02fd1b1c2f8f5df4", "message": "Merge remote-tracking branch 'elastic/feature/searchable-snapshots' into snapshot-cache-blacklist", "committedDate": "2020-03-24T15:01:34Z", "type": "commit"}, {"oid": "4bd379da4e97476c509fc78cb438c13b4a7eeb71", "url": "https://github.com/elastic/elasticsearch/commit/4bd379da4e97476c509fc78cb438c13b4a7eeb71", "message": "Merge remote-tracking branch 'elastic/feature/searchable-snapshots' into snapshot-cache-blacklist", "committedDate": "2020-03-25T12:19:05Z", "type": "commit"}, {"oid": "d377e40d392fb58730991f670ee6f8fd3a139614", "url": "https://github.com/elastic/elasticsearch/commit/d377e40d392fb58730991f670ee6f8fd3a139614", "message": "Merge remote-tracking branch 'elastic/feature/searchable-snapshots' into snapshot-cache-blacklist", "committedDate": "2020-03-27T09:25:26Z", "type": "commit"}, {"oid": "d44edec858d1d3f6086d6da58502d34199c3cf41", "url": "https://github.com/elastic/elasticsearch/commit/d44edec858d1d3f6086d6da58502d34199c3cf41", "message": "change", "committedDate": "2020-03-27T09:34:43Z", "type": "commit"}, {"oid": "0b8e96260a87a21e834d1aad3bb75914e72881e3", "url": "https://github.com/elastic/elasticsearch/commit/0b8e96260a87a21e834d1aad3bb75914e72881e3", "message": "undo", "committedDate": "2020-03-27T09:51:09Z", "type": "commit"}, {"oid": "01a4070b27be303c894a79996c21cd81e92dd94f", "url": "https://github.com/elastic/elasticsearch/commit/01a4070b27be303c894a79996c21cd81e92dd94f", "message": "IDE misconfig", "committedDate": "2020-03-27T10:07:47Z", "type": "commit"}, {"oid": "e85c68c22ea8ba6747d5e7b48fdca28f0af84433", "url": "https://github.com/elastic/elasticsearch/commit/e85c68c22ea8ba6747d5e7b48fdca28f0af84433", "message": "ALso test new setting", "committedDate": "2020-03-27T10:11:31Z", "type": "commit"}, {"oid": "25e073ff6f2b9e592e6d651893b8ba4d7fb6289d", "url": "https://github.com/elastic/elasticsearch/commit/25e073ff6f2b9e592e6d651893b8ba4d7fb6289d", "message": "fix test", "committedDate": "2020-03-27T10:19:44Z", "type": "commit"}, {"oid": "3ff7720eff65f839551b238126788885dfa1d4a5", "url": "https://github.com/elastic/elasticsearch/commit/3ff7720eff65f839551b238126788885dfa1d4a5", "message": "Merge remote-tracking branch 'elastic/feature/searchable-snapshots' into snapshot-cache-blacklist", "committedDate": "2020-03-27T12:33:02Z", "type": "commit"}, {"oid": "8099afd1913838859e829bcdcf29e892cf836d0d", "url": "https://github.com/elastic/elasticsearch/commit/8099afd1913838859e829bcdcf29e892cf836d0d", "message": "Merge branch 'feature/searchable-snapshots' into snapshot-cache-blacklist", "committedDate": "2020-03-27T13:33:02Z", "type": "commit"}, {"oid": "ad6ed407047e5290f3b60590ba0dd0a516dc45bd", "url": "https://github.com/elastic/elasticsearch/commit/ad6ed407047e5290f3b60590ba0dd0a516dc45bd", "message": "Political correctness", "committedDate": "2020-03-27T14:49:39Z", "type": "commit"}, {"oid": "aa0246badac6ec949b6bd0ff6fd3fb2896cde383", "url": "https://github.com/elastic/elasticsearch/commit/aa0246badac6ec949b6bd0ff6fd3fb2896cde383", "message": "forgot one", "committedDate": "2020-03-27T14:51:03Z", "type": "commit"}]}