{"pr_number": 51892, "pr_title": "Make TimeSeriesLifecycleActionsIT.testWaitForSnapshot and testWaitForSnapshotSlmExecutedBefore wait for snaphost", "pr_createdAt": "2020-02-04T21:40:21Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51892", "timeline": [{"oid": "e5c2b4068900b1d8c1171b0c96164fd88e055c6c", "url": "https://github.com/elastic/elasticsearch/commit/e5c2b4068900b1d8c1171b0c96164fd88e055c6c", "message": "waitForSnapshot tests rework", "committedDate": "2020-02-04T21:08:25Z", "type": "commit"}, {"oid": "8f28d689ec429daf1e19d28db26a0e9b9e550845", "url": "https://github.com/elastic/elasticsearch/commit/8f28d689ec429daf1e19d28db26a0e9b9e550845", "message": "Merge branch 'master' into fix-waitforsnapshot-test", "committedDate": "2020-02-04T23:49:47Z", "type": "commit"}, {"oid": "14b6aaa1f5d42072a3900276a4b13ecb443f89d7", "url": "https://github.com/elastic/elasticsearch/commit/14b6aaa1f5d42072a3900276a4b13ecb443f89d7", "message": "Merge branch 'master' into fix-waitforsnapshot-test", "committedDate": "2020-02-05T09:22:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1MzAyNg==", "url": "https://github.com/elastic/elasticsearch/pull/51892#discussion_r375153026", "bodyText": "I believe these 2 can be grouped together in one assertBusy call as they both make assertions about the same index state (that could also reduce the GET calls we make as getStepKeyForIndex could only be called once)\nI think even the getFailedStepForIndex below could be grouped into the same assertBusy call.\nI think something along the lines of\nassertBusy( () -> {\n    Map<String, Object> indexILMState = explainIndex(index);\n    assertThat(indexILMState.get(\"action\"), is(\"wait_for_snapshot\");\n    assertThat(indexILMState.get(\"step\"), is(\"wait-for-snapshot\");\n    assertThat(indexILMState.get(\"failed_step\"), nullValue());\n});\n\nwill reduce the number of HTTP calls we make and the time we spend on these assertions", "author": "andreidan", "createdAt": "2020-02-05T09:48:17Z", "path": "x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java", "diffHunk": "@@ -328,64 +329,67 @@ public void testAllocateActionOnlyReplicas() throws Exception {\n         });\n     }\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/50781\")\n     public void testWaitForSnapshot() throws Exception {\n         createIndexWithSettings(index, Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)\n             .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0));\n-        String smlPolicy = randomAlphaOfLengthBetween(4, 10);\n-        createNewSingletonPolicy(\"delete\", new WaitForSnapshotAction(smlPolicy));\n+        String slmPolicy = randomAlphaOfLengthBetween(4, 10);\n+        createNewSingletonPolicy(\"delete\", new WaitForSnapshotAction(slmPolicy));\n         updatePolicy(index, policy);\n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")));\n-        assertBusy(() -> assertThat(getFailedStepForIndex(index), equalTo(\"wait-for-snapshot\")));\n+        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n+        assertBusy(() -> assertThat(getFailedStepForIndex(index), equalTo(\"wait-for-snapshot\")), slmPolicy);\n \n         String repo = createSnapshotRepo();\n-        createSlmPolicy(smlPolicy, repo);\n+        createSlmPolicy(slmPolicy, repo);\n \n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")));\n+        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n+        //wait for step to notice that the slm policy is created and to get out of error\n+        assertBusy(() -> assertNull(getFailedStepForIndex(index)), slmPolicy);\n \n-        Request request = new Request(\"PUT\", \"/_slm/policy/\" + smlPolicy + \"/_execute\");\n+        Request request = new Request(\"PUT\", \"/_slm/policy/\" + slmPolicy + \"/_execute\");\n         assertOK(client().performRequest(request));\n \n-\n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"completed\")), 2, TimeUnit.MINUTES);\n-\n-        request = new Request(\"DELETE\", \"/_slm/policy/\" + smlPolicy);\n-        assertOK(client().performRequest(request));\n-\n-        request = new Request(\"DELETE\", \"/_snapshot/\" + repo);\n-        assertOK(client().performRequest(request));\n+        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"complete\")), slmPolicy);\n     }\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/50781\")\n     public void testWaitForSnapshotSlmExecutedBefore() throws Exception {\n         createIndexWithSettings(index, Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)\n             .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0));\n-        String smlPolicy = randomAlphaOfLengthBetween(4, 10);\n-        createNewSingletonPolicy(\"delete\", new WaitForSnapshotAction(smlPolicy));\n+        String slmPolicy = randomAlphaOfLengthBetween(4, 10);\n+        createNewSingletonPolicy(\"delete\", new WaitForSnapshotAction(slmPolicy));\n \n         String repo = createSnapshotRepo();\n-        createSlmPolicy(smlPolicy, repo);\n+        createSlmPolicy(slmPolicy, repo);\n \n-        Request request = new Request(\"PUT\", \"/_slm/policy/\" + smlPolicy + \"/_execute\");\n+        Request request = new Request(\"PUT\", \"/_slm/policy/\" + slmPolicy + \"/_execute\");\n         assertOK(client().performRequest(request));\n \n-        updatePolicy(index, policy);\n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")));\n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getName(), equalTo(\"wait-for-snapshot\")));\n+        //wait for slm to finish execution\n+        assertBusy(() -> {\n+            Response response = client().performRequest(new Request(\"GET\", \"/_slm/policy/\" + slmPolicy));\n+            try (InputStream is = response.getEntity().getContent()) {\n+                Map<String, Object> responseMap = XContentHelper.convertToMap(XContentType.JSON.xContent(), is, true);\n+                assertEquals(1, ((Map<?, ?>) ((Map<?, ?>) responseMap.get(slmPolicy)).get(\"stats\")).get(\"snapshots_taken\"));\n+            }\n+        }, slmPolicy);\n \n-        request = new Request(\"PUT\", \"/_slm/policy/\" + smlPolicy + \"/_execute\");\n-        assertOK(client().performRequest(request));\n+        updatePolicy(index, policy);\n+        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n+        assertBusy(() -> assertThat(getStepKeyForIndex(index).getName(), equalTo(\"wait-for-snapshot\")), slmPolicy);", "originalCommit": "14b6aaa1f5d42072a3900276a4b13ecb443f89d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0NzIxNA==", "url": "https://github.com/elastic/elasticsearch/pull/51892#discussion_r380147214", "bodyText": "Good idea, thanks!", "author": "probakowski", "createdAt": "2020-02-17T12:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1MzAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "42ab5aaad52bd615ba1f0f7bd5ca24f537dcafaf", "chunk": "diff --git a/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java b/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java\nindex 532ce404d0c..c0881326637 100644\n--- a/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java\n+++ b/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java\n\n@@ -335,15 +335,22 @@ public class TimeSeriesLifecycleActionsIT extends ESRestTestCase {\n         String slmPolicy = randomAlphaOfLengthBetween(4, 10);\n         createNewSingletonPolicy(\"delete\", new WaitForSnapshotAction(slmPolicy));\n         updatePolicy(index, policy);\n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n-        assertBusy(() -> assertThat(getFailedStepForIndex(index), equalTo(\"wait-for-snapshot\")), slmPolicy);\n+        assertBusy( () -> {\n+            Map<String, Object> indexILMState = explainIndex(index);\n+            assertThat(indexILMState.get(\"action\"), is(\"wait_for_snapshot\"));\n+            assertThat(indexILMState.get(\"failed_step\"), is(\"wait-for-snapshot\"));\n+        }, slmPolicy);\n \n         String repo = createSnapshotRepo();\n         createSlmPolicy(slmPolicy, repo);\n \n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n-        //wait for step to notice that the slm policy is created and to get out of error\n-        assertBusy(() -> assertNull(getFailedStepForIndex(index)), slmPolicy);\n+        assertBusy( () -> {\n+            Map<String, Object> indexILMState = explainIndex(index);\n+            //wait for step to notice that the slm policy is created and to get out of error\n+            assertThat(indexILMState.get(\"failed_step\"), nullValue());\n+            assertThat(indexILMState.get(\"action\"), is(\"wait_for_snapshot\"));\n+            assertThat(indexILMState.get(\"step\"), is(\"wait-for-snapshot\"));\n+        }, slmPolicy);\n \n         Request request = new Request(\"PUT\", \"/_slm/policy/\" + slmPolicy + \"/_execute\");\n         assertOK(client().performRequest(request));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1Mzk3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51892#discussion_r375153973", "bodyText": "Same as below, these could be grouped together as the are assertions of the same index state (ie. a particular action is the current action and the failed step info is missing)", "author": "andreidan", "createdAt": "2020-02-05T09:50:01Z", "path": "x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java", "diffHunk": "@@ -328,64 +329,67 @@ public void testAllocateActionOnlyReplicas() throws Exception {\n         });\n     }\n \n-    @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/50781\")\n     public void testWaitForSnapshot() throws Exception {\n         createIndexWithSettings(index, Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)\n             .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0));\n-        String smlPolicy = randomAlphaOfLengthBetween(4, 10);\n-        createNewSingletonPolicy(\"delete\", new WaitForSnapshotAction(smlPolicy));\n+        String slmPolicy = randomAlphaOfLengthBetween(4, 10);\n+        createNewSingletonPolicy(\"delete\", new WaitForSnapshotAction(slmPolicy));\n         updatePolicy(index, policy);\n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")));\n-        assertBusy(() -> assertThat(getFailedStepForIndex(index), equalTo(\"wait-for-snapshot\")));\n+        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n+        assertBusy(() -> assertThat(getFailedStepForIndex(index), equalTo(\"wait-for-snapshot\")), slmPolicy);\n \n         String repo = createSnapshotRepo();\n-        createSlmPolicy(smlPolicy, repo);\n+        createSlmPolicy(slmPolicy, repo);\n \n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")));\n+        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n+        //wait for step to notice that the slm policy is created and to get out of error\n+        assertBusy(() -> assertNull(getFailedStepForIndex(index)), slmPolicy);", "originalCommit": "14b6aaa1f5d42072a3900276a4b13ecb443f89d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ab5aaad52bd615ba1f0f7bd5ca24f537dcafaf", "chunk": "diff --git a/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java b/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java\nindex 532ce404d0c..c0881326637 100644\n--- a/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java\n+++ b/x-pack/plugin/ilm/qa/multi-node/src/test/java/org/elasticsearch/xpack/ilm/TimeSeriesLifecycleActionsIT.java\n\n@@ -335,15 +335,22 @@ public class TimeSeriesLifecycleActionsIT extends ESRestTestCase {\n         String slmPolicy = randomAlphaOfLengthBetween(4, 10);\n         createNewSingletonPolicy(\"delete\", new WaitForSnapshotAction(slmPolicy));\n         updatePolicy(index, policy);\n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n-        assertBusy(() -> assertThat(getFailedStepForIndex(index), equalTo(\"wait-for-snapshot\")), slmPolicy);\n+        assertBusy( () -> {\n+            Map<String, Object> indexILMState = explainIndex(index);\n+            assertThat(indexILMState.get(\"action\"), is(\"wait_for_snapshot\"));\n+            assertThat(indexILMState.get(\"failed_step\"), is(\"wait-for-snapshot\"));\n+        }, slmPolicy);\n \n         String repo = createSnapshotRepo();\n         createSlmPolicy(slmPolicy, repo);\n \n-        assertBusy(() -> assertThat(getStepKeyForIndex(index).getAction(), equalTo(\"wait_for_snapshot\")), slmPolicy);\n-        //wait for step to notice that the slm policy is created and to get out of error\n-        assertBusy(() -> assertNull(getFailedStepForIndex(index)), slmPolicy);\n+        assertBusy( () -> {\n+            Map<String, Object> indexILMState = explainIndex(index);\n+            //wait for step to notice that the slm policy is created and to get out of error\n+            assertThat(indexILMState.get(\"failed_step\"), nullValue());\n+            assertThat(indexILMState.get(\"action\"), is(\"wait_for_snapshot\"));\n+            assertThat(indexILMState.get(\"step\"), is(\"wait-for-snapshot\"));\n+        }, slmPolicy);\n \n         Request request = new Request(\"PUT\", \"/_slm/policy/\" + slmPolicy + \"/_execute\");\n         assertOK(client().performRequest(request));\n"}}, {"oid": "dec27b04a2a72aa63a7b4323f650e6e46a7c7297", "url": "https://github.com/elastic/elasticsearch/commit/dec27b04a2a72aa63a7b4323f650e6e46a7c7297", "message": "Merge remote-tracking branch 'origin/master' into fix-waitforsnapshot-test", "committedDate": "2020-02-05T20:32:55Z", "type": "commit"}, {"oid": "42ab5aaad52bd615ba1f0f7bd5ca24f537dcafaf", "url": "https://github.com/elastic/elasticsearch/commit/42ab5aaad52bd615ba1f0f7bd5ca24f537dcafaf", "message": "Refactor assertBusy", "committedDate": "2020-02-17T11:08:32Z", "type": "commit"}, {"oid": "4f44a1105daa8093f19723e485373c16ae7a2076", "url": "https://github.com/elastic/elasticsearch/commit/4f44a1105daa8093f19723e485373c16ae7a2076", "message": "Merge branch 'master' into fix-waitforsnapshot-test", "committedDate": "2020-02-17T11:08:55Z", "type": "commit"}]}