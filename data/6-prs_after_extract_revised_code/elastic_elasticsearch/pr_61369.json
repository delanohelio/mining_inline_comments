{"pr_number": 61369, "pr_title": "Add rate aggregation", "pr_createdAt": "2020-08-20T13:31:41Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61369", "timeline": [{"oid": "f9319d702a01d5a00733a78fdf1808e4192e1172", "url": "https://github.com/elastic/elasticsearch/commit/f9319d702a01d5a00733a78fdf1808e4192e1172", "message": "Add rate aggregation\n\nAdds a new rate aggregation that can calculate a document rate for buckets\nof a date_histogram.\n\nCloses #60674", "committedDate": "2020-08-20T13:29:47Z", "type": "commit"}, {"oid": "b046fb1dcfcdec39a169aa9b18809f28ca592c3d", "url": "https://github.com/elastic/elasticsearch/commit/b046fb1dcfcdec39a169aa9b18809f28ca592c3d", "message": "Fix checkstyle", "committedDate": "2020-08-20T14:00:09Z", "type": "commit"}, {"oid": "f3955d2581bb49e5e7700596effea6d011477604", "url": "https://github.com/elastic/elasticsearch/commit/f3955d2581bb49e5e7700596effea6d011477604", "message": "Fix tests", "committedDate": "2020-08-20T14:43:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2MTA3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474061076", "bodyText": "Nit: Since we're touching this anyway, we could move to the new formatting standard (which would put each param on a new line here)", "author": "not-napoleon", "createdAt": "2020-08-20T15:14:46Z", "path": "server/src/main/java/org/elasticsearch/common/Rounding.java", "diffHunk": "@@ -106,53 +107,61 @@ long extraLocalOffsetLookup() {\n                 return extraLocalOffsetLookup;\n             }\n         },\n-        DAY_OF_MONTH((byte) 5, ChronoField.DAY_OF_MONTH) {\n-            final long unitMillis = ChronoField.DAY_OF_MONTH.getBaseUnit().getDuration().toMillis();\n+        DAY_OF_MONTH((byte) 5, \"day\", ChronoField.DAY_OF_MONTH, true, ChronoField.DAY_OF_MONTH.getBaseUnit().getDuration().toMillis()) {\n             long roundFloor(long utcMillis) {\n-                return DateUtils.roundFloor(utcMillis, unitMillis);\n+                return DateUtils.roundFloor(utcMillis, this.ratio);\n             }\n \n             long extraLocalOffsetLookup() {\n-                return unitMillis;\n+                return ratio;\n             }\n         },\n-        HOUR_OF_DAY((byte) 6, ChronoField.HOUR_OF_DAY) {\n-            final long unitMillis = ChronoField.HOUR_OF_DAY.getBaseUnit().getDuration().toMillis();\n+        HOUR_OF_DAY((byte) 6, \"hour\", ChronoField.HOUR_OF_DAY, true, ChronoField.HOUR_OF_DAY.getBaseUnit().getDuration().toMillis()) {\n             long roundFloor(long utcMillis) {\n-                return DateUtils.roundFloor(utcMillis, unitMillis);\n+                return DateUtils.roundFloor(utcMillis, ratio);\n             }\n \n             long extraLocalOffsetLookup() {\n-                return unitMillis;\n+                return ratio;\n             }\n         },\n-        MINUTES_OF_HOUR((byte) 7, ChronoField.MINUTE_OF_HOUR) {\n-            final long unitMillis = ChronoField.MINUTE_OF_HOUR.getBaseUnit().getDuration().toMillis();\n+        MINUTES_OF_HOUR((byte) 7, \"minute\", ChronoField.MINUTE_OF_HOUR, true,\n+            ChronoField.MINUTE_OF_HOUR.getBaseUnit().getDuration().toMillis()) {", "originalCommit": "f3955d2581bb49e5e7700596effea6d011477604", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6b971f72f3c1d97418d402002c6197fe0ca47d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/Rounding.java b/server/src/main/java/org/elasticsearch/common/Rounding.java\nindex a584f52b325..7afb75af6aa 100644\n--- a/server/src/main/java/org/elasticsearch/common/Rounding.java\n+++ b/server/src/main/java/org/elasticsearch/common/Rounding.java\n\n@@ -107,7 +131,13 @@ public abstract class Rounding implements Writeable {\n                 return extraLocalOffsetLookup;\n             }\n         },\n-        DAY_OF_MONTH((byte) 5, \"day\", ChronoField.DAY_OF_MONTH, true, ChronoField.DAY_OF_MONTH.getBaseUnit().getDuration().toMillis()) {\n+        DAY_OF_MONTH(\n+            (byte) 5,\n+            \"day\",\n+            ChronoField.DAY_OF_MONTH,\n+            true,\n+            ChronoField.DAY_OF_MONTH.getBaseUnit().getDuration().toMillis()\n+        ) {\n             long roundFloor(long utcMillis) {\n                 return DateUtils.roundFloor(utcMillis, this.ratio);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2OTA5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474069099", "bodyText": "Nit: I think the technical term is divisor not divider.", "author": "not-napoleon", "createdAt": "2020-08-20T15:26:33Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/InternalRate.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.metrics.CompensatedSum;\n+import org.elasticsearch.search.aggregations.metrics.InternalNumericMetricsAggregation;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InternalRate extends InternalNumericMetricsAggregation.SingleValue implements Rate {\n+    final double sum;\n+    final double divider;", "originalCommit": "f3955d2581bb49e5e7700596effea6d011477604", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6b971f72f3c1d97418d402002c6197fe0ca47d2", "chunk": "diff --git a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/InternalRate.java b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/InternalRate.java\nindex 471287ccab3..d6dc14d007f 100644\n--- a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/InternalRate.java\n+++ b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/InternalRate.java\n\n@@ -20,12 +20,12 @@ import java.util.Objects;\n \n public class InternalRate extends InternalNumericMetricsAggregation.SingleValue implements Rate {\n     final double sum;\n-    final double divider;\n+    final double divisor;\n \n-    public InternalRate(String name, double sum, double divider, DocValueFormat formatter, Map<String, Object> metadata) {\n+    public InternalRate(String name, double sum, double divisor, DocValueFormat formatter, Map<String, Object> metadata) {\n         super(name, metadata);\n         this.sum = sum;\n-        this.divider = divider;\n+        this.divisor = divisor;\n         this.format = formatter;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTc1MA==", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474075750", "bodyText": "Note to self: LeafOnly shouldn't be generic over ValuesSource.  How did I miss that when I was removing generics? I'll clean that up in a separate PR.", "author": "not-napoleon", "createdAt": "2020-08-20T15:34:09Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class RateAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric, RateAggregationBuilder> {", "originalCommit": "f3955d2581bb49e5e7700596effea6d011477604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNTk4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474215983", "bodyText": "\ud83d\udc4d", "author": "imotov", "createdAt": "2020-08-20T19:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "a6b971f72f3c1d97418d402002c6197fe0ca47d2", "chunk": "diff --git a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java\nindex 520a0eabe0e..ccdd8afb407 100644\n--- a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java\n+++ b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java\n\n@@ -52,9 +52,11 @@ public class RateAggregationBuilder extends ValuesSourceAggregationBuilder.LeafO\n         super(name);\n     }\n \n-    protected RateAggregationBuilder(RateAggregationBuilder clone,\n-                                     AggregatorFactories.Builder factoriesBuilder,\n-                                     Map<String, Object> metadata) {\n+    protected RateAggregationBuilder(\n+        RateAggregationBuilder clone,\n+        AggregatorFactories.Builder factoriesBuilder,\n+        Map<String, Object> metadata\n+    ) {\n         super(clone, factoriesBuilder, metadata);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4MTY3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474081677", "bodyText": "Nit: Formatting.  This is a new file, should just run the formatter on the whole thing.", "author": "not-napoleon", "createdAt": "2020-08-20T15:39:44Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class RateAggregationBuilder extends ValuesSourceAggregationBuilder.LeafOnly<ValuesSource.Numeric, RateAggregationBuilder> {\n+    public static final String NAME = \"rate\";\n+    public static final ParseField UNIT_FIELD = new ParseField(\"unit\");\n+    public static final ValuesSourceRegistry.RegistryKey<RateAggregatorSupplier> REGISTRY_KEY = new ValuesSourceRegistry.RegistryKey<>(\n+        NAME,\n+        RateAggregatorSupplier.class\n+    );\n+    public static final ObjectParser<RateAggregationBuilder, String> PARSER = ObjectParser.fromBuilder(NAME, RateAggregationBuilder::new);\n+\n+    static {\n+        ValuesSourceAggregationBuilder.declareFields(PARSER, true, true, false, false);\n+        PARSER.declareString(RateAggregationBuilder::rateUnit, UNIT_FIELD);\n+    }\n+\n+    Rounding.DateTimeUnit rateUnit;\n+\n+    public static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n+        RateAggregatorFactory.registerAggregators(builder);\n+    }\n+\n+    public RateAggregationBuilder(String name) {\n+        super(name);\n+    }\n+\n+    protected RateAggregationBuilder(RateAggregationBuilder clone,\n+                                     AggregatorFactories.Builder factoriesBuilder,\n+                                     Map<String, Object> metadata) {\n+        super(clone, factoriesBuilder, metadata);\n+    }\n+\n+    @Override\n+    protected AggregationBuilder shallowCopy(AggregatorFactories.Builder factoriesBuilder, Map<String, Object> metadata) {\n+        return new RateAggregationBuilder(this, factoriesBuilder, metadata);\n+    }\n+\n+    /**\n+     * Read from a stream.\n+     */\n+    public RateAggregationBuilder(StreamInput in) throws IOException {\n+        super(in);\n+        byte b = in.readByte();\n+        if (b > 0) {\n+            rateUnit = Rounding.DateTimeUnit.resolve(b);\n+        } else {\n+            rateUnit = null;\n+        }\n+    }\n+\n+    @Override\n+    protected ValuesSourceType defaultValueSourceType() {\n+        return CoreValuesSourceType.NUMERIC;\n+    }\n+\n+    @Override\n+    protected void innerWriteTo(StreamOutput out) throws IOException {\n+        if (rateUnit != null) {\n+            out.writeByte(rateUnit.getId());\n+        } else {\n+            out.writeByte((byte) 0);\n+        }\n+    }\n+\n+    @Override\n+    protected ValuesSourceRegistry.RegistryKey<?> getRegistryKey() {\n+        return REGISTRY_KEY;\n+    }\n+\n+    @Override\n+    protected RateAggregatorFactory innerBuild(QueryShardContext queryShardContext, ValuesSourceConfig config,", "originalCommit": "f3955d2581bb49e5e7700596effea6d011477604", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6b971f72f3c1d97418d402002c6197fe0ca47d2", "chunk": "diff --git a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java\nindex 520a0eabe0e..ccdd8afb407 100644\n--- a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java\n+++ b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregationBuilder.java\n\n@@ -52,9 +52,11 @@ public class RateAggregationBuilder extends ValuesSourceAggregationBuilder.LeafO\n         super(name);\n     }\n \n-    protected RateAggregationBuilder(RateAggregationBuilder clone,\n-                                     AggregatorFactories.Builder factoriesBuilder,\n-                                     Map<String, Object> metadata) {\n+    protected RateAggregationBuilder(\n+        RateAggregationBuilder clone,\n+        AggregatorFactories.Builder factoriesBuilder,\n+        Map<String, Object> metadata\n+    ) {\n         super(clone, factoriesBuilder, metadata);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4NzM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474087381", "bodyText": "We shouldn't be using this work-around in new aggregators.  Instead of using a null here, RateAggregatorFactory#createUnmapped should return an aggregator that uses a NO_OP_COLLECTOR, and we should rely on valuesSource being not null in this aggregator.", "author": "not-napoleon", "createdAt": "2020-08-20T15:47:55Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.ScoreMode;\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.common.lease.Releasables;\n+import org.elasticsearch.common.util.BigArrays;\n+import org.elasticsearch.common.util.DoubleArray;\n+import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;\n+import org.elasticsearch.search.DocValueFormat;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.InternalAggregation;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n+import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;\n+import org.elasticsearch.search.aggregations.bucket.histogram.SizedBucketAggregator;\n+import org.elasticsearch.search.aggregations.metrics.CompensatedSum;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregator;\n+import org.elasticsearch.search.aggregations.support.ValuesSource;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class RateAggregator extends NumericMetricsAggregator.SingleValue {\n+\n+    private final ValuesSource.Numeric valuesSource;\n+    private final DocValueFormat format;\n+    private final Rounding.DateTimeUnit rateUnit;\n+    private final SizedBucketAggregator sizedBucketAggregator;\n+\n+    private DoubleArray sums;\n+    private DoubleArray compensations;\n+\n+    public RateAggregator(\n+        String name,\n+        ValuesSourceConfig valuesSourceConfig,\n+        Rounding.DateTimeUnit rateUnit,\n+        SearchContext context,\n+        Aggregator parent,\n+        Map<String, Object> metadata\n+    ) throws IOException {\n+        super(name, context, parent, metadata);\n+        // TODO: stop expecting nulls here\n+        this.valuesSource = valuesSourceConfig.hasValues() ? (ValuesSource.Numeric) valuesSourceConfig.getValuesSource() : null;", "originalCommit": "f3955d2581bb49e5e7700596effea6d011477604", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6b971f72f3c1d97418d402002c6197fe0ca47d2", "chunk": "diff --git a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java\nindex 983e4f2abc4..5dde711b268 100644\n--- a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java\n+++ b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregator.java\n\n@@ -46,8 +46,7 @@ public class RateAggregator extends NumericMetricsAggregator.SingleValue {\n         Map<String, Object> metadata\n     ) throws IOException {\n         super(name, context, parent, metadata);\n-        // TODO: stop expecting nulls here\n-        this.valuesSource = valuesSourceConfig.hasValues() ? (ValuesSource.Numeric) valuesSourceConfig.getValuesSource() : null;\n+        this.valuesSource = (ValuesSource.Numeric) valuesSourceConfig.getValuesSource();\n         this.format = valuesSourceConfig.format();\n         if (valuesSource != null) {\n             sums = context.bigArrays().newDoubleArray(1, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5NDIyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/61369#discussion_r474094221", "bodyText": "Is there a use case for running Rate over a Date field?  I'm having a hard time imagining one. If there is a use case for it, let's leave a comment so we remember why we want it, and if not let's not support passing in Date fields.  It's much easier to add support later if we find a use case than it is to remove support for a supported data type, even if it only generates nonsense results.", "author": "not-napoleon", "createdAt": "2020-08-20T15:58:03Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics.rate;\n+\n+import org.elasticsearch.common.Rounding;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.search.aggregations.Aggregator;\n+import org.elasticsearch.search.aggregations.AggregatorFactories;\n+import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.CardinalityUpperBound;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n+import org.elasticsearch.search.internal.SearchContext;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+class RateAggregatorFactory extends ValuesSourceAggregatorFactory {\n+\n+    private final Rounding.DateTimeUnit rateUnit;\n+\n+    RateAggregatorFactory(String name,\n+                          ValuesSourceConfig config,\n+                          Rounding.DateTimeUnit rateUnit,\n+                          QueryShardContext queryShardContext,\n+                          AggregatorFactory parent,\n+                          AggregatorFactories.Builder subFactoriesBuilder,\n+                          Map<String, Object> metadata) throws IOException {\n+        super(name, config, queryShardContext, parent, subFactoriesBuilder, metadata);\n+        this.rateUnit = rateUnit;\n+    }\n+\n+    static void registerAggregators(ValuesSourceRegistry.Builder builder) {\n+        builder.register(RateAggregationBuilder.REGISTRY_KEY,\n+           List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.DATE, CoreValuesSourceType.BOOLEAN),", "originalCommit": "f3955d2581bb49e5e7700596effea6d011477604", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6b971f72f3c1d97418d402002c6197fe0ca47d2", "chunk": "diff --git a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java\nindex e878d7fd2f6..40c37cf5f59 100644\n--- a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java\n+++ b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/rate/RateAggregatorFactory.java\n\n@@ -6,12 +6,14 @@\n \n package org.elasticsearch.xpack.analytics.rate;\n \n+import org.apache.lucene.index.LeafReaderContext;\n import org.elasticsearch.common.Rounding;\n import org.elasticsearch.index.query.QueryShardContext;\n import org.elasticsearch.search.aggregations.Aggregator;\n import org.elasticsearch.search.aggregations.AggregatorFactories;\n import org.elasticsearch.search.aggregations.AggregatorFactory;\n import org.elasticsearch.search.aggregations.CardinalityUpperBound;\n+import org.elasticsearch.search.aggregations.LeafBucketCollector;\n import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;\n import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n"}}, {"oid": "a6b971f72f3c1d97418d402002c6197fe0ca47d2", "url": "https://github.com/elastic/elasticsearch/commit/a6b971f72f3c1d97418d402002c6197fe0ca47d2", "message": "Address Review Comments", "committedDate": "2020-08-20T20:55:31Z", "type": "commit"}, {"oid": "486ac9aaa91f044201bbe51c4eb09d815a8cdf27", "url": "https://github.com/elastic/elasticsearch/commit/486ac9aaa91f044201bbe51c4eb09d815a8cdf27", "message": "Address Review Comments II", "committedDate": "2020-08-20T21:46:55Z", "type": "commit"}, {"oid": "12e44cf21d991319464afefed7d566f438588252", "url": "https://github.com/elastic/elasticsearch/commit/12e44cf21d991319464afefed7d566f438588252", "message": "Merge branch 'master' into issue-60674-add-rate-agg", "committedDate": "2020-08-25T14:03:24Z", "type": "commit"}]}