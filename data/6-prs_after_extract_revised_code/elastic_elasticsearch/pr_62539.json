{"pr_number": 62539, "pr_title": "EQL: Replace ?\"...\" with \"\"\"...\"\"\" for unescaped strings", "pr_createdAt": "2020-09-17T12:44:38Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62539", "timeline": [{"oid": "32e85fd2d94625dba4606ea92b53edfd5d0beb3d", "url": "https://github.com/elastic/elasticsearch/commit/32e85fd2d94625dba4606ea92b53edfd5d0beb3d", "message": "EQL: Replace ?\"...\" with \"\"\"...\"\"\" for unescaped strings\n\nUse triple doulbe quotes enclosing a string literal to interpret it\nas unescaped, in order to use `?` for marking query params and avoid\nuser confusion.\n\nRelates to #61659", "committedDate": "2020-09-17T12:40:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNTkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/62539#discussion_r490225905", "bodyText": "This is incorrect - in case of ?' the error message is invalid - it tells that double quotes should be used which is not the case.\nIn fact I would argue that since the string is always quoted, if it starts with ? an exception should be thrown regardless of what follows it.", "author": "costin", "createdAt": "2020-09-17T13:03:17Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java", "diffHunk": "@@ -122,10 +122,18 @@ public static String unquoteString(Source source) {\n             return null;\n         }\n \n-        // unescaped strings can be interpreted directly\n+        // catch old method of ?\" and ?' to define unescaped strings\n         if (text.startsWith(\"?\")) {\n             checkForSingleQuotedString(source, text, 1);", "originalCommit": "32e85fd2d94625dba4606ea92b53edfd5d0beb3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzODg3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62539#discussion_r490238873", "bodyText": "That's true, It's a 2-step error for the user: ?' -> ?\" -> \"\"\". I just thought that explicitly handling the single quotes (no matter of the preceding ?) was a \"better\" approach. I'll gladly change it.", "author": "matriv", "createdAt": "2020-09-17T13:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNTkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "480aac541623a84d13ef7445a102067c381c8239", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java\nindex 865e298d2ca..c8adc2d97a2 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/AbstractBuilder.java\n\n@@ -124,11 +124,8 @@ abstract class AbstractBuilder extends EqlBaseBaseVisitor<Object> {\n \n         // catch old method of ?\" and ?' to define unescaped strings\n         if (text.startsWith(\"?\")) {\n-            checkForSingleQuotedString(source, text, 1);\n-            if (text.charAt(1) == '\"') {\n-                throw new ParsingException(source,\n-                        \"Use triple double quotes [\\\"\\\"\\\"] to define unescaped string literals, not [?\\\"]\");\n-            }\n+            throw new ParsingException(source,\n+                \"Use triple double quotes [\\\"\\\"\\\"] to define unescaped string literals, not [?{}]\", text.charAt(1));\n         }\n \n         // unescaped strings can be interpreted directly\n"}}, {"oid": "480aac541623a84d13ef7445a102067c381c8239", "url": "https://github.com/elastic/elasticsearch/commit/480aac541623a84d13ef7445a102067c381c8239", "message": "change error message", "committedDate": "2020-09-17T13:29:30Z", "type": "commit"}, {"oid": "356cabf300b9832fd8830050be033bc329db22ab", "url": "https://github.com/elastic/elasticsearch/commit/356cabf300b9832fd8830050be033bc329db22ab", "message": "Merge remote-tracking branch 'upstream/master' into replace-unescaped-triple-doublequotes", "committedDate": "2020-09-18T09:44:10Z", "type": "commit"}, {"oid": "374bc92ec5d9c2d7e62fd3bf985bce862b83df6e", "url": "https://github.com/elastic/elasticsearch/commit/374bc92ec5d9c2d7e62fd3bf985bce862b83df6e", "message": "fix escaped '", "committedDate": "2020-09-18T10:25:15Z", "type": "commit"}, {"oid": "ae7d4ed9d94fdf34566de04f6e5888c624a6e796", "url": "https://github.com/elastic/elasticsearch/commit/ae7d4ed9d94fdf34566de04f6e5888c624a6e796", "message": "add more tests", "committedDate": "2020-09-28T15:21:58Z", "type": "commit"}, {"oid": "b32a3831c9da38119c790a6d7de57e99e1af9e19", "url": "https://github.com/elastic/elasticsearch/commit/b32a3831c9da38119c790a6d7de57e99e1af9e19", "message": "Merge remote-tracking branch 'upstream/master' into replace-unescaped-triple-doublequotes", "committedDate": "2020-09-28T15:23:42Z", "type": "commit"}, {"oid": "fec23cef7afd30d79a66b206ab841976c38c8a14", "url": "https://github.com/elastic/elasticsearch/commit/fec23cef7afd30d79a66b206ab841976c38c8a14", "message": "fix tests", "committedDate": "2020-09-28T15:40:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1NTk4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62539#discussion_r496055981", "bodyText": "how is \"\"\"hello\"\"\" == \"\"\"world\"\"\" interpreted?\nit should be equivalent to this expression Equals(\"hello\", \"world):\n\"hello\" == \"world\"", "author": "rw-access", "createdAt": "2020-09-28T15:50:38Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "diffHunk": "@@ -99,18 +103,52 @@ public void testDoubleQuotedString() {\n \n     public void testSingleQuotedUnescapedStringDisallowed() {\n         ParsingException e = expectThrows(ParsingException.class, () -> expr(\"?'hello world'\"));\n-        assertEquals(\"line 1:2: Use double quotes [\\\"] to define string literals, not single quotes [']\",\n+        assertEquals(\"line 1:2: Use triple double quotes [\\\"\\\"\\\"] to define unescaped string literals, not [?']\",\n                 e.getMessage());\n-        e = expectThrows(ParsingException.class, () -> parser.createStatement(\"process where name==?'hello world'\"));\n-        assertEquals(\"line 1:22: Use double quotes [\\\"] to define string literals, not single quotes [']\",\n+        e = expectThrows(ParsingException.class, () -> parser.createStatement(\"process where name == ?'hello world'\"));\n+        assertEquals(\"line 1:24: Use triple double quotes [\\\"\\\"\\\"] to define unescaped string literals, not [?']\",\n                 e.getMessage());\n     }\n \n-    public void testDoubleQuotedUnescapedString() {\n-        // \"hello \\\" world\"\n-        Expression parsed = expr(\"?\\\"hello \\\\\\\" world!\\\"\");\n-        Expression expected = new Literal(null, \"hello \\\\\\\" world!\", DataTypes.KEYWORD);\n-        assertEquals(expected, parsed);\n+    public void testDoubleQuotedUnescapedStringForbidden() {\n+        ParsingException e = expectThrows(ParsingException.class, () -> expr(\"?\\\"hello world\\\"\"));\n+        assertEquals(\"line 1:2: Use triple double quotes [\\\"\\\"\\\"] to define unescaped string literals, not [?\\\"]\",\n+                e.getMessage());\n+        e = expectThrows(ParsingException.class, () -> parser.createStatement(\"process where name == ?\\\"hello world\\\"\"));\n+        assertEquals(\"line 1:24: Use triple double quotes [\\\"\\\"\\\"] to define unescaped string literals, not [?\\\"]\",\n+                e.getMessage());\n+    }\n+\n+    public void testTripleDoubleQuotedUnescapedString() {", "originalCommit": "fec23cef7afd30d79a66b206ab841976c38c8a14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NTI4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62539#discussion_r496065282", "bodyText": "I can add a test for that", "author": "matriv", "createdAt": "2020-09-28T16:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1NTk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "af8ca3dd4d6206187c2f80bce3714dfd1a4d941c", "chunk": "diff --git a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\nindex 524c437a5b4..0da1228a9ce 100644\n--- a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\n+++ b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\n\n@@ -120,35 +125,29 @@ public class ExpressionTests extends ESTestCase {\n     }\n \n     public void testTripleDoubleQuotedUnescapedString() {\n-        // \"\"\"hello \" world!\"\"\" => hello \" world!\n-        String str = \"\\\"\\\"\\\"hello \\\" world!\\\"\\\"\\\" == foo\";\n-        String expectedStr = \"hello \\\" world!\";\n+        // \"\"\"hello world!\"\"\"\" == \"\"\"foobar\"\"\" => hello world! = foobar\n+        String str = \"\\\"\\\"\\\"hello world!\\\"\\\"\\\" == \\\"\\\"\\\"foobar\\\"\\\"\\\"\";\n+        String expectedStrLeft = \"hello world!\";\n+        String expectedStrRight = \"foobar\";\n         Expression parsed = expr(str);\n         assertEquals(Equals.class, parsed.getClass());\n         Equals eq = (Equals) parsed;\n-        assertEquals(UnresolvedAttribute.class, eq.right().getClass());\n         assertEquals(Literal.class, eq.left().getClass());\n-        assertEquals(expectedStr, ((Literal) eq.left()).value());\n-\n-        // \"\"\"hello \\\" world!\"\"\" => hello \\\" world!\n-        str = \"\\\"\\\"\\\"hello \\\\\\\" world!\\\"\\\"\\\" == foo\";\n-        expectedStr = \"hello \\\\\\\" world!\";\n-        parsed = expr(str);\n-        assertEquals(Equals.class, parsed.getClass());\n-        eq = (Equals) parsed;\n-        assertEquals(UnresolvedAttribute.class, eq.right().getClass());\n-        assertEquals(Literal.class, eq.left().getClass());\n-        assertEquals(expectedStr, ((Literal) eq.left()).value());\n-\n-        // \"\"\"\"\"hello \"\"\" world!\"\"\"\" => \"\"hello \"\"\" world!\"\n-        str = \"\\\"\\\"\\\"\\\"\\\"hello \\\"\\\"\\\" world!\\\"\\\"\\\"\\\" == foo\";\n-        expectedStr = \"\\\"\\\"hello \\\"\\\"\\\" world!\\\"\";\n+        assertEquals(expectedStrLeft, ((Literal) eq.left()).value());\n+        assertEquals(Literal.class, eq.right().getClass());\n+        assertEquals(expectedStrRight, ((Literal) eq.right()).value());\n+\n+        // \"\"\"\"\"hello\\\"\"\"world!\"\"\"\"\" == \"\"\"\"foo\"\\\"\"bar\"\"\"\" => \"\"hello\"\"\"world!\"\" = \"foo\"\"\"bar\"\n+        str = \"\\\"\\\"\\\"\\\"\\\"hello\\\\\\\"\\\"\\\"world!\\\"\\\"\\\"\\\"\\\" == \\\"\\\"\\\"\\\"foo\\\"\\\\\\\"\\\"bar\\\"\\\"\\\"\\\"\";\n+        expectedStrLeft = \"\\\"\\\"hello\\\"\\\"\\\"world!\";\n+        expectedStrRight = \"\\\"foo\\\"\\\"\\\"bar\\\"\";\n         parsed = expr(str);\n         assertEquals(Equals.class, parsed.getClass());\n         eq = (Equals) parsed;\n-        assertEquals(UnresolvedAttribute.class, eq.right().getClass());\n         assertEquals(Literal.class, eq.left().getClass());\n-        assertEquals(expectedStr, ((Literal) eq.left()).value());\n+        assertEquals(expectedStrLeft, ((Literal) eq.left()).value());\n+        assertEquals(Literal.class, eq.right().getClass());\n+        assertEquals(expectedStrRight, ((Literal) eq.right()).value());\n     }\n \n     public void testNumbers() {\n"}}, {"oid": "af8ca3dd4d6206187c2f80bce3714dfd1a4d941c", "url": "https://github.com/elastic/elasticsearch/commit/af8ca3dd4d6206187c2f80bce3714dfd1a4d941c", "message": "Try to allow \"\"\" with one escapedwq", "committedDate": "2020-09-29T16:47:47Z", "type": "commit"}, {"oid": "3ada21037537e3a66a1aa4f05b9cd7e72bbad658", "url": "https://github.com/elastic/elasticsearch/commit/3ada21037537e3a66a1aa4f05b9cd7e72bbad658", "message": "Merge remote-tracking branch 'upstream/master' into replace-unescaped-triple-doublequotes", "committedDate": "2020-10-01T09:33:15Z", "type": "commit"}, {"oid": "a8f4cbb9c9645573f945e3c9ddac7f89d489a48f", "url": "https://github.com/elastic/elasticsearch/commit/a8f4cbb9c9645573f945e3c9ddac7f89d489a48f", "message": "Use Python approach", "committedDate": "2020-10-01T16:44:27Z", "type": "commit"}, {"oid": "60e1b4e87bb7dd58123b4bc1c586357ee68cf748", "url": "https://github.com/elastic/elasticsearch/commit/60e1b4e87bb7dd58123b4bc1c586357ee68cf748", "message": "Merge remote-tracking branch 'upstream/master' into replace-unescaped-triple-doublequotes", "committedDate": "2020-10-01T16:44:46Z", "type": "commit"}, {"oid": "822d494fe7f5007880daa790c044bb33e4d78c91", "url": "https://github.com/elastic/elasticsearch/commit/822d494fe7f5007880daa790c044bb33e4d78c91", "message": "Merge remote-tracking branch 'upstream/master' into replace-unescaped-triple-doublequotes", "committedDate": "2020-10-01T16:53:44Z", "type": "commit"}, {"oid": "23ffe1f21a9bb572cae65253078fe06a43a70f40", "url": "https://github.com/elastic/elasticsearch/commit/23ffe1f21a9bb572cae65253078fe06a43a70f40", "message": "Merge remote-tracking branch 'upstream/master' into replace-unescaped-triple-doublequotes", "committedDate": "2020-10-02T09:37:03Z", "type": "commit"}, {"oid": "f838bc255660064effe3c50e1e7507d8aceb4385", "url": "https://github.com/elastic/elasticsearch/commit/f838bc255660064effe3c50e1e7507d8aceb4385", "message": "Disallow any triple double quote sequence and everything is raw", "committedDate": "2020-10-02T10:59:41Z", "type": "commit"}]}