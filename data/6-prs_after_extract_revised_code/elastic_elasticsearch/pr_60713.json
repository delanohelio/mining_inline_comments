{"pr_number": 60713, "pr_title": "Simplify jdk downloads via artifact transforms", "pr_createdAt": "2020-08-05T07:05:35Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60713", "timeline": [{"oid": "c49014169a7f37f4a35ff2993ad813e3ddbfffbc", "url": "https://github.com/elastic/elasticsearch/commit/c49014169a7f37f4a35ff2993ad813e3ddbfffbc", "message": "Fix flaky test", "committedDate": "2020-08-05T12:47:07Z", "type": "forcePushed"}, {"oid": "2972b513acf513e16097b6f8dc48b58c9583f4c3", "url": "https://github.com/elastic/elasticsearch/commit/2972b513acf513e16097b6f8dc48b58c9583f4c3", "message": "Simplify jdk downloads via artifact transforms\n\nThis reworks the jdk download plugin to use artifact transforms.\nThat allows us to simplify the jdk download plugin by a lot. The\nbenefits of using artifact transforms are:\n\n- they transform an artifact to an upacked folder on the fly as part\nof the dependenc resolution allowing us to remove all the custom created unpack tasks\nand configurations\n\n- Artifact transforms support gradle build cache. Requesting a jdk folder on a clean machine\nwill likely be resolved from the build cache\n\n- The manual mingling about not extracting jdks multiple times by all jdks channeling through\nroot project configurations can be removed as they support up-to-date checking and build cache\nwhich will ensure these archives are only resolved once per build at max.\n\nAlso the test coverage has been ported to Spock that supports data driven testing. This porting\nincludes an introduction to a wiremock fixture that can be used later on for mocking repository\nurls in other integration tests", "committedDate": "2020-08-05T15:18:50Z", "type": "commit"}, {"oid": "2972b513acf513e16097b6f8dc48b58c9583f4c3", "url": "https://github.com/elastic/elasticsearch/commit/2972b513acf513e16097b6f8dc48b58c9583f4c3", "message": "Simplify jdk downloads via artifact transforms\n\nThis reworks the jdk download plugin to use artifact transforms.\nThat allows us to simplify the jdk download plugin by a lot. The\nbenefits of using artifact transforms are:\n\n- they transform an artifact to an upacked folder on the fly as part\nof the dependenc resolution allowing us to remove all the custom created unpack tasks\nand configurations\n\n- Artifact transforms support gradle build cache. Requesting a jdk folder on a clean machine\nwill likely be resolved from the build cache\n\n- The manual mingling about not extracting jdks multiple times by all jdks channeling through\nroot project configurations can be removed as they support up-to-date checking and build cache\nwhich will ensure these archives are only resolved once per build at max.\n\nAlso the test coverage has been ported to Spock that supports data driven testing. This porting\nincludes an introduction to a wiremock fixture that can be used later on for mocking repository\nurls in other integration tests", "committedDate": "2020-08-05T15:18:50Z", "type": "forcePushed"}, {"oid": "d6ea2280c1e358265fdcb323d73d44c62973d5d4", "url": "https://github.com/elastic/elasticsearch/commit/d6ea2280c1e358265fdcb323d73d44c62973d5d4", "message": "Simplify artifact transform registration", "committedDate": "2020-08-05T15:32:38Z", "type": "commit"}, {"oid": "47538f16d08af9fa5b777806b84a157d7f831d17", "url": "https://github.com/elastic/elasticsearch/commit/47538f16d08af9fa5b777806b84a157d7f831d17", "message": "Change jdk finalization and repository setup\n\nJdk finalization is now done via `configuration.defaultDependencies`.\nThis has two benefits:\n- we only configure and finalize the JDKs we actually use during the build\n- afterEvaluate hooks are problematic in combination with task avoidance api.\nRelying on task avoidance api in Gradle moves more configuration logic into the materialization\nof tasks which is, with task avoidance api, is done ideally during the task graph calculation.\nAnything created (e.g. jdks) created late in this task graph calculation would never be finalized\nvia afterEvaluate hooks as this has been fired before already with the jdk not there yet.\n\nFurthermore we now only configure repositories in the projects where the jdk is declared\n(aka the jdk-download plugin is applied) and only if the jdk is actually requested during the build.", "committedDate": "2020-08-05T16:03:59Z", "type": "commit"}, {"oid": "d13abdca2cd693e8d3135ca5dd47a5eadf47bc6f", "url": "https://github.com/elastic/elasticsearch/commit/d13abdca2cd693e8d3135ca5dd47a5eadf47bc6f", "message": "Fix javadoc", "committedDate": "2020-08-05T16:11:06Z", "type": "commit"}, {"oid": "31d056acb99e48750119305074ab329004f39cf2", "url": "https://github.com/elastic/elasticsearch/commit/31d056acb99e48750119305074ab329004f39cf2", "message": "Fix jdk download repo content filtering", "committedDate": "2020-08-05T16:28:25Z", "type": "commit"}, {"oid": "d07b27c27aef3affc1c43b8ae87d13644994c4be", "url": "https://github.com/elastic/elasticsearch/commit/d07b27c27aef3affc1c43b8ae87d13644994c4be", "message": "Minor cleanup", "committedDate": "2020-08-05T17:05:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTMyMg==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465875322", "bodyText": "Seems we don't really need this method then.", "author": "mark-vieira", "createdAt": "2020-08-05T17:06:01Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "diffHunk": "@@ -61,7 +61,8 @@ public static SourceSetContainer getJavaSourceSets(Project project) {\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n+        return collection.maybeCreate(name);", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNjU4MA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465926580", "bodyText": "removed all of those", "author": "breskeby", "createdAt": "2020-08-05T18:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java b/buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java\nindex ad37885c782..72b062b727b 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java\n\n@@ -60,29 +57,6 @@ public abstract class GradleUtils {\n         return project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets();\n     }\n \n-    public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return collection.maybeCreate(name);\n-        // return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n-    }\n-\n-    public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name, Action<T> action) {\n-        return Optional.ofNullable(collection.findByName(name)).orElseGet(() -> {\n-            T result = collection.create(name);\n-            action.execute(result);\n-            return result;\n-        });\n-\n-    }\n-\n-    public static <T> T maybeCreate(PolymorphicDomainObjectContainer<T> collection, String name, Class<T> type, Action<T> action) {\n-        return Optional.ofNullable(collection.findByName(name)).orElseGet(() -> {\n-            T result = collection.create(name, type);\n-            action.execute(result);\n-            return result;\n-        });\n-\n-    }\n-\n     public static <T extends Task> TaskProvider<T> maybeRegister(TaskContainer tasks, String name, Class<T> clazz, Action<T> action) {\n         try {\n             return tasks.named(name, clazz);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTUzOA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465875538", "bodyText": "Can we have these delegate to NamedDomainObjectContainer.maybeCreate() as well?", "author": "mark-vieira", "createdAt": "2020-08-05T17:06:22Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java", "diffHunk": "@@ -61,7 +61,8 @@ public static SourceSetContainer getJavaSourceSets(Project project) {\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n+        return collection.maybeCreate(name);\n+        // return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n     }\n \n     public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name, Action<T> action) {", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNjc1MA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465926750", "bodyText": "see above. all maybeCreate's have been removed", "author": "breskeby", "createdAt": "2020-08-05T18:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NTUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java b/buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java\nindex ad37885c782..72b062b727b 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/util/GradleUtils.java\n\n@@ -60,29 +57,6 @@ public abstract class GradleUtils {\n         return project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets();\n     }\n \n-    public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name) {\n-        return collection.maybeCreate(name);\n-        // return Optional.ofNullable(collection.findByName(name)).orElse(collection.create(name));\n-    }\n-\n-    public static <T> T maybeCreate(NamedDomainObjectContainer<T> collection, String name, Action<T> action) {\n-        return Optional.ofNullable(collection.findByName(name)).orElseGet(() -> {\n-            T result = collection.create(name);\n-            action.execute(result);\n-            return result;\n-        });\n-\n-    }\n-\n-    public static <T> T maybeCreate(PolymorphicDomainObjectContainer<T> collection, String name, Class<T> type, Action<T> action) {\n-        return Optional.ofNullable(collection.findByName(name)).orElseGet(() -> {\n-            T result = collection.create(name, type);\n-            action.execute(result);\n-            return result;\n-        });\n-\n-    }\n-\n     public static <T extends Task> TaskProvider<T> maybeRegister(TaskContainer tasks, String name, Class<T> clazz, Action<T> action) {\n         try {\n             return tasks.named(name, clazz);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3Njk3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465876977", "bodyText": "This argument should probably be called archiveFIle.", "author": "mark-vieira", "createdAt": "2020-08-05T17:09:02Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform\n+public interface UnpackTransform extends TransformAction<TransformParameters.None> {\n+\n+    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @InputArtifact\n+    Provider<FileSystemLocation> getArchiveFile();\n+\n+    @Override\n+    default void transform(TransformOutputs outputs) {\n+        File archiveFile = getArchiveFile().get().getAsFile();\n+        String unpackedDirName = removeExtension(archiveFile.getName());\n+        File unzipDir = outputs.dir(unpackedDirName);\n+        try {\n+            unpack(archiveFile, unzipDir);\n+        } catch (IOException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    void unpack(File tarFile, File targetDir) throws IOException;", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNzA1NA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465927054", "bodyText": "fixed", "author": "breskeby", "createdAt": "2020-08-05T18:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3Njk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java b/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\nindex 42f446f84c3..1b7b6ce4d42 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\n\n@@ -19,7 +19,6 @@\n \n package org.elasticsearch.gradle.transform;\n \n-import org.gradle.api.artifacts.transform.CacheableTransform;\n import org.gradle.api.artifacts.transform.InputArtifact;\n import org.gradle.api.artifacts.transform.TransformAction;\n import org.gradle.api.artifacts.transform.TransformOutputs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3ODY5NA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465878694", "bodyText": "Is this necessary if it's only used to generate the directory name? Also, do we account for .zip or .tgz here?", "author": "mark-vieira", "createdAt": "2020-08-05T17:11:53Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform\n+public interface UnpackTransform extends TransformAction<TransformParameters.None> {\n+\n+    @PathSensitive(PathSensitivity.NAME_ONLY)\n+    @InputArtifact\n+    Provider<FileSystemLocation> getArchiveFile();\n+\n+    @Override\n+    default void transform(TransformOutputs outputs) {\n+        File archiveFile = getArchiveFile().get().getAsFile();\n+        String unpackedDirName = removeExtension(archiveFile.getName());\n+        File unzipDir = outputs.dir(unpackedDirName);\n+        try {\n+            unpack(archiveFile, unzipDir);\n+        } catch (IOException e) {\n+            throw UncheckedException.throwAsUncheckedException(e);\n+        }\n+    }\n+\n+    void unpack(File tarFile, File targetDir) throws IOException;\n+\n+    static String removeExtension(String inputFileName) {", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5NDMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465894315", "bodyText": "actually we should be able to remove this.", "author": "breskeby", "createdAt": "2020-08-05T17:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3ODY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java b/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\nindex 42f446f84c3..1b7b6ce4d42 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\n\n@@ -19,7 +19,6 @@\n \n package org.elasticsearch.gradle.transform;\n \n-import org.gradle.api.artifacts.transform.CacheableTransform;\n import org.gradle.api.artifacts.transform.InputArtifact;\n import org.gradle.api.artifacts.transform.TransformAction;\n import org.gradle.api.artifacts.transform.TransformOutputs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MDcyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465880721", "bodyText": "Is this interface required to be annotated as well?", "author": "mark-vieira", "createdAt": "2020-08-05T17:15:20Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.artifacts.transform.InputArtifact;\n+import org.gradle.api.artifacts.transform.TransformAction;\n+import org.gradle.api.artifacts.transform.TransformOutputs;\n+import org.gradle.api.artifacts.transform.TransformParameters;\n+import org.gradle.api.file.FileSystemLocation;\n+import org.gradle.api.provider.Provider;\n+import org.gradle.api.tasks.PathSensitive;\n+import org.gradle.api.tasks.PathSensitivity;\n+import org.gradle.internal.UncheckedException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+@CacheableTransform", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5Mzc4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893786", "bodyText": "nope... fixing", "author": "breskeby", "createdAt": "2020-08-05T17:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MDcyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java b/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\nindex 42f446f84c3..1b7b6ce4d42 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/transform/UnpackTransform.java\n\n@@ -19,7 +19,6 @@\n \n package org.elasticsearch.gradle.transform;\n \n-import org.gradle.api.artifacts.transform.CacheableTransform;\n import org.gradle.api.artifacts.transform.InputArtifact;\n import org.gradle.api.artifacts.transform.TransformAction;\n import org.gradle.api.artifacts.transform.TransformOutputs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTU5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465881597", "bodyText": "Since this is largly copied from SymbolicLinkPreservingUntarTask should we centralize that in a utility somewhere?", "author": "mark-vieira", "createdAt": "2020-08-05T17:16:53Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.transform;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.gradle.api.artifacts.transform.CacheableTransform;\n+import org.gradle.api.logging.Logging;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+\n+@CacheableTransform\n+public abstract class SymbolicLinkPreservingUntarTransform implements UnpackTransform {\n+\n+    public void unpack(File tarFile, File targetDir) throws IOException {", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MjMwNA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465882304", "bodyText": "Actually, now that I look at it that task is no longer used. Can we remove it?", "author": "mark-vieira", "createdAt": "2020-08-05T17:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5MzY2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893662", "bodyText": "will remove check again and remove", "author": "breskeby", "createdAt": "2020-08-05T17:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MTU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java b/buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java\nindex b2a9a902ac0..20754d077c7 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/transform/SymbolicLinkPreservingUntarTransform.java\n\n@@ -22,7 +22,6 @@ package org.elasticsearch.gradle.transform;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n-import org.gradle.api.artifacts.transform.CacheableTransform;\n import org.gradle.api.logging.Logging;\n \n import java.io.File;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODAwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465888009", "bodyText": "Should we give this a more specific name?", "author": "mark-vieira", "createdAt": "2020-08-05T17:28:05Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5MzQyMw==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893423", "bodyText": "Its something that already is provided by gradle itself. therefore I kept the name", "author": "breskeby", "createdAt": "2020-08-05T17:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java b/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\nindex 8a75585234e..4a664dac7f8 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\n\n@@ -29,32 +29,33 @@ import org.gradle.api.artifacts.Configuration;\n import org.gradle.api.artifacts.dsl.RepositoryHandler;\n import org.gradle.api.artifacts.repositories.IvyArtifactRepository;\n import org.gradle.api.artifacts.type.ArtifactTypeDefinition;\n-import org.gradle.api.attributes.Attribute;\n+import org.gradle.api.internal.artifacts.ArtifactAttributes;\n \n public class JdkDownloadPlugin implements Plugin<Project> {\n \n+    public static final String VENDOR_ADOPTOPENJDK = \"adoptopenjdk\";\n+    public static final String VENDOR_OPENJDK = \"openjdk\";\n+\n     private static final String REPO_NAME_PREFIX = \"jdk_repo_\";\n     private static final String EXTENSION_NAME = \"jdks\";\n \n     @Override\n     public void apply(Project project) {\n-        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n         project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n-\n-        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {\n-            noneTransformSpec.getFrom().attribute(artifactType, ArtifactTypeDefinition.ZIP_TYPE);\n-            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(UnzipTransform.class, transformSpec -> {\n+            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.ZIP_TYPE);\n+            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n         });\n \n         ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");\n-        project.getDependencies().registerTransform(SymbolicLinkPreservingUntarTransform.class, noneTransformSpec -> {\n-            noneTransformSpec.getFrom().attribute(artifactType, tarArtifactTypeDefinition.getName());\n-            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(SymbolicLinkPreservingUntarTransform.class, transformSpec -> {\n+            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, tarArtifactTypeDefinition.getName());\n+            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n         });\n \n         NamedDomainObjectContainer<Jdk> jdksContainer = project.container(Jdk.class, name -> {\n             Configuration configuration = project.getConfigurations().create(\"jdk_\" + name);\n-            configuration.getAttributes().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+            configuration.getAttributes().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n             Jdk jdk = new Jdk(name, configuration, project.getObjects());\n             configuration.defaultDependencies(dependencies -> {\n                 jdk.finalizeValues();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODg3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465888875", "bodyText": "Should we register .tgz as well?", "author": "mark-vieira", "createdAt": "2020-08-05T17:29:38Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n+        project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n \n-                // depend on the jdk directory \"artifact\" from the root project\n-                DependencyHandler dependencies = project.getDependencies();\n-                Map<String, Object> depConfig = new HashMap<>();\n-                depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\n-                    \"configuration\",\n-                    configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform(), jdk.getArchitecture())\n-                );\n-                project.getDependencies().add(jdk.getConfigurationName(), dependencies.project(depConfig));\n+        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {\n+            noneTransformSpec.getFrom().attribute(artifactType, ArtifactTypeDefinition.ZIP_TYPE);\n+            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        });\n \n-                // ensure a root level jdk download task exists\n-                setupRootJdkDownload(project.getRootProject(), jdk);\n-            }\n+        ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5MzA1OA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893058", "bodyText": "Seems for this particular jdk download its not required.", "author": "breskeby", "createdAt": "2020-08-05T17:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4ODg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java b/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\nindex 8a75585234e..4a664dac7f8 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\n\n@@ -29,32 +29,33 @@ import org.gradle.api.artifacts.Configuration;\n import org.gradle.api.artifacts.dsl.RepositoryHandler;\n import org.gradle.api.artifacts.repositories.IvyArtifactRepository;\n import org.gradle.api.artifacts.type.ArtifactTypeDefinition;\n-import org.gradle.api.attributes.Attribute;\n+import org.gradle.api.internal.artifacts.ArtifactAttributes;\n \n public class JdkDownloadPlugin implements Plugin<Project> {\n \n+    public static final String VENDOR_ADOPTOPENJDK = \"adoptopenjdk\";\n+    public static final String VENDOR_OPENJDK = \"openjdk\";\n+\n     private static final String REPO_NAME_PREFIX = \"jdk_repo_\";\n     private static final String EXTENSION_NAME = \"jdks\";\n \n     @Override\n     public void apply(Project project) {\n-        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n         project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n-\n-        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {\n-            noneTransformSpec.getFrom().attribute(artifactType, ArtifactTypeDefinition.ZIP_TYPE);\n-            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(UnzipTransform.class, transformSpec -> {\n+            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.ZIP_TYPE);\n+            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n         });\n \n         ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");\n-        project.getDependencies().registerTransform(SymbolicLinkPreservingUntarTransform.class, noneTransformSpec -> {\n-            noneTransformSpec.getFrom().attribute(artifactType, tarArtifactTypeDefinition.getName());\n-            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(SymbolicLinkPreservingUntarTransform.class, transformSpec -> {\n+            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, tarArtifactTypeDefinition.getName());\n+            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n         });\n \n         NamedDomainObjectContainer<Jdk> jdksContainer = project.container(Jdk.class, name -> {\n             Configuration configuration = project.getConfigurations().create(\"jdk_\" + name);\n-            configuration.getAttributes().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+            configuration.getAttributes().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n             Jdk jdk = new Jdk(name, configuration, project.getObjects());\n             configuration.defaultDependencies(dependencies -> {\n                 jdk.finalizeValues();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4OTA4MA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465889080", "bodyText": "\"noneTransformSpec\"?", "author": "mark-vieira", "createdAt": "2020-08-05T17:29:58Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java", "diffHunk": "@@ -57,218 +38,101 @@\n \n     @Override\n     public void apply(Project project) {\n-        NamedDomainObjectContainer<Jdk> jdksContainer = project.container(\n-            Jdk.class,\n-            name -> new Jdk(name, project.getConfigurations().create(\"jdk_\" + name), project.getObjects())\n-        );\n-        project.getExtensions().add(EXTENSION_NAME, jdksContainer);\n-\n-        project.afterEvaluate(p -> {\n-            for (Jdk jdk : jdksContainer) {\n-                jdk.finalizeValues();\n+        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n+        project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n \n-                // depend on the jdk directory \"artifact\" from the root project\n-                DependencyHandler dependencies = project.getDependencies();\n-                Map<String, Object> depConfig = new HashMap<>();\n-                depConfig.put(\"path\", \":\"); // root project\n-                depConfig.put(\n-                    \"configuration\",\n-                    configName(\"extracted_jdk\", jdk.getVendor(), jdk.getVersion(), jdk.getPlatform(), jdk.getArchitecture())\n-                );\n-                project.getDependencies().add(jdk.getConfigurationName(), dependencies.project(depConfig));\n+        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {", "originalCommit": "31d056acb99e48750119305074ab329004f39cf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5MzIzMA==", "url": "https://github.com/elastic/elasticsearch/pull/60713#discussion_r465893230", "bodyText": "idea is drunk :) fixing...", "author": "breskeby", "createdAt": "2020-08-05T17:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4OTA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "chunk": "diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java b/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\nindex 8a75585234e..4a664dac7f8 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/JdkDownloadPlugin.java\n\n@@ -29,32 +29,33 @@ import org.gradle.api.artifacts.Configuration;\n import org.gradle.api.artifacts.dsl.RepositoryHandler;\n import org.gradle.api.artifacts.repositories.IvyArtifactRepository;\n import org.gradle.api.artifacts.type.ArtifactTypeDefinition;\n-import org.gradle.api.attributes.Attribute;\n+import org.gradle.api.internal.artifacts.ArtifactAttributes;\n \n public class JdkDownloadPlugin implements Plugin<Project> {\n \n+    public static final String VENDOR_ADOPTOPENJDK = \"adoptopenjdk\";\n+    public static final String VENDOR_OPENJDK = \"openjdk\";\n+\n     private static final String REPO_NAME_PREFIX = \"jdk_repo_\";\n     private static final String EXTENSION_NAME = \"jdks\";\n \n     @Override\n     public void apply(Project project) {\n-        Attribute<String> artifactType = Attribute.of(\"artifactType\", String.class);\n         project.getDependencies().getArtifactTypes().maybeCreate(ArtifactTypeDefinition.ZIP_TYPE);\n-\n-        project.getDependencies().registerTransform(UnzipTransform.class, noneTransformSpec -> {\n-            noneTransformSpec.getFrom().attribute(artifactType, ArtifactTypeDefinition.ZIP_TYPE);\n-            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(UnzipTransform.class, transformSpec -> {\n+            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.ZIP_TYPE);\n+            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n         });\n \n         ArtifactTypeDefinition tarArtifactTypeDefinition = project.getDependencies().getArtifactTypes().maybeCreate(\"tar.gz\");\n-        project.getDependencies().registerTransform(SymbolicLinkPreservingUntarTransform.class, noneTransformSpec -> {\n-            noneTransformSpec.getFrom().attribute(artifactType, tarArtifactTypeDefinition.getName());\n-            noneTransformSpec.getTo().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+        project.getDependencies().registerTransform(SymbolicLinkPreservingUntarTransform.class, transformSpec -> {\n+            transformSpec.getFrom().attribute(ArtifactAttributes.ARTIFACT_FORMAT, tarArtifactTypeDefinition.getName());\n+            transformSpec.getTo().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n         });\n \n         NamedDomainObjectContainer<Jdk> jdksContainer = project.container(Jdk.class, name -> {\n             Configuration configuration = project.getConfigurations().create(\"jdk_\" + name);\n-            configuration.getAttributes().attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE);\n+            configuration.getAttributes().attribute(ArtifactAttributes.ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE);\n             Jdk jdk = new Jdk(name, configuration, project.getObjects());\n             configuration.defaultDependencies(dependencies -> {\n                 jdk.finalizeValues();\n"}}, {"oid": "efc5ad80db28ebdf2bbb6440391589685cacd2cd", "url": "https://github.com/elastic/elasticsearch/commit/efc5ad80db28ebdf2bbb6440391589685cacd2cd", "message": "Apply review feedback and cleanup", "committedDate": "2020-08-05T19:20:18Z", "type": "commit"}]}