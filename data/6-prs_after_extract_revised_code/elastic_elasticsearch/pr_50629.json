{"pr_number": 50629, "pr_title": "Correct search_after handling", "pr_createdAt": "2020-01-04T13:31:19Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50629", "timeline": [{"oid": "0cbf00aece71286fcd59d04ba6206be407793407", "url": "https://github.com/elastic/elasticsearch/commit/0cbf00aece71286fcd59d04ba6206be407793407", "message": "Correct search_after handling", "committedDate": "2020-01-04T13:27:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1NTQwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363355405", "bodyText": "Could you make a constant out of this?", "author": "imotov", "createdAt": "2020-01-06T15:57:14Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java", "diffHunk": "@@ -29,10 +29,9 @@\n \n public class RestEqlSearchAction extends BaseRestHandler {\n     public RestEqlSearchAction(RestController controller) {\n-        // Not sure yet if we will always have index in the path or not\n-        // TODO: finalize the endpoints\n-        controller.registerHandler(GET, \"/{index}/_eql/search\", this);\n-        controller.registerHandler(POST, \"/{index}/_eql/search\", this);\n+        final String path = \"/{index}/_eql/search\";", "originalCommit": "0cbf00aece71286fcd59d04ba6206be407793407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwNjc0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363406741", "bodyText": "done", "author": "aleksmaus", "createdAt": "2020-01-06T17:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1NTQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "32eeae1d914b8b1563b77a2ce02793d113ebd600", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java\nindex 2caf3e6f2d2..8a46ba44185 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java\n\n@@ -28,11 +28,11 @@ import static org.elasticsearch.rest.RestRequest.Method.GET;\n import static org.elasticsearch.rest.RestRequest.Method.POST;\n \n public class RestEqlSearchAction extends BaseRestHandler {\n-    public RestEqlSearchAction(RestController controller) {\n-        final String path = \"/{index}/_eql/search\";\n-        controller.registerHandler(GET, path, this);\n-        controller.registerHandler(POST, path, this);\n+    private static final String SEARCH_PATH = \"/{index}/_eql/search\";\n \n+    public RestEqlSearchAction(RestController controller) {\n+        controller.registerHandler(GET, SEARCH_PATH, this);\n+        controller.registerHandler(POST, SEARCH_PATH, this);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363358182", "bodyText": "How about an empty list?", "author": "imotov", "createdAt": "2020-01-06T16:03:02Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);", "originalCommit": "0cbf00aece71286fcd59d04ba6206be407793407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwNjYxOA==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363406618", "bodyText": "normally SearchAfter doesn't accept the empty list, throws error:\n    java.lang.IllegalArgumentException: Values must contains at least one value.\n\nThe original searchafter test doesn't use empty list as well\n\n  \n    \n      elasticsearch/server/src/test/java/org/elasticsearch/search/searchafter/SearchAfterBuilderTests.java\n    \n    \n         Line 101\n      in\n      df83eb9\n    \n    \n    \n    \n\n        \n          \n           int numSearchAfter = randomIntBetween(1, 10);", "author": "aleksmaus", "createdAt": "2020-01-06T17:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzNjcwOA==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363436708", "bodyText": "How about returning setting search after values to null sometimes then?", "author": "imotov", "createdAt": "2020-01-06T19:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ0MzQxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363443411", "bodyText": "Already handled there as well\n    java.lang.NullPointerException: Values cannot be null.\n        at __randomizedtesting.SeedInfo.seed([1C63F70E75AEE77B:48BB964652FCDAE7]:0)\n        at org.elasticsearch.search.searchafter.SearchAfterBuilder.setSortValues(SearchAfterBuilder.java:78)", "author": "aleksmaus", "createdAt": "2020-01-06T19:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3ODcxNw==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363478717", "bodyText": "discussed over slack, updated implementation", "author": "aleksmaus", "createdAt": "2020-01-06T20:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "32eeae1d914b8b1563b77a2ce02793d113ebd600", "chunk": "diff --git a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java\nindex 747537b1cfb..2790fd68599 100644\n--- a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java\n+++ b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java\n\n@@ -83,45 +86,28 @@ public class EqlSearchRequestTests extends AbstractSerializingTestCase<EqlSearch\n         return parseInnerQueryBuilder;\n     }\n \n+    private Object randomValue() {\n+        Supplier<Object> value = randomFrom(Arrays.asList(\n+            ESTestCase::randomInt,\n+            ESTestCase::randomFloat,\n+            ESTestCase::randomLong,\n+            ESTestCase::randomDouble,\n+            () -> randomAlphaOfLengthBetween(5, 20),\n+            ESTestCase::randomBoolean,\n+            ESTestCase::randomByte,\n+            ESTestCase::randomShort,\n+            () -> new Text(randomAlphaOfLengthBetween(5, 20)),\n+            () -> null));\n+        return value.get();\n+    }\n+\n     private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n         int numSearchAfter = randomIntBetween(1, 10);\n         XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n         jsonBuilder.startObject();\n         jsonBuilder.startArray(\"search_after\");\n         for (int i = 0; i < numSearchAfter; i++) {\n-            int branch = randomInt(9);\n-            switch (branch) {\n-                case 0:\n-                    jsonBuilder.value(randomInt());\n-                    break;\n-                case 1:\n-                    jsonBuilder.value(randomFloat());\n-                    break;\n-                case 2:\n-                    jsonBuilder.value(randomLong());\n-                    break;\n-                case 3:\n-                    jsonBuilder.value(randomDouble());\n-                    break;\n-                case 4:\n-                    jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n-                    break;\n-                case 5:\n-                    jsonBuilder.value(randomBoolean());\n-                    break;\n-                case 6:\n-                    jsonBuilder.value(randomByte());\n-                    break;\n-                case 7:\n-                    jsonBuilder.value(randomShort());\n-                    break;\n-                case 8:\n-                    jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n-                    break;\n-                case 9:\n-                    jsonBuilder.nullValue();\n-                    break;\n-            }\n+            jsonBuilder.value(randomValue());\n         }\n         jsonBuilder.endArray();\n         jsonBuilder.endObject();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODUyOA==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363358528", "bodyText": "I think there is LuceneTests.randomSortValue() that generates random sort values. I wonder if we could use it here.", "author": "imotov", "createdAt": "2020-01-06T16:03:45Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java", "diffHunk": "@@ -74,16 +83,53 @@ protected QueryBuilder parseQuery(XContentParser parser) throws IOException {\n         return parseInnerQueryBuilder;\n     }\n \n-    private List<String> randomSearchAfter() {\n-        if (randomBoolean()) {\n-            return Collections.emptyList();\n-        } else {\n-            int size = randomIntBetween(1, 50);\n-            List<String> arr = new ArrayList<>(size);\n-            for (int i = 0; i < size; i++) {\n-                arr.add(randomAlphaOfLength(randomIntBetween(1, 15)));\n+    private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n+        int numSearchAfter = randomIntBetween(1, 10);\n+        XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n+        jsonBuilder.startObject();\n+        jsonBuilder.startArray(\"search_after\");\n+        for (int i = 0; i < numSearchAfter; i++) {\n+            int branch = randomInt(9);", "originalCommit": "0cbf00aece71286fcd59d04ba6206be407793407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2Nzc4OA==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363367788", "bodyText": "If it is not possible, I think there is a better pattern for this base on randomFrom(...) and Supplier<...>", "author": "imotov", "createdAt": "2020-01-06T16:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwOTcwMg==", "url": "https://github.com/elastic/elasticsearch/pull/50629#discussion_r363409702", "bodyText": "updated to a better pattern", "author": "aleksmaus", "createdAt": "2020-01-06T18:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1ODUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "32eeae1d914b8b1563b77a2ce02793d113ebd600", "chunk": "diff --git a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java\nindex 747537b1cfb..2790fd68599 100644\n--- a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java\n+++ b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/action/EqlSearchRequestTests.java\n\n@@ -83,45 +86,28 @@ public class EqlSearchRequestTests extends AbstractSerializingTestCase<EqlSearch\n         return parseInnerQueryBuilder;\n     }\n \n+    private Object randomValue() {\n+        Supplier<Object> value = randomFrom(Arrays.asList(\n+            ESTestCase::randomInt,\n+            ESTestCase::randomFloat,\n+            ESTestCase::randomLong,\n+            ESTestCase::randomDouble,\n+            () -> randomAlphaOfLengthBetween(5, 20),\n+            ESTestCase::randomBoolean,\n+            ESTestCase::randomByte,\n+            ESTestCase::randomShort,\n+            () -> new Text(randomAlphaOfLengthBetween(5, 20)),\n+            () -> null));\n+        return value.get();\n+    }\n+\n     private SearchAfterBuilder randomJsonSearchFromBuilder() throws IOException {\n         int numSearchAfter = randomIntBetween(1, 10);\n         XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n         jsonBuilder.startObject();\n         jsonBuilder.startArray(\"search_after\");\n         for (int i = 0; i < numSearchAfter; i++) {\n-            int branch = randomInt(9);\n-            switch (branch) {\n-                case 0:\n-                    jsonBuilder.value(randomInt());\n-                    break;\n-                case 1:\n-                    jsonBuilder.value(randomFloat());\n-                    break;\n-                case 2:\n-                    jsonBuilder.value(randomLong());\n-                    break;\n-                case 3:\n-                    jsonBuilder.value(randomDouble());\n-                    break;\n-                case 4:\n-                    jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n-                    break;\n-                case 5:\n-                    jsonBuilder.value(randomBoolean());\n-                    break;\n-                case 6:\n-                    jsonBuilder.value(randomByte());\n-                    break;\n-                case 7:\n-                    jsonBuilder.value(randomShort());\n-                    break;\n-                case 8:\n-                    jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n-                    break;\n-                case 9:\n-                    jsonBuilder.nullValue();\n-                    break;\n-            }\n+            jsonBuilder.value(randomValue());\n         }\n         jsonBuilder.endArray();\n         jsonBuilder.endObject();\n"}}, {"oid": "32eeae1d914b8b1563b77a2ce02793d113ebd600", "url": "https://github.com/elastic/elasticsearch/commit/32eeae1d914b8b1563b77a2ce02793d113ebd600", "message": "Address Igor's code review suggestions", "committedDate": "2020-01-06T18:04:41Z", "type": "commit"}, {"oid": "68ee15fc47bb3403ac5a2eebc20c83bf9681946c", "url": "https://github.com/elastic/elasticsearch/commit/68ee15fc47bb3403ac5a2eebc20c83bf9681946c", "message": "Update EqlSearchRequest unit test for null searchAfterBuilder cases", "committedDate": "2020-01-06T20:07:42Z", "type": "forcePushed"}, {"oid": "1bd432752384dd2ff5d7f1996f23ba681a5b25bc", "url": "https://github.com/elastic/elasticsearch/commit/1bd432752384dd2ff5d7f1996f23ba681a5b25bc", "message": "Update EqlSearchRequest unit test for null searchAfterBuilder cases", "committedDate": "2020-01-06T20:31:27Z", "type": "commit"}, {"oid": "1bd432752384dd2ff5d7f1996f23ba681a5b25bc", "url": "https://github.com/elastic/elasticsearch/commit/1bd432752384dd2ff5d7f1996f23ba681a5b25bc", "message": "Update EqlSearchRequest unit test for null searchAfterBuilder cases", "committedDate": "2020-01-06T20:31:27Z", "type": "forcePushed"}]}