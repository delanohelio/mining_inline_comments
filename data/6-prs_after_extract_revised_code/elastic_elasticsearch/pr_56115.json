{"pr_number": 56115, "pr_title": "SQL: Fix issue with date range queries and timezone", "pr_createdAt": "2020-05-04T14:17:19Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56115", "timeline": [{"oid": "aade9568238087fa4a740b2e6e8ee5de72605176", "url": "https://github.com/elastic/elasticsearch/commit/aade9568238087fa4a740b2e6e8ee5de72605176", "message": "SQL: Fix issue with date range queries and timezone\n\nPreviously, the timezone parameter was not passed to the RangeQuery\nand as a results queries that use the ES date math notation (now,\nnow-1d, now/d, now/h, now+2h, etc.) were using the UTC timezone and\nnot the one passed through the \"timezone\"/\"time_zone\" JDBC/REST params.\nAs a consequence, the date math defined dates were always considered in\nUTC and possibly led to incorrect results for queries like:\n```\nSELECT * FROM t WHERE date BETWEEN now-1d/d AND now/d\n```\n\nFixes: #56049", "committedDate": "2020-05-04T13:58:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMDIzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419520231", "bodyText": "I think it's too disruptive to pass the zoneId to all translations as the vast majority of the nodes will simply ignore it.\nIt also forces one to think of an expression in terms of a timezone which is incorrect.\nOnly some expressions have a zoneId so that information should be localized instead of being passed at a higher level.\nIn this case, the zoneId should be on the comparison operator (either inferred based on the arguments or extracted from the configuration) and the translator should only extract it from there.", "author": "costin", "createdAt": "2020-05-04T15:25:22Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryFolder.java", "diffHunk": "@@ -53,7 +53,7 @@ protected PhysicalPlan rule(FilterExec plan) {\n                 EsQueryExec exec = (EsQueryExec) plan.child();\n                 QueryContainer qContainer = exec.queryContainer();\n \n-                Query query = ExpressionTranslators.toQuery(plan.condition());\n+                Query query = ExpressionTranslators.toQuery(plan.condition(), qContainer.zoneId());", "originalCommit": "aade9568238087fa4a740b2e6e8ee5de72605176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28a1e0647288e8043102891faeec26eab01a5fef", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryFolder.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryFolder.java\nindex 916d930e5bc..0543b3ffd67 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryFolder.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryFolder.java\n\n@@ -53,7 +53,7 @@ class QueryFolder extends RuleExecutor<PhysicalPlan> {\n                 EsQueryExec exec = (EsQueryExec) plan.child();\n                 QueryContainer qContainer = exec.queryContainer();\n \n-                Query query = ExpressionTranslators.toQuery(plan.condition(), qContainer.zoneId());\n+                Query query = ExpressionTranslators.toQuery(plan.condition());\n \n                 if (qContainer.query() != null || query != null) {\n                     query = ExpressionTranslators.and(plan.source(), qContainer.query(), query);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMTIzMA==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419521230", "bodyText": "A handler could contain the default zoneId however since these are created statically, there's no way to pass that through during construction time.", "author": "costin", "createdAt": "2020-05-04T15:26:48Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -249,17 +251,21 @@ private static Query translate(BinaryComparison bc, TranslatorHandler handler) {\n                 isDateLiteralComparison = true;\n             }\n \n+            ZoneId zoneId = null;\n+            if (bc.left().dataType() == DATETIME) {", "originalCommit": "aade9568238087fa4a740b2e6e8ee5de72605176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28a1e0647288e8043102891faeec26eab01a5fef", "chunk": "diff --git a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\nindex 7803ffbfd64..cd003dc55d1 100644\n--- a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\n+++ b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java\n\n@@ -251,21 +249,17 @@ public final class ExpressionTranslators {\n                 isDateLiteralComparison = true;\n             }\n \n-            ZoneId zoneId = null;\n-            if (bc.left().dataType() == DATETIME) {\n-                zoneId = handler.zoneId();\n-            }\n             if (bc instanceof GreaterThan) {\n-                return new RangeQuery(source, name, value, false, null, false, format, zoneId);\n+                return new RangeQuery(source, name, value, false, null, false, format);\n             }\n             if (bc instanceof GreaterThanOrEqual) {\n-                return new RangeQuery(source, name, value, true, null, false, format, zoneId);\n+                return new RangeQuery(source, name, value, true, null, false, format);\n             }\n             if (bc instanceof LessThan) {\n-                return new RangeQuery(source, name, null, false, value, false, format, zoneId);\n+                return new RangeQuery(source, name, null, false, value, false, format);\n             }\n             if (bc instanceof LessThanOrEqual) {\n-                return new RangeQuery(source, name, null, false, value, true, format, zoneId);\n+                return new RangeQuery(source, name, null, false, value, true, format);\n             }\n             if (bc instanceof Equals || bc instanceof NullEquals || bc instanceof NotEquals) {\n                 if (bc.left() instanceof FieldAttribute) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjMxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419522319", "bodyText": "Ughhh - a good example of how formatting penalizes clarity. Rename source into s or includeLower into iLower, etc... and boom, now everything fits into one line.", "author": "costin", "createdAt": "2020-05-04T15:28:20Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/querydsl/query/RangeQuery.java", "diffHunk": "@@ -20,20 +21,30 @@\n     private final Object lower, upper;\n     private final boolean includeLower, includeUpper;\n     private final String format;\n+    private final ZoneId zoneId;\n \n-    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper, boolean includeUpper) {\n-        this(source, field, lower, includeLower, upper, includeUpper, null);\n+    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper, boolean includeUpper, ZoneId zoneId) {\n+        this(source, field, lower, includeLower, upper, includeUpper, null, zoneId);\n     }\n \n-    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper,\n-            boolean includeUpper, String format) {\n+    public RangeQuery(", "originalCommit": "aade9568238087fa4a740b2e6e8ee5de72605176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28a1e0647288e8043102891faeec26eab01a5fef", "chunk": "diff --git a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/querydsl/query/RangeQuery.java b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/querydsl/query/RangeQuery.java\nindex dd25ae1bd18..1bc460175c8 100644\n--- a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/querydsl/query/RangeQuery.java\n+++ b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/querydsl/query/RangeQuery.java\n\n@@ -21,22 +20,13 @@ public class RangeQuery extends LeafQuery {\n     private final Object lower, upper;\n     private final boolean includeLower, includeUpper;\n     private final String format;\n-    private final ZoneId zoneId;\n \n-    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper, boolean includeUpper, ZoneId zoneId) {\n-        this(source, field, lower, includeLower, upper, includeUpper, null, zoneId);\n+    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper, boolean includeUpper) {\n+        this(source, field, lower, includeLower, upper, includeUpper, null);\n     }\n \n-    public RangeQuery(\n-        Source source,\n-        String field,\n-        Object lower,\n-        boolean includeLower,\n-        Object upper,\n-        boolean includeUpper,\n-        String format,\n-        ZoneId zoneId\n-    ) {\n+    public RangeQuery(Source source, String field, Object lower, boolean includeLower, Object upper,\n+            boolean includeUpper, String format) {\n         super(source);\n         this.field = field;\n         this.lower = lower;\n"}}, {"oid": "28a1e0647288e8043102891faeec26eab01a5fef", "url": "https://github.com/elastic/elasticsearch/commit/28a1e0647288e8043102891faeec26eab01a5fef", "message": "Revert \"SQL: Fix issue with date range queries and timezone\"\n\nThis reverts commit aade9568238087fa4a740b2e6e8ee5de72605176.", "committedDate": "2020-05-04T15:51:53Z", "type": "commit"}, {"oid": "8ff6e4ba4e0e766fa6beb1cda311b01e9b26309b", "url": "https://github.com/elastic/elasticsearch/commit/8ff6e4ba4e0e766fa6beb1cda311b01e9b26309b", "message": "re-enable test changes", "committedDate": "2020-05-04T15:55:48Z", "type": "commit"}, {"oid": "30e8467a1e50822467c1e943dbd399952711cab2", "url": "https://github.com/elastic/elasticsearch/commit/30e8467a1e50822467c1e943dbd399952711cab2", "message": "different approach, pass timezone to comparison functions", "committedDate": "2020-05-04T18:42:27Z", "type": "commit"}, {"oid": "189bf8e801b37ac747f1ba5486c8da4049740278", "url": "https://github.com/elastic/elasticsearch/commit/189bf8e801b37ac747f1ba5486c8da4049740278", "message": "Merge remote-tracking branch 'upstream/master' into fix-56049", "committedDate": "2020-05-04T19:14:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxODY0NA==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419718644", "bodyText": "For Equals without timezone I think it's best to create a constructor that doesn't require the tz , have the tz as null and potentially validate that it's not being used.\nThe tz should not be used in this case so forcing its user to specify one is just going to lead to problems.", "author": "costin", "createdAt": "2020-05-04T20:48:29Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -105,7 +106,7 @@ public ScalarFunction makeSubstitute() {\n         ScalarFunction func = null;\n \n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address);\n+            final Equals eq = new Equals(source(), field, address, UTC);", "originalCommit": "189bf8e801b37ac747f1ba5486c8da4049740278", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczMTg1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419731855", "bodyText": "Could you explain a bit more about this validation that you mention? Validation for the CIDRMatch function or for the Equals?", "author": "matriv", "createdAt": "2020-05-04T21:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxODY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "b8989d5103701e83d180775166c42c00cfad7d31", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java\nindex f23abc35738..b7d5ea88ba3 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java\n\n@@ -106,7 +105,7 @@ public class CIDRMatch extends BaseSurrogateFunction {\n         ScalarFunction func = null;\n \n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address, UTC);\n+            final Equals eq = new Equals(source(), field, address);\n             func = (func == null) ? eq : new Or(source(), func, eq);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxOTY4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419719683", "bodyText": "Similar to source, just extract the params.zoneId into a variable an use that instead - less verbose and makes potential refactoring easier in the future.", "author": "costin", "createdAt": "2020-05-04T20:50:21Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/ExpressionBuilder.java", "diffHunk": "@@ -118,17 +124,17 @@ public Expression visitComparison(ComparisonContext ctx) {\n \n         switch (op.getSymbol().getType()) {\n             case EqlBaseParser.EQ:\n-                return new Equals(source, left, right);\n+                return new Equals(source, left, right, params.zoneId());", "originalCommit": "189bf8e801b37ac747f1ba5486c8da4049740278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8989d5103701e83d180775166c42c00cfad7d31", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/ExpressionBuilder.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/ExpressionBuilder.java\nindex ed4c3dd0658..4f97672a225 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/ExpressionBuilder.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/ExpressionBuilder.java\n\n@@ -121,20 +122,21 @@ public class ExpressionBuilder extends IdentifierBuilder {\n         TerminalNode op = (TerminalNode) ctx.comparisonOperator().getChild(0);\n \n         Source source = source(ctx);\n+        ZoneId zoneId = params.zoneId();\n \n         switch (op.getSymbol().getType()) {\n             case EqlBaseParser.EQ:\n-                return new Equals(source, left, right, params.zoneId());\n+                return new Equals(source, left, right, zoneId);\n             case EqlBaseParser.NEQ:\n-                return new NotEquals(source, left, right, params.zoneId());\n+                return new NotEquals(source, left, right, zoneId);\n             case EqlBaseParser.LT:\n-                return new LessThan(source, left, right, params.zoneId());\n+                return new LessThan(source, left, right, zoneId);\n             case EqlBaseParser.LTE:\n-                return new LessThanOrEqual(source, left, right, params.zoneId());\n+                return new LessThanOrEqual(source, left, right, zoneId);\n             case EqlBaseParser.GT:\n-                return new GreaterThan(source, left, right, params.zoneId());\n+                return new GreaterThan(source, left, right, zoneId);\n             case EqlBaseParser.GTE:\n-                return new GreaterThanOrEqual(source, left, right, params.zoneId());\n+                return new GreaterThanOrEqual(source, left, right, zoneId);\n             default:\n                 throw new ParsingException(source, \"Unknown operator {}\", source.text());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxOTgxNg==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419719816", "bodyText": "\ud83d\udc4d", "author": "costin", "createdAt": "2020-05-04T20:50:37Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/LogicalPlanBuilder.java", "diffHunk": "@@ -56,7 +55,7 @@ public LogicalPlan visitEventQuery(EqlBaseParser.EventQueryContext ctx) {\n             Literal eventValue = new Literal(eventSource, eventName, DataTypes.KEYWORD);\n \n             UnresolvedAttribute eventField = new UnresolvedAttribute(eventSource, params.fieldEventCategory());\n-            Expression eventMatch = new Equals(eventSource, eventField, eventValue);\n+            Expression eventMatch = new Equals(eventSource, eventField, eventValue, params.zoneId());", "originalCommit": "189bf8e801b37ac747f1ba5486c8da4049740278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMDA0NA==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419720044", "bodyText": "\ud83d\udc4d", "author": "costin", "createdAt": "2020-05-04T20:50:59Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/TransportEqlSearchAction.java", "diffHunk": "@@ -64,7 +64,7 @@ public static void operation(PlanExecutor planExecutor, EqlSearchTask task, EqlS\n         boolean includeFrozen = request.indicesOptions().ignoreThrottled() == false;\n         String clientId = null;\n \n-        ParserParams params = new ParserParams()\n+        ParserParams params = new ParserParams(zoneId)", "originalCommit": "189bf8e801b37ac747f1ba5486c8da4049740278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMDIyOA==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419720228", "bodyText": ":)", "author": "costin", "createdAt": "2020-05-04T20:51:21Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/Range.java", "diffHunk": "@@ -35,28 +36,30 @@\n \n     private final Expression value, lower, upper;\n     private final boolean includeLower, includeUpper;\n+    private final ZoneId zoneId;\n \n-    public Range(Source source, Expression value, Expression lower, boolean includeLower, Expression upper, boolean includeUpper) {\n-        super(source, asList(value, lower, upper));\n+    public Range(Source src, Expression value, Expression lower, boolean inclLower, Expression upper, boolean inclUpper, ZoneId zoneId) {", "originalCommit": "189bf8e801b37ac747f1ba5486c8da4049740278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMTkzMg==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419721932", "bodyText": "What would be the downside of always getting the zoneId and passing it to the range query ?", "author": "costin", "createdAt": "2020-05-04T20:54:27Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/planner/ExpressionTranslators.java", "diffHunk": "@@ -249,17 +251,21 @@ private static Query translate(BinaryComparison bc, TranslatorHandler handler) {\n                 isDateLiteralComparison = true;\n             }\n \n+            ZoneId zoneId = null;\n+            if (bc.left().dataType() == DATETIME) {\n+                zoneId = bc.zoneId();", "originalCommit": "189bf8e801b37ac747f1ba5486c8da4049740278", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNzc2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419727763", "bodyText": "I don't see a \"downside\" other than possible confusion when one sees the translated query.\nthe timezone is only used for processing ES date math expressions.", "author": "matriv", "createdAt": "2020-05-04T21:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMTkzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMjU1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56115#discussion_r419722557", "bodyText": "\ud83d\udc4d", "author": "costin", "createdAt": "2020-05-04T20:55:31Z", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/optimizer/OptimizerRulesTests.java", "diffHunk": "@@ -44,12 +44,21 @@\n import org.elasticsearch.xpack.ql.type.DataType;\n import org.elasticsearch.xpack.ql.type.EsField;\n \n+import java.time.ZoneId;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n import static java.util.Collections.emptyMap;\n+import static org.elasticsearch.xpack.ql.TestUtils.equalsOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.greaterThanOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.greaterThanOrEqualOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.lessThanOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.lessThanOrEqualOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.notEqualsOf;\n+import static org.elasticsearch.xpack.ql.TestUtils.nullEqualsOf;\n import static org.elasticsearch.xpack.ql.TestUtils.of;\n+import static org.elasticsearch.xpack.ql.TestUtils.rangeOf;\n import static org.elasticsearch.xpack.ql.expression.Literal.FALSE;\n import static org.elasticsearch.xpack.ql.expression.Literal.NULL;\n import static org.elasticsearch.xpack.ql.expression.Literal.TRUE;", "originalCommit": "189bf8e801b37ac747f1ba5486c8da4049740278", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "b8989d5103701e83d180775166c42c00cfad7d31", "url": "https://github.com/elastic/elasticsearch/commit/b8989d5103701e83d180775166c42c00cfad7d31", "message": "Address comments", "committedDate": "2020-05-04T21:11:57Z", "type": "commit"}]}