{"pr_number": 62720, "pr_title": "Make keep alive optional in PointInTimeBuilder", "pr_createdAt": "2020-09-21T17:58:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62720", "timeline": [{"oid": "e61ace07947de91cf5729d7ec24bfc661dec242e", "url": "https://github.com/elastic/elasticsearch/commit/e61ace07947de91cf5729d7ec24bfc661dec242e", "message": "Make keep alive optional in PointInTimeBuilder", "committedDate": "2020-09-21T17:56:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MDI4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62720#discussion_r492260281", "bodyText": "Can you add javadoc", "author": "jimczi", "createdAt": "2020-09-21T18:23:43Z", "path": "server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java", "diffHunk": "@@ -1702,7 +1701,12 @@ public static PointInTimeBuilder fromXContent(XContentParser parser) throws IOEx\n             if (params.id == null) {\n                 throw new IllegalArgumentException(\"point int time id is not provided\");\n             }\n-            return new PointInTimeBuilder(params.id, params.keepAlive);\n+            return new PointInTimeBuilder(params.id).setKeepAlive(params.keepAlive);\n+        }\n+\n+        public PointInTimeBuilder setKeepAlive(TimeValue keepAlive) {", "originalCommit": "e61ace07947de91cf5729d7ec24bfc661dec242e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNjI0NA==", "url": "https://github.com/elastic/elasticsearch/pull/62720#discussion_r492436244", "bodyText": "Added in 5af7203", "author": "dnhatn", "createdAt": "2020-09-22T01:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MDI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5af72036b99e9f0c78f116948404f67af036fbe9", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java b/server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java\nindex 9fe3651cbb3..461cf5456c7 100644\n--- a/server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java\n\n@@ -1646,88 +1645,4 @@ public final class SearchSourceBuilder implements Writeable, ToXContentObject, R\n         }\n     }\n \n-    /**\n-     * Specify whether this search should use specific reader contexts instead of the latest ones.\n-     */\n-    public static final class PointInTimeBuilder implements Writeable, ToXContentObject {\n-        private static final ParseField ID_FIELD = new ParseField(\"id\");\n-        private static final ParseField KEEP_ALIVE_FIELD = new ParseField(\"keep_alive\");\n-        private static final ObjectParser<XContentParams, Void> PARSER;\n-\n-        static {\n-            PARSER = new ObjectParser<>(POINT_IN_TIME.getPreferredName(), XContentParams::new);\n-            PARSER.declareString((params, id) -> params.id = id, ID_FIELD);\n-            PARSER.declareField((params, keepAlive) -> params.keepAlive = keepAlive,\n-                (p, c) -> TimeValue.parseTimeValue(p.text(), KEEP_ALIVE_FIELD.getPreferredName()),\n-                KEEP_ALIVE_FIELD, ObjectParser.ValueType.STRING);\n-        }\n-\n-        private static final class XContentParams {\n-            private String id;\n-            private TimeValue keepAlive;\n-        }\n-\n-        private final String id;\n-        private TimeValue keepAlive;\n-\n-        public PointInTimeBuilder(String id) {\n-            this.id = Objects.requireNonNull(id);\n-        }\n-\n-        public PointInTimeBuilder(StreamInput in) throws IOException {\n-            id = in.readString();\n-            keepAlive = in.readOptionalTimeValue();\n-        }\n-\n-        @Override\n-        public void writeTo(StreamOutput out) throws IOException {\n-            out.writeString(id);\n-            out.writeOptionalTimeValue(keepAlive);\n-        }\n-\n-        @Override\n-        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n-            builder.startObject(POINT_IN_TIME.getPreferredName());\n-            builder.field(ID_FIELD.getPreferredName(), id);\n-            if (keepAlive != null) {\n-                builder.field(KEEP_ALIVE_FIELD.getPreferredName(), keepAlive);\n-            }\n-            builder.endObject();\n-            return builder;\n-        }\n-\n-        public static PointInTimeBuilder fromXContent(XContentParser parser) throws IOException {\n-            final XContentParams params = PARSER.parse(parser, null);\n-            if (params.id == null) {\n-                throw new IllegalArgumentException(\"point int time id is not provided\");\n-            }\n-            return new PointInTimeBuilder(params.id).setKeepAlive(params.keepAlive);\n-        }\n-\n-        public PointInTimeBuilder setKeepAlive(TimeValue keepAlive) {\n-            this.keepAlive = keepAlive;\n-            return this;\n-        }\n-\n-        public TimeValue getKeepAlive() {\n-            return keepAlive;\n-        }\n-\n-        public String getId() {\n-            return id;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-            final PointInTimeBuilder that = (PointInTimeBuilder) o;\n-            return Objects.equals(id, that.id) && Objects.equals(keepAlive, that.keepAlive);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(id, keepAlive);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MDY1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62720#discussion_r492260651", "bodyText": "Should this be renamed to setPointInTime or setPointInTimeBuilder ?", "author": "jimczi", "createdAt": "2020-09-21T18:24:30Z", "path": "server/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java", "diffHunk": "@@ -549,7 +549,7 @@ public SearchRequestBuilder setCollapse(CollapseBuilder collapse) {\n      * @param keepAlive       the extended time to live for the search context\n      */\n     public SearchRequestBuilder setSearchContext(String searchContextId, TimeValue keepAlive) {", "originalCommit": "e61ace07947de91cf5729d7ec24bfc661dec242e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNjE5MA==", "url": "https://github.com/elastic/elasticsearch/pull/62720#discussion_r492436190", "bodyText": "++. I pushed 5af7203", "author": "dnhatn", "createdAt": "2020-09-22T01:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MDY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5af72036b99e9f0c78f116948404f67af036fbe9", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java b/server/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java\nindex a37649d859b..485c3e35009 100644\n--- a/server/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java\n\n@@ -543,13 +544,10 @@ public class SearchRequestBuilder extends ActionRequestBuilder<SearchRequest, Se\n     }\n \n     /**\n-     * Specifies the search context that Elasticsearch should use to perform the query\n-     *\n-     * @param searchContextId the base64 encoded string of the search context id\n-     * @param keepAlive       the extended time to live for the search context\n+     * If specified, Elasticsearch will execute this search request using reader contexts from that point in time.\n      */\n-    public SearchRequestBuilder setSearchContext(String searchContextId, TimeValue keepAlive) {\n-        sourceBuilder().pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(searchContextId).setKeepAlive(keepAlive));\n+    public SearchRequestBuilder setPointInTime(PointInTimeBuilder pointInTimeBuilder) {\n+        sourceBuilder().pointInTimeBuilder(pointInTimeBuilder);\n         return this;\n     }\n \n"}}, {"oid": "25b9eeb89905413ea74a4966bf8a046b9a8db1ad", "url": "https://github.com/elastic/elasticsearch/commit/25b9eeb89905413ea74a4966bf8a046b9a8db1ad", "message": "Merge branch 'master' into pit-feedback", "committedDate": "2020-09-21T21:19:54Z", "type": "commit"}, {"oid": "5af72036b99e9f0c78f116948404f67af036fbe9", "url": "https://github.com/elastic/elasticsearch/commit/5af72036b99e9f0c78f116948404f67af036fbe9", "message": "Make it a separate class", "committedDate": "2020-09-21T22:32:21Z", "type": "commit"}, {"oid": "07d651325f4631076be7997e00dbae9adcc88560", "url": "https://github.com/elastic/elasticsearch/commit/07d651325f4631076be7997e00dbae9adcc88560", "message": "fix tests", "committedDate": "2020-09-21T23:03:27Z", "type": "commit"}]}