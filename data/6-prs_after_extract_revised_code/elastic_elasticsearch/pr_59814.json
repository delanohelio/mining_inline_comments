{"pr_number": 59814, "pr_title": "Remove basic feature checks from license state", "pr_createdAt": "2020-07-17T20:49:14Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59814", "timeline": [{"oid": "1e407a98017428244c8b8288bb843d934c2e10da", "url": "https://github.com/elastic/elasticsearch/commit/1e407a98017428244c8b8288bb843d934c2e10da", "message": "Remove basic feature checks from license state\n\nThe XPackLicenseState is a utility to handle checking the currently\nconfigured license level against the required license level of each\nlicensed feature. Originally all licensed features were paid features\nand licenses always had a limited time scope. However, since the basic\nlicense was introduced, all users have an unlimited time use of basic\nfeatures; there is no actual \"basic license\", rather it is the base case\nfor the default distribution. Therefore, the checks on basic features in\nlicense state are no-ops because the current license always at least\nallows basic features, and the basic license cannot be expired.\n\nThis commit removes all of the features from the license state marked as\nBASIC or MISSING (a level lower than BASIC that also predates the basic\nlicense and is no longer relevant). It also adds an assertion that no\nbasic license features can be added to the license state in the future.", "committedDate": "2020-07-17T20:43:03Z", "type": "commit"}, {"oid": "cace4eaef55676bafb2163b3e66822c4c23de712", "url": "https://github.com/elastic/elasticsearch/commit/cace4eaef55676bafb2163b3e66822c4c23de712", "message": "remove forgotten analytics constant", "committedDate": "2020-07-17T21:22:36Z", "type": "commit"}, {"oid": "83dd57c1fcf0f3faf7849a67b1893865d526acf0", "url": "https://github.com/elastic/elasticsearch/commit/83dd57c1fcf0f3faf7849a67b1893865d526acf0", "message": "Merge branch 'master' into refactor_license15", "committedDate": "2020-07-17T22:42:04Z", "type": "commit"}, {"oid": "9a210eed18dd3dee6a3e33849b4bfadf446f2c5a", "url": "https://github.com/elastic/elasticsearch/commit/9a210eed18dd3dee6a3e33849b4bfadf446f2c5a", "message": "checkstyle", "committedDate": "2020-07-17T22:54:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3OTk3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r456779972", "bodyText": "Can we just remove this method? If so, we can also remove getLicenseState and the relevant imports.", "author": "ywangd", "createdAt": "2020-07-18T11:23:35Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsPlugin.java", "diffHunk": "@@ -170,9 +168,6 @@ public AnalyticsPlugin() { }\n \n     private static <T> ContextParser<String, T> checkLicense(ContextParser<String, T> realParser) {", "originalCommit": "9a210eed18dd3dee6a3e33849b4bfadf446f2c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8def7f1bf691027dcbaf7105b54a8020257d0563", "chunk": "diff --git a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsPlugin.java b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsPlugin.java\nindex 182cd0e7ebf..c46488e6689 100644\n--- a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsPlugin.java\n+++ b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsPlugin.java\n\n@@ -165,10 +171,4 @@ public class AnalyticsPlugin extends Plugin implements SearchPlugin, ActionPlugi\n             new NamedWriteableRegistry.Entry(TTestState.class, UnpairedTTestState.NAME, UnpairedTTestState::new)\n         );\n     }\n-\n-    private static <T> ContextParser<String, T> checkLicense(ContextParser<String, T> realParser) {\n-        return (parser, name) -> {\n-            return realParser.parse(parser, name);\n-        };\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4MDg5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r456780891", "bodyText": "Similarly I'd prefer if we remove the licenseState field from the class as well.", "author": "ywangd", "createdAt": "2020-07-18T11:34:16Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/action/AnalyticsInfoTransportAction.java", "diffHunk": "@@ -31,7 +31,7 @@ public String name() {\n \n     @Override\n     public boolean available() {\n-        return licenseState.isAllowed(XPackLicenseState.Feature.ANALYTICS);", "originalCommit": "9a210eed18dd3dee6a3e33849b4bfadf446f2c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4MTUxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r456781511", "bodyText": "GitHub does not allow comment outside of the changeset. But there is a isTransformAllowedForOperationMode method in this class that still checks the OperationMode.MISSING. I think it can be removed as well as its usages.", "author": "ywangd", "createdAt": "2020-07-18T11:41:24Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -66,44 +62,23 @@\n \n         MACHINE_LEARNING(OperationMode.PLATINUM, true),\n \n-        TRANSFORM(OperationMode.MISSING, true),", "originalCommit": "9a210eed18dd3dee6a3e33849b4bfadf446f2c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7af8f1f72bab9298d8d34644dae01e11756313db", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 503a1e4dc5c..aebee1b4b5a 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -72,7 +72,7 @@ public class XPackLicenseState {\n \n         SPATIAL_GEO_GRID(OperationMode.GOLD, true),\n \n-        SEARCHABLE_SNAPSHOTS(OperationMode.PLATINUM, true);\n+        SEARCHABLE_SNAPSHOTS(OperationMode.ENTERPRISE, true);\n \n         final OperationMode minimumOperationMode;\n         final boolean needsActive;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4Mjc4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r456782781", "bodyText": "The super.shouldCollect method is called here, while it is not called in StatsCollector. This super method always returns true after the change, so invoking it or not does not change the result. But I'd slightly prefer to always invoke it because:\n\nIn general, we may not wanna assume too much knowledge of the superclass.\nIf the superclass logic changes, we are protected.\nWe should be able to rely on compiler to optimise for us in this case.", "author": "ywangd", "createdAt": "2020-07-18T11:56:33Z", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/enrich/EnrichStatsCollector.java", "diffHunk": "@@ -46,9 +46,7 @@ public EnrichStatsCollector(ClusterService clusterService,\n \n     @Override\n     protected boolean shouldCollect(final boolean isElectedMaster) {\n-        return isElectedMaster\n-            && super.shouldCollect(isElectedMaster)\n-            && licenseState.checkFeature(XPackLicenseState.Feature.ENRICH);\n+        return isElectedMaster && super.shouldCollect(isElectedMaster);", "originalCommit": "9a210eed18dd3dee6a3e33849b4bfadf446f2c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc4MzcyMg==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r456783722", "bodyText": "My understanding on the intention of this piece of code is that we do not encourage users to run with expired commerical licenses, e.g. PLATINUM, forever. An expired PLATINUM license is still allowed to access some platinum features, e.g. DLS/FLS, for security reasons. If an expired license can access all BASIC featues, plus a fair bit more, this would put our licensing in an awkward situation. Therefore, we disable stats and health APIs to prompt users to either downgrade to a BASIC or renew the subscription.\nIn fact, many of the BASIC features have similar behaviour as the stats and health API, e.g. ROLLUP(OperationMode.MISSING, true). The feature is available in BASIC, but also requires the license to be active.", "author": "ywangd", "createdAt": "2020-07-18T12:09:31Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -69,17 +69,6 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n     public <Request extends ActionRequest, Response extends ActionResponse> void apply(Task task, String action, Request request,\n                                                                                        ActionListener<Response> listener,\n                                                                                        ActionFilterChain<Request, Response> chain) {\n-        /*\n-         A functional requirement - when the license of security is disabled (invalid/expires), security will continue\n-         to operate normally, except all read operations will be blocked.\n-         */\n-        if (licenseState.checkFeature(Feature.SECURITY_STATS_AND_HEALTH) == false && LICENSE_EXPIRATION_ACTION_MATCHER.test(action)) {\n-            logger.error(\"blocking [{}] operation due to expired license. Cluster health, cluster stats and indices stats \\n\" +\n-                    \"operations are blocked on license expiration. All data operations (read and write) continue to work. \\n\" +\n-                    \"If you have a new license, please update it. Otherwise, please reach out to your support contact.\", action);\n-            throw LicenseUtils.newComplianceException(XPackField.SECURITY);\n-        }", "originalCommit": "9a210eed18dd3dee6a3e33849b4bfadf446f2c5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eaa1130098deb237b5be7ebf3ed2496a5c127499", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java\nindex f981c3094cf..7df609c0ac6 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java\n\n@@ -69,6 +69,17 @@ public class SecurityActionFilter implements ActionFilter {\n     public <Request extends ActionRequest, Response extends ActionResponse> void apply(Task task, String action, Request request,\n                                                                                        ActionListener<Response> listener,\n                                                                                        ActionFilterChain<Request, Response> chain) {\n+        /*\n+          A functional requirement - when the license of security is disabled (invalid/expires), security will continue\n+          to operate normally, except all read operations will be blocked.\n+          */\n+        if (licenseState.isActive() == false && LICENSE_EXPIRATION_ACTION_MATCHER.test(action)) {\n+            logger.error(\"blocking [{}] operation due to expired license. Cluster health, cluster stats and indices stats \\n\" +\n+                \"operations are blocked on license expiration. All data operations (read and write) continue to work. \\n\" +\n+                \"If you have a new license, please update it. Otherwise, please reach out to your support contact.\", action);\n+            throw LicenseUtils.newComplianceException(XPackField.SECURITY);\n+        }\n+\n         if (licenseState.isSecurityEnabled()) {\n             final ActionListener<Response> contextPreservingListener =\n                     ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);\n"}}, {"oid": "eaa1130098deb237b5be7ebf3ed2496a5c127499", "url": "https://github.com/elastic/elasticsearch/commit/eaa1130098deb237b5be7ebf3ed2496a5c127499", "message": "Add back disabling of health and stats on expired license", "committedDate": "2020-07-21T01:48:17Z", "type": "commit"}, {"oid": "b9eef41ad53265873eaa32dfa42b164902091095", "url": "https://github.com/elastic/elasticsearch/commit/b9eef41ad53265873eaa32dfa42b164902091095", "message": "checkstyle", "committedDate": "2020-07-21T02:02:03Z", "type": "commit"}, {"oid": "7af8f1f72bab9298d8d34644dae01e11756313db", "url": "https://github.com/elastic/elasticsearch/commit/7af8f1f72bab9298d8d34644dae01e11756313db", "message": "Merge branch 'master' into refactor_license15", "committedDate": "2020-11-17T03:46:09Z", "type": "commit"}, {"oid": "d665086830b930375e593b18121384b8d0bfeb17", "url": "https://github.com/elastic/elasticsearch/commit/d665086830b930375e593b18121384b8d0bfeb17", "message": "more merge cleanup", "committedDate": "2020-11-17T04:00:16Z", "type": "commit"}, {"oid": "8def7f1bf691027dcbaf7105b54a8020257d0563", "url": "https://github.com/elastic/elasticsearch/commit/8def7f1bf691027dcbaf7105b54a8020257d0563", "message": "address some feedback", "committedDate": "2020-11-17T04:15:28Z", "type": "commit"}, {"oid": "7536ec0a21425dfa500e62e08dfdccc5564e06ea", "url": "https://github.com/elastic/elasticsearch/commit/7536ec0a21425dfa500e62e08dfdccc5564e06ea", "message": "remove transform aux function", "committedDate": "2020-11-17T04:17:53Z", "type": "commit"}, {"oid": "d1559b789c467dcd38d64ab0a1880739aff5e142", "url": "https://github.com/elastic/elasticsearch/commit/d1559b789c467dcd38d64ab0a1880739aff5e142", "message": "cleanup unused licenseState", "committedDate": "2020-11-17T21:59:56Z", "type": "commit"}, {"oid": "2f1528588914e8c18ff545b32184808a7a8bd9db", "url": "https://github.com/elastic/elasticsearch/commit/2f1528588914e8c18ff545b32184808a7a8bd9db", "message": "spotless", "committedDate": "2020-11-19T01:17:09Z", "type": "commit"}, {"oid": "27a0e69bfaf9093a1a8a5e2448df21ac04cdb7bb", "url": "https://github.com/elastic/elasticsearch/commit/27a0e69bfaf9093a1a8a5e2448df21ac04cdb7bb", "message": "checkstyle", "committedDate": "2020-11-19T01:31:35Z", "type": "commit"}, {"oid": "390894394ce70d1c9b4b288aeb169685a5c02508", "url": "https://github.com/elastic/elasticsearch/commit/390894394ce70d1c9b4b288aeb169685a5c02508", "message": "test tweak", "committedDate": "2020-11-19T04:03:38Z", "type": "commit"}, {"oid": "f797dc58af5acd36e2c7c14a5260479a188455cf", "url": "https://github.com/elastic/elasticsearch/commit/f797dc58af5acd36e2c7c14a5260479a188455cf", "message": "Merge branch 'master' into refactor_license15", "committedDate": "2020-11-20T19:06:25Z", "type": "commit"}, {"oid": "767e9f1553b2b79a245a9c2d146311a1c48d31bc", "url": "https://github.com/elastic/elasticsearch/commit/767e9f1553b2b79a245a9c2d146311a1c48d31bc", "message": "fix tests", "committedDate": "2020-11-20T19:31:52Z", "type": "commit"}, {"oid": "98ca4ece4c941353d94515825b7cbb26259b373f", "url": "https://github.com/elastic/elasticsearch/commit/98ca4ece4c941353d94515825b7cbb26259b373f", "message": "remove mutations from spatial feature set usage", "committedDate": "2020-11-20T20:01:23Z", "type": "commit"}, {"oid": "0a2d0d471203e7533abd505b9ddb808d28742326", "url": "https://github.com/elastic/elasticsearch/commit/0a2d0d471203e7533abd505b9ddb808d28742326", "message": "Merge branch 'master' into refactor_license15", "committedDate": "2020-11-30T23:07:16Z", "type": "commit"}, {"oid": "972807c01ce20ee3e1c59aa823b3a3bbb47b6c98", "url": "https://github.com/elastic/elasticsearch/commit/972807c01ce20ee3e1c59aa823b3a3bbb47b6c98", "message": "fix ML transforms with remote clusters", "committedDate": "2020-12-01T22:02:44Z", "type": "commit"}, {"oid": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "url": "https://github.com/elastic/elasticsearch/commit/e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "message": "Merge branch 'master' into refactor_license15", "committedDate": "2020-12-04T03:29:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkxNTQzMg==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536915432", "bodyText": "I'd leave this untouched. The change assumes the superclass call always return true, which is the case with changes of this PR. But strictly speaking, the logic is more foolproof to keep this call so that any future changes will be covered.", "author": "ywangd", "createdAt": "2020-12-05T23:45:14Z", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java", "diffHunk": "@@ -61,7 +61,6 @@ public StatsCollector(\n     protected boolean shouldCollect(final boolean isElectedMaster) {\n         // this can only run when monitoring is allowed and CCR is enabled and allowed, but also only on the elected master node\n         return isElectedMaster\n-                && super.shouldCollect(isElectedMaster)", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java\nindex dd41bdac582..803e3242ed0 100644\n--- a/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java\n+++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java\n\n@@ -61,6 +61,7 @@ public final class StatsCollector extends Collector {\n     protected boolean shouldCollect(final boolean isElectedMaster) {\n         // this can only run when monitoring is allowed and CCR is enabled and allowed, but also only on the elected master node\n         return isElectedMaster\n+                && super.shouldCollect(isElectedMaster)\n                 && XPackSettings.CCR_ENABLED_SETTING.get(settings)\n                 && licenseState.checkFeature(XPackLicenseState.Feature.CCR);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkxODE3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536918175", "bodyText": "Nit: these testSqlXxx now has nothing to do with SQL. Should we call them testJdbcXxx instead?", "author": "ywangd", "createdAt": "2020-12-06T00:05:42Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/XPackLicenseStateTests.java", "diffHunk": "@@ -413,71 +362,55 @@ public void testLogstashInactive() {\n \n     public void testSqlDefaults() {\n         XPackLicenseState licenseState = TestUtils.newTestLicenseState();\n-        assertThat(licenseState.checkFeature(XPackLicenseState.Feature.SQL), is(true));\n         assertThat(licenseState.checkFeature(XPackLicenseState.Feature.JDBC), is(true));\n     }\n \n     public void testSqlBasic() {", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "baed4b9dae04e21623987ec88b469242d68ea957", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/XPackLicenseStateTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/XPackLicenseStateTests.java\nindex 516672eb8e8..bd592e6fefd 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/XPackLicenseStateTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/XPackLicenseStateTests.java\n\n@@ -367,49 +369,48 @@ public class XPackLicenseStateTests extends ESTestCase {\n \n     public void testSqlBasic() {\n         XPackLicenseState licenseState = TestUtils.newTestLicenseState();\n-        licenseState.update(BASIC, true, null);\n-\n+        licenseState.update(BASIC, true, Long.MAX_VALUE, null);\n         assertThat(licenseState.checkFeature(XPackLicenseState.Feature.JDBC), is(false));\n     }\n \n     public void testSqlStandard() {\n         XPackLicenseState licenseState = TestUtils.newTestLicenseState();\n-        licenseState.update(STANDARD, true, null);\n+        licenseState.update(STANDARD, true, Long.MAX_VALUE, null);\n \n         assertThat(licenseState.checkFeature(XPackLicenseState.Feature.JDBC), is(false));\n     }\n \n     public void testSqlStandardExpired() {\n         XPackLicenseState licenseState = TestUtils.newTestLicenseState();\n-        licenseState.update(STANDARD, false, null);\n+        licenseState.update(STANDARD, false, Long.MAX_VALUE, null);\n \n         assertThat(licenseState.checkFeature(XPackLicenseState.Feature.JDBC), is(false));\n     }\n \n     public void testSqlGold() {\n         XPackLicenseState licenseState = TestUtils.newTestLicenseState();\n-        licenseState.update(GOLD, true, null);\n+        licenseState.update(GOLD, true, Long.MAX_VALUE, null);\n \n         assertThat(licenseState.checkFeature(XPackLicenseState.Feature.JDBC), is(false));\n     }\n \n     public void testSqlGoldExpired() {\n         XPackLicenseState licenseState = TestUtils.newTestLicenseState();\n-        licenseState.update(GOLD, false, null);\n+        licenseState.update(GOLD, false, Long.MAX_VALUE, null);\n \n         assertThat(licenseState.checkFeature(XPackLicenseState.Feature.JDBC), is(false));\n     }\n \n     public void testSqlPlatinum() {\n         XPackLicenseState licenseState = TestUtils.newTestLicenseState();\n-        licenseState.update(PLATINUM, true, null);\n+        licenseState.update(PLATINUM, true, Long.MAX_VALUE, null);\n \n         assertThat(licenseState.checkFeature(XPackLicenseState.Feature.JDBC), is(true));\n     }\n \n     public void testSqlPlatinumExpired() {\n         XPackLicenseState licenseState = TestUtils.newTestLicenseState();\n-        licenseState.update(PLATINUM, false, null);\n+        licenseState.update(PLATINUM, false, Long.MAX_VALUE, null);\n \n         assertThat(licenseState.checkFeature(XPackLicenseState.Feature.JDBC), is(false));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkxOTg2MA==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536919860", "bodyText": "For these basic features, I think it is better to drop the available parameter in its constructor similar to the enabled parameter, i.e. have something like:\npublic EnrichFeatureSetUsage() {\n    super(XpackField.ENRICH, true, true);\n}", "author": "ywangd", "createdAt": "2020-12-06T00:18:31Z", "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichUsageTransportAction.java", "diffHunk": "@@ -51,7 +47,6 @@ protected void masterOperation(\n         ClusterState state,\n         ActionListener<XPackUsageFeatureResponse> listener\n     ) {\n-        boolean available = licenseState.isAllowed(XPackLicenseState.Feature.ENRICH);\n-        listener.onResponse(new XPackUsageFeatureResponse(new EnrichFeatureSetUsage(available)));\n+        listener.onResponse(new XPackUsageFeatureResponse(new EnrichFeatureSetUsage(true)));", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichUsageTransportAction.java b/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichUsageTransportAction.java\nindex 4f933922038..77e1f2e7741 100644\n--- a/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichUsageTransportAction.java\n+++ b/x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/EnrichUsageTransportAction.java\n\n@@ -47,6 +47,6 @@ public class EnrichUsageTransportAction extends XPackUsageFeatureTransportAction\n         ClusterState state,\n         ActionListener<XPackUsageFeatureResponse> listener\n     ) {\n-        listener.onResponse(new XPackUsageFeatureResponse(new EnrichFeatureSetUsage(true)));\n+        listener.onResponse(new XPackUsageFeatureResponse(new EnrichFeatureSetUsage()));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMDUzNA==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536920534", "bodyText": "Same here, the available parameter can be dropped from the constructor", "author": "ywangd", "createdAt": "2020-12-06T00:23:54Z", "path": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleUsageTransportAction.java", "diffHunk": "@@ -69,9 +63,9 @@ protected void masterOperation(Task task, XPackUsageRequest request, ClusterStat\n                 }).collect(Collectors.toMap(Tuple::v1, Tuple::v2));\n                 return new IndexLifecycleFeatureSetUsage.PolicyStats(phaseStats, policyUsage.getOrDefault(policy.getName(), 0));\n             }).collect(Collectors.toList());\n-            usage = new IndexLifecycleFeatureSetUsage(available, policyStats);\n+            usage = new IndexLifecycleFeatureSetUsage(true, policyStats);", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleUsageTransportAction.java b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleUsageTransportAction.java\nindex 032d5bf5f78..7250c2f8426 100644\n--- a/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleUsageTransportAction.java\n+++ b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleUsageTransportAction.java\n\n@@ -63,9 +63,9 @@ public class IndexLifecycleUsageTransportAction extends XPackUsageFeatureTranspo\n                 }).collect(Collectors.toMap(Tuple::v1, Tuple::v2));\n                 return new IndexLifecycleFeatureSetUsage.PolicyStats(phaseStats, policyUsage.getOrDefault(policy.getName(), 0));\n             }).collect(Collectors.toList());\n-            usage = new IndexLifecycleFeatureSetUsage(true, policyStats);\n+            usage = new IndexLifecycleFeatureSetUsage(policyStats);\n         } else {\n-            usage = new IndexLifecycleFeatureSetUsage(true);\n+            usage = new IndexLifecycleFeatureSetUsage();\n         }\n         listener.onResponse(new XPackUsageFeatureResponse(usage));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMDcwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536920705", "bodyText": "Here as well for the available parameter.", "author": "ywangd", "createdAt": "2020-12-06T00:25:04Z", "path": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/slm/SLMUsageTransportAction.java", "diffHunk": "@@ -24,23 +23,19 @@\n import org.elasticsearch.xpack.core.slm.SnapshotLifecycleMetadata;\n \n public class SLMUsageTransportAction extends XPackUsageFeatureTransportAction {\n-    private final XPackLicenseState licenseState;\n \n     @Inject\n     public SLMUsageTransportAction(TransportService transportService, ClusterService clusterService, ThreadPool threadPool,\n-                                   ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,\n-                                   XPackLicenseState licenseState) {\n+                                   ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {\n         super(XPackUsageFeatureAction.SNAPSHOT_LIFECYCLE.name(), transportService, clusterService, threadPool, actionFilters,\n             indexNameExpressionResolver);\n-        this.licenseState = licenseState;\n     }\n \n     @Override\n     protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n                                    ActionListener<XPackUsageFeatureResponse> listener) {\n-        boolean available = licenseState.isAllowed(XPackLicenseState.Feature.ILM);\n         final SnapshotLifecycleMetadata slmMeta = state.metadata().custom(SnapshotLifecycleMetadata.TYPE);\n-        final SLMFeatureSetUsage usage = new SLMFeatureSetUsage(available, slmMeta == null ? null : slmMeta.getStats());\n+        final SLMFeatureSetUsage usage = new SLMFeatureSetUsage(true, slmMeta == null ? null : slmMeta.getStats());", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/slm/SLMUsageTransportAction.java b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/slm/SLMUsageTransportAction.java\nindex 45c1ee2c05d..9479a65bf1f 100644\n--- a/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/slm/SLMUsageTransportAction.java\n+++ b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/slm/SLMUsageTransportAction.java\n\n@@ -35,7 +35,7 @@ public class SLMUsageTransportAction extends XPackUsageFeatureTransportAction {\n     protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n                                    ActionListener<XPackUsageFeatureResponse> listener) {\n         final SnapshotLifecycleMetadata slmMeta = state.metadata().custom(SnapshotLifecycleMetadata.TYPE);\n-        final SLMFeatureSetUsage usage = new SLMFeatureSetUsage(true, slmMeta == null ? null : slmMeta.getStats());\n+        final SLMFeatureSetUsage usage = new SLMFeatureSetUsage(slmMeta == null ? null : slmMeta.getStats());\n         listener.onResponse(new XPackUsageFeatureResponse(usage));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMDg2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536920862", "bodyText": "Again, the available parameter can be removed.", "author": "ywangd", "createdAt": "2020-12-06T00:26:15Z", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringUsageTransportAction.java", "diffHunk": "@@ -46,8 +43,7 @@ public MonitoringUsageTransportAction(TransportService transportService, Cluster\n     protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n                                    ActionListener<XPackUsageFeatureResponse> listener) {\n         final boolean collectionEnabled = monitoringService != null && monitoringService.isMonitoringActive();\n-        var usage = new MonitoringFeatureSetUsage(licenseState.isAllowed(XPackLicenseState.Feature.MONITORING),\n-                collectionEnabled, exportersUsage(exporters));\n+        var usage = new MonitoringFeatureSetUsage(true, collectionEnabled, exportersUsage(exporters));", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringUsageTransportAction.java b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringUsageTransportAction.java\nindex cb192c2d313..5f94506d3c3 100644\n--- a/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringUsageTransportAction.java\n+++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/MonitoringUsageTransportAction.java\n\n@@ -43,7 +43,7 @@ public class MonitoringUsageTransportAction extends XPackUsageFeatureTransportAc\n     protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n                                    ActionListener<XPackUsageFeatureResponse> listener) {\n         final boolean collectionEnabled = monitoringService != null && monitoringService.isMonitoringActive();\n-        var usage = new MonitoringFeatureSetUsage(true, collectionEnabled, exportersUsage(exporters));\n+        var usage = new MonitoringFeatureSetUsage(collectionEnabled, exportersUsage(exporters));\n         listener.onResponse(new XPackUsageFeatureResponse(usage));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMTAzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536921039", "bodyText": "Similarly, I'd leave this method call untouched.", "author": "ywangd", "createdAt": "2020-12-06T00:27:25Z", "path": "x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java", "diffHunk": "@@ -61,7 +61,6 @@ public StatsCollector(\n     protected boolean shouldCollect(final boolean isElectedMaster) {\n         // this can only run when monitoring is allowed and CCR is enabled and allowed, but also only on the elected master node\n         return isElectedMaster\n-                && super.shouldCollect(isElectedMaster)\n                 && XPackSettings.CCR_ENABLED_SETTING.get(settings)", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java\nindex dd41bdac582..803e3242ed0 100644\n--- a/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java\n+++ b/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/ccr/StatsCollector.java\n\n@@ -61,6 +61,7 @@ public final class StatsCollector extends Collector {\n     protected boolean shouldCollect(final boolean isElectedMaster) {\n         // this can only run when monitoring is allowed and CCR is enabled and allowed, but also only on the elected master node\n         return isElectedMaster\n+                && super.shouldCollect(isElectedMaster)\n                 && XPackSettings.CCR_ENABLED_SETTING.get(settings)\n                 && licenseState.checkFeature(XPackLicenseState.Feature.CCR);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMTM5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536921395", "bodyText": "Another one for the available parameter that can be dropped.", "author": "ywangd", "createdAt": "2020-12-06T00:30:18Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/SecurityUsageTransportAction.java", "diffHunk": "@@ -86,7 +86,7 @@ protected void masterOperation(Task task, XPackUsageRequest request, ClusterStat\n         final CountDown countDown = new CountDown(3);\n         final Runnable doCountDown = () -> {\n             if (countDown.countDown()) {\n-                var usage = new SecurityFeatureSetUsage(licenseState.isAllowed(XPackLicenseState.Feature.SECURITY), enabled,\n+                var usage = new SecurityFeatureSetUsage(true, enabled,", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "baed4b9dae04e21623987ec88b469242d68ea957", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/SecurityUsageTransportAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/SecurityUsageTransportAction.java\nindex f0184d7ea67..23d1adaee0c 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/SecurityUsageTransportAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/SecurityUsageTransportAction.java\n\n@@ -88,7 +93,7 @@ public class SecurityUsageTransportAction extends XPackUsageFeatureTransportActi\n             if (countDown.countDown()) {\n                 var usage = new SecurityFeatureSetUsage(true, enabled,\n                         realmsUsageRef.get(), rolesUsageRef.get(), roleMappingUsageRef.get(), sslUsage, auditUsage,\n-                        ipFilterUsage, anonymousUsage, tokenServiceUsage, apiKeyServiceUsage, fips140Usage);\n+                        ipFilterUsage, anonymousUsage, tokenServiceUsage, apiKeyServiceUsage, fips140Usage, operatorPrivilegesUsage);\n                 listener.onResponse(new XPackUsageFeatureResponse(usage));\n             }\n         };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMjEyNw==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536922127", "bodyText": "I understand this is an existing comment. But the wording of except all read operations will be blocked feels wrong or confusing at least. Maybe it was the previous intention and is no longer accurate. This really just blocks\n\"cluster:monitor/health*\",\n\"cluster:monitor/stats*\",\n\"indices:monitor/stats*\",\n\"cluster:monitor/nodes/stats*\"\n\nand we could be clear about it in the comment.", "author": "ywangd", "createdAt": "2020-12-06T00:35:44Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java", "diffHunk": "@@ -70,13 +69,13 @@ public SecurityActionFilter(AuthenticationService authcService, AuthorizationSer\n                                                                                        ActionListener<Response> listener,\n                                                                                        ActionFilterChain<Request, Response> chain) {\n         /*\n-         A functional requirement - when the license of security is disabled (invalid/expires), security will continue\n-         to operate normally, except all read operations will be blocked.\n-         */\n-        if (licenseState.checkFeature(Feature.SECURITY_STATS_AND_HEALTH) == false && LICENSE_EXPIRATION_ACTION_MATCHER.test(action)) {\n+          A functional requirement - when the license of security is disabled (invalid/expires), security will continue\n+          to operate normally, except all read operations will be blocked.", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java\nindex e19196f8995..f8c39a616c5 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java\n\n@@ -70,7 +70,11 @@ public class SecurityActionFilter implements ActionFilter {\n                                                                                        ActionFilterChain<Request, Response> chain) {\n         /*\n           A functional requirement - when the license of security is disabled (invalid/expires), security will continue\n-          to operate normally, except all read operations will be blocked.\n+          to operate normally, except the following read operations will be blocked:\n+            - cluster:monitor/health*\n+            - cluster:monitor/stats*\n+            - indices:monitor/stats*\n+            - cluster:monitor/nodes/stats*\n           */\n         if (licenseState.isActive() == false && LICENSE_EXPIRATION_ACTION_MATCHER.test(action)) {\n             logger.error(\"blocking [{}] operation due to expired license. Cluster health, cluster stats and indices stats \\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNTY5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536925697", "bodyText": "To retain the existing behaviour of this test, should this mock return false instead of true so that action.handleRequest(...) does not throw exception but returns a response about security is not enabled (currently it returns security not available due to license)?", "author": "ywangd", "createdAt": "2020-12-06T01:02:53Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/user/RestHasPrivilegesActionTests.java", "diffHunk": "@@ -38,6 +40,7 @@\n      */\n     public void testBodyConsumed() throws Exception {\n         final XPackLicenseState licenseState = mock(XPackLicenseState.class);\n+        when(licenseState.isSecurityEnabled()).thenReturn(true);", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MDc4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r545490785", "bodyText": "We discussed this in another channel. After another look, I think the change is in fact closer to what this test tries to assert:\n\nSend a request without an username\nIt should not fail with IllegalArgumentException complaining about unconsumed payload\n\nBoth the existing version and the change do the job because both of them will run through BaseRestHandler#handleRequest, where the unconsumed body is checked.\nThe existing version does its job by ensure there is no exception. This relies on the fact that \u201csecurity disabled\u201d message takes precedence over the \u201cno authenticated user\u201d exception. The new change enables security so that the \u201cno authenticated user\u201d exception now bubbles up. Both \u201csecurity disabled\u201d message and \u201cno authenticated user\u201d exception have lower priority than the \u201cunconsumed body\u201d exception. So the test does its job if either of them can be asserted. But the new change has the advantage of an additional assertion on the exception to be \u201cno authenticated user\u201d, which is more to the point.\nIn summary, the new change does its job slightly differently than the existing version. But I think it's a small improvement. So we can discard my previous comment.", "author": "ywangd", "createdAt": "2020-12-18T00:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNTY5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNTc4MA==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536925780", "bodyText": "Yet another available parameter.", "author": "ywangd", "createdAt": "2020-12-06T01:03:48Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/SqlUsageTransportAction.java", "diffHunk": "@@ -58,7 +57,7 @@ protected void masterOperation(Task task, XPackUsageRequest request, ClusterStat\n                 .filter(Objects::nonNull)\n                 .collect(Collectors.toList());\n             Counters mergedCounters = Counters.merge(countersPerNode);\n-            SqlFeatureSetUsage usage = new SqlFeatureSetUsage(available, mergedCounters.toNestedMap());\n+            SqlFeatureSetUsage usage = new SqlFeatureSetUsage(true, mergedCounters.toNestedMap());", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/SqlUsageTransportAction.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/SqlUsageTransportAction.java\nindex b846c682d4f..73aeb0f0fbd 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/SqlUsageTransportAction.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/SqlUsageTransportAction.java\n\n@@ -57,7 +57,7 @@ public class SqlUsageTransportAction extends XPackUsageFeatureTransportAction {\n                 .filter(Objects::nonNull)\n                 .collect(Collectors.toList());\n             Counters mergedCounters = Counters.merge(countersPerNode);\n-            SqlFeatureSetUsage usage = new SqlFeatureSetUsage(true, mergedCounters.toNestedMap());\n+            SqlFeatureSetUsage usage = new SqlFeatureSetUsage(mergedCounters.toNestedMap());\n             listener.onResponse(new XPackUsageFeatureResponse(usage));\n         }, listener::onFailure));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNjAwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536926001", "bodyText": "Here again, the available parameter.", "author": "ywangd", "createdAt": "2020-12-06T01:05:21Z", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/TransformUsageTransportAction.java", "diffHunk": "@@ -96,7 +90,7 @@ protected void masterOperation(\n         }\n \n         ActionListener<TransformIndexerStats> totalStatsListener = ActionListener.wrap(statSummations -> {\n-            var usage = new TransformFeatureSetUsage(available, transformsCountByState, statSummations);\n+            var usage = new TransformFeatureSetUsage(true, transformsCountByState, statSummations);", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/TransformUsageTransportAction.java b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/TransformUsageTransportAction.java\nindex 92cd8146f5c..2700bbf5cba 100644\n--- a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/TransformUsageTransportAction.java\n+++ b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/TransformUsageTransportAction.java\n\n@@ -90,7 +90,7 @@ public class TransformUsageTransportAction extends XPackUsageFeatureTransportAct\n         }\n \n         ActionListener<TransformIndexerStats> totalStatsListener = ActionListener.wrap(statSummations -> {\n-            var usage = new TransformFeatureSetUsage(true, transformsCountByState, statSummations);\n+            var usage = new TransformFeatureSetUsage(transformsCountByState, statSummations);\n             listener.onResponse(new XPackUsageFeatureResponse(usage));\n         }, listener::onFailure);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNjYzMw==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536926633", "bodyText": "The available parameter again.", "author": "ywangd", "createdAt": "2020-12-06T01:10:05Z", "path": "x-pack/plugin/vectors/src/main/java/org/elasticsearch/xpack/vectors/VectorsUsageTransportAction.java", "diffHunk": "@@ -76,7 +70,7 @@ protected void masterOperation(Task task, XPackUsageRequest request, ClusterStat\n             }\n         }\n         VectorsFeatureSetUsage usage =\n-            new VectorsFeatureSetUsage(vectorsAvailable, numDenseVectorFields, avgDenseVectorDims);\n+            new VectorsFeatureSetUsage(true, numDenseVectorFields, avgDenseVectorDims);", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNjc4NA==", "url": "https://github.com/elastic/elasticsearch/pull/59814#discussion_r536926784", "bodyText": "I believe this is the last occurrence of the available parameter.", "author": "ywangd", "createdAt": "2020-12-06T01:11:27Z", "path": "x-pack/plugin/voting-only-node/src/main/java/org/elasticsearch/cluster/coordination/VotingOnlyNodeFeatureSet.java", "diffHunk": "@@ -53,36 +43,26 @@ public boolean enabled() {\n \n     public static class UsageTransportAction extends XPackUsageFeatureTransportAction {\n \n-        private final XPackLicenseState licenseState;\n-\n         @Inject\n         public UsageTransportAction(TransportService transportService, ClusterService clusterService, ThreadPool threadPool,\n-                                    ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,\n-                                    XPackLicenseState licenseState) {\n+                                    ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {\n             super(XPackUsageFeatureAction.VOTING_ONLY.name(), transportService, clusterService,\n                 threadPool, actionFilters, indexNameExpressionResolver);\n-            this.licenseState = licenseState;\n         }\n \n         @Override\n         protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n                                        ActionListener<XPackUsageFeatureResponse> listener) {\n-            final boolean available = licenseState.checkFeature(Feature.VOTING_ONLY);\n-            final VotingOnlyNodeFeatureSetUsage usage =\n-                new VotingOnlyNodeFeatureSetUsage(available);\n+            final VotingOnlyNodeFeatureSetUsage usage = new VotingOnlyNodeFeatureSetUsage(true);", "originalCommit": "e4a842e4d7293f3ad77230d70b55703cfb0e6a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "495165049396e4c276fed3a00de9d334c64ef892", "chunk": "diff --git a/x-pack/plugin/voting-only-node/src/main/java/org/elasticsearch/cluster/coordination/VotingOnlyNodeFeatureSet.java b/x-pack/plugin/voting-only-node/src/main/java/org/elasticsearch/cluster/coordination/VotingOnlyNodeFeatureSet.java\nindex ec412dafe70..0fe4bb0c379 100644\n--- a/x-pack/plugin/voting-only-node/src/main/java/org/elasticsearch/cluster/coordination/VotingOnlyNodeFeatureSet.java\n+++ b/x-pack/plugin/voting-only-node/src/main/java/org/elasticsearch/cluster/coordination/VotingOnlyNodeFeatureSet.java\n\n@@ -53,7 +53,7 @@ public class VotingOnlyNodeFeatureSet implements XPackFeatureSet {\n         @Override\n         protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n                                        ActionListener<XPackUsageFeatureResponse> listener) {\n-            final VotingOnlyNodeFeatureSetUsage usage = new VotingOnlyNodeFeatureSetUsage(true);\n+            final VotingOnlyNodeFeatureSetUsage usage = new VotingOnlyNodeFeatureSetUsage();\n             listener.onResponse(new XPackUsageFeatureResponse(usage));\n         }\n     }\n"}}, {"oid": "baed4b9dae04e21623987ec88b469242d68ea957", "url": "https://github.com/elastic/elasticsearch/commit/baed4b9dae04e21623987ec88b469242d68ea957", "message": "Merge branch 'master' into refactor_license15", "committedDate": "2020-12-17T20:00:36Z", "type": "commit"}, {"oid": "495165049396e4c276fed3a00de9d334c64ef892", "url": "https://github.com/elastic/elasticsearch/commit/495165049396e4c276fed3a00de9d334c64ef892", "message": "more review comments", "committedDate": "2020-12-18T00:06:55Z", "type": "commit"}, {"oid": "daf6b8b72f0091c1a870967a4eb0e47ad412063c", "url": "https://github.com/elastic/elasticsearch/commit/daf6b8b72f0091c1a870967a4eb0e47ad412063c", "message": "checkstyle", "committedDate": "2020-12-18T00:28:59Z", "type": "commit"}, {"oid": "2c45154cfd9cb50caf81b9462b92c2aa046f72c3", "url": "https://github.com/elastic/elasticsearch/commit/2c45154cfd9cb50caf81b9462b92c2aa046f72c3", "message": "fix compile", "committedDate": "2020-12-18T00:37:34Z", "type": "commit"}]}