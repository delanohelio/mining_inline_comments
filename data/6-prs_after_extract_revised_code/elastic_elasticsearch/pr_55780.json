{"pr_number": 55780, "pr_title": "fix the problem of recovering twice when perform a full cluster restart(#55564)", "pr_createdAt": "2020-04-27T06:23:28Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55780", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Njc2MA==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415556760", "bodyText": "I think this is unnecessary (although a DEBUG-level log would be ok here); it also doesn't consume the recoverAfterTime argument so it fails in the precommit build task.", "author": "DaveCTurner", "createdAt": "2020-04-27T06:55:18Z", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -228,6 +228,7 @@ public void onFailure(final Exception e) {\n \n                     @Override\n                     protected void doRun() {\n+                        logger.info(\"performing state recovery...\", recoverAfterTime);", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/gateway/GatewayService.java b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\nindex ddc25916594..ab5384df396 100644\n--- a/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\n+++ b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\n\n@@ -228,7 +228,7 @@ public class GatewayService extends AbstractLifecycleComponent implements Cluste\n \n                     @Override\n                     protected void doRun() {\n-                        logger.info(\"performing state recovery...\", recoverAfterTime);\n+                        logger.debug(\"performing state recovery...\");\n                         recoveryRunnable.run();\n                     }\n                 });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Nzk0MA==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415557940", "bodyText": "I think we should check the existence of the state-not-recovered block in currentState, not whether the local node is elected as master.", "author": "DaveCTurner", "createdAt": "2020-04-27T06:57:22Z", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -244,6 +245,11 @@ private void resetRecoveredFlags() {\n \n         @Override\n         public ClusterState execute(final ClusterState currentState) {\n+            if (currentState.nodes().isLocalNodeElectedMaster() == false) {", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/gateway/GatewayService.java b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\nindex ddc25916594..ab5384df396 100644\n--- a/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\n+++ b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\n\n@@ -245,8 +245,8 @@ public class GatewayService extends AbstractLifecycleComponent implements Cluste\n \n         @Override\n         public ClusterState execute(final ClusterState currentState) {\n-            if (currentState.nodes().isLocalNodeElectedMaster() == false) {\n-                logger.info(\"cluster is already recovered\");\n+            if (currentState.blocks().hasGlobalBlock(STATE_NOT_RECOVERED_BLOCK) == false) {\n+                logger.debug(\"cluster is already recovered\");\n                 return currentState;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1ODA4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415558087", "bodyText": "I think this is unnecessary (although a DEBUG-level log would be ok here).", "author": "DaveCTurner", "createdAt": "2020-04-27T06:57:40Z", "path": "server/src/main/java/org/elasticsearch/gateway/GatewayService.java", "diffHunk": "@@ -244,6 +245,11 @@ private void resetRecoveredFlags() {\n \n         @Override\n         public ClusterState execute(final ClusterState currentState) {\n+            if (currentState.nodes().isLocalNodeElectedMaster() == false) {\n+                logger.info(\"cluster is already recovered\");", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/gateway/GatewayService.java b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\nindex ddc25916594..ab5384df396 100644\n--- a/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\n+++ b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java\n\n@@ -245,8 +245,8 @@ public class GatewayService extends AbstractLifecycleComponent implements Cluste\n \n         @Override\n         public ClusterState execute(final ClusterState currentState) {\n-            if (currentState.nodes().isLocalNodeElectedMaster() == false) {\n-                logger.info(\"cluster is already recovered\");\n+            if (currentState.blocks().hasGlobalBlock(STATE_NOT_RECOVERED_BLOCK) == false) {\n+                logger.debug(\"cluster is already recovered\");\n                 return currentState;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1ODYwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415558601", "bodyText": "This doesn't compile right now so I can't test this.\n> Task :server:compileTestJava\n/Users/davidturner/src/elasticsearch-master/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java:63: error: constructor GatewayService in class GatewayService cannot be applied to given types;\n        return new GatewayService(settings.build(),\n               ^\n  required: Settings,AllocationService,ClusterService,ThreadPool,Discovery,NodeClient\n  found:    Settings,AllocationService,ClusterService,<null>,<null>,<null>,<null>\n  reason: actual and formal argument lists differ in length", "author": "DaveCTurner", "createdAt": "2020-04-27T06:58:36Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n+                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),\n+            EmptyClusterInfoService.INSTANCE);\n+        return new GatewayService(settings.build(),", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\nindex d3bb6c4bd0f..22c26aee07a 100644\n--- a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n+++ b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n\n@@ -48,20 +48,20 @@ import java.util.Arrays;\n import java.util.HashSet;\n \n import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.Matchers.hasItem;\n \n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-            null);\n+                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+                null);\n         final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n-            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n-                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),\n-            EmptyClusterInfoService.INSTANCE);\n-        return new GatewayService(settings.build(),\n-            allocationService, clusterService, null, null, null, null);\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY,\n+                ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)), new ReplicaAfterPrimaryActiveAllocationDecider()))),\n+            new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), EmptyClusterInfoService.INSTANCE);\n+        return new GatewayService(settings.build(), allocationService, clusterService, null, null, null);\n     }\n \n     public void testDefaultRecoverAfterTime() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTE3MA==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415559170", "bodyText": "This line is longer than 140 characters so fails the precommit build task.", "author": "DaveCTurner", "createdAt": "2020-04-27T06:59:31Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\nindex d3bb6c4bd0f..22c26aee07a 100644\n--- a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n+++ b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n\n@@ -48,20 +48,20 @@ import java.util.Arrays;\n import java.util.HashSet;\n \n import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.Matchers.hasItem;\n \n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-            null);\n+                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+                null);\n         final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n-            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n-                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),\n-            EmptyClusterInfoService.INSTANCE);\n-        return new GatewayService(settings.build(),\n-            allocationService, clusterService, null, null, null, null);\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY,\n+                ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)), new ReplicaAfterPrimaryActiveAllocationDecider()))),\n+            new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), EmptyClusterInfoService.INSTANCE);\n+        return new GatewayService(settings.build(), allocationService, clusterService, null, null, null);\n     }\n \n     public void testDefaultRecoverAfterTime() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1OTE5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415559199", "bodyText": "This line is longer than 140 characters so fails the precommit build task.", "author": "DaveCTurner", "createdAt": "2020-04-27T06:59:34Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -19,21 +19,49 @@\n \n package org.elasticsearch.gateway;\n \n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateUpdateTask;\n+import org.elasticsearch.cluster.EmptyClusterInfoService;\n+import org.elasticsearch.cluster.block.ClusterBlockLevel;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.allocation.AllocationService;\n+import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;\n+import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.settings.ClusterSettings;\n import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.TransportAddress;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.node.Node;\n import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.gateway.TestGatewayAllocator;\n import org.hamcrest.Matchers;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.Matchers.hasItem;\n+\n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-                null);\n-        return new GatewayService(settings.build(), null, clusterService, null, null, null);\n+            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+            null);\n+        final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n+                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\nindex d3bb6c4bd0f..22c26aee07a 100644\n--- a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n+++ b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n\n@@ -48,20 +48,20 @@ import java.util.Arrays;\n import java.util.HashSet;\n \n import static org.elasticsearch.gateway.GatewayService.STATE_NOT_RECOVERED_BLOCK;\n+import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.Matchers.hasItem;\n \n public class GatewayServiceTests extends ESTestCase {\n \n     private GatewayService createService(final Settings.Builder settings) {\n         final ClusterService clusterService = new ClusterService(Settings.builder().put(\"cluster.name\", \"GatewayServiceTests\").build(),\n-            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n-            null);\n+                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n+                null);\n         final AllocationService allocationService = new AllocationService(new AllocationDeciders(new HashSet<>(\n-            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)),\n-                new ReplicaAfterPrimaryActiveAllocationDecider()))), new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY),\n-            EmptyClusterInfoService.INSTANCE);\n-        return new GatewayService(settings.build(),\n-            allocationService, clusterService, null, null, null, null);\n+            Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY, new ClusterSettings(Settings.EMPTY,\n+                ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)), new ReplicaAfterPrimaryActiveAllocationDecider()))),\n+            new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), EmptyClusterInfoService.INSTANCE);\n+        return new GatewayService(settings.build(), allocationService, clusterService, null, null, null);\n     }\n \n     public void testDefaultRecoverAfterTime() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDA2MA==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415560060", "bodyText": "This assertion is vacuous, I think you mean this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));\n          \n          \n            \n                    assertThat(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), not(hasItem(STATE_NOT_RECOVERED_BLOCK)));", "author": "DaveCTurner", "createdAt": "2020-04-27T07:01:14Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -69,4 +97,23 @@ public void testDeprecatedSettings() {\n         assertSettingDeprecationsAndWarnings(new Setting<?>[] {GatewayService.RECOVER_AFTER_MASTER_NODES_SETTING });\n     }\n \n+    public void testRecoverStateUpdateTask() throws Exception {\n+        GatewayService service = createService(Settings.builder());\n+        ClusterStateUpdateTask clusterStateUpdateTask = service.new RecoverStateUpdateTask();\n+        String nodeId = randomAlphaOfLength(10);\n+        DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT)\n+                .put(Node.NODE_MASTER_SETTING.getKey(), true).build(),\n+            new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId);\n+        ClusterState stateWithBlock = ClusterState.builder(ClusterName.DEFAULT)\n+            .nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).\n+                blocks(ClusterBlocks.builder().addGlobalBlock(STATE_NOT_RECOVERED_BLOCK).build()).build();\n+\n+        ClusterState recoveredState = clusterStateUpdateTask.execute(stateWithBlock);\n+        assertNotEquals(recoveredState, stateWithBlock);\n+        assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\nindex d3bb6c4bd0f..22c26aee07a 100644\n--- a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n+++ b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n\n@@ -110,10 +110,10 @@ public class GatewayServiceTests extends ESTestCase {\n \n         ClusterState recoveredState = clusterStateUpdateTask.execute(stateWithBlock);\n         assertNotEquals(recoveredState, stateWithBlock);\n-        assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));\n+        assertThat(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), not(hasItem(STATE_NOT_RECOVERED_BLOCK)));\n \n         ClusterState clusterState = clusterStateUpdateTask.execute(recoveredState);\n-        assertEquals(recoveredState, clusterState);\n+        assertSame(recoveredState, clusterState);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2MDIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55780#discussion_r415560215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(recoveredState, clusterState);\n          \n          \n            \n                    assertSame(recoveredState, clusterState);", "author": "DaveCTurner", "createdAt": "2020-04-27T07:01:32Z", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java", "diffHunk": "@@ -69,4 +97,23 @@ public void testDeprecatedSettings() {\n         assertSettingDeprecationsAndWarnings(new Setting<?>[] {GatewayService.RECOVER_AFTER_MASTER_NODES_SETTING });\n     }\n \n+    public void testRecoverStateUpdateTask() throws Exception {\n+        GatewayService service = createService(Settings.builder());\n+        ClusterStateUpdateTask clusterStateUpdateTask = service.new RecoverStateUpdateTask();\n+        String nodeId = randomAlphaOfLength(10);\n+        DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT)\n+                .put(Node.NODE_MASTER_SETTING.getKey(), true).build(),\n+            new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId);\n+        ClusterState stateWithBlock = ClusterState.builder(ClusterName.DEFAULT)\n+            .nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).\n+                blocks(ClusterBlocks.builder().addGlobalBlock(STATE_NOT_RECOVERED_BLOCK).build()).build();\n+\n+        ClusterState recoveredState = clusterStateUpdateTask.execute(stateWithBlock);\n+        assertNotEquals(recoveredState, stateWithBlock);\n+        assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));\n+\n+        ClusterState clusterState = clusterStateUpdateTask.execute(recoveredState);\n+        assertEquals(recoveredState, clusterState);", "originalCommit": "05ba495d3152a2c5845f7dc3b4ba3507d2aa0458", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\nindex d3bb6c4bd0f..22c26aee07a 100644\n--- a/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n+++ b/server/src/test/java/org/elasticsearch/gateway/GatewayServiceTests.java\n\n@@ -110,10 +110,10 @@ public class GatewayServiceTests extends ESTestCase {\n \n         ClusterState recoveredState = clusterStateUpdateTask.execute(stateWithBlock);\n         assertNotEquals(recoveredState, stateWithBlock);\n-        assertNotEquals(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), hasItem(STATE_NOT_RECOVERED_BLOCK));\n+        assertThat(recoveredState.blocks().global(ClusterBlockLevel.METADATA_WRITE), not(hasItem(STATE_NOT_RECOVERED_BLOCK)));\n \n         ClusterState clusterState = clusterStateUpdateTask.execute(recoveredState);\n-        assertEquals(recoveredState, clusterState);\n+        assertSame(recoveredState, clusterState);\n     }\n \n }\n"}}, {"oid": "96f65029507dfe20590d4b63dfb70bd1dabd2e31", "url": "https://github.com/elastic/elasticsearch/commit/96f65029507dfe20590d4b63dfb70bd1dabd2e31", "message": "fix the problem of recovering twice when perform a full cluster restart (#55564)", "committedDate": "2020-04-27T15:11:22Z", "type": "commit"}]}