{"pr_number": 51304, "pr_title": "Log when probe succeeds but full connection fails", "pr_createdAt": "2020-01-22T12:27:37Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51304", "timeline": [{"oid": "6167101081845286502ec64249825d7ce8ebce05", "url": "https://github.com/elastic/elasticsearch/commit/6167101081845286502ec64249825d7ce8ebce05", "message": "Log when probe succeeds but full connection fails\n\nIt is permitted for nodes to accept transport connections at addresses other\nthan their publish address, which allows a good deal of flexibility when\nconfiguring discovery. However, it is not unusual for users to misconfigure\nnodes to pick a publish address which is inaccessible to other nodes. We see\nthis happen a lot if the nodes are on different networks separated by a proxy,\nor if the nodes are running in Docker with the wrong kind of network config.\n\nIn this case we offer no useful feedback to the user unless they enable\nTRACE-level logs. It's particularly tricky to diagnose because if we test\nconnectivity between the nodes (using their discovery addresses) then all will\nappear well.\n\nThis commit adds a WARN-level log if this kind of misconfiguration is detected:\nthe probe connection has succeeded (to indicate that we are really talking to a\nhealthy Elasticsearch node) but the followup connection attempt fails.\n\nIt also tidies up some loose ends in `HandshakingTransportAddressConnector`,\nremoving some TODOs that need not be completed, and registering its\naccidentally-unregistered timeout settings.", "committedDate": "2020-01-22T12:22:29Z", "type": "commit"}, {"oid": "b10b474fced35881d31057204aa062aeb22a3acb", "url": "https://github.com/elastic/elasticsearch/commit/b10b474fced35881d31057204aa062aeb22a3acb", "message": "Meh let's always log the stack trace", "committedDate": "2020-01-22T13:15:32Z", "type": "commit"}, {"oid": "1bd1c8ede0a6cc1936c4613fca968b88b728982e", "url": "https://github.com/elastic/elasticsearch/commit/1bd1c8ede0a6cc1936c4613fca968b88b728982e", "message": "Fix level and message", "committedDate": "2020-01-22T13:16:13Z", "type": "commit"}, {"oid": "e787138641585b3e090d89ef49de78cd7e0d0165", "url": "https://github.com/elastic/elasticsearch/commit/e787138641585b3e090d89ef49de78cd7e0d0165", "message": "\ud83d\ude16", "committedDate": "2020-01-22T13:33:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNjYwNA==", "url": "https://github.com/elastic/elasticsearch/pull/51304#discussion_r369636604", "bodyText": "Why move to wrap here? We (mostly Henning :)) are currently trying to remove the number of instances of passing broken listeners to transport APIs that don't handle their own exceptions and this seems like a step in the wrong direction. Can we fix the listener to handle its exception instead?", "author": "original-brownbear", "createdAt": "2020-01-22T15:42:00Z", "path": "server/src/main/java/org/elasticsearch/discovery/HandshakingTransportAddressConnector.java", "diffHunk": "@@ -99,17 +100,23 @@ protected void innerOnResponse(DiscoveryNode remoteNode) {\n                                     IOUtils.closeWhileHandlingException(connection);\n \n                                     if (remoteNode.equals(transportService.getLocalNode())) {\n-                                        // TODO cache this result for some time? forever?\n                                         listener.onFailure(new ConnectTransportException(remoteNode, \"local node found\"));\n                                     } else if (remoteNode.isMasterNode() == false) {\n-                                        // TODO cache this result for some time?\n                                         listener.onFailure(new ConnectTransportException(remoteNode, \"non-master-eligible node found\"));\n                                     } else {\n-                                        transportService.connectToNode(remoteNode, ActionListener.delegateFailure(listener,\n-                                            (l, ignored) -> {\n-                                                logger.trace(\"[{}] full connection successful: {}\", thisConnectionAttempt, remoteNode);\n-                                                listener.onResponse(remoteNode);\n-                                            }));\n+                                        transportService.connectToNode(remoteNode, ActionListener.wrap(ignored -> {", "originalCommit": "e787138641585b3e090d89ef49de78cd7e0d0165", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd87bcba8108c9b9041b8cf459b47e9f517a599b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/discovery/HandshakingTransportAddressConnector.java b/server/src/main/java/org/elasticsearch/discovery/HandshakingTransportAddressConnector.java\nindex 40cb43ade78..727729b021b 100644\n--- a/server/src/main/java/org/elasticsearch/discovery/HandshakingTransportAddressConnector.java\n+++ b/server/src/main/java/org/elasticsearch/discovery/HandshakingTransportAddressConnector.java\n\n@@ -104,19 +104,26 @@ public class HandshakingTransportAddressConnector implements TransportAddressCon\n                                     } else if (remoteNode.isMasterNode() == false) {\n                                         listener.onFailure(new ConnectTransportException(remoteNode, \"non-master-eligible node found\"));\n                                     } else {\n-                                        transportService.connectToNode(remoteNode, ActionListener.wrap(ignored -> {\n-                                            logger.trace(\"[{}] completed full connection with [{}]\", thisConnectionAttempt, remoteNode);\n-                                            listener.onResponse(remoteNode);\n-                                        }, e -> {\n-                                            // we opened a connection and successfully performed a handshake, so we're definitely talking to\n-                                            // a master-eligible node with a matching cluster name and a good version, but the attempt to\n-                                            // open a full connection to its publish address failed; a common reason is that the remote\n-                                            // node is listening on 0.0.0.0 but has made an inappropriate choice for its publish address.\n-                                            logger.warn(new ParameterizedMessage(\n-                                                \"[{}] completed handshake with [{}] but followup connection failed\",\n-                                                thisConnectionAttempt, remoteNode), e);\n-                                            listener.onFailure(e);\n-                                        }));\n+                                        transportService.connectToNode(remoteNode, new ActionListener<>() {\n+                                            @Override\n+                                            public void onResponse(Void ignored) {\n+                                                logger.trace(\"[{}] completed full connection with [{}]\", thisConnectionAttempt, remoteNode);\n+                                                listener.onResponse(remoteNode);\n+                                            }\n+\n+                                            @Override\n+                                            public void onFailure(Exception e) {\n+                                                // we opened a connection and successfully performed a handshake, so we're definitely\n+                                                // talking to a master-eligible node with a matching cluster name and a good version, but\n+                                                // the attempt to open a full connection to its publish address failed; a common reason is\n+                                                // that the remote node is listening on 0.0.0.0 but has made an inappropriate choice for its\n+                                                // publish address.\n+                                                logger.warn(new ParameterizedMessage(\n+                                                    \"[{}] completed handshake with [{}] but followup connection failed\",\n+                                                    thisConnectionAttempt, remoteNode), e);\n+                                                listener.onFailure(e);\n+                                            }\n+                                        });\n                                     }\n                                 } catch (Exception e) {\n                                     listener.onFailure(e);\n"}}, {"oid": "bd87bcba8108c9b9041b8cf459b47e9f517a599b", "url": "https://github.com/elastic/elasticsearch/commit/bd87bcba8108c9b9041b8cf459b47e9f517a599b", "message": "Raw ActionListener, no trappy exception handling", "committedDate": "2020-01-22T16:16:05Z", "type": "commit"}]}