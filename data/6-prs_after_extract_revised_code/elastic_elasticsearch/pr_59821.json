{"pr_number": 59821, "pr_title": "Support spatial fields in field retrieval API.", "pr_createdAt": "2020-07-18T02:24:20Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59821", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODA1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r456738059", "bodyText": "Without this change, coordinates could change unexpectedly in a roundtrip like WKT -> CartesianPoint -> WKT. It seems common to represent points using doubles even though they're indexed as floats -- for example the Point geometry uses doubles.", "author": "jtibshirani", "createdAt": "2020-07-18T02:31:16Z", "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/common/CartesianPoint.java", "diffHunk": "@@ -36,18 +37,18 @@\n     private static final ParseField Y_FIELD = new ParseField(\"y\");\n     private static final ParseField Z_FIELD = new ParseField(\"z\");\n \n-    protected float x;\n-    protected float y;\n+    protected double x;", "originalCommit": "28ddcc3614fce0f5501bf1b44f5f4895a158b2a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNzQ2NA==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r457727464", "bodyText": "good Point. I do not see a problem with this. maybe @nknize has an opinion here", "author": "talevy", "createdAt": "2020-07-20T22:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "156d741e3da42e87c64f251d39fa9f18e4d67d3a", "chunk": "diff --git a/x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/common/CartesianPoint.java b/x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/common/CartesianPoint.java\nindex aa96ec40455..68339f130cf 100644\n--- a/x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/common/CartesianPoint.java\n+++ b/x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/common/CartesianPoint.java\n\n@@ -37,18 +37,18 @@ public class CartesianPoint implements ToXContentFragment {\n     private static final ParseField Y_FIELD = new ParseField(\"y\");\n     private static final ParseField Z_FIELD = new ParseField(\"z\");\n \n-    protected double x;\n-    protected double y;\n+    protected float x;\n+    protected float y;\n \n     public CartesianPoint() {\n     }\n \n-    public CartesianPoint(double x, double y) {\n+    public CartesianPoint(float x, float y) {\n         this.x = x;\n         this.y = y;\n     }\n \n-    public CartesianPoint reset(double x, double y) {\n+    public CartesianPoint reset(float x, float y) {\n         this.x = x;\n         this.y = y;\n         return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODk5OA==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r456738998", "bodyText": "This seemed like the easiest way to integrate with the existing logic but is far from ideal:\n\nWe perform parsing even when it's not necessary: even when the geometry is already in the right format, we still parse it to an object re-serialize it.\nWe also awkwardly translate between maps and xContent.\n\nLet me know if you have suggestions around a better approach. Overall I was hoping to keep this PR reasonably scoped, since it is part of a large 'field retrieval' change that already has a few moving parts. But we could plan a larger refactor in a separate/ follow-up change.", "author": "jtibshirani", "createdAt": "2020-07-18T02:42:22Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java", "diffHunk": "@@ -143,7 +153,31 @@ public Builder ignoreZValue(final boolean ignoreZValue) {\n \n     @Override\n     protected Object parseSourceValue(Object value, String format) {\n-        throw new UnsupportedOperationException();\n+        AbstractGeometryFieldType<Parsed, Processed> mappedFieldType = fieldType();\n+        Parser<Parsed> geometryParser = mappedFieldType.geometryParser();\n+        Formatter<Parsed> geometryFormatter = mappedFieldType.geometryFormatter();\n+\n+        Parsed geometry;\n+        try (XContentParser parser = new MapXContentParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE,", "originalCommit": "28ddcc3614fce0f5501bf1b44f5f4895a158b2a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MTU5OA==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r457371598", "bodyText": "This is pretty yikes, but I do like the idea of keeping the work contained on the branch and doing a larger refactoring after merging. Maybe it'd be cleaner to push the ability to parse these fields into SourceLookup. That way we don't need to do the xcontent -> map -> xcontent dance.", "author": "nik9000", "createdAt": "2020-07-20T13:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNjI3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r457726279", "bodyText": "would it make sense to specialize between points and shapes? At least for Shapes, we should be able to tell whether value is an object or a string, right?", "author": "talevy", "createdAt": "2020-07-20T22:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2MjIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r458262225", "bodyText": "Maybe it'd be cleaner to push the ability to parse these fields into SourceLookup\n\nI think this would be challenging given the current design of SourceLookup, since it is operates only on the level of xContent and is completely agnostic to the mappings. It would be nice though if SourceLookup could provide direct access to the xContent representation instead of always parsing + returning generic objects. This feels like a bigger change that's better suited for a follow-up though?\n\nAt least for Shapes, we should be able to tell whether value is an object or a string, right?\n\nThis would work, I'll look into it further! I'm inclined to not worry about it though if it makes the design more complicated (specifically splitting points vs. shapes handling).", "author": "jtibshirani", "createdAt": "2020-07-21T17:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "926993dd932cb6a756ab77eae2f06d6c4c1f9afb", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java\nindex 990e5b33df1..d608a1f734c 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java\n\n@@ -153,9 +160,12 @@ public abstract class AbstractGeometryFieldMapper<Parsed, Processed> extends Fie\n \n     @Override\n     protected Object parseSourceValue(Object value, String format) {\n+        if (format == null) {\n+            format = GeoJsonGeometryFormat.NAME;\n+        }\n+\n         AbstractGeometryFieldType<Parsed, Processed> mappedFieldType = fieldType();\n         Parser<Parsed> geometryParser = mappedFieldType.geometryParser();\n-        Formatter<Parsed> geometryFormatter = mappedFieldType.geometryFormatter();\n \n         Parsed geometry;\n         try (XContentParser parser = new MapXContentParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE,\n"}}, {"oid": "58c5a260b52ee83866c0bd2974dcfec364325171", "url": "https://github.com/elastic/elasticsearch/commit/58c5a260b52ee83866c0bd2974dcfec364325171", "message": "In CartesianPoint, store coordinates as doubles.\n\nThis gives more predictable values when parsing and formatting a point. It\nmatches the behavior for GeoPoint and the Point geometry.", "committedDate": "2020-07-18T04:51:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MzYxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r457373619", "bodyText": "Probably worth javadoc. I was confused by the method name because I usually think of map and xcontent as mutually exclusive representations.", "author": "nik9000", "createdAt": "2020-07-20T13:18:10Z", "path": "server/src/main/java/org/elasticsearch/common/geo/GeoJson.java", "diffHunk": "@@ -610,4 +617,14 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         }\n     }\n \n+    public static Map<?, ?> toXContentMap(Geometry geometry) throws IOException {", "originalCommit": "58c5a260b52ee83866c0bd2974dcfec364325171", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMDgyNg==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r457730826", "bodyText": "also, XContent here is just an implementation detail. it is a normal Map, right?", "author": "talevy", "createdAt": "2020-07-20T22:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MzYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NDIzOA==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r458264238", "bodyText": "I will clean this up. Here I was using toXContentMap to mean 'return the JSON representation of the geometry as a Java map'. But I see how this is confusing given there's already a toXContent method ...", "author": "jtibshirani", "createdAt": "2020-07-21T17:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MzYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "926993dd932cb6a756ab77eae2f06d6c4c1f9afb", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/geo/GeoJson.java b/server/src/main/java/org/elasticsearch/common/geo/GeoJson.java\nindex fe6811d82f6..85b35c6393b 100644\n--- a/server/src/main/java/org/elasticsearch/common/geo/GeoJson.java\n+++ b/server/src/main/java/org/elasticsearch/common/geo/GeoJson.java\n\n@@ -616,15 +609,4 @@ public final class GeoJson {\n             return builder;\n         }\n     }\n-\n-    public static Map<?, ?> toXContentMap(Geometry geometry) throws IOException {\n-        XContentBuilder builder = XContentFactory.jsonBuilder();\n-        GeoJson.toXContent(geometry, builder, ToXContent.EMPTY_PARAMS);\n-        StreamInput input = BytesReference.bytes(builder).streamInput();\n-\n-        try (XContentParser parser = XContentType.JSON.xContent()\n-            .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, input)) {\n-            return parser.map();\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNjY4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r457726685", "bodyText": "should we add some javadoc for this?", "author": "talevy", "createdAt": "2020-07-20T22:26:59Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java", "diffHunk": "@@ -82,6 +87,11 @@\n         Parsed parse(XContentParser parser, AbstractGeometryFieldMapper mapper) throws IOException, ParseException;\n     }\n \n+    public interface Formatter<Parsed> {", "originalCommit": "3bb216a749fae997593685c15513d4c4c2f79e1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "926993dd932cb6a756ab77eae2f06d6c4c1f9afb", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java\nindex 990e5b33df1..d608a1f734c 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/AbstractGeometryFieldMapper.java\n\n@@ -81,15 +82,21 @@ public abstract class AbstractGeometryFieldMapper<Parsed, Processed> extends Fie\n     }\n \n     /**\n-     * interface representing parser in geometry indexing pipeline\n+     * Interface representing parser in geometry indexing pipeline.\n      */\n     public interface Parser<Parsed> {\n+        /**\n+         * Parse the given xContent value to an object of type {@link Parsed}.\n+         */\n         Parsed parse(XContentParser parser, AbstractGeometryFieldMapper mapper) throws IOException, ParseException;\n-    }\n \n-    public interface Formatter<Parsed> {\n-        Object formatGeoJson(Parsed value);\n-        Object formatWKT(Parsed value);\n+        /**\n+         * Given a parsed value and a format string, formats the value into a plain Java object.\n+         *\n+         * Supported formats include 'geojson' and 'wkt'. The different formats are defined\n+         * as subclasses of {@link org.elasticsearch.common.geo.GeometryFormat}.\n+         */\n+        Object format(Parsed value, String format);\n     }\n \n     public abstract static class Builder<T extends Builder<T, FT>, FT extends AbstractGeometryFieldType>\n"}}, {"oid": "156d741e3da42e87c64f251d39fa9f18e4d67d3a", "url": "https://github.com/elastic/elasticsearch/commit/156d741e3da42e87c64f251d39fa9f18e4d67d3a", "message": "Support spatial fields in field retrieval API.\n\nAlthough we accept a variety of formats during indexing, spatial data is\nreturned in a single consistent format. This is GeoJSON by default, but\nwell-known text is also supported by passing the option 'format: wkt'.\n\nNote that points (in addition to shapes) are returned in GeoJSON by default. The\nreasoning is that this gives better consistency, and is the most convenient\nformat for most REST API users.", "committedDate": "2020-07-21T18:08:46Z", "type": "commit"}, {"oid": "d50fa6ff30216c66c8a38fea34bc30bffc1b117f", "url": "https://github.com/elastic/elasticsearch/commit/d50fa6ff30216c66c8a38fea34bc30bffc1b117f", "message": "In CartesianPoint, store coordinates as doubles.\n\nThis gives more predictable values when parsing and formatting a point. It\nmatches the behavior for GeoPoint and the Point geometry.", "committedDate": "2020-07-21T18:08:50Z", "type": "commit"}, {"oid": "804a2956cf50b9e9bf7aba61cb71aa9072927181", "url": "https://github.com/elastic/elasticsearch/commit/804a2956cf50b9e9bf7aba61cb71aa9072927181", "message": "Fix naming of 'spatial datatypes' anchor.", "committedDate": "2020-07-21T18:09:33Z", "type": "commit"}, {"oid": "804a2956cf50b9e9bf7aba61cb71aa9072927181", "url": "https://github.com/elastic/elasticsearch/commit/804a2956cf50b9e9bf7aba61cb71aa9072927181", "message": "Fix naming of 'spatial datatypes' anchor.", "committedDate": "2020-07-21T18:09:33Z", "type": "forcePushed"}, {"oid": "6f9e82a7dca40673e8acd767d99812e6e5d5a7a3", "url": "https://github.com/elastic/elasticsearch/commit/6f9e82a7dca40673e8acd767d99812e6e5d5a7a3", "message": "Better formalize the types of geometry formats.", "committedDate": "2020-07-21T21:53:38Z", "type": "commit"}, {"oid": "926993dd932cb6a756ab77eae2f06d6c4c1f9afb", "url": "https://github.com/elastic/elasticsearch/commit/926993dd932cb6a756ab77eae2f06d6c4c1f9afb", "message": "Rely on GeometryFormat for all value formatting.", "committedDate": "2020-07-21T21:54:00Z", "type": "commit"}, {"oid": "4bf9bd1fddeab8e401ba5c5252cde422dea1add1", "url": "https://github.com/elastic/elasticsearch/commit/4bf9bd1fddeab8e401ba5c5252cde422dea1add1", "message": "Avoid parsing shapes if they're already in the right format.", "committedDate": "2020-07-21T21:54:51Z", "type": "commit"}, {"oid": "d3d62820221c7c0c65f2aad2eca705de26d50a91", "url": "https://github.com/elastic/elasticsearch/commit/d3d62820221c7c0c65f2aad2eca705de26d50a91", "message": "Fix checkstyle violation.", "committedDate": "2020-07-21T22:24:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5OTA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r458999049", "bodyText": "Maybe return Object here as well for consistency. I don't think the fact that it returns Map is significant here.", "author": "imotov", "createdAt": "2020-07-22T18:31:28Z", "path": "server/src/main/java/org/elasticsearch/common/geo/GeoJsonGeometryFormat.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.geo;\n+\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.geometry.Geometry;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+\n+public class GeoJsonGeometryFormat implements GeometryFormat<Geometry> {\n+    public static final String NAME = \"geojson\";\n+\n+    private final GeoJson geoJsonParser;\n+\n+    public GeoJsonGeometryFormat(GeoJson geoJsonParser) {\n+        this.geoJsonParser = geoJsonParser;\n+    }\n+\n+    @Override\n+    public String name() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Geometry fromXContent(XContentParser parser) throws IOException {\n+        if (parser.currentToken() == XContentParser.Token.VALUE_NULL) {\n+            return null;\n+        }\n+        return geoJsonParser.fromXContent(parser);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(Geometry geometry, XContentBuilder builder, ToXContent.Params params) throws IOException {\n+        if (geometry != null) {\n+            return GeoJson.toXContent(geometry, builder, params);\n+        } else {\n+            return builder.nullValue();\n+        }\n+    }\n+\n+    @Override\n+    public Map<?, ?> toObject(Geometry geometry) {", "originalCommit": "d3d62820221c7c0c65f2aad2eca705de26d50a91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwODcwMw==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r459008703", "bodyText": "I sometimes like using covariance like this to clarify that a subclass always returns a specific type. I don't feel strongly about it though, happy to change it. We can always change it back later if we find it helpful for unit testing, etc. to have the exact type.", "author": "jtibshirani", "createdAt": "2020-07-22T18:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5OTA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b7dad391666afceaf9e56daf54b1e788e42ca10", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/geo/GeoJsonGeometryFormat.java b/server/src/main/java/org/elasticsearch/common/geo/GeoJsonGeometryFormat.java\nindex 7a88f4936f3..762d6509249 100644\n--- a/server/src/main/java/org/elasticsearch/common/geo/GeoJsonGeometryFormat.java\n+++ b/server/src/main/java/org/elasticsearch/common/geo/GeoJsonGeometryFormat.java\n\n@@ -66,7 +66,7 @@ public class GeoJsonGeometryFormat implements GeometryFormat<Geometry> {\n     }\n \n     @Override\n-    public Map<?, ?> toObject(Geometry geometry) {\n+    public Map<?, ?> toXContentAsObject(Geometry geometry) {\n         try {\n             XContentBuilder builder = XContentFactory.jsonBuilder();\n             GeoJson.toXContent(geometry, builder, ToXContent.EMPTY_PARAMS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMTY3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r459001679", "bodyText": "I wonder if somebody can come up with a better name here :) maybe to toXContentObject() or toXConentValue() or something like this. I feel like toObject is misleadingly generic here.", "author": "imotov", "createdAt": "2020-07-22T18:35:43Z", "path": "server/src/main/java/org/elasticsearch/common/geo/GeometryFormat.java", "diffHunk": "@@ -41,4 +46,10 @@\n      */\n     XContentBuilder toXContent(ParsedFormat geometry, XContentBuilder builder, ToXContent.Params params) throws IOException;\n \n+    /**\n+     * Serializes the geometry into a standard Java object.\n+     *\n+     * For example, the GeoJson format returns the geometry as a map, while WKT returns a string.\n+     */\n+    Object toObject(ParsedFormat geometry);", "originalCommit": "d3d62820221c7c0c65f2aad2eca705de26d50a91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMDY0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r459010645", "bodyText": "I previously had a method called toXContentMap that @talevy and @nik9000 found confusing, because we often refer to xContent and maps as distinct representations. Perhaps a name like toXContentAsObject could work?", "author": "jtibshirani", "createdAt": "2020-07-22T18:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMTY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNTAwNw==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r459015007", "bodyText": "haha, oi. since there are javadocs explaining it now, I drop my naming argument. I'm good with whatever sounds good to you!", "author": "talevy", "createdAt": "2020-07-22T18:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMTY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNjg1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/59821#discussion_r459016851", "bodyText": "I cannot say I love toXContentAsObject but I like it the best comparing to all other versions.", "author": "imotov", "createdAt": "2020-07-22T19:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMTY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b7dad391666afceaf9e56daf54b1e788e42ca10", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/geo/GeometryFormat.java b/server/src/main/java/org/elasticsearch/common/geo/GeometryFormat.java\nindex 5c77491e0fc..4ce53eaa8f1 100644\n--- a/server/src/main/java/org/elasticsearch/common/geo/GeometryFormat.java\n+++ b/server/src/main/java/org/elasticsearch/common/geo/GeometryFormat.java\n\n@@ -51,5 +51,5 @@ public interface GeometryFormat<ParsedFormat> {\n      *\n      * For example, the GeoJson format returns the geometry as a map, while WKT returns a string.\n      */\n-    Object toObject(ParsedFormat geometry);\n+    Object toXContentAsObject(ParsedFormat geometry);\n }\n"}}, {"oid": "1b7dad391666afceaf9e56daf54b1e788e42ca10", "url": "https://github.com/elastic/elasticsearch/commit/1b7dad391666afceaf9e56daf54b1e788e42ca10", "message": "Rename GeometryFormat#toObject -> toXContentAsObject.", "committedDate": "2020-07-22T20:41:25Z", "type": "commit"}, {"oid": "9c155cf78e24b2b4f41c13ac0d363d9738fcc63d", "url": "https://github.com/elastic/elasticsearch/commit/9c155cf78e24b2b4f41c13ac0d363d9738fcc63d", "message": "Always return Object from toXContentAsObject.", "committedDate": "2020-07-22T20:42:04Z", "type": "commit"}]}