{"pr_number": 65498, "pr_title": "Log warn when license does not permit auditing", "pr_createdAt": "2020-11-25T14:45:42Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65498", "timeline": [{"oid": "42774d234a3ccc80eb710c4d7756e34d66febbdc", "url": "https://github.com/elastic/elasticsearch/commit/42774d234a3ccc80eb710c4d7756e34d66febbdc", "message": "Log when license does not permit audits", "committedDate": "2020-11-25T14:23:51Z", "type": "commit"}, {"oid": "b61b6be987e7077e465245d3a3c17e6d5641c444", "url": "https://github.com/elastic/elasticsearch/commit/b61b6be987e7077e465245d3a3c17e6d5641c444", "message": "More complex", "committedDate": "2020-11-25T14:34:05Z", "type": "commit"}, {"oid": "9e7175f068e5a303b06eed9ee2e8478edbc1701b", "url": "https://github.com/elastic/elasticsearch/commit/9e7175f068e5a303b06eed9ee2e8478edbc1701b", "message": "Split test", "committedDate": "2020-11-25T20:23:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTAzNA==", "url": "https://github.com/elastic/elasticsearch/pull/65498#discussion_r532295034", "bodyText": "Technically, the license level check is just licenseState.checkFeature, so I'd prefer to have the logic as\nif (compositeAuditTrail.isEmpty() == false && licenseState.isSecurityEnabled()) {\n    if (licenseState.checkFeature(Feature.SECURITY_AUDITING)) {\n    }\n}\n\nwhich is more accurate to the warning message.", "author": "ywangd", "createdAt": "2020-11-30T00:37:22Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "diffHunk": "@@ -16,24 +18,40 @@\n import org.elasticsearch.xpack.security.transport.filter.SecurityIpFilterRule;\n \n import java.net.InetAddress;\n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.Collections;\n import java.util.List;\n \n public class AuditTrailService {\n \n+    private static final Logger logger = LogManager.getLogger(AuditTrailService.class);\n+\n     private static final AuditTrail NOOP_AUDIT_TRAIL = new NoopAuditTrail();\n     private final CompositeAuditTrail compositeAuditTrail;\n     private final XPackLicenseState licenseState;\n+    private final Duration minLogPeriod = Duration.ofMinutes(30);\n+    // protected for tests\n+    protected Instant lastLogInstant = Instant.EPOCH;\n \n     public AuditTrailService(List<AuditTrail> auditTrails, XPackLicenseState licenseState) {\n         this.compositeAuditTrail = new CompositeAuditTrail(Collections.unmodifiableList(auditTrails));\n         this.licenseState = licenseState;\n     }\n \n     public AuditTrail get() {\n-        if (compositeAuditTrail.isEmpty() == false &&\n-            licenseState.isSecurityEnabled() && licenseState.checkFeature(Feature.SECURITY_AUDITING)) {\n-            return compositeAuditTrail;\n+        if (compositeAuditTrail.isEmpty() == false) {\n+            if (licenseState.isSecurityEnabled() && licenseState.checkFeature(Feature.SECURITY_AUDITING)) {", "originalCommit": "9e7175f068e5a303b06eed9ee2e8478edbc1701b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39f7e9f00aed70939eedb3c21fd73034b7b18ec5", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\nindex d6b7d0ff494..8141e711d4e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\n\n@@ -22,6 +22,7 @@ import java.time.Duration;\n import java.time.Instant;\n import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n \n public class AuditTrailService {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTg0NA==", "url": "https://github.com/elastic/elasticsearch/pull/65498#discussion_r532295844", "bodyText": "Without volatile means we could end up logging more frequently than every 30 mins from different threads. Do we care?", "author": "ywangd", "createdAt": "2020-11-30T00:42:50Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "diffHunk": "@@ -16,24 +18,40 @@\n import org.elasticsearch.xpack.security.transport.filter.SecurityIpFilterRule;\n \n import java.net.InetAddress;\n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.Collections;\n import java.util.List;\n \n public class AuditTrailService {\n \n+    private static final Logger logger = LogManager.getLogger(AuditTrailService.class);\n+\n     private static final AuditTrail NOOP_AUDIT_TRAIL = new NoopAuditTrail();\n     private final CompositeAuditTrail compositeAuditTrail;\n     private final XPackLicenseState licenseState;\n+    private final Duration minLogPeriod = Duration.ofMinutes(30);\n+    // protected for tests\n+    protected Instant lastLogInstant = Instant.EPOCH;", "originalCommit": "9e7175f068e5a303b06eed9ee2e8478edbc1701b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyNTQwMg==", "url": "https://github.com/elastic/elasticsearch/pull/65498#discussion_r537725402", "bodyText": "Hmmm, yeah, in a loaded server there could be many groups of such logs.\nI think we should strive to keep reads of the instant from a thread local cache and reach to the main memory only in the case that logging is due. But I ended up using an AtomicReference after trying with a volatile in addition with the regular instance variable.\nI'm undecided but I think the atomic reference is good enough.", "author": "albertzaharovits", "createdAt": "2020-12-07T18:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAyMTk3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65498#discussion_r538021977", "bodyText": "I think we should strive to keep reads of the instant from a thread local cache and reach to the main memory only in the case that logging is due.\n\nI agree this would probably be more efficient. But I also agree the AtomicReference is OK. Because this is a warning situation and ideally users should take action to rectify the warnings. Otherwise, it is OK if things could run a tiny bit inefficiently in this non-ideal situation.", "author": "ywangd", "createdAt": "2020-12-08T04:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAyNjU3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/65498#discussion_r538026572", "bodyText": "Btw, the use of AtomicReference does not fully prevent \"logging more than once every 30 mins\", nor does using volatile either. They do reduce the chance of it happening and we seem to be content with its effect, e.g. both ApiKeyService and TokenService has a volatile variable to track last expiration run. So I don't think we need to resort to stronger guarantees (e.g. rw lock) here.", "author": "ywangd", "createdAt": "2020-12-08T04:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAyODg3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/65498#discussion_r538028876", "bodyText": "Please scratch the above comment, I just noticed the logging call is wrapped inside a compareAndSet. This should solve the problem of \"no more than once per 30 mins\".", "author": "ywangd", "createdAt": "2020-12-08T04:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "39f7e9f00aed70939eedb3c21fd73034b7b18ec5", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\nindex d6b7d0ff494..8141e711d4e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\n\n@@ -22,6 +22,7 @@ import java.time.Duration;\n import java.time.Instant;\n import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n \n public class AuditTrailService {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NzkwMw==", "url": "https://github.com/elastic/elasticsearch/pull/65498#discussion_r532297903", "bodyText": "Nit: should it be Auditing logging ... instead of Security auditing ...? It is true that auditing events are all security related, also this is how the feature Enum is named. But the feature is documented and marketed as \"audit logging\", which seems to be a better end-user oriented term.", "author": "ywangd", "createdAt": "2020-11-30T00:54:51Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java", "diffHunk": "@@ -16,24 +18,40 @@\n import org.elasticsearch.xpack.security.transport.filter.SecurityIpFilterRule;\n \n import java.net.InetAddress;\n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.Collections;\n import java.util.List;\n \n public class AuditTrailService {\n \n+    private static final Logger logger = LogManager.getLogger(AuditTrailService.class);\n+\n     private static final AuditTrail NOOP_AUDIT_TRAIL = new NoopAuditTrail();\n     private final CompositeAuditTrail compositeAuditTrail;\n     private final XPackLicenseState licenseState;\n+    private final Duration minLogPeriod = Duration.ofMinutes(30);\n+    // protected for tests\n+    protected Instant lastLogInstant = Instant.EPOCH;\n \n     public AuditTrailService(List<AuditTrail> auditTrails, XPackLicenseState licenseState) {\n         this.compositeAuditTrail = new CompositeAuditTrail(Collections.unmodifiableList(auditTrails));\n         this.licenseState = licenseState;\n     }\n \n     public AuditTrail get() {\n-        if (compositeAuditTrail.isEmpty() == false &&\n-            licenseState.isSecurityEnabled() && licenseState.checkFeature(Feature.SECURITY_AUDITING)) {\n-            return compositeAuditTrail;\n+        if (compositeAuditTrail.isEmpty() == false) {\n+            if (licenseState.isSecurityEnabled() && licenseState.checkFeature(Feature.SECURITY_AUDITING)) {\n+                return compositeAuditTrail;\n+            } else {\n+                Instant nowInstant = Instant.now();\n+                if (lastLogInstant.plus(minLogPeriod).isBefore(nowInstant)) {\n+                    lastLogInstant = nowInstant;\n+                    logger.warn(\"Security auditing is DISABLED because the currently active license [\" +", "originalCommit": "9e7175f068e5a303b06eed9ee2e8478edbc1701b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39f7e9f00aed70939eedb3c21fd73034b7b18ec5", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\nindex d6b7d0ff494..8141e711d4e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java\n\n@@ -22,6 +22,7 @@ import java.time.Duration;\n import java.time.Instant;\n import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n \n public class AuditTrailService {\n \n"}}, {"oid": "1aa3c134260a8219ba839dfcfb8176da5c98e530", "url": "https://github.com/elastic/elasticsearch/commit/1aa3c134260a8219ba839dfcfb8176da5c98e530", "message": "Merge branch 'master' into log_when_auditing_non_compliant", "committedDate": "2020-12-07T15:11:29Z", "type": "commit"}, {"oid": "39f7e9f00aed70939eedb3c21fd73034b7b18ec5", "url": "https://github.com/elastic/elasticsearch/commit/39f7e9f00aed70939eedb3c21fd73034b7b18ec5", "message": "Review", "committedDate": "2020-12-07T18:10:38Z", "type": "commit"}, {"oid": "0a71b27da9f27127d7bf44cf210f9a8e9a05c92c", "url": "https://github.com/elastic/elasticsearch/commit/0a71b27da9f27127d7bf44cf210f9a8e9a05c92c", "message": "Merge branch 'master' into log_when_auditing_non_compliant", "committedDate": "2020-12-08T09:56:53Z", "type": "commit"}]}