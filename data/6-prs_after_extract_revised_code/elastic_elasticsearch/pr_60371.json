{"pr_number": 60371, "pr_title": "Add repositories metering API", "pr_createdAt": "2020-07-29T10:59:47Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60371", "timeline": [{"oid": "bfd1ff2bfbbcfe8ff57797d25a81fb6483a2498c", "url": "https://github.com/elastic/elasticsearch/commit/bfd1ff2bfbbcfe8ff57797d25a81fb6483a2498c", "message": "Add repositories stats tracking API", "committedDate": "2020-07-29T12:52:32Z", "type": "forcePushed"}, {"oid": "3e77c5291856ce1cfb708cf803855af906e3efe0", "url": "https://github.com/elastic/elasticsearch/commit/3e77c5291856ce1cfb708cf803855af906e3efe0", "message": "Add repositories stats tracking API", "committedDate": "2020-08-02T11:30:14Z", "type": "commit"}, {"oid": "fc7ca2067f9180798c29612fa886d2862c5084ee", "url": "https://github.com/elastic/elasticsearch/commit/fc7ca2067f9180798c29612fa886d2862c5084ee", "message": "Merge remote-tracking branch 'origin/master' into metering", "committedDate": "2020-08-02T11:30:48Z", "type": "commit"}, {"oid": "fc7ca2067f9180798c29612fa886d2862c5084ee", "url": "https://github.com/elastic/elasticsearch/commit/fc7ca2067f9180798c29612fa886d2862c5084ee", "message": "Merge remote-tracking branch 'origin/master' into metering", "committedDate": "2020-08-02T11:30:48Z", "type": "forcePushed"}, {"oid": "528da9a3a87816f7da98d9a3accc49021c4f98f5", "url": "https://github.com/elastic/elasticsearch/commit/528da9a3a87816f7da98d9a3accc49021c4f98f5", "message": "Add docs", "committedDate": "2020-08-03T10:29:19Z", "type": "commit"}, {"oid": "fcc15c852c18b8343e0be798c8855ba277b4c6f2", "url": "https://github.com/elastic/elasticsearch/commit/fcc15c852c18b8343e0be798c8855ba277b4c6f2", "message": "Merge remote-tracking branch 'origin/master' into metering", "committedDate": "2020-08-03T10:29:43Z", "type": "commit"}, {"oid": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "url": "https://github.com/elastic/elasticsearch/commit/f71fabbf109a52d46c87f76d4609b6b1f720f065", "message": "Fix build scripts", "committedDate": "2020-08-03T11:28:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzU2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465003563", "bodyText": "We generally try to use org.elasticsearch.threadpool.ThreadPool#relativeTimeInMillis for this kind of logic to get a reliable relative timestamp + test-ability. Maybe we should store the safe relative start and and times (but not serialize it) when starting and stopping a repo so we have reliable timestamps no matter what happens to the system clock? Otherwise this would be (as far as I can tell) our first timeout logic based on absolute timestamps.", "author": "original-brownbear", "createdAt": "2020-08-04T12:10:38Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n+            repositoryStats = repositoryStats.withStoppedRepo();\n+        }\n+        archive.add(repositoryStats);\n+        evict();\n+    }\n+\n+    synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n+        evict();\n+        return List.copyOf(archive);\n+    }\n+\n+    synchronized void clear() {\n+        archive.clear();\n+    }\n+\n+    private void evict() {\n+        Instant retentionDeadline = getRetentionDeadline();\n+        RepositoryStatsSnapshot stats;\n+        while ((stats = archive.peek()) != null && shouldEvict(stats, retentionDeadline)) {\n+            archive.poll();\n+        }\n+    }\n+\n+    private boolean shouldEvict(RepositoryStatsSnapshot stats, Instant deadline) {\n+        return stats.wasRepoStoppedBefore(deadline);\n+    }\n+\n+    private Instant getRetentionDeadline() {\n+        return Instant.now().minus(Duration.ofMillis(retentionPeriod.getMillis()));", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MDQ5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465580493", "bodyText": "\ud83d\udc4d thanks for the feedback on that.", "author": "fcofdez", "createdAt": "2020-08-05T09:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\nindex 510f4d63038..b60d40dc743 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n\n@@ -21,26 +21,46 @@ package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.unit.TimeValue;\n \n-import java.time.Duration;\n-import java.time.Instant;\n import java.util.ArrayDeque;\n import java.util.Deque;\n import java.util.List;\n+import java.util.function.LongSupplier;\n \n public final class RepositoriesStatsArchive {\n     private final TimeValue retentionPeriod;\n+    private final int maxCapacity;\n+    private final LongSupplier relativeTimeSupplier;\n+    private final LongSupplier absoluteTimeSupplier;\n     private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n \n-    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+    public RepositoriesStatsArchive(TimeValue retentionPeriod,\n+                                    int maxCapacity,\n+                                    LongSupplier relativeTimeSupplier,\n+                                    LongSupplier absoluteTimeSupplier) {\n         this.retentionPeriod = retentionPeriod;\n+        this.maxCapacity = maxCapacity;\n+        this.relativeTimeSupplier = relativeTimeSupplier;\n+        this.absoluteTimeSupplier = absoluteTimeSupplier;\n     }\n \n-    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n-        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n-            repositoryStats = repositoryStats.withStoppedRepo();\n-        }\n-        archive.add(repositoryStats);\n+    /**\n+     * Archives the specified repository stats snapshot into the archive\n+     * if it's possible without violating the capacity constraints.\n+     *\n+     * @return {@code true} if the repository stats were archived, {@code false} otherwise.\n+     */\n+    synchronized boolean archive(RepositoryStatsSnapshot repositoryStats) {\n         evict();\n+\n+        if (archive.size() >= maxCapacity) {\n+            return false;\n+        }\n+\n+        RepositoryInfo stoppedRepoInfo =\n+            repositoryStats.getRepositoryInfo().stopped(absoluteTimeSupplier.getAsLong());\n+        repositoryStats =\n+            new RepositoryStatsSnapshot(stoppedRepoInfo, repositoryStats.getRepositoryStats(), relativeTimeSupplier.getAsLong());\n+        return archive.add(repositoryStats);\n     }\n \n     synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNDg5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465004896", "bodyText": "Why use Instant throughout these APIs and not just a long relative timestamp?", "author": "original-brownbear", "createdAt": "2020-08-04T12:13:20Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryStatsSnapshot.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+public final class RepositoryStatsSnapshot implements Writeable, ToXContent {\n+    private final RepositoryInfo repositoryInfo;\n+    private final RepositoryStats repositoryStats;\n+\n+    public RepositoryStatsSnapshot(RepositoryInfo repositoryInfo,\n+                                   RepositoryStats repositoryStats) {\n+        this.repositoryInfo = repositoryInfo;\n+        this.repositoryStats = repositoryStats;\n+    }\n+\n+    public RepositoryStatsSnapshot(StreamInput in) throws IOException {\n+        this.repositoryInfo = new RepositoryInfo(in);\n+        this.repositoryStats = new RepositoryStats(in);\n+    }\n+\n+    public RepositoryInfo getRepositoryInfo() {\n+        return repositoryInfo;\n+    }\n+\n+    public RepositoryStats getRepositoryStats() {\n+        return repositoryStats;\n+    }\n+\n+    public boolean wasRepoStoppedBefore(Instant instant) {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoryStatsSnapshot.java b/server/src/main/java/org/elasticsearch/repositories/RepositoryStatsSnapshot.java\nindex e5b9062340e..809ac3ddbef 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoryStatsSnapshot.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoryStatsSnapshot.java\n\n@@ -19,6 +19,7 @@\n \n package org.elasticsearch.repositories;\n \n+import org.elasticsearch.common.Nullable;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.io.stream.Writeable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MDc0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465070746", "bodyText": "Why use optional here? It seems it would make more sense to simply only have this method on MeteredBlobStoreRepository and simply filter for instances of MeteredBlobStoreRepository when looping over all repos instead of having this method on Repository?", "author": "original-brownbear", "createdAt": "2020-08-04T13:59:14Z", "path": "server/src/main/java/org/elasticsearch/repositories/Repository.java", "diffHunk": "@@ -154,8 +155,8 @@ void deleteSnapshots(Collection<SnapshotId> snapshotIds, long repositoryStateId,\n     /**\n      * Returns stats on the repository usage\n      */\n-    default RepositoryStats stats() {\n-        return RepositoryStats.EMPTY_STATS;\n+    default Optional<RepositoryStatsSnapshot> statsSnapshot() {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/Repository.java b/server/src/main/java/org/elasticsearch/repositories/Repository.java\nindex 36ad3044027..ec0fb5b561a 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/Repository.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/Repository.java\n\n@@ -155,8 +154,8 @@ public interface Repository extends LifecycleComponent {\n     /**\n      * Returns stats on the repository usage\n      */\n-    default Optional<RepositoryStatsSnapshot> statsSnapshot() {\n-        return Optional.empty();\n+    default RepositoryStats stats() {\n+        return RepositoryStats.EMPTY_STATS;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MTk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465071974", "bodyText": "I think we can just make repositoryInfo a field in this class instead of always recreating the exact same object?", "author": "original-brownbear", "createdAt": "2020-08-04T14:00:53Z", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/MeteredBlobStoreRepository.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories.blobstore;\n+\n+import org.elasticsearch.cluster.metadata.RepositoryMetadata;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.UUIDs;\n+import org.elasticsearch.common.blobstore.BlobPath;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.indices.recovery.RecoverySettings;\n+import org.elasticsearch.repositories.RepositoryInfo;\n+import org.elasticsearch.repositories.RepositoryStatsSnapshot;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+public abstract class MeteredBlobStoreRepository extends BlobStoreRepository {\n+    private final String ephemeralId;\n+    private final Instant startedAt;\n+\n+    public MeteredBlobStoreRepository(RepositoryMetadata metadata,\n+                                      NamedXContentRegistry namedXContentRegistry,\n+                                      ClusterService clusterService,\n+                                      RecoverySettings recoverySettings,\n+                                      BlobPath basePath) {\n+        super(metadata, namedXContentRegistry, clusterService, recoverySettings, basePath);\n+        this.ephemeralId = UUIDs.randomBase64UUID();\n+        this.startedAt = Instant.now();\n+    }\n+\n+    @Override\n+    public Optional<RepositoryStatsSnapshot> statsSnapshot() {\n+        RepositoryInfo repositoryInfo = new RepositoryInfo(ephemeralId, metadata.name(), metadata.type(), location(), startedAt);", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/blobstore/MeteredBlobStoreRepository.java b/server/src/main/java/org/elasticsearch/repositories/blobstore/MeteredBlobStoreRepository.java\nindex f01205afb7d..b91c76dac4d 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/blobstore/MeteredBlobStoreRepository.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/MeteredBlobStoreRepository.java\n\n@@ -27,29 +27,37 @@ import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n import org.elasticsearch.indices.recovery.RecoverySettings;\n import org.elasticsearch.repositories.RepositoryInfo;\n import org.elasticsearch.repositories.RepositoryStatsSnapshot;\n-\n-import java.time.Instant;\n-import java.util.Optional;\n+import org.elasticsearch.threadpool.ThreadPool;\n \n public abstract class MeteredBlobStoreRepository extends BlobStoreRepository {\n-    private final String ephemeralId;\n-    private final Instant startedAt;\n+    private final RepositoryInfo repositoryInfo;\n \n     public MeteredBlobStoreRepository(RepositoryMetadata metadata,\n                                       NamedXContentRegistry namedXContentRegistry,\n                                       ClusterService clusterService,\n                                       RecoverySettings recoverySettings,\n-                                      BlobPath basePath) {\n+                                      BlobPath basePath,\n+                                      String bucket) {\n         super(metadata, namedXContentRegistry, clusterService, recoverySettings, basePath);\n-        this.ephemeralId = UUIDs.randomBase64UUID();\n-        this.startedAt = Instant.now();\n+        ThreadPool threadPool = clusterService.getClusterApplierService().threadPool();\n+        this.repositoryInfo = new RepositoryInfo(UUIDs.randomBase64UUID(),\n+            metadata.name(),\n+            metadata.type(),\n+            getLocation(basePath, bucket),\n+            threadPool.absoluteTimeInMillis());\n     }\n \n-    @Override\n-    public Optional<RepositoryStatsSnapshot> statsSnapshot() {\n-        RepositoryInfo repositoryInfo = new RepositoryInfo(ephemeralId, metadata.name(), metadata.type(), location(), startedAt);\n-        return Optional.of(new RepositoryStatsSnapshot(repositoryInfo, stats()));\n+    public RepositoryStatsSnapshot statsSnapshot() {\n+        return new RepositoryStatsSnapshot(repositoryInfo, stats(), threadPool.relativeTimeInMillis());\n     }\n \n-    protected abstract String location();\n+    private static String getLocation(BlobPath basePath, String bucket) {\n+        BlobPath location = BlobPath.cleanPath();\n+\n+        location = location.add(bucket);\n+        for (String path : basePath) {\n+            location = location.add(path);\n+        }\n+        return location.buildAsString();\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NzcwOA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465077708", "bodyText": "I think we should have a hard limit on the size of this as well as some WARN logging once we get over a certain size.", "author": "original-brownbear", "createdAt": "2020-08-04T14:08:44Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\nindex 510f4d63038..b60d40dc743 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n\n@@ -21,26 +21,46 @@ package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.unit.TimeValue;\n \n-import java.time.Duration;\n-import java.time.Instant;\n import java.util.ArrayDeque;\n import java.util.Deque;\n import java.util.List;\n+import java.util.function.LongSupplier;\n \n public final class RepositoriesStatsArchive {\n     private final TimeValue retentionPeriod;\n+    private final int maxCapacity;\n+    private final LongSupplier relativeTimeSupplier;\n+    private final LongSupplier absoluteTimeSupplier;\n     private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n \n-    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+    public RepositoriesStatsArchive(TimeValue retentionPeriod,\n+                                    int maxCapacity,\n+                                    LongSupplier relativeTimeSupplier,\n+                                    LongSupplier absoluteTimeSupplier) {\n         this.retentionPeriod = retentionPeriod;\n+        this.maxCapacity = maxCapacity;\n+        this.relativeTimeSupplier = relativeTimeSupplier;\n+        this.absoluteTimeSupplier = absoluteTimeSupplier;\n     }\n \n-    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n-        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n-            repositoryStats = repositoryStats.withStoppedRepo();\n-        }\n-        archive.add(repositoryStats);\n+    /**\n+     * Archives the specified repository stats snapshot into the archive\n+     * if it's possible without violating the capacity constraints.\n+     *\n+     * @return {@code true} if the repository stats were archived, {@code false} otherwise.\n+     */\n+    synchronized boolean archive(RepositoryStatsSnapshot repositoryStats) {\n         evict();\n+\n+        if (archive.size() >= maxCapacity) {\n+            return false;\n+        }\n+\n+        RepositoryInfo stoppedRepoInfo =\n+            repositoryStats.getRepositoryInfo().stopped(absoluteTimeSupplier.getAsLong());\n+        repositoryStats =\n+            new RepositoryStatsSnapshot(stoppedRepoInfo, repositoryStats.getRepositoryStats(), relativeTimeSupplier.getAsLong());\n+        return archive.add(repositoryStats);\n     }\n \n     synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODQxMg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465078412", "bodyText": "We should have some trace/debug logging here and in things like clear to allow us to debug issues in orchestrating users of this functionality.", "author": "original-brownbear", "createdAt": "2020-08-04T14:09:44Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n+            repositoryStats = repositoryStats.withStoppedRepo();\n+        }\n+        archive.add(repositoryStats);\n+        evict();\n+    }\n+\n+    synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n+        evict();\n+        return List.copyOf(archive);\n+    }\n+\n+    synchronized void clear() {\n+        archive.clear();\n+    }\n+\n+    private void evict() {\n+        Instant retentionDeadline = getRetentionDeadline();\n+        RepositoryStatsSnapshot stats;\n+        while ((stats = archive.peek()) != null && shouldEvict(stats, retentionDeadline)) {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\nindex 510f4d63038..b60d40dc743 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n\n@@ -21,26 +21,46 @@ package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.unit.TimeValue;\n \n-import java.time.Duration;\n-import java.time.Instant;\n import java.util.ArrayDeque;\n import java.util.Deque;\n import java.util.List;\n+import java.util.function.LongSupplier;\n \n public final class RepositoriesStatsArchive {\n     private final TimeValue retentionPeriod;\n+    private final int maxCapacity;\n+    private final LongSupplier relativeTimeSupplier;\n+    private final LongSupplier absoluteTimeSupplier;\n     private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n \n-    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+    public RepositoriesStatsArchive(TimeValue retentionPeriod,\n+                                    int maxCapacity,\n+                                    LongSupplier relativeTimeSupplier,\n+                                    LongSupplier absoluteTimeSupplier) {\n         this.retentionPeriod = retentionPeriod;\n+        this.maxCapacity = maxCapacity;\n+        this.relativeTimeSupplier = relativeTimeSupplier;\n+        this.absoluteTimeSupplier = absoluteTimeSupplier;\n     }\n \n-    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n-        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n-            repositoryStats = repositoryStats.withStoppedRepo();\n-        }\n-        archive.add(repositoryStats);\n+    /**\n+     * Archives the specified repository stats snapshot into the archive\n+     * if it's possible without violating the capacity constraints.\n+     *\n+     * @return {@code true} if the repository stats were archived, {@code false} otherwise.\n+     */\n+    synchronized boolean archive(RepositoryStatsSnapshot repositoryStats) {\n         evict();\n+\n+        if (archive.size() >= maxCapacity) {\n+            return false;\n+        }\n+\n+        RepositoryInfo stoppedRepoInfo =\n+            repositoryStats.getRepositoryInfo().stopped(absoluteTimeSupplier.getAsLong());\n+        repositoryStats =\n+            new RepositoryStatsSnapshot(stoppedRepoInfo, repositoryStats.getRepositoryStats(), relativeTimeSupplier.getAsLong());\n+        return archive.add(repositoryStats);\n     }\n \n     synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4MTU2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465081569", "bodyText": "This is strange, it seems we only ever archive the stats of just closed repos (but never actually do the withStoppedRepo call anywhere but here), seems this condition is just dead code and we always have to invoke withStoppedRepo?", "author": "original-brownbear", "createdAt": "2020-08-04T14:13:56Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\nindex 510f4d63038..b60d40dc743 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n\n@@ -21,26 +21,46 @@ package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.unit.TimeValue;\n \n-import java.time.Duration;\n-import java.time.Instant;\n import java.util.ArrayDeque;\n import java.util.Deque;\n import java.util.List;\n+import java.util.function.LongSupplier;\n \n public final class RepositoriesStatsArchive {\n     private final TimeValue retentionPeriod;\n+    private final int maxCapacity;\n+    private final LongSupplier relativeTimeSupplier;\n+    private final LongSupplier absoluteTimeSupplier;\n     private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n \n-    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+    public RepositoriesStatsArchive(TimeValue retentionPeriod,\n+                                    int maxCapacity,\n+                                    LongSupplier relativeTimeSupplier,\n+                                    LongSupplier absoluteTimeSupplier) {\n         this.retentionPeriod = retentionPeriod;\n+        this.maxCapacity = maxCapacity;\n+        this.relativeTimeSupplier = relativeTimeSupplier;\n+        this.absoluteTimeSupplier = absoluteTimeSupplier;\n     }\n \n-    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n-        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n-            repositoryStats = repositoryStats.withStoppedRepo();\n-        }\n-        archive.add(repositoryStats);\n+    /**\n+     * Archives the specified repository stats snapshot into the archive\n+     * if it's possible without violating the capacity constraints.\n+     *\n+     * @return {@code true} if the repository stats were archived, {@code false} otherwise.\n+     */\n+    synchronized boolean archive(RepositoryStatsSnapshot repositoryStats) {\n         evict();\n+\n+        if (archive.size() >= maxCapacity) {\n+            return false;\n+        }\n+\n+        RepositoryInfo stoppedRepoInfo =\n+            repositoryStats.getRepositoryInfo().stopped(absoluteTimeSupplier.getAsLong());\n+        repositoryStats =\n+            new RepositoryStatsSnapshot(stoppedRepoInfo, repositoryStats.getRepositoryStats(), relativeTimeSupplier.getAsLong());\n+        return archive.add(repositoryStats);\n     }\n \n     synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5MDQ4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465090485", "bodyText": "Why not just cache this in a field instead of container when we always build the same string from a constant value of the base path and container?", "author": "original-brownbear", "createdAt": "2020-08-04T14:24:50Z", "path": "plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java", "diffHunk": "@@ -134,4 +136,16 @@ protected ByteSizeValue chunkSize() {\n     public boolean isReadOnly() {\n         return readonly;\n     }\n+\n+    @Override\n+    protected String location() {\n+        BlobPath location = BlobPath.cleanPath();\n+\n+        location = location.add(container);\n+        for (String path : basePath()) {\n+            location = location.add(path);\n+        }\n+\n+        return location.buildAsString();", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java\nindex 90393db05b2..7b51c08629f 100644\n--- a/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java\n+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java\n\n@@ -136,16 +139,4 @@ public class AzureRepository extends MeteredBlobStoreRepository {\n     public boolean isReadOnly() {\n         return readonly;\n     }\n-\n-    @Override\n-    protected String location() {\n-        BlobPath location = BlobPath.cleanPath();\n-\n-        location = location.add(container);\n-        for (String path : basePath()) {\n-            location = location.add(path);\n-        }\n-\n-        return location.buildAsString();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEwNTA2NA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465105064", "bodyText": "Maybe it would be better for this to return the evicted stats so that consumers of the API can at least in the absence of IO issues with sending the response completely rule out races between closing a repo and calling this API?\nThat should be more helpful than the current empty response and as a side effect saves a new response type as well.", "author": "original-brownbear", "createdAt": "2020-08-04T14:44:23Z", "path": "x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportClearRepositoriesStatsArchiveAction.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.repositories.stats.action;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.nodes.TransportNodesAction;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public final class TransportClearRepositoriesStatsArchiveAction extends TransportNodesAction<\n+    ClearRepositoriesStatsArchiveRequest,\n+    ClearRepositoriesStatsArchiveResponse,", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02c5d93e02cb856f4b2cca5df4d2ea35a953e968", "chunk": "diff --git a/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportClearRepositoriesStatsArchiveAction.java b/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportClearRepositoriesStatsArchiveAction.java\nindex 73ae0e6d31b..0edbbfffb43 100644\n--- a/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportClearRepositoriesStatsArchiveAction.java\n+++ b/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportClearRepositoriesStatsArchiveAction.java\n\n@@ -13,8 +13,10 @@ import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.repositories.RepositoryStatsSnapshot;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportRequest;\n import org.elasticsearch.transport.TransportService;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMTY1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465111657", "bodyText": "Should this be a cluster setting?", "author": "original-brownbear", "createdAt": "2020-08-04T14:53:23Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java", "diffHunk": "@@ -89,6 +98,7 @@ public RepositoriesService(Settings settings, ClusterService clusterService, Tra\n             clusterService.addHighPriorityApplier(this);\n         }\n         this.verifyAction = new VerifyNodeRepositoryAction(transportService, clusterService, this);\n+        this.repositoriesStatsArchive = new RepositoriesStatsArchive(REPOSITORIES_STATS_ARCHIVE_RETENTION_PERIOD.get(settings));", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3OTk2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465579963", "bodyText": "I don't have a strong opinion about that, we can move the new settings to the cluster level if we think it would be better.", "author": "fcofdez", "createdAt": "2020-08-05T09:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMTY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\nindex 7dff66814d4..74d4434c499 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\n\n@@ -98,7 +101,10 @@ public class RepositoriesService extends AbstractLifecycleComponent implements C\n             clusterService.addHighPriorityApplier(this);\n         }\n         this.verifyAction = new VerifyNodeRepositoryAction(transportService, clusterService, this);\n-        this.repositoriesStatsArchive = new RepositoriesStatsArchive(REPOSITORIES_STATS_ARCHIVE_RETENTION_PERIOD.get(settings));\n+        this.repositoriesStatsArchive = new RepositoriesStatsArchive(REPOSITORIES_STATS_ARCHIVE_RETENTION_PERIOD.get(settings),\n+            REPOSITORIES_STATS_ARCHIVE_MAX_ARCHIVED_STATS.get(settings),\n+            threadPool::relativeTimeInMillis,\n+            threadPool::absoluteTimeInMillis);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMTg5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465111891", "bodyText": "Remove I guess?", "author": "original-brownbear", "createdAt": "2020-08-04T14:53:41Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -328,4 +328,17 @@ protected void doClose() {\n         }\n         super.doClose();\n     }\n+\n+    @Override\n+    protected String location() {\n+        logger.info(\"LOCATION {}\", bucket);", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java\nindex bb08bfad976..e80236e4501 100644\n--- a/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java\n+++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java\n\n@@ -328,17 +333,4 @@ class S3Repository extends MeteredBlobStoreRepository {\n         }\n         super.doClose();\n     }\n-\n-    @Override\n-    protected String location() {\n-        logger.info(\"LOCATION {}\", bucket);\n-        BlobPath location = BlobPath.cleanPath();\n-\n-        location = location.add(bucket);\n-        for (String path : basePath()) {\n-            location = location.add(path);\n-        }\n-\n-        return location.buildAsString();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExNjQ0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465116441", "bodyText": "NIT: This can probably just be a nested class of TransportRepositoriesStatsAction as it's only used there?\nSame goes for the clear request object.", "author": "original-brownbear", "createdAt": "2020-08-04T14:59:37Z", "path": "x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/RepositoriesNodeStatsRequest.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.repositories.stats.action;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.transport.TransportRequest;\n+\n+import java.io.IOException;\n+\n+final class RepositoriesNodeStatsRequest extends TransportRequest {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02c5d93e02cb856f4b2cca5df4d2ea35a953e968", "chunk": "diff --git a/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/RepositoriesNodeStatsRequest.java b/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/RepositoriesNodeStatsRequest.java\ndeleted file mode 100644\nindex e943efe807c..00000000000\n--- a/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/RepositoriesNodeStatsRequest.java\n+++ /dev/null\n\n@@ -1,20 +0,0 @@\n-/*\n- * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n- * or more contributor license agreements. Licensed under the Elastic License;\n- * you may not use this file except in compliance with the Elastic License.\n- */\n-\n-package org.elasticsearch.xpack.repositories.stats.action;\n-\n-import org.elasticsearch.common.io.stream.StreamInput;\n-import org.elasticsearch.transport.TransportRequest;\n-\n-import java.io.IOException;\n-\n-final class RepositoriesNodeStatsRequest extends TransportRequest {\n-    RepositoriesNodeStatsRequest() {}\n-\n-    RepositoriesNodeStatsRequest(StreamInput in) throws IOException {\n-        super(in);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEyMDgxMw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465120813", "bodyText": "Should we assert that we never have two RepositoryStatsSnapshot for the same repository ephemeral id in archive?", "author": "original-brownbear", "createdAt": "2020-08-04T15:05:53Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n+            repositoryStats = repositoryStats.withStoppedRepo();\n+        }\n+        archive.add(repositoryStats);", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\nindex 510f4d63038..b60d40dc743 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n\n@@ -21,26 +21,46 @@ package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.unit.TimeValue;\n \n-import java.time.Duration;\n-import java.time.Instant;\n import java.util.ArrayDeque;\n import java.util.Deque;\n import java.util.List;\n+import java.util.function.LongSupplier;\n \n public final class RepositoriesStatsArchive {\n     private final TimeValue retentionPeriod;\n+    private final int maxCapacity;\n+    private final LongSupplier relativeTimeSupplier;\n+    private final LongSupplier absoluteTimeSupplier;\n     private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n \n-    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+    public RepositoriesStatsArchive(TimeValue retentionPeriod,\n+                                    int maxCapacity,\n+                                    LongSupplier relativeTimeSupplier,\n+                                    LongSupplier absoluteTimeSupplier) {\n         this.retentionPeriod = retentionPeriod;\n+        this.maxCapacity = maxCapacity;\n+        this.relativeTimeSupplier = relativeTimeSupplier;\n+        this.absoluteTimeSupplier = absoluteTimeSupplier;\n     }\n \n-    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n-        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n-            repositoryStats = repositoryStats.withStoppedRepo();\n-        }\n-        archive.add(repositoryStats);\n+    /**\n+     * Archives the specified repository stats snapshot into the archive\n+     * if it's possible without violating the capacity constraints.\n+     *\n+     * @return {@code true} if the repository stats were archived, {@code false} otherwise.\n+     */\n+    synchronized boolean archive(RepositoryStatsSnapshot repositoryStats) {\n         evict();\n+\n+        if (archive.size() >= maxCapacity) {\n+            return false;\n+        }\n+\n+        RepositoryInfo stoppedRepoInfo =\n+            repositoryStats.getRepositoryInfo().stopped(absoluteTimeSupplier.getAsLong());\n+        repositoryStats =\n+            new RepositoryStatsSnapshot(stoppedRepoInfo, repositoryStats.getRepositoryStats(), relativeTimeSupplier.getAsLong());\n+        return archive.add(repositoryStats);\n     }\n \n     synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEyMzI3MA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465123270", "bodyText": "The logic here assumes that archive contents are perfectly ordered by timestamp. I think we can't make that assumption with the system clock and absolute timestamps can we? Also I guess we could have two entries within the same millisecond (more of a test stability concern)?", "author": "original-brownbear", "createdAt": "2020-08-04T15:09:21Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.unit.TimeValue;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+public final class RepositoriesStatsArchive {\n+    private final TimeValue retentionPeriod;\n+    private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n+\n+    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+        this.retentionPeriod = retentionPeriod;\n+    }\n+\n+    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n+        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n+            repositoryStats = repositoryStats.withStoppedRepo();\n+        }\n+        archive.add(repositoryStats);\n+        evict();\n+    }\n+\n+    synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n+        evict();\n+        return List.copyOf(archive);\n+    }\n+\n+    synchronized void clear() {\n+        archive.clear();\n+    }\n+\n+    private void evict() {\n+        Instant retentionDeadline = getRetentionDeadline();\n+        RepositoryStatsSnapshot stats;\n+        while ((stats = archive.peek()) != null && shouldEvict(stats, retentionDeadline)) {", "originalCommit": "f71fabbf109a52d46c87f76d4609b6b1f720f065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "767edd68fac64acef60fef76138f57ef12a79409", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\nindex 510f4d63038..b60d40dc743 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesStatsArchive.java\n\n@@ -21,26 +21,46 @@ package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.unit.TimeValue;\n \n-import java.time.Duration;\n-import java.time.Instant;\n import java.util.ArrayDeque;\n import java.util.Deque;\n import java.util.List;\n+import java.util.function.LongSupplier;\n \n public final class RepositoriesStatsArchive {\n     private final TimeValue retentionPeriod;\n+    private final int maxCapacity;\n+    private final LongSupplier relativeTimeSupplier;\n+    private final LongSupplier absoluteTimeSupplier;\n     private final Deque<RepositoryStatsSnapshot> archive = new ArrayDeque<>();\n \n-    RepositoriesStatsArchive(TimeValue retentionPeriod) {\n+    public RepositoriesStatsArchive(TimeValue retentionPeriod,\n+                                    int maxCapacity,\n+                                    LongSupplier relativeTimeSupplier,\n+                                    LongSupplier absoluteTimeSupplier) {\n         this.retentionPeriod = retentionPeriod;\n+        this.maxCapacity = maxCapacity;\n+        this.relativeTimeSupplier = relativeTimeSupplier;\n+        this.absoluteTimeSupplier = absoluteTimeSupplier;\n     }\n \n-    synchronized void archive(RepositoryStatsSnapshot repositoryStats) {\n-        if (repositoryStats.getRepositoryInfo().isStopped() == false) {\n-            repositoryStats = repositoryStats.withStoppedRepo();\n-        }\n-        archive.add(repositoryStats);\n+    /**\n+     * Archives the specified repository stats snapshot into the archive\n+     * if it's possible without violating the capacity constraints.\n+     *\n+     * @return {@code true} if the repository stats were archived, {@code false} otherwise.\n+     */\n+    synchronized boolean archive(RepositoryStatsSnapshot repositoryStats) {\n         evict();\n+\n+        if (archive.size() >= maxCapacity) {\n+            return false;\n+        }\n+\n+        RepositoryInfo stoppedRepoInfo =\n+            repositoryStats.getRepositoryInfo().stopped(absoluteTimeSupplier.getAsLong());\n+        repositoryStats =\n+            new RepositoryStatsSnapshot(stoppedRepoInfo, repositoryStats.getRepositoryStats(), relativeTimeSupplier.getAsLong());\n+        return archive.add(repositoryStats);\n     }\n \n     synchronized List<RepositoryStatsSnapshot> getArchivedStats() {\n"}}, {"oid": "767edd68fac64acef60fef76138f57ef12a79409", "url": "https://github.com/elastic/elasticsearch/commit/767edd68fac64acef60fef76138f57ef12a79409", "message": "Address first round of review comments", "committedDate": "2020-08-04T19:37:00Z", "type": "commit"}, {"oid": "20a1dfe0d09ef7e4c189618cdfb8301eee8d0336", "url": "https://github.com/elastic/elasticsearch/commit/20a1dfe0d09ef7e4c189618cdfb8301eee8d0336", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-04T19:37:20Z", "type": "commit"}, {"oid": "02c5d93e02cb856f4b2cca5df4d2ea35a953e968", "url": "https://github.com/elastic/elasticsearch/commit/02c5d93e02cb856f4b2cca5df4d2ea35a953e968", "message": "Simplify TransportActions and return repositories stats during archive\nclearing", "committedDate": "2020-08-05T08:58:15Z", "type": "commit"}, {"oid": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "url": "https://github.com/elastic/elasticsearch/commit/a3ce6347f082b3c9e8233314ee971e1a670da5ce", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-05T08:58:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNzMwMg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465637302", "bodyText": "Can be long?", "author": "original-brownbear", "createdAt": "2020-08-05T10:46:54Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public final class RepositoryInfo implements Writeable, ToXContentFragment {\n+    public final String ephemeralId;\n+    public final String name;\n+    public final String type;\n+    public final String location;\n+    public final long startedAt;\n+    @Nullable\n+    public final Long stoppedAt;\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt) {\n+        this(ephemeralId, name, type, location, startedAt, null);\n+    }\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt,", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4bb846c0979abb0cdd840f95c6587319af55f1e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java b/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\nindex c41f5bfe74d..2361767dcad 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\n\n@@ -20,6 +20,7 @@\n package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.io.stream.Writeable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzODIwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465638205", "bodyText": "NIT: No need for Objects.equals( anywhere but with stoppedAt?", "author": "original-brownbear", "createdAt": "2020-08-05T10:48:47Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public final class RepositoryInfo implements Writeable, ToXContentFragment {\n+    public final String ephemeralId;\n+    public final String name;\n+    public final String type;\n+    public final String location;\n+    public final long startedAt;\n+    @Nullable\n+    public final Long stoppedAt;\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt) {\n+        this(ephemeralId, name, type, location, startedAt, null);\n+    }\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt,\n+                          @Nullable Long stoppedAt) {\n+        this.ephemeralId = ephemeralId;\n+        this.name = name;\n+        this.type = type;\n+        this.location = location;\n+        this.startedAt = startedAt;\n+        if (stoppedAt != null && startedAt > stoppedAt) {\n+            throw new IllegalArgumentException(\"createdAt must be before or equal to stoppedAt\");\n+        }\n+        this.stoppedAt = stoppedAt;\n+    }\n+\n+    public RepositoryInfo(StreamInput in) throws IOException {\n+        this.ephemeralId = in.readString();\n+        this.name = in.readString();\n+        this.type = in.readString();\n+        this.location = in.readString();\n+        this.startedAt = in.readLong();\n+        this.stoppedAt = in.readOptionalLong();\n+    }\n+\n+    public RepositoryInfo stopped(long stoppedAt) {\n+        assert isStopped() == false : \"The repository is already stopped\";\n+\n+        return new RepositoryInfo(ephemeralId, name, type, location, startedAt, stoppedAt);\n+    }\n+\n+    public boolean isStopped() {\n+        return stoppedAt != null;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(ephemeralId);\n+        out.writeString(name);\n+        out.writeString(type);\n+        out.writeString(location);\n+        out.writeLong(startedAt);\n+        out.writeOptionalLong(stoppedAt);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.field(\"repository_name\", name);\n+        builder.field(\"repository_type\", type);\n+        builder.field(\"repository_location\", location);\n+        builder.field(\"repository_ephemeral_id\", ephemeralId);\n+        builder.field(\"repository_started_at\", startedAt);\n+        if (stoppedAt != null) {\n+            builder.field(\"repository_stopped_at\", stoppedAt);\n+        }\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        RepositoryInfo that = (RepositoryInfo) o;\n+        return Objects.equals(ephemeralId, that.ephemeralId) &&", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4bb846c0979abb0cdd840f95c6587319af55f1e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java b/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\nindex c41f5bfe74d..2361767dcad 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\n\n@@ -20,6 +20,7 @@\n package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.io.stream.Writeable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzODc2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465638767", "bodyText": "Might as well use Strings.toString(this) here?", "author": "original-brownbear", "createdAt": "2020-08-05T10:49:45Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public final class RepositoryInfo implements Writeable, ToXContentFragment {\n+    public final String ephemeralId;\n+    public final String name;\n+    public final String type;\n+    public final String location;\n+    public final long startedAt;\n+    @Nullable\n+    public final Long stoppedAt;\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt) {\n+        this(ephemeralId, name, type, location, startedAt, null);\n+    }\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          Long startedAt,\n+                          @Nullable Long stoppedAt) {\n+        this.ephemeralId = ephemeralId;\n+        this.name = name;\n+        this.type = type;\n+        this.location = location;\n+        this.startedAt = startedAt;\n+        if (stoppedAt != null && startedAt > stoppedAt) {\n+            throw new IllegalArgumentException(\"createdAt must be before or equal to stoppedAt\");\n+        }\n+        this.stoppedAt = stoppedAt;\n+    }\n+\n+    public RepositoryInfo(StreamInput in) throws IOException {\n+        this.ephemeralId = in.readString();\n+        this.name = in.readString();\n+        this.type = in.readString();\n+        this.location = in.readString();\n+        this.startedAt = in.readLong();\n+        this.stoppedAt = in.readOptionalLong();\n+    }\n+\n+    public RepositoryInfo stopped(long stoppedAt) {\n+        assert isStopped() == false : \"The repository is already stopped\";\n+\n+        return new RepositoryInfo(ephemeralId, name, type, location, startedAt, stoppedAt);\n+    }\n+\n+    public boolean isStopped() {\n+        return stoppedAt != null;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(ephemeralId);\n+        out.writeString(name);\n+        out.writeString(type);\n+        out.writeString(location);\n+        out.writeLong(startedAt);\n+        out.writeOptionalLong(stoppedAt);\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.field(\"repository_name\", name);\n+        builder.field(\"repository_type\", type);\n+        builder.field(\"repository_location\", location);\n+        builder.field(\"repository_ephemeral_id\", ephemeralId);\n+        builder.field(\"repository_started_at\", startedAt);\n+        if (stoppedAt != null) {\n+            builder.field(\"repository_stopped_at\", stoppedAt);\n+        }\n+        return builder;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        RepositoryInfo that = (RepositoryInfo) o;\n+        return Objects.equals(ephemeralId, that.ephemeralId) &&\n+            Objects.equals(name, that.name) &&\n+            Objects.equals(type, that.type) &&\n+            Objects.equals(location, that.location) &&\n+            Objects.equals(startedAt, that.startedAt) &&\n+            Objects.equals(stoppedAt, that.stoppedAt);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(ephemeralId, name, type, location, startedAt, stoppedAt);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RepositoryInfo{\" +", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4bb846c0979abb0cdd840f95c6587319af55f1e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java b/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\nindex c41f5bfe74d..2361767dcad 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\n\n@@ -20,6 +20,7 @@\n package org.elasticsearch.repositories;\n \n import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.io.stream.Writeable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTI0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465639243", "bodyText": "NIT: no need for  Objects.equals(, neither of these is ever null", "author": "original-brownbear", "createdAt": "2020-08-05T10:50:38Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryStats.java", "diffHunk": "@@ -55,4 +56,24 @@ public RepositoryStats merge(RepositoryStats otherStats) {\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeMap(requestCounts, StreamOutput::writeString, StreamOutput::writeLong);\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        RepositoryStats that = (RepositoryStats) o;\n+        return Objects.equals(requestCounts, that.requestCounts);", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4bb846c0979abb0cdd840f95c6587319af55f1e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoryStats.java b/server/src/main/java/org/elasticsearch/repositories/RepositoryStats.java\nindex e4fe80510a5..d6fc680946b 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoryStats.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoryStats.java\n\n@@ -62,7 +62,7 @@ public class RepositoryStats implements Writeable {\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n         RepositoryStats that = (RepositoryStats) o;\n-        return Objects.equals(requestCounts, that.requestCounts);\n+        return requestCounts.equals(that.requestCounts);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2NjQ2OA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465666468", "bodyText": "Should we remove org.elasticsearch.xpack.searchablesnapshots.rest.RestRepositoryStatsAction and associated logic now that we have this in this PR?", "author": "original-brownbear", "createdAt": "2020-08-05T11:42:55Z", "path": "x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportRepositoriesStatsAction.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.repositories.stats.action;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.nodes.TransportNodesAction;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.repositories.RepositoriesService;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.transport.TransportService;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public final class TransportRepositoriesStatsAction extends TransportNodesAction<", "originalCommit": "a3ce6347f082b3c9e8233314ee971e1a670da5ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3ODMxNw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465678317", "bodyText": "We can remove it in a separate PR if we think it won't be useful anymore, wdyt?", "author": "fcofdez", "createdAt": "2020-08-05T12:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2NjQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3ODg1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r465678859", "bodyText": "Fine as well :) just figured we shouldn't forget it.", "author": "original-brownbear", "createdAt": "2020-08-05T12:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2NjQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "d8aea38b0403d0ce0b99485ede743c5fb7d00461", "chunk": "diff --git a/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportRepositoriesStatsAction.java b/x-pack/plugin/repositories-metering-api/src/main/java/org/elasticsearch/xpack/repositories/metrics/action/TransportRepositoriesStatsAction.java\nsimilarity index 67%\nrename from x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportRepositoriesStatsAction.java\nrename to x-pack/plugin/repositories-metering-api/src/main/java/org/elasticsearch/xpack/repositories/metrics/action/TransportRepositoriesStatsAction.java\nindex 35346cdc724..7e0092dcb62 100644\n--- a/x-pack/plugin/repositories-stats/src/main/java/org/elasticsearch/xpack/repositories/stats/action/TransportRepositoriesStatsAction.java\n+++ b/x-pack/plugin/repositories-metering-api/src/main/java/org/elasticsearch/xpack/repositories/metrics/action/TransportRepositoriesStatsAction.java\n\n@@ -4,7 +4,7 @@\n  * you may not use this file except in compliance with the Elastic License.\n  */\n \n-package org.elasticsearch.xpack.repositories.stats.action;\n+package org.elasticsearch.xpack.repositories.metrics.action;\n \n import org.elasticsearch.action.FailedNodeException;\n import org.elasticsearch.action.support.ActionFilters;\n"}}, {"oid": "158ad067e95df1dbdbaaf9e5711ee9d35260d890", "url": "https://github.com/elastic/elasticsearch/commit/158ad067e95df1dbdbaaf9e5711ee9d35260d890", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-10T12:10:52Z", "type": "commit"}, {"oid": "b4bb846c0979abb0cdd840f95c6587319af55f1e", "url": "https://github.com/elastic/elasticsearch/commit/b4bb846c0979abb0cdd840f95c6587319af55f1e", "message": "Keep track of cluster version on RepositoryStatsSnapshot.\n\nAllow clearing up to a particular cluster version.", "committedDate": "2020-08-10T16:53:12Z", "type": "commit"}, {"oid": "81b2bf7cf3adb277fedd5b4eb77e71bf485e2796", "url": "https://github.com/elastic/elasticsearch/commit/81b2bf7cf3adb277fedd5b4eb77e71bf485e2796", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-10T16:54:02Z", "type": "commit"}, {"oid": "d0a5995a63e5d617c0a2ee1a7512a84c3c26df60", "url": "https://github.com/elastic/elasticsearch/commit/d0a5995a63e5d617c0a2ee1a7512a84c3c26df60", "message": "Fix test", "committedDate": "2020-08-11T08:25:37Z", "type": "commit"}, {"oid": "278eaa7181c7c2f6fc98b50570b0d864dd47e6be", "url": "https://github.com/elastic/elasticsearch/commit/278eaa7181c7c2f6fc98b50570b0d864dd47e6be", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-11T08:25:53Z", "type": "commit"}, {"oid": "d8aea38b0403d0ce0b99485ede743c5fb7d00461", "url": "https://github.com/elastic/elasticsearch/commit/d8aea38b0403d0ce0b99485ede743c5fb7d00461", "message": "Rename repositories-stats to repositories-metering", "committedDate": "2020-08-11T12:19:52Z", "type": "commit"}, {"oid": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "url": "https://github.com/elastic/elasticsearch/commit/7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "message": "Fix styleCheck", "committedDate": "2020-08-11T12:29:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4MDA5MA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r468580090", "bodyText": "I'm not really sure if this is a good idea. This is used to populate the clusterVersion field for the active repositories stats. An alternative would be not populating that field for the active repositories.", "author": "fcofdez", "createdAt": "2020-08-11T13:30:34Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java", "diffHunk": "@@ -75,6 +86,9 @@\n \n     private final Map<String, Repository> internalRepositories = ConcurrentCollections.newConcurrentMap();\n     private volatile Map<String, Repository> repositories = Collections.emptyMap();\n+    private final RepositoriesStatsArchive repositoriesStatsArchive;\n+\n+    private volatile long lastKnownClusterVersion;", "originalCommit": "7e4ab0ca9f4eacc96cfc8585448f96e801e5f519", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NTIyMw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r469145223", "bodyText": "This seems weird indeed. Technically I guess there is a relationship between the CS version and the stats, this is pretty unintuitive. Can't we simply increment a counter whenever we archive and clear any stats instead and use that as our logical time stamp for example?", "author": "original-brownbear", "createdAt": "2020-08-12T09:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4MDA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d7020cb2e3aef959d1976b0954569acc3b12f561", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\nindex 74559ec3c2e..4da9ecfcf7b 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\n\n@@ -88,7 +90,6 @@ public class RepositoriesService extends AbstractLifecycleComponent implements C\n     private volatile Map<String, Repository> repositories = Collections.emptyMap();\n     private final RepositoriesStatsArchive repositoriesStatsArchive;\n \n-    private volatile long lastKnownClusterVersion;\n \n     public RepositoriesService(Settings settings, ClusterService clusterService, TransportService transportService,\n                                Map<String, Repository.Factory> typesRegistry, Map<String, Repository.Factory> internalTypesRegistry,\n"}}, {"oid": "47c18fab856095c37bbd2b5fac2006083cf63154", "url": "https://github.com/elastic/elasticsearch/commit/47c18fab856095c37bbd2b5fac2006083cf63154", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-18T08:11:33Z", "type": "commit"}, {"oid": "d7020cb2e3aef959d1976b0954569acc3b12f561", "url": "https://github.com/elastic/elasticsearch/commit/d7020cb2e3aef959d1976b0954569acc3b12f561", "message": "Rename operation names on repositories metering", "committedDate": "2020-08-18T11:54:47Z", "type": "commit"}, {"oid": "ddc2cc19e54765697fa2be4994db79e9a3416075", "url": "https://github.com/elastic/elasticsearch/commit/ddc2cc19e54765697fa2be4994db79e9a3416075", "message": "Fix tests", "committedDate": "2020-08-18T15:09:35Z", "type": "commit"}, {"oid": "1f93514257cf6d85adec4dd5d11040d8b17cb756", "url": "https://github.com/elastic/elasticsearch/commit/1f93514257cf6d85adec4dd5d11040d8b17cb756", "message": "Improve docs", "committedDate": "2020-08-18T15:10:02Z", "type": "commit"}, {"oid": "fdce53fbdcb992c5c043fc6571a20104adddf2ae", "url": "https://github.com/elastic/elasticsearch/commit/fdce53fbdcb992c5c043fc6571a20104adddf2ae", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-18T15:10:21Z", "type": "commit"}, {"oid": "ee0c47b5ced68f9753d6cfec87b233194bdcc515", "url": "https://github.com/elastic/elasticsearch/commit/ee0c47b5ced68f9753d6cfec87b233194bdcc515", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-20T08:31:12Z", "type": "commit"}, {"oid": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "url": "https://github.com/elastic/elasticsearch/commit/2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-08-31T08:58:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzA0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r480187047", "bodyText": "should this be >= in case we do not use super-fine-grained time resolution?", "author": "ywelsch", "createdAt": "2020-08-31T14:56:50Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.repositories;\n+\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public final class RepositoryInfo implements Writeable, ToXContentFragment {\n+    public final String ephemeralId;\n+    public final String name;\n+    public final String type;\n+    public final String location;\n+    public final long startedAt;\n+    @Nullable\n+    public final Long stoppedAt;\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          long startedAt) {\n+        this(ephemeralId, name, type, location, startedAt, null);\n+    }\n+\n+    public RepositoryInfo(String ephemeralId,\n+                          String name,\n+                          String type,\n+                          String location,\n+                          long startedAt,\n+                          @Nullable Long stoppedAt) {\n+        this.ephemeralId = ephemeralId;\n+        this.name = name;\n+        this.type = type;\n+        this.location = location;\n+        this.startedAt = startedAt;\n+        if (stoppedAt != null && startedAt > stoppedAt) {", "originalCommit": "2374fd109c81b609af9bcfb1f7c5e59c63350c5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAxMjU3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482012575", "bodyText": "This condition is to validate startedAt is less or equals to stoppedAt failing otherwise.", "author": "fcofdez", "createdAt": "2020-09-02T11:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "449069a77d017fd1df3c90c2f06fe322706773d5", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java b/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\nindex 2361767dcad..8d2612ba70b 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoryInfo.java\n\n@@ -28,13 +28,14 @@ import org.elasticsearch.common.xcontent.ToXContentFragment;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import java.io.IOException;\n+import java.util.Map;\n import java.util.Objects;\n \n public final class RepositoryInfo implements Writeable, ToXContentFragment {\n     public final String ephemeralId;\n     public final String name;\n     public final String type;\n-    public final String location;\n+    public final Map<String, String> location;\n     public final long startedAt;\n     @Nullable\n     public final Long stoppedAt;\n"}}, {"oid": "449069a77d017fd1df3c90c2f06fe322706773d5", "url": "https://github.com/elastic/elasticsearch/commit/449069a77d017fd1df3c90c2f06fe322706773d5", "message": "Address review comments", "committedDate": "2020-09-02T10:24:31Z", "type": "commit"}, {"oid": "413472a6a8279be314574ba2321a8b9921befd9e", "url": "https://github.com/elastic/elasticsearch/commit/413472a6a8279be314574ba2321a8b9921befd9e", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-02T10:24:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNzE0OA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482807148", "bodyText": "Should this be changed to match PUT /upload/storage/v1/b/*uploadType=resumable*? AFAICS, resumable sessions always identify sub-requests that way? Simpler than that isLastPart stuff", "author": "ywelsch", "createdAt": "2020-09-03T08:38:24Z", "path": "plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java", "diffHunk": "@@ -310,15 +310,15 @@ protected boolean canFailRequest(final HttpExchange exchange) {\n         @Override\n         public void maybeTrack(final String request, Headers requestHeaders) {\n             if (Regex.simpleMatch(\"GET /storage/v1/b/*/o/*\", request)) {\n-                trackRequest(\"storage.objects.get\");\n+                trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"GET /storage/v1/b/*/o*\", request)) {\n-                trackRequest(\"storage.objects.list\");\n+                trackRequest(\"ListObjects\");\n             } else if (Regex.simpleMatch(\"GET /download/storage/v1/b/*\", request)) {\n-                trackRequest(\"storage.objects.get\");\n+                trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"PUT /upload/storage/v1/b/*\", request) && isLastPart(requestHeaders)) {", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1MTIzOA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482851238", "bodyText": "Resumable uploads are billed as a single operation, in this case we're only tracking the last operation.", "author": "fcofdez", "createdAt": "2020-09-03T09:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNzE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1MjEyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482852125", "bodyText": "ok, let's add a comment to that effect. Still allows us to match on *uploadType=resumable* here?", "author": "ywelsch", "createdAt": "2020-09-03T09:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNzE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "bc94df15bc86867c11069e56872ee95fe05dcde3", "chunk": "diff --git a/plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java b/plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java\nindex 47b179ba472..34eda606d39 100644\n--- a/plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java\n+++ b/plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java\n\n@@ -312,11 +312,14 @@ public class GoogleCloudStorageBlobStoreRepositoryTests extends ESMockAPIBasedRe\n             if (Regex.simpleMatch(\"GET /storage/v1/b/*/o/*\", request)) {\n                 trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"GET /storage/v1/b/*/o*\", request)) {\n-                trackRequest(\"ListObjects\");\n+                trackRequest(\"ListObjGects\");\n             } else if (Regex.simpleMatch(\"GET /download/storage/v1/b/*\", request)) {\n                 trackRequest(\"GetObject\");\n-            } else if (Regex.simpleMatch(\"PUT /upload/storage/v1/b/*\", request) && isLastPart(requestHeaders)) {\n-                trackRequest(\"ResumableInsertObject\");\n+            } else if (Regex.simpleMatch(\"PUT /upload/storage/v1/b/*uploadType=resumable*\", request) && isLastPart(requestHeaders)) {\n+                // Resumable uploads are billed as a single operation, that's the reason we're tracking\n+                // the request only when it's the last part.\n+                // See https://cloud.google.com/storage/docs/resumable-uploads#introduction\n+                trackRequest(\"InsertObject\");\n             } else if (Regex.simpleMatch(\"POST /upload/storage/v1/b/*uploadType=multipart*\", request)) {\n                 trackRequest(\"InsertObject\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwOTE1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482809152", "bodyText": "Should we just expose the setting from the user? I'm not sure if we want to do some custom sanitation using buildBasePath here.", "author": "ywelsch", "createdAt": "2020-09-03T08:41:42Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -234,6 +235,11 @@\n                 storageClass);\n     }\n \n+    private static Map<String, String> buildLocation(RepositoryMetadata metadata) {\n+        return Map.of(\"base_path\", buildBasePath(metadata).buildAsString(),", "originalCommit": "449069a77d017fd1df3c90c2f06fe322706773d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxOTUzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482919539", "bodyText": "is there any harm on sanitizing the user setting? it deals with empty and null settings", "author": "fcofdez", "createdAt": "2020-09-03T11:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwOTE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyOTkwMA==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r482929900", "bodyText": "I would expect an external system to use this to match whatever configuration it set on the cluster (in order to identify the repo). Adapting this in any way feels trappy to me. On a related note (but not relevant for this PR), we should look at these buildBasePath methods (which are all slightly different based on repo type, and a source of trappiness with these odd rules that they implement).", "author": "ywelsch", "createdAt": "2020-09-03T12:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwOTE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e53322b42232e58b63ce6c4837e39e83cf699a54", "chunk": "diff --git a/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java\nindex 7717a9e0f5f..802957e6681 100644\n--- a/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java\n+++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java\n\n@@ -236,7 +236,7 @@ class S3Repository extends MeteredBlobStoreRepository {\n     }\n \n     private static Map<String, String> buildLocation(RepositoryMetadata metadata) {\n-        return Map.of(\"base_path\", buildBasePath(metadata).buildAsString(),\n+        return Map.of(\"base_path\", BASE_PATH_SETTING.get(metadata.settings()),\n             \"bucket\", BUCKET_SETTING.get(metadata.settings()));\n     }\n \n"}}, {"oid": "bc94df15bc86867c11069e56872ee95fe05dcde3", "url": "https://github.com/elastic/elasticsearch/commit/bc94df15bc86867c11069e56872ee95fe05dcde3", "message": "Address review comments", "committedDate": "2020-09-03T11:21:29Z", "type": "commit"}, {"oid": "e53322b42232e58b63ce6c4837e39e83cf699a54", "url": "https://github.com/elastic/elasticsearch/commit/e53322b42232e58b63ce6c4837e39e83cf699a54", "message": "Use raw base_path for Repository metering API", "committedDate": "2020-09-03T12:35:28Z", "type": "commit"}, {"oid": "1b798288e3947f280e6acb8d352fa4c8cf2974c1", "url": "https://github.com/elastic/elasticsearch/commit/1b798288e3947f280e6acb8d352fa4c8cf2974c1", "message": "minor corrections", "committedDate": "2020-09-04T09:18:19Z", "type": "commit"}, {"oid": "79cb0f1fa75f2b2e5fbc3e665d1a912ba6eb1aa1", "url": "https://github.com/elastic/elasticsearch/commit/79cb0f1fa75f2b2e5fbc3e665d1a912ba6eb1aa1", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-04T09:18:35Z", "type": "commit"}, {"oid": "f9fa36984ab63bbdc57785dd582d13953dc80f58", "url": "https://github.com/elastic/elasticsearch/commit/f9fa36984ab63bbdc57785dd582d13953dc80f58", "message": "Minor correction", "committedDate": "2020-09-04T09:36:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3OTc0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r483579742", "bodyText": "This is the wrong name? How is it passing tests?", "author": "ywelsch", "createdAt": "2020-09-04T12:19:06Z", "path": "plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java", "diffHunk": "@@ -312,11 +312,14 @@ public void maybeTrack(final String request, Headers requestHeaders) {\n             if (Regex.simpleMatch(\"GET /storage/v1/b/*/o/*\", request)) {\n                 trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"GET /storage/v1/b/*/o*\", request)) {\n-                trackRequest(\"ListObjects\");\n+                trackRequest(\"ListObjGects\");", "originalCommit": "bc94df15bc86867c11069e56872ee95fe05dcde3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNDgxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60371#discussion_r483634811", "bodyText": "Good catch! The test was expecting some predefined keys and using getOrDefault(key, 0) \ud83e\udd26  instead of just comparing the mock and RepositoryStats maps. I've changed it, it should catch those failures in the future.", "author": "fcofdez", "createdAt": "2020-09-04T14:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3OTc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c3a1f3ac616e0be6861f0c973cb51b495d29bf71", "chunk": "diff --git a/plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java b/plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java\nindex 34eda606d39..5d193706c8d 100644\n--- a/plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java\n+++ b/plugins/repository-gcs/src/internalClusterTest/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageBlobStoreRepositoryTests.java\n\n@@ -312,7 +306,7 @@ public class GoogleCloudStorageBlobStoreRepositoryTests extends ESMockAPIBasedRe\n             if (Regex.simpleMatch(\"GET /storage/v1/b/*/o/*\", request)) {\n                 trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"GET /storage/v1/b/*/o*\", request)) {\n-                trackRequest(\"ListObjGects\");\n+                trackRequest(\"ListObjects\");\n             } else if (Regex.simpleMatch(\"GET /download/storage/v1/b/*\", request)) {\n                 trackRequest(\"GetObject\");\n             } else if (Regex.simpleMatch(\"PUT /upload/storage/v1/b/*uploadType=resumable*\", request) && isLastPart(requestHeaders)) {\n"}}, {"oid": "c3a1f3ac616e0be6861f0c973cb51b495d29bf71", "url": "https://github.com/elastic/elasticsearch/commit/c3a1f3ac616e0be6861f0c973cb51b495d29bf71", "message": "Fix testRequestStats. Mention uploads tracked on GCS InsertObject.", "committedDate": "2020-09-04T13:52:12Z", "type": "commit"}, {"oid": "d1425891fdc725f2b56dfbd8f1702a379587a67c", "url": "https://github.com/elastic/elasticsearch/commit/d1425891fdc725f2b56dfbd8f1702a379587a67c", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-04T14:07:31Z", "type": "commit"}, {"oid": "bbc23c18204f39ab16fcb7248bf09880ec432155", "url": "https://github.com/elastic/elasticsearch/commit/bbc23c18204f39ab16fcb7248bf09880ec432155", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-07T08:33:20Z", "type": "commit"}, {"oid": "a7b2ef88d1b4581061fb4fdfa6f15b8d815d7bd2", "url": "https://github.com/elastic/elasticsearch/commit/a7b2ef88d1b4581061fb4fdfa6f15b8d815d7bd2", "message": "Minor corrections", "committedDate": "2020-09-07T09:09:08Z", "type": "commit"}, {"oid": "b97f5f3c4559bee69a66a6af7163346113d75d6d", "url": "https://github.com/elastic/elasticsearch/commit/b97f5f3c4559bee69a66a6af7163346113d75d6d", "message": "Merge remote-tracking branch 'origin/master' into metering-api-new", "committedDate": "2020-09-07T13:30:53Z", "type": "commit"}, {"oid": "6df275577f8ea0fe1136ccdb052e24cde773dbfe", "url": "https://github.com/elastic/elasticsearch/commit/6df275577f8ea0fe1136ccdb052e24cde773dbfe", "message": "Merge branch 'master' into metering-api-new", "committedDate": "2020-09-07T15:27:14Z", "type": "commit"}, {"oid": "3e2752bbb8c95fdd262d2dd5e42b8b4113856e36", "url": "https://github.com/elastic/elasticsearch/commit/3e2752bbb8c95fdd262d2dd5e42b8b4113856e36", "message": "Merge branch 'master' into metering-api-new", "committedDate": "2020-09-08T07:48:09Z", "type": "commit"}]}