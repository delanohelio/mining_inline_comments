{"pr_number": 51330, "pr_title": "[ML][Inference] add tags url param to GET", "pr_createdAt": "2020-01-22T19:26:42Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51330", "timeline": [{"oid": "941cb489c7bc385739933a91a1c5d6a610407008", "url": "https://github.com/elastic/elasticsearch/commit/941cb489c7bc385739933a91a1c5d6a610407008", "message": "[ML][Inference] add tags url param to GET", "committedDate": "2020-01-22T19:23:26Z", "type": "commit"}, {"oid": "260fa074864847fd9db3990aa0aacb6fecc64b6b", "url": "https://github.com/elastic/elasticsearch/commit/260fa074864847fd9db3990aa0aacb6fecc64b6b", "message": "removing unused imports", "committedDate": "2020-01-22T19:50:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5NjY0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51330#discussion_r370096645", "bodyText": "Why do we need to verify that it has all the tags?\nIsn't the bool query with tag filters enough?", "author": "przemekwitek", "createdAt": "2020-01-23T12:46:17Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java", "diffHunk": "@@ -404,13 +414,23 @@ public void expandIds(String idExpression,\n                 indicesOptions.expandWildcardsClosed(),\n                 indicesOptions))\n             .source(sourceBuilder);\n+        Set<String> foundResourceIds = new LinkedHashSet<>();\n+        if (tags.isEmpty()) {\n+            foundResourceIds.addAll(matchedResourceIds(tokens));\n+        } else {\n+            for(String resourceId : matchedResourceIds(tokens)) {\n+                // Does the model as a resource have all the tags?\n+                if (Sets.newHashSet(loadModelFromResource(resourceId, true).getTags()).containsAll(tags)) {", "originalCommit": "260fa074864847fd9db3990aa0aacb6fecc64b6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwMjI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/51330#discussion_r370102250", "bodyText": "no, as that is an or and the decision was to make it an and", "author": "benwtrent", "createdAt": "2020-01-23T12:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5NjY0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5NzczNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51330#discussion_r370097735", "bodyText": "Alternatively you could drop this filter part altogether if there are no tags.\nOne more thought: would the following query be equivalent to what you have right now:\nQueryBuilder query = QueryBuilders.boolQuery()\n    .filter(buildQueryIdExpressionQuery(tokens, TrainedModelConfig.MODEL_ID.getPreferredName())));\nfor (String tag : tags) {\n  query.filter(QueryBuilders.termQuery(TrainedModelConfig.TAGS.getPreferredName(), tag));\n}\n\n?\nThis way we can get rid of the ternary operator ? altogether.", "author": "przemekwitek", "createdAt": "2020-01-23T12:48:53Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java", "diffHunk": "@@ -381,14 +381,24 @@ public void deleteTrainedModel(String modelId, ActionListener<Boolean> listener)\n     public void expandIds(String idExpression,\n                           boolean allowNoResources,\n                           @Nullable PageParams pageParams,\n+                          Set<String> tags,\n                           ActionListener<Tuple<Long, Set<String>>> idsListener) {\n         String[] tokens = Strings.tokenizeToStringArray(idExpression, \",\");\n+        BoolQueryBuilder tagQuery = QueryBuilders.boolQuery();\n+        for(String tag : tags) {\n+            tagQuery.filter(QueryBuilders.termQuery(TrainedModelConfig.TAGS.getPreferredName(), tag));\n+        }\n+\n+        QueryBuilder query = QueryBuilders.constantScoreQuery(\n+            QueryBuilders.boolQuery()\n+                .filter(tagQuery.hasClauses() ? tagQuery : QueryBuilders.matchAllQuery())", "originalCommit": "260fa074864847fd9db3990aa0aacb6fecc64b6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwMjc1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51330#discussion_r370102752", "bodyText": "Ah, I do think your query building is better. Will see about refactoring :)", "author": "benwtrent", "createdAt": "2020-01-23T13:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5NzczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cdf61cffbb34df69ab582f3c113311e4b8f39217", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java\nindex d622f52f3af..a549e60e0bd 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java\n\n@@ -384,21 +385,12 @@ public class TrainedModelProvider {\n                           Set<String> tags,\n                           ActionListener<Tuple<Long, Set<String>>> idsListener) {\n         String[] tokens = Strings.tokenizeToStringArray(idExpression, \",\");\n-        BoolQueryBuilder tagQuery = QueryBuilders.boolQuery();\n-        for(String tag : tags) {\n-            tagQuery.filter(QueryBuilders.termQuery(TrainedModelConfig.TAGS.getPreferredName(), tag));\n-        }\n-\n-        QueryBuilder query = QueryBuilders.constantScoreQuery(\n-            QueryBuilders.boolQuery()\n-                .filter(tagQuery.hasClauses() ? tagQuery : QueryBuilders.matchAllQuery())\n-                .filter(buildQueryIdExpressionQuery(tokens, TrainedModelConfig.MODEL_ID.getPreferredName())));\n         SearchSourceBuilder sourceBuilder = new SearchSourceBuilder()\n             .sort(SortBuilders.fieldSort(TrainedModelConfig.MODEL_ID.getPreferredName())\n                 // If there are no resources, there might be no mapping for the id field.\n                 // This makes sure we don't get an error if that happens.\n                 .unmappedType(\"long\"))\n-            .query(query);\n+            .query(buildExpandIdsQuery(tokens, tags));\n         if (pageParams != null) {\n             sourceBuilder.from(pageParams.getFrom()).size(pageParams.getSize());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5Nzg4OA==", "url": "https://github.com/elastic/elasticsearch/pull/51330#discussion_r370097888", "bodyText": "Could you add a unit test to TrainedModelProviderTests for the new functionality?", "author": "przemekwitek", "createdAt": "2020-01-23T12:49:14Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java", "diffHunk": "@@ -381,14 +381,24 @@ public void deleteTrainedModel(String modelId, ActionListener<Boolean> listener)\n     public void expandIds(String idExpression,", "originalCommit": "260fa074864847fd9db3990aa0aacb6fecc64b6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNzE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51330#discussion_r370327166", "bodyText": "I did add a test verifying that filters are added to the expansion query.", "author": "benwtrent", "createdAt": "2020-01-23T20:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5Nzg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "cdf61cffbb34df69ab582f3c113311e4b8f39217", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java\nindex d622f52f3af..a549e60e0bd 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java\n\n@@ -384,21 +385,12 @@ public class TrainedModelProvider {\n                           Set<String> tags,\n                           ActionListener<Tuple<Long, Set<String>>> idsListener) {\n         String[] tokens = Strings.tokenizeToStringArray(idExpression, \",\");\n-        BoolQueryBuilder tagQuery = QueryBuilders.boolQuery();\n-        for(String tag : tags) {\n-            tagQuery.filter(QueryBuilders.termQuery(TrainedModelConfig.TAGS.getPreferredName(), tag));\n-        }\n-\n-        QueryBuilder query = QueryBuilders.constantScoreQuery(\n-            QueryBuilders.boolQuery()\n-                .filter(tagQuery.hasClauses() ? tagQuery : QueryBuilders.matchAllQuery())\n-                .filter(buildQueryIdExpressionQuery(tokens, TrainedModelConfig.MODEL_ID.getPreferredName())));\n         SearchSourceBuilder sourceBuilder = new SearchSourceBuilder()\n             .sort(SortBuilders.fieldSort(TrainedModelConfig.MODEL_ID.getPreferredName())\n                 // If there are no resources, there might be no mapping for the id field.\n                 // This makes sure we don't get an error if that happens.\n                 .unmappedType(\"long\"))\n-            .query(query);\n+            .query(buildExpandIdsQuery(tokens, tags));\n         if (pageParams != null) {\n             sourceBuilder.from(pageParams.getFrom()).size(pageParams.getSize());\n         }\n"}}, {"oid": "cdf61cffbb34df69ab582f3c113311e4b8f39217", "url": "https://github.com/elastic/elasticsearch/commit/cdf61cffbb34df69ab582f3c113311e4b8f39217", "message": "addressing PR comments", "committedDate": "2020-01-23T19:08:46Z", "type": "commit"}]}