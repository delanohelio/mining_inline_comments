{"pr_number": 51278, "pr_title": "Split Painless AST into a \"user\" tree and an \"ir\" tree", "pr_createdAt": "2020-01-22T00:47:10Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51278", "timeline": [{"oid": "ceafd7c1009fb50a016a97538dd76c25a289d191", "url": "https://github.com/elastic/elasticsearch/commit/ceafd7c1009fb50a016a97538dd76c25a289d191", "message": "copy nodes to split ir and ast", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "bf21ab1fbb16317e02304d5103f474e5e211fb6a", "url": "https://github.com/elastic/elasticsearch/commit/bf21ab1fbb16317e02304d5103f474e5e211fb6a", "message": "converted some ast nodes to ir nodes", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "71add6c14c61d8635ff062306b535f5c73368239", "url": "https://github.com/elastic/elasticsearch/commit/71add6c14c61d8635ff062306b535f5c73368239", "message": "converted more nodes", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "b6ccc7821c74112b5531526a5b684f19d95502a9", "url": "https://github.com/elastic/elasticsearch/commit/b6ccc7821c74112b5531526a5b684f19d95502a9", "message": "checkpoint", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "754d2d9ca1748f2bf6e2fda35dda6d61b2e3550c", "url": "https://github.com/elastic/elasticsearch/commit/754d2d9ca1748f2bf6e2fda35dda6d61b2e3550c", "message": "converted more nodes", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "fd966149d3fb1a15ffe18086e5e8dbe420e6766c", "url": "https://github.com/elastic/elasticsearch/commit/fd966149d3fb1a15ffe18086e5e8dbe420e6766c", "message": "completion of expression node conversion", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "b6c7d8ea2a065473abbdb11904adf10fad1f7e62", "url": "https://github.com/elastic/elasticsearch/commit/b6c7d8ea2a065473abbdb11904adf10fad1f7e62", "message": "convert all prefix nodes", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "f68872a5a542c0ea88bba8c2d6f2f98cb1e4fca1", "url": "https://github.com/elastic/elasticsearch/commit/f68872a5a542c0ea88bba8c2d6f2f98cb1e4fca1", "message": "partially changed node data to user getters/setters", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "c18a18248003c20086b6452e37f6d43e8751cf46", "url": "https://github.com/elastic/elasticsearch/commit/c18a18248003c20086b6452e37f6d43e8751cf46", "message": "partially changed data to be mutable", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "0bcc0c7cdecd12f268295b4f23af673195dea673", "url": "https://github.com/elastic/elasticsearch/commit/0bcc0c7cdecd12f268295b4f23af673195dea673", "message": "converted more nodes to ir", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "58f8e6ddb64ee74a404c8ef9ea1f7fb841973622", "url": "https://github.com/elastic/elasticsearch/commit/58f8e6ddb64ee74a404c8ef9ea1f7fb841973622", "message": "completeion of first pass of splitting nodes", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "6349c67d8916660f509da820133bf7e458281872", "url": "https://github.com/elastic/elasticsearch/commit/6349c67d8916660f509da820133bf7e458281872", "message": "fixes", "committedDate": "2020-01-22T16:00:06Z", "type": "commit"}, {"oid": "ab969e4c82b68c76c4dc37285a5fc4f6ea9ac5b8", "url": "https://github.com/elastic/elasticsearch/commit/ab969e4c82b68c76c4dc37285a5fc4f6ea9ac5b8", "message": "fix subtle issue with unboxing def", "committedDate": "2020-01-22T16:00:07Z", "type": "commit"}, {"oid": "86dc9a7bcb7b0daecdc91c8580767b0ce9df8286", "url": "https://github.com/elastic/elasticsearch/commit/86dc9a7bcb7b0daecdc91c8580767b0ce9df8286", "message": "move script root", "committedDate": "2020-01-22T16:00:07Z", "type": "commit"}, {"oid": "6149e43955a88ee7a397fb64fd3cb5539dd72498", "url": "https://github.com/elastic/elasticsearch/commit/6149e43955a88ee7a397fb64fd3cb5539dd72498", "message": "remove class", "committedDate": "2020-01-22T16:00:07Z", "type": "commit"}, {"oid": "32b8b8bc78197b7d3fa2d313b3a46a3b02fd849b", "url": "https://github.com/elastic/elasticsearch/commit/32b8b8bc78197b7d3fa2d313b3a46a3b02fd849b", "message": "add setters with covariant return types for all nodes", "committedDate": "2020-01-22T16:00:07Z", "type": "commit"}, {"oid": "a9118e7068bfa5713fdaebf46799b62d60ac02fe", "url": "https://github.com/elastic/elasticsearch/commit/a9118e7068bfa5713fdaebf46799b62d60ac02fe", "message": "build ir tree from ast", "committedDate": "2020-01-22T16:00:07Z", "type": "commit"}, {"oid": "058c416ac501ba6ec386cdeab5d998413ae46ca4", "url": "https://github.com/elastic/elasticsearch/commit/058c416ac501ba6ec386cdeab5d998413ae46ca4", "message": "fix bugs/tests", "committedDate": "2020-01-22T16:00:07Z", "type": "commit"}, {"oid": "e4fcce22db3dc2b05199978846c4eb0bd03d0e2c", "url": "https://github.com/elastic/elasticsearch/commit/e4fcce22db3dc2b05199978846c4eb0bd03d0e2c", "message": "remove bad refactor of initializer to initializerNode", "committedDate": "2020-01-22T16:00:07Z", "type": "commit"}, {"oid": "e4fcce22db3dc2b05199978846c4eb0bd03d0e2c", "url": "https://github.com/elastic/elasticsearch/commit/e4fcce22db3dc2b05199978846c4eb0bd03d0e2c", "message": "remove bad refactor of initializer to initializerNode", "committedDate": "2020-01-22T16:00:07Z", "type": "forcePushed"}, {"oid": "0222ff546ce5105fdf3fc03d364ab6e8c9b8f39a", "url": "https://github.com/elastic/elasticsearch/commit/0222ff546ce5105fdf3fc03d364ab6e8c9b8f39a", "message": "remove pseudo builder setters from ir nodes", "committedDate": "2020-01-22T22:53:00Z", "type": "commit"}, {"oid": "fbe2745277016a3aa683fc6e60ed602970670f98", "url": "https://github.com/elastic/elasticsearch/commit/fbe2745277016a3aa683fc6e60ed602970670f98", "message": "modify user nodes to work with ir setters", "committedDate": "2020-01-23T00:30:17Z", "type": "commit"}, {"oid": "8a0a65ce0645ff786cf882d605fe16ba99d93d56", "url": "https://github.com/elastic/elasticsearch/commit/8a0a65ce0645ff786cf882d605fe16ba99d93d56", "message": "fix instanceof missing node", "committedDate": "2020-01-23T00:36:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDU4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370290582", "bodyText": "What's happening here?", "author": "stu-elastic", "createdAt": "2020-01-23T18:44:29Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java", "diffHunk": "@@ -340,7 +341,7 @@ public Loader run() {\n         GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n             writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n         deterAdapter.visitCode();\n-        deterAdapter.push(scriptRoot.deterministic);\n+        deterAdapter.push(scriptRoot.isDeterministic());", "originalCommit": "8a0a65ce0645ff786cf882d605fe16ba99d93d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyOTI3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370329272", "bodyText": "I moved ScriptRoot to a different package. This required a getter for a package-private member resulting in isDeterministic.", "author": "jdconrad", "createdAt": "2020-01-23T20:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDU4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MjA3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370292071", "bodyText": "These are the actual arguments, correct? If so, consider renaming to arguments.  It's a bit confusing to have an ArgumentsNode type with field argumentNodes.", "author": "stu-elastic", "createdAt": "2020-01-23T18:47:33Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public abstract class ArgumentsNode extends ExpressionNode {\n+\n+    /* ---- begin tree structure ---- */\n+\n+    private final List<ExpressionNode> argumentNodes = new ArrayList<>();", "originalCommit": "8a0a65ce0645ff786cf882d605fe16ba99d93d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMDAzNg==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370330036", "bodyText": "I'm open to suggestions here. I know the names are a bit confusing and clash, but they do both describe accurately what each item is. I have divided the data in the \"ir\" nodes with two types of data - tree structure and local data. All tree structure members end with Node to help differentiate this from typical data. This also creates a general consistency between all nodes.", "author": "jdconrad", "createdAt": "2020-01-23T20:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MjA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1c03a51379c896b0f0c5897901f1635c2b43dc12", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java\nindex 7caf98cc831..40f6d901bb1 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java\n\n@@ -38,7 +38,4 @@ public abstract class ArgumentsNode extends ExpressionNode {\n \n     /* ---- end tree structure */\n \n-    public ArgumentsNode() {\n-        // do nothing\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NDE3NA==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370294174", "bodyText": "What is a cat here?", "author": "stu-elastic", "createdAt": "2020-01-23T18:51:56Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/AssignmentNode.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+\n+import org.elasticsearch.painless.ClassWriter;\n+import org.elasticsearch.painless.DefBootstrap;\n+import org.elasticsearch.painless.Globals;\n+import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.Operation;\n+import org.elasticsearch.painless.lookup.PainlessCast;\n+import org.elasticsearch.painless.lookup.PainlessLookupUtility;\n+import org.elasticsearch.painless.lookup.def;\n+\n+public class AssignmentNode extends BinaryNode {\n+\n+    /* ---- begin node data ---- */\n+\n+    private boolean pre;\n+    private boolean post;\n+    private Operation operation;\n+    private boolean read;\n+    private boolean cat;", "originalCommit": "8a0a65ce0645ff786cf882d605fe16ba99d93d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMDk1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370330952", "bodyText": "cat is short for concatenation for String types. These names are copied directly from their equivalent \"user\" node, so I would prefer to leave this for now as mechanical, but renaming should be a future change.", "author": "jdconrad", "createdAt": "2020-01-23T20:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MjY1NA==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370352654", "bodyText": "It's clear when reading the code further down, but a word or two as a comment would be nice.", "author": "stu-elastic", "createdAt": "2020-01-23T21:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2OTg1NA==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370369854", "bodyText": "Added a comment here and in BinaryMathNode that also does concatenations.", "author": "jdconrad", "createdAt": "2020-01-23T21:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NDE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "1c03a51379c896b0f0c5897901f1635c2b43dc12", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/AssignmentNode.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/AssignmentNode.java\nindex 3957fdb7b3c..41d12c3c761 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/AssignmentNode.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/AssignmentNode.java\n\n@@ -112,10 +112,6 @@ public class AssignmentNode extends BinaryNode {\n \n     /* ---- end node data ---- */\n \n-    public AssignmentNode() {\n-        // do nothing\n-    }\n-\n     @Override\n     protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals globals) {\n         methodWriter.writeDebugInfo(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMDI4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370300286", "bodyText": "Why is a default constructor insufficient?", "author": "stu-elastic", "createdAt": "2020-01-23T19:05:09Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public abstract class ArgumentsNode extends ExpressionNode {\n+\n+    /* ---- begin tree structure ---- */\n+\n+    private final List<ExpressionNode> argumentNodes = new ArrayList<>();\n+\n+    public void addArgumentNode(ExpressionNode argumentNode) {\n+        argumentNodes.add(argumentNode);\n+    }\n+\n+    public List<ExpressionNode> getArgumentNodes() {\n+        return argumentNodes;\n+    }\n+\n+    /* ---- end tree structure */\n+\n+    public ArgumentsNode() {", "originalCommit": "8a0a65ce0645ff786cf882d605fe16ba99d93d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMTIzMw==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370331233", "bodyText": "I was planning to have more than one constructor early on in the refactor, but wanted to show it was okay to create nodes from scratch. I will remove these as they are no longer necessary.", "author": "jdconrad", "createdAt": "2020-01-23T20:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMDI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1c03a51379c896b0f0c5897901f1635c2b43dc12", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java\nindex 7caf98cc831..40f6d901bb1 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/ArgumentsNode.java\n\n@@ -38,7 +38,4 @@ public abstract class ArgumentsNode extends ExpressionNode {\n \n     /* ---- end tree structure */\n \n-    public ArgumentsNode() {\n-        // do nothing\n-    }\n }\n"}}, {"oid": "7f123a4d80a8c444592c65c8934630273f9d11f1", "url": "https://github.com/elastic/elasticsearch/commit/7f123a4d80a8c444592c65c8934630273f9d11f1", "message": "Merge branch 'master' into trees1", "committedDate": "2020-01-23T20:14:56Z", "type": "commit"}, {"oid": "1c03a51379c896b0f0c5897901f1635c2b43dc12", "url": "https://github.com/elastic/elasticsearch/commit/1c03a51379c896b0f0c5897901f1635c2b43dc12", "message": "remove all default constructors from ir nodes", "committedDate": "2020-01-23T20:22:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MzE0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370353143", "bodyText": "Can ya comment on this?", "author": "stu-elastic", "createdAt": "2020-01-23T21:04:21Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BraceSubNode.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import org.elasticsearch.painless.ClassWriter;\n+import org.elasticsearch.painless.Globals;\n+import org.elasticsearch.painless.MethodWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.Opcodes;\n+\n+public class BraceSubNode extends UnaryNode {\n+\n+    @Override\n+    protected void write(ClassWriter classWriter, MethodWriter methodWriter, Globals globals) {\n+        setup(classWriter, methodWriter, globals);\n+        load(classWriter, methodWriter, globals);\n+    }\n+\n+    @Override\n+    protected int accessElementCount() {\n+        return 2;", "originalCommit": "1c03a51379c896b0f0c5897901f1635c2b43dc12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2NjczNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51278#discussion_r370366735", "bodyText": "Sure, happy to - currently, all of the nodes that contain code allowing for the storage of values such as variables or fields have several additional methods attached to them including accessElementCount. These methods are used by the AssignmentNode to do the majority of the work. AssignmentNode is also responsible for two additional items - compound assignment and a value being read from either pre or post assignment (++ and -- operator or  x = y = z where y must be read from post assignment). To do this all the storeable nodes follow a common pattern to do compound assignment, etc. This requires knowledge of how many ASM stack elements have been placed on the stack in order to access the actual value which is what accessElementCount is returning. As an example in this case, BraceSubNode may refer to an array access where on the stack the array reference along with the index is placed prior to accessing the actual value. accessElementCount refers to these two values and returns 2. This allows for some shortcutting by AssignmentNode to re-read the value if necessary. Take for instance x.y.z[2] += 1;. To access z[2], we have already accessed x and y. If we didn't shortcut straight to z[2] again to write the value we would have to double access x and y. Hopefully, this makes some sense.\nEdit: I don't want to expend too much effort here adding additional comments because the intention with further refactoring is for this specific code to go away in favor of storeable nodes getting more responsibility from assignment.", "author": "jdconrad", "createdAt": "2020-01-23T21:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MzE0Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "56a366ad2beac268810914237d99b084ccad1d7d", "url": "https://github.com/elastic/elasticsearch/commit/56a366ad2beac268810914237d99b084ccad1d7d", "message": "added some comments for cat", "committedDate": "2020-01-23T21:41:00Z", "type": "commit"}]}