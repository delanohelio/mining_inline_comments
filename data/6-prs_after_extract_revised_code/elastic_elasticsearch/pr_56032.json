{"pr_number": 56032, "pr_title": "Enable can match for search with reader contexts", "pr_createdAt": "2020-04-30T13:50:07Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56032", "timeline": [{"oid": "5b960851552cea706770aabb7fabbd2302d17ac2", "url": "https://github.com/elastic/elasticsearch/commit/5b960851552cea706770aabb7fabbd2302d17ac2", "message": "Enable can match in search with reader contexts", "committedDate": "2020-04-30T13:37:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NDYzNA==", "url": "https://github.com/elastic/elasticsearch/pull/56032#discussion_r418044634", "bodyText": "Why not using markAsUsed ?", "author": "jimczi", "createdAt": "2020-04-30T14:17:44Z", "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -1138,17 +1138,38 @@ public AliasFilter buildAliasFilter(ClusterState state, String index, Set<String\n      */\n     public CanMatchResponse canMatch(ShardSearchRequest request) throws IOException {\n         assert request.searchType() == SearchType.QUERY_THEN_FETCH : \"unexpected search type: \" + request.searchType();\n-        // TODO: support can_match with reader contexts after https://github.com/elastic/elasticsearch/pull/54966\n-        assert request.readerId() == null : \"request with reader_id bypass can_match phase\";\n         IndexService indexService = indicesService.indexServiceSafe(request.shardId().getIndex());\n-        IndexShard indexShard = indexService.getShard(request.shardId().getId());\n-        // we don't want to use the reader wrapper since it could run costly operations\n-        // and we can afford false positives.\n-        final boolean hasRefreshPending = indexShard.hasRefreshPending();\n-        try (Engine.Searcher searcher = indexShard.acquireSearcher(\"can_match\")) {\n+        final boolean hasRefreshPending;\n+        final Engine.Searcher canMatchSearcher;\n+        if (request.readerId() != null) {\n+            final ReaderContext readerContext = findReaderContext(request.readerId());\n+            checkKeepAliveLimit(request.keepAlive().millis());\n+            readerContext.keepAlive(request.keepAlive().millis());\n+            readerContext.incRef();", "originalCommit": "5b960851552cea706770aabb7fabbd2302d17ac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NTM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56032#discussion_r418075383", "bodyText": "markAsUsed is not water-tight. It's possible that the Reaper already decides to reap this reader context, then markAsUsed will be a noop, and the searcher can be closed in midway (see #20095). Should we make markAsUsed as tighten as incRef?", "author": "dnhatn", "createdAt": "2020-04-30T14:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NDYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "abb124c3f697dd509db0e9c28377fce8bfb3bca0", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/SearchService.java b/server/src/main/java/org/elasticsearch/search/SearchService.java\nindex 8f3f1c08202..219e9b14db2 100644\n--- a/server/src/main/java/org/elasticsearch/search/SearchService.java\n+++ b/server/src/main/java/org/elasticsearch/search/SearchService.java\n\n@@ -1162,8 +1162,6 @@ public class SearchService extends AbstractLifecycleComponent implements IndexEv\n         } else {\n             IndexShard indexShard = indexService.getShard(request.shardId().getId());\n             hasRefreshPending = indexShard.hasRefreshPending();\n-            // we don't want to use the reader wrapper since it could run costly operations\n-            // and we can afford false positives.\n             canMatchSearcher = indexShard.acquireSearcher(\"can_match\");\n         }\n         try (Releasable ignored = canMatchSearcher) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NTE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/56032#discussion_r418045166", "bodyText": "Unrelated but I think we can remove this comment now", "author": "jimczi", "createdAt": "2020-04-30T14:18:30Z", "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -1138,17 +1138,38 @@ public AliasFilter buildAliasFilter(ClusterState state, String index, Set<String\n      */\n     public CanMatchResponse canMatch(ShardSearchRequest request) throws IOException {\n         assert request.searchType() == SearchType.QUERY_THEN_FETCH : \"unexpected search type: \" + request.searchType();\n-        // TODO: support can_match with reader contexts after https://github.com/elastic/elasticsearch/pull/54966\n-        assert request.readerId() == null : \"request with reader_id bypass can_match phase\";\n         IndexService indexService = indicesService.indexServiceSafe(request.shardId().getIndex());\n-        IndexShard indexShard = indexService.getShard(request.shardId().getId());\n-        // we don't want to use the reader wrapper since it could run costly operations\n-        // and we can afford false positives.\n-        final boolean hasRefreshPending = indexShard.hasRefreshPending();\n-        try (Engine.Searcher searcher = indexShard.acquireSearcher(\"can_match\")) {\n+        final boolean hasRefreshPending;\n+        final Engine.Searcher canMatchSearcher;\n+        if (request.readerId() != null) {\n+            final ReaderContext readerContext = findReaderContext(request.readerId());\n+            checkKeepAliveLimit(request.keepAlive().millis());\n+            readerContext.keepAlive(request.keepAlive().millis());\n+            readerContext.incRef();\n+            boolean success = false;\n+            try {\n+                final Engine.Searcher searcher = readerContext.acquireSearcher(\"can_match\");\n+                canMatchSearcher = new Engine.Searcher(searcher.source(), searcher.getDirectoryReader(),\n+                    searcher.getSimilarity(), searcher.getQueryCache(), searcher.getQueryCachingPolicy(),\n+                    Releasables.wrap(searcher, readerContext::decRef));\n+                success = true;\n+            } finally {\n+                if (success == false) {\n+                    readerContext.decRef();\n+                }\n+            }\n+            hasRefreshPending = false;\n+        } else {\n+            IndexShard indexShard = indexService.getShard(request.shardId().getId());\n+            hasRefreshPending = indexShard.hasRefreshPending();\n+            // we don't want to use the reader wrapper since it could run costly operations", "originalCommit": "5b960851552cea706770aabb7fabbd2302d17ac2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abb124c3f697dd509db0e9c28377fce8bfb3bca0", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/SearchService.java b/server/src/main/java/org/elasticsearch/search/SearchService.java\nindex 8f3f1c08202..219e9b14db2 100644\n--- a/server/src/main/java/org/elasticsearch/search/SearchService.java\n+++ b/server/src/main/java/org/elasticsearch/search/SearchService.java\n\n@@ -1162,8 +1162,6 @@ public class SearchService extends AbstractLifecycleComponent implements IndexEv\n         } else {\n             IndexShard indexShard = indexService.getShard(request.shardId().getId());\n             hasRefreshPending = indexShard.hasRefreshPending();\n-            // we don't want to use the reader wrapper since it could run costly operations\n-            // and we can afford false positives.\n             canMatchSearcher = indexShard.acquireSearcher(\"can_match\");\n         }\n         try (Releasable ignored = canMatchSearcher) {\n"}}, {"oid": "abb124c3f697dd509db0e9c28377fce8bfb3bca0", "url": "https://github.com/elastic/elasticsearch/commit/abb124c3f697dd509db0e9c28377fce8bfb3bca0", "message": "remove outdated comment", "committedDate": "2020-04-30T14:59:35Z", "type": "commit"}, {"oid": "becb85294c3373a23155db372772aa256a414045", "url": "https://github.com/elastic/elasticsearch/commit/becb85294c3373a23155db372772aa256a414045", "message": "markAsUsed acquire refCount", "committedDate": "2020-05-01T02:49:10Z", "type": "commit"}, {"oid": "5827bc8e00ba5efc028dd8f67ab13616ba506f32", "url": "https://github.com/elastic/elasticsearch/commit/5827bc8e00ba5efc028dd8f67ab13616ba506f32", "message": "Merge branch 'feature/reader-context' into can-match-keep-alive", "committedDate": "2020-05-01T03:23:14Z", "type": "commit"}]}