{"pr_number": 64561, "pr_title": "Add info on each HTTP client to HTTP stats", "pr_createdAt": "2020-11-03T21:34:03Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64561", "timeline": [{"oid": "d74a9142dd40b99c11eb994cdcd699d7acec2a48", "url": "https://github.com/elastic/elasticsearch/commit/d74a9142dd40b99c11eb994cdcd699d7acec2a48", "message": "add stats for each HTTP client", "committedDate": "2020-11-03T21:15:20Z", "type": "commit"}, {"oid": "92c08403a4d5c432579c877eed1b138e4a3513fd", "url": "https://github.com/elastic/elasticsearch/commit/92c08403a4d5c432579c877eed1b138e4a3513fd", "message": "add volatile", "committedDate": "2020-11-03T21:17:56Z", "type": "commit"}, {"oid": "40a9acf32235303e7718001b72ee151e8cc9df7a", "url": "https://github.com/elastic/elasticsearch/commit/40a9acf32235303e7718001b72ee151e8cc9df7a", "message": "forbidden APIs", "committedDate": "2020-11-03T21:56:59Z", "type": "commit"}, {"oid": "9d1be328f11466ad418be574d07538a193aff606", "url": "https://github.com/elastic/elasticsearch/commit/9d1be328f11466ad418be574d07538a193aff606", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2020-11-11T17:53:42Z", "type": "commit"}, {"oid": "9701c48d0622aeaf9574014689e5dc75f7926acc", "url": "https://github.com/elastic/elasticsearch/commit/9701c48d0622aeaf9574014689e5dc75f7926acc", "message": "minor WIP", "committedDate": "2020-11-12T19:43:16Z", "type": "commit"}, {"oid": "281edb9e7da46c4f625943a8f8d5f5211f837b0a", "url": "https://github.com/elastic/elasticsearch/commit/281edb9e7da46c4f625943a8f8d5f5211f837b0a", "message": "version-aware serialization, record address on first request instead of socket accept", "committedDate": "2020-11-17T22:10:43Z", "type": "commit"}, {"oid": "67e7998ba86b44c5e6e540f853c908d8ffd34116", "url": "https://github.com/elastic/elasticsearch/commit/67e7998ba86b44c5e6e540f853c908d8ffd34116", "message": "fix serialization", "committedDate": "2020-11-17T22:35:50Z", "type": "commit"}, {"oid": "10e330c4a56564ba7aec2000200560ffbd3648cb", "url": "https://github.com/elastic/elasticsearch/commit/10e330c4a56564ba7aec2000200560ffbd3648cb", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2020-12-01T20:36:36Z", "type": "commit"}, {"oid": "070530838fee41ff6583712b22db2874146d98ae", "url": "https://github.com/elastic/elasticsearch/commit/070530838fee41ff6583712b22db2874146d98ae", "message": "add new fields and tests", "committedDate": "2020-12-01T22:18:20Z", "type": "commit"}, {"oid": "7d74dcbde69cfa5ae34a69212a1e90cda2e1b415", "url": "https://github.com/elastic/elasticsearch/commit/7d74dcbde69cfa5ae34a69212a1e90cda2e1b415", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2021-02-05T14:54:17Z", "type": "commit"}, {"oid": "cda6c823be70245e713c9066e9da346e93e16177", "url": "https://github.com/elastic/elasticsearch/commit/cda6c823be70245e713c9066e9da346e93e16177", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2021-02-05T19:32:34Z", "type": "commit"}, {"oid": "52dac89ee67554d76fd13a203d03c31a3c67432a", "url": "https://github.com/elastic/elasticsearch/commit/52dac89ee67554d76fd13a203d03c31a3c67432a", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2021-02-20T17:10:30Z", "type": "commit"}, {"oid": "25ad83b9b4e3db642a2486e2f38dbc0e2ed7692f", "url": "https://github.com/elastic/elasticsearch/commit/25ad83b9b4e3db642a2486e2f38dbc0e2ed7692f", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2021-02-20T18:20:39Z", "type": "commit"}, {"oid": "27c004f7658dc25968e8b655eaf28005f0f8d364", "url": "https://github.com/elastic/elasticsearch/commit/27c004f7658dc25968e8b655eaf28005f0f8d364", "message": "add test", "committedDate": "2021-02-22T21:00:41Z", "type": "commit"}, {"oid": "c83eed78d1eb3cb80b4651af6b94ee874c445fd7", "url": "https://github.com/elastic/elasticsearch/commit/c83eed78d1eb3cb80b4651af6b94ee874c445fd7", "message": "fix tests", "committedDate": "2021-02-22T21:41:31Z", "type": "commit"}, {"oid": "99265038c7a128f80e27c7b14e2074c67f4fae18", "url": "https://github.com/elastic/elasticsearch/commit/99265038c7a128f80e27c7b14e2074c67f4fae18", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2021-02-22T21:42:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1NTAwNA==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585855004", "bodyText": "Should this use threadPool.relativeTimeInMillis() to ensure that it can't go backwards?", "author": "dakrone", "createdAt": "2021-03-02T19:40:58Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -128,7 +131,19 @@ public HttpInfo info() {\n \n     @Override\n     public HttpStats stats() {\n-        return new HttpStats(httpChannels.size(), totalChannelsAccepted.get());\n+        pruneClientStats();\n+        return new HttpStats(new ArrayList<>(httpChannelStats.values()), httpChannels.size(), totalChannelsAccepted.get());\n+    }\n+\n+    void pruneClientStats() {\n+        // prune stale entries\n+        long nowMillis = threadPool.absoluteTimeInMillis();", "originalCommit": "99265038c7a128f80e27c7b14e2074c67f4fae18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg4NDk2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r587884966", "bodyText": "@dakrone, thanks for reviewing this. I'm going to go through your comments and try to address them. With regard to this comment, the time values (e.g., open time, closed time, last request time) are all meant to be absolute. The only place a duration is calculated is here in the pruneClientStats method where any channels closed for longer than 5 minutes are pruned. I can add a separate nanosecond counter for the closed time if you think it's important that the pruning interval not be affected by time changes.", "author": "danhermann", "createdAt": "2021-03-04T22:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1NTAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwNDk4MA==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r587904980", "bodyText": "okay, since they're absolute times I think it's okay, since we want them to correspond to real clock times (at least according to the machine ES is running on), thanks for the explanation!", "author": "dakrone", "createdAt": "2021-03-04T23:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1NTAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ea463660fc127ba470b3ac0ef661ea82b963855b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex b06f43a9f38..900bd242114 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -131,18 +132,25 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n \n     @Override\n     public HttpStats stats() {\n-        pruneClientStats();\n+        pruneClientStats(false);\n         return new HttpStats(new ArrayList<>(httpChannelStats.values()), httpChannels.size(), totalChannelsAccepted.get());\n     }\n \n-    void pruneClientStats() {\n-        // prune stale entries\n-        long nowMillis = threadPool.absoluteTimeInMillis();\n-        for (var statsEntry : httpChannelStats.entrySet()) {\n-            long closedTimeMillis = statsEntry.getValue().closedTimeMillis;\n-            if (closedTimeMillis > 0 && (nowMillis - closedTimeMillis > TimeUnit.MINUTES.toMillis(5))) {\n-                httpChannelStats.remove(statsEntry.getKey());\n+    /**\n+     * Prunes client stats of entries that have been disconnected for more than five minutes.\n+     *\n+     * @param throttled When true, executes the prune process only if more than 60 seconds has elapsed since the last execution.\n+     */\n+    void pruneClientStats(boolean throttled) {\n+        if (throttled == false || (threadPool.relativeTimeInMillis() - lastClientStatsPruneTime > TimeUnit.SECONDS.toMillis(60))) {\n+            long nowMillis = threadPool.absoluteTimeInMillis();\n+            for (var statsEntry : httpChannelStats.entrySet()) {\n+                long closedTimeMillis = statsEntry.getValue().closedTimeMillis;\n+                if (closedTimeMillis > 0 && (nowMillis - closedTimeMillis > TimeUnit.MINUTES.toMillis(5))) {\n+                    httpChannelStats.remove(statsEntry.getKey());\n+                }\n             }\n+            lastClientStatsPruneTime = threadPool.relativeTimeInMillis();\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1NTYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585855638", "bodyText": "Same here about relativeTimeInMillis(), I think we want durations which means relative should work great, rather than absolute where time drift can make things inaccurate", "author": "dakrone", "createdAt": "2021-03-02T19:41:57Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -291,7 +306,14 @@ protected void serverAcceptedChannel(HttpChannel httpChannel) {\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannel.addCloseListener(ActionListener.wrap(() -> httpChannels.remove(httpChannel)));\n+        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));", "originalCommit": "99265038c7a128f80e27c7b14e2074c67f4fae18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204f18b1c421f61530277e78215d76a895f7bf92", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex b06f43a9f38..9e46711031d 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -306,12 +306,19 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));\n+        httpChannelStats.put(\n+            HttpStats.ClientStats.getChannelKey(httpChannel),\n+            new HttpStats.ClientStats(threadPool.absoluteTimeInMillis())\n+        );\n         httpChannel.addCloseListener(ActionListener.wrap(() -> {\n-            httpChannels.remove(httpChannel);\n-            HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n-            if (clientStats != null) {\n-                clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n+            try {\n+                httpChannels.remove(httpChannel);\n+                HttpStats.ClientStats clientStats = httpChannelStats.get(HttpStats.ClientStats.getChannelKey(httpChannel));\n+                if (clientStats != null) {\n+                    clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n+                }\n+            } catch (Exception e) {\n+\n             }\n         }));\n         logger.trace(() -> new ParameterizedMessage(\"Http channel accepted: {}\", httpChannel));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1NjEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585856101", "bodyText": "Same here about relativeTimeInMillis()", "author": "dakrone", "createdAt": "2021-03-02T19:42:30Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -291,7 +306,14 @@ protected void serverAcceptedChannel(HttpChannel httpChannel) {\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannel.addCloseListener(ActionListener.wrap(() -> httpChannels.remove(httpChannel)));\n+        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));\n+        httpChannel.addCloseListener(ActionListener.wrap(() -> {\n+            httpChannels.remove(httpChannel);\n+            HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+            if (clientStats != null) {\n+                clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();", "originalCommit": "99265038c7a128f80e27c7b14e2074c67f4fae18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204f18b1c421f61530277e78215d76a895f7bf92", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex b06f43a9f38..9e46711031d 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -306,12 +306,19 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));\n+        httpChannelStats.put(\n+            HttpStats.ClientStats.getChannelKey(httpChannel),\n+            new HttpStats.ClientStats(threadPool.absoluteTimeInMillis())\n+        );\n         httpChannel.addCloseListener(ActionListener.wrap(() -> {\n-            httpChannels.remove(httpChannel);\n-            HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n-            if (clientStats != null) {\n-                clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n+            try {\n+                httpChannels.remove(httpChannel);\n+                HttpStats.ClientStats clientStats = httpChannelStats.get(HttpStats.ClientStats.getChannelKey(httpChannel));\n+                if (clientStats != null) {\n+                    clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n+                }\n+            } catch (Exception e) {\n+\n             }\n         }));\n         logger.trace(() -> new ParameterizedMessage(\"Http channel accepted: {}\", httpChannel));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1ODEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585858101", "bodyText": "I'm not that familiar with close listeners, but what happens when the channel has a successful response but the close listener blows up? Should we wrap the listener with a try/catch that logs and ignores exceptions?", "author": "dakrone", "createdAt": "2021-03-02T19:44:08Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -291,7 +306,14 @@ protected void serverAcceptedChannel(HttpChannel httpChannel) {\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannel.addCloseListener(ActionListener.wrap(() -> httpChannels.remove(httpChannel)));\n+        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));\n+        httpChannel.addCloseListener(ActionListener.wrap(() -> {", "originalCommit": "99265038c7a128f80e27c7b14e2074c67f4fae18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204f18b1c421f61530277e78215d76a895f7bf92", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex b06f43a9f38..9e46711031d 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -306,12 +306,19 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannelStats.put(System.identityHashCode(httpChannel), new HttpStats.ClientStats(threadPool.absoluteTimeInMillis()));\n+        httpChannelStats.put(\n+            HttpStats.ClientStats.getChannelKey(httpChannel),\n+            new HttpStats.ClientStats(threadPool.absoluteTimeInMillis())\n+        );\n         httpChannel.addCloseListener(ActionListener.wrap(() -> {\n-            httpChannels.remove(httpChannel);\n-            HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n-            if (clientStats != null) {\n-                clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n+            try {\n+                httpChannels.remove(httpChannel);\n+                HttpStats.ClientStats clientStats = httpChannelStats.get(HttpStats.ClientStats.getChannelKey(httpChannel));\n+                if (clientStats != null) {\n+                    clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n+                }\n+            } catch (Exception e) {\n+\n             }\n         }));\n         logger.trace(() -> new ParameterizedMessage(\"Http channel accepted: {}\", httpChannel));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1OTIwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585859209", "bodyText": "Can you add a comment here about why we use identityHashCode rather than the regular hash code? (so it doesn't get accidentally removed)", "author": "dakrone", "createdAt": "2021-03-02T19:45:49Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -315,6 +338,37 @@ public void incomingRequest(final HttpRequest httpRequest, final HttpChannel htt\n         }\n     }\n \n+    void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));", "originalCommit": "99265038c7a128f80e27c7b14e2074c67f4fae18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg5ODAxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r587898019", "bodyText": "I'll refactor that into a static method to make it clear what the rationale for identityHashCode there was.", "author": "danhermann", "createdAt": "2021-03-04T23:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg1OTIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "204f18b1c421f61530277e78215d76a895f7bf92", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex b06f43a9f38..9e46711031d 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -339,12 +346,12 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n     }\n \n     void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n-        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(HttpStats.ClientStats.getChannelKey(httpChannel));\n         if (clientStats != null) {\n             if (clientStats.agent == null) {\n-                if (httpRequest.getHeaders().containsKey(\"x-elastic-product-origin\")) {\n+                if (hasAtLeastOneHeaderValue(httpRequest, \"x-elastic-product-origin\")) {\n                     clientStats.agent = httpRequest.getHeaders().get(\"x-elastic-product-origin\").get(0);\n-                } else if (httpRequest.getHeaders().containsKey(\"User-Agent\")) {\n+                } else if (hasAtLeastOneHeaderValue(httpRequest, \"User-Agent\")) {\n                     clientStats.agent = httpRequest.getHeaders().get(\"User-Agent\").get(0);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkyODU4OA==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585928588", "bodyText": "These checks should be httpRequest.getHeaders().get(\"<whatever-header>\").size() > 0 rather than a containsKey check, because it's possible for the header list to be an empty list\n(I was able to reproduce this with a malicious telnet x 9200 and manually constructing a \"bad\" HTTP request with an empty User-Agent header)", "author": "dakrone", "createdAt": "2021-03-02T21:38:36Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -315,6 +338,37 @@ public void incomingRequest(final HttpRequest httpRequest, final HttpChannel htt\n         }\n     }\n \n+    void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+        if (clientStats != null) {\n+            if (clientStats.agent == null) {\n+                if (httpRequest.getHeaders().containsKey(\"x-elastic-product-origin\")) {", "originalCommit": "99265038c7a128f80e27c7b14e2074c67f4fae18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204f18b1c421f61530277e78215d76a895f7bf92", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex b06f43a9f38..9e46711031d 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -339,12 +346,12 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n     }\n \n     void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n-        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(HttpStats.ClientStats.getChannelKey(httpChannel));\n         if (clientStats != null) {\n             if (clientStats.agent == null) {\n-                if (httpRequest.getHeaders().containsKey(\"x-elastic-product-origin\")) {\n+                if (hasAtLeastOneHeaderValue(httpRequest, \"x-elastic-product-origin\")) {\n                     clientStats.agent = httpRequest.getHeaders().get(\"x-elastic-product-origin\").get(0);\n-                } else if (httpRequest.getHeaders().containsKey(\"User-Agent\")) {\n+                } else if (hasAtLeastOneHeaderValue(httpRequest, \"User-Agent\")) {\n                     clientStats.agent = httpRequest.getHeaders().get(\"User-Agent\").get(0);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkzMzM4NA==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585933384", "bodyText": "Even though these are marked as volatile, there is still a race condition here because we do a read-then-write that could be from multiple threads. I think instead we should use a LongAdder for both of these", "author": "dakrone", "createdAt": "2021-03-02T21:47:15Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -315,6 +338,37 @@ public void incomingRequest(final HttpRequest httpRequest, final HttpChannel htt\n         }\n     }\n \n+    void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+        if (clientStats != null) {\n+            if (clientStats.agent == null) {\n+                if (httpRequest.getHeaders().containsKey(\"x-elastic-product-origin\")) {\n+                    clientStats.agent = httpRequest.getHeaders().get(\"x-elastic-product-origin\").get(0);\n+                } else if (httpRequest.getHeaders().containsKey(\"User-Agent\")) {\n+                    clientStats.agent = httpRequest.getHeaders().get(\"User-Agent\").get(0);\n+                }\n+            }\n+            if (clientStats.localAddress == null) {\n+                clientStats.localAddress = NetworkAddress.format(httpChannel.getLocalAddress());\n+                clientStats.remoteAddress = NetworkAddress.format(httpChannel.getRemoteAddress());\n+            }\n+            if (clientStats.forwardedFor == null) {\n+                if (httpRequest.getHeaders().containsKey(\"x-forwarded-for\")) {\n+                    clientStats.forwardedFor = httpRequest.getHeaders().get(\"x-forwarded-for\").get(0);\n+                }\n+            }\n+            if (clientStats.opaqueId == null) {\n+                if (httpRequest.getHeaders().containsKey(\"x-opaque-id\")) {\n+                    clientStats.opaqueId = httpRequest.getHeaders().get(\"x-opaque-id\").get(0);\n+                }\n+            }\n+            clientStats.lastRequestTimeMillis = threadPool.absoluteTimeInMillis();\n+            clientStats.lastUri = httpRequest.uri();\n+            clientStats.requestCount++;\n+            clientStats.requestSizeBytes += httpRequest.content().length();", "originalCommit": "99265038c7a128f80e27c7b14e2074c67f4fae18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "204f18b1c421f61530277e78215d76a895f7bf92", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex b06f43a9f38..9e46711031d 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -339,12 +346,12 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n     }\n \n     void updateClientStats(final HttpRequest httpRequest, final HttpChannel httpChannel) {\n-        HttpStats.ClientStats clientStats = httpChannelStats.get(System.identityHashCode(httpChannel));\n+        HttpStats.ClientStats clientStats = httpChannelStats.get(HttpStats.ClientStats.getChannelKey(httpChannel));\n         if (clientStats != null) {\n             if (clientStats.agent == null) {\n-                if (httpRequest.getHeaders().containsKey(\"x-elastic-product-origin\")) {\n+                if (hasAtLeastOneHeaderValue(httpRequest, \"x-elastic-product-origin\")) {\n                     clientStats.agent = httpRequest.getHeaders().get(\"x-elastic-product-origin\").get(0);\n-                } else if (httpRequest.getHeaders().containsKey(\"User-Agent\")) {\n+                } else if (hasAtLeastOneHeaderValue(httpRequest, \"User-Agent\")) {\n                     clientStats.agent = httpRequest.getHeaders().get(\"User-Agent\").get(0);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkzNDc1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r585934756", "bodyText": "If I understand this correctly, we only prune stats once the stats are actually requested. Wouldn't this mean that if the stats are never requested then they can grow unbounded?", "author": "dakrone", "createdAt": "2021-03-02T21:49:36Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -128,7 +131,19 @@ public HttpInfo info() {\n \n     @Override\n     public HttpStats stats() {\n-        return new HttpStats(httpChannels.size(), totalChannelsAccepted.get());\n+        pruneClientStats();", "originalCommit": "99265038c7a128f80e27c7b14e2074c67f4fae18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwMzE2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r587903161", "bodyText": "Good point. I'll think about a better way to do that. Probably something based on pruning when new clients connect so that the event that triggers client stats growth is also the one that triggers pruning.", "author": "danhermann", "createdAt": "2021-03-04T23:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkzNDc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTc4NzIwNA==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r589787204", "bodyText": "@dakrone, in ea46366, I added a call to pruneClientStats to serverAcceptedChannel so that the same event that triggers client stats growth also triggers pruning. That call is throttled to once per minute to better handle situations where large numbers of client are connecting to a cluster.", "author": "danhermann", "createdAt": "2021-03-08T22:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkzNDc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ea463660fc127ba470b3ac0ef661ea82b963855b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex b06f43a9f38..900bd242114 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -131,18 +132,25 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n \n     @Override\n     public HttpStats stats() {\n-        pruneClientStats();\n+        pruneClientStats(false);\n         return new HttpStats(new ArrayList<>(httpChannelStats.values()), httpChannels.size(), totalChannelsAccepted.get());\n     }\n \n-    void pruneClientStats() {\n-        // prune stale entries\n-        long nowMillis = threadPool.absoluteTimeInMillis();\n-        for (var statsEntry : httpChannelStats.entrySet()) {\n-            long closedTimeMillis = statsEntry.getValue().closedTimeMillis;\n-            if (closedTimeMillis > 0 && (nowMillis - closedTimeMillis > TimeUnit.MINUTES.toMillis(5))) {\n-                httpChannelStats.remove(statsEntry.getKey());\n+    /**\n+     * Prunes client stats of entries that have been disconnected for more than five minutes.\n+     *\n+     * @param throttled When true, executes the prune process only if more than 60 seconds has elapsed since the last execution.\n+     */\n+    void pruneClientStats(boolean throttled) {\n+        if (throttled == false || (threadPool.relativeTimeInMillis() - lastClientStatsPruneTime > TimeUnit.SECONDS.toMillis(60))) {\n+            long nowMillis = threadPool.absoluteTimeInMillis();\n+            for (var statsEntry : httpChannelStats.entrySet()) {\n+                long closedTimeMillis = statsEntry.getValue().closedTimeMillis;\n+                if (closedTimeMillis > 0 && (nowMillis - closedTimeMillis > TimeUnit.MINUTES.toMillis(5))) {\n+                    httpChannelStats.remove(statsEntry.getKey());\n+                }\n             }\n+            lastClientStatsPruneTime = threadPool.relativeTimeInMillis();\n         }\n     }\n \n"}}, {"oid": "5345ee78add3d48ce0382e5788c58e858e5a182e", "url": "https://github.com/elastic/elasticsearch/commit/5345ee78add3d48ce0382e5788c58e858e5a182e", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2021-03-04T18:36:09Z", "type": "commit"}, {"oid": "4398bb382ac6d0ef3e24be509233a744cb52a893", "url": "https://github.com/elastic/elasticsearch/commit/4398bb382ac6d0ef3e24be509233a744cb52a893", "message": "fix merge conflict", "committedDate": "2021-03-04T18:43:12Z", "type": "commit"}, {"oid": "204f18b1c421f61530277e78215d76a895f7bf92", "url": "https://github.com/elastic/elasticsearch/commit/204f18b1c421f61530277e78215d76a895f7bf92", "message": "address some review comments", "committedDate": "2021-03-04T23:34:17Z", "type": "commit"}, {"oid": "638aef8144838140ae1807e2b1480f1f555509d2", "url": "https://github.com/elastic/elasticsearch/commit/638aef8144838140ae1807e2b1480f1f555509d2", "message": "fix xcontent", "committedDate": "2021-03-05T00:59:51Z", "type": "commit"}, {"oid": "3efd494f3a2210ac3cc84d81a61a3aa17d84fa90", "url": "https://github.com/elastic/elasticsearch/commit/3efd494f3a2210ac3cc84d81a61a3aa17d84fa90", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2021-03-08T22:01:01Z", "type": "commit"}, {"oid": "ea463660fc127ba470b3ac0ef661ea82b963855b", "url": "https://github.com/elastic/elasticsearch/commit/ea463660fc127ba470b3ac0ef661ea82b963855b", "message": "Ensure that client stats cannot grow unbounded", "committedDate": "2021-03-08T22:10:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjczOTExNw==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592739117", "bodyText": "Can you extract this 60 second value and the 5 minute value into private static variables in this class? They're a little easier to discover and change there if we want to tweak them in the future (and it prevents the function call, even if it would end up getting inlined)", "author": "dakrone", "createdAt": "2021-03-11T21:36:20Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -128,7 +132,26 @@ public HttpInfo info() {\n \n     @Override\n     public HttpStats stats() {\n-        return new HttpStats(httpChannels.size(), totalChannelsAccepted.get());\n+        pruneClientStats(false);\n+        return new HttpStats(new ArrayList<>(httpChannelStats.values()), httpChannels.size(), totalChannelsAccepted.get());\n+    }\n+\n+    /**\n+     * Prunes client stats of entries that have been disconnected for more than five minutes.\n+     *\n+     * @param throttled When true, executes the prune process only if more than 60 seconds has elapsed since the last execution.\n+     */\n+    void pruneClientStats(boolean throttled) {\n+        if (throttled == false || (threadPool.relativeTimeInMillis() - lastClientStatsPruneTime > TimeUnit.SECONDS.toMillis(60))) {", "originalCommit": "ea463660fc127ba470b3ac0ef661ea82b963855b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "971f05764692b4f72189d5ea74aeb072778a3feb", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex 900bd242114..c555e952e55 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -142,11 +145,11 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n      * @param throttled When true, executes the prune process only if more than 60 seconds has elapsed since the last execution.\n      */\n     void pruneClientStats(boolean throttled) {\n-        if (throttled == false || (threadPool.relativeTimeInMillis() - lastClientStatsPruneTime > TimeUnit.SECONDS.toMillis(60))) {\n+        if (throttled == false || (threadPool.relativeTimeInMillis() - lastClientStatsPruneTime > PRUNE_THROTTLE_INTERVAL)) {\n             long nowMillis = threadPool.absoluteTimeInMillis();\n             for (var statsEntry : httpChannelStats.entrySet()) {\n                 long closedTimeMillis = statsEntry.getValue().closedTimeMillis;\n-                if (closedTimeMillis > 0 && (nowMillis - closedTimeMillis > TimeUnit.MINUTES.toMillis(5))) {\n+                if (closedTimeMillis > 0 && (nowMillis - closedTimeMillis > MAX_CLIENT_STATS_AGE)) {\n                     httpChannelStats.remove(statsEntry.getKey());\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjczOTgyMg==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592739822", "bodyText": "Can you add a comment and maybe trace logging here, just in case we need it in the future? I don't think we should swallow exceptions without ever making them apparent elsewhere.", "author": "dakrone", "createdAt": "2021-03-11T21:37:35Z", "path": "server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java", "diffHunk": "@@ -291,7 +314,22 @@ protected void serverAcceptedChannel(HttpChannel httpChannel) {\n         boolean addedOnThisCall = httpChannels.add(httpChannel);\n         assert addedOnThisCall : \"Channel should only be added to http channel set once\";\n         totalChannelsAccepted.incrementAndGet();\n-        httpChannel.addCloseListener(ActionListener.wrap(() -> httpChannels.remove(httpChannel)));\n+        httpChannelStats.put(\n+            HttpStats.ClientStats.getChannelKey(httpChannel),\n+            new HttpStats.ClientStats(threadPool.absoluteTimeInMillis())\n+        );\n+        httpChannel.addCloseListener(ActionListener.wrap(() -> {\n+            try {\n+                httpChannels.remove(httpChannel);\n+                HttpStats.ClientStats clientStats = httpChannelStats.get(HttpStats.ClientStats.getChannelKey(httpChannel));\n+                if (clientStats != null) {\n+                    clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n+                }\n+            } catch (Exception e) {\n+", "originalCommit": "ea463660fc127ba470b3ac0ef661ea82b963855b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "971f05764692b4f72189d5ea74aeb072778a3feb", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\nindex 900bd242114..c555e952e55 100644\n--- a/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n+++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java\n\n@@ -326,7 +329,8 @@ public abstract class AbstractHttpServerTransport extends AbstractLifecycleCompo\n                     clientStats.closedTimeMillis = threadPool.absoluteTimeInMillis();\n                 }\n             } catch (Exception e) {\n-\n+                // the listener code about should never throw\n+                logger.trace(\"error removing HTTP channel listener\", e);\n             }\n         }));\n         pruneClientStats(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc0MTQ5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592741491", "bodyText": "Why do we use Strings.EMPTY here? Should we be using jopt stuff here? I think I would prefer to just use either null (and protect when serializing it over transport and xcontent) or \"\" than pulling in that dependency here.\nIf we do need the functionality for some reason, maybe we can add it to our own org.elasticsearch.common.Strings class", "author": "dakrone", "createdAt": "2021-03-11T21:40:31Z", "path": "server/src/main/java/org/elasticsearch/http/HttpStats.java", "diffHunk": "@@ -49,14 +67,121 @@ public long getTotalOpen() {\n         static final String HTTP = \"http\";\n         static final String CURRENT_OPEN = \"current_open\";\n         static final String TOTAL_OPENED = \"total_opened\";\n+        static final String CLIENTS = \"clients\";\n+        static final String CLIENT_ID = \"id\";\n+        static final String CLIENT_AGENT = \"agent\";\n+        static final String CLIENT_LOCAL_ADDRESS = \"local_address\";\n+        static final String CLIENT_REMOTE_ADDRESS = \"remote_address\";\n+        static final String CLIENT_LAST_URI = \"last_uri\";\n+        static final String CLIENT_OPENED_TIME_MILLIS = \"opened_time_millis\";\n+        static final String CLIENT_CLOSED_TIME_MILLIS = \"closed_time_millis\";\n+        static final String CLIENT_LAST_REQUEST_TIME_MILLIS = \"last_request_time_millis\";\n+        static final String CLIENT_REQUEST_COUNT = \"request_count\";\n+        static final String CLIENT_REQUEST_SIZE_BYTES = \"request_size_bytes\";\n+        static final String CLIENT_FORWARDED_FOR = \"x_forwarded_for\";\n+        static final String CLIENT_OPAQUE_ID = \"x_opaque_id\";\n     }\n \n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject(Fields.HTTP);\n         builder.field(Fields.CURRENT_OPEN, serverOpen);\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n+        builder.startArray(Fields.CLIENTS);\n+        for (ClientStats clientStats : this.clientStats) {\n+            builder.startObject();\n+            builder.field(Fields.CLIENT_ID, clientStats.id);\n+            builder.field(Fields.CLIENT_AGENT, clientStats.agent);\n+            builder.field(Fields.CLIENT_LOCAL_ADDRESS, clientStats.localAddress);\n+            builder.field(Fields.CLIENT_REMOTE_ADDRESS, clientStats.remoteAddress);\n+            builder.field(Fields.CLIENT_LAST_URI, clientStats.lastUri);\n+            builder.field(Fields.CLIENT_FORWARDED_FOR, clientStats.forwardedFor);\n+            builder.field(Fields.CLIENT_OPAQUE_ID, clientStats.opaqueId);\n+            builder.field(Fields.CLIENT_OPENED_TIME_MILLIS, clientStats.openedTimeMillis);\n+            builder.field(Fields.CLIENT_CLOSED_TIME_MILLIS, clientStats.closedTimeMillis);\n+            builder.field(Fields.CLIENT_LAST_REQUEST_TIME_MILLIS, clientStats.lastRequestTimeMillis);\n+            builder.field(Fields.CLIENT_REQUEST_COUNT, clientStats.requestCount.longValue());\n+            builder.field(Fields.CLIENT_REQUEST_SIZE_BYTES, clientStats.requestSizeBytes.longValue());\n+            builder.endObject();\n+        }\n+        builder.endArray();\n         builder.endObject();\n         return builder;\n     }\n+\n+    public static class ClientStats implements Writeable {\n+        final int id;\n+        String agent = Strings.EMPTY;", "originalCommit": "ea463660fc127ba470b3ac0ef661ea82b963855b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzE2OTk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r593169955", "bodyText": "Sure, I was thinking of the Strings.EMPTY_ARRAY constant in org.elasticsearch.common.Strings and didn't notice that IntelliJ pulled in the jopt class instead.", "author": "danhermann", "createdAt": "2021-03-12T13:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc0MTQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "971f05764692b4f72189d5ea74aeb072778a3feb", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/HttpStats.java b/server/src/main/java/org/elasticsearch/http/HttpStats.java\nindex 5a5ca58ab9e..fb857de8e4b 100644\n--- a/server/src/main/java/org/elasticsearch/http/HttpStats.java\n+++ b/server/src/main/java/org/elasticsearch/http/HttpStats.java\n\n@@ -89,34 +88,21 @@ public class HttpStats implements Writeable, ToXContentFragment {\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n         builder.startArray(Fields.CLIENTS);\n         for (ClientStats clientStats : this.clientStats) {\n-            builder.startObject();\n-            builder.field(Fields.CLIENT_ID, clientStats.id);\n-            builder.field(Fields.CLIENT_AGENT, clientStats.agent);\n-            builder.field(Fields.CLIENT_LOCAL_ADDRESS, clientStats.localAddress);\n-            builder.field(Fields.CLIENT_REMOTE_ADDRESS, clientStats.remoteAddress);\n-            builder.field(Fields.CLIENT_LAST_URI, clientStats.lastUri);\n-            builder.field(Fields.CLIENT_FORWARDED_FOR, clientStats.forwardedFor);\n-            builder.field(Fields.CLIENT_OPAQUE_ID, clientStats.opaqueId);\n-            builder.field(Fields.CLIENT_OPENED_TIME_MILLIS, clientStats.openedTimeMillis);\n-            builder.field(Fields.CLIENT_CLOSED_TIME_MILLIS, clientStats.closedTimeMillis);\n-            builder.field(Fields.CLIENT_LAST_REQUEST_TIME_MILLIS, clientStats.lastRequestTimeMillis);\n-            builder.field(Fields.CLIENT_REQUEST_COUNT, clientStats.requestCount.longValue());\n-            builder.field(Fields.CLIENT_REQUEST_SIZE_BYTES, clientStats.requestSizeBytes.longValue());\n-            builder.endObject();\n+            clientStats.toXContent(builder, params);\n         }\n         builder.endArray();\n         builder.endObject();\n         return builder;\n     }\n \n-    public static class ClientStats implements Writeable {\n+    public static class ClientStats implements Writeable, ToXContentFragment {\n         final int id;\n-        String agent = Strings.EMPTY;\n-        String localAddress = Strings.EMPTY;\n-        String remoteAddress = Strings.EMPTY;\n-        String lastUri = Strings.EMPTY;\n-        String forwardedFor = Strings.EMPTY;\n-        String opaqueId = Strings.EMPTY;\n+        String agent;\n+        String localAddress;\n+        String remoteAddress;\n+        String lastUri;\n+        String forwardedFor;\n+        String opaqueId;\n         long openedTimeMillis;\n         long closedTimeMillis = -1;\n         volatile long lastRequestTimeMillis = -1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc0MjEzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592742131", "bodyText": "It would probably be easier to make ClientStats implement ToXContentObject than doing the serialization here. It's nicer to encapsulate all the serialization in the class.", "author": "dakrone", "createdAt": "2021-03-11T21:41:43Z", "path": "server/src/main/java/org/elasticsearch/http/HttpStats.java", "diffHunk": "@@ -49,14 +67,121 @@ public long getTotalOpen() {\n         static final String HTTP = \"http\";\n         static final String CURRENT_OPEN = \"current_open\";\n         static final String TOTAL_OPENED = \"total_opened\";\n+        static final String CLIENTS = \"clients\";\n+        static final String CLIENT_ID = \"id\";\n+        static final String CLIENT_AGENT = \"agent\";\n+        static final String CLIENT_LOCAL_ADDRESS = \"local_address\";\n+        static final String CLIENT_REMOTE_ADDRESS = \"remote_address\";\n+        static final String CLIENT_LAST_URI = \"last_uri\";\n+        static final String CLIENT_OPENED_TIME_MILLIS = \"opened_time_millis\";\n+        static final String CLIENT_CLOSED_TIME_MILLIS = \"closed_time_millis\";\n+        static final String CLIENT_LAST_REQUEST_TIME_MILLIS = \"last_request_time_millis\";\n+        static final String CLIENT_REQUEST_COUNT = \"request_count\";\n+        static final String CLIENT_REQUEST_SIZE_BYTES = \"request_size_bytes\";\n+        static final String CLIENT_FORWARDED_FOR = \"x_forwarded_for\";\n+        static final String CLIENT_OPAQUE_ID = \"x_opaque_id\";\n     }\n \n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject(Fields.HTTP);\n         builder.field(Fields.CURRENT_OPEN, serverOpen);\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n+        builder.startArray(Fields.CLIENTS);\n+        for (ClientStats clientStats : this.clientStats) {", "originalCommit": "ea463660fc127ba470b3ac0ef661ea82b963855b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "971f05764692b4f72189d5ea74aeb072778a3feb", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/HttpStats.java b/server/src/main/java/org/elasticsearch/http/HttpStats.java\nindex 5a5ca58ab9e..fb857de8e4b 100644\n--- a/server/src/main/java/org/elasticsearch/http/HttpStats.java\n+++ b/server/src/main/java/org/elasticsearch/http/HttpStats.java\n\n@@ -89,34 +88,21 @@ public class HttpStats implements Writeable, ToXContentFragment {\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n         builder.startArray(Fields.CLIENTS);\n         for (ClientStats clientStats : this.clientStats) {\n-            builder.startObject();\n-            builder.field(Fields.CLIENT_ID, clientStats.id);\n-            builder.field(Fields.CLIENT_AGENT, clientStats.agent);\n-            builder.field(Fields.CLIENT_LOCAL_ADDRESS, clientStats.localAddress);\n-            builder.field(Fields.CLIENT_REMOTE_ADDRESS, clientStats.remoteAddress);\n-            builder.field(Fields.CLIENT_LAST_URI, clientStats.lastUri);\n-            builder.field(Fields.CLIENT_FORWARDED_FOR, clientStats.forwardedFor);\n-            builder.field(Fields.CLIENT_OPAQUE_ID, clientStats.opaqueId);\n-            builder.field(Fields.CLIENT_OPENED_TIME_MILLIS, clientStats.openedTimeMillis);\n-            builder.field(Fields.CLIENT_CLOSED_TIME_MILLIS, clientStats.closedTimeMillis);\n-            builder.field(Fields.CLIENT_LAST_REQUEST_TIME_MILLIS, clientStats.lastRequestTimeMillis);\n-            builder.field(Fields.CLIENT_REQUEST_COUNT, clientStats.requestCount.longValue());\n-            builder.field(Fields.CLIENT_REQUEST_SIZE_BYTES, clientStats.requestSizeBytes.longValue());\n-            builder.endObject();\n+            clientStats.toXContent(builder, params);\n         }\n         builder.endArray();\n         builder.endObject();\n         return builder;\n     }\n \n-    public static class ClientStats implements Writeable {\n+    public static class ClientStats implements Writeable, ToXContentFragment {\n         final int id;\n-        String agent = Strings.EMPTY;\n-        String localAddress = Strings.EMPTY;\n-        String remoteAddress = Strings.EMPTY;\n-        String lastUri = Strings.EMPTY;\n-        String forwardedFor = Strings.EMPTY;\n-        String opaqueId = Strings.EMPTY;\n+        String agent;\n+        String localAddress;\n+        String remoteAddress;\n+        String lastUri;\n+        String forwardedFor;\n+        String opaqueId;\n         long openedTimeMillis;\n         long closedTimeMillis = -1;\n         volatile long lastRequestTimeMillis = -1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc0MjUyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r592742521", "bodyText": "Should these string fields be protected with if (Strings.hasText(clientStats.opaqueId)) {...} so we don't output fields we don't care about? (or null check if we end up not using Strings.EMPTY)", "author": "dakrone", "createdAt": "2021-03-11T21:42:25Z", "path": "server/src/main/java/org/elasticsearch/http/HttpStats.java", "diffHunk": "@@ -49,14 +67,121 @@ public long getTotalOpen() {\n         static final String HTTP = \"http\";\n         static final String CURRENT_OPEN = \"current_open\";\n         static final String TOTAL_OPENED = \"total_opened\";\n+        static final String CLIENTS = \"clients\";\n+        static final String CLIENT_ID = \"id\";\n+        static final String CLIENT_AGENT = \"agent\";\n+        static final String CLIENT_LOCAL_ADDRESS = \"local_address\";\n+        static final String CLIENT_REMOTE_ADDRESS = \"remote_address\";\n+        static final String CLIENT_LAST_URI = \"last_uri\";\n+        static final String CLIENT_OPENED_TIME_MILLIS = \"opened_time_millis\";\n+        static final String CLIENT_CLOSED_TIME_MILLIS = \"closed_time_millis\";\n+        static final String CLIENT_LAST_REQUEST_TIME_MILLIS = \"last_request_time_millis\";\n+        static final String CLIENT_REQUEST_COUNT = \"request_count\";\n+        static final String CLIENT_REQUEST_SIZE_BYTES = \"request_size_bytes\";\n+        static final String CLIENT_FORWARDED_FOR = \"x_forwarded_for\";\n+        static final String CLIENT_OPAQUE_ID = \"x_opaque_id\";\n     }\n \n     @Override\n     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject(Fields.HTTP);\n         builder.field(Fields.CURRENT_OPEN, serverOpen);\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n+        builder.startArray(Fields.CLIENTS);\n+        for (ClientStats clientStats : this.clientStats) {\n+            builder.startObject();\n+            builder.field(Fields.CLIENT_ID, clientStats.id);\n+            builder.field(Fields.CLIENT_AGENT, clientStats.agent);\n+            builder.field(Fields.CLIENT_LOCAL_ADDRESS, clientStats.localAddress);\n+            builder.field(Fields.CLIENT_REMOTE_ADDRESS, clientStats.remoteAddress);\n+            builder.field(Fields.CLIENT_LAST_URI, clientStats.lastUri);\n+            builder.field(Fields.CLIENT_FORWARDED_FOR, clientStats.forwardedFor);\n+            builder.field(Fields.CLIENT_OPAQUE_ID, clientStats.opaqueId);", "originalCommit": "ea463660fc127ba470b3ac0ef661ea82b963855b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzE3NzA0NA==", "url": "https://github.com/elastic/elasticsearch/pull/64561#discussion_r593177044", "bodyText": "I think that makes sense for forwardedFor and opaqueId. An HTTP client will always have a remote address and at least one request URI.", "author": "danhermann", "createdAt": "2021-03-12T13:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Mjc0MjUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "971f05764692b4f72189d5ea74aeb072778a3feb", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/HttpStats.java b/server/src/main/java/org/elasticsearch/http/HttpStats.java\nindex 5a5ca58ab9e..fb857de8e4b 100644\n--- a/server/src/main/java/org/elasticsearch/http/HttpStats.java\n+++ b/server/src/main/java/org/elasticsearch/http/HttpStats.java\n\n@@ -89,34 +88,21 @@ public class HttpStats implements Writeable, ToXContentFragment {\n         builder.field(Fields.TOTAL_OPENED, totalOpen);\n         builder.startArray(Fields.CLIENTS);\n         for (ClientStats clientStats : this.clientStats) {\n-            builder.startObject();\n-            builder.field(Fields.CLIENT_ID, clientStats.id);\n-            builder.field(Fields.CLIENT_AGENT, clientStats.agent);\n-            builder.field(Fields.CLIENT_LOCAL_ADDRESS, clientStats.localAddress);\n-            builder.field(Fields.CLIENT_REMOTE_ADDRESS, clientStats.remoteAddress);\n-            builder.field(Fields.CLIENT_LAST_URI, clientStats.lastUri);\n-            builder.field(Fields.CLIENT_FORWARDED_FOR, clientStats.forwardedFor);\n-            builder.field(Fields.CLIENT_OPAQUE_ID, clientStats.opaqueId);\n-            builder.field(Fields.CLIENT_OPENED_TIME_MILLIS, clientStats.openedTimeMillis);\n-            builder.field(Fields.CLIENT_CLOSED_TIME_MILLIS, clientStats.closedTimeMillis);\n-            builder.field(Fields.CLIENT_LAST_REQUEST_TIME_MILLIS, clientStats.lastRequestTimeMillis);\n-            builder.field(Fields.CLIENT_REQUEST_COUNT, clientStats.requestCount.longValue());\n-            builder.field(Fields.CLIENT_REQUEST_SIZE_BYTES, clientStats.requestSizeBytes.longValue());\n-            builder.endObject();\n+            clientStats.toXContent(builder, params);\n         }\n         builder.endArray();\n         builder.endObject();\n         return builder;\n     }\n \n-    public static class ClientStats implements Writeable {\n+    public static class ClientStats implements Writeable, ToXContentFragment {\n         final int id;\n-        String agent = Strings.EMPTY;\n-        String localAddress = Strings.EMPTY;\n-        String remoteAddress = Strings.EMPTY;\n-        String lastUri = Strings.EMPTY;\n-        String forwardedFor = Strings.EMPTY;\n-        String opaqueId = Strings.EMPTY;\n+        String agent;\n+        String localAddress;\n+        String remoteAddress;\n+        String lastUri;\n+        String forwardedFor;\n+        String opaqueId;\n         long openedTimeMillis;\n         long closedTimeMillis = -1;\n         volatile long lastRequestTimeMillis = -1;\n"}}, {"oid": "971f05764692b4f72189d5ea74aeb072778a3feb", "url": "https://github.com/elastic/elasticsearch/commit/971f05764692b4f72189d5ea74aeb072778a3feb", "message": "review comments", "committedDate": "2021-03-12T13:47:39Z", "type": "commit"}, {"oid": "9795d2560055c62f0f6007ee03e89a42f7b5acfd", "url": "https://github.com/elastic/elasticsearch/commit/9795d2560055c62f0f6007ee03e89a42f7b5acfd", "message": "Merge branch 'master' into 61609_clients_api", "committedDate": "2021-03-12T14:03:03Z", "type": "commit"}, {"oid": "a15bb6d2c27962b5e02c190cb7f26ffef6e65326", "url": "https://github.com/elastic/elasticsearch/commit/a15bb6d2c27962b5e02c190cb7f26ffef6e65326", "message": "fix test", "committedDate": "2021-03-12T14:25:54Z", "type": "commit"}, {"oid": "dba15ba04b21f0802204294e5110e6981a5121d9", "url": "https://github.com/elastic/elasticsearch/commit/dba15ba04b21f0802204294e5110e6981a5121d9", "message": "fix more tests", "committedDate": "2021-03-12T17:10:40Z", "type": "commit"}]}