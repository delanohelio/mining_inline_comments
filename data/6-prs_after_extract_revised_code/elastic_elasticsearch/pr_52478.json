{"pr_number": 52478, "pr_title": "Correct boost in script_score query and error on negative scores", "pr_createdAt": "2020-02-18T14:27:51Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52478", "timeline": [{"oid": "7c9f5f8dcc773d99a2f2b36359df41d407208bad", "url": "https://github.com/elastic/elasticsearch/commit/7c9f5f8dcc773d99a2f2b36359df41d407208bad", "message": "Correct boost calculation in script_score query\n\nBefore boost in script_score query was wrongly applied only to the subquery.\nThis commit makes sure that the boost is applied to the whole score\nthat comes out of script.\n\nCloses #48465", "committedDate": "2020-02-18T14:26:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwNjMxNw==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r382106317", "bodyText": "This seems to be executed also when explanation == null? Or I'm missing something?\nMaybe it worths checking for a test that when the boost is  != 1 and explanation is false there is no explanation returned regarding the boost?\nAlso, why not return an explanation if the boost is 1, since it's asked by the user?", "author": "matriv", "createdAt": "2020-02-20T16:18:45Z", "path": "server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java", "diffHunk": "@@ -143,7 +148,12 @@ public Explanation explain(LeafReaderContext context, int doc) throws IOExceptio\n                         explanation = Explanation.match(score, desc);\n                     }\n                 }\n-                \n+                if (boost != 1.0f) {", "originalCommit": "7c9f5f8dcc773d99a2f2b36359df41d407208bad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1ODYwOA==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r382258608", "bodyText": "The way we handle explanation object is different from other queries, which may be confusing. In script_score query a user can provide his/her custom explanation.\n\nThis seems to be executed also when explanation == null?\n\nNot exactly. We start with explanation that is user provided explanation for the script, and if it null, it is substituted by our standard explanation (line 143), so on in line 151 explanation is never null.\n\nMaybe it worths checking for a test that when the boost is != 1 and explanation is false there is no explanation returned regarding the boost?\n\nWhen is explanation is not asked (explain = false in a search request),  we will not even go to this method. This method is executed only when a user requests an explanation.\n\nAlso, why not return an explanation if the boost is 1, since it's asked by the user?\n\nI was thinking since boost is an optional parameter,  when it is not provided by a user, there is no need to provide an explanation about it.", "author": "mayya-sharipova", "createdAt": "2020-02-20T21:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwNjMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "96db563f4c5eb0e3c9e694976db0c2b65ed2dd9b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java b/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\nindex 128d58f47dd..d31911c2718 100644\n--- a/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\n+++ b/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\n\n@@ -148,11 +146,9 @@ public class ScriptScoreQuery extends Query {\n                         explanation = Explanation.match(score, desc);\n                     }\n                 }\n-                if (boost != 1.0f) {\n-                    List<Explanation> subs = new ArrayList<>();\n-                    subs.addAll(Arrays.asList(explanation.getDetails()));\n-                    subs.add(Explanation.match(boost, \"boost\"));\n-                    explanation = Explanation.match(explanation.getValue(), explanation.getDescription(), subs);\n+                if (boost != 1f) {\n+                    explanation = Explanation.match(boost * explanation.getValue().floatValue(), \"Boosted score, product of:\",\n+                        Explanation.match(boost, \"boost\"), explanation);\n                 }\n                 if (minScore != null && minScore > explanation.getValue().floatValue()) {\n                     explanation = Explanation.noMatch(\"Score value is too low, expected at least \" + minScore +\n"}}, {"oid": "1d8313e2dea0abd143734ce6d44070fad32debbb", "url": "https://github.com/elastic/elasticsearch/commit/1d8313e2dea0abd143734ce6d44070fad32debbb", "message": "Address feedback", "committedDate": "2020-02-20T21:09:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3Mjc2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r382472763", "bodyText": "I think it would be better if this error message returned the value produced by the script without the boost.", "author": "jpountz", "createdAt": "2020-02-21T09:16:56Z", "path": "server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java", "diffHunk": "@@ -203,30 +213,33 @@ public int hashCode() {\n     private static class ScriptScorer extends Scorer {\n         private final ScoreScript scoreScript;\n         private final Scorer subQueryScorer;\n+        private final float boost;\n         private final ExplanationHolder explanation;\n \n         ScriptScorer(Weight weight, ScoreScript scoreScript, Scorer subQueryScorer,\n-                ScoreMode subQueryScoreMode, ExplanationHolder explanation) {\n+                ScoreMode subQueryScoreMode, float boost, ExplanationHolder explanation) {\n             super(weight);\n             this.scoreScript = scoreScript;\n             if (subQueryScoreMode == ScoreMode.COMPLETE) {\n                 scoreScript.setScorer(subQueryScorer);\n             }\n             this.subQueryScorer = subQueryScorer;\n+            this.boost = boost;\n             this.explanation = explanation;\n         }\n \n         @Override\n         public float score() throws IOException {\n             int docId = docID();\n             scoreScript.setDocument(docId);\n-            float score = (float) scoreScript.execute(explanation);\n+            float score = (float) scoreScript.execute(explanation) * boost;\n             if (score == Float.NEGATIVE_INFINITY || Float.isNaN(score)) {\n                 throw new ElasticsearchException(\n                     \"script_score query returned an invalid score [\" + score + \"] for doc [\" + docId + \"].\");", "originalCommit": "1d8313e2dea0abd143734ce6d44070fad32debbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96db563f4c5eb0e3c9e694976db0c2b65ed2dd9b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java b/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\nindex 128d58f47dd..d31911c2718 100644\n--- a/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\n+++ b/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\n\n@@ -232,12 +228,12 @@ public class ScriptScoreQuery extends Query {\n         public float score() throws IOException {\n             int docId = docID();\n             scoreScript.setDocument(docId);\n-            float score = (float) scoreScript.execute(explanation) * boost;\n-            if (score == Float.NEGATIVE_INFINITY || Float.isNaN(score)) {\n-                throw new ElasticsearchException(\n-                    \"script_score query returned an invalid score [\" + score + \"] for doc [\" + docId + \"].\");\n+            float score = (float) scoreScript.execute(explanation);\n+            if (score < 0f || Float.isNaN(score)) {\n+                throw new IllegalArgumentException(\"script_score script returned an invalid score [\" + score + \"] \" +\n+                    \"for doc [\" + docId + \"]. Must be a non-negative score!\");\n             }\n-            return score;\n+            return score * boost;\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3NjQxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r382476411", "bodyText": "I'd suggest wrapping the explanation instead of modifying it in-place: create the scorer with boost=1f a couple lines above, and then here:\nif (boost != 1f) {\n    explanation = Explanation.match(boost * explanation.getValue().floatValue(), \"Boosted score, product of:\",\n        Explanation.match(boost, \"boost\"),\n        explanation);\n}", "author": "jpountz", "createdAt": "2020-02-21T09:24:29Z", "path": "server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java", "diffHunk": "@@ -143,7 +148,12 @@ public Explanation explain(LeafReaderContext context, int doc) throws IOExceptio\n                         explanation = Explanation.match(score, desc);\n                     }\n                 }\n-                \n+                if (boost != 1.0f) {\n+                    List<Explanation> subs = new ArrayList<>();\n+                    subs.addAll(Arrays.asList(explanation.getDetails()));\n+                    subs.add(Explanation.match(boost, \"boost\"));\n+                    explanation = Explanation.match(explanation.getValue(), explanation.getDescription(), subs);\n+                }", "originalCommit": "1d8313e2dea0abd143734ce6d44070fad32debbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96db563f4c5eb0e3c9e694976db0c2b65ed2dd9b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java b/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\nindex 128d58f47dd..d31911c2718 100644\n--- a/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\n+++ b/server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java\n\n@@ -148,11 +146,9 @@ public class ScriptScoreQuery extends Query {\n                         explanation = Explanation.match(score, desc);\n                     }\n                 }\n-                if (boost != 1.0f) {\n-                    List<Explanation> subs = new ArrayList<>();\n-                    subs.addAll(Arrays.asList(explanation.getDetails()));\n-                    subs.add(Explanation.match(boost, \"boost\"));\n-                    explanation = Explanation.match(explanation.getValue(), explanation.getDescription(), subs);\n+                if (boost != 1f) {\n+                    explanation = Explanation.match(boost * explanation.getValue().floatValue(), \"Boosted score, product of:\",\n+                        Explanation.match(boost, \"boost\"), explanation);\n                 }\n                 if (minScore != null && minScore > explanation.getValue().floatValue()) {\n                     explanation = Explanation.noMatch(\"Score value is too low, expected at least \" + minScore +\n"}}, {"oid": "96db563f4c5eb0e3c9e694976db0c2b65ed2dd9b", "url": "https://github.com/elastic/elasticsearch/commit/96db563f4c5eb0e3c9e694976db0c2b65ed2dd9b", "message": "Address Feedback", "committedDate": "2020-02-24T13:51:22Z", "type": "commit"}, {"oid": "c16c4446b86322131a4dac8af367f81f9b2680ee", "url": "https://github.com/elastic/elasticsearch/commit/c16c4446b86322131a4dac8af367f81f9b2680ee", "message": "Remove unused imports", "committedDate": "2020-02-24T14:04:09Z", "type": "commit"}, {"oid": "8882f397ecc1f1231b465b881a25e6781db52467", "url": "https://github.com/elastic/elasticsearch/commit/8882f397ecc1f1231b465b881a25e6781db52467", "message": "Merge remote-tracking branch 'upstream/master' into script_score_boost", "committedDate": "2020-02-24T14:41:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMzA1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r387203055", "bodyText": "@mayya-sharipova it looks like this PR also fixed a bug in script_score queries where we allowed negative scores. I think we should add a note to the breaking changes docs and also update the PR description to make it clear we included this change.", "author": "jtibshirani", "createdAt": "2020-03-03T18:14:49Z", "path": "server/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreQuery.java", "diffHunk": "@@ -221,12 +225,13 @@ public float score() throws IOException {\n             int docId = docID();\n             scoreScript.setDocument(docId);\n             float score = (float) scoreScript.execute(explanation);\n-            if (score == Float.NEGATIVE_INFINITY || Float.isNaN(score)) {\n-                throw new ElasticsearchException(\n-                    \"script_score query returned an invalid score [\" + score + \"] for doc [\" + docId + \"].\");\n+            if (score < 0f || Float.isNaN(score)) {", "originalCommit": "8882f397ecc1f1231b465b881a25e6781db52467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyNzYyOA==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r387227628", "bodyText": "@jtibshirani Thanks.  Even before without this change a user would get an error if their script_score query produced a negative score. They would just get it from a different place, one of them from the Lucene here\nSo the only thing changed from a user perspective is an error message and error status code (before was 500, not 400x).  Do you think it warrants a breaking change notice?\n+1 for include this in the PR description", "author": "mayya-sharipova", "createdAt": "2020-03-03T18:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMzA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNzQ2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r387237461", "bodyText": "I tried this out using an Elasticsearch 7.6 build, and didn't receive an error:\nPUT my_index/_doc/1?refresh\n{\n  \"field\": \"value\"\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"script_score\": {\n      \"query\": {\n        \"match_all\": {}\n      },\n      \"script\": {\n        \"source\": \"-1000\"\n      }\n    }\n  }\n}\n\nThe line you linked to is an assert, so perhaps these Lucene checks didn't always catch the issue in non-test environments.", "author": "jtibshirani", "createdAt": "2020-03-03T19:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMzA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MDQ3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r387780477", "bodyText": "@jtibshirani Thanks for uncovering this.  I understood what happened:\n\nBefore 7.5,  script_score query was using ScriptScoreFunction that was returning 400 error with a negative score.\nFrom 7.5, we have changed it to not use ScriptScoreFunction but forgot to add a condition for a negative score.  But  TopScoreDocCollector assertion is tripped, causing fatal error in the dev mode. But I guess we silence these assertions in a production mode  as we don't see any visible errors or error log messages.\n\nSo, negative scores were wrongly allowed only in 7.5-7.6 versions, so to me it doesn't look like  a really breaking change. But I think it is still worth to add a note with explanation in release notes. I will do that. WDYT?", "author": "mayya-sharipova", "createdAt": "2020-03-04T16:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMzA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDQzNg==", "url": "https://github.com/elastic/elasticsearch/pull/52478#discussion_r387794436", "bodyText": "Adding an explanation to the release notes makes sense to me. I agree it shouldn't be presented as a typical 'breaking change', it is more like a regression that we fixed. Perhaps we could add a unit test along with the release notes update, to prevent a future regression?", "author": "jtibshirani", "createdAt": "2020-03-04T16:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMzA1NQ=="}], "type": "inlineReview", "revised_code": null}]}