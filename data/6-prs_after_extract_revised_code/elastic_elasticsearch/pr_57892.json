{"pr_number": 57892, "pr_title": "Save memory when parent and child are not on top", "pr_createdAt": "2020-06-09T17:13:58Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57892", "timeline": [{"oid": "6622a53a6098d3994a16294407b0de66c11fd2b7", "url": "https://github.com/elastic/elasticsearch/commit/6622a53a6098d3994a16294407b0de66c11fd2b7", "message": "Save memory when parent and child are not on top\n\nReworks the `parent` and `child` aggregation are not at the top level\nusing the optimization from #55873. Instead of wrapping all\nnon-top-level `parent` and `child` aggregators we now handle being a\nchild aggregator in the aggregator, specifically by adding recording\nwhich global ordinals show up in the parent and then checking if they\nmatch the child.", "committedDate": "2020-06-09T17:03:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTExNw==", "url": "https://github.com/elastic/elasticsearch/pull/57892#discussion_r437591117", "bodyText": "This is pretty much the algorithm that we used to use. It ain't perfect, but it gets the job done.", "author": "nik9000", "createdAt": "2020-06-09T17:14:56Z", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentJoinAggregator.java", "diffHunk": "@@ -137,11 +138,21 @@ public int docID() {\n                 if (liveDocs != null && liveDocs.get(docId) == false) {\n                     continue;\n                 }\n-                if (globalOrdinals.advanceExact(docId)) {\n-                    int globalOrdinal = (int) globalOrdinals.nextOrd();\n-                    assert globalOrdinal != -1 && globalOrdinals.nextOrd() == SortedSetDocValues.NO_MORE_ORDS;\n-                    if (collectionStrategy.existsGlobalOrdinal(globalOrdinal)) {\n-                        collectBucket(sub, docId, 0);\n+                if (false == globalOrdinals.advanceExact(docId)) {\n+                    continue;\n+                }\n+                int globalOrdinal = (int) globalOrdinals.nextOrd();\n+                assert globalOrdinal != -1 && globalOrdinals.nextOrd() == SortedSetDocValues.NO_MORE_ORDS;\n+                /*\n+                 * Check if we contain every ordinal. It's almost certainly be\n+                 * faster to replay all the matching ordinals and filter them down\n+                 * to just those listed in ordsToCollect, but we don't have a data\n+                 * structure that maps a primitive long to a list of primitive\n+                 * longs. \n+                 */", "originalCommit": "6622a53a6098d3994a16294407b0de66c11fd2b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2Nzc1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57892#discussion_r438267751", "bodyText": "\ud83d\udc4d", "author": "talevy", "createdAt": "2020-06-10T16:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTExNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "48cbdb3e3b95bc975d4fac9a484f63d1e6a9ac99", "url": "https://github.com/elastic/elasticsearch/commit/48cbdb3e3b95bc975d4fac9a484f63d1e6a9ac99", "message": "Ooops test", "committedDate": "2020-06-09T17:33:53Z", "type": "commit"}, {"oid": "bab03b6fe2b345bf399ee1544227b8c524829442", "url": "https://github.com/elastic/elasticsearch/commit/bab03b6fe2b345bf399ee1544227b8c524829442", "message": "Woops", "committedDate": "2020-06-09T20:18:03Z", "type": "commit"}]}