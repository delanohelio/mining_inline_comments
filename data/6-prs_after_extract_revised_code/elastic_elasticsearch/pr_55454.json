{"pr_number": 55454, "pr_title": "SQL: Implement FORMAT function", "pr_createdAt": "2020-04-20T11:45:27Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55454", "timeline": [{"oid": "4c41ff665dabfda7e52f9bab580e840c5494d84a", "url": "https://github.com/elastic/elasticsearch/commit/4c41ff665dabfda7e52f9bab580e840c5494d84a", "message": "SQL: Implement FORMAT function\n\nImplement FORMAT according to the SQL Server spec: https://docs.microsoft.com/en-us/sql/t-sql/functions/format-transact-sql?view=sql-server-ver15#ExampleD by translating to the java.time patterns used in DATETIME_FORMAT.\n\nRelates to #54965", "committedDate": "2020-04-20T11:42:43Z", "type": "commit"}, {"oid": "d24cf75f2bbc2c0cbc5dfaac102ec09ab662b9cb", "url": "https://github.com/elastic/elasticsearch/commit/d24cf75f2bbc2c0cbc5dfaac102ec09ab662b9cb", "message": "Removed new pipe and processor. Used enum for formatting", "committedDate": "2020-06-13T14:01:06Z", "type": "commit"}, {"oid": "abd4725b32de169880f170a5b0ea09aa068e6cc9", "url": "https://github.com/elastic/elasticsearch/commit/abd4725b32de169880f170a5b0ea09aa068e6cc9", "message": "Corrected formatting", "committedDate": "2020-06-17T06:52:24Z", "type": "commit"}, {"oid": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3", "url": "https://github.com/elastic/elasticsearch/commit/cf8d71bcabe3029256fe5c4a1cac517d8d4068f3", "message": "Merge branch 'master' into impl-format-function\n\n# Conflicts:\n#\tdocs/reference/sql/functions/index.asciidoc\n#\tx-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/whitelist/InternalSqlScriptUtils.java", "committedDate": "2020-06-17T07:05:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwNjIyNw==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444206227", "bodyText": "nit: you could avoid the variable and use the randomValueOtherThan() here directly.", "author": "matriv", "createdAt": "2020-06-23T13:03:59Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -57,14 +57,16 @@ protected ZoneId instanceZoneId(DateTimeFormatProcessor instance) {\n \n     @Override\n     protected DateTimeFormatProcessor mutateInstance(DateTimeFormatProcessor instance) {\n+        Formatter replaced = randomValueOtherThan(instance.formatter(), () -> randomFrom(Formatter.values()));\n         return new DateTimeFormatProcessor(\n             new ConstantProcessor(DateTimeTestUtils.nowWithMillisResolution()),\n             new ConstantProcessor(ESTestCase.randomRealisticUnicodeOfLength(128)),\n-            randomValueOtherThan(instance.zoneId(), ESTestCase::randomZone)\n+            randomZone(),\n+            replaced", "originalCommit": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjMyNw==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444336327", "bodyText": "updated", "author": "binu-r", "createdAt": "2020-06-23T16:01:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwNjIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "429fd9ba63de53d0e2e12c20aea7d4fc6f8c3e7d", "chunk": "diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\nindex d7b021c1609..13f88c02a62 100644\n--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\n+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\n\n@@ -57,12 +57,11 @@ public class DateTimeFormatProcessorTests extends AbstractSqlWireSerializingTest\n \n     @Override\n     protected DateTimeFormatProcessor mutateInstance(DateTimeFormatProcessor instance) {\n-        Formatter replaced = randomValueOtherThan(instance.formatter(), () -> randomFrom(Formatter.values()));\n         return new DateTimeFormatProcessor(\n             new ConstantProcessor(DateTimeTestUtils.nowWithMillisResolution()),\n             new ConstantProcessor(ESTestCase.randomRealisticUnicodeOfLength(128)),\n             randomZone(),\n-            replaced\n+            randomValueOtherThan(instance.formatter(), () -> randomFrom(Formatter.values()))\n         );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwODAwMw==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444208003", "bodyText": "I think it's not necessary since, if there is no pattern found, no replacement occurs.", "author": "matriv", "createdAt": "2020-06-23T13:06:33Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},\n+        {\"t\", \"a\"},\n+        {\"dddd\", \"eeee\"},\n+        {\"ddd\", \"eee\"},\n+        {\"K\", \"v\"},\n+        {\"g\", \"G\"},\n+        {\"f\", \"S\"},\n+    };\n+    private final Formatter formatter;\n \n-    public DateTimeFormatProcessor(Processor source1, Processor source2, ZoneId zoneId) {\n+\n+    public enum Formatter {\n+        FORMAT,\n+        DATE_TIME_FORMAT;\n+\n+        public String getJavaPattern(final Object pattern) {\n+            String javaDateFormat = (String) pattern;\n+            if (this == FORMAT) {\n+\n+                for (String[] replacement : JAVA_TIME_FORMAT_REPLACEMENTS) {\n+                    if (javaDateFormat.contains(replacement[0])) {", "originalCommit": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTUwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444335505", "bodyText": "Removed contains check.", "author": "binu-r", "createdAt": "2020-06-23T16:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwODAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "9a194236d4a28908aeeec9daa77e87ab49c21c69", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\nindex c6ffe3b2d97..22882f52cc5 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\n\n@@ -44,11 +44,8 @@ public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n         public String getJavaPattern(final Object pattern) {\n             String javaDateFormat = (String) pattern;\n             if (this == FORMAT) {\n-\n                 for (String[] replacement : JAVA_TIME_FORMAT_REPLACEMENTS) {\n-                    if (javaDateFormat.contains(replacement[0])) {\n-                        javaDateFormat = javaDateFormat.replace(replacement[0], replacement[1]);\n-                    }\n+                    javaDateFormat = javaDateFormat.replace(replacement[0], replacement[1]);\n                 }\n             }\n             return javaDateFormat;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444217628", "bodyText": "Did you use this table: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings for the patterns?\nI see for example the F, FF, etc. is not addressed.", "author": "matriv", "createdAt": "2020-06-23T13:20:50Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,90 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},", "originalCommit": "cf8d71bcabe3029256fe5c4a1cac517d8d4068f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzOTM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444339381", "bodyText": "@matriv I have used same pattern as you mentioned. But i couldn't find any equivalent for F,FF, ... FFFFFFF  format specifiers in Java. Java has some what equivalent specifier which is S. Should I proceed with that?", "author": "binu-r", "createdAt": "2020-06-23T16:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MzQ1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444393452", "bodyText": "I think you can use the square brackets: e.g. [.SS] as a translation to .FF. Would you mind trying that and add some unit test for it?", "author": "matriv", "createdAt": "2020-06-23T17:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2NjQ2NA==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444666464", "bodyText": "I think for [.SS] is similar to .SS. I tried with both and yielding same results. so can I simply use S as a replacement of F ?\nfinal Literal dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, Integer.valueOf(\"001000123\")));\nnew Format(Source.EMPTY, dateTime , l(\"[SS]:SS\"), zoneId).makePipe().asProcessor().process(null)\nreturns 00:00", "author": "binu-r", "createdAt": "2020-06-24T06:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5MDA2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444690066", "bodyText": "Ah, I see. Thanks for checking. I'd say then to just replace F with S too, otherwise we'd need to use a DateTimeFormatterBuilder and do a more complex parsing of the user provided pattern in order to use something like .appendFraction(NANO_OF_SECOND, 0, 9, true) where 9 should be the number of Fs provided.\nI believe it's not important to implement this, and I'd rather add a NOTE in the docs to clarify that F works as f (non-optional).\n@astefan what do you think?", "author": "matriv", "createdAt": "2020-06-24T07:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzNTA4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444835083", "bodyText": "@matriv  Thanks for your suggestion. I have added replacement for F with S and added note in docs. Let me know if I can mark this conversation as resolved.", "author": "binu-r", "createdAt": "2020-06-24T11:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzODkyNg==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r444838926", "bodyText": "For me it's fine, let's wait for @astefan 's opinion as well.", "author": "matriv", "createdAt": "2020-06-24T11:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNzYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "9a194236d4a28908aeeec9daa77e87ab49c21c69", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\nindex c6ffe3b2d97..22882f52cc5 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\n\n@@ -44,11 +44,8 @@ public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n         public String getJavaPattern(final Object pattern) {\n             String javaDateFormat = (String) pattern;\n             if (this == FORMAT) {\n-\n                 for (String[] replacement : JAVA_TIME_FORMAT_REPLACEMENTS) {\n-                    if (javaDateFormat.contains(replacement[0])) {\n-                        javaDateFormat = javaDateFormat.replace(replacement[0], replacement[1]);\n-                    }\n+                    javaDateFormat = javaDateFormat.replace(replacement[0], replacement[1]);\n                 }\n             }\n             return javaDateFormat;\n"}}, {"oid": "429fd9ba63de53d0e2e12c20aea7d4fc6f8c3e7d", "url": "https://github.com/elastic/elasticsearch/commit/429fd9ba63de53d0e2e12c20aea7d4fc6f8c3e7d", "message": "removed unnecessary variable declaration replaced", "committedDate": "2020-06-23T15:51:30Z", "type": "commit"}, {"oid": "9a194236d4a28908aeeec9daa77e87ab49c21c69", "url": "https://github.com/elastic/elasticsearch/commit/9a194236d4a28908aeeec9daa77e87ab49c21c69", "message": "removed if check before replacement", "committedDate": "2020-06-23T15:59:09Z", "type": "commit"}, {"oid": "a750ae3bca97da0949a825d5db7e4912e308c275", "url": "https://github.com/elastic/elasticsearch/commit/a750ae3bca97da0949a825d5db7e4912e308c275", "message": "Added replacement pattern for `F`", "committedDate": "2020-06-24T11:41:15Z", "type": "commit"}, {"oid": "4ad149e6419748cfaa3dd6cc3488c75ab02b06ed", "url": "https://github.com/elastic/elasticsearch/commit/4ad149e6419748cfaa3dd6cc3488c75ab02b06ed", "message": "Add detailed note about F format specifier", "committedDate": "2020-06-24T14:36:25Z", "type": "commit"}, {"oid": "24d1f898f4a7e3532b71c5568627e8291c8cb580", "url": "https://github.com/elastic/elasticsearch/commit/24d1f898f4a7e3532b71c5568627e8291c8cb580", "message": "corrected [NOTE] about F format specifier.", "committedDate": "2020-06-25T04:29:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDU4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r448460586", "bodyText": "Please revert this. We don't allow * imports.", "author": "matriv", "createdAt": "2020-07-01T15:54:54Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -13,15 +13,14 @@\n import org.elasticsearch.xpack.ql.tree.Source;\n import org.elasticsearch.xpack.sql.AbstractSqlWireSerializingTestCase;\n import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;\n+import org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DateTimeFormatProcessor.Formatter;\n \n import java.time.Instant;\n import java.time.OffsetTime;\n import java.time.ZoneId;\n \n import static org.elasticsearch.xpack.ql.expression.Literal.NULL;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.l;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomDatetimeLiteral;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomStringLiteral;\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.*;", "originalCommit": "24d1f898f4a7e3532b71c5568627e8291c8cb580", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjAyMw==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r448502023", "bodyText": "Corrected AvoidStarImport rule violation", "author": "binu-r", "createdAt": "2020-07-01T17:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1fe52c33cda134a47e6ac5e1c9ea0e63134698a9", "chunk": "diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\nindex 896df4c5a15..aa041f9ce99 100644\n--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\n+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\n\n@@ -20,7 +20,9 @@ import java.time.OffsetTime;\n import java.time.ZoneId;\n \n import static org.elasticsearch.xpack.ql.expression.Literal.NULL;\n-import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.*;\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.l;\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomDatetimeLiteral;\n+import static org.elasticsearch.xpack.ql.expression.function.scalar.FunctionTestUtils.randomStringLiteral;\n import static org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DateTimeTestUtils.dateTime;\n import static org.elasticsearch.xpack.sql.expression.function.scalar.datetime.DateTimeTestUtils.time;\n import static org.elasticsearch.xpack.sql.type.SqlDataTypes.TIME;\n"}}, {"oid": "1fe52c33cda134a47e6ac5e1c9ea0e63134698a9", "url": "https://github.com/elastic/elasticsearch/commit/1fe52c33cda134a47e6ac5e1c9ea0e63134698a9", "message": "corrected AvoidStarImport checkstyle rule violation", "committedDate": "2020-07-01T17:04:20Z", "type": "commit"}, {"oid": "e72fb768191cfc40b4fb49f325a06b95c84171a2", "url": "https://github.com/elastic/elasticsearch/commit/e72fb768191cfc40b4fb49f325a06b95c84171a2", "message": "Merge remote-tracking branch 'upstream/master' into impl-format-function", "committedDate": "2020-07-06T08:42:23Z", "type": "commit"}, {"oid": "e164740373641332b43c93279e7b09db1910b718", "url": "https://github.com/elastic/elasticsearch/commit/e164740373641332b43c93279e7b09db1910b718", "message": "updated links for format function specification by Microsoft Sql Server", "committedDate": "2020-07-23T15:52:40Z", "type": "commit"}, {"oid": "9963e444a68c08e73d776a65299b4e4824728469", "url": "https://github.com/elastic/elasticsearch/commit/9963e444a68c08e73d776a65299b4e4824728469", "message": "updated documentation of 'F' format specifier to avoid confusion.", "committedDate": "2020-07-23T17:53:03Z", "type": "commit"}, {"oid": "7f7fd40846d7ee977beb3125c959179da732b379", "url": "https://github.com/elastic/elasticsearch/commit/7f7fd40846d7ee977beb3125c959179da732b379", "message": "Merge branch 'master' into impl-format-function", "committedDate": "2020-07-27T10:27:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460909344", "bodyText": "I think there are some unit tests missing, regarding the various patterns.\n\nm - The minute, from 0 through 59\nM - The month, from 1 through 12\nh - The hour, using a 12-hour clock from 1 to 12\nH - The hour, using a 24-hour clock from 0 to 23\nd - The day of the month, from 1 through 31\nMMM\nMMMM\ns\nother flavors of the year formatting (y, yy, yyy, yyyyy)\nother flavors of z (zz, zzz)\nalso, special handling situations: %, \\, any string literal.\nmaybe others I missed.\n\nIf we don't plan on supporting any of the above, at least take them out from the docs, because as the docs read now, we support patterns according  with https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings.\nCC @matriv", "author": "astefan", "createdAt": "2020-07-27T13:57:58Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java", "diffHunk": "@@ -141,5 +184,62 @@ public void testFormatting() {\n                 .asProcessor()\n                 .process(null)\n         );\n+\n+\n+        zoneId = ZoneId.of(\"Etc/GMT-10\");\n+        dateTime = l(dateTime(2019, 9, 3, 18, 10, 37, 123456789));\n+\n+        assertEquals(\"AD : 3\", new Format(Source.EMPTY, dateTime, l(\"G : Q\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"AD\", new Format(Source.EMPTY, dateTime, l(\"g\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"2019-09-04\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wed\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd ddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 Wednesday\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd dddd\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"04:10:37.123456\",\n+            new Format(Source.EMPTY, dateTime, l(\"HH:mm:ss.ffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff tt\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"2019-09-04 04:10:37.12345678 AM\",\n+            new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        assertEquals(\"1\", new Format(Source.EMPTY, dateTime, l(\"F\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"12\", new Format(Source.EMPTY, dateTime, l(\"FF\"), zoneId).makePipe().asProcessor().process(null));\n+\n+        zoneId = ZoneId.of(\"America/Sao_Paulo\");\n+        assertEquals(\"-0300\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"BRT\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\n+            \"America/Sao_Paulo\",\n+            new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null)\n+        );\n+\n+        assertEquals(\n+            \"07:11:22.1234\",\n+            new Format(Source.EMPTY, l(time(10, 11, 22, 123456789), TIME), l(\"HH:mm:ss.ffff\"), zoneId).makePipe()\n+                .asProcessor()\n+                .process(null)\n+        );", "originalCommit": "7f7fd40846d7ee977beb3125c959179da732b379", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2OTc1OA==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r463669758", "bodyText": "Added More tests. But after that there is some differences in y , yy .\nAlso \" , %  and \\ are not working properly.\n@astefan @matriv Shall I proceed with updating docs?", "author": "binu-r", "createdAt": "2020-07-31T15:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NTM4MA==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r464585380", "bodyText": "@binu-r, would you like to expand on the \"differences\" and what's \"not working properly\"?", "author": "bpintea", "createdAt": "2020-08-03T18:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMjM3OA==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r466502378", "bodyText": "@bpintea please find the differences found\n\n\n\nSymbol\nJava\n.Net\n\n\n\n\ny\n2009\n9\n\n\n\"\nprints \"\nenclosed in quotation marks to indicate that the entire delimited string should be interpreted as character literals.\n\n\n\\\nprints \\\nThe escape character.\n\n\n%\nprints %\nDefines the following character as a custom format specifier.", "author": "binu-r", "createdAt": "2020-08-06T15:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwODk3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r488708979", "bodyText": "@binu-r Apologies for the delay. I'd say that we should continue with the existing functionality and properly document that those those 4 characters/patterns are not supported. @astefan Do you agree?", "author": "matriv", "createdAt": "2020-09-15T14:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyOTI3MA==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r489229270", "bodyText": "Sounds good @matriv", "author": "astefan", "createdAt": "2020-09-16T07:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2NzU5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r490367597", "bodyText": "@matriv @astefan Thank you. Updated documentation about special cases.", "author": "binu-r", "createdAt": "2020-09-17T16:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1e092a18271e77ab16268a319982454e678ab036", "chunk": "diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\nindex aa041f9ce99..22cbd2cfb13 100644\n--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\n+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessorTests.java\n\n@@ -220,7 +221,7 @@ public class DateTimeFormatProcessorTests extends AbstractSqlWireSerializingTest\n             new Format(Source.EMPTY, dateTime, l(\"YYYY-MM-dd HH:mm:ss.ffffffff t\"), zoneId).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\"+1000\", new Format(Source.EMPTY, dateTime, l(\"Z\"), zoneId).makePipe().asProcessor().process(null));\n-        assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n+        assertEquals(\"+10\", new Format(Source.EMPTY, dateTime, l(\"z\"), zoneId).makePipe().asProcessor().process(null));\n         assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"VV\"), zoneId).makePipe().asProcessor().process(null));\n         assertEquals(\"Etc/GMT-10\", new Format(Source.EMPTY, dateTime, l(\"K\"), zoneId).makePipe().asProcessor().process(null));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxMDU3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460910577", "bodyText": "Please, change the pattern to be String and make sure the method gets a String instead of blindly casting it to String.", "author": "astefan", "createdAt": "2020-07-27T13:59:35Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java", "diffHunk": "@@ -17,55 +18,88 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.TemporalAccessor;\n import java.util.Locale;\n+import java.util.Objects;\n \n import static org.elasticsearch.xpack.sql.util.DateUtils.asTimeAtZone;\n \n public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n \n     public static final String NAME = \"dtformat\";\n+    private static final String[][] JAVA_TIME_FORMAT_REPLACEMENTS = {\n+        {\"tt\", \"a\"},\n+        {\"t\", \"a\"},\n+        {\"dddd\", \"eeee\"},\n+        {\"ddd\", \"eee\"},\n+        {\"K\", \"v\"},\n+        {\"g\", \"G\"},\n+        {\"f\", \"S\"},\n+        {\"F\", \"S\"}\n+    };\n+    private final Formatter formatter;\n \n-    public DateTimeFormatProcessor(Processor source1, Processor source2, ZoneId zoneId) {\n+\n+    public enum Formatter {\n+        FORMAT,\n+        DATE_TIME_FORMAT;\n+\n+        public String getJavaPattern(final Object pattern) {\n+            String javaDateFormat = (String) pattern;", "originalCommit": "7f7fd40846d7ee977beb3125c959179da732b379", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkyMTUxMg==", "url": "https://github.com/elastic/elasticsearch/pull/55454#discussion_r460921512", "bodyText": "Also, the method can be private.", "author": "astefan", "createdAt": "2020-07-27T14:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxMDU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1990dbeee4f16be9c2dcc9ccd6260d1bc4ea6f99", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\nindex d52e42bb4cf..3e72e5990bd 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormatProcessor.java\n\n@@ -42,25 +42,26 @@ public class DateTimeFormatProcessor extends BinaryDateTimeProcessor {\n         FORMAT,\n         DATE_TIME_FORMAT;\n \n-        public String getJavaPattern(final Object pattern) {\n-            String javaDateFormat = (String) pattern;\n+        private String getJavaPattern(String pattern) {\n             if (this == FORMAT) {\n                 for (String[] replacement : JAVA_TIME_FORMAT_REPLACEMENTS) {\n-                    javaDateFormat = javaDateFormat.replace(replacement[0], replacement[1]);\n+                    pattern = pattern.replace(replacement[0], replacement[1]);\n                 }\n             }\n-            return javaDateFormat;\n-\n+            return pattern;\n         }\n \n         public Object format(Object timestamp, Object pattern, ZoneId zoneId) {\n             if (timestamp == null || pattern == null) {\n                 return null;\n             }\n-            if (pattern instanceof String == false) {\n+            String patternString;\n+            if (pattern instanceof String) {\n+                patternString = (String) pattern;\n+            } else {\n                 throw new SqlIllegalArgumentException(\"A string is required; received [{}]\", pattern);\n             }\n-            if (((String) pattern).isEmpty()) {\n+            if (patternString.isEmpty()) {\n                 return null;\n             }\n \n"}}, {"oid": "1990dbeee4f16be9c2dcc9ccd6260d1bc4ea6f99", "url": "https://github.com/elastic/elasticsearch/commit/1990dbeee4f16be9c2dcc9ccd6260d1bc4ea6f99", "message": "Changed getJavaPattern method to private", "committedDate": "2020-07-27T16:35:55Z", "type": "commit"}, {"oid": "70ad4071a7254d4aa873e2b30e8491ba08de4d38", "url": "https://github.com/elastic/elasticsearch/commit/70ad4071a7254d4aa873e2b30e8491ba08de4d38", "message": "updated documentation of 'F'. (corrected typo)", "committedDate": "2020-07-30T15:48:23Z", "type": "commit"}, {"oid": "e7660eff90d00dae6783ee0fbc1a02ea54991dee", "url": "https://github.com/elastic/elasticsearch/commit/e7660eff90d00dae6783ee0fbc1a02ea54991dee", "message": "corrected indentation in integration test", "committedDate": "2020-07-31T14:04:46Z", "type": "commit"}, {"oid": "76cc786c9b8fb692db760ef650cf0b3c667914c9", "url": "https://github.com/elastic/elasticsearch/commit/76cc786c9b8fb692db760ef650cf0b3c667914c9", "message": "Added new IT to pass result of format to LENGTH function", "committedDate": "2020-07-31T14:07:03Z", "type": "commit"}, {"oid": "eea920f728313df1e5377d88e52281f4087c5c54", "url": "https://github.com/elastic/elasticsearch/commit/eea920f728313df1e5377d88e52281f4087c5c54", "message": "IT added emp_no field to result. Corrected indentation.", "committedDate": "2020-07-31T14:36:48Z", "type": "commit"}, {"oid": "1e092a18271e77ab16268a319982454e678ab036", "url": "https://github.com/elastic/elasticsearch/commit/1e092a18271e77ab16268a319982454e678ab036", "message": "Added more Unit Tests regarding more patterns", "committedDate": "2020-07-31T15:06:04Z", "type": "commit"}, {"oid": "76b71051c9326fe360a697f5a3182adf6da11a13", "url": "https://github.com/elastic/elasticsearch/commit/76b71051c9326fe360a697f5a3182adf6da11a13", "message": "Added Special cases in documentation", "committedDate": "2020-09-17T16:01:06Z", "type": "commit"}, {"oid": "d60a289ec92f91fe3bbe9525ed2c18168f9f7715", "url": "https://github.com/elastic/elasticsearch/commit/d60a289ec92f91fe3bbe9525ed2c18168f9f7715", "message": "updated documentation for 'y' format specifier", "committedDate": "2020-09-18T12:26:45Z", "type": "commit"}, {"oid": "5168d831ad7abb340ede63463db255cfcbb80e6d", "url": "https://github.com/elastic/elasticsearch/commit/5168d831ad7abb340ede63463db255cfcbb80e6d", "message": "Merge branch 'master' into impl-format-function", "committedDate": "2020-09-20T09:31:43Z", "type": "commit"}, {"oid": "5e8c6dfa703dbc7da120bcbcdb0053ee652eefde", "url": "https://github.com/elastic/elasticsearch/commit/5e8c6dfa703dbc7da120bcbcdb0053ee652eefde", "message": "Update docs/reference/sql/functions/date-time.asciidoc\r\n\r\ntypo\n\nCo-authored-by: Bogdan Pintea <bpintea@gmail.com>", "committedDate": "2020-09-21T12:39:13Z", "type": "commit"}]}