{"pr_number": 57608, "pr_title": "Fix Remote Recovery Being Retried for Removed Nodes", "pr_createdAt": "2020-06-03T15:13:48Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57608", "timeline": [{"oid": "26ef3d17ad253120ef3038b32d6d7af7a0d2698d", "url": "https://github.com/elastic/elasticsearch/commit/26ef3d17ad253120ef3038b32d6d7af7a0d2698d", "message": "Fix Remote Recovery Being Retried for Removed Nodes\n\nIf a node is disconnected we retry. It does not make sense\nto retry the recovery if the node is removed from the cluster though.\n=> added a check for the node being part of the cluster before retrying\n\nAlso, we were running the retry on the `SAME` pool which for each retry will\nbe the scheduler pool. Since the error path of the listener we use here\nwill do blocking operations when closing the resources used by the recovery\nwe can't use the `SAME` pool here since not all exceptions go to the `ActionListenerResponseHandler`\nthreading like e.g. `NodeNotConnectedException`.\n\nCloses #57585", "committedDate": "2020-06-03T15:08:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTUxMA==", "url": "https://github.com/elastic/elasticsearch/pull/57608#discussion_r434645510", "bodyText": "The root of the issue here is that we keep retrying the request here when the node is gone from the cluster for good. Since we never stop this retry, we never release the underlying commit and the respective assertion for releasing all the commits in the ITs fails.\nThis fix feels really dirty to me though. I mainly opened this to illustrate where the problem lies, not sure this is an appropriate fix. Ideally, I'd hope we would have some mechanism for cancelling the retry if a node is dropped form the cluster but I couldn't find an easy way of building that (maybe someone else can?).", "author": "original-brownbear", "createdAt": "2020-06-03T15:15:14Z", "path": "server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java", "diffHunk": "@@ -261,7 +266,7 @@ public void tryAction(ActionListener<T> listener) {\n \n             @Override\n             public boolean shouldRetry(Exception e) {\n-                return retriesSupported && retryableException(e);\n+                return retriesSupported && clusterService.state().nodes().nodeExists(targetNode) && retryableException(e);", "originalCommit": "26ef3d17ad253120ef3038b32d6d7af7a0d2698d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0ODEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/57608#discussion_r434648101", "bodyText": "ClusterStateObserver is the magical thing here. It should be registered whenever we schedule a retry, and early cancel a scheduled retry when the target node drops from the cluster.", "author": "ywelsch", "createdAt": "2020-06-03T15:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MzQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/57608#discussion_r434653431", "bodyText": "Why don't we just have a single cluster state observer for RemoteRecoveryTargetHandler? We already have the whole cancellation infrastructure already built. Adding individual ones seems unnecessary.", "author": "tbrooks8", "createdAt": "2020-06-03T15:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NDgwMg==", "url": "https://github.com/elastic/elasticsearch/pull/57608#discussion_r434654802", "bodyText": "I didn't look at it in detail. Either is fine by me. Looks like @tbrooks8 volunteered to be a reviewer :)", "author": "ywelsch", "createdAt": "2020-06-03T15:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMzMTQ5MA==", "url": "https://github.com/elastic/elasticsearch/pull/57608#discussion_r435331490", "bodyText": "Alright, handled this via a cluster state listener instead of observer now, that looked a little simpler and more efficient to implement than an observer here. Let me know what you think :)", "author": "original-brownbear", "createdAt": "2020-06-04T15:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "082b8918076aaf915af7c10a1b2363a3444227d5", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java b/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java\nindex 44d67b9626a..26389439db6 100644\n--- a/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java\n+++ b/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java\n\n@@ -266,7 +274,12 @@ public class RemoteRecoveryTargetHandler implements RecoveryTargetHandler {\n \n             @Override\n             public boolean shouldRetry(Exception e) {\n-                return retriesSupported && clusterService.state().nodes().nodeExists(targetNode) && retryableException(e);\n+                final boolean retry = retriesSupported && peerRecoverySourceService.clusterService().state().nodes().nodeExists(targetNode)\n+                        && retryableException(e);\n+                if (retry) {\n+                    peerRecoverySourceService.trackRetry(RemoteRecoveryTargetHandler.this);\n+                }\n+                return retry;\n             }\n         };\n         onGoingRetryableActions.put(key, retryableAction);\n"}}, {"oid": "082b8918076aaf915af7c10a1b2363a3444227d5", "url": "https://github.com/elastic/elasticsearch/commit/082b8918076aaf915af7c10a1b2363a3444227d5", "message": "CR: track retries by listening to CS", "committedDate": "2020-06-04T11:59:16Z", "type": "commit"}, {"oid": "c58e0bc7fb5eddd9bc55182b5c16c38838ef59d9", "url": "https://github.com/elastic/elasticsearch/commit/c58e0bc7fb5eddd9bc55182b5c16c38838ef59d9", "message": "Merge remote-tracking branch 'elastic/master' into 57585", "committedDate": "2020-06-04T11:59:32Z", "type": "commit"}, {"oid": "e90c5b4eeefd44e35b1a7cfeee85d966c558f0eb", "url": "https://github.com/elastic/elasticsearch/commit/e90c5b4eeefd44e35b1a7cfeee85d966c558f0eb", "message": "Merge remote-tracking branch 'elastic/master' into 57585", "committedDate": "2020-06-09T09:25:51Z", "type": "commit"}, {"oid": "82ec5e6204f1debe4f88f4879add46c1855f99ad", "url": "https://github.com/elastic/elasticsearch/commit/82ec5e6204f1debe4f88f4879add46c1855f99ad", "message": "simpler", "committedDate": "2020-06-09T11:49:52Z", "type": "commit"}, {"oid": "c882a351a14b824a12cb2aed72759f7be8d41ff6", "url": "https://github.com/elastic/elasticsearch/commit/c882a351a14b824a12cb2aed72759f7be8d41ff6", "message": "simpler", "committedDate": "2020-06-09T11:56:22Z", "type": "commit"}]}