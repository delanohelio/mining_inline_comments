{"pr_number": 53982, "pr_title": "Refactor AliasOrIndex abstraction.", "pr_createdAt": "2020-03-23T14:27:59Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53982", "timeline": [{"oid": "310bda1dca331591ed55ef6df18ad812591fe0c2", "url": "https://github.com/elastic/elasticsearch/commit/310bda1dca331591ed55ef6df18ad812591fe0c2", "message": "Refactor AliasOrIndex abstraction.\n\nIn order to prepare the `AliasOrIndex` abstraction for the introduction of data streams,\nthe abstraction needs to be made more flexible, because currently it really can be only\nan alias or an index.\n\n* Introduced a `AliasOrIndex.Type` enum to indicate what a `AliasOrIndex` instance is.\n* Replaced the `isAlias()`` method that returns a boolean with the `getType()`` method that returns the new Type enum.\n* Moved `getWriteIndex()`` up from the `AliasOrIndex.Alias` to the `AliasOrIndex` interface.\n* Moved `g`etAliasName()`` up from the `AliasOrIndex.Alias` to the `AliasOrIndex` interface and renamed it to `getName()``.\n* Removed unnecessary casting to `AliasOrIndex.Alias` by just checking the `getType()`` method.\n\nFinally `AliasOrIndex` should be renamed to reflect that it can be more than just an index or alias, since\nin the near future it can also be a data stream. The name AliasOrIndexOrDataStream is not appealing to me.\nWe can rename it to `Namespace`, but that sounds to generic to me. `ResolvedIndicesExpression` sounds better\nto me, since it reflects more what it is (an expression from api that has been resolved to alias/index/datasteam),\nbut the name itself is a bit on the long side.\n\nRelates to #53100", "committedDate": "2020-03-23T14:25:21Z", "type": "commit"}, {"oid": "fdae62b30233bd5361ea505c50aec6df7168719e", "url": "https://github.com/elastic/elasticsearch/commit/fdae62b30233bd5361ea505c50aec6df7168719e", "message": "fixed checkstyle violation", "committedDate": "2020-03-23T15:02:44Z", "type": "commit"}, {"oid": "7a22b1972d22b3e8a51590f5baf75de86f0366ac", "url": "https://github.com/elastic/elasticsearch/commit/7a22b1972d22b3e8a51590f5baf75de86f0366ac", "message": "tweaked logic", "committedDate": "2020-03-24T11:51:35Z", "type": "commit"}, {"oid": "39086810d6e001714ab9e8052ca3812151a9dc97", "url": "https://github.com/elastic/elasticsearch/commit/39086810d6e001714ab9e8052ca3812151a9dc97", "message": "Merge remote-tracking branch 'es/master' into improve_alias_or_index_abstraction", "committedDate": "2020-03-24T13:44:56Z", "type": "commit"}, {"oid": "6d4eb8eef8afc8cce436fc397498de2c2c1b55d7", "url": "https://github.com/elastic/elasticsearch/commit/6d4eb8eef8afc8cce436fc397498de2c2c1b55d7", "message": "fixed compile error after merging in master", "committedDate": "2020-03-24T13:55:03Z", "type": "commit"}, {"oid": "a31b65d6012a8f2a0eac9cccbd0afb144eb2e490", "url": "https://github.com/elastic/elasticsearch/commit/a31b65d6012a8f2a0eac9cccbd0afb144eb2e490", "message": "renamed AliasOrIndex to IndexSpace and added jdocs", "committedDate": "2020-03-25T08:00:36Z", "type": "commit"}, {"oid": "146535bbd852c4f7ccfafbc759ac4e766059c1b3", "url": "https://github.com/elastic/elasticsearch/commit/146535bbd852c4f7ccfafbc759ac4e766059c1b3", "message": "Merge remote-tracking branch 'es/master' into improve_alias_or_index_abstraction", "committedDate": "2020-03-25T08:25:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDU1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397930557", "bodyText": "Looks like a lot of error messages such as this one that assume only alias or index types would benefit from wording changes that accommodate data streams, too.", "author": "danhermann", "createdAt": "2020-03-25T15:09:19Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java", "diffHunk": "@@ -263,16 +263,15 @@ static String generateRolloverIndexName(String sourceIndexName, IndexNameExpress\n     }\n \n     static void validate(MetaData metaData, RolloverRequest request) {\n-        final AliasOrIndex aliasOrIndex = metaData.getAliasAndIndexLookup().get(request.getAlias());\n-        if (aliasOrIndex == null) {\n+        final IndexSpace indexSpace = metaData.getAliasAndIndexLookup().get(request.getAlias());\n+        if (indexSpace == null) {\n             throw new IllegalArgumentException(\"source alias does not exist\");\n         }\n-        if (aliasOrIndex.isAlias() == false) {\n+        if (indexSpace.getType() != IndexSpace.Type.ALIAS) {\n             throw new IllegalArgumentException(\"source alias is a concrete index\");", "originalCommit": "146535bbd852c4f7ccfafbc759ac4e766059c1b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMzgyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397933825", "bodyText": "Good point. I will go over these checks and messages and adjust.", "author": "martijnvg", "createdAt": "2020-03-25T15:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMDU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "48084dd1808b405d1f5f56eae0f4b5f5267407ff", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java\nindex 00ebc7243e0..92e55280a3e 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java\n\n@@ -263,12 +263,12 @@ public class TransportRolloverAction extends TransportMasterNodeAction<RolloverR\n     }\n \n     static void validate(MetaData metaData, RolloverRequest request) {\n-        final IndexSpace indexSpace = metaData.getAliasAndIndexLookup().get(request.getAlias());\n+        final IndexSpace indexSpace = metaData.getIndexSpaceLookup().get(request.getAlias());\n         if (indexSpace == null) {\n             throw new IllegalArgumentException(\"source alias does not exist\");\n         }\n         if (indexSpace.getType() != IndexSpace.Type.ALIAS) {\n-            throw new IllegalArgumentException(\"source alias is a concrete index\");\n+            throw new IllegalArgumentException(\"source alias is not an alias\");\n         }\n         if (indexSpace.getWriteIndex() == null) {\n             throw new IllegalArgumentException(\"source alias [\" + indexSpace.getName() + \"] does not point to a write index\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDgzNw==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397934837", "bodyText": "We'll probably want to rename that variable from indexOrAlias. Can be done in a later PR, though.", "author": "danhermann", "createdAt": "2020-03-25T15:14:33Z", "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -281,18 +281,16 @@ static boolean resolvePipelines(final DocWriteRequest<?> originalRequest, final\n             IndexMetaData indexMetaData = metaData.indices().get(originalRequest.index());\n             // check the alias for the index request (this is how normal index requests are modeled)\n             if (indexMetaData == null && indexRequest.index() != null) {\n-                AliasOrIndex indexOrAlias = metaData.getAliasAndIndexLookup().get(indexRequest.index());\n-                if (indexOrAlias != null && indexOrAlias.isAlias()) {\n-                    AliasOrIndex.Alias alias = (AliasOrIndex.Alias) indexOrAlias;\n-                    indexMetaData = alias.getWriteIndex();\n+                IndexSpace indexOrAlias = metaData.getAliasAndIndexLookup().get(indexRequest.index());", "originalCommit": "146535bbd852c4f7ccfafbc759ac4e766059c1b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48084dd1808b405d1f5f56eae0f4b5f5267407ff", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java\nindex b108c183cdc..e2da3f57985 100644\n--- a/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java\n\n@@ -281,16 +281,16 @@ public class TransportBulkAction extends HandledTransportAction<BulkRequest, Bul\n             IndexMetaData indexMetaData = metaData.indices().get(originalRequest.index());\n             // check the alias for the index request (this is how normal index requests are modeled)\n             if (indexMetaData == null && indexRequest.index() != null) {\n-                IndexSpace indexOrAlias = metaData.getAliasAndIndexLookup().get(indexRequest.index());\n-                if (indexOrAlias != null) {\n-                    indexMetaData = indexOrAlias.getWriteIndex();\n+                IndexSpace indexSpace = metaData.getIndexSpaceLookup().get(indexRequest.index());\n+                if (indexSpace != null) {\n+                    indexMetaData = indexSpace.getWriteIndex();\n                 }\n             }\n             // check the alias for the action request (this is how upserts are modeled)\n             if (indexMetaData == null && originalRequest.index() != null) {\n-                IndexSpace indexOrAlias = metaData.getAliasAndIndexLookup().get(originalRequest.index());\n-                if (indexOrAlias != null) {\n-                    indexMetaData = indexOrAlias.getWriteIndex();\n+                IndexSpace indexSpace = metaData.getIndexSpaceLookup().get(originalRequest.index());\n+                if (indexSpace != null) {\n+                    indexMetaData = indexSpace.getWriteIndex();\n                 }\n             }\n             if (indexMetaData != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNjUzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397936535", "bodyText": "nit: \"may be therefor also be returned\" -> \"may therefore also be returned\"", "author": "danhermann", "createdAt": "2020-03-25T15:16:45Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexSpace.java", "diffHunk": "@@ -35,30 +34,68 @@\n import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_HIDDEN_SETTING;\n \n /**\n- * Encapsulates the  {@link IndexMetaData} instances of a concrete index or indices an alias is pointing to.\n+ * An index space is a reference to one or more concrete indices.\n+ * An index space has a unique name and encapsulates all the  {@link IndexMetaData} instances it is pointing to.\n+ * Also depending on type it may refer to a single or many concrete indices and may or may not have a write index.\n  */\n-public interface AliasOrIndex {\n+public interface IndexSpace {\n+\n+    /**\n+     * @return the type of the index space\n+     */\n+    Type getType();\n \n     /**\n-     * @return whether this an alias or concrete index\n+     * @return the name of the index space\n      */\n-    boolean isAlias();\n+    String getName();\n \n     /**\n-     * @return All {@link IndexMetaData} of all concrete indices this alias is referring to\n-     * or if this is a concrete index its {@link IndexMetaData}\n+     * @return All {@link IndexMetaData} of all concrete indices this index space is referring to.\n      */\n     List<IndexMetaData> getIndices();\n \n     /**\n-     * @return whether this alias/index is hidden or not\n+     * A write index is a dedicated concrete index, that accepts all the new documents that belong to an index space.\n+     *\n+     * A write index may also be a regular concrete index of a index space and may be therefor also be returned", "originalCommit": "146535bbd852c4f7ccfafbc759ac4e766059c1b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48084dd1808b405d1f5f56eae0f4b5f5267407ff", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexSpace.java b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexSpace.java\nindex 0e025022fa2..2f82544dd41 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexSpace.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexSpace.java\n\n@@ -58,7 +58,7 @@ public interface IndexSpace {\n     /**\n      * A write index is a dedicated concrete index, that accepts all the new documents that belong to an index space.\n      *\n-     * A write index may also be a regular concrete index of a index space and may be therefor also be returned\n+     * A write index may also be a regular concrete index of a index space and may therefore also be returned\n      * by {@link #getIndices()}. An index space may also not have a dedicated write index.\n      *\n      * @return the write index of this index space or\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0Mjg4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r397942883", "bodyText": "Will we want to eventually rename this class to something like IndexSpaceResolver?", "author": "danhermann", "createdAt": "2020-03-25T15:24:37Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java", "diffHunk": "@@ -14,7 +14,7 @@\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.support.IndicesOptions;\n import org.elasticsearch.cluster.metadata.AliasMetaData;\n-import org.elasticsearch.cluster.metadata.AliasOrIndex;\n+import org.elasticsearch.cluster.metadata.IndexSpace;", "originalCommit": "146535bbd852c4f7ccfafbc759ac4e766059c1b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyOTc0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r398429746", "bodyText": "Yes, I think so.", "author": "martijnvg", "createdAt": "2020-03-26T09:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0Mjg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ea803a2ab6d6b06afecd86a41e5382d5451ed092", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java\nindex 0c207b06767..9fbb8ac738d 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java\n\n@@ -14,7 +14,7 @@ import org.elasticsearch.action.fieldcaps.FieldCapabilitiesRequest;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.support.IndicesOptions;\n import org.elasticsearch.cluster.metadata.AliasMetaData;\n-import org.elasticsearch.cluster.metadata.IndexSpace;\n+import org.elasticsearch.cluster.metadata.IndexAbstraction;\n import org.elasticsearch.cluster.metadata.IndexMetaData;\n import org.elasticsearch.cluster.metadata.IndexMetaData.State;\n import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n"}}, {"oid": "d6c053c06525a99834933ec5ccfe3a5336eadc12", "url": "https://github.com/elastic/elasticsearch/commit/d6c053c06525a99834933ec5ccfe3a5336eadc12", "message": "Merge remote-tracking branch 'es/master' into improve_alias_or_index_abstraction", "committedDate": "2020-03-26T08:58:46Z", "type": "commit"}, {"oid": "48084dd1808b405d1f5f56eae0f4b5f5267407ff", "url": "https://github.com/elastic/elasticsearch/commit/48084dd1808b405d1f5f56eae0f4b5f5267407ff", "message": "applied review comments and\nrenamed `MetaData#aliasAndIndexLookup` field (and getter) to `MetaData#indexSpaceLookup`.", "committedDate": "2020-03-26T09:39:34Z", "type": "commit"}, {"oid": "c81a77f3ba4e29efd858c106f17462b526cd27c8", "url": "https://github.com/elastic/elasticsearch/commit/c81a77f3ba4e29efd858c106f17462b526cd27c8", "message": "Merge remote-tracking branch 'es/master' into improve_alias_or_index_abstraction", "committedDate": "2020-03-27T09:13:18Z", "type": "commit"}, {"oid": "ae07254ab01991f3d0f0a9ea375c3fc062722c56", "url": "https://github.com/elastic/elasticsearch/commit/ae07254ab01991f3d0f0a9ea375c3fc062722c56", "message": "changed MetDataRolloverService to use IndexSpace after merge\nand fixed test", "committedDate": "2020-03-27T09:21:39Z", "type": "commit"}, {"oid": "ea803a2ab6d6b06afecd86a41e5382d5451ed092", "url": "https://github.com/elastic/elasticsearch/commit/ea803a2ab6d6b06afecd86a41e5382d5451ed092", "message": "renamed IndexSpace to IndexAbstraction", "committedDate": "2020-03-27T10:15:50Z", "type": "commit"}, {"oid": "cabb45e5673033f7b679c766e3d5b46c43f9fe9b", "url": "https://github.com/elastic/elasticsearch/commit/cabb45e5673033f7b679c766e3d5b46c43f9fe9b", "message": "tweaked checks to also work if more index abstraction types are introduced.", "committedDate": "2020-03-27T10:36:12Z", "type": "commit"}, {"oid": "5c47b68fe8a9ee666db7a6d0408667712fb831d7", "url": "https://github.com/elastic/elasticsearch/commit/5c47b68fe8a9ee666db7a6d0408667712fb831d7", "message": "List.of(...) everywhere", "committedDate": "2020-03-27T10:36:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4ODU1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399188551", "bodyText": "Remove \"Space\" from variable name?", "author": "henningandersen", "createdAt": "2020-03-27T11:06:58Z", "path": "plugins/examples/security-authorization-engine/src/test/java/org/elasticsearch/example/CustomAuthorizationEngineTests.java", "diffHunk": "@@ -130,8 +130,8 @@ public void testAuthorizeClusterAction() {\n \n     public void testAuthorizeIndexAction() {\n         CustomAuthorizationEngine engine = new CustomAuthorizationEngine();\n-        Map<String, AliasOrIndex> aliasOrIndexMap = new HashMap<>();\n-        aliasOrIndexMap.put(\"index\", new Index(IndexMetaData.builder(\"index\")\n+        Map<String, IndexAbstraction> indexSpaceMap = new HashMap<>();", "originalCommit": "5c47b68fe8a9ee666db7a6d0408667712fb831d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6c9e97fddf81ac291926988a1f0b6c354064823", "chunk": "diff --git a/plugins/examples/security-authorization-engine/src/test/java/org/elasticsearch/example/CustomAuthorizationEngineTests.java b/plugins/examples/security-authorization-engine/src/test/java/org/elasticsearch/example/CustomAuthorizationEngineTests.java\nindex 11f8127a3f2..b9d0495b247 100644\n--- a/plugins/examples/security-authorization-engine/src/test/java/org/elasticsearch/example/CustomAuthorizationEngineTests.java\n+++ b/plugins/examples/security-authorization-engine/src/test/java/org/elasticsearch/example/CustomAuthorizationEngineTests.java\n\n@@ -130,8 +130,8 @@ public class CustomAuthorizationEngineTests extends ESTestCase {\n \n     public void testAuthorizeIndexAction() {\n         CustomAuthorizationEngine engine = new CustomAuthorizationEngine();\n-        Map<String, IndexAbstraction> indexSpaceMap = new HashMap<>();\n-        indexSpaceMap.put(\"index\", new Index(IndexMetaData.builder(\"index\")\n+        Map<String, IndexAbstraction> indicesMap = new HashMap<>();\n+        indicesMap.put(\"index\", new Index(IndexMetaData.builder(\"index\")\n             .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT))\n             .numberOfShards(1)\n             .numberOfReplicas(0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwMTM0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399201346", "bodyText": "nit: also verify type (since we no longer do the cast).", "author": "henningandersen", "createdAt": "2020-03-27T11:32:42Z", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java", "diffHunk": "@@ -341,7 +341,7 @@ public void testRolloverClusterState() throws Exception {\n             IndexMetaData rolloverIndexMetaData = rolloverMetaData.index(newIndexName);\n             assertThat(rolloverIndexMetaData.getNumberOfShards(), equalTo(numberOfShards));\n \n-            AliasOrIndex.Alias alias = (AliasOrIndex.Alias) rolloverMetaData.getAliasAndIndexLookup().get(aliasName);\n+            IndexAbstraction alias = rolloverMetaData.getIndicesLookup().get(aliasName);", "originalCommit": "5c47b68fe8a9ee666db7a6d0408667712fb831d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6c9e97fddf81ac291926988a1f0b6c354064823", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java b/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java\nindex 7282e355247..86315196845 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java\n\n@@ -342,6 +342,7 @@ public class MetaDataRolloverServiceTests extends ESTestCase {\n             assertThat(rolloverIndexMetaData.getNumberOfShards(), equalTo(numberOfShards));\n \n             IndexAbstraction alias = rolloverMetaData.getIndicesLookup().get(aliasName);\n+            assertThat(alias.getType(), equalTo(IndexAbstraction.Type.ALIAS));\n             assertThat(alias.getIndices(), hasSize(2));\n             assertThat(alias.getIndices(), hasItem(rolloverMetaData.index(sourceIndexName)));\n             assertThat(alias.getIndices(), hasItem(rolloverIndexMetaData));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNTA0MA==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399215040", "bodyText": "I think the change to the exception message is not really a big issue. But with data streams also appearing, it could be nice to stick to the old message since that would give you some information on whether it is a datastream or concrete index. I think we could easily generate such a message by adding a display name (\"concrete index\") to the IndexAbstract.Type enum?\nAlso, this does make me wonder if Type.INDEX should be Type.CONCRETE_INDEX for consistency with that display name? Not truly important to me, feel free to ignore this part.", "author": "henningandersen", "createdAt": "2020-03-27T12:00:41Z", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java", "diffHunk": "@@ -212,7 +212,7 @@ public void testValidation() {\n         assertThat(exception.getMessage(), equalTo(\"source alias [\" + aliasWithNoWriteIndex + \"] does not point to a write index\"));\n         exception = expectThrows(IllegalArgumentException.class, () ->\n             MetaDataRolloverService.validate(metaData, randomFrom(index1, index2)));\n-        assertThat(exception.getMessage(), equalTo(\"source alias is a concrete index\"));\n+        assertThat(exception.getMessage(), equalTo(\"source alias is not an alias\"));", "originalCommit": "5c47b68fe8a9ee666db7a6d0408667712fb831d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6c9e97fddf81ac291926988a1f0b6c354064823", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java b/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java\nindex 7282e355247..86315196845 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java\n\n@@ -212,7 +212,7 @@ public class MetaDataRolloverServiceTests extends ESTestCase {\n         assertThat(exception.getMessage(), equalTo(\"source alias [\" + aliasWithNoWriteIndex + \"] does not point to a write index\"));\n         exception = expectThrows(IllegalArgumentException.class, () ->\n             MetaDataRolloverService.validate(metaData, randomFrom(index1, index2)));\n-        assertThat(exception.getMessage(), equalTo(\"source alias is not an alias\"));\n+        assertThat(exception.getMessage(), equalTo(\"source alias is a [concrete index], but an [alias] was expected\"));\n         exception = expectThrows(IllegalArgumentException.class, () ->\n             MetaDataRolloverService.validate(metaData, randomAlphaOfLength(5))\n         );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNzE4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399217187", "bodyText": "Same comment on retaining the original message here.", "author": "henningandersen", "createdAt": "2020-03-27T12:05:03Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProviderIndex.java", "diffHunk": "@@ -187,11 +187,11 @@ public void close() {\n         clusterService.removeListener(clusterStateListener);\n     }\n \n-    private void logChangedAliasState(AliasOrIndex aliasInfo) {\n+    private void logChangedAliasState(IndexAbstraction aliasInfo) {\n         if (aliasInfo == null) {\n             logger.warn(\"service provider index/alias [{}] no longer exists\", ALIAS_NAME);\n-        } else if (aliasInfo.isAlias() == false) {\n-            logger.warn(\"service provider index [{}] exists as a concrete index, but it should be an alias\", ALIAS_NAME);\n+        } else if (aliasInfo.getType() != IndexAbstraction.Type.ALIAS) {\n+            logger.warn(\"service provider index [{}] does not exist as an alias, but it should be\", ALIAS_NAME);", "originalCommit": "5c47b68fe8a9ee666db7a6d0408667712fb831d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxNzcxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399217719", "bodyText": "Remove \"Space\" from variable name?", "author": "henningandersen", "createdAt": "2020-03-27T12:06:13Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlConfigMigratorIT.java", "diffHunk": "@@ -83,8 +83,8 @@ public void setUpTests() {\n         ClusterSettings clusterSettings = new ClusterSettings(nodeSettings(), new HashSet<>(Collections.singletonList(\n                 MlConfigMigrationEligibilityCheck.ENABLE_CONFIG_MIGRATION)));\n         MetaData metaData = mock(MetaData.class);\n-        SortedMap<String, AliasOrIndex> aliasOrIndexSortedMap = new TreeMap<>();\n-        when(metaData.getAliasAndIndexLookup()).thenReturn(aliasOrIndexSortedMap);\n+        SortedMap<String, IndexAbstraction> indexSpaceSortedMap = new TreeMap<>();", "originalCommit": "5c47b68fe8a9ee666db7a6d0408667712fb831d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6c9e97fddf81ac291926988a1f0b6c354064823", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlConfigMigratorIT.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlConfigMigratorIT.java\nindex 3b69b148159..a45574331b6 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlConfigMigratorIT.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlConfigMigratorIT.java\n\n@@ -83,8 +83,8 @@ public class MlConfigMigratorIT extends MlSingleNodeTestCase {\n         ClusterSettings clusterSettings = new ClusterSettings(nodeSettings(), new HashSet<>(Collections.singletonList(\n                 MlConfigMigrationEligibilityCheck.ENABLE_CONFIG_MIGRATION)));\n         MetaData metaData = mock(MetaData.class);\n-        SortedMap<String, IndexAbstraction> indexSpaceSortedMap = new TreeMap<>();\n-        when(metaData.getIndicesLookup()).thenReturn(indexSpaceSortedMap);\n+        SortedMap<String, IndexAbstraction> indicesMap = new TreeMap<>();\n+        when(metaData.getIndicesLookup()).thenReturn(indicesMap);\n         ClusterState clusterState = mock(ClusterState.class);\n         when(clusterState.getMetaData()).thenReturn(metaData);\n         when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODI4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53982#discussion_r399218285", "bodyText": "I think we should also include the display name of the actual type here.", "author": "henningandersen", "createdAt": "2020-03-27T12:07:21Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java", "diffHunk": "@@ -228,12 +228,12 @@ static String getPutMappingIndexOrAlias(PutMappingRequest request, List<String>\n         final String concreteIndexName = request.getConcreteIndex().getName();\n \n         // validate that the concrete index exists, otherwise there is no remapping that we could do\n-        final AliasOrIndex aliasOrIndex = metaData.getAliasAndIndexLookup().get(concreteIndexName);\n+        final IndexAbstraction indexAbstraction = metaData.getIndicesLookup().get(concreteIndexName);\n         final String resolvedAliasOrIndex;\n-        if (aliasOrIndex == null) {\n+        if (indexAbstraction == null) {\n             resolvedAliasOrIndex = concreteIndexName;\n-        } else if (aliasOrIndex.isAlias()) {\n-            throw new IllegalStateException(\"concrete index [\" + concreteIndexName + \"] is an alias but should not be\");\n+        } else if (indexAbstraction.getType() != IndexAbstraction.Type.INDEX) {\n+            throw new IllegalStateException(\"concrete index [\" + concreteIndexName + \"] is not an index but should be\");", "originalCommit": "5c47b68fe8a9ee666db7a6d0408667712fb831d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6c9e97fddf81ac291926988a1f0b6c354064823", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java\nindex 9fbb8ac738d..c92bed06da0 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java\n\n@@ -232,8 +232,9 @@ class IndicesAndAliasesResolver {\n         final String resolvedAliasOrIndex;\n         if (indexAbstraction == null) {\n             resolvedAliasOrIndex = concreteIndexName;\n-        } else if (indexAbstraction.getType() != IndexAbstraction.Type.INDEX) {\n-            throw new IllegalStateException(\"concrete index [\" + concreteIndexName + \"] is not an index but should be\");\n+        } else if (indexAbstraction.getType() != IndexAbstraction.Type.CONCRETE_INDEX) {\n+            throw new IllegalStateException(\"concrete index [\" + concreteIndexName + \"] is a [\" +\n+                indexAbstraction.getType().getDisplayName() + \"], but a concrete index is expected\");\n         } else if (authorizedIndicesList.contains(concreteIndexName)) {\n             // user is authorized to put mappings for this index\n             resolvedAliasOrIndex = concreteIndexName;\n"}}, {"oid": "57ffeafdaf631901ae7d6f0e029d32836ec1d05a", "url": "https://github.com/elastic/elasticsearch/commit/57ffeafdaf631901ae7d6f0e029d32836ec1d05a", "message": "Merge remote-tracking branch 'es/master' into improve_alias_or_index_abstraction", "committedDate": "2020-03-27T13:04:44Z", "type": "commit"}, {"oid": "f6c9e97fddf81ac291926988a1f0b6c354064823", "url": "https://github.com/elastic/elasticsearch/commit/f6c9e97fddf81ac291926988a1f0b6c354064823", "message": "iter", "committedDate": "2020-03-27T13:19:52Z", "type": "commit"}, {"oid": "2252334d55a17a7fe66d317cfc6953776cdaf795", "url": "https://github.com/elastic/elasticsearch/commit/2252334d55a17a7fe66d317cfc6953776cdaf795", "message": "fixed checkstyle violation", "committedDate": "2020-03-27T15:09:36Z", "type": "commit"}, {"oid": "90f6a2dada8fa2eee1ab96e31e9c0fe92d58c78b", "url": "https://github.com/elastic/elasticsearch/commit/90f6a2dada8fa2eee1ab96e31e9c0fe92d58c78b", "message": "fixed checkstyle violation (2)", "committedDate": "2020-03-27T15:23:28Z", "type": "commit"}]}