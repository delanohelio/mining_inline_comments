{"pr_number": 55623, "pr_title": "Let realms gracefully terminate the authN chain", "pr_createdAt": "2020-04-22T19:49:01Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55623", "timeline": [{"oid": "cfb58bdbeaed3cb49a0f8c76bcc57b823b555706", "url": "https://github.com/elastic/elasticsearch/commit/cfb58bdbeaed3cb49a0f8c76bcc57b823b555706", "message": "No test", "committedDate": "2020-04-22T19:08:15Z", "type": "commit"}, {"oid": "7384532f7d757f8b7a615fbe7742a82f1789bad9", "url": "https://github.com/elastic/elasticsearch/commit/7384532f7d757f8b7a615fbe7742a82f1789bad9", "message": "And the tests", "committedDate": "2020-04-22T20:31:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ1MDE0NA==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r413450144", "bodyText": "I didn't test, but the same goal could be achieved by calling userListener.onResponse(null) in the else block, i.e.:\nif (result.getException() != null) {\n    ...\n} else {\n   ...\n   userListener.onResponse(null);\n}\nThis leverages the existing logic inside consumeUser so that changes to the following IteratingActionListener's error handler is not needed. I personally feels this would be simpler and easy to reason about.", "author": "ywangd", "createdAt": "2020-04-23T01:50:14Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n+                                                        result.getMessage()), result.getException());\n+                                    } else {\n+                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage());\n+                                    }\n+                                    userListener.onFailure(result.getException());", "originalCommit": "7384532f7d757f8b7a615fbe7742a82f1789bad9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MDQ4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r413550481", "bodyText": "Nope. If you call userListener.onResponse(null) the IteratingActionListener goes through on to the next realm in the chain, which is exactly what AuthenticationResult.Status.TERMINATE should prevent.", "author": "albertzaharovits", "createdAt": "2020-04-23T06:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ1MDE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNjQ0OA==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r413606448", "bodyText": "You are absolutely correct. Sorry I mis-read the logic.", "author": "ywangd", "createdAt": "2020-04-23T08:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ1MDE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "24d85304b4bfe4030ced90ab5c73009b1c286ed4", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\nindex 2a142ec1ca0..6bdb5f1f74e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n\n@@ -463,11 +466,11 @@ public class AuthenticationService {\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n                                     if (result.getException() != null) {\n-                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n-                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n-                                                        result.getMessage()), result.getException());\n+                                        logger.info(new ParameterizedMessage(\n+                                                \"Authentication of [{}] was terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage()), result.getException());\n                                     } else {\n-                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                        logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n                                                 authenticationToken.principal(), realm.name(), result.getMessage());\n                                     }\n                                     userListener.onFailure(result.getException());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxMzA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r413613085", "bodyText": "This is more of a question: why were token and authenticationToken both used in differently places? Should we prefer one over the other?", "author": "ywangd", "createdAt": "2020-04-23T08:22:25Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -488,7 +492,13 @@ private void consumeToken(AuthenticationToken token) {\n                 final IteratingActionListener<User, Realm> authenticatingListener =\n                     new IteratingActionListener<>(ContextPreservingActionListener.wrapPreservingContext(ActionListener.wrap(\n                         (user) -> consumeUser(user, messages),\n-                        (e) -> listener.onFailure(request.exceptionProcessingRequest(e, token))), threadContext),\n+                        (e) -> {\n+                            if (e != null) {\n+                                listener.onFailure(request.exceptionProcessingRequest(e, token));\n+                            } else {\n+                                listener.onFailure(request.authenticationFailed(authenticationToken));", "originalCommit": "7384532f7d757f8b7a615fbe7742a82f1789bad9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NTMwMA==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r417095300", "bodyText": "\ud83d\udc4d I think we should be consistent here.", "author": "tvernum", "createdAt": "2020-04-29T06:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxMzA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM0NzYwNg==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r419347606", "bodyText": "This now uses token in both instances.\nIt's probably more idiomatic like this. If you feel otherwise let me know.", "author": "albertzaharovits", "createdAt": "2020-05-04T10:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxMzA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "24d85304b4bfe4030ced90ab5c73009b1c286ed4", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\nindex 2a142ec1ca0..6bdb5f1f74e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n\n@@ -496,7 +499,7 @@ public class AuthenticationService {\n                             if (e != null) {\n                                 listener.onFailure(request.exceptionProcessingRequest(e, token));\n                             } else {\n-                                listener.onFailure(request.authenticationFailed(authenticationToken));\n+                                listener.onFailure(request.authenticationFailed(token));\n                             }\n                         }), threadContext),\n                         realmAuthenticatingConsumer, realmsList, threadContext);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5MzQ1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r417093456", "bodyText": "Nit, can we avoid unnecessarily splitting string literals over multiple lines\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n          \n          \n            \n                                                                    \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n          \n          \n            \n                                                    logger.info(new ParameterizedMessage(\n          \n          \n            \n                                                        \"Authentication of [{}] was exceptionally terminated by realm [{}] - {}\",\n          \n          \n            \n                                                        authenticationToken.principal(), realm.name(),", "author": "tvernum", "createdAt": "2020-04-29T06:32:35Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),", "originalCommit": "7384532f7d757f8b7a615fbe7742a82f1789bad9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24d85304b4bfe4030ced90ab5c73009b1c286ed4", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\nindex 2a142ec1ca0..6bdb5f1f74e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n\n@@ -463,11 +466,11 @@ public class AuthenticationService {\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n                                     if (result.getException() != null) {\n-                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n-                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n-                                                        result.getMessage()), result.getException());\n+                                        logger.info(new ParameterizedMessage(\n+                                                \"Authentication of [{}] was terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage()), result.getException());\n                                     } else {\n-                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                        logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n                                                 authenticationToken.principal(), realm.name(), result.getMessage());\n                                     }\n                                     userListener.onFailure(result.getException());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5Mzc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r417093757", "bodyText": "I don't think exceptionally and gracefully are accurate descriptions. In one case an exception was provided, and in another it wasn't but it doesn't follow that one is graceful and the other isn't.", "author": "tvernum", "createdAt": "2020-04-29T06:33:28Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n+                                                        result.getMessage()), result.getException());\n+                                    } else {\n+                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",", "originalCommit": "7384532f7d757f8b7a615fbe7742a82f1789bad9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MDU1OA==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r419350558", "bodyText": "One code path amounts to calling request.exceptionProcessingRequest while the other calls request.authenticationFailed, albeit not in the same place where the gracefully/exceptionally terminology is being used.\nOne is more abrupt than the other.\nI'm open to any suggestion wrt to terminology. For now I've removed both these keywords from the log lines.", "author": "albertzaharovits", "createdAt": "2020-05-04T10:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5Mzc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "24d85304b4bfe4030ced90ab5c73009b1c286ed4", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\nindex 2a142ec1ca0..6bdb5f1f74e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n\n@@ -463,11 +466,11 @@ public class AuthenticationService {\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n                                     if (result.getException() != null) {\n-                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n-                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n-                                                        result.getMessage()), result.getException());\n+                                        logger.info(new ParameterizedMessage(\n+                                                \"Authentication of [{}] was terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage()), result.getException());\n                                     } else {\n-                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                        logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n                                                 authenticationToken.principal(), realm.name(), result.getMessage());\n                                     }\n                                     userListener.onFailure(result.getException());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDMzMA==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r417094330", "bodyText": "It seems weird to have an onFailure with a possibly null exception. I get that it's handled correctly below, but can't it be handled here and be more idiomatic?", "author": "tvernum", "createdAt": "2020-04-29T06:35:01Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java", "diffHunk": "@@ -462,11 +462,15 @@ private void consumeToken(AuthenticationToken token) {\n                                 // the user was not authenticated, call this so we can audit the correct event\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n-                                    logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n-                                        authenticationToken.principal(), realm.name(), result.getMessage());\n-                                    Exception e = (result.getException() != null) ? result.getException()\n-                                        : Exceptions.authenticationError(result.getMessage());\n-                                    userListener.onFailure(e);\n+                                    if (result.getException() != null) {\n+                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n+                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n+                                                        result.getMessage()), result.getException());\n+                                    } else {\n+                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage());\n+                                    }\n+                                    userListener.onFailure(result.getException());", "originalCommit": "7384532f7d757f8b7a615fbe7742a82f1789bad9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2MDI5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r419360296", "bodyText": "Subjectively, I don't see a better way.\nThe only way we can signal that this is a case of authenticationFailed as opposed to a case of exceptionProcessingRequest is through the value of the onFailure handler. Instead of the null thing, we can fill in a static exception value that codes the null value, i.e.\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n@@ -77,6 +77,7 @@ public class AuthenticationService {\n         Setting.intSetting(\"xpack.security.authc.success_cache.size\", 10000, Property.NodeScope);\n     private static final Setting<TimeValue> SUCCESS_AUTH_CACHE_EXPIRE_AFTER_ACCESS =\n         Setting.timeSetting(\"xpack.security.authc.success_cache.expire_after_access\", TimeValue.timeValueHours(1L), Property.NodeScope);\n+    private static final Exception AUTHN_TERMINATED_NO_EXCEPTION = Exceptions.authenticationError(\"Authn terminated\");\n     private static final Logger logger = LogManager.getLogger(AuthenticationService.class);\n\n     private final Realms realms;\n@@ -469,11 +470,12 @@ public class AuthenticationService {\n                                         logger.info(new ParameterizedMessage(\n                                                 \"Authentication of [{}] was terminated by realm [{}] - {}\",\n                                                 authenticationToken.principal(), realm.name(), result.getMessage()), result.getException());\n+                                        userListener.onFailure(result.getException());\n                                     } else {\n                                         logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n                                                 authenticationToken.principal(), realm.name(), result.getMessage());\n+                                        userListener.onFailure(AUTHN_TERMINATED_NO_EXCEPTION);\n                                     }\n-                                    userListener.onFailure(result.getException());\n                                 } else {\n                                     if (result.getMessage() != null) {\n                                         messages.put(realm, new Tuple<>(result.getMessage(), result.getException()));\n@@ -496,7 +498,7 @@ public class AuthenticationService {\n                     new IteratingActionListener<>(ContextPreservingActionListener.wrapPreservingContext(ActionListener.wrap(\n                         (user) -> consumeUser(user, messages),\n                         (e) -> {\n-                            if (e != null) {\n+                            if (e != AUTHN_TERMINATED_NO_EXCEPTION) {\n                                 listener.onFailure(request.exceptionProcessingRequest(e, token));\n                             } else {\n                                 listener.onFailure(request.authenticationFailed(token));\n\nI personally prefer the null value to flag values like these ones.\nIf you or @ywangd  think otherwise, I'll go with that.", "author": "albertzaharovits", "createdAt": "2020-05-04T11:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDMzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxOTkzNA==", "url": "https://github.com/elastic/elasticsearch/pull/55623#discussion_r419419934", "bodyText": "I would choose null over the static exception as well. Afterall, the original error from ReservedRealm is null.\nAlternatively, if we wanna have some brainstorming here, we could give the IteratingActionListener a non-default iterationPredicate so it can terminate earlier even with a null user response, e.g. something like the follows:\nfinal AtomicBoolean terminated = new AtomicBoolean(false);\nfinal BiConsumer<Realm, ActionListener<User>> realmAuthenticatingConsumer = (realm, userListener) -> {\n   ...\n   if (request.getException() == null) {\n        logger.info(...);\n        terminated.set(true);\n        userListener.onResponse(null)\n   } else {\n        logger.info(...);\n        userListener.onFailure(request.getException());\n   }\n   ...\n};\n...\nfinal IteratingActionListener<User, Realm> authenticatingListener =\n    new IteratingActionListener<>(..., \n        Function.identity(), \n        user -> Objects.isNull(user) && terminated.get() == false);\nYet another option is to have a static NOT_AUTHENTICATED_USER object as a static field in User class and use it to signal earlier termination:\n   if (request.getException() == null) {\n        logger.info(...);\n        userListener.onResponse(User.NOT_AUTHENTICATED_USER)\n   } else {\n        logger.info(...);\n        userListener.onFailure(request.getException());\n   }\nIn consumeUser(), we will then need to check both null and this object, i.e.\nif (user == null || user == User.NOT_AUTHENTICATED_USER) { ... }\nOr we could give IteratingActionListener a transform function of response -> null ? User.NOT_AUTHENTICATED_USER : response so that consumeUser() can drop the null check.\nBoth of the alternatives reuse the logic in consumeUser, but add complexity elsewhere. I don't think they are better, just different choices. I personally would probably go with the static User field approach, but the null exception approach is fine with me.", "author": "ywangd", "createdAt": "2020-05-04T13:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NDMzMA=="}], "type": "inlineReview", "revised_code": {"commit": "24d85304b4bfe4030ced90ab5c73009b1c286ed4", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\nindex 2a142ec1ca0..6bdb5f1f74e 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java\n\n@@ -463,11 +466,11 @@ public class AuthenticationService {\n                                 request.realmAuthenticationFailed(authenticationToken, realm.name());\n                                 if (result.getStatus() == AuthenticationResult.Status.TERMINATE) {\n                                     if (result.getException() != null) {\n-                                        logger.info(new ParameterizedMessage(\"Authentication of [{}] was exceptionally terminated by \" +\n-                                                        \"realm [{}] - {}\", authenticationToken.principal(), realm.name(),\n-                                                        result.getMessage()), result.getException());\n+                                        logger.info(new ParameterizedMessage(\n+                                                \"Authentication of [{}] was terminated by realm [{}] - {}\",\n+                                                authenticationToken.principal(), realm.name(), result.getMessage()), result.getException());\n                                     } else {\n-                                        logger.info(\"Authentication of [{}] was gracefully terminated by realm [{}] - {}\",\n+                                        logger.info(\"Authentication of [{}] was terminated by realm [{}] - {}\",\n                                                 authenticationToken.principal(), realm.name(), result.getMessage());\n                                     }\n                                     userListener.onFailure(result.getException());\n"}}, {"oid": "3465cf0eb3e5d8f00fddd0330d87cfc4d16f06ff", "url": "https://github.com/elastic/elasticsearch/commit/3465cf0eb3e5d8f00fddd0330d87cfc4d16f06ff", "message": "Merge branch 'master' into authn_chain_gracefull_terminate", "committedDate": "2020-05-04T09:40:16Z", "type": "commit"}, {"oid": "24d85304b4bfe4030ced90ab5c73009b1c286ed4", "url": "https://github.com/elastic/elasticsearch/commit/24d85304b4bfe4030ced90ab5c73009b1c286ed4", "message": "Review", "committedDate": "2020-05-04T10:35:04Z", "type": "commit"}]}