{"pr_number": 61504, "pr_title": "Convert double script to return array", "pr_createdAt": "2020-08-24T20:14:54Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61504", "timeline": [{"oid": "620946d5e4f9cbbf0d80b846f816d67920f76613", "url": "https://github.com/elastic/elasticsearch/commit/620946d5e4f9cbbf0d80b846f816d67920f76613", "message": "Convert double script to return array\n\nThis replaces the value collection method in `double` valued runtime\nscript fields with simply returning a `double[]`. Painless has some\n\"convert\" features that allow us to define automatic conversions from\nthings like `double` and `Collection` into `double[]` so we use those.", "committedDate": "2020-08-24T20:15:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2Nzk2OA==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475867968", "bodyText": "The if is temporary and it'll become all the time once it is done.", "author": "nik9000", "createdAt": "2020-08-24T20:15:29Z", "path": "x-pack/plugin/runtime-fields/qa/rest/src/yamlRestTest/java/org/elasticsearch/xpack/runtimefields/rest/CoreTestsWithRuntimeFieldsIT.java", "diffHunk": "@@ -166,6 +166,9 @@ private static String painlessToLoadFromSource(String name, String type) {\n             return null;\n         }\n         StringBuilder b = new StringBuilder();\n+        if (\"double\".equals(type)) {", "originalCommit": "620946d5e4f9cbbf0d80b846f816d67920f76613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2ODI3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475868279", "bodyText": "Because I'm only doing one of them I have to move the old execute method decalarations into the subclasses.", "author": "nik9000", "createdAt": "2020-08-24T20:16:05Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/AbstractLongScriptFieldScript.java", "diffHunk": "@@ -23,6 +23,8 @@ public AbstractLongScriptFieldScript(Map<String, Object> params, SearchLookup se\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract void execute();", "originalCommit": "620946d5e4f9cbbf0d80b846f816d67920f76613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2ODgzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r475868835", "bodyText": "We don't need the count any more because we use the whole array.", "author": "nik9000", "createdAt": "2020-08-24T20:17:10Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/query/AbstractDoubleScriptFieldQuery.java", "diffHunk": "@@ -36,7 +36,7 @@\n     /**\n      * Does the value match this query?\n      */\n-    protected abstract boolean matches(double[] values, int count);\n+    protected abstract boolean matches(double[] values);", "originalCommit": "620946d5e4f9cbbf0d80b846f816d67920f76613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476462930", "bodyText": "oh boy I was hoping we would not need this sort of stuff, but I guess we do? I mean the instanceof as well as the cast to double array", "author": "javanna", "createdAt": "2020-08-25T13:49:12Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,38 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {\n+        return new double[] { v };\n     }\n \n-    /**\n-     * The number of results produced the last time {@link #runForDoc(int)} was called.\n-     */\n-    public final int count() {\n-        return count;\n-    }\n-\n-    private void collectValue(double v) {\n-        if (values.length < count + 1) {\n-            values = ArrayUtil.grow(values, count + 1);\n+    public static double[] convertFromCollection(Collection<?> v) {\n+        double[] result = new double[v.size()];\n+        int i = 0;\n+        for (Object o : v) {\n+            result[i++] = ((Number) o).doubleValue();\n         }\n-        values[count++] = v;\n+        return result;\n     }\n \n-    public static class Value {\n-        private final DoubleScriptFieldScript script;\n-\n-        public Value(DoubleScriptFieldScript script) {\n-            this.script = script;\n-        }\n-\n-        public void value(double v) {\n-            script.collectValue(v);\n+    public static double[] convertFromDef(Object o) {\n+        if (o instanceof Double) {\n+            return convertFromDouble(((Double) o).doubleValue());\n+        } else {\n+            return (double[]) o;", "originalCommit": "620946d5e4f9cbbf0d80b846f816d67920f76613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NzY1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476487652", "bodyText": "\ud83d\ude22 Me too! I imagine the painless folk are thinking about it, but I'm not sure. This seems like a perfect spot for invokedynamic, but I'm not an expert at all.", "author": "nik9000", "createdAt": "2020-08-25T14:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NzE0NA==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476557144", "bodyText": "what happens if we do without this conversion? Really bad I guess?", "author": "javanna", "createdAt": "2020-08-25T15:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MTI2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476561263", "bodyText": "@javanna without it you can't really return def. You get a lot of funny class cast exceptions.\n@stu-elastic or @jdconrad do we have plans indy-ify this or something? So it'd call the converter based on the def type. Is that what #61389 is all about?", "author": "nik9000", "createdAt": "2020-08-25T16:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MzcxNA==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476563714", "bodyText": "We needed to get this in your hands ASAP.  We'll be improving it: #61389", "author": "stu-elastic", "createdAt": "2020-08-25T16:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2ODExNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476568115", "bodyText": "Indy for this is really challenging. We are going to look into it, but allowing you to do def conversions this way ensures we have something for runtime fields now that doesn't use reflection invocation. I would recommend that this cover all numeric cases including byte through long as well. Check out something like DefMath.plus.", "author": "jdconrad", "createdAt": "2020-08-25T16:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MTMxNw==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476581317", "bodyText": "Gotcha. So if I implement convertFromDef returning a def type is all on me at the moment. I have to do what DefMath does, basically.", "author": "nik9000", "createdAt": "2020-08-25T16:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNzM5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476607399", "bodyText": "@nik9000 Yes, that's correct. Again we are going to rectify this, but wanted to make sure we had something that was usable now.", "author": "jdconrad", "createdAt": "2020-08-25T17:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODIyNA==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476608224", "bodyText": "\ud83e\udd18", "author": "nik9000", "createdAt": "2020-08-25T17:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2MjkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "a34e57bf94a2185465ca36a99e0db2f31082ee10", "chunk": "diff --git a/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java b/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java\nindex c0100cc02f7..a97175e4016 100644\n--- a/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java\n+++ b/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java\n\n@@ -65,6 +65,8 @@ public abstract class DoubleScriptFieldScript extends AbstractScriptFieldScript\n     public static double[] convertFromDef(Object o) {\n         if (o instanceof Double) {\n             return convertFromDouble(((Double) o).doubleValue());\n+        } else if (o instanceof Collection) {\n+            return convertFromCollection((Collection<?>) o);\n         } else {\n             return (double[]) o;\n         }\n"}}, {"oid": "a34e57bf94a2185465ca36a99e0db2f31082ee10", "url": "https://github.com/elastic/elasticsearch/commit/a34e57bf94a2185465ca36a99e0db2f31082ee10", "message": "Unit tests for conversions", "committedDate": "2020-08-25T14:45:51Z", "type": "commit"}, {"oid": "0e885f0bc4ea131d05c44e0a99e550fac9da36db", "url": "https://github.com/elastic/elasticsearch/commit/0e885f0bc4ea131d05c44e0a99e550fac9da36db", "message": "Format", "committedDate": "2020-08-25T14:52:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476565647", "bodyText": "@stu-elastic and @jdconrad do these look right? I borrowed them from FactoryTests.\nI see right now you force the converters to be static - would it be possible to make them non-static on the script?", "author": "nik9000", "createdAt": "2020-08-25T16:07:15Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java", "diffHunk": "@@ -35,55 +35,40 @@\n         DoubleScriptFieldScript newInstance(LeafReaderContext ctx) throws IOException;\n     }\n \n-    private double[] values = new double[1];\n-    private int count;\n-\n     public DoubleScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n         super(params, searchLookup, ctx);\n     }\n \n+    public abstract double[] execute();\n+\n     /**\n      * Execute the script for the provided {@code docId}.\n      */\n-    public final void runForDoc(int docId) {\n-        count = 0;\n+    public final double[] runForDoc(int docId) {\n         setDocument(docId);\n-        execute();\n+        return execute();\n     }\n \n-    /**\n-     * Values from the last time {@link #runForDoc(int)} was called. This array\n-     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n-     * It is also oversized and will contain garbage at all indices at and\n-     * above {@link #count()}.\n-     */\n-    public final double[] values() {\n-        return values;\n+    public static double[] convertFromDouble(double v) {", "originalCommit": "0e885f0bc4ea131d05c44e0a99e550fac9da36db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MDE5NA==", "url": "https://github.com/elastic/elasticsearch/pull/61504#discussion_r476570194", "bodyText": "Not easily because the only \"this\" pointer we have is through class bindings.", "author": "jdconrad", "createdAt": "2020-08-25T16:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3bb6710b584cc64a23ed842a1d4086f4eb99b2e0", "chunk": "diff --git a/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java b/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java\nindex a97175e4016..e732c670e79 100644\n--- a/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java\n+++ b/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/DoubleScriptFieldScript.java\n\n@@ -63,8 +63,8 @@ public abstract class DoubleScriptFieldScript extends AbstractScriptFieldScript\n     }\n \n     public static double[] convertFromDef(Object o) {\n-        if (o instanceof Double) {\n-            return convertFromDouble(((Double) o).doubleValue());\n+        if (o instanceof Number) {\n+            return convertFromDouble(((Number) o).doubleValue());\n         } else if (o instanceof Collection) {\n             return convertFromCollection((Collection<?>) o);\n         } else {\n"}}, {"oid": "3bb6710b584cc64a23ed842a1d4086f4eb99b2e0", "url": "https://github.com/elastic/elasticsearch/commit/3bb6710b584cc64a23ed842a1d4086f4eb99b2e0", "message": "Handle all numbers", "committedDate": "2020-08-25T17:15:28Z", "type": "commit"}]}