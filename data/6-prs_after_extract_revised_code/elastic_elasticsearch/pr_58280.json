{"pr_number": 58280, "pr_title": "[ML] allow data streams to be expanded for analytics and transforms", "pr_createdAt": "2020-06-17T18:21:46Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58280", "timeline": [{"oid": "7fa9ef74981a395503895e82ac845b4e04d80468", "url": "https://github.com/elastic/elasticsearch/commit/7fa9ef74981a395503895e82ac845b4e04d80468", "message": "[ML] allow datastreams to be expanded for analytics and transforms", "committedDate": "2020-06-17T18:19:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNTgwMw==", "url": "https://github.com/elastic/elasticsearch/pull/58280#discussion_r442015803", "bodyText": "makes me wonder, if we have a use case, where we do not want data streams, in this PR it seems not.\nExcept the unit tests: Do they fail for includeDatastreams=true?\nIf there is no good reason, I suggest to keep it simple and make data streams default.", "author": "hendrikmuhs", "createdAt": "2020-06-18T07:15:20Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/validation/SourceDestValidator.java", "diffHunk": "@@ -65,6 +65,7 @@\n     private final RemoteClusterLicenseChecker remoteClusterLicenseChecker;\n     private final String nodeName;\n     private final String license;\n+    private final boolean includeDatastreams;", "originalCommit": "7fa9ef74981a395503895e82ac845b4e04d80468", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ceb72c79fd531452dd1f025cdee5b09e42aace3", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/validation/SourceDestValidator.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/validation/SourceDestValidator.java\nindex f08b430158f..dcdcca1d39b 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/validation/SourceDestValidator.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/validation/SourceDestValidator.java\n\n@@ -65,7 +65,6 @@ public final class SourceDestValidator {\n     private final RemoteClusterLicenseChecker remoteClusterLicenseChecker;\n     private final String nodeName;\n     private final String license;\n-    private final boolean includeDatastreams;\n \n     /*\n      * Internal shared context between validators.\n"}}, {"oid": "cc5271aa8404ef333c4b568f6ee9205f2fe194de", "url": "https://github.com/elastic/elasticsearch/commit/cc5271aa8404ef333c4b568f6ee9205f2fe194de", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-add-data_streams-to-transform-and-analytics", "committedDate": "2020-06-18T12:16:35Z", "type": "commit"}, {"oid": "0ceb72c79fd531452dd1f025cdee5b09e42aace3", "url": "https://github.com/elastic/elasticsearch/commit/0ceb72c79fd531452dd1f025cdee5b09e42aace3", "message": "simplifying", "committedDate": "2020-06-18T12:42:21Z", "type": "commit"}, {"oid": "2a0aa574a048ac5c4aae4a86c8f209b6e63e855b", "url": "https://github.com/elastic/elasticsearch/commit/2a0aa574a048ac5c4aae4a86c8f209b6e63e855b", "message": "removing unnecessary data stream expansion", "committedDate": "2020-06-18T12:44:43Z", "type": "commit"}, {"oid": "49d139353c40c6144c775b93a6f9296d1fe70dae", "url": "https://github.com/elastic/elasticsearch/commit/49d139353c40c6144c775b93a6f9296d1fe70dae", "message": "adding data stream integration tests to datafeeds transforms and analytics", "committedDate": "2020-06-18T20:09:01Z", "type": "commit"}, {"oid": "39d0be5cf4f73a32badfb967bef348ade3f71acf", "url": "https://github.com/elastic/elasticsearch/commit/39d0be5cf4f73a32badfb967bef348ade3f71acf", "message": "fixing test", "committedDate": "2020-06-18T21:25:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE3ODUzNw==", "url": "https://github.com/elastic/elasticsearch/pull/58280#discussion_r444178537", "bodyText": "Could we move this to MlNativeIntegTestCase and then also reuse it in DatafeedJobsIT?", "author": "dimitris-athanasiou", "createdAt": "2020-06-23T12:18:27Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeDataFrameAnalyticsIntegTestCase.java", "diffHunk": "@@ -113,6 +119,20 @@ private void stopAnalyticsAndForceStopOnError() {\n         }\n     }\n \n+    protected static void createDataStreamAndTemplate(String dataStreamName, String timeField, String mapping) throws IOException {", "originalCommit": "39d0be5cf4f73a32badfb967bef348ade3f71acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7640772e59f70ad44ecdf53feb8c21f1127abd7c", "chunk": "diff --git a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeDataFrameAnalyticsIntegTestCase.java b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeDataFrameAnalyticsIntegTestCase.java\nindex 7bf20de941e..f301587aa2c 100644\n--- a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeDataFrameAnalyticsIntegTestCase.java\n+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlNativeDataFrameAnalyticsIntegTestCase.java\n\n@@ -119,20 +113,6 @@ abstract class MlNativeDataFrameAnalyticsIntegTestCase extends MlNativeIntegTest\n         }\n     }\n \n-    protected static void createDataStreamAndTemplate(String dataStreamName, String timeField, String mapping) throws IOException {\n-        client().execute(PutComposableIndexTemplateAction.INSTANCE,\n-            new PutComposableIndexTemplateAction.Request(dataStreamName + \"_template\")\n-                .indexTemplate(new ComposableIndexTemplate(Collections.singletonList(dataStreamName),\n-                    new Template(null, new CompressedXContent(mapping), null),\n-                    null,\n-                    null,\n-                    null,\n-                    null,\n-                    new ComposableIndexTemplate.DataStreamTemplate(timeField))))\n-            .actionGet();\n-        client().execute(CreateDataStreamAction.INSTANCE, new CreateDataStreamAction.Request(dataStreamName)).actionGet();\n-    }\n-\n     protected PutDataFrameAnalyticsAction.Response putAnalytics(DataFrameAnalyticsConfig config) {\n         if (analytics.add(config) == false) {\n             throw new IllegalArgumentException(\"analytics config [\" + config.getId() + \"] is already registered\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MDQ4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58280#discussion_r444180482", "bodyText": "I think it'd be nice to have a new test like you added in DatafeedJobsID. Having a test that explains it works on data streams in its name adds to the documentation of what those jobs should support. Also, if that test failed but all others worked fine, we'd immediately know it's because of data streams and not something else.", "author": "dimitris-athanasiou", "createdAt": "2020-06-23T12:21:57Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ClassificationIT.java", "diffHunk": "@@ -454,7 +459,7 @@ public void testTwoJobsWithSameRandomizeSeedUseSameTrainingSet() throws Exceptio\n         String sourceIndex = \"classification_two_jobs_with_same_randomize_seed_source\";\n         String dependentVariable = KEYWORD_FIELD;\n \n-        createIndex(sourceIndex);\n+        createIndex(sourceIndex, true);", "originalCommit": "39d0be5cf4f73a32badfb967bef348ade3f71acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7640772e59f70ad44ecdf53feb8c21f1127abd7c", "chunk": "diff --git a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ClassificationIT.java b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ClassificationIT.java\nindex be05f19490a..64513c185a7 100644\n--- a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ClassificationIT.java\n+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ClassificationIT.java\n\n@@ -459,7 +511,7 @@ public class ClassificationIT extends MlNativeDataFrameAnalyticsIntegTestCase {\n         String sourceIndex = \"classification_two_jobs_with_same_randomize_seed_source\";\n         String dependentVariable = KEYWORD_FIELD;\n \n-        createIndex(sourceIndex, true);\n+        createIndex(sourceIndex);\n         // We use 100 rows as we can't set this too low. If too low it is possible\n         // we only train with rows of one of the two classes which leads to a failure.\n         indexData(sourceIndex, 100, 0, dependentVariable);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MDgwMA==", "url": "https://github.com/elastic/elasticsearch/pull/58280#discussion_r444180800", "bodyText": "Similarly here, I think we'd benefit from having a single dedicated test that tests data streams.", "author": "dimitris-athanasiou", "createdAt": "2020-06-23T12:22:31Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java", "diffHunk": "@@ -398,28 +402,51 @@ private void initialize(String jobId) {\n     }\n \n     static void indexData(String sourceIndex, int numTrainingRows, int numNonTrainingRows) {\n-        client().admin().indices().prepareCreate(sourceIndex)\n-            .setMapping(\n-                NUMERICAL_FEATURE_FIELD, \"type=double\",\n-                DISCRETE_NUMERICAL_FEATURE_FIELD, \"type=long\",\n-                DEPENDENT_VARIABLE_FIELD, \"type=double\")\n-            .get();\n+        String mapping = \"{\\n\" +\n+            \"      \\\"properties\\\": {\\n\" +\n+            \"        \\\"time\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"date\\\"\\n\" +\n+            \"        },\" +\n+            \"        \\\"\"+ NUMERICAL_FEATURE_FIELD + \"\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"double\\\"\\n\" +\n+            \"        },\" +\n+            \"        \\\"\" + DISCRETE_NUMERICAL_FEATURE_FIELD + \"\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"long\\\"\\n\" +\n+            \"        },\" +\n+            \"        \\\"\" + DEPENDENT_VARIABLE_FIELD + \"\\\": {\\n\" +\n+            \"          \\\"type\\\": \\\"double\\\"\\n\" +\n+            \"        }\" +\n+            \"      }\\n\" +\n+            \"    }\";\n+        if (randomBoolean()) {", "originalCommit": "39d0be5cf4f73a32badfb967bef348ade3f71acf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7640772e59f70ad44ecdf53feb8c21f1127abd7c", "chunk": "diff --git a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java\nindex 4b78db74382..0ad66ff1609 100644\n--- a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java\n+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionIT.java\n\n@@ -395,6 +395,65 @@ public class RegressionIT extends MlNativeDataFrameAnalyticsIntegTestCase {\n         assertMlResultsFieldMappings(destIndex, predictedClassField, \"double\");\n     }\n \n+    public void testWithDatastream() throws Exception {\n+        initialize(\"regression_with_datastream\");\n+        String predictedClassField = DEPENDENT_VARIABLE_FIELD + \"_prediction\";\n+        indexData(sourceIndex, 300, 50, true);\n+\n+        DataFrameAnalyticsConfig config = buildAnalytics(jobId, sourceIndex, destIndex, null,\n+            new Regression(\n+                DEPENDENT_VARIABLE_FIELD,\n+                BoostedTreeParams.builder().setNumTopFeatureImportanceValues(1).build(),\n+                null,\n+                null,\n+                null,\n+                null,\n+                null)\n+        );\n+        putAnalytics(config);\n+\n+        assertIsStopped(jobId);\n+        assertProgressIsZero(jobId);\n+\n+        startAnalytics(jobId);\n+        waitUntilAnalyticsIsStopped(jobId);\n+\n+        SearchResponse sourceData = client().prepareSearch(sourceIndex).setTrackTotalHits(true).setSize(1000).get();\n+        for (SearchHit hit : sourceData.getHits()) {\n+            Map<String, Object> destDoc = getDestDoc(config, hit);\n+            Map<String, Object> resultsObject = getMlResultsObjectFromDestDoc(destDoc);\n+\n+            assertThat(resultsObject.containsKey(predictedClassField), is(true));\n+            assertThat(resultsObject.containsKey(\"is_training\"), is(true));\n+            assertThat(resultsObject.get(\"is_training\"), is(destDoc.containsKey(DEPENDENT_VARIABLE_FIELD)));\n+            @SuppressWarnings(\"unchecked\")\n+            List<Map<String, Object>> importanceArray = (List<Map<String, Object>>)resultsObject.get(\"feature_importance\");\n+            assertThat(importanceArray, hasSize(greaterThan(0)));\n+            assertThat(\n+                importanceArray.stream().filter(m -> NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))\n+                    || DISCRETE_NUMERICAL_FEATURE_FIELD.equals(m.get(\"feature_name\"))).findAny(),\n+                isPresent());\n+        }\n+\n+        assertProgressComplete(jobId);\n+        assertThat(searchStoredProgress(jobId).getHits().getTotalHits().value, equalTo(1L));\n+        assertModelStatePersisted(stateDocId());\n+        assertInferenceModelPersisted(jobId);\n+        assertMlResultsFieldMappings(destIndex, predictedClassField, \"double\");\n+        assertThatAuditMessagesMatch(jobId,\n+            \"Created analytics with analysis type [regression]\",\n+            \"Estimated memory usage for this analytics to be\",\n+            \"Starting analytics on node\",\n+            \"Started analytics\",\n+            \"Creating destination index [\" + destIndex + \"]\",\n+            \"Started reindexing to destination index [\" + destIndex + \"]\",\n+            \"Finished reindexing to destination index [\" + destIndex + \"]\",\n+            \"Started loading data\",\n+            \"Started analyzing\",\n+            \"Started writing results\",\n+            \"Finished analysis\");\n+    }\n+\n     private void initialize(String jobId) {\n         this.jobId = jobId;\n         this.sourceIndex = jobId + \"_source_index\";\n"}}, {"oid": "7640772e59f70ad44ecdf53feb8c21f1127abd7c", "url": "https://github.com/elastic/elasticsearch/commit/7640772e59f70ad44ecdf53feb8c21f1127abd7c", "message": "adding specific datastream tests", "committedDate": "2020-06-23T14:25:45Z", "type": "commit"}, {"oid": "64f069dcee3cec0c42c31006f499d8917601fdd0", "url": "https://github.com/elastic/elasticsearch/commit/64f069dcee3cec0c42c31006f499d8917601fdd0", "message": "fixing test", "committedDate": "2020-06-23T15:43:46Z", "type": "commit"}]}