{"pr_number": 53725, "pr_title": "[ML] only retry persistence failures when the failure is intermittent and stop retrying when analytics job is stopping", "pr_createdAt": "2020-03-18T13:15:42Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53725", "timeline": [{"oid": "93a18beca31436dfca40b79448c23fc9f81a81a9", "url": "https://github.com/elastic/elasticsearch/commit/93a18beca31436dfca40b79448c23fc9f81a81a9", "message": "[ML] only retry persistence failures when the failure is intermittent", "committedDate": "2020-03-18T13:12:20Z", "type": "commit"}, {"oid": "d15da5b2c0031d75b747cfce7d526e899cb6301a", "url": "https://github.com/elastic/elasticsearch/commit/d15da5b2c0031d75b747cfce7d526e899cb6301a", "message": "Merge branch 'master' into feature/ml-data-frame-analytics-retry-on-failure-fixes", "committedDate": "2020-03-18T13:50:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NjIzMA==", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394356230", "bodyText": "Could this be final and passed in the constructor?", "author": "przemekwitek", "createdAt": "2020-03-18T13:45:26Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java", "diffHunk": "@@ -37,12 +38,12 @@\n     private final String analyticsId;\n     private final DataFrameDataExtractor dataExtractor;\n     private final ResultsPersisterService resultsPersisterService;\n+    private Supplier<Boolean> shouldRetryPersistence = () -> true;", "originalCommit": "93a18beca31436dfca40b79448c23fc9f81a81a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQyNjIzNg==", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394426236", "bodyText": "Since the retry persistence logic depends on information stored within AnalyticsResultProcessor we would either have to make a Builder or a Factory class that we then pass to AnalyticsResultProcessor which constructs a new joiner from that passed factory.\nThis option just seemed simpler and less complex.", "author": "benwtrent", "createdAt": "2020-03-18T15:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NjIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3OTkzNg==", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394879936", "bodyText": "Ok, got it. Please also consider the following approach which might be even less complex:\nAdd isCancelled field and cancel() method to DataFrameRowsJoiner class. In AnalyticsResultProcessor::cancel(), you can also cancel the joiner:\n    public void cancel() {\n        isCancelled = true;\n        dataFrameRowsJoiner.cancel();\n    }\n\nThen there is no need to pass the Supplier as you've already passed the actual isCancelled value.", "author": "przemekwitek", "createdAt": "2020-03-19T09:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NjIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "7ae4ba1ef6aab60f6c43dae72757f77592d0be61", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java\nindex d7cf7152f52..0296b16e488 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java\n\n@@ -38,10 +37,10 @@ class DataFrameRowsJoiner implements AutoCloseable {\n     private final String analyticsId;\n     private final DataFrameDataExtractor dataExtractor;\n     private final ResultsPersisterService resultsPersisterService;\n-    private Supplier<Boolean> shouldRetryPersistence = () -> true;\n     private final Iterator<DataFrameDataExtractor.Row> dataFrameRowsIterator;\n     private LinkedList<RowResults> currentResults;\n     private volatile String failure;\n+    private volatile boolean isCancelled;\n \n     DataFrameRowsJoiner(String analyticsId, DataFrameDataExtractor dataExtractor, ResultsPersisterService resultsPersisterService) {\n         this.analyticsId = Objects.requireNonNull(analyticsId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MTQ0OA==", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394361448", "bodyText": "Could you make this message consistent with others? \"...failure that cannot be...\"", "author": "przemekwitek", "createdAt": "2020-03-18T13:52:40Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -148,12 +180,28 @@ public SearchResponse searchWithRetry(SearchRequest searchRequest,\n             } catch (ElasticsearchException e) {\n                 LOGGER.warn(\"[\" + jobId + \"] Exception while executing search action\", e);\n                 failureMessage = e.getDetailedMessage();\n+                if (isIrrecoverable(e)) {\n+                    LOGGER.warn(new ParameterizedMessage(\"[{}] experienced irrecoverable failure\", jobId), e);", "originalCommit": "d15da5b2c0031d75b747cfce7d526e899cb6301a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19c48f78f51a144a3882b56960abea283969269b", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\nindex c5b742f9b41..bde9880e1c6 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\n\n@@ -181,7 +181,7 @@ public class ResultsPersisterService {\n                 LOGGER.warn(\"[\" + jobId + \"] Exception while executing search action\", e);\n                 failureMessage = e.getDetailedMessage();\n                 if (isIrrecoverable(e)) {\n-                    LOGGER.warn(new ParameterizedMessage(\"[{}] experienced irrecoverable failure\", jobId), e);\n+                    LOGGER.warn(new ParameterizedMessage(\"[{}] experienced failure that cannot be automatically retried\", jobId), e);\n                     throw new ElasticsearchException(\"{} experienced failure that cannot be automatically retried\", e, jobId);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2Mjg5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394362893", "bodyText": "Should this be \"private\"?", "author": "przemekwitek", "createdAt": "2020-03-18T13:54:37Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -148,12 +180,28 @@ public SearchResponse searchWithRetry(SearchRequest searchRequest,\n             } catch (ElasticsearchException e) {\n                 LOGGER.warn(\"[\" + jobId + \"] Exception while executing search action\", e);\n                 failureMessage = e.getDetailedMessage();\n+                if (isIrrecoverable(e)) {\n+                    LOGGER.warn(new ParameterizedMessage(\"[{}] experienced irrecoverable failure\", jobId), e);\n+                    throw new ElasticsearchException(\"{} experienced failure that cannot be automatically retried\", e, jobId);\n+                }\n             }\n \n             retryContext.nextIteration(\"search\", failureMessage);\n         }\n     }\n \n+    /**\n+     * @param ex The exception to check\n+     * @return true when the failure will persist no matter how many times we retry.\n+     */\n+    static boolean isIrrecoverable(Exception ex) {", "originalCommit": "d15da5b2c0031d75b747cfce7d526e899cb6301a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19c48f78f51a144a3882b56960abea283969269b", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\nindex c5b742f9b41..bde9880e1c6 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\n\n@@ -181,7 +181,7 @@ public class ResultsPersisterService {\n                 LOGGER.warn(\"[\" + jobId + \"] Exception while executing search action\", e);\n                 failureMessage = e.getDetailedMessage();\n                 if (isIrrecoverable(e)) {\n-                    LOGGER.warn(new ParameterizedMessage(\"[{}] experienced irrecoverable failure\", jobId), e);\n+                    LOGGER.warn(new ParameterizedMessage(\"[{}] experienced failure that cannot be automatically retried\", jobId), e);\n                     throw new ElasticsearchException(\"{} experienced failure that cannot be automatically retried\", e, jobId);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MzM5NA==", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394363394", "bodyText": "I think times(1) is default and you can drop it.", "author": "przemekwitek", "createdAt": "2020-03-18T13:55:19Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterServiceTests.java", "diffHunk": "@@ -206,6 +210,21 @@ public void testSearchWithRetries_Failure_ShouldNotRetryAfterRandomNumberOfRetri\n         verify(client, times(maxRetries + 1)).execute(eq(SearchAction.INSTANCE), eq(SEARCH_REQUEST), any());\n     }\n \n+    public void testSearchWithRetries_FailureOnIrrecoverableError() {\n+        resultsPersisterService.setMaxFailureRetries(5);\n+\n+        doAnswer(withFailure(new ElasticsearchStatusException(\"bad search request\", RestStatus.BAD_REQUEST)))\n+            .when(client).execute(eq(SearchAction.INSTANCE), eq(SEARCH_REQUEST), any());\n+\n+        ElasticsearchException e =\n+            expectThrows(\n+                ElasticsearchException.class,\n+                () -> resultsPersisterService.searchWithRetry(SEARCH_REQUEST, JOB_ID, () -> true, (s) -> {}));\n+        assertThat(e.getMessage(), containsString(\"experienced failure that cannot be automatically retried\"));\n+\n+        verify(client, times(1)).execute(eq(SearchAction.INSTANCE), eq(SEARCH_REQUEST), any());", "originalCommit": "d15da5b2c0031d75b747cfce7d526e899cb6301a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19c48f78f51a144a3882b56960abea283969269b", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterServiceTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterServiceTests.java\nindex 66efe9c1268..af47efeef7d 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterServiceTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterServiceTests.java\n\n@@ -222,7 +222,7 @@ public class ResultsPersisterServiceTests extends ESTestCase {\n                 () -> resultsPersisterService.searchWithRetry(SEARCH_REQUEST, JOB_ID, () -> true, (s) -> {}));\n         assertThat(e.getMessage(), containsString(\"experienced failure that cannot be automatically retried\"));\n \n-        verify(client, times(1)).execute(eq(SearchAction.INSTANCE), eq(SEARCH_REQUEST), any());\n+        verify(client).execute(eq(SearchAction.INSTANCE), eq(SEARCH_REQUEST), any());\n     }\n \n     private static Supplier<Boolean> shouldRetryUntil(int maxRetries) {\n"}}, {"oid": "19c48f78f51a144a3882b56960abea283969269b", "url": "https://github.com/elastic/elasticsearch/commit/19c48f78f51a144a3882b56960abea283969269b", "message": "addressing pr comments", "committedDate": "2020-03-18T15:28:18Z", "type": "commit"}, {"oid": "06934f2e999cdeff1f199def03dda563de231ee6", "url": "https://github.com/elastic/elasticsearch/commit/06934f2e999cdeff1f199def03dda563de231ee6", "message": "Merge branch 'feature/ml-data-frame-analytics-retry-on-failure-fixes' of github.com:benwtrent/elasticsearch into feature/ml-data-frame-analytics-retry-on-failure-fixes", "committedDate": "2020-03-18T15:29:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNjk0OA==", "url": "https://github.com/elastic/elasticsearch/pull/53725#discussion_r394906948", "bodyText": "nit: since the name is in capitals it should be immutable, i.e. Set.of() or Collections.unmodifiableSet().", "author": "droberts195", "createdAt": "2020-03-19T09:54:30Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java", "diffHunk": "@@ -42,6 +44,22 @@\n import java.util.stream.Collectors;\n \n public class ResultsPersisterService {\n+    /**\n+     * List of rest statuses that we consider irrecoverable\n+     */\n+    public static final Set<RestStatus> IRRECOVERABLE_REST_STATUSES = new HashSet<>(", "originalCommit": "06934f2e999cdeff1f199def03dda563de231ee6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d15d2058bc56af19e60422ba6012130455dbb41", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\nindex bde9880e1c6..3adab97b7f5 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/ResultsPersisterService.java\n\n@@ -47,7 +48,7 @@ public class ResultsPersisterService {\n     /**\n      * List of rest statuses that we consider irrecoverable\n      */\n-    public static final Set<RestStatus> IRRECOVERABLE_REST_STATUSES = new HashSet<>(\n+    public static final Set<RestStatus> IRRECOVERABLE_REST_STATUSES = Collections.unmodifiableSet(new HashSet<>(\n         Arrays.asList(\n             RestStatus.GONE,\n             RestStatus.NOT_IMPLEMENTED,\n"}}, {"oid": "7ae4ba1ef6aab60f6c43dae72757f77592d0be61", "url": "https://github.com/elastic/elasticsearch/commit/7ae4ba1ef6aab60f6c43dae72757f77592d0be61", "message": "simplifying joiner and results handler code", "committedDate": "2020-03-19T11:55:40Z", "type": "commit"}, {"oid": "7d15d2058bc56af19e60422ba6012130455dbb41", "url": "https://github.com/elastic/elasticsearch/commit/7d15d2058bc56af19e60422ba6012130455dbb41", "message": "addressing pr comments", "committedDate": "2020-03-19T13:07:35Z", "type": "commit"}]}