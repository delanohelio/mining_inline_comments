{"pr_number": 60809, "pr_title": "Improve error message for non append-only writes that target data stream", "pr_createdAt": "2020-08-06T09:27:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60809", "timeline": [{"oid": "1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc", "url": "https://github.com/elastic/elasticsearch/commit/1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc", "message": "Improve error message for non append-only writes that target data stream\n\nCloses #60581", "committedDate": "2020-08-06T09:20:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNzcwMw==", "url": "https://github.com/elastic/elasticsearch/pull/60809#discussion_r466337703", "bodyText": "Maybe refactor es.excluded_ds to named constant?", "author": "probakowski", "createdAt": "2020-08-06T11:09:36Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -272,6 +274,10 @@\n         if (options.allowNoIndices() == false && concreteIndices.isEmpty()) {\n             IndexNotFoundException infe = new IndexNotFoundException((String)null);\n             infe.setResources(\"index_expression\", indexExpressions);\n+            if (excludedDataStreams) {\n+                // Allows callers to handle IndexNotFoundException differently based on whether data streams were excluded.\n+                infe.addMetadata(\"es.excluded_ds\", \"true\");", "originalCommit": "1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3774960d390d331c07d645663e9006f1e974f0f2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\nindex d0899ffebab..67b891002a6 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\n\n@@ -276,7 +278,7 @@ public class IndexNameExpressionResolver {\n             infe.setResources(\"index_expression\", indexExpressions);\n             if (excludedDataStreams) {\n                 // Allows callers to handle IndexNotFoundException differently based on whether data streams were excluded.\n-                infe.addMetadata(\"es.excluded_ds\", \"true\");\n+                infe.addMetadata(EXCLUDED_DATA_STREAMS_KEY, \"true\");\n             }\n             throw infe;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NTA4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60809#discussion_r466385086", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new IllegalArgumentException(\"only write ops with op_type=create are allowed in data streams\");\n          \n          \n            \n                                    throw new IllegalArgumentException(\"only write ops with an op_type of create are allowed in data streams\");", "author": "danhermann", "createdAt": "2020-08-06T12:45:19Z", "path": "server/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java", "diffHunk": "@@ -143,7 +144,15 @@ protected void doStart(ClusterState clusterState) {\n                         throw blockException;\n                     }\n                 }\n-                request.concreteIndex(indexNameExpressionResolver.concreteWriteIndex(clusterState, request).getName());\n+                try {\n+                    request.concreteIndex(indexNameExpressionResolver.concreteWriteIndex(clusterState, request).getName());\n+                } catch (IndexNotFoundException e) {\n+                    if (request.includeDataStreams() == false && e.getMetadataKeys().contains(\"es.excluded_ds\")) {\n+                        throw new IllegalArgumentException(\"only write ops with op_type=create are allowed in data streams\");", "originalCommit": "1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3774960d390d331c07d645663e9006f1e974f0f2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java b/server/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java\nindex b04969b64b7..1eb767f3cce 100644\n--- a/server/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java\n\n@@ -147,8 +149,8 @@ public abstract class TransportInstanceSingleOperationAction<\n                 try {\n                     request.concreteIndex(indexNameExpressionResolver.concreteWriteIndex(clusterState, request).getName());\n                 } catch (IndexNotFoundException e) {\n-                    if (request.includeDataStreams() == false && e.getMetadataKeys().contains(\"es.excluded_ds\")) {\n-                        throw new IllegalArgumentException(\"only write ops with op_type=create are allowed in data streams\");\n+                    if (request.includeDataStreams() == false && e.getMetadataKeys().contains(EXCLUDED_DATA_STREAMS_KEY)) {\n+                        throw new IllegalArgumentException(\"only write ops with an op_type of create are allowed in data streams\");\n                     } else {\n                         throw e;\n                     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NzEyNg==", "url": "https://github.com/elastic/elasticsearch/pull/60809#discussion_r466387126", "bodyText": "Just a question -- I don't understand why includeDataStreams == false is here. I would have thought it would be the opposite if it were addressing the case of indexing into data streams though it does seem to work according to the tests you added.", "author": "danhermann", "createdAt": "2020-08-06T12:49:03Z", "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java", "diffHunk": "@@ -636,8 +636,16 @@ Index resolveIfAbsent(DocWriteRequest<?> request) {\n             Index concreteIndex = indices.get(request.index());\n             if (concreteIndex == null) {\n                 boolean includeDataStreams = request.opType() == DocWriteRequest.OpType.CREATE;\n-                concreteIndex = indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(), request.indices()[0],\n-                    false, includeDataStreams);\n+                try {\n+                    concreteIndex = indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(),\n+                        request.indices()[0], false, includeDataStreams);\n+                } catch (IndexNotFoundException e) {\n+                    if (includeDataStreams == false && e.getMetadataKeys().contains(\"es.excluded_ds\")) {", "originalCommit": "1a79d026a3dc78ca74aa59fa42ceac33c35dc5cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyNjkwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60809#discussion_r466426901", "bodyText": "I don't think it is needed (because es.excluded_ds is only set if includeDataStreams is false), but I like to keep it here to highlight that this check is only needed for op types other than create.  If includeDataStreams is false then request.opType() is not CREATE.", "author": "martijnvg", "createdAt": "2020-08-06T13:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NzEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "3774960d390d331c07d645663e9006f1e974f0f2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java\nindex e9adf3f8bd9..eaf7824d8c2 100644\n--- a/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java\n\n@@ -640,8 +641,8 @@ public class TransportBulkAction extends HandledTransportAction<BulkRequest, Bul\n                     concreteIndex = indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(),\n                         request.indices()[0], false, includeDataStreams);\n                 } catch (IndexNotFoundException e) {\n-                    if (includeDataStreams == false && e.getMetadataKeys().contains(\"es.excluded_ds\")) {\n-                        throw new IllegalArgumentException(\"only write ops with op_type=create are allowed in data streams\");\n+                    if (includeDataStreams == false && e.getMetadataKeys().contains(EXCLUDED_DATA_STREAMS_KEY)) {\n+                        throw new IllegalArgumentException(\"only write ops with an op_type of create are allowed in data streams\");\n                     } else {\n                         throw e;\n                     }\n"}}, {"oid": "64270008f0bd80b7736d4d2bf9e342ecd67b1db3", "url": "https://github.com/elastic/elasticsearch/commit/64270008f0bd80b7736d4d2bf9e342ecd67b1db3", "message": "Merge remote-tracking branch 'es/master' into better_error_message_for_non_append_only_writes_targeting_ds", "committedDate": "2020-08-10T07:23:48Z", "type": "commit"}, {"oid": "3774960d390d331c07d645663e9006f1e974f0f2", "url": "https://github.com/elastic/elasticsearch/commit/3774960d390d331c07d645663e9006f1e974f0f2", "message": "iter", "committedDate": "2020-08-10T07:45:26Z", "type": "commit"}]}