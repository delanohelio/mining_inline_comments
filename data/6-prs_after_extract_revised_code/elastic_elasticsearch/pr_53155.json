{"pr_number": 53155, "pr_title": "Fix inaccurate total hit count in _search/template api", "pr_createdAt": "2020-03-05T09:15:27Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53155", "timeline": [{"oid": "fb2c8ad6ddcfe0be68e6a1a98ab3779a5c9e0570", "url": "https://github.com/elastic/elasticsearch/commit/fb2c8ad6ddcfe0be68e6a1a98ab3779a5c9e0570", "message": "Fix inaccurate total hit count in _search/template api", "committedDate": "2020-03-05T08:49:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2OTgzMg==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388169832", "bodyText": "This method has been called in RestSearchAction.parseSearchRequest above, so it's repeatly called here but useless.", "author": "gaobinlong", "createdAt": "2020-03-05T09:26:50Z", "path": "modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java", "diffHunk": "@@ -72,7 +72,6 @@ public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client\n             searchTemplateRequest = SearchTemplateRequest.fromXContent(parser);\n         }\n         searchTemplateRequest.setRequest(searchRequest);\n-        RestSearchAction.checkRestTotalHits(request, searchRequest);", "originalCommit": "fb2c8ad6ddcfe0be68e6a1a98ab3779a5c9e0570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4OTUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388189524", "bodyText": "++", "author": "jimczi", "createdAt": "2020-03-05T10:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2OTgzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MTkxMA==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388171910", "bodyText": "When rest_total_hits_as_int is set to true, trackTotalHitsUpToin the searchRequest is set to Integer.MAX_VALUE,\nwe should copy the value to the new searchRequest here  and check whether the track_total_hits in the inline script is set to a not accurate number.", "author": "gaobinlong", "createdAt": "2020-03-05T09:30:27Z", "path": "modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java", "diffHunk": "@@ -110,6 +111,19 @@ static SearchRequest convert(SearchTemplateRequest searchTemplateRequest, Search\n             builder.parseXContent(parser, false);\n             builder.explain(searchTemplateRequest.isExplain());\n             builder.profile(searchTemplateRequest.isProfile());\n+            if (searchRequest.source() == null) {\n+                searchRequest.source(new SearchSourceBuilder());\n+            }\n+            Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo();\n+            if (trackTotalHitsUpTo != null) {\n+                if (builder.trackTotalHitsUpTo() == null) {\n+                    builder.trackTotalHitsUpTo(trackTotalHitsUpTo);\n+                } else if (builder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_ACCURATE\n+                    && builder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_DISABLED) {\n+                    throw new IllegalArgumentException(\"[\" + RestSearchAction.TOTAL_HITS_AS_INT_PARAM + \"] cannot be used \" +\n+                        \"if the tracking of total hits is not accurate, got \" + trackTotalHitsUpTo);\n+                }\n+            }", "originalCommit": "fb2c8ad6ddcfe0be68e6a1a98ab3779a5c9e0570", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1372b1445c6ac0bb369b0b03d9fe65c578f8697", "chunk": "diff --git a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\nindex e78879fac79..586deae9b73 100644\n--- a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\n+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\n\n@@ -111,21 +112,27 @@ public class TransportSearchTemplateAction extends HandledTransportAction<Search\n             builder.parseXContent(parser, false);\n             builder.explain(searchTemplateRequest.isExplain());\n             builder.profile(searchTemplateRequest.isProfile());\n-            if (searchRequest.source() == null) {\n-                searchRequest.source(new SearchSourceBuilder());\n-            }\n-            Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo();\n-            if (trackTotalHitsUpTo != null) {\n-                if (builder.trackTotalHitsUpTo() == null) {\n-                    builder.trackTotalHitsUpTo(trackTotalHitsUpTo);\n-                } else if (builder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_ACCURATE\n-                    && builder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_DISABLED) {\n-                    throw new IllegalArgumentException(\"[\" + RestSearchAction.TOTAL_HITS_AS_INT_PARAM + \"] cannot be used \" +\n-                        \"if the tracking of total hits is not accurate, got \" + trackTotalHitsUpTo);\n-                }\n-            }\n+            checkRestTotalHitsAsInt(searchRequest, builder);\n             searchRequest.source(builder);\n         }\n         return searchRequest;\n     }\n+\n+    private static void checkRestTotalHitsAsInt(SearchRequest searchRequest, SearchSourceBuilder searchSourceBuilder) {\n+        if (searchRequest.source() == null) {\n+            searchRequest.source(new SearchSourceBuilder());\n+        }\n+        Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo();\n+        // trackTotalHitsUpTo is set to Integer.MAX_VALUE when `rest_total_hits_as_int` is true\n+        if (trackTotalHitsUpTo != null) {\n+            if (searchSourceBuilder.trackTotalHitsUpTo() == null) {\n+                // trackTotalHitsUpTo should be set here, ensure that we can get an accurate total hits count\n+                searchSourceBuilder.trackTotalHitsUpTo(trackTotalHitsUpTo);\n+            } else if (searchSourceBuilder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_ACCURATE\n+                && searchSourceBuilder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_DISABLED) {\n+                throw new IllegalArgumentException(\"[\" + RestSearchAction.TOTAL_HITS_AS_INT_PARAM + \"] cannot be used \" +\n+                    \"if the tracking of total hits is not accurate, got \" + searchSourceBuilder.trackTotalHitsUpTo());\n+            }\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MDUxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388190519", "bodyText": "Is this needed ? We throw a runtime exception so it should be ok to leave the IOException as is.", "author": "jimczi", "createdAt": "2020-03-05T10:02:49Z", "path": "modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java", "diffHunk": "@@ -85,13 +86,13 @@ public void onFailure(Exception t) {\n             } else {\n                 listener.onResponse(response);\n             }\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             listener.onFailure(e);\n         }\n     }\n \n     static SearchRequest convert(SearchTemplateRequest searchTemplateRequest, SearchTemplateResponse response, ScriptService scriptService,\n-                                 NamedXContentRegistry xContentRegistry) throws IOException {\n+                                 NamedXContentRegistry xContentRegistry) throws Exception {", "originalCommit": "fb2c8ad6ddcfe0be68e6a1a98ab3779a5c9e0570", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1372b1445c6ac0bb369b0b03d9fe65c578f8697", "chunk": "diff --git a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\nindex e78879fac79..586deae9b73 100644\n--- a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\n+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\n\n@@ -86,13 +87,13 @@ public class TransportSearchTemplateAction extends HandledTransportAction<Search\n             } else {\n                 listener.onResponse(response);\n             }\n-        } catch (Exception e) {\n+        } catch (IOException e) {\n             listener.onFailure(e);\n         }\n     }\n \n     static SearchRequest convert(SearchTemplateRequest searchTemplateRequest, SearchTemplateResponse response, ScriptService scriptService,\n-                                 NamedXContentRegistry xContentRegistry) throws Exception {\n+                                 NamedXContentRegistry xContentRegistry) throws IOException {\n         Script script = new Script(searchTemplateRequest.getScriptType(),\n             searchTemplateRequest.getScriptType() == ScriptType.STORED ? null : TEMPLATE_LANG, searchTemplateRequest.getScript(),\n                 searchTemplateRequest.getScriptParams() == null ? Collections.emptyMap() : searchTemplateRequest.getScriptParams());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MjI4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388192281", "bodyText": "Can you move this part and the checks below outside of the parser block ?", "author": "jimczi", "createdAt": "2020-03-05T10:06:16Z", "path": "modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java", "diffHunk": "@@ -110,6 +111,19 @@ static SearchRequest convert(SearchTemplateRequest searchTemplateRequest, Search\n             builder.parseXContent(parser, false);\n             builder.explain(searchTemplateRequest.isExplain());\n             builder.profile(searchTemplateRequest.isProfile());\n+            if (searchRequest.source() == null) {", "originalCommit": "fb2c8ad6ddcfe0be68e6a1a98ab3779a5c9e0570", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1372b1445c6ac0bb369b0b03d9fe65c578f8697", "chunk": "diff --git a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\nindex e78879fac79..586deae9b73 100644\n--- a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\n+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\n\n@@ -111,21 +112,27 @@ public class TransportSearchTemplateAction extends HandledTransportAction<Search\n             builder.parseXContent(parser, false);\n             builder.explain(searchTemplateRequest.isExplain());\n             builder.profile(searchTemplateRequest.isProfile());\n-            if (searchRequest.source() == null) {\n-                searchRequest.source(new SearchSourceBuilder());\n-            }\n-            Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo();\n-            if (trackTotalHitsUpTo != null) {\n-                if (builder.trackTotalHitsUpTo() == null) {\n-                    builder.trackTotalHitsUpTo(trackTotalHitsUpTo);\n-                } else if (builder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_ACCURATE\n-                    && builder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_DISABLED) {\n-                    throw new IllegalArgumentException(\"[\" + RestSearchAction.TOTAL_HITS_AS_INT_PARAM + \"] cannot be used \" +\n-                        \"if the tracking of total hits is not accurate, got \" + trackTotalHitsUpTo);\n-                }\n-            }\n+            checkRestTotalHitsAsInt(searchRequest, builder);\n             searchRequest.source(builder);\n         }\n         return searchRequest;\n     }\n+\n+    private static void checkRestTotalHitsAsInt(SearchRequest searchRequest, SearchSourceBuilder searchSourceBuilder) {\n+        if (searchRequest.source() == null) {\n+            searchRequest.source(new SearchSourceBuilder());\n+        }\n+        Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo();\n+        // trackTotalHitsUpTo is set to Integer.MAX_VALUE when `rest_total_hits_as_int` is true\n+        if (trackTotalHitsUpTo != null) {\n+            if (searchSourceBuilder.trackTotalHitsUpTo() == null) {\n+                // trackTotalHitsUpTo should be set here, ensure that we can get an accurate total hits count\n+                searchSourceBuilder.trackTotalHitsUpTo(trackTotalHitsUpTo);\n+            } else if (searchSourceBuilder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_ACCURATE\n+                && searchSourceBuilder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_DISABLED) {\n+                throw new IllegalArgumentException(\"[\" + RestSearchAction.TOTAL_HITS_AS_INT_PARAM + \"] cannot be used \" +\n+                    \"if the tracking of total hits is not accurate, got \" + searchSourceBuilder.trackTotalHitsUpTo());\n+            }\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTAwNw==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388199007", "bodyText": "Can you replace these tests with yaml tests. It's odd that the rest option is not used to test the behavior and we to prefer yaml tests when doing small integration tests like this.", "author": "jimczi", "createdAt": "2020-03-05T10:18:39Z", "path": "modules/lang-mustache/src/test/java/org/elasticsearch/script/mustache/SearchTemplateIT.java", "diffHunk": "@@ -106,6 +107,67 @@ public void testTemplateQueryAsEscapedString() throws Exception {\n         assertThat(searchResponse.getResponse().getHits().getHits().length, equalTo(1));\n     }\n \n+    /**\n+     * Test the template query's hit count with an index which has more than 10k documents, relates to #52801.\n+     */\n+    public void testTemplateQueryHitCount() throws Exception {", "originalCommit": "fb2c8ad6ddcfe0be68e6a1a98ab3779a5c9e0570", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTg3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388199877", "bodyText": "Maybe also add one for the _msearch_template since your pr fixes both.", "author": "jimczi", "createdAt": "2020-03-05T10:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwMTc5MA==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388701790", "bodyText": "Can we define a index with more than 10K documents easily in a yaml test file? I'm not sure about that. This method just tests index with more than 10K documents,because the default value of track_total_hits is 10000, so we can always get an accurate hits count with index having less than 10000 documents.", "author": "gaobinlong", "createdAt": "2020-03-06T03:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgyNzk3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388827973", "bodyText": "I don't think you need to index 10k documents to test this change. The test I'd expect is that setting trackTotalHits to a value other than true/false in a template search request should fail the entire request when used in combination with rest_total_hits_as_int.\nThis should be easy to add in a yml test.\nRegarding the test that should check that we track total hits by default if  rest_total_hits_as_int is set on search template request, I think a unit test of TransportSearchTemplateAction#convert would be enough. We shouldn't require to 10k docs for this.", "author": "jimczi", "createdAt": "2020-03-06T10:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "c1372b1445c6ac0bb369b0b03d9fe65c578f8697", "chunk": "diff --git a/modules/lang-mustache/src/test/java/org/elasticsearch/script/mustache/SearchTemplateIT.java b/modules/lang-mustache/src/test/java/org/elasticsearch/script/mustache/SearchTemplateIT.java\nindex fd9d59a1832..12ab62c5a71 100644\n--- a/modules/lang-mustache/src/test/java/org/elasticsearch/script/mustache/SearchTemplateIT.java\n+++ b/modules/lang-mustache/src/test/java/org/elasticsearch/script/mustache/SearchTemplateIT.java\n\n@@ -107,67 +106,6 @@ public class SearchTemplateIT extends ESSingleNodeTestCase {\n         assertThat(searchResponse.getResponse().getHits().getHits().length, equalTo(1));\n     }\n \n-    /**\n-     * Test the template query's hit count with an index which has more than 10k documents, relates to #52801.\n-     */\n-    public void testTemplateQueryHitCount() throws Exception {\n-        BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();\n-        for (int i =0; i <10001; i ++) {\n-            bulkRequestBuilder.add(client().prepareIndex(\"test\").setId(String.valueOf(i)).setSource(\"{\\\"theField\\\":\\\"foo\\\"}\",\n-                XContentType.JSON));\n-        }\n-        bulkRequestBuilder.get();\n-        client().admin().indices().prepareRefresh().get();\n-\n-        SearchRequest searchRequest = new SearchRequest();\n-        searchRequest.indices(\"test\");\n-\n-        String queryWithNoTrackTotalHits = \"{\\\"source\\\" : \\\"{ \\\\\\\"query\\\\\\\":{\\\\\\\"match_all\\\\\\\":{}}}\\\"}\";\n-        SearchTemplateRequest request = SearchTemplateRequest.fromXContent(createParser(JsonXContent.jsonXContent,\n-            queryWithNoTrackTotalHits));\n-        request.setRequest(searchRequest);\n-        SearchTemplateResponse searchResponse1 = client().execute(SearchTemplateAction.INSTANCE, request).get();\n-        assertThat(searchResponse1.getResponse().getHits().getTotalHits().value, equalTo(10000L));\n-\n-        // When the request parameter `rest_total_hits_as_int` is set to true, `trackTotalHits` will also be set to true,\n-        // we should test that we can get an accurate hits count.\n-        SearchSourceBuilder builder = new SearchSourceBuilder();\n-        searchRequest.source(builder.trackTotalHits(true));\n-        request.setRequest(searchRequest);\n-        SearchTemplateResponse searchResponse2 = client().execute(SearchTemplateAction.INSTANCE, request).get();\n-        assertThat(searchResponse2.getResponse().getHits().getTotalHits().value, equalTo(10001L));\n-\n-        // When `rest_total_hits_as_int` is set to true, `trackTotalHits` should not be set to a not accurate number\n-        String queryWithInvalidTrackTotalHits =\n-            \"{\" + \"  \\\"source\\\" : \\\"{ \\\\\\\"track_total_hits\\\\\\\": \\\\\\\"{{trackTotalHits}}\\\\\\\", \\\\\\\"query\\\\\\\":{\\\\\\\"match_all\\\\\\\":{}}}\\\",\"\n-                + \"  \\\"params\\\":{\"\n-                + \"    \\\"trackTotalHits\\\": 100\"\n-                + \"  }\"\n-                + \"}\";\n-        SearchTemplateRequest requestWithInvalidTrackTotalHits = SearchTemplateRequest.fromXContent(createParser(JsonXContent.jsonXContent,\n-            queryWithInvalidTrackTotalHits));\n-        requestWithInvalidTrackTotalHits.setRequest(searchRequest);\n-        Exception e = expectThrows(Exception.class,\n-            () -> client().execute(SearchTemplateAction.INSTANCE, requestWithInvalidTrackTotalHits).get());\n-        assertThat(e.getMessage(), containsString(\n-            \"[rest_total_hits_as_int] cannot be used if the tracking of total hits is not accurate\"));\n-\n-        // When `rest_total_hits_as_int` is not set but `trackTotalHits` is set to true, we can also get an accurate hits count\n-        String queryWithValidTrackTotalHits =\n-            \"{\" + \"  \\\"source\\\" : \\\"{ \\\\\\\"track_total_hits\\\\\\\": \\\\\\\"{{trackTotalHits}}\\\\\\\", \\\\\\\"query\\\\\\\":{\\\\\\\"match_all\\\\\\\":{}}}\\\",\"\n-                + \"  \\\"params\\\":{\"\n-                + \"    \\\"trackTotalHits\\\": true\"\n-                + \"  }\"\n-                + \"}\";\n-        SearchTemplateRequest requestWithValidTrackTotalHits = SearchTemplateRequest.fromXContent(createParser(JsonXContent.jsonXContent,\n-            queryWithValidTrackTotalHits));\n-        SearchRequest newSearchRequest = new SearchRequest();\n-        newSearchRequest.indices(\"test\");\n-        requestWithValidTrackTotalHits.setRequest(newSearchRequest);\n-        SearchTemplateResponse searchResponse3 = client().execute(SearchTemplateAction.INSTANCE, requestWithValidTrackTotalHits).get();\n-        assertThat(searchResponse3.getResponse().getHits().getTotalHits().value, equalTo(10001L));\n-    }\n-\n     /**\n      * Test that template can contain conditional clause. In this case it is at\n      * the beginning of the string.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTY0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53155#discussion_r388199646", "bodyText": "Can you add a comment that a non-value of trackTotalHitsUpTo here indicates that rest_total_hits_as_int was used ?", "author": "jimczi", "createdAt": "2020-03-05T10:19:53Z", "path": "modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java", "diffHunk": "@@ -110,6 +111,19 @@ static SearchRequest convert(SearchTemplateRequest searchTemplateRequest, Search\n             builder.parseXContent(parser, false);\n             builder.explain(searchTemplateRequest.isExplain());\n             builder.profile(searchTemplateRequest.isProfile());\n+            if (searchRequest.source() == null) {\n+                searchRequest.source(new SearchSourceBuilder());\n+            }\n+            Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo();\n+            if (trackTotalHitsUpTo != null) {", "originalCommit": "fb2c8ad6ddcfe0be68e6a1a98ab3779a5c9e0570", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1372b1445c6ac0bb369b0b03d9fe65c578f8697", "chunk": "diff --git a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\nindex e78879fac79..586deae9b73 100644\n--- a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\n+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java\n\n@@ -111,21 +112,27 @@ public class TransportSearchTemplateAction extends HandledTransportAction<Search\n             builder.parseXContent(parser, false);\n             builder.explain(searchTemplateRequest.isExplain());\n             builder.profile(searchTemplateRequest.isProfile());\n-            if (searchRequest.source() == null) {\n-                searchRequest.source(new SearchSourceBuilder());\n-            }\n-            Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo();\n-            if (trackTotalHitsUpTo != null) {\n-                if (builder.trackTotalHitsUpTo() == null) {\n-                    builder.trackTotalHitsUpTo(trackTotalHitsUpTo);\n-                } else if (builder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_ACCURATE\n-                    && builder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_DISABLED) {\n-                    throw new IllegalArgumentException(\"[\" + RestSearchAction.TOTAL_HITS_AS_INT_PARAM + \"] cannot be used \" +\n-                        \"if the tracking of total hits is not accurate, got \" + trackTotalHitsUpTo);\n-                }\n-            }\n+            checkRestTotalHitsAsInt(searchRequest, builder);\n             searchRequest.source(builder);\n         }\n         return searchRequest;\n     }\n+\n+    private static void checkRestTotalHitsAsInt(SearchRequest searchRequest, SearchSourceBuilder searchSourceBuilder) {\n+        if (searchRequest.source() == null) {\n+            searchRequest.source(new SearchSourceBuilder());\n+        }\n+        Integer trackTotalHitsUpTo = searchRequest.source().trackTotalHitsUpTo();\n+        // trackTotalHitsUpTo is set to Integer.MAX_VALUE when `rest_total_hits_as_int` is true\n+        if (trackTotalHitsUpTo != null) {\n+            if (searchSourceBuilder.trackTotalHitsUpTo() == null) {\n+                // trackTotalHitsUpTo should be set here, ensure that we can get an accurate total hits count\n+                searchSourceBuilder.trackTotalHitsUpTo(trackTotalHitsUpTo);\n+            } else if (searchSourceBuilder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_ACCURATE\n+                && searchSourceBuilder.trackTotalHitsUpTo() != SearchContext.TRACK_TOTAL_HITS_DISABLED) {\n+                throw new IllegalArgumentException(\"[\" + RestSearchAction.TOTAL_HITS_AS_INT_PARAM + \"] cannot be used \" +\n+                    \"if the tracking of total hits is not accurate, got \" + searchSourceBuilder.trackTotalHitsUpTo());\n+            }\n+        }\n+    }\n }\n"}}, {"oid": "c1372b1445c6ac0bb369b0b03d9fe65c578f8697", "url": "https://github.com/elastic/elasticsearch/commit/c1372b1445c6ac0bb369b0b03d9fe65c578f8697", "message": "use yaml test instead of the test code", "committedDate": "2020-03-08T11:58:39Z", "type": "commit"}, {"oid": "22ff0fa908d5808c07960eee3b6dae3c41f3a07a", "url": "https://github.com/elastic/elasticsearch/commit/22ff0fa908d5808c07960eee3b6dae3c41f3a07a", "message": "Merge remote-tracking branch 'origin/master' into patch#52801", "committedDate": "2020-03-08T12:02:00Z", "type": "commit"}, {"oid": "fa8acfe9d07ac6e46d9c5bca07353375ba0db3da", "url": "https://github.com/elastic/elasticsearch/commit/fa8acfe9d07ac6e46d9c5bca07353375ba0db3da", "message": "Merge branch 'master' into patch#52801", "committedDate": "2020-03-13T11:40:02Z", "type": "commit"}]}