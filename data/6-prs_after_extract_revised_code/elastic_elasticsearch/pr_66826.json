{"pr_number": 66826, "pr_title": "Add enumsetting to org.elasticsearch.common.settings.Setting", "pr_createdAt": "2020-12-27T17:01:09Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66826", "timeline": [{"oid": "b7c7faf3affb869c7d5da6fe3c1aaa9b8d494814", "url": "https://github.com/elastic/elasticsearch/commit/b7c7faf3affb869c7d5da6fe3c1aaa9b8d494814", "message": "Add enumsetting to org.elasticsearch.common.settings.Setting", "committedDate": "2020-12-27T16:51:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzA3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66826#discussion_r549137079", "bodyText": "I wasn't sure wether or not to add all the signatures, which I copied from boolSetting. Also wasn't sure about adding comments. The added functionality seems straightforward and use is similar to f.e. boolSetting", "author": "AlexAxeman", "createdAt": "2020-12-27T17:04:13Z", "path": "server/src/main/java/org/elasticsearch/common/settings/Setting.java", "diffHunk": "@@ -1372,6 +1372,68 @@ public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, Byte\n         return value;\n     }\n \n+    public static <T extends Enum<T>> Setting<T> enumSetting(Class<T> clazz, String key, T defaultValue, Property... properties) {", "originalCommit": "b7c7faf3affb869c7d5da6fe3c1aaa9b8d494814", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxOTA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/66826#discussion_r552319078", "bodyText": "Some basic javadocs would be appreciated. While we are severely lacking them currently, we try to add them with new stuff when possible. Regarding multiple variants: less is better. So I would just add the minimum variants necessary for the existing enum use cases. We can always add more later, but we have a large problem of seldom used methods/ctors, when a single method/ctor would suffice.", "author": "rjernst", "createdAt": "2021-01-06T01:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5fd3b2f7cd7764c9786d7c85934e516e94507be", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/settings/Setting.java b/server/src/main/java/org/elasticsearch/common/settings/Setting.java\nindex fceff75a783..42317b6d97b 100644\n--- a/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n+++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n\n@@ -1372,66 +1372,18 @@ public class Setting<T> implements ToXContentObject {\n         return value;\n     }\n \n+    /**\n+     * Creates a setting where the allowed values are defined as enum constants. All enum constants must be uppercase.\n+     *\n+     * @param clazz the enum class\n+     * @param key the key for the setting\n+     * @param defaultValue the default value for this setting\n+     * @param properties properties properties for this setting like scope, filtering...\n+     * @param <T> the generics type parameter reflecting the actual type of the enum\n+     * @return the setting object\n+     */\n     public static <T extends Enum<T>> Setting<T> enumSetting(Class<T> clazz, String key, T defaultValue, Property... properties) {\n-        return new Setting<>(key, defaultValue.toString(), e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Setting<T> fallbackSetting,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, fallbackSetting, e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        T defaultValue,\n-        Validator<T> validator,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, defaultValue.toString(), e -> parseEnum(clazz, key, e, isFiltered(properties)), validator, properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Setting<T> fallbackSetting,\n-        Validator<T> validator,\n-        Property... properties\n-    ) {\n-        return new Setting<>(\n-            new SimpleKey(key),\n-            fallbackSetting,\n-            fallbackSetting::getRaw,\n-            e -> parseEnum(clazz, key, e, isFiltered(properties)),\n-            validator,\n-            properties\n-        );\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Function<Settings, String> defaultValueFn,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, defaultValueFn, e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    static <T extends Enum<T>> T parseEnum(Class<T> clazz, String key, String value, boolean isFiltered) {\n-        try {\n-            return Enum.valueOf(clazz, value.toUpperCase(Locale.ROOT));\n-        } catch (IllegalArgumentException iae) {\n-            if (isFiltered) {\n-                String msg = String.format(\"failed to parse value [%s] for setting [%s] as a %s\", value, key, clazz.getName());\n-                throw new IllegalArgumentException(msg);\n-            } else {\n-                throw iae;\n-            }\n-        }\n+        return new Setting<>(key, defaultValue.toString(), e -> Enum.valueOf(clazz, e.toUpperCase(Locale.ROOT)), properties);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEzNzgxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66826#discussion_r549137819", "bodyText": "At the top of this file, we see this section: (\n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n    \n    \n         Line 77\n      in\n      b7c7faf\n    \n    \n    \n    \n\n        \n          \n            * It's recommended to use typed settings rather than string based settings. For example adding a setting for an enum type: \n        \n    \n  \n\n)\n* <pre>{@code\n * public enum Color {\n *     RED, GREEN, BLUE;\n * }\n * public static final Setting<Color> MY_BOOLEAN =\n *     new Setting<>(\"my.color.setting\", Color.RED.toString(), Color::valueOf, SettingsProperty.NodeScope);\n * }\n * </pre>\n\nThis example does not make sense anymore (actually it didn't before because the setting name suggests a bool setting, and the snippet doesn't compile)\nHowever, I was not sure what to replace it with. All suggestions are welcome!", "author": "AlexAxeman", "createdAt": "2020-12-27T17:11:28Z", "path": "server/src/main/java/org/elasticsearch/common/settings/Setting.java", "diffHunk": "@@ -1372,6 +1372,68 @@ public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, Byte\n         return value;\n     }\n ", "originalCommit": "b7c7faf3affb869c7d5da6fe3c1aaa9b8d494814", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5fd3b2f7cd7764c9786d7c85934e516e94507be", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/settings/Setting.java b/server/src/main/java/org/elasticsearch/common/settings/Setting.java\nindex fceff75a783..42317b6d97b 100644\n--- a/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n+++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n\n@@ -1372,66 +1372,18 @@ public class Setting<T> implements ToXContentObject {\n         return value;\n     }\n \n+    /**\n+     * Creates a setting where the allowed values are defined as enum constants. All enum constants must be uppercase.\n+     *\n+     * @param clazz the enum class\n+     * @param key the key for the setting\n+     * @param defaultValue the default value for this setting\n+     * @param properties properties properties for this setting like scope, filtering...\n+     * @param <T> the generics type parameter reflecting the actual type of the enum\n+     * @return the setting object\n+     */\n     public static <T extends Enum<T>> Setting<T> enumSetting(Class<T> clazz, String key, T defaultValue, Property... properties) {\n-        return new Setting<>(key, defaultValue.toString(), e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Setting<T> fallbackSetting,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, fallbackSetting, e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        T defaultValue,\n-        Validator<T> validator,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, defaultValue.toString(), e -> parseEnum(clazz, key, e, isFiltered(properties)), validator, properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Setting<T> fallbackSetting,\n-        Validator<T> validator,\n-        Property... properties\n-    ) {\n-        return new Setting<>(\n-            new SimpleKey(key),\n-            fallbackSetting,\n-            fallbackSetting::getRaw,\n-            e -> parseEnum(clazz, key, e, isFiltered(properties)),\n-            validator,\n-            properties\n-        );\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Function<Settings, String> defaultValueFn,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, defaultValueFn, e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    static <T extends Enum<T>> T parseEnum(Class<T> clazz, String key, String value, boolean isFiltered) {\n-        try {\n-            return Enum.valueOf(clazz, value.toUpperCase(Locale.ROOT));\n-        } catch (IllegalArgumentException iae) {\n-            if (isFiltered) {\n-                String msg = String.format(\"failed to parse value [%s] for setting [%s] as a %s\", value, key, clazz.getName());\n-                throw new IllegalArgumentException(msg);\n-            } else {\n-                throw iae;\n-            }\n-        }\n+        return new Setting<>(key, defaultValue.toString(), e -> Enum.valueOf(clazz, e.toUpperCase(Locale.ROOT)), properties);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxOTY3NA==", "url": "https://github.com/elastic/elasticsearch/pull/66826#discussion_r552319674", "bodyText": "I don't think the isFiltered should be necessary. The filtered property is for settings which are sensitive (it predates the ES keystore). I don't think we need that for enum settings.", "author": "rjernst", "createdAt": "2021-01-06T01:53:17Z", "path": "server/src/main/java/org/elasticsearch/common/settings/Setting.java", "diffHunk": "@@ -1372,6 +1372,68 @@ public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, Byte\n         return value;\n     }\n \n+    public static <T extends Enum<T>> Setting<T> enumSetting(Class<T> clazz, String key, T defaultValue, Property... properties) {\n+        return new Setting<>(key, defaultValue.toString(), e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n+    }\n+\n+    public static <T extends Enum<T>> Setting<T> enumSetting(\n+        Class<T> clazz,\n+        String key,\n+        Setting<T> fallbackSetting,\n+        Property... properties\n+    ) {\n+        return new Setting<>(key, fallbackSetting, e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n+    }\n+\n+    public static <T extends Enum<T>> Setting<T> enumSetting(\n+        Class<T> clazz,\n+        String key,\n+        T defaultValue,\n+        Validator<T> validator,\n+        Property... properties\n+    ) {\n+        return new Setting<>(key, defaultValue.toString(), e -> parseEnum(clazz, key, e, isFiltered(properties)), validator, properties);\n+    }\n+\n+    public static <T extends Enum<T>> Setting<T> enumSetting(\n+        Class<T> clazz,\n+        String key,\n+        Setting<T> fallbackSetting,\n+        Validator<T> validator,\n+        Property... properties\n+    ) {\n+        return new Setting<>(\n+            new SimpleKey(key),\n+            fallbackSetting,\n+            fallbackSetting::getRaw,\n+            e -> parseEnum(clazz, key, e, isFiltered(properties)),\n+            validator,\n+            properties\n+        );\n+    }\n+\n+    public static <T extends Enum<T>> Setting<T> enumSetting(\n+        Class<T> clazz,\n+        String key,\n+        Function<Settings, String> defaultValueFn,\n+        Property... properties\n+    ) {\n+        return new Setting<>(key, defaultValueFn, e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n+    }\n+\n+    static <T extends Enum<T>> T parseEnum(Class<T> clazz, String key, String value, boolean isFiltered) {", "originalCommit": "b7c7faf3affb869c7d5da6fe3c1aaa9b8d494814", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5fd3b2f7cd7764c9786d7c85934e516e94507be", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/settings/Setting.java b/server/src/main/java/org/elasticsearch/common/settings/Setting.java\nindex fceff75a783..42317b6d97b 100644\n--- a/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n+++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n\n@@ -1372,66 +1372,18 @@ public class Setting<T> implements ToXContentObject {\n         return value;\n     }\n \n+    /**\n+     * Creates a setting where the allowed values are defined as enum constants. All enum constants must be uppercase.\n+     *\n+     * @param clazz the enum class\n+     * @param key the key for the setting\n+     * @param defaultValue the default value for this setting\n+     * @param properties properties properties for this setting like scope, filtering...\n+     * @param <T> the generics type parameter reflecting the actual type of the enum\n+     * @return the setting object\n+     */\n     public static <T extends Enum<T>> Setting<T> enumSetting(Class<T> clazz, String key, T defaultValue, Property... properties) {\n-        return new Setting<>(key, defaultValue.toString(), e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Setting<T> fallbackSetting,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, fallbackSetting, e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        T defaultValue,\n-        Validator<T> validator,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, defaultValue.toString(), e -> parseEnum(clazz, key, e, isFiltered(properties)), validator, properties);\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Setting<T> fallbackSetting,\n-        Validator<T> validator,\n-        Property... properties\n-    ) {\n-        return new Setting<>(\n-            new SimpleKey(key),\n-            fallbackSetting,\n-            fallbackSetting::getRaw,\n-            e -> parseEnum(clazz, key, e, isFiltered(properties)),\n-            validator,\n-            properties\n-        );\n-    }\n-\n-    public static <T extends Enum<T>> Setting<T> enumSetting(\n-        Class<T> clazz,\n-        String key,\n-        Function<Settings, String> defaultValueFn,\n-        Property... properties\n-    ) {\n-        return new Setting<>(key, defaultValueFn, e -> parseEnum(clazz, key, e, isFiltered(properties)), properties);\n-    }\n-\n-    static <T extends Enum<T>> T parseEnum(Class<T> clazz, String key, String value, boolean isFiltered) {\n-        try {\n-            return Enum.valueOf(clazz, value.toUpperCase(Locale.ROOT));\n-        } catch (IllegalArgumentException iae) {\n-            if (isFiltered) {\n-                String msg = String.format(\"failed to parse value [%s] for setting [%s] as a %s\", value, key, clazz.getName());\n-                throw new IllegalArgumentException(msg);\n-            } else {\n-                throw iae;\n-            }\n-        }\n+        return new Setting<>(key, defaultValue.toString(), e -> Enum.valueOf(clazz, e.toUpperCase(Locale.ROOT)), properties);\n     }\n \n     /**\n"}}, {"oid": "e5fd3b2f7cd7764c9786d7c85934e516e94507be", "url": "https://github.com/elastic/elasticsearch/commit/e5fd3b2f7cd7764c9786d7c85934e516e94507be", "message": "Changes addressing PR comments", "committedDate": "2021-01-07T00:59:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUxNzY3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66826#discussion_r553517676", "bodyText": "nit: looks like properties is included twice in the param description", "author": "rjernst", "createdAt": "2021-01-07T18:51:36Z", "path": "server/src/main/java/org/elasticsearch/common/settings/Setting.java", "diffHunk": "@@ -1372,6 +1372,20 @@ public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, Byte\n         return value;\n     }\n \n+    /**\n+     * Creates a setting where the allowed values are defined as enum constants. All enum constants must be uppercase.\n+     *\n+     * @param clazz the enum class\n+     * @param key the key for the setting\n+     * @param defaultValue the default value for this setting\n+     * @param properties properties properties for this setting like scope, filtering...", "originalCommit": "e5fd3b2f7cd7764c9786d7c85934e516e94507be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e62ee15813601cfd32e8350dceff5d76017b3c9e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/settings/Setting.java b/server/src/main/java/org/elasticsearch/common/settings/Setting.java\nindex 42317b6d97b..1f2255d1300 100644\n--- a/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n+++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java\n\n@@ -1378,7 +1378,7 @@ public class Setting<T> implements ToXContentObject {\n      * @param clazz the enum class\n      * @param key the key for the setting\n      * @param defaultValue the default value for this setting\n-     * @param properties properties properties for this setting like scope, filtering...\n+     * @param properties properties for this setting like scope, filtering...\n      * @param <T> the generics type parameter reflecting the actual type of the enum\n      * @return the setting object\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUxODUzMg==", "url": "https://github.com/elastic/elasticsearch/pull/66826#discussion_r553518532", "bodyText": "This seems like an odd test, to check that the exception has no cause. Can we instead check part of the message to be sure it in the IAE we expect?", "author": "rjernst", "createdAt": "2021-01-07T18:53:17Z", "path": "server/src/test/java/org/elasticsearch/common/settings/SettingTests.java", "diffHunk": "@@ -352,6 +352,19 @@ public void testFilteredBooleanSetting() {\n         assertNull(e.getCause());\n     }\n \n+    private enum TestEnumSetting {\n+        ON,\n+        OFF\n+    }\n+\n+    public void testThrowsIllegalArgumentExceptionOnInvalidEnumSetting() {\n+        Setting setting = Setting.enumSetting(TestEnumSetting.class, \"foo\", TestEnumSetting.ON, Property.Filtered);\n+        final Settings settings = Settings.builder().put(\"foo\", \"bar\").build();\n+\n+        final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> setting.get(settings));\n+        assertNull(e.getCause());", "originalCommit": "e5fd3b2f7cd7764c9786d7c85934e516e94507be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e62ee15813601cfd32e8350dceff5d76017b3c9e", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/common/settings/SettingTests.java b/server/src/test/java/org/elasticsearch/common/settings/SettingTests.java\nindex f5944a6ca31..ac88a7091b5 100644\n--- a/server/src/test/java/org/elasticsearch/common/settings/SettingTests.java\n+++ b/server/src/test/java/org/elasticsearch/common/settings/SettingTests.java\n\n@@ -362,7 +362,7 @@ public class SettingTests extends ESTestCase {\n         final Settings settings = Settings.builder().put(\"foo\", \"bar\").build();\n \n         final IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> setting.get(settings));\n-        assertNull(e.getCause());\n+        assertThat(e, hasToString(containsString(\"No enum constant org.elasticsearch.common.settings.SettingTests.TestEnumSetting.BAR\")));\n     }\n \n     public void testUpdateNotDynamic() {\n"}}, {"oid": "e62ee15813601cfd32e8350dceff5d76017b3c9e", "url": "https://github.com/elastic/elasticsearch/commit/e62ee15813601cfd32e8350dceff5d76017b3c9e", "message": "changes PR comments", "committedDate": "2021-01-09T00:42:26Z", "type": "commit"}, {"oid": "18a40ed73d9a0e48f352aa8570e9207da893fce8", "url": "https://github.com/elastic/elasticsearch/commit/18a40ed73d9a0e48f352aa8570e9207da893fce8", "message": "Merge branch 'master' into add_enum_settings", "committedDate": "2021-01-12T20:29:56Z", "type": "commit"}, {"oid": "7fd38bca975cc65dc76b1dc44254260458034696", "url": "https://github.com/elastic/elasticsearch/commit/7fd38bca975cc65dc76b1dc44254260458034696", "message": "Merge branch 'master' into add_enum_settings", "committedDate": "2021-01-15T19:26:50Z", "type": "commit"}]}