{"pr_number": 64517, "pr_title": "Adding API for generating SAML SP metadata", "pr_createdAt": "2020-11-03T09:25:44Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64517", "timeline": [{"oid": "860fd30017de5c43af0da1888640c491eab5e0f0", "url": "https://github.com/elastic/elasticsearch/commit/860fd30017de5c43af0da1888640c491eab5e0f0", "message": "Adding API for generating SAML SP metadata\nResolve #49018", "committedDate": "2020-11-03T09:23:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0MTczMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516541731", "bodyText": "Since the request object only contains the realm name, we can use the realm name instead of the request object", "author": "jkakavas", "createdAt": "2020-11-03T09:52:58Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSPMetadataAction\n+    extends HandledTransportAction<SamlSPMetadataRequest, SamlSPMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSPMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSPMetadataAction.NAME, transportService, actionFilters, SamlSPMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSPMetadataRequest request,\n+                             ActionListener<SamlSPMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3NzU4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516977583", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-03T21:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0MTczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nsimilarity index 65%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nindex edbcb22cbd2..00c1d073c82 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n\n@@ -6,24 +6,24 @@\n \n package org.elasticsearch.xpack.security.action.saml;\n \n+import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n import org.elasticsearch.xpack.security.authc.Realms;\n-import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlEntityDescriptorBuilder;\n import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n import org.w3c.dom.Element;\n \n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjE5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516546193", "bodyText": "Given that we search by name and we do not allow multple realms of the same type with the same name ( this would even fail in the YAML validation of the settings as they'd have the same key ) this can never happen. The other places that call findSamlRealms potentially pass an acsUrl and this is why they need to handle possible multiple results. We can leave this here in the spirit of defensive coding  I think", "author": "jkakavas", "createdAt": "2020-11-03T09:59:48Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSPMetadataAction\n+    extends HandledTransportAction<SamlSPMetadataRequest, SamlSPMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSPMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSPMetadataAction.NAME, transportService, actionFilters, SamlSPMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSPMetadataRequest request,\n+                             ActionListener<SamlSPMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n+        } else if (realms.size() > 1) {", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nsimilarity index 65%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nindex edbcb22cbd2..00c1d073c82 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n\n@@ -6,24 +6,24 @@\n \n package org.elasticsearch.xpack.security.action.saml;\n \n+import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n import org.elasticsearch.xpack.security.authc.Realms;\n-import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlEntityDescriptorBuilder;\n import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n import org.w3c.dom.Element;\n \n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0ODc4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516548789", "bodyText": "I think we should extract all the Metadata building functionality in a separate class ( ie. see SamlIdpMetadataBuilder ) and use this in the SamlMetadataCommand and here, instead of calling methods of SamlMetadataCommand in this transport action", "author": "jkakavas", "createdAt": "2020-11-03T10:04:07Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3Nzc3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516977772", "bodyText": "Changed", "author": "BigPandaToo", "createdAt": "2020-11-03T21:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0ODc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nsimilarity index 65%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nindex edbcb22cbd2..00c1d073c82 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n\n@@ -6,24 +6,24 @@\n \n package org.elasticsearch.xpack.security.action.saml;\n \n+import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n import org.elasticsearch.xpack.security.authc.Realms;\n-import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlEntityDescriptorBuilder;\n import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n import org.w3c.dom.Element;\n \n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0OTU3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516549576", "bodyText": "since we will be returing the XML metadata as a value in json, it doesn't make much sens to add indentation", "author": "jkakavas", "createdAt": "2020-11-03T10:05:24Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSPMetadataAction\n+    extends HandledTransportAction<SamlSPMetadataRequest, SamlSPMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSPMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSPMetadataAction.NAME, transportService, actionFilters, SamlSPMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSPMetadataRequest request,\n+                             ActionListener<SamlSPMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request));\n+        } else {\n+            prepareMetadata(realms.get(0), listener);\n+        }\n+    }\n+\n+    private void prepareMetadata(SamlRealm realm, ActionListener<SamlSPMetadataResponse> listener) {\n+        try {\n+            final EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+            final EntityDescriptor descriptor = SamlMetadataCommand.buildEntityDescriptorFromSamlRealm(realm);\n+            final Element element = marshaller.marshall(descriptor);\n+            final StringWriter writer = new StringWriter();\n+            final Transformer serializer = SamlUtils.getHardenedXMLTransformer();\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODE5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516978192", "bodyText": "Changed", "author": "BigPandaToo", "createdAt": "2020-11-03T21:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0OTU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nsimilarity index 65%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nindex edbcb22cbd2..00c1d073c82 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n\n@@ -6,24 +6,24 @@\n \n package org.elasticsearch.xpack.security.action.saml;\n \n+import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n import org.elasticsearch.xpack.security.authc.Realms;\n-import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlEntityDescriptorBuilder;\n import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n import org.w3c.dom.Element;\n \n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1NzE1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516557153", "bodyText": "This is not used. In general when you have a single field that you don't want to maipulate somehow, you don't need a static inner class for this as you can call the relevant setter in the request object directly when declaring the field in the parser", "author": "jkakavas", "createdAt": "2020-11-03T10:17:14Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSPMetadataAction extends SamlBaseRestHandler {\n+\n+    static class Input {", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODQwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516978409", "bodyText": "Refactored", "author": "BigPandaToo", "createdAt": "2020-11-03T21:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1NzE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nsimilarity index 62%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nindex dc58b41d74e..2fe8227e8ce 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n\n@@ -7,7 +7,6 @@\n package org.elasticsearch.xpack.security.rest.action.saml;\n \n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.ParseField;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1ODQ4NA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516558484", "bodyText": "This is a GET API so it doesn't make sense to expect a parameter in the body of the request. We should get the realm from a request parameter instead", "author": "jkakavas", "createdAt": "2020-11-03T10:19:27Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSPMetadataAction extends SamlBaseRestHandler {\n+\n+    static class Input {\n+        String realm;\n+        void setRealm(String realm) {\n+            this.realm = realm;\n+        }\n+    }\n+\n+    static final ObjectParser<SamlSPMetadataRequest, Void> PARSER = new ObjectParser<>(\"security_saml_metadata\",\n+        SamlSPMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareStringOrNull(SamlSPMetadataRequest::setRealmName, new ParseField(\"realm\"));", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODQ4NA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516978484", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-03T21:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1ODQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nsimilarity index 62%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nindex dc58b41d74e..2fe8227e8ce 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n\n@@ -7,7 +7,6 @@\n package org.elasticsearch.xpack.security.rest.action.saml;\n \n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.ParseField;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MzU2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516563561", "bodyText": "suggestion: \"Realm name may not be empty\"", "author": "jkakavas", "createdAt": "2020-11-03T10:27:50Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSPMetadataRequest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class SamlSPMetadataRequest extends ActionRequest {\n+\n+    String realmName;\n+\n+    public SamlSPMetadataRequest(StreamInput in) throws IOException {\n+        super(in);\n+        realmName = in.readOptionalString();\n+    }\n+\n+    public SamlSPMetadataRequest() {\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        ActionRequestValidationException validationException = null;\n+        if (Strings.hasText(realmName) == false) {\n+            validationException = addValidationError(\"realm may not be empty\", validationException);", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSPMetadataRequest.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\nsimilarity index 84%\nrename from x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSPMetadataRequest.java\nrename to x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\nindex 9db28864a36..106b16d4376 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSPMetadataRequest.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\n\n@@ -16,23 +16,23 @@ import java.io.IOException;\n \n import static org.elasticsearch.action.ValidateActions.addValidationError;\n \n-public class SamlSPMetadataRequest extends ActionRequest {\n+public class SamlSpMetadataRequest extends ActionRequest {\n \n     String realmName;\n \n-    public SamlSPMetadataRequest(StreamInput in) throws IOException {\n+    public SamlSpMetadataRequest(StreamInput in) throws IOException {\n         super(in);\n         realmName = in.readOptionalString();\n     }\n \n-    public SamlSPMetadataRequest() {\n+    public SamlSpMetadataRequest() {\n     }\n \n     @Override\n     public ActionRequestValidationException validate() {\n         ActionRequestValidationException validationException = null;\n         if (Strings.hasText(realmName) == false) {\n-            validationException = addValidationError(\"realm may not be empty\", validationException);\n+            validationException = addValidationError(\"Realm name may not be empty\", validationException);\n         }\n         return validationException;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzczMw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516567733", "bodyText": "This should be part of another class, see my comments in TransportSamlSPMetadataAction", "author": "jkakavas", "createdAt": "2020-11-03T10:34:35Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java", "diffHunk": "@@ -93,6 +93,18 @@ public static void main(String[] args) throws Exception {\n         exit(new SamlMetadataCommand().main(args, Terminal.DEFAULT));\n     }\n \n+    public static EntityDescriptor buildEntityDescriptorFromSamlRealm(SamlRealm samlRealm) throws Exception {", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODY2OA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516978668", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-03T21:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzczMw=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java\nindex 2d6a1c62e09..3aef30a67ca 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java\n\n@@ -93,18 +90,6 @@ public class SamlMetadataCommand extends KeyStoreAwareCommand {\n         exit(new SamlMetadataCommand().main(args, Terminal.DEFAULT));\n     }\n \n-    public static EntityDescriptor buildEntityDescriptorFromSamlRealm(SamlRealm samlRealm) throws Exception {\n-        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();\n-        final Locale locale = Locale.getDefault();\n-        final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(locale, spConfig.getEntityId())\n-            .assertionConsumerServiceUrl(spConfig.getAscUrl())\n-            .singleLogoutServiceUrl(spConfig.getLogoutUrl())\n-            .encryptionCredentials(spConfig.getEncryptionCredentials())\n-            .signingCredential(spConfig.getSigningConfiguration().getCredential())\n-            .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME));\n-        return builder.build();\n-    }\n-\n     public SamlMetadataCommand() {\n         this((environment) -> {\n             KeyStoreWrapper ksWrapper = KeyStoreWrapper.load(environment.configFile());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2ODYwMg==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516568602", "bodyText": "This affects all files, but I'll make it only once here:\nnit: We should either use xxxxSpMetadatayyyyyy.java or xxxxServiceProviderMetadatayyyy.java for the class names", "author": "jkakavas", "createdAt": "2020-11-03T10:36:01Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSPMetadataAction extends SamlBaseRestHandler {", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODgxMg==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516978812", "bodyText": "Refactored", "author": "BigPandaToo", "createdAt": "2020-11-03T21:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2ODYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nsimilarity index 62%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nindex dc58b41d74e..2fe8227e8ce 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n\n@@ -7,7 +7,6 @@\n package org.elasticsearch.xpack.security.rest.action.saml;\n \n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.ParseField;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MDE5MA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516570190", "bodyText": "let's call the field metadata, xml is redundant as it is obvious and we don't offer any other format of metadata", "author": "jkakavas", "createdAt": "2020-11-03T10:38:36Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSPMetadataAction extends SamlBaseRestHandler {\n+\n+    static class Input {\n+        String realm;\n+        void setRealm(String realm) {\n+            this.realm = realm;\n+        }\n+    }\n+\n+    static final ObjectParser<SamlSPMetadataRequest, Void> PARSER = new ObjectParser<>(\"security_saml_metadata\",\n+        SamlSPMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareStringOrNull(SamlSPMetadataRequest::setRealmName, new ParseField(\"realm\"));\n+    }\n+\n+    public RestSamlSPMetadataAction(Settings settings, XPackLicenseState licenseState) {\n+        super(settings, licenseState);\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return Collections.singletonList(\n+            new Route(GET, \"/_security/saml/metadata\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"security_saml_metadata_action\";\n+    }\n+\n+    @Override\n+    public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        try (XContentParser parser = request.contentParser()) {\n+            final SamlSPMetadataRequest SamlSPRequest = PARSER.parse(parser, null);\n+            return channel -> client.execute(SamlSPMetadataAction.INSTANCE, SamlSPRequest,\n+                new RestBuilderListener<SamlSPMetadataResponse>(channel) {\n+                @Override\n+                public RestResponse buildResponse(SamlSPMetadataResponse response, XContentBuilder builder) throws Exception {\n+                    builder.startObject();\n+                    builder.field(\"xml_metadata\", response.getXMLString());", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516978905", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-03T21:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MDE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nsimilarity index 62%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nindex dc58b41d74e..2fe8227e8ce 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n\n@@ -7,7 +7,6 @@\n package org.elasticsearch.xpack.security.rest.action.saml;\n \n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.ParseField;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MTEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516571101", "bodyText": "nit: s/Internal exception/Error. Also maybe add the realm name in the message here for easier debugging.", "author": "jkakavas", "createdAt": "2020-11-03T10:40:05Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSPMetadataAction\n+    extends HandledTransportAction<SamlSPMetadataRequest, SamlSPMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSPMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSPMetadataAction.NAME, transportService, actionFilters, SamlSPMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSPMetadataRequest request,\n+                             ActionListener<SamlSPMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request));\n+        } else {\n+            prepareMetadata(realms.get(0), listener);\n+        }\n+    }\n+\n+    private void prepareMetadata(SamlRealm realm, ActionListener<SamlSPMetadataResponse> listener) {\n+        try {\n+            final EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+            final EntityDescriptor descriptor = SamlMetadataCommand.buildEntityDescriptorFromSamlRealm(realm);\n+            final Element element = marshaller.marshall(descriptor);\n+            final StringWriter writer = new StringWriter();\n+            final Transformer serializer = SamlUtils.getHardenedXMLTransformer();\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            serializer.transform(new DOMSource(element), new StreamResult(writer));\n+            listener.onResponse(new SamlSPMetadataResponse(writer.toString()));\n+        } catch (Exception e) {\n+            logger.debug(\"Internal exception during SAML SP metadata generation\", e);", "originalCommit": "860fd30017de5c43af0da1888640c491eab5e0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODk2NA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r516978964", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-03T21:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MTEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1180e645b6b156be2af38bed936c6a3da95d7386", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nsimilarity index 65%\nrename from x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\nrename to x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nindex edbcb22cbd2..00c1d073c82 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSPMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n\n@@ -6,24 +6,24 @@\n \n package org.elasticsearch.xpack.security.action.saml;\n \n+import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataAction;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataRequest;\n-import org.elasticsearch.xpack.core.security.action.saml.SamlSPMetadataResponse;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n import org.elasticsearch.xpack.security.authc.Realms;\n-import org.elasticsearch.xpack.security.authc.saml.SamlMetadataCommand;\n+import org.elasticsearch.xpack.security.authc.saml.SamlEntityDescriptorBuilder;\n import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n import org.w3c.dom.Element;\n \n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n"}}, {"oid": "75b6c953ad4261dccdd15f7d47d44a7dfdf7ef21", "url": "https://github.com/elastic/elasticsearch/commit/75b6c953ad4261dccdd15f7d47d44a7dfdf7ef21", "message": "Merge branch 'master' into SAML_SP_API", "committedDate": "2020-11-03T14:48:19Z", "type": "commit"}, {"oid": "1180e645b6b156be2af38bed936c6a3da95d7386", "url": "https://github.com/elastic/elasticsearch/commit/1180e645b6b156be2af38bed936c6a3da95d7386", "message": "Adding API for generating SAML SP metadata\nResolves #49018", "committedDate": "2020-11-03T22:18:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MjMxMA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517142310", "bodyText": "Is it intentional that this is admin rather monitor?", "author": "tvernum", "createdAt": "2020-11-04T07:31:12Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+public class SamlSpMetadataAction extends ActionType<SamlSpMetadataResponse> {\n+    public static final String NAME = \"cluster:admin/xpack/security/saml/metadata\";", "originalCommit": "1180e645b6b156be2af38bed936c6a3da95d7386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3NDAzNw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517174037", "bodyText": "Good catch. I think that this could be monitor as it fits under what I can envision a user with a role with monitor privilege could do without needing manage_saml or manage_security", "author": "jkakavas", "createdAt": "2020-11-04T08:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MjMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzODc3MA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517238770", "bodyText": "Good catch!", "author": "BigPandaToo", "createdAt": "2020-11-04T10:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MjMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4Njk1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517386956", "bodyText": "Fixed", "author": "BigPandaToo", "createdAt": "2020-11-04T14:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MjMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "1b18d9f85d73afa7404d9924d396f993400e89ef", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataAction.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataAction.java\nindex f1313de6500..17588ec8c6e 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataAction.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataAction.java\n\n@@ -9,7 +9,7 @@ package org.elasticsearch.xpack.core.security.action.saml;\n import org.elasticsearch.action.ActionType;\n \n public class SamlSpMetadataAction extends ActionType<SamlSpMetadataResponse> {\n-    public static final String NAME = \"cluster:admin/xpack/security/saml/metadata\";\n+    public static final String NAME = \"cluster:monitor/xpack/security/saml/metadata\";\n     public static final SamlSpMetadataAction INSTANCE = new SamlSpMetadataAction();\n \n     private SamlSpMetadataAction() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MjUwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517142509", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String realmName;\n          \n          \n            \n                private String realmName;", "author": "tvernum", "createdAt": "2020-11-04T07:31:41Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class SamlSpMetadataRequest extends ActionRequest {\n+\n+    String realmName;", "originalCommit": "1180e645b6b156be2af38bed936c6a3da95d7386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4NzA0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517387043", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-04T14:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MjUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b18d9f85d73afa7404d9924d396f993400e89ef", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\nindex 106b16d4376..4b302ecc517 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\n\n@@ -18,14 +18,15 @@ import static org.elasticsearch.action.ValidateActions.addValidationError;\n \n public class SamlSpMetadataRequest extends ActionRequest {\n \n-    String realmName;\n+    private String realmName;\n \n     public SamlSpMetadataRequest(StreamInput in) throws IOException {\n         super(in);\n         realmName = in.readOptionalString();\n     }\n \n-    public SamlSpMetadataRequest() {\n+    public SamlSpMetadataRequest(String realmName) {\n+        this.realmName = realmName;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3OTY3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517179671", "bodyText": "So I had missed we already have SamlSpMetadataBuilder. This is great because we could use that and not introduce SamlEntityDescriptorBuilder. You already have everything you need there to use in the Transport action I think.\nTo be more concrete, buildEntityDescriptorFromSamlRealm that you already had in SamlMetadataCommand, could live in the transport action ( as a method of its own or as part of prepareMetadata ) and make use of SamlSpMetadataBuilder", "author": "jkakavas", "createdAt": "2020-11-04T08:45:57Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.cli.ExitCodes;\n+import org.elasticsearch.cli.Terminal;\n+import org.elasticsearch.cli.UserException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.security.authc.RealmConfig;\n+import org.elasticsearch.xpack.core.security.authc.RealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.saml.SamlRealmSettings;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class SamlEntityDescriptorBuilder {\n+    private final EntityDescriptor entityDescriptor;\n+\n+    public EntityDescriptor getEntityDescriptor() {\n+        return entityDescriptor;\n+    }\n+\n+    public SamlEntityDescriptorBuilder(SamlRealm samlRealm) throws Exception{", "originalCommit": "1180e645b6b156be2af38bed936c6a3da95d7386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4NzM1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517387359", "bodyText": "Refactored", "author": "BigPandaToo", "createdAt": "2020-11-04T14:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3OTY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b18d9f85d73afa7404d9924d396f993400e89ef", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java\ndeleted file mode 100644\nindex 59d3aae1bdd..00000000000\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java\n+++ /dev/null\n\n@@ -1,123 +0,0 @@\n-/*\n- * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n- * or more contributor license agreements. Licensed under the Elastic License;\n- * you may not use this file except in compliance with the Elastic License.\n- */\n-\n-package org.elasticsearch.xpack.security.authc.saml;\n-\n-import org.elasticsearch.cli.ExitCodes;\n-import org.elasticsearch.cli.Terminal;\n-import org.elasticsearch.cli.UserException;\n-import org.elasticsearch.common.Strings;\n-import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.xpack.core.security.authc.RealmConfig;\n-import org.elasticsearch.xpack.core.security.authc.RealmSettings;\n-import org.elasticsearch.xpack.core.security.authc.saml.SamlRealmSettings;\n-import org.opensaml.saml.saml2.core.AuthnRequest;\n-import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n-\n-import java.util.Locale;\n-import java.util.Map;\n-\n-public class SamlEntityDescriptorBuilder {\n-    private final EntityDescriptor entityDescriptor;\n-\n-    public EntityDescriptor getEntityDescriptor() {\n-        return entityDescriptor;\n-    }\n-\n-    public SamlEntityDescriptorBuilder(SamlRealm samlRealm) throws Exception{\n-        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();\n-        final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(samlRealm)\n-            .encryptionCredentials(spConfig.getEncryptionCredentials())\n-            .signingCredential(spConfig.getSigningConfiguration().getCredential())\n-            .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME));\n-        entityDescriptor = builder.build();\n-    }\n-\n-    public SamlEntityDescriptorBuilder(RealmConfig realm, boolean batch, String serviceName, String orgName, String orgUrl,\n-                                       String orgDisplayName, boolean contacts, Locale locale, Map<String, String> attributes,\n-                                       Terminal terminal) throws Exception {\n-        final Settings realmSettings = realm.settings().getByPrefix(RealmSettings.realmSettingPrefix(realm.identifier()));\n-        terminal.println(Terminal.Verbosity.VERBOSE,\n-            \"Using realm configuration\\n=====\\n\" + realmSettings.toDelimitedString('\\n') + \"=====\");\n-        terminal.println(Terminal.Verbosity.VERBOSE, \"Using locale: \" + locale.toLanguageTag());\n-\n-        final SpConfiguration spConfig = SamlRealm.getSpConfiguration(realm);\n-        final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(locale, spConfig.getEntityId())\n-            .assertionConsumerServiceUrl(spConfig.getAscUrl())\n-            .singleLogoutServiceUrl(spConfig.getLogoutUrl())\n-            .encryptionCredentials(spConfig.getEncryptionCredentials())\n-            .signingCredential(spConfig.getSigningConfiguration().getCredential())\n-            .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME))\n-            .nameIdFormat(realm.getSetting(SamlRealmSettings.NAMEID_FORMAT))\n-            .serviceName(serviceName);\n-\n-        for (String attr : attributes.keySet()) {\n-            final String name;\n-            String friendlyName;\n-            final String settingName = attributes.get(attr);\n-            final String attributeSource = settingName == null ? \"command line\" : '\"' + settingName + '\"';\n-            if (attr.contains(\":\")) {\n-                name = attr;\n-                if (batch) {\n-                    friendlyName = settingName;\n-                } else {\n-                    friendlyName = terminal.readText(\"What is the friendly name for \" +\n-                        attributeSource\n-                        + \" attribute \\\"\" + attr + \"\\\" [default: \" +\n-                        (settingName == null ? \"none\" : settingName) +\n-                        \"] \");\n-                    if (Strings.isNullOrEmpty(friendlyName)) {\n-                        friendlyName = settingName;\n-                    }\n-                }\n-            } else {\n-                if (batch) {\n-                    throw new UserException(ExitCodes.CONFIG, \"Option batch is specified, but attribute \"\n-                        + attr + \" appears to be a FriendlyName value\");\n-                }\n-                friendlyName = attr;\n-                name = requireText(terminal,\n-                    \"What is the standard (urn) name for \" + attributeSource + \" attribute \\\"\" + attr + \"\\\" (required): \");\n-            }\n-            terminal.println(Terminal.Verbosity.VERBOSE, \"Requesting attribute '\" + name + \"' (FriendlyName: '\" + friendlyName + \"')\");\n-            builder.withAttribute(friendlyName, name);\n-        }\n-\n-        if (orgName != null && orgUrl != null) {\n-            builder.organization(orgName, orgDisplayName, orgUrl);\n-        }\n-\n-        if (contacts) {\n-            terminal.println(\"\\nPlease enter the personal details for each contact to be included in the metadata\");\n-            do {\n-                final String givenName = requireText(terminal, \"What is the given name for the contact: \");\n-                final String surName = requireText(terminal, \"What is the surname for the contact: \");\n-                final String displayName = givenName + ' ' + surName;\n-                final String email = requireText(terminal, \"What is the email address for \" + displayName + \": \");\n-                String type;\n-                while (true) {\n-                    type = requireText(terminal, \"What is the contact type for \" + displayName + \": \");\n-                    if (SamlSpMetadataBuilder.ContactInfo.TYPES.containsKey(type)) {\n-                        break;\n-                    } else {\n-                        terminal.errorPrintln(\"Type '\" + type + \"' is not valid. Valid values are \"\n-                            + Strings.collectionToCommaDelimitedString(SamlSpMetadataBuilder.ContactInfo.TYPES.keySet()));\n-                    }\n-                }\n-                builder.withContact(type, givenName, surName, email);\n-            } while (terminal.promptYesNo(\"Enter details for another contact\", true));\n-        }\n-        entityDescriptor = builder.build();\n-    }\n-\n-    private String requireText(Terminal terminal, String prompt) {\n-        String value = null;\n-        while (Strings.isNullOrEmpty(value)) {\n-            value = terminal.readText(prompt);\n-        }\n-        return value;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MDQ0NA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517180444", "bodyText": "This is probably irrelevant now, if we remove this class after all but it wouldn't make much sense for user input related code to be here and not in the Command class", "author": "jkakavas", "createdAt": "2020-11-04T08:47:21Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.authc.saml;\n+\n+import org.elasticsearch.cli.ExitCodes;\n+import org.elasticsearch.cli.Terminal;\n+import org.elasticsearch.cli.UserException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.security.authc.RealmConfig;\n+import org.elasticsearch.xpack.core.security.authc.RealmSettings;\n+import org.elasticsearch.xpack.core.security.authc.saml.SamlRealmSettings;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class SamlEntityDescriptorBuilder {\n+    private final EntityDescriptor entityDescriptor;\n+\n+    public EntityDescriptor getEntityDescriptor() {\n+        return entityDescriptor;\n+    }\n+\n+    public SamlEntityDescriptorBuilder(SamlRealm samlRealm) throws Exception{\n+        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();\n+        final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(samlRealm)\n+            .encryptionCredentials(spConfig.getEncryptionCredentials())\n+            .signingCredential(spConfig.getSigningConfiguration().getCredential())\n+            .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME));\n+        entityDescriptor = builder.build();\n+    }\n+\n+    public SamlEntityDescriptorBuilder(RealmConfig realm, boolean batch, String serviceName, String orgName, String orgUrl,", "originalCommit": "1180e645b6b156be2af38bed936c6a3da95d7386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4NzUxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517387511", "bodyText": "Refactored", "author": "BigPandaToo", "createdAt": "2020-11-04T14:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MDQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "1b18d9f85d73afa7404d9924d396f993400e89ef", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java\ndeleted file mode 100644\nindex 59d3aae1bdd..00000000000\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlEntityDescriptorBuilder.java\n+++ /dev/null\n\n@@ -1,123 +0,0 @@\n-/*\n- * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n- * or more contributor license agreements. Licensed under the Elastic License;\n- * you may not use this file except in compliance with the Elastic License.\n- */\n-\n-package org.elasticsearch.xpack.security.authc.saml;\n-\n-import org.elasticsearch.cli.ExitCodes;\n-import org.elasticsearch.cli.Terminal;\n-import org.elasticsearch.cli.UserException;\n-import org.elasticsearch.common.Strings;\n-import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.xpack.core.security.authc.RealmConfig;\n-import org.elasticsearch.xpack.core.security.authc.RealmSettings;\n-import org.elasticsearch.xpack.core.security.authc.saml.SamlRealmSettings;\n-import org.opensaml.saml.saml2.core.AuthnRequest;\n-import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n-\n-import java.util.Locale;\n-import java.util.Map;\n-\n-public class SamlEntityDescriptorBuilder {\n-    private final EntityDescriptor entityDescriptor;\n-\n-    public EntityDescriptor getEntityDescriptor() {\n-        return entityDescriptor;\n-    }\n-\n-    public SamlEntityDescriptorBuilder(SamlRealm samlRealm) throws Exception{\n-        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();\n-        final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(samlRealm)\n-            .encryptionCredentials(spConfig.getEncryptionCredentials())\n-            .signingCredential(spConfig.getSigningConfiguration().getCredential())\n-            .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME));\n-        entityDescriptor = builder.build();\n-    }\n-\n-    public SamlEntityDescriptorBuilder(RealmConfig realm, boolean batch, String serviceName, String orgName, String orgUrl,\n-                                       String orgDisplayName, boolean contacts, Locale locale, Map<String, String> attributes,\n-                                       Terminal terminal) throws Exception {\n-        final Settings realmSettings = realm.settings().getByPrefix(RealmSettings.realmSettingPrefix(realm.identifier()));\n-        terminal.println(Terminal.Verbosity.VERBOSE,\n-            \"Using realm configuration\\n=====\\n\" + realmSettings.toDelimitedString('\\n') + \"=====\");\n-        terminal.println(Terminal.Verbosity.VERBOSE, \"Using locale: \" + locale.toLanguageTag());\n-\n-        final SpConfiguration spConfig = SamlRealm.getSpConfiguration(realm);\n-        final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(locale, spConfig.getEntityId())\n-            .assertionConsumerServiceUrl(spConfig.getAscUrl())\n-            .singleLogoutServiceUrl(spConfig.getLogoutUrl())\n-            .encryptionCredentials(spConfig.getEncryptionCredentials())\n-            .signingCredential(spConfig.getSigningConfiguration().getCredential())\n-            .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME))\n-            .nameIdFormat(realm.getSetting(SamlRealmSettings.NAMEID_FORMAT))\n-            .serviceName(serviceName);\n-\n-        for (String attr : attributes.keySet()) {\n-            final String name;\n-            String friendlyName;\n-            final String settingName = attributes.get(attr);\n-            final String attributeSource = settingName == null ? \"command line\" : '\"' + settingName + '\"';\n-            if (attr.contains(\":\")) {\n-                name = attr;\n-                if (batch) {\n-                    friendlyName = settingName;\n-                } else {\n-                    friendlyName = terminal.readText(\"What is the friendly name for \" +\n-                        attributeSource\n-                        + \" attribute \\\"\" + attr + \"\\\" [default: \" +\n-                        (settingName == null ? \"none\" : settingName) +\n-                        \"] \");\n-                    if (Strings.isNullOrEmpty(friendlyName)) {\n-                        friendlyName = settingName;\n-                    }\n-                }\n-            } else {\n-                if (batch) {\n-                    throw new UserException(ExitCodes.CONFIG, \"Option batch is specified, but attribute \"\n-                        + attr + \" appears to be a FriendlyName value\");\n-                }\n-                friendlyName = attr;\n-                name = requireText(terminal,\n-                    \"What is the standard (urn) name for \" + attributeSource + \" attribute \\\"\" + attr + \"\\\" (required): \");\n-            }\n-            terminal.println(Terminal.Verbosity.VERBOSE, \"Requesting attribute '\" + name + \"' (FriendlyName: '\" + friendlyName + \"')\");\n-            builder.withAttribute(friendlyName, name);\n-        }\n-\n-        if (orgName != null && orgUrl != null) {\n-            builder.organization(orgName, orgDisplayName, orgUrl);\n-        }\n-\n-        if (contacts) {\n-            terminal.println(\"\\nPlease enter the personal details for each contact to be included in the metadata\");\n-            do {\n-                final String givenName = requireText(terminal, \"What is the given name for the contact: \");\n-                final String surName = requireText(terminal, \"What is the surname for the contact: \");\n-                final String displayName = givenName + ' ' + surName;\n-                final String email = requireText(terminal, \"What is the email address for \" + displayName + \": \");\n-                String type;\n-                while (true) {\n-                    type = requireText(terminal, \"What is the contact type for \" + displayName + \": \");\n-                    if (SamlSpMetadataBuilder.ContactInfo.TYPES.containsKey(type)) {\n-                        break;\n-                    } else {\n-                        terminal.errorPrintln(\"Type '\" + type + \"' is not valid. Valid values are \"\n-                            + Strings.collectionToCommaDelimitedString(SamlSpMetadataBuilder.ContactInfo.TYPES.keySet()));\n-                    }\n-                }\n-                builder.withContact(type, givenName, surName, email);\n-            } while (terminal.promptYesNo(\"Enter details for another contact\", true));\n-        }\n-        entityDescriptor = builder.build();\n-    }\n-\n-    private String requireText(Terminal terminal, String prompt) {\n-        String value = null;\n-        while (Strings.isNullOrEmpty(value)) {\n-            value = terminal.readText(prompt);\n-        }\n-        return value;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MTA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517181078", "bodyText": "You don't need a parser now that there is nothing to parse.", "author": "jkakavas", "createdAt": "2020-11-04T08:48:33Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSpMetadataAction extends SamlBaseRestHandler {\n+\n+    static final ObjectParser<SamlSpMetadataRequest, Void> PARSER = new ObjectParser<>(\"security_saml_metadata\",", "originalCommit": "1180e645b6b156be2af38bed936c6a3da95d7386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4NzY0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517387649", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-04T14:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MTA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "1b18d9f85d73afa7404d9924d396f993400e89ef", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nindex 2fe8227e8ce..2102e0388ce 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n\n@@ -8,9 +8,7 @@ package org.elasticsearch.xpack.security.rest.action.saml;\n \n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.license.XPackLicenseState;\n import org.elasticsearch.rest.BytesRestResponse;\n import org.elasticsearch.rest.RestRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MjExMw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517182113", "bodyText": "ctor can have the realm name as a parameter", "author": "jkakavas", "createdAt": "2020-11-04T08:50:17Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+public class SamlSpMetadataRequest extends ActionRequest {\n+\n+    String realmName;\n+\n+    public SamlSpMetadataRequest(StreamInput in) throws IOException {\n+        super(in);\n+        realmName = in.readOptionalString();\n+    }\n+\n+    public SamlSpMetadataRequest() {", "originalCommit": "1180e645b6b156be2af38bed936c6a3da95d7386", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b18d9f85d73afa7404d9924d396f993400e89ef", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\nindex 106b16d4376..4b302ecc517 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataRequest.java\n\n@@ -18,14 +18,15 @@ import static org.elasticsearch.action.ValidateActions.addValidationError;\n \n public class SamlSpMetadataRequest extends ActionRequest {\n \n-    String realmName;\n+    private String realmName;\n \n     public SamlSpMetadataRequest(StreamInput in) throws IOException {\n         super(in);\n         realmName = in.readOptionalString();\n     }\n \n-    public SamlSpMetadataRequest() {\n+    public SamlSpMetadataRequest(String realmName) {\n+        this.realmName = realmName;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MzU4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517183583", "bodyText": "You can get the realm param first and call the ctor with it", "author": "jkakavas", "createdAt": "2020-11-04T08:52:43Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSpMetadataAction extends SamlBaseRestHandler {\n+\n+    static final ObjectParser<SamlSpMetadataRequest, Void> PARSER = new ObjectParser<>(\"security_saml_metadata\",\n+        SamlSpMetadataRequest::new);\n+\n+    public RestSamlSpMetadataAction(Settings settings, XPackLicenseState licenseState) {\n+        super(settings, licenseState);\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return Collections.singletonList(\n+            new Route(GET, \"/_security/saml/metadata/{realm}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"security_saml_metadata_action\";\n+    }\n+\n+    @Override\n+    public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        try (XContentParser parser = request.contentParser()) {\n+            final SamlSpMetadataRequest SamlSpRequest = PARSER.parse(parser, null);", "originalCommit": "1180e645b6b156be2af38bed936c6a3da95d7386", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b18d9f85d73afa7404d9924d396f993400e89ef", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nindex 2fe8227e8ce..2102e0388ce 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n\n@@ -8,9 +8,7 @@ package org.elasticsearch.xpack.security.rest.action.saml;\n \n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.settings.Settings;\n-import org.elasticsearch.common.xcontent.ObjectParser;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.license.XPackLicenseState;\n import org.elasticsearch.rest.BytesRestResponse;\n import org.elasticsearch.rest.RestRequest;\n"}}, {"oid": "1b18d9f85d73afa7404d9924d396f993400e89ef", "url": "https://github.com/elastic/elasticsearch/commit/1b18d9f85d73afa7404d9924d396f993400e89ef", "message": "Adding API for generating SAML SP metadata\nResolves #49018", "committedDate": "2020-11-04T14:42:50Z", "type": "commit"}, {"oid": "82f663f5f268f3882e682ce82662c21656caa876", "url": "https://github.com/elastic/elasticsearch/commit/82f663f5f268f3882e682ce82662c21656caa876", "message": "Merge branch 'master' into SAML_SP_API", "committedDate": "2020-11-04T15:26:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0NzI2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517447267", "bodyText": "It doesn't make much sense to get the SpConfiguration from the SamlLogoutHandler in this case ( or in general I guess ) . How about we add a getter for private final SpConfiguration serviceProvider; in SamlRealm ?", "author": "jkakavas", "createdAt": "2020-11-04T15:55:17Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java", "diffHunk": "@@ -95,6 +96,30 @@ public SamlSpMetadataBuilder(Locale locale, String entityId) {\n         this.authnRequestsSigned = Boolean.FALSE;\n     }\n \n+    /**\n+     * @param samlRealm   SamlRealm for which SP Metadata is built\n+     */\n+    public SamlSpMetadataBuilder(SamlRealm samlRealm) {\n+        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();", "originalCommit": "82f663f5f268f3882e682ce82662c21656caa876", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4Njg3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517486871", "bodyText": "Makes sens", "author": "BigPandaToo", "createdAt": "2020-11-04T16:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0NzI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b076e6c7ee10e94232c66429f007728e580fbd14", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\nindex 0c01c4d3916..95f47c0cc09 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\n\n@@ -100,7 +100,7 @@ public class SamlSpMetadataBuilder {\n      * @param samlRealm   SamlRealm for which SP Metadata is built\n      */\n     public SamlSpMetadataBuilder(SamlRealm samlRealm) {\n-        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();\n+        final SpConfiguration spConfig = samlRealm.getServiceProvider();\n         this.locale = Locale.getDefault();\n         this.entityId = spConfig.getEntityId();\n         this.attributeNames = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0ODk1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517448953", "bodyText": "I'd argue we don't need the extra constructor here - it kinda goes against the Builder Pattern. How about something like\nfinal SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(locale, spConfig.getEntityId())\n                .assertionConsumerServiceUrl(spConfig.getAscUrl())\n                ....\n                anything else we want to set from the spConfiguration here\n                .....\n                );\n\nin the transport action?", "author": "jkakavas", "createdAt": "2020-11-04T15:57:33Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java", "diffHunk": "@@ -95,6 +96,30 @@ public SamlSpMetadataBuilder(Locale locale, String entityId) {\n         this.authnRequestsSigned = Boolean.FALSE;\n     }\n \n+    /**\n+     * @param samlRealm   SamlRealm for which SP Metadata is built\n+     */\n+    public SamlSpMetadataBuilder(SamlRealm samlRealm) {", "originalCommit": "82f663f5f268f3882e682ce82662c21656caa876", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ3Mzk1MA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517473950", "bodyText": "The reason I put this logic into the builder - all the getters of SPConfiguration are package protected and cannot be accessed from transport action. Not sure, if it make sense to make them public instead", "author": "BigPandaToo", "createdAt": "2020-11-04T16:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0ODk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0NzQ4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517947485", "bodyText": "I think it's perfectly fine to make them public", "author": "jkakavas", "createdAt": "2020-11-05T10:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0ODk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxODMzMw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r518018333", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-05T12:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0ODk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b076e6c7ee10e94232c66429f007728e580fbd14", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\nindex 0c01c4d3916..95f47c0cc09 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\n\n@@ -100,7 +100,7 @@ public class SamlSpMetadataBuilder {\n      * @param samlRealm   SamlRealm for which SP Metadata is built\n      */\n     public SamlSpMetadataBuilder(SamlRealm samlRealm) {\n-        final SpConfiguration spConfig = samlRealm.getLogoutHandler().getSpConfiguration();\n+        final SpConfiguration spConfig = samlRealm.getServiceProvider();\n         this.locale = Locale.getDefault();\n         this.entityId = spConfig.getEntityId();\n         this.attributeNames = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1MjE1NA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517452154", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final SamlSpMetadataRequest SamlSpRequest = new SamlSpMetadataRequest(request.param(\"realm\"));\n          \n          \n            \n                    final SamlSpMetadataRequest SamlSpMetadataRequest = new SamlSpMetadataRequest(request.param(\"realm\"));\n          \n      \n    \n    \n  \n\nor any var name that has metadata in it, just for clarity", "author": "jkakavas", "createdAt": "2020-11-04T16:01:49Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.rest.action.saml;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.license.XPackLicenseState;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlSpMetadataAction extends SamlBaseRestHandler {\n+\n+    public RestSamlSpMetadataAction(Settings settings, XPackLicenseState licenseState) {\n+        super(settings, licenseState);\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return Collections.singletonList(\n+            new Route(GET, \"/_security/saml/metadata/{realm}\"));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"security_saml_metadata_action\";\n+    }\n+\n+    @Override\n+    public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        final SamlSpMetadataRequest SamlSpRequest = new SamlSpMetadataRequest(request.param(\"realm\"));", "originalCommit": "82f663f5f268f3882e682ce82662c21656caa876", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4NjM5MA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517486390", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-04T16:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1MjE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "b076e6c7ee10e94232c66429f007728e580fbd14", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\nindex 2102e0388ce..2f6d3357740 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlSpMetadataAction.java\n\n@@ -44,8 +44,8 @@ public class RestSamlSpMetadataAction extends SamlBaseRestHandler {\n \n     @Override\n     public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient client) throws IOException {\n-        final SamlSpMetadataRequest SamlSpRequest = new SamlSpMetadataRequest(request.param(\"realm\"));\n-        return channel -> client.execute(SamlSpMetadataAction.INSTANCE, SamlSpRequest,\n+        final SamlSpMetadataRequest SamlSpMetadataRequest = new SamlSpMetadataRequest(request.param(\"realm\"));\n+        return channel -> client.execute(SamlSpMetadataAction.INSTANCE, SamlSpMetadataRequest,\n             new RestBuilderListener<SamlSpMetadataResponse>(channel) {\n             @Override\n             public RestResponse buildResponse(SamlSpMetadataResponse response, XContentBuilder builder) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1NTcxMw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517455713", "bodyText": "Can we undo all the whitespace changes here?", "author": "jkakavas", "createdAt": "2020-11-04T16:06:37Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java", "diffHunk": "@@ -110,22 +110,22 @@ public SamlMetadataCommand(CheckedFunction<Environment, KeyStoreWrapper, Excepti\n         attributeSpec = parser.accepts(\"attribute\", \"additional SAML attributes to request\").withRequiredArg();\n         orgNameSpec = parser.accepts(\"organisation-name\", \"the name of the organisation operating this service\").withRequiredArg();\n         orgDisplayNameSpec = parser.accepts(\"organisation-display-name\", \"the display-name of the organisation operating this service\")\n-                .availableIf(orgNameSpec).withRequiredArg();\n+            .availableIf(orgNameSpec).withRequiredArg();", "originalCommit": "82f663f5f268f3882e682ce82662c21656caa876", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4NjIxNA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517486214", "bodyText": "fixed", "author": "BigPandaToo", "createdAt": "2020-11-04T16:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1NTcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "b076e6c7ee10e94232c66429f007728e580fbd14", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java\nindex b4110424672..3a2b87afe1f 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlMetadataCommand.java\n\n@@ -110,22 +110,22 @@ public class SamlMetadataCommand extends KeyStoreAwareCommand {\n         attributeSpec = parser.accepts(\"attribute\", \"additional SAML attributes to request\").withRequiredArg();\n         orgNameSpec = parser.accepts(\"organisation-name\", \"the name of the organisation operating this service\").withRequiredArg();\n         orgDisplayNameSpec = parser.accepts(\"organisation-display-name\", \"the display-name of the organisation operating this service\")\n-            .availableIf(orgNameSpec).withRequiredArg();\n+                .availableIf(orgNameSpec).withRequiredArg();\n         orgUrlSpec = parser.accepts(\"organisation-url\", \"the URL of the organisation operating this service\")\n-            .requiredIf(orgNameSpec).withRequiredArg();\n+                .requiredIf(orgNameSpec).withRequiredArg();\n         contactsSpec = parser.accepts(\"contacts\", \"Include contact information in metadata\").availableUnless(batchSpec);\n         signingPkcs12PathSpec = parser.accepts(\"signing-bundle\", \"path to an existing key pair (in PKCS#12 format) to be used for \" +\n-            \"signing \")\n-            .withRequiredArg();\n+                \"signing \")\n+                .withRequiredArg();\n         signingCertPathSpec = parser.accepts(\"signing-cert\", \"path to an existing signing certificate\")\n-            .availableUnless(signingPkcs12PathSpec)\n-            .withRequiredArg();\n+                .availableUnless(signingPkcs12PathSpec)\n+                .withRequiredArg();\n         signingKeyPathSpec = parser.accepts(\"signing-key\", \"path to an existing signing private key\")\n-            .availableIf(signingCertPathSpec)\n-            .requiredIf(signingCertPathSpec)\n-            .withRequiredArg();\n+                .availableIf(signingCertPathSpec)\n+                .requiredIf(signingCertPathSpec)\n+                .withRequiredArg();\n         keyPasswordSpec = parser.accepts(\"signing-key-password\", \"password for an existing signing private key or keypair\")\n-            .withOptionalArg();\n+                .withOptionalArg();\n         this.keyStoreFunction = keyStoreFunction;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1NjAzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517456035", "bodyText": "See comments in the SamlSpMetadataBuilder", "author": "jkakavas", "createdAt": "2020-11-04T16:07:03Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlSpMetadataBuilder;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSpMetadataAction\n+    extends HandledTransportAction<SamlSpMetadataRequest, SamlSpMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSpMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSpMetadataAction.NAME, transportService, actionFilters, SamlSpMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSpMetadataRequest request,\n+                             ActionListener<SamlSpMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request.getRealmName()));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request.getRealmName()));\n+        } else {\n+            prepareMetadata(realms.get(0), listener);\n+        }\n+    }\n+\n+    private void prepareMetadata(SamlRealm realm, ActionListener<SamlSpMetadataResponse> listener) {\n+        try {\n+            final EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+            final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(realm);", "originalCommit": "82f663f5f268f3882e682ce82662c21656caa876", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4NzIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517487206", "bodyText": "See above ^^", "author": "BigPandaToo", "createdAt": "2020-11-04T16:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1NjAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxODQ2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r518018462", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-11-05T12:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1NjAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d1a098e865e36bbfaed54a2f6491885f314c49d", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nindex e83e594b02a..04af44f1aad 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n\n@@ -20,6 +20,8 @@ import org.elasticsearch.xpack.security.authc.Realms;\n import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n import org.elasticsearch.xpack.security.authc.saml.SamlSpMetadataBuilder;\n import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.elasticsearch.xpack.security.authc.saml.SpConfiguration;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n import org.w3c.dom.Element;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1ODk3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517458971", "bodyText": "The only problematic thing with this is that users with manage_saml would understandably expect to be able to call the API but now they can't. We should add this action name to the MANAGE_SAML_PATTERN in ClusterPrivilegeResolver", "author": "jkakavas", "createdAt": "2020-11-04T16:11:07Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.security.action.saml;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+public class SamlSpMetadataAction extends ActionType<SamlSpMetadataResponse> {\n+    public static final String NAME = \"cluster:monitor/xpack/security/saml/metadata\";", "originalCommit": "82f663f5f268f3882e682ce82662c21656caa876", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4NjA3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r517486071", "bodyText": "Added", "author": "BigPandaToo", "createdAt": "2020-11-04T16:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1ODk3MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b076e6c7ee10e94232c66429f007728e580fbd14", "url": "https://github.com/elastic/elasticsearch/commit/b076e6c7ee10e94232c66429f007728e580fbd14", "message": "Adding API for generating SAML SP metadata\nResolves #49018", "committedDate": "2020-11-04T18:12:37Z", "type": "commit"}, {"oid": "7ac8d2854bdb23c76576fc4092c245a3aa72682e", "url": "https://github.com/elastic/elasticsearch/commit/7ac8d2854bdb23c76576fc4092c245a3aa72682e", "message": "Merge branch 'master' into SAML_SP_API", "committedDate": "2020-11-05T09:22:30Z", "type": "commit"}, {"oid": "9d1a098e865e36bbfaed54a2f6491885f314c49d", "url": "https://github.com/elastic/elasticsearch/commit/9d1a098e865e36bbfaed54a2f6491885f314c49d", "message": "Adding API for generating SAML SP metadata\nResolves #49018", "committedDate": "2020-11-05T11:50:48Z", "type": "commit"}, {"oid": "aaa823b3c4a1588d94affe731150df39d2c43ca0", "url": "https://github.com/elastic/elasticsearch/commit/aaa823b3c4a1588d94affe731150df39d2c43ca0", "message": "Merge branch 'SAML_SP_API' of github.com:BigPandaToo/elasticsearch into SAML_SP_API", "committedDate": "2020-11-05T11:51:07Z", "type": "commit"}, {"oid": "337f23c3fc2111992b206ea9218e8295db4afb44", "url": "https://github.com/elastic/elasticsearch/commit/337f23c3fc2111992b206ea9218e8295db4afb44", "message": "Adding API for generating SAML SP metadata\nResolves #49018", "committedDate": "2020-11-05T13:21:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MTAzOA==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r518071038", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(new ParameterizedMessage(\"Error during SAML SP metadata generation for real [{}]\", realm.name()), e);\n          \n          \n            \n                        logger.error(new ParameterizedMessage(\"Error during SAML SP metadata generation for realm [{}]\", realm.name()), e);", "author": "jkakavas", "createdAt": "2020-11-05T13:59:47Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security.action.saml;\n+\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataAction;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataRequest;\n+import org.elasticsearch.xpack.core.security.action.saml.SamlSpMetadataResponse;\n+import org.elasticsearch.xpack.security.authc.Realms;\n+import org.elasticsearch.xpack.security.authc.saml.SamlRealm;\n+import org.elasticsearch.xpack.security.authc.saml.SamlSpMetadataBuilder;\n+import org.elasticsearch.xpack.security.authc.saml.SamlUtils;\n+import org.elasticsearch.xpack.security.authc.saml.SpConfiguration;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.w3c.dom.Element;\n+\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import java.io.StringWriter;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.elasticsearch.xpack.security.authc.saml.SamlRealm.findSamlRealms;\n+\n+/**\n+ * Transport action responsible for generating a SAML SP Metadata.\n+ */\n+public class TransportSamlSpMetadataAction\n+    extends HandledTransportAction<SamlSpMetadataRequest, SamlSpMetadataResponse>  {\n+\n+    private final Realms realms;\n+\n+    @Inject\n+    public TransportSamlSpMetadataAction(TransportService transportService, ActionFilters actionFilters, Realms realms) {\n+        super(SamlSpMetadataAction.NAME, transportService, actionFilters, SamlSpMetadataRequest::new\n+        );\n+        this.realms = realms;\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, SamlSpMetadataRequest request,\n+                             ActionListener<SamlSpMetadataResponse> listener) {\n+        List<SamlRealm> realms = findSamlRealms(this.realms, request.getRealmName(), null);\n+        if (realms.isEmpty()) {\n+            listener.onFailure(SamlUtils.samlException(\"Cannot find any matching realm for [{}]\", request.getRealmName()));\n+        } else if (realms.size() > 1) {\n+            listener.onFailure(SamlUtils.samlException(\"Found multiple matching realms [{}] for [{}]\", realms, request.getRealmName()));\n+        } else {\n+            prepareMetadata(realms.get(0), listener);\n+        }\n+    }\n+\n+    private void prepareMetadata(SamlRealm realm, ActionListener<SamlSpMetadataResponse> listener) {\n+        try {\n+            final EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+            final SpConfiguration spConfig = realm.getServiceProvider();\n+            final SamlSpMetadataBuilder builder = new SamlSpMetadataBuilder(Locale.getDefault(), spConfig.getEntityId())\n+                .assertionConsumerServiceUrl(spConfig.getAscUrl())\n+                .singleLogoutServiceUrl(spConfig.getLogoutUrl())\n+                .encryptionCredentials(spConfig.getEncryptionCredentials())\n+                .signingCredential(spConfig.getSigningConfiguration().getCredential())\n+                .authnRequestsSigned(spConfig.getSigningConfiguration().shouldSign(AuthnRequest.DEFAULT_ELEMENT_LOCAL_NAME));\n+            final EntityDescriptor descriptor = builder.build();\n+            final Element element = marshaller.marshall(descriptor);\n+            final StringWriter writer = new StringWriter();\n+            final Transformer serializer = SamlUtils.getHardenedXMLTransformer();\n+            serializer.transform(new DOMSource(element), new StreamResult(writer));\n+            listener.onResponse(new SamlSpMetadataResponse(writer.toString()));\n+        } catch (Exception e) {\n+            logger.error(new ParameterizedMessage(\"Error during SAML SP metadata generation for real [{}]\", realm.name()), e);", "originalCommit": "337f23c3fc2111992b206ea9218e8295db4afb44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6567e0f25c293bf099f6fa8da3c32eb906914f34", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\nindex 04af44f1aad..ba12571d521 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java\n\n@@ -80,7 +80,8 @@ public class TransportSamlSpMetadataAction\n             serializer.transform(new DOMSource(element), new StreamResult(writer));\n             listener.onResponse(new SamlSpMetadataResponse(writer.toString()));\n         } catch (Exception e) {\n-            logger.error(new ParameterizedMessage(\"Error during SAML SP metadata generation for real [{}]\", realm.name()), e);\n+            logger.error(new ParameterizedMessage(\n+                \"Error during SAML SP metadata generation for realm [{}]\", realm.name()), e);\n             listener.onFailure(e);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MjA2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r518072061", "bodyText": "I don't think we need to change this any more since we initialize attributesNames properly in the single ctor of this class.", "author": "jkakavas", "createdAt": "2020-11-05T14:01:08Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java", "diffHunk": "@@ -225,7 +225,7 @@ public EntityDescriptor build() throws Exception {\n             spRoleDescriptor.getNameIDFormats().add(buildNameIdFormat());\n         }\n         spRoleDescriptor.getAssertionConsumerServices().add(buildAssertionConsumerService());\n-        if (attributeNames.size() > 0) {\n+        if (attributeNames != null && attributeNames.size() > 0) {", "originalCommit": "337f23c3fc2111992b206ea9218e8295db4afb44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6567e0f25c293bf099f6fa8da3c32eb906914f34", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\nindex 042fd4e73c5..ec0a65155d7 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\n\n@@ -225,7 +225,7 @@ public class SamlSpMetadataBuilder {\n             spRoleDescriptor.getNameIDFormats().add(buildNameIdFormat());\n         }\n         spRoleDescriptor.getAssertionConsumerServices().add(buildAssertionConsumerService());\n-        if (attributeNames != null && attributeNames.size() > 0) {\n+        if (attributeNames.size() > 0) {\n             spRoleDescriptor.getAttributeConsumingServices().add(buildAttributeConsumerService());\n         }\n         if (Strings.hasText(singleLogoutServiceUrl)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MjY1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64517#discussion_r518072657", "bodyText": "Same for contacts, they can't be null", "author": "jkakavas", "createdAt": "2020-11-05T14:02:03Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java", "diffHunk": "@@ -240,7 +240,9 @@ public EntityDescriptor build() throws Exception {\n         if (organization != null) {\n             descriptor.setOrganization(buildOrganization());\n         }\n-        contacts.forEach(c -> descriptor.getContactPersons().add(buildContact(c)));\n+        if(contacts != null && contacts.size() > 0) {", "originalCommit": "337f23c3fc2111992b206ea9218e8295db4afb44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6567e0f25c293bf099f6fa8da3c32eb906914f34", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\nindex 042fd4e73c5..ec0a65155d7 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlSpMetadataBuilder.java\n\n@@ -240,7 +240,7 @@ public class SamlSpMetadataBuilder {\n         if (organization != null) {\n             descriptor.setOrganization(buildOrganization());\n         }\n-        if(contacts != null && contacts.size() > 0) {\n+        if(contacts.size() > 0) {\n             contacts.forEach(c -> descriptor.getContactPersons().add(buildContact(c)));\n         }\n \n"}}, {"oid": "6567e0f25c293bf099f6fa8da3c32eb906914f34", "url": "https://github.com/elastic/elasticsearch/commit/6567e0f25c293bf099f6fa8da3c32eb906914f34", "message": "Adding API for generating SAML SP metadata\nResolves #49018", "committedDate": "2020-11-05T15:00:24Z", "type": "commit"}, {"oid": "16875172bee6ad25e4477814e69cbf7af111c67e", "url": "https://github.com/elastic/elasticsearch/commit/16875172bee6ad25e4477814e69cbf7af111c67e", "message": "Merge branch 'master' into SAML_SP_API", "committedDate": "2020-11-05T15:30:42Z", "type": "commit"}, {"oid": "71f3899ea00e6e3a11c9048349a6bb2b3bcfa6b1", "url": "https://github.com/elastic/elasticsearch/commit/71f3899ea00e6e3a11c9048349a6bb2b3bcfa6b1", "message": "Merge branch 'master' into SAML_SP_API", "committedDate": "2020-11-05T18:04:10Z", "type": "commit"}, {"oid": "a3bd935930016a0a1c1b98b16bd5687b2240f4bc", "url": "https://github.com/elastic/elasticsearch/commit/a3bd935930016a0a1c1b98b16bd5687b2240f4bc", "message": "Merge branch 'master' into SAML_SP_API", "committedDate": "2020-11-06T08:21:27Z", "type": "commit"}]}