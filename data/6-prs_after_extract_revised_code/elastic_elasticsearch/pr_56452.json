{"pr_number": 56452, "pr_title": "Add support for numeric range keys", "pr_createdAt": "2020-05-08T19:37:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56452", "timeline": [{"oid": "255716e8ecc69b1ced531385a71ec65e4b6c7660", "url": "https://github.com/elastic/elasticsearch/commit/255716e8ecc69b1ced531385a71ec65e4b6c7660", "message": "Add support for numeric range keys\n\nThis adds support for parsing numbers as range keys. They get converted\ninto a string, but we allow numbers.\n\nWhile I was there I replaced the parser for `Range` with a\n`ConstructingObjectParser` which will automatically add support for \"did\nyou mean\" style corrections on errors.\n\nCloses #56402", "committedDate": "2020-05-08T19:34:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5NjgwMA==", "url": "https://github.com/elastic/elasticsearch/pull/56452#discussion_r423096800", "bodyText": "Begone, foul parser!", "author": "polyfractal", "createdAt": "2020-05-11T14:50:46Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java", "diffHunk": "@@ -128,50 +132,6 @@ public String toString() {\n             return \"[\" + from + \" to \" + to + \")\";\n         }\n \n-        public static Range fromXContent(XContentParser parser) throws IOException {", "originalCommit": "255716e8ecc69b1ced531385a71ec65e4b6c7660", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwMjczNA==", "url": "https://github.com/elastic/elasticsearch/pull/56452#discussion_r423102734", "bodyText": "I wonder if we should add a guard here to throw an exception if from/fromAsStr and to/toAsStr are both non-null/non-empty/not infinity?  Looks like we previously were just assuming the user gave us the right combination... i'm assuming we use these preferentially later (e.g. toAsStr if non-null, to otherwise or something like that)\nOr if it turns out to be a big mess, at least a javadoc explaining the priority?  Or make it package-private if possible?  Not sure where else it's used though", "author": "polyfractal", "createdAt": "2020-05-11T14:58:52Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java", "diffHunk": "@@ -63,6 +67,14 @@\n         protected final double to;\n         protected final String toAsStr;\n \n+        public Range(String key, Double from, String fromAsStr, Double to, String toAsStr) {", "originalCommit": "255716e8ecc69b1ced531385a71ec65e4b6c7660", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNjY3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56452#discussion_r423206675", "bodyText": "It is used in a few places, yeah. I believe the best I can do is describe the priority. I'll do that.", "author": "nik9000", "createdAt": "2020-05-11T17:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwMjczNA=="}], "type": "inlineReview", "revised_code": {"commit": "e8dd9c087ccdb95e3d9036d87cbb7a61c279987e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java\nindex a3d28242a93..92d0626228b 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregator.java\n\n@@ -67,6 +67,15 @@ public class RangeAggregator extends BucketsAggregator {\n         protected final double to;\n         protected final String toAsStr;\n \n+        /**\n+         * Build the range. Generally callers should prefer\n+         * {@link Range#Range(String, Double, Double)} or\n+         * {@link Range#Range(String, String, String))}. If you\n+         * <strong>must</strong> call this know that consumers prefer\n+         * {@code from} and {@code to} parameters if they are non-null\n+         * and finite. Otherwise they parse from {@code fromrStr} and\n+         * {@code toStr}. \n+         */\n         public Range(String key, Double from, String fromAsStr, Double to, String toAsStr) {\n             this.key = key;\n             this.from = from == null ? Double.NEGATIVE_INFINITY : from;\n"}}, {"oid": "e8dd9c087ccdb95e3d9036d87cbb7a61c279987e", "url": "https://github.com/elastic/elasticsearch/commit/e8dd9c087ccdb95e3d9036d87cbb7a61c279987e", "message": "Explain", "committedDate": "2020-05-11T18:55:26Z", "type": "commit"}, {"oid": "dcd5cc51f10a3bfa1c484eb91095315aea4f6006", "url": "https://github.com/elastic/elasticsearch/commit/dcd5cc51f10a3bfa1c484eb91095315aea4f6006", "message": "Merge branch 'master' into range_parsere", "committedDate": "2020-05-11T19:06:43Z", "type": "commit"}, {"oid": "1a2473e35ff694226b7ffcd529f23f49146a135b", "url": "https://github.com/elastic/elasticsearch/commit/1a2473e35ff694226b7ffcd529f23f49146a135b", "message": "sneaky )", "committedDate": "2020-05-11T19:07:52Z", "type": "commit"}]}