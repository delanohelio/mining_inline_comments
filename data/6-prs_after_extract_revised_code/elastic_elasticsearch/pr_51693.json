{"pr_number": 51693, "pr_title": "Wire PercentileRanks aggregator into new VS framework ", "pr_createdAt": "2020-01-30T17:57:23Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51693", "timeline": [{"oid": "a954b150059d8c4090c5ef5064a60d81246ed71c", "url": "https://github.com/elastic/elasticsearch/commit/a954b150059d8c4090c5ef5064a60d81246ed71c", "message": "Wire Percentiles aggregator into new VS framework\n\nThis required a bit of a refactor to percentiles itself.  Before,\nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least, would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core, and will\nbe moved in a subsequent PR.", "committedDate": "2020-01-29T17:18:05Z", "type": "commit"}, {"oid": "ad19003291f41b9c9218058bddda9d6e2f1983ac", "url": "https://github.com/elastic/elasticsearch/commit/ad19003291f41b9c9218058bddda9d6e2f1983ac", "message": "Wire PercentileRanks aggregator into new VS framework\n\nLike Percentiles, this refactors consolidates both factories\ntogether, using PercentilesConfig object to act as a standardized\nway to pass algo-specific parameters through the factory.", "committedDate": "2020-01-30T17:52:23Z", "type": "commit"}, {"oid": "d89f70f3f40c9187fec3687227b217c6764d19ee", "url": "https://github.com/elastic/elasticsearch/commit/d89f70f3f40c9187fec3687227b217c6764d19ee", "message": "Merge branch 'feature/extensible-values-source' into vs_percentile_ranks_refactor", "committedDate": "2020-01-31T18:15:35Z", "type": "commit"}, {"oid": "d70449879ac2b5beb66e855562ef312760fe374f", "url": "https://github.com/elastic/elasticsearch/commit/d70449879ac2b5beb66e855562ef312760fe374f", "message": "Throw IllegalStateException for bad methods", "committedDate": "2020-01-31T18:17:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MTIxOA==", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r374191218", "bodyText": "In conjunction with my comment below, I think it makes sense for the config object to live with the PercentilesMethod enum, rather than one of the builders.  Kind of arbitrary which builder it lands on.", "author": "not-napoleon", "createdAt": "2020-02-03T16:07:24Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java", "diffHunk": "@@ -30,19 +30,22 @@\n import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorFactories.Builder;\n import org.elasticsearch.search.aggregations.AggregatorFactory;\n+import org.elasticsearch.search.aggregations.metrics.PercentilesAggregationBuilder.PercentilesConfig;", "originalCommit": "d70449879ac2b5beb66e855562ef312760fe374f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a536eda62b3ff742d05062e8ca861b1d44a3b16", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java\nindex 418aecf651b..d960f609e6e 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java\n\n@@ -21,130 +21,58 @@ package org.elasticsearch.search.aggregations.metrics;\n \n import org.elasticsearch.common.ParseField;\n import org.elasticsearch.common.io.stream.StreamInput;\n-import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n-import org.elasticsearch.common.xcontent.ObjectParser;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.index.query.QueryShardContext;\n import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorFactories.Builder;\n import org.elasticsearch.search.aggregations.AggregatorFactory;\n-import org.elasticsearch.search.aggregations.metrics.PercentilesAggregationBuilder.PercentilesConfig;\n import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n-import org.elasticsearch.search.aggregations.support.ValuesSource;\n-import org.elasticsearch.search.aggregations.support.ValuesSourceAggregationBuilder.LeafOnly;\n import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;\n import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;\n-import org.elasticsearch.search.aggregations.support.ValuesSourceParserHelper;\n import org.elasticsearch.search.aggregations.support.ValuesSourceRegistry;\n import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n \n import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n-import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n-\n-public class PercentileRanksAggregationBuilder extends LeafOnly<ValuesSource, PercentileRanksAggregationBuilder> {\n+public class PercentileRanksAggregationBuilder extends AbstractPercentilesAggregationBuilder<PercentileRanksAggregationBuilder> {\n     public static final String NAME = PercentileRanks.TYPE_NAME;\n \n-    public static final ParseField VALUES_FIELD = new ParseField(\"values\");\n-\n-    private static class TDigestOptions {\n-        Double compression;\n-    }\n-\n-    private static final ObjectParser<TDigestOptions, String> TDIGEST_OPTIONS_PARSER =\n-            new ObjectParser<>(PercentilesMethod.TDIGEST.getParseField().getPreferredName(), TDigestOptions::new);\n-    static {\n-        TDIGEST_OPTIONS_PARSER.declareDouble((opts, compression) -> opts.compression = compression, new ParseField(\"compression\"));\n-    }\n-\n-    private static class HDROptions {\n-        Integer numberOfSigDigits;\n-    }\n-\n-    private static final ObjectParser<HDROptions, String> HDR_OPTIONS_PARSER =\n-            new ObjectParser<>(PercentilesMethod.HDR.getParseField().getPreferredName(), HDROptions::new);\n-    static {\n-        HDR_OPTIONS_PARSER.declareInt((opts, numberOfSigDigits) -> opts.numberOfSigDigits = numberOfSigDigits,\n-                new ParseField(\"number_of_significant_value_digits\"));\n-    }\n-\n-    // The builder requires two parameters for the constructor: aggregation name and values array.  The\n-    // agg name is supplied externally via the Parser's context (as a String), while the values array\n-    // is parsed from the request and supplied to the ConstructingObjectParser as a ctor argument\n+    private static final ParseField VALUES_FIELD = new ParseField(\"values\");\n     private static final ConstructingObjectParser<PercentileRanksAggregationBuilder, String> PARSER;\n     static {\n-        PARSER = new ConstructingObjectParser<>(PercentileRanksAggregationBuilder.NAME, false,\n-            (a, context) -> new PercentileRanksAggregationBuilder(context, (List) a[0]));\n-        ValuesSourceParserHelper.declareAnyFields(PARSER, true, true);\n-        PARSER.declareDoubleArray(constructorArg(), VALUES_FIELD);\n-        PARSER.declareBoolean(PercentileRanksAggregationBuilder::keyed, PercentilesAggregationBuilder.KEYED_FIELD);\n-\n-        PARSER.declareField((b, v) -> {\n-            b.method(PercentilesMethod.TDIGEST);\n-            if (v.compression != null) {\n-                b.compression(v.compression);\n-            }\n-        }, TDIGEST_OPTIONS_PARSER::parse, PercentilesMethod.TDIGEST.getParseField(), ObjectParser.ValueType.OBJECT);\n+        PARSER = AbstractPercentilesAggregationBuilder.createParser(\n+            PercentileRanksAggregationBuilder.NAME,\n+            PercentileRanksAggregationBuilder::new,\n+            PercentilesConfig.TDigest::new,\n+            VALUES_FIELD);\n+    }\n \n-        PARSER.declareField((b, v) -> {\n-            b.method(PercentilesMethod.HDR);\n-            if (v.numberOfSigDigits != null) {\n-                b.numberOfSignificantValueDigits(v.numberOfSigDigits);\n-            }\n-        }, HDR_OPTIONS_PARSER::parse, PercentilesMethod.HDR.getParseField(), ObjectParser.ValueType.OBJECT);\n+    public static AggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {\n+        return PARSER.parse(parser, aggregationName);\n     }\n \n-    private static AtomicBoolean wasRegistered = new AtomicBoolean(false);\n     public static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n-        if (wasRegistered.compareAndSet(false, true) == true) {\n-            PercentileRanksAggregatorFactory.registerAggregators(valuesSourceRegistry);\n-        }\n+        PercentileRanksAggregatorFactory.registerAggregators(valuesSourceRegistry);\n     }\n \n-    public static AggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {\n-        // the aggregation name is supplied to the parser as a Context. See note at top of Parser for more details\n-        return PARSER.parse(parser, aggregationName);\n+    public PercentileRanksAggregationBuilder(String name, double[] values) {\n+        this(name, values, null);\n     }\n \n-    private double[] values;\n-    private PercentilesMethod method = PercentilesMethod.TDIGEST;\n-    private int numberOfSignificantValueDigits = 3;\n-    private double compression = 100.0;\n-    private boolean keyed = true;\n-\n-    private PercentileRanksAggregationBuilder(String name, List<Double> values) {\n-        this(name, values.stream().mapToDouble(Double::doubleValue).toArray());\n+    private PercentileRanksAggregationBuilder(String name, double[] values, PercentilesConfig percentilesConfig) {\n+        super(name, values, percentilesConfig, VALUES_FIELD);\n     }\n \n-    public PercentileRanksAggregationBuilder(String name, double[] values) {\n-        super(name);\n-        if (values == null) {\n-            throw new IllegalArgumentException(\"[values] must not be null: [\" + name + \"]\");\n-        }\n-        if (values.length == 0) {\n-            throw new IllegalArgumentException(\"[values] must not be an empty array: [\" + name + \"]\");\n-        }\n-        double[] sortedValues = Arrays.copyOf(values, values.length);\n-        Arrays.sort(sortedValues);\n-        this.values = sortedValues;\n+    public PercentileRanksAggregationBuilder(StreamInput in) throws IOException {\n+        super(in);\n     }\n \n-    protected PercentileRanksAggregationBuilder(PercentileRanksAggregationBuilder clone,\n-                                                Builder factoriesBuilder,\n-                                                Map<String, Object> metaData) {\n+    private PercentileRanksAggregationBuilder(PercentileRanksAggregationBuilder clone,\n+                                              Builder factoriesBuilder,\n+                                              Map<String, Object> metaData) {\n         super(clone, factoriesBuilder, metaData);\n-        this.values = clone.values;\n-        this.method = clone.method;\n-        this.numberOfSignificantValueDigits = clone.numberOfSignificantValueDigits;\n-        this.compression = clone.compression;\n-        this.keyed = clone.keyed;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MzkyMg==", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r374193922", "bodyText": "We've got this same cascading if in two places now, and cascading if or switch blocks on enums are kind of dodgy to begin with.  I propose a method on PercentilesMethod that takes two args, compression and number of significant digits, ignores whichever doesn't apply to that method, and returns the config.  This has the added benefit that we don't need the unreachable throw block here (unreachable since it would have already thrown trying to parse the bad method name)", "author": "not-napoleon", "createdAt": "2020-02-03T16:11:57Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java", "diffHunk": "@@ -246,16 +256,17 @@ public PercentilesMethod method() {\n     @Override\n     protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardContext, ValuesSourceConfig config,\n                                                        AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {\n-        switch (method) {\n-        case TDIGEST:\n-            return new TDigestPercentileRanksAggregatorFactory(name, config, values, compression, keyed, queryShardContext, parent,\n-                    subFactoriesBuilder, metaData);\n-        case HDR:\n-            return new HDRPercentileRanksAggregatorFactory(name, config, values, numberOfSignificantValueDigits, keyed, queryShardContext,\n-                    parent, subFactoriesBuilder, metaData);\n-        default:\n+        PercentilesConfig percentilesConfig;\n+        if (method.equals(PercentilesMethod.TDIGEST)) {\n+            percentilesConfig = new PercentilesConfig.TDigestConfig(compression);\n+        } else if (method.equals(PercentilesMethod.HDR)) {\n+            percentilesConfig = new PercentilesConfig.HdrHistoConfig(numberOfSignificantValueDigits);\n+        } else {", "originalCommit": "d70449879ac2b5beb66e855562ef312760fe374f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8a536eda62b3ff742d05062e8ca861b1d44a3b16", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java\nindex 418aecf651b..d960f609e6e 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregationBuilder.java\n\n@@ -185,140 +92,13 @@ public class PercentileRanksAggregationBuilder extends LeafOnly<ValuesSource, Pe\n         return values;\n     }\n \n-    /**\n-     * Set whether the XContent response should be keyed\n-     */\n-    public PercentileRanksAggregationBuilder keyed(boolean keyed) {\n-        this.keyed = keyed;\n-        return this;\n-    }\n-\n-    /**\n-     * Get whether the XContent response should be keyed\n-     */\n-    public boolean keyed() {\n-        return keyed;\n-    }\n-\n-    /**\n-     * Expert: set the number of significant digits in the values. Only relevant\n-     * when using {@link PercentilesMethod#HDR}.\n-     */\n-    public PercentileRanksAggregationBuilder numberOfSignificantValueDigits(int numberOfSignificantValueDigits) {\n-        if (numberOfSignificantValueDigits < 0 || numberOfSignificantValueDigits > 5) {\n-            throw new IllegalArgumentException(\"[numberOfSignificantValueDigits] must be between 0 and 5: [\" + name + \"]\");\n-        }\n-        this.numberOfSignificantValueDigits = numberOfSignificantValueDigits;\n-        return this;\n-    }\n-\n-    /**\n-     * Expert: get the number of significant digits in the values. Only relevant\n-     * when using {@link PercentilesMethod#HDR}.\n-     */\n-    public int numberOfSignificantValueDigits() {\n-        return numberOfSignificantValueDigits;\n-    }\n-\n-    /**\n-     * Expert: set the compression. Higher values improve accuracy but also\n-     * memory usage. Only relevant when using {@link PercentilesMethod#TDIGEST}.\n-     */\n-    public PercentileRanksAggregationBuilder compression(double compression) {\n-        if (compression < 0.0) {\n-            throw new IllegalArgumentException(\n-                    \"[compression] must be greater than or equal to 0. Found [\" + compression + \"] in [\" + name + \"]\");\n-        }\n-        this.compression = compression;\n-        return this;\n-    }\n-\n-    /**\n-     * Expert: get the compression. Higher values improve accuracy but also\n-     * memory usage. Only relevant when using {@link PercentilesMethod#TDIGEST}.\n-     */\n-    public double compression() {\n-        return compression;\n-    }\n-\n-    public PercentileRanksAggregationBuilder method(PercentilesMethod method) {\n-        if (method == null) {\n-            throw new IllegalArgumentException(\"[method] must not be null: [\" + name + \"]\");\n-        }\n-        this.method = method;\n-        return this;\n-    }\n-\n-    public PercentilesMethod method() {\n-        return method;\n-    }\n-\n-    @Override\n-    protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardContext, ValuesSourceConfig config,\n-                                                       AggregatorFactory parent, Builder subFactoriesBuilder) throws IOException {\n-        PercentilesConfig percentilesConfig;\n-        if (method.equals(PercentilesMethod.TDIGEST)) {\n-            percentilesConfig = new PercentilesConfig.TDigestConfig(compression);\n-        } else if (method.equals(PercentilesMethod.HDR)) {\n-            percentilesConfig = new PercentilesConfig.HdrHistoConfig(numberOfSignificantValueDigits);\n-        } else {\n-            throw new IllegalStateException(\"Illegal method [\" + method + \"]\");\n-        }\n-\n-        return new PercentileRanksAggregatorFactory(name, config, values, percentilesConfig, keyed, queryShardContext, parent,\n-            subFactoriesBuilder, metaData);\n-    }\n-\n-    @Override\n-    protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {\n-        builder.array(VALUES_FIELD.getPreferredName(), values);\n-        builder.field(PercentilesAggregationBuilder.KEYED_FIELD.getPreferredName(), keyed);\n-        builder.startObject(method.toString());\n-        if (method == PercentilesMethod.TDIGEST) {\n-            builder.field(PercentilesAggregationBuilder.COMPRESSION_FIELD.getPreferredName(), compression);\n-        } else {\n-            builder.field(PercentilesAggregationBuilder.NUMBER_SIGNIFICANT_DIGITS_FIELD.getPreferredName(), numberOfSignificantValueDigits);\n-        }\n-        builder.endObject();\n-        return builder;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) return true;\n-        if (obj == null || getClass() != obj.getClass()) return false;\n-        if (super.equals(obj) == false) return false;\n-        PercentileRanksAggregationBuilder other = (PercentileRanksAggregationBuilder) obj;\n-        if (Objects.equals(method, other.method) == false) {\n-            return false;\n-        }\n-        boolean equalSettings = false;\n-        switch (method) {\n-            case HDR:\n-                equalSettings = Objects.equals(numberOfSignificantValueDigits, other.numberOfSignificantValueDigits);\n-                break;\n-            case TDIGEST:\n-                equalSettings = Objects.equals(compression, other.compression);\n-                break;\n-            default:\n-                throw new IllegalStateException(\"Illegal method [\" + method + \"]\");\n-        }\n-        return equalSettings\n-            && Objects.deepEquals(values, other.values)\n-            && Objects.equals(keyed, other.keyed)\n-            && Objects.equals(method, other.method);\n-    }\n-\n     @Override\n-    public int hashCode() {\n-        switch (method) {\n-            case HDR:\n-                return Objects.hash(super.hashCode(), Arrays.hashCode(values), keyed, numberOfSignificantValueDigits, method);\n-            case TDIGEST:\n-                return Objects.hash(super.hashCode(), Arrays.hashCode(values), keyed, compression, method);\n-            default:\n-                throw new IllegalStateException(\"Illegal method [\" + method + \"]\");\n-        }\n+    protected ValuesSourceAggregatorFactory innerBuild(QueryShardContext queryShardContext,\n+                                                                     ValuesSourceConfig config,\n+                                                                     AggregatorFactory parent,\n+                                                                     Builder subFactoriesBuilder) throws IOException {\n+        return new PercentileRanksAggregatorFactory(name, config, values, configOrDefault(), keyed, queryShardContext,\n+                    parent, subFactoriesBuilder, metaData);\n     }\n \n     @Override\n"}}, {"oid": "8a536eda62b3ff742d05062e8ca861b1d44a3b16", "url": "https://github.com/elastic/elasticsearch/commit/8a536eda62b3ff742d05062e8ca861b1d44a3b16", "message": "Merge branch 'feature/extensible-values-source' into vs_percentile_ranks_refactor", "committedDate": "2020-02-12T19:01:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1MjE3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r380752177", "bodyText": "Nit: Inconsistent indentation", "author": "not-napoleon", "createdAt": "2020-02-18T15:38:28Z", "path": "server/src/main/java/org/elasticsearch/search/SearchModule.java", "diffHunk": "@@ -360,7 +360,8 @@ private void registerAggregations(List<SearchPlugin> plugins) {\n         registerAggregation(new AggregationSpec(PercentileRanksAggregationBuilder.NAME, PercentileRanksAggregationBuilder::new,\n                 PercentileRanksAggregationBuilder::parse)\n                         .addResultReader(InternalTDigestPercentileRanks.NAME, InternalTDigestPercentileRanks::new)\n-                        .addResultReader(InternalHDRPercentileRanks.NAME, InternalHDRPercentileRanks::new));\n+                        .addResultReader(InternalHDRPercentileRanks.NAME, InternalHDRPercentileRanks::new)\n+                .setAggregatorRegistrar(PercentileRanksAggregationBuilder::registerAggregators));", "originalCommit": "8a536eda62b3ff742d05062e8ca861b1d44a3b16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f607c3a4e2c992e1c97c12249fd91ac8e530ed7", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/SearchModule.java b/server/src/main/java/org/elasticsearch/search/SearchModule.java\nindex ff3df565eab..6116261e301 100644\n--- a/server/src/main/java/org/elasticsearch/search/SearchModule.java\n+++ b/server/src/main/java/org/elasticsearch/search/SearchModule.java\n\n@@ -361,7 +369,7 @@ public class SearchModule {\n                 PercentileRanksAggregationBuilder::parse)\n                         .addResultReader(InternalTDigestPercentileRanks.NAME, InternalTDigestPercentileRanks::new)\n                         .addResultReader(InternalHDRPercentileRanks.NAME, InternalHDRPercentileRanks::new)\n-                .setAggregatorRegistrar(PercentileRanksAggregationBuilder::registerAggregators));\n+                        .setAggregatorRegistrar(PercentileRanksAggregationBuilder::registerAggregators));\n         registerAggregation(new AggregationSpec(MedianAbsoluteDeviationAggregationBuilder.NAME,\n                 MedianAbsoluteDeviationAggregationBuilder::new, MedianAbsoluteDeviationAggregationBuilder::parse)\n                         .addResultReader(InternalMedianAbsoluteDeviation::new));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NDAwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r380754005", "bodyText": "Are we intentionally not supporting dates here? Do we allow percentile ranks over date fields now?  I'm actually not sure, but we should probably make sure we're not losing functionality by accident.", "author": "not-napoleon", "createdAt": "2020-02-18T15:41:06Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java", "diffHunk": "@@ -39,6 +44,22 @@\n     private final PercentilesConfig percentilesConfig;\n     private final boolean keyed;\n \n+    static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n+        valuesSourceRegistry.register(PercentileRanksAggregationBuilder.NAME,\n+            List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.HISTOGRAM),", "originalCommit": "8a536eda62b3ff742d05062e8ca861b1d44a3b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NTE4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51693#discussion_r386665181", "bodyText": "Closing the loop on this: after implementing the \"supported type\" test in master, and adding percentiles/ranks to the testing, we need to support CoreValuesSourceType.NUMERIC, CoreValuesSourceType.HISTOGRAM, CoreValuesSourceType.DATE, CoreValuesSourceType.BOOLEAN\nPhew!", "author": "polyfractal", "createdAt": "2020-03-02T21:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NDAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc6693e2e0d96d54e8554146a4f1c8c655a5d902", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java\nindex 05e4e30caca..a2c827bff37 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksAggregatorFactory.java\n\n@@ -46,7 +46,7 @@ class PercentileRanksAggregatorFactory extends ValuesSourceAggregatorFactory {\n \n     static void registerAggregators(ValuesSourceRegistry valuesSourceRegistry) {\n         valuesSourceRegistry.register(PercentileRanksAggregationBuilder.NAME,\n-            List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.HISTOGRAM),\n+            List.of(CoreValuesSourceType.NUMERIC, CoreValuesSourceType.HISTOGRAM, CoreValuesSourceType.DATE, CoreValuesSourceType.BOOLEAN),\n             new PercentilesAggregatorSupplier() {\n                 @Override\n                 public Aggregator build(String name, ValuesSource valuesSource, SearchContext context, Aggregator parent,\n"}}, {"oid": "e032424911e5229e72cca5d8e2fc0e53552ef73a", "url": "https://github.com/elastic/elasticsearch/commit/e032424911e5229e72cca5d8e2fc0e53552ef73a", "message": "Merge branch 'feature/extensible-values-source' into vs_percentile_ranks_refactor", "committedDate": "2020-03-02T20:42:04Z", "type": "commit"}, {"oid": "cc6693e2e0d96d54e8554146a4f1c8c655a5d902", "url": "https://github.com/elastic/elasticsearch/commit/cc6693e2e0d96d54e8554146a4f1c8c655a5d902", "message": "Adjust supported types", "committedDate": "2020-03-02T21:27:51Z", "type": "commit"}, {"oid": "1f607c3a4e2c992e1c97c12249fd91ac8e530ed7", "url": "https://github.com/elastic/elasticsearch/commit/1f607c3a4e2c992e1c97c12249fd91ac8e530ed7", "message": "Fix formatting", "committedDate": "2020-03-02T21:37:31Z", "type": "commit"}, {"oid": "dcf014bae47c6dfa38e5a5a5f52c03248854e493", "url": "https://github.com/elastic/elasticsearch/commit/dcf014bae47c6dfa38e5a5a5f52c03248854e493", "message": "Merge branch 'feature/extensible-values-source' into vs_percentile_ranks_refactor", "committedDate": "2020-03-03T16:45:52Z", "type": "commit"}]}