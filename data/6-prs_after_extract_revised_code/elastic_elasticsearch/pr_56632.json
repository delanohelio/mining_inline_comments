{"pr_number": 56632, "pr_title": "[ML] Tail the C++ logging pipe before connecting other pipes", "pr_createdAt": "2020-05-12T18:53:29Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56632", "timeline": [{"oid": "c44420ab96be91f75d146d4a656766a56cf9e617", "url": "https://github.com/elastic/elasticsearch/commit/c44420ab96be91f75d146d4a656766a56cf9e617", "message": "[ML] Tail the C++ logging pipe before connecting other pipes\n\nPrior to this change the named pipes that connect the ML C++\nprocesses to the Elasticsearch JVM were all opened before any\nof them were read from or written to.\n\nThis created a problem, where if the C++ process logged more\nmessages between opening the log pipe and opening the last\npipe to be connected than there was space for in the named\npipe's buffer then the C++ process would block.  This would\nmean it never got as far as opening the last named pipe, so\nthe JVM would never get as far as reading from the log pipe,\nhence a deadlock.\n\nThis change alters the connection order so that the JVM\nstarts reading from the logging pipe immediately after opening\nit so that if the C++ process logs messages while opening the\nother named pipes they are captured in a timely manner and\nthere is no danger of a deadlock.\n\nRelates #56366", "committedDate": "2020-05-12T18:45:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5ODAxMw==", "url": "https://github.com/elastic/elasticsearch/pull/56632#discussion_r424198013", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return !cppLogHandler().hasLogStreamEnded();\n          \n          \n            \n                    return cppLogHandler().hasLogStreamEnded() == false;\n          \n      \n    \n    \n  \n\n?", "author": "przemekwitek", "createdAt": "2020-05-13T06:23:01Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java", "diffHunk": "@@ -248,39 +260,43 @@ public ZonedDateTime getProcessStartTime() {\n     @Override\n     public boolean isProcessAlive() {\n         // Sanity check: make sure the process hasn't terminated already\n-        return !cppLogHandler.hasLogStreamEnded();\n+        return !cppLogHandler().hasLogStreamEnded();", "originalCommit": "c44420ab96be91f75d146d4a656766a56cf9e617", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f432eb118c1adfb4c9f9a2eac6b1360a82b2aee", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java\nindex 9b91cccade0..7f17c4c6c74 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java\n\n@@ -260,7 +260,7 @@ public abstract class AbstractNativeProcess implements NativeProcess {\n     @Override\n     public boolean isProcessAlive() {\n         // Sanity check: make sure the process hasn't terminated already\n-        return !cppLogHandler().hasLogStreamEnded();\n+        return cppLogHandler().hasLogStreamEnded() == false;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5OTA4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56632#discussion_r424199082", "bodyText": "Could we also have a similar method for input stream for consistency?\nprivate OutputStream processInStream();", "author": "przemekwitek", "createdAt": "2020-05-13T06:25:42Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java", "diffHunk": "@@ -248,39 +260,43 @@ public ZonedDateTime getProcessStartTime() {\n     @Override\n     public boolean isProcessAlive() {\n         // Sanity check: make sure the process hasn't terminated already\n-        return !cppLogHandler.hasLogStreamEnded();\n+        return !cppLogHandler().hasLogStreamEnded();\n     }\n \n     @Override\n     public boolean isProcessAliveAfterWaiting() {\n-        cppLogHandler.waitForLogStreamClose(Duration.ofMillis(45));\n+        cppLogHandler().waitForLogStreamClose(Duration.ofMillis(45));\n         return isProcessAlive();\n     }\n \n     @Override\n     public String readError() {\n-        return cppLogHandler.getErrors();\n+        return cppLogHandler().getErrors();\n     }\n \n     protected String jobId() {\n         return jobId;\n     }\n \n     protected InputStream processOutStream() {", "originalCommit": "c44420ab96be91f75d146d4a656766a56cf9e617", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f432eb118c1adfb4c9f9a2eac6b1360a82b2aee", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java\nindex 9b91cccade0..7f17c4c6c74 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/AbstractNativeProcess.java\n\n@@ -260,7 +260,7 @@ public abstract class AbstractNativeProcess implements NativeProcess {\n     @Override\n     public boolean isProcessAlive() {\n         // Sanity check: make sure the process hasn't terminated already\n-        return !cppLogHandler().hasLogStreamEnded();\n+        return cppLogHandler().hasLogStreamEnded() == false;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMDI0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56632#discussion_r424200241", "bodyText": "Why do we need both assert and if statements?\nIs it because asserts can get optimized away?", "author": "przemekwitek", "createdAt": "2020-05-13T06:29:03Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/ProcessPipes.java", "diffHunk": "@@ -118,19 +119,35 @@ public void addArgs(List<String> command) {\n     }\n \n     /**\n-     * Connect the pipes created by the C++ process.  This must be called after the corresponding C++ process has been started.\n+     * Connect the log pipe created by the C++ process.  The must be connected before any other pipes <em>and a thread must be\n+     * started to read from it</em>so that there is no risk of messages logged in between creation of the other pipes on the C++\n+     * side from blocking due to filling up the named pipe's buffer, and hence deadlocking communications between that process\n+     * and this JVM.\n+     * @param timeout Needs to be long enough for the C++ process perform all startup tasks that precede creation of named pipes.\n+     *                There should not be very many of these, so a short timeout should be fine.  However, at least a couple of\n+     *                seconds is recommended due to the vagaries of process scheduling and the way VMs can completely stall for\n+     *                some hypervisor actions.\n+     */\n+    public void connectLogStream(Duration timeout) throws IOException {\n+        logStreamHandler = new CppLogMessageHandler(jobId, namedPipeHelper.openNamedPipeInputStream(logPipeName, timeout));\n+    }\n+\n+    /**\n+     * Connect the other pipes created by the C++ process after the logging pipe has been connected.  This must be called after\n+     * the corresponding C++ process has been started, and after {@link #connectLogStream}.\n      * @param timeout Needs to be long enough for the C++ process perform all startup tasks that precede creation of named pipes.\n      *                There should not be very many of these, so a short timeout should be fine.  However, at least a couple of\n      *                seconds is recommended due to the vagaries of process scheduling and the way VMs can completely stall for\n      *                some hypervisor actions.\n      */\n-    public void connectStreams(Duration timeout) throws IOException {\n+    public void connectOtherStreams(Duration timeout) throws IOException {\n+        assert logStreamHandler != null : \"Must connect log stream before other streams\";\n+        if (logStreamHandler == null) {", "originalCommit": "c44420ab96be91f75d146d4a656766a56cf9e617", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MDM4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/56632#discussion_r424240386", "bodyText": "Yes, in production we run with assertions disabled.  So the assertion is to make CI fail instantly if the condition is violated (as it indicates a mistake in the program, not an environmental or user problem).  But if the mistake did somehow make it into production then we'll get a normal exception.", "author": "droberts195", "createdAt": "2020-05-13T07:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwMDI0MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1f432eb118c1adfb4c9f9a2eac6b1360a82b2aee", "url": "https://github.com/elastic/elasticsearch/commit/1f432eb118c1adfb4c9f9a2eac6b1360a82b2aee", "message": "Address review comments", "committedDate": "2020-05-13T08:03:47Z", "type": "commit"}, {"oid": "441a32b6f1675f329186f2641d8ad3605cf1803e", "url": "https://github.com/elastic/elasticsearch/commit/441a32b6f1675f329186f2641d8ad3605cf1803e", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into adjust_named_pipe_connection_sequence", "committedDate": "2020-05-13T08:04:14Z", "type": "commit"}]}