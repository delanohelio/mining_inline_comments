{"pr_number": 55695, "pr_title": "Add new circuitbreaker plugin and refactor CircuitBreakerService", "pr_createdAt": "2020-04-23T20:40:39Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55695", "timeline": [{"oid": "3085c081028e8724c9e7ec833428d1081ea6e718", "url": "https://github.com/elastic/elasticsearch/commit/3085c081028e8724c9e7ec833428d1081ea6e718", "message": "Add new circuit breaker plugin type and pass CircuitBreakerService to Plugin::createComponents", "committedDate": "2020-04-23T20:33:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExODkzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r414118935", "bodyText": "Drive-by comment -- would this be better named CircuitBreakerPlugin?", "author": "danhermann", "createdAt": "2020-04-23T20:57:37Z", "path": "server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.indices.breaker.BreakerSettings;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * An extension point for {@link Plugin} implementations to add custom circuit breakers\n+ */\n+public interface CircuitMemoryBreakerPlugin {", "originalCommit": "3085c081028e8724c9e7ec833428d1081ea6e718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5MTk4OA==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r414491988", "bodyText": "For sure :)", "author": "benwtrent", "createdAt": "2020-04-24T11:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExODkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d157364bd1778e95a7ebe452a57dcf7488317a5a", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java b/server/src/main/java/org/elasticsearch/plugins/CircuitBreakerPlugin.java\nsimilarity index 88%\nrename from server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java\nrename to server/src/main/java/org/elasticsearch/plugins/CircuitBreakerPlugin.java\nindex 40d60772fc1..0bec9e86c32 100644\n--- a/server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java\n+++ b/server/src/main/java/org/elasticsearch/plugins/CircuitBreakerPlugin.java\n\n@@ -30,7 +30,13 @@ import java.util.function.Consumer;\n /**\n  * An extension point for {@link Plugin} implementations to add custom circuit breakers\n  */\n-public interface CircuitMemoryBreakerPlugin {\n+public interface CircuitBreakerPlugin {\n+\n+    static final String CUSTOM_CIRCUIT_BREAKER_SETTING_PREFIX = \"custom.breaker\";\n+    static final String LIMIT = \"limit\";\n+    static final String OVERHEAD = \"overhead\";\n+    static final String TYPE = \"type\";\n+\n \n     /**\n      * Returns additional circuit breaker settings added by this plugin.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r415975996", "bodyText": "All of our plugin apis should be \"pull\" based, where we extract from the plugin what will be added to ES. This seems to do the opposite. It's unclear from my reading of this PR what this method actually does, since there are no example or test implementations, but based on the one use inside Node, it seems like this is used as a way to callback to actually add the breaker to the CircuitBreakerService. I think the root of the problem is CircuitBreakerService should not have a registerBreaker method. Instead, Node should collect all the breaker settings, and pass them to the service's ctor, as we don't need the ability to add these dynamically.\nAdditionally, the BreakerSettings concept seems like it needs a little work to make this all truly extendable. Currently it takes in all the values, but the plugin must read these values on its own, and the getCircuitBreakers() method above then relies on the plugin having Settings from its ctor, which cannot be relied on. Even if we passed the real Settings to getCircuitBreakers(), it seems opposite of what we want. IMO any new breakers that are added should be configurable in the same way our existing breakers are configured, ie through the same yaml settings with the new breaker name substituted.  This would mean replacing the hardcoded settings that exist for the builtin breakers with affix settings, so that they can be used with any breaker.", "author": "rjernst", "createdAt": "2020-04-27T16:45:44Z", "path": "server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.indices.breaker.BreakerSettings;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * An extension point for {@link Plugin} implementations to add custom circuit breakers\n+ */\n+public interface CircuitMemoryBreakerPlugin {\n+\n+    /**\n+     * Returns additional circuit breaker settings added by this plugin.\n+     *\n+     * This each of the {@link BreakerSettings} are passed to the configured {@link CircuitBreakerService}.\n+     * The service will create a new breaker according to the provided settings and overall environment.\n+     *\n+     */\n+    default List<BreakerSettings> getCircuitBreakers() {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * If the custom {@link BreakerSettings} have dynamic settings.\n+     * A settings update consumer can be added with this method.\n+     * Once the new settings are constructed, pass them to the updatedBreakerSettingsListener.\n+     */\n+    default void addDynamicBreakerUpdates(ClusterSettings settings, Consumer<BreakerSettings> updatedBreakerSettingsListener) {", "originalCommit": "3085c081028e8724c9e7ec833428d1081ea6e718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4NjcyNg==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r415986726", "bodyText": "It's unclear from my reading of this PR what this method actually does, since there are no example or test implementations, but based on the one use inside Node, it seems like this is used as a way to callback to actually add the breaker to the CircuitBreakerService\n\nIt is a way to hook into dynamic setting updates for the new circuit breakers. If this is possible by have a settings listener on a suffix, that would definitely be better.\n\nIMO any new breakers that are added should be configurable in the same way our existing breakers are configured, ie through the same yaml settings with the new breaker name substituted.\n\nEffectively, new circuit breakers would be added by plugins declaring new settings that match the appropriate affix?", "author": "benwtrent", "createdAt": "2020-04-27T16:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5MjE1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r416592153", "bodyText": "@rjernst I have updated the setting handling. Now new breakers are affix settings. The initial breaker settings are still provided by the plugin, but facilities are in place to make that as seamless as possible.\nStill an open question around making the current circuit breakers affix settings and deprecating their current setting values.\nAlso, I opted to NOT make durability configurable. This seems like something a user should NEVER be able to change (even at start up time).", "author": "benwtrent", "createdAt": "2020-04-28T13:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MTE0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r416851147", "bodyText": "It still seems like there is more boiler plate than there should be. What is the plugin actually providing? The setting parsing/registration should be possible within core, where plugins never need to do anything to handle it. Instead, plugins can just provide the breaker name, and core registers the appropriate settings/update handlers. All the plugin needs is a reference to the CircuiteBreaker so it can make calls to add/remove allocations. Currently this is done by exposing the CircuitBreakerService, which has a get method based on the breaker name. This isn't the worst for now, but the registerBreaker method should go away. It was added in a time when we were still fully utilizing guice, instead of explicit construction and pull based plugin apis that we have now.", "author": "rjernst", "createdAt": "2020-04-28T19:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMDM4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r417230386", "bodyText": "@rjernst\n\nAll the plugin needs is a reference to the CircuitBreaker so it can make calls to add/remove allocations.\n\nThis is not true. The underlying references change when there are setting changes. The plugin won't lose the accounting, but it would not see setting updates until a reboot. Which effectively makes plugin breaker settings static.\n\nThe setting parsing/registration should be possible within core, where plugins never need to do anything to handle it. Instead, plugins can just provide the breaker name, and core registers the appropriate settings/update handlers.\n\nHow can different plugins provide their appropriate setting defaults? To my knowledge, affix settings have global defaults and different plugins might want to provide their own sane defaults.", "author": "benwtrent", "createdAt": "2020-04-29T10:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5OTYwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r417599601", "bodyText": "The underlying references change when there are setting changes.\n\nThis seems pretty bad. There are ways to make the writing use locking but the read side, which is more common, not slow down. Also, after looking at the register method again, I've noticed the comment noting registering the same name replaces the existing breaker. This is leniency which I think makes having this available to plugins error prone. What if two plugins provide the same breaker name? Then the plugin registration order matters, and one  silently replaces the other. This is yet another reason I think we need to statically define the breakers at node startup, but still have them available.\n\nHow can different plugins provide their appropriate setting defaults?\n\nThis is a good point and something I hadn't considered. There are ways around this though. For example, in ScriptService we now use affix settings for context specific cache values, where the defaults for those are defined in the contexts themselves (ie like circuit breakers types here). It means the default defined in the setting is ignored and we apply the defaults dynamically based on whether the setting exists, rather than calling setting.get always.", "author": "rjernst", "createdAt": "2020-04-29T20:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3MzYzMw==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r418273633", "bodyText": "There are ways to make the writing use locking but the read side, which is more common, not slow down.\n\nKeeping the reference the same across threads will require overhead & limit to be volatile on read no? How else will threads ever see the updates? I think this will have a non-negligible performance hit. We might get around this hit by making method local copies of the volatile fields so they are only read once per method call.", "author": "benwtrent", "createdAt": "2020-04-30T20:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MDYwMg==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r419750602", "bodyText": "What we have done in other places is wrap the state into a single internal object (eg look at XPackLicenseState.Status). Updates to the setttings construct a new object, and flip all the values at once through a single volatile.\n\nI think this will have a non-negligible performance hit\n\nThis is the pattern we have used in numerous places in Elasticsearch. I know of no other place where we poll a service for the current instance of an object on every call. Having services/objects update themselves through cluster state listeners and volatile state is very common, and not a performance hit in any cases I know of.", "author": "rjernst", "createdAt": "2020-05-04T21:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0ODYxNA==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420048614", "bodyText": "@rjernst volatile reads are 3x as slow as non-volatile. But, given the other changes, I think it will be OK (we won't need concurrent hash map any longer).\nI am going to work on implementing this (initializing via ctor, volatile settings, etc.) and test performance with JMH. Will get back once done.\nThanks so much for your thoughts and time on this!", "author": "benwtrent", "createdAt": "2020-05-05T11:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NTk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d157364bd1778e95a7ebe452a57dcf7488317a5a", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java b/server/src/main/java/org/elasticsearch/plugins/CircuitBreakerPlugin.java\nsimilarity index 88%\nrename from server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java\nrename to server/src/main/java/org/elasticsearch/plugins/CircuitBreakerPlugin.java\nindex 40d60772fc1..0bec9e86c32 100644\n--- a/server/src/main/java/org/elasticsearch/plugins/CircuitMemoryBreakerPlugin.java\n+++ b/server/src/main/java/org/elasticsearch/plugins/CircuitBreakerPlugin.java\n\n@@ -30,7 +30,13 @@ import java.util.function.Consumer;\n /**\n  * An extension point for {@link Plugin} implementations to add custom circuit breakers\n  */\n-public interface CircuitMemoryBreakerPlugin {\n+public interface CircuitBreakerPlugin {\n+\n+    static final String CUSTOM_CIRCUIT_BREAKER_SETTING_PREFIX = \"custom.breaker\";\n+    static final String LIMIT = \"limit\";\n+    static final String OVERHEAD = \"overhead\";\n+    static final String TYPE = \"type\";\n+\n \n     /**\n      * Returns additional circuit breaker settings added by this plugin.\n"}}, {"oid": "d157364bd1778e95a7ebe452a57dcf7488317a5a", "url": "https://github.com/elastic/elasticsearch/commit/d157364bd1778e95a7ebe452a57dcf7488317a5a", "message": "intermediate commit on affix settings", "committedDate": "2020-04-27T18:41:46Z", "type": "commit"}, {"oid": "4cd89d8960935f05259b16342ec0d651055bacb3", "url": "https://github.com/elastic/elasticsearch/commit/4cd89d8960935f05259b16342ec0d651055bacb3", "message": "intermediate commit on affix settings", "committedDate": "2020-04-27T19:19:04Z", "type": "commit"}, {"oid": "00f40a3b300a2cf7e421762cbbba6ff9b7b2c7d8", "url": "https://github.com/elastic/elasticsearch/commit/00f40a3b300a2cf7e421762cbbba6ff9b7b2c7d8", "message": "moving towards affix settings for breakers", "committedDate": "2020-04-28T12:57:40Z", "type": "commit"}, {"oid": "f5d9e487b64c39cf6309f97504bdc9551dab6c2e", "url": "https://github.com/elastic/elasticsearch/commit/f5d9e487b64c39cf6309f97504bdc9551dab6c2e", "message": "Merge branch 'master' into feature/add-circuit-breaker-plugin-support", "committedDate": "2020-04-28T15:17:37Z", "type": "commit"}, {"oid": "3e5cacdb6e37236397ca48f2af32d156cfd864c1", "url": "https://github.com/elastic/elasticsearch/commit/3e5cacdb6e37236397ca48f2af32d156cfd864c1", "message": "removing unnecessary code change", "committedDate": "2020-04-28T18:04:53Z", "type": "commit"}, {"oid": "aac4d5f6c7993e9d487d1df1bf99f7725536b66d", "url": "https://github.com/elastic/elasticsearch/commit/aac4d5f6c7993e9d487d1df1bf99f7725536b66d", "message": "Merge branch 'master' into feature/add-circuit-breaker-plugin-support", "committedDate": "2020-04-28T18:21:39Z", "type": "commit"}, {"oid": "ec6f9acf3592d3c0cd472914120ec3aaf4b17584", "url": "https://github.com/elastic/elasticsearch/commit/ec6f9acf3592d3c0cd472914120ec3aaf4b17584", "message": "moving to keeping single ref of breakers", "committedDate": "2020-05-05T14:20:56Z", "type": "commit"}, {"oid": "680027c3ac157b77358f6d850e3b812dfa297f64", "url": "https://github.com/elastic/elasticsearch/commit/680027c3ac157b77358f6d850e3b812dfa297f64", "message": "Merge branch 'feature/add-circuit-breaker-plugin-support' of github.com:benwtrent/elasticsearch into feature/add-circuit-breaker-plugin-support", "committedDate": "2020-05-05T14:31:52Z", "type": "commit"}, {"oid": "65b0a3dd48ba2b42a60f0a0eef04ade2991929af", "url": "https://github.com/elastic/elasticsearch/commit/65b0a3dd48ba2b42a60f0a0eef04ade2991929af", "message": "addressing some changes", "committedDate": "2020-05-05T15:34:19Z", "type": "commit"}, {"oid": "c74a21c051150bb1f0c6c3a07f34da11c6c5f21b", "url": "https://github.com/elastic/elasticsearch/commit/c74a21c051150bb1f0c6c3a07f34da11c6c5f21b", "message": "setting up benchmark", "committedDate": "2020-05-05T19:12:51Z", "type": "commit"}, {"oid": "2b7956a49f8d1ade8b9e99c1996043f8b1342dcd", "url": "https://github.com/elastic/elasticsearch/commit/2b7956a49f8d1ade8b9e99c1996043f8b1342dcd", "message": "changing to volatile for simplicity", "committedDate": "2020-05-05T20:38:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyOTIzMg==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420729232", "bodyText": "This can be deleted before merge. I am using it for micro-benchmarking the change as circuit breakers are hot spots in the code base.", "author": "benwtrent", "createdAt": "2020-05-06T11:48:54Z", "path": "benchmarks/src/main/java/org/elasticsearch/benchmark/indices/breaker/HierarchyCircuitBreakerBenchmark.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.benchmark.indices.breaker;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.breaker.CircuitBreakingException;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@Fork(3)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Benchmark)\n+@SuppressWarnings(\"unused\") // invoked by benchmarking framework\n+public class HierarchyCircuitBreakerBenchmark {", "originalCommit": "2b7956a49f8d1ade8b9e99c1996043f8b1342dcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2OTQzNw==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r428669437", "bodyText": "@rjernst would you like these benchmarks deleted for now? Or rather keep them in the repo for future use?", "author": "benwtrent", "createdAt": "2020-05-21T14:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyOTIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4Nzg2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r428787865", "bodyText": "We should delete them. If they aren't being run regularly then it is only a nuisance to refactorings where we must change code that isn't actually maintained.", "author": "rjernst", "createdAt": "2020-05-21T17:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyOTIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwMDc5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r428800792", "bodyText": "Roger, I will delete :D.", "author": "benwtrent", "createdAt": "2020-05-21T17:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyOTIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "ce4f73cb317cafbd925e29a3a648a6da361e956e", "chunk": "diff --git a/benchmarks/src/main/java/org/elasticsearch/benchmark/indices/breaker/HierarchyCircuitBreakerBenchmark.java b/benchmarks/src/main/java/org/elasticsearch/benchmark/indices/breaker/HierarchyCircuitBreakerBenchmark.java\nindex ff4fdc2d6b9..534a8ae56bb 100644\n--- a/benchmarks/src/main/java/org/elasticsearch/benchmark/indices/breaker/HierarchyCircuitBreakerBenchmark.java\n+++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/indices/breaker/HierarchyCircuitBreakerBenchmark.java\n\n@@ -65,15 +65,17 @@ public class HierarchyCircuitBreakerBenchmark {\n             .put(HierarchyCircuitBreakerService.ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), \"100mb\")\n             .put(HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), \"100mb\")\n             .build();\n-        service = new HierarchyCircuitBreakerService(clusterSettings,\n-            new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS));\n+        service = new HierarchyCircuitBreakerService(\n+            clusterSettings,\n+            new ClusterSettings(clusterSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)\n+        );\n         breakers = Strings.splitStringByCommaToArray(breakerNames);\n     }\n \n     @Benchmark\n     @Threads(1)\n     public void circuitBreak_1(Blackhole bh) {\n-        for(int i = 0; i < 100; ++i) {\n+        for (int i = 0; i < 100; ++i) {\n             for (String breaker : breakers) {\n                 try {\n                     bh.consume(service.getBreaker(breaker).addEstimateBytesAndMaybeBreak(2048, \"foo\"));\n"}}, {"oid": "6fc7b43e7744aa6c968af2e01b79c42545f710cf", "url": "https://github.com/elastic/elasticsearch/commit/6fc7b43e7744aa6c968af2e01b79c42545f710cf", "message": "reverting passing in service to plugins", "committedDate": "2020-05-06T11:59:04Z", "type": "commit"}, {"oid": "ce4f73cb317cafbd925e29a3a648a6da361e956e", "url": "https://github.com/elastic/elasticsearch/commit/ce4f73cb317cafbd925e29a3a648a6da361e956e", "message": "addressing circuit breaker plugin needs", "committedDate": "2020-05-06T16:30:58Z", "type": "commit"}, {"oid": "a7538685788c51c759ccee2ceb05e9a598073035", "url": "https://github.com/elastic/elasticsearch/commit/a7538685788c51c759ccee2ceb05e9a598073035", "message": "adding tests for circuit breaker plugins", "committedDate": "2020-05-06T17:53:18Z", "type": "commit"}, {"oid": "e6b1c0306548d2b417abd91315ec480b545fc33b", "url": "https://github.com/elastic/elasticsearch/commit/e6b1c0306548d2b417abd91315ec480b545fc33b", "message": "Merge remote-tracking branch 'upstream/master' into feature/add-circuit-breaker-plugin-support", "committedDate": "2020-05-06T17:53:34Z", "type": "commit"}, {"oid": "0267956f5f711e2b3a9efd78355fa7e3f4445260", "url": "https://github.com/elastic/elasticsearch/commit/0267956f5f711e2b3a9efd78355fa7e3f4445260", "message": "minor adjustments", "committedDate": "2020-05-06T18:09:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDAwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420984009", "bodyText": "I am doing this so there is only ONE volatile read in this function.", "author": "benwtrent", "createdAt": "2020-05-06T17:57:24Z", "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -108,6 +86,9 @@ public void circuitBreak(String fieldName, long bytesNeeded) {\n      */\n     @Override\n     public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n+        final LimitAndOverhead limitAndOverhead = this.limitAndOverhead;", "originalCommit": "e6b1c0306548d2b417abd91315ec480b545fc33b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDU0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420984543", "bodyText": "I am passing in the already read settings as we don't care about updates while we are checking the limit. This is effectively as it was before.\nAdditionally, it also prevents another unnecessary volatile read.", "author": "benwtrent", "createdAt": "2020-05-06T17:58:12Z", "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -117,10 +98,10 @@ public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws Cir\n         // If there is no limit (-1), we can optimize a bit by using\n         // .addAndGet() instead of looping (because we don't have to check a\n         // limit), which makes the RamAccountingTermsEnum case faster.\n-        if (this.memoryBytesLimit == -1) {\n+        if (memoryBytesLimit == -1) {\n             newUsed = noLimit(bytes, label);\n         } else {\n-            newUsed = limit(bytes, label);\n+            newUsed = limit(bytes, label, overheadConstant, memoryBytesLimit);", "originalCommit": "e6b1c0306548d2b417abd91315ec480b545fc33b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MzM5OA==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420993398", "bodyText": "ChildMemoryCircuitBreaker objects need a reference to the constructed HierarchyCircuitBreakerService. This complicates plugin access to their own created circuit breakers. To prevent muddying the API between the plugin and the node, I have split the breaker creation and the breaker registration.", "author": "benwtrent", "createdAt": "2020-05-06T18:12:33Z", "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -331,56 +327,29 @@ public void checkParentLimit(long newBytesReserved, String label) throws Circuit\n                 message.append(\"]\");\n             }\n             message.append(\", usages [\");\n-            message.append(String.join(\", \",\n-                this.breakers.entrySet().stream().map(e -> {\n+            message.append(this.breakers.entrySet().stream().map(e -> {\n                     final CircuitBreaker breaker = e.getValue();\n                     final long breakerUsed = (long)(breaker.getUsed() * breaker.getOverhead());\n                     return e.getKey() + \"=\" + breakerUsed + \"/\" + new ByteSizeValue(breakerUsed);\n-                })\n-                    .collect(Collectors.toList())));\n+                }).collect(Collectors.joining(\", \")));\n             message.append(\"]\");\n             // derive durability of a tripped parent breaker depending on whether the majority of memory tracked by\n             // child circuit breakers is categorized as transient or permanent.\n             CircuitBreaker.Durability durability = memoryUsed.transientChildUsage >= memoryUsed.permanentChildUsage ?\n                 CircuitBreaker.Durability.TRANSIENT : CircuitBreaker.Durability.PERMANENT;\n-            logger.debug(\"{}\", message);\n+            logger.debug(() -> new ParameterizedMessage(\"{}\", message.toString()));\n             throw new CircuitBreakingException(message.toString(), memoryUsed.totalUsage, parentLimit, durability);\n         }\n     }\n \n-    /**\n-     * Allows to register a custom circuit breaker.\n-     * Warning: Will overwrite any existing custom breaker with the same name.\n-     */\n-    @Override\n-    public void registerBreaker(BreakerSettings breakerSettings) {\n+    public CircuitBreaker validateAndCreateBreaker(BreakerSettings breakerSettings) {", "originalCommit": "e6b1c0306548d2b417abd91315ec480b545fc33b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "401c43fccc0bc97707276f610ad2e714ce473e80", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\nindex 5633f675547..65edd7bf9dd 100644\n--- a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n+++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n\n@@ -342,7 +328,7 @@ public class HierarchyCircuitBreakerService extends CircuitBreakerService {\n         }\n     }\n \n-    public CircuitBreaker validateAndCreateBreaker(BreakerSettings breakerSettings) {\n+    private CircuitBreaker validateAndCreateBreaker(BreakerSettings breakerSettings) {\n         // Validate the settings\n         validateSettings(new BreakerSettings[] {breakerSettings});\n         return breakerSettings.getType() == CircuitBreaker.Type.NOOP ?\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NDMxMA==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r420994310", "bodyText": "For plugins to create their own circuit breaker instances (so that they can maintain a reference to them without the service), we still need to register circuit breakers outside of the constructor.\nMain difference here is that registration no longer overwrites previous circuit breakers and will throw if one is already registered with the same name.", "author": "benwtrent", "createdAt": "2020-05-06T18:14:02Z", "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -158,57 +151,60 @@ public HierarchyCircuitBreakerService(Settings settings, ClusterSettings cluster\n             this::setRequestBreakerLimit);\n         clusterSettings.addSettingsUpdateConsumer(ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING, ACCOUNTING_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n             this::setAccountingBreakerLimit);\n+        clusterSettings.addAffixUpdateConsumer(CIRCUIT_BREAKER_LIMIT_SETTING, CIRCUIT_BREAKER_OVERHEAD_SETTING,\n+            this::setCircuitBreakerLimit,\n+            (s, t) -> {});\n+    }\n+\n+    @Override\n+    public void registerNewCircuitBreakers(List<CircuitBreaker> circuitBreakers) {", "originalCommit": "e6b1c0306548d2b417abd91315ec480b545fc33b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "401c43fccc0bc97707276f610ad2e714ce473e80", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\nindex 5633f675547..65edd7bf9dd 100644\n--- a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n+++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n\n@@ -143,51 +156,24 @@ public class HierarchyCircuitBreakerService extends CircuitBreakerService {\n \n         clusterSettings.addSettingsUpdateConsumer(TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING, this::setTotalCircuitBreakerLimit,\n             this::validateTotalCircuitBreakerLimit);\n-        clusterSettings.addSettingsUpdateConsumer(FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING, FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n-            this::setFieldDataBreakerLimit);\n+        clusterSettings.addSettingsUpdateConsumer(FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,\n+            FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n+            (limit, overhead) -> updateCircuitBreakerSettings(CircuitBreaker.FIELDDATA, limit, overhead));\n         clusterSettings.addSettingsUpdateConsumer(IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING,\n-            IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_OVERHEAD_SETTING, this::setInFlightRequestsBreakerLimit);\n-        clusterSettings.addSettingsUpdateConsumer(REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING, REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n-            this::setRequestBreakerLimit);\n-        clusterSettings.addSettingsUpdateConsumer(ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING, ACCOUNTING_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n-            this::setAccountingBreakerLimit);\n-        clusterSettings.addAffixUpdateConsumer(CIRCUIT_BREAKER_LIMIT_SETTING, CIRCUIT_BREAKER_OVERHEAD_SETTING,\n-            this::setCircuitBreakerLimit,\n+            IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n+            (limit, overhead) -> updateCircuitBreakerSettings(CircuitBreaker.IN_FLIGHT_REQUESTS, limit, overhead));\n+        clusterSettings.addSettingsUpdateConsumer(REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,\n+            REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n+            (limit, overhead) -> updateCircuitBreakerSettings(CircuitBreaker.REQUEST, limit, overhead));\n+        clusterSettings.addSettingsUpdateConsumer(ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING,\n+            ACCOUNTING_CIRCUIT_BREAKER_OVERHEAD_SETTING,\n+            (limit, overhead) -> updateCircuitBreakerSettings(CircuitBreaker.ACCOUNTING, limit, overhead));\n+        clusterSettings.addAffixUpdateConsumer(CIRCUIT_BREAKER_LIMIT_SETTING,\n+            CIRCUIT_BREAKER_OVERHEAD_SETTING,\n+            (name, updatedValues) -> updateCircuitBreakerSettings(name, updatedValues.v1(), updatedValues.v2()),\n             (s, t) -> {});\n     }\n \n-    @Override\n-    public void registerNewCircuitBreakers(List<CircuitBreaker> circuitBreakers) {\n-        for (CircuitBreaker circuitBreaker : circuitBreakers) {\n-            if (breakers.containsKey(circuitBreaker.getName())) {\n-                throw new IllegalArgumentException(\"More than one circuit breaker with the name [\"\n-                    + circuitBreaker.getName()\n-                    +\"] exists. Circuit breaker names must be unique\");\n-            }\n-            breakers.put(circuitBreaker.getName(), circuitBreaker);\n-        }\n-    }\n-\n-    private void setCircuitBreakerLimit(String name, Tuple<ByteSizeValue, Double> updatedValues) {\n-        updateCircuitBreakerSettings(name, updatedValues.v1(), updatedValues.v2());\n-    }\n-\n-    private void setRequestBreakerLimit(ByteSizeValue newRequestMax, Double newRequestOverhead) {\n-        updateCircuitBreakerSettings(CircuitBreaker.REQUEST, newRequestMax, newRequestOverhead);\n-    }\n-\n-    private void setInFlightRequestsBreakerLimit(ByteSizeValue newInFlightRequestsMax, Double newInFlightRequestsOverhead) {\n-        updateCircuitBreakerSettings(CircuitBreaker.IN_FLIGHT_REQUESTS, newInFlightRequestsMax, newInFlightRequestsOverhead);\n-    }\n-\n-    private void setFieldDataBreakerLimit(ByteSizeValue newFielddataMax, Double newFielddataOverhead) {\n-        updateCircuitBreakerSettings(CircuitBreaker.FIELDDATA, newFielddataMax, newFielddataOverhead);\n-    }\n-\n-    private void setAccountingBreakerLimit(ByteSizeValue newAccountingMax, Double newAccountingOverhead) {\n-        updateCircuitBreakerSettings(CircuitBreaker.ACCOUNTING, newAccountingMax, newAccountingOverhead);\n-    }\n-\n     private void updateCircuitBreakerSettings(String name, ByteSizeValue newLimit, Double newOverhead) {\n         CircuitBreaker childBreaker = breakers.get(name);\n         if (childBreaker != null) {\n"}}, {"oid": "22313b3b1b9c4af5c9ae9f632fff35cbadc14ae8", "url": "https://github.com/elastic/elasticsearch/commit/22313b3b1b9c4af5c9ae9f632fff35cbadc14ae8", "message": "fixing plugin test", "committedDate": "2020-05-06T18:52:27Z", "type": "commit"}, {"oid": "76c0fa371095316a1a2971004374a22e1f6f3f97", "url": "https://github.com/elastic/elasticsearch/commit/76c0fa371095316a1a2971004374a22e1f6f3f97", "message": "Merge remote-tracking branch 'upstream/master' into feature/add-circuit-breaker-plugin-support", "committedDate": "2020-05-07T11:22:18Z", "type": "commit"}, {"oid": "c2af9451bea949d19cb1ae70f917f91bced6640e", "url": "https://github.com/elastic/elasticsearch/commit/c2af9451bea949d19cb1ae70f917f91bced6640e", "message": "Merge remote-tracking branch 'upstream/master' into feature/add-circuit-breaker-plugin-support", "committedDate": "2020-05-21T12:31:56Z", "type": "commit"}, {"oid": "401c43fccc0bc97707276f610ad2e714ce473e80", "url": "https://github.com/elastic/elasticsearch/commit/401c43fccc0bc97707276f610ad2e714ce473e80", "message": "updating plugin interface", "committedDate": "2020-05-21T13:58:34Z", "type": "commit"}, {"oid": "37ad601375e18ec107c3515766764207ed3d6e62", "url": "https://github.com/elastic/elasticsearch/commit/37ad601375e18ec107c3515766764207ed3d6e62", "message": "minor updates", "committedDate": "2020-05-21T14:04:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3Mjc4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r428672785", "bodyText": "I opted to have this be singular + return a BreakerSettings object. A redirection through a factory does not really provide value, especially since the factory will almost be exactly like this method definition.", "author": "benwtrent", "createdAt": "2020-05-21T14:05:46Z", "path": "server/src/main/java/org/elasticsearch/plugins/CircuitBreakerPlugin.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+import org.elasticsearch.common.breaker.CircuitBreaker;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.indices.breaker.BreakerSettings;\n+import org.elasticsearch.indices.breaker.CircuitBreakerService;\n+\n+\n+/**\n+ * An extension point for {@link Plugin} implementations to add custom circuit breakers\n+ */\n+public interface CircuitBreakerPlugin {\n+\n+    /**\n+     * Each of the factory functions are passed to the configured {@link CircuitBreakerService}.\n+     *\n+     * The service then constructs a {@link CircuitBreaker} given the resulting {@link BreakerSettings}.\n+     *\n+     * Custom circuit breakers settings can be found in {@link BreakerSettings}.\n+     * See:\n+     *  - limit (example: `breaker.foo.limit`) {@link BreakerSettings#CIRCUIT_BREAKER_LIMIT_SETTING}\n+     *  - overhead (example: `breaker.foo.overhead`) {@link BreakerSettings#CIRCUIT_BREAKER_OVERHEAD_SETTING}\n+     *  - type (example: `breaker.foo.type`) {@link BreakerSettings#CIRCUIT_BREAKER_TYPE}\n+     *\n+     * The `limit` and `overhead` settings will be dynamically updated in the circuit breaker service iff a {@link BreakerSettings}\n+     * object with the same name is provided at node startup.\n+     */\n+    BreakerSettings getCircuitBreaker(Settings settings);", "originalCommit": "37ad601375e18ec107c3515766764207ed3d6e62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "84478745649e6784c2c750f85429d179c2ef1e2d", "url": "https://github.com/elastic/elasticsearch/commit/84478745649e6784c2c750f85429d179c2ef1e2d", "message": "removing microbenchmark", "committedDate": "2020-05-21T17:29:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzMjEyNA==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r431532124", "bodyText": "when is durability being null ok?", "author": "rjernst", "createdAt": "2020-05-28T01:27:24Z", "path": "server/src/main/java/org/elasticsearch/indices/breaker/BreakerSettings.java", "diffHunk": "@@ -69,7 +129,7 @@ public double getOverhead() {\n     public String toString() {\n         return \"[\" + this.name +\n                 \",type=\" + this.type.toString() +\n-                \",durability=\" + this.durability.toString() +\n+                \",durability=\" + (this.durability == null ? \"null\" : this.durability.toString()) +", "originalCommit": "84478745649e6784c2c750f85429d179c2ef1e2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMzkxMg==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r432433912", "bodyText": "@rjernst when the breaker settings are for the parent breaker.", "author": "benwtrent", "createdAt": "2020-05-29T11:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzMjEyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzMjQ4NA==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r431532484", "bodyText": "nit: space after for", "author": "rjernst", "createdAt": "2020-05-28T01:28:48Z", "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -95,120 +100,97 @@\n \n     private final boolean trackRealMemoryUsage;\n     private volatile BreakerSettings parentSettings;\n-    private volatile BreakerSettings fielddataSettings;\n-    private volatile BreakerSettings inFlightRequestsSettings;\n-    private volatile BreakerSettings requestSettings;\n-    private volatile BreakerSettings accountingSettings;\n \n     // Tripped count for when redistribution was attempted but wasn't successful\n     private final AtomicLong parentTripCount = new AtomicLong(0);\n \n     public HierarchyCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {\n+        this(settings, Collections.emptyList(), clusterSettings);\n+    }\n+\n+    public HierarchyCircuitBreakerService(Settings settings, List<BreakerSettings> customBreakers, ClusterSettings clusterSettings) {\n         super();\n-        this.fielddataSettings = new BreakerSettings(CircuitBreaker.FIELDDATA,\n+        HashMap<String, CircuitBreaker> childCircuitBreakers = new HashMap<>();\n+        childCircuitBreakers.put(CircuitBreaker.FIELDDATA, validateAndCreateBreaker(\n+            new BreakerSettings(CircuitBreaker.FIELDDATA,\n                 FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).getBytes(),\n                 FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.get(settings),\n                 FIELDDATA_CIRCUIT_BREAKER_TYPE_SETTING.get(settings),\n                 CircuitBreaker.Durability.PERMANENT\n-        );\n-\n-        this.inFlightRequestsSettings = new BreakerSettings(CircuitBreaker.IN_FLIGHT_REQUESTS,\n+        )));\n+        childCircuitBreakers.put(CircuitBreaker.IN_FLIGHT_REQUESTS, validateAndCreateBreaker(\n+            new BreakerSettings(CircuitBreaker.IN_FLIGHT_REQUESTS,\n                 IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).getBytes(),\n                 IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_OVERHEAD_SETTING.get(settings),\n                 IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_TYPE_SETTING.get(settings),\n                 CircuitBreaker.Durability.TRANSIENT\n-        );\n-\n-        this.requestSettings = new BreakerSettings(CircuitBreaker.REQUEST,\n+        )));\n+        childCircuitBreakers.put(CircuitBreaker.REQUEST, validateAndCreateBreaker(\n+            new BreakerSettings(CircuitBreaker.REQUEST,\n                 REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).getBytes(),\n                 REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING.get(settings),\n                 REQUEST_CIRCUIT_BREAKER_TYPE_SETTING.get(settings),\n                 CircuitBreaker.Durability.TRANSIENT\n-        );\n-\n-        this.accountingSettings = new BreakerSettings(CircuitBreaker.ACCOUNTING,\n+        )));\n+        childCircuitBreakers.put(CircuitBreaker.ACCOUNTING, validateAndCreateBreaker(new BreakerSettings(CircuitBreaker.ACCOUNTING,\n                 ACCOUNTING_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).getBytes(),\n                 ACCOUNTING_CIRCUIT_BREAKER_OVERHEAD_SETTING.get(settings),\n                 ACCOUNTING_CIRCUIT_BREAKER_TYPE_SETTING.get(settings),\n                 CircuitBreaker.Durability.PERMANENT\n-        );\n-\n+        )));\n+        for(BreakerSettings breakerSettings : customBreakers) {", "originalCommit": "84478745649e6784c2c750f85429d179c2ef1e2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83f61820d646570d4b52e3bf768c176cc3961394", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\nindex 65edd7bf9dd..e0bd8646370 100644\n--- a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n+++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n\n@@ -104,10 +104,6 @@ public class HierarchyCircuitBreakerService extends CircuitBreakerService {\n     // Tripped count for when redistribution was attempted but wasn't successful\n     private final AtomicLong parentTripCount = new AtomicLong(0);\n \n-    public HierarchyCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {\n-        this(settings, Collections.emptyList(), clusterSettings);\n-    }\n-\n     public HierarchyCircuitBreakerService(Settings settings, List<BreakerSettings> customBreakers, ClusterSettings clusterSettings) {\n         super();\n         HashMap<String, CircuitBreaker> childCircuitBreakers = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NDQ3OA==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r432154478", "bodyText": "It looks like the one use of this is to grab stats for a breaker. Due to this and overhead being separate methods, this could theoretically result in a race condition where we get incorrect configuration in the stats. I realize this is already currently an issue, so this doesn't need to be solved right now, but could you please create a followup issue to solve this, maybe by getting rid of these methods and having a stats() method directly on the breaker.", "author": "rjernst", "createdAt": "2020-05-28T22:15:51Z", "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -208,15 +185,15 @@ public long getUsed() {\n      */\n     @Override\n     public long getLimit() {", "originalCommit": "84478745649e6784c2c750f85429d179c2ef1e2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNDMwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r432434309", "bodyText": "@rjernst definitely, I will create a new ES issue. It does not make sense to have separate methods any longer.", "author": "benwtrent", "createdAt": "2020-05-29T11:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NDQ3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MTE5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55695#discussion_r432161199", "bodyText": "Why do we need this alternate ctor? Can we convert the few tests calling tihs to pass an empty list?", "author": "rjernst", "createdAt": "2020-05-28T22:34:50Z", "path": "server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java", "diffHunk": "@@ -95,120 +100,97 @@\n \n     private final boolean trackRealMemoryUsage;\n     private volatile BreakerSettings parentSettings;\n-    private volatile BreakerSettings fielddataSettings;\n-    private volatile BreakerSettings inFlightRequestsSettings;\n-    private volatile BreakerSettings requestSettings;\n-    private volatile BreakerSettings accountingSettings;\n \n     // Tripped count for when redistribution was attempted but wasn't successful\n     private final AtomicLong parentTripCount = new AtomicLong(0);\n \n     public HierarchyCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {", "originalCommit": "84478745649e6784c2c750f85429d179c2ef1e2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83f61820d646570d4b52e3bf768c176cc3961394", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\nindex 65edd7bf9dd..e0bd8646370 100644\n--- a/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n+++ b/server/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java\n\n@@ -104,10 +104,6 @@ public class HierarchyCircuitBreakerService extends CircuitBreakerService {\n     // Tripped count for when redistribution was attempted but wasn't successful\n     private final AtomicLong parentTripCount = new AtomicLong(0);\n \n-    public HierarchyCircuitBreakerService(Settings settings, ClusterSettings clusterSettings) {\n-        this(settings, Collections.emptyList(), clusterSettings);\n-    }\n-\n     public HierarchyCircuitBreakerService(Settings settings, List<BreakerSettings> customBreakers, ClusterSettings clusterSettings) {\n         super();\n         HashMap<String, CircuitBreaker> childCircuitBreakers = new HashMap<>();\n"}}, {"oid": "83f61820d646570d4b52e3bf768c176cc3961394", "url": "https://github.com/elastic/elasticsearch/commit/83f61820d646570d4b52e3bf768c176cc3961394", "message": "addressing PR comments", "committedDate": "2020-05-29T12:12:35Z", "type": "commit"}, {"oid": "30549e2e6fa4aadbb0dcdf0dd84b9e42c995c195", "url": "https://github.com/elastic/elasticsearch/commit/30549e2e6fa4aadbb0dcdf0dd84b9e42c995c195", "message": "Merge branch 'master' into feature/add-circuit-breaker-plugin-support", "committedDate": "2020-05-29T12:12:41Z", "type": "commit"}]}