{"pr_number": 53427, "pr_title": "Vs refactor javadoc and comment cleanup", "pr_createdAt": "2020-03-11T18:38:34Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53427", "timeline": [{"oid": "25e5ee198424ca81d6626e4712f382a87bf4b4fa", "url": "https://github.com/elastic/elasticsearch/commit/25e5ee198424ca81d6626e4712f382a87bf4b4fa", "message": "Javadoc for aggregations support package", "committedDate": "2020-03-09T20:29:45Z", "type": "commit"}, {"oid": "e58ad9a23a69f688b2290d703fefbd675dcfdf4d", "url": "https://github.com/elastic/elasticsearch/commit/e58ad9a23a69f688b2290d703fefbd675dcfdf4d", "message": "Javadoc for ValuesSourceType, and moved HistogramSupplier to the right place", "committedDate": "2020-03-11T16:51:48Z", "type": "commit"}, {"oid": "9e626e7363887e9fa94186b865ce4710a1e06367", "url": "https://github.com/elastic/elasticsearch/commit/9e626e7363887e9fa94186b865ce4710a1e06367", "message": "Clean up some stale TODO items", "committedDate": "2020-03-11T18:00:43Z", "type": "commit"}, {"oid": "131e938ccaf77edcc31db9aa11826692cdb82e9e", "url": "https://github.com/elastic/elasticsearch/commit/131e938ccaf77edcc31db9aa11826692cdb82e9e", "message": "Fix line lengths", "committedDate": "2020-03-11T18:23:36Z", "type": "commit"}, {"oid": "642d47243682d333ed763f2141d26ec208300165", "url": "https://github.com/elastic/elasticsearch/commit/642d47243682d333ed763f2141d26ec208300165", "message": "Deprecate ValueType", "committedDate": "2020-03-11T18:23:46Z", "type": "commit"}, {"oid": "686d2de24a6d64724dfaffc869299c6f313fbe67", "url": "https://github.com/elastic/elasticsearch/commit/686d2de24a6d64724dfaffc869299c6f313fbe67", "message": "Package docs mention that ValueType is deprecated", "committedDate": "2020-03-11T18:41:12Z", "type": "commit"}, {"oid": "f7202204dd2ab07892897f4119ad7c3648bf3b33", "url": "https://github.com/elastic/elasticsearch/commit/f7202204dd2ab07892897f4119ad7c3648bf3b33", "message": "Merge branch 'feature/extensible-values-source' into vs-refactor-javadoc-and-comment-cleanup", "committedDate": "2020-03-12T14:56:54Z", "type": "commit"}, {"oid": "b71862ab0aebac6525a806e2b621f18d019593f2", "url": "https://github.com/elastic/elasticsearch/commit/b71862ab0aebac6525a806e2b621f18d019593f2", "message": "Merge branch 'feature/extensible-values-source' into vs-refactor-javadoc-and-comment-cleanup", "committedDate": "2020-03-12T18:14:07Z", "type": "commit"}, {"oid": "39c1789a906bc5a14c53e5682c07b5c57a9a7915", "url": "https://github.com/elastic/elasticsearch/commit/39c1789a906bc5a14c53e5682c07b5c57a9a7915", "message": "Merge branch 'feature/extensible-values-source' into vs-refactor-javadoc-and-comment-cleanup\n\n Conflicts:\n\tserver/src/main/java/org/elasticsearch/search/aggregations/support/CoreValuesSourceType.java", "committedDate": "2020-03-12T20:03:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1NzU4MA==", "url": "https://github.com/elastic/elasticsearch/pull/53427#discussion_r391857580", "bodyText": "I'm not really sure what you mean by place holder. Like, you mean that we'll replace it with another one later? Does this interface just exist to mark things that the registry can handle?", "author": "nik9000", "createdAt": "2020-03-12T19:57:05Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/AggregatorSupplier.java", "diffHunk": "@@ -18,5 +18,25 @@\n  */\n package org.elasticsearch.search.aggregations.support;\n \n+/**\n+ * {@link AggregatorSupplier} is a place holder interface.  The {@link ValuesSourceRegistry} uses this as a common interface for tools to", "originalCommit": "b71862ab0aebac6525a806e2b621f18d019593f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66c704d1774543818fa3e1f88ac113dd35efbe70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregatorSupplier.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregatorSupplier.java\nindex 873702b79a3..b646bc6b9e1 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregatorSupplier.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/AggregatorSupplier.java\n\n@@ -19,10 +19,9 @@\n package org.elasticsearch.search.aggregations.support;\n \n /**\n- * {@link AggregatorSupplier} is a place holder interface.  The {@link ValuesSourceRegistry} uses this as a common interface for tools to\n- * construct aggregator instances.  The aggregators for each aggregation should all share a signature, and that signature should be\n- * used to create an AggregatorSupplier for that aggregation.  Alternatively, if an existing supplier has a matching signature, please\n- * re-use that.\n+ * {@link AggregatorSupplier} serves as a marker for what the {@link ValuesSourceRegistry} holds to construct aggregator instances.\n+ * The aggregators for each aggregation should all share a signature, and that signature should be used to create an AggregatorSupplier for\n+ * that aggregation.  Alternatively, if an existing supplier has a matching signature, please re-use that.\n  *\n  * In many cases, this can be a simple wrapper over the aggregator constructor.  If that is sufficient, please consider the \"typecast\n  * lambda\" syntax:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5OTgyMg==", "url": "https://github.com/elastic/elasticsearch/pull/53427#discussion_r391899822", "bodyText": "Maybe something like `{@link ValuesSourceType}s represent data types on which aggregations can operate. On data nodes they are {@link resolved} to {@link ValueSource} instances that blah blah blah\"\nI'm not sure it is useful to explain too much about subclasses of ValuesSource here. I think I'd prefer to read that on ValuesSource.", "author": "nik9000", "createdAt": "2020-03-12T21:20:12Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java", "diffHunk": "@@ -26,10 +26,16 @@\n import java.util.function.LongSupplier;\n \n /**\n- * ValuesSourceType wraps the creation of specific per-source instances each {@link ValuesSource} needs to provide.  Every top-level\n- * subclass of {@link ValuesSource} should have a corresponding implementation of this interface.  In general, new data types seeking\n- * aggregation support should create a top level {@link ValuesSource}, then implement this to return wrappers for the specific sources of\n- * values.\n+ * {@link ValuesSourceType}s are the quantum unit of aggregations support.  {@link org.elasticsearch.index.mapper.MappedFieldType}s that", "originalCommit": "39c1789a906bc5a14c53e5682c07b5c57a9a7915", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66c704d1774543818fa3e1f88ac113dd35efbe70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java\nindex 7e26a8c9ebf..f2dff7ba2db 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java\n\n@@ -26,16 +26,23 @@ import java.time.ZoneId;\n import java.util.function.LongSupplier;\n \n /**\n- * {@link ValuesSourceType}s are the quantum unit of aggregations support.  {@link org.elasticsearch.index.mapper.MappedFieldType}s that\n- * allow aggregations map to exactly one ValuesSourceType, although multiple field types can map to the same ValuesSourceType.  Aggregations\n- * in turn provide a set of ValuesSourceTypes they can operate on.  ValuesSourceTypes in turn map to a single direct sub-class of\n- * {@link ValuesSource} (e.g. {@link ValuesSource.Numeric}; note that a given ValuesSourceType can yield different sub-sub-classes, e.g.\n- * {@link ValuesSource.Numeric.WithScript}, depending on the configuration).  Note that it's possible that two different ValuesSourceTypes\n- * will yield the same ValuesSource subclass.  This typically happens when the underlying representation is shared, but logically the data\n- * are different, such as with numbers and dates.\n+ * {@link ValuesSourceType} represents a collection of fields that share a common set of operations, for example all numeric fields.\n+ * Aggregations declare their support for a given ValuesSourceType (via {@link ValuesSourceRegistry#register}), and should then not need\n+ * to care about the fields which use that ValuesSourceType.\n  *\n- * ValuesSourceTypes should be stateless, and thus immutable.  We recommend that plugins define an enum for their ValuesSourceTypes, even\n- * if the plugin only intends to define one ValuesSourceType.  ValuesSourceTypes are not serialized as part of the aggregations framework.\n+ * ValuesSourceTypes provide a set of methods to instantiate concrete {@link ValuesSource} instances, based on the actual source of the\n+ * data for the aggregations.  In general, aggregations should not call these methods, but rather rely on {@link ValuesSourceConfig} to have\n+ * selected the correct implementation.\n+ *\n+ * ValuesSourceTypes should be stateless.  We recommend that plugins define an enum for their ValuesSourceTypes, even if the plugin only\n+ * intends to define one ValuesSourceType.  ValuesSourceTypes are not serialized as part of the aggregations framework.\n+ *\n+ * Prefer reusing an existing ValuesSourceType (ideally from {@link CoreValuesSourceType}) over creating a new type.  There are some cases\n+ * where creating a new type is necessary however.  In particular, consider a new ValuesSourceType if the field has custom encoding/decoding\n+ * requirements; if the field needs to expose additional information to the aggregation (e.g. {@link ValuesSource.Range#rangeType()}); or\n+ * if logically the type needs a more restricted use (e.g. even though dates are stored as numbers, it doesn't make sense to pass them to\n+ * a sum aggregation).  When adding a new ValuesSourceType, new aggregators should be added and registered at the same time, to add support\n+ * for the new type to existing aggregations, as appropriate.\n  */\n public interface ValuesSourceType {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMDIyMw==", "url": "https://github.com/elastic/elasticsearch/pull/53427#discussion_r391900223", "bodyText": "\ud83d\udc4d on calling out stateless. Though I don't think you need to call out that that implies they are immutable.", "author": "nik9000", "createdAt": "2020-03-12T21:21:07Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java", "diffHunk": "@@ -26,10 +26,16 @@\n import java.util.function.LongSupplier;\n \n /**\n- * ValuesSourceType wraps the creation of specific per-source instances each {@link ValuesSource} needs to provide.  Every top-level\n- * subclass of {@link ValuesSource} should have a corresponding implementation of this interface.  In general, new data types seeking\n- * aggregation support should create a top level {@link ValuesSource}, then implement this to return wrappers for the specific sources of\n- * values.\n+ * {@link ValuesSourceType}s are the quantum unit of aggregations support.  {@link org.elasticsearch.index.mapper.MappedFieldType}s that\n+ * allow aggregations map to exactly one ValuesSourceType, although multiple field types can map to the same ValuesSourceType.  Aggregations\n+ * in turn provide a set of ValuesSourceTypes they can operate on.  ValuesSourceTypes in turn map to a single direct sub-class of\n+ * {@link ValuesSource} (e.g. {@link ValuesSource.Numeric}; note that a given ValuesSourceType can yield different sub-sub-classes, e.g.\n+ * {@link ValuesSource.Numeric.WithScript}, depending on the configuration).  Note that it's possible that two different ValuesSourceTypes\n+ * will yield the same ValuesSource subclass.  This typically happens when the underlying representation is shared, but logically the data\n+ * are different, such as with numbers and dates.\n+ *\n+ * ValuesSourceTypes should be stateless, and thus immutable.  We recommend that plugins define an enum for their ValuesSourceTypes, even", "originalCommit": "39c1789a906bc5a14c53e5682c07b5c57a9a7915", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66c704d1774543818fa3e1f88ac113dd35efbe70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java\nindex 7e26a8c9ebf..f2dff7ba2db 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java\n\n@@ -26,16 +26,23 @@ import java.time.ZoneId;\n import java.util.function.LongSupplier;\n \n /**\n- * {@link ValuesSourceType}s are the quantum unit of aggregations support.  {@link org.elasticsearch.index.mapper.MappedFieldType}s that\n- * allow aggregations map to exactly one ValuesSourceType, although multiple field types can map to the same ValuesSourceType.  Aggregations\n- * in turn provide a set of ValuesSourceTypes they can operate on.  ValuesSourceTypes in turn map to a single direct sub-class of\n- * {@link ValuesSource} (e.g. {@link ValuesSource.Numeric}; note that a given ValuesSourceType can yield different sub-sub-classes, e.g.\n- * {@link ValuesSource.Numeric.WithScript}, depending on the configuration).  Note that it's possible that two different ValuesSourceTypes\n- * will yield the same ValuesSource subclass.  This typically happens when the underlying representation is shared, but logically the data\n- * are different, such as with numbers and dates.\n+ * {@link ValuesSourceType} represents a collection of fields that share a common set of operations, for example all numeric fields.\n+ * Aggregations declare their support for a given ValuesSourceType (via {@link ValuesSourceRegistry#register}), and should then not need\n+ * to care about the fields which use that ValuesSourceType.\n  *\n- * ValuesSourceTypes should be stateless, and thus immutable.  We recommend that plugins define an enum for their ValuesSourceTypes, even\n- * if the plugin only intends to define one ValuesSourceType.  ValuesSourceTypes are not serialized as part of the aggregations framework.\n+ * ValuesSourceTypes provide a set of methods to instantiate concrete {@link ValuesSource} instances, based on the actual source of the\n+ * data for the aggregations.  In general, aggregations should not call these methods, but rather rely on {@link ValuesSourceConfig} to have\n+ * selected the correct implementation.\n+ *\n+ * ValuesSourceTypes should be stateless.  We recommend that plugins define an enum for their ValuesSourceTypes, even if the plugin only\n+ * intends to define one ValuesSourceType.  ValuesSourceTypes are not serialized as part of the aggregations framework.\n+ *\n+ * Prefer reusing an existing ValuesSourceType (ideally from {@link CoreValuesSourceType}) over creating a new type.  There are some cases\n+ * where creating a new type is necessary however.  In particular, consider a new ValuesSourceType if the field has custom encoding/decoding\n+ * requirements; if the field needs to expose additional information to the aggregation (e.g. {@link ValuesSource.Range#rangeType()}); or\n+ * if logically the type needs a more restricted use (e.g. even though dates are stored as numbers, it doesn't make sense to pass them to\n+ * a sum aggregation).  When adding a new ValuesSourceType, new aggregators should be added and registered at the same time, to add support\n+ * for the new type to existing aggregations, as appropriate.\n  */\n public interface ValuesSourceType {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMDU5OA==", "url": "https://github.com/elastic/elasticsearch/pull/53427#discussion_r391900598", "bodyText": "s/The Aggregations Support package// ? The topic of the sentence is sort of implied by its position as package javadoc.", "author": "nik9000", "createdAt": "2020-03-12T21:22:00Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * The Aggregations Support package holds shared code for the aggregations framework, especially around dealing with values.", "originalCommit": "39c1789a906bc5a14c53e5682c07b5c57a9a7915", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66c704d1774543818fa3e1f88ac113dd35efbe70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\nindex 6eb440edeca..da5469e8731 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\n\n@@ -17,25 +17,34 @@\n  * under the License.\n  */\n \n+package org.elasticsearch.search.aggregations.support;\n+\n /**\n- * The Aggregations Support package holds shared code for the aggregations framework, especially around dealing with values.\n+ * <p>\n+ * This package holds shared code for the aggregations framework, especially around dealing with values.\n+ * </p>\n  *\n- * Key Classes\n+ * <h2> Key Classes </h2>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses </h3>\n+ * <p>\n  * These are thin wrappers which provide a unified interface to different ways of getting input data (e.g. DocValues from Lucene, or script\n  * output). A class hierarchy defines the type of values returned by the source.  The top level sub-classes define type-specific behavior,\n  * such as {@link org.elasticsearch.search.aggregations.support.ValuesSource.Numeric#isFloatingPoint()}.  Second level subclasses are\n  * then specialized based on where they read values from, e.g. script or field cases.  There are also adapter classes like\n  * {@link org.elasticsearch.search.aggregations.bucket.geogrid.CellIdSource} which do run-time conversion from one type to another, often\n  * dependent on a user specified parameter (precision in that case).\n+ * </p>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry}\n- * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured once during startup, when\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry} </h3>\n+ * <p>\n+ * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured at startup, when\n  * {@link org.elasticsearch.search.SearchModule} is configuring aggregations.  It shouldn't be necessary to access the registry in most\n  * cases, but you can get a read copy from {@link org.elasticsearch.index.query.QueryShardContext#getValuesSourceRegistry()} if necessary.\n+ * </p>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSourceType}\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSourceType} </h3>\n+ * <p>\n  * ValuesSourceTypes are the quantum of support in the aggregations framework, and provide a common language between fields and\n  * aggregations.  Fields which support aggregation override {@link org.elasticsearch.index.mapper.MappedFieldType#getValuesSourceType()} to\n  * return a compatible VaulesSourceType (based on how the field is stored), and aggregations register what types they support via one of the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTMyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53427#discussion_r391901329", "bodyText": "You probably should add html to this, just so it renders in a sane way when I mouseover the package and the like.", "author": "nik9000", "createdAt": "2020-03-12T21:23:10Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * The Aggregations Support package holds shared code for the aggregations framework, especially around dealing with values.\n+ *\n+ * Key Classes", "originalCommit": "39c1789a906bc5a14c53e5682c07b5c57a9a7915", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66c704d1774543818fa3e1f88ac113dd35efbe70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\nindex 6eb440edeca..da5469e8731 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\n\n@@ -17,25 +17,34 @@\n  * under the License.\n  */\n \n+package org.elasticsearch.search.aggregations.support;\n+\n /**\n- * The Aggregations Support package holds shared code for the aggregations framework, especially around dealing with values.\n+ * <p>\n+ * This package holds shared code for the aggregations framework, especially around dealing with values.\n+ * </p>\n  *\n- * Key Classes\n+ * <h2> Key Classes </h2>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses </h3>\n+ * <p>\n  * These are thin wrappers which provide a unified interface to different ways of getting input data (e.g. DocValues from Lucene, or script\n  * output). A class hierarchy defines the type of values returned by the source.  The top level sub-classes define type-specific behavior,\n  * such as {@link org.elasticsearch.search.aggregations.support.ValuesSource.Numeric#isFloatingPoint()}.  Second level subclasses are\n  * then specialized based on where they read values from, e.g. script or field cases.  There are also adapter classes like\n  * {@link org.elasticsearch.search.aggregations.bucket.geogrid.CellIdSource} which do run-time conversion from one type to another, often\n  * dependent on a user specified parameter (precision in that case).\n+ * </p>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry}\n- * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured once during startup, when\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry} </h3>\n+ * <p>\n+ * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured at startup, when\n  * {@link org.elasticsearch.search.SearchModule} is configuring aggregations.  It shouldn't be necessary to access the registry in most\n  * cases, but you can get a read copy from {@link org.elasticsearch.index.query.QueryShardContext#getValuesSourceRegistry()} if necessary.\n+ * </p>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSourceType}\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSourceType} </h3>\n+ * <p>\n  * ValuesSourceTypes are the quantum of support in the aggregations framework, and provide a common language between fields and\n  * aggregations.  Fields which support aggregation override {@link org.elasticsearch.index.mapper.MappedFieldType#getValuesSourceType()} to\n  * return a compatible VaulesSourceType (based on how the field is stored), and aggregations register what types they support via one of the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTg1MA==", "url": "https://github.com/elastic/elasticsearch/pull/53427#discussion_r391901850", "bodyText": "Since this is in the package do you need to fully qualify it? In general I'm fine importing things only for Javadoc if it makes the javadoc easier to read.", "author": "nik9000", "createdAt": "2020-03-12T21:23:51Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * The Aggregations Support package holds shared code for the aggregations framework, especially around dealing with values.\n+ *\n+ * Key Classes\n+ *\n+ * {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses", "originalCommit": "39c1789a906bc5a14c53e5682c07b5c57a9a7915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNzg0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53427#discussion_r393137843", "bodyText": "AFAICT, package-info.java always requires fully qualified names in links, no idea why.", "author": "not-napoleon", "createdAt": "2020-03-16T16:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "66c704d1774543818fa3e1f88ac113dd35efbe70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\nindex 6eb440edeca..da5469e8731 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\n\n@@ -17,25 +17,34 @@\n  * under the License.\n  */\n \n+package org.elasticsearch.search.aggregations.support;\n+\n /**\n- * The Aggregations Support package holds shared code for the aggregations framework, especially around dealing with values.\n+ * <p>\n+ * This package holds shared code for the aggregations framework, especially around dealing with values.\n+ * </p>\n  *\n- * Key Classes\n+ * <h2> Key Classes </h2>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses </h3>\n+ * <p>\n  * These are thin wrappers which provide a unified interface to different ways of getting input data (e.g. DocValues from Lucene, or script\n  * output). A class hierarchy defines the type of values returned by the source.  The top level sub-classes define type-specific behavior,\n  * such as {@link org.elasticsearch.search.aggregations.support.ValuesSource.Numeric#isFloatingPoint()}.  Second level subclasses are\n  * then specialized based on where they read values from, e.g. script or field cases.  There are also adapter classes like\n  * {@link org.elasticsearch.search.aggregations.bucket.geogrid.CellIdSource} which do run-time conversion from one type to another, often\n  * dependent on a user specified parameter (precision in that case).\n+ * </p>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry}\n- * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured once during startup, when\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry} </h3>\n+ * <p>\n+ * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured at startup, when\n  * {@link org.elasticsearch.search.SearchModule} is configuring aggregations.  It shouldn't be necessary to access the registry in most\n  * cases, but you can get a read copy from {@link org.elasticsearch.index.query.QueryShardContext#getValuesSourceRegistry()} if necessary.\n+ * </p>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSourceType}\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSourceType} </h3>\n+ * <p>\n  * ValuesSourceTypes are the quantum of support in the aggregations framework, and provide a common language between fields and\n  * aggregations.  Fields which support aggregation override {@link org.elasticsearch.index.mapper.MappedFieldType#getValuesSourceType()} to\n  * return a compatible VaulesSourceType (based on how the field is stored), and aggregations register what types they support via one of the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMjQ3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53427#discussion_r391902479", "bodyText": "s/once during startup/at startup/ ?", "author": "nik9000", "createdAt": "2020-03-12T21:24:38Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * The Aggregations Support package holds shared code for the aggregations framework, especially around dealing with values.\n+ *\n+ * Key Classes\n+ *\n+ * {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses\n+ * These are thin wrappers which provide a unified interface to different ways of getting input data (e.g. DocValues from Lucene, or script\n+ * output). A class hierarchy defines the type of values returned by the source.  The top level sub-classes define type-specific behavior,\n+ * such as {@link org.elasticsearch.search.aggregations.support.ValuesSource.Numeric#isFloatingPoint()}.  Second level subclasses are\n+ * then specialized based on where they read values from, e.g. script or field cases.  There are also adapter classes like\n+ * {@link org.elasticsearch.search.aggregations.bucket.geogrid.CellIdSource} which do run-time conversion from one type to another, often\n+ * dependent on a user specified parameter (precision in that case).\n+ *\n+ * {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry}\n+ * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured once during startup, when", "originalCommit": "39c1789a906bc5a14c53e5682c07b5c57a9a7915", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66c704d1774543818fa3e1f88ac113dd35efbe70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java b/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\nindex 6eb440edeca..da5469e8731 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/support/package-info.java\n\n@@ -17,25 +17,34 @@\n  * under the License.\n  */\n \n+package org.elasticsearch.search.aggregations.support;\n+\n /**\n- * The Aggregations Support package holds shared code for the aggregations framework, especially around dealing with values.\n+ * <p>\n+ * This package holds shared code for the aggregations framework, especially around dealing with values.\n+ * </p>\n  *\n- * Key Classes\n+ * <h2> Key Classes </h2>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSource} and its subclasses </h3>\n+ * <p>\n  * These are thin wrappers which provide a unified interface to different ways of getting input data (e.g. DocValues from Lucene, or script\n  * output). A class hierarchy defines the type of values returned by the source.  The top level sub-classes define type-specific behavior,\n  * such as {@link org.elasticsearch.search.aggregations.support.ValuesSource.Numeric#isFloatingPoint()}.  Second level subclasses are\n  * then specialized based on where they read values from, e.g. script or field cases.  There are also adapter classes like\n  * {@link org.elasticsearch.search.aggregations.bucket.geogrid.CellIdSource} which do run-time conversion from one type to another, often\n  * dependent on a user specified parameter (precision in that case).\n+ * </p>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry}\n- * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured once during startup, when\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSourceRegistry} </h3>\n+ * <p>\n+ * ValuesSourceRegistry stores the mappings for what types are supported by what aggregations.  It is configured at startup, when\n  * {@link org.elasticsearch.search.SearchModule} is configuring aggregations.  It shouldn't be necessary to access the registry in most\n  * cases, but you can get a read copy from {@link org.elasticsearch.index.query.QueryShardContext#getValuesSourceRegistry()} if necessary.\n+ * </p>\n  *\n- * {@link org.elasticsearch.search.aggregations.support.ValuesSourceType}\n+ * <h3> {@link org.elasticsearch.search.aggregations.support.ValuesSourceType} </h3>\n+ * <p>\n  * ValuesSourceTypes are the quantum of support in the aggregations framework, and provide a common language between fields and\n  * aggregations.  Fields which support aggregation override {@link org.elasticsearch.index.mapper.MappedFieldType#getValuesSourceType()} to\n  * return a compatible VaulesSourceType (based on how the field is stored), and aggregations register what types they support via one of the\n"}}, {"oid": "66c704d1774543818fa3e1f88ac113dd35efbe70", "url": "https://github.com/elastic/elasticsearch/commit/66c704d1774543818fa3e1f88ac113dd35efbe70", "message": "Response to PR feedback", "committedDate": "2020-03-16T18:04:46Z", "type": "commit"}, {"oid": "1fd7aec68a97bac9d1dc53d2276254a5dee3066c", "url": "https://github.com/elastic/elasticsearch/commit/1fd7aec68a97bac9d1dc53d2276254a5dee3066c", "message": "Merge branch 'feature/extensible-values-source' into vs-refactor-javadoc-and-comment-cleanup\n\n Conflicts:\n\tserver/src/main/java/org/elasticsearch/search/aggregations/support/CoreValuesSourceType.java", "committedDate": "2020-03-16T19:58:25Z", "type": "commit"}, {"oid": "96a99be781ee2296c8c8709b59b483f3ffdafb0a", "url": "https://github.com/elastic/elasticsearch/commit/96a99be781ee2296c8c8709b59b483f3ffdafb0a", "message": "Merge branch 'feature/extensible-values-source' into vs-refactor-javadoc-and-comment-cleanup", "committedDate": "2020-03-18T14:02:25Z", "type": "commit"}]}