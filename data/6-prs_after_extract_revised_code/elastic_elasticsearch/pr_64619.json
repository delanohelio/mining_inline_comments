{"pr_number": 64619, "pr_title": "Simplify creation of CentroidCalculator objects", "pr_createdAt": "2020-11-05T07:32:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64619", "timeline": [{"oid": "49c88399fe257519ac4b71714cdff7149eefc171", "url": "https://github.com/elastic/elasticsearch/commit/49c88399fe257519ac4b71714cdff7149eefc171", "message": "Refactor CentroidCalculator", "committedDate": "2020-11-05T07:20:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3Njk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/64619#discussion_r518476974", "bodyText": "I remember doing this because sometimes the division would lead to degrees right above 180 or 90. Is this not needed anymore? Should we remove this since it is no longer the concern of the calculator to normalize, and instead, the encoder will be doing this?", "author": "talevy", "createdAt": "2020-11-06T01:51:49Z", "path": "x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java", "diffHunk": "@@ -27,106 +26,64 @@\n  * as the centroid of a shape.\n  */\n public class CentroidCalculator {\n-    CompensatedSum compSumX;\n-    CompensatedSum compSumY;\n-    CompensatedSum compSumWeight;\n-    private CentroidCalculatorVisitor visitor;\n-    private DimensionalShapeType dimensionalShapeType;\n-\n-    public CentroidCalculator(Geometry geometry) {\n-        this.compSumX = new CompensatedSum(0, 0);\n-        this.compSumY = new CompensatedSum(0, 0);\n-        this.compSumWeight = new CompensatedSum(0, 0);\n-        this.dimensionalShapeType = null;\n-        this.visitor = new CentroidCalculatorVisitor(this);\n-        geometry.visit(visitor);\n-        this.dimensionalShapeType = visitor.calculator.dimensionalShapeType;\n-    }\n \n-    /**\n-     * adds a single coordinate to the running sum and count of coordinates\n-     * for centroid calculation\n-     *  @param x the x-coordinate of the point\n-     * @param y the y-coordinate of the point\n-     * @param weight the associated weight of the coordinate\n-     */\n-    private void addCoordinate(double x, double y, double weight, DimensionalShapeType dimensionalShapeType) {\n-        // x and y can be infinite due to really small areas and rounding problems\n-        if (Double.isFinite(x) && Double.isFinite(y)) {\n-            if (this.dimensionalShapeType == null || this.dimensionalShapeType == dimensionalShapeType) {\n-                compSumX.add(x * weight);\n-                compSumY.add(y * weight);\n-                compSumWeight.add(weight);\n-                this.dimensionalShapeType = dimensionalShapeType;\n-            } else if (dimensionalShapeType.compareTo(this.dimensionalShapeType) > 0) {\n-                // reset counters\n-                compSumX.reset(x * weight, 0);\n-                compSumY.reset(y * weight, 0);\n-                compSumWeight.reset(weight, 0);\n-                this.dimensionalShapeType = dimensionalShapeType;\n-            }\n-        }\n+    private final CentroidCalculatorVisitor visitor;\n+\n+    public CentroidCalculator() {\n+        this.visitor = new CentroidCalculatorVisitor();\n     }\n \n     /**\n-     * Adjusts the existing calculator to add the running sum and count\n-     * from another {@link CentroidCalculator}. This is used to keep\n-     * a running count of points from different sub-shapes of a single\n-     * geo-shape field\n+     * Add a geometry to the calculator\n      *\n-     * @param otherCalculator the other centroid calculator to add from\n+     * @param geometry the geometry to add\n      */\n-    public void addFrom(CentroidCalculator otherCalculator) {\n-        int compared = dimensionalShapeType.compareTo(otherCalculator.dimensionalShapeType);\n-        if (compared < 0) {\n-            dimensionalShapeType = otherCalculator.dimensionalShapeType;\n-            this.compSumX = otherCalculator.compSumX;\n-            this.compSumY = otherCalculator.compSumY;\n-            this.compSumWeight = otherCalculator.compSumWeight;\n-\n-        } else if (compared == 0) {\n-            this.compSumX.add(otherCalculator.compSumX.value());\n-            this.compSumY.add(otherCalculator.compSumY.value());\n-            this.compSumWeight.add(otherCalculator.compSumWeight.value());\n-        } // else (compared > 0) do not modify centroid calculation since otherCalculator is of lower dimension than this calculator\n+    public void add(Geometry geometry) {\n+        geometry.visit(visitor);\n     }\n \n     /**\n      * @return the x-coordinate centroid\n      */\n     public double getX() {\n         // normalization required due to floating point precision errors", "originalCommit": "49c88399fe257519ac4b71714cdff7149eefc171", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba3e10265ba2c31ff5792e219f7d208f53a2afeb", "chunk": "diff --git a/x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java b/x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java\nindex 4c87104962b..4a137deb5f6 100644\n--- a/x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java\n+++ b/x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/fielddata/CentroidCalculator.java\n\n@@ -46,7 +46,6 @@ public class CentroidCalculator {\n      * @return the x-coordinate centroid\n      */\n     public double getX() {\n-        // normalization required due to floating point precision errors\n         return visitor.compSumX.value() / visitor.compSumWeight.value();\n     }\n \n"}}, {"oid": "ba3e10265ba2c31ff5792e219f7d208f53a2afeb", "url": "https://github.com/elastic/elasticsearch/commit/ba3e10265ba2c31ff5792e219f7d208f53a2afeb", "message": "remove comments", "committedDate": "2020-11-06T06:46:18Z", "type": "commit"}, {"oid": "efeec667370d5e7d566eb6bf2c339c893b2db64d", "url": "https://github.com/elastic/elasticsearch/commit/efeec667370d5e7d566eb6bf2c339c893b2db64d", "message": "Merge branch 'master' into centroidCalculator", "committedDate": "2020-11-06T07:02:40Z", "type": "commit"}]}