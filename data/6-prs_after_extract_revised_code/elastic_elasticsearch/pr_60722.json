{"pr_number": 60722, "pr_title": "Fail searchable snapshot shards on invalid license", "pr_createdAt": "2020-08-05T08:15:34Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60722", "timeline": [{"oid": "7d3a0c0d2777a7551d8e40abad616f00c7740223", "url": "https://github.com/elastic/elasticsearch/commit/7d3a0c0d2777a7551d8e40abad616f00c7740223", "message": "Fail searchable snapshot shards on invalid license", "committedDate": "2020-08-05T08:10:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NDk5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60722#discussion_r465594995", "bodyText": "failShard() does a lot of things, some of them involving IO, and we're doing this under the same mutex as the IndexEventListener methods which are called during cluster state updates. Are you sure that's ok?", "author": "DaveCTurner", "createdAt": "2020-08-05T09:27:09Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.store.AlreadyClosedException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.routing.RerouteService;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Priority;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.shard.IndexEventListener;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.license.LicenseStateListener;\n+import org.elasticsearch.license.XPackLicenseState;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class FailShardsOnInvalidLicenseClusterListener implements LicenseStateListener, IndexEventListener {\n+\n+    private static final Logger logger = LogManager.getLogger(FailShardsOnInvalidLicenseClusterListener.class);\n+\n+    private final XPackLicenseState xPackLicenseState;\n+\n+    private final RerouteService rerouteService;\n+\n+    final Set<IndexShard> shardsToFail = new HashSet<>();\n+\n+    private boolean allowed;\n+\n+    public FailShardsOnInvalidLicenseClusterListener(XPackLicenseState xPackLicenseState, RerouteService rerouteService) {\n+        this.xPackLicenseState = xPackLicenseState;\n+        this.rerouteService = rerouteService;\n+        this.allowed = xPackLicenseState.isAllowed(XPackLicenseState.Feature.SEARCHABLE_SNAPSHOTS);\n+        xPackLicenseState.addListener(this);\n+    }\n+\n+    @Override\n+    public synchronized void afterIndexShardStarted(IndexShard indexShard) {\n+        shardsToFail.add(indexShard);\n+        failActiveShardsIfNecessary();\n+    }\n+\n+    @Override\n+    public synchronized void beforeIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) {\n+        if (indexShard != null) {\n+            shardsToFail.remove(indexShard);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void licenseStateChanged() {\n+        final boolean allowed = xPackLicenseState.isAllowed(XPackLicenseState.Feature.SEARCHABLE_SNAPSHOTS);\n+        if (allowed && this.allowed == false) {\n+            rerouteService.reroute(\"reroute after license activation\", Priority.NORMAL, new ActionListener<ClusterState>() {\n+                @Override\n+                public void onResponse(ClusterState clusterState) {\n+                    logger.trace(\"successful reroute after license activation\");\n+                }\n+\n+                @Override\n+                public void onFailure(Exception e) {\n+                    logger.debug(\"unsuccessful reroute after license activation\");\n+                }\n+            });\n+        }\n+        this.allowed = allowed;\n+        failActiveShardsIfNecessary();\n+    }\n+\n+    private void failActiveShardsIfNecessary() {\n+        assert Thread.holdsLock(this);\n+        if (allowed == false) {\n+            for (IndexShard indexShard : shardsToFail) {\n+                try {\n+                    indexShard.failShard(\"invalid license\", null);", "originalCommit": "7d3a0c0d2777a7551d8e40abad616f00c7740223", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwNjczMA==", "url": "https://github.com/elastic/elasticsearch/pull/60722#discussion_r465606730", "bodyText": "I initially contemplated moving the actual failing to a separate (generic) thread, to avoid cluster state updates from being potentially delayed by this. As the triggering of this should (hopefully) be a rare event, and we do similar work on the cluster state update thread when closing a shard, I thought it might unnecessarily complicate this code here with only little benefit. Let me know what your preference is.", "author": "ywelsch", "createdAt": "2020-08-05T09:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NDk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0MTA1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60722#discussion_r465641052", "bodyText": "Ok, on reflection this way seems ok as it should indeed be rare to call this and we won't be retrying very much either.", "author": "DaveCTurner", "createdAt": "2020-08-05T10:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NDk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1bba92263ca83426618e566f75221c1e754f498", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java\nindex 9498172b681..f452a2b2c8e 100644\n--- a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java\n+++ b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java\n\n@@ -8,6 +8,7 @@ package org.elasticsearch.xpack.searchablesnapshots;\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.apache.lucene.store.AlreadyClosedException;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.cluster.ClusterState;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NTExOA==", "url": "https://github.com/elastic/elasticsearch/pull/60722#discussion_r465595118", "bodyText": "Perhaps name the shard in the message here?", "author": "DaveCTurner", "createdAt": "2020-08-05T09:27:22Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.store.AlreadyClosedException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.routing.RerouteService;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.Priority;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.shard.IndexEventListener;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.license.LicenseStateListener;\n+import org.elasticsearch.license.XPackLicenseState;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class FailShardsOnInvalidLicenseClusterListener implements LicenseStateListener, IndexEventListener {\n+\n+    private static final Logger logger = LogManager.getLogger(FailShardsOnInvalidLicenseClusterListener.class);\n+\n+    private final XPackLicenseState xPackLicenseState;\n+\n+    private final RerouteService rerouteService;\n+\n+    final Set<IndexShard> shardsToFail = new HashSet<>();\n+\n+    private boolean allowed;\n+\n+    public FailShardsOnInvalidLicenseClusterListener(XPackLicenseState xPackLicenseState, RerouteService rerouteService) {\n+        this.xPackLicenseState = xPackLicenseState;\n+        this.rerouteService = rerouteService;\n+        this.allowed = xPackLicenseState.isAllowed(XPackLicenseState.Feature.SEARCHABLE_SNAPSHOTS);\n+        xPackLicenseState.addListener(this);\n+    }\n+\n+    @Override\n+    public synchronized void afterIndexShardStarted(IndexShard indexShard) {\n+        shardsToFail.add(indexShard);\n+        failActiveShardsIfNecessary();\n+    }\n+\n+    @Override\n+    public synchronized void beforeIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) {\n+        if (indexShard != null) {\n+            shardsToFail.remove(indexShard);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void licenseStateChanged() {\n+        final boolean allowed = xPackLicenseState.isAllowed(XPackLicenseState.Feature.SEARCHABLE_SNAPSHOTS);\n+        if (allowed && this.allowed == false) {\n+            rerouteService.reroute(\"reroute after license activation\", Priority.NORMAL, new ActionListener<ClusterState>() {\n+                @Override\n+                public void onResponse(ClusterState clusterState) {\n+                    logger.trace(\"successful reroute after license activation\");\n+                }\n+\n+                @Override\n+                public void onFailure(Exception e) {\n+                    logger.debug(\"unsuccessful reroute after license activation\");\n+                }\n+            });\n+        }\n+        this.allowed = allowed;\n+        failActiveShardsIfNecessary();\n+    }\n+\n+    private void failActiveShardsIfNecessary() {\n+        assert Thread.holdsLock(this);\n+        if (allowed == false) {\n+            for (IndexShard indexShard : shardsToFail) {\n+                try {\n+                    indexShard.failShard(\"invalid license\", null);\n+                } catch (AlreadyClosedException ignored) {\n+                    // ignore\n+                } catch (Exception e) {\n+                    logger.warn(\"Could not close index service due to invalid license\", e);", "originalCommit": "7d3a0c0d2777a7551d8e40abad616f00c7740223", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1bba92263ca83426618e566f75221c1e754f498", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java\nindex 9498172b681..f452a2b2c8e 100644\n--- a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java\n+++ b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/FailShardsOnInvalidLicenseClusterListener.java\n\n@@ -8,6 +8,7 @@ package org.elasticsearch.xpack.searchablesnapshots;\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.apache.lucene.store.AlreadyClosedException;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.cluster.ClusterState;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NTUxNg==", "url": "https://github.com/elastic/elasticsearch/pull/60722#discussion_r465595516", "bodyText": "Would prefer to invent an exception rather than passing null to failShard() here.", "author": "DaveCTurner", "createdAt": "2020-08-05T09:28:03Z", "path": "server/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java", "diffHunk": "@@ -395,6 +395,7 @@ public void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {\n         final String allocationId;\n         final long primaryTerm;\n         final String message;\n+        @Nullable", "originalCommit": "7d3a0c0d2777a7551d8e40abad616f00c7740223", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5OTgxNw==", "url": "https://github.com/elastic/elasticsearch/pull/60722#discussion_r465599817", "bodyText": "We have been passing null here before this change. This just makes it clearer that that's been the case. The \"reason\" String still conveys why a shard has been failed.", "author": "ywelsch", "createdAt": "2020-08-05T09:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NTUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwMzA2MA==", "url": "https://github.com/elastic/elasticsearch/pull/60722#discussion_r465603060", "bodyText": "ok, makes sense then", "author": "DaveCTurner", "createdAt": "2020-08-05T09:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NTUxNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b1bba92263ca83426618e566f75221c1e754f498", "url": "https://github.com/elastic/elasticsearch/commit/b1bba92263ca83426618e566f75221c1e754f498", "message": "improve log message", "committedDate": "2020-08-05T09:41:50Z", "type": "commit"}, {"oid": "98ccc9b9a214e5cd259023ef942b9300f962c35b", "url": "https://github.com/elastic/elasticsearch/commit/98ccc9b9a214e5cd259023ef942b9300f962c35b", "message": "fix testt", "committedDate": "2020-08-05T09:53:14Z", "type": "commit"}, {"oid": "0b8b5a85d4e7ad6fa5ecb32bd0b4a471a5c3e4ac", "url": "https://github.com/elastic/elasticsearch/commit/0b8b5a85d4e7ad6fa5ecb32bd0b4a471a5c3e4ac", "message": "Merge remote-tracking branch 'elastic/master' into license-degrad-searchsnap", "committedDate": "2020-08-05T09:54:00Z", "type": "commit"}, {"oid": "c41fc9e0cc0ad67158a48f7dc67ee51668945914", "url": "https://github.com/elastic/elasticsearch/commit/c41fc9e0cc0ad67158a48f7dc67ee51668945914", "message": "jesus", "committedDate": "2020-08-05T10:06:43Z", "type": "commit"}]}