{"pr_number": 61016, "pr_title": "Do not access snapshot repo on dedicated voting-only master node", "pr_createdAt": "2020-08-12T10:23:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61016", "timeline": [{"oid": "8e3127b613cd9bbdabf08036e1c97c9647c6417e", "url": "https://github.com/elastic/elasticsearch/commit/8e3127b613cd9bbdabf08036e1c97c9647c6417e", "message": "Do not access snapshot repo on dedicated voting-only master node", "committedDate": "2020-08-12T10:19:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDQ0NA==", "url": "https://github.com/elastic/elasticsearch/pull/61016#discussion_r469164444", "bodyText": "Maybe we could just not add the applier in the first place in the constructor where we check if the node is a master or data node (we should have the information that this is a voting only node there already from the settings?)?", "author": "original-brownbear", "createdAt": "2020-08-12T10:33:35Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java", "diffHunk": "@@ -290,6 +294,9 @@ protected void doRun() {\n     public void applyClusterState(ClusterChangedEvent event) {\n         try {\n             final ClusterState state = event.state();\n+            if (isDedicatedVotingOnlyNode(state.nodes().getLocalNode())) {", "originalCommit": "8e3127b613cd9bbdabf08036e1c97c9647c6417e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5NjAyMg==", "url": "https://github.com/elastic/elasticsearch/pull/61016#discussion_r469196022", "bodyText": "We need to be able to compute this from a DiscoveryNode since we need to know it for remote nodes too, and we won't have a DiscoveryNode in the constructor so would have to implement it two different ways. I think I prefer this.", "author": "DaveCTurner", "createdAt": "2020-08-12T11:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDQ0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwODM0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61016#discussion_r469208345", "bodyText": "yeah, I went back and forth on this, and prefer to reuse the same logic.\nI have done this in a different way now in 143fc1c: Let me know if you prefer this.", "author": "ywelsch", "createdAt": "2020-08-12T12:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDQ0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNjQ5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61016#discussion_r469226499", "bodyText": "I like it :)", "author": "original-brownbear", "createdAt": "2020-08-12T12:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "143fc1cf83eda362ad00d7bb5b9700a514414db6", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\nindex bdae7c9c673..1bbd8b19aae 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\n\n@@ -294,9 +298,6 @@ public class RepositoriesService extends AbstractLifecycleComponent implements C\n     public void applyClusterState(ClusterChangedEvent event) {\n         try {\n             final ClusterState state = event.state();\n-            if (isDedicatedVotingOnlyNode(state.nodes().getLocalNode())) {\n-                return;\n-            }\n             RepositoriesMetadata oldMetadata = event.previousState().getMetadata().custom(RepositoriesMetadata.TYPE);\n             RepositoriesMetadata newMetadata = state.getMetadata().custom(RepositoriesMetadata.TYPE);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5Njk4NA==", "url": "https://github.com/elastic/elasticsearch/pull/61016#discussion_r469196984", "bodyText": "Can we establish that this is the same string as used in VotingOnlyNodePlugin#VOTING_ONLY_NODE_ROLE by extracting the string as a field and adding an assertion in VotingOnlyNodePlugin saying that they match?", "author": "DaveCTurner", "createdAt": "2020-08-12T11:43:08Z", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java", "diffHunk": "@@ -279,6 +279,10 @@ protected void doRun() {\n         });\n     }\n \n+    static boolean isDedicatedVotingOnlyNode(DiscoveryNode node) {\n+        return node.isMasterNode() && node.isDataNode() == false &&\n+            node.getRoles().stream().anyMatch(role -> role.roleName().equals(\"voting_only\"));", "originalCommit": "8e3127b613cd9bbdabf08036e1c97c9647c6417e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMjM0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61016#discussion_r469202341", "bodyText": "This is ensured by the test that was added. It fails when these strings are not matching (as we are then illegally accessing the repo on the voting-only node)? Do you find this too implicit?", "author": "ywelsch", "createdAt": "2020-08-12T11:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5Njk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "143fc1cf83eda362ad00d7bb5b9700a514414db6", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\nindex bdae7c9c673..1bbd8b19aae 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java\n\n@@ -279,9 +283,9 @@ public class RepositoriesService extends AbstractLifecycleComponent implements C\n         });\n     }\n \n-    static boolean isDedicatedVotingOnlyNode(DiscoveryNode node) {\n-        return node.isMasterNode() && node.isDataNode() == false &&\n-            node.getRoles().stream().anyMatch(role -> role.roleName().equals(\"voting_only\"));\n+    static boolean isDedicatedVotingOnlyNode(Set<DiscoveryNodeRole> roles) {\n+        return roles.contains(DiscoveryNodeRole.MASTER_ROLE) && roles.contains(DiscoveryNodeRole.DATA_ROLE) == false &&\n+            roles.stream().anyMatch(role -> role.roleName().equals(\"voting_only\"));\n     }\n \n     /**\n"}}, {"oid": "143fc1cf83eda362ad00d7bb5b9700a514414db6", "url": "https://github.com/elastic/elasticsearch/commit/143fc1cf83eda362ad00d7bb5b9700a514414db6", "message": "make everyone happy", "committedDate": "2020-08-12T12:01:10Z", "type": "commit"}, {"oid": "e0fdd6135a61fcbe010bc5ef63c81a9948ecc110", "url": "https://github.com/elastic/elasticsearch/commit/e0fdd6135a61fcbe010bc5ef63c81a9948ecc110", "message": "my nemesis", "committedDate": "2020-08-12T12:06:23Z", "type": "commit"}]}