{"pr_number": 63692, "pr_title": "Fix range query on date fields for number inputs", "pr_createdAt": "2020-10-14T17:11:29Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63692", "timeline": [{"oid": "033cd0eb2e9dad8d842bbd8f347d5f864b2acfbd", "url": "https://github.com/elastic/elasticsearch/commit/033cd0eb2e9dad8d842bbd8f347d5f864b2acfbd", "message": "Fix range quers on date fields for number inputs\n\nCurrently, if you write a date range query with numeric 'to' or 'from' bounds,\nthey can be interpreted as years if no format is provided. We use\n\"strict_date_optional_time||epoch_millis\" in this case that can interpret inputs\nlike 1000 as the year 1000 for example. We should change this to always\ninterpret and parse numbers in this case with the second option \"epoch_millis\"\nif no other formatter was provided.\n\nCloses #63680", "committedDate": "2020-10-14T16:36:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0MzI2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63692#discussion_r504843267", "bodyText": "I think Number is better here. That, or Long and Integer. Its kind of plain luck that the range of numbers that cause the bug are small and so parsed as an Integer instead of a Long or whatever. But tests and stuff could still end up with a Long.", "author": "nik9000", "createdAt": "2020-10-14T17:16:38Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java", "diffHunk": "@@ -349,9 +350,17 @@ public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower\n                 throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() +\n                         \"] does not support DISJOINT ranges\");\n             }\n-            DateMathParser parser = forcedDateParser == null\n-                    ? dateMathParser\n-                    : forcedDateParser;\n+            DateMathParser parser;\n+            if (forcedDateParser == null) {\n+                if (lowerTerm instanceof Integer || upperTerm instanceof Integer) {", "originalCommit": "033cd0eb2e9dad8d842bbd8f347d5f864b2acfbd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f233e474971c167691486b764890e07f0f399f86", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\nindex 37d705e28dd..cc03f4cf6fe 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\n\n@@ -350,17 +350,7 @@ public final class DateFieldMapper extends ParametrizedFieldMapper {\n                 throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() +\n                         \"] does not support DISJOINT ranges\");\n             }\n-            DateMathParser parser;\n-            if (forcedDateParser == null) {\n-                if (lowerTerm instanceof Integer || upperTerm instanceof Integer) {\n-                    // force epoch_millis\n-                    parser = EPOCH_MILLIS_PARSER;\n-                } else {\n-                    parser = dateMathParser;\n-                }\n-            } else {\n-                parser = forcedDateParser;\n-            }\n+            DateMathParser parser = forcedDateParser == null ? dateMathParser : forcedDateParser;\n             return dateRangeQuery(lowerTerm, upperTerm, includeLower, includeUpper, timeZone, parser, context, resolution, (l, u) -> {\n                 Query query = LongPoint.newRangeQuery(name(), l, u);\n                 if (hasDocValues()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0MzYzMA==", "url": "https://github.com/elastic/elasticsearch/pull/63692#discussion_r504843630", "bodyText": "Should we just cast them to a number and call longValue on them? It feels like a shame to toString them and then parse them if we know they are numbers.", "author": "nik9000", "createdAt": "2020-10-14T17:17:17Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java", "diffHunk": "@@ -349,9 +350,17 @@ public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower\n                 throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() +\n                         \"] does not support DISJOINT ranges\");\n             }\n-            DateMathParser parser = forcedDateParser == null\n-                    ? dateMathParser\n-                    : forcedDateParser;\n+            DateMathParser parser;\n+            if (forcedDateParser == null) {\n+                if (lowerTerm instanceof Integer || upperTerm instanceof Integer) {\n+                    // force epoch_millis\n+                    parser = EPOCH_MILLIS_PARSER;", "originalCommit": "033cd0eb2e9dad8d842bbd8f347d5f864b2acfbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0OTc5OA==", "url": "https://github.com/elastic/elasticsearch/pull/63692#discussion_r505649798", "bodyText": "I explored that option but it's not as nice as thought at first. Needed to move code elsewhere to leverage the whole null-handling and also think we need to consider the millis/nanos resolution, but take a look at the latest commit and let me know what you think", "author": "cbuescher", "createdAt": "2020-10-15T15:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0MzYzMA=="}], "type": "inlineReview", "revised_code": {"commit": "f233e474971c167691486b764890e07f0f399f86", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\nindex 37d705e28dd..cc03f4cf6fe 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\n\n@@ -350,17 +350,7 @@ public final class DateFieldMapper extends ParametrizedFieldMapper {\n                 throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() +\n                         \"] does not support DISJOINT ranges\");\n             }\n-            DateMathParser parser;\n-            if (forcedDateParser == null) {\n-                if (lowerTerm instanceof Integer || upperTerm instanceof Integer) {\n-                    // force epoch_millis\n-                    parser = EPOCH_MILLIS_PARSER;\n-                } else {\n-                    parser = dateMathParser;\n-                }\n-            } else {\n-                parser = forcedDateParser;\n-            }\n+            DateMathParser parser = forcedDateParser == null ? dateMathParser : forcedDateParser;\n             return dateRangeQuery(lowerTerm, upperTerm, includeLower, includeUpper, timeZone, parser, context, resolution, (l, u) -> {\n                 Query query = LongPoint.newRangeQuery(name(), l, u);\n                 if (hasDocValues()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NDMxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/63692#discussion_r504844311", "bodyText": "Leftover I think.", "author": "nik9000", "createdAt": "2020-10-14T17:18:21Z", "path": "server/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java", "diffHunk": "@@ -109,4 +111,18 @@ public void testMustRewrite() throws IOException {\n                 () -> queryBuilder.toQuery(context));\n         assertEquals(\"Rewrite first\", e.getMessage());\n     }\n+\n+    public void testFoo() {", "originalCommit": "033cd0eb2e9dad8d842bbd8f347d5f864b2acfbd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f233e474971c167691486b764890e07f0f399f86", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java b/server/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java\nindex 01a67451d54..7185210caad 100644\n--- a/server/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java\n\n@@ -111,18 +109,4 @@ public class IdsQueryBuilderTests extends AbstractQueryTestCase<IdsQueryBuilder>\n                 () -> queryBuilder.toQuery(context));\n         assertEquals(\"Rewrite first\", e.getMessage());\n     }\n-\n-    public void testFoo() {\n-        DateMathParser dateMathParser = DateFormatter.forPattern(\"strict_date_optional_time||epoch_millis\").toDateMathParser();\n-        System.out.println(dateMathParser.parse(\"10\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"100\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"999\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"1000\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"1500\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"1968\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"1969\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"1970\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"1990\", null).toEpochMilli());\n-        System.out.println(dateMathParser.parse(\"10000\", null).toEpochMilli());\n-    }\n }\n"}}, {"oid": "f233e474971c167691486b764890e07f0f399f86", "url": "https://github.com/elastic/elasticsearch/commit/f233e474971c167691486b764890e07f0f399f86", "message": "Iter", "committedDate": "2020-10-14T19:38:22Z", "type": "commit"}, {"oid": "7384925db1a5744df88c57c662e8c02489cc22e2", "url": "https://github.com/elastic/elasticsearch/commit/7384925db1a5744df88c57c662e8c02489cc22e2", "message": "Merge branch 'master' into fix-63680", "committedDate": "2020-10-15T09:54:11Z", "type": "commit"}, {"oid": "18a5da5f90d97f7e1499e268138b72b0df023bc9", "url": "https://github.com/elastic/elasticsearch/commit/18a5da5f90d97f7e1499e268138b72b0df023bc9", "message": "iter", "committedDate": "2020-10-15T15:30:04Z", "type": "commit"}, {"oid": "aad02706f3b8ea3fe6e005dbb47cac94f29eb561", "url": "https://github.com/elastic/elasticsearch/commit/aad02706f3b8ea3fe6e005dbb47cac94f29eb561", "message": "spotless", "committedDate": "2020-10-15T15:36:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MDc1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63692#discussion_r505650756", "bodyText": "I think we need \"resolution.convert\" here to this gets kind of ugly. I personally prefer the earlier variant where we just have a \"toString\" detour but keep the rest of the code as-is.", "author": "cbuescher", "createdAt": "2020-10-15T15:47:54Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java", "diffHunk": "@@ -372,25 +381,37 @@ public static Query dateRangeQuery(\n             boolean includeLower,\n             boolean includeUpper,\n             @Nullable ZoneId timeZone,\n-            DateMathParser parser,\n+            DateMathParser forcedDateParser,\n+            DateMathParser fallbackParser,\n             QueryShardContext context,\n             Resolution resolution,\n             BiFunction<Long, Long, Query> builder\n         ) {\n             return handleNow(context, nowSupplier -> {\n                 long l, u;\n+                DateMathParser parser = forcedDateParser == null ? fallbackParser : forcedDateParser;\n                 if (lowerTerm == null) {\n                     l = Long.MIN_VALUE;\n                 } else {\n-                    l = parseToLong(lowerTerm, !includeLower, timeZone, parser, nowSupplier, resolution);\n+                    if (lowerTerm instanceof Number && forcedDateParser == null) {\n+                        // force epoch_millis\n+                        l = resolution.convert(Instant.ofEpochMilli(((Number) lowerTerm).longValue()));", "originalCommit": "aad02706f3b8ea3fe6e005dbb47cac94f29eb561", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NDUxMA==", "url": "https://github.com/elastic/elasticsearch/pull/63692#discussion_r505654510", "bodyText": "Yeah. I think you are right. If this were super performance sensitive code I'd argue more, but building queries typically isn't. I think going back is probably the right thing.", "author": "nik9000", "createdAt": "2020-10-15T15:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MDc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "84582e9ccc17c8d4b11a66a4502c4750120fcb17", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\nindex 517ea07a5df..af8d870ae31 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/DateFieldMapper.java\n\n@@ -381,24 +381,17 @@ public final class DateFieldMapper extends ParametrizedFieldMapper {\n             boolean includeLower,\n             boolean includeUpper,\n             @Nullable ZoneId timeZone,\n-            DateMathParser forcedDateParser,\n-            DateMathParser fallbackParser,\n+            DateMathParser parser,\n             QueryShardContext context,\n             Resolution resolution,\n             BiFunction<Long, Long, Query> builder\n         ) {\n             return handleNow(context, nowSupplier -> {\n                 long l, u;\n-                DateMathParser parser = forcedDateParser == null ? fallbackParser : forcedDateParser;\n                 if (lowerTerm == null) {\n                     l = Long.MIN_VALUE;\n                 } else {\n-                    if (lowerTerm instanceof Number && forcedDateParser == null) {\n-                        // force epoch_millis\n-                        l = resolution.convert(Instant.ofEpochMilli(((Number) lowerTerm).longValue()));\n-                    } else {\n-                        l = parseToLong(lowerTerm, !includeLower, timeZone, parser, nowSupplier, resolution);\n-                    }\n+                    l = parseToLong(lowerTerm, !includeLower, timeZone, parser, nowSupplier, resolution);\n                     if (includeLower == false) {\n                         ++l;\n                     }\n"}}, {"oid": "84582e9ccc17c8d4b11a66a4502c4750120fcb17", "url": "https://github.com/elastic/elasticsearch/commit/84582e9ccc17c8d4b11a66a4502c4750120fcb17", "message": "Go back", "committedDate": "2020-10-15T16:51:14Z", "type": "commit"}, {"oid": "d2f74c98e48e0a50c0fc0d322841c3cfa5e11a4b", "url": "https://github.com/elastic/elasticsearch/commit/d2f74c98e48e0a50c0fc0d322841c3cfa5e11a4b", "message": "fixing yaml test", "committedDate": "2020-10-15T16:56:39Z", "type": "commit"}, {"oid": "69460c07d4f7084f0cd2e6cc4291f4781a366d41", "url": "https://github.com/elastic/elasticsearch/commit/69460c07d4f7084f0cd2e6cc4291f4781a366d41", "message": "Merge branch 'master' into fix-63680", "committedDate": "2020-10-16T09:41:07Z", "type": "commit"}, {"oid": "41f0c9bc5d81743fc7518547e6f1baf7774282ed", "url": "https://github.com/elastic/elasticsearch/commit/41f0c9bc5d81743fc7518547e6f1baf7774282ed", "message": "Fix compile problem", "committedDate": "2020-10-16T10:07:37Z", "type": "commit"}, {"oid": "15c9c8242f6a5745f5776d20369e0a5ae76154f0", "url": "https://github.com/elastic/elasticsearch/commit/15c9c8242f6a5745f5776d20369e0a5ae76154f0", "message": "reapplying yaml fix", "committedDate": "2020-10-16T10:26:26Z", "type": "commit"}, {"oid": "94ceac8e89b9cd7abf45a225b4146150e59d8ed3", "url": "https://github.com/elastic/elasticsearch/commit/94ceac8e89b9cd7abf45a225b4146150e59d8ed3", "message": "spotless again", "committedDate": "2020-10-16T10:32:13Z", "type": "commit"}, {"oid": "4d891355c8ff184fdf53cb9cfee00d719ca04555", "url": "https://github.com/elastic/elasticsearch/commit/4d891355c8ff184fdf53cb9cfee00d719ca04555", "message": "Merge branch 'master' into fix-63680", "committedDate": "2020-10-19T11:55:52Z", "type": "commit"}, {"oid": "463b1b2337a56fac4f4f66030db5b5783916e52a", "url": "https://github.com/elastic/elasticsearch/commit/463b1b2337a56fac4f4f66030db5b5783916e52a", "message": "remove repeat", "committedDate": "2020-10-20T12:24:26Z", "type": "commit"}, {"oid": "e0044a7354eebbde9648e1d903282c3bd6af5009", "url": "https://github.com/elastic/elasticsearch/commit/e0044a7354eebbde9648e1d903282c3bd6af5009", "message": "Add docs and breaking changes entry", "committedDate": "2020-12-01T14:13:15Z", "type": "commit"}, {"oid": "95e6e954b76f467efde8dc5328ee615e2e2e8c39", "url": "https://github.com/elastic/elasticsearch/commit/95e6e954b76f467efde8dc5328ee615e2e2e8c39", "message": "Adding to breaking changes section in release notes", "committedDate": "2020-12-01T16:28:58Z", "type": "commit"}, {"oid": "196c835d64c7f279895aaebf6fd9050f4d78d083", "url": "https://github.com/elastic/elasticsearch/commit/196c835d64c7f279895aaebf6fd9050f4d78d083", "message": "Merge branch 'master' into fix-63680", "committedDate": "2020-12-01T16:36:42Z", "type": "commit"}, {"oid": "5439e6c7900c835a066aa58687e9c524908d73f6", "url": "https://github.com/elastic/elasticsearch/commit/5439e6c7900c835a066aa58687e9c524908d73f6", "message": "init dateMathParser in DateScriptFieldType", "committedDate": "2020-12-01T16:47:50Z", "type": "commit"}]}