{"pr_number": 59396, "pr_title": "Adds write_index_only option to put mapping API", "pr_createdAt": "2020-07-13T11:45:30Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59396", "timeline": [{"oid": "603472052dadbadbf8e55a98e93e479fa5581a2e", "url": "https://github.com/elastic/elasticsearch/commit/603472052dadbadbf8e55a98e93e479fa5581a2e", "message": "Adds write_index_only options to put mappings API", "committedDate": "2020-07-13T11:35:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NDI4OA==", "url": "https://github.com/elastic/elasticsearch/pull/59396#discussion_r453594288", "bodyText": "I think we need to add this parameter to rest spec as well?", "author": "martijnvg", "createdAt": "2020-07-13T11:50:51Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestPutMappingAction.java", "diffHunk": "@@ -67,6 +67,7 @@ public RestChannelConsumer prepareRequest(final RestRequest request, final NodeC\n         putMappingRequest.timeout(request.paramAsTime(\"timeout\", putMappingRequest.timeout()));\n         putMappingRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", putMappingRequest.masterNodeTimeout()));\n         putMappingRequest.indicesOptions(IndicesOptions.fromRequest(request, putMappingRequest.indicesOptions()));\n+        putMappingRequest.writeIndexOnly(request.paramAsBoolean(\"write_index_only\", false));", "originalCommit": "603472052dadbadbf8e55a98e93e479fa5581a2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5OTIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/59396#discussion_r453599225", "bodyText": "I think this test fails? since index2 is write index?", "author": "martijnvg", "createdAt": "2020-07-13T12:00:51Z", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequestTests.java", "diffHunk": "@@ -59,4 +75,122 @@ public void testBuildFromSimplifiedDef() {\n                 () -> PutMappingRequest.simpleMapping(\"only_field\"));\n         assertEquals(\"mapping source must be pairs of fieldnames and properties definition.\", e.getMessage());\n     }\n+\n+    public void testResolveIndicesWithWriteIndexOnlyAndDataStreamsAndWriteAliases() {\n+        String[] dataStreamNames = {\"foo\", \"bar\", \"baz\"};\n+        List<Tuple<String, Integer>> dsMetadata = List.of(\n+            tuple(dataStreamNames[0], randomIntBetween(1, 3)),\n+            tuple(dataStreamNames[1], randomIntBetween(1, 3)),\n+            tuple(dataStreamNames[2], randomIntBetween(1, 3)));\n+\n+        ClusterState cs = DeleteDataStreamRequestTests.getClusterStateWithDataStreams(dsMetadata, List.of(\"index1\", \"index2\", \"index3\"));\n+        cs = addAliases(cs, List.of(\n+            tuple(\"alias1\", List.of(tuple(\"index1\", false), tuple(\"index2\", true))),\n+            tuple(\"alias2\", List.of(tuple(\"index2\", false), tuple(\"index3\", true)))\n+        ));\n+        PutMappingRequest request = new PutMappingRequest().indices(\"foo\", \"alias1\", \"alias2\").writeIndexOnly(true);\n+        Index[] indices = TransportPutMappingAction.resolveIndices(cs, request, new IndexNameExpressionResolver());\n+        List<String> indexNames = Arrays.stream(indices).map(Index::getName).collect(Collectors.toList());\n+        IndexAbstraction expectedDs = cs.metadata().getIndicesLookup().get(\"foo\");\n+        // should resolve the data stream and each alias to their respective write indices\n+        assertThat(indexNames, containsInAnyOrder(expectedDs.getWriteIndex().getIndex().getName(), \"index2\", \"index3\"));\n+    }\n+\n+    public void testResolveIndicesWithoutWriteIndexOnlyAndDataStreamsAndWriteAliases() {\n+        String[] dataStreamNames = {\"foo\", \"bar\", \"baz\"};\n+        List<Tuple<String, Integer>> dsMetadata = List.of(\n+            tuple(dataStreamNames[0], randomIntBetween(1, 3)),\n+            tuple(dataStreamNames[1], randomIntBetween(1, 3)),\n+            tuple(dataStreamNames[2], randomIntBetween(1, 3)));\n+\n+        ClusterState cs = DeleteDataStreamRequestTests.getClusterStateWithDataStreams(dsMetadata, List.of(\"index1\", \"index2\", \"index3\"));\n+        cs = addAliases(cs, List.of(\n+            tuple(\"alias1\", List.of(tuple(\"index1\", false), tuple(\"index2\", true))),\n+            tuple(\"alias2\", List.of(tuple(\"index2\", false), tuple(\"index3\", true)))\n+        ));\n+        PutMappingRequest request = new PutMappingRequest().indices(\"foo\", \"alias1\", \"alias2\");\n+        Index[] indices = TransportPutMappingAction.resolveIndices(cs, request, new IndexNameExpressionResolver());\n+        List<String> indexNames = Arrays.stream(indices).map(Index::getName).collect(Collectors.toList());\n+        IndexAbstraction expectedDs = cs.metadata().getIndicesLookup().get(\"foo\");\n+        List<String> expectedIndices = expectedDs.getIndices().stream().map(im -> im.getIndex().getName()).collect(Collectors.toList());\n+        expectedIndices.addAll(List.of(\"index1\", \"index2\", \"index3\"));\n+        // should resolve the data stream and each alias to _all_ their respective indices\n+        assertThat(indexNames, containsInAnyOrder(expectedIndices.toArray()));\n+    }\n+\n+    public void testResolveIndicesWithWriteIndexOnlyAndDataStreamAndIndex() {\n+        String[] dataStreamNames = {\"foo\", \"bar\", \"baz\"};\n+        List<Tuple<String, Integer>> dsMetadata = List.of(\n+            tuple(dataStreamNames[0], randomIntBetween(1, 3)),\n+            tuple(dataStreamNames[1], randomIntBetween(1, 3)),\n+            tuple(dataStreamNames[2], randomIntBetween(1, 3)));\n+\n+        ClusterState cs = DeleteDataStreamRequestTests.getClusterStateWithDataStreams(dsMetadata, List.of(\"index1\", \"index2\", \"index3\"));\n+        cs = addAliases(cs, List.of(\n+            tuple(\"alias1\", List.of(tuple(\"index1\", false), tuple(\"index2\", true))),\n+            tuple(\"alias2\", List.of(tuple(\"index2\", false), tuple(\"index3\", true)))\n+        ));\n+        PutMappingRequest request = new PutMappingRequest().indices(\"foo\", \"index3\").writeIndexOnly(true);\n+        Index[] indices = TransportPutMappingAction.resolveIndices(cs, request, new IndexNameExpressionResolver());\n+        List<String> indexNames = Arrays.stream(indices).map(Index::getName).collect(Collectors.toList());\n+        IndexAbstraction expectedDs = cs.metadata().getIndicesLookup().get(\"foo\");\n+        List<String> expectedIndices = expectedDs.getIndices().stream().map(im -> im.getIndex().getName()).collect(Collectors.toList());\n+        expectedIndices.addAll(List.of(\"index1\", \"index2\", \"index3\"));\n+        // should resolve the data stream and each alias to _all_ their respective indices\n+        assertThat(indexNames, containsInAnyOrder(expectedDs.getWriteIndex().getIndex().getName(), \"index3\"));\n+    }\n+\n+    public void testResolveIndicesWithWriteIndexOnlyAndNoSingleWriteIndex() {\n+        String[] dataStreamNames = {\"foo\", \"bar\", \"baz\"};\n+        List<Tuple<String, Integer>> dsMetadata = List.of(\n+            tuple(dataStreamNames[0], randomIntBetween(1, 3)),\n+            tuple(dataStreamNames[1], randomIntBetween(1, 3)),\n+            tuple(dataStreamNames[2], randomIntBetween(1, 3)));\n+\n+        ClusterState cs = DeleteDataStreamRequestTests.getClusterStateWithDataStreams(dsMetadata, List.of(\"index1\", \"index2\", \"index3\"));\n+        final ClusterState cs2 = addAliases(cs, List.of(\n+            tuple(\"alias1\", List.of(tuple(\"index1\", false), tuple(\"index2\", true))),", "originalCommit": "603472052dadbadbf8e55a98e93e479fa5581a2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5db15efe0126bebf1e7844f7340872069f762874", "url": "https://github.com/elastic/elasticsearch/commit/5db15efe0126bebf1e7844f7340872069f762874", "message": "add parameter to rest spec", "committedDate": "2020-07-13T12:13:16Z", "type": "commit"}]}