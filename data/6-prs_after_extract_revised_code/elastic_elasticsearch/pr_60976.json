{"pr_number": 60976, "pr_title": "Split ir nodes for variable/field access into load/store", "pr_createdAt": "2020-08-11T16:05:58Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60976", "timeline": [{"oid": "fe4f7bfb438f38e88f596b19ce38ae4cd49ec5c6", "url": "https://github.com/elastic/elasticsearch/commit/fe4f7bfb438f38e88f596b19ce38ae4cd49ec5c6", "message": "Move bootstrap injection into the the ir tree builder phase", "committedDate": "2020-07-27T18:11:02Z", "type": "commit"}, {"oid": "02b70959c0a4be12ee85565aaf25ee1cae4ebea5", "url": "https://github.com/elastic/elasticsearch/commit/02b70959c0a4be12ee85565aaf25ee1cae4ebea5", "message": "move ScriptClassInfo out of walker and remove unncessary injection\nphases", "committedDate": "2020-07-27T18:42:59Z", "type": "commit"}, {"oid": "be17b14018e28414e10b9e7e02e3f7c299fc2589", "url": "https://github.com/elastic/elasticsearch/commit/be17b14018e28414e10b9e7e02e3f7c299fc2589", "message": "add AccessNode in place of ECall, EBrace, and EDot", "committedDate": "2020-07-27T20:46:00Z", "type": "commit"}, {"oid": "1725972243f755a6e7b51583ca490140517b70be", "url": "https://github.com/elastic/elasticsearch/commit/1725972243f755a6e7b51583ca490140517b70be", "message": "rename some nodes", "committedDate": "2020-07-27T21:24:32Z", "type": "commit"}, {"oid": "d979077dc6248a0ec0dbdf7101fdcf4e11307e9f", "url": "https://github.com/elastic/elasticsearch/commit/d979077dc6248a0ec0dbdf7101fdcf4e11307e9f", "message": "add flip nodes", "committedDate": "2020-07-27T21:38:42Z", "type": "commit"}, {"oid": "5e3633cc8e54fae4ef3ad82f13d8689213baa579", "url": "https://github.com/elastic/elasticsearch/commit/5e3633cc8e54fae4ef3ad82f13d8689213baa579", "message": "add dup node", "committedDate": "2020-07-28T17:32:29Z", "type": "commit"}, {"oid": "0a53ce8fb049e000a8535d19f6133d444eddeff8", "url": "https://github.com/elastic/elasticsearch/commit/0a53ce8fb049e000a8535d19f6133d444eddeff8", "message": "add store node", "committedDate": "2020-07-28T17:55:53Z", "type": "commit"}, {"oid": "dc42b1c72c0750a96cd826004c782051deb7164b", "url": "https://github.com/elastic/elasticsearch/commit/dc42b1c72c0750a96cd826004c782051deb7164b", "message": "rename to load nodes", "committedDate": "2020-07-28T18:23:33Z", "type": "commit"}, {"oid": "294963891ce711b9b3e97a6df2cc7f6222991d1f", "url": "https://github.com/elastic/elasticsearch/commit/294963891ce711b9b3e97a6df2cc7f6222991d1f", "message": "add store nodes", "committedDate": "2020-07-28T18:26:05Z", "type": "commit"}, {"oid": "8fce1199c70357bf3ed29a4caf0232dda47a604e", "url": "https://github.com/elastic/elasticsearch/commit/8fce1199c70357bf3ed29a4caf0232dda47a604e", "message": "add store nodes", "committedDate": "2020-07-28T18:46:43Z", "type": "commit"}, {"oid": "33976f6b95ec1d851c2e4b7c4da663bc48eb88b9", "url": "https://github.com/elastic/elasticsearch/commit/33976f6b95ec1d851c2e4b7c4da663bc48eb88b9", "message": "add slightly different node setup and decorations for compound\nassignment", "committedDate": "2020-07-28T18:55:41Z", "type": "commit"}, {"oid": "45ef7f3e1c82262c3dd8b550f8b499ea6c2504f5", "url": "https://github.com/elastic/elasticsearch/commit/45ef7f3e1c82262c3dd8b550f8b499ea6c2504f5", "message": "update load nodes", "committedDate": "2020-07-28T19:27:25Z", "type": "commit"}, {"oid": "65f3a8f764e14ac684c3fdc8d2bd922d035b5a4b", "url": "https://github.com/elastic/elasticsearch/commit/65f3a8f764e14ac684c3fdc8d2bd922d035b5a4b", "message": "split ir nodes into load and store", "committedDate": "2020-07-28T19:52:57Z", "type": "commit"}, {"oid": "922e1e670e907e42a550e9eeb52119bfce6e4bcf", "url": "https://github.com/elastic/elasticsearch/commit/922e1e670e907e42a550e9eeb52119bfce6e4bcf", "message": "some fixes", "committedDate": "2020-07-28T20:01:11Z", "type": "commit"}, {"oid": "16d8996cbe3d54d1ab20e11a00623e3dd9a22827", "url": "https://github.com/elastic/elasticsearch/commit/16d8996cbe3d54d1ab20e11a00623e3dd9a22827", "message": "fix dup issue", "committedDate": "2020-07-28T20:08:54Z", "type": "commit"}, {"oid": "810e186871e7f075f4e1423c65dba826d9ef42ea", "url": "https://github.com/elastic/elasticsearch/commit/810e186871e7f075f4e1423c65dba826d9ef42ea", "message": "remove dead node", "committedDate": "2020-07-28T20:10:48Z", "type": "commit"}, {"oid": "a4d61ba2e61783c5e884a3af0c161dcff2e42cf4", "url": "https://github.com/elastic/elasticsearch/commit/a4d61ba2e61783c5e884a3af0c161dcff2e42cf4", "message": "Merge branch 'master' into semantic010", "committedDate": "2020-07-29T17:45:57Z", "type": "commit"}, {"oid": "fd130aeb8b8eda556cc45047887ab537d590f61d", "url": "https://github.com/elastic/elasticsearch/commit/fd130aeb8b8eda556cc45047887ab537d590f61d", "message": "Merge branch 'semantic010' into semantic011", "committedDate": "2020-07-29T17:46:17Z", "type": "commit"}, {"oid": "d2f27b89f8a20646232083535d05d3bd81817d3b", "url": "https://github.com/elastic/elasticsearch/commit/d2f27b89f8a20646232083535d05d3bd81817d3b", "message": "Merge branch 'semantic011' into semantic013", "committedDate": "2020-07-29T17:46:37Z", "type": "commit"}, {"oid": "f298cbb66a25cecfd0f9fc0fd837c20aeab0dc8c", "url": "https://github.com/elastic/elasticsearch/commit/f298cbb66a25cecfd0f9fc0fd837c20aeab0dc8c", "message": "Merge branch 'semantic013' into semantic015", "committedDate": "2020-07-29T17:46:59Z", "type": "commit"}, {"oid": "3fbd0bcdf699ca71db447a21ea00ce18e8aacbd5", "url": "https://github.com/elastic/elasticsearch/commit/3fbd0bcdf699ca71db447a21ea00ce18e8aacbd5", "message": "Merge branch 'master' into semantic010", "committedDate": "2020-08-05T16:59:29Z", "type": "commit"}, {"oid": "b3fd76361e7e1d00df0f0d4070949130845f6271", "url": "https://github.com/elastic/elasticsearch/commit/b3fd76361e7e1d00df0f0d4070949130845f6271", "message": "response to pr comments", "committedDate": "2020-08-05T17:24:53Z", "type": "commit"}, {"oid": "2e1e958536707210b141a4a495da5ee315e88b06", "url": "https://github.com/elastic/elasticsearch/commit/2e1e958536707210b141a4a495da5ee315e88b06", "message": "Merge branch 'master' into semantic010", "committedDate": "2020-08-05T19:35:03Z", "type": "commit"}, {"oid": "397c7b1f728cf0f7a7fda6552090ab4d2ccf23b8", "url": "https://github.com/elastic/elasticsearch/commit/397c7b1f728cf0f7a7fda6552090ab4d2ccf23b8", "message": "Merge branch 'semantic010' into semantic011", "committedDate": "2020-08-05T19:36:47Z", "type": "commit"}, {"oid": "a8bc699f649519c4d1d7b8b28d31e7add3406966", "url": "https://github.com/elastic/elasticsearch/commit/a8bc699f649519c4d1d7b8b28d31e7add3406966", "message": "fix spacing", "committedDate": "2020-08-05T20:42:28Z", "type": "commit"}, {"oid": "aab90f387c3bb5600f90f45d9e27ca0b1b041cb9", "url": "https://github.com/elastic/elasticsearch/commit/aab90f387c3bb5600f90f45d9e27ca0b1b041cb9", "message": "Merge branch 'master' into semantic011", "committedDate": "2020-08-06T16:05:28Z", "type": "commit"}, {"oid": "9ee21c7cba9d202259bac2e25edda5994341fe66", "url": "https://github.com/elastic/elasticsearch/commit/9ee21c7cba9d202259bac2e25edda5994341fe66", "message": "Merge branch 'semantic011' into semantic013", "committedDate": "2020-08-06T16:10:02Z", "type": "commit"}, {"oid": "f9e3de4df0b053f324a0a8600399718f67f11d11", "url": "https://github.com/elastic/elasticsearch/commit/f9e3de4df0b053f324a0a8600399718f67f11d11", "message": "Merge branch 'master' into semantic013", "committedDate": "2020-08-10T18:58:06Z", "type": "commit"}, {"oid": "416801084c6dd5c2fc8179a4ee5f67b5a0e2dddb", "url": "https://github.com/elastic/elasticsearch/commit/416801084c6dd5c2fc8179a4ee5f67b5a0e2dddb", "message": "remove extraneous semicolon", "committedDate": "2020-08-10T18:59:56Z", "type": "commit"}, {"oid": "bc0fc208120adee10f5cd2f6ee7e842232d24016", "url": "https://github.com/elastic/elasticsearch/commit/bc0fc208120adee10f5cd2f6ee7e842232d24016", "message": "Merge branch 'master' into semantic013", "committedDate": "2020-08-10T20:58:55Z", "type": "commit"}, {"oid": "923d361801a8b723f9e7473c37ed3335f0cc225d", "url": "https://github.com/elastic/elasticsearch/commit/923d361801a8b723f9e7473c37ed3335f0cc225d", "message": "Merge branch 'semantic013' into semantic015", "committedDate": "2020-08-10T21:17:08Z", "type": "commit"}, {"oid": "0c9dec6c10d79356905cd36df064ed2077a23eef", "url": "https://github.com/elastic/elasticsearch/commit/0c9dec6c10d79356905cd36df064ed2077a23eef", "message": "Merge branch 'master' into semantic015", "committedDate": "2020-08-11T16:23:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDczNA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469450734", "bodyText": "// This is a load.", "author": "stu-elastic", "createdAt": "2020-08-12T18:16:01Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTIzMw==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581233", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDczNA=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDgyMA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469450820", "bodyText": "// This is a store", "author": "stu-elastic", "createdAt": "2020-08-12T18:16:10Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581250", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTA0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451041", "bodyText": "// Array access", "author": "stu-elastic", "createdAt": "2020-08-12T18:16:34Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTMwMg==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581302", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTY4MA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451680", "bodyText": "// Variable node", "author": "stu-elastic", "createdAt": "2020-08-12T18:17:41Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTI3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581272", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTc2MA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469451760", "bodyText": "// Field and brace node", "author": "stu-elastic", "createdAt": "2020-08-12T18:17:50Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTMyMg==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581322", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjE0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452143", "bodyText": "// Standard field", "author": "stu-elastic", "createdAt": "2020-08-12T18:18:32Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTM0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581343", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjQ3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452479", "bodyText": "// Storing brace operation", "author": "stu-elastic", "createdAt": "2020-08-12T18:19:08Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTM2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581363", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjc3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452772", "bodyText": "// Basic store", "author": "stu-elastic", "createdAt": "2020-08-12T18:19:35Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTM4OA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581388", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjk2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469452961", "bodyText": "// Not a compound assignment", "author": "stu-elastic", "createdAt": "2020-08-12T18:19:57Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {\n+                    ((StoreAccessNode)irStoreNode).setAccessNode(irAccessNode);", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTQyOA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581428", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MzY1NA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469453654", "bodyText": "// Compound assignment", "author": "stu-elastic", "createdAt": "2020-08-12T18:21:06Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -386,6 +401,89 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n         return irCastNode;\n     }\n \n+    protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n+            ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n+\n+        ExpressionNode irExpressionNode;\n+\n+        if (irStoreNode == null) {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irLoadNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n+                irBinaryNode.setLeftNode(irIndexNode);\n+                irBinaryNode.setRightNode(irLoadNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (isNullSafe) {\n+                NullSafeSubNode nullSafeSubNode = new NullSafeSubNode();\n+                nullSafeSubNode.setChildNode(irAccessNode);\n+                nullSafeSubNode.setLocation(location);\n+                nullSafeSubNode.setExpressionType(irAccessNode.getExpressionType());\n+                irAccessNode = nullSafeSubNode;\n+            }\n+\n+            if (irPrefixNode == null) {\n+                irExpressionNode = irAccessNode;\n+            } else {\n+                BinaryNode irParentNode = new BinaryNode();\n+                irParentNode.setLocation(location);\n+                irParentNode.setExpressionType(irLoadNode.getExpressionType());\n+                irParentNode.setLeftNode(irPrefixNode);\n+                irParentNode.setRightNode(irAccessNode);\n+\n+                irExpressionNode = irParentNode;\n+            }\n+        } else {\n+            ExpressionNode irAccessNode;\n+\n+            if (irIndexNode == null) {\n+                irAccessNode = irPrefixNode;\n+            } else {\n+                BinaryNode irBinaryNode = new BinaryNode();\n+                irBinaryNode.setLocation(location);\n+                irBinaryNode.setExpressionType(void.class);\n+                irBinaryNode.setLeftNode(irPrefixNode);\n+                irBinaryNode.setRightNode(irIndexNode);\n+\n+                irAccessNode = irBinaryNode;\n+            }\n+\n+            if (irLoadNode == null) {\n+                if (irAccessNode != null) {\n+                    ((StoreAccessNode)irStoreNode).setAccessNode(irAccessNode);\n+                }\n+            } else {\n+                if (irAccessNode != null) {\n+                    DupNode dupNode = new DupNode();", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTQ0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581447", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MzY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -401,16 +401,32 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         return irCastNode;\n     }\n \n+    /**\n+     * This helper generates a set of ir nodes that are required for an assignment\n+     * handling both regular assignment and compound assignment. It only stubs out\n+     * the compound assignment.\n+     * @param accessDepth The number of arguments to dup for an additional read.\n+     * @param location The location for errors.\n+     * @param isNullSafe Whether or not the null safe operator is used.\n+     * @param irPrefixNode The prefix node for this store/load. The 'a.b' of 'a.b.c', etc.\n+     * @param irIndexNode The index node if this is a brace access.\n+     * @param irLoadNode The load node if this a read.\n+     * @param irStoreNode The store node if this is a write.\n+     * @return The root node for this assignment.\n+     */\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n         ExpressionNode irExpressionNode;\n \n+        // this load/store is only a load (read)\n         if (irStoreNode == null) {\n             ExpressionNode irAccessNode;\n \n+            // this load is a symbol or dot load with no index node\n             if (irIndexNode == null) {\n                 irAccessNode = irLoadNode;\n+            // this load is a dot or brace load with an index node\n             } else {\n                 BinaryNode irBinaryNode = new BinaryNode();\n                 irBinaryNode.setLocation(location);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDg3NA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469454874", "bodyText": "Add comments to help follow to the leaves.", "author": "stu-elastic", "createdAt": "2020-08-12T18:23:20Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n+\n+        if (compoundType != null) {", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTQ3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581477", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDg3NA=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -813,8 +840,10 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n \n         StoreNode irStoreNode;\n+        // add a cast node if necessary for the value node for the assignment\n         ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n \n+        // handles a compound assignment using the stub generated from buildLoadStore\n         if (compoundType != null) {\n             scriptScope.setCondition(userAssignmentNode.getLeftNode(), Compound.class);\n             irStoreNode = (StoreNode)visit(userAssignmentNode.getLeftNode(), scriptScope);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTQ5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469459495", "bodyText": "// For upcast, downcast (int i = 5; i += 2.0;)", "author": "stu-elastic", "createdAt": "2020-08-12T18:31:28Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTUwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581501", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -813,8 +840,10 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n \n         StoreNode irStoreNode;\n+        // add a cast node if necessary for the value node for the assignment\n         ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n \n+        // handles a compound assignment using the stub generated from buildLoadStore\n         if (compoundType != null) {\n             scriptScope.setCondition(userAssignmentNode.getLeftNode(), Compound.class);\n             irStoreNode = (StoreNode)visit(userAssignmentNode.getLeftNode(), scriptScope);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjIzNA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469462234", "bodyText": "Bigger comment that says what we have to do to support it.", "author": "stu-elastic", "createdAt": "2020-08-12T18:36:17Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -710,27 +808,93 @@ public void visitBreak(SBreak userBreakNode, ScriptScope scriptScope) {\n \n     @Override\n     public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptScope) {\n+        boolean read = scriptScope.getCondition(userAssignmentNode, Read.class);\n         Class<?> compoundType = scriptScope.hasDecoration(userAssignmentNode, CompoundType.class) ?\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n-        PainlessCast upcast = scriptScope.hasDecoration(userAssignmentNode, UpcastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, UpcastPainlessCast.class).getUpcastPainlessCast() : null;\n-        PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n-                scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n-\n-        AssignmentNode irAssignmentNode = new AssignmentNode();\n-        irAssignmentNode.setLeftNode((ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope));\n-        irAssignmentNode.setRightNode(injectCast(userAssignmentNode.getRightNode(), scriptScope));\n-        irAssignmentNode.setLocation(userAssignmentNode.getLocation());\n-        irAssignmentNode.setExpressionType(scriptScope.getDecoration(userAssignmentNode, ValueType.class).getValueType());\n-        irAssignmentNode.setCompoundType(compoundType);\n-        irAssignmentNode.setPost(userAssignmentNode.postIfRead());\n-        irAssignmentNode.setOperation(userAssignmentNode.getOperation());\n-        irAssignmentNode.setRead(scriptScope.getCondition(userAssignmentNode, Read.class));\n-        irAssignmentNode.setCat(scriptScope.getCondition(userAssignmentNode, Concatenate.class));\n-        irAssignmentNode.setThere(upcast);\n-        irAssignmentNode.setBack(downcast);\n-\n-        scriptScope.putDecoration(userAssignmentNode, new IRNodeDecoration(irAssignmentNode));\n+\n+        StoreNode irStoreNode;\n+        ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n+\n+        if (compoundType != null) {\n+            scriptScope.setCondition(userAssignmentNode.getLeftNode(), Compound.class);\n+            irStoreNode = (StoreNode)visit(userAssignmentNode.getLeftNode(), scriptScope);\n+            BinaryMathNode irBinaryMathNode = (BinaryMathNode)irStoreNode.getChildNode();\n+\n+            PainlessCast downcast = scriptScope.hasDecoration(userAssignmentNode, DowncastPainlessCast.class) ?\n+                    scriptScope.getDecoration(userAssignmentNode, DowncastPainlessCast.class).getDowncastPainlessCast() : null;\n+\n+            if (downcast == null) {\n+                irBinaryMathNode.setExpressionType(irStoreNode.getStoreType());\n+            } else {\n+                CastNode irCastNode = new CastNode();\n+                irCastNode.setLocation(irBinaryMathNode.getLocation());\n+                irCastNode.setExpressionType(downcast.targetType);\n+                irCastNode.setCast(downcast);\n+                irCastNode.setChildNode(irBinaryMathNode);\n+                irStoreNode.setChildNode(irCastNode);\n+            }\n+\n+            if (read) {", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTUzMg==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581532", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MjIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -813,8 +840,10 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n                 scriptScope.getDecoration(userAssignmentNode, CompoundType.class).getCompoundType() : null;\n \n         StoreNode irStoreNode;\n+        // add a cast node if necessary for the value node for the assignment\n         ExpressionNode irValueNode = injectCast(userAssignmentNode.getRightNode(), scriptScope);\n \n+        // handles a compound assignment using the stub generated from buildLoadStore\n         if (compoundType != null) {\n             scriptScope.setCondition(userAssignmentNode.getLeftNode(), Compound.class);\n             irStoreNode = (StoreNode)visit(userAssignmentNode.getLeftNode(), scriptScope);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzcyNw==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469463727", "bodyText": "Dot, symbol, brace must handle loads and/or stores.", "author": "stu-elastic", "createdAt": "2020-08-12T18:39:00Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1235,16 +1403,40 @@ public void visitSymbol(ESymbol userSymbolNode, ScriptScope scriptScope) {\n \n         if (scriptScope.hasDecoration(userSymbolNode, StaticType.class)) {\n             Class<?> staticType = scriptScope.getDecoration(userSymbolNode, StaticType.class).getStaticType();\n-            StaticNode irStaticNode = new StaticNode();\n-            irStaticNode.setLocation(userSymbolNode.getLocation());\n-            irStaticNode.setExpressionType(staticType);\n-            irExpressionNode = irStaticNode;\n+            StaticNode staticNode = new StaticNode();\n+            staticNode.setLocation(userSymbolNode.getLocation());\n+            staticNode.setExpressionType(staticType);\n+            irExpressionNode = staticNode;\n         } else if (scriptScope.hasDecoration(userSymbolNode, ValueType.class)) {\n-            VariableNode irVariableNode = new VariableNode();\n-            irVariableNode.setLocation(userSymbolNode.getLocation());\n-            irVariableNode.setExpressionType(scriptScope.getDecoration(userSymbolNode, ValueType.class).getValueType());\n-            irVariableNode.setName(userSymbolNode.getSymbol());\n-            irExpressionNode = irVariableNode;\n+            boolean read = scriptScope.getCondition(userSymbolNode, Read.class);", "originalCommit": "0c9dec6c10d79356905cd36df064ed2077a23eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTU1OA==", "url": "https://github.com/elastic/elasticsearch/pull/60976#discussion_r469581558", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-08-12T22:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 3d4951d6f75..7472acfc768 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1397,6 +1435,10 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         scriptScope.putDecoration(userNewArrayFunctionRefNode, new IRNodeDecoration(irReferenceNode));\n     }\n \n+    /**\n+     * This handles both load and store for symbol accesses as necessary. This uses buildLoadStore to\n+     * stub out the appropriate load and store ir nodes.\n+     */\n     @Override\n     public void visitSymbol(ESymbol userSymbolNode, ScriptScope scriptScope) {\n         ExpressionNode irExpressionNode;\n"}}, {"oid": "efa61967cb53a7f6cdd1449673e9b127dd67dd5b", "url": "https://github.com/elastic/elasticsearch/commit/efa61967cb53a7f6cdd1449673e9b127dd67dd5b", "message": "Merge branch 'master' into semantic015", "committedDate": "2020-08-12T21:49:31Z", "type": "commit"}, {"oid": "62ec784135b21e49357c0cf0f2d494af1d6082e2", "url": "https://github.com/elastic/elasticsearch/commit/62ec784135b21e49357c0cf0f2d494af1d6082e2", "message": "comment load/store", "committedDate": "2020-08-12T22:27:55Z", "type": "commit"}]}