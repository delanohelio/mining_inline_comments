{"pr_number": 56026, "pr_title": "Fix spurious failures in AsyncSearchIntegTestCase", "pr_createdAt": "2020-04-30T13:20:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56026", "timeline": [{"oid": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8", "url": "https://github.com/elastic/elasticsearch/commit/a1e360cc175e67c30acc1ccfac0c37675b1fc1a8", "message": "Fix spurious failures in AsyncSearchIntegTestCase\n\nAsync search integration tests are subject to random failures when:\n  * The test index has more than one replica.\n  * The request cache is used.\n  * Some shards are empty.\n  * The maintenance service starts a garbage collection when node is closing.\n\nThey are also slow because the test index is created/populated on each\ntest method.\n\nThis change refactors these integration tests in order to:\n  * Create the index once for the entire test suite.\n  * Fix the usage of the request cache and replicas.\n  * Ensures that all shards have at least one document.\n  * Increase the delay of the maintenance service garbage collection.\n\nCloses #55895\nCloses #55988", "committedDate": "2020-04-30T13:16:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2NjQ5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420666492", "bodyText": "this could be final", "author": "javanna", "createdAt": "2020-05-06T09:43:54Z", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {\n+        private volatile CountDownLatch countDownLatch;\n+        private Set<Integer> failedShards = new HashSet<>();", "originalCommit": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0304ec6b3b521e2ebe47c40a9c064797203bc021", "chunk": "diff --git a/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java b/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\nindex 8ae5cb508bb..d81edbefca9 100644\n--- a/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\n+++ b/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\n\n@@ -120,9 +121,16 @@ class BlockingQueryBuilder extends AbstractQueryBuilder<BlockingQueryBuilder> {\n         return NAME;\n     }\n \n+    /**\n+     *  A synchronization aid that is used by {@link BlockingQueryBuilder} to block shards executions until\n+     *  the consumer calls {@link QueryLatch#countDownAndReset()}.\n+     *  The static {@link QueryLatch} is shared in {@link AsyncSearchIntegTestCase#assertBlockingIterator} to provide\n+     *  a {@link SearchResponseIterator} that unblocks shards executions whenever {@link SearchResponseIterator#next()}\n+     *  is called.\n+     */\n     static class QueryLatch implements Closeable {\n         private volatile CountDownLatch countDownLatch;\n-        private Set<Integer> failedShards = new HashSet<>();\n+        private final Set<Integer> failedShards = new HashSet<>();\n         private int numShardFailures;\n \n         QueryLatch(int numShardFailures) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420670315", "bodyText": "I would try to document what this class does and how to use it. I will try with my words but correct me if I am wrong: BlockingQueryBuilder blocks on each shard, until the next set of results is requested through reacquireBlock. Also failures are sent back based on the provided number of failures.\nI would also consider renaming tryBlock and reacquireBlock to reflect what they are used for.", "author": "javanna", "createdAt": "2020-05-06T09:51:02Z", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {", "originalCommit": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5ODc2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420698761", "bodyText": "I pushed 0304ec6", "author": "jimczi", "createdAt": "2020-05-06T10:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0304ec6b3b521e2ebe47c40a9c064797203bc021", "chunk": "diff --git a/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java b/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\nindex 8ae5cb508bb..d81edbefca9 100644\n--- a/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\n+++ b/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\n\n@@ -120,9 +121,16 @@ class BlockingQueryBuilder extends AbstractQueryBuilder<BlockingQueryBuilder> {\n         return NAME;\n     }\n \n+    /**\n+     *  A synchronization aid that is used by {@link BlockingQueryBuilder} to block shards executions until\n+     *  the consumer calls {@link QueryLatch#countDownAndReset()}.\n+     *  The static {@link QueryLatch} is shared in {@link AsyncSearchIntegTestCase#assertBlockingIterator} to provide\n+     *  a {@link SearchResponseIterator} that unblocks shards executions whenever {@link SearchResponseIterator#next()}\n+     *  is called.\n+     */\n     static class QueryLatch implements Closeable {\n         private volatile CountDownLatch countDownLatch;\n-        private Set<Integer> failedShards = new HashSet<>();\n+        private final Set<Integer> failedShards = new HashSet<>();\n         private int numShardFailures;\n \n         QueryLatch(int numShardFailures) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDc5NA==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420670794", "bodyText": "can you add a small comment to explain that we have the scenario where the same shard id appears multiple times due to replicas and we want to count that as one failure?", "author": "javanna", "createdAt": "2020-05-06T09:51:51Z", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java", "diffHunk": "@@ -115,4 +119,51 @@ protected int doHashCode() {\n     public String getWriteableName() {\n         return NAME;\n     }\n+\n+    static class QueryLatch implements Closeable {\n+        private volatile CountDownLatch countDownLatch;\n+        private Set<Integer> failedShards = new HashSet<>();\n+        private int numShardFailures;\n+\n+        QueryLatch(int numShardFailures) {\n+            this.countDownLatch = new CountDownLatch(1);\n+            this.numShardFailures = numShardFailures;\n+        }\n+\n+        private void tryBlock(int shardId) throws IOException, InterruptedException {\n+            CountDownLatch last = countDownLatch;\n+            if (last != null) {\n+                last.await();\n+            }\n+            synchronized (this) {\n+                if (failedShards.contains(shardId)) {\n+                    throw new IOException(\"boom\");\n+                } else if (numShardFailures > 0) {", "originalCommit": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MTc3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420671771", "bodyText": "also could this block be replaced with the following?\nif (failedShards.add(shardId)) {\n    numShardFailures--;\n}\nthrow new IOException(\"boom\");\n\nand the set could be some concurrent impl so that we can remove the synchronized block?", "author": "javanna", "createdAt": "2020-05-06T09:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5ODYwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420698605", "bodyText": "I added a comment in 0304ec6. We could avoid the synchronized block but it feels easier to read and it's not a critical path ?", "author": "jimczi", "createdAt": "2020-05-06T10:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4NTQxMA==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r421285410", "bodyText": "I don't mind the synchronized. On readability, it's debatable I guess, I personally find the if based on the add result more readable. Up to you.", "author": "javanna", "createdAt": "2020-05-07T07:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MDc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0304ec6b3b521e2ebe47c40a9c064797203bc021", "chunk": "diff --git a/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java b/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\nindex 8ae5cb508bb..d81edbefca9 100644\n--- a/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\n+++ b/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/BlockingQueryBuilder.java\n\n@@ -120,9 +121,16 @@ class BlockingQueryBuilder extends AbstractQueryBuilder<BlockingQueryBuilder> {\n         return NAME;\n     }\n \n+    /**\n+     *  A synchronization aid that is used by {@link BlockingQueryBuilder} to block shards executions until\n+     *  the consumer calls {@link QueryLatch#countDownAndReset()}.\n+     *  The static {@link QueryLatch} is shared in {@link AsyncSearchIntegTestCase#assertBlockingIterator} to provide\n+     *  a {@link SearchResponseIterator} that unblocks shards executions whenever {@link SearchResponseIterator#next()}\n+     *  is called.\n+     */\n     static class QueryLatch implements Closeable {\n         private volatile CountDownLatch countDownLatch;\n-        private Set<Integer> failedShards = new HashSet<>();\n+        private final Set<Integer> failedShards = new HashSet<>();\n         private int numShardFailures;\n \n         QueryLatch(int numShardFailures) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MzE4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420673185", "bodyText": "could you add a quick comment explaining what this iterator allows to do?", "author": "javanna", "createdAt": "2020-05-06T09:56:27Z", "path": "x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchIntegTestCase.java", "diffHunk": "@@ -148,40 +169,25 @@ protected void ensureTaskCompletion(String id) throws Exception {\n     }\n \n     protected SearchResponseIterator assertBlockingIterator(String indexName,", "originalCommit": "a1e360cc175e67c30acc1ccfac0c37675b1fc1a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5ODY3NA==", "url": "https://github.com/elastic/elasticsearch/pull/56026#discussion_r420698674", "bodyText": "I pushed 0304ec6", "author": "jimczi", "createdAt": "2020-05-06T10:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3MzE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0304ec6b3b521e2ebe47c40a9c064797203bc021", "chunk": "diff --git a/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchIntegTestCase.java b/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchIntegTestCase.java\nindex 4cfc1258506..f579b834b72 100644\n--- a/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchIntegTestCase.java\n+++ b/x-pack/plugin/async-search/src/test/java/org/elasticsearch/xpack/search/AsyncSearchIntegTestCase.java\n\n@@ -168,6 +168,11 @@ public abstract class AsyncSearchIntegTestCase extends ESIntegTestCase {\n         });\n     }\n \n+    /**\n+     * Returns a {@link SearchResponseIterator} that blocks query shard executions\n+     * until {@link SearchResponseIterator#next()} is called. That allows to randomly\n+     * generate partial results that can be consumed in order.\n+     */\n     protected SearchResponseIterator assertBlockingIterator(String indexName,\n                                                             int numShards,\n                                                             SearchSourceBuilder source,\n"}}, {"oid": "6bb55e4f7756dd06b863ce0713c03275872fbd06", "url": "https://github.com/elastic/elasticsearch/commit/6bb55e4f7756dd06b863ce0713c03275872fbd06", "message": "Merge branch 'master' into async_search_action_it", "committedDate": "2020-05-06T10:22:31Z", "type": "commit"}, {"oid": "0304ec6b3b521e2ebe47c40a9c064797203bc021", "url": "https://github.com/elastic/elasticsearch/commit/0304ec6b3b521e2ebe47c40a9c064797203bc021", "message": "address review", "committedDate": "2020-05-06T10:44:09Z", "type": "commit"}, {"oid": "d61b8dd8411a9eed67316dc82a5c6b46dec815ed", "url": "https://github.com/elastic/elasticsearch/commit/d61b8dd8411a9eed67316dc82a5c6b46dec815ed", "message": "Merge branch 'master' into async_search_action_it", "committedDate": "2020-05-07T18:49:33Z", "type": "commit"}]}