{"pr_number": 50930, "pr_title": "Track Snapshot Version in RepositoryData", "pr_createdAt": "2020-01-13T17:02:00Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50930", "timeline": [{"oid": "e99eaeabd2149b9cc5ea2440fb07c4eb9c527f35", "url": "https://github.com/elastic/elasticsearch/commit/e99eaeabd2149b9cc5ea2440fb07c4eb9c527f35", "message": "Track Snapshot Version in RepositoryData\n\nAdd tracking of snapshot versions to `RepositoryData` to make BwC logic more efficient.\nFollow up to #50853", "committedDate": "2020-01-13T17:00:15Z", "type": "commit"}, {"oid": "6f45d07347c4a64d3550adc30117b8e9b3d4a136", "url": "https://github.com/elastic/elasticsearch/commit/6f45d07347c4a64d3550adc30117b8e9b3d4a136", "message": "shorter diff", "committedDate": "2020-01-13T17:07:53Z", "type": "commit"}, {"oid": "386f0c3e40cf79f757b4a14a0807c6d29cecf502", "url": "https://github.com/elastic/elasticsearch/commit/386f0c3e40cf79f757b4a14a0807c6d29cecf502", "message": "fix test", "committedDate": "2020-01-13T19:22:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1ODk0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366058947", "bodyText": "It is somewhat annoying that we have to load all SnapshotInfo here one-off but I think it's still the best solution available.\nIdeally, I was hoping to be able to just work from the assumption that if no version is set for a snapshot then it must be from before 8.0/7.6. But I gave up on that idea since it breaks as soon as some older version cluster (for whatever reason), takes a snapshot and removes all the version fields when writing out a new index-N (maybe that's the wrong trade off though, glad to hear opinions on this :) ... obviously you could argue that loading all the SnapshotInfo is too high a price to pay just so the repo can move to the new metadata version earlier, but IMO even on S3 etc. loading 100 snapshots or so won't take all that long or cost any meaningful amount of $$$).", "author": "original-brownbear", "createdAt": "2020-01-13T22:18:13Z", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java", "diffHunk": "@@ -1252,8 +1254,34 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n                 }\n             });\n \n+        final StepListener<RepositoryData> filterRepositoryDataStep = new StepListener<>();\n+\n         // Step 2: Write new index-N blob to repository and update index.latest\n         setPendingStep.whenComplete(newGen -> threadPool().executor(ThreadPool.Names.SNAPSHOT).execute(ActionRunnable.wrap(listener, l -> {\n+            // BwC logic: Load snapshot version information if any snapshot is missing a version in RepositoryData so that the new\n+            // RepositoryData contains a version for every snapshot\n+            final List<SnapshotId> snapshotIdsWithoutVersion = repositoryData.getSnapshotIds().stream().filter(", "originalCommit": "386f0c3e40cf79f757b4a14a0807c6d29cecf502", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ca7e7cec710292970e370fbf41c459f9777e812", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\nindex 3572a2cf7c0..7af0b1e3983 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\n\n@@ -1265,13 +1265,19 @@ public abstract class BlobStoreRepository extends AbstractLifecycleComponent imp\n             if (snapshotIdsWithoutVersion.isEmpty() == false) {\n                 final Map<SnapshotId, Version> updatedVersionMap = new ConcurrentHashMap<>();\n                 final GroupedActionListener<Void> loadAllVersionsListener = new GroupedActionListener<>(\n-                    ActionListener.wrap(() -> {\n-                        try {\n-                            filterRepositoryDataStep.onResponse(repositoryData.withVersions(updatedVersionMap));\n-                        } catch (Exception e) {\n-                            l.onFailure(e);\n-                        }\n-                    }), snapshotIdsWithoutVersion.size());\n+                    ActionListener.runAfter(\n+                        new ActionListener<>() {\n+                            @Override\n+                            public void onResponse(Collection<Void> voids) {\n+                                logger.info(\"Successfully loaded all snapshot's version information from snapshot metadata\");\n+                            }\n+\n+                            @Override\n+                            public void onFailure(Exception e) {\n+                                logger.warn(\"Failure when trying to load missing version information from snapshot metadata\", e);\n+                            }\n+                        }, () -> filterRepositoryDataStep.onResponse(repositoryData.withVersions(updatedVersionMap))),\n+                    snapshotIdsWithoutVersion.size());\n                 for (SnapshotId snapshotId : snapshotIdsWithoutVersion) {\n                     threadPool().executor(ThreadPool.Names.SNAPSHOT).execute(ActionRunnable.run(loadAllVersionsListener, () ->\n                         updatedVersionMap.put(snapshotId, getSnapshotInfo(snapshotId).version())));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1OTcwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366059705", "bodyText": "Obviously now that we're writing the version field to RepositoryData using shard generations to identify having any pre-7.6 snapshots or not goes away and we have to fake an old-style snapshot by stripping out the version fields manually.", "author": "original-brownbear", "createdAt": "2020-01-13T22:20:05Z", "path": "server/src/test/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java", "diffHunk": "@@ -263,11 +271,24 @@ public void testHandlingMissingRootLevelSnapshotMetadata() throws Exception {\n         logger.info(\"--> delete root level snapshot metadata blob for snapshot [{}]\", snapshotToCorrupt);\n         Files.delete(repo.resolve(String.format(Locale.ROOT, BlobStoreRepository.SNAPSHOT_NAME_FORMAT, snapshotToCorrupt.getUUID())));\n \n+        logger.info(\"--> strip version information from index-N blob\");\n+        final RepositoryData withoutVersions = new RepositoryData(repositoryData.getGenId(),", "originalCommit": "386f0c3e40cf79f757b4a14a0807c6d29cecf502", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "4ca7e7cec710292970e370fbf41c459f9777e812", "url": "https://github.com/elastic/elasticsearch/commit/4ca7e7cec710292970e370fbf41c459f9777e812", "message": "nicer", "committedDate": "2020-01-13T22:29:24Z", "type": "commit"}, {"oid": "86ef75f330de32dae4ffc61212b3e9de74fcfa66", "url": "https://github.com/elastic/elasticsearch/commit/86ef75f330de32dae4ffc61212b3e9de74fcfa66", "message": "nicer", "committedDate": "2020-01-13T22:30:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NDI3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366064277", "bodyText": "info IMO since it's a one time thing and it would be nice to have some marker of the \"upgrade\" in the logs.", "author": "original-brownbear", "createdAt": "2020-01-13T22:31:38Z", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java", "diffHunk": "@@ -1252,8 +1254,41 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n                 }\n             });\n \n+        final StepListener<RepositoryData> filterRepositoryDataStep = new StepListener<>();\n+\n         // Step 2: Write new index-N blob to repository and update index.latest\n         setPendingStep.whenComplete(newGen -> threadPool().executor(ThreadPool.Names.SNAPSHOT).execute(ActionRunnable.wrap(listener, l -> {\n+            // BwC logic: Load snapshot version information if any snapshot is missing a version in RepositoryData so that the new\n+            // RepositoryData contains a version for every snapshot\n+            final List<SnapshotId> snapshotIdsWithoutVersion = repositoryData.getSnapshotIds().stream().filter(\n+                snapshotId -> repositoryData.getVersion(snapshotId) == null).collect(Collectors.toList());\n+            if (snapshotIdsWithoutVersion.isEmpty() == false) {\n+                final Map<SnapshotId, Version> updatedVersionMap = new ConcurrentHashMap<>();\n+                final GroupedActionListener<Void> loadAllVersionsListener = new GroupedActionListener<>(\n+                    ActionListener.runAfter(\n+                        new ActionListener<>() {\n+                            @Override\n+                            public void onResponse(Collection<Void> voids) {\n+                                logger.info(\"Successfully loaded all snapshot's version information for {} from snapshot metadata\",", "originalCommit": "86ef75f330de32dae4ffc61212b3e9de74fcfa66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0ODgxOA==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366348818", "bodyText": "Given that snapshotIdsWithoutVersion can be very long. I was wondering if we should just display the size of snapshotIdsWithoutVersion here in the info logging.", "author": "ywelsch", "createdAt": "2020-01-14T13:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NDI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1MzA4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366353081", "bodyText": "I think it would be nice to have the concrete ids of the snapshots to help debug situations where users might be writing to the repo from various ES versions (that's my main motivation to have this). I figured the list isn't going to be so long that it would create real issues due to the log line length so worst case it's a bit of an annoyance right?", "author": "original-brownbear", "createdAt": "2020-01-14T14:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NDI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1NjAzMA==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366356030", "bodyText": "I think it would be nice to have the concrete ids of the snapshots to help debug situations where users might be writing to the repo from various ES versions (that's my main motivation to have this)\n\nWhy do the exact names and versions matter in that case? Isn't it sufficient to know that some snapshots got version-tagged that previously were not?", "author": "ywelsch", "createdAt": "2020-01-14T14:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NDI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2NjQ1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366366452", "bodyText": "Versions I don't care about much and the exact names aren't important either, but it would be nice to see if the list of snapshots changed if this gets logged repeatedly.\nEspecially on Cloud just having just the size which might be effectively constant over time seems like it could create an annoying situation when debugging :)", "author": "original-brownbear", "createdAt": "2020-01-14T14:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NDI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTIzNg==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366379236", "bodyText": "Perhaps use firstListElementsToCommaDelimitedString then (see AllocationService)?", "author": "ywelsch", "createdAt": "2020-01-14T14:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NDI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwMTYyMg==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366401622", "bodyText": "Ah nice thanks => reused in  02e8c4e (can probably move that method to a more appropriate place in a follow up)", "author": "original-brownbear", "createdAt": "2020-01-14T15:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NDI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "02e8c4ee3f0ef38a2fc059f5583c29e8f5a133a3", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\nindex 07f5af7b2fc..87fbf9c44d0 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\n\n@@ -1270,7 +1271,8 @@ public abstract class BlobStoreRepository extends AbstractLifecycleComponent imp\n                             @Override\n                             public void onResponse(Collection<Void> voids) {\n                                 logger.info(\"Successfully loaded all snapshot's version information for {} from snapshot metadata\",\n-                                    snapshotIdsWithoutVersion);\n+                                    AllocationService.firstListElementsToCommaDelimitedString(\n+                                        snapshotIdsWithoutVersion, SnapshotId::toString, logger.isDebugEnabled()));\n                             }\n \n                             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NDYxMg==", "url": "https://github.com/elastic/elasticsearch/pull/50930#discussion_r366064612", "bodyText": "Not great but just like in last week's discussion of SnapshotsService not introducing any new breakage here so we take whatever version information we can get and run with it even on exceptions.", "author": "original-brownbear", "createdAt": "2020-01-13T22:32:37Z", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java", "diffHunk": "@@ -1252,8 +1254,41 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n                 }\n             });\n \n+        final StepListener<RepositoryData> filterRepositoryDataStep = new StepListener<>();\n+\n         // Step 2: Write new index-N blob to repository and update index.latest\n         setPendingStep.whenComplete(newGen -> threadPool().executor(ThreadPool.Names.SNAPSHOT).execute(ActionRunnable.wrap(listener, l -> {\n+            // BwC logic: Load snapshot version information if any snapshot is missing a version in RepositoryData so that the new\n+            // RepositoryData contains a version for every snapshot\n+            final List<SnapshotId> snapshotIdsWithoutVersion = repositoryData.getSnapshotIds().stream().filter(\n+                snapshotId -> repositoryData.getVersion(snapshotId) == null).collect(Collectors.toList());\n+            if (snapshotIdsWithoutVersion.isEmpty() == false) {\n+                final Map<SnapshotId, Version> updatedVersionMap = new ConcurrentHashMap<>();\n+                final GroupedActionListener<Void> loadAllVersionsListener = new GroupedActionListener<>(\n+                    ActionListener.runAfter(\n+                        new ActionListener<>() {\n+                            @Override\n+                            public void onResponse(Collection<Void> voids) {\n+                                logger.info(\"Successfully loaded all snapshot's version information for {} from snapshot metadata\",\n+                                    snapshotIdsWithoutVersion);\n+                            }\n+\n+                            @Override\n+                            public void onFailure(Exception e) {\n+                                logger.warn(\"Failure when trying to load missing version information from snapshot metadata\", e);\n+                            }\n+                        }, () -> filterRepositoryDataStep.onResponse(repositoryData.withVersions(updatedVersionMap))),", "originalCommit": "86ef75f330de32dae4ffc61212b3e9de74fcfa66", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02e8c4ee3f0ef38a2fc059f5583c29e8f5a133a3", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\nindex 07f5af7b2fc..87fbf9c44d0 100644\n--- a/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\n+++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\n\n@@ -1270,7 +1271,8 @@ public abstract class BlobStoreRepository extends AbstractLifecycleComponent imp\n                             @Override\n                             public void onResponse(Collection<Void> voids) {\n                                 logger.info(\"Successfully loaded all snapshot's version information for {} from snapshot metadata\",\n-                                    snapshotIdsWithoutVersion);\n+                                    AllocationService.firstListElementsToCommaDelimitedString(\n+                                        snapshotIdsWithoutVersion, SnapshotId::toString, logger.isDebugEnabled()));\n                             }\n \n                             @Override\n"}}, {"oid": "eb22ebb2230eccc36b2607765037b85613db8630", "url": "https://github.com/elastic/elasticsearch/commit/eb22ebb2230eccc36b2607765037b85613db8630", "message": "Merge remote-tracking branch 'elastic/master' into store-snapshot-version-in-index-N", "committedDate": "2020-01-14T08:10:56Z", "type": "commit"}, {"oid": "99872cb4263774db3f6a4bd246f516a16e115d98", "url": "https://github.com/elastic/elasticsearch/commit/99872cb4263774db3f6a4bd246f516a16e115d98", "message": "Merge remote-tracking branch 'elastic/master' into store-snapshot-version-in-index-N", "committedDate": "2020-01-14T14:56:59Z", "type": "commit"}, {"oid": "02e8c4ee3f0ef38a2fc059f5583c29e8f5a133a3", "url": "https://github.com/elastic/elasticsearch/commit/02e8c4ee3f0ef38a2fc059f5583c29e8f5a133a3", "message": "nicer logging", "committedDate": "2020-01-14T15:23:37Z", "type": "commit"}]}