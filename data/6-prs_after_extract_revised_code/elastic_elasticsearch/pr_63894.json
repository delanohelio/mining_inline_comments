{"pr_number": 63894, "pr_title": "Add decorations to ir nodes in Painless", "pr_createdAt": "2020-10-19T17:13:00Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63894", "timeline": [{"oid": "0a1b5ed092704a1c25d1509213b16966d263c9c1", "url": "https://github.com/elastic/elasticsearch/commit/0a1b5ed092704a1c25d1509213b16966d263c9c1", "message": "make location final in IRNode", "committedDate": "2020-09-26T16:39:29Z", "type": "commit"}, {"oid": "7d62d0752fb2a99ae998fcab291c0f709bded0f5", "url": "https://github.com/elastic/elasticsearch/commit/7d62d0752fb2a99ae998fcab291c0f709bded0f5", "message": "add scoping for script, class, and method to WriteScope", "committedDate": "2020-09-26T17:18:49Z", "type": "commit"}, {"oid": "712b0a8965bba0939acd0f8e73932796eddc7238", "url": "https://github.com/elastic/elasticsearch/commit/712b0a8965bba0939acd0f8e73932796eddc7238", "message": "update scope to include classwriter and methodwriter", "committedDate": "2020-09-26T17:36:01Z", "type": "commit"}, {"oid": "8e38647855a1c5cca0c30a3f7e43f71c5d164edf", "url": "https://github.com/elastic/elasticsearch/commit/8e38647855a1c5cca0c30a3f7e43f71c5d164edf", "message": "move loop labels to writescope", "committedDate": "2020-09-26T17:56:22Z", "type": "commit"}, {"oid": "65502b186dbd52a0c784a52a83b1fb659e3a6abc", "url": "https://github.com/elastic/elasticsearch/commit/65502b186dbd52a0c784a52a83b1fb659e3a6abc", "message": "move try/catch labels to WriteScope", "committedDate": "2020-09-26T18:22:52Z", "type": "commit"}, {"oid": "7231b5ebd24838d08a18b46615849ab7842667eb", "url": "https://github.com/elastic/elasticsearch/commit/7231b5ebd24838d08a18b46615849ab7842667eb", "message": "move write to an external phase", "committedDate": "2020-09-26T20:26:14Z", "type": "commit"}, {"oid": "18098089e58987981be7c35788a1a8b93e3bcbb5", "url": "https://github.com/elastic/elasticsearch/commit/18098089e58987981be7c35788a1a8b93e3bcbb5", "message": "convert expression type to ir decoration", "committedDate": "2020-09-26T21:42:15Z", "type": "commit"}, {"oid": "ae8d2a1f12069641171f0013205b5887c7dfcd6a", "url": "https://github.com/elastic/elasticsearch/commit/ae8d2a1f12069641171f0013205b5887c7dfcd6a", "message": "Merge branch 'master' into proto", "committedDate": "2020-09-30T14:38:56Z", "type": "commit"}, {"oid": "760b9b940997249b18947d6da787d338f2a9dc38", "url": "https://github.com/elastic/elasticsearch/commit/760b9b940997249b18947d6da787d338f2a9dc38", "message": "Merge branch 'master' into proto", "committedDate": "2020-10-05T16:36:09Z", "type": "commit"}, {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "url": "https://github.com/elastic/elasticsearch/commit/b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "message": "Merge branch 'proto' into proto2", "committedDate": "2020-10-05T17:04:18Z", "type": "commit"}, {"oid": "527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "url": "https://github.com/elastic/elasticsearch/commit/527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "message": "Merge branch 'master' into proto", "committedDate": "2020-10-08T19:53:15Z", "type": "commit"}, {"oid": "879afcac4496aa42f0d57c3485a94d11575bfe4c", "url": "https://github.com/elastic/elasticsearch/commit/879afcac4496aa42f0d57c3485a94d11575bfe4c", "message": "Merge branch 'proto' into proto2", "committedDate": "2020-10-08T19:53:23Z", "type": "commit"}, {"oid": "49397f77f269c06949af28d6a0b33e8f5d653018", "url": "https://github.com/elastic/elasticsearch/commit/49397f77f269c06949af28d6a0b33e8f5d653018", "message": "response to pr comments", "committedDate": "2020-10-08T20:17:35Z", "type": "commit"}, {"oid": "4c8082f74654dccabbb2ee339e9089623f445fb3", "url": "https://github.com/elastic/elasticsearch/commit/4c8082f74654dccabbb2ee339e9089623f445fb3", "message": "Merge branch 'master' into proto2", "committedDate": "2020-10-08T21:21:07Z", "type": "commit"}, {"oid": "883486155e6f1c304fe53b5c8ef09ee255964141", "url": "https://github.com/elastic/elasticsearch/commit/883486155e6f1c304fe53b5c8ef09ee255964141", "message": "Merge branch 'proto2' into proto3", "committedDate": "2020-10-08T21:32:23Z", "type": "commit"}, {"oid": "e31faeae9f99ed35a64d812596604b342fbc63f1", "url": "https://github.com/elastic/elasticsearch/commit/e31faeae9f99ed35a64d812596604b342fbc63f1", "message": "Merge branch 'master' into proto2", "committedDate": "2020-10-16T19:07:24Z", "type": "commit"}, {"oid": "16031ac02038b84fd67bdc650a3f374ba9c8b927", "url": "https://github.com/elastic/elasticsearch/commit/16031ac02038b84fd67bdc650a3f374ba9c8b927", "message": "Merge branch 'proto2' into proto3", "committedDate": "2020-10-16T19:07:32Z", "type": "commit"}, {"oid": "902b2ba328e4f9e3fc0a3d5f3809e257e396d2a4", "url": "https://github.com/elastic/elasticsearch/commit/902b2ba328e4f9e3fc0a3d5f3809e257e396d2a4", "message": "response to pr comments", "committedDate": "2020-10-16T19:51:59Z", "type": "commit"}, {"oid": "c245ddd2784cc981bfa207bbb5074ae73f4b5422", "url": "https://github.com/elastic/elasticsearch/commit/c245ddd2784cc981bfa207bbb5074ae73f4b5422", "message": "Merge branch 'master' into proto3", "committedDate": "2020-10-16T20:53:25Z", "type": "commit"}, {"oid": "4bfe0db6687dfe3269ef82b771f11269c0702b57", "url": "https://github.com/elastic/elasticsearch/commit/4bfe0db6687dfe3269ef82b771f11269c0702b57", "message": "Merge branch 'master' into proto3", "committedDate": "2020-10-19T16:32:50Z", "type": "commit"}, {"oid": "e025b887a4018c746f944293b59f4276a6d43170", "url": "https://github.com/elastic/elasticsearch/commit/e025b887a4018c746f944293b59f4276a6d43170", "message": "Merge branch 'proto3' into proto4", "committedDate": "2020-10-19T16:49:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MDQyOA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510270428", "bodyText": "expand this.", "author": "stu-elastic", "createdAt": "2020-10-22T15:49:02Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -770,18 +772,22 @@ public void visitBinaryMath(BinaryMathNode irBinaryMathNode, WriteScope writeSco\n                 methodWriter.invokeVirtual(Type.getType(Matcher.class), WriterConstants.MATCHER_MATCHES);\n             } else {\n                 throw new IllegalStateException(\"unexpected binary math operation [\" + operation + \"] \" +\n-                        \"for type [\" + irBinaryMathNode.getExpressionCanonicalTypeName() + \"]\");\n+                        \"for type [\" + irBinaryMathNode.getDecoration(IRDExpressionType.class).getCanonicalTypeName() + \"]\");\n             }\n         } else {\n             visit(irLeftNode, writeScope);\n             visit(irRightNode, writeScope);\n \n             if (irBinaryMathNode.getBinaryType() == def.class ||\n                     (irBinaryMathNode.getShiftType() != null && irBinaryMathNode.getShiftType() == def.class)) {\n-                methodWriter.writeDynamicBinaryInstruction(irBinaryMathNode.getLocation(), irBinaryMathNode.getExpressionType(),\n-                        irLeftNode.getExpressionType(), irRightNode.getExpressionType(), operation, irBinaryMathNode.getFlags());\n+                methodWriter.writeDynamicBinaryInstruction(irBinaryMathNode.getLocation(),\n+                        irBinaryMathNode.getDecoration(IRDExpressionType.class).getType(),\n+                        irLeftNode.getDecoration(IRDExpressionType.class).getType(),\n+                        irRightNode.getDecoration(IRDExpressionType.class).getType(),\n+                        operation, irBinaryMathNode.getFlags());\n             } else {\n-                methodWriter.writeBinaryInstruction(irBinaryMathNode.getLocation(), irBinaryMathNode.getExpressionType(), operation);\n+                methodWriter.writeBinaryInstruction(", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyNzQ0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510327443", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MDQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\nindex 43c1d366a20..3b37de35760 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\n\n@@ -772,7 +770,7 @@ public class DefaultIRTreeToASMBytesPhase implements IRTreeVisitor<WriteScope> {\n                 methodWriter.invokeVirtual(Type.getType(Matcher.class), WriterConstants.MATCHER_MATCHES);\n             } else {\n                 throw new IllegalStateException(\"unexpected binary math operation [\" + operation + \"] \" +\n-                        \"for type [\" + irBinaryMathNode.getDecoration(IRDExpressionType.class).getCanonicalTypeName() + \"]\");\n+                        \"for type [\" + irBinaryMathNode.getExpressionCanonicalTypeName() + \"]\");\n             }\n         } else {\n             visit(irLeftNode, writeScope);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271108", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:49:53Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -990,15 +997,16 @@ public void visitInstanceof(InstanceofNode irInstanceofNode, WriteScope writeSco\n         visit(irChildNode, writeScope);\n \n         Class<?> instanceType = irInstanceofNode.getInstanceType();\n-        Class<?> expressionType = irInstanceofNode.getExpressionType();\n+        Class<?> expressionType = irInstanceofNode.getDecoration(IRDExpressionType.class).getType();\n \n         if (irInstanceofNode.getInstanceType() == def.class) {\n             methodWriter.writePop(MethodWriter.getType(expressionType).getSize());\n             methodWriter.push(true);\n-        } else if (irChildNode.getExpressionType().isPrimitive()) {\n+        } else if (irChildNode.getDecoration(IRDExpressionType.class).getType().isPrimitive()) {\n             methodWriter.writePop(MethodWriter.getType(expressionType).getSize());\n             Class<?> boxedInstanceType = PainlessLookupUtility.typeToBoxedType(instanceType);\n-            Class<?> boxedExpressionType = PainlessLookupUtility.typeToBoxedType(irChildNode.getExpressionType());\n+            Class<?> boxedExpressionType =\n+                    PainlessLookupUtility.typeToBoxedType(irChildNode.getDecoration(IRDExpressionType.class).getType());", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyOTA4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510329083", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\nindex 43c1d366a20..3b37de35760 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\n\n@@ -997,16 +990,15 @@ public class DefaultIRTreeToASMBytesPhase implements IRTreeVisitor<WriteScope> {\n         visit(irChildNode, writeScope);\n \n         Class<?> instanceType = irInstanceofNode.getInstanceType();\n-        Class<?> expressionType = irInstanceofNode.getDecoration(IRDExpressionType.class).getType();\n+        Class<?> expressionType = irInstanceofNode.getExpressionType();\n \n         if (irInstanceofNode.getInstanceType() == def.class) {\n             methodWriter.writePop(MethodWriter.getType(expressionType).getSize());\n             methodWriter.push(true);\n-        } else if (irChildNode.getDecoration(IRDExpressionType.class).getType().isPrimitive()) {\n+        } else if (irChildNode.getExpressionType().isPrimitive()) {\n             methodWriter.writePop(MethodWriter.getType(expressionType).getSize());\n             Class<?> boxedInstanceType = PainlessLookupUtility.typeToBoxedType(instanceType);\n-            Class<?> boxedExpressionType =\n-                    PainlessLookupUtility.typeToBoxedType(irChildNode.getDecoration(IRDExpressionType.class).getType());\n+            Class<?> boxedExpressionType = PainlessLookupUtility.typeToBoxedType(irChildNode.getExpressionType());\n             methodWriter.push(boxedInstanceType.isAssignableFrom(boxedExpressionType));\n         } else {\n             methodWriter.instanceOf(MethodWriter.getType(PainlessLookupUtility.typeToBoxedType(instanceType)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTIyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271221", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:50:01Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -1195,11 +1203,11 @@ public void visitTypeCaptureReference(TypedCaptureReferenceNode irTypedCaptureRe\n         Variable captured = writeScope.getVariable(irTypedCaptureReferenceNode.getCaptures().get(0));\n \n         methodWriter.visitVarInsn(captured.getAsmType().getOpcode(Opcodes.ILOAD), captured.getSlot());\n-        Type methodType = Type.getMethodType(\n-                MethodWriter.getType(irTypedCaptureReferenceNode.getExpressionType()),\n+        Type methodType = Type.getMethodType(MethodWriter.getType(\n+                irTypedCaptureReferenceNode.getDecoration(IRDExpressionType.class).getType()),", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzNDA3NA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510334074", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\nindex 43c1d366a20..3b37de35760 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\n\n@@ -1203,11 +1195,11 @@ public class DefaultIRTreeToASMBytesPhase implements IRTreeVisitor<WriteScope> {\n         Variable captured = writeScope.getVariable(irTypedCaptureReferenceNode.getCaptures().get(0));\n \n         methodWriter.visitVarInsn(captured.getAsmType().getOpcode(Opcodes.ILOAD), captured.getSlot());\n-        Type methodType = Type.getMethodType(MethodWriter.getType(\n-                irTypedCaptureReferenceNode.getDecoration(IRDExpressionType.class).getType()),\n+        Type methodType = Type.getMethodType(\n+                MethodWriter.getType(irTypedCaptureReferenceNode.getExpressionType()),\n                 captured.getAsmType());\n-        methodWriter.invokeDefCall(irTypedCaptureReferenceNode.getMethodName(), methodType, DefBootstrap.REFERENCE,\n-                irTypedCaptureReferenceNode.getDecoration(IRDExpressionType.class).getCanonicalTypeName());\n+        methodWriter.invokeDefCall(irTypedCaptureReferenceNode.getMethodName(),\n+                methodType, DefBootstrap.REFERENCE, irTypedCaptureReferenceNode.getExpressionCanonicalTypeName());\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTMwNw==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271307", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:50:09Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java", "diffHunk": "@@ -1195,11 +1203,11 @@ public void visitTypeCaptureReference(TypedCaptureReferenceNode irTypedCaptureRe\n         Variable captured = writeScope.getVariable(irTypedCaptureReferenceNode.getCaptures().get(0));\n \n         methodWriter.visitVarInsn(captured.getAsmType().getOpcode(Opcodes.ILOAD), captured.getSlot());\n-        Type methodType = Type.getMethodType(\n-                MethodWriter.getType(irTypedCaptureReferenceNode.getExpressionType()),\n+        Type methodType = Type.getMethodType(MethodWriter.getType(\n+                irTypedCaptureReferenceNode.getDecoration(IRDExpressionType.class).getType()),\n                 captured.getAsmType());\n-        methodWriter.invokeDefCall(irTypedCaptureReferenceNode.getMethodName(),\n-                methodType, DefBootstrap.REFERENCE, irTypedCaptureReferenceNode.getExpressionCanonicalTypeName());\n+        methodWriter.invokeDefCall(irTypedCaptureReferenceNode.getMethodName(), methodType, DefBootstrap.REFERENCE,\n+                irTypedCaptureReferenceNode.getDecoration(IRDExpressionType.class).getCanonicalTypeName());", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzNDczMw==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510334733", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\nindex 43c1d366a20..3b37de35760 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java\n\n@@ -1203,11 +1195,11 @@ public class DefaultIRTreeToASMBytesPhase implements IRTreeVisitor<WriteScope> {\n         Variable captured = writeScope.getVariable(irTypedCaptureReferenceNode.getCaptures().get(0));\n \n         methodWriter.visitVarInsn(captured.getAsmType().getOpcode(Opcodes.ILOAD), captured.getSlot());\n-        Type methodType = Type.getMethodType(MethodWriter.getType(\n-                irTypedCaptureReferenceNode.getDecoration(IRDExpressionType.class).getType()),\n+        Type methodType = Type.getMethodType(\n+                MethodWriter.getType(irTypedCaptureReferenceNode.getExpressionType()),\n                 captured.getAsmType());\n-        methodWriter.invokeDefCall(irTypedCaptureReferenceNode.getMethodName(), methodType, DefBootstrap.REFERENCE,\n-                irTypedCaptureReferenceNode.getDecoration(IRDExpressionType.class).getCanonicalTypeName());\n+        methodWriter.invokeDefCall(irTypedCaptureReferenceNode.getMethodName(),\n+                methodType, DefBootstrap.REFERENCE, irTypedCaptureReferenceNode.getExpressionCanonicalTypeName());\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTUzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271535", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:50:25Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -973,14 +975,15 @@ public void visitBinary(EBinary userBinaryNode, ScriptScope scriptScope) {\n             irExpressionNode = irBinaryMathNode;\n         }\n \n-        irExpressionNode.setExpressionType(valueType);\n+        irExpressionNode.attachDecoration(new IRDExpressionType(valueType));\n         scriptScope.putDecoration(userBinaryNode, new IRNodeDecoration(irExpressionNode));\n     }\n \n     @Override\n     public void visitBooleanComp(EBooleanComp userBooleanCompNode, ScriptScope scriptScope) {\n         BooleanNode irBooleanNode = new BooleanNode(userBooleanCompNode.getLocation());\n-        irBooleanNode.setExpressionType(scriptScope.getDecoration(userBooleanCompNode, ValueType.class).getValueType());\n+        irBooleanNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(userBooleanCompNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzODM5NA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510338394", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -975,15 +973,14 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n             irExpressionNode = irBinaryMathNode;\n         }\n \n-        irExpressionNode.attachDecoration(new IRDExpressionType(valueType));\n+        irExpressionNode.setExpressionType(valueType);\n         scriptScope.putDecoration(userBinaryNode, new IRNodeDecoration(irExpressionNode));\n     }\n \n     @Override\n     public void visitBooleanComp(EBooleanComp userBooleanCompNode, ScriptScope scriptScope) {\n         BooleanNode irBooleanNode = new BooleanNode(userBooleanCompNode.getLocation());\n-        irBooleanNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(userBooleanCompNode, ValueType.class).getValueType()));\n+        irBooleanNode.setExpressionType(scriptScope.getDecoration(userBooleanCompNode, ValueType.class).getValueType());\n         irBooleanNode.setOperation(userBooleanCompNode.getOperation());\n         irBooleanNode.setLeftNode(injectCast(userBooleanCompNode.getLeftNode(), scriptScope));\n         irBooleanNode.setRightNode(injectCast(userBooleanCompNode.getRightNode(), scriptScope));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTcwMA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271700", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:50:38Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1008,7 +1011,8 @@ public void visitExplicit(EExplicit userExplicitNode, ScriptScope scriptScope) {\n     @Override\n     public void visitInstanceof(EInstanceof userInstanceofNode, ScriptScope scriptScope) {\n         InstanceofNode irInstanceofNode = new InstanceofNode(userInstanceofNode.getLocation());\n-        irInstanceofNode.setExpressionType(scriptScope.getDecoration(userInstanceofNode, ValueType.class).getValueType());\n+        irInstanceofNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(userInstanceofNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MjY2OA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510342668", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1011,8 +1008,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n     @Override\n     public void visitInstanceof(EInstanceof userInstanceofNode, ScriptScope scriptScope) {\n         InstanceofNode irInstanceofNode = new InstanceofNode(userInstanceofNode.getLocation());\n-        irInstanceofNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(userInstanceofNode, ValueType.class).getValueType()));\n+        irInstanceofNode.setExpressionType(scriptScope.getDecoration(userInstanceofNode, ValueType.class).getValueType());\n         irInstanceofNode.setInstanceType(scriptScope.getDecoration(userInstanceofNode, InstanceType.class).getInstanceType());\n         irInstanceofNode.setChildNode((ExpressionNode)visit(userInstanceofNode.getExpressionNode(), scriptScope));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTgwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271805", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:50:47Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1091,7 +1098,8 @@ public void visitNewArray(ENewArray userNewArrayNode, ScriptScope scriptScope) {\n     public void visitNewObj(ENewObj userNewObjectNode, ScriptScope scriptScope) {\n         NewObjectNode irNewObjectNode = new NewObjectNode(userNewObjectNode.getLocation());\n \n-        irNewObjectNode.setExpressionType(scriptScope.getDecoration(userNewObjectNode, ValueType.class).getValueType());\n+        irNewObjectNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(userNewObjectNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0ODA3MA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510348070", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1098,8 +1091,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n     public void visitNewObj(ENewObj userNewObjectNode, ScriptScope scriptScope) {\n         NewObjectNode irNewObjectNode = new NewObjectNode(userNewObjectNode.getLocation());\n \n-        irNewObjectNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(userNewObjectNode, ValueType.class).getValueType()));\n+        irNewObjectNode.setExpressionType(scriptScope.getDecoration(userNewObjectNode, ValueType.class).getValueType());\n         irNewObjectNode.setRead(scriptScope.getCondition(userNewObjectNode, Read.class));\n         irNewObjectNode.setConstructor(\n                 scriptScope.getDecoration(userNewObjectNode, StandardPainlessConstructor.class).getStandardPainlessConstructor());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTg2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271869", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:50:53Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1151,15 +1159,17 @@ public void visitCallLocal(ECallLocal callLocalNode, ScriptScope scriptScope) {\n             irInvokeCallMemberNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n         }\n \n-        irInvokeCallMemberNode.setExpressionType(scriptScope.getDecoration(callLocalNode, ValueType.class).getValueType());\n+        irInvokeCallMemberNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(callLocalNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0ODU5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510348599", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1159,8 +1151,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n             irInvokeCallMemberNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n         }\n \n-        irInvokeCallMemberNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(callLocalNode, ValueType.class).getValueType()));\n+        irInvokeCallMemberNode.setExpressionType(scriptScope.getDecoration(callLocalNode, ValueType.class).getValueType());\n \n         scriptScope.putDecoration(callLocalNode, new IRNodeDecoration(irInvokeCallMemberNode));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTkyMw==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271923", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:50:57Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1151,15 +1159,17 @@ public void visitCallLocal(ECallLocal callLocalNode, ScriptScope scriptScope) {\n             irInvokeCallMemberNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n         }\n \n-        irInvokeCallMemberNode.setExpressionType(scriptScope.getDecoration(callLocalNode, ValueType.class).getValueType());\n+        irInvokeCallMemberNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(callLocalNode, ValueType.class).getValueType()));\n \n         scriptScope.putDecoration(callLocalNode, new IRNodeDecoration(irInvokeCallMemberNode));\n     }\n \n     @Override\n     public void visitBooleanConstant(EBooleanConstant userBooleanConstantNode, ScriptScope scriptScope) {\n         ConstantNode irConstantNode = new ConstantNode(userBooleanConstantNode.getLocation());\n-        irConstantNode.setExpressionType(scriptScope.getDecoration(userBooleanConstantNode, ValueType.class).getValueType());\n+        irConstantNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(userBooleanConstantNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1MDQ4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510350485", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1159,8 +1151,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n             irInvokeCallMemberNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n         }\n \n-        irInvokeCallMemberNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(callLocalNode, ValueType.class).getValueType()));\n+        irInvokeCallMemberNode.setExpressionType(scriptScope.getDecoration(callLocalNode, ValueType.class).getValueType());\n \n         scriptScope.putDecoration(callLocalNode, new IRNodeDecoration(irInvokeCallMemberNode));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTk2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510271965", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:51:02Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1168,7 +1178,8 @@ public void visitBooleanConstant(EBooleanConstant userBooleanConstantNode, Scrip\n     @Override\n     public void visitNumeric(ENumeric userNumericNode, ScriptScope scriptScope) {\n         ConstantNode irConstantNode = new ConstantNode(userNumericNode.getLocation());\n-        irConstantNode.setExpressionType(scriptScope.getDecoration(userNumericNode, ValueType.class).getValueType());\n+        irConstantNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(userNumericNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1MTcyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510351729", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1178,8 +1168,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n     @Override\n     public void visitNumeric(ENumeric userNumericNode, ScriptScope scriptScope) {\n         ConstantNode irConstantNode = new ConstantNode(userNumericNode.getLocation());\n-        irConstantNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(userNumericNode, ValueType.class).getValueType()));\n+        irConstantNode.setExpressionType(scriptScope.getDecoration(userNumericNode, ValueType.class).getValueType());\n         irConstantNode.setConstant(scriptScope.getDecoration(userNumericNode, StandardConstant.class).getStandardConstant());\n \n         scriptScope.putDecoration(userNumericNode, new IRNodeDecoration(irConstantNode));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjAzNA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510272034", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:51:07Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1177,7 +1188,8 @@ public void visitNumeric(ENumeric userNumericNode, ScriptScope scriptScope) {\n     @Override\n     public void visitDecimal(EDecimal userDecimalNode, ScriptScope scriptScope) {\n         ConstantNode irConstantNode = new ConstantNode(userDecimalNode.getLocation());\n-        irConstantNode.setExpressionType(scriptScope.getDecoration(userDecimalNode, ValueType.class).getValueType());\n+        irConstantNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(userDecimalNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1MjAwNg==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510352006", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1188,8 +1177,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n     @Override\n     public void visitDecimal(EDecimal userDecimalNode, ScriptScope scriptScope) {\n         ConstantNode irConstantNode = new ConstantNode(userDecimalNode.getLocation());\n-        irConstantNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(userDecimalNode, ValueType.class).getValueType()));\n+        irConstantNode.setExpressionType(scriptScope.getDecoration(userDecimalNode, ValueType.class).getValueType());\n         irConstantNode.setConstant(scriptScope.getDecoration(userDecimalNode, StandardConstant.class).getStandardConstant());\n \n         scriptScope.putDecoration(userDecimalNode, new IRNodeDecoration(irConstantNode));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjEzNw==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510272137", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:51:15Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1335,7 +1347,8 @@ public void visitFunctionRef(EFunctionRef userFunctionRefNode, ScriptScope scrip\n             irReferenceNode = typedInterfaceReferenceNode;\n         }\n \n-        irReferenceNode.setExpressionType(scriptScope.getDecoration(userFunctionRefNode, ValueType.class).getValueType());\n+        irReferenceNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(userFunctionRefNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NDMxMA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510354310", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1347,8 +1335,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n             irReferenceNode = typedInterfaceReferenceNode;\n         }\n \n-        irReferenceNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(userFunctionRefNode, ValueType.class).getValueType()));\n+        irReferenceNode.setExpressionType(scriptScope.getDecoration(userFunctionRefNode, ValueType.class).getValueType());\n \n         if (capturesDecoration != null) {\n             irReferenceNode.addCapture(capturesDecoration.getCaptures().get(0).getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjE5MA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510272190", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:51:20Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1393,7 +1406,8 @@ public void visitNewArrayFunctionRef(ENewArrayFunctionRef userNewArrayFunctionRe\n \n         irClassNode.addFunctionNode(irFunctionNode);\n \n-        irReferenceNode.setExpressionType(scriptScope.getDecoration(userNewArrayFunctionRefNode, ValueType.class).getValueType());\n+        irReferenceNode.attachDecoration(\n+                new IRDExpressionType(scriptScope.getDecoration(userNewArrayFunctionRefNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NDkxMw==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510354913", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T17:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1406,8 +1393,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n \n         irClassNode.addFunctionNode(irFunctionNode);\n \n-        irReferenceNode.attachDecoration(\n-                new IRDExpressionType(scriptScope.getDecoration(userNewArrayFunctionRefNode, ValueType.class).getValueType()));\n+        irReferenceNode.setExpressionType(scriptScope.getDecoration(userNewArrayFunctionRefNode, ValueType.class).getValueType());\n \n         scriptScope.putDecoration(userNewArrayFunctionRefNode, new IRNodeDecoration(irReferenceNode));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjMyMA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510272320", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:51:31Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1665,20 +1679,21 @@ public void visitBrace(EBrace userBraceNode, ScriptScope scriptScope) {\n \n             if (write == false || compound) {\n                 LoadMapShortcutNode irLoadMapShortcutNode = new LoadMapShortcutNode(location);\n-                irLoadMapShortcutNode.setExpressionType(scriptScope.getDecoration(userBraceNode, ValueType.class).getValueType());\n+                irLoadMapShortcutNode.attachDecoration(\n+                        new IRDExpressionType(scriptScope.getDecoration(userBraceNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NzEzNA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510357134", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T18:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1679,21 +1665,20 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n \n             if (write == false || compound) {\n                 LoadMapShortcutNode irLoadMapShortcutNode = new LoadMapShortcutNode(location);\n-                irLoadMapShortcutNode.attachDecoration(\n-                        new IRDExpressionType(scriptScope.getDecoration(userBraceNode, ValueType.class).getValueType()));\n+                irLoadMapShortcutNode.setExpressionType(scriptScope.getDecoration(userBraceNode, ValueType.class).getValueType());\n                 irLoadMapShortcutNode.setGetter(\n                         scriptScope.getDecoration(userBraceNode, GetterPainlessMethod.class).getGetterPainlessMethod());\n                 irLoadNode = irLoadMapShortcutNode;\n             }\n         } else if (scriptScope.getCondition(userBraceNode, ListShortcut.class)) {\n             FlipCollectionIndexNode irFlipCollectionIndexNode = new FlipCollectionIndexNode(userBraceNode.getIndexNode().getLocation());\n-            irFlipCollectionIndexNode.attachDecoration(new IRDExpressionType(int.class));\n+            irFlipCollectionIndexNode.setExpressionType(int.class);\n             irFlipCollectionIndexNode.setChildNode(irIndexNode);\n             irIndexNode = irFlipCollectionIndexNode;\n \n             if (write || compound) {\n                 StoreListShortcutNode irStoreListShortcutNode = new StoreListShortcutNode(location);\n-                irStoreListShortcutNode.attachDecoration(new IRDExpressionType(read ? valueType : void.class));\n+                irStoreListShortcutNode.setExpressionType(read ? valueType : void.class);\n                 irStoreListShortcutNode.setStoreType(valueType);\n                 irStoreListShortcutNode.setSetter(\n                         scriptScope.getDecoration(userBraceNode, SetterPainlessMethod.class).getSetterPainlessMethod());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjM5NA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510272394", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:51:36Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1687,7 +1702,8 @@ public void visitBrace(EBrace userBraceNode, ScriptScope scriptScope) {\n \n             if (write == false || compound) {\n                 LoadListShortcutNode irLoadListShortcutNode = new LoadListShortcutNode(location);\n-                irLoadListShortcutNode.setExpressionType(scriptScope.getDecoration(userBraceNode, ValueType.class).getValueType());\n+                irLoadListShortcutNode.attachDecoration(\n+                        new IRDExpressionType(scriptScope.getDecoration(userBraceNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NzI4NA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510357284", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T18:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1702,8 +1687,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n \n             if (write == false || compound) {\n                 LoadListShortcutNode irLoadListShortcutNode = new LoadListShortcutNode(location);\n-                irLoadListShortcutNode.attachDecoration(\n-                        new IRDExpressionType(scriptScope.getDecoration(userBraceNode, ValueType.class).getValueType()));\n+                irLoadListShortcutNode.setExpressionType(scriptScope.getDecoration(userBraceNode, ValueType.class).getValueType());\n                 irLoadListShortcutNode.setGetter(\n                         scriptScope.getDecoration(userBraceNode, GetterPainlessMethod.class).getGetterPainlessMethod());\n                 irLoadNode = irLoadListShortcutNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjQyNA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510272424", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:51:39Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1715,7 +1731,8 @@ public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n                 irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n             }\n \n-            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n+            irCallSubDefNode.attachDecoration(\n+                    new IRDExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NzIwMg==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510357202", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T18:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1731,8 +1715,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n                 irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n             }\n \n-            irCallSubDefNode.attachDecoration(\n-                    new IRDExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType()));\n+            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n             irCallSubDefNode.setName(userCallNode.getMethodName());\n             irExpressionNode = irCallSubDefNode;\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjUyMg==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510272522", "bodyText": "pull into intermediate variable.", "author": "stu-elastic", "createdAt": "2020-10-22T15:51:46Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1751,7 +1768,8 @@ public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n                 irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n             }\n \n-            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n+            irInvokeCallNode.attachDecoration(\n+                    new IRDExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType()));", "originalCommit": "e025b887a4018c746f944293b59f4276a6d43170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1ODkwNA==", "url": "https://github.com/elastic/elasticsearch/pull/63894#discussion_r510358904", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-22T18:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 79722caccd6..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1768,8 +1751,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n                 irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n             }\n \n-            irInvokeCallNode.attachDecoration(\n-                    new IRDExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType()));\n+            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n             irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n             irInvokeCallNode.setBox(boxType);\n             irExpressionNode = irInvokeCallNode;\n"}}, {"oid": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "url": "https://github.com/elastic/elasticsearch/commit/d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "message": "Merge branch 'master' into proto3", "committedDate": "2020-10-22T17:01:04Z", "type": "commit"}, {"oid": "b22e832b888257ab748b0191a868171928c09629", "url": "https://github.com/elastic/elasticsearch/commit/b22e832b888257ab748b0191a868171928c09629", "message": "Merge branch 'proto3' into proto4", "committedDate": "2020-10-22T17:01:14Z", "type": "commit"}, {"oid": "376eda6647a7ce28433183830d3956c7faab513f", "url": "https://github.com/elastic/elasticsearch/commit/376eda6647a7ce28433183830d3956c7faab513f", "message": "response to pr comments", "committedDate": "2020-10-22T18:09:32Z", "type": "commit"}]}