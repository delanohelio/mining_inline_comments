{"pr_number": 62134, "pr_title": "EQL: Remove unused classes from reponse API", "pr_createdAt": "2020-09-08T21:13:00Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62134", "timeline": [{"oid": "b6a5532ef4a38f7aab44feae45427efe8666c058", "url": "https://github.com/elastic/elasticsearch/commit/b6a5532ef4a38f7aab44feae45427efe8666c058", "message": "EQL: Remove unused classes from reponse API\n\nRemove Count class and related artifacts since that functionality is not\n(yet) available.\nUpdate parser name for better error reporting.\n\nFix #62131", "committedDate": "2020-09-08T21:09:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5OTU1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62134#discussion_r485199556", "bodyText": "The name here looks like a mistake (left-over from count I presume) so I've changed it to hits instead to preserve the current naming conventions.", "author": "costin", "createdAt": "2020-09-08T21:13:59Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchResponse.java", "diffHunk": "@@ -292,123 +292,41 @@ public boolean equals(Object o) {\n         }\n     }\n \n-    // Count\n-    public static class Count {\n-        private static final class Fields {\n-            static final String COUNT = \"_count\";\n-            static final String KEYS = \"_keys\";\n-            static final String PERCENT = \"_percent\";\n-        }\n-\n-        private final int count;\n-        private final List<Object> keys;\n-        private final float percent;\n-\n-        private static final ParseField COUNT = new ParseField(Fields.COUNT);\n-        private static final ParseField KEYS = new ParseField(Fields.KEYS);\n-        private static final ParseField PERCENT = new ParseField(Fields.PERCENT);\n-\n-        private static final ConstructingObjectParser<EqlSearchResponse.Count, Void> PARSER =\n-            new ConstructingObjectParser<>(\"eql/search_response_count\", true,\n-                args -> {\n-                    int i = 0;\n-                    int count = (int) args[i++];\n-                    @SuppressWarnings(\"unchecked\") List<Object> joinKeys = (List<Object>) args[i++];\n-                    float percent = (float) args[i];\n-                    return new EqlSearchResponse.Count(count, joinKeys, percent);\n-                });\n-\n-        static {\n-            PARSER.declareInt(ConstructingObjectParser.constructorArg(), COUNT);\n-            PARSER.declareFieldArray(constructorArg(), (p, c) -> XContentParserUtils.parseFieldsValue(p), KEYS,\n-                ObjectParser.ValueType.VALUE_ARRAY);\n-            PARSER.declareFloat(ConstructingObjectParser.constructorArg(), PERCENT);\n-        }\n-\n-        public Count(int count, List<Object> keys, float percent) {\n-            this.count = count;\n-            this.keys = keys == null ? Collections.emptyList() : keys;\n-            this.percent = percent;\n-        }\n-\n-        public static Count fromXContent(XContentParser parser) {\n-            return PARSER.apply(parser, null);\n-        }\n-\n-        public int count() {\n-            return count;\n-        }\n-\n-        public List<Object> keys() {\n-            return keys;\n-        }\n-\n-        public float percent() {\n-            return percent;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(count, keys, percent);\n-        }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) {\n-                return true;\n-            }\n-            if (o == null || getClass() != o.getClass()) {\n-                return false;\n-            }\n-            Count that = (Count) o;\n-            return Objects.equals(count, that.count)\n-                && Objects.equals(keys, that.keys)\n-                && Objects.equals(percent, that.percent);\n-        }\n-    }\n-\n     // Hits\n     public static class Hits {\n-        public static final Hits EMPTY = new Hits(null, null, null, null);\n+        public static final Hits EMPTY = new Hits(null, null, null);\n \n         private final List<Event> events;\n         private final List<Sequence> sequences;\n-        private final List<Count> counts;\n         private final TotalHits totalHits;\n \n         private static final class Fields {\n             static final String TOTAL = \"total\";\n             static final String EVENTS = \"events\";\n             static final String SEQUENCES = \"sequences\";\n-            static final String COUNTS = \"counts\";\n         }\n \n-        public Hits(@Nullable List<Event> events, @Nullable List<Sequence> sequences, @Nullable List<Count> counts,\n-                    @Nullable TotalHits totalHits) {\n+        public Hits(@Nullable List<Event> events, @Nullable List<Sequence> sequences, @Nullable TotalHits totalHits) {\n             this.events = events;\n             this.sequences = sequences;\n-            this.counts = counts;\n             this.totalHits = totalHits;\n         }\n \n         private static final ConstructingObjectParser<EqlSearchResponse.Hits, Void> PARSER =\n-            new ConstructingObjectParser<>(\"eql/search_response_count\", true,", "originalCommit": "b6a5532ef4a38f7aab44feae45427efe8666c058", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5OTkzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/62134#discussion_r485199935", "bodyText": "This file is just added in with small clean-up (removal of unused variables).", "author": "costin", "createdAt": "2020-09-08T21:14:46Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/optimizer/OptimizerTests.java", "diffHunk": "@@ -69,7 +69,6 @@\n ", "originalCommit": "b6a5532ef4a38f7aab44feae45427efe8666c058", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMjY5OA==", "url": "https://github.com/elastic/elasticsearch/pull/62134#discussion_r485212698", "bodyText": "This will break requests in mixed clusters, are we ok with that?", "author": "imotov", "createdAt": "2020-09-08T21:43:14Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchResponse.java", "diffHunk": "@@ -512,7 +409,6 @@ public Hits(StreamInput in) throws IOException {\n             }\n             events = in.readBoolean() ? in.readList(Event::new) : null;\n             sequences = in.readBoolean() ? in.readList(Sequence::new) : null;\n-            counts = in.readBoolean() ? in.readList(Count::new) : null;", "originalCommit": "b6a5532ef4a38f7aab44feae45427efe8666c058", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1ODU1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62134#discussion_r485358555", "bodyText": "Thanks for flagging this.\nEQL is currently experimental so the BWC compatibility is loose however I'd like where possible, to avoid this situation. I've added this topic to the agenda since I can see other areas where this might affect us (like using fields API) and we could use more testing.", "author": "costin", "createdAt": "2020-09-09T06:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMjY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNDU1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/62134#discussion_r485804557", "bodyText": "Yeah, I am not sure that experimental necessarily means we don't support rolling restarts. My interpretation was that we can break it if there is a compelling reason for it. So, I would lean towards supporting it whenever possible. Two things we need to keep in mind: 1) if we will ever promote it to non-experimental in some 7.x release this might break rolling upgrade in 7.x. and 2) if we will promote it sometime in 8.x, we should be careful about breaking BWC with 7.last.", "author": "imotov", "createdAt": "2020-09-09T17:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMjY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQyNTE5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/62134#discussion_r497425197", "bodyText": "I've added a compatibility branch just to be safe. We never created Counter there's no actual instance to be read, just the bool which should be false always.\nNevertheless I've added the previous code since it was small.", "author": "costin", "createdAt": "2020-09-30T11:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMjY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "7485b829e4d2e028327899e94e4131e58af32392", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchResponse.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchResponse.java\nindex 44fcd599554..81e342fb665 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchResponse.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchResponse.java\n\n@@ -409,6 +410,19 @@ public class EqlSearchResponse extends ActionResponse implements ToXContentObjec\n             }\n             events = in.readBoolean() ? in.readList(Event::new) : null;\n             sequences = in.readBoolean() ? in.readList(Sequence::new) : null;\n+\n+            // compatibility with 7.9 experimental release\n+            if (in.getVersion().before(Version.V_7_10_0)) {\n+                if (in.readBoolean()) {\n+                    // old read count\n+                    in.readList(input -> {\n+                        input.readVInt();\n+                        input.readGenericValue();\n+                        input.readFloat();\n+                        return null;\n+                    });\n+                }\n+            }\n         }\n \n         @Override\n"}}, {"oid": "6e8792f3a7a80d8b6f7a1508a984c3c55a911090", "url": "https://github.com/elastic/elasticsearch/commit/6e8792f3a7a80d8b6f7a1508a984c3c55a911090", "message": "Merge remote-tracking branch 'remotes/upstream/master' into fix/62131", "committedDate": "2020-09-30T11:01:11Z", "type": "commit"}, {"oid": "7485b829e4d2e028327899e94e4131e58af32392", "url": "https://github.com/elastic/elasticsearch/commit/7485b829e4d2e028327899e94e4131e58af32392", "message": "Keep backwards compatibility", "committedDate": "2020-09-30T11:05:33Z", "type": "commit"}]}