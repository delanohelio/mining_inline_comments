{"pr_number": 56289, "pr_title": "Use snapshot information to build searchable snapshot store MetadataSnapshot", "pr_createdAt": "2020-05-06T16:09:05Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56289", "timeline": [{"oid": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61", "url": "https://github.com/elastic/elasticsearch/commit/0abaa8d922dc0d12666c4e01b3b1f3b61455ea61", "message": "Use ChecksumBlobContainerIndexInput", "committedDate": "2020-05-06T15:50:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzU1OA==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417558", "bodyText": "Not sure EOFException is right here, maybe an IAE would be appropriate. I think it'd be good to assert that this doesn't happen too.", "author": "DaveCTurner", "createdAt": "2020-05-07T10:57:56Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");", "originalCommit": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMDM3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421520371", "bodyText": "Right, that's a bad copy paste.", "author": "tlrx", "createdAt": "2020-05-07T13:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "709e64424108b0863a96884cc682ad7bbae61d5a", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\nindex 103d955dcf9..76c9017ba84 100644\n--- a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\n+++ b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\n\n@@ -16,6 +16,7 @@ import org.elasticsearch.index.store.Store;\n \n import java.io.EOFException;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Objects;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzcyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417721", "bodyText": "Can we assert that this is not called as well?", "author": "DaveCTurner", "createdAt": "2020-05-07T10:58:14Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");\n+        }\n+        position = Math.toIntExact(pos - offset);\n+    }\n+\n+    @Override\n+    public IndexInput slice(String sliceDescription, long offset, long length) {\n+        throw new UnsupportedOperationException();", "originalCommit": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMDUwMg==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421520502", "bodyText": "Ok", "author": "tlrx", "createdAt": "2020-05-07T13:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzcyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "709e64424108b0863a96884cc682ad7bbae61d5a", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\nindex 103d955dcf9..76c9017ba84 100644\n--- a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\n+++ b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\n\n@@ -16,6 +16,7 @@ import org.elasticsearch.index.store.Store;\n \n import java.io.EOFException;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Objects;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzc0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421417743", "bodyText": "Can we assert that this is not called as well?", "author": "DaveCTurner", "createdAt": "2020-05-07T10:58:16Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;\n+    }\n+\n+    @Override\n+    public long length() {\n+        return length;\n+    }\n+\n+    @Override\n+    public long getFilePointer() {\n+        return offset + position;\n+    }\n+\n+    @Override\n+    public byte readByte() throws IOException {\n+        if (getFilePointer() >= length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        return checksum[position++];\n+    }\n+\n+    @Override\n+    public void readBytes(final byte[] b, final int off, int len) throws IOException {\n+        if (getFilePointer() + len > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        }\n+        System.arraycopy(checksum, position, b, off, len);\n+        position += len;\n+    }\n+\n+    @Override\n+    public void seek(long pos) throws IOException {\n+        if (pos < 0) {\n+            throw new IllegalArgumentException(\"Seeking to negative position: \" + pos);\n+        } else if (pos > length()) {\n+            throw new EOFException(\"seek past EOF\");\n+        } else if (pos < offset) {\n+            throw new EOFException(\"Can't read before footer checksum\");\n+        }\n+        position = Math.toIntExact(pos - offset);\n+    }\n+\n+    @Override\n+    public IndexInput slice(String sliceDescription, long offset, long length) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public IndexInput clone() {\n+        throw new UnsupportedOperationException();", "originalCommit": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMDU3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421520572", "bodyText": "ok", "author": "tlrx", "createdAt": "2020-05-07T13:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "709e64424108b0863a96884cc682ad7bbae61d5a", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\nindex 103d955dcf9..76c9017ba84 100644\n--- a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\n+++ b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\n\n@@ -16,6 +16,7 @@ import org.elasticsearch.index.store.Store;\n \n import java.io.EOFException;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Objects;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODk2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421418965", "bodyText": "Should we set position = -offset here too? I think it's strange, although probably irrelevant, that a newly-opened index input has a nonzero file pointer.", "author": "DaveCTurner", "createdAt": "2020-05-07T11:00:38Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.index.store.checksum;\n+\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.ByteBuffersDataOutput;\n+import org.apache.lucene.store.ByteBuffersIndexOutput;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.elasticsearch.index.store.Store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link IndexInput} that can only be used to verify footer checksums.\n+ */\n+public class ChecksumBlobContainerIndexInput extends IndexInput {\n+\n+    private final byte[] checksum;\n+    private final long length;\n+    private final long offset;\n+\n+    private int position;\n+\n+    private ChecksumBlobContainerIndexInput(String name, long length, byte[] checksum, IOContext context) {\n+        super(\"ChecksumBlobContainerIndexInput(\" + name + ')');\n+        ensureReadOnceChecksumContext(context);\n+        assert checksum.length == CodecUtil.footerLength();\n+        this.checksum = Objects.requireNonNull(checksum);\n+        this.length = length;\n+        this.offset = length - this.checksum.length;\n+        assert offset > 0;", "originalCommit": "0abaa8d922dc0d12666c4e01b3b1f3b61455ea61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MDMwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421440305", "bodyText": "(that would imply that we'd need to throw appropriate exceptions if position < 0 in readByte() and readBytes() too)", "author": "DaveCTurner", "createdAt": "2020-05-07T11:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMTQyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56289#discussion_r421521429", "bodyText": "Actually I think it's easier to reason about using a global position and adjust it only when reading the checksum bytes. I pushed 709e644 please let me know what you think", "author": "tlrx", "createdAt": "2020-05-07T13:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "709e64424108b0863a96884cc682ad7bbae61d5a", "chunk": "diff --git a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\nindex 103d955dcf9..76c9017ba84 100644\n--- a/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\n+++ b/x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/checksum/ChecksumBlobContainerIndexInput.java\n\n@@ -16,6 +16,7 @@ import org.elasticsearch.index.store.Store;\n \n import java.io.EOFException;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Objects;\n \n /**\n"}}, {"oid": "709e64424108b0863a96884cc682ad7bbae61d5a", "url": "https://github.com/elastic/elasticsearch/commit/709e64424108b0863a96884cc682ad7bbae61d5a", "message": "feedback", "committedDate": "2020-05-07T13:50:55Z", "type": "commit"}, {"oid": "35f0a49d1d496f0ca95f338a590c224c673b580a", "url": "https://github.com/elastic/elasticsearch/commit/35f0a49d1d496f0ca95f338a590c224c673b580a", "message": "Merge branch 'master' into checksum-footers-searchable-snapshots", "committedDate": "2020-05-07T14:27:04Z", "type": "commit"}]}