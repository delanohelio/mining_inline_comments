{"pr_number": 52260, "pr_title": "[ML] Add _cat/ml/data_frame/analytics API", "pr_createdAt": "2020-02-12T11:50:04Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52260", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNTYyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52260#discussion_r378215621", "bodyText": "This should probably default to true, especially since the expansion coverage is already checked in the get configs request. There might be a race condition between getting the configs and the stats.", "author": "benwtrent", "createdAt": "2020-02-12T12:17:50Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml.rest.cat;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.action.RestActionListener;\n+import org.elasticsearch.rest.action.RestResponseListener;\n+import org.elasticsearch.rest.action.cat.AbstractCatAction;\n+import org.elasticsearch.rest.action.cat.RestTable;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction;\n+import org.elasticsearch.xpack.core.ml.action.GetDataFrameAnalyticsStatsAction.Response.Stats;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.utils.PhaseProgress;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toMap;\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestCatDataFrameAnalyticsAction extends AbstractCatAction {\n+\n+    @Override\n+    public List<Route> routes() {\n+        return unmodifiableList(asList(\n+            new Route(GET, \"_cat/ml/data_frame/analytics/{\" + DataFrameAnalyticsConfig.ID.getPreferredName() + \"}\"),\n+            new Route(GET, \"_cat/ml/data_frame/analytics\")));\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"cat_ml_get_data_frame_analytics_action\";\n+    }\n+\n+    @Override\n+    protected RestChannelConsumer doCatRequest(RestRequest restRequest, NodeClient client) {\n+        String dataFrameAnalyticsId = restRequest.param(DataFrameAnalyticsConfig.ID.getPreferredName());\n+        if (Strings.isNullOrEmpty(dataFrameAnalyticsId)) {\n+            dataFrameAnalyticsId = MetaData.ALL;\n+        }\n+\n+        GetDataFrameAnalyticsAction.Request getRequest = new GetDataFrameAnalyticsAction.Request(dataFrameAnalyticsId);\n+        getRequest.setAllowNoResources(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getRequest.isAllowNoResources()));\n+\n+        GetDataFrameAnalyticsStatsAction.Request getStatsRequest = new GetDataFrameAnalyticsStatsAction.Request(dataFrameAnalyticsId);\n+        getStatsRequest.setAllowNoMatch(\n+            restRequest.paramAsBoolean(\n+                GetDataFrameAnalyticsStatsAction.Request.ALLOW_NO_MATCH.getPreferredName(), getStatsRequest.isAllowNoMatch()));", "originalCommit": "6c4987a482f77c4d3bb8ade3df143419ab9f1a7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNTY1OA==", "url": "https://github.com/elastic/elasticsearch/pull/52260#discussion_r378225658", "bodyText": "The initial value of the field underlying getStatsRequest.isAllowNoMatch() is already true.\nDo you think I should make the default value an explicit true literal here?", "author": "przemekwitek", "createdAt": "2020-02-12T12:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2OTQ0OA==", "url": "https://github.com/elastic/elasticsearch/pull/52260#discussion_r378269448", "bodyText": "yes, if the rest request has allow_no_match=false, I think we should only take that into account for the config get.", "author": "benwtrent", "createdAt": "2020-02-12T14:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxNDIxNg==", "url": "https://github.com/elastic/elasticsearch/pull/52260#discussion_r378714216", "bodyText": "Done.", "author": "przemekwitek", "createdAt": "2020-02-13T08:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNTYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "84bdb12f62bd8f6cf401014cf74ab60a497db5bf", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java\nindex f46c32edf15..f98d34ffd66 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/cat/RestCatDataFrameAnalyticsAction.java\n\n@@ -92,13 +92,17 @@ public class RestCatDataFrameAnalyticsAction extends AbstractCatAction {\n             .startHeaders()\n             // DFA config info\n             .addCell(\"id\", TableColumnAttributeBuilder.builder(\"the id\").build())\n+            .addCell(\"type\",\n+                TableColumnAttributeBuilder.builder(\"analysis type\")\n+                    .setAliases(\"t\")\n+                    .build())\n             .addCell(\"create_time\",\n                 TableColumnAttributeBuilder.builder(\"job creation time\")\n                     .setAliases(\"ct\", \"createTime\")\n                     .build())\n-            .addCell(\"type\",\n-                TableColumnAttributeBuilder.builder(\"analysis type\")\n-                    .setAliases(\"t\")\n+            .addCell(\"version\",\n+                TableColumnAttributeBuilder.builder(\"the version of Elasticsearch when the analytics was created\", false)\n+                    .setAliases(\"v\")\n                     .build())\n             .addCell(\"source_index\",\n                 TableColumnAttributeBuilder.builder(\"source index\", false)\n"}}, {"oid": "7fa69df8644fb965fe7ca5f450d31fe9c3df6740", "url": "https://github.com/elastic/elasticsearch/commit/7fa69df8644fb965fe7ca5f450d31fe9c3df6740", "message": "[ML] Add _cat/ml/data_frame/analytics API", "committedDate": "2020-02-12T13:07:26Z", "type": "commit"}, {"oid": "84bdb12f62bd8f6cf401014cf74ab60a497db5bf", "url": "https://github.com/elastic/elasticsearch/commit/84bdb12f62bd8f6cf401014cf74ab60a497db5bf", "message": "Apply review comments", "committedDate": "2020-02-12T13:07:26Z", "type": "commit"}, {"oid": "84bdb12f62bd8f6cf401014cf74ab60a497db5bf", "url": "https://github.com/elastic/elasticsearch/commit/84bdb12f62bd8f6cf401014cf74ab60a497db5bf", "message": "Apply review comments", "committedDate": "2020-02-12T13:07:26Z", "type": "forcePushed"}, {"oid": "ff103567470d69d08b0741b6fa22e7b652a624b2", "url": "https://github.com/elastic/elasticsearch/commit/ff103567470d69d08b0741b6fa22e7b652a624b2", "message": "Apply review comment", "committedDate": "2020-02-13T08:32:39Z", "type": "commit"}]}