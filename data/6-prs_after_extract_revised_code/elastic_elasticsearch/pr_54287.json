{"pr_number": 54287, "pr_title": "Add XContentHelper.childBytes() method", "pr_createdAt": "2020-03-26T16:33:06Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54287", "timeline": [{"oid": "e6166733be3359098010bd91ff31beb54ab2cffb", "url": "https://github.com/elastic/elasticsearch/commit/e6166733be3359098010bd91ff31beb54ab2cffb", "message": "Add XContentHelper.childBytes() method", "committedDate": "2020-03-26T16:26:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxNjYzMw==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398716633", "bodyText": "This is in XContentHelper rather than directly on XContentParser because we want to use BytesReference here, which is in server due to its lucene dependency :(", "author": "romseygeek", "createdAt": "2020-03-26T16:34:08Z", "path": "server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java", "diffHunk": "@@ -383,4 +383,58 @@ public static XContentType xContentType(BytesReference bytes) {\n         BytesRef br = bytes.toBytesRef();\n         return XContentFactory.xContentType(br.bytes, br.offset, br.length);\n     }\n+\n+    /**\n+     * Returns the contents of an object as an unparsed BytesReference\n+     *\n+     * This is useful for things like mappings where we're copying bytes around but don't\n+     * actually need to parse their contents, and so avoids building large maps of maps\n+     * unnecessarily\n+     */\n+    public static BytesReference childBytes(XContentParser parser) throws IOException {", "originalCommit": "e6166733be3359098010bd91ff31beb54ab2cffb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6adc5e7f4e1934e89555c81448be8b63804ee7c2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java b/server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java\nindex 243f7586a5e..306a65fd22e 100644\n--- a/server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java\n+++ b/server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java\n\n@@ -392,49 +392,14 @@ public class XContentHelper {\n      * unnecessarily\n      */\n     public static BytesReference childBytes(XContentParser parser) throws IOException {\n-        if (parser.currentToken() == null) {\n-            parser.nextToken();\n+        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {\n+            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n+                throw new XContentParseException(parser.getTokenLocation(),\n+                    \"Expected [START_OBJECT] but got [\" + parser.currentToken() + \"]\");\n+            }\n         }\n         XContentBuilder builder = XContentBuilder.builder(parser.contentType().xContent());\n-        int depth = 0;\n-        do {\n-            switch (parser.nextToken()) {\n-                case START_OBJECT:\n-                    depth++;\n-                    builder.startObject();\n-                    break;\n-                case END_OBJECT:\n-                    depth--;\n-                    builder.endObject();\n-                    break;\n-                case START_ARRAY:\n-                    builder.startArray();\n-                    break;\n-                case END_ARRAY:\n-                    builder.endArray();\n-                    break;\n-                case FIELD_NAME:\n-                    builder.field(parser.currentName());\n-                    break;\n-                case VALUE_STRING:\n-                    builder.value(parser.text());\n-                    break;\n-                case VALUE_NUMBER:\n-                    builder.value(parser.numberValue());\n-                    break;\n-                case VALUE_BOOLEAN:\n-                    builder.value(parser.booleanValue());\n-                    break;\n-                case VALUE_EMBEDDED_OBJECT:\n-                    builder.value(parser.binaryValue());\n-                    break;\n-                case VALUE_NULL:\n-                    builder.nullValue();\n-                    break;\n-                default:\n-                    throw new XContentParseException(parser.getTokenLocation(), \"Unknown token type [\" + parser.currentToken() + \"]\");\n-            }\n-        } while (depth > 0);\n+        builder.copyCurrentStructure(parser);\n         return BytesReference.bytes(builder);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxNzIyMw==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398717223", "bodyText": "I'm not sure that this is correct, and I have a TODO in the corresponding test because I'm not sure under what circumstances we actually get an embedded object in xcontent.", "author": "romseygeek", "createdAt": "2020-03-26T16:34:56Z", "path": "server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java", "diffHunk": "@@ -383,4 +383,58 @@ public static XContentType xContentType(BytesReference bytes) {\n         BytesRef br = bytes.toBytesRef();\n         return XContentFactory.xContentType(br.bytes, br.offset, br.length);\n     }\n+\n+    /**\n+     * Returns the contents of an object as an unparsed BytesReference\n+     *\n+     * This is useful for things like mappings where we're copying bytes around but don't\n+     * actually need to parse their contents, and so avoids building large maps of maps\n+     * unnecessarily\n+     */\n+    public static BytesReference childBytes(XContentParser parser) throws IOException {\n+        if (parser.currentToken() == null) {\n+            parser.nextToken();\n+        }\n+        XContentBuilder builder = XContentBuilder.builder(parser.contentType().xContent());\n+        int depth = 0;\n+        do {\n+            switch (parser.nextToken()) {\n+                case START_OBJECT:\n+                    depth++;\n+                    builder.startObject();\n+                    break;\n+                case END_OBJECT:\n+                    depth--;\n+                    builder.endObject();\n+                    break;\n+                case START_ARRAY:\n+                    builder.startArray();\n+                    break;\n+                case END_ARRAY:\n+                    builder.endArray();\n+                    break;\n+                case FIELD_NAME:\n+                    builder.field(parser.currentName());\n+                    break;\n+                case VALUE_STRING:\n+                    builder.value(parser.text());\n+                    break;\n+                case VALUE_NUMBER:\n+                    builder.value(parser.numberValue());\n+                    break;\n+                case VALUE_BOOLEAN:\n+                    builder.value(parser.booleanValue());\n+                    break;\n+                case VALUE_EMBEDDED_OBJECT:\n+                    builder.value(parser.binaryValue());", "originalCommit": "e6166733be3359098010bd91ff31beb54ab2cffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNDc0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398724746", "bodyText": "Its pretty rare. IIRC json doesn't send it to us.\nI wonder if we can use copyCurrentStructure for this actually.", "author": "nik9000", "createdAt": "2020-03-26T16:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxNzIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczNzcyOA==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398737728", "bodyText": "Ooh, copyConcurrentStructure makes this much easier, nice one.", "author": "romseygeek", "createdAt": "2020-03-26T17:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxNzIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "6adc5e7f4e1934e89555c81448be8b63804ee7c2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java b/server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java\nindex 243f7586a5e..306a65fd22e 100644\n--- a/server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java\n+++ b/server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java\n\n@@ -392,49 +392,14 @@ public class XContentHelper {\n      * unnecessarily\n      */\n     public static BytesReference childBytes(XContentParser parser) throws IOException {\n-        if (parser.currentToken() == null) {\n-            parser.nextToken();\n+        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {\n+            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n+                throw new XContentParseException(parser.getTokenLocation(),\n+                    \"Expected [START_OBJECT] but got [\" + parser.currentToken() + \"]\");\n+            }\n         }\n         XContentBuilder builder = XContentBuilder.builder(parser.contentType().xContent());\n-        int depth = 0;\n-        do {\n-            switch (parser.nextToken()) {\n-                case START_OBJECT:\n-                    depth++;\n-                    builder.startObject();\n-                    break;\n-                case END_OBJECT:\n-                    depth--;\n-                    builder.endObject();\n-                    break;\n-                case START_ARRAY:\n-                    builder.startArray();\n-                    break;\n-                case END_ARRAY:\n-                    builder.endArray();\n-                    break;\n-                case FIELD_NAME:\n-                    builder.field(parser.currentName());\n-                    break;\n-                case VALUE_STRING:\n-                    builder.value(parser.text());\n-                    break;\n-                case VALUE_NUMBER:\n-                    builder.value(parser.numberValue());\n-                    break;\n-                case VALUE_BOOLEAN:\n-                    builder.value(parser.booleanValue());\n-                    break;\n-                case VALUE_EMBEDDED_OBJECT:\n-                    builder.value(parser.binaryValue());\n-                    break;\n-                case VALUE_NULL:\n-                    builder.nullValue();\n-                    break;\n-                default:\n-                    throw new XContentParseException(parser.getTokenLocation(), \"Unknown token type [\" + parser.currentToken() + \"]\");\n-            }\n-        } while (depth > 0);\n+        builder.copyCurrentStructure(parser);\n         return BytesReference.bytes(builder);\n     }\n }\n"}}, {"oid": "17183905e1e4e0a0a54719dfdd70d19206bc007e", "url": "https://github.com/elastic/elasticsearch/commit/17183905e1e4e0a0a54719dfdd70d19206bc007e", "message": "precommit", "committedDate": "2020-03-26T16:44:23Z", "type": "commit"}, {"oid": "6adc5e7f4e1934e89555c81448be8b63804ee7c2", "url": "https://github.com/elastic/elasticsearch/commit/6adc5e7f4e1934e89555c81448be8b63804ee7c2", "message": "Use copyConcurrentStructure", "committedDate": "2020-03-26T17:01:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MTgwNA==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398751804", "bodyText": "Is this something we need to think about in this PR?", "author": "pugnascotia", "createdAt": "2020-03-26T17:21:39Z", "path": "server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java", "diffHunk": "@@ -105,4 +106,104 @@ public void testToXContent() throws IOException {\n             }\n         }\n     }\n+\n+    public void testChildBytes() throws IOException {\n+\n+        for (XContentType xContentType : XContentType.values()) {\n+\n+            // TODO how to deal with embedded objects?", "originalCommit": "6adc5e7f4e1934e89555c81448be8b63804ee7c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NDgxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398754819", "bodyText": "I don't think it is if we're using copyCurrentStructure. It'd be nice though.", "author": "nik9000", "createdAt": "2020-03-26T17:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MTgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5Nzg4OA==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398797888", "bodyText": "It looks as though we do use this in a couple of places, so I'll update the PR accordingly; it gets generated by XContentBuilder.field(String, byte[])", "author": "romseygeek", "createdAt": "2020-03-26T18:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8cb5522503731c1f5ac833647e99ac87d2d2cd23", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java b/server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java\nindex b4bb0e7abdd..25684de438f 100644\n--- a/server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java\n+++ b/server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java\n\n@@ -111,25 +112,14 @@ public class XContentHelperTests extends ESTestCase {\n \n         for (XContentType xContentType : XContentType.values()) {\n \n-            // TODO how to deal with embedded objects?\n-\n             XContentBuilder builder = XContentBuilder.builder(xContentType.xContent());\n-            builder.startObject();\n-                builder.startObject(\"level1\");\n-                    builder.startObject(\"level2\");\n-                        builder.startObject(\"object\");\n-                            builder.field(\"text\", \"string\");\n-                            builder.field(\"number\", 10);\n-                        builder.endObject();\n-                        builder.startObject(\"object2\");\n-                            builder.field(\"boolean\", true);\n-                            builder.nullField(\"null\");\n-                            builder.startArray(\"array_of_strings\").value(\"string1\").value(\"string2\").endArray();\n-                        builder.endObject();\n-                    builder.endObject();\n-                    builder.field(\"field\", \"value\");\n-                builder.endObject();\n-            builder.endObject();\n+            builder.startObject().startObject(\"level1\");\n+            builder.startObject(\"level2\")\n+                .startObject(\"object\").field(\"text\", \"string\").field(\"number\", 10).endObject()\n+                .startObject(\"object2\").field(\"boolean\", true).nullField(\"null\")\n+                .startArray(\"array_of_strings\").value(\"string1\").value(\"string2\").endArray().endObject().endObject();\n+            builder.field(\"field\", \"value\");\n+            builder.endObject().endObject();\n             BytesReference input = BytesReference.bytes(builder);\n \n             BytesReference bytes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MzIyNg==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398753226", "bodyText": "When this code is (eventually) reformatted, the indentation for all these builder lines will be normalised. If you want to keep the indent, you could use extra braces to create new indent levels. Or you could build it from JSON.", "author": "pugnascotia", "createdAt": "2020-03-26T17:23:37Z", "path": "server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java", "diffHunk": "@@ -105,4 +106,104 @@ public void testToXContent() throws IOException {\n             }\n         }\n     }\n+\n+    public void testChildBytes() throws IOException {\n+\n+        for (XContentType xContentType : XContentType.values()) {\n+\n+            // TODO how to deal with embedded objects?\n+\n+            XContentBuilder builder = XContentBuilder.builder(xContentType.xContent());\n+            builder.startObject();\n+                builder.startObject(\"level1\");", "originalCommit": "6adc5e7f4e1934e89555c81448be8b63804ee7c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODM1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54287#discussion_r398798352", "bodyText": "I don't particularly mind losing the indent, it was to help me out while writing the test but isn't necessary.  We can't build from JSON because we're trying to test all possible xcontent formats.", "author": "romseygeek", "createdAt": "2020-03-26T18:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MzIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8cb5522503731c1f5ac833647e99ac87d2d2cd23", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java b/server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java\nindex b4bb0e7abdd..25684de438f 100644\n--- a/server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java\n+++ b/server/src/test/java/org/elasticsearch/common/xcontent/support/XContentHelperTests.java\n\n@@ -111,25 +112,14 @@ public class XContentHelperTests extends ESTestCase {\n \n         for (XContentType xContentType : XContentType.values()) {\n \n-            // TODO how to deal with embedded objects?\n-\n             XContentBuilder builder = XContentBuilder.builder(xContentType.xContent());\n-            builder.startObject();\n-                builder.startObject(\"level1\");\n-                    builder.startObject(\"level2\");\n-                        builder.startObject(\"object\");\n-                            builder.field(\"text\", \"string\");\n-                            builder.field(\"number\", 10);\n-                        builder.endObject();\n-                        builder.startObject(\"object2\");\n-                            builder.field(\"boolean\", true);\n-                            builder.nullField(\"null\");\n-                            builder.startArray(\"array_of_strings\").value(\"string1\").value(\"string2\").endArray();\n-                        builder.endObject();\n-                    builder.endObject();\n-                    builder.field(\"field\", \"value\");\n-                builder.endObject();\n-            builder.endObject();\n+            builder.startObject().startObject(\"level1\");\n+            builder.startObject(\"level2\")\n+                .startObject(\"object\").field(\"text\", \"string\").field(\"number\", 10).endObject()\n+                .startObject(\"object2\").field(\"boolean\", true).nullField(\"null\")\n+                .startArray(\"array_of_strings\").value(\"string1\").value(\"string2\").endArray().endObject().endObject();\n+            builder.field(\"field\", \"value\");\n+            builder.endObject().endObject();\n             BytesReference input = BytesReference.bytes(builder);\n \n             BytesReference bytes;\n"}}, {"oid": "8cb5522503731c1f5ac833647e99ac87d2d2cd23", "url": "https://github.com/elastic/elasticsearch/commit/8cb5522503731c1f5ac833647e99ac87d2d2cd23", "message": "Add test for embedded binary objects", "committedDate": "2020-03-27T10:39:40Z", "type": "commit"}, {"oid": "c811ff2dd841bdc86f49bab80a4718f159769294", "url": "https://github.com/elastic/elasticsearch/commit/c811ff2dd841bdc86f49bab80a4718f159769294", "message": "Merge branch 'master' into xcontent/readobjectasstring", "committedDate": "2020-03-27T11:51:10Z", "type": "commit"}]}