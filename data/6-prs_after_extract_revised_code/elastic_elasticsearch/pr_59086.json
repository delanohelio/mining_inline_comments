{"pr_number": 59086, "pr_title": "Add Inference Pipeline aggregation to HLRC", "pr_createdAt": "2020-07-06T16:08:10Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59086", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4NTI5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/59086#discussion_r450385296", "bodyText": "I think it would be cool to also have a test that adds at least one option. Possibly feature_importance calculation.", "author": "benwtrent", "createdAt": "2020-07-06T17:50:24Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/analytics/InferenceAggIT.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.analytics;\n+\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.ESRestHighLevelClientTestCase;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.indices.CreateIndexRequest;\n+import org.elasticsearch.client.ml.PutTrainedModelRequest;\n+import org.elasticsearch.client.ml.inference.TrainedModelConfig;\n+import org.elasticsearch.client.ml.inference.TrainedModelDefinition;\n+import org.elasticsearch.client.ml.inference.TrainedModelInput;\n+import org.elasticsearch.client.ml.inference.trainedmodel.RegressionConfig;\n+import org.elasticsearch.client.ml.inference.trainedmodel.tree.Tree;\n+import org.elasticsearch.client.ml.inference.trainedmodel.tree.TreeNode;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n+import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.elasticsearch.search.aggregations.metrics.AvgAggregationBuilder;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class InferenceAggIT extends ESRestHighLevelClientTestCase {\n+\n+    public void testInferenceAgg() throws IOException {\n+\n+        // create a very simple decision tree with a root node and 2 leaves\n+        List<String> featureNames = Collections.singletonList(\"cost\");\n+        Tree.Builder builder = Tree.builder();\n+        builder.setFeatureNames(featureNames);\n+        TreeNode.Builder root = builder.addJunction(0, 0, true, 1.0);\n+        int leftChild = root.getLeftChild();\n+        int rightChild = root.getRightChild();\n+        builder.addLeaf(leftChild, 10.0);\n+        builder.addLeaf(rightChild, 20.0);\n+\n+        final String modelId = \"simple_regression\";\n+        putTrainedModel(modelId, featureNames, builder.build());\n+\n+        final String index = \"inference-test-data\";\n+        indexData(index);\n+\n+        TermsAggregationBuilder termsAgg = new TermsAggregationBuilder(\"fruit_type\").field(\"fruit\");\n+        AvgAggregationBuilder avgAgg = new AvgAggregationBuilder(\"avg_cost\").field(\"cost\");\n+        termsAgg.subAggregation(avgAgg);\n+\n+        Map<String, String> bucketPaths = new HashMap<>();\n+        bucketPaths.put(\"cost\", \"avg_cost\");\n+        InferencePipelineAggregationBuilder inferenceAgg = new InferencePipelineAggregationBuilder(\"infer\", modelId,  bucketPaths);", "originalCommit": "4f892291cfd06a8181f5e0879547a8fbf7a6f43e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "244e8abdc9bd8de32dd6850022db6ba796831b01", "chunk": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/analytics/InferenceAggIT.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/analytics/InferenceAggIT.java\ndeleted file mode 100644\nindex fd530a23ec5..00000000000\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/analytics/InferenceAggIT.java\n+++ /dev/null\n\n@@ -1,127 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.elasticsearch.client.analytics;\n-\n-import org.elasticsearch.action.bulk.BulkRequest;\n-import org.elasticsearch.action.index.IndexRequest;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.action.search.SearchResponse;\n-import org.elasticsearch.action.support.WriteRequest;\n-import org.elasticsearch.client.ESRestHighLevelClientTestCase;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.indices.CreateIndexRequest;\n-import org.elasticsearch.client.ml.PutTrainedModelRequest;\n-import org.elasticsearch.client.ml.inference.TrainedModelConfig;\n-import org.elasticsearch.client.ml.inference.TrainedModelDefinition;\n-import org.elasticsearch.client.ml.inference.TrainedModelInput;\n-import org.elasticsearch.client.ml.inference.trainedmodel.RegressionConfig;\n-import org.elasticsearch.client.ml.inference.trainedmodel.tree.Tree;\n-import org.elasticsearch.client.ml.inference.trainedmodel.tree.TreeNode;\n-import org.elasticsearch.common.xcontent.XContentType;\n-import org.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n-import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n-import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n-import org.elasticsearch.search.aggregations.metrics.AvgAggregationBuilder;\n-\n-import java.io.IOException;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static org.hamcrest.Matchers.closeTo;\n-import static org.hamcrest.Matchers.equalTo;\n-\n-public class InferenceAggIT extends ESRestHighLevelClientTestCase {\n-\n-    public void testInferenceAgg() throws IOException {\n-\n-        // create a very simple decision tree with a root node and 2 leaves\n-        List<String> featureNames = Collections.singletonList(\"cost\");\n-        Tree.Builder builder = Tree.builder();\n-        builder.setFeatureNames(featureNames);\n-        TreeNode.Builder root = builder.addJunction(0, 0, true, 1.0);\n-        int leftChild = root.getLeftChild();\n-        int rightChild = root.getRightChild();\n-        builder.addLeaf(leftChild, 10.0);\n-        builder.addLeaf(rightChild, 20.0);\n-\n-        final String modelId = \"simple_regression\";\n-        putTrainedModel(modelId, featureNames, builder.build());\n-\n-        final String index = \"inference-test-data\";\n-        indexData(index);\n-\n-        TermsAggregationBuilder termsAgg = new TermsAggregationBuilder(\"fruit_type\").field(\"fruit\");\n-        AvgAggregationBuilder avgAgg = new AvgAggregationBuilder(\"avg_cost\").field(\"cost\");\n-        termsAgg.subAggregation(avgAgg);\n-\n-        Map<String, String> bucketPaths = new HashMap<>();\n-        bucketPaths.put(\"cost\", \"avg_cost\");\n-        InferencePipelineAggregationBuilder inferenceAgg = new InferencePipelineAggregationBuilder(\"infer\", modelId,  bucketPaths);\n-        termsAgg.subAggregation(inferenceAgg);\n-\n-        SearchRequest search = new SearchRequest(index);\n-        search.source().aggregation(termsAgg);\n-        SearchResponse response = highLevelClient().search(search, RequestOptions.DEFAULT);\n-        ParsedTerms terms = response.getAggregations().get(\"fruit_type\");\n-        List<? extends Terms.Bucket> buckets = terms.getBuckets();\n-        {\n-            assertThat(buckets.get(0).getKey(), equalTo(\"apple\"));\n-            ParsedInference inference = buckets.get(0).getAggregations().get(\"infer\");\n-            assertThat((Double) inference.getValue(), closeTo(20.0, 0.01));\n-            assertNull(inference.getWarning());\n-            assertNull(inference.getFeatureImportance());\n-            assertNull(inference.getTopClasses());\n-        }\n-        {\n-            assertThat(buckets.get(1).getKey(), equalTo(\"banana\"));\n-            ParsedInference inference = buckets.get(1).getAggregations().get(\"infer\");\n-            assertThat((Double) inference.getValue(), closeTo(10.0, 0.01));\n-            assertNull(inference.getWarning());\n-            assertNull(inference.getFeatureImportance());\n-            assertNull(inference.getTopClasses());\n-        }\n-    }\n-\n-    private void putTrainedModel(String modelId, List<String> inputFields, Tree tree) throws IOException {\n-        TrainedModelDefinition definition = new TrainedModelDefinition.Builder().setTrainedModel(tree).build();\n-        TrainedModelConfig trainedModelConfig = TrainedModelConfig.builder()\n-            .setDefinition(definition)\n-            .setModelId(modelId)\n-            .setInferenceConfig(new RegressionConfig())\n-            .setInput(new TrainedModelInput(inputFields))\n-            .setDescription(\"test model\")\n-            .build();\n-        highLevelClient().machineLearning().putTrainedModel(new PutTrainedModelRequest(trainedModelConfig), RequestOptions.DEFAULT);\n-    }\n-\n-    private void indexData(String index) throws IOException {\n-        CreateIndexRequest create = new CreateIndexRequest(index);\n-        create.mapping(\"{\\\"properties\\\": {\\\"fruit\\\": {\\\"type\\\": \\\"keyword\\\"},\" +\n-            \"\\\"cost\\\": {\\\"type\\\": \\\"double\\\"}}}\", XContentType.JSON);\n-        highLevelClient().indices().create(create, RequestOptions.DEFAULT);\n-        BulkRequest bulk = new BulkRequest(index).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n-        bulk.add(new IndexRequest().source(XContentType.JSON, \"fruit\", \"apple\", \"cost\", \"1.2\"));\n-        bulk.add(new IndexRequest().source(XContentType.JSON, \"fruit\", \"banana\", \"cost\", \"0.8\"));\n-        bulk.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n-        highLevelClient().bulk(bulk, RequestOptions.DEFAULT);\n-    }\n-}\n"}}, {"oid": "244e8abdc9bd8de32dd6850022db6ba796831b01", "url": "https://github.com/elastic/elasticsearch/commit/244e8abdc9bd8de32dd6850022db6ba796831b01", "message": "Move ParsedInferenceToTests", "committedDate": "2020-07-08T19:02:20Z", "type": "commit"}, {"oid": "815e8421f89f66a8cf6ed5f13974d32c2b81df50", "url": "https://github.com/elastic/elasticsearch/commit/815e8421f89f66a8cf6ed5f13974d32c2b81df50", "message": "Add inference pipeline agg to HLRC", "committedDate": "2020-07-08T19:02:20Z", "type": "commit"}, {"oid": "09cc9760d7353cb5dd1d74c44d0f7bc027c2f6bb", "url": "https://github.com/elastic/elasticsearch/commit/09cc9760d7353cb5dd1d74c44d0f7bc027c2f6bb", "message": "Add doc links", "committedDate": "2020-07-08T19:02:20Z", "type": "commit"}, {"oid": "09cc9760d7353cb5dd1d74c44d0f7bc027c2f6bb", "url": "https://github.com/elastic/elasticsearch/commit/09cc9760d7353cb5dd1d74c44d0f7bc027c2f6bb", "message": "Add doc links", "committedDate": "2020-07-08T19:02:20Z", "type": "forcePushed"}]}