{"pr_number": 62086, "pr_title": "[Transform] Improve robustness when saving state", "pr_createdAt": "2020-09-08T10:53:13Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62086", "timeline": [{"oid": "41d1f8babd30c020938bf8ef5d0fedeaab6c820f", "url": "https://github.com/elastic/elasticsearch/commit/41d1f8babd30c020938bf8ef5d0fedeaab6c820f", "message": "enhance the integration test to do several runs with start and stop", "committedDate": "2020-09-10T13:58:44Z", "type": "forcePushed"}, {"oid": "37e71c2b42513252f33c8e567736ad34c44fe916", "url": "https://github.com/elastic/elasticsearch/commit/37e71c2b42513252f33c8e567736ad34c44fe916", "message": "enhance the integration test to do several runs with start and stop", "committedDate": "2020-09-14T06:51:58Z", "type": "forcePushed"}, {"oid": "6f77dacfa489eba7bb70d76eab916b02919244e9", "url": "https://github.com/elastic/elasticsearch/commit/6f77dacfa489eba7bb70d76eab916b02919244e9", "message": "enhance the integration test to do several runs with start and stop", "committedDate": "2020-09-14T07:45:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0NDI5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487844299", "bodyText": "for loop could be used here as well, making this snippet more concise:\nfor (int retries = 10; retries > 0; --retries) {\n}", "author": "przemekwitek", "createdAt": "2020-09-14T11:35:46Z", "path": "x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java", "diffHunk": "@@ -140,6 +142,26 @@ protected StartTransformResponse startTransform(String id, RequestOptions option\n         }\n     }\n \n+    // workaround for https://github.com/elastic/elasticsearch/issues/62204\n+    protected StartTransformResponse startTransformWithRetryOnConflict(String id, RequestOptions options) throws Exception {\n+        int retries = 10;\n+        ElasticsearchStatusException lastConflict = null;\n+        while (retries > 0) {", "originalCommit": "6f77dacfa489eba7bb70d76eab916b02919244e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "883ee7699a2081d6c351194ef0f4a1e20c05391c", "chunk": "diff --git a/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java b/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\nindex 53cec00eada..90537c66c59 100644\n--- a/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\n+++ b/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\n\n@@ -144,18 +144,16 @@ abstract class TransformIntegTestCase extends ESRestTestCase {\n \n     // workaround for https://github.com/elastic/elasticsearch/issues/62204\n     protected StartTransformResponse startTransformWithRetryOnConflict(String id, RequestOptions options) throws Exception {\n-        int retries = 10;\n         ElasticsearchStatusException lastConflict = null;\n-        while (retries > 0) {\n+        for (int retries = 10; retries > 0; --retries) {\n             try (RestHighLevelClient restClient = new TestRestHighLevelClient()) {\n                 return restClient.transform().startTransform(new StartTransformRequest(id), options);\n             } catch (ElasticsearchStatusException e) {\n-                if (e.status().equals(RestStatus.CONFLICT) == false) {\n+                if (RestStatus.CONFLICT.equals(e.status()) == false) {\n                     throw e;\n                 }\n \n                 lastConflict = e;\n-                --retries;\n                 Thread.sleep(5);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0NTA4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487845089", "bodyText": "[nit] It's rather style issue, not a real problem here, but I would write this line:\n                if (RestStatus.CONFLICT.equals(e.status()) == false) {\n\nso that NPE is impossible (even theoretically).", "author": "przemekwitek", "createdAt": "2020-09-14T11:37:25Z", "path": "x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java", "diffHunk": "@@ -140,6 +142,26 @@ protected StartTransformResponse startTransform(String id, RequestOptions option\n         }\n     }\n \n+    // workaround for https://github.com/elastic/elasticsearch/issues/62204\n+    protected StartTransformResponse startTransformWithRetryOnConflict(String id, RequestOptions options) throws Exception {\n+        int retries = 10;\n+        ElasticsearchStatusException lastConflict = null;\n+        while (retries > 0) {\n+            try (RestHighLevelClient restClient = new TestRestHighLevelClient()) {\n+                return restClient.transform().startTransform(new StartTransformRequest(id), options);\n+            } catch (ElasticsearchStatusException e) {\n+                if (e.status().equals(RestStatus.CONFLICT) == false) {", "originalCommit": "6f77dacfa489eba7bb70d76eab916b02919244e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "883ee7699a2081d6c351194ef0f4a1e20c05391c", "chunk": "diff --git a/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java b/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\nindex 53cec00eada..90537c66c59 100644\n--- a/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\n+++ b/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\n\n@@ -144,18 +144,16 @@ abstract class TransformIntegTestCase extends ESRestTestCase {\n \n     // workaround for https://github.com/elastic/elasticsearch/issues/62204\n     protected StartTransformResponse startTransformWithRetryOnConflict(String id, RequestOptions options) throws Exception {\n-        int retries = 10;\n         ElasticsearchStatusException lastConflict = null;\n-        while (retries > 0) {\n+        for (int retries = 10; retries > 0; --retries) {\n             try (RestHighLevelClient restClient = new TestRestHighLevelClient()) {\n                 return restClient.transform().startTransform(new StartTransformRequest(id), options);\n             } catch (ElasticsearchStatusException e) {\n-                if (e.status().equals(RestStatus.CONFLICT) == false) {\n+                if (RestStatus.CONFLICT.equals(e.status()) == false) {\n                     throw e;\n                 }\n \n                 lastConflict = e;\n-                --retries;\n                 Thread.sleep(5);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0NjI5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487846293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * can overwrite this, to provide a better logic, when state should be saved.\n          \n          \n            \n                 * can override this, to provide a better logic, when state should be saved.", "author": "przemekwitek", "createdAt": "2020-09-14T11:39:55Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java", "diffHunk": "@@ -244,6 +244,17 @@ public synchronized boolean maybeTriggerAsyncJob(long now) {\n         }\n     }\n \n+    /**\n+     * Checks if the state should be persisted, if true doSaveState is called before continuing. Inherited classes\n+     * can overwrite this, to provide a better logic, when state should be saved.", "originalCommit": "6f77dacfa489eba7bb70d76eab916b02919244e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "883ee7699a2081d6c351194ef0f4a1e20c05391c", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\nindex 4c53c5a3455..592a5022897 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\n\n@@ -246,7 +245,7 @@ public abstract class AsyncTwoPhaseIndexer<JobPosition, JobStats extends Indexer\n \n     /**\n      * Checks if the state should be persisted, if true doSaveState is called before continuing. Inherited classes\n-     * can overwrite this, to provide a better logic, when state should be saved.\n+     * can override this, to provide a better logic, when state should be saved.\n      *\n      * @return true if state should be saved, false if not.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0NjgxNA==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487846814", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void runSearchImmediatly() {\n          \n          \n            \n                protected void runSearchImmediately() {", "author": "przemekwitek", "createdAt": "2020-09-14T11:40:57Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java", "diffHunk": "@@ -254,7 +265,16 @@ protected void rethrottle() {\n             return;\n         }\n \n-        reQueueThrottledSearch();\n+        reQueueThrottledSearch(false);\n+    }\n+\n+    /**\n+     * Re-schedules the current search request to run immediately, iff one is scheduled.\n+     *\n+     * Call this if you need the indexer to fast forward a scheduled(throttled) search once in order to complete a full cycle.\n+     */\n+    protected void runSearchImmediatly() {", "originalCommit": "6f77dacfa489eba7bb70d76eab916b02919244e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "883ee7699a2081d6c351194ef0f4a1e20c05391c", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\nindex 4c53c5a3455..592a5022897 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\n\n@@ -271,9 +270,10 @@ public abstract class AsyncTwoPhaseIndexer<JobPosition, JobStats extends Indexer\n     /**\n      * Re-schedules the current search request to run immediately, iff one is scheduled.\n      *\n-     * Call this if you need the indexer to fast forward a scheduled(throttled) search once in order to complete a full cycle.\n+     * Call this if you need the indexer to fast forward a scheduled(in case it's throttled) search once in order to\n+     * complete a full cycle.\n      */\n-    protected void runSearchImmediatly() {\n+    protected void runSearchImmediately() {\n         reQueueThrottledSearch(true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0Njg5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487846895", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Call this if you need the indexer to fast forward a scheduled(throttled) search once in order to complete a full cycle.\n          \n          \n            \n                 * Call this if you need the indexer to fast forward a scheduled (throttled) search once in order to complete a full cycle.", "author": "przemekwitek", "createdAt": "2020-09-14T11:41:08Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java", "diffHunk": "@@ -254,7 +265,16 @@ protected void rethrottle() {\n             return;\n         }\n \n-        reQueueThrottledSearch();\n+        reQueueThrottledSearch(false);\n+    }\n+\n+    /**\n+     * Re-schedules the current search request to run immediately, iff one is scheduled.\n+     *\n+     * Call this if you need the indexer to fast forward a scheduled(throttled) search once in order to complete a full cycle.", "originalCommit": "6f77dacfa489eba7bb70d76eab916b02919244e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "883ee7699a2081d6c351194ef0f4a1e20c05391c", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\nindex 4c53c5a3455..592a5022897 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexing/AsyncTwoPhaseIndexer.java\n\n@@ -271,9 +270,10 @@ public abstract class AsyncTwoPhaseIndexer<JobPosition, JobStats extends Indexer\n     /**\n      * Re-schedules the current search request to run immediately, iff one is scheduled.\n      *\n-     * Call this if you need the indexer to fast forward a scheduled(throttled) search once in order to complete a full cycle.\n+     * Call this if you need the indexer to fast forward a scheduled(in case it's throttled) search once in order to\n+     * complete a full cycle.\n      */\n-    protected void runSearchImmediatly() {\n+    protected void runSearchImmediately() {\n         reQueueThrottledSearch(true);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2Nzk0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487867949", "bodyText": "Since this is no longer synchronized, it is possible for a stop call or a start call to be executing at any point.\nIs this acceptable?", "author": "benwtrent", "createdAt": "2020-09-14T12:21:07Z", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformTask.java", "diffHunk": "@@ -299,7 +295,7 @@ void setShouldStopAtCheckpoint(boolean shouldStopAtCheckpoint) {\n      * @param shouldStopAtCheckpoint whether or not we should stop at the next checkpoint or not\n      * @param shouldStopAtCheckpointListener the listener to return to when we have persisted the updated value to the state index.\n      */\n-    public synchronized void setShouldStopAtCheckpoint(\n+    public void setShouldStopAtCheckpoint(", "originalCommit": "6f77dacfa489eba7bb70d76eab916b02919244e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5NTMzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487995335", "bodyText": "with the atomic ops in stopAtCheckpoint, I think we can get rid of synchronized. I can not think of any bad collision with stop and start.", "author": "hendrikmuhs", "createdAt": "2020-09-14T14:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2Nzk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4MDk2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r492680962", "bodyText": "FWIW: I added synchronized back, but 1 level down in the indexer, as I realized a corner case: >1 calls to at the same time or triggering while this is running.", "author": "hendrikmuhs", "createdAt": "2020-09-22T12:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2Nzk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a475ad27f6ce8304527be8dabf363a2c21306dc", "chunk": "diff --git a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformTask.java b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformTask.java\nindex 888702eb28b..0695580977a 100644\n--- a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformTask.java\n+++ b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformTask.java\n\n@@ -289,16 +289,10 @@ public class TransformTask extends AllocatedPersistentTask implements SchedulerE\n     /**\n      * This sets the flag for the task to stop at the next checkpoint.\n      *\n-     * If first persists the flag and then mutates the local variable.\n-     *\n-     * It only persists if the value is different than what is currently held in memory.\n      * @param shouldStopAtCheckpoint whether or not we should stop at the next checkpoint or not\n      * @param shouldStopAtCheckpointListener the listener to return to when we have persisted the updated value to the state index.\n      */\n-    public void setShouldStopAtCheckpoint(\n-        boolean shouldStopAtCheckpoint,\n-        ActionListener<Void> shouldStopAtCheckpointListener\n-    ) {\n+    public void setShouldStopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n         logger.debug(\n             \"[{}] attempted to set task to stop at checkpoint [{}] with state [{}]\",\n             getTransformId(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2ODAxMA==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487868010", "bodyText": "This always assumes that the saving state succeeds. If saving the state fails, the listeners are never called.", "author": "benwtrent", "createdAt": "2020-09-14T12:21:17Z", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java", "diffHunk": "@@ -508,6 +518,43 @@ protected void onAbort() {\n         context.shutdown();\n     }\n \n+    protected void callAndResetSaveStateListeners() {\n+        Collection<ActionListener<Void>> listeners = saveStateListeners.getAndSet(null);\n+        if (listeners != null) {\n+            for (ActionListener<Void> l : listeners) {\n+                l.onResponse(null);\n+            }\n+        }\n+    }", "originalCommit": "6f77dacfa489eba7bb70d76eab916b02919244e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MTkwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r487871901", "bodyText": "It also seems to me that a previous save state could be getting called (its listener executing), and these listeners get triggered. But, it is not their current state (e.g. the one with \"stop at checkpoint\") that was saved, but the previous one that was in the middle of saving.", "author": "benwtrent", "createdAt": "2020-09-14T12:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2ODAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwODc2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r488008769", "bodyText": "good spot! I changed the implementation to get and reset the listener before calling save state. I think that covers it. Now its possible that \"stop at checkpoint\" is set after the listeners are taken, but this is benign, I added comments in code.", "author": "hendrikmuhs", "createdAt": "2020-09-14T15:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2ODAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "883ee7699a2081d6c351194ef0f4a1e20c05391c", "chunk": "diff --git a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\nindex f51e09f64c2..d1e0b1325fa 100644\n--- a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\n+++ b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\n\n@@ -518,27 +518,32 @@ public abstract class TransformIndexer extends AsyncTwoPhaseIndexer<TransformInd\n         context.shutdown();\n     }\n \n-    protected void callAndResetSaveStateListeners() {\n-        Collection<ActionListener<Void>> listeners = saveStateListeners.getAndSet(null);\n-        if (listeners != null) {\n-            for (ActionListener<Void> l : listeners) {\n-                l.onResponse(null);\n-            }\n-        }\n-    }\n-\n-    void stopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n-        IndexerState indexerState = getState();\n-\n-        if (context.shouldStopAtCheckpoint() == shouldStopAtCheckpoint\n-            || indexerState == IndexerState.STOPPED\n-            || indexerState == IndexerState.STOPPING) {\n+    /**\n+     *\n+     */\n+    synchronized void stopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n+        // in case the indexer isn't running, respond immediately\n+        if (getState() != IndexerState.INDEXING) {\n             shouldStopAtCheckpointListener.onResponse(null);\n             return;\n         }\n \n         saveStateListeners.getAndUpdate(currentListeners -> {\n+            // check the state again (optimistic locking), while we checked the last time, the indexing thread could have\n+            // saved the state and is finishing. As it first set the state and _than_ gets saveStateListeners, it's safe\n+            // to just check the indexer state again\n+            if (getState() != IndexerState.INDEXING) {\n+                shouldStopAtCheckpointListener.onResponse(null);\n+                return null;\n+            }\n+\n             if (currentListeners == null) {\n+                // in case shouldStopAtCheckpoint has already the desired value _and_ we know its _persisted_, respond immediately\n+                if (context.shouldStopAtCheckpoint() == shouldStopAtCheckpoint) {\n+                    shouldStopAtCheckpointListener.onResponse(null);\n+                    return null;\n+                }\n+\n                 currentListeners = new ArrayList<>();\n             }\n             currentListeners.add(shouldStopAtCheckpointListener);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4NjcyMA==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r488486720", "bodyText": "This line is not needed anymore.", "author": "przemekwitek", "createdAt": "2020-09-15T08:33:43Z", "path": "x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java", "diffHunk": "@@ -140,6 +142,25 @@ protected StartTransformResponse startTransform(String id, RequestOptions option\n         }\n     }\n \n+    // workaround for https://github.com/elastic/elasticsearch/issues/62204\n+    protected StartTransformResponse startTransformWithRetryOnConflict(String id, RequestOptions options) throws Exception {\n+        ElasticsearchStatusException lastConflict = null;\n+        for (int retries = 10; retries > 0; --retries) {\n+            try (RestHighLevelClient restClient = new TestRestHighLevelClient()) {\n+                return restClient.transform().startTransform(new StartTransformRequest(id), options);\n+            } catch (ElasticsearchStatusException e) {\n+                if (RestStatus.CONFLICT.equals(e.status()) == false) {\n+                    throw e;\n+                }\n+\n+                lastConflict = e;\n+                --retries;", "originalCommit": "f30b704a51af627a432552e3b7353bfa7ae4d79e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "883ee7699a2081d6c351194ef0f4a1e20c05391c", "chunk": "diff --git a/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java b/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\nindex eb1ad80bf20..90537c66c59 100644\n--- a/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\n+++ b/x-pack/plugin/transform/qa/multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformIntegTestCase.java\n\n@@ -154,7 +154,6 @@ abstract class TransformIntegTestCase extends ESRestTestCase {\n                 }\n \n                 lastConflict = e;\n-                --retries;\n                 Thread.sleep(5);\n             }\n         }\n"}}, {"oid": "883ee7699a2081d6c351194ef0f4a1e20c05391c", "url": "https://github.com/elastic/elasticsearch/commit/883ee7699a2081d6c351194ef0f4a1e20c05391c", "message": "add module tests for shopAtCheckpoint", "committedDate": "2020-09-18T15:22:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAzMTUwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r492031509", "bodyText": "Could you adjust the comment indicating that this is because the method is synchronized? It took me a second to see that all the triggering methods, etc. were synchronized.\nAlso, it might be good to make this method final so it cannot be overridden and consequently cause MT issues in the future by accident.", "author": "benwtrent", "createdAt": "2020-09-21T13:10:01Z", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java", "diffHunk": "@@ -508,6 +522,89 @@ protected void onAbort() {\n         context.shutdown();\n     }\n \n+    /**\n+     * Let the indexer stop at the next checkpoint and call the listener after the flag has been persisted in state.\n+     *\n+     * If the indexer isn't running, persist state if required and call the listener immediately.\n+     */\n+    synchronized void setStopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n+        IndexerState state = getState();\n+\n+        // in case the indexer isn't running, respond immediately\n+        if (state == IndexerState.STARTED && context.shouldStopAtCheckpoint() != shouldStopAtCheckpoint) {\n+            context.setShouldStopAtCheckpoint(shouldStopAtCheckpoint);\n+\n+            // because save state is async we need to block the call until state is persisted, so that the job can not\n+            // be triggered\n+            CountDownLatch latch = new CountDownLatch(1);", "originalCommit": "9f159e71a3f26ba7a297114655f8b0276cef6530", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a475ad27f6ce8304527be8dabf363a2c21306dc", "chunk": "diff --git a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\nindex 1223d3c015b..5d12a1ad800 100644\n--- a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\n+++ b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\n\n@@ -527,7 +527,9 @@ public abstract class TransformIndexer extends AsyncTwoPhaseIndexer<TransformInd\n      *\n      * If the indexer isn't running, persist state if required and call the listener immediately.\n      */\n-    synchronized void setStopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n+    final synchronized void setStopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n+        // this should be called from the generic threadpool\n+        assert Thread.currentThread().getName().contains(ThreadPool.Names.GENERIC);\n         IndexerState state = getState();\n \n         // in case the indexer isn't running, respond immediately\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAzMzU1OA==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r492033558", "bodyText": "I think this method call stack goes all the way back to the transport layer:\n\n  \n    \n      elasticsearch/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/action/TransportStopTransformAction.java\n    \n    \n        Lines 219 to 228\n      in\n      95a7eed\n    \n    \n    \n    \n\n        \n          \n           protected void taskOperation(Request request, TransformTask transformTask, ActionListener<Response> listener) { \n        \n\n        \n          \n            \n        \n\n        \n          \n               Set<String> ids = request.getExpandedIds(); \n        \n\n        \n          \n               if (ids == null) { \n        \n\n        \n          \n                   listener.onFailure(new IllegalStateException(\"Request does not have expandedIds set\")); \n        \n\n        \n          \n                   return; \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (ids.contains(transformTask.getTransformId())) { \n        \n\n        \n          \n                   transformTask.setShouldStopAtCheckpoint(request.isWaitForCheckpoint(), ActionListener.wrap(r -> { \n        \n    \n  \n\n\nConsequently, do we know what threadpool we will be locking up for 5 seconds?", "author": "benwtrent", "createdAt": "2020-09-21T13:13:09Z", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java", "diffHunk": "@@ -508,6 +522,89 @@ protected void onAbort() {\n         context.shutdown();\n     }\n \n+    /**\n+     * Let the indexer stop at the next checkpoint and call the listener after the flag has been persisted in state.\n+     *\n+     * If the indexer isn't running, persist state if required and call the listener immediately.\n+     */\n+    synchronized void setStopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n+        IndexerState state = getState();\n+\n+        // in case the indexer isn't running, respond immediately\n+        if (state == IndexerState.STARTED && context.shouldStopAtCheckpoint() != shouldStopAtCheckpoint) {\n+            context.setShouldStopAtCheckpoint(shouldStopAtCheckpoint);\n+\n+            // because save state is async we need to block the call until state is persisted, so that the job can not\n+            // be triggered\n+            CountDownLatch latch = new CountDownLatch(1);\n+            try {\n+                doSaveState(IndexerState.STARTED, getPosition(), () -> {\n+                    latch.countDown();\n+                    shouldStopAtCheckpointListener.onResponse(null);\n+                });\n+\n+                latch.await(PERSIST_STOP_AT_CHECKPOINT_TIMEOUT_SEC, TimeUnit.SECONDS);", "originalCommit": "9f159e71a3f26ba7a297114655f8b0276cef6530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExNDAxNA==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r492114014", "bodyText": "good spot, I offloaded it now. This might explain the test failures.", "author": "hendrikmuhs", "createdAt": "2020-09-21T14:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAzMzU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "5a475ad27f6ce8304527be8dabf363a2c21306dc", "chunk": "diff --git a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\nindex 1223d3c015b..5d12a1ad800 100644\n--- a/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\n+++ b/x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java\n\n@@ -527,7 +527,9 @@ public abstract class TransformIndexer extends AsyncTwoPhaseIndexer<TransformInd\n      *\n      * If the indexer isn't running, persist state if required and call the listener immediately.\n      */\n-    synchronized void setStopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n+    final synchronized void setStopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n+        // this should be called from the generic threadpool\n+        assert Thread.currentThread().getName().contains(ThreadPool.Names.GENERIC);\n         IndexerState state = getState();\n \n         // in case the indexer isn't running, respond immediately\n"}}, {"oid": "5a475ad27f6ce8304527be8dabf363a2c21306dc", "url": "https://github.com/elastic/elasticsearch/commit/5a475ad27f6ce8304527be8dabf363a2c21306dc", "message": "adapt tests, so it does not assert on the threadpool", "committedDate": "2020-09-21T19:23:31Z", "type": "forcePushed"}, {"oid": "5a5214910f9e517bcb200e23178f265f0c113634", "url": "https://github.com/elastic/elasticsearch/commit/5a5214910f9e517bcb200e23178f265f0c113634", "message": "ensure listeners are called if transform stops", "committedDate": "2020-09-22T15:19:51Z", "type": "forcePushed"}, {"oid": "a7df454cbc34b5b94abadf2af52029a85d656231", "url": "https://github.com/elastic/elasticsearch/commit/a7df454cbc34b5b94abadf2af52029a85d656231", "message": "ensure listeners are called if transform stops", "committedDate": "2020-09-23T06:11:45Z", "type": "forcePushed"}, {"oid": "25dfb540a6299cbc70a8e2ded95ee923e2f2b213", "url": "https://github.com/elastic/elasticsearch/commit/25dfb540a6299cbc70a8e2ded95ee923e2f2b213", "message": "refactor how state is persisted, so it can not be called from more than 1\nthread at the same time by moving it completely into the indexer.", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "196b5c13f4e6d30570f83e5c181400265df26415", "url": "https://github.com/elastic/elasticsearch/commit/196b5c13f4e6d30570f83e5c181400265df26415", "message": "unmute integration tests", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "926d68386f5abe12843c59cbc63723d33f9195d3", "url": "https://github.com/elastic/elasticsearch/commit/926d68386f5abe12843c59cbc63723d33f9195d3", "message": "enhance the integration test to do several runs with start and stop", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "269f61566b95b95a4d78f2909821b56aeaa4dd37", "url": "https://github.com/elastic/elasticsearch/commit/269f61566b95b95a4d78f2909821b56aeaa4dd37", "message": "apply review comments", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "78265d44d0a69e3b75239538eb81ddd3549501c9", "url": "https://github.com/elastic/elasticsearch/commit/78265d44d0a69e3b75239538eb81ddd3549501c9", "message": "ensure saveState listeners are called in either case and fix concurrency\nissue if stopAtCheckpoint is called while doSaveState is waiting for the\nresponse callback", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "8ce27e5b3632c393ae309fcc4933576d37b36d79", "url": "https://github.com/elastic/elasticsearch/commit/8ce27e5b3632c393ae309fcc4933576d37b36d79", "message": "remove superflous line", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "ca5e7b2313b7387fc96e02bd61d7e161f37bcc72", "url": "https://github.com/elastic/elasticsearch/commit/ca5e7b2313b7387fc96e02bd61d7e161f37bcc72", "message": "Call listener immediately if indexer is not indexing or value hasn't changed.\nUse optimistic lock for listeners", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "2364f7443058be6179cdf0c1e1bdd3ea4df0d7ee", "url": "https://github.com/elastic/elasticsearch/commit/2364f7443058be6179cdf0c1e1bdd3ea4df0d7ee", "message": "add module tests for shopAtCheckpoint", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "56388b2b4385a0f7ccc273887ff1909e4c6c8b00", "url": "https://github.com/elastic/elasticsearch/commit/56388b2b4385a0f7ccc273887ff1909e4c6c8b00", "message": "add file headers", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "bf1ab2775c3458358699e81c049465a434bda4f1", "url": "https://github.com/elastic/elasticsearch/commit/bf1ab2775c3458358699e81c049465a434bda4f1", "message": "persist state if indexer state is started", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "139ba319407142f4ce5503db26ae60a760546fa5", "url": "https://github.com/elastic/elasticsearch/commit/139ba319407142f4ce5503db26ae60a760546fa5", "message": "log if state persistance fails", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "b092ac6d29ce3bb174f7709ea9e35e42cb579c13", "url": "https://github.com/elastic/elasticsearch/commit/b092ac6d29ce3bb174f7709ea9e35e42cb579c13", "message": "do not block the network thread", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "0156590073a2b5cfd5085e8ad52953e805e054a9", "url": "https://github.com/elastic/elasticsearch/commit/0156590073a2b5cfd5085e8ad52953e805e054a9", "message": "adapt tests, so it does not assert on the threadpool", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "cb7829caea17d39e95ecdf5b6ff98e3fc40be7d8", "url": "https://github.com/elastic/elasticsearch/commit/cb7829caea17d39e95ecdf5b6ff98e3fc40be7d8", "message": "add testcase for throttling", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "447504b4bb83048c320a978c6ef8f6cc32892b01", "url": "https://github.com/elastic/elasticsearch/commit/447504b4bb83048c320a978c6ef8f6cc32892b01", "message": "assert that state has been persisted with shouldStopAtCheckpoint", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "4eb2b53e4d2a60de2fbf654925f140f3796d7c99", "url": "https://github.com/elastic/elasticsearch/commit/4eb2b53e4d2a60de2fbf654925f140f3796d7c99", "message": "ensure listeners are called if transform stops", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "3b06dafb6e42e6df56bf1165e3dfae12b01e5f14", "url": "https://github.com/elastic/elasticsearch/commit/3b06dafb6e42e6df56bf1165e3dfae12b01e5f14", "message": "add back synchronized to setShouldStopAtCheckpoint to avoid problems\nif start runs in parralel", "committedDate": "2020-09-23T10:24:53Z", "type": "commit"}, {"oid": "3b06dafb6e42e6df56bf1165e3dfae12b01e5f14", "url": "https://github.com/elastic/elasticsearch/commit/3b06dafb6e42e6df56bf1165e3dfae12b01e5f14", "message": "add back synchronized to setShouldStopAtCheckpoint to avoid problems\nif start runs in parralel", "committedDate": "2020-09-23T10:24:53Z", "type": "forcePushed"}, {"oid": "1687e322249e47b8cabe7b832bfe6edd62321cbb", "url": "https://github.com/elastic/elasticsearch/commit/1687e322249e47b8cabe7b832bfe6edd62321cbb", "message": "do not call action listener onResponse inside getAndUpdate", "committedDate": "2020-09-23T15:32:21Z", "type": "commit"}, {"oid": "38994fb6caadb483e0ad2b34b26ca57e29f6e186", "url": "https://github.com/elastic/elasticsearch/commit/38994fb6caadb483e0ad2b34b26ca57e29f6e186", "message": "simplify by using updateAndGet", "committedDate": "2020-09-23T15:37:15Z", "type": "commit"}, {"oid": "552023a542e233993bd9f827c6255441ccdb381f", "url": "https://github.com/elastic/elasticsearch/commit/552023a542e233993bd9f827c6255441ccdb381f", "message": "make updateAndGet free of side effects", "committedDate": "2020-09-23T16:02:07Z", "type": "commit"}, {"oid": "d0efdfd87ca0c5f4e0aee98ccf06c3ea2e38d643", "url": "https://github.com/elastic/elasticsearch/commit/d0efdfd87ca0c5f4e0aee98ccf06c3ea2e38d643", "message": "do not call listener from synchronized block", "committedDate": "2020-09-23T19:04:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NjI2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62086#discussion_r494266266", "bodyText": "In testing (or where assertions are enabled), this would cause the caller to freeze and never return.\nI am not sure how to assert here AND fire an onFailure result. But, not doing so might cause some frustrating test investigations", "author": "benwtrent", "createdAt": "2020-09-24T12:16:26Z", "path": "x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java", "diffHunk": "@@ -508,6 +522,100 @@ protected void onAbort() {\n         context.shutdown();\n     }\n \n+    /**\n+     * Let the indexer stop at the next checkpoint and call the listener after the flag has been persisted in state.\n+     *\n+     * If the indexer isn't running, persist state if required and call the listener immediately.\n+     */\n+    final void setStopAtCheckpoint(boolean shouldStopAtCheckpoint, ActionListener<Void> shouldStopAtCheckpointListener) {\n+        // this should be called from the generic threadpool\n+        assert Thread.currentThread().getName().contains(ThreadPool.Names.GENERIC);", "originalCommit": "d0efdfd87ca0c5f4e0aee98ccf06c3ea2e38d643", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}