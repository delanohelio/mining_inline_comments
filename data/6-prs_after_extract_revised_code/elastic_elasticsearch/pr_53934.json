{"pr_number": 53934, "pr_title": "Introduce autoscaling decisions", "pr_createdAt": "2020-03-22T15:18:41Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53934", "timeline": [{"oid": "60c3578baa6852e74f43166d0eac5d713b32eb5f", "url": "https://github.com/elastic/elasticsearch/commit/60c3578baa6852e74f43166d0eac5d713b32eb5f", "message": "Introduce autoscaling decisions\n\nThis is the first in a series of commits that will introduce the\nautoscaling deciders framework. This commit introduces the basic\nframework for representing autoscaling decisions.", "committedDate": "2020-03-22T15:15:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3Nzk1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396377951", "bodyText": "I would prefer to not extend AutoscalingDecision. This could let AutoscalingDecision be a final class and we avoid throwing UnsupportedOperationException below (and remove decisions() from single decision).\nAutoscaling deciders should not really have to choose between using a single or multi decision. The multi-decision is only for the \"framework\". MultipleAutoscalingDecision could be an inner class to AutoscalingService or co-located with the service.\nI know this is contrary to lots of other code, so please consider this optional.", "author": "henningandersen", "createdAt": "2020-03-23T11:19:45Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecision.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public abstract class AutoscalingDecision implements ToXContent, Writeable {\n+\n+    public abstract String name();\n+\n+    public abstract Type type();\n+\n+    public abstract String reason();\n+\n+    public abstract Collection<? extends AutoscalingDecision> decisions();\n+\n+    public static class SingleAutoscalingDecision extends AutoscalingDecision {\n+\n+        private final String name;\n+\n+        @Override\n+        public String name() {\n+            return name;\n+        }\n+\n+        private final Type type;\n+\n+        @Override\n+        public Type type() {\n+            return type;\n+        }\n+\n+        private final String reason;\n+\n+        @Override\n+        public String reason() {\n+            return reason;\n+        }\n+\n+        @Override\n+        public Collection<? extends AutoscalingDecision> decisions() {\n+            return List.of(this);\n+        }\n+\n+        public SingleAutoscalingDecision(final String name, final Type type, final String reason) {\n+            this.name = Objects.requireNonNull(name);\n+            this.type = Objects.requireNonNull(type);\n+            this.reason = Objects.requireNonNull(reason);\n+        }\n+\n+        public SingleAutoscalingDecision(final StreamInput in) throws IOException {\n+            this.name = in.readString();\n+            this.type = Type.readFrom(in);\n+            this.reason = in.readString();\n+        }\n+\n+        @Override\n+        public void writeTo(final StreamOutput out) throws IOException {\n+            out.writeString(name);\n+            type.writeTo(out);\n+            out.writeString(reason);\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {\n+            builder.startObject();\n+            {\n+                builder.field(\"name\", name);\n+                builder.field(\"type\", type);\n+                builder.field(\"reason\", reason);\n+            }\n+            builder.endObject();\n+            return builder;\n+        }\n+\n+        @Override\n+        public boolean equals(final Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            final SingleAutoscalingDecision that = (SingleAutoscalingDecision) o;\n+            return name.equals(that.name) && type == that.type && reason.equals(that.reason);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(name, type, reason);\n+        }\n+\n+    }\n+\n+    public static class MultipleAutoscalingDecision extends AutoscalingDecision {", "originalCommit": "60c3578baa6852e74f43166d0eac5d713b32eb5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5ODQyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396798426", "bodyText": "Thanks for the input. I have made a refactoring here. Would you let me know your thoughts?", "author": "jasontedor", "createdAt": "2020-03-23T22:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3Nzk1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzOTE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396939166", "bodyText": "Thanks for doing the refactor, this looks great.", "author": "henningandersen", "createdAt": "2020-03-24T07:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3Nzk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f58c00f0e5488920e8bf6b739b931be0b61d5cdb", "chunk": "diff --git a/x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecision.java b/x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecision.java\nindex 3ced3fbbd73..4f4a3ce7098 100644\n--- a/x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecision.java\n+++ b/x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecision.java\n\n@@ -10,211 +10,76 @@ import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.io.stream.Writeable;\n import org.elasticsearch.common.xcontent.ToXContent;\n-import org.elasticsearch.common.xcontent.ToXContentFragment;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import java.io.IOException;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Locale;\n import java.util.Objects;\n \n-public abstract class AutoscalingDecision implements ToXContent, Writeable {\n-\n-    public abstract String name();\n-\n-    public abstract Type type();\n-\n-    public abstract String reason();\n-\n-    public abstract Collection<? extends AutoscalingDecision> decisions();\n-\n-    public static class SingleAutoscalingDecision extends AutoscalingDecision {\n-\n-        private final String name;\n-\n-        @Override\n-        public String name() {\n-            return name;\n-        }\n-\n-        private final Type type;\n-\n-        @Override\n-        public Type type() {\n-            return type;\n-        }\n-\n-        private final String reason;\n-\n-        @Override\n-        public String reason() {\n-            return reason;\n-        }\n-\n-        @Override\n-        public Collection<? extends AutoscalingDecision> decisions() {\n-            return List.of(this);\n-        }\n-\n-        public SingleAutoscalingDecision(final String name, final Type type, final String reason) {\n-            this.name = Objects.requireNonNull(name);\n-            this.type = Objects.requireNonNull(type);\n-            this.reason = Objects.requireNonNull(reason);\n-        }\n-\n-        public SingleAutoscalingDecision(final StreamInput in) throws IOException {\n-            this.name = in.readString();\n-            this.type = Type.readFrom(in);\n-            this.reason = in.readString();\n-        }\n-\n-        @Override\n-        public void writeTo(final StreamOutput out) throws IOException {\n-            out.writeString(name);\n-            type.writeTo(out);\n-            out.writeString(reason);\n-        }\n-\n-        @Override\n-        public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {\n-            builder.startObject();\n-            {\n-                builder.field(\"name\", name);\n-                builder.field(\"type\", type);\n-                builder.field(\"reason\", reason);\n-            }\n-            builder.endObject();\n-            return builder;\n-        }\n-\n-        @Override\n-        public boolean equals(final Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-            final SingleAutoscalingDecision that = (SingleAutoscalingDecision) o;\n-            return name.equals(that.name) && type == that.type && reason.equals(that.reason);\n-        }\n+/**\n+ * Represents an autoscaling decision.\n+ */\n+public class AutoscalingDecision implements ToXContent, Writeable {\n \n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(name, type, reason);\n-        }\n+    private final String name;\n \n+    public String name() {\n+        return name;\n     }\n \n-    public static class MultipleAutoscalingDecision extends AutoscalingDecision {\n-\n-        private final Collection<SingleAutoscalingDecision> decisions;\n+    private final AutoscalingDecisionType type;\n \n-        @Override\n-        public String name() {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public Type type() {\n-            if (decisions.stream().anyMatch(p -> p.type() == Type.SCALE_UP)) {\n-                // if any deciders say to scale up\n-                return Type.SCALE_UP;\n-            } else if (decisions.stream().allMatch(p -> p.type() == Type.SCALE_DOWN)) {\n-                // if all deciders say to scale down\n-                return Type.SCALE_DOWN;\n-            } else {\n-                // otherwise, do not scale\n-                return Type.NO_SCALE;\n-            }\n-        }\n-\n-        @Override\n-        public String reason() {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public Collection<? extends AutoscalingDecision> decisions() {\n-            return decisions;\n-        }\n-\n-        public MultipleAutoscalingDecision(final Collection<SingleAutoscalingDecision> decisions) {\n-            Objects.requireNonNull(decisions);\n-            if (decisions.isEmpty()) {\n-                throw new IllegalArgumentException(\"decisions can not be empty\");\n-            }\n-            this.decisions = decisions;\n-        }\n-\n-        public MultipleAutoscalingDecision(final StreamInput in) throws IOException {\n-            this.decisions = in.readList(SingleAutoscalingDecision::new);\n-        }\n-\n-        @Override\n-        public void writeTo(final StreamOutput out) throws IOException {\n-            out.writeCollection(decisions);\n-        }\n-\n-        @Override\n-        public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {\n-            for (final SingleAutoscalingDecision decision : decisions) {\n-                decision.toXContent(builder, params);\n-            }\n-            return builder;\n-        }\n-\n-        @Override\n-        public boolean equals(final Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-            final MultipleAutoscalingDecision that = (MultipleAutoscalingDecision) o;\n-            return decisions.equals(that.decisions);\n-        }\n+    public AutoscalingDecisionType type() {\n+        return type;\n+    }\n \n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(decisions);\n-        }\n+    private final String reason;\n \n+    public String reason() {\n+        return reason;\n     }\n \n-    public enum Type implements Writeable, ToXContentFragment {\n-        SCALE_DOWN((byte) 0),\n-        NO_SCALE((byte) 1),\n-        SCALE_UP((byte) 2);\n-\n-        private final byte id;\n+    public AutoscalingDecision(final String name, final AutoscalingDecisionType type, final String reason) {\n+        this.name = Objects.requireNonNull(name);\n+        this.type = Objects.requireNonNull(type);\n+        this.reason = Objects.requireNonNull(reason);\n+    }\n \n-        byte id() {\n-            return id;\n-        }\n+    public AutoscalingDecision(final StreamInput in) throws IOException {\n+        this.name = in.readString();\n+        this.type = AutoscalingDecisionType.readFrom(in);\n+        this.reason = in.readString();\n+    }\n \n-        Type(final byte id) {\n-            this.id = id;\n-        }\n+    @Override\n+    public void writeTo(final StreamOutput out) throws IOException {\n+        out.writeString(name);\n+        type.writeTo(out);\n+        out.writeString(reason);\n+    }\n \n-        public static Type readFrom(final StreamInput in) throws IOException {\n-            final byte id = in.readByte();\n-            switch (id) {\n-                case 0:\n-                    return SCALE_DOWN;\n-                case 1:\n-                    return NO_SCALE;\n-                case 2:\n-                    return SCALE_UP;\n-                default:\n-                    throw new IllegalArgumentException(\"unexpected value [\" + id + \"] for autoscaling decision type\");\n-            }\n+    @Override\n+    public XContentBuilder toXContent(final XContentBuilder builder, final ToXContent.Params params) throws IOException {\n+        builder.startObject();\n+        {\n+            builder.field(\"name\", name);\n+            builder.field(\"type\", type);\n+            builder.field(\"reason\", reason);\n         }\n+        builder.endObject();\n+        return builder;\n+    }\n \n-        @Override\n-        public void writeTo(final StreamOutput out) throws IOException {\n-            out.writeByte(id);\n-        }\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        final AutoscalingDecision that = (AutoscalingDecision) o;\n+        return name.equals(that.name) && type == that.type && reason.equals(that.reason);\n+    }\n \n-        @Override\n-        public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {\n-            builder.value(name().toLowerCase(Locale.ROOT));\n-            return builder;\n-        }\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(name, type, reason);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4MTM0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396381343", "bodyText": "I think this should be just two fields \"id\" and \"decision\"? AFAICS, this will result in:\ndecisions : [\n  {\n     \"key1\" : { ... decision1 ... }\n  },\n  {\n     \"key2\" : { ... decision2 ... }\n  }\n]\n\nwhich seems to follow both the array and map pattern?", "author": "henningandersen", "createdAt": "2020-03-23T11:25:57Z", "path": "x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/GetAutoscalingDecisionAction.java", "diffHunk": "@@ -60,24 +65,37 @@ public XContentBuilder toXContent(final XContentBuilder builder, final Params pa\n \n     public static class Response extends ActionResponse implements ToXContentObject {\n \n-        public Response() {\n+        private final SortedMap<String, AutoscalingDecision.MultipleAutoscalingDecision> decisions;\n \n+        public Response(final SortedMap<String, AutoscalingDecision.MultipleAutoscalingDecision> decisions) {\n+            this.decisions = Objects.requireNonNull(decisions);\n         }\n \n         public Response(final StreamInput in) throws IOException {\n             super(in);\n+            decisions = new TreeMap<>(in.readMap(StreamInput::readString, AutoscalingDecision.MultipleAutoscalingDecision::new));\n         }\n \n         @Override\n-        public void writeTo(final StreamOutput out) {\n-\n+        public void writeTo(final StreamOutput out) throws IOException {\n+            out.writeMap(decisions, StreamOutput::writeString, (o, decision) -> decision.writeTo(o));\n         }\n \n         @Override\n         public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {\n             builder.startObject();\n             {\n-\n+                builder.startArray(\"decisions\");\n+                {\n+                    for (final Map.Entry<String, AutoscalingDecision.MultipleAutoscalingDecision> decision : decisions.entrySet()) {\n+                        builder.startObject();\n+                        {\n+                            builder.field(decision.getKey(), decision.getValue());", "originalCommit": "60c3578baa6852e74f43166d0eac5d713b32eb5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5ODMyNA==", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396798324", "bodyText": "Good point. I will address this in a follow-up when the framework is fleshed out a little bit more.", "author": "jasontedor", "createdAt": "2020-03-23T22:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4MTM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f58c00f0e5488920e8bf6b739b931be0b61d5cdb", "chunk": "diff --git a/x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/GetAutoscalingDecisionAction.java b/x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/GetAutoscalingDecisionAction.java\nindex ac4a08719e2..8e97eb0d3f6 100644\n--- a/x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/GetAutoscalingDecisionAction.java\n+++ b/x-pack/plugin/autoscaling/src/main/java/org/elasticsearch/xpack/autoscaling/action/GetAutoscalingDecisionAction.java\n\n@@ -65,15 +65,15 @@ public class GetAutoscalingDecisionAction extends ActionType<GetAutoscalingDecis\n \n     public static class Response extends ActionResponse implements ToXContentObject {\n \n-        private final SortedMap<String, AutoscalingDecision.MultipleAutoscalingDecision> decisions;\n+        private final SortedMap<String, AutoscalingDecisions> decisions;\n \n-        public Response(final SortedMap<String, AutoscalingDecision.MultipleAutoscalingDecision> decisions) {\n+        public Response(final SortedMap<String, AutoscalingDecisions> decisions) {\n             this.decisions = Objects.requireNonNull(decisions);\n         }\n \n         public Response(final StreamInput in) throws IOException {\n             super(in);\n-            decisions = new TreeMap<>(in.readMap(StreamInput::readString, AutoscalingDecision.MultipleAutoscalingDecision::new));\n+            decisions = new TreeMap<>(in.readMap(StreamInput::readString, AutoscalingDecisions::new));\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4Njk2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396386969", "bodyText": "I think the names were swapped between this and the \"down\" test?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testMultipleAutoscalingDecisionTypeUp() {\n          \n          \n            \n                public void testMultipleAutoscalingDecisionTypeDown() {", "author": "henningandersen", "createdAt": "2020-03-23T11:36:45Z", "path": "x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.common.Randomness;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingDecision.SingleAutoscalingDecision;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class AutoscalingDecisionTests extends AutoscalingTestCase {\n+\n+    public void testSingleAutoscalingDecisionType() {\n+        final AutoscalingDecision.Type type = randomFrom(AutoscalingDecision.Type.values());\n+        final SingleAutoscalingDecision decision = randomAutoscalingDecisionOfType(type);\n+        assertThat(decision.type(), equalTo(type));\n+    }\n+\n+    public void testMultipleAutoscalingDecisionTypeUp() {", "originalCommit": "60c3578baa6852e74f43166d0eac5d713b32eb5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3d389f75457eb05cb7717aad1160f3eb898eb", "chunk": "diff --git a/x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java b/x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\nindex 19b53acdb1b..43714bc2c91 100644\n--- a/x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\n+++ b/x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\n\n@@ -53,7 +53,7 @@ public class AutoscalingDecisionTests extends AutoscalingTestCase {\n         assertThat(decision.type(), equalTo(AutoscalingDecision.Type.NO_SCALE));\n     }\n \n-    public void testMultipleAutoscalingDecisionTypeDown() {\n+    public void testMultipleAutoscalingDecisionTypeUp() {\n         final int numberOfDecisions = randomIntBetween(1, 8);\n         final List<SingleAutoscalingDecision> decisions = new ArrayList<>(numberOfDecisions);\n         for (int i = 0; i < numberOfDecisions; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NzE1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53934#discussion_r396387153", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testMultipleAutoscalingDecisionTypeDown() {\n          \n          \n            \n                public void testMultipleAutoscalingDecisionTypeUp() {", "author": "henningandersen", "createdAt": "2020-03-23T11:37:10Z", "path": "x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.autoscaling;\n+\n+import org.elasticsearch.common.Randomness;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.autoscaling.AutoscalingDecision.SingleAutoscalingDecision;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class AutoscalingDecisionTests extends AutoscalingTestCase {\n+\n+    public void testSingleAutoscalingDecisionType() {\n+        final AutoscalingDecision.Type type = randomFrom(AutoscalingDecision.Type.values());\n+        final SingleAutoscalingDecision decision = randomAutoscalingDecisionOfType(type);\n+        assertThat(decision.type(), equalTo(type));\n+    }\n+\n+    public void testMultipleAutoscalingDecisionTypeUp() {\n+        final int numberOfDecisions = 1 + randomIntBetween(1, 8);\n+        final List<SingleAutoscalingDecision> decisions = new ArrayList<>(numberOfDecisions);\n+        for (int i = 0; i < numberOfDecisions; i++) {\n+            decisions.add(randomAutoscalingDecisionOfType(AutoscalingDecision.Type.SCALE_DOWN));\n+        }\n+        final AutoscalingDecision.MultipleAutoscalingDecision decision = new AutoscalingDecision.MultipleAutoscalingDecision(decisions);\n+        assertThat(decision.type(), equalTo(AutoscalingDecision.Type.SCALE_DOWN));\n+    }\n+\n+    public void testMultipleAutoscalingDecisionTypeNo() {\n+        final int numberOfDownDecisions = randomIntBetween(0, 8);\n+        final int numberOfNoDecisions = randomIntBetween(1, 8);\n+        final List<SingleAutoscalingDecision> decisions = new ArrayList<>(numberOfDownDecisions + numberOfNoDecisions);\n+        for (int i = 0; i < numberOfDownDecisions; i++) {\n+            decisions.add(randomAutoscalingDecisionOfType(AutoscalingDecision.Type.SCALE_DOWN));\n+        }\n+        for (int i = 0; i < numberOfNoDecisions; i++) {\n+            decisions.add(randomAutoscalingDecisionOfType(AutoscalingDecision.Type.NO_SCALE));\n+        }\n+        Randomness.shuffle(decisions);\n+        final AutoscalingDecision.MultipleAutoscalingDecision decision = new AutoscalingDecision.MultipleAutoscalingDecision(decisions);\n+        assertThat(decision.type(), equalTo(AutoscalingDecision.Type.NO_SCALE));\n+    }\n+\n+    public void testMultipleAutoscalingDecisionTypeDown() {", "originalCommit": "60c3578baa6852e74f43166d0eac5d713b32eb5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3d389f75457eb05cb7717aad1160f3eb898eb", "chunk": "diff --git a/x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java b/x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\nindex 19b53acdb1b..43714bc2c91 100644\n--- a/x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\n+++ b/x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\n\n@@ -53,7 +53,7 @@ public class AutoscalingDecisionTests extends AutoscalingTestCase {\n         assertThat(decision.type(), equalTo(AutoscalingDecision.Type.NO_SCALE));\n     }\n \n-    public void testMultipleAutoscalingDecisionTypeDown() {\n+    public void testMultipleAutoscalingDecisionTypeUp() {\n         final int numberOfDecisions = randomIntBetween(1, 8);\n         final List<SingleAutoscalingDecision> decisions = new ArrayList<>(numberOfDecisions);\n         for (int i = 0; i < numberOfDecisions; i++) {\n"}}, {"oid": "4bf3d389f75457eb05cb7717aad1160f3eb898eb", "url": "https://github.com/elastic/elasticsearch/commit/4bf3d389f75457eb05cb7717aad1160f3eb898eb", "message": "Update x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\n\nCo-Authored-By: Henning Andersen <33268011+henningandersen@users.noreply.github.com>", "committedDate": "2020-03-23T21:13:40Z", "type": "commit"}, {"oid": "737ca962f2287dad933f4c6edad9ce2cbb0705d8", "url": "https://github.com/elastic/elasticsearch/commit/737ca962f2287dad933f4c6edad9ce2cbb0705d8", "message": "Update x-pack/plugin/autoscaling/src/test/java/org/elasticsearch/xpack/autoscaling/AutoscalingDecisionTests.java\n\nCo-Authored-By: Henning Andersen <33268011+henningandersen@users.noreply.github.com>", "committedDate": "2020-03-23T21:13:47Z", "type": "commit"}, {"oid": "f58c00f0e5488920e8bf6b739b931be0b61d5cdb", "url": "https://github.com/elastic/elasticsearch/commit/f58c00f0e5488920e8bf6b739b931be0b61d5cdb", "message": "Refactoring", "committedDate": "2020-03-23T21:56:23Z", "type": "commit"}, {"oid": "819694b96e19509b1388719915390fae961afb66", "url": "https://github.com/elastic/elasticsearch/commit/819694b96e19509b1388719915390fae961afb66", "message": "Add test", "committedDate": "2020-03-23T22:31:41Z", "type": "commit"}, {"oid": "94f971368f36b0874aa66b6ae1ff98593e39f0d0", "url": "https://github.com/elastic/elasticsearch/commit/94f971368f36b0874aa66b6ae1ff98593e39f0d0", "message": "Merge branch 'master' into autoscaling-decisions", "committedDate": "2020-03-24T01:24:09Z", "type": "commit"}]}