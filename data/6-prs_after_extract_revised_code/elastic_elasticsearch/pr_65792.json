{"pr_number": 65792, "pr_title": "SQL: Enable the InnerAggregates inside PIVOT", "pr_createdAt": "2020-12-02T23:26:41Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65792", "timeline": [{"oid": "63ffe2e0aae647a5a810f087c6155ca7e7327488", "url": "https://github.com/elastic/elasticsearch/commit/63ffe2e0aae647a5a810f087c6155ca7e7327488", "message": "SQL: Enable the InnerAggregates inside PIVOT\n\n* Remove the limitation of not being able use `InnerAggregate` inside\nPIVOT (aggregations using extended and matrix stats)", "committedDate": "2020-12-02T23:23:05Z", "type": "commit"}, {"oid": "a6208fb82a7233817a71a555cf24100027f09811", "url": "https://github.com/elastic/elasticsearch/commit/a6208fb82a7233817a71a555cf24100027f09811", "message": "Additional, more complicated testcases", "committedDate": "2020-12-03T16:19:40Z", "type": "commit"}, {"oid": "19dc1c62a139eb4c947e6e70ec6275f6603a492a", "url": "https://github.com/elastic/elasticsearch/commit/19dc1c62a139eb4c947e6e70ec6275f6603a492a", "message": "Test that `PIVOT` and `GROUP BY` has same query\n\nTest that the `PIVOT` results in the same query as\nthe `GROUP BY`. This should hold across all the `AggregateFunction`s we\nhave.", "committedDate": "2020-12-03T22:46:26Z", "type": "commit"}, {"oid": "38675937470735be4d70c80f35f8f14ec6336e14", "url": "https://github.com/elastic/elasticsearch/commit/38675937470735be4d70c80f35f8f14ec6336e14", "message": "Merge remote-tracking branch 'origin/master' into feature/pivot-inneraggregates", "committedDate": "2020-12-03T23:35:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNDg1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/65792#discussion_r536034852", "bodyText": "It's better to get the list from the Function registry so that all existing aggs and future ones are picked up without having to manually update this test (since it is unlikely it will happen).", "author": "costin", "createdAt": "2020-12-04T11:33:36Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java", "diffHunk": "@@ -495,14 +497,34 @@ public void testFoldingOfPivot() {\n         assertEquals(EsQueryExec.class, p.getClass());\n         EsQueryExec ee = (EsQueryExec) p;\n         assertEquals(3, ee.output().size());\n-        assertEquals(Arrays.asList(\"bool\", \"'A'\", \"'B'\"), Expressions.names(ee.output()));\n+        assertEquals(asList(\"bool\", \"'A'\", \"'B'\"), Expressions.names(ee.output()));\n         String q = ee.toString().replaceAll(\"\\\\s+\", \"\");\n         assertThat(q, containsString(\"\\\"query\\\":{\\\"terms\\\":{\\\"keyword\\\":[\\\"A\\\",\\\"B\\\"]\"));\n         String a = ee.queryContainer().aggs().asAggBuilder().toString().replaceAll(\"\\\\s+\", \"\");\n         assertThat(a, containsString(\"\\\"terms\\\":{\\\"field\\\":\\\"bool\\\"\"));\n         assertThat(a, containsString(\"\\\"terms\\\":{\\\"field\\\":\\\"keyword\\\"\"));\n         assertThat(a, containsString(\"{\\\"avg\\\":{\\\"field\\\":\\\"int\\\"}\"));\n     }\n+    ", "originalCommit": "38675937470735be4d70c80f35f8f14ec6336e14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3MjkzNg==", "url": "https://github.com/elastic/elasticsearch/pull/65792#discussion_r536272936", "bodyText": "\ud83d\udc4d Yep, that sounds like a better solution (was thinking about possible going with reflection, but this is better).", "author": "palesz", "createdAt": "2020-12-04T17:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNDg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cca0ed7ff37ad02f9dbd5ff7bb8965d0efb116ee", "chunk": "diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java\nindex fbe953bb901..e4ba9eaa7b1 100644\n--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java\n+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java\n\n@@ -507,10 +509,15 @@ public class QueryFolderTests extends ESTestCase {\n     }\n     \n     public void testPivotHasSameQueryAsGroupBy() {\n-        List<String> aggregations = asList(\"FIRST(int)\", \"LAST(int)\", \"COUNT(int)\", \"AVG(int)\", \n-            \"MIN(int)\", \"MAX(int)\", \"SUM(int)\", \"PERCENTILE(int, 0)\", \"PERCENTILE_RANK(int, 0)\", \n-            \"SUM_OF_SQUARES(int)\", \"STDDEV_POP(int)\", \"STDDEV_SAMP(int)\", \"VAR_SAMP(int)\", \"VAR_POP(int)\", \n-            \"SKEWNESS(int)\", \"MAD(int)\", \"KURTOSIS(int)\");\n+        final Map<String, String> aggFnsWithMultipleArguments = Map.of(\n+            \"PERCENTILE\", \"PERCENTILE(int, 0)\",\n+            \"PERCENTILE_RANK\", \"PERCENTILE_RANK(int, 0)\"\n+        );\n+        List<String> aggregations = new SqlFunctionRegistry().listFunctions()\n+                .stream()\n+                .filter(def -> AggregateFunction.class.isAssignableFrom(def.clazz()))\n+                .map(def -> aggFnsWithMultipleArguments.getOrDefault(def.name(), def.name() + \"(int)\"))\n+                .collect(toList());\n         for (String aggregationStr : aggregations) {\n             PhysicalPlan pivotPlan = plan(\"SELECT * FROM (SELECT some.dotted.field, bool, keyword, int FROM test) \" +\n                 \"PIVOT(\" + aggregationStr + \" FOR keyword IN ('A', 'B'))\");\n"}}, {"oid": "cca0ed7ff37ad02f9dbd5ff7bb8965d0efb116ee", "url": "https://github.com/elastic/elasticsearch/commit/cca0ed7ff37ad02f9dbd5ff7bb8965d0efb116ee", "message": "Utilized SQLFunctionRegistry to look up the `AggregateFunction`s", "committedDate": "2020-12-04T18:11:10Z", "type": "commit"}, {"oid": "8480e392167385260f249340ad6734db3cd41691", "url": "https://github.com/elastic/elasticsearch/commit/8480e392167385260f249340ad6734db3cd41691", "message": "Merge remote-tracking branch 'origin/master' into feature/pivot-inneraggregates", "committedDate": "2020-12-04T18:12:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1OTQ3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/65792#discussion_r537459473", "bodyText": "You might want to use a different construct to ease backporting to 7.x due to the JDK difference", "author": "costin", "createdAt": "2020-12-07T12:13:06Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java", "diffHunk": "@@ -495,14 +499,39 @@ public void testFoldingOfPivot() {\n         assertEquals(EsQueryExec.class, p.getClass());\n         EsQueryExec ee = (EsQueryExec) p;\n         assertEquals(3, ee.output().size());\n-        assertEquals(Arrays.asList(\"bool\", \"'A'\", \"'B'\"), Expressions.names(ee.output()));\n+        assertEquals(asList(\"bool\", \"'A'\", \"'B'\"), Expressions.names(ee.output()));\n         String q = ee.toString().replaceAll(\"\\\\s+\", \"\");\n         assertThat(q, containsString(\"\\\"query\\\":{\\\"terms\\\":{\\\"keyword\\\":[\\\"A\\\",\\\"B\\\"]\"));\n         String a = ee.queryContainer().aggs().asAggBuilder().toString().replaceAll(\"\\\\s+\", \"\");\n         assertThat(a, containsString(\"\\\"terms\\\":{\\\"field\\\":\\\"bool\\\"\"));\n         assertThat(a, containsString(\"\\\"terms\\\":{\\\"field\\\":\\\"keyword\\\"\"));\n         assertThat(a, containsString(\"{\\\"avg\\\":{\\\"field\\\":\\\"int\\\"}\"));\n     }\n+    \n+    public void testPivotHasSameQueryAsGroupBy() {\n+        final Map<String, String> aggFnsWithMultipleArguments = Map.of(", "originalCommit": "8480e392167385260f249340ad6734db3cd41691", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2MDM3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65792#discussion_r537560377", "bodyText": "I was thinking about this. I would prefer using the new APIs on master and change during backporting to Java 8 compatible, so moving forward we use the newer APIs.", "author": "palesz", "createdAt": "2020-12-07T14:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ1OTQ3Mw=="}], "type": "inlineReview", "revised_code": null}]}