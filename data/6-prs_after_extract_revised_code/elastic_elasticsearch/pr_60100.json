{"pr_number": 60100, "pr_title": "Add search 'fields' option to support high-level field retrieval.", "pr_createdAt": "2020-07-23T00:25:03Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60100", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461030514", "bodyText": "I wonder if the returned list should be sorted similarly to what we do for doc_values or if we should preserve the original order in the document's source ? I am saying this since we may want to return results from doc_values in the future but that would be inconsistent with the current way of retrieving fields.", "author": "jimczi", "createdAt": "2020-07-27T16:52:55Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -269,6 +278,50 @@ public void parse(ParseContext context) throws IOException {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n+    /**\n+     * Given access to a document's _source, return this field's values.\n+     *\n+     * In addition to pulling out the values, mappers can parse them into a standard form. This\n+     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n+     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n+     * parse the  source value into a number of the right type.\n+     *\n+     * Some mappers may need more flexibility and can override this entire method instead.\n+     *\n+     * @param lookup a lookup structure over the document's source.\n+     * @param format an optional format string used when formatting values, for example a date format.\n+     * @return a list a standardized field values.\n+     */\n+    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {", "originalCommit": "568d248ec1c00705b5427fcf334044f24c30fdb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Nzc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461047757", "bodyText": "I had thought that the order of the returned list was \"undefined\". They come back in the sort order as the _source now, but that is more an accident of the implementation than anything.", "author": "nik9000", "createdAt": "2020-07-27T17:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NDIyMA==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461064220", "bodyText": "In my experience, users don't find that doc values behavior to be useful and are sometimes quite confused by it. One example is #29110, and I've also seen discuss issues asking why doc values don't preserve the order of the array. I wonder if sorting the results by value will make it harder for users to switch to the API from source filtering, in cases where they care about returning the original list order.\nThis API can also return structured values like numeric ranges or geo points, which don't have an obvious default sort order. It could be harder to understand the behavior if arrays sometimes came back in sorted order, sometimes not?", "author": "jtibshirani", "createdAt": "2020-07-27T17:49:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDI0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461074243", "bodyText": "I think the safest thing may be to document that the order of the returned results is undefined. Maybe in a follow up we could add a parameter to preserve the order of the original document? If someone asks for it. That'd just force us to _source.", "author": "nik9000", "createdAt": "2020-07-27T18:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NjM0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461076341", "bodyText": "harder for users to switch to the API from source filtering\n\nAgreed, I was more seeing this from users that switch to the API from docvalues_field but I can see how it could be confusing coming from source filtering. We don't have clear plans to retrieve values from doc_values in this API so I don't have strong feeling here. Let's keep it undefined for now and we can discuss again if we add something that uses doc values under the hood ?", "author": "jimczi", "createdAt": "2020-07-27T18:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3ODc3NA==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461078774", "bodyText": "+1 to what @nik9000 said, his comment appeared after I posted mine so I am glad we came to the same conclusion ;).", "author": "jimczi", "createdAt": "2020-07-27T18:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3OTQ4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461079489", "bodyText": "I think the safest thing may be to document that the order of the returned results is undefined.\n\n\nLet's keep it undefined for now and we can discuss again if we add something that uses doc values under the hood ?\n\nThis works for me, I'll add a note to the docs that users shouldn't rely on the order of the values.", "author": "jtibshirani", "createdAt": "2020-07-27T18:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MDA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461080085", "bodyText": "Oops, multiple race conditions here :) Sounds like we are all on the same page.", "author": "jtibshirani", "createdAt": "2020-07-27T18:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4ODEwNA==", "url": "https://github.com/elastic/elasticsearch/pull/60100#discussion_r461088104", "bodyText": "Three way race!", "author": "nik9000", "createdAt": "2020-07-27T18:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMDUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "745fa627200704eff970b8081a3364b0746cbab5", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java\nindex 58bbf9c2b83..30f38ce16d8 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java\n\n@@ -278,50 +269,6 @@ public abstract class FieldMapper extends Mapper implements Cloneable {\n      */\n     protected abstract void parseCreateField(ParseContext context) throws IOException;\n \n-    /**\n-     * Given access to a document's _source, return this field's values.\n-     *\n-     * In addition to pulling out the values, mappers can parse them into a standard form. This\n-     * method delegates parsing to {@link #parseSourceValue} for parsing. Most mappers will choose\n-     * to override {@link #parseSourceValue} -- for example numeric field mappers make sure to\n-     * parse the  source value into a number of the right type.\n-     *\n-     * Some mappers may need more flexibility and can override this entire method instead.\n-     *\n-     * @param lookup a lookup structure over the document's source.\n-     * @param format an optional format string used when formatting values, for example a date format.\n-     * @return a list a standardized field values.\n-     */\n-    public List<?> lookupValues(SourceLookup lookup, @Nullable String format) {\n-        Object sourceValue = lookup.extractValue(name(), nullValue());\n-        if (sourceValue == null) {\n-            return List.of();\n-        }\n-\n-        List<Object> values = new ArrayList<>();\n-        if (parsesArrayValue()) {\n-            return (List<?>) parseSourceValue(sourceValue, format);\n-        } else {\n-            List<?> sourceValues = sourceValue instanceof List ? (List<?>) sourceValue : List.of(sourceValue);\n-            for (Object value : sourceValues) {\n-                Object parsedValue = parseSourceValue(value, format);\n-                if (parsedValue != null) {\n-                    values.add(parsedValue);\n-                }\n-            }\n-        }\n-        return values;\n-    }\n-\n-    /**\n-     * Given a value that has been extracted from a document's source, parse it into a standard\n-     * format. This parsing logic should closely mirror the value parsing in\n-     * {@link #parseCreateField} or {@link #parse}.\n-     *\n-     * Note that when overriding this method, {@link #lookupValues} should *not* be overridden.\n-     */\n-    protected abstract Object parseSourceValue(Object value, @Nullable String format);\n-\n     protected void createFieldNamesField(ParseContext context) {\n         FieldNamesFieldType fieldNamesFieldType = context.docMapper().metadataMapper(FieldNamesFieldMapper.class).fieldType();\n         if (fieldNamesFieldType != null && fieldNamesFieldType.isEnabled()) {\n"}}, {"oid": "745fa627200704eff970b8081a3364b0746cbab5", "url": "https://github.com/elastic/elasticsearch/commit/745fa627200704eff970b8081a3364b0746cbab5", "message": "Add a simple 'fetch fields' phase. (#55639)\n\nCurrently the phase just looks up each field name in the _source and returns its\nvalues in the 'fields' section of the response. There are several aspects that\nneed improvement -- this PR just lays out the initial class structure and tests.", "committedDate": "2020-07-27T18:51:45Z", "type": "commit"}, {"oid": "7145c0b0baa95bb8d4cea068ecb86eab09ad3305", "url": "https://github.com/elastic/elasticsearch/commit/7145c0b0baa95bb8d4cea068ecb86eab09ad3305", "message": "Make the fetch fields phase easier to test. (#55756)\n\nThis commit pulls out a FieldValueRetriever object, which retrieves specific\nfields given a document's source. The new object makes it easier to unit test\nthe logic, and will help keep FetchFieldsPhase from growing too complex as we\nadd more functionality.", "committedDate": "2020-07-27T18:51:45Z", "type": "commit"}, {"oid": "30b5cf156f93b4313c0ebed77bad8a7b060647bd", "url": "https://github.com/elastic/elasticsearch/commit/30b5cf156f93b4313c0ebed77bad8a7b060647bd", "message": "Resolve field aliases and multi-fields. (#55889)\n\nThis commit adds the capability to `FieldTypeLookup` to retrieve a field's\npaths in the _source. When retrieving a field's values, we consult these\nsource paths to make sure we load the relevant values. This allows us to handle\nrequests for field aliases and multi-fields.\n\nWe also retrieve values that were copied into the field through copy_to. To me\nthis is what users would expect out of the API, and it's consistent with what\ncomes back from `docvalues_fields` and `stored_fields`. However it does add\nsome complexity, and was not something flagged as important from any of the\nclients I spoke to about this API. I'm looking for feedback on this point.", "committedDate": "2020-07-27T18:51:45Z", "type": "commit"}, {"oid": "9e2ee63c5d7afb1173c93746bc073375cfcc66a8", "url": "https://github.com/elastic/elasticsearch/commit/9e2ee63c5d7afb1173c93746bc073375cfcc66a8", "message": "Allow field mappers to retrieve fields from source. (#56928)\n\nThis PR adds new method `FieldMapper#lookupValues(SourceLookup)` that extracts\nand parses the source values. This lets us return values like numbers and dates\nin a consistent format, and also handle special data types like\n`constant_keyword`. The `lookupValues` method calls into `parseSourceValue`,\nwhich mappers can override to specify how values should be parsed.", "committedDate": "2020-07-27T18:51:45Z", "type": "commit"}, {"oid": "51b6a4e71dc356714d85572812936ffd605e9359", "url": "https://github.com/elastic/elasticsearch/commit/51b6a4e71dc356714d85572812936ffd605e9359", "message": "Add support for a 'format' option in fields retrieval. (#57855)\n\nThe new `format` option allows for passing a custom date format:\n\n```\nPOST logs-*/_search\n{\n  \"fields\": [\n    \"file.*\",\n    {\n      \"field\": \"event.timestamp\",\n      \"format\": \"epoch_millis\"\n    },\n    ...\n  ]\n}\n```\n\nOther API notes:\n* We use the same syntax as `docvalue_fields` for consistency. Under the hood,\nboth `fields` and `docvalue_fields` use the same `FieldAndFormat` object to\nshare serialization logic.\n* Only `date` and `date_range` fields support formatting currently.", "committedDate": "2020-07-27T18:51:46Z", "type": "commit"}, {"oid": "72c69da70bd5dd04a66d3005ace09025d64f3e00", "url": "https://github.com/elastic/elasticsearch/commit/72c69da70bd5dd04a66d3005ace09025d64f3e00", "message": "Respect the ignore_above option. (#57307)\n\nFor keyword-style fields, if the source value is larger than `ignore_above`\nthen we don't retrieve the field. In particular, the field is treated as if the\nvalue didn't exist.", "committedDate": "2020-07-27T18:51:46Z", "type": "commit"}, {"oid": "828f5148b19592cd23836f6382a67f66f09213d9", "url": "https://github.com/elastic/elasticsearch/commit/828f5148b19592cd23836f6382a67f66f09213d9", "message": "For the fields fetch phase, avoid reloading stored fields. (#58196)\n\nThis PR updates FetchFieldsPhase to override hitExecute instead of hitsExecute\n(plural). This way, we can make sure that the stored fields (including _source)\nare only loaded once per hit as part of FetchPhase.", "committedDate": "2020-07-27T18:51:46Z", "type": "commit"}, {"oid": "5b31edee0c1d990c91f559993b79971e2921a279", "url": "https://github.com/elastic/elasticsearch/commit/5b31edee0c1d990c91f559993b79971e2921a279", "message": "Skip over metadata fields in the field retrieval API. (#58710)\n\nThis avoids unnecessary lookups, since metadata fields don't have _source\nvalues.", "committedDate": "2020-07-27T18:51:46Z", "type": "commit"}, {"oid": "608d185f9c010ea63bd76c76bb210bfac4174a13", "url": "https://github.com/elastic/elasticsearch/commit/608d185f9c010ea63bd76c76bb210bfac4174a13", "message": "Return null_value when the source contains a 'null' for the field. (#58623)\n\nThis PR adds a version of `XContentMapValues.extractValue` that accepts a\ndefault value to return in place of 'null'. It then uses this method when\nlooking up source values to return the configured `null_value` instead of\n'null' when retrieving fields.", "committedDate": "2020-07-27T18:51:46Z", "type": "commit"}, {"oid": "2fe80b44e6d885e5f2a9e81cf4190f8a99a03af2", "url": "https://github.com/elastic/elasticsearch/commit/2fe80b44e6d885e5f2a9e81cf4190f8a99a03af2", "message": "Add docs for the fields retrieval API. (#58787)\n\nThis PR adds docs for the `fields` parameter. We now present `fields` as the\npreferred way to load specific fields in a search, with `docvalue_fields` and\n`stored_fields` as other options to look into. Source filtering is no longer\nfeatured prominently, and its section is moved to the end.", "committedDate": "2020-07-27T18:51:46Z", "type": "commit"}, {"oid": "56ff9bcf565db335d7485e1101f631539fc6ecef", "url": "https://github.com/elastic/elasticsearch/commit/56ff9bcf565db335d7485e1101f631539fc6ecef", "message": "Apply keyword normalizers in the field retrieval API. (#59260)\n\nAs we discussed in the meta-issue, when returning `keyword` in the fields\r\nretrieval API, we'll apply their `normalizer`. This decision is not a clear-cut\r\none, and we'll validate it with internal users before merging the feature\r\nbranch.", "committedDate": "2020-07-27T18:51:46Z", "type": "commit"}, {"oid": "8b2247c950ca8d1bff0fe058eaff729fb1d3f345", "url": "https://github.com/elastic/elasticsearch/commit/8b2247c950ca8d1bff0fe058eaff729fb1d3f345", "message": "Support spatial fields in field retrieval API. (#59821)\n\nAlthough we accept a variety of formats during indexing, spatial data is\nreturned in a single consistent format. This is GeoJSON by default, but\nwell-known text is also supported by passing the option 'format: wkt'.\n\nNote that points (in addition to shapes) are returned in GeoJSON by default. The\nreasoning is that this gives better consistency, and is the most convenient\nformat for most REST API users.", "committedDate": "2020-07-27T18:52:23Z", "type": "commit"}, {"oid": "594d631b65e4911a22341ab7ebc22cb57cdff118", "url": "https://github.com/elastic/elasticsearch/commit/594d631b65e4911a22341ab7ebc22cb57cdff118", "message": "Remove the 'fields' URL param from the REST spec.\n\nWe don't actually support 'fields' as a URL parameter.", "committedDate": "2020-07-27T18:53:31Z", "type": "commit"}, {"oid": "840cd116d0b319bde02b19267e8835d8003b18f8", "url": "https://github.com/elastic/elasticsearch/commit/840cd116d0b319bde02b19267e8835d8003b18f8", "message": "Document that arrays are returned in an undefined order.", "committedDate": "2020-07-27T19:08:41Z", "type": "commit"}, {"oid": "840cd116d0b319bde02b19267e8835d8003b18f8", "url": "https://github.com/elastic/elasticsearch/commit/840cd116d0b319bde02b19267e8835d8003b18f8", "message": "Document that arrays are returned in an undefined order.", "committedDate": "2020-07-27T19:08:41Z", "type": "forcePushed"}]}