{"pr_number": 53228, "pr_title": "Compatible version of typed Index And Get API", "pr_createdAt": "2020-03-06T15:21:31Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53228", "timeline": [{"oid": "a4f80caecaecaf77fc4ad3a888028160fcaf192e", "url": "https://github.com/elastic/elasticsearch/commit/a4f80caecaecaf77fc4ad3a888028160fcaf192e", "message": "rest index action - 283 nofix", "committedDate": "2020-03-05T11:44:07Z", "type": "commit"}, {"oid": "c99b81800e544cc45c946f3dad42a167997fd7ca", "url": "https://github.com/elastic/elasticsearch/commit/c99b81800e544cc45c946f3dad42a167997fd7ca", "message": "Index and Get and Infra\n\n1226 tests, 227 failures, 16ignored\n23 / 2 failled in index/*\nfailing\nCompatRestIT. test {yaml=index/70_mix_typeless_typeful/Index call that\nintroduces new field mappings}\nCompatRestIT. test {yaml=index/70_mix_typeless_typeful/Index with\ntypeless API on an index that has types}", "committedDate": "2020-03-06T10:16:50Z", "type": "commit"}, {"oid": "c9c0e55319bbc7f2f8ae6522d5347713ad1e406e", "url": "https://github.com/elastic/elasticsearch/commit/c9c0e55319bbc7f2f8ae6522d5347713ad1e406e", "message": "minor tests", "committedDate": "2020-03-06T15:19:50Z", "type": "commit"}, {"oid": "258542ee492623977592838f24c9950ead6bbd60", "url": "https://github.com/elastic/elasticsearch/commit/258542ee492623977592838f24c9950ead6bbd60", "message": "compile fixees", "committedDate": "2020-03-06T18:35:18Z", "type": "commit"}, {"oid": "548fbd902235830bfc0dcf5cba478f0e70f96894", "url": "https://github.com/elastic/elasticsearch/commit/548fbd902235830bfc0dcf5cba478f0e70f96894", "message": "Merge branch 'compat_rest_api' into compat/type-index-get", "committedDate": "2020-03-09T09:54:02Z", "type": "commit"}, {"oid": "0dbea8a9650e63c2a7938a156639889523097a2f", "url": "https://github.com/elastic/elasticsearch/commit/0dbea8a9650e63c2a7938a156639889523097a2f", "message": "disable testing conventions", "committedDate": "2020-03-09T13:07:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4OTE2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r389989169", "bodyText": "Until we defined a better approach, can you start adding in something like this\nassert Version.CURRENT.major == 8 : \"REST API compatilbity for version 7 is only supported on version 8\";```", "author": "jakelandis", "createdAt": "2020-03-09T22:08:47Z", "path": "server/src/main/java/org/elasticsearch/rest/action/document/RestGetAction.java", "diffHunk": "@@ -86,4 +100,30 @@ protected RestStatus getStatus(final GetResponse response) {\n         });\n     }\n \n+    public static class CompatibleRestGetAction extends RestGetAction {", "originalCommit": "0dbea8a9650e63c2a7938a156639889523097a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4cf6bc1ef4a7eeec3134accc607b4a89d34e1ab7", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/document/RestGetAction.java b/server/src/main/java/org/elasticsearch/rest/action/document/RestGetAction.java\nindex e50ebbef3ea..a5b132c2556 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/document/RestGetAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/document/RestGetAction.java\n\n@@ -101,6 +102,7 @@ public class RestGetAction extends BaseRestHandler {\n     }\n \n     public static class CompatibleRestGetAction extends RestGetAction {\n+\n         private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestGetAction.class));\n         private static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] Specifying types in \" +\n             \"document get requests is deprecated, use the /{index}/_doc/{id} endpoint instead.\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MTQ2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r389991466", "bodyText": "Can you add a TODO in here to ensure we get some buy in on #52370 before we merge the header format.", "author": "jakelandis", "createdAt": "2020-03-09T22:14:38Z", "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.elasticsearch.rest;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.index.mapper.MapperService;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+\n+public class CompatibleHandlers {", "originalCommit": "0dbea8a9650e63c2a7938a156639889523097a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4cf6bc1ef4a7eeec3134accc607b4a89d34e1ab7", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java b/server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java\nindex 9260a9326c8..5a454f3af9f 100644\n--- a/server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java\n+++ b/server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java\n\n@@ -25,6 +25,9 @@ public class CompatibleHandlers {\n     public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n     public static final boolean DEFAULT_INCLUDE_TYPE_NAME_POLICY = false;\n \n+    /**\n+     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n+     */\n     public static final String COMPATIBLE_HEADER = \"Accept\";\n     public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n     public static final String COMPATIBLE_VERSION = \"7\";\n"}}, {"oid": "4cf6bc1ef4a7eeec3134accc607b4a89d34e1ab7", "url": "https://github.com/elastic/elasticsearch/commit/4cf6bc1ef4a7eeec3134accc607b4a89d34e1ab7", "message": "assertions and todo for header fix", "committedDate": "2020-03-10T12:40:06Z", "type": "commit"}, {"oid": "3ac22b1eeb2deb05f63dbd197255e48c927bf0a5", "url": "https://github.com/elastic/elasticsearch/commit/3ac22b1eeb2deb05f63dbd197255e48c927bf0a5", "message": "more tests and cleanup", "committedDate": "2020-03-10T19:18:17Z", "type": "commit"}, {"oid": "38721fed27dbb76d6c71832ba5a1add83b3f6f54", "url": "https://github.com/elastic/elasticsearch/commit/38721fed27dbb76d6c71832ba5a1add83b3f6f54", "message": "Merge remote-tracking branch 'upstream/compat_rest_api' into compat/type-index-get", "committedDate": "2020-03-11T00:36:12Z", "type": "commit"}, {"oid": "f2db19f600d4e9f8572253cd7a155ad9aee7d872", "url": "https://github.com/elastic/elasticsearch/commit/f2db19f600d4e9f8572253cd7a155ad9aee7d872", "message": "introduce a module to house the REST code", "committedDate": "2020-03-11T00:45:53Z", "type": "commit"}, {"oid": "b83b4ce8f6da0e244dc670406858d6c98c06e65d", "url": "https://github.com/elastic/elasticsearch/commit/b83b4ce8f6da0e244dc670406858d6c98c06e65d", "message": "fix preCommit", "committedDate": "2020-03-11T02:03:32Z", "type": "commit"}, {"oid": "cf1d340cfce333197afb727afe8821c22071d3e0", "url": "https://github.com/elastic/elasticsearch/commit/cf1d340cfce333197afb727afe8821c22071d3e0", "message": "Merge pull request #18 from jakelandis/introduce_module\n\nIntroduce module for compat code", "committedDate": "2020-03-11T08:33:43Z", "type": "commit"}, {"oid": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "url": "https://github.com/elastic/elasticsearch/commit/5c4a02dc991b3de482eb271b0da1cbce5b397071", "message": "move restindex compatible handlers to rest-compatibility module. 228 failing", "committedDate": "2020-03-11T09:37:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MTE5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390961193", "bodyText": "I think the above can be removed ?", "author": "jakelandis", "createdAt": "2020-03-11T13:16:34Z", "path": "server/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java", "diffHunk": "@@ -19,26 +19,40 @@\n \n package org.elasticsearch.rest.action.document;\n \n+import org.apache.logging.log4j.LogManager;\n import org.elasticsearch.Version;\n import org.elasticsearch.action.index.IndexRequest;\n import org.elasticsearch.action.support.ActiveShardCount;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.index.VersionType;\n import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.CompatibleHandlers;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestActions;\n import org.elasticsearch.rest.action.RestStatusToXContentListener;\n \n import java.io.IOException;\n import java.util.List;\n import java.util.Locale;\n+import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.unmodifiableList;\n import static org.elasticsearch.rest.RestRequest.Method.POST;\n import static org.elasticsearch.rest.RestRequest.Method.PUT;\n \n public class RestIndexAction extends BaseRestHandler {\n+    private static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] Specifying types in document \" +\n+        \"index requests is deprecated, use the typeless endpoints instead (/{index}/_doc/{id}, /{index}/_doc, \" +\n+        \"or /{index}/_create/{id}).\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+        LogManager.getLogger(RestIndexAction.class));\n+    private static final Consumer<RestRequest> DEPRECATION_WARNING =\n+        r -> deprecationLogger.deprecatedAndMaybeLog(\"index_with_types\",TYPES_DEPRECATION_MESSAGE);", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java b/server/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java\nindex 20cda9f3cef..326d3d46f29 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java\n\n@@ -19,16 +19,13 @@\n \n package org.elasticsearch.rest.action.document;\n \n-import org.apache.logging.log4j.LogManager;\n import org.elasticsearch.Version;\n import org.elasticsearch.action.index.IndexRequest;\n import org.elasticsearch.action.support.ActiveShardCount;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n-import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.index.VersionType;\n import org.elasticsearch.rest.BaseRestHandler;\n-import org.elasticsearch.rest.CompatibleHandlers;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestActions;\n import org.elasticsearch.rest.action.RestStatusToXContentListener;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2ODI0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390968243", "bodyText": "Can we make this major version - 1 , so that when v9 it is auto incremented to 8 ?", "author": "jakelandis", "createdAt": "2020-03-11T13:27:35Z", "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    /**\n+     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n+     */\n+    public static final String COMPATIBLE_HEADER = \"Accept\";\n+    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n+    public static final String COMPATIBLE_VERSION = \"7\";", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NDY5MA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391144690", "bodyText": "good idea, this one will always stay as it is part of generic code always used for compatible API", "author": "pgomulka", "createdAt": "2020-03-11T17:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2ODI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\nsimilarity index 69%\nrename from server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java\nrename to modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\nindex dde2891366c..cbd61cd0ea9 100644\n--- a/server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java\n+++ b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\n\n@@ -17,22 +17,15 @@\n  * under the License.\n  */\n \n-package org.elasticsearch.rest;\n+package org.elasticsearch.rest.compat.version7;\n \n import org.elasticsearch.common.logging.DeprecationLogger;\n-import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.rest.RestRequest;\n \n import java.util.function.Consumer;\n \n public class CompatibleHandlers {\n \n-    /**\n-     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n-     */\n-    public static final String COMPATIBLE_HEADER = \"Accept\";\n-    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n-    public static final String COMPATIBLE_VERSION = \"7\";\n-\n     public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {\n         String TYPES_DEPRECATION_MESSAGE = \"[types removal] Using type as a path parameter is deprecated.\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2OTA0MA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390969040", "bodyText": "this method and the one below feel like REST v7 concerns. Can they be moved to the module ?\n(which would leave this class pretty empty and possibly move the constant strings elsewhere ?)", "author": "jakelandis", "createdAt": "2020-03-11T13:28:47Z", "path": "server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    /**\n+     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n+     */\n+    public static final String COMPATIBLE_HEADER = \"Accept\";\n+    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n+    public static final String COMPATIBLE_VERSION = \"7\";\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MjAxMA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391152010", "bodyText": "good point, the isV7Compatible can be made generic (applying to all compatible versions in the future) and can stay in RestController.\nHow about the constants though? any ideas where to place them? It feels to me like org.elasticsearch.rest package would be good. Maybe RestUtils?", "author": "pgomulka", "createdAt": "2020-03-11T17:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2OTA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MzQ4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391183483", "bodyText": "COMPATIBLE_HEADER is only used in RestRequest (so there for now) (as a side note, we also need to also check Content-Type, but am good with that in a follow up)\nCOMPATIBLE_VERSION is only in RestRequest (so there for now)\nCOMPATIBLE_PARAMS_KEY is an x-content concept, so probably somewhere in x-content", "author": "jakelandis", "createdAt": "2020-03-11T18:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2OTA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\nsimilarity index 69%\nrename from server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java\nrename to modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\nindex dde2891366c..cbd61cd0ea9 100644\n--- a/server/src/main/java/org/elasticsearch/rest/CompatibleHandlers.java\n+++ b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\n\n@@ -17,22 +17,15 @@\n  * under the License.\n  */\n \n-package org.elasticsearch.rest;\n+package org.elasticsearch.rest.compat.version7;\n \n import org.elasticsearch.common.logging.DeprecationLogger;\n-import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.rest.RestRequest;\n \n import java.util.function.Consumer;\n \n public class CompatibleHandlers {\n \n-    /**\n-     * TODO revisit when https://github.com/elastic/elasticsearch/issues/52370 is resolved\n-     */\n-    public static final String COMPATIBLE_HEADER = \"Accept\";\n-    public static final String COMPATIBLE_PARAMS_KEY = \"Compatible-With\";\n-    public static final String COMPATIBLE_VERSION = \"7\";\n-\n     public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {\n         String TYPES_DEPRECATION_MESSAGE = \"[types removal] Using type as a path parameter is deprecated.\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MDkxMA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390970910", "bodyText": "any way to remove the v7 here ? ideally this would be agnostic to the actual version (which I think it already is in all but the name)", "author": "jakelandis", "createdAt": "2020-03-11T13:31:44Z", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -328,7 +328,13 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n                       return;\n                   }\n                 } else {\n-                    dispatchRequest(request, channel, handler);\n+                    if(handler.compatibilityRequired() == false //regular (not removed) handlers are always dispatched\n+                        //handlers that were registered compatible, require request to be compatible\n+                        || CompatibleHandlers.isV7Compatible(request)) {", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NDMxOA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391144318", "bodyText": "good point, the generic and always present compatible code can be made version\nagnostic.", "author": "pgomulka", "createdAt": "2020-03-11T17:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MDkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestController.java b/server/src/main/java/org/elasticsearch/rest/RestController.java\nindex 9e12d6a0e45..4b7a2583974 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestController.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestController.java\n\n@@ -330,7 +333,7 @@ public class RestController implements HttpServerTransport.Dispatcher {\n                 } else {\n                     if(handler.compatibilityRequired() == false //regular (not removed) handlers are always dispatched\n                         //handlers that were registered compatible, require request to be compatible\n-                        || CompatibleHandlers.isV7Compatible(request)) {\n+                        || isV7Compatible(request)) {\n                         dispatchRequest(request, channel, handler);\n                     } else {\n                         handleCompatibleNotAllowed(rawPath, channel);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MzI3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390973273", "bodyText": "I am on the fence about this message, but leaning towards removing it.  I am not sure we need to tell people that this could be a compatible path.", "author": "jakelandis", "createdAt": "2020-03-11T13:35:22Z", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -340,6 +346,13 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    private void handleCompatibleNotAllowed(String rawPath, RestChannel channel) throws IOException {\n+        String msg = \"Compatible api can be only accessed with Compatible Header. Path used: \" + rawPath;", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NTU2NA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391155564", "bodyText": "I guess for future clients versions there would always be passed a header with a version. But in transition from 7 to 8, I guess some people would stay with old (like 7.0) client and won't have a header? This way they could find out quickly about the compatible API.\nI added it mostly because I found it useful when developing - but happy to remove it too.", "author": "pgomulka", "createdAt": "2020-03-11T17:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MzI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NDUyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391184526", "bodyText": "Let's remove for now. We can add it later if need be.", "author": "jakelandis", "createdAt": "2020-03-11T18:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MzI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA5ODM0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392098341", "bodyText": "will do. btw we are at the moment returning 400 bad request when handler was not found.", "author": "pgomulka", "createdAt": "2020-03-13T08:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MzI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestController.java b/server/src/main/java/org/elasticsearch/rest/RestController.java\nindex 9e12d6a0e45..4b7a2583974 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestController.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestController.java\n\n@@ -346,6 +349,11 @@ public class RestController implements HttpServerTransport.Dispatcher {\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    public static boolean isV7Compatible(ToXContent.Params params) {\n+        String param = params.param(COMPATIBLE_PARAMS_KEY);\n+        return COMPATIBLE_VERSION.equals(param);\n+    }\n+\n     private void handleCompatibleNotAllowed(String rawPath, RestChannel channel) throws IOException {\n         String msg = \"Compatible api can be only accessed with Compatible Header. Path used: \" + rawPath;\n         BytesRestResponse bytesRestResponse = BytesRestResponse.createSimpleErrorResponse(channel, RestStatus.NOT_FOUND, msg);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3OTI2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390979263", "bodyText": "note to other reviewers - the qa/rest-compat-tests is a temporary test fixture and currently runs the core REST rest tests from bwc:minor against a single current test cluster.  No need to review anything out of qa/rest-compat-tests since it will be going away in favor of per module/plugin tests.\nThe (diminishing) number of failed core REST tests is what is guiding these early efforts.", "author": "jakelandis", "createdAt": "2020-03-11T13:44:31Z", "path": "qa/rest-compat-tests/src/main/java/org/elasticsearch/rest/compat/AbstractCompatRestTest.java", "diffHunk": "@@ -76,11 +77,17 @@ private static void mutateTestCandidate(ClientYamlTestCandidate testCandidate) {\n             DoSection doSection = (DoSection) ds;\n             //TODO: be more selective here\n             doSection.setIgnoreWarnings(true);\n-            //TODO: use the real header compatibility header\n-            doSection.getApiCallSection().addHeaders(Collections.singletonMap(\"compatible-with\", \"v7\"));\n+", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/qa/rest-compat-tests/src/main/java/org/elasticsearch/rest/compat/AbstractCompatRestTest.java b/qa/rest-compat-tests/src/main/java/org/elasticsearch/rest/compat/AbstractCompatRestTest.java\nindex ef5de432bef..e8295d54624 100644\n--- a/qa/rest-compat-tests/src/main/java/org/elasticsearch/rest/compat/AbstractCompatRestTest.java\n+++ b/qa/rest-compat-tests/src/main/java/org/elasticsearch/rest/compat/AbstractCompatRestTest.java\n\n@@ -80,12 +80,12 @@ public class AbstractCompatRestTest extends ESClientYamlSuiteTestCase {\n \n             String compatibleHeader = createCompatibleHeader();\n             doSection.getApiCallSection()\n-                     .addHeaders(Collections.singletonMap(CompatibleHandlers.COMPATIBLE_HEADER, compatibleHeader));\n+                     .addHeaders(Collections.singletonMap(CompatibleConstants.COMPATIBLE_HEADER, compatibleHeader));\n         });\n     }\n \n     private static String createCompatibleHeader() {\n-        return \"application/vnd.elasticsearch+json;compatible-with=\" + CompatibleHandlers.COMPATIBLE_VERSION;\n+        return \"application/vnd.elasticsearch+json;compatible-with=\" + CompatibleConstants.COMPATIBLE_VERSION;\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4NjIxNg==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390986216", "bodyText": "can you also test yaml,cbor, and smile ?\nalso, does case matter ? (can you add a test for that too)", "author": "jakelandis", "createdAt": "2020-03-11T13:54:40Z", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,11 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() throws Exception {\n+        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        assertThat(mediaType,equalTo(\"application/json\"));\n+        mediaType = XContentType.parseMediaType(\"application/json\");\n+        assertThat(mediaType,equalTo(\"application/json\"));\n+    }", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java b/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\nindex a2b89b2bf54..c79beedc7ca 100644\n--- a/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\n+++ b/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\n\n@@ -85,10 +85,40 @@ public class XContentTypeTests extends ESTestCase {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n \n-    public void testMediaType() throws Exception {\n-        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");\n-        assertThat(mediaType,equalTo(\"application/json\"));\n-        mediaType = XContentType.parseMediaType(\"application/json\");\n-        assertThat(mediaType,equalTo(\"application/json\"));\n+    public void testMediaType() {\n+        byte version = randomByte();\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(\"application/json\"));\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(\"application/cbor\"));\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(\"application/smile\"));\n+        assertThat(XContentType.parseMediaType(\"application/json\"),\n+            equalTo(\"application/json\"));\n+\n+\n+        assertThat(XContentType.parseMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(\"application/json\"));\n+        assertThat(XContentType.parseMediaType(\"APPLICATION/JSON\"),\n+            equalTo(\"application/json\"));\n+    }\n+\n+\n+    public void testVersionParsing() {\n+        byte version = randomByte();\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4ODM2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390988366", "bodyText": "can you use a random value for the compatible with (to help catch any regex assumptions around single digits)", "author": "jakelandis", "createdAt": "2020-03-11T13:57:44Z", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,11 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() throws Exception {\n+        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java b/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\nindex a2b89b2bf54..c79beedc7ca 100644\n--- a/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\n+++ b/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\n\n@@ -85,10 +85,40 @@ public class XContentTypeTests extends ESTestCase {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n \n-    public void testMediaType() throws Exception {\n-        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");\n-        assertThat(mediaType,equalTo(\"application/json\"));\n-        mediaType = XContentType.parseMediaType(\"application/json\");\n-        assertThat(mediaType,equalTo(\"application/json\"));\n+    public void testMediaType() {\n+        byte version = randomByte();\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(\"application/json\"));\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(\"application/cbor\"));\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(\"application/smile\"));\n+        assertThat(XContentType.parseMediaType(\"application/json\"),\n+            equalTo(\"application/json\"));\n+\n+\n+        assertThat(XContentType.parseMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(\"application/json\"));\n+        assertThat(XContentType.parseMediaType(\"APPLICATION/JSON\"),\n+            equalTo(\"application/json\"));\n+    }\n+\n+\n+    public void testVersionParsing() {\n+        byte version = randomByte();\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4ODgzOA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390988838", "bodyText": "can you also test parseVersion ?", "author": "jakelandis", "createdAt": "2020-03-11T13:58:21Z", "path": "server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java", "diffHunk": "@@ -84,4 +84,11 @@ public void testFromRubbish() throws Exception {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"text/plain\"), nullValue());\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n+\n+    public void testMediaType() throws Exception {\n+        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        assertThat(mediaType,equalTo(\"application/json\"));\n+        mediaType = XContentType.parseMediaType(\"application/json\");\n+        assertThat(mediaType,equalTo(\"application/json\"));", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java b/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\nindex a2b89b2bf54..c79beedc7ca 100644\n--- a/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\n+++ b/server/src/test/java/org/elasticsearch/common/xcontent/XContentTypeTests.java\n\n@@ -85,10 +85,40 @@ public class XContentTypeTests extends ESTestCase {\n         assertThat(XContentType.fromMediaTypeOrFormat(\"gobbly;goop\"), nullValue());\n     }\n \n-    public void testMediaType() throws Exception {\n-        String mediaType = XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=7\");\n-        assertThat(mediaType,equalTo(\"application/json\"));\n-        mediaType = XContentType.parseMediaType(\"application/json\");\n-        assertThat(mediaType,equalTo(\"application/json\"));\n+    public void testMediaType() {\n+        byte version = randomByte();\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(\"application/json\"));\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(\"application/cbor\"));\n+        assertThat(XContentType.parseMediaType(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(\"application/smile\"));\n+        assertThat(XContentType.parseMediaType(\"application/json\"),\n+            equalTo(\"application/json\"));\n+\n+\n+        assertThat(XContentType.parseMediaType(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(\"application/json\"));\n+        assertThat(XContentType.parseMediaType(\"APPLICATION/JSON\"),\n+            equalTo(\"application/json\"));\n+    }\n+\n+\n+    public void testVersionParsing() {\n+        byte version = randomByte();\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+json;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+cbor;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/vnd.elasticsearch+smile;compatible-with=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"application/json\"),\n+            nullValue());\n+\n+\n+        assertThat(XContentType.parseVersion(\"APPLICATION/VND.ELASTICSEARCH+JSON;COMPATIBLE-WITH=\" + version),\n+            equalTo(version));\n+        assertThat(XContentType.parseVersion(\"APPLICATION/JSON\"),\n+            nullValue());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5MTQyMA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390991420", "bodyText": "I think can wrap this registration in an \"if version == 8\", so when v9 is cut, the code would effectively be dead.", "author": "jakelandis", "createdAt": "2020-03-11T14:02:03Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat;\n+\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.compat.version7.RestGetActionV7;\n+import org.elasticsearch.rest.compat.version7.RestIndexActionV7;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public class RestCompatPlugin extends Plugin implements ActionPlugin {\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(\n+        Settings settings,\n+        RestController restController,\n+        ClusterSettings clusterSettings,\n+        IndexScopedSettings indexScopedSettings,\n+        SettingsFilter settingsFilter,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        Supplier<DiscoveryNodes> nodesInCluster\n+    ) {\n+        return List.of(", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTQ3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391169471", "bodyText": "great idea, it will also be useful in a transition period when some new compatible apis (aiming 9) are added before the old code is removed", "author": "pgomulka", "createdAt": "2020-03-11T18:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5MTQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java\nindex aa72620fbf3..18b803f41ab 100644\n--- a/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java\n+++ b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java\n\n@@ -19,6 +19,7 @@\n \n package org.elasticsearch.rest.compat;\n \n+import org.elasticsearch.Version;\n import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n import org.elasticsearch.common.settings.ClusterSettings;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTAzMw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r390999033", "bodyText": "Is it possible to move this test (and any other compatible tests) over to the compatible module under the version7 package ?  Ideally, we keep this coverage, but make it super easy to remove.\nedit: If necessary to mirror the package name for package protected scope, maybe we should create a v7 sub module instead of just a package name.", "author": "jakelandis", "createdAt": "2020-03-11T14:13:03Z", "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "diffHunk": "@@ -107,4 +107,34 @@ public void testToXContentDoesntIncludeForcedRefreshUnlessForced() throws IOExce\n             }\n         }\n     }\n+\n+    public void testTypeWhenCompatible() throws IOException {", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MjAwMA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391182000", "bodyText": "good idea, I think the v7 subdirectory in rest-compatibility and tweaking gradle testClasses should be enough.\nso that we can have the same packages with same classes but in different submodules (the situation when v7 is not yet removed, but more compatible code for v8 is being created)\notherwise suffixing test classes with v7?", "author": "pgomulka", "createdAt": "2020-03-11T18:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5Mzg3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391193873", "bodyText": "sounds good.\nSince it mostly cosmetic, lets remove the v7 package, and only using the v7 in the class name. That should be sufficient to make it obvious it is v7 code and still allow us use package scope without creating new sub modules. We re-visit later if turns out too ugly :)", "author": "jakelandis", "createdAt": "2020-03-11T18:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMzcyNw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392103727", "bodyText": "I only was referring to tests - that if we have a copy of a class from a different module we could suffix with v7.\nit feels right to have a version7 package in main though. as on the main org.elasticsearch.rest.compat level we could keep version agnostic classes - like RestCompatPlugin.", "author": "pgomulka", "createdAt": "2020-03-13T09:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java b/server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java\nindex 33c82df8f28..7751f002d9b 100644\n--- a/server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java\n\n@@ -108,33 +108,5 @@ public class DocWriteResponseTests extends ESTestCase {\n         }\n     }\n \n-    public void testTypeWhenCompatible() throws IOException {\n-        DocWriteResponse response =\n-            new DocWriteResponse(\n-                new ShardId(\"index\", \"uuid\", 0),\n-                \"id\",\n-                SequenceNumbers.UNASSIGNED_SEQ_NO,\n-                17,\n-                0,\n-                Result.CREATED) {\n-                // DocWriteResponse is abstract so we have to sneak a subclass in here to test it.\n-            };\n-        try (XContentBuilder builder = JsonXContent.contentBuilder()) {\n-            builder.setCompatibleMajorVersion((byte)7);\n-            response.toXContent(builder, ToXContent.EMPTY_PARAMS);\n \n-            try (XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder))) {\n-                assertThat(parser.map(), hasEntry(DocWriteResponse.TYPE_FIELD_NAME,DocWriteResponse.SINGLE_MAPPING_TYPE.toString()));\n-            }\n-        }\n-\n-        try (XContentBuilder builder = JsonXContent.contentBuilder()) {\n-            builder.setCompatibleMajorVersion((byte)6);\n-            response.toXContent(builder, ToXContent.EMPTY_PARAMS);\n-\n-            try (XContentParser parser = createParser(JsonXContent.jsonXContent, BytesReference.bytes(builder))) {\n-                assertThat(parser.map(), not(hasKey(DocWriteResponse.TYPE_FIELD_NAME)));\n-            }\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMTUzMw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391001533", "bodyText": "++ this needs to be handled by the compat test frame work, but is good here for now.", "author": "jakelandis", "createdAt": "2020-03-11T14:16:11Z", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/section/MatchAssertion.java", "diffHunk": "@@ -56,6 +56,12 @@ public MatchAssertion(XContentLocation location, String field, Object expectedVa\n \n     @Override\n     protected void doAssert(Object actualValue, Object expectedValue) {\n+        // TODO this needs to be moved to override directory", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMzYwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391003601", "bodyText": "can you use a random version ?", "author": "jakelandis", "createdAt": "2020-03-11T14:18:55Z", "path": "server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java", "diffHunk": "@@ -212,6 +214,14 @@ public void testHeadersSet() {\n         assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n     }\n \n+    public void testCompatibleParamIsSet(){\n+        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n+        httpRequest.getHeaders().put(HttpHeaders.ACCEPT, List.of(\"application/vnd.elasticsearch+json;compatible-with=7\"));", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java b/server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java\nindex b1f43f010ef..8c5beabfe00 100644\n--- a/server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java\n+++ b/server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java\n\n@@ -214,12 +214,13 @@ public class DefaultRestChannelTests extends ESTestCase {\n         assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n     }\n \n-    public void testCompatibleParamIsSet(){\n+    public void testCompatibleParamIsSet() {\n+        final byte version = randomByte();\n         final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n-        httpRequest.getHeaders().put(HttpHeaders.ACCEPT, List.of(\"application/vnd.elasticsearch+json;compatible-with=7\"));\n+        httpRequest.getHeaders().put(HttpHeaders.ACCEPT, List.of(\"application/vnd.elasticsearch+json;compatible-with=\" + version));\n         final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n \n-        assertEquals(\"7\", request.param(CompatibleHandlers.COMPATIBLE_PARAMS_KEY));\n+        assertEquals(\"\" + version, request.param(CompatibleConstants.COMPATIBLE_PARAMS_KEY));\n     }\n \n     public void testCookiesSet() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNjI2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391006269", "bodyText": "can you use a random version ?", "author": "jakelandis", "createdAt": "2020-03-11T14:22:27Z", "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNzU4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r393707582", "bodyText": "actually in order to test a compatible handler, a Version.Current - 1 has to be used", "author": "pgomulka", "createdAt": "2020-03-17T14:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNjI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\nindex 37bf449f449..b8d4a63977b 100644\n--- a/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\n+++ b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\n\n@@ -632,11 +632,12 @@ public class RestControllerTests extends ESTestCase {\n             .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))\n             .build();\n         AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n+        final byte version = randomByte();\n         restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 XContentBuilder xContentBuilder = channel.newBuilder();\n-                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo((byte) 7));\n+                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                 channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNzEyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391007126", "bodyText": "Here we are passing in both Content-Type and Accept headers. Should we test one or the other or both ? (if so a random selection would be good)", "author": "jakelandis", "createdAt": "2020-03-11T14:23:38Z", "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n+        final List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n+            .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath(\"/foo\")\n+            .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MDcyMw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391180723", "bodyText": "as per #53228 (comment)\nI think we should assume both should be present.\nWDYT?\nI will then reply with the conclusion on #52370", "author": "pgomulka", "createdAt": "2020-03-11T18:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNzEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MDkxNw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391190917", "bodyText": "Let's punt on it for now, the details there are important, but not immediately. I added a \"parking lot\" section on #51816 so we don't forget.", "author": "jakelandis", "createdAt": "2020-03-11T18:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNzEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\nindex 37bf449f449..b8d4a63977b 100644\n--- a/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\n+++ b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\n\n@@ -632,11 +632,12 @@ public class RestControllerTests extends ESTestCase {\n             .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))\n             .build();\n         AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n+        final byte version = randomByte();\n         restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 XContentBuilder xContentBuilder = channel.newBuilder();\n-                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo((byte) 7));\n+                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                 channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwOTAyNA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391009024", "bodyText": "Also, what happens if you set the Content-Type to application/json, but Accept to application/vnd.elasticsearch+json;compatible-with=7 ?\nI wonder if we need more testing for these edge cases ?(either unit or integration)", "author": "jakelandis", "createdAt": "2020-03-11T14:26:08Z", "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -623,6 +623,39 @@ public void testDispatchRestrictSystemIndices() {\n         assertFalse(context.isSystemIndexAccessAllowed());\n     }\n \n+    public void testDispatchCompatibleHandler() {\n+        final String mimeType = randomFrom(\"application/vnd.elasticsearch+json;compatible-with=7\");\n+        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n+        final List<String> contentTypeHeader = Collections.singletonList(mimeType);\n+        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n+            .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath(\"/foo\")\n+            .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))\n+            .build();", "originalCommit": "5c4a02dc991b3de482eb271b0da1cbce5b397071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MDIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391180225", "bodyText": "good question. we can be more specific for response generation with Accept and request parsing with Content-Type.\nBut on the other hand I think it will just complicate matters too much.\nI would prefer to assume (and assert in code) that these are the same", "author": "pgomulka", "createdAt": "2020-03-11T18:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwOTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MTUyMw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391191523", "bodyText": "Same as above (I added a \"parking lot\" section on #51816 so we don't forget.)", "author": "jakelandis", "createdAt": "2020-03-11T18:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwOTAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\nindex 37bf449f449..b8d4a63977b 100644\n--- a/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\n+++ b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java\n\n@@ -632,11 +632,12 @@ public class RestControllerTests extends ESTestCase {\n             .withHeaders(Map.of(\"Content-Type\", contentTypeHeader, \"Accept\", contentTypeHeader))\n             .build();\n         AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n+        final byte version = randomByte();\n         restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n             @Override\n             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                 XContentBuilder xContentBuilder = channel.newBuilder();\n-                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo((byte) 7));\n+                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                 channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n             }\n \n"}}, {"oid": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "url": "https://github.com/elastic/elasticsearch/commit/0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "message": "moving test classes and compat related code to separate v7 module\n\ncode review follow up", "committedDate": "2020-03-11T18:36:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNTc2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391215767", "bodyText": "I think renaming this to consumeTypeParameter would make its purpose more clear. Also, could we just have a method void consumeParameterType(DeprecationLogger deprecationLogger, RestRequest request) instead of using a Consumer?  Let me know if I'm missing something around why consumers are necessary, to me they make the logic less straightforward.", "author": "jtibshirani", "createdAt": "2020-03-11T19:38:55Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {", "originalCommit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTE4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392149185", "bodyText": "agree with both - method rename and making this a method.\nOriginally the reason for this  being a consumer was because I was trying to fit in into the previous style of registering handlers. Extending the RestController.registerHandler with additional handlerWrappers. This is no longer needed after the recent refactoring made by Jay", "author": "pgomulka", "createdAt": "2020-03-13T10:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNTc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f4402316e351d2738d584cbc128ef09fd55f87ba", "chunk": "diff --git a/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\ndeleted file mode 100644\nindex cbd61cd0ea9..00000000000\n--- a/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.elasticsearch.rest.compat.version7;\n-\n-import org.elasticsearch.common.logging.DeprecationLogger;\n-import org.elasticsearch.rest.RestRequest;\n-\n-import java.util.function.Consumer;\n-\n-public class CompatibleHandlers {\n-\n-    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {\n-        String TYPES_DEPRECATION_MESSAGE = \"[types removal] Using type as a path parameter is deprecated.\";\n-\n-        return r -> {\n-            deprecationLogger.deprecatedAndMaybeLog(\"create_index_with_types\", TYPES_DEPRECATION_MESSAGE);\n-            r.param(\"type\");\n-        };\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzQ2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391283463", "bodyText": "Could we avoid introducing a Consumer here and just call deprecationLogger.deprecatedAndMaybeLog(...) directly inside prepareRequest?", "author": "jtibshirani", "createdAt": "2020-03-11T21:38:51Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.CompatibleConstants;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.document.RestGetAction;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.HEAD;\n+\n+public class RestGetActionV7 extends RestGetAction {\n+\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestGetAction.class));\n+    private static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] Specifying types in \"\n+        + \"document get requests is deprecated, use the /{index}/_doc/{id} endpoint instead.\";\n+    private static final Consumer<RestRequest> DEPRECATION_WARNING = r -> deprecationLogger.deprecatedAndMaybeLog(", "originalCommit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1MDgxMA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392150810", "bodyText": "sure, that similarly to previous use of consumer was influenced by previous style of registering handlers.\na direct call is better here.", "author": "pgomulka", "createdAt": "2020-03-13T10:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "835ce563ffe8ad47c13cb19d1679f3bf208995dd", "chunk": "diff --git a/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java\nindex fb0d91dc92c..4e516c06bf1 100644\n--- a/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java\n+++ b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/RestGetActionV7.java\n\n@@ -23,7 +23,6 @@ import org.apache.logging.log4j.LogManager;\n import org.elasticsearch.Version;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.logging.DeprecationLogger;\n-import org.elasticsearch.rest.CompatibleConstants;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.document.RestGetAction;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NjgyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391286826", "bodyText": "If I'm understanding correctly, it seems like we'll log two deprecation messages per request, both the endpoint-specific one like \"Specifying types in document get requests is deprecated...\" and this more general one \"Using type as a path parameter is deprecated\". I think we could just stick with the endpoint-specific one to avoid warning twice about the same issue.\nAs a side note, this general deprecation message is also logged under the key \"create_index_with_types\", I think we'd want a more precise name.", "author": "jtibshirani", "createdAt": "2020-03-11T21:46:53Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat.version7;\n+\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.util.function.Consumer;\n+\n+public class CompatibleHandlers {\n+\n+    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {\n+        String TYPES_DEPRECATION_MESSAGE = \"[types removal] Using type as a path parameter is deprecated.\";\n+\n+        return r -> {\n+            deprecationLogger.deprecatedAndMaybeLog(\"create_index_with_types\", TYPES_DEPRECATION_MESSAGE);", "originalCommit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NDYyNA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392154624", "bodyText": "agree - let's stick with just per endpoint warning.\nWIth that I feel like we can even get rid of CompatibleHandlers.consumeParameterType - it would only consume a type param -  and the whole utility class.\nI was worried that it would end up a bag of all the helpers for compatibility. It might generate a little bit of duplication, but there is no need for it now.\nDo you mean more precise name for a deprecation key? Like to be the same for Get and Index and other handlers?", "author": "pgomulka", "createdAt": "2020-03-13T10:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NjgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "f4402316e351d2738d584cbc128ef09fd55f87ba", "chunk": "diff --git a/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java b/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\ndeleted file mode 100644\nindex cbd61cd0ea9..00000000000\n--- a/modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/version7/CompatibleHandlers.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.elasticsearch.rest.compat.version7;\n-\n-import org.elasticsearch.common.logging.DeprecationLogger;\n-import org.elasticsearch.rest.RestRequest;\n-\n-import java.util.function.Consumer;\n-\n-public class CompatibleHandlers {\n-\n-    public static Consumer<RestRequest> consumeParameterType(DeprecationLogger deprecationLogger) {\n-        String TYPES_DEPRECATION_MESSAGE = \"[types removal] Using type as a path parameter is deprecated.\";\n-\n-        return r -> {\n-            deprecationLogger.deprecatedAndMaybeLog(\"create_index_with_types\", TYPES_DEPRECATION_MESSAGE);\n-            r.param(\"type\");\n-        };\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4ODc5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391288793", "bodyText": "I think you can just do the following, I've never had to wrap a string inside a Text object:\nbuilder.field(TYPE_FIELD_NAME, MapperService.SINGLE_MAPPING_NAME);", "author": "jtibshirani", "createdAt": "2020-03-11T21:51:29Z", "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "diffHunk": "@@ -276,6 +280,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     @Override\n     public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject();\n+        if (builder.getCompatibleMajorVersion() == Version.V_7_0_0.major) {\n+            builder.field(TYPE_FIELD_NAME, SINGLE_MAPPING_TYPE);", "originalCommit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NTQ1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392155451", "bodyText": "will do", "author": "pgomulka", "createdAt": "2020-03-13T10:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4ODc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "84f1ddeef546172bf0eafdf1c879a371ea8e675f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/DocWriteResponse.java b/server/src/main/java/org/elasticsearch/action/DocWriteResponse.java\nindex 41fb9d16b96..00ab13e2445 100644\n--- a/server/src/main/java/org/elasticsearch/action/DocWriteResponse.java\n+++ b/server/src/main/java/org/elasticsearch/action/DocWriteResponse.java\n\n@@ -281,7 +279,7 @@ public abstract class DocWriteResponse extends ReplicationResponse implements Wr\n     public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject();\n         if (builder.getCompatibleMajorVersion() == Version.V_7_0_0.major) {\n-            builder.field(TYPE_FIELD_NAME, SINGLE_MAPPING_TYPE);\n+            builder.field(TYPE_FIELD_NAME, MapperService.SINGLE_MAPPING_NAME);\n         }\n         innerToXContent(builder, params);\n         builder.endObject();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4OTMwMw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r391289303", "bodyText": "Small comment, would be good to revert this.", "author": "jtibshirani", "createdAt": "2020-03-11T21:52:55Z", "path": "server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java", "diffHunk": "@@ -107,4 +107,6 @@ public void testToXContentDoesntIncludeForcedRefreshUnlessForced() throws IOExce\n             }\n         }\n     }\n+", "originalCommit": "0ef7e1840c9eb391299cfbfedf760f88cde65c0f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84f1ddeef546172bf0eafdf1c879a371ea8e675f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java b/server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java\nindex 7751f002d9b..bb1208bc3bb 100644\n--- a/server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java\n\n@@ -107,6 +107,4 @@ public class DocWriteResponseTests extends ESTestCase {\n             }\n         }\n     }\n-\n-\n }\n"}}, {"oid": "835ce563ffe8ad47c13cb19d1679f3bf208995dd", "url": "https://github.com/elastic/elasticsearch/commit/835ce563ffe8ad47c13cb19d1679f3bf208995dd", "message": "test class rename and return 400 when compatible header not present", "committedDate": "2020-03-13T10:27:25Z", "type": "commit"}, {"oid": "f4402316e351d2738d584cbc128ef09fd55f87ba", "url": "https://github.com/elastic/elasticsearch/commit/f4402316e351d2738d584cbc128ef09fd55f87ba", "message": "clean up deprecation warnings and remove use of consumers", "committedDate": "2020-03-13T10:50:33Z", "type": "commit"}, {"oid": "84f1ddeef546172bf0eafdf1c879a371ea8e675f", "url": "https://github.com/elastic/elasticsearch/commit/84f1ddeef546172bf0eafdf1c879a371ea8e675f", "message": "v7 compatible actions warnings tests", "committedDate": "2020-03-13T12:19:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MjYwMg==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392392602", "bodyText": "Wouldn't we never have more than one major versions worth of compat in a single version? If that is the case, why do we need to version the class names?", "author": "rjernst", "createdAt": "2020-03-13T18:12:15Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/compat/RestCompatPlugin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.compat;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.plugins.ActionPlugin;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.compat.version7.RestGetActionV7;\n+import org.elasticsearch.rest.compat.version7.RestIndexActionV7;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public class RestCompatPlugin extends Plugin implements ActionPlugin {\n+\n+    @Override\n+    public List<RestHandler> getRestHandlers(\n+        Settings settings,\n+        RestController restController,\n+        ClusterSettings clusterSettings,\n+        IndexScopedSettings indexScopedSettings,\n+        SettingsFilter settingsFilter,\n+        IndexNameExpressionResolver indexNameExpressionResolver,\n+        Supplier<DiscoveryNodes> nodesInCluster\n+    ) {\n+        if (Version.CURRENT.major == 8) {\n+            return List.of(\n+                new RestGetActionV7(),", "originalCommit": "84f1ddeef546172bf0eafdf1c879a371ea8e675f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MTQ4NA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392891484", "bodyText": "There is a narrow window where 2 versions can be present.\nLet's say we released version 8 (or a feature freeze) and we are now already developing ES9 and there will be features compatible with v8.\nWe won't be able to remove the v7 compat features instantly so for some time there will be both.", "author": "pgomulka", "createdAt": "2020-03-16T09:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MjYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMTgyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r393101826", "bodyText": "I am +1 on using the version in the class for this reason, and for the obviousness they provide. While (arguably) ugly, these classes are special in that they are not intended to be maintained, rather they are intended to be deleted after a some point in time.  Having the version in the name makes is more obvious and helps to prevent accidental modifications (like from a simple class search) and makes it really obvious if these things exist for too long.", "author": "jakelandis", "createdAt": "2020-03-16T15:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MjYwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MzgxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392393815", "bodyText": "If we are just looking at major version number, using the Version constant just to extract \"7\" seems overkill and less readable than just using the literal 7.", "author": "rjernst", "createdAt": "2020-03-13T18:14:54Z", "path": "server/src/main/java/org/elasticsearch/action/DocWriteResponse.java", "diffHunk": "@@ -276,6 +278,9 @@ public void writeTo(StreamOutput out) throws IOException {\n     @Override\n     public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n         builder.startObject();\n+        if (builder.getCompatibleMajorVersion() == Version.V_7_0_0.major) {", "originalCommit": "84f1ddeef546172bf0eafdf1c879a371ea8e675f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwMDkyMw==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392900923", "bodyText": "I think this will help the removal of compatible code. We have not decided on what mechanism to use in order to help finding this code.\nThe plan at the moment is to put as much code v7-compatible into module/rest-compatibility\nUsing Version.V_7_0_0.major would make sure that if the version is removed after major upgrade it will also highlight the places where v7-compatible  code has to be removed", "author": "pgomulka", "createdAt": "2020-03-16T10:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MzgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwNTEyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r393105121", "bodyText": "Also, the removal of the of the Version.V_7_0_0 constant in the code (for v9) will cause this to fail compilation. Which is likely the correct the behavior. It does indeed make major version bumps harder (one more thing that breaks), but for now I think this is the best we can do. It feels like there is something that can be done to ease that upgrade pain, but that is outside the scope of this PR.", "author": "jakelandis", "createdAt": "2020-03-16T15:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MzgxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NTM5OA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392395398", "bodyText": "Why is this V7 specific? Aren't the compatible params version agnostic?", "author": "rjernst", "createdAt": "2020-03-13T18:18:14Z", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -340,6 +349,11 @@ private void tryAllHandlers(final RestRequest request, final RestChannel channel\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n+    public static boolean isV7Compatible(ToXContent.Params params) {", "originalCommit": "84f1ddeef546172bf0eafdf1c879a371ea8e675f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwMTYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/53228#discussion_r392901638", "bodyText": "good point, fixed", "author": "pgomulka", "createdAt": "2020-03-16T10:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NTM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "cf61bbddd2ebbb318958f9a1a1064aca79615bd3", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestController.java b/server/src/main/java/org/elasticsearch/rest/RestController.java\nindex 06b3b9f61f9..1f97f855631 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestController.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestController.java\n\n@@ -349,7 +349,7 @@ public class RestController implements HttpServerTransport.Dispatcher {\n         handleBadRequest(uri, requestMethod, channel);\n     }\n \n-    public static boolean isV7Compatible(ToXContent.Params params) {\n+    private boolean isCompatible(ToXContent.Params params) {\n         String param = params.param(COMPATIBLE_PARAMS_KEY);\n         return COMPATIBLE_VERSION.equals(param);\n     }\n"}}, {"oid": "d106d1ba66027268c061875b3aab86f92bb8c690", "url": "https://github.com/elastic/elasticsearch/commit/d106d1ba66027268c061875b3aab86f92bb8c690", "message": "rename tests and enable them", "committedDate": "2020-03-16T09:59:17Z", "type": "commit"}, {"oid": "cf61bbddd2ebbb318958f9a1a1064aca79615bd3", "url": "https://github.com/elastic/elasticsearch/commit/cf61bbddd2ebbb318958f9a1a1064aca79615bd3", "message": "rename isV7Compatible method", "committedDate": "2020-03-16T10:03:49Z", "type": "commit"}, {"oid": "f00f438b8c66a39938a24fc99b523787229be4c5", "url": "https://github.com/elastic/elasticsearch/commit/f00f438b8c66a39938a24fc99b523787229be4c5", "message": "checkstyle", "committedDate": "2020-03-16T13:53:20Z", "type": "commit"}, {"oid": "ae1799ff9f5ca11da20105ce5f9f814aa9b61b21", "url": "https://github.com/elastic/elasticsearch/commit/ae1799ff9f5ca11da20105ce5f9f814aa9b61b21", "message": "Merge branch 'master' into compat/type-index-get", "committedDate": "2020-03-16T13:53:33Z", "type": "commit"}, {"oid": "a0fce895fa6388c05c668c8d56ca3cc93ab24650", "url": "https://github.com/elastic/elasticsearch/commit/a0fce895fa6388c05c668c8d56ca3cc93ab24650", "message": "Revert \"Merge branch 'master' into compat/type-index-get\"\n\nThis reverts commit ae1799ff9f5ca11da20105ce5f9f814aa9b61b21, reversing\nchanges made to f00f438b8c66a39938a24fc99b523787229be4c5.", "committedDate": "2020-03-16T14:42:25Z", "type": "commit"}, {"oid": "7e55744216646a1acd993f144456602bbe414f56", "url": "https://github.com/elastic/elasticsearch/commit/7e55744216646a1acd993f144456602bbe414f56", "message": "Merge branch 'compat_rest_api' into compat/type-index-get", "committedDate": "2020-03-16T14:43:48Z", "type": "commit"}, {"oid": "00fe62dbf8cdcd25d592ba971b96049ce511de34", "url": "https://github.com/elastic/elasticsearch/commit/00fe62dbf8cdcd25d592ba971b96049ce511de34", "message": "Revert \"Revert \"Merge branch 'master' into compat/type-index-get\"\"\n\nThis reverts commit a0fce895fa6388c05c668c8d56ca3cc93ab24650.", "committedDate": "2020-03-16T15:02:26Z", "type": "commit"}, {"oid": "a6f0b9a3b7f611e935558290f7b3e343e8e33b5a", "url": "https://github.com/elastic/elasticsearch/commit/a6f0b9a3b7f611e935558290f7b3e343e8e33b5a", "message": "use locale with toLowerCase", "committedDate": "2020-03-17T07:57:44Z", "type": "commit"}, {"oid": "4eff534736a890668572710498c97741d985463a", "url": "https://github.com/elastic/elasticsearch/commit/4eff534736a890668572710498c97741d985463a", "message": "spotless", "committedDate": "2020-03-17T12:47:34Z", "type": "commit"}, {"oid": "2d4161cb7bdc9f52e49636a246f742c1a4ab0894", "url": "https://github.com/elastic/elasticsearch/commit/2d4161cb7bdc9f52e49636a246f742c1a4ab0894", "message": "imports and disable integ tests as there are none", "committedDate": "2020-03-17T13:23:27Z", "type": "commit"}, {"oid": "6830f97d740edb9d35b348e9f1e06e538b3584fd", "url": "https://github.com/elastic/elasticsearch/commit/6830f97d740edb9d35b348e9f1e06e538b3584fd", "message": "fix tests", "committedDate": "2020-03-17T14:12:07Z", "type": "commit"}]}