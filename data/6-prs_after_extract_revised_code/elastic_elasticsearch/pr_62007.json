{"pr_number": 62007, "pr_title": "Move CorsHandler to server", "pr_createdAt": "2020-09-04T19:05:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62007", "timeline": [{"oid": "9776e2a5bb9fc5495d3b2f9c1238793ce2eeb6a7", "url": "https://github.com/elastic/elasticsearch/commit/9776e2a5bb9fc5495d3b2f9c1238793ce2eeb6a7", "message": "WIP", "committedDate": "2020-09-02T23:11:51Z", "type": "commit"}, {"oid": "abc16c3510d53830695f989442f9d54ffc3c5668", "url": "https://github.com/elastic/elasticsearch/commit/abc16c3510d53830695f989442f9d54ffc3c5668", "message": "Changes", "committedDate": "2020-09-02T23:50:58Z", "type": "commit"}, {"oid": "999133cc1b569fd98698d5436b3d274a7189e9e2", "url": "https://github.com/elastic/elasticsearch/commit/999133cc1b569fd98698d5436b3d274a7189e9e2", "message": "Tests", "committedDate": "2020-09-03T02:07:18Z", "type": "commit"}, {"oid": "0b0f93a2475c1511bec9147eb0ba0ab4741a17f4", "url": "https://github.com/elastic/elasticsearch/commit/0b0f93a2475c1511bec9147eb0ba0ab4741a17f4", "message": "Changes", "committedDate": "2020-09-04T01:25:17Z", "type": "commit"}, {"oid": "c3e0da1af16043f35977d09450c5b0692a188ab3", "url": "https://github.com/elastic/elasticsearch/commit/c3e0da1af16043f35977d09450c5b0692a188ab3", "message": "Changes", "committedDate": "2020-09-04T18:24:19Z", "type": "commit"}, {"oid": "c8c11142125c5ab29c958bd85f2f40b9dcd2043f", "url": "https://github.com/elastic/elasticsearch/commit/c8c11142125c5ab29c958bd85f2f40b9dcd2043f", "message": "Changes", "committedDate": "2020-09-04T18:55:17Z", "type": "commit"}, {"oid": "448f402ce5d5e56aa01a8ec728a471c8fb87b9b6", "url": "https://github.com/elastic/elasticsearch/commit/448f402ce5d5e56aa01a8ec728a471c8fb87b9b6", "message": "Delete", "committedDate": "2020-09-04T19:02:37Z", "type": "commit"}, {"oid": "615d4cc48b70be18128c76e2a6967289ba7b2f8d", "url": "https://github.com/elastic/elasticsearch/commit/615d4cc48b70be18128c76e2a6967289ba7b2f8d", "message": "Merge remote-tracking branch 'upstream/master' into cors_to_server_2020", "committedDate": "2020-09-04T19:14:14Z", "type": "commit"}, {"oid": "39393dca43b5444fd46405a55734273c455ba01d", "url": "https://github.com/elastic/elasticsearch/commit/39393dca43b5444fd46405a55734273c455ba01d", "message": "Fix double send", "committedDate": "2020-09-04T20:05:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwNzk1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62007#discussion_r484107959", "bodyText": "NIT: Maybe move this to CorsHandler as well since we duplicate it across both implementations? (unless my suggestion works and we can just move the whole handling to org.elasticsearch.http.AbstractHttpServerTransport#incomingRequest)", "author": "original-brownbear", "createdAt": "2020-09-06T19:57:23Z", "path": "plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java", "diffHunk": "@@ -185,4 +196,12 @@ private static boolean assertMessageTypes(Object message) {\n                 \". Found type: \" + ((HttpPipelinedResponse) message).getDelegateRequest().getClass() + \".\";\n         return true;\n     }\n+\n+    private static ActionListener<Void> earlyResponseListener(HttpRequest request, HttpChannel httpChannel) {", "originalCommit": "39393dca43b5444fd46405a55734273c455ba01d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74af171c1afd64e416ef257123673e733a6ccf3b", "chunk": "diff --git a/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java\nindex 3b4024dc0ef..860b27dd267 100644\n--- a/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java\n+++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java\n\n@@ -196,12 +179,4 @@ public class HttpReadWriteHandler implements NioChannelHandler {\n                 \". Found type: \" + ((HttpPipelinedResponse) message).getDelegateRequest().getClass() + \".\";\n         return true;\n     }\n-\n-    private static ActionListener<Void> earlyResponseListener(HttpRequest request, HttpChannel httpChannel) {\n-        if (HttpUtils.shouldCloseConnection(request)) {\n-            return ActionListener.wrap(() -> CloseableChannel.closeChannel(httpChannel));\n-        } else {\n-            return NO_OP;\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwODMwNA==", "url": "https://github.com/elastic/elasticsearch/pull/62007#discussion_r484108304", "bodyText": "NIT: extra empty line", "author": "original-brownbear", "createdAt": "2020-09-06T20:01:11Z", "path": "server/src/main/java/org/elasticsearch/http/CorsHandler.java", "diffHunk": "@@ -71,12 +78,175 @@\n     public static final String ORIGIN = \"origin\";\n     public static final String DATE = \"date\";\n     public static final String VARY = \"vary\";\n+    public static final String HOST = \"host\";\n     public static final String ACCESS_CONTROL_REQUEST_METHOD = \"access-control-request-method\";\n+    public static final String ACCESS_CONTROL_ALLOW_HEADERS = \"access-control-allow-headers\";\n+    public static final String ACCESS_CONTROL_ALLOW_CREDENTIALS = \"access-control-allow-credentials\";\n+    public static final String ACCESS_CONTROL_ALLOW_METHODS = \"access-control-allow-methods\";\n     public static final String ACCESS_CONTROL_ALLOW_ORIGIN = \"access-control-allow-origin\";\n+    public static final String ACCESS_CONTROL_MAX_AGE = \"access-control-max-age\";\n \n-    private CorsHandler() {\n+    private static final Pattern SCHEME_PATTERN = Pattern.compile(\"^https?://\");\n+    private static final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss O\", Locale.ENGLISH);\n+    private final Config config;\n+\n+    public CorsHandler(Config config) {\n+        this.config = config;\n+    }\n+\n+    public HttpResponse handleInbound(HttpRequest request) {\n+        if (config.isCorsSupportEnabled()) {\n+            if (isPreflightRequest(request)) {\n+                return handlePreflight(request);\n+            }\n+\n+            if (validateOrigin(request) == false) {\n+                return forbidden(request);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public void setCorsResponseHeaders(final HttpRequest httpRequest, final HttpResponse httpResponse) {\n+        if (!config.isCorsSupportEnabled()) {\n+            return;\n+        }\n+        if (setOrigin(httpRequest, httpResponse)) {\n+            setAllowCredentials(httpResponse);\n+        }\n+    }\n+\n+    private HttpResponse handlePreflight(final HttpRequest request) {\n+        final HttpResponse response = request.createResponse(RestStatus.OK, BytesArray.EMPTY);\n+        if (setOrigin(request, response)) {\n+            setAllowMethods(response);\n+            setAllowHeaders(response);\n+            setAllowCredentials(response);\n+            setMaxAge(response);\n+            setPreflightHeaders(response);\n+            return response;\n+        } else {\n+            return forbidden(request);\n+        }\n+    }\n+\n+    private static HttpResponse forbidden(final HttpRequest request) {\n+        HttpResponse response = request.createResponse(RestStatus.FORBIDDEN, BytesArray.EMPTY);\n+        response.addHeader(\"content-length\", \"0\");\n+        return response;\n+    }\n+\n+    private static boolean isSameOrigin(final String origin, final String host) {\n+        if (Strings.isNullOrEmpty(host) == false) {\n+            // strip protocol from origin\n+            final String originDomain = SCHEME_PATTERN.matcher(origin).replaceFirst(\"\");\n+            if (host.equals(originDomain)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void setPreflightHeaders(final HttpResponse response) {\n+        response.addHeader(CorsHandler.DATE, dateTimeFormatter.format(ZonedDateTime.now(ZoneOffset.UTC)));\n+        response.addHeader(\"content-length\", \"0\");\n+    }\n+\n+    private boolean setOrigin(final HttpRequest request, final HttpResponse response) {\n+        String origin = getOrigin(request);\n+        if (!Strings.isNullOrEmpty(origin)) {\n+            if (config.isAnyOriginSupported()) {\n+                if (config.isCredentialsAllowed()) {\n+                    setAllowOrigin(response, origin);\n+                    setVaryHeader(response);\n+                } else {\n+                    setAllowOrigin(response, ANY_ORIGIN);\n+                }\n+                return true;\n+            } else if (config.isOriginAllowed(origin) || isSameOrigin(origin, getHost(request))) {\n+                setAllowOrigin(response, origin);\n+                setVaryHeader(response);\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean validateOrigin(final HttpRequest request) {\n+        if (config.isAnyOriginSupported()) {\n+            return true;\n+        }\n+\n+        final String origin = getOrigin(request);\n+        if (Strings.isNullOrEmpty(origin)) {\n+            // Not a CORS request so we cannot validate it. It may be a non CORS request.\n+            return true;\n+        }\n+\n+        // if the origin is the same as the host of the request, then allow\n+        if (isSameOrigin(origin, getHost(request))) {\n+            return true;\n+        }\n+\n+        return config.isOriginAllowed(origin);\n+    }\n+\n+    private static String getOrigin(HttpRequest request) {\n+        List<String> headers = request.getHeaders().get(ORIGIN);\n+        if (headers == null || headers.isEmpty()) {\n+            return null;\n+        } else {\n+            return headers.get(0);\n+        }\n+    }\n+\n+    private static String getHost(HttpRequest request) {\n+        List<String> headers = request.getHeaders().get(HOST);\n+        if (headers == null || headers.isEmpty()) {\n+            return null;\n+        } else {\n+            return headers.get(0);\n+        }\n+    }\n+\n+    private static boolean isPreflightRequest(final HttpRequest request) {\n+        final Map<String, List<String>> headers = request.getHeaders();\n+        return request.method().equals(RestRequest.Method.OPTIONS) &&\n+            headers.containsKey(ORIGIN) &&\n+            headers.containsKey(ACCESS_CONTROL_REQUEST_METHOD);\n+    }\n+\n+    private static void setVaryHeader(final HttpResponse response) {\n+        response.addHeader(VARY, ORIGIN);\n     }\n \n+    private static void setAllowOrigin(final HttpResponse response, final String origin) {\n+        response.addHeader(ACCESS_CONTROL_ALLOW_ORIGIN, origin);\n+    }\n+\n+    private void setAllowMethods(final HttpResponse response) {\n+        for (RestRequest.Method method : config.allowedRequestMethods()) {\n+            response.addHeader(ACCESS_CONTROL_ALLOW_METHODS, method.name().trim());\n+        }\n+    }\n+\n+    private void setAllowHeaders(final HttpResponse response) {\n+        for (String header : config.allowedRequestHeaders) {\n+            response.addHeader(ACCESS_CONTROL_ALLOW_HEADERS, header);\n+        }\n+    }\n+\n+    private void setAllowCredentials(final HttpResponse response) {\n+        if (config.isCredentialsAllowed()) {\n+            response.addHeader(ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+        }\n+    }\n+\n+    private void setMaxAge(final HttpResponse response) {\n+        response.addHeader(ACCESS_CONTROL_MAX_AGE, Long.toString(config.maxAge));\n+    }\n+\n+", "originalCommit": "39393dca43b5444fd46405a55734273c455ba01d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74af171c1afd64e416ef257123673e733a6ccf3b", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/http/CorsHandler.java b/server/src/main/java/org/elasticsearch/http/CorsHandler.java\nindex b7eb5fe8834..b3b0641ec49 100644\n--- a/server/src/main/java/org/elasticsearch/http/CorsHandler.java\n+++ b/server/src/main/java/org/elasticsearch/http/CorsHandler.java\n\n@@ -246,7 +246,6 @@ public class CorsHandler {\n         response.addHeader(ACCESS_CONTROL_MAX_AGE, Long.toString(config.maxAge));\n     }\n \n-\n     public static class Config {\n \n         private final boolean enabled;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDExMDY0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62007#discussion_r484110641", "bodyText": "Maybe we could just move this whole logic into org.elasticsearch.http.AbstractHttpServerTransport#incomingRequest to make things even drier?", "author": "original-brownbear", "createdAt": "2020-09-06T20:28:05Z", "path": "modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java", "diffHunk": "@@ -23,23 +23,40 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n import org.elasticsearch.ExceptionsHelper;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.common.network.CloseableChannel;\n+import org.elasticsearch.http.CorsHandler;\n+import org.elasticsearch.http.HttpChannel;\n import org.elasticsearch.http.HttpPipelinedRequest;\n+import org.elasticsearch.http.HttpRequest;\n+import org.elasticsearch.http.HttpResponse;\n+import org.elasticsearch.http.HttpUtils;\n \n @ChannelHandler.Sharable\n class Netty4HttpRequestHandler extends SimpleChannelInboundHandler<HttpPipelinedRequest> {\n \n+    private static final ActionListener<Void> NO_OP = ActionListener.wrap(() -> {});\n+\n     private final Netty4HttpServerTransport serverTransport;\n+    private final CorsHandler corsHandler;\n \n-    Netty4HttpRequestHandler(Netty4HttpServerTransport serverTransport) {\n+    Netty4HttpRequestHandler(Netty4HttpServerTransport serverTransport, CorsHandler corsHandler) {\n         this.serverTransport = serverTransport;\n+        this.corsHandler = corsHandler;\n     }\n \n     @Override\n     protected void channelRead0(ChannelHandlerContext ctx, HttpPipelinedRequest httpRequest) {\n         final Netty4HttpChannel channel = ctx.channel().attr(Netty4HttpServerTransport.HTTP_CHANNEL_KEY).get();\n         boolean success = false;\n         try {\n-            serverTransport.incomingRequest(httpRequest, channel);\n+            HttpResponse earlyResponse = corsHandler.handleInbound(httpRequest);", "originalCommit": "39393dca43b5444fd46405a55734273c455ba01d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74af171c1afd64e416ef257123673e733a6ccf3b", "chunk": "diff --git a/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java\nindex 5adc591ee06..033ac21ad2f 100644\n--- a/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java\n+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequestHandler.java\n\n@@ -23,26 +23,15 @@ import io.netty.channel.ChannelHandler;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.SimpleChannelInboundHandler;\n import org.elasticsearch.ExceptionsHelper;\n-import org.elasticsearch.action.ActionListener;\n-import org.elasticsearch.common.network.CloseableChannel;\n-import org.elasticsearch.http.CorsHandler;\n-import org.elasticsearch.http.HttpChannel;\n import org.elasticsearch.http.HttpPipelinedRequest;\n-import org.elasticsearch.http.HttpRequest;\n-import org.elasticsearch.http.HttpResponse;\n-import org.elasticsearch.http.HttpUtils;\n \n @ChannelHandler.Sharable\n class Netty4HttpRequestHandler extends SimpleChannelInboundHandler<HttpPipelinedRequest> {\n \n-    private static final ActionListener<Void> NO_OP = ActionListener.wrap(() -> {});\n-\n     private final Netty4HttpServerTransport serverTransport;\n-    private final CorsHandler corsHandler;\n \n-    Netty4HttpRequestHandler(Netty4HttpServerTransport serverTransport, CorsHandler corsHandler) {\n+    Netty4HttpRequestHandler(Netty4HttpServerTransport serverTransport) {\n         this.serverTransport = serverTransport;\n-        this.corsHandler = corsHandler;\n     }\n \n     @Override\n"}}, {"oid": "74af171c1afd64e416ef257123673e733a6ccf3b", "url": "https://github.com/elastic/elasticsearch/commit/74af171c1afd64e416ef257123673e733a6ccf3b", "message": "Changes", "committedDate": "2020-09-07T15:45:18Z", "type": "commit"}, {"oid": "328d243cccb82c4536b92a33a2592ced8b0727e6", "url": "https://github.com/elastic/elasticsearch/commit/328d243cccb82c4536b92a33a2592ced8b0727e6", "message": "Merge remote-tracking branch 'upstream/master' into cors_to_server_2020", "committedDate": "2020-09-07T16:06:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxNjAwOA==", "url": "https://github.com/elastic/elasticsearch/pull/62007#discussion_r484516008", "bodyText": "I guess we can revert changes to this method now?", "author": "original-brownbear", "createdAt": "2020-09-07T16:32:42Z", "path": "plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java", "diffHunk": "@@ -150,16 +145,15 @@ public void close() throws IOException {\n         }\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     private void handleRequest(Object msg) {\n-        final HttpPipelinedRequest pipelinedRequest = (HttpPipelinedRequest) msg;\n+        final HttpPipelinedRequest httpRequest = (HttpPipelinedRequest) msg;", "originalCommit": "328d243cccb82c4536b92a33a2592ced8b0727e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83bb09d665af4ed2d77e98e75dcbfdcecb942a3b", "chunk": "diff --git a/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java\nindex 860b27dd267..e161ee690f1 100644\n--- a/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java\n+++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadWriteHandler.java\n\n@@ -146,14 +146,14 @@ public class HttpReadWriteHandler implements NioChannelHandler {\n     }\n \n     private void handleRequest(Object msg) {\n-        final HttpPipelinedRequest httpRequest = (HttpPipelinedRequest) msg;\n+        final HttpPipelinedRequest pipelinedRequest = (HttpPipelinedRequest) msg;\n         boolean success = false;\n         try {\n-            transport.incomingRequest(httpRequest, nioHttpChannel);\n+            transport.incomingRequest(pipelinedRequest, nioHttpChannel);\n             success = true;\n         } finally {\n             if (success == false) {\n-                httpRequest.release();\n+                pipelinedRequest.release();\n             }\n         }\n     }\n"}}, {"oid": "83bb09d665af4ed2d77e98e75dcbfdcecb942a3b", "url": "https://github.com/elastic/elasticsearch/commit/83bb09d665af4ed2d77e98e75dcbfdcecb942a3b", "message": "Change", "committedDate": "2020-09-07T18:12:20Z", "type": "commit"}, {"oid": "f3ba0708b2df394ae44e2a7a8b226baa4c4db955", "url": "https://github.com/elastic/elasticsearch/commit/f3ba0708b2df394ae44e2a7a8b226baa4c4db955", "message": "Merge remote-tracking branch 'upstream/master' into cors_to_server_2020", "committedDate": "2020-09-07T18:12:43Z", "type": "commit"}]}