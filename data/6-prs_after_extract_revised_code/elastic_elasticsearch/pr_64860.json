{"pr_number": 64860, "pr_title": "[ML] Refactor gathering of context necessary to run datafeed", "pr_createdAt": "2020-11-10T12:21:55Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64860", "timeline": [{"oid": "79afa812e0e6761cbfb8ea573799822fe25a0822", "url": "https://github.com/elastic/elasticsearch/commit/79afa812e0e6761cbfb8ea573799822fe25a0822", "message": "[ML] Refactor gathering of context necessary to run datafeed\n\nThis groups together the context necessary to build a datafeed\njob into a method of the `DatafeedManager`. This method can\nbe reused in the future in order to determine whether the\njob needs to be reverted to its loaded model snapshot in\ncase the latter is out dated.", "committedDate": "2020-11-10T12:18:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUyODEyMg==", "url": "https://github.com/elastic/elasticsearch/pull/64860#discussion_r520528122", "bodyText": "nit: seems weird for this to be public when the inner and outer classes are both package private and it's not implementing an interface.", "author": "droberts195", "createdAt": "2020-11-10T12:35:02Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedContext.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.datafeed;\n+\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedConfig;\n+import org.elasticsearch.xpack.core.ml.datafeed.DatafeedTimingStats;\n+import org.elasticsearch.xpack.core.ml.job.config.Job;\n+import org.elasticsearch.xpack.ml.job.persistence.RestartTimeInfo;\n+\n+import java.util.Objects;\n+\n+class DatafeedContext {\n+\n+    private final DatafeedConfig datafeedConfig;\n+    private final Job job;\n+    private final RestartTimeInfo restartTimeInfo;\n+    private final DatafeedTimingStats timingStats;\n+\n+    DatafeedContext(DatafeedConfig datafeedConfig, Job job, RestartTimeInfo restartTimeInfo,\n+                           DatafeedTimingStats timingStats) {\n+        this.datafeedConfig = Objects.requireNonNull(datafeedConfig);\n+        this.job = Objects.requireNonNull(job);\n+        this.restartTimeInfo = Objects.requireNonNull(restartTimeInfo);\n+        this.timingStats = Objects.requireNonNull(timingStats);\n+    }\n+\n+\n+    DatafeedConfig getDatafeedConfig() {\n+        return datafeedConfig;\n+    }\n+\n+    Job getJob() {\n+        return job;\n+    }\n+\n+    RestartTimeInfo getRestartTimeInfo() {\n+        return restartTimeInfo;\n+    }\n+\n+    DatafeedTimingStats getTimingStats() {\n+        return timingStats;\n+    }\n+\n+    static class Builder {\n+        private volatile DatafeedConfig datafeedConfig;\n+        private volatile Job job;\n+        private volatile RestartTimeInfo restartTimeInfo;\n+        private volatile DatafeedTimingStats timingStats;\n+\n+        Builder setDatafeedConfig(DatafeedConfig datafeedConfig) {\n+            this.datafeedConfig = datafeedConfig;\n+            return this;\n+        }\n+\n+        Builder setJob(Job job) {\n+            this.job = job;\n+            return this;\n+        }\n+\n+        public Job getJob() {", "originalCommit": "79afa812e0e6761cbfb8ea573799822fe25a0822", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3005667201a4a7c8882b251128431f803216c4a0", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedContext.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedContext.java\nindex e2d36caa947..4ae622f8940 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedContext.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedContext.java\n\n@@ -61,7 +61,7 @@ class DatafeedContext {\n             return this;\n         }\n \n-        public Job getJob() {\n+        Job getJob() {\n             return job;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzMDEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64860#discussion_r520530101", "bodyText": "This seems like it could be final like the adjacent values", "author": "droberts195", "createdAt": "2020-11-10T12:38:38Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobBuilder.java", "diffHunk": "@@ -45,147 +38,102 @@\n     private final AnomalyDetectionAuditor auditor;\n     private final AnnotationPersister annotationPersister;\n     private final Supplier<Long> currentTimeSupplier;\n-    private final JobConfigProvider jobConfigProvider;\n-    private final JobResultsProvider jobResultsProvider;\n-    private final DatafeedConfigProvider datafeedConfigProvider;\n     private final JobResultsPersister jobResultsPersister;\n     private final boolean remoteClusterClient;\n     private final String nodeName;\n \n     public DatafeedJobBuilder(Client client, NamedXContentRegistry xContentRegistry, AnomalyDetectionAuditor auditor,\n                               AnnotationPersister annotationPersister, Supplier<Long> currentTimeSupplier,\n-                              JobConfigProvider jobConfigProvider, JobResultsProvider jobResultsProvider,\n-                              DatafeedConfigProvider datafeedConfigProvider, JobResultsPersister jobResultsPersister, Settings settings,\n-                              String nodeName) {\n+                              JobResultsPersister jobResultsPersister, Settings settings, String nodeName) {\n         this.client = client;\n         this.xContentRegistry = Objects.requireNonNull(xContentRegistry);\n         this.auditor = Objects.requireNonNull(auditor);\n         this.annotationPersister = Objects.requireNonNull(annotationPersister);\n         this.currentTimeSupplier = Objects.requireNonNull(currentTimeSupplier);\n-        this.jobConfigProvider = Objects.requireNonNull(jobConfigProvider);\n-        this.jobResultsProvider = Objects.requireNonNull(jobResultsProvider);\n-        this.datafeedConfigProvider = Objects.requireNonNull(datafeedConfigProvider);\n         this.jobResultsPersister = Objects.requireNonNull(jobResultsPersister);\n         this.remoteClusterClient = DiscoveryNode.isRemoteClusterClient(settings);\n         this.nodeName = nodeName;\n     }\n \n-    void build(String datafeedId, TaskId parentTaskId, ActionListener<DatafeedJob> listener) {\n-        AtomicReference<Job> jobHolder = new AtomicReference<>();\n-        AtomicReference<DatafeedConfig> datafeedConfigHolder = new AtomicReference<>();\n-        final ParentTaskAssigningClient parentTaskAssigningClient = new ParentTaskAssigningClient(client, parentTaskId);\n-\n-        // Build datafeed job object\n-        Consumer<Context> contextHanlder = context -> {\n-            TimeValue frequency = getFrequencyOrDefault(datafeedConfigHolder.get(), jobHolder.get(), xContentRegistry);\n-            TimeValue queryDelay = datafeedConfigHolder.get().getQueryDelay();\n-            DelayedDataDetector delayedDataDetector = DelayedDataDetectorFactory.buildDetector(jobHolder.get(),\n-                    datafeedConfigHolder.get(), parentTaskAssigningClient, xContentRegistry);\n-            DatafeedJob datafeedJob =\n-                new DatafeedJob(\n-                    jobHolder.get().getId(),\n-                    buildDataDescription(jobHolder.get()),\n-                    frequency.millis(),\n-                    queryDelay.millis(),\n-                    context.dataExtractorFactory,\n-                    context.timingStatsReporter,\n-                    parentTaskAssigningClient,\n-                    auditor,\n-                    annotationPersister,\n-                    currentTimeSupplier,\n-                    delayedDataDetector,\n-                    datafeedConfigHolder.get().getMaxEmptySearches(),\n-                    context.latestFinalBucketEndMs,\n-                    context.latestRecordTimeMs,\n-                    context.haveSeenDataPreviously);\n-\n-            listener.onResponse(datafeedJob);\n-        };\n-\n-        final Context context = new Context();\n-\n-        // Context building complete - invoke final listener\n-        ActionListener<DataExtractorFactory> dataExtractorFactoryHandler = ActionListener.wrap(\n-                dataExtractorFactory -> {\n-                    context.dataExtractorFactory = dataExtractorFactory;\n-                    contextHanlder.accept(context);\n-                }, e -> {\n-                    auditor.error(jobHolder.get().getId(), e.getMessage());\n-                    listener.onFailure(e);\n-                }\n-        );\n-\n-        // Create data extractor factory\n-        Consumer<DatafeedTimingStats> datafeedTimingStatsHandler = initialTimingStats -> {\n-            context.timingStatsReporter =\n-                new DatafeedTimingStatsReporter(initialTimingStats, jobResultsPersister::persistDatafeedTimingStats);\n-            DataExtractorFactory.create(\n-                parentTaskAssigningClient,\n-                datafeedConfigHolder.get(),\n-                jobHolder.get(),\n-                xContentRegistry,\n-                context.timingStatsReporter,\n-                dataExtractorFactoryHandler);\n-        };\n-\n-        ActionListener<RestartTimeInfo> restartTimeInfoListener = ActionListener.wrap(\n-            restartTimeInfo -> {\n-                if (restartTimeInfo.getLatestFinalBucketTimeMs() != null) {\n-                    TimeValue bucketSpan = jobHolder.get().getAnalysisConfig().getBucketSpan();\n-                    context.latestFinalBucketEndMs = restartTimeInfo.getLatestFinalBucketTimeMs() + bucketSpan.millis() - 1;\n-                }\n-                if (restartTimeInfo.getLatestRecordTimeMs() != null) {\n-                    context.latestRecordTimeMs = restartTimeInfo.getLatestRecordTimeMs();\n-                }\n-                context.haveSeenDataPreviously = restartTimeInfo.haveSeenDataPreviously();\n-                jobResultsProvider.datafeedTimingStats(jobHolder.get().getId(), datafeedTimingStatsHandler, listener::onFailure);\n-            },\n-            listener::onFailure\n-        );\n+    void build(TransportStartDatafeedAction.DatafeedTask task, DatafeedContext context, ActionListener<DatafeedJob> listener) {\n+        final ParentTaskAssigningClient parentTaskAssigningClient = new ParentTaskAssigningClient(client, task.getParentTaskId());\n+        final DatafeedConfig datafeedConfig = context.getDatafeedConfig();\n+        final Job job = context.getJob();\n+        final long latestFinalBucketEndMs = context.getRestartTimeInfo().getLatestFinalBucketTimeMs() == null ?\n+            -1 : context.getRestartTimeInfo().getLatestFinalBucketTimeMs() + job.getAnalysisConfig().getBucketSpan().millis() - 1;\n+        long latestRecordTimeMs = context.getRestartTimeInfo().getLatestRecordTimeMs() == null ?", "originalCommit": "79afa812e0e6761cbfb8ea573799822fe25a0822", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3005667201a4a7c8882b251128431f803216c4a0", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobBuilder.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobBuilder.java\nindex f436617b233..1bf96e5bfe6 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobBuilder.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobBuilder.java\n\n@@ -61,7 +61,7 @@ public class DatafeedJobBuilder {\n         final Job job = context.getJob();\n         final long latestFinalBucketEndMs = context.getRestartTimeInfo().getLatestFinalBucketTimeMs() == null ?\n             -1 : context.getRestartTimeInfo().getLatestFinalBucketTimeMs() + job.getAnalysisConfig().getBucketSpan().millis() - 1;\n-        long latestRecordTimeMs = context.getRestartTimeInfo().getLatestRecordTimeMs() == null ?\n+        final long latestRecordTimeMs = context.getRestartTimeInfo().getLatestRecordTimeMs() == null ?\n             -1 : context.getRestartTimeInfo().getLatestRecordTimeMs();\n         final DatafeedTimingStatsReporter timingStatsReporter = new DatafeedTimingStatsReporter(context.getTimingStats(),\n             jobResultsPersister::persistDatafeedTimingStats);\n"}}, {"oid": "3005667201a4a7c8882b251128431f803216c4a0", "url": "https://github.com/elastic/elasticsearch/commit/3005667201a4a7c8882b251128431f803216c4a0", "message": "Address review comments", "committedDate": "2020-11-10T13:38:45Z", "type": "commit"}]}