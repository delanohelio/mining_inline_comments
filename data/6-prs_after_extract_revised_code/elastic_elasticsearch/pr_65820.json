{"pr_number": 65820, "pr_title": "Runtime fields that shadow an object shouldn't shadow its children", "pr_createdAt": "2020-12-03T14:38:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65820", "timeline": [{"oid": "d1476b40193436da3df5c86e8cb42557479223d7", "url": "https://github.com/elastic/elasticsearch/commit/d1476b40193436da3df5c86e8cb42557479223d7", "message": "Runtime fields that shadow an object shouldn't shadow the object children", "committedDate": "2020-12-03T14:35:13Z", "type": "commit"}, {"oid": "aa4182f1f9d13cfbdf96f32d2eda4c6c28e78bbf", "url": "https://github.com/elastic/elasticsearch/commit/aa4182f1f9d13cfbdf96f32d2eda4c6c28e78bbf", "message": "checkstyle", "committedDate": "2020-12-03T14:59:06Z", "type": "commit"}, {"oid": "ec5541f008a82caf0b3d5a993f25621cf7603774", "url": "https://github.com/elastic/elasticsearch/commit/ec5541f008a82caf0b3d5a993f25621cf7603774", "message": "Merge remote-tracking branch 'origin/master' into runtime/object-shadowing", "committedDate": "2020-12-03T15:36:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTM3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r535925371", "bodyText": "nit: should we instead split the method into two, one for objects and one for leaf fields. The one for leaves applies also runtime fields at the end, while the object variant doesn't?", "author": "javanna", "createdAt": "2020-12-04T08:37:55Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -905,7 +909,7 @@ private static Mapper getMapper(final ParseContext context, ObjectMapper objectM\n         }\n         String leafName = subfields[subfields.length - 1];\n         mapper = objectMapper.getMapper(leafName);\n-        if (mapper != null) {\n+        if (mapper != null || isObject) {", "originalCommit": "ec5541f008a82caf0b3d5a993f25621cf7603774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3ODg5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r535978893", "bodyText": "I did think about that, but it ends up repeating a lot of fairly complex code so I think it's better kept like this for now", "author": "romseygeek", "createdAt": "2020-12-04T10:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxMDA3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r536010072", "bodyText": "ok, maybe I am missing something then, I thought that one method (for the leaves) could call the other (for objects) and also apply runtime fields if it gets null. What would cause duplication?", "author": "javanna", "createdAt": "2020-12-04T10:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNTUzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r536035531", "bodyText": "oh, yes, that would make sense.  Have pushed a change!", "author": "romseygeek", "createdAt": "2020-12-04T11:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "efcb284e18bae8592d007a36628e2014ae8ae249", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\nindex 12753104f83..b20f038a943 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\n\n@@ -908,15 +907,24 @@ final class DocumentParser {\n             }\n         }\n         String leafName = subfields[subfields.length - 1];\n-        mapper = objectMapper.getMapper(leafName);\n-        if (mapper != null || isObject) {\n+        return objectMapper.getMapper(leafName);\n+    }\n+\n+    private static Mapper getLeafMapper(final ParseContext context,\n+                                        ObjectMapper objectMapper,\n+                                        String fieldName,\n+                                        String[] subfields) {\n+        Mapper mapper = getMapper(context, objectMapper, fieldName, subfields);\n+        if (mapper != null) {\n             return mapper;\n         }\n-        //concrete fields take the precedence over runtime fields when parsing documents, though when a field is defined as runtime field\n-        //only, and not under properties, it is ignored when it is sent as part of _source\n+        // concrete fields take precedence over runtime fields when parsing documents\n+        // if a leaf field is not mapped, and is defined as a runtime field, then we\n+        // don't create a dynamic mapping for it and don't index it.\n+        String fieldPath = context.path().pathAsText(fieldName);\n         RuntimeFieldType runtimeFieldType = context.docMapper().mapping().root.getRuntimeFieldType(fieldPath);\n         if (runtimeFieldType != null) {\n-            return new NoOpFieldMapper(leafName, runtimeFieldType);\n+            return new NoOpFieldMapper(subfields[subfields.length - 1], runtimeFieldType);\n         }\n         return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTk2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r535925969", "bodyText": "Should we expand testing for arrays, both arrays of leaves and arrays of objects?", "author": "javanna", "createdAt": "2020-12-04T08:39:02Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java", "diffHunk": "@@ -138,6 +138,43 @@ public void testParseWithShadowedMultiField() throws Exception {\n         assertNotNull(doc.rootDoc().getField(\"field.keyword\"));\n     }\n \n+    public void testRuntimeFieldDoesNotShadowObjectChildren() throws IOException {", "originalCommit": "ec5541f008a82caf0b3d5a993f25621cf7603774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3ODk5NA==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r535978994", "bodyText": "++, will add some more tests here", "author": "romseygeek", "createdAt": "2020-12-04T10:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MzY1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r536043651", "bodyText": "Shall we also have a test for arrays that hold leaf values instead of objects? What I am after is verifying that using getLeafMapper is the right choice in all cases when parsing an array.", "author": "javanna", "createdAt": "2020-12-04T11:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNTk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1bc69c239f799d5999b20d549ad39570f11464fe", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java\nindex 745b3a66407..c58066d5f95 100644\n--- a/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java\n\n@@ -155,23 +155,65 @@ public class DocumentParserTests extends MapperServiceTestCase {\n             b.endObject();\n         }));\n \n-        ParsedDocument doc = mapper.parse(source(b -> {\n-            b.field(\"timestamp\", \"1998-04-30T14:30:17-05:00\");\n-            b.startObject(\"location\");\n-            {\n-                b.field(\"lat\", 13.5);\n-                b.field(\"lon\", 34.89);\n-            }\n-            b.endObject();\n-            b.field(\"country\", \"de\");\n-            b.field(\"concrete\", \"foo\");\n-        }));\n+        {\n+            ParsedDocument doc = mapper.parse(source(b -> {\n+                b.field(\"timestamp\", \"1998-04-30T14:30:17-05:00\");\n+                b.startObject(\"location\");\n+                {\n+                    b.field(\"lat\", 13.5);\n+                    b.field(\"lon\", 34.89);\n+                }\n+                b.endObject();\n+                b.field(\"country\", \"de\");\n+                b.field(\"concrete\", \"foo\");\n+            }));\n \n-        assertNotNull(doc.rootDoc().getField(\"timestamp\"));\n-        assertNotNull(doc.rootDoc().getField(\"_source\"));\n-        assertNotNull(doc.rootDoc().getField(\"location.lat\"));\n-        assertNotNull(doc.rootDoc().getField(\"concrete\"));\n-        assertNull(doc.rootDoc().getField(\"country\"));\n+            assertNotNull(doc.rootDoc().getField(\"timestamp\"));\n+            assertNotNull(doc.rootDoc().getField(\"_source\"));\n+            assertNotNull(doc.rootDoc().getField(\"location.lat\"));\n+            assertNotNull(doc.rootDoc().getField(\"concrete\"));\n+            assertNull(doc.rootDoc().getField(\"country\"));\n+        }\n+\n+        {\n+            ParsedDocument doc = mapper.parse(source(b -> {\n+                b.field(\"timestamp\", \"1998-04-30T14:30:17-05:00\");\n+                b.startArray(\"location\");\n+                {\n+                    b.startObject().field(\"lat\", 13.5).field(\"lon\", 34.89).endObject();\n+                    b.startObject().field(\"lat\", 14.5).field(\"lon\", 89.33).endObject();\n+                }\n+                b.endArray();\n+                b.field(\"country\", \"de\");\n+                b.field(\"concrete\", \"foo\");\n+            }));\n+\n+            assertNotNull(doc.rootDoc().getField(\"timestamp\"));\n+            assertNotNull(doc.rootDoc().getField(\"_source\"));\n+            assertThat(doc.rootDoc().getFields(\"location.lat\").length, equalTo(4));\n+            assertNotNull(doc.rootDoc().getField(\"concrete\"));\n+            assertNull(doc.rootDoc().getField(\"country\"));\n+        }\n+\n+        {\n+            ParsedDocument doc = mapper.parse(source(b -> {\n+                b.field(\"timestamp\", \"1998-04-30T14:30:17-05:00\");\n+                b.startObject(\"location\");\n+                {\n+                    b.array(\"lat\", 13.5, 14.5);\n+                    b.array(\"lon\", 34.89, 89.33);\n+                }\n+                b.endObject();\n+                b.field(\"country\", \"de\");\n+                b.field(\"concrete\", \"foo\");\n+            }));\n+\n+            assertNotNull(doc.rootDoc().getField(\"timestamp\"));\n+            assertNotNull(doc.rootDoc().getField(\"_source\"));\n+            assertThat(doc.rootDoc().getFields(\"location.lat\").length, equalTo(4));\n+            assertNotNull(doc.rootDoc().getField(\"concrete\"));\n+            assertNull(doc.rootDoc().getField(\"country\"));\n+        }\n \n     }\n \n"}}, {"oid": "1bc69c239f799d5999b20d549ad39570f11464fe", "url": "https://github.com/elastic/elasticsearch/commit/1bc69c239f799d5999b20d549ad39570f11464fe", "message": "Add tests for arrays in objects and arrays of objects", "committedDate": "2020-12-04T10:08:56Z", "type": "commit"}, {"oid": "92602985103d26d4d9a9330fcf06765b4355b709", "url": "https://github.com/elastic/elasticsearch/commit/92602985103d26d4d9a9330fcf06765b4355b709", "message": "Merge remote-tracking branch 'origin/master' into runtime/object-shadowing", "committedDate": "2020-12-04T10:30:34Z", "type": "commit"}, {"oid": "efcb284e18bae8592d007a36628e2014ae8ae249", "url": "https://github.com/elastic/elasticsearch/commit/efcb284e18bae8592d007a36628e2014ae8ae249", "message": "iter", "committedDate": "2020-12-04T11:34:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNzcwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r536037709", "bodyText": "thanks for clarifying this comment, I meant to go back and update it :)", "author": "javanna", "createdAt": "2020-12-04T11:39:04Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -904,15 +907,24 @@ private static Mapper getMapper(final ParseContext context, ObjectMapper objectM\n             }\n         }\n         String leafName = subfields[subfields.length - 1];\n-        mapper = objectMapper.getMapper(leafName);\n+        return objectMapper.getMapper(leafName);\n+    }\n+\n+    private static Mapper getLeafMapper(final ParseContext context,\n+                                        ObjectMapper objectMapper,\n+                                        String fieldName,\n+                                        String[] subfields) {\n+        Mapper mapper = getMapper(context, objectMapper, fieldName, subfields);\n         if (mapper != null) {\n             return mapper;\n         }\n-        //concrete fields take the precedence over runtime fields when parsing documents, though when a field is defined as runtime field\n-        //only, and not under properties, it is ignored when it is sent as part of _source\n+        // concrete fields take precedence over runtime fields when parsing documents\n+        // if a leaf field is not mapped, and is defined as a runtime field, then we\n+        // don't create a dynamic mapping for it and don't index it.", "originalCommit": "efcb284e18bae8592d007a36628e2014ae8ae249", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a70e545d7436da99704a2feafcffd544a2851e3", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\nindex b20f038a943..9447ba92c41 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\n\n@@ -910,6 +913,9 @@ final class DocumentParser {\n         return objectMapper.getMapper(leafName);\n     }\n \n+    // looks up a child mapper, taking into account field names that expand to objects\n+    // if no mapper is found, checks to see if a runtime field with the specified\n+    // field name exists and if so returns a no-op mapper to prevent indexing\n     private static Mapper getLeafMapper(final ParseContext context,\n                                         ObjectMapper objectMapper,\n                                         String fieldName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MDAxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r536040015", "bodyText": "I can't seem to find a name that clearly explains why we have this new method as opposed to the existing getMapper one. Shall we add a comment to explain what is the difference between the two and why?", "author": "javanna", "createdAt": "2020-12-04T11:43:18Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -904,15 +907,24 @@ private static Mapper getMapper(final ParseContext context, ObjectMapper objectM\n             }\n         }\n         String leafName = subfields[subfields.length - 1];\n-        mapper = objectMapper.getMapper(leafName);\n+        return objectMapper.getMapper(leafName);\n+    }\n+\n+    private static Mapper getLeafMapper(final ParseContext context,", "originalCommit": "efcb284e18bae8592d007a36628e2014ae8ae249", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a70e545d7436da99704a2feafcffd544a2851e3", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\nindex b20f038a943..9447ba92c41 100644\n--- a/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\n+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java\n\n@@ -910,6 +913,9 @@ final class DocumentParser {\n         return objectMapper.getMapper(leafName);\n     }\n \n+    // looks up a child mapper, taking into account field names that expand to objects\n+    // if no mapper is found, checks to see if a runtime field with the specified\n+    // field name exists and if so returns a no-op mapper to prevent indexing\n     private static Mapper getLeafMapper(final ParseContext context,\n                                         ObjectMapper objectMapper,\n                                         String fieldName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MDY3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r536040671", "bodyText": "are you not checking for location.lon on purpose?", "author": "javanna", "createdAt": "2020-12-04T11:44:28Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java", "diffHunk": "@@ -138,6 +138,85 @@ public void testParseWithShadowedMultiField() throws Exception {\n         assertNotNull(doc.rootDoc().getField(\"field.keyword\"));\n     }\n \n+    public void testRuntimeFieldDoesNotShadowObjectChildren() throws IOException {\n+        DocumentMapper mapper = createDocumentMapper(topMapping(b -> {\n+            b.field(\"dynamic\", \"true\");\n+            b.startObject(\"runtime\");\n+            {\n+                b.startObject(\"location\").field(\"type\", \"test\").endObject();\n+                b.startObject(\"country\").field(\"type\", \"test\").endObject();\n+            }\n+            b.endObject();\n+            b.startObject(\"properties\");\n+            {\n+                b.startObject(\"timestamp\").field(\"type\", \"date\").endObject();\n+                b.startObject(\"concrete\").field(\"type\", \"keyword\").endObject();\n+            }\n+            b.endObject();\n+        }));\n+\n+        {\n+            ParsedDocument doc = mapper.parse(source(b -> {\n+                b.field(\"timestamp\", \"1998-04-30T14:30:17-05:00\");\n+                b.startObject(\"location\");\n+                {\n+                    b.field(\"lat\", 13.5);\n+                    b.field(\"lon\", 34.89);\n+                }\n+                b.endObject();\n+                b.field(\"country\", \"de\");\n+                b.field(\"concrete\", \"foo\");\n+            }));\n+\n+            assertNotNull(doc.rootDoc().getField(\"timestamp\"));\n+            assertNotNull(doc.rootDoc().getField(\"_source\"));\n+            assertNotNull(doc.rootDoc().getField(\"location.lat\"));", "originalCommit": "efcb284e18bae8592d007a36628e2014ae8ae249", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a70e545d7436da99704a2feafcffd544a2851e3", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java\nindex c58066d5f95..59af1449a36 100644\n--- a/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java\n\n@@ -171,6 +171,7 @@ public class DocumentParserTests extends MapperServiceTestCase {\n             assertNotNull(doc.rootDoc().getField(\"timestamp\"));\n             assertNotNull(doc.rootDoc().getField(\"_source\"));\n             assertNotNull(doc.rootDoc().getField(\"location.lat\"));\n+            assertNotNull(doc.rootDoc().getField(\"location.lon\"));\n             assertNotNull(doc.rootDoc().getField(\"concrete\"));\n             assertNull(doc.rootDoc().getField(\"country\"));\n         }\n"}}, {"oid": "9a70e545d7436da99704a2feafcffd544a2851e3", "url": "https://github.com/elastic/elasticsearch/commit/9a70e545d7436da99704a2feafcffd544a2851e3", "message": "iter", "committedDate": "2020-12-04T14:03:42Z", "type": "commit"}, {"oid": "89016c3106a7f75c0ca13803e7caaf4e9ed3bf19", "url": "https://github.com/elastic/elasticsearch/commit/89016c3106a7f75c0ca13803e7caaf4e9ed3bf19", "message": "Merge remote-tracking branch 'origin/master' into runtime/object-shadowing", "committedDate": "2020-12-07T09:38:30Z", "type": "commit"}, {"oid": "cb03304206089910fa2ff6e74fe62c58227a420e", "url": "https://github.com/elastic/elasticsearch/commit/cb03304206089910fa2ff6e74fe62c58227a420e", "message": "Add array tests", "committedDate": "2020-12-07T10:27:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2Njg5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r537466896", "bodyText": "nit: maybe DynamicMappingsTests#dynamicMapping should be moved to MapperServiceTestCase? Also, isn't dynamic true the default anyways?", "author": "javanna", "createdAt": "2020-12-07T12:26:24Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java", "diffHunk": "@@ -138,6 +138,123 @@ public void testParseWithShadowedMultiField() throws Exception {\n         assertNotNull(doc.rootDoc().getField(\"field.keyword\"));\n     }\n \n+    public void testRuntimeFieldAndArrayChildren() throws IOException {\n+        DocumentMapper mapper = createDocumentMapper(topMapping(b -> {\n+            b.field(\"dynamic\", \"true\");\n+            b.startObject(\"runtime\");\n+            {\n+                b.startObject(\"object\").field(\"type\", \"test\").endObject();\n+            }\n+            b.endObject();\n+        }));\n+\n+        {\n+            ParsedDocument doc = mapper.parse(source(b -> {\n+                b.startObject(\"object\");\n+                b.array(\"array\", 1, 2, 3);\n+                b.field(\"foo\", \"bar\");\n+                b.endObject();\n+            }));\n+            assertNotNull(doc.rootDoc().getField(\"object.foo\"));\n+            assertNotNull(doc.rootDoc().getField(\"object.array\"));\n+        }\n+\n+        {\n+            ParsedDocument doc = mapper.parse(source(b -> {\n+                b.startArray(\"object\");\n+                {\n+                    b.startObject().array(\"array\", 1, 2, 3).endObject();\n+                    b.startObject().field(\"foo\", \"bar\").endObject();\n+                }\n+                b.endArray();\n+            }));\n+            assertNotNull(doc.rootDoc().getField(\"object.foo\"));\n+            assertNotNull(doc.rootDoc().getField(\"object.array\"));\n+        }\n+    }\n+\n+    public void testRuntimeFieldDoesNotShadowObjectChildren() throws IOException {\n+        DocumentMapper mapper = createDocumentMapper(topMapping(b -> {\n+            b.field(\"dynamic\", \"true\");", "originalCommit": "cb03304206089910fa2ff6e74fe62c58227a420e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIyNjM4NA==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r538226384", "bodyText": "dynamic:true is indeed the default but I wanted to make it clear in the test.  Nice idea about moving dynamicMapping, I'll pull that in.", "author": "romseygeek", "createdAt": "2020-12-08T10:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2Njg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIyODEzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r538228139", "bodyText": "Although it actually doesn't help in this case because it always uses properties and we want to add things to runtime here.  Meh.", "author": "romseygeek", "createdAt": "2020-12-08T10:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2Njg5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ2OTMxMg==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r537469312", "bodyText": "shall we add one scenario where object is an array of e.g. longs?", "author": "javanna", "createdAt": "2020-12-07T12:30:32Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java", "diffHunk": "@@ -138,6 +138,123 @@ public void testParseWithShadowedMultiField() throws Exception {\n         assertNotNull(doc.rootDoc().getField(\"field.keyword\"));\n     }\n \n+    public void testRuntimeFieldAndArrayChildren() throws IOException {\n+        DocumentMapper mapper = createDocumentMapper(topMapping(b -> {\n+            b.field(\"dynamic\", \"true\");\n+            b.startObject(\"runtime\");\n+            {\n+                b.startObject(\"object\").field(\"type\", \"test\").endObject();\n+            }\n+            b.endObject();\n+        }));\n+\n+        {\n+            ParsedDocument doc = mapper.parse(source(b -> {\n+                b.startObject(\"object\");", "originalCommit": "cb03304206089910fa2ff6e74fe62c58227a420e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MDA0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r537470043", "bodyText": "maybe calling object is misleading given that it can end up being an array in the docs?", "author": "javanna", "createdAt": "2020-12-07T12:31:48Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java", "diffHunk": "@@ -138,6 +138,123 @@ public void testParseWithShadowedMultiField() throws Exception {\n         assertNotNull(doc.rootDoc().getField(\"field.keyword\"));\n     }\n \n+    public void testRuntimeFieldAndArrayChildren() throws IOException {\n+        DocumentMapper mapper = createDocumentMapper(topMapping(b -> {\n+            b.field(\"dynamic\", \"true\");\n+            b.startObject(\"runtime\");\n+            {\n+                b.startObject(\"object\").field(\"type\", \"test\").endObject();", "originalCommit": "cb03304206089910fa2ff6e74fe62c58227a420e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MTYyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r537471629", "bodyText": "make this javadoc?", "author": "javanna", "createdAt": "2020-12-07T12:34:31Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -904,15 +910,27 @@ private static Mapper getMapper(final ParseContext context, ObjectMapper objectM\n             }\n         }\n         String leafName = subfields[subfields.length - 1];\n-        mapper = objectMapper.getMapper(leafName);\n+        return objectMapper.getMapper(leafName);\n+    }\n+\n+    // looks up a child mapper, taking into account field names that expand to objects\n+    // if no mapper is found, checks to see if a runtime field with the specified\n+    // field name exists and if so returns a no-op mapper to prevent indexing", "originalCommit": "cb03304206089910fa2ff6e74fe62c58227a420e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MTk1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65820#discussion_r537471957", "bodyText": "javadoc?", "author": "javanna", "createdAt": "2020-12-07T12:35:03Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java", "diffHunk": "@@ -883,7 +883,13 @@ private static void parseCopy(String field, ParseContext context) throws IOExcep\n     }\n \n     // looks up a child mapper, but takes into account field names that expand to objects\n-    private static Mapper getMapper(final ParseContext context, ObjectMapper objectMapper, String fieldName, String[] subfields) {\n+    // returns null if no such child mapper exists - note that unlike getLeafMapper,\n+    // we do not check for shadowing runtime fields because they only apply to leaf\n+    // fields", "originalCommit": "cb03304206089910fa2ff6e74fe62c58227a420e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}