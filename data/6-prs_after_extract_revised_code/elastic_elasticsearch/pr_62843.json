{"pr_number": 62843, "pr_title": "Grok: \"native\" results", "pr_createdAt": "2020-09-23T20:15:46Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62843", "timeline": [{"oid": "574582460d28408a60a59a61d944486d4c9dc9c5", "url": "https://github.com/elastic/elasticsearch/commit/574582460d28408a60a59a61d944486d4c9dc9c5", "message": "Grok: \"native\" results\n\nThis adds the ability to fetch java primitives like `long` and `float`\nfrom grok matches rather than their boxed versions. It also allows\ncustomizing the which fields are extracted and how they are extracted.\nBy default we continue to fetch a `Map<String, Object>` but runtime\nfields will be able to catch *just* the fields it is interested\nin, and the values will be primitives.", "committedDate": "2020-09-23T20:14:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NzE0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494297141", "bodyText": "Comment should be updated, this is return boolean on success now and mutating the extracter", "author": "benwtrent", "createdAt": "2020-09-24T13:00:49Z", "path": "libs/grok/src/main/java/org/elasticsearch/grok/Grok.java", "diffHunk": "@@ -252,7 +255,7 @@ public boolean match(String text) {\n      * @param length length of the text to match\n      * @return a map containing field names and their respective coerced values that matched.\n      */\n-    public Map<String, Object> captures(byte[] utf8Bytes, int offset, int length) {\n+    public boolean match(byte[] utf8Bytes, int offset, int length, GrokCaptureExtracter extracter) {", "originalCommit": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NDgzNA==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494344834", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-09-24T14:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NzE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7bb0d357d36484120563936433fde4d522fc8034", "chunk": "diff --git a/libs/grok/src/main/java/org/elasticsearch/grok/Grok.java b/libs/grok/src/main/java/org/elasticsearch/grok/Grok.java\nindex 8659bcd154f5..129831fa045b 100644\n--- a/libs/grok/src/main/java/org/elasticsearch/grok/Grok.java\n+++ b/libs/grok/src/main/java/org/elasticsearch/grok/Grok.java\n\n@@ -249,11 +249,13 @@ public final class Grok {\n     }\n \n     /**\n-     * Matches and returns any named captures.\n+     * Matches and collects any named captures.\n      * @param utf8Bytes array containing the text to match against encoded in utf-8\n      * @param offset offset {@code utf8Bytes} of the start of the text\n      * @param length length of the text to match\n-     * @return a map containing field names and their respective coerced values that matched.\n+     * @param extracter collector for captures. {@link GrokCaptureConfig#nativeExtracter} can build these.\n+     * @return true if there was a match, false otherwise\n+     * @throws RuntimeException if there was a timeout\n      */\n     public boolean match(byte[] utf8Bytes, int offset, int length, GrokCaptureExtracter extracter) {\n         Matcher matcher = compiledExpression.matcher(utf8Bytes, offset, offset + length);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494302776", "bodyText": "This particular one (and really all the other native type parsers), are passed the value of X.parseX. So, it is actually passed the result of Integer.parseInt(/*String*/i). It then follows that boxing here is not necessary. I think you can just keep it native all the way as the IntConsumer is designed to accept native values.", "author": "benwtrent", "createdAt": "2020-09-24T13:09:35Z", "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));", "originalCommit": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNTc5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494305796", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));\n          \n          \n            \n                            return buildExtracter.apply(emit::accept);\n          \n      \n    \n    \n  \n\nGiven the above comment, I think this is all that is necessary (and this goes for all the other extractor methods too).", "author": "benwtrent", "createdAt": "2020-09-24T13:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyOTc1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494329752", "bodyText": "That doesn't so much keep it native as rely on autoboxing. I intentionally didn't use autoboxing here because I figured it'd be clearer that we have to box here to get the Object.", "author": "nik9000", "createdAt": "2020-09-24T13:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMjk4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494332986", "bodyText": "I see, definitely, since the resulting Object must be returned to the ultimate consumer.\nStinks that we lose the native values and that they must be boxed.", "author": "benwtrent", "createdAt": "2020-09-24T13:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NDc4MA==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494344780", "bodyText": "Yeah! This is mostly for the folks that need it wrapped in an object anyway like ingest. Runtime fields will use the native values.", "author": "nik9000", "createdAt": "2020-09-24T14:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMjc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7bb0d357d36484120563936433fde4d522fc8034", "chunk": "diff --git a/libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java b/libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java\nindex 6e65bbd4d4ba..7a3adac1721d 100644\n--- a/libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java\n+++ b/libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java\n\n@@ -63,7 +63,7 @@ public final class GrokCaptureConfig {\n      * it extracts text, boxed if the \"native\" representation is primitive type.\n      * Extracters returned from this method are stateless and can be reused.\n      */\n-    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+    public GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n         return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n             @Override\n             public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTY5NA==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494309694", "bodyText": "Should we also have a BooleanConsumer? That would prevent boolean boxing as Boolean.parseBoolean returns a native boolean. This boxing  is admittedly less of a concern than numeric unboxing/reboxing, but it would be nice to have consistency.", "author": "benwtrent", "createdAt": "2020-09-24T13:19:12Z", "path": "libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java", "diffHunk": "@@ -50,18 +54,104 @@ public String name() {\n     /**\n      * The type defined for the field in the pattern.\n      */\n-    public GrokCaptureType type() {\n+    GrokCaptureType type() {\n         return type;\n     }\n \n-    Object extract(byte[] utf8Bytes, int offset, Region region) {\n-        for (int number : backRefs) {\n-            if (region.beg[number] >= 0) {\n-                String matchValue = new String(utf8Bytes, offset + region.beg[number], region.end[number] - region.beg[number],\n-                    StandardCharsets.UTF_8);\n-                return type.parse(matchValue);\n+    /**\n+     * Build a {@linkplain GrokCaptureExtracter} that will call {@code emit} when\n+     * it extracts text, boxed if the \"native\" representation is primitive type.\n+     * Extracters returned from this method are stateless and can be reused.\n+     */\n+    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+        return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n+            @Override\n+            public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(str -> emit.accept(str));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forInt(Function<IntConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(i -> emit.accept(Integer.valueOf(i)));\n             }\n-        }\n-        return null;\n+\n+            @Override\n+            public GrokCaptureExtracter forLong(Function<LongConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(l -> emit.accept(Long.valueOf(l)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forFloat(Function<FloatConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(f -> emit.accept(Float.valueOf(f)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forDouble(Function<DoubleConsumer, GrokCaptureExtracter> buildExtracter) {\n+                return buildExtracter.apply(d -> emit.accept(Double.valueOf(d)));\n+            }\n+\n+            @Override\n+            public GrokCaptureExtracter forBoolean(Function<Consumer<Boolean>, GrokCaptureExtracter> buildExtracter) {", "originalCommit": "78fa3cc85dd1b47faf3029427d1a7efc3c6a75ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMTU5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494331592", "bodyText": "Java didn't add one of those because they figured the boxing overhead was fairly small and they'd never allocate when boxing a boolean. I think that's fine for us here too. We might see otherwise, but I figure it'd be ok for now.", "author": "nik9000", "createdAt": "2020-09-24T13:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMzIzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/62843#discussion_r494333239", "bodyText": "\ud83d\udc4d", "author": "benwtrent", "createdAt": "2020-09-24T13:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "7bb0d357d36484120563936433fde4d522fc8034", "chunk": "diff --git a/libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java b/libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java\nindex 6e65bbd4d4ba..7a3adac1721d 100644\n--- a/libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java\n+++ b/libs/grok/src/main/java/org/elasticsearch/grok/GrokCaptureConfig.java\n\n@@ -63,7 +63,7 @@ public final class GrokCaptureConfig {\n      * it extracts text, boxed if the \"native\" representation is primitive type.\n      * Extracters returned from this method are stateless and can be reused.\n      */\n-    GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n+    public GrokCaptureExtracter objectExtracter(Consumer<Object> emit) {\n         return nativeExtracter(new NativeExtracterMap<GrokCaptureExtracter>() {\n             @Override\n             public GrokCaptureExtracter forString(Function<Consumer<String>, GrokCaptureExtracter> buildExtracter) {\n"}}, {"oid": "f48c463149884fd16e92eac5b5fc36a13b140bea", "url": "https://github.com/elastic/elasticsearch/commit/f48c463149884fd16e92eac5b5fc36a13b140bea", "message": "Merge branch 'master' into grok_native", "committedDate": "2020-09-24T14:02:24Z", "type": "commit"}, {"oid": "7bb0d357d36484120563936433fde4d522fc8034", "url": "https://github.com/elastic/elasticsearch/commit/7bb0d357d36484120563936433fde4d522fc8034", "message": "Update comment", "committedDate": "2020-09-24T14:04:56Z", "type": "commit"}, {"oid": "846ae11b14d795f1c3e21063cd3c602397644be6", "url": "https://github.com/elastic/elasticsearch/commit/846ae11b14d795f1c3e21063cd3c602397644be6", "message": "Explain", "committedDate": "2020-09-24T14:07:17Z", "type": "forcePushed"}, {"oid": "846ae11b14d795f1c3e21063cd3c602397644be6", "url": "https://github.com/elastic/elasticsearch/commit/846ae11b14d795f1c3e21063cd3c602397644be6", "message": "Explain", "committedDate": "2020-09-24T14:07:17Z", "type": "commit"}]}