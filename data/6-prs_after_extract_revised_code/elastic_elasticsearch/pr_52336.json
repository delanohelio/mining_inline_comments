{"pr_number": 52336, "pr_title": "Decode max and min optimization more carefully", "pr_createdAt": "2020-02-13T19:43:57Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52336", "timeline": [{"oid": "1fb9b992fb40f372e2ffce6e5163564d0e4d256c", "url": "https://github.com/elastic/elasticsearch/commit/1fb9b992fb40f372e2ffce6e5163564d0e4d256c", "message": "Decode max and min optimization more carefully\n\nFixes the the no-query optimization for `min` and `max` aggregations\nfor `date_nanos` fields by delegating decoding dates \"through\" their\n`resolution` member.\n\nCloses #52220", "committedDate": "2020-02-13T19:38:08Z", "type": "commit"}, {"oid": "a583cad635bf18f811831723d0f1d023566cdd20", "url": "https://github.com/elastic/elasticsearch/commit/a583cad635bf18f811831723d0f1d023566cdd20", "message": "One more!", "committedDate": "2020-02-13T19:44:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4MDEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52336#discussion_r379080101", "bodyText": "This was a javadoc comment in an invalid spot for javadoc.", "author": "nik9000", "createdAt": "2020-02-13T19:44:36Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/metrics/MaxAggregator.java", "diffHunk": "@@ -98,7 +98,7 @@ public LeafBucketCollector getLeafCollector(LeafReaderContext ctx,\n         if (pointConverter != null) {\n             Number segMax = findLeafMaxValue(ctx.reader(), pointField, pointConverter);\n             if (segMax != null) {\n-                /**", "originalCommit": "1fb9b992fb40f372e2ffce6e5163564d0e4d256c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4MDMyMA==", "url": "https://github.com/elastic/elasticsearch/pull/52336#discussion_r379080320", "bodyText": "This isn't used any more.", "author": "nik9000", "createdAt": "2020-02-13T19:45:05Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java", "diffHunk": "@@ -799,21 +815,6 @@ public void testMinShortcutRandom() throws Exception {\n             (v) -> DoublePoint.decodeDimension(v, 0));\n     }\n \n-    private void testMinCase(IndexSearcher searcher,", "originalCommit": "1fb9b992fb40f372e2ffce6e5163564d0e4d256c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4MDU2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52336#discussion_r379080565", "bodyText": "There is a ton more ceremony here because resolution is only set when you call build. Bleh.", "author": "nik9000", "createdAt": "2020-02-13T19:45:33Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java", "diffHunk": "@@ -889,12 +890,17 @@ private Aggregator mockAggregator() {\n         return config;\n     }\n \n-    private ValuesSourceConfig<ValuesSource.Numeric> mockDateValuesSourceConfig(String fieldName, boolean indexed) {\n+    private ValuesSourceConfig<ValuesSource.Numeric> mockDateValuesSourceConfig(String fieldName, boolean indexed,", "originalCommit": "1fb9b992fb40f372e2ffce6e5163564d0e4d256c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5NzMwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52336#discussion_r379097301", "bodyText": "I'm a little uncomfortable using a randomization for coverage here.  I'd rather loop over the possible resolution values like we loop over the possible numeric types above.", "author": "not-napoleon", "createdAt": "2020-02-13T20:21:08Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java", "diffHunk": "@@ -740,41 +743,54 @@ public void testShortcutIsApplicable() {\n                 )\n             );\n         }\n-        assertNotNull(\n-            MinAggregator.getPointReaderOrNull(\n-                mockSearchContext(new MatchAllDocsQuery()),\n-                null,\n-                mockDateValuesSourceConfig(\"number\", true)\n-            )\n-        );\n         assertNull(\n             MinAggregator.getPointReaderOrNull(\n                 mockSearchContext(new MatchAllDocsQuery()),\n                 mockAggregator(),\n-                mockDateValuesSourceConfig(\"number\", true)\n+                mockDateValuesSourceConfig(\"number\", true, randomFrom(DateFieldMapper.Resolution.values()))", "originalCommit": "a583cad635bf18f811831723d0f1d023566cdd20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjM2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52336#discussion_r379126365", "bodyText": "Sure!", "author": "nik9000", "createdAt": "2020-02-13T21:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5NzMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8c49115d1a5541505b898de9cce2cc6796547f6c", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java\nindex 72b3128705f..32c539e4334 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java\n\n@@ -743,34 +743,36 @@ public class MinAggregatorTests extends AggregatorTestCase {\n                 )\n             );\n         }\n-        assertNull(\n-            MinAggregator.getPointReaderOrNull(\n-                mockSearchContext(new MatchAllDocsQuery()),\n-                mockAggregator(),\n-                mockDateValuesSourceConfig(\"number\", true, randomFrom(DateFieldMapper.Resolution.values()))\n-            )\n-        );\n-        assertNull(\n-            MinAggregator.getPointReaderOrNull(\n-                mockSearchContext(new TermQuery(new Term(\"foo\", \"bar\"))),\n-                null,\n-                mockDateValuesSourceConfig(\"number\", true, randomFrom(DateFieldMapper.Resolution.values()))\n-            )\n-        );\n-        assertNull(\n-            MinAggregator.getPointReaderOrNull(\n-                mockSearchContext(null),\n-                mockAggregator(),\n-                mockDateValuesSourceConfig(\"number\", true, randomFrom(DateFieldMapper.Resolution.values()))\n-            )\n-        );\n-        assertNull(\n-            MinAggregator.getPointReaderOrNull(\n-                mockSearchContext(null),\n-                null,\n-                mockDateValuesSourceConfig(\"number\", false, randomFrom(DateFieldMapper.Resolution.values()))\n-            )\n-        );\n+        for (DateFieldMapper.Resolution resolution : DateFieldMapper.Resolution.values()) {\n+            assertNull(\n+                MinAggregator.getPointReaderOrNull(\n+                    mockSearchContext(new MatchAllDocsQuery()),\n+                    mockAggregator(),\n+                    mockDateValuesSourceConfig(\"number\", true, resolution)\n+                )\n+            );\n+            assertNull(\n+                MinAggregator.getPointReaderOrNull(\n+                    mockSearchContext(new TermQuery(new Term(\"foo\", \"bar\"))),\n+                    null,\n+                    mockDateValuesSourceConfig(\"number\", true, resolution)\n+                )\n+            );\n+            assertNull(\n+                MinAggregator.getPointReaderOrNull(\n+                    mockSearchContext(null),\n+                    mockAggregator(),\n+                    mockDateValuesSourceConfig(\"number\", true, resolution)\n+                )\n+            );\n+            assertNull(\n+                MinAggregator.getPointReaderOrNull(\n+                    mockSearchContext(null),\n+                    null,\n+                    mockDateValuesSourceConfig(\"number\", false, resolution)\n+                )\n+            );\n+        }\n         // Check that we decode a dates \"just like\" the doc values instance.\n         Instant expected = Instant.from(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parse(\"2020-01-01T00:00:00Z\"));\n         byte[] scratch = new byte[8];\n"}}, {"oid": "ce60006247d53e6da8ddfb881127f91618c2ea8e", "url": "https://github.com/elastic/elasticsearch/commit/ce60006247d53e6da8ddfb881127f91618c2ea8e", "message": "Merge branch 'master' into date_nanos_weird_opt", "committedDate": "2020-02-13T22:41:33Z", "type": "commit"}, {"oid": "8c49115d1a5541505b898de9cce2cc6796547f6c", "url": "https://github.com/elastic/elasticsearch/commit/8c49115d1a5541505b898de9cce2cc6796547f6c", "message": "Bigger test", "committedDate": "2020-02-13T22:50:22Z", "type": "commit"}]}