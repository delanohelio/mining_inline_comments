{"pr_number": 52417, "pr_title": "Implement unit tests for AnomalyDetectorsIndex class", "pr_createdAt": "2020-02-17T14:31:31Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52417", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyNjg1NA==", "url": "https://github.com/elastic/elasticsearch/pull/52417#discussion_r381126854", "bodyText": "nit: maybe a constant for .ml-state so its easier to change", "author": "hendrikmuhs", "createdAt": "2020-02-19T07:58:44Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.job.persistence;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.alias.Alias;\n+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesAction;\n+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;\n+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest.AliasActions;\n+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexAction;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.AdminClient;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.IndicesAdminClient;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.AliasMetaData;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.stubbing.Answer;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class AnomalyDetectorsIndexTests extends ESTestCase {\n+\n+    private ThreadPool threadPool;\n+    private IndicesAdminClient indicesAdminClient;\n+    private AdminClient adminClient;\n+    private Client client;\n+    private ActionListener<Boolean> finalListener;\n+\n+    private ArgumentCaptor<CreateIndexRequest> createRequestCaptor;\n+    private ArgumentCaptor<IndicesAliasesRequest> aliasesRequestCaptor;\n+\n+    @Before\n+    public void setUpMocks() {\n+        threadPool = mock(ThreadPool.class);\n+        when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY));\n+\n+        indicesAdminClient = mock(IndicesAdminClient.class);\n+        when(indicesAdminClient.prepareCreate(\".ml-state\"))", "originalCommit": "c6bcec40010839a5bc2cba24e2202904c2c58dbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MDk5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52417#discussion_r381140999", "bodyText": "Done.", "author": "przemekwitek", "createdAt": "2020-02-19T08:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyNjg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "abbe45d53fb4433b5f081465c6974aeb5aefb9d3", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java\nindex d664f11f837..09776b3eeac 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java\n\n@@ -46,6 +46,7 @@ import static java.util.stream.Collectors.toMap;\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzMDAyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52417#discussion_r381130021", "bodyText": "nit: its confusing to prefix with test as this is usually the entry point (if public) for a unit test. I tend towards naming inner methods like this assert...", "author": "hendrikmuhs", "createdAt": "2020-02-19T08:06:34Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.job.persistence;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.alias.Alias;\n+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesAction;\n+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;\n+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest.AliasActions;\n+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexAction;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.elasticsearch.client.AdminClient;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.IndicesAdminClient;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.AliasMetaData;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.MetaData;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.stubbing.Answer;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+public class AnomalyDetectorsIndexTests extends ESTestCase {\n+\n+    private ThreadPool threadPool;\n+    private IndicesAdminClient indicesAdminClient;\n+    private AdminClient adminClient;\n+    private Client client;\n+    private ActionListener<Boolean> finalListener;\n+\n+    private ArgumentCaptor<CreateIndexRequest> createRequestCaptor;\n+    private ArgumentCaptor<IndicesAliasesRequest> aliasesRequestCaptor;\n+\n+    @Before\n+    public void setUpMocks() {\n+        threadPool = mock(ThreadPool.class);\n+        when(threadPool.getThreadContext()).thenReturn(new ThreadContext(Settings.EMPTY));\n+\n+        indicesAdminClient = mock(IndicesAdminClient.class);\n+        when(indicesAdminClient.prepareCreate(\".ml-state\"))\n+            .thenReturn(new CreateIndexRequestBuilder(client, CreateIndexAction.INSTANCE, \".ml-state\"));\n+        doAnswer(withResponse(new CreateIndexResponse(true, true, \".ml-state\"))).when(indicesAdminClient).create(any(), any());\n+        when(indicesAdminClient.prepareAliases()).thenReturn(new IndicesAliasesRequestBuilder(client, IndicesAliasesAction.INSTANCE));\n+        doAnswer(withResponse(new AcknowledgedResponse(true))).when(indicesAdminClient).aliases(any(), any());\n+\n+        adminClient = mock(AdminClient.class);\n+        when(adminClient.indices()).thenReturn(indicesAdminClient);\n+\n+        client = mock(Client.class);\n+        when(client.threadPool()).thenReturn(threadPool);\n+        when(client.admin()).thenReturn(adminClient);\n+\n+        finalListener = mock(ActionListener.class);\n+\n+        createRequestCaptor = ArgumentCaptor.forClass(CreateIndexRequest.class);\n+        aliasesRequestCaptor = ArgumentCaptor.forClass(IndicesAliasesRequest.class);\n+    }\n+\n+    @After\n+    public void verifyNoMoreInteractionsWithMocks() {\n+        verifyNoMoreInteractions(indicesAdminClient, finalListener);\n+    }\n+\n+    public void testCreateStateIndexAndAliasIfNecessary_CleanState() {\n+        ClusterState clusterState = createClusterState(Collections.emptyMap());\n+        AnomalyDetectorsIndex.createStateIndexAndAliasIfNecessary(client, clusterState, finalListener);\n+\n+        InOrder inOrder = inOrder(indicesAdminClient, finalListener);\n+        inOrder.verify(indicesAdminClient).prepareCreate(\".ml-state\");\n+        inOrder.verify(indicesAdminClient).create(createRequestCaptor.capture(), any());\n+        inOrder.verify(finalListener).onResponse(true);\n+\n+        CreateIndexRequest createRequest = createRequestCaptor.getValue();\n+        assertThat(createRequest.index(), equalTo(\".ml-state\"));\n+        assertThat(createRequest.aliases(), equalTo(Collections.singleton(new Alias(\".ml-state-write\"))));\n+    }\n+\n+    private void testCreateStateIndexAndAliasIfNecessary_WriteAliasAlreadyExists(String indexName) {\n+        ClusterState clusterState = createClusterState(Collections.singletonMap(indexName, createIndexMetaDataWithAlias(indexName)));\n+        AnomalyDetectorsIndex.createStateIndexAndAliasIfNecessary(client, clusterState, finalListener);\n+\n+        InOrder inOrder = inOrder(finalListener);\n+        inOrder.verify(finalListener).onResponse(false);\n+    }\n+\n+    public void testCreateStateIndexAndAliasIfNecessary_WriteAliasAlreadyExistsAndPointsAtInitialStateIndex() {\n+        testCreateStateIndexAndAliasIfNecessary_WriteAliasAlreadyExists(\".ml-state-000001\");\n+    }\n+\n+    public void testCreateStateIndexAndAliasIfNecessary_WriteAliasAlreadyExistsAndPointsAtSubsequentStateIndex() {\n+        testCreateStateIndexAndAliasIfNecessary_WriteAliasAlreadyExists(\".ml-state-000007\");\n+    }\n+\n+    public void testCreateStateIndexAndAliasIfNecessary_WriteAliasAlreadyExistsAndPointsAtDummyIndex() {\n+        testCreateStateIndexAndAliasIfNecessary_WriteAliasAlreadyExists(\"dummy-index\");\n+    }\n+\n+    private void testCreateStateIndexAndAliasIfNecessary_WriteAliasDoesNotExist(List<String> existingIndexNames,", "originalCommit": "c6bcec40010839a5bc2cba24e2202904c2c58dbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MjM2MA==", "url": "https://github.com/elastic/elasticsearch/pull/52417#discussion_r381142360", "bodyText": "Done.", "author": "przemekwitek", "createdAt": "2020-02-19T08:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzMDAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "abbe45d53fb4433b5f081465c6974aeb5aefb9d3", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java\nindex d664f11f837..09776b3eeac 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/AnomalyDetectorsIndexTests.java\n\n@@ -46,6 +46,7 @@ import static java.util.stream.Collectors.toMap;\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;\n"}}, {"oid": "abbe45d53fb4433b5f081465c6974aeb5aefb9d3", "url": "https://github.com/elastic/elasticsearch/commit/abbe45d53fb4433b5f081465c6974aeb5aefb9d3", "message": "Implement unit tests for AnomalyDetectorsIndex class", "committedDate": "2020-02-19T09:23:06Z", "type": "commit"}, {"oid": "dccd7af5160b5caa2135dbb7421ee8926f802d5f", "url": "https://github.com/elastic/elasticsearch/commit/dccd7af5160b5caa2135dbb7421ee8926f802d5f", "message": "Remove unused import", "committedDate": "2020-02-19T09:23:06Z", "type": "commit"}, {"oid": "0c7ffb8daefe07bfb6386ba6f85eb1d7f81a145a", "url": "https://github.com/elastic/elasticsearch/commit/0c7ffb8daefe07bfb6386ba6f85eb1d7f81a145a", "message": "Apply review comments", "committedDate": "2020-02-19T09:23:06Z", "type": "commit"}, {"oid": "0c7ffb8daefe07bfb6386ba6f85eb1d7f81a145a", "url": "https://github.com/elastic/elasticsearch/commit/0c7ffb8daefe07bfb6386ba6f85eb1d7f81a145a", "message": "Apply review comments", "committedDate": "2020-02-19T09:23:06Z", "type": "forcePushed"}]}