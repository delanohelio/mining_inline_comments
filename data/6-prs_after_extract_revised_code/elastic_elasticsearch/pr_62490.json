{"pr_number": 62490, "pr_title": "Adding authentication information to access token create APIs", "pr_createdAt": "2020-09-16T17:11:01Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62490", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4MjYxNg==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490682616", "bodyText": "An actual authentication object is needed here instead of null for better test coverage.", "author": "ywangd", "createdAt": "2020-09-18T03:42:00Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -37,7 +37,7 @@\n     protected org.elasticsearch.xpack.core.security.action.DelegatePkiAuthenticationResponse createServerTestInstance(\n         XContentType xContentType) {\n         return new org.elasticsearch.xpack.core.security.action.DelegatePkiAuthenticationResponse(randomAlphaOfLength(6),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);", "originalCommit": "346695a05aa04f439f41ecf25e5d3a20e29ade39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDU2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498960565", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-02T17:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4MjYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "a1f7c1f2f35ea14af7129ba11145ef1ab254cdbb", "chunk": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java\nindex d03c3f4a210..f0bfe123046 100644\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java\n+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java\n\n@@ -37,7 +44,8 @@ public class DelegatePkiAuthenticationResponseTests extends\n     protected org.elasticsearch.xpack.core.security.action.DelegatePkiAuthenticationResponse createServerTestInstance(\n         XContentType xContentType) {\n         return new org.elasticsearch.xpack.core.security.action.DelegatePkiAuthenticationResponse(randomAlphaOfLength(6),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"),\n+                createAuthentication());\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NTgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490685828", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.principal = principal;\n          \n          \n            \n                    this.principal = authentication.getUser().principal();", "author": "ywangd", "createdAt": "2020-09-18T03:48:25Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -17,12 +18,15 @@\n     private String accessTokenString;\n     private String refreshTokenString;\n     private TimeValue expiresIn;\n+    private Authentication authentication;\n \n-    public OpenIdConnectAuthenticateResponse(String principal, String accessTokenString, String refreshTokenString, TimeValue expiresIn) {\n+    public OpenIdConnectAuthenticateResponse(Authentication authentication, String accessTokenString, String refreshTokenString,\n+                                             TimeValue expiresIn) {\n         this.principal = principal;", "originalCommit": "346695a05aa04f439f41ecf25e5d3a20e29ade39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MTI2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498961261", "bodyText": "Fixed", "author": "BigPandaToo", "createdAt": "2020-10-02T17:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NTgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a1f7c1f2f35ea14af7129ba11145ef1ab254cdbb", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\nindex 7e2569683a0..e2666edee3c 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\n\n@@ -22,7 +23,7 @@ public class OpenIdConnectAuthenticateResponse extends ActionResponse {\n \n     public OpenIdConnectAuthenticateResponse(Authentication authentication, String accessTokenString, String refreshTokenString,\n                                              TimeValue expiresIn) {\n-        this.principal = principal;\n+        this.principal = authentication.getUser().principal();;\n         this.accessTokenString = accessTokenString;\n         this.refreshTokenString = refreshTokenString;\n         this.expiresIn = expiresIn;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzU5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490687593", "bodyText": "The authentication object should be deserialised from the stream as well, i.e. authentication = new Authentication(in);.\nSince this is a new field, which does not exist in previous version, we need to protect the read with version check, i.e.:\nif (in.getVersion().onOrAfter(Version.V_7_10_0) {\n    authentication = new Authentication(in);\n}\nTechically, I don't think class like OpenIdConnectAuthenticateResponse travel across nodes, so whether reader/writer interfaces are really necessary for them  is debatable. But that is a separate issue, for consistency, it's better to have it here. (Edit: in fact, given the presense of TransportClient in 7.x, these interfaces could still be actually necessary)", "author": "ywangd", "createdAt": "2020-09-18T03:55:29Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -31,6 +35,7 @@ public OpenIdConnectAuthenticateResponse(StreamInput in) throws IOException {\n         accessTokenString = in.readString();\n         refreshTokenString = in.readString();\n         expiresIn = in.readTimeValue();\n+        authentication = null;", "originalCommit": "346695a05aa04f439f41ecf25e5d3a20e29ade39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDY3NA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498960674", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-02T17:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a1f7c1f2f35ea14af7129ba11145ef1ab254cdbb", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\nindex 7e2569683a0..e2666edee3c 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\n\n@@ -35,7 +36,9 @@ public class OpenIdConnectAuthenticateResponse extends ActionResponse {\n         accessTokenString = in.readString();\n         refreshTokenString = in.readString();\n         expiresIn = in.readTimeValue();\n-        authentication = null;\n+        if (in.getVersion().onOrAfter(Version.V_7_10_0)) {\n+            authentication = new Authentication(in);\n+        }\n     }\n \n     public String getPrincipal() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzgxMw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490687813", "bodyText": "Similarly, serialisation should handle the new authentication field as well plus version check.", "author": "ywangd", "createdAt": "2020-09-18T03:56:19Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -49,6 +54,8 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {", "originalCommit": "346695a05aa04f439f41ecf25e5d3a20e29ade39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MTE3NA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498961174", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-02T17:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "a1f7c1f2f35ea14af7129ba11145ef1ab254cdbb", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\nindex 7e2569683a0..e2666edee3c 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\n\n@@ -62,5 +65,6 @@ public class OpenIdConnectAuthenticateResponse extends ActionResponse {\n         out.writeString(accessTokenString);\n         out.writeString(refreshTokenString);\n         out.writeTimeValue(expiresIn);\n+        authentication.writeTo(out);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4OTY3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490689671", "bodyText": "Same here, I think we could use a real authentication object instead of null.", "author": "ywangd", "createdAt": "2020-09-18T04:04:24Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -35,7 +35,7 @@ public void testSerialization() throws Exception {\n     @Override\n     protected DelegatePkiAuthenticationResponse createTestInstance() {\n         return new DelegatePkiAuthenticationResponse(randomAlphaOfLengthBetween(0, 10),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);", "originalCommit": "346695a05aa04f439f41ecf25e5d3a20e29ade39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDg0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498960843", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-02T17:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4OTY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1f7c1f2f35ea14af7129ba11145ef1ab254cdbb", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java\nindex de75c57d849..5ec13fa5d9b 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java\n\n@@ -35,16 +47,97 @@ public class DelegatePkiAuthenticationResponseTests extends AbstractXContentTest\n     @Override\n     protected DelegatePkiAuthenticationResponse createTestInstance() {\n         return new DelegatePkiAuthenticationResponse(randomAlphaOfLengthBetween(0, 10),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"),\n+                createAuthentication());\n     }\n \n     @Override\n     protected DelegatePkiAuthenticationResponse doParseInstance(XContentParser parser) throws IOException {\n-        return DelegatePkiAuthenticationResponse.PARSER.apply(parser, null);\n+        return DelegatePkiAuthenticationResponseTests.PARSER.apply(parser, null);\n     }\n \n     @Override\n     protected boolean supportsUnknownFields() {\n-        return true;\n+        return false;\n+    }\n+\n+    private static final ParseField ACCESS_TOKEN_FIELD = new ParseField(\"access_token\");\n+    private static final ParseField TYPE_FIELD = new ParseField(\"type\");\n+    private static final ParseField EXPIRES_IN_FIELD = new ParseField(\"expires_in\");\n+    private static final ParseField AUTHENTICATION = new ParseField(\"authentication\");\n+\n+    public static final ConstructingObjectParser<DelegatePkiAuthenticationResponse, Void> PARSER = new ConstructingObjectParser<>(\n+        \"delegate_pki_response\", true, a -> {\n+        final String accessToken = (String) a[0];\n+        final String type = (String) a[1];\n+        if (false == \"Bearer\".equals(type)) {\n+            throw new IllegalArgumentException(\"Unknown token type [\" + type + \"], only [Bearer] type permitted\");\n+        }\n+        final Long expiresIn = (Long) a[2];\n+        final Authentication authentication = (Authentication) a[3];\n+\n+        return new DelegatePkiAuthenticationResponse(accessToken, TimeValue.timeValueSeconds(expiresIn), authentication);\n+    });\n+\n+    static {\n+        PARSER.declareString(ConstructingObjectParser.constructorArg(), ACCESS_TOKEN_FIELD);\n+        PARSER.declareString(ConstructingObjectParser.constructorArg(), TYPE_FIELD);\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), EXPIRES_IN_FIELD);\n+        PARSER.declareObject(optionalConstructorArg(), (p, c) -> parseAuthentication(p), AUTHENTICATION);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<Authentication, Void> AuthPARSER = new ConstructingObjectParser<>(\n+        \"authentication\", true,\n+        a -> new Authentication(new User((String) a[0], ((ArrayList<String>) a[1]).toArray(new String[0]), (String) a[2], (String) a[3],\n+            (Map<String, Object>) a[4], (boolean) a[5]), (Authentication.RealmRef) a[6], (Authentication.RealmRef) a[7], Version.CURRENT,\n+            Authentication.AuthenticationType.valueOf(a[8].toString().toUpperCase(Locale.ROOT)), (Map<String, Object>) a[4]));\n+    static {\n+        final ConstructingObjectParser<Authentication.RealmRef, Void> realmInfoParser = new ConstructingObjectParser<>(\"realm_info\", true,\n+            a -> new Authentication.RealmRef((String) a[0], (String) a[1], \"node_name\"));\n+        realmInfoParser.declareString(ConstructingObjectParser.constructorArg(), User.Fields.REALM_NAME);\n+        realmInfoParser.declareString(ConstructingObjectParser.constructorArg(), User.Fields.REALM_TYPE);\n+        AuthPARSER.declareString(ConstructingObjectParser.constructorArg(), User.Fields.USERNAME);\n+        AuthPARSER.declareStringArray(ConstructingObjectParser.constructorArg(), User.Fields.ROLES);\n+        AuthPARSER.declareStringOrNull(ConstructingObjectParser.optionalConstructorArg(), User.Fields.FULL_NAME);\n+        AuthPARSER.declareStringOrNull(ConstructingObjectParser.optionalConstructorArg(), User.Fields.EMAIL);\n+        AuthPARSER.declareObject(ConstructingObjectParser.constructorArg(), (parser, c) -> parser.map(), User.Fields.METADATA);\n+        AuthPARSER.declareBoolean(ConstructingObjectParser.constructorArg(), User.Fields.ENABLED);\n+        AuthPARSER.declareObject(ConstructingObjectParser.constructorArg(), realmInfoParser, User.Fields.AUTHENTICATION_REALM);\n+        AuthPARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), realmInfoParser, User.Fields.LOOKUP_REALM);\n+        AuthPARSER.declareString(ConstructingObjectParser.constructorArg(), User.Fields.AUTHENTICATION_TYPE);\n+    }\n+\n+    public static Authentication parseAuthentication(final XContentParser parser) throws IOException {\n+        return AuthPARSER.apply(parser, null);\n+    }\n+\n+    public static Authentication createAuthentication() {\n+        final String username = randomAlphaOfLengthBetween(1, 4);\n+        final String[] roles = generateRandomStringArray(4, 4, false, true);\n+        final Map<String, Object> metadata;\n+        metadata = new HashMap<>();\n+        if (randomBoolean()) {\n+            metadata.put(\"string\", null);\n+        } else {\n+            metadata.put(\"string\", randomAlphaOfLengthBetween(0, 4));\n+        }\n+        if (randomBoolean()) {\n+            metadata.put(\"string_list\", null);\n+        } else {\n+            metadata.put(\"string_list\", Arrays.asList(generateRandomStringArray(4, 4, false, true)));\n+        }\n+        final String fullName = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n+        final String email = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n+        final String authenticationRealmName = randomAlphaOfLength(5);\n+        final String authenticationRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n+        final String lookupRealmName = randomAlphaOfLength(5);\n+        final String lookupRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n+        final String nodeName = \"node_name\";\n+        final Authentication.AuthenticationType authenticationType = randomFrom(Authentication.AuthenticationType.values());\n+        return new Authentication(\n+            new User(username, roles, fullName, email, metadata, true),\n+            new Authentication.RealmRef(authenticationRealmName, authenticationRealmType, nodeName),\n+            new Authentication.RealmRef(lookupRealmName, lookupRealmType, nodeName), Version.CURRENT, authenticationType, metadata);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NTY2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r490695661", "bodyText": "Similar to TransportCreateTokenAction#createToken, there are two authentication involved. One is used to authenticate the request and the other is the one being refreshed. securityContext#getAuthentication is used for the first one, which is not what we want to return in the response.\nThe authentication that should be in the response is the one that gets refreshed. It is not directly available here, but can be derived from the access token (tuple.v1()).  TokenService#authenticateToken can take the access token and decode it for the authentication object.", "author": "ywangd", "createdAt": "2020-09-18T04:30:24Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java", "diffHunk": "@@ -21,19 +22,23 @@\n public class TransportRefreshTokenAction extends HandledTransportAction<CreateTokenRequest, CreateTokenResponse> {\n \n     private final TokenService tokenService;\n+    private final SecurityContext securityContext;\n \n     @Inject\n-    public TransportRefreshTokenAction(TransportService transportService, ActionFilters actionFilters, TokenService tokenService) {\n+    public TransportRefreshTokenAction(TransportService transportService, ActionFilters actionFilters, TokenService tokenService,\n+                                       SecurityContext securityContext) {\n         super(RefreshTokenAction.NAME, transportService, actionFilters, CreateTokenRequest::new);\n         this.tokenService = tokenService;\n+        this.securityContext = securityContext;\n     }\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n         tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n             final String scope = getResponseScopeValue(request.getScope());\n             final CreateTokenResponse response =\n-                    new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null);\n+                    new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n+                        securityContext.getAuthentication());", "originalCommit": "346695a05aa04f439f41ecf25e5d3a20e29ade39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDkzNg==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r498960936", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-02T17:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NTY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a1f7c1f2f35ea14af7129ba11145ef1ab254cdbb", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java\nindex 294c919ae62..da7c31a3fc8 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportRefreshTokenAction.java\n\n@@ -22,24 +22,22 @@ import static org.elasticsearch.xpack.security.action.token.TransportCreateToken\n public class TransportRefreshTokenAction extends HandledTransportAction<CreateTokenRequest, CreateTokenResponse> {\n \n     private final TokenService tokenService;\n-    private final SecurityContext securityContext;\n \n     @Inject\n-    public TransportRefreshTokenAction(TransportService transportService, ActionFilters actionFilters, TokenService tokenService,\n-                                       SecurityContext securityContext) {\n+    public TransportRefreshTokenAction(TransportService transportService, ActionFilters actionFilters, TokenService tokenService) {\n         super(RefreshTokenAction.NAME, transportService, actionFilters, CreateTokenRequest::new);\n         this.tokenService = tokenService;\n-        this.securityContext = securityContext;\n     }\n \n     @Override\n     protected void doExecute(Task task, CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {\n         tokenService.refreshToken(request.getRefreshToken(), ActionListener.wrap(tuple -> {\n             final String scope = getResponseScopeValue(request.getScope());\n-            final CreateTokenResponse response =\n-                    new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n-                        securityContext.getAuthentication());\n-            listener.onResponse(response);\n+            tokenService.authenticateToken(new SecureString(tuple.v1()), ActionListener.wrap(authentication -> {\n+                listener.onResponse(new CreateTokenResponse(tuple.v1(), tokenService.getExpirationDelay(), scope, tuple.v2(), null,\n+                    authentication));\n+            },\n+                listener::onFailure));\n         }, listener::onFailure));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NTIzNg==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499365236", "bodyText": "It's minor, but I think it reads better to replace these arbitrary strings with randomAlphaOfLength(...).", "author": "ywangd", "createdAt": "2020-10-05T06:19:14Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/CreateTokenResponseTests.java", "diffHunk": "@@ -38,6 +40,9 @@ public void testFromXContent() throws IOException {\n         final String scope = randomBoolean() ? null : randomAlphaOfLength(4);\n         final String type = randomAlphaOfLength(6);\n         final String kerberosAuthenticationResponseToken = randomBoolean() ? null : randomAlphaOfLength(7);\n+        final AuthenticateResponse authenticateResponse = new AuthenticateResponse(new User(\"abcdefg\", Arrays.asList( \"kdjklsd\" )),\n+            true, new AuthenticateResponse.RealmInfo(\"abcd\", \"ghjk\" ), new AuthenticateResponse.RealmInfo(\"xfhfhgc\", \"sgdhfhg\" ),\n+            \"realm\");", "originalCommit": "49d056fe68ed29418150fe8c2a7f3d39c78024d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMjk2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503102961", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-12T07:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NTIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "a91757063e07463feaf9de64e735d75e742be878", "chunk": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/CreateTokenResponseTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/CreateTokenResponseTests.java\nindex 092e79129c0..34a03647f60 100644\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/CreateTokenResponseTests.java\n+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/CreateTokenResponseTests.java\n\n@@ -40,9 +38,6 @@ public class CreateTokenResponseTests extends ESTestCase {\n         final String scope = randomBoolean() ? null : randomAlphaOfLength(4);\n         final String type = randomAlphaOfLength(6);\n         final String kerberosAuthenticationResponseToken = randomBoolean() ? null : randomAlphaOfLength(7);\n-        final AuthenticateResponse authenticateResponse = new AuthenticateResponse(new User(\"abcdefg\", Arrays.asList( \"kdjklsd\" )),\n-            true, new AuthenticateResponse.RealmInfo(\"abcd\", \"ghjk\" ), new AuthenticateResponse.RealmInfo(\"xfhfhgc\", \"sgdhfhg\" ),\n-            \"realm\");\n \n         final XContentType xContentType = randomFrom(XContentType.values());\n         final XContentBuilder builder = XContentFactory.contentBuilder(xContentType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NjQ2MA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499366460", "bodyText": "Nit: method should begin with lowercase letter, i.e. createServerAuthenticationResponse(...).", "author": "ywangd", "createdAt": "2020-10-05T06:23:13Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -51,5 +59,52 @@ protected void assertInstances(org.elasticsearch.xpack.core.security.action.Dele\n         assertThat(serverTestInstance.getAccessToken(), is(clientInstance.getAccessToken()));\n         assertThat(serverTestInstance.getExpiresIn(), is(clientInstance.getExpiresIn()));\n         assertThat(clientInstance.getType(), is(\"Bearer\"));\n+        AuthenticateResponse serverAuthenticationResponse = CreateServerAuthenticationResponse(serverTestInstance.getAuthentication());\n+        User user = serverTestInstance.getAuthentication().getUser();\n+        assertThat(serverAuthenticationResponse, equalTo(clientInstance.getAuthenticationResponse()));\n+    }\n+\n+    protected Authentication createAuthentication() {\n+        final String username = randomAlphaOfLengthBetween(1, 4);\n+        final String[] roles = generateRandomStringArray(4, 4, false, true);\n+        final Map<String, Object> metadata;\n+        metadata = new HashMap<>();\n+        if (randomBoolean()) {\n+            metadata.put(\"string\", null);\n+        } else {\n+            metadata.put(\"string\", randomAlphaOfLengthBetween(0, 4));\n+        }\n+        if (randomBoolean()) {\n+            metadata.put(\"string_list\", null);\n+        } else {\n+            metadata.put(\"string_list\", Arrays.asList(generateRandomStringArray(4, 4, false, true)));\n+        }\n+        final String fullName = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n+        final String email = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n+        final boolean enabled = randomBoolean();\n+        final String authenticationRealmName = randomAlphaOfLength(5);\n+        final String authenticationRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n+        final String lookupRealmName = randomAlphaOfLength(5);\n+        final String lookupRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n+        final String nodeName = randomAlphaOfLengthBetween(1, 10);\n+        final Authentication.AuthenticationType authenticationType = randomFrom(Authentication.AuthenticationType.values());\n+        return new Authentication(\n+            new User(username, roles, fullName, email, metadata, true),\n+            new Authentication.RealmRef(authenticationRealmName, authenticationRealmType, nodeName),\n+            new Authentication.RealmRef(lookupRealmName, lookupRealmType, nodeName), Version.CURRENT, authenticationType, metadata);\n+    }\n+\n+    AuthenticateResponse CreateServerAuthenticationResponse(Authentication authentication){", "originalCommit": "49d056fe68ed29418150fe8c2a7f3d39c78024d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTM4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503275386", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-12T12:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM2NjQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "a91757063e07463feaf9de64e735d75e742be878", "chunk": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java\nindex f0bfe123046..d03c3f4a210 100644\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java\n+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DelegatePkiAuthenticationResponseTests.java\n\n@@ -59,52 +51,5 @@ public class DelegatePkiAuthenticationResponseTests extends\n         assertThat(serverTestInstance.getAccessToken(), is(clientInstance.getAccessToken()));\n         assertThat(serverTestInstance.getExpiresIn(), is(clientInstance.getExpiresIn()));\n         assertThat(clientInstance.getType(), is(\"Bearer\"));\n-        AuthenticateResponse serverAuthenticationResponse = CreateServerAuthenticationResponse(serverTestInstance.getAuthentication());\n-        User user = serverTestInstance.getAuthentication().getUser();\n-        assertThat(serverAuthenticationResponse, equalTo(clientInstance.getAuthenticationResponse()));\n-    }\n-\n-    protected Authentication createAuthentication() {\n-        final String username = randomAlphaOfLengthBetween(1, 4);\n-        final String[] roles = generateRandomStringArray(4, 4, false, true);\n-        final Map<String, Object> metadata;\n-        metadata = new HashMap<>();\n-        if (randomBoolean()) {\n-            metadata.put(\"string\", null);\n-        } else {\n-            metadata.put(\"string\", randomAlphaOfLengthBetween(0, 4));\n-        }\n-        if (randomBoolean()) {\n-            metadata.put(\"string_list\", null);\n-        } else {\n-            metadata.put(\"string_list\", Arrays.asList(generateRandomStringArray(4, 4, false, true)));\n-        }\n-        final String fullName = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n-        final String email = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n-        final boolean enabled = randomBoolean();\n-        final String authenticationRealmName = randomAlphaOfLength(5);\n-        final String authenticationRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n-        final String lookupRealmName = randomAlphaOfLength(5);\n-        final String lookupRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n-        final String nodeName = randomAlphaOfLengthBetween(1, 10);\n-        final Authentication.AuthenticationType authenticationType = randomFrom(Authentication.AuthenticationType.values());\n-        return new Authentication(\n-            new User(username, roles, fullName, email, metadata, true),\n-            new Authentication.RealmRef(authenticationRealmName, authenticationRealmType, nodeName),\n-            new Authentication.RealmRef(lookupRealmName, lookupRealmType, nodeName), Version.CURRENT, authenticationType, metadata);\n-    }\n-\n-    AuthenticateResponse CreateServerAuthenticationResponse(Authentication authentication){\n-        User user = authentication.getUser();\n-        org.elasticsearch.client.security.user.User cUser = new org.elasticsearch.client.security.user.User(user.principal(),\n-            Arrays.asList(user.roles()), user.metadata(), user.fullName(), user.email());\n-        AuthenticateResponse.RealmInfo authenticatedBy = new AuthenticateResponse.RealmInfo(authentication.getAuthenticatedBy().getName(),\n-            authentication.getAuthenticatedBy().getType());\n-        AuthenticateResponse.RealmInfo lookedUpBy = new AuthenticateResponse.RealmInfo(authentication.getLookedUpBy() == null?\n-            authentication.getAuthenticatedBy().getName(): authentication.getLookedUpBy().getName(),\n-            authentication.getLookedUpBy() == null?\n-                authentication.getAuthenticatedBy().getType(): authentication.getLookedUpBy().getType());\n-        return new AuthenticateResponse(cUser, user.enabled(), authenticatedBy, lookedUpBy,\n-            authentication.getAuthenticationType().toString().toLowerCase(Locale.ROOT));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4ODc4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499388781", "bodyText": "This needs to be guarded by version check as well, e.g.\nif (out.getVersion().onOrAfter(..) {\n}", "author": "ywangd", "createdAt": "2020-10-05T07:22:28Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/DelegatePkiAuthenticationResponse.java", "diffHunk": "@@ -69,10 +59,15 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() {\n+        return authentication;\n+    }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(accessToken);\n         out.writeTimeValue(expiresIn);\n+        authentication.writeTo(out);", "originalCommit": "49d056fe68ed29418150fe8c2a7f3d39c78024d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NTU1MA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503275550", "bodyText": "Fixed", "author": "BigPandaToo", "createdAt": "2020-10-12T12:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4ODc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a91757063e07463feaf9de64e735d75e742be878", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/DelegatePkiAuthenticationResponse.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/DelegatePkiAuthenticationResponse.java\nindex 6d53e5287f3..4fd2dabee2b 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/DelegatePkiAuthenticationResponse.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/DelegatePkiAuthenticationResponse.java\n\n@@ -59,15 +76,10 @@ public final class DelegatePkiAuthenticationResponse extends ActionResponse impl\n         return expiresIn;\n     }\n \n-    public Authentication getAuthentication() {\n-        return authentication;\n-    }\n-\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(accessToken);\n         out.writeTimeValue(expiresIn);\n-        authentication.writeTo(out);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4OTM2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499389363", "bodyText": "Needs version check here as well.", "author": "ywangd", "createdAt": "2020-10-05T07:23:40Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java", "diffHunk": "@@ -49,11 +57,14 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(principal);\n         out.writeString(accessTokenString);\n         out.writeString(refreshTokenString);\n         out.writeTimeValue(expiresIn);\n+        authentication.writeTo(out);", "originalCommit": "49d056fe68ed29418150fe8c2a7f3d39c78024d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMzY2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503103661", "bodyText": "Fixed", "author": "BigPandaToo", "createdAt": "2020-10-12T07:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4OTM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a91757063e07463feaf9de64e735d75e742be878", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\nindex e2666edee3c..7e2569683a0 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/oidc/OpenIdConnectAuthenticateResponse.java\n\n@@ -65,6 +62,5 @@ public class OpenIdConnectAuthenticateResponse extends ActionResponse {\n         out.writeString(accessTokenString);\n         out.writeString(refreshTokenString);\n         out.writeTimeValue(expiresIn);\n-        authentication.writeTo(out);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDExNw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499390117", "bodyText": "Need add the new authentication field here.", "author": "ywangd", "createdAt": "2020-10-05T07:25:10Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/saml/SamlAuthenticateResponse.java", "diffHunk": "@@ -64,6 +70,8 @@ public TimeValue getExpiresIn() {\n         return expiresIn;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(principal);", "originalCommit": "49d056fe68ed29418150fe8c2a7f3d39c78024d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NzA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503277078", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-12T12:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDExNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499390431", "bodyText": "Again, version check is needed here.", "author": "ywangd", "createdAt": "2020-10-05T07:25:47Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -68,13 +75,16 @@ public String getKerberosAuthenticationResponseToken() {\n         return kerberosAuthenticationResponseToken;\n     }\n \n+    public Authentication getAuthentication() { return authentication; }\n+\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(tokenString);\n         out.writeTimeValue(expiresIn);\n         out.writeOptionalString(scope);\n         out.writeOptionalString(refreshToken);\n         out.writeOptionalString(kerberosAuthenticationResponseToken);\n+        authentication.writeTo(out);", "originalCommit": "49d056fe68ed29418150fe8c2a7f3d39c78024d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwNDc3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503104773", "bodyText": "Fixed", "author": "BigPandaToo", "createdAt": "2020-10-12T07:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MDQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a91757063e07463feaf9de64e735d75e742be878", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java\nindex ba5083c6994..b8cca159d80 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java\n\n@@ -75,8 +71,6 @@ public final class CreateTokenResponse extends ActionResponse implements ToXCont\n         return kerberosAuthenticationResponseToken;\n     }\n \n-    public Authentication getAuthentication() { return authentication; }\n-\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(tokenString);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MTA3MA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499391070", "bodyText": "Nit: static variables normally use uppercase letters, e.g. AUTH_PARSER.", "author": "ywangd", "createdAt": "2020-10-05T07:27:03Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java", "diffHunk": "@@ -35,16 +47,97 @@ public void testSerialization() throws Exception {\n     @Override\n     protected DelegatePkiAuthenticationResponse createTestInstance() {\n         return new DelegatePkiAuthenticationResponse(randomAlphaOfLengthBetween(0, 10),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"));\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"),\n+                createAuthentication());\n     }\n \n     @Override\n     protected DelegatePkiAuthenticationResponse doParseInstance(XContentParser parser) throws IOException {\n-        return DelegatePkiAuthenticationResponse.PARSER.apply(parser, null);\n+        return DelegatePkiAuthenticationResponseTests.PARSER.apply(parser, null);\n     }\n \n     @Override\n     protected boolean supportsUnknownFields() {\n-        return true;\n+        return false;\n+    }\n+\n+    private static final ParseField ACCESS_TOKEN_FIELD = new ParseField(\"access_token\");\n+    private static final ParseField TYPE_FIELD = new ParseField(\"type\");\n+    private static final ParseField EXPIRES_IN_FIELD = new ParseField(\"expires_in\");\n+    private static final ParseField AUTHENTICATION = new ParseField(\"authentication\");\n+\n+    public static final ConstructingObjectParser<DelegatePkiAuthenticationResponse, Void> PARSER = new ConstructingObjectParser<>(\n+        \"delegate_pki_response\", true, a -> {\n+        final String accessToken = (String) a[0];\n+        final String type = (String) a[1];\n+        if (false == \"Bearer\".equals(type)) {\n+            throw new IllegalArgumentException(\"Unknown token type [\" + type + \"], only [Bearer] type permitted\");\n+        }\n+        final Long expiresIn = (Long) a[2];\n+        final Authentication authentication = (Authentication) a[3];\n+\n+        return new DelegatePkiAuthenticationResponse(accessToken, TimeValue.timeValueSeconds(expiresIn), authentication);\n+    });\n+\n+    static {\n+        PARSER.declareString(ConstructingObjectParser.constructorArg(), ACCESS_TOKEN_FIELD);\n+        PARSER.declareString(ConstructingObjectParser.constructorArg(), TYPE_FIELD);\n+        PARSER.declareLong(ConstructingObjectParser.constructorArg(), EXPIRES_IN_FIELD);\n+        PARSER.declareObject(optionalConstructorArg(), (p, c) -> parseAuthentication(p), AUTHENTICATION);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<Authentication, Void> AuthPARSER = new ConstructingObjectParser<>(", "originalCommit": "49d056fe68ed29418150fe8c2a7f3d39c78024d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NzIxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503277211", "bodyText": "Done", "author": "BigPandaToo", "createdAt": "2020-10-12T12:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MTA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "a91757063e07463feaf9de64e735d75e742be878", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java\nindex 5ec13fa5d9b..de75c57d849 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/action/DelegatePkiAuthenticationResponseTests.java\n\n@@ -47,97 +35,16 @@ public class DelegatePkiAuthenticationResponseTests extends AbstractXContentTest\n     @Override\n     protected DelegatePkiAuthenticationResponse createTestInstance() {\n         return new DelegatePkiAuthenticationResponse(randomAlphaOfLengthBetween(0, 10),\n-                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"),\n-                createAuthentication());\n+                TimeValue.parseTimeValue(randomTimeValue(), getClass().getSimpleName() + \".expiresIn\"), null);\n     }\n \n     @Override\n     protected DelegatePkiAuthenticationResponse doParseInstance(XContentParser parser) throws IOException {\n-        return DelegatePkiAuthenticationResponseTests.PARSER.apply(parser, null);\n+        return DelegatePkiAuthenticationResponse.PARSER.apply(parser, null);\n     }\n \n     @Override\n     protected boolean supportsUnknownFields() {\n-        return false;\n-    }\n-\n-    private static final ParseField ACCESS_TOKEN_FIELD = new ParseField(\"access_token\");\n-    private static final ParseField TYPE_FIELD = new ParseField(\"type\");\n-    private static final ParseField EXPIRES_IN_FIELD = new ParseField(\"expires_in\");\n-    private static final ParseField AUTHENTICATION = new ParseField(\"authentication\");\n-\n-    public static final ConstructingObjectParser<DelegatePkiAuthenticationResponse, Void> PARSER = new ConstructingObjectParser<>(\n-        \"delegate_pki_response\", true, a -> {\n-        final String accessToken = (String) a[0];\n-        final String type = (String) a[1];\n-        if (false == \"Bearer\".equals(type)) {\n-            throw new IllegalArgumentException(\"Unknown token type [\" + type + \"], only [Bearer] type permitted\");\n-        }\n-        final Long expiresIn = (Long) a[2];\n-        final Authentication authentication = (Authentication) a[3];\n-\n-        return new DelegatePkiAuthenticationResponse(accessToken, TimeValue.timeValueSeconds(expiresIn), authentication);\n-    });\n-\n-    static {\n-        PARSER.declareString(ConstructingObjectParser.constructorArg(), ACCESS_TOKEN_FIELD);\n-        PARSER.declareString(ConstructingObjectParser.constructorArg(), TYPE_FIELD);\n-        PARSER.declareLong(ConstructingObjectParser.constructorArg(), EXPIRES_IN_FIELD);\n-        PARSER.declareObject(optionalConstructorArg(), (p, c) -> parseAuthentication(p), AUTHENTICATION);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private static final ConstructingObjectParser<Authentication, Void> AuthPARSER = new ConstructingObjectParser<>(\n-        \"authentication\", true,\n-        a -> new Authentication(new User((String) a[0], ((ArrayList<String>) a[1]).toArray(new String[0]), (String) a[2], (String) a[3],\n-            (Map<String, Object>) a[4], (boolean) a[5]), (Authentication.RealmRef) a[6], (Authentication.RealmRef) a[7], Version.CURRENT,\n-            Authentication.AuthenticationType.valueOf(a[8].toString().toUpperCase(Locale.ROOT)), (Map<String, Object>) a[4]));\n-    static {\n-        final ConstructingObjectParser<Authentication.RealmRef, Void> realmInfoParser = new ConstructingObjectParser<>(\"realm_info\", true,\n-            a -> new Authentication.RealmRef((String) a[0], (String) a[1], \"node_name\"));\n-        realmInfoParser.declareString(ConstructingObjectParser.constructorArg(), User.Fields.REALM_NAME);\n-        realmInfoParser.declareString(ConstructingObjectParser.constructorArg(), User.Fields.REALM_TYPE);\n-        AuthPARSER.declareString(ConstructingObjectParser.constructorArg(), User.Fields.USERNAME);\n-        AuthPARSER.declareStringArray(ConstructingObjectParser.constructorArg(), User.Fields.ROLES);\n-        AuthPARSER.declareStringOrNull(ConstructingObjectParser.optionalConstructorArg(), User.Fields.FULL_NAME);\n-        AuthPARSER.declareStringOrNull(ConstructingObjectParser.optionalConstructorArg(), User.Fields.EMAIL);\n-        AuthPARSER.declareObject(ConstructingObjectParser.constructorArg(), (parser, c) -> parser.map(), User.Fields.METADATA);\n-        AuthPARSER.declareBoolean(ConstructingObjectParser.constructorArg(), User.Fields.ENABLED);\n-        AuthPARSER.declareObject(ConstructingObjectParser.constructorArg(), realmInfoParser, User.Fields.AUTHENTICATION_REALM);\n-        AuthPARSER.declareObject(ConstructingObjectParser.optionalConstructorArg(), realmInfoParser, User.Fields.LOOKUP_REALM);\n-        AuthPARSER.declareString(ConstructingObjectParser.constructorArg(), User.Fields.AUTHENTICATION_TYPE);\n-    }\n-\n-    public static Authentication parseAuthentication(final XContentParser parser) throws IOException {\n-        return AuthPARSER.apply(parser, null);\n-    }\n-\n-    public static Authentication createAuthentication() {\n-        final String username = randomAlphaOfLengthBetween(1, 4);\n-        final String[] roles = generateRandomStringArray(4, 4, false, true);\n-        final Map<String, Object> metadata;\n-        metadata = new HashMap<>();\n-        if (randomBoolean()) {\n-            metadata.put(\"string\", null);\n-        } else {\n-            metadata.put(\"string\", randomAlphaOfLengthBetween(0, 4));\n-        }\n-        if (randomBoolean()) {\n-            metadata.put(\"string_list\", null);\n-        } else {\n-            metadata.put(\"string_list\", Arrays.asList(generateRandomStringArray(4, 4, false, true)));\n-        }\n-        final String fullName = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n-        final String email = randomFrom(random(), null, randomAlphaOfLengthBetween(0, 4));\n-        final String authenticationRealmName = randomAlphaOfLength(5);\n-        final String authenticationRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n-        final String lookupRealmName = randomAlphaOfLength(5);\n-        final String lookupRealmType = randomFrom(\"file\", \"native\", \"ldap\", \"active_directory\", \"saml\", \"kerberos\");\n-        final String nodeName = \"node_name\";\n-        final Authentication.AuthenticationType authenticationType = randomFrom(Authentication.AuthenticationType.values());\n-        return new Authentication(\n-            new User(username, roles, fullName, email, metadata, true),\n-            new Authentication.RealmRef(authenticationRealmName, authenticationRealmType, nodeName),\n-            new Authentication.RealmRef(lookupRealmName, lookupRealmType, nodeName), Version.CURRENT, authenticationType, metadata);\n+        return true;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MjIyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r499392229", "bodyText": "Along the same logic of existing code, I think we need test the map hasEntry for authentication as well.", "author": "ywangd", "createdAt": "2020-10-05T07:29:31Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenActionTests.java", "diffHunk": "@@ -85,7 +89,7 @@ public void sendResponse(RestResponse restResponse) {\n         assertThat(map, hasEntry(\"expires_in\", Math.toIntExact(createTokenResponse.getExpiresIn().seconds())));\n         assertThat(map, hasEntry(\"refresh_token\", createTokenResponse.getRefreshToken()));\n         assertThat(map, hasEntry(\"kerberos_authentication_response_token\", createTokenResponse.getKerberosAuthenticationResponseToken()));\n-        assertEquals(5, map.size());\n+        assertEquals(6, map.size());", "originalCommit": "49d056fe68ed29418150fe8c2a7f3d39c78024d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwODEyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503108121", "bodyText": "I added a simplified testing here. Note that authentication is an object and response representation of it is structurally not exactly the same (user fields are flattened for instance). We can add validation for each field, but I am not sure it is really necessary. I verify the authentication is there and the user name is the same. Let me know if you think I need to add all fields verification though.", "author": "BigPandaToo", "createdAt": "2020-10-12T08:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5MjIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a91757063e07463feaf9de64e735d75e742be878", "chunk": "diff --git a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenActionTests.java b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenActionTests.java\nindex dcd90f0a6d6..dfb029b2134 100644\n--- a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenActionTests.java\n+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenActionTests.java\n\n@@ -89,7 +85,7 @@ public class RestGetTokenActionTests extends ESTestCase {\n         assertThat(map, hasEntry(\"expires_in\", Math.toIntExact(createTokenResponse.getExpiresIn().seconds())));\n         assertThat(map, hasEntry(\"refresh_token\", createTokenResponse.getRefreshToken()));\n         assertThat(map, hasEntry(\"kerberos_authentication_response_token\", createTokenResponse.getKerberosAuthenticationResponseToken()));\n-        assertEquals(6, map.size());\n+        assertEquals(5, map.size());\n     }\n \n     public void testSendResponseKerberosError() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r503641379", "bodyText": "I think we need a null check here to not show the field at all if the value is null. As far as I understand it, this is the general preference (see other fields in this method). This comment applies to other places where xcontent is built with authentication field.", "author": "ywangd", "createdAt": "2020-10-13T03:09:33Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java", "diffHunk": "@@ -93,6 +105,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (kerberosAuthenticationResponseToken != null) {\n             builder.field(\"kerberos_authentication_response_token\", kerberosAuthenticationResponseToken);\n         }\n+        builder.field(\"authentication\", authentication);", "originalCommit": "cfa68225e2bf1e0733ecf95cb9f0f4b9824eac69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgyNDk0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r504824946", "bodyText": "I understand that \"scope\" and \"kerberos_authentication_response_token\" may not be null depending on the type of token we create, but authentication object should always exist (if we succeed), see \"access_token\" and \"expires_in\" fields in the method.", "author": "BigPandaToo", "createdAt": "2020-10-14T16:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwNDE4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505104183", "bodyText": "It can be null if the object is deserialised from bytes created prior to v7.11. We have the null check for it in both CreateTokenResponse(StreamInput in) and CreateTokenResponse#writeTo, it makes sense to have it here as well.", "author": "ywangd", "createdAt": "2020-10-15T01:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIxNTU3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505215573", "bodyText": "Make sense", "author": "BigPandaToo", "createdAt": "2020-10-15T06:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1NTc4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505755782", "bodyText": "Done & done", "author": "BigPandaToo", "createdAt": "2020-10-15T18:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MTM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a91757063e07463feaf9de64e735d75e742be878", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java\nindex 202e8222c36..b8cca159d80 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/token/CreateTokenResponse.java\n\n@@ -105,7 +96,9 @@ public final class CreateTokenResponse extends ActionResponse implements ToXCont\n         if (kerberosAuthenticationResponseToken != null) {\n             builder.field(\"kerberos_authentication_response_token\", kerberosAuthenticationResponseToken);\n         }\n-        builder.field(\"authentication\", authentication);\n+        if (authentication != null) {\n+            builder.field(\"authentication\", authentication);\n+        }\n         return builder.endObject();\n     }\n \n"}}, {"oid": "a91757063e07463feaf9de64e735d75e742be878", "url": "https://github.com/elastic/elasticsearch/commit/a91757063e07463feaf9de64e735d75e742be878", "message": "Adding authentication information to access token create APIs\n\nAdding authentication object to following APIs:\n/_security/oauth2/token\n/_security/delegate_pki\n/_security/saml/authenticate\n/_security/oidc/authenticate\n\nResolves: #59685\n(cherry picked from commit 51dbd9e584813dcb82f9c28cfff8a1a9f4af846c)", "committedDate": "2020-10-14T16:18:34Z", "type": "commit"}, {"oid": "a1f7c1f2f35ea14af7129ba11145ef1ab254cdbb", "url": "https://github.com/elastic/elasticsearch/commit/a1f7c1f2f35ea14af7129ba11145ef1ab254cdbb", "message": "Addressing PR commends, fixing tests", "committedDate": "2020-10-14T16:18:35Z", "type": "commit"}, {"oid": "0966f92b848f73308e7f054476085948816a2ee4", "url": "https://github.com/elastic/elasticsearch/commit/0966f92b848f73308e7f054476085948816a2ee4", "message": "Returning tokenGroups attribute as SID string instead of byte array (AD metadata)\n\nAddressing PR comments", "committedDate": "2020-10-14T16:18:36Z", "type": "commit"}, {"oid": "bbcb68b41c08f5176a1b11ea9258d637767e648d", "url": "https://github.com/elastic/elasticsearch/commit/bbcb68b41c08f5176a1b11ea9258d637767e648d", "message": "Returning tokenGroups attribute as SID string instead of byte array (AD metadata)\n\nUpdate version check", "committedDate": "2020-10-14T16:18:36Z", "type": "commit"}, {"oid": "eba3272191ca8f0b9370753c31cabadcc71a93ec", "url": "https://github.com/elastic/elasticsearch/commit/eba3272191ca8f0b9370753c31cabadcc71a93ec", "message": "Returning tokenGroups attribute as SID string instead of byte array (AD metadata)\n\nUpdate version check", "committedDate": "2020-10-14T16:18:37Z", "type": "commit"}, {"oid": "58a8c7be565350867d728565ece5cbfb16c07efe", "url": "https://github.com/elastic/elasticsearch/commit/58a8c7be565350867d728565ece5cbfb16c07efe", "message": "Addressing more PR comments", "committedDate": "2020-10-14T16:48:59Z", "type": "commit"}, {"oid": "58a8c7be565350867d728565ece5cbfb16c07efe", "url": "https://github.com/elastic/elasticsearch/commit/58a8c7be565350867d728565ece5cbfb16c07efe", "message": "Addressing more PR comments", "committedDate": "2020-10-14T16:48:59Z", "type": "forcePushed"}, {"oid": "49fbded29957b7cfa8c1b738289f6b28c058af5d", "url": "https://github.com/elastic/elasticsearch/commit/49fbded29957b7cfa8c1b738289f6b28c058af5d", "message": "Adding more to integration tests + some small fixes", "committedDate": "2020-10-15T17:03:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMjE4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505922183", "bodyText": "There are some inconsistency for this variable name:\n\nIn the client side code, it is named authenticationResponse and getAuthenticationResponse\nIn the corresponding server side code, it is just authentication .\nIn this class, the parser field is defined as authentication, i.e. new ParseField(\"authentication\").\nIn the HLRC documentation, e.g. create-token.asciidoc, it is also named just authentication\n\nI think we could stick to just authentication. This comment applies to the client side DelegatePkiAuthenticationResponse as well.", "author": "ywangd", "createdAt": "2020-10-15T23:34:33Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/security/CreateTokenResponse.java", "diffHunk": "@@ -42,15 +42,17 @@\n     private final String scope;\n     private final String refreshToken;\n     private final String kerberosAuthenticationResponseToken;\n+    private final AuthenticateResponse authenticationResponse;\n \n     public CreateTokenResponse(String accessToken, String type, TimeValue expiresIn, String scope, String refreshToken,\n-                               String kerberosAuthenticationResponseToken) {\n+                               String kerberosAuthenticationResponseToken, AuthenticateResponse authenticationResponse) {\n         this.accessToken = accessToken;\n         this.type = type;\n         this.expiresIn = expiresIn;\n         this.scope = scope;\n         this.refreshToken = refreshToken;\n         this.kerberosAuthenticationResponseToken = kerberosAuthenticationResponseToken;\n+        this.authenticationResponse = authenticationResponse;", "originalCommit": "49fbded29957b7cfa8c1b738289f6b28c058af5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3Mjg3NA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r506372874", "bodyText": "Addressed in #63792", "author": "BigPandaToo", "createdAt": "2020-10-16T12:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyMjE4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzMzY1NA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505933654", "bodyText": "Nit: I think this assertion is better to be close to where the response object is defined, i.e. straight after CreateTokenResponse response = restClient.... It reads better this way since the test is close to the target. Also, in case it fails, it fails quickly before having to go through the token decrpytion which involves cluster traffic.", "author": "ywangd", "createdAt": "2020-10-16T00:15:53Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/authc/TokenAuthIntegTests.java", "diffHunk": "@@ -104,6 +104,7 @@ public void testTokenServiceBootstrapOnNodeJoin() throws Exception {\n         PlainActionFuture<UserToken> userTokenFuture = new PlainActionFuture<>();\n         tokenService.decodeToken(response.getAccessToken(), userTokenFuture);\n         assertNotNull(userTokenFuture.actionGet());\n+        assertNotNull(response.getAuthenticationResponse());", "originalCommit": "49fbded29957b7cfa8c1b738289f6b28c058af5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzNDUwNA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505934504", "bodyText": "We should assert the authentication object's principal name as well. This is because the token creation call involves two credentials, one is the invoking user and the other is the user whom the token is created for. We can assert that the authentication's principal is the second user, not the first one.", "author": "ywangd", "createdAt": "2020-10-16T00:19:21Z", "path": "x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/authc/TokenAuthIntegTests.java", "diffHunk": "@@ -133,6 +134,7 @@ public void testTokenServiceCanRotateKeys() throws Exception {\n             assertNotNull(userTokenFuture.actionGet());\n             assertNotEquals(activeKeyHash, tokenService.getActiveKeyHash());\n         }\n+        assertNotNull(response.getAuthenticationResponse());", "originalCommit": "49fbded29957b7cfa8c1b738289f6b28c058af5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzOTM4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505939385", "bodyText": "I wonder whether we should have null check here as well similar to how it is done in the toXContent, writeTo methods. It may not be absolutely necessary since this is a rest action and odic cannot be perform with transport client only. But then I am not sure whether there could be some weird combination that could lead to a null value here. Overall I'd say it is easier to just add a null check here so we are sure it is covered in any cases.", "author": "ywangd", "createdAt": "2020-10-16T00:35:55Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/oidc/RestOpenIdConnectAuthenticateAction.java", "diffHunk": "@@ -63,12 +63,13 @@ protected RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClien\n                     @Override\n                     public RestResponse buildResponse(OpenIdConnectAuthenticateResponse response, XContentBuilder builder)\n                         throws Exception {\n-                        builder.startObject()\n-                            .field(\"username\", response.getPrincipal())\n-                            .field(\"access_token\", response.getAccessTokenString())\n-                            .field(\"refresh_token\", response.getRefreshTokenString())\n-                            .field(\"expires_in\", response.getExpiresIn().seconds())\n-                            .endObject();\n+                        builder.startObject();\n+                        builder.field(\"username\", response.getPrincipal());\n+                        builder.field(\"access_token\", response.getAccessTokenString());\n+                        builder.field(\"refresh_token\", response.getRefreshTokenString());\n+                        builder.field(\"expires_in\", response.getExpiresIn().seconds());\n+                        builder.field(\"authentication\", response.getAuthentication());", "originalCommit": "49fbded29957b7cfa8c1b738289f6b28c058af5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzOTQ2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r505939469", "bodyText": "Same here as above.", "author": "ywangd", "createdAt": "2020-10-16T00:36:05Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/saml/RestSamlAuthenticateAction.java", "diffHunk": "@@ -95,13 +95,14 @@ public RestChannelConsumer innerPrepareRequest(RestRequest request, NodeClient c\n                 requestBuilder.execute(new RestBuilderListener<>(channel) {\n                     @Override\n                     public RestResponse buildResponse(SamlAuthenticateResponse response, XContentBuilder builder) throws Exception {\n-                        builder.startObject()\n-                                .field(\"username\", response.getPrincipal())\n-                                .field(\"realm\", response.getRealm())\n-                                .field(\"access_token\", response.getTokenString())\n-                                .field(\"refresh_token\", response.getRefreshToken())\n-                                .field(\"expires_in\", response.getExpiresIn().seconds())\n-                                .endObject();\n+                        builder.startObject();\n+                        builder.field(\"username\", response.getPrincipal());\n+                        builder.field(\"realm\", response.getRealm());\n+                        builder.field(\"access_token\", response.getTokenString());\n+                        builder.field(\"refresh_token\", response.getRefreshToken());\n+                        builder.field(\"expires_in\", response.getExpiresIn().seconds());\n+                        builder.field(\"authentication\", response.getAuthentication());", "originalCommit": "49fbded29957b7cfa8c1b738289f6b28c058af5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM3MzEyMA==", "url": "https://github.com/elastic/elasticsearch/pull/62490#discussion_r506373120", "bodyText": "Addressed in #63792", "author": "BigPandaToo", "createdAt": "2020-10-16T12:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzOTQ2OQ=="}], "type": "inlineReview", "revised_code": null}]}