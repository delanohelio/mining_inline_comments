{"pr_number": 65606, "pr_title": "Add search runtime_mappings to datafeed configuration", "pr_createdAt": "2020-11-30T13:49:11Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65606", "timeline": [{"oid": "2f982bd16092ff3e8e92778a5f917e30ecc5cfd5", "url": "https://github.com/elastic/elasticsearch/commit/2f982bd16092ff3e8e92778a5f917e30ecc5cfd5", "message": "Revert \"Add test for datafeed aggs\"\n\nThis reverts commit 9233485160f416a15187941f19912c7e58f2a105.", "committedDate": "2020-11-30T23:27:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0Mzk5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/65606#discussion_r533343996", "bodyText": "It might be better to say object instead of map in this error message, as the user reading the message is thinking of the JSON structure rather than the Java structure.", "author": "droberts195", "createdAt": "2020-12-01T11:39:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java", "diffHunk": "@@ -824,6 +853,28 @@ void validateScriptFields() {\n             }\n         }\n \n+        /**\n+         * Perform a light check that the structure resembles runtime_mappings.\n+         * The full check cannot happen until search\n+         */\n+        void validateRuntimeMappings() {\n+            for (Map.Entry<String, Object> entry : runtimeMappings.entrySet()) {\n+                // top level objects are fields\n+                String fieldName = entry.getKey();\n+                if (entry.getValue() instanceof Map) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Map<String, Object> propNode = new HashMap<>(((Map<String, Object>) entry.getValue()));\n+                    Object typeNode = propNode.get(\"type\");\n+                    if (typeNode == null) {\n+                        throw ExceptionsHelper.badRequestException(\"No type specified for runtime field [\" + fieldName + \"]\");\n+                    }\n+                } else {\n+                    throw ExceptionsHelper.badRequestException(\"Expected map for runtime field [\" + fieldName + \"] \" +", "originalCommit": "9333c1a56751a98b06f9d1a837b8a503a2f8cf9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxODQxNw==", "url": "https://github.com/elastic/elasticsearch/pull/65606#discussion_r533418417", "bodyText": "map is consistent with the language used here\n\n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/index/mapper/RuntimeFieldType.java\n    \n    \n         Line 91\n      in\n      af2f084\n    \n    \n    \n    \n\n        \n          \n           throw new MapperParsingException(\"Expected map for runtime field [\" + fieldName + \"] definition but got a \"", "author": "davidkyle", "createdAt": "2020-12-01T13:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0Mzk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwMzA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65606#discussion_r534003049", "bodyText": "It's still wrong - the word \"map\" does not appear anywhere in this page: https://www.json.org/json-en.html\nIt sounds like there is going to be a separate PR to correct this throughout the runtime fields code though, so all instances can be fixed in one go.", "author": "droberts195", "createdAt": "2020-12-02T09:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0Mzk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b98567d6a8b25087445b74a8b09fab7d127a185e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java\nindex b205e8c4af0..12dfca594c0 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedConfig.java\n\n@@ -858,19 +858,21 @@ public class DatafeedConfig extends AbstractDiffable<DatafeedConfig> implements\n          * The full check cannot happen until search\n          */\n         void validateRuntimeMappings() {\n-            for (Map.Entry<String, Object> entry : runtimeMappings.entrySet()) {\n-                // top level objects are fields\n-                String fieldName = entry.getKey();\n-                if (entry.getValue() instanceof Map) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    Map<String, Object> propNode = new HashMap<>(((Map<String, Object>) entry.getValue()));\n-                    Object typeNode = propNode.get(\"type\");\n-                    if (typeNode == null) {\n-                        throw ExceptionsHelper.badRequestException(\"No type specified for runtime field [\" + fieldName + \"]\");\n+            if (runtimeMappings != null && runtimeMappings.isEmpty() == false) {\n+                for (Map.Entry<String, Object> entry : runtimeMappings.entrySet()) {\n+                    // top level objects are fields\n+                    String fieldName = entry.getKey();\n+                    if (entry.getValue() instanceof Map) {\n+                        @SuppressWarnings(\"unchecked\")\n+                        Map<String, Object> propNode = new HashMap<>(((Map<String, Object>) entry.getValue()));\n+                        Object typeNode = propNode.get(\"type\");\n+                        if (typeNode == null) {\n+                            throw ExceptionsHelper.badRequestException(\"No type specified for runtime field [\" + fieldName + \"]\");\n+                        }\n+                    } else {\n+                        throw ExceptionsHelper.badRequestException(\"Expected map for runtime field [\" + fieldName + \"] \" +\n+                            \"definition but got a \" + fieldName.getClass().getSimpleName());\n                     }\n-                } else {\n-                    throw ExceptionsHelper.badRequestException(\"Expected map for runtime field [\" + fieldName + \"] \" +\n-                        \"definition but got a \" + fieldName.getClass().getSimpleName());\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0NTIzMw==", "url": "https://github.com/elastic/elasticsearch/pull/65606#discussion_r533345233", "bodyText": "I think there should be a comment to say this is only checking search-time runtime fields.", "author": "droberts195", "createdAt": "2020-12-01T11:41:37Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java", "diffHunk": "@@ -38,6 +40,8 @@ public static void validate(DatafeedConfig datafeedConfig, Job job, NamedXConten\n         if (delayedDataCheckConfig.isEnabled()) {\n             checkValidDelayedDataCheckConfig(bucketSpan, delayedDataCheckConfig);\n         }\n+\n+        checkTimeFieldIsNotARuntimeField(datafeedConfig, job.getDataDescription().getTimeField());", "originalCommit": "9333c1a56751a98b06f9d1a837b8a503a2f8cf9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f401278aa9f0b7d7f0cabbb5f7a3855a37b2998", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java\nindex f4bbca78270..7a2611c5286 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java\n\n@@ -41,7 +41,7 @@ public final class DatafeedJobValidator {\n             checkValidDelayedDataCheckConfig(bucketSpan, delayedDataCheckConfig);\n         }\n \n-        checkTimeFieldIsNotARuntimeField(datafeedConfig, job.getDataDescription().getTimeField());\n+        checkTimeFieldIsNotASearchRuntimeField(datafeedConfig, job.getDataDescription().getTimeField());\n     }\n \n     private static void checkValidDelayedDataCheckConfig(TimeValue bucketSpan, DelayedDataCheckConfig delayedDataCheckConfig) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0NTM0OA==", "url": "https://github.com/elastic/elasticsearch/pull/65606#discussion_r533345348", "bodyText": "I think there should be a comment to say this is only checking search-time runtime fields.", "author": "droberts195", "createdAt": "2020-12-01T11:41:48Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java", "diffHunk": "@@ -97,4 +101,16 @@ private static void checkFrequencyIsMultipleOfHistogramInterval(DatafeedConfig d\n             }\n         }\n     }\n+\n+    private static void checkTimeFieldIsNotARuntimeField(DatafeedConfig datafeedConfig, String timeField) {\n+        Map<String, Object> runtimeMappings = datafeedConfig.getRuntimeMappings();\n+        for (Map.Entry<String, Object> entry : runtimeMappings.entrySet()) {", "originalCommit": "9333c1a56751a98b06f9d1a837b8a503a2f8cf9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b98567d6a8b25087445b74a8b09fab7d127a185e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java\nindex f4bbca78270..5d90cc6251d 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/datafeed/DatafeedJobValidator.java\n\n@@ -104,12 +104,14 @@ public final class DatafeedJobValidator {\n \n     private static void checkTimeFieldIsNotARuntimeField(DatafeedConfig datafeedConfig, String timeField) {\n         Map<String, Object> runtimeMappings = datafeedConfig.getRuntimeMappings();\n-        for (Map.Entry<String, Object> entry : runtimeMappings.entrySet()) {\n-            // top level objects are fields\n-            String fieldName = entry.getKey();\n-            if (timeField.equals(fieldName)) {\n-                throw ExceptionsHelper.badRequestException(Messages.getMessage(\n-                    Messages.JOB_CONFIG_TIME_FIELD_CANNOT_BE_RUNTIME, timeField));\n+        if (runtimeMappings != null) {\n+            for (Map.Entry<String, Object> entry : runtimeMappings.entrySet()) {\n+                // top level objects are fields\n+                String fieldName = entry.getKey();\n+                if (timeField.equals(fieldName)) {\n+                    throw ExceptionsHelper.badRequestException(Messages.getMessage(\n+                        Messages.JOB_CONFIG_TIME_FIELD_CANNOT_BE_RUNTIME, timeField));\n+                }\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0NzIwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65606#discussion_r533347209", "bodyText": "SearchSourceBuilder.RUNTIME_MAPPINGS_FIELD.getPreferredName()?", "author": "droberts195", "createdAt": "2020-12-01T11:45:16Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/ElasticsearchMappingsTests.java", "diffHunk": "@@ -75,7 +75,8 @@\n             ElasticsearchMappings.NESTED,\n             ElasticsearchMappings.PROPERTIES,\n             ElasticsearchMappings.TYPE,\n-            ElasticsearchMappings.WHITESPACE\n+            ElasticsearchMappings.WHITESPACE,\n+            \"runtime_mappings\"", "originalCommit": "9333c1a56751a98b06f9d1a837b8a503a2f8cf9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b98567d6a8b25087445b74a8b09fab7d127a185e", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/ElasticsearchMappingsTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/ElasticsearchMappingsTests.java\nindex b0140d04cca..d079832d90c 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/ElasticsearchMappingsTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/persistence/ElasticsearchMappingsTests.java\n\n@@ -75,8 +75,7 @@ public class ElasticsearchMappingsTests extends ESTestCase {\n             ElasticsearchMappings.NESTED,\n             ElasticsearchMappings.PROPERTIES,\n             ElasticsearchMappings.TYPE,\n-            ElasticsearchMappings.WHITESPACE,\n-            \"runtime_mappings\"\n+            ElasticsearchMappings.WHITESPACE\n     );\n \n     private static List<String> INTERNAL_FIELDS = Arrays.asList(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0ODc2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65606#discussion_r533348761", "bodyText": "This shouldn't be necessary.  I thought we ignored the time format in the data description when using a datafeed.  If deleting this line makes the test fail then something unexpected is happening somewhere.", "author": "droberts195", "createdAt": "2020-12-01T11:48:14Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsIT.java", "diffHunk": "@@ -145,6 +152,68 @@ public void testLookbackOnlyDataStream() throws Exception {\n         waitUntilJobIsClosed(job.getId());\n     }\n \n+    public void testLookbackOnlyRuntimeMapping() throws Exception {\n+        client().admin().indices().prepareCreate(\"data-1\")\n+            .setMapping(\"time\", \"type=date\")\n+            .get();\n+        long numDocs = randomIntBetween(32, 2048);\n+        long now = System.currentTimeMillis();\n+        long oneWeekAgo = now - 604800000;\n+        long twoWeeksAgo = oneWeekAgo - 604800000;\n+        indexDocs(logger, \"data-1\", numDocs, twoWeeksAgo, oneWeekAgo);\n+\n+        DataDescription.Builder dataDescription = new DataDescription.Builder();\n+        dataDescription.setTimeFormat(\"yyyy-MM-dd HH:mm:ss\");", "originalCommit": "9333c1a56751a98b06f9d1a837b8a503a2f8cf9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b98567d6a8b25087445b74a8b09fab7d127a185e", "chunk": "diff --git a/x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsIT.java b/x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsIT.java\nindex 5f01deb3dd5..7fe9cced121 100644\n--- a/x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsIT.java\n+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/DatafeedJobsIT.java\n\n@@ -152,68 +145,6 @@ public class DatafeedJobsIT extends MlNativeAutodetectIntegTestCase {\n         waitUntilJobIsClosed(job.getId());\n     }\n \n-    public void testLookbackOnlyRuntimeMapping() throws Exception {\n-        client().admin().indices().prepareCreate(\"data-1\")\n-            .setMapping(\"time\", \"type=date\")\n-            .get();\n-        long numDocs = randomIntBetween(32, 2048);\n-        long now = System.currentTimeMillis();\n-        long oneWeekAgo = now - 604800000;\n-        long twoWeeksAgo = oneWeekAgo - 604800000;\n-        indexDocs(logger, \"data-1\", numDocs, twoWeeksAgo, oneWeekAgo);\n-\n-        DataDescription.Builder dataDescription = new DataDescription.Builder();\n-        dataDescription.setTimeFormat(\"yyyy-MM-dd HH:mm:ss\");\n-\n-        Detector.Builder d = new Detector.Builder(\"count\", null);\n-        // day_of_week is a runtime field.\n-        // count by day of week does not make much sense but is good enough for this test\n-        d.setByFieldName(\"day_of_week\");\n-        AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(Collections.singletonList(d.build()));\n-        analysisConfig.setBucketSpan(TimeValue.timeValueHours(1));\n-\n-        Job.Builder jobBuilder = new Job.Builder();\n-        jobBuilder.setId(\"lookback-job-with-rt-fields\");\n-        jobBuilder.setAnalysisConfig(analysisConfig);\n-        jobBuilder.setDataDescription(dataDescription);\n-\n-        registerJob(jobBuilder);\n-        putJob(jobBuilder);\n-        openJob(jobBuilder.getId());\n-        assertBusy(() -> assertEquals(getJobStats(jobBuilder.getId()).get(0).getState(), JobState.OPENED));\n-\n-        DatafeedConfig.Builder dfBuilder = new DatafeedConfig.Builder(jobBuilder.getId() + \"-datafeed\", jobBuilder.getId());\n-        dfBuilder.setQueryDelay(TimeValue.timeValueSeconds(1));\n-        dfBuilder.setFrequency(TimeValue.timeValueSeconds(1));\n-        dfBuilder.setIndices(Collections.singletonList(\"data-1\"));\n-\n-        Map<String, Object> properties = new HashMap<>();\n-        properties.put(\"type\", \"long\");\n-        properties.put(\"script\", \"emit(doc['time'].value.getDayOfWeekEnum().value)\");\n-        Map<String, Object> fields = new HashMap<>();\n-        fields.put(\"day_of_week\", properties);\n-        dfBuilder.setRuntimeMappings(fields);\n-\n-        DatafeedConfig datafeedConfig = dfBuilder.build();\n-\n-        registerDatafeed(datafeedConfig);\n-        putDatafeed(datafeedConfig);\n-\n-        startDatafeed(datafeedConfig.getId(), 0L, now);\n-        assertBusy(() -> {\n-            DataCounts dataCounts = getDataCounts(jobBuilder.getId());\n-            assertThat(dataCounts.getProcessedRecordCount(), equalTo(numDocs));\n-            assertThat(dataCounts.getOutOfOrderTimeStampCount(), equalTo(0L));\n-            assertThat(dataCounts.getMissingFieldCount(), equalTo(0L));\n-\n-            GetDatafeedsStatsAction.Request request = new GetDatafeedsStatsAction.Request(datafeedConfig.getId());\n-            GetDatafeedsStatsAction.Response response = client().execute(GetDatafeedsStatsAction.INSTANCE, request).actionGet();\n-            assertThat(response.getResponse().results().get(0).getDatafeedState(), equalTo(DatafeedState.STOPPED));\n-        }, 60, TimeUnit.SECONDS);\n-\n-        waitUntilJobIsClosed(jobBuilder.getId());\n-    }\n-\n     @AwaitsFix(bugUrl = \"https://github.com/elastic/elasticsearch/issues/63973\")\n     public void testDatafeedTimingStats_DatafeedRecreated() throws Exception {\n         client().admin().indices().prepareCreate(\"data\")\n"}}, {"oid": "b98567d6a8b25087445b74a8b09fab7d127a185e", "url": "https://github.com/elastic/elasticsearch/commit/b98567d6a8b25087445b74a8b09fab7d127a185e", "message": "Add runtime mappings to datafeed and extractors", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "9fa77f888071408926ab49437016d8dc89a044a5", "url": "https://github.com/elastic/elasticsearch/commit/9fa77f888071408926ab49437016d8dc89a044a5", "message": "Rollup search does not work with RT fields", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "2b879180edf8afdd3e72d66f029041735bfaf983", "url": "https://github.com/elastic/elasticsearch/commit/2b879180edf8afdd3e72d66f029041735bfaf983", "message": "Testing", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "a29ff35fd9a2c6173c6cc7472b1494873e6df6d8", "url": "https://github.com/elastic/elasticsearch/commit/a29ff35fd9a2c6173c6cc7472b1494873e6df6d8", "message": "don't request RT fields in field caps", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "1fd4b666441b5961180ba07b5b3073d030e21a45", "url": "https://github.com/elastic/elasticsearch/commit/1fd4b666441b5961180ba07b5b3073d030e21a45", "message": "Testing", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "a72baf9ec95c88adb7bafea8139109e5655a77e9", "url": "https://github.com/elastic/elasticsearch/commit/a72baf9ec95c88adb7bafea8139109e5655a77e9", "message": "Tidy up", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "b7c8cf7616b30d93529065d6be21956da0b6b816", "url": "https://github.com/elastic/elasticsearch/commit/b7c8cf7616b30d93529065d6be21956da0b6b816", "message": "Add test for datafeed aggs", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "ed78e23a9dfcf9f863cfe23ade0b88cac7e0c801", "url": "https://github.com/elastic/elasticsearch/commit/ed78e23a9dfcf9f863cfe23ade0b88cac7e0c801", "message": "Preview datafeed aggs test", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "fda46c5603f0e180789766de7bbe650ff327d306", "url": "https://github.com/elastic/elasticsearch/commit/fda46c5603f0e180789766de7bbe650ff327d306", "message": "Revert \"Add test for datafeed aggs\"\n\nThis reverts commit 9233485160f416a15187941f19912c7e58f2a105.", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "98f65ac4645231be714cd57ead050416126d5c9f", "url": "https://github.com/elastic/elasticsearch/commit/98f65ac4645231be714cd57ead050416126d5c9f", "message": "Fix up the yaml test", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "9f401278aa9f0b7d7f0cabbb5f7a3855a37b2998", "url": "https://github.com/elastic/elasticsearch/commit/9f401278aa9f0b7d7f0cabbb5f7a3855a37b2998", "message": "Nits", "committedDate": "2020-12-01T13:49:25Z", "type": "commit"}, {"oid": "9f401278aa9f0b7d7f0cabbb5f7a3855a37b2998", "url": "https://github.com/elastic/elasticsearch/commit/9f401278aa9f0b7d7f0cabbb5f7a3855a37b2998", "message": "Nits", "committedDate": "2020-12-01T13:49:25Z", "type": "forcePushed"}]}