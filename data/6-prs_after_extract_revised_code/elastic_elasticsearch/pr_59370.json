{"pr_number": 59370, "pr_title": "SQL: fix NPE on ambiguous GROUP BY", "pr_createdAt": "2020-07-11T12:44:09Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59370", "timeline": [{"oid": "1ac4aaf77ddc9c29956903190066f08ac729a8a0", "url": "https://github.com/elastic/elasticsearch/commit/1ac4aaf77ddc9c29956903190066f08ac729a8a0", "message": "#46396 fix npe on ambiguous group by", "committedDate": "2020-05-09T22:44:08Z", "type": "commit"}, {"oid": "250fee4a61bcf81c94b2abbda76ccbbd4dd93561", "url": "https://github.com/elastic/elasticsearch/commit/250fee4a61bcf81c94b2abbda76ccbbd4dd93561", "message": "#46396 add tests for aggregates and group by, add quotes to error message", "committedDate": "2020-05-11T13:21:49Z", "type": "commit"}, {"oid": "f7d87104563c69255b4575775215080c96a20082", "url": "https://github.com/elastic/elasticsearch/commit/f7d87104563c69255b4575775215080c96a20082", "message": "#46396 add more cases for Group By ambiguity test", "committedDate": "2020-05-12T04:49:17Z", "type": "commit"}, {"oid": "378e0875bc7fdf03ef5a22110c3e881ca143c19d", "url": "https://github.com/elastic/elasticsearch/commit/378e0875bc7fdf03ef5a22110c3e881ca143c19d", "message": "make test to pass", "committedDate": "2020-05-12T04:51:51Z", "type": "commit"}, {"oid": "ae8ea65539b44f0bdeef55f665d363179ea1afce", "url": "https://github.com/elastic/elasticsearch/commit/ae8ea65539b44f0bdeef55f665d363179ea1afce", "message": "change error messages for rield ambiguity", "committedDate": "2020-05-12T16:13:09Z", "type": "commit"}, {"oid": "99ecbed2029cdfe23644bef94f981be98a8bab69", "url": "https://github.com/elastic/elasticsearch/commit/99ecbed2029cdfe23644bef94f981be98a8bab69", "message": "Revert \"change error messages for rield ambiguity\"\n\nThis reverts commit ae8ea655", "committedDate": "2020-05-20T15:32:48Z", "type": "commit"}, {"oid": "cbe4c64f410eaba2c8e2822c9caf57410c866fae", "url": "https://github.com/elastic/elasticsearch/commit/cbe4c64f410eaba2c8e2822c9caf57410c866fae", "message": "change collection aliases aproach", "committedDate": "2020-05-20T16:45:06Z", "type": "commit"}, {"oid": "69afda9776f8316b6847bfc00d3332e8acb6df8e", "url": "https://github.com/elastic/elasticsearch/commit/69afda9776f8316b6847bfc00d3332e8acb6df8e", "message": "Merge branch 'master' into fix_npe_on_ambiguous_group_by", "committedDate": "2020-05-21T07:56:47Z", "type": "commit"}, {"oid": "f393faa13e5a10cf6cc38c38fb02cd6b7dd18bf8", "url": "https://github.com/elastic/elasticsearch/commit/f393faa13e5a10cf6cc38c38fb02cd6b7dd18bf8", "message": "add locations of attributes for ambiguous grouping error", "committedDate": "2020-05-21T18:59:13Z", "type": "commit"}, {"oid": "5c1419e5cff4ac5b941067b35c63edf668ca6b3e", "url": "https://github.com/elastic/elasticsearch/commit/5c1419e5cff4ac5b941067b35c63edf668ca6b3e", "message": "Merge branch 'fix_npe_on_ambiguous_group_by' of https://github.com/verkhovin/elasticsearch into fix_npe_on_ambiguous_group_by", "committedDate": "2020-05-21T19:00:20Z", "type": "commit"}, {"oid": "7cc778f9555194fbed1d61e56ae7a10b21c86d1b", "url": "https://github.com/elastic/elasticsearch/commit/7cc778f9555194fbed1d61e56ae7a10b21c86d1b", "message": "Merge commit 'refs/pull/56489/head' of github.com:elastic/elasticsearch into fix/fix_npe_on_ambiguous_group_by", "committedDate": "2020-07-09T09:51:10Z", "type": "commit"}, {"oid": "9492796b23504a2b2e4343e4ab7c886e1ed51c17", "url": "https://github.com/elastic/elasticsearch/commit/9492796b23504a2b2e4343e4ab7c886e1ed51c17", "message": "Adress review comments\n\n- remove Comparable implementations from Attribute and Location;\n- add ad-hoc comparator for sorting locations in ambiguity message;\n- remove added AttributeAlias class with Touple;\n- add code comment to explain issue with Location overwriting.", "committedDate": "2020-07-11T12:33:04Z", "type": "commit"}, {"oid": "0d425b9568b2a5b8895f23ac59855144967d727b", "url": "https://github.com/elastic/elasticsearch/commit/0d425b9568b2a5b8895f23ac59855144967d727b", "message": "Adress review comments\n\n- remove Comparable implementations from Attribute and Location;\n- add ad-hoc comparator for sorting locations in ambiguity message;\n- remove added AttributeAlias class with Touple;\n- add code comment to explain issue with Location overwriting.", "committedDate": "2020-07-11T14:57:53Z", "type": "commit"}, {"oid": "b479f6de03bf850a9329805d9584ef3387698e78", "url": "https://github.com/elastic/elasticsearch/commit/b479f6de03bf850a9329805d9584ef3387698e78", "message": "Fix c&p error in location ref generation comparator\n\nFix copy&paste error in dedicated comparator used for sorting ambiguity\nlocation references.\nSlightly increase its readability.", "committedDate": "2020-07-12T13:05:38Z", "type": "commit"}, {"oid": "06e80643cbaac564e1048437a5d622e950e6f2bb", "url": "https://github.com/elastic/elasticsearch/commit/06e80643cbaac564e1048437a5d622e950e6f2bb", "message": "Merge branch 'master' into fix/fix_npe_on_ambiguous_group_by", "committedDate": "2020-07-12T13:15:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4Njk0OA==", "url": "https://github.com/elastic/elasticsearch/pull/59370#discussion_r453486948", "bodyText": "Could you please replace this with a Tuple<Attribute, Expression>?\n\nAttributeAlias replaced with Tuple<Attribute, Expression>?", "author": "bpintea", "createdAt": "2020-07-13T08:40:21Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/Expressions.java", "diffHunk": "@@ -164,14 +163,15 @@ public static boolean equalsAsAttribute(Expression left, Expression right) {\n         return true;\n     }\n \n-    public static AttributeMap<Expression> aliases(List<? extends NamedExpression> named) {\n-        Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n+    public static List<Tuple<Attribute, Expression>> aliases(List<? extends NamedExpression> named) {", "originalCommit": "06e80643cbaac564e1048437a5d622e950e6f2bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4NzEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/59370#discussion_r453487108", "bodyText": "Why removing it from here and adding it only if matches.size() == 1?\n\nAttribute#withLocation() will \"overwrite\" any pre-existing location, which is not desirable if the existing locations need to be kept in order to be reported in an error message.", "author": "bpintea", "createdAt": "2020-07-13T08:40:32Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java", "diffHunk": "@@ -192,16 +192,21 @@ private static Attribute resolveAgainstList(UnresolvedAttribute u, Collection<At\n         }\n \n         if (matches.size() == 1) {\n-            return handleSpecialFields(u, matches.get(0), allowCompound);\n+            // only add the location if the match is univocal; b/c otherwise adding the location will overwrite any preexisting one\n+            return handleSpecialFields(u, matches.get(0).withLocation(u.source()), allowCompound);", "originalCommit": "06e80643cbaac564e1048437a5d622e950e6f2bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4NzE5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/59370#discussion_r453487195", "bodyText": "Please remove the comparison implementation from here and use a custom comparator to sort the ambiguous attributes.\n\nImplementations of Comparable removed.", "author": "bpintea", "createdAt": "2020-07-13T08:40:39Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java", "diffHunk": "@@ -192,16 +192,21 @@ private static Attribute resolveAgainstList(UnresolvedAttribute u, Collection<At\n         }\n \n         if (matches.size() == 1) {\n-            return handleSpecialFields(u, matches.get(0), allowCompound);\n+            // only add the location if the match is univocal; b/c otherwise adding the location will overwrite any preexisting one\n+            return handleSpecialFields(u, matches.get(0).withLocation(u.source()), allowCompound);\n         }\n \n-        return u.withUnresolvedMessage(\"Reference [\" + u.qualifiedName()\n-                + \"] is ambiguous (to disambiguate use quotes or qualifiers); matches any of \" +\n-                 matches.stream()\n-                 .map(a -> \"\\\"\" + a.qualifier() + \"\\\".\\\"\" + a.name() + \"\\\"\")\n-                 .sorted()\n-                 .collect(toList())\n-                );\n+        List<String> refs = matches.stream()\n+            .sorted((a, b) -> {\n+                int lineDiff = a.sourceLocation().getLineNumber() - b.sourceLocation().getLineNumber();\n+                int colDiff = a.sourceLocation().getColumnNumber() - b.sourceLocation().getColumnNumber();\n+                return lineDiff != 0 ? lineDiff : (colDiff != 0 ? colDiff : a.qualifiedName().compareTo(b.qualifiedName()));\n+            })", "originalCommit": "06e80643cbaac564e1048437a5d622e950e6f2bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4NzI3MA==", "url": "https://github.com/elastic/elasticsearch/pull/59370#discussion_r453487270", "bodyText": "Imho, it would be better to use a for loop to increase readability.\n\nThe stream construction seems a bit more compact and readable IMO and inline with other usages (like the current Analyzer#resolveAgainstList()), but I can still change it if desired.", "author": "bpintea", "createdAt": "2020-07-13T08:40:44Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java", "diffHunk": "@@ -327,22 +332,31 @@ else if (plan instanceof Aggregate) {\n                     return new Aggregate(a.source(), a.child(), a.groupings(),\n                             expandProjections(a.aggregates(), a.child()));\n                 }\n-                // if the grouping is unresolved but the aggs are, use the former to resolve the latter\n-                // solves the case of queries declaring an alias in SELECT and referring to it in GROUP BY\n+                // if the grouping is unresolved but the aggs are, use the latter to resolve the former.\n+                // solves the case of queries declaring an alias in SELECT and referring to it in GROUP BY.\n                 // e.g. SELECT x AS a ... GROUP BY a\n                 if (!a.expressionsResolved() && Resolvables.resolved(a.aggregates())) {\n                     List<Expression> groupings = a.groupings();\n                     List<Expression> newGroupings = new ArrayList<>();\n-                    AttributeMap<Expression> resolved = Expressions.aliases(a.aggregates());\n+                    List<Tuple<Attribute, Expression>> resolvedAliases = Expressions.aliases(a.aggregates());\n \n                     boolean changed = false;\n                     for (Expression grouping : groupings) {\n                         if (grouping instanceof UnresolvedAttribute) {\n-                            Attribute maybeResolved = resolveAgainstList((UnresolvedAttribute) grouping, resolved.keySet());\n+                            Attribute maybeResolved = resolveAgainstList((UnresolvedAttribute) grouping,\n+                                resolvedAliases.stream().map(Tuple::v1).collect(toList()));\n                             if (maybeResolved != null) {\n                                 changed = true;\n-                                // use the matched expression (not its attribute)\n-                                grouping = resolved.get(maybeResolved);\n+                                if (maybeResolved.resolved()) {\n+                                    grouping = resolvedAliases.stream()\n+                                        .filter(t -> t.v1().equals(maybeResolved))\n+                                        // use the matched expression (not its attribute)\n+                                        .map(Tuple::v2)\n+                                        .findAny()\n+                                        .get(); // there should always be exactly one match", "originalCommit": "06e80643cbaac564e1048437a5d622e950e6f2bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}