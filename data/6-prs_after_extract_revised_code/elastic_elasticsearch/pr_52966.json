{"pr_number": 52966, "pr_title": "Formalize usage stats for analytics", "pr_createdAt": "2020-02-28T18:18:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52966", "timeline": [{"oid": "050316e0162ae33e33b0428b6d62674d7f245251", "url": "https://github.com/elastic/elasticsearch/commit/050316e0162ae33e33b0428b6d62674d7f245251", "message": "Formalize usage stats for analytics\n\nThis moves the usage statistics gathering from the `AnalyticsPlugin`\ninto an `AnalyicsUsage`, removing the static state. It also checks the\nlicense level when parsing all analytics aggregations. This is how we\nwere checking them before but we did it in an easy to forget way. This\nway is slightly simpler, I think.", "committedDate": "2020-02-28T18:12:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMTQ4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52966#discussion_r386501486", "bodyText": "Having a trackFoo and getFooUsage for each aggregation seems like a lot of boiler plate to me.  If I was writing this, I'd make an enum of things to track, have an EnumMap of AtomicLongs, and just one track and one getUsage method which accept that enum as an additional argument.  EnumMap uses an efficient array implementation, so we wouldn't be paying much in overhead for that.   This would mean that adding a new counter to this class would just. require adding an entry to the enum, rather than also copying and modifying the track and get methods.  Thoughts?", "author": "not-napoleon", "createdAt": "2020-03-02T16:28:06Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsUsage.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.analytics;\n+\n+import org.elasticsearch.common.xcontent.ContextParser;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Tracks usage of the Analytics aggregations.\n+ */\n+public class AnalyticsUsage {\n+    private final AtomicLong boxplotUsage = new AtomicLong(0);\n+    private final AtomicLong cumulativeCardUsage = new AtomicLong(0);\n+    private final AtomicLong stringStatsUsage = new AtomicLong(0);\n+    private final AtomicLong topMetricsUsage = new AtomicLong(0);\n+\n+    public <C, T> ContextParser<C, T> trackBoxplot(ContextParser<C, T> realParser) {", "originalCommit": "050316e0162ae33e33b0428b6d62674d7f245251", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxNjg4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52966#discussion_r386516883", "bodyText": "I like it!", "author": "nik9000", "createdAt": "2020-03-02T16:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMTQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "16192ced0b0a5540d34bbc67934a63ff4b2fc569", "chunk": "diff --git a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsUsage.java b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsUsage.java\nindex c33bbf9862d..508966301c7 100644\n--- a/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsUsage.java\n+++ b/x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsUsage.java\n\n@@ -6,55 +6,41 @@\n \n package org.elasticsearch.xpack.analytics;\n \n+import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.common.xcontent.ContextParser;\n+import org.elasticsearch.xpack.core.analytics.action.AnalyticsStatsAction;\n \n+import java.util.EnumMap;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * Tracks usage of the Analytics aggregations.\n  */\n public class AnalyticsUsage {\n-    private final AtomicLong boxplotUsage = new AtomicLong(0);\n-    private final AtomicLong cumulativeCardUsage = new AtomicLong(0);\n-    private final AtomicLong stringStatsUsage = new AtomicLong(0);\n-    private final AtomicLong topMetricsUsage = new AtomicLong(0);\n-\n-    public <C, T> ContextParser<C, T> trackBoxplot(ContextParser<C, T> realParser) {\n-        return track(realParser, boxplotUsage);\n-    }\n-\n-    public long getBoxplotUsage() {\n-        return boxplotUsage.get();\n-    }\n-\n-    public <C, T> ContextParser<C, T> trackCumulativeCardinality(ContextParser<C, T> realParser) {\n-        return track(realParser, cumulativeCardUsage);\n-    }\n-\n-    public long getCumulativeCardUsage() {\n-        return cumulativeCardUsage.get();\n-    }\n-\n-    public <C, T> ContextParser<C, T> trackStringStats(ContextParser<C, T> realParser) {\n-        return track(realParser, stringStatsUsage);\n-    }\n-\n-    public long getStringStatsUsage() {\n-        return stringStatsUsage.get();\n+    /**\n+     * Items to track.\n+     */\n+    public enum Item {\n+        BOXPLOT,\n+        CUMULATIVE_CARDINALITY,\n+        STRING_STATS,\n+        TOP_METRICS;\n     }\n \n-    public <C, T> ContextParser<C, T> trackTopMetrics(ContextParser<C, T> realParser) {\n-        return track(realParser, topMetricsUsage);\n-    }\n+    private final Map<Item, AtomicLong> trackers = new EnumMap<>(Item.class);\n \n-    public long getTopMetricsUsage() {\n-        return topMetricsUsage.get();\n+    public AnalyticsUsage() {\n+        for (Item item: Item.values()) {\n+            trackers.put(item, new AtomicLong(0));\n+        }\n     }\n \n     /**\n      * Track successful parsing.\n      */\n-    private static <C, T> ContextParser<C, T> track(ContextParser<C, T> realParser, AtomicLong usage) {\n+    public <C, T> ContextParser<C, T> track(Item item, ContextParser<C, T> realParser) {\n+        AtomicLong usage = trackers.get(item);\n         return (parser, context) -> {\n             T value = realParser.parse(parser, context);\n             // Intentionally doesn't count unless the parser returns cleanly.\n"}}, {"oid": "52b374fd24363174f1bfcbe87b7de927223c8eac", "url": "https://github.com/elastic/elasticsearch/commit/52b374fd24363174f1bfcbe87b7de927223c8eac", "message": "Merge branch 'master' into analytics_usage", "committedDate": "2020-03-02T16:53:28Z", "type": "commit"}, {"oid": "16192ced0b0a5540d34bbc67934a63ff4b2fc569", "url": "https://github.com/elastic/elasticsearch/commit/16192ced0b0a5540d34bbc67934a63ff4b2fc569", "message": "Remove ceremony", "committedDate": "2020-03-02T17:57:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwNzcyMg==", "url": "https://github.com/elastic/elasticsearch/pull/52966#discussion_r386707722", "bodyText": "Did you mean to include this in this PR? it seems unrelated.", "author": "not-napoleon", "createdAt": "2020-03-02T23:11:58Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregationSortSource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.search.aggregations;\n+\n+import org.elasticsearch.search.sort.SortOrder;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * Compare two buckets by their ordinal.\n+ */\n+public interface AggregationSortSource<A extends Aggregator, R extends Aggregation> {", "originalCommit": "16192ced0b0a5540d34bbc67934a63ff4b2fc569", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODU4MA==", "url": "https://github.com/elastic/elasticsearch/pull/52966#discussion_r387208580", "bodyText": "Did you mean to include this in this PR? it seems unrelated.\n\nNope. Sneaky git add .! I'll remove.", "author": "nik9000", "createdAt": "2020-03-03T18:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwNzcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "73e4086ea1b5551090942ea30430659134a8dbb3", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/AggregationSortSource.java b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationSortSource.java\ndeleted file mode 100644\nindex 8789dd7d675..00000000000\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/AggregationSortSource.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.elasticsearch.search.aggregations;\n-\n-import org.elasticsearch.search.sort.SortOrder;\n-\n-import java.util.Comparator;\n-\n-/**\n- * Compare two buckets by their ordinal.\n- */\n-public interface AggregationSortSource<A extends Aggregator, R extends Aggregation> {\n-    /**\n-     * An ordinal based comparator for comparing aggregation results\n-     * before they are extracted from their {@link Aggregator}. \n-     */\n-    Aggregator.BucketComparator ordinalComparator(A aggregator, SortOrder order);\n-\n-    /**\n-     * A comparator for fully built aggregation results.\n-     */\n-    Comparator<R> resultComparator(SortOrder order);\n-}\n\\ No newline at end of file\n"}}, {"oid": "73e4086ea1b5551090942ea30430659134a8dbb3", "url": "https://github.com/elastic/elasticsearch/commit/73e4086ea1b5551090942ea30430659134a8dbb3", "message": "Drop oops", "committedDate": "2020-03-03T18:25:07Z", "type": "commit"}]}