{"pr_number": 51957, "pr_title": "Force execution of finish shard bulk request", "pr_createdAt": "2020-02-05T17:52:04Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51957", "timeline": [{"oid": "5a02d1a75eec12c8bc783697e7638d977111d841", "url": "https://github.com/elastic/elasticsearch/commit/5a02d1a75eec12c8bc783697e7638d977111d841", "message": "Force execution of finish shard bulk request\n\nCurrently the shard bulk request can be rejected by the write threadpool\nafter a mapping update. This introduces a scenario where the mapping\nlistener thread will attempt to finish the request and fsync. This\nthread can potentially be a transport thread. This commit fixes this\nissue by forcing the finish action to happen on the write threadpool.\n\nFixes #51904.", "committedDate": "2020-02-05T17:49:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNDE3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51957#discussion_r375434171", "bodyText": "I was thinking that rather than scheduling only finishRequest on the write thread pool, we should execute the entirety of onRejection on the write thread pool (and still forcing execution, since rejecting execution here would be very bad): \n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n    \n    \n         Line 160\n      in\n      3ad8aa6\n    \n    \n    \n    \n\n        \n          \n           ActionListener.wrap(v -> executor.execute(this), this::onRejection)) == false) { \n        \n    \n  \n\n\nThe reason I think this is because we're still doing work in onRejection that is linear in the number of documents in the bulk request. It seems we'd want to get that off of the networking/cluster state applier thread too given that we're going to fork anyway.", "author": "jasontedor", "createdAt": "2020-02-05T18:36:16Z", "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java", "diffHunk": "@@ -179,7 +179,20 @@ public void onRejection(Exception e) {\n                             e, primary, docWriteRequest.opType() == DocWriteRequest.OpType.DELETE, docWriteRequest.version()),\n                         context, null);\n                 }\n-                finishRequest();\n+\n+                // Force the execution to finish the request\n+                executor.execute(new ActionRunnable<>(listener) {\n+\n+                    @Override\n+                    protected void doRun() {\n+                        finishRequest();", "originalCommit": "5a02d1a75eec12c8bc783697e7638d977111d841", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2NTUyMg==", "url": "https://github.com/elastic/elasticsearch/pull/51957#discussion_r375465522", "bodyText": "I wonder if we should instead let onRejection force-push the onRejection handling onto the queue of the requested executor. The current \"direct\" handling kind of prioritizes the onRejection handling over everything else in the queue, which I think there is really no good reason for.\nLooking at various onRejection handlers, some call listener.onFailure and verifying that none of those do bad things is tricky.\nAlso notice that onAfter is also called in the caller thread when requests are rejected, this poses similar issues (not that I found a smoking gun there).\nFinally, notice that AbstractRunnable.onRejection by default calls onFailure.\nI doubt that we careful consider that onAfter and onFailure might run in the current thread when using AbstractRunnable and executing the onRejection handling on the target thread-pool would fix this, making it easier to reason about.\nThat said, I think this PR is good and I am not objecting to it going in. Following my suggestion is likely to surface a few additional things to resolve.", "author": "henningandersen", "createdAt": "2020-02-05T19:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNDE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3NTU3NA==", "url": "https://github.com/elastic/elasticsearch/pull/51957#discussion_r375475574", "bodyText": "I made @jasontedor change.\nI think maybe Henning's comment about maybe onRejection should be executed on the thread pool anyway is beyond the scope of this PR? Or at least a larger discussion.", "author": "tbrooks8", "createdAt": "2020-02-05T19:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNDE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ4NTEyMw==", "url": "https://github.com/elastic/elasticsearch/pull/51957#discussion_r375485123", "bodyText": "@tbrooks8, yes, that is fine, I just found it most natural to put it here. I will open a PR with that change so we can discuss based on that PR instead.", "author": "henningandersen", "createdAt": "2020-02-05T20:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNDE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4b0b0ebb8c254d37ba1cf351c46a706750c8ce54", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\nindex 46284c8ec41..62f1635fc00 100644\n--- a/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n\n@@ -170,21 +170,20 @@ public class TransportShardBulkAction extends TransportWriteAction<BulkShardRequ\n \n             @Override\n             public void onRejection(Exception e) {\n-                // Fail all operations after a bulk rejection hit an action that waited for a mapping update and finish the request\n-                while (context.hasMoreOperationsToExecute()) {\n-                    context.setRequestToExecute(context.getCurrent());\n-                    final DocWriteRequest<?> docWriteRequest = context.getRequestToExecute();\n-                    onComplete(\n-                        exceptionToResult(\n-                            e, primary, docWriteRequest.opType() == DocWriteRequest.OpType.DELETE, docWriteRequest.version()),\n-                        context, null);\n-                }\n-\n                 // Force the execution to finish the request\n                 executor.execute(new ActionRunnable<>(listener) {\n \n                     @Override\n                     protected void doRun() {\n+                        // Fail all operations after a bulk rejection hit an action that waited for a mapping update and finish the request\n+                        while (context.hasMoreOperationsToExecute()) {\n+                            context.setRequestToExecute(context.getCurrent());\n+                            final DocWriteRequest<?> docWriteRequest = context.getRequestToExecute();\n+                            onComplete(\n+                                exceptionToResult(\n+                                    e, primary, docWriteRequest.opType() == DocWriteRequest.OpType.DELETE, docWriteRequest.version()),\n+                                context, null);\n+                        }\n                         finishRequest();\n                     }\n \n"}}, {"oid": "4b0b0ebb8c254d37ba1cf351c46a706750c8ce54", "url": "https://github.com/elastic/elasticsearch/commit/4b0b0ebb8c254d37ba1cf351c46a706750c8ce54", "message": "Dispatch everything", "committedDate": "2020-02-05T19:13:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwMjIzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51957#discussion_r375502235", "bodyText": "It's probably worth a comment here why we fork to the executor (since it's not obvious from the code).", "author": "jasontedor", "createdAt": "2020-02-05T20:54:43Z", "path": "server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java", "diffHunk": "@@ -170,16 +170,28 @@ protected void doRun() throws Exception {\n \n             @Override\n             public void onRejection(Exception e) {\n-                // Fail all operations after a bulk rejection hit an action that waited for a mapping update and finish the request\n-                while (context.hasMoreOperationsToExecute()) {\n-                    context.setRequestToExecute(context.getCurrent());\n-                    final DocWriteRequest<?> docWriteRequest = context.getRequestToExecute();\n-                    onComplete(\n-                        exceptionToResult(\n-                            e, primary, docWriteRequest.opType() == DocWriteRequest.OpType.DELETE, docWriteRequest.version()),\n-                        context, null);\n-                }\n-                finishRequest();\n+                // Force the execution to finish the request", "originalCommit": "4b0b0ebb8c254d37ba1cf351c46a706750c8ce54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae403e787122a040e3dce40ad3cbc39ed526e729", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\nindex 62f1635fc00..d3b7174b3f1 100644\n--- a/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java\n\n@@ -170,7 +170,8 @@ public class TransportShardBulkAction extends TransportWriteAction<BulkShardRequ\n \n             @Override\n             public void onRejection(Exception e) {\n-                // Force the execution to finish the request\n+                // We must finish the outstanding request. Finishing the outstanding request can include\n+                //refreshing and fsyncing. Therefore, we must force execution on the WRITE thread.\n                 executor.execute(new ActionRunnable<>(listener) {\n \n                     @Override\n"}}, {"oid": "ae403e787122a040e3dce40ad3cbc39ed526e729", "url": "https://github.com/elastic/elasticsearch/commit/ae403e787122a040e3dce40ad3cbc39ed526e729", "message": "Comment", "committedDate": "2020-02-11T16:54:09Z", "type": "commit"}, {"oid": "07135b261596d902b6c8bcdc32d9c6ca2ff5d8c3", "url": "https://github.com/elastic/elasticsearch/commit/07135b261596d902b6c8bcdc32d9c6ca2ff5d8c3", "message": "Merge remote-tracking branch 'upstream/master' into force_shard_finish", "committedDate": "2020-02-11T16:54:20Z", "type": "commit"}, {"oid": "722236da75716292185eb41f92ccaeaf69e6dc85", "url": "https://github.com/elastic/elasticsearch/commit/722236da75716292185eb41f92ccaeaf69e6dc85", "message": "Merge remote-tracking branch 'upstream/master' into force_shard_finish", "committedDate": "2020-02-12T14:19:33Z", "type": "commit"}]}