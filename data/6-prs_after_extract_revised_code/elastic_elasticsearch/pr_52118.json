{"pr_number": 52118, "pr_title": "Refactor license checking", "pr_createdAt": "2020-02-10T02:25:54Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52118", "timeline": [{"oid": "8eabbf1d1320faaa0288c846a7979baa823c61f1", "url": "https://github.com/elastic/elasticsearch/commit/8eabbf1d1320faaa0288c846a7979baa823c61f1", "message": "Continue refactor license checking", "committedDate": "2020-02-10T02:22:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0Njc4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376846782", "bodyText": "Address feedback #51864 (comment)", "author": "ywangd", "createdAt": "2020-02-10T02:29:58Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -343,7 +343,7 @@ public synchronized OperationMode getOperationMode() {\n     }\n \n     /** Return true if the license is currently within its time boundaries, false otherwise. */\n-    public synchronized boolean isActive() {\n+    public synchronized boolean allowForAllLicenses() {", "originalCommit": "8eabbf1d1320faaa0288c846a7979baa823c61f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMjY0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379222647", "bodyText": "I think the javadoc should be updated. Stricly it's accurate, but by intent this method now has a different purpose.", "author": "tvernum", "createdAt": "2020-02-14T02:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0Njc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMjYxNg==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379232616", "bodyText": "I am having some difficulty trying to rephrase this without the word \"active\" or something that explains it. How about \"Return true if the feature is allowed by all non-expired licenses\"?", "author": "ywangd", "createdAt": "2020-02-14T03:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0Njc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 20bc9769986..c1fda8040b8 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -342,11 +342,20 @@ public class XPackLicenseState {\n         return status.mode;\n     }\n \n-    /** Return true if the license is currently within its time boundaries, false otherwise. */\n+    /**\n+     * Return true if the feature is allowed by all active, i.e. no-expired licenses, false otherwise.\n+     * @see #isActive()\n+     */\n     public synchronized boolean allowForAllLicenses() {\n         return status.active;\n     }\n \n+    // Package private for tests\n+    /** Return true if the license is currently within its time boundaries, false otherwise. */\n+    synchronized boolean isActive() {\n+        return status.active;\n+    }\n+\n     /**\n      * @return true if authentication and authorization should be enabled. this does not indicate what realms are available\n      * @see #allowedRealmType() for the enabled realms\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376847283", "bodyText": "Address feedback #51864 (comment)\nThe method isAllowedByLicense now does not check security at all, while isAllowedBySecurityAndLicense always checks security plus license.", "author": "ywangd", "createdAt": "2020-02-10T02:33:17Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -806,26 +804,36 @@ public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n \n-    private synchronized boolean isAllowedBySecurity() {\n-        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-    }\n-\n     /**\n-     * Test whether a feature is allowed by the status of current license and security configuration.\n+     * Test whether a feature is allowed by the status of license and security configuration.\n+     * Note the difference to {@link #isAllowedByLicense} is this method requires security\n+     * to be enabled.\n      *\n      * @param minimumMode  The minimum license to meet or exceed\n-     * @param needSecurity Whether security is required for feature to be allowed\n      * @param needActive   Whether current license needs to be active\n      * @param allowTrial   Whether the feature is allowed for trial license\n      *\n      * @return true if feature is allowed, otherwise false\n      */\n-    private synchronized boolean isAllowedByLicenseAndSecurity(\n-        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {\n-\n-        if (needSecurity && false == isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)) {\n+    private synchronized boolean isAllowedBySecurityAndLicense(OperationMode minimumMode, boolean needActive, boolean allowTrial) {\n+        if (false == isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)) {\n             return false;\n         }\n+        return isAllowedByLicense(minimumMode, needActive, allowTrial);\n+    }\n+\n+    /**\n+     * Test whether a feature is allowed by the status of license. Note difference to\n+     * {@link #isAllowedBySecurityAndLicense} is this method does <b>Not</b> require security\n+     * to be enabled.\n+     *\n+     * @param minimumMode  The minimum license to meet or exceed\n+     * @param needActive   Whether current license needs to be active\n+     * @param allowTrial   Whether the feature is allowed for trial license\n+     *\n+     * @return true if feature is allowed, otherwise false\n+     */\n+    public synchronized boolean isAllowedByLicense(OperationMode minimumMode, boolean needActive, boolean allowTrial) {\n         if (needActive && false == status.active) {\n             return false;\n         }", "originalCommit": "8eabbf1d1320faaa0288c846a7979baa823c61f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMjE1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379222155", "bodyText": "I'm going to be picky and say I'd like an even simpler version of this method.\nMy absolute number 1 aim here is when an engineer needs to add a license check, they are not asked to make decisions that they shouldn't need to worry about.\nI think that means we should have:\npublic boolean isAllowedByLicense(OperationMode minimumMode) {\n    return AllowedByLicense(minimumMode, true, true);\n}\n\nand use that method everywhere we can.\nPut yourself in the shows of someone who is implementing a new license check.\nThey come here, they look for another method that has a similar license live (e.g. Platinum), and find the isCcrAllowed method. So, they model their isWorldDominationAllowed method on that.\nBut isCcrAllowed calls: isAllowedByLicense(PLATINUM, true, true)\nDo I need to pass true for those parameters as well? Well, what do they mean? Oh, needActive ... well, what counts as an active license? let's look for what that paremter does... oh, it checks status.active ... what does that mean ? etc.\nThere should be an obvious method that does the right thing for 90% of cases, and we don't ask the engineer to worry about parameters that they almost certainly don't care about, and shouldn't be asked to make a decision on.", "author": "tvernum", "createdAt": "2020-02-14T02:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0OTI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379249283", "bodyText": "I am not a fan of many boolean parameters. So yes I agree the simplification is worthwhile. It is now added and replaced 10 calls of the more verbose method.", "author": "ywangd", "createdAt": "2020-02-14T04:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 20bc9769986..c1fda8040b8 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -806,11 +774,11 @@ public class XPackLicenseState {\n \n     /**\n      * Test whether a feature is allowed by the status of license and security configuration.\n-     * Note the difference to {@link #isAllowedByLicense} is this method requires security\n-     * to be enabled.\n+     * Note the difference to {@link #isAllowedByLicense(OperationMode, boolean, boolean)}\n+     * is this method requires security to be enabled.\n      *\n      * @param minimumMode  The minimum license to meet or exceed\n-     * @param needActive   Whether current license needs to be active\n+     * @param needActive   Whether current license needs to be active.\n      * @param allowTrial   Whether the feature is allowed for trial license\n      *\n      * @return true if feature is allowed, otherwise false\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzQyNg==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376847426", "bodyText": "Address feedback #51864 (comment)\nSingle call to remove potential race condition.", "author": "ywangd", "createdAt": "2020-02-10T02:34:17Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -243,13 +243,12 @@ public boolean isAvailableWithLicense(XPackLicenseState licenseState) {\n         }\n \n         // The model license does not matter, this is the highest licensed level\n-        if (licenseState.isActive() && XPackLicenseState.isAllowedByOperationMode(\n-            licenseState.getOperationMode(), License.OperationMode.PLATINUM, true)) {\n+        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM, true, true)) {", "originalCommit": "8eabbf1d1320faaa0288c846a7979baa823c61f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java\nindex 5fcbdafd7b5..4fca4e1d204 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java\n\n@@ -242,8 +242,8 @@ public class TrainedModelConfig implements ToXContentObject, Writeable {\n             return true;\n         }\n \n-        // The model license does not matter, this is the highest licensed level\n-        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM, true, true)) {\n+        // The model license does not matter, Platinum license gets the same functions as the highest license\n+        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM)) {\n             return true;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzQ3OA==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376847478", "bodyText": "Same as above.", "author": "ywangd", "createdAt": "2020-02-10T02:34:43Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -243,13 +243,12 @@ public boolean isAvailableWithLicense(XPackLicenseState licenseState) {\n         }\n \n         // The model license does not matter, this is the highest licensed level\n-        if (licenseState.isActive() && XPackLicenseState.isAllowedByOperationMode(\n-            licenseState.getOperationMode(), License.OperationMode.PLATINUM, true)) {\n+        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM, true, true)) {\n             return true;\n         }\n \n         // catch the rest, if the license is active and is at least the required model license\n-        return licenseState.isActive() && License.OperationMode.compare(licenseState.getOperationMode(), licenseLevel) >= 0;\n+        return licenseState.isAllowedByLicense(licenseLevel, true, false);", "originalCommit": "8eabbf1d1320faaa0288c846a7979baa823c61f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1MDIwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379250205", "bodyText": "I doubt that we do not allow Trial license here. If the license is trial, it will be allowed by the code above this line. So allowTrial or not does not make a difference here. But it seems a bit funny to state it like this. Plus it could be simplified to isAllowedByLicense(licenseLevel) if allowTrial is true.", "author": "ywangd", "createdAt": "2020-02-14T04:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MDU3OA==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r382340578", "bodyText": "It feels like this whole method is trying too hard to duplicate logic that should be handled by XPackLicenseState.\nI think we can replace the whole method with:\nreturn licenseState.isAllowedByLicense(this.licenseLevel)\n\nBut perhaps we should make that a separate PR so that the ML team can review it.", "author": "tvernum", "createdAt": "2020-02-21T00:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1ODcwMg==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r382358702", "bodyText": "I'll create a separate PR for it. thanks", "author": "ywangd", "createdAt": "2020-02-21T01:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java\nindex 5fcbdafd7b5..4fca4e1d204 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java\n\n@@ -242,8 +242,8 @@ public class TrainedModelConfig implements ToXContentObject, Writeable {\n             return true;\n         }\n \n-        // The model license does not matter, this is the highest licensed level\n-        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM, true, true)) {\n+        // The model license does not matter, Platinum license gets the same functions as the highest license\n+        if (licenseState.isAllowedByLicense(License.OperationMode.PLATINUM)) {\n             return true;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzUzMw==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376847533", "bodyText": "Address feedback #51864 (comment)", "author": "ywangd", "createdAt": "2020-02-10T02:35:06Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -715,9 +715,7 @@ public synchronized boolean isTrialLicense() {\n      * @return true if security is available to be used with the current license type\n      */\n     public synchronized boolean isSecurityAvailable() {\n-        OperationMode mode = status.mode;\n-        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||\n-                mode == OperationMode.TRIAL || mode == OperationMode.BASIC || mode == OperationMode.ENTERPRISE;\n+        return status.mode != OperationMode.MISSING;", "originalCommit": "8eabbf1d1320faaa0288c846a7979baa823c61f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a20a970aa41d1cc56e5c5c9f24faf948b031a07", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 20bc9769986..8b3e03d2637 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -707,10 +707,6 @@ public class XPackLicenseState {\n         return allowForAllLicenses();\n     }\n \n-    public synchronized boolean isTrialLicense() {\n-        return status.mode == OperationMode.TRIAL;\n-    }\n-\n     /**\n      * @return true if security is available to be used with the current license type\n      */\n"}}, {"oid": "f1c931b82b2552c3594ee90511f4376e01b8c093", "url": "https://github.com/elastic/elasticsearch/commit/f1c931b82b2552c3594ee90511f4376e01b8c093", "message": "Fix checkstyle", "committedDate": "2020-02-10T02:43:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0ODkwOA==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376848908", "bodyText": "Address feedback #51864 (comment)\nSee #52118 (comment)", "author": "ywangd", "createdAt": "2020-02-10T02:44:39Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java", "diffHunk": "@@ -255,9 +255,7 @@ public void registerLicense(final PutLicenseRequest request, final ActionListene\n                     throw new IllegalStateException(\"Cannot install a [\" + newLicense.operationMode() +\n                         \"] license unless TLS is configured or security is disabled\");\n                 } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings)\n-                    && newLicense.operationMode() != License.OperationMode.PLATINUM\n-                    && newLicense.operationMode() != License.OperationMode.ENTERPRISE\n-                    && newLicense.operationMode() != License.OperationMode.TRIAL) {\n+                    && XPackLicenseState.isFipsAllowedForOperationMode(newLicense.operationMode())) {", "originalCommit": "f1c931b82b2552c3594ee90511f4376e01b8c093", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d1164c191b3a5b27484df2ad95cf079c858521e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java\nindex 847b0f3418d..cecdecb64a8 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java\n\n@@ -255,7 +255,7 @@ public class LicenseService extends AbstractLifecycleComponent implements Cluste\n                     throw new IllegalStateException(\"Cannot install a [\" + newLicense.operationMode() +\n                         \"] license unless TLS is configured or security is disabled\");\n                 } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings)\n-                    && XPackLicenseState.isFipsAllowedForOperationMode(newLicense.operationMode())) {\n+                    && false == XPackLicenseState.isFipsAllowedForOperationMode(newLicense.operationMode())) {\n                     throw new IllegalStateException(\"Cannot install a [\" + newLicense.operationMode() +\n                         \"] license unless FIPS mode is disabled\");\n                 }\n"}}, {"oid": "9d1164c191b3a5b27484df2ad95cf079c858521e", "url": "https://github.com/elastic/elasticsearch/commit/9d1164c191b3a5b27484df2ad95cf079c858521e", "message": "Fix fips license test", "committedDate": "2020-02-10T03:13:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1MzY3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r376853676", "bodyText": "Address feedback #51864 (comment)", "author": "ywangd", "createdAt": "2020-02-10T03:16:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java", "diffHunk": "@@ -255,9 +255,7 @@ public void registerLicense(final PutLicenseRequest request, final ActionListene\n                     throw new IllegalStateException(\"Cannot install a [\" + newLicense.operationMode() +\n                         \"] license unless TLS is configured or security is disabled\");\n                 } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings)\n-                    && newLicense.operationMode() != License.OperationMode.PLATINUM\n-                    && newLicense.operationMode() != License.OperationMode.ENTERPRISE\n-                    && newLicense.operationMode() != License.OperationMode.TRIAL) {\n+                    && false == XPackLicenseState.isFipsAllowedForOperationMode(newLicense.operationMode())) {", "originalCommit": "9d1164c191b3a5b27484df2ad95cf079c858521e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "4a20a970aa41d1cc56e5c5c9f24faf948b031a07", "url": "https://github.com/elastic/elasticsearch/commit/4a20a970aa41d1cc56e5c5c9f24faf948b031a07", "message": "More refactoring", "committedDate": "2020-02-10T10:14:34Z", "type": "commit"}, {"oid": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792", "url": "https://github.com/elastic/elasticsearch/commit/9c9afb0f97ff798fd26cd04e0559d0ce517c7792", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode-tailing", "committedDate": "2020-02-10T10:28:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzA2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379223061", "bodyText": "We can remove the comment above, since it's not accurate (we don't check missing).", "author": "tvernum", "createdAt": "2020-02-14T02:27:02Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -637,23 +637,23 @@ public boolean isIndexLifecycleAllowed() {\n      *         {@code false}.\n      */\n     public boolean isEnrichAllowed() {\n-        return isActive();\n+        return allowForAllLicenses();\n     }\n \n     /**\n      * Determine if EQL support should be enabled.\n      * <p>\n      *  EQL is available for all license types except {@link OperationMode#MISSING}", "originalCommit": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0ODc5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379248795", "bodyText": "Removed. I always went in and changed many of the inconsistent comments. However I am still not quite happy about current approach, e.g. \"XXX is always allowed as long as there is an active license\". This feels like documenting the internals instead of the overall purpose. It could be changed to \"Determine whether XXX is allowed\". But then it is basically duplicating the method name and might as well be removed. Please let me know how you think about this.", "author": "ywangd", "createdAt": "2020-02-14T04:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MTU4OA==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r382341588", "bodyText": "My default position is that the existence of a comment should imply that something non-obvious is going on.\nIf the code is obvious (both in terms of what it tries to do, and why it does it that way), then the comment is a distraction. It's one more thing to read and understand that eventually just tells you what was right in front of you.\nIn these cases, I would hope the new structure is sufficient to make the comments unnecessary.", "author": "tvernum", "createdAt": "2020-02-21T00:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Mjc0OA==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r382342748", "bodyText": "Thanks Tim. This is my intention as well.", "author": "ywangd", "createdAt": "2020-02-21T00:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 8b3e03d2637..c1fda8040b8 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -569,88 +564,70 @@ public class XPackLicenseState {\n     }\n \n     /**\n-     * Rollup is always available as long as there is a valid license\n-     *\n-     * @return true if the license is active\n+     * Rollup is always allowed as long as there is an active license\n      */\n     public boolean isRollupAllowed() {\n         return allowForAllLicenses();\n     }\n \n     /**\n-     * Voting only node functionality is always available as long as there is a valid license\n-     *\n-     * @return true if the license is active\n+     * Voting only node functionality is always allowed as long as there is an active license\n      */\n     public boolean isVotingOnlyAllowed() {\n         return allowForAllLicenses();\n     }\n \n     /**\n-     * Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM\n-     * @return {@code true} as long as there is a valid license\n+     * Logstash is allowed as long as there is an active license of type TRIAL, STANDARD or higher\n      */\n     public boolean isLogstashAllowed() {\n-        return isAllowedByLicense(OperationMode.STANDARD, true, true);\n+        return isAllowedByLicense(OperationMode.STANDARD);\n     }\n \n     /**\n-     * Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM\n-     * @return {@code true} as long as there is a valid license\n+     * Beats is allowed as long as there is an active license of type TRIAL, STANDARD or higher.\n      */\n     public boolean isBeatsAllowed() {\n-        return isAllowedByLicense(OperationMode.STANDARD, true, true);\n+        return isAllowedByLicense(OperationMode.STANDARD);\n     }\n \n     /**\n      * Deprecation APIs are always allowed as long as there is an active license\n-     * @return {@code true} as long as there is a valid license\n      */\n     public boolean isDeprecationAllowed() {\n         return allowForAllLicenses();\n     }\n \n     /**\n-     * Determine if Upgrade API should be enabled.\n-     *\n-     * @return {@code true} as long as the license is valid. Otherwise\n-     *         {@code false}.\n+     * Upgrade API is always allowed as long as there is an active license.\n      */\n     public boolean isUpgradeAllowed() {\n         return allowForAllLicenses();\n     }\n \n     /**\n-     * Determine if Index Lifecycle API should be enabled.\n-     *\n-     * @return {@code true} as long as the license is valid. Otherwise\n-     *         {@code false}.\n+     * Index Lifecycle API is always allowed as long as there is an active license.\n      */\n     public boolean isIndexLifecycleAllowed() {\n         return allowForAllLicenses();\n     }\n \n     /**\n-     * Determine if the enrich processor and related APIs are allowed to be used.\n-     *\n-     * @return {@code true} as long as the license is valid. Otherwise\n-     *         {@code false}.\n+     * Enrich processor and related APIs are always allowed as long as there is an active license.\n      */\n     public boolean isEnrichAllowed() {\n         return allowForAllLicenses();\n     }\n \n     /**\n-     * Determine if EQL support should be enabled.\n-     * <p>\n-     *  EQL is available for all license types except {@link OperationMode#MISSING}\n+     * EQL support is always allowed as long as there is an active license.\n      */\n     public boolean isEqlAllowed() {\n         return allowForAllLicenses();\n     }\n \n     /**\n-     * Determine if SQL support should be enabled.\n+     * SQL support is always allowed as long as there is an active license.\n      */\n     public boolean isSqlAllowed() {\n         return allowForAllLicenses();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzUyMA==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379223520", "bodyText": "I don't think this call should change. I think we still need a (possibly package protected) isActive method here so that the test is asserting what it says it's asserting.", "author": "tvernum", "createdAt": "2020-02-14T02:29:22Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/AbstractLicensesIntegrationTestCase.java", "diffHunk": "@@ -88,7 +88,7 @@ public void onFailure(String source, @Nullable Exception e) {\n     protected void assertLicenseActive(boolean active) throws Exception {\n         assertBusy(() -> {\n             for (XPackLicenseState licenseState : internalCluster().getDataNodeInstances(XPackLicenseState.class)) {\n-                if (licenseState.isActive() == active) {\n+                if (licenseState.allowForAllLicenses() == active) {", "originalCommit": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0ODI2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379248263", "bodyText": "Added package private isActive. But having both of the two methods bothers me a bit. They are functionally identical. But it could be accidental. Given we should fallback to basic license which is always active, the call to allowForAllLicenses is really needed. It can either be removed or reduced to always return true.", "author": "ywangd", "createdAt": "2020-02-14T04:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/AbstractLicensesIntegrationTestCase.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/AbstractLicensesIntegrationTestCase.java\nindex 2a99ca75673..77e2df67af1 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/AbstractLicensesIntegrationTestCase.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/AbstractLicensesIntegrationTestCase.java\n\n@@ -88,7 +88,7 @@ public abstract class AbstractLicensesIntegrationTestCase extends ESIntegTestCas\n     protected void assertLicenseActive(boolean active) throws Exception {\n         assertBusy(() -> {\n             for (XPackLicenseState licenseState : internalCluster().getDataNodeInstances(XPackLicenseState.class)) {\n-                if (licenseState.allowForAllLicenses() == active) {\n+                if (licenseState.isActive() == active) {\n                     return;\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzg4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379223883", "bodyText": "This isn't true any more, right?\nI mean, technically right now there's no functional difference between Platinum and Enterprise modes, but Platinum isn't actually the highest now.", "author": "tvernum", "createdAt": "2020-02-14T02:31:04Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfigTests.java", "diffHunk": "@@ -307,53 +309,61 @@ public void testSerializationWithCompressedLazyDefinition() throws IOException {\n \n     public void testIsAvailableWithLicense() {\n         TrainedModelConfig.Builder builder = createTestInstance(randomAlphaOfLength(10));\n-\n         XPackLicenseState licenseState = mock(XPackLicenseState.class);\n-        when(licenseState.isActive()).thenReturn(false);\n-        when(licenseState.getOperationMode()).thenReturn(License.OperationMode.BASIC);\n \n+        // Reject everything\n+        when(licenseState.isAllowedByLicense(any(License.OperationMode.class), anyBoolean(), anyBoolean())).thenAnswer(\n+            invocationOnMock -> {\n+                final Object[] arguments = invocationOnMock.getArguments();\n+                assertTrue((boolean) arguments[1]); // ensure the call is made to require active license\n+                return false;\n+            }\n+        );\n         assertFalse(builder.setLicenseLevel(License.OperationMode.ENTERPRISE.description()).build().isAvailableWithLicense(licenseState));\n         assertFalse(builder.setLicenseLevel(License.OperationMode.PLATINUM.description()).build().isAvailableWithLicense(licenseState));\n+        assertFalse(builder.setLicenseLevel(License.OperationMode.GOLD.description()).build().isAvailableWithLicense(licenseState));\n+        // Basic license always works not matter what\n         assertTrue(builder.setLicenseLevel(License.OperationMode.BASIC.description()).build().isAvailableWithLicense(licenseState));\n+    }\n \n-        when(licenseState.isActive()).thenReturn(true);\n-        when(licenseState.getOperationMode()).thenReturn(License.OperationMode.ENTERPRISE);\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.ENTERPRISE.description()).build().isAvailableWithLicense(licenseState));\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.PLATINUM.description()).build().isAvailableWithLicense(licenseState));\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.BASIC.description()).build().isAvailableWithLicense(licenseState));\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.GOLD.description()).build().isAvailableWithLicense(licenseState));\n-\n-        when(licenseState.isActive()).thenReturn(false);\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.ENTERPRISE.description()).build().isAvailableWithLicense(licenseState));\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.PLATINUM.description()).build().isAvailableWithLicense(licenseState));\n-        assertTrue(builder.setLicenseLevel(License.OperationMode.BASIC.description()).build().isAvailableWithLicense(licenseState));\n-        assertFalse(builder.setLicenseLevel(License.OperationMode.GOLD.description()).build().isAvailableWithLicense(licenseState));\n+    public void testActivePlatinumLicenseAlwaysWorks() {\n+        TrainedModelConfig.Builder builder = createTestInstance(randomAlphaOfLength(10));\n+        XPackLicenseState licenseState = mock(XPackLicenseState.class);\n \n-        when(licenseState.isActive()).thenReturn(true);\n-        when(licenseState.getOperationMode()).thenReturn(License.OperationMode.PLATINUM);\n+        // Active Platinum license is considered as highest and should always work", "originalCommit": "9c9afb0f97ff798fd26cd04e0559d0ce517c7792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0Njc1NA==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379246754", "bodyText": "You are right. I was trying to hint the same thing in the comment, i.e. \"considered as ...\". But it is too subtle to understand. I'll reword it.", "author": "ywangd", "createdAt": "2020-02-14T04:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0ODg3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52118#discussion_r379248875", "bodyText": "Updated", "author": "ywangd", "createdAt": "2020-02-14T04:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMzg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfigTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfigTests.java\nindex abc4328c027..6b99f0612af 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfigTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfigTests.java\n\n@@ -330,7 +330,9 @@ public class TrainedModelConfigTests extends AbstractSerializingTestCase<Trained\n         TrainedModelConfig.Builder builder = createTestInstance(randomAlphaOfLength(10));\n         XPackLicenseState licenseState = mock(XPackLicenseState.class);\n \n-        // Active Platinum license is considered as highest and should always work\n+        when(licenseState.isAllowedByLicense(License.OperationMode.PLATINUM)).thenReturn(true);\n+\n+        // Active Platinum license functions the same as Enterprise license (highest) and should always work\n         when(licenseState.isAllowedByLicense(any(License.OperationMode.class), anyBoolean(), anyBoolean())).thenAnswer(\n             invocationOnMock -> {\n                 final Object[] arguments = invocationOnMock.getArguments();\n"}}, {"oid": "e1da1097a2994dbcce156755e99b4bcf7e643e91", "url": "https://github.com/elastic/elasticsearch/commit/e1da1097a2994dbcce156755e99b4bcf7e643e91", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode-tailing", "committedDate": "2020-02-14T04:33:09Z", "type": "commit"}, {"oid": "95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "url": "https://github.com/elastic/elasticsearch/commit/95877fcf4f393c50fe9a2f903fd48ea0576e15c3", "message": "Address feedback", "committedDate": "2020-02-14T04:33:35Z", "type": "commit"}, {"oid": "a34e3ca550ea7c539000ea65b3375ce42f8c3818", "url": "https://github.com/elastic/elasticsearch/commit/a34e3ca550ea7c539000ea65b3375ce42f8c3818", "message": "Revert accidental change", "committedDate": "2020-02-14T04:39:58Z", "type": "commit"}, {"oid": "88a3e62d17d2f48c4dfc5ac1d49027483cbb52c2", "url": "https://github.com/elastic/elasticsearch/commit/88a3e62d17d2f48c4dfc5ac1d49027483cbb52c2", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode-tailing", "committedDate": "2020-02-21T01:41:10Z", "type": "commit"}, {"oid": "e1eca99389a6f6e202959695c958c7812fec9222", "url": "https://github.com/elastic/elasticsearch/commit/e1eca99389a6f6e202959695c958c7812fec9222", "message": "Remove low value comments", "committedDate": "2020-02-21T01:51:27Z", "type": "commit"}]}