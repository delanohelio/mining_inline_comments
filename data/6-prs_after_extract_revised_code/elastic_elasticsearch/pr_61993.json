{"pr_number": 61993, "pr_title": "Add data stream support to CCR", "pr_createdAt": "2020-09-04T13:56:32Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61993", "timeline": [{"oid": "03298b6ec83da4e8a10bc2f25e2689c46246d1e8", "url": "https://github.com/elastic/elasticsearch/commit/03298b6ec83da4e8a10bc2f25e2689c46246d1e8", "message": "Add data stream support to CCR\n\nThis commit adds support data stream support to CCR's auto following by making the following changes:\n* When the auto follow coordinator iterates over the candidate indices to follow,\n  the auto follow coordinator also checks whether the index is part of a data stream and\n  if the name of data stream also matches with the auto follow pattern then the index\n  will be auto followed.\n* When following an index, the put follow api also checks whether that index is part\n  of a data stream and if so then also replicates the data stream definition to the\n  local cluster.\n* In order for the follow index api to determine whether an index is part of a data\n  stream, the cluster state api was modified to also fetch the data stream definition\n  of the cluster state if only the state is queried for specific indices.\n\nWhen a data stream is auto followed, only new backing indices are auto followed.\nThis is in line with how time based indices patterns are replicated today. This\nmeans that the data stream isn't copied 1 to 1 into the local cluster. The local\ncluster's data stream definition contains the same name, timestamp field and\ngeneration, but the list of backing indices may be different (depending on when\na data stream was auto followed).\n\nCloses #56259", "committedDate": "2020-09-04T13:54:22Z", "type": "commit"}, {"oid": "ca215b1bd2106b981e8827d78fef35d0757b9b74", "url": "https://github.com/elastic/elasticsearch/commit/ca215b1bd2106b981e8827d78fef35d0757b9b74", "message": "Merge remote-tracking branch 'es/master' into ccr_data_stream_support", "committedDate": "2020-09-07T14:06:01Z", "type": "commit"}, {"oid": "206fbf05782519f7da1f3735e30e0d967575680c", "url": "https://github.com/elastic/elasticsearch/commit/206fbf05782519f7da1f3735e30e0d967575680c", "message": "move the check that checks parent data stream after the check whether index actually exists", "committedDate": "2020-09-07T14:11:42Z", "type": "commit"}, {"oid": "addf40f637e1c4ba0e14239501e0ec92d9d77335", "url": "https://github.com/elastic/elasticsearch/commit/addf40f637e1c4ba0e14239501e0ec92d9d77335", "message": "delete auto follow pattern after test", "committedDate": "2020-09-07T15:26:26Z", "type": "commit"}, {"oid": "40236726f06b7a4f76016d11b909c0b5c3a8ac20", "url": "https://github.com/elastic/elasticsearch/commit/40236726f06b7a4f76016d11b909c0b5c3a8ac20", "message": "Merge remote-tracking branch 'es/master' into ccr_data_stream_support", "committedDate": "2020-09-21T08:23:04Z", "type": "commit"}, {"oid": "606da3dd85f1f8b0ffe99070d8b9ed290113eba3", "url": "https://github.com/elastic/elasticsearch/commit/606da3dd85f1f8b0ffe99070d8b9ed290113eba3", "message": "added tests and docs", "committedDate": "2020-09-21T12:05:08Z", "type": "commit"}, {"oid": "551adc88f55afd843389a7de5cbb47b5999020a0", "url": "https://github.com/elastic/elasticsearch/commit/551adc88f55afd843389a7de5cbb47b5999020a0", "message": "updated jdocs", "committedDate": "2020-09-21T12:18:19Z", "type": "commit"}, {"oid": "f81cc8b0e4a5586507aeca096c4b1e1a7cced1d7", "url": "https://github.com/elastic/elasticsearch/commit/f81cc8b0e4a5586507aeca096c4b1e1a7cced1d7", "message": "iter", "committedDate": "2020-09-21T13:10:58Z", "type": "commit"}, {"oid": "2e9cd8fc3db9ae5a5dacfc398d2982f3179bd675", "url": "https://github.com/elastic/elasticsearch/commit/2e9cd8fc3db9ae5a5dacfc398d2982f3179bd675", "message": "Merge branch 'master' into ccr_data_stream_support", "committedDate": "2020-09-23T02:23:40Z", "type": "commit"}, {"oid": "715dfe3532cbfc17fc84512ba6be168b973e0449", "url": "https://github.com/elastic/elasticsearch/commit/715dfe3532cbfc17fc84512ba6be168b973e0449", "message": "Merge remote-tracking branch 'es/master' into ccr_data_stream_support", "committedDate": "2020-09-28T11:43:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkzNjA0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r497936042", "bodyText": "Can you add a test where an auto-follow pattern is added after the leader cluster has created a data stream?", "author": "dnhatn", "createdAt": "2020-10-01T02:01:37Z", "path": "x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java", "diffHunk": "@@ -163,12 +172,142 @@ public void testPutAutoFollowPatternThatOverridesRequiredLeaderSetting() throws\n         );\n     }\n \n+    public void testDataStreams() throws Exception {", "originalCommit": "715dfe3532cbfc17fc84512ba6be168b973e0449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71e2932a40b22792b5a2294f6d662c5169161bfd", "chunk": "diff --git a/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java\nindex 887ad9ffb1d..18d7af819cc 100644\n--- a/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java\n+++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java\n\n@@ -179,7 +181,6 @@ public class AutoFollowIT extends ESCCRRestTestCase {\n \n         final int numDocs = 64;\n         final String dataStreamName = \"logs-mysql-error\";\n-        final SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss\", Locale.ROOT);\n \n         int initialNumberOfSuccessfulFollowedIndices = getNumberOfSuccessfulFollowedIndices();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk0MzQ3NA==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r497943474", "bodyText": "Can we make this change directly in RestoreService? A SnapshotInfo from CcrReposity should contain the data streams from the leader cluster?", "author": "dnhatn", "createdAt": "2020-10-01T02:13:16Z", "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java", "diffHunk": "@@ -158,9 +165,24 @@ public void onFailure(Exception e) {\n \n             @Override\n             protected void doRun() {\n-                restoreService.restoreSnapshot(restoreRequest,\n-                    ActionListener.delegateFailure(listener,\n-                        (delegatedListener, response) -> afterRestoreStarted(clientWithHeaders, request, delegatedListener, response)));\n+                ActionListener<RestoreService.RestoreCompletionResponse> delegatelistener = ActionListener.delegateFailure(\n+                    listener,\n+                    (delegatedListener, response) -> afterRestoreStarted(clientWithHeaders, request, delegatedListener, response)\n+                );\n+                if (remoteDataStream == null) {\n+                    restoreService.restoreSnapshot(restoreRequest, delegatelistener);\n+                } else {\n+                    String followerIndexName = request.getFollowerIndex();\n+                    BiConsumer<ClusterState, Metadata.Builder> updater = (currentState, mdBuilder) -> {", "originalCommit": "715dfe3532cbfc17fc84512ba6be168b973e0449", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMDA4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r498100089", "bodyText": "Let me see if that works. If so, then I agree that is a cleaner change.", "author": "martijnvg", "createdAt": "2020-10-01T09:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk0MzQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5MzI2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r508593266", "bodyText": "The RestoreService currently only restores the data stream metadata if a data stream needs to be restored or an entire snapshot. In the case that a specific backing index is restored the associated data stream isn't restored. The put follow only 'restores' a backing index at a time and if this logic would be included in RestoreService then I think we always need to load and check global metadata state in order to determine whether an index is a backing index of a data stream (when #61525 is merged then some backing indices may not follow the backing index naming scheme).\nI think we would need to introduce additional parameter on RestoreSnapshotRequest to indicate that we intent to restore a backing index and therefor the associated data stream should be restored as well (or existing local data stream should be updated). Otherwise regular restore operations would always need to load the global metadata state in order to determine whether an index is a backing index of a data stream. Do you think that this is still an improvement over the current logic?", "author": "martijnvg", "createdAt": "2020-10-20T15:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk0MzQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyNzc2MA==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r513727760", "bodyText": "Ok, let's keep the current implementation. We can look into the improvement once the datastream becomes mature.", "author": "dnhatn", "createdAt": "2020-10-28T20:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk0MzQ3NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c5ec9a68625c98ab9dfe353d77e7a0d7d3978b0b", "url": "https://github.com/elastic/elasticsearch/commit/c5ec9a68625c98ab9dfe353d77e7a0d7d3978b0b", "message": "Applying @lockewritesdocs' doc suggestion.\n\nCo-authored-by: Adam Locke <adam.locke@elastic.co>", "committedDate": "2020-10-19T13:12:08Z", "type": "commit"}, {"oid": "520b8c1110c513a4505418074dde8df5841516ac", "url": "https://github.com/elastic/elasticsearch/commit/520b8c1110c513a4505418074dde8df5841516ac", "message": "Merge remote-tracking branch 'es/master' into ccr_data_stream_support", "committedDate": "2020-10-19T13:17:00Z", "type": "commit"}, {"oid": "71e2932a40b22792b5a2294f6d662c5169161bfd", "url": "https://github.com/elastic/elasticsearch/commit/71e2932a40b22792b5a2294f6d662c5169161bfd", "message": "Make use of builtin composable index template for logs-* and\nadded test that follows a data stream after its creation.", "committedDate": "2020-10-20T09:21:08Z", "type": "commit"}, {"oid": "8d4cf01b58c667de57c67880aba669d1ee7c1ef7", "url": "https://github.com/elastic/elasticsearch/commit/8d4cf01b58c667de57c67880aba669d1ee7c1ef7", "message": "Ensure the ordering of the backing indices in the follow cluster takes the generation into account.", "committedDate": "2020-10-20T11:15:07Z", "type": "commit"}, {"oid": "1d705625937484c0878799820a1d377eb7df4b3d", "url": "https://github.com/elastic/elasticsearch/commit/1d705625937484c0878799820a1d377eb7df4b3d", "message": "removed unused imports", "committedDate": "2020-10-20T12:15:12Z", "type": "commit"}, {"oid": "abe709406e3fb2e274f9490467d9e787bc9adb30", "url": "https://github.com/elastic/elasticsearch/commit/abe709406e3fb2e274f9490467d9e787bc9adb30", "message": "Throw a specific error when attempting to follow a data stream or alias.", "committedDate": "2020-10-20T12:45:53Z", "type": "commit"}, {"oid": "261ce1c5865468d4e6697ec07b8539c9b198bd08", "url": "https://github.com/elastic/elasticsearch/commit/261ce1c5865468d4e6697ec07b8539c9b198bd08", "message": "Prohibit changing a backing index name when during follow index.", "committedDate": "2020-10-20T13:01:49Z", "type": "commit"}, {"oid": "d042d00053903280038d75455e6ce648cfe26f9e", "url": "https://github.com/elastic/elasticsearch/commit/d042d00053903280038d75455e6ce648cfe26f9e", "message": "Merge remote-tracking branch 'es/master' into ccr_data_stream_support", "committedDate": "2020-10-21T14:24:28Z", "type": "commit"}, {"oid": "498a1ff8d6b8a378ea2aa7d2e4c3cc24beb1d8f0", "url": "https://github.com/elastic/elasticsearch/commit/498a1ff8d6b8a378ea2aa7d2e4c3cc24beb1d8f0", "message": "Merge remote-tracking branch 'es/master' into ccr_data_stream_support", "committedDate": "2020-10-28T08:44:30Z", "type": "commit"}, {"oid": "efac2e45687d828f0cf7fb587289ed53f6ff9a82", "url": "https://github.com/elastic/elasticsearch/commit/efac2e45687d828f0cf7fb587289ed53f6ff9a82", "message": "fixed compile errors after merging in master", "committedDate": "2020-10-28T09:08:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDE1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r513730159", "bodyText": "I think we can't use the generation from the remoteDataStream as it will break the assertion in DataStream's constructor. For example, here we are following .ds-1 and the ds generation on the remote is 2 already.", "author": "dnhatn", "createdAt": "2020-10-28T20:11:24Z", "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java", "diffHunk": "@@ -211,6 +244,29 @@ private void initiateFollowing(\n         ));\n     }\n \n+    static DataStream updateLocalDataStream(Index backingIndexToFollow,\n+                                            DataStream localDataStream,\n+                                            DataStream remoteDataStream) {\n+        if (localDataStream == null) {\n+            // The data stream and the backing indices have been created and validated in the remote cluster,\n+            // just copying the data stream is in this case safe.\n+            return new DataStream(remoteDataStream.getName(), remoteDataStream.getTimeStampField(),", "originalCommit": "efac2e45687d828f0cf7fb587289ed53f6ff9a82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0NDU5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r514244599", "bodyText": "That assertion will be removed: https://github.com/elastic/elasticsearch/pull/61525/files#diff-c1a5087d37ad81d4b2339167eadc38bcee234a4f7d646b7b4b193ae665075334L60\nThis to support migrating write alias with indices to a data stream. It was added as sanity check\ninitially, because backing indices were created by Elasticsearch exclusively.", "author": "martijnvg", "createdAt": "2020-10-29T13:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MjAwNg==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r516082006", "bodyText": "Ok", "author": "dnhatn", "createdAt": "2020-11-02T16:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDE1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDU4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r513730581", "bodyText": "What if the generation of the local datastream is higher than the remote?", "author": "dnhatn", "createdAt": "2020-10-28T20:12:10Z", "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutFollowAction.java", "diffHunk": "@@ -211,6 +244,29 @@ private void initiateFollowing(\n         ));\n     }\n \n+    static DataStream updateLocalDataStream(Index backingIndexToFollow,\n+                                            DataStream localDataStream,\n+                                            DataStream remoteDataStream) {\n+        if (localDataStream == null) {\n+            // The data stream and the backing indices have been created and validated in the remote cluster,\n+            // just copying the data stream is in this case safe.\n+            return new DataStream(remoteDataStream.getName(), remoteDataStream.getTimeStampField(),\n+                List.of(backingIndexToFollow), remoteDataStream.getGeneration(), remoteDataStream.getMetadata());\n+        } else {\n+            List<Index> backingIndices = new ArrayList<>(localDataStream.getIndices());\n+            backingIndices.add(backingIndexToFollow);\n+\n+            // When following an older backing index it should be positioned before the newer backing indices.\n+            // Currently the assumption is that the newest index (highest generation) is the write index.\n+            // (just appending an older backing index to the list of backing indices would break that assumption)\n+            // (string sorting works because of the naming backing index naming scheme)\n+            backingIndices.sort(Comparator.comparing(Index::getName));\n+\n+            return new DataStream(localDataStream.getName(), localDataStream.getTimeStampField(), backingIndices,", "originalCommit": "efac2e45687d828f0cf7fb587289ed53f6ff9a82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI1MzU0MA==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r514253540", "bodyText": "The generation isn't really used yet, so there isn't a real consequence when the local data stream's generation is higher than the leader's data stream.\nThis would happen if the local data stream would be rollover independently. This is possible, but shouldn't really happen. Because that would create an index that doesn't follow anything and will remain empty and unused. The rollover should only occur in the remote cluster.\nSo I think we should try to prevent data streams from being rolled over when that data stream is actually just following another data stream. What I think we can do for this is add a flag to a data stream that it is replicated and a rollover would disallow rolling over a replicated data stream. When unfollowing that data stream, the replicate flag would be unset. What do you think about this?", "author": "martijnvg", "createdAt": "2020-10-29T13:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MTM1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r516081357", "bodyText": "So I think we should try to prevent data streams from being rolled over when that data stream is actually just following another data stream. What I think we can do for this is add a flag to a data stream that it is replicated and a rollover would disallow rolling over a replicated data stream. When unfollowing that data stream, the replicate flag would be unset. What do you think about this?\n\n+1. This makes a lot of sense.", "author": "dnhatn", "createdAt": "2020-11-02T16:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNjE3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r516406172", "bodyText": "Martijn will implement this in a follow up.", "author": "dnhatn", "createdAt": "2020-11-03T03:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxOTU5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61993#discussion_r516519593", "bodyText": "Yes, in a followup PR, I will add an additional field to DataStream class that indicates that it is a replicated data stream. Then in the rollover api validation will be added that prevents rolling over a replicated data stream.", "author": "martijnvg", "createdAt": "2020-11-03T09:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDU4MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "94827c3b677995e5a8c3869d573b5936187ed98d", "url": "https://github.com/elastic/elasticsearch/commit/94827c3b677995e5a8c3869d573b5936187ed98d", "message": "Merge remote-tracking branch 'es/master' into ccr_data_stream_support", "committedDate": "2020-11-03T09:15:34Z", "type": "commit"}]}