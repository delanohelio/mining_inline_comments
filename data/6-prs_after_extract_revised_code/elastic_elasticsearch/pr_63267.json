{"pr_number": 63267, "pr_title": "Improve WriteScope in ir tree write phase", "pr_createdAt": "2020-10-05T17:07:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63267", "timeline": [{"oid": "0a1b5ed092704a1c25d1509213b16966d263c9c1", "url": "https://github.com/elastic/elasticsearch/commit/0a1b5ed092704a1c25d1509213b16966d263c9c1", "message": "make location final in IRNode", "committedDate": "2020-09-26T16:39:29Z", "type": "commit"}, {"oid": "7d62d0752fb2a99ae998fcab291c0f709bded0f5", "url": "https://github.com/elastic/elasticsearch/commit/7d62d0752fb2a99ae998fcab291c0f709bded0f5", "message": "add scoping for script, class, and method to WriteScope", "committedDate": "2020-09-26T17:18:49Z", "type": "commit"}, {"oid": "712b0a8965bba0939acd0f8e73932796eddc7238", "url": "https://github.com/elastic/elasticsearch/commit/712b0a8965bba0939acd0f8e73932796eddc7238", "message": "update scope to include classwriter and methodwriter", "committedDate": "2020-09-26T17:36:01Z", "type": "commit"}, {"oid": "8e38647855a1c5cca0c30a3f7e43f71c5d164edf", "url": "https://github.com/elastic/elasticsearch/commit/8e38647855a1c5cca0c30a3f7e43f71c5d164edf", "message": "move loop labels to writescope", "committedDate": "2020-09-26T17:56:22Z", "type": "commit"}, {"oid": "65502b186dbd52a0c784a52a83b1fb659e3a6abc", "url": "https://github.com/elastic/elasticsearch/commit/65502b186dbd52a0c784a52a83b1fb659e3a6abc", "message": "move try/catch labels to WriteScope", "committedDate": "2020-09-26T18:22:52Z", "type": "commit"}, {"oid": "ae8d2a1f12069641171f0013205b5887c7dfcd6a", "url": "https://github.com/elastic/elasticsearch/commit/ae8d2a1f12069641171f0013205b5887c7dfcd6a", "message": "Merge branch 'master' into proto", "committedDate": "2020-09-30T14:38:56Z", "type": "commit"}, {"oid": "760b9b940997249b18947d6da787d338f2a9dc38", "url": "https://github.com/elastic/elasticsearch/commit/760b9b940997249b18947d6da787d338f2a9dc38", "message": "Merge branch 'master' into proto", "committedDate": "2020-10-05T16:36:09Z", "type": "commit"}, {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "url": "https://github.com/elastic/elasticsearch/commit/b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "message": "Merge branch 'proto' into proto2", "committedDate": "2020-10-05T17:04:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MDc4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500490786", "bodyText": "This is weird.", "author": "stu-elastic", "createdAt": "2020-10-06T17:57:57Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -96,15 +92,14 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, WriteSc\n         methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n \n         if (blockNode != null) {\n-            blockNode.continueLabel = continueLabel;\n-            blockNode.breakLabel = breakLabel;\n-            blockNode.write(classWriter, methodWriter, writeScope);\n+            blockNode.write(writeScope.newTryScope(null, null, null));", "originalCommit": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MTIzOA==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501981238", "bodyText": "Agreed, updated scoping to improve the handling for this unique case.", "author": "jdconrad", "createdAt": "2020-10-08T20:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MDc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java\nindex 3ec0e4fab23..54c95e6e114 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java\n\n@@ -92,14 +96,15 @@ public class CatchNode extends StatementNode {\n         methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n \n         if (blockNode != null) {\n-            blockNode.write(writeScope.newTryScope(null, null, null));\n+            blockNode.continueLabel = continueLabel;\n+            blockNode.breakLabel = breakLabel;\n+            blockNode.write(classWriter, methodWriter, writeScope);\n         }\n \n-        methodWriter.visitTryCatchBlock(\n-                writeScope.getTryBeginLabel(), writeScope.getTryEndLabel(), jump, variable.getAsmType().getInternalName());\n+        methodWriter.visitTryCatchBlock(begin, end, jump, variable.getAsmType().getInternalName());\n \n-        if (writeScope.getCatchesEndLabel() != null && (blockNode == null || blockNode.doAllEscape() == false)) {\n-            methodWriter.goTo(writeScope.getCatchesEndLabel());\n+        if (exception != null && (blockNode == null || blockNode.doAllEscape() == false)) {\n+            methodWriter.goTo(exception);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjM2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500492362", "bodyText": "Why does method stuff things into the write scope to just pull them out?  Maybe visitTryCatchBlock can take in a WriteScope?", "author": "stu-elastic", "createdAt": "2020-10-06T18:00:27Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java", "diffHunk": "@@ -96,15 +92,14 @@ protected void write(ClassWriter classWriter, MethodWriter methodWriter, WriteSc\n         methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n \n         if (blockNode != null) {\n-            blockNode.continueLabel = continueLabel;\n-            blockNode.breakLabel = breakLabel;\n-            blockNode.write(classWriter, methodWriter, writeScope);\n+            blockNode.write(writeScope.newTryScope(null, null, null));\n         }\n \n-        methodWriter.visitTryCatchBlock(begin, end, jump, variable.getAsmType().getInternalName());\n+        methodWriter.visitTryCatchBlock(\n+                writeScope.getTryBeginLabel(), writeScope.getTryEndLabel(), jump, variable.getAsmType().getInternalName());", "originalCommit": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NTU1MA==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501975550", "bodyText": "This is the actual method to write the ASM instruction for a try/catch block and requires all these labels.", "author": "jdconrad", "createdAt": "2020-10-08T19:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java\nindex 3ec0e4fab23..54c95e6e114 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/CatchNode.java\n\n@@ -92,14 +96,15 @@ public class CatchNode extends StatementNode {\n         methodWriter.visitVarInsn(variable.getAsmType().getOpcode(Opcodes.ISTORE), variable.getSlot());\n \n         if (blockNode != null) {\n-            blockNode.write(writeScope.newTryScope(null, null, null));\n+            blockNode.continueLabel = continueLabel;\n+            blockNode.breakLabel = breakLabel;\n+            blockNode.write(classWriter, methodWriter, writeScope);\n         }\n \n-        methodWriter.visitTryCatchBlock(\n-                writeScope.getTryBeginLabel(), writeScope.getTryEndLabel(), jump, variable.getAsmType().getInternalName());\n+        methodWriter.visitTryCatchBlock(begin, end, jump, variable.getAsmType().getInternalName());\n \n-        if (writeScope.getCatchesEndLabel() != null && (blockNode == null || blockNode.doAllEscape() == false)) {\n-            methodWriter.goTo(writeScope.getCatchesEndLabel());\n+        if (exception != null && (blockNode == null || blockNode.doAllEscape() == false)) {\n+            methodWriter.goTo(exception);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NjE4OA==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500496188", "bodyText": "This doesn't seem relevant to this PR.", "author": "stu-elastic", "createdAt": "2020-10-06T18:06:52Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -19,15 +19,85 @@\n \n package org.elasticsearch.painless.ir;\n \n-import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.Location;\n-import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n import org.elasticsearch.painless.symbol.WriteScope;\n \n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n public abstract class IRNode {\n \n-    /* ---- begin node data ---- */\n+    /* ---- begin decorations ---- */\n+\n+    public interface IRDecoration {\n+\n+    }\n+\n+    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n+\n+    @SuppressWarnings(\"unchecked\")", "originalCommit": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MTcxMw==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501981713", "bodyText": "Yup, this is for the next PR. (Oops!) Removed.", "author": "jdconrad", "createdAt": "2020-10-08T20:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NjE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\nindex 4101cb212eb..c677701536d 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\n\n@@ -19,85 +19,15 @@\n \n package org.elasticsearch.painless.ir;\n \n+import org.elasticsearch.painless.ClassWriter;\n import org.elasticsearch.painless.Location;\n+import org.elasticsearch.painless.MethodWriter;\n import org.elasticsearch.painless.phase.IRTreeVisitor;\n import org.elasticsearch.painless.symbol.WriteScope;\n \n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n public abstract class IRNode {\n \n-    /* ---- begin decorations ---- */\n-\n-    public interface IRDecoration {\n-\n-    }\n-\n-    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends IRDecoration> T attachDecoration(T decoration) {\n-        return (T)decorations.put(decoration.getClass(), decoration);\n-    }\n-\n-    public <T extends IRDecoration> T removeDecoration(Class<T> type) {\n-        return type.cast(decorations.remove(type));\n-    }\n-\n-    public <T extends IRDecoration> T getDecoration(Class<T> type) {\n-        return type.cast(decorations.get(type));\n-    }\n-\n-    public boolean hasDecoration(Class<? extends IRDecoration> type) {\n-        return decorations.containsKey(type);\n-    }\n-\n-    public <T extends IRDecoration> boolean copyDecorationFrom(IRNode copyFromIRNode, Class<T> type) {\n-        T decoration = copyFromIRNode.getDecoration(type);\n-\n-        if (decoration != null) {\n-            attachDecoration(decoration);\n-\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-\n-    /* ---- end decorations, begin conditions ---- */\n-\n-    public interface IRCondition {\n-\n-    }\n-\n-    private final Set<Class<? extends IRCondition>> conditions = new HashSet<>();\n-\n-    public boolean attachCondition(Class<? extends IRCondition> type) {\n-        return conditions.add(type);\n-    }\n-\n-    public boolean removeCondition(Class<? extends IRCondition> type) {\n-        return conditions.remove(type);\n-    }\n-\n-    public boolean hasCondition(Class<? extends IRCondition> type) {\n-        return conditions.contains(type);\n-    }\n-\n-    public boolean copyConditionFrom(IRNode copyFromIRNode, Class<? extends IRCondition> type) {\n-        if (copyFromIRNode.hasCondition(type)) {\n-            attachCondition(type);\n-\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-\n-    /* ---- end conditions, begin node data ---- */\n+    /* ---- begin node data ---- */\n \n     private final Location location;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5OTU4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500499582", "bodyText": "Why?", "author": "stu-elastic", "createdAt": "2020-10-06T18:12:20Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -1727,6 +1727,7 @@ public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n             }\n \n             InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n+", "originalCommit": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MjEzMA==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501982130", "bodyText": "Removed. Accidental.", "author": "jdconrad", "createdAt": "2020-10-08T20:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5OTU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "49397f77f269c06949af28d6a0b33e8f5d653018", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 2d1d2947211..abecf1ac88e 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -1727,7 +1728,6 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n             }\n \n             InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n-\n             PainlessMethod method = scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod();\n             Object[] injections = PainlessLookupUtility.buildInjections(method, scriptScope.getCompilerSettings().asMap());\n             Class<?>[] parameterTypes = method.javaMethod.getParameterTypes();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMDA4OA==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r500500088", "bodyText": "jdoc for each of these protected constructors, just a line.", "author": "stu-elastic", "createdAt": "2020-10-06T18:13:07Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/WriteScope.java", "diffHunk": "@@ -64,21 +66,138 @@ public int getSlot() {\n     }\n \n     protected final WriteScope parent;\n+    protected final ClassWriter classWriter;\n+    protected final MethodWriter methodWriter;\n+    protected final Label continueLabel;\n+    protected final Label breakLabel;\n+    protected final Label tryBeginLabel;\n+    protected final Label tryEndLabel;\n+    protected final Label catchesEndLabel;\n     protected final Map<String, Variable> variables = new HashMap<>();\n     protected int nextSlot;\n \n-    public WriteScope() {\n+    protected WriteScope() {\n         this.parent = null;\n+        this.classWriter = null;\n+        this.methodWriter = null;\n+        this.continueLabel = null;\n+        this.breakLabel = null;\n+        this.tryBeginLabel = null;\n+        this.tryEndLabel = null;\n+        this.catchesEndLabel = null;\n         this.nextSlot = 0;\n     }\n \n-    protected WriteScope(WriteScope parent, int nextSlot) {\n+    protected WriteScope(WriteScope parent, ClassWriter classWriter) {\n         this.parent = parent;\n-        this.nextSlot = nextSlot;\n+        this.classWriter = classWriter;\n+        this.methodWriter = parent.methodWriter;\n+        this.continueLabel = parent.continueLabel;\n+        this.breakLabel = parent.breakLabel;\n+        this.tryBeginLabel = parent.tryBeginLabel;\n+        this.tryEndLabel = parent.tryEndLabel;\n+        this.catchesEndLabel = parent.catchesEndLabel;\n+        this.nextSlot = parent.nextSlot;\n     }\n \n-    public WriteScope newScope() {\n-        return new WriteScope(this, nextSlot);\n+    protected WriteScope(WriteScope parent, MethodWriter methodWriter) {", "originalCommit": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjU3OA==", "url": "https://github.com/elastic/elasticsearch/pull/63267#discussion_r501986578", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-08T20:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMDA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/WriteScope.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/WriteScope.java\nindex c17011626c8..3bb36a61811 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/WriteScope.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/symbol/WriteScope.java\n\n@@ -66,138 +64,21 @@ public class WriteScope {\n     }\n \n     protected final WriteScope parent;\n-    protected final ClassWriter classWriter;\n-    protected final MethodWriter methodWriter;\n-    protected final Label continueLabel;\n-    protected final Label breakLabel;\n-    protected final Label tryBeginLabel;\n-    protected final Label tryEndLabel;\n-    protected final Label catchesEndLabel;\n     protected final Map<String, Variable> variables = new HashMap<>();\n     protected int nextSlot;\n \n-    protected WriteScope() {\n+    public WriteScope() {\n         this.parent = null;\n-        this.classWriter = null;\n-        this.methodWriter = null;\n-        this.continueLabel = null;\n-        this.breakLabel = null;\n-        this.tryBeginLabel = null;\n-        this.tryEndLabel = null;\n-        this.catchesEndLabel = null;\n         this.nextSlot = 0;\n     }\n \n-    protected WriteScope(WriteScope parent, ClassWriter classWriter) {\n+    protected WriteScope(WriteScope parent, int nextSlot) {\n         this.parent = parent;\n-        this.classWriter = classWriter;\n-        this.methodWriter = parent.methodWriter;\n-        this.continueLabel = parent.continueLabel;\n-        this.breakLabel = parent.breakLabel;\n-        this.tryBeginLabel = parent.tryBeginLabel;\n-        this.tryEndLabel = parent.tryEndLabel;\n-        this.catchesEndLabel = parent.catchesEndLabel;\n-        this.nextSlot = parent.nextSlot;\n+        this.nextSlot = nextSlot;\n     }\n \n-    protected WriteScope(WriteScope parent, MethodWriter methodWriter) {\n-        this.parent = parent;\n-        this.classWriter = parent.classWriter;\n-        this.methodWriter = methodWriter;\n-        this.continueLabel = parent.continueLabel;\n-        this.breakLabel = parent.breakLabel;\n-        this.tryBeginLabel = parent.tryBeginLabel;\n-        this.tryEndLabel = parent.tryEndLabel;\n-        this.catchesEndLabel = parent.catchesEndLabel;\n-        this.nextSlot = parent.nextSlot;\n-    }\n-\n-    protected WriteScope(WriteScope parent, Label continueLabel, Label breakLabel) {\n-        this.parent = parent;\n-        this.classWriter = parent.classWriter;\n-        this.methodWriter = parent.methodWriter;\n-        this.continueLabel = continueLabel;\n-        this.breakLabel = breakLabel;\n-        this.tryBeginLabel = parent.tryBeginLabel;\n-        this.tryEndLabel = parent.tryEndLabel;\n-        this.catchesEndLabel = parent.catchesEndLabel;\n-        this.nextSlot = parent.nextSlot;\n-    }\n-\n-    protected WriteScope(WriteScope parent, Label tryBeginLabel, Label tryEndLabel, Label catchesEndLabel) {\n-        this.parent = parent;\n-        this.classWriter = parent.classWriter;\n-        this.methodWriter = parent.methodWriter;\n-        this.continueLabel = parent.continueLabel;\n-        this.breakLabel = parent.breakLabel;\n-        this.tryBeginLabel = tryBeginLabel;\n-        this.tryEndLabel = tryEndLabel;\n-        this.catchesEndLabel = catchesEndLabel;\n-        this.nextSlot = parent.nextSlot;\n-    }\n-\n-    protected WriteScope(WriteScope parent) {\n-        this.parent = parent;\n-        this.classWriter = parent.classWriter;\n-        this.methodWriter = parent.methodWriter;\n-        this.continueLabel = parent.continueLabel;\n-        this.breakLabel = parent.breakLabel;\n-        this.tryBeginLabel = parent.tryBeginLabel;\n-        this.tryEndLabel = parent.tryEndLabel;\n-        this.catchesEndLabel = parent.catchesEndLabel;\n-        this.nextSlot = parent.nextSlot;\n-    }\n-\n-    public static WriteScope newScriptScope() {\n-        return new WriteScope();\n-    }\n-\n-    public WriteScope newClassScope(ClassWriter classWriter) {\n-        return new WriteScope(this, classWriter);\n-    }\n-\n-    public WriteScope newMethodScope(MethodWriter methodWriter) {\n-        return new WriteScope(this, methodWriter);\n-    }\n-\n-    public WriteScope newLoopScope(Label continueLabel, Label breakLabel) {\n-        return new WriteScope(this, continueLabel, breakLabel);\n-    }\n-\n-    public WriteScope newTryScope(Label tryBeginLabel, Label tryEndLabel, Label catchesEndLabel) {\n-        return new WriteScope(this, tryBeginLabel, tryEndLabel, catchesEndLabel);\n-    }\n-\n-    public WriteScope newBlockScope() {\n-        return new WriteScope(this);\n-    }\n-\n-    public ClassWriter getClassWriter() {\n-        return classWriter;\n-    }\n-\n-    public MethodWriter getMethodWriter() {\n-        return methodWriter;\n-    }\n-\n-    public Label getContinueLabel() {\n-        return continueLabel;\n-    }\n-\n-    public Label getBreakLabel() {\n-        return breakLabel;\n-    }\n-\n-    public Label getTryBeginLabel() {\n-        return tryBeginLabel;\n-    }\n-\n-    public Label getTryEndLabel() {\n-        return tryEndLabel;\n-    }\n-\n-    public Label getCatchesEndLabel() {\n-        return catchesEndLabel;\n+    public WriteScope newScope() {\n+        return new WriteScope(this, nextSlot);\n     }\n \n     public Variable defineVariable(Class<?> type, String name) {\n"}}, {"oid": "527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "url": "https://github.com/elastic/elasticsearch/commit/527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "message": "Merge branch 'master' into proto", "committedDate": "2020-10-08T19:53:15Z", "type": "commit"}, {"oid": "879afcac4496aa42f0d57c3485a94d11575bfe4c", "url": "https://github.com/elastic/elasticsearch/commit/879afcac4496aa42f0d57c3485a94d11575bfe4c", "message": "Merge branch 'proto' into proto2", "committedDate": "2020-10-08T19:53:23Z", "type": "commit"}, {"oid": "49397f77f269c06949af28d6a0b33e8f5d653018", "url": "https://github.com/elastic/elasticsearch/commit/49397f77f269c06949af28d6a0b33e8f5d653018", "message": "response to pr comments", "committedDate": "2020-10-08T20:17:35Z", "type": "commit"}]}