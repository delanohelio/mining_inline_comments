{"pr_number": 50866, "pr_title": "QL: Extend NodeSubclass to read classes from jars", "pr_createdAt": "2020-01-10T18:03:11Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50866", "timeline": [{"oid": "4e8ffa1add786841ba3819fa75074a8d4da330d2", "url": "https://github.com/elastic/elasticsearch/commit/4e8ffa1add786841ba3819fa75074a8d4da330d2", "message": "Extend NodeSubclass to read classes from jars\n\nAs the test classes are spread across more than one project, the Gradle\nclasspath contains not just folders but also jars.\nThis commit allows the test class to explore the archive content and\nload matching classes from said source.", "committedDate": "2020-01-10T17:59:40Z", "type": "commit"}, {"oid": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef", "url": "https://github.com/elastic/elasticsearch/commit/a9386b26b9b7c82de0dff59a5ba63150dcda1fef", "message": "Fix forbiddenApi", "committedDate": "2020-01-10T19:25:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyMDc4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366220785", "bodyText": "Is !/ intended as a visual marker in the path? The location is later only used for the message in the Exception, so I guess so, but curious about it.", "author": "bpintea", "createdAt": "2020-01-14T09:08:59Z", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "diffHunk": "@@ -618,45 +622,77 @@ protected boolean hasAtLeastTwoChildren(Class<? extends Node<?>> toBuildClass) {\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n             int rootLength = root.toString().length() + 1;\n-            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n-                        String className = file.toString();\n-                        // Chop off the root and file extension\n-                        className = className.substring(rootLength, className.length() - \".class\".length());\n-                        // Go from \"path\" style to class style\n-                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n-\n-                        // filter the class that are not interested\n-                        // (and IDE folders like eclipse)\n-                        if (!className.startsWith(\"org.elasticsearch.xpack.ql\") && !className.startsWith(\"org.elasticsearch.xpack.sql\")) {\n-                            return FileVisitResult.CONTINUE;\n-                        }\n-\n-                        Class<?> c;\n-                        try {\n-                            c = Class.forName(className);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new IOException(\"Couldn't find \" + file, e);\n-                        }\n \n-                        if (false == Modifier.isAbstract(c.getModifiers())\n-                                && false == c.isAnonymousClass()\n-                                && clazz.isAssignableFrom(c)) {\n-                            Class<? extends T> s = c.asSubclass(clazz);\n-                            results.add(s);\n+            // load classes from jar files\n+            // NIO FileSystem API is not used since it trips the SecurityManager\n+            // https://bugs.openjdk.java.net/browse/JDK-8160798\n+            // so iterate the jar \"by hand\"\n+            if (path.endsWith(\".jar\") && path.contains(\"x-pack-ql\")) {\n+                try (JarInputStream jar = jarStream(root)) {\n+                    JarEntry je = null;\n+                    while ((je = jar.getNextJarEntry()) != null) {\n+                        String name = je.getName();\n+                        if (name.endsWith(\".class\")) {\n+                            String className = name.substring(0, name.length() - \".class\".length()).replace(\"/\", \".\");\n+                            maybeLoadClass(clazz, className, root + \"!/\" + name, results);", "originalCommit": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIzMjg4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366232882", "bodyText": "No, it's a special marker inside the URL to indicate the path inside the archive:\njar:/my/file.jar!/org/my/package/clazz.class", "author": "costin", "createdAt": "2020-01-14T09:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyMDc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ef7c2b5283505589112f5e59955eb29260f4e7b", "chunk": "diff --git a/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java b/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\nindex ed179b1c507..48fe6cdf223 100644\n--- a/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\n+++ b/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\n\n@@ -606,18 +608,18 @@ public class NodeSubclassTests<T extends B, B extends Node<B>> extends ESTestCas\n      * Cache of subclasses. We use a cache because it significantly speeds up\n      * the test.\n      */\n-    private static final Map<Class<?>, List<?>> subclassCache = new HashMap<>();\n+    private static final Map<Class<?>, Set<?>> subclassCache = new HashMap<>();\n \n     /**\n      * Find all subclasses of a particular class.\n      */\n-    public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {\n+    public static <T> Set<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {\n         @SuppressWarnings(\"unchecked\") // The map is built this way\n-        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz);\n+        Set<Class<? extends T>> lookup = (Set<Class<? extends T>>) subclassCache.get(clazz);\n         if (lookup != null) {\n             return lookup;\n         }\n-        List<Class<? extends T>> results = new ArrayList<>();\n+        Set<Class<? extends T>> results = new LinkedHashSet<>();\n         String[] paths = System.getProperty(\"java.class.path\").split(System.getProperty(\"path.separator\"));\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyMDgzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366220831", "bodyText": "Maybe attemptClassLoad()?", "author": "bpintea", "createdAt": "2020-01-14T09:09:06Z", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "diffHunk": "@@ -618,45 +622,77 @@ protected boolean hasAtLeastTwoChildren(Class<? extends Node<?>> toBuildClass) {\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n             int rootLength = root.toString().length() + 1;\n-            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n-                        String className = file.toString();\n-                        // Chop off the root and file extension\n-                        className = className.substring(rootLength, className.length() - \".class\".length());\n-                        // Go from \"path\" style to class style\n-                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n-\n-                        // filter the class that are not interested\n-                        // (and IDE folders like eclipse)\n-                        if (!className.startsWith(\"org.elasticsearch.xpack.ql\") && !className.startsWith(\"org.elasticsearch.xpack.sql\")) {\n-                            return FileVisitResult.CONTINUE;\n-                        }\n-\n-                        Class<?> c;\n-                        try {\n-                            c = Class.forName(className);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new IOException(\"Couldn't find \" + file, e);\n-                        }\n \n-                        if (false == Modifier.isAbstract(c.getModifiers())\n-                                && false == c.isAnonymousClass()\n-                                && clazz.isAssignableFrom(c)) {\n-                            Class<? extends T> s = c.asSubclass(clazz);\n-                            results.add(s);\n+            // load classes from jar files\n+            // NIO FileSystem API is not used since it trips the SecurityManager\n+            // https://bugs.openjdk.java.net/browse/JDK-8160798\n+            // so iterate the jar \"by hand\"\n+            if (path.endsWith(\".jar\") && path.contains(\"x-pack-ql\")) {\n+                try (JarInputStream jar = jarStream(root)) {\n+                    JarEntry je = null;\n+                    while ((je = jar.getNextJarEntry()) != null) {\n+                        String name = je.getName();\n+                        if (name.endsWith(\".class\")) {\n+                            String className = name.substring(0, name.length() - \".class\".length()).replace(\"/\", \".\");\n+                            maybeLoadClass(clazz, className, root + \"!/\" + name, results);\n                         }\n                     }\n-                    return FileVisitResult.CONTINUE;\n                 }\n-            });\n+            }\n+            // for folders, just use the FileSystems API\n+            else {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n+                            String fileName = file.toString();\n+                            // Chop off the root and file extension\n+                            String className = fileName.substring(rootLength, fileName.length() - \".class\".length());\n+                            // Go from \"path\" style to class style\n+                            className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n+                            maybeLoadClass(clazz, className, fileName, results);\n+                        }\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+            }\n         }\n         subclassCache.put(clazz, results);\n         return results;\n     }\n \n+    @SuppressForbidden(reason = \"test reads from jar\")\n+    private static JarInputStream jarStream(Path path) throws IOException {\n+        return new JarInputStream(path.toUri().toURL().openStream());\n+    }\n+\n+    /**\n+     * Load classes from predefined packages (hack to limit the scope) and if they match the hierarchy, add them to the cache\n+     */\n+    private static <T> void maybeLoadClass(Class<T> clazz, String className, String location, List<Class<? extends T>> results)", "originalCommit": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIzMzczNw==", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366233737", "bodyText": "Depending on the name, the class might be loaded or not hence the 'maybe' versus attempt which suggests the loading will happen always (but it might fail).", "author": "costin", "createdAt": "2020-01-14T09:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyMDgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ef7c2b5283505589112f5e59955eb29260f4e7b", "chunk": "diff --git a/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java b/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\nindex ed179b1c507..48fe6cdf223 100644\n--- a/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\n+++ b/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\n\n@@ -606,18 +608,18 @@ public class NodeSubclassTests<T extends B, B extends Node<B>> extends ESTestCas\n      * Cache of subclasses. We use a cache because it significantly speeds up\n      * the test.\n      */\n-    private static final Map<Class<?>, List<?>> subclassCache = new HashMap<>();\n+    private static final Map<Class<?>, Set<?>> subclassCache = new HashMap<>();\n \n     /**\n      * Find all subclasses of a particular class.\n      */\n-    public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {\n+    public static <T> Set<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {\n         @SuppressWarnings(\"unchecked\") // The map is built this way\n-        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz);\n+        Set<Class<? extends T>> lookup = (Set<Class<? extends T>>) subclassCache.get(clazz);\n         if (lookup != null) {\n             return lookup;\n         }\n-        List<Class<? extends T>> results = new ArrayList<>();\n+        Set<Class<? extends T>> results = new LinkedHashSet<>();\n         String[] paths = System.getProperty(\"java.class.path\").split(System.getProperty(\"path.separator\"));\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMjUyNg==", "url": "https://github.com/elastic/elasticsearch/pull/50866#discussion_r366432526", "bodyText": "Shouldn't the results be a Set instead of List?", "author": "matriv", "createdAt": "2020-01-14T16:15:45Z", "path": "x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java", "diffHunk": "@@ -618,45 +622,77 @@ protected boolean hasAtLeastTwoChildren(Class<? extends Node<?>> toBuildClass) {\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n             int rootLength = root.toString().length() + 1;\n-            Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n-\n-                @Override\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                    if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n-                        String className = file.toString();\n-                        // Chop off the root and file extension\n-                        className = className.substring(rootLength, className.length() - \".class\".length());\n-                        // Go from \"path\" style to class style\n-                        className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n-\n-                        // filter the class that are not interested\n-                        // (and IDE folders like eclipse)\n-                        if (!className.startsWith(\"org.elasticsearch.xpack.ql\") && !className.startsWith(\"org.elasticsearch.xpack.sql\")) {\n-                            return FileVisitResult.CONTINUE;\n-                        }\n-\n-                        Class<?> c;\n-                        try {\n-                            c = Class.forName(className);\n-                        } catch (ClassNotFoundException e) {\n-                            throw new IOException(\"Couldn't find \" + file, e);\n-                        }\n \n-                        if (false == Modifier.isAbstract(c.getModifiers())\n-                                && false == c.isAnonymousClass()\n-                                && clazz.isAssignableFrom(c)) {\n-                            Class<? extends T> s = c.asSubclass(clazz);\n-                            results.add(s);\n+            // load classes from jar files\n+            // NIO FileSystem API is not used since it trips the SecurityManager\n+            // https://bugs.openjdk.java.net/browse/JDK-8160798\n+            // so iterate the jar \"by hand\"\n+            if (path.endsWith(\".jar\") && path.contains(\"x-pack-ql\")) {\n+                try (JarInputStream jar = jarStream(root)) {\n+                    JarEntry je = null;\n+                    while ((je = jar.getNextJarEntry()) != null) {\n+                        String name = je.getName();\n+                        if (name.endsWith(\".class\")) {\n+                            String className = name.substring(0, name.length() - \".class\".length()).replace(\"/\", \".\");\n+                            maybeLoadClass(clazz, className, root + \"!/\" + name, results);\n                         }\n                     }\n-                    return FileVisitResult.CONTINUE;\n                 }\n-            });\n+            }\n+            // for folders, just use the FileSystems API\n+            else {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        if (Files.isRegularFile(file) && file.getFileName().toString().endsWith(\".class\")) {\n+                            String fileName = file.toString();\n+                            // Chop off the root and file extension\n+                            String className = fileName.substring(rootLength, fileName.length() - \".class\".length());\n+                            // Go from \"path\" style to class style\n+                            className = className.replace(PathUtils.getDefaultFileSystem().getSeparator(), \".\");\n+                            maybeLoadClass(clazz, className, fileName, results);\n+                        }\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+            }\n         }\n         subclassCache.put(clazz, results);\n         return results;\n     }\n \n+    @SuppressForbidden(reason = \"test reads from jar\")\n+    private static JarInputStream jarStream(Path path) throws IOException {\n+        return new JarInputStream(path.toUri().toURL().openStream());\n+    }\n+\n+    /**\n+     * Load classes from predefined packages (hack to limit the scope) and if they match the hierarchy, add them to the cache\n+     */\n+    private static <T> void maybeLoadClass(Class<T> clazz, String className, String location, List<Class<? extends T>> results)", "originalCommit": "a9386b26b9b7c82de0dff59a5ba63150dcda1fef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ef7c2b5283505589112f5e59955eb29260f4e7b", "chunk": "diff --git a/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java b/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\nindex ed179b1c507..48fe6cdf223 100644\n--- a/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\n+++ b/x-pack/plugin/ql/src/test/java/org/elasticsearch/xpack/ql/tree/NodeSubclassTests.java\n\n@@ -606,18 +608,18 @@ public class NodeSubclassTests<T extends B, B extends Node<B>> extends ESTestCas\n      * Cache of subclasses. We use a cache because it significantly speeds up\n      * the test.\n      */\n-    private static final Map<Class<?>, List<?>> subclassCache = new HashMap<>();\n+    private static final Map<Class<?>, Set<?>> subclassCache = new HashMap<>();\n \n     /**\n      * Find all subclasses of a particular class.\n      */\n-    public static <T> List<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {\n+    public static <T> Set<Class<? extends T>> subclassesOf(Class<T> clazz) throws IOException {\n         @SuppressWarnings(\"unchecked\") // The map is built this way\n-        List<Class<? extends T>> lookup = (List<Class<? extends T>>) subclassCache.get(clazz);\n+        Set<Class<? extends T>> lookup = (Set<Class<? extends T>>) subclassCache.get(clazz);\n         if (lookup != null) {\n             return lookup;\n         }\n-        List<Class<? extends T>> results = new ArrayList<>();\n+        Set<Class<? extends T>> results = new LinkedHashSet<>();\n         String[] paths = System.getProperty(\"java.class.path\").split(System.getProperty(\"path.separator\"));\n         for (String path: paths) {\n             Path root = PathUtils.get(path);\n"}}, {"oid": "9ef7c2b5283505589112f5e59955eb29260f4e7b", "url": "https://github.com/elastic/elasticsearch/commit/9ef7c2b5283505589112f5e59955eb29260f4e7b", "message": "Keep the results in a Set (instead of List)", "committedDate": "2020-01-14T20:09:35Z", "type": "commit"}, {"oid": "9ef7c2b5283505589112f5e59955eb29260f4e7b", "url": "https://github.com/elastic/elasticsearch/commit/9ef7c2b5283505589112f5e59955eb29260f4e7b", "message": "Keep the results in a Set (instead of List)", "committedDate": "2020-01-14T20:09:35Z", "type": "forcePushed"}, {"oid": "e0c1462a2e01b88990921103527d6f9e6f589a74", "url": "https://github.com/elastic/elasticsearch/commit/e0c1462a2e01b88990921103527d6f9e6f589a74", "message": "Merge remote-tracking branch 'remotes/upstream/master' into ql/fix-test-jar-classpath", "committedDate": "2020-01-14T20:21:23Z", "type": "commit"}]}