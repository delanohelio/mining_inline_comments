{"pr_number": 51648, "pr_title": "[ML][Inference] Fix weighted mode definition", "pr_createdAt": "2020-01-29T21:15:10Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51648", "timeline": [{"oid": "5814f7b4700c2f3fce40fbbeb793173557141c04", "url": "https://github.com/elastic/elasticsearch/commit/5814f7b4700c2f3fce40fbbeb793173557141c04", "message": "[ML][Inference] Fix weighted mode definition", "committedDate": "2020-01-29T21:13:15Z", "type": "commit"}, {"oid": "5814f7b4700c2f3fce40fbbeb793173557141c04", "url": "https://github.com/elastic/elasticsearch/commit/5814f7b4700c2f3fce40fbbeb793173557141c04", "message": "[ML][Inference] Fix weighted mode definition", "committedDate": "2020-01-29T21:13:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwOTE2NA==", "url": "https://github.com/elastic/elasticsearch/pull/51648#discussion_r372809164", "bodyText": "Probably it's ok here but I'd reverse the order so that the constant is first (useful if we suspect null argument):\nreturn TargetType.CLASSIFICATION.equals(targetType);", "author": "przemekwitek", "createdAt": "2020-01-30T08:18:22Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/ensemble/WeightedMode.java", "diffHunk": "@@ -133,7 +146,7 @@ public String getName() {\n \n     @Override\n     public boolean compatibleWith(TargetType targetType) {\n-        return true;\n+        return targetType.equals(TargetType.CLASSIFICATION);", "originalCommit": "5814f7b4700c2f3fce40fbbeb793173557141c04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwOTYyMg==", "url": "https://github.com/elastic/elasticsearch/pull/51648#discussion_r372809622", "bodyText": "Where does this string come from? Could we have a resource file with plain text instead?", "author": "przemekwitek", "createdAt": "2020-01-30T08:19:37Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelDefinitionTests.java", "diffHunk": "@@ -302,4 +306,67 @@ public void testRamUsageEstimation() {\n         assertThat(test.ramBytesUsed(), greaterThan(0L));\n     }\n \n+    public void testMultiClassIrisInference() throws IOException {\n+        // Fairly simple, random forest classification model built to fit in our format\n+        // Trained on the well known Iris dataset\n+        String compressedDef = \"H4sIAMHqMV4C/+1b7Y6bOhB9lVV+b5HHX9h9g/sMVYVo4iRIbBIBaXtV9d0vJr23uzGKJwwsu\" +", "originalCommit": "5814f7b4700c2f3fce40fbbeb793173557141c04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkxNzMwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51648#discussion_r372917309", "bodyText": "Its a model, the comment says as much. Writing a multi-class model by hand that adequately test paths in a semi-non-trivial way was becoming frustrating.\nThis model was specifically trained in scikit-learn and transformed into our format.\nThis is the only test that utilizes this string. It is not out of the ordinary to have tests access an immutable string.", "author": "benwtrent", "createdAt": "2020-01-30T12:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwOTYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "eee0cf3a0a15ea9cb483edc618119859b53b67a4", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelDefinitionTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelDefinitionTests.java\nindex 920c2eac29f..766fb3d5642 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelDefinitionTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelDefinitionTests.java\n\n@@ -309,23 +309,26 @@ public class TrainedModelDefinitionTests extends AbstractSerializingTestCase<Tra\n     public void testMultiClassIrisInference() throws IOException {\n         // Fairly simple, random forest classification model built to fit in our format\n         // Trained on the well known Iris dataset\n-        String compressedDef = \"H4sIAMHqMV4C/+1b7Y6bOhB9lVV+b5HHX9h9g/sMVYVo4iRIbBIBaXtV9d0vJr23uzGKJwwsu\" +\n-            \"73kx0qwgI+xZ+bMmeHHqqny4uA22dNx48rVx4cfK3eo3dOX0nUHTV7tXJM1f5/88Wpd5nVdbIt13hTHw+rxYbV1eXOuX\" +\n-            \"HbIn1zdXvJpVbtTXmalO+yavb/icvyt2FwOT6558e/L8eXfnx+vh8jK/IsrLw/+qyrqD7VrjnXub+wOv7qqLtbH8lj9P\" +\n-            \"lVUu+LQ3t897sX8uue0k6rcXLPzQ2d1U53X/rkXOIcWWlYcNu57e8zaizZuXdR+8v8CKxvnH1a6bZOt90W5aU9Ce6Iqd\" +\n-            \"vvfZ7iHcyqLJvsFuz0n/Jj7ytX7Y3cNSwzrfgCWM8vtz8eHKwRwE0G+zb7m5dmfZOG9HIteBOiB9cDnV/BlYpRHLwxIb\" +\n-            \"VOehhAEFoIMICgUglSFg0rsO4PwXoUFrAPAKWLFIVG2+zGpBVfayBCCJsBPsfBNAN/2wGdX8FVipUdv2s2qFYieFTcE9\" +\n-            \"BZ7L+8xFLythsYKHDF5fb12PSCAMgO0vUKPwUrU7uszFxCEJQOJn/HNgMKS9n2D/8MT9vlnN9ISGt5gaNCojaa7yMCsE\" +\n-            \"jqVAvQMoSHqqqaLE7cNXS8mc6/JGFRwkrEVBywCHiAQiD3HEdGdE6yWYDIp4gWSTWb70kTjfgOCFygvfkOm2oi0z20og\" +\n-            \"tFqgtGmhHEN9q1ZXFwf4Oss2vZYiAFQez/u8iMc7fbmB7TxQmi9IHD0iD3ffcrcTdIiZElQ6CHa9iA0Ps4RS6gS6LaRB\" +\n-            \"qME46noAYHOjyBMkDgM56gaPW4ajstw7L5nWHQ+BWFCBRaXEHbv3Cremgw3sm/lDWXbWMKG5YxyMyUZ4nwhSWPkFUMoy\" +\n-            \"lyak0QxBBtjCASWZMdRvQgsyYzD00aWsQbwtOlUrNuOYzr9KUKSxDhEbXwdC4YwNaDQHE6JV7NxJNBjcURKjgKLOnB34\" +\n-            \"NModUB1ux4sS4U0WsygDkSd5kzigMJJepeNz4WRbYJg3ouetn0Z2hAOE5eSEEotqIRaJSy2YSm6AkOJ0H0Tt5QknpJQT\" +\n-            \"FldWfzqYL/62qrrgFLJ4ldf26+ywdX7kUvYQxJgQ9guFLmFxv3NcHWNJK2mIxUEafVvjdL4oiEV0OYOob2DGieu31NUn\" +\n-            \"y/7uFctjYxslvg8jeAXzTrm0vuGc29CTO7l3teOIk1YrNVnZI2Pz67xDXHZb1Pkoyc+mKrMhM1q86VBIwRZRI/g9EG2N\" +\n-            \"R/2fPNySpAFSpDli8S3hLr30zMXs5qlZ24xmfm+QJicHVpUAifkdORQvwY5pLTJ3dR9zDjF47dZAJ7yAwQ5TufB+E1y1\" +\n-            \"6snrlMjOVsBePkc4Q/urX4/Kv/bbK0OQ6VQkTrD/621mg+uUbxCNzWiTW/CbmpSg09ERDBTfak2QDcY1Bs1oTp/u4EaU\" +\n-            \"px2Ga0vUHQ7oJAzQNsrWFwT+xD5CW2+nOGa2AcQ9D+wtdpfnO92ldvljcuO5+Z0bjq+9M35V/jru/9nZ7qnwH9Pwf3xozzl37MO1jOo/vcP8wTvX0JBAAA=\";\n+        String compressedDef = \"H4sIAPbiMl4C/+1b246bMBD9lVWet8jjG3b/oN9QVYgmToLEkghIL6r23wukl90\" +\n+            \"YxRMGlt2WPKwEC/gYe2bOnBl+rOoyzQq3SR4OG5ev3t/9WLmicg+fc9cd1Gm5c3VSfz+2x6t1nlZVts3Wa\" +\n+            \"Z0ditX93Wrr0vpUuqRIH1zVXPJxVbljmie5K3b1vr3ifPw125wPj65+9u/z8fnfn+4vh0jy9LPLzw/+UGb\" +\n+            \"Vu8rVhyptb+wOv7iyytaH/FD+PZWVu6xo7u8e92x+3XOaSZVurtm1QydVXZ7W7XPPcIoGWpIVG/etOWbNR\" +\n+            \"Ru3zqp28r+B5bVrH5a7bZ2s91m+aU5Cc6LMdvu/Z3gL55hndfILdnNOtGPuS1ftD901LDKs+wFYziy3j/d\" +\n+            \"3FwjgKoJ0m3xJ81N7kvn3cix64aEH1gOfX8CXkVEtemFAahvz2IcgsBCkB0GhEMTKH1Ri3xn49yosYO0Bj\" +\n+            \"hErDpGy3Y9JLbjSRvoQNAF+jIVvPPi2Bz67gK8iK1v0ptmsWoHoWXFDQG+x9/IeQ8Hbqm+swBGT15dr1wM\" +\n+            \"CKDNA2yv0GKxE7b4+cwFBWDKQ+BlfDSgsat43tH94xD49diMtoeEVhgaN2mi6iwzMKqFjKUDPEBqCrmq6O\" +\n+            \"HHd0PViMreajEEFJxlaccAi4B4CgdhzHBHdOcFqCSYTI14g2WS2z0007DfAe4Hy7DdkrI2I+9yGIhitJhh\" +\n+            \"tTBjXYN+axcX1Ab7Oom2P+RgAtffDLj/A0a5vfkAbL/jWCwJHj9jT3afMzSQtQJYEhR6ibQ984+McsYQqg\" +\n+            \"m4baTBKMB6LHhDo/Aj8BInDcI6q0ePG/rgMx+57hkXnU+AnVGBxCWH3zq3ijclwI/tW3lC2jSVsWM4oN1O\" +\n+            \"SIc4XkjRGXjGEosylOUkUQ7AhhkBgSXYc1YvAksw4PG1kGWsAT5tOxbruOKbTnwIkSYxD1MbXsWAIUwMKz\" +\n+            \"eGUeDUbRwI9Fkek5CiwqAM3Bz6NUgdUt+vBslhIo8UM6kDQac4kDiicpHfe+FwY2SQI5q3oadvnoQ3hMHE\" +\n+            \"pCaHUgkqoVcRCG5aiKzCUCN03cUtJ4ikJxZTVlcWvDvarL626DiiVLH71pf0qG1y9H7mEPSQBNoTtQpFba\" +\n+            \"NzfDFfXSNJqPFJBkFb/1iiNLxhSAW3u4Ns7qHHi+i1F9fmyj1vV0sDIZonP0wh+waxjLr1vOPcmxORe7n3\" +\n+            \"pKOKIhVp9Rtb4+Owa3xCX/TpFPnrig6nKTNisNl8aNEKQRfQITh9kG/NhTzcvpwRZoARZvkh8S6h7Oz1zI\" +\n+            \"atZeuYWk5nvC4TJ2aFFJXBCTkcO9UuQQ0qb3FXdx4xTPH6dBeApP0CQ43QejN8kd7l64jI1krMVgJfPEf7\" +\n+            \"h3uq3o/K/ztZqP1QKFagz/G+t1XxwjeIFuqkRbXoTdlOTGnwCIoKZ6ku1AbrBoN6oCdX56w3UEOO0y2B9g\" +\n+            \"aLbAYWcAdpeweKa2IfIT2jz5QzXxD6AoP+DrdXtxeluV7pdWrvkcKqPp7rjS19d+wp/fff/5Ez3FPjzFNy\" +\n+            \"fdpTi9JB0sDp2JR7b309mn5HuPkEAAA==\";\n \n         TrainedModelDefinition definition = InferenceToXContentCompressor.inflate(compressedDef,\n             parser -> TrainedModelDefinition.fromXContent(parser, true).build(),\n"}}, {"oid": "eee0cf3a0a15ea9cb483edc618119859b53b67a4", "url": "https://github.com/elastic/elasticsearch/commit/eee0cf3a0a15ea9cb483edc618119859b53b67a4", "message": "changing param to classes_num", "committedDate": "2020-01-30T14:17:32Z", "type": "commit"}, {"oid": "6686d369bf82f1fa7f4b9d6c821ef164ad8b0286", "url": "https://github.com/elastic/elasticsearch/commit/6686d369bf82f1fa7f4b9d6c821ef164ad8b0286", "message": "fixing integration test", "committedDate": "2020-01-30T17:27:01Z", "type": "commit"}]}