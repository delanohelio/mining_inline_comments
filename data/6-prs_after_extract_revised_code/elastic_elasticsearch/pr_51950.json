{"pr_number": 51950, "pr_title": "RestHandlers declare handled routes", "pr_createdAt": "2020-02-05T15:57:30Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51950", "timeline": [{"oid": "2a1d84123ccee469670cef4ec75d0ab31da65133", "url": "https://github.com/elastic/elasticsearch/commit/2a1d84123ccee469670cef4ec75d0ab31da65133", "message": "RestHandlers declare handled methods and paths\n\nThis commit changes how RestHandlers are registered with the\nRestController so that a RestHandler no longer needs to register itself\nwith the RestController. Instead the RestHandler interface has new\nmethods which when called provide information about the method and path\ncombinations that are handled by the handler including any deprecated\nand/or replaced combinations.\n\nThis change also makes the publication of RestHandlers safe since they\nno longer publish a reference to themselves within their constructors.\n\nCloses #51622", "committedDate": "2020-02-05T15:50:24Z", "type": "commit"}, {"oid": "91675129ef6bac903f7b8f24d1037cddd24f629e", "url": "https://github.com/elastic/elasticsearch/commit/91675129ef6bac903f7b8f24d1037cddd24f629e", "message": "fixes", "committedDate": "2020-02-05T17:51:34Z", "type": "commit"}, {"oid": "263e2d2045e10bd7d7621a33c2338dec15fe67ac", "url": "https://github.com/elastic/elasticsearch/commit/263e2d2045e10bd7d7621a33c2338dec15fe67ac", "message": "fix inference api", "committedDate": "2020-02-05T18:44:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0MTM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r375441397", "bodyText": "Or:\ndiff --git a/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\nindex d6c0ef736e3..b0d17af1846 100644\n--- a/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\n+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\n@@ -27,7 +27,6 @@ import org.elasticsearch.action.support.ActiveShardCount;\n import org.elasticsearch.action.update.UpdateResponse;\n import org.elasticsearch.client.Requests;\n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.collect.MapBuilder;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.index.shard.ShardId;\n import org.elasticsearch.rest.BaseRestHandler;\n@@ -39,12 +38,9 @@ import org.elasticsearch.rest.RestResponse;\n import org.elasticsearch.rest.action.RestBuilderListener;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n-import static java.util.Arrays.asList;\n-import static java.util.Collections.unmodifiableList;\n import static org.elasticsearch.rest.RestRequest.Method.POST;\n import static org.elasticsearch.rest.RestRequest.Method.PUT;\n import static org.elasticsearch.rest.RestStatus.OK;\n@@ -53,10 +49,9 @@ public class RestNoopBulkAction extends BaseRestHandler {\n \n     @Override\n     public Map<String, List<Method>> handledMethodsAndPaths() {\n-        return Collections.unmodifiableMap(MapBuilder.<String, List<Method>>newMapBuilder()\n-            .put(\"/_noop_bulk\", unmodifiableList(asList(POST, PUT)))\n-            .put(\"/{index}/_noop_bulk\", unmodifiableList(asList(POST, PUT)))\n-            .map());\n+        return Map.of(\n+            \"/_noop_bulk\", List.of(POST, PUT),\n+            \"/{index}/_noop_bulk\", List.of(POST, PUT));\n     }\n \n     @Override\nI had been working to remove uses of MapBuilder in master, in light of the new JDK APIs for map construction.", "author": "jasontedor", "createdAt": "2020-02-05T18:50:24Z", "path": "client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java", "diffHunk": "@@ -27,29 +27,36 @@\n import org.elasticsearch.action.update.UpdateResponse;\n import org.elasticsearch.client.Requests;\n import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.collect.MapBuilder;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.index.shard.ShardId;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.BytesRestResponse;\n import org.elasticsearch.rest.RestChannel;\n-import org.elasticsearch.rest.RestController;\n import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestRequest.Method;\n import org.elasticsearch.rest.RestResponse;\n import org.elasticsearch.rest.action.RestBuilderListener;\n \n import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n \n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n import static org.elasticsearch.rest.RestRequest.Method.POST;\n import static org.elasticsearch.rest.RestRequest.Method.PUT;\n import static org.elasticsearch.rest.RestStatus.OK;\n \n public class RestNoopBulkAction extends BaseRestHandler {\n \n-    public RestNoopBulkAction(RestController controller) {\n-        controller.registerHandler(POST, \"/_noop_bulk\", this);\n-        controller.registerHandler(PUT, \"/_noop_bulk\", this);\n-        controller.registerHandler(POST, \"/{index}/_noop_bulk\", this);\n-        controller.registerHandler(PUT, \"/{index}/_noop_bulk\", this);\n+    @Override\n+    public Map<String, List<Method>> handledMethodsAndPaths() {\n+        return Collections.unmodifiableMap(MapBuilder.<String, List<Method>>newMapBuilder()\n+            .put(\"/_noop_bulk\", unmodifiableList(asList(POST, PUT)))\n+            .put(\"/{index}/_noop_bulk\", unmodifiableList(asList(POST, PUT)))\n+            .map());", "originalCommit": "263e2d2045e10bd7d7621a33c2338dec15fe67ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0NzA4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r375447087", "bodyText": "And I wonder if we should take this farther, and instead of using a simple datatype we formalize the notion of a route and make that part of the API:\ndiff --git a/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\nindex d6c0ef736e3..1e70bc9f15b 100644\n--- a/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\n+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\n@@ -27,7 +27,6 @@ import org.elasticsearch.action.support.ActiveShardCount;\n import org.elasticsearch.action.update.UpdateResponse;\n import org.elasticsearch.client.Requests;\n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.collect.MapBuilder;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.index.shard.ShardId;\n import org.elasticsearch.rest.BaseRestHandler;\n@@ -37,14 +36,12 @@ import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.RestRequest.Method;\n import org.elasticsearch.rest.RestResponse;\n import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.rest.action.Route;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n-import static java.util.Arrays.asList;\n-import static java.util.Collections.unmodifiableList;\n import static org.elasticsearch.rest.RestRequest.Method.POST;\n import static org.elasticsearch.rest.RestRequest.Method.PUT;\n import static org.elasticsearch.rest.RestStatus.OK;\n@@ -52,11 +49,10 @@ import static org.elasticsearch.rest.RestStatus.OK;\n public class RestNoopBulkAction extends BaseRestHandler {\n \n     @Override\n-    public Map<String, List<Method>> handledMethodsAndPaths() {\n-        return Collections.unmodifiableMap(MapBuilder.<String, List<Method>>newMapBuilder()\n-            .put(\"/_noop_bulk\", unmodifiableList(asList(POST, PUT)))\n-            .put(\"/{index}/_noop_bulk\", unmodifiableList(asList(POST, PUT)))\n-            .map());\n+    public List<Route> handledMethodsAndPaths() {\n+        return List.of(\n+            new Route(\"/_noop_bulk\", List.of(POST, PUT)),\n+            new Route(\"/{index}/_noop_bulk\", List.of(POST, PUT)));\n     }\n \n     @Override\ndiff --git a/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java b/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java\nindex 26ba8aa27fb..66d65b0b70e 100644\n--- a/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java\n+++ b/server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java\n@@ -28,6 +28,7 @@ import org.elasticsearch.common.settings.Setting;\n import org.elasticsearch.common.settings.Setting.Property;\n import org.elasticsearch.plugins.ActionPlugin;\n import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.rest.action.Route;\n import org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction;\n \n import java.io.IOException;\n@@ -74,7 +75,7 @@ public abstract class BaseRestHandler implements RestHandler {\n      * {@inheritDoc}\n      */\n     @Override\n-    public abstract Map<String, List<Method>> handledMethodsAndPaths();\n+    public abstract List<Route> handledMethodsAndPaths();\n \n     @Override\n     public final void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\ndiff --git a/server/src/main/java/org/elasticsearch/rest/RestController.java b/server/src/main/java/org/elasticsearch/rest/RestController.java\nindex 239f89c5c20..9bf52ced99d 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestController.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestController.java\n@@ -160,8 +160,8 @@ public class RestController implements HttpServerTransport.Dispatcher {\n      * and {@code path} combinations.\n      */\n     public void registerHandler(RestHandler restHandler) {\n-        restHandler.handledMethodsAndPaths().forEach((path, methods) ->\n-            methods.forEach(method -> registerHandler(method, path, restHandler)));\n+        restHandler.handledMethodsAndPaths().forEach(route ->\n+            route.methods().forEach(method -> registerHandler(method, route.path(), restHandler)));\n         restHandler.deprecatedHandledMethodsAndPaths().forEach(api -> api.getMethods().forEach(method ->\n             registerAsDeprecatedHandler(method, api.getPath(), restHandler, api.getDeprecationMessage(), api.getLogger())));\n         restHandler.replacedMethodsAndPaths().forEach(api -> registerWithDeprecatedHandler(api.getMethod(), api.getPath(), restHandler,\ndiff --git a/server/src/main/java/org/elasticsearch/rest/RestHandler.java b/server/src/main/java/org/elasticsearch/rest/RestHandler.java\nindex 5f0862ed80e..6504656ee3c 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestHandler.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestHandler.java\n@@ -23,6 +23,7 @@ import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.common.xcontent.XContent;\n import org.elasticsearch.rest.RestRequest.Method;\n+import org.elasticsearch.rest.action.Route;\n \n import java.util.Collections;\n import java.util.List;\n@@ -69,8 +70,8 @@ public interface RestHandler {\n     /**\n      * The map of {@code path} to {@code methods} that this RestHandler is responsible for handling.\n      */\n-    default Map<String, List<Method>> handledMethodsAndPaths() {\n-        return Collections.emptyMap();\n+    default List<Route> handledMethodsAndPaths() {\n+        return List.of();\n     }\n \n     /**\ndiff --git a/server/src/main/java/org/elasticsearch/rest/action/Route.java b/server/src/main/java/org/elasticsearch/rest/action/Route.java\nindex d42b4fb851a..05e38fdce74 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/Route.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/Route.java\n@@ -1,4 +1,26 @@\n package org.elasticsearch.rest.action;\n \n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.util.List;\n+\n public class Route {\n+\n+    private final String path;\n+\n+    public String path() {\n+        return path;\n+    }\n+\n+    private List<RestRequest.Method> methods;\n+\n+    public List<RestRequest.Method> methods() {\n+        return methods;\n+    }\n+\n+    public Route(final String path, final List<RestRequest.Method> methods) {\n+        this.path = path;\n+        this.methods = methods;\n+    }\n+\n }\nThis is close to what you have done with deprecated routes, but I think we should take it the whole way and cover all routes. Then a DeprecatedRoute is a Route with some additional fields, etc.", "author": "jasontedor", "createdAt": "2020-02-05T19:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0MTM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "171e36887c80920e02c2f47df87c733dedbe5658", "chunk": "diff --git a/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\nindex d6c0ef736e3..6333c7391f6 100644\n--- a/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\n+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\n\n@@ -27,21 +27,17 @@ import org.elasticsearch.action.support.ActiveShardCount;\n import org.elasticsearch.action.update.UpdateResponse;\n import org.elasticsearch.client.Requests;\n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.collect.MapBuilder;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.index.shard.ShardId;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.BytesRestResponse;\n import org.elasticsearch.rest.RestChannel;\n import org.elasticsearch.rest.RestRequest;\n-import org.elasticsearch.rest.RestRequest.Method;\n import org.elasticsearch.rest.RestResponse;\n import org.elasticsearch.rest.action.RestBuilderListener;\n \n import java.io.IOException;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.unmodifiableList;\n"}}, {"oid": "171e36887c80920e02c2f47df87c733dedbe5658", "url": "https://github.com/elastic/elasticsearch/commit/171e36887c80920e02c2f47df87c733dedbe5658", "message": "refactor to routes", "committedDate": "2020-02-06T21:20:28Z", "type": "commit"}, {"oid": "7c14750d7e9dbf75cbb281c995d1e5cbc757a58b", "url": "https://github.com/elastic/elasticsearch/commit/7c14750d7e9dbf75cbb281c995d1e5cbc757a58b", "message": "Merge branch 'master' into rest_handler_safe_register", "committedDate": "2020-02-06T21:21:00Z", "type": "commit"}, {"oid": "94f112444465bae74c135a9d16e147ebc215726d", "url": "https://github.com/elastic/elasticsearch/commit/94f112444465bae74c135a9d16e147ebc215726d", "message": "update javadoc", "committedDate": "2020-02-06T21:24:01Z", "type": "commit"}, {"oid": "771b4e12948698f98c3098fa1e55567475633761", "url": "https://github.com/elastic/elasticsearch/commit/771b4e12948698f98c3098fa1e55567475633761", "message": "fix duplicated api", "committedDate": "2020-02-06T21:41:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NDU4NA==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376364584", "bodyText": "handlesRoutes?\nAny chance you could reverse the order of the args on the routes ctor? In my mind the method comes first.", "author": "nik9000", "createdAt": "2020-02-07T12:25:22Z", "path": "client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java", "diffHunk": "@@ -32,24 +32,28 @@\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.BytesRestResponse;\n import org.elasticsearch.rest.RestChannel;\n-import org.elasticsearch.rest.RestController;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.RestResponse;\n import org.elasticsearch.rest.action.RestBuilderListener;\n \n import java.io.IOException;\n+import java.util.List;\n \n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n import static org.elasticsearch.rest.RestRequest.Method.POST;\n import static org.elasticsearch.rest.RestRequest.Method.PUT;\n import static org.elasticsearch.rest.RestStatus.OK;\n \n public class RestNoopBulkAction extends BaseRestHandler {\n \n-    public RestNoopBulkAction(RestController controller) {\n-        controller.registerHandler(POST, \"/_noop_bulk\", this);\n-        controller.registerHandler(PUT, \"/_noop_bulk\", this);\n-        controller.registerHandler(POST, \"/{index}/_noop_bulk\", this);\n-        controller.registerHandler(PUT, \"/{index}/_noop_bulk\", this);\n+    @Override\n+    public List<Route> handledRoutes() {", "originalCommit": "771b4e12948698f98c3098fa1e55567475633761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1OTQ1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376459453", "bodyText": "On further thought, I lean more towards routes rather than handledRoutes or handlesRoutes. What do you think?\nI agree regarding the parameter ordering.", "author": "jaymode", "createdAt": "2020-02-07T15:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NDU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NTM4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376495386", "bodyText": "I pushed 086a295 to change the method name and 2653271 to change the parameter ordering.", "author": "jaymode", "createdAt": "2020-02-07T16:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NDU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "265327123f4b59d7775f6ec62fe1622cf12b1bff", "chunk": "diff --git a/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\nindex 6333c7391f6..af94cb97c70 100644\n--- a/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\n+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java\n\n@@ -50,10 +50,10 @@ public class RestNoopBulkAction extends BaseRestHandler {\n     @Override\n     public List<Route> handledRoutes() {\n         return unmodifiableList(asList(\n-            new Route(\"/_noop_bulk\", POST),\n-            new Route(\"/_noop_bulk\", PUT),\n-            new Route(\"/{index}/_noop_bulk\", POST),\n-            new Route(\"/{index}/_noop_bulk\", PUT)));\n+            new Route(POST, \"/_noop_bulk\"),\n+            new Route(PUT, \"/_noop_bulk\"),\n+            new Route(POST, \"/{index}/_noop_bulk\"),\n+            new Route(PUT, \"/{index}/_noop_bulk\")));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NTc3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376365777", "bodyText": "I haven't looked deeply but I wonder if we need both a separate method and a separate class for deprecated routes. Could you return Deprecated routes in the handledRoutes method?", "author": "nik9000", "createdAt": "2020-02-07T12:28:32Z", "path": "qa/smoke-test-http/src/test/java/org/elasticsearch/http/TestDeprecationHeaderRestAction.java", "diffHunk": "@@ -66,18 +69,26 @@\n \n     private final Settings settings;\n \n-    public TestDeprecationHeaderRestAction(Settings settings, RestController controller) {\n+    public TestDeprecationHeaderRestAction(Settings settings) {\n         this.settings = settings;\n+    }\n \n-        controller.registerAsDeprecatedHandler(RestRequest.Method.GET, \"/_test_cluster/deprecated_settings\", this,\n-                                               DEPRECATED_ENDPOINT, deprecationLogger);\n+    @Override\n+    public List<DeprecatedRoute> deprecatedRoutes() {\n+        return singletonList(", "originalCommit": "771b4e12948698f98c3098fa1e55567475633761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NTQxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376455419", "bodyText": "I looked at that briefly and decided against doing so to avoid instanceOf checks", "author": "jaymode", "createdAt": "2020-02-07T15:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NTc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0ODk3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376548976", "bodyText": "I'm not sure if this is better, it's merely a suggestion for how we could do something like this:\ndiff --git a/server/src/main/java/org/elasticsearch/rest/RestController.java b/server/src/main/java/org/elasticsearch/rest/RestController.java\nindex 6a16007465c..90763fd1336 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestController.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestController.java\n@@ -48,6 +48,7 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Predicate;\n import java.util.function.Supplier;\n import java.util.function.UnaryOperator;\n import java.util.stream.Collectors;\n@@ -62,6 +63,7 @@ import static org.elasticsearch.rest.RestStatus.OK;\n public class RestController implements HttpServerTransport.Dispatcher {\n \n     private static final Logger logger = LogManager.getLogger(RestController.class);\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(logger);\n \n     private final PathTrie<MethodHandlers> handlers = new PathTrie<>(RestUtils.REST_DECODER);\n \n@@ -130,11 +132,7 @@ public class RestController implements HttpServerTransport.Dispatcher {\n      */\n     protected void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler,\n                                               RestRequest.Method deprecatedMethod, String deprecatedPath,\n-                                              DeprecationLogger logger) {\n-        // e.g., [POST /_optimize] is deprecated! Use [POST /_forcemerge] instead.\n-        final String deprecationMessage =\n-            \"[\" + deprecatedMethod.name() + \" \" + deprecatedPath + \"] is deprecated! Use [\" + method.name() + \" \" + path + \"] instead.\";\n-\n+                                              String deprecationMessage, DeprecationLogger logger) {\n         registerHandler(method, path, handler);\n         registerAsDeprecatedHandler(deprecatedMethod, deprecatedPath, handler, deprecationMessage, logger);\n     }\n@@ -160,11 +158,12 @@ public class RestController implements HttpServerTransport.Dispatcher {\n      * and {@code path} combinations.\n      */\n     public void registerHandler(final RestHandler restHandler) {\n-        restHandler.routes().forEach(route -> registerHandler(route.getMethod(), route.getPath(), restHandler));\n-        restHandler.deprecatedRoutes().forEach(route ->\n-            registerAsDeprecatedHandler(route.getMethod(), route.getPath(), restHandler, route.getDeprecationMessage(), route.getLogger()));\n-        restHandler.replacedRoutes().forEach(route -> registerWithDeprecatedHandler(route.getMethod(), route.getPath(),\n-            restHandler, route.getDeprecatedMethod(), route.getDeprecatedPath(), route.getLogger()));\n+        final List<RestHandler.Route> routes = restHandler.routes();\n+        routes.stream().filter(Predicate.not(RestHandler.Route::isDeprecated)).forEach(route -> registerHandler(route.getMethod(), route.getPath(), restHandler));\n+        routes.stream().filter(RestHandler.Route::isDeprecated).forEach(route ->\n+            registerAsDeprecatedHandler(route.getMethod(), route.getPath(), restHandler, route.deprecationMessage(), deprecationLogger));\n+        routes.stream().filter(RestHandler.Route::isReplacement).forEach(route -> registerWithDeprecatedHandler(route.getMethod(), route.getPath(),\n+            restHandler, route.replacedRoute().getMethod(), route.replacedRoute().getPath(), route.replacedRoute().deprecationMessage(), deprecationLogger));\n     }\n \n     @Override\ndiff --git a/server/src/main/java/org/elasticsearch/rest/RestHandler.java b/server/src/main/java/org/elasticsearch/rest/RestHandler.java\nindex ab7b468f757..9638933053d 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestHandler.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestHandler.java\n@@ -20,7 +20,6 @@\n package org.elasticsearch.rest;\n \n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.common.xcontent.XContent;\n import org.elasticsearch.rest.RestRequest.Method;\n \n@@ -72,32 +71,30 @@ public interface RestHandler {\n         return Collections.emptyList();\n     }\n \n-    /**\n-     * A list of routes handled by this RestHandler that are deprecated and do not have a direct\n-     * replacement. If changing the {@code path} or {@code method} of a route,\n-     * use {@link #replacedRoutes()}.\n-     */\n-    default List<DeprecatedRoute> deprecatedRoutes() {\n-        return Collections.emptyList();\n-    }\n-\n-    /**\n-     * A list of routes handled by this RestHandler that have had their {@code path} and/or\n-     * {@code method} changed. The pre-existing {@code route} will be registered\n-     * as deprecated alongside the updated {@code route}.\n-     */\n-    default List<ReplacedRoute> replacedRoutes() {\n-        return Collections.emptyList();\n-    }\n-\n     class Route {\n \n         private final String path;\n         private final Method method;\n+        private final DeprecationInfo deprecationInfo;\n+        private final ReplacementInfo replacementInfo;\n \n         public Route(Method method, String path) {\n+            this(method, path, DeprecationInfo.NON_DEPRECATED_ROUTE, ReplacementInfo.NONE);\n+        }\n+\n+        public Route(Method method, String path, Method deprecatedMethod, String deprecatedPath) {\n+            this(\n+                method,\n+                path,\n+                DeprecationInfo.NON_DEPRECATED_ROUTE,\n+                ReplacementInfo.replacedRoute(new Route(deprecatedMethod, deprecatedPath, DeprecationInfo.deprecatedRoute(\"[\" + deprecatedMethod.name() + \" \" + deprecatedPath + \"] is deprecated! Use [\" + method.name() + \" \" + path + \"] instead.\"), ReplacementInfo.NONE)));\n+        }\n+\n+        private Route(Method method, String path, DeprecationInfo deprecationInfo, ReplacementInfo replacementInfo) {\n             this.path = path;\n             this.method = method;\n+            this.deprecationInfo = deprecationInfo;\n+            this.replacementInfo = replacementInfo;\n         }\n \n         public String getPath() {\n@@ -107,58 +104,88 @@ public interface RestHandler {\n         public Method getMethod() {\n             return method;\n         }\n+\n+        public boolean isDeprecated() {\n+            return deprecationInfo.isDeprecated();\n+        }\n+\n+        public String deprecationMessage() {\n+            return deprecationInfo.deprecationMessage();\n+        }\n+\n+        public boolean isReplacement() {\n+            return replacementInfo.isReplacement();\n+        }\n+\n+        public Route replacedRoute() {\n+            return replacementInfo.replacedRoute();\n+        }\n+\n     }\n \n-    /**\n-     * Represents an API that has been deprecated and is slated for removal.\n-     */\n-    class DeprecatedRoute extends Route {\n+    class DeprecationInfo {\n \n+        private final boolean isDeprecated;\n         private final String deprecationMessage;\n-        private final DeprecationLogger logger;\n \n-        public DeprecatedRoute(Method method, String path, String deprecationMessage, DeprecationLogger logger) {\n-            super(method, path);\n+        public static final DeprecationInfo NON_DEPRECATED_ROUTE = new DeprecationInfo(false, null);\n+\n+        public static DeprecationInfo deprecatedRoute(String deprecationMessage) {\n+            return new DeprecationInfo(true, deprecationMessage);\n+        }\n+\n+        private DeprecationInfo(boolean isDeprecated, String deprecationMessage) {\n+            assert (isDeprecated && deprecationMessage != null) || (isDeprecated == false && deprecationMessage == null);\n+            this.isDeprecated = isDeprecated;\n             this.deprecationMessage = deprecationMessage;\n-            this.logger = logger;\n         }\n \n-        public String getDeprecationMessage() {\n-            return deprecationMessage;\n+        public boolean isDeprecated() {\n+            return isDeprecated;\n         }\n \n-        public DeprecationLogger getLogger() {\n-            return logger;\n+        public String deprecationMessage() {\n+            if (isDeprecated) {\n+                return deprecationMessage;\n+            } else {\n+                throw new IllegalStateException();\n+            }\n         }\n+\n     }\n \n-    /**\n-     * Represents an API that has had its {@code path} or {@code method} changed. Holds both the\n-     * new and previous {@code path} and {@code method} combination.\n-     */\n-    class ReplacedRoute extends Route {\n+    class ReplacementInfo {\n+\n+        private final boolean isReplacement;\n+        private final Route replacedRoute;\n \n-        private final String deprecatedPath;\n-        private final Method deprecatedMethod;\n-        private final DeprecationLogger logger;\n+        public static final ReplacementInfo NONE = new ReplacementInfo(false, null);\n \n-        public ReplacedRoute(Method method, String path, Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger) {\n-            super(method, path);\n-            this.deprecatedMethod = deprecatedMethod;\n-            this.deprecatedPath = deprecatedPath;\n-            this.logger = logger;\n+        public static ReplacementInfo replacedRoute(Route replacedRoute) {\n+            return new ReplacementInfo(true, replacedRoute);\n         }\n \n-        public String getDeprecatedPath() {\n-            return deprecatedPath;\n+        private ReplacementInfo(boolean isReplacement, Route replacedRoute) {\n+            assert (isReplacement && replacedRoute != null) || (isReplacement == false && replacedRoute == null);\n+            if (replacedRoute.isDeprecated() == false) {\n+                throw new IllegalArgumentException();\n+            }\n+            this.isReplacement = isReplacement;\n+            this.replacedRoute = replacedRoute;\n         }\n \n-        public Method getDeprecatedMethod() {\n-            return deprecatedMethod;\n+        public boolean isReplacement() {\n+            return isReplacement;\n         }\n \n-        public DeprecationLogger getLogger() {\n-            return logger;\n+        public Route replacedRoute() {\n+            if (isReplacement) {\n+                return replacedRoute;\n+            } else {\n+                throw new IllegalStateException();\n+            }\n         }\n+\n     }\n+\n }\ndiff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/RestDeleteExpiredDataAction.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/RestDeleteExpiredDataAction.java\nindex 11ca99d9d3a..faa96d23755 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/RestDeleteExpiredDataAction.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/rest/RestDeleteExpiredDataAction.java\n@@ -5,9 +5,7 @@\n  */\n package org.elasticsearch.xpack.ml.rest;\n \n-import org.apache.logging.log4j.LogManager;\n import org.elasticsearch.client.node.NodeClient;\n-import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n@@ -22,21 +20,10 @@ import static org.elasticsearch.rest.RestRequest.Method.DELETE;\n \n public class RestDeleteExpiredDataAction extends BaseRestHandler {\n \n-    private static final DeprecationLogger deprecationLogger =\n-        new DeprecationLogger(LogManager.getLogger(RestDeleteExpiredDataAction.class));\n-\n     @Override\n     public List<Route> routes() {\n-        return Collections.emptyList();\n-    }\n-\n-    @Override\n-    public List<ReplacedRoute> replacedRoutes() {\n-        // TODO: remove deprecated endpoint in 8.0.0\n         return Collections.singletonList(\n-            new ReplacedRoute(DELETE, MachineLearning.BASE_PATH + \"_delete_expired_data\",\n-                DELETE, MachineLearning.PRE_V7_BASE_PATH + \"_delete_expired_data\",\n-                deprecationLogger)\n+            new Route(DELETE, MachineLearning.BASE_PATH + \"_delete_expired_data\", DELETE, MachineLearning.PRE_V7_BASE_PATH + \"_delete_expired_data\")\n         );\n     }", "author": "jasontedor", "createdAt": "2020-02-07T18:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NTc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0NjA2OA==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376746068", "bodyText": "The more I think about it, the more I think we should keep it how you have it for now. If we find reasons to combine this into a single pattern in the future, the above gives us a way forward on how we do that. Let's leave it out of this change though, this is already a huge improvement over where we were, and no need to delay getting it in any further when it's not clear what the benefits are.", "author": "jasontedor", "createdAt": "2020-02-09T00:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NTc3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "265327123f4b59d7775f6ec62fe1622cf12b1bff", "chunk": "diff --git a/qa/smoke-test-http/src/test/java/org/elasticsearch/http/TestDeprecationHeaderRestAction.java b/qa/smoke-test-http/src/test/java/org/elasticsearch/http/TestDeprecationHeaderRestAction.java\nindex c0010f00ec3..08f7d68e91f 100644\n--- a/qa/smoke-test-http/src/test/java/org/elasticsearch/http/TestDeprecationHeaderRestAction.java\n+++ b/qa/smoke-test-http/src/test/java/org/elasticsearch/http/TestDeprecationHeaderRestAction.java\n\n@@ -76,7 +76,7 @@ public class TestDeprecationHeaderRestAction extends BaseRestHandler {\n     @Override\n     public List<DeprecatedRoute> deprecatedRoutes() {\n         return singletonList(\n-            new DeprecatedRoute(\"/_test_cluster/deprecated_settings\", GET, DEPRECATED_ENDPOINT, deprecationLogger));\n+            new DeprecatedRoute(GET, \"/_test_cluster/deprecated_settings\", DEPRECATED_ENDPOINT, deprecationLogger));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NjM0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376366345", "bodyText": "Nice!", "author": "nik9000", "createdAt": "2020-02-07T12:30:03Z", "path": "server/src/main/java/org/elasticsearch/action/ActionModule.java", "diffHunk": "@@ -565,148 +567,151 @@ private ActionFilters setupActionFilters(List<ActionPlugin> actionPlugins) {\n \n     public void initRestHandlers(Supplier<DiscoveryNodes> nodesInCluster) {\n         List<AbstractCatAction> catActions = new ArrayList<>();\n-        Consumer<RestHandler> registerHandler = a -> {\n-            if (a instanceof AbstractCatAction) {\n-                catActions.add((AbstractCatAction) a);\n+        Consumer<RestHandler> registerHandler = handler -> {\n+            if (handler instanceof AbstractCatAction) {\n+                catActions.add((AbstractCatAction) handler);\n             }\n+            restController.registerHandler(handler);\n         };\n-        registerHandler.accept(new RestAddVotingConfigExclusionAction(restController));\n-        registerHandler.accept(new RestClearVotingConfigExclusionsAction(restController));\n-        registerHandler.accept(new RestMainAction(restController));\n-        registerHandler.accept(new RestNodesInfoAction(restController, settingsFilter));\n-        registerHandler.accept(new RestRemoteClusterInfoAction(restController));\n-        registerHandler.accept(new RestNodesStatsAction(restController));\n-        registerHandler.accept(new RestNodesUsageAction(restController));\n-        registerHandler.accept(new RestNodesHotThreadsAction(restController));\n-        registerHandler.accept(new RestClusterAllocationExplainAction(restController));\n-        registerHandler.accept(new RestClusterStatsAction(restController));\n-        registerHandler.accept(new RestClusterStateAction(restController, settingsFilter));\n-        registerHandler.accept(new RestClusterHealthAction(restController));\n-        registerHandler.accept(new RestClusterUpdateSettingsAction(restController));\n-        registerHandler.accept(new RestClusterGetSettingsAction(settings, restController, clusterSettings, settingsFilter));\n-        registerHandler.accept(new RestClusterRerouteAction(restController, settingsFilter));\n-        registerHandler.accept(new RestClusterSearchShardsAction(restController));\n-        registerHandler.accept(new RestPendingClusterTasksAction(restController));\n-        registerHandler.accept(new RestPutRepositoryAction(restController));\n-        registerHandler.accept(new RestGetRepositoriesAction(restController, settingsFilter));\n-        registerHandler.accept(new RestDeleteRepositoryAction(restController));\n-        registerHandler.accept(new RestVerifyRepositoryAction(restController));\n-        registerHandler.accept(new RestCleanupRepositoryAction(restController));\n-        registerHandler.accept(new RestGetSnapshotsAction(restController));\n-        registerHandler.accept(new RestCreateSnapshotAction(restController));\n-        registerHandler.accept(new RestRestoreSnapshotAction(restController));\n-        registerHandler.accept(new RestDeleteSnapshotAction(restController));\n-        registerHandler.accept(new RestSnapshotsStatusAction(restController));\n-        registerHandler.accept(new RestGetIndicesAction(restController));\n-        registerHandler.accept(new RestIndicesStatsAction(restController));\n-        registerHandler.accept(new RestIndicesSegmentsAction(restController));\n-        registerHandler.accept(new RestIndicesShardStoresAction(restController));\n-        registerHandler.accept(new RestGetAliasesAction(restController));\n-        registerHandler.accept(new RestIndexDeleteAliasesAction(restController));\n-        registerHandler.accept(new RestIndexPutAliasAction(restController));\n-        registerHandler.accept(new RestIndicesAliasesAction(restController));\n-        registerHandler.accept(new RestCreateIndexAction(restController));\n-        registerHandler.accept(new RestResizeHandler.RestShrinkIndexAction(restController));\n-        registerHandler.accept(new RestResizeHandler.RestSplitIndexAction(restController));\n-        registerHandler.accept(new RestResizeHandler.RestCloneIndexAction(restController));\n-        registerHandler.accept(new RestRolloverIndexAction(restController));\n-        registerHandler.accept(new RestDeleteIndexAction(restController));\n-        registerHandler.accept(new RestCloseIndexAction(restController));\n-        registerHandler.accept(new RestOpenIndexAction(restController));\n-\n-        registerHandler.accept(new RestUpdateSettingsAction(restController));\n-        registerHandler.accept(new RestGetSettingsAction(restController));\n-\n-        registerHandler.accept(new RestAnalyzeAction(restController));\n-        registerHandler.accept(new RestGetIndexTemplateAction(restController));\n-        registerHandler.accept(new RestPutIndexTemplateAction(restController));\n-        registerHandler.accept(new RestDeleteIndexTemplateAction(restController));\n-\n-        registerHandler.accept(new RestPutMappingAction(restController));\n-        registerHandler.accept(new RestGetMappingAction(restController));\n-        registerHandler.accept(new RestGetFieldMappingAction(restController));\n-\n-        registerHandler.accept(new RestRefreshAction(restController));\n-        registerHandler.accept(new RestFlushAction(restController));\n-        registerHandler.accept(new RestSyncedFlushAction(restController));\n-        registerHandler.accept(new RestForceMergeAction(restController));\n-        registerHandler.accept(new RestUpgradeActionDeprecated(restController));\n-        registerHandler.accept(new RestUpgradeStatusActionDeprecated(restController));\n-        registerHandler.accept(new RestClearIndicesCacheAction(restController));\n-\n-        registerHandler.accept(new RestIndexAction(restController, clusterService));\n-        registerHandler.accept(new RestGetAction(restController));\n-        registerHandler.accept(new RestGetSourceAction(restController));\n-        registerHandler.accept(new RestMultiGetAction(settings, restController));\n-        registerHandler.accept(new RestDeleteAction(restController));\n-        registerHandler.accept(new RestCountAction(restController));\n-        registerHandler.accept(new RestTermVectorsAction(restController));\n-        registerHandler.accept(new RestMultiTermVectorsAction(restController));\n-        registerHandler.accept(new RestBulkAction(settings, restController));\n-        registerHandler.accept(new RestUpdateAction(restController));\n-\n-        registerHandler.accept(new RestSearchAction(restController));\n-        registerHandler.accept(new RestSearchScrollAction(restController));\n-        registerHandler.accept(new RestClearScrollAction(restController));\n-        registerHandler.accept(new RestMultiSearchAction(settings, restController));\n-\n-        registerHandler.accept(new RestValidateQueryAction(restController));\n-\n-        registerHandler.accept(new RestExplainAction(restController));\n-\n-        registerHandler.accept(new RestRecoveryAction(restController));\n-\n-        registerHandler.accept(new RestReloadSecureSettingsAction(restController));\n+        registerHandler.accept(new RestAddVotingConfigExclusionAction());\n+        registerHandler.accept(new RestClearVotingConfigExclusionsAction());\n+        registerHandler.accept(new RestMainAction());\n+        registerHandler.accept(new RestNodesInfoAction(settingsFilter));\n+        registerHandler.accept(new RestRemoteClusterInfoAction());\n+        registerHandler.accept(new RestNodesStatsAction());\n+        registerHandler.accept(new RestNodesUsageAction());\n+        registerHandler.accept(new RestNodesHotThreadsAction());\n+        registerHandler.accept(new RestClusterAllocationExplainAction());\n+        registerHandler.accept(new RestClusterStatsAction());\n+        registerHandler.accept(new RestClusterStateAction(settingsFilter));\n+        registerHandler.accept(new RestClusterHealthAction());\n+        registerHandler.accept(new RestClusterUpdateSettingsAction());\n+        registerHandler.accept(new RestClusterGetSettingsAction(settings, clusterSettings, settingsFilter));\n+        registerHandler.accept(new RestClusterRerouteAction(settingsFilter));\n+        registerHandler.accept(new RestClusterSearchShardsAction());\n+        registerHandler.accept(new RestPendingClusterTasksAction());\n+        registerHandler.accept(new RestPutRepositoryAction());\n+        registerHandler.accept(new RestGetRepositoriesAction(settingsFilter));\n+        registerHandler.accept(new RestDeleteRepositoryAction());\n+        registerHandler.accept(new RestVerifyRepositoryAction());\n+        registerHandler.accept(new RestCleanupRepositoryAction());\n+        registerHandler.accept(new RestGetSnapshotsAction());\n+        registerHandler.accept(new RestCreateSnapshotAction());\n+        registerHandler.accept(new RestRestoreSnapshotAction());\n+        registerHandler.accept(new RestDeleteSnapshotAction());\n+        registerHandler.accept(new RestSnapshotsStatusAction());\n+        registerHandler.accept(new RestGetIndicesAction());\n+        registerHandler.accept(new RestIndicesStatsAction());\n+        registerHandler.accept(new RestIndicesSegmentsAction());\n+        registerHandler.accept(new RestIndicesShardStoresAction());\n+        registerHandler.accept(new RestGetAliasesAction());\n+        registerHandler.accept(new RestIndexDeleteAliasesAction());\n+        registerHandler.accept(new RestIndexPutAliasAction());\n+        registerHandler.accept(new RestIndicesAliasesAction());\n+        registerHandler.accept(new RestCreateIndexAction());\n+        registerHandler.accept(new RestResizeHandler.RestShrinkIndexAction());\n+        registerHandler.accept(new RestResizeHandler.RestSplitIndexAction());\n+        registerHandler.accept(new RestResizeHandler.RestCloneIndexAction());\n+        registerHandler.accept(new RestRolloverIndexAction());\n+        registerHandler.accept(new RestDeleteIndexAction());\n+        registerHandler.accept(new RestCloseIndexAction());\n+        registerHandler.accept(new RestOpenIndexAction());\n+\n+        registerHandler.accept(new RestUpdateSettingsAction());\n+        registerHandler.accept(new RestGetSettingsAction());\n+\n+        registerHandler.accept(new RestAnalyzeAction());\n+        registerHandler.accept(new RestGetIndexTemplateAction());\n+        registerHandler.accept(new RestPutIndexTemplateAction());\n+        registerHandler.accept(new RestDeleteIndexTemplateAction());\n+\n+        registerHandler.accept(new RestPutMappingAction());\n+        registerHandler.accept(new RestGetMappingAction());\n+        registerHandler.accept(new RestGetFieldMappingAction());\n+\n+        registerHandler.accept(new RestRefreshAction());\n+        registerHandler.accept(new RestFlushAction());\n+        registerHandler.accept(new RestSyncedFlushAction());\n+        registerHandler.accept(new RestForceMergeAction());\n+        registerHandler.accept(new RestUpgradeActionDeprecated());\n+        registerHandler.accept(new RestUpgradeStatusActionDeprecated());\n+        registerHandler.accept(new RestClearIndicesCacheAction());\n+\n+        registerHandler.accept(new RestIndexAction());\n+        registerHandler.accept(new CreateHandler());\n+        registerHandler.accept(new AutoIdHandler(clusterService));\n+        registerHandler.accept(new RestGetAction());\n+        registerHandler.accept(new RestGetSourceAction());\n+        registerHandler.accept(new RestMultiGetAction(settings));\n+        registerHandler.accept(new RestDeleteAction());\n+        registerHandler.accept(new RestCountAction());\n+        registerHandler.accept(new RestTermVectorsAction());\n+        registerHandler.accept(new RestMultiTermVectorsAction());\n+        registerHandler.accept(new RestBulkAction(settings));\n+        registerHandler.accept(new RestUpdateAction());\n+\n+        registerHandler.accept(new RestSearchAction());\n+        registerHandler.accept(new RestSearchScrollAction());\n+        registerHandler.accept(new RestClearScrollAction());\n+        registerHandler.accept(new RestMultiSearchAction(settings));\n+\n+        registerHandler.accept(new RestValidateQueryAction());\n+\n+        registerHandler.accept(new RestExplainAction());\n+\n+        registerHandler.accept(new RestRecoveryAction());\n+\n+        registerHandler.accept(new RestReloadSecureSettingsAction());\n \n         // Scripts API\n-        registerHandler.accept(new RestGetStoredScriptAction(restController));\n-        registerHandler.accept(new RestPutStoredScriptAction(restController));\n-        registerHandler.accept(new RestDeleteStoredScriptAction(restController));\n-        registerHandler.accept(new RestGetScriptContextAction(restController));\n-        registerHandler.accept(new RestGetScriptLanguageAction(restController));\n+        registerHandler.accept(new RestGetStoredScriptAction());\n+        registerHandler.accept(new RestPutStoredScriptAction());\n+        registerHandler.accept(new RestDeleteStoredScriptAction());\n+        registerHandler.accept(new RestGetScriptContextAction());\n+        registerHandler.accept(new RestGetScriptLanguageAction());\n \n-        registerHandler.accept(new RestFieldCapabilitiesAction(restController));\n+        registerHandler.accept(new RestFieldCapabilitiesAction());\n \n         // Tasks API\n-        registerHandler.accept(new RestListTasksAction(restController, nodesInCluster));\n-        registerHandler.accept(new RestGetTaskAction(restController));\n-        registerHandler.accept(new RestCancelTasksAction(restController, nodesInCluster));\n+        registerHandler.accept(new RestListTasksAction(nodesInCluster));\n+        registerHandler.accept(new RestGetTaskAction());\n+        registerHandler.accept(new RestCancelTasksAction(nodesInCluster));\n \n         // Ingest API\n-        registerHandler.accept(new RestPutPipelineAction(restController));\n-        registerHandler.accept(new RestGetPipelineAction(restController));\n-        registerHandler.accept(new RestDeletePipelineAction(restController));\n-        registerHandler.accept(new RestSimulatePipelineAction(restController));\n+        registerHandler.accept(new RestPutPipelineAction());\n+        registerHandler.accept(new RestGetPipelineAction());\n+        registerHandler.accept(new RestDeletePipelineAction());\n+        registerHandler.accept(new RestSimulatePipelineAction());\n \n         // CAT API\n-        registerHandler.accept(new RestAllocationAction(restController));\n-        registerHandler.accept(new RestShardsAction(restController));\n-        registerHandler.accept(new RestMasterAction(restController));\n-        registerHandler.accept(new RestNodesAction(restController));\n-        registerHandler.accept(new RestTasksAction(restController, nodesInCluster));\n-        registerHandler.accept(new RestIndicesAction(restController));\n-        registerHandler.accept(new RestSegmentsAction(restController));\n+        registerHandler.accept(new RestAllocationAction());\n+        registerHandler.accept(new RestShardsAction());\n+        registerHandler.accept(new RestMasterAction());\n+        registerHandler.accept(new RestNodesAction());\n+        registerHandler.accept(new RestTasksAction(nodesInCluster));\n+        registerHandler.accept(new RestIndicesAction());\n+        registerHandler.accept(new RestSegmentsAction());\n         // Fully qualified to prevent interference with rest.action.count.RestCountAction\n-        registerHandler.accept(new org.elasticsearch.rest.action.cat.RestCountAction(restController));\n+        registerHandler.accept(new org.elasticsearch.rest.action.cat.RestCountAction());\n         // Fully qualified to prevent interference with rest.action.indices.RestRecoveryAction\n-        registerHandler.accept(new RestCatRecoveryAction(restController));\n-        registerHandler.accept(new RestHealthAction(restController));\n-        registerHandler.accept(new org.elasticsearch.rest.action.cat.RestPendingClusterTasksAction(restController));\n-        registerHandler.accept(new RestAliasAction(restController));\n-        registerHandler.accept(new RestThreadPoolAction(restController));\n-        registerHandler.accept(new RestPluginsAction(restController));\n-        registerHandler.accept(new RestFielddataAction(restController));\n-        registerHandler.accept(new RestNodeAttrsAction(restController));\n-        registerHandler.accept(new RestRepositoriesAction(restController));\n-        registerHandler.accept(new RestSnapshotAction(restController));\n-        registerHandler.accept(new RestTemplatesAction(restController));\n+        registerHandler.accept(new RestCatRecoveryAction());\n+        registerHandler.accept(new RestHealthAction());\n+        registerHandler.accept(new org.elasticsearch.rest.action.cat.RestPendingClusterTasksAction());\n+        registerHandler.accept(new RestAliasAction());\n+        registerHandler.accept(new RestThreadPoolAction());\n+        registerHandler.accept(new RestPluginsAction());\n+        registerHandler.accept(new RestFielddataAction());\n+        registerHandler.accept(new RestNodeAttrsAction());\n+        registerHandler.accept(new RestRepositoriesAction());\n+        registerHandler.accept(new RestSnapshotAction());\n+        registerHandler.accept(new RestTemplatesAction());\n         for (ActionPlugin plugin : actionPlugins) {\n             for (RestHandler handler : plugin.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings,\n                     settingsFilter, indexNameExpressionResolver, nodesInCluster)) {\n                 registerHandler.accept(handler);\n             }\n         }\n-        registerHandler.accept(new RestCatAction(restController, catActions));\n+        registerHandler.accept(new RestCatAction(catActions));", "originalCommit": "771b4e12948698f98c3098fa1e55567475633761", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "995f5f4601ca12505beaa6207a0ebb45b10f854c", "url": "https://github.com/elastic/elasticsearch/commit/995f5f4601ca12505beaa6207a0ebb45b10f854c", "message": "Merge branch 'master' into rest_handler_safe_register", "committedDate": "2020-02-07T16:36:39Z", "type": "commit"}, {"oid": "2b69b84cd44b19456fbbe1f1ff408b399cddbc3b", "url": "https://github.com/elastic/elasticsearch/commit/2b69b84cd44b19456fbbe1f1ff408b399cddbc3b", "message": "fix new autoscaling handler", "committedDate": "2020-02-07T16:40:04Z", "type": "commit"}, {"oid": "265327123f4b59d7775f6ec62fe1622cf12b1bff", "url": "https://github.com/elastic/elasticsearch/commit/265327123f4b59d7775f6ec62fe1622cf12b1bff", "message": "method first then path", "committedDate": "2020-02-07T16:42:06Z", "type": "commit"}, {"oid": "086a29595ffa8820814d925c64f97bc40b4fe741", "url": "https://github.com/elastic/elasticsearch/commit/086a29595ffa8820814d925c64f97bc40b4fe741", "message": "handledRoutes -> routes", "committedDate": "2020-02-07T16:43:58Z", "type": "commit"}, {"oid": "e40372a166091b9524e10c710c59e1ef7c60404d", "url": "https://github.com/elastic/elasticsearch/commit/e40372a166091b9524e10c710c59e1ef7c60404d", "message": "checkstyle", "committedDate": "2020-02-07T16:52:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0NjEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376746108", "bodyText": "In a follow-up, let's get these loggers out of here. It doesn't make sense they are put of the route, and reflecting on it, I don't think we need a dedicated deprecation logger for every REST handler that deprecates some method. I think we can create a top-level RestController deprecation logger for this purpose.", "author": "jasontedor", "createdAt": "2020-02-09T01:00:52Z", "path": "server/src/main/java/org/elasticsearch/rest/RestHandler.java", "diffHunk": "@@ -59,4 +64,101 @@ default boolean supportsContentStream() {\n     default boolean allowsUnsafeBuffers() {\n         return false;\n     }\n+\n+    /**\n+     * The list of {@link Route}s that this RestHandler is responsible for handling.\n+     */\n+    default List<Route> routes() {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * A list of routes handled by this RestHandler that are deprecated and do not have a direct\n+     * replacement. If changing the {@code path} or {@code method} of a route,\n+     * use {@link #replacedRoutes()}.\n+     */\n+    default List<DeprecatedRoute> deprecatedRoutes() {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * A list of routes handled by this RestHandler that have had their {@code path} and/or\n+     * {@code method} changed. The pre-existing {@code route} will be registered\n+     * as deprecated alongside the updated {@code route}.\n+     */\n+    default List<ReplacedRoute> replacedRoutes() {\n+        return Collections.emptyList();\n+    }\n+\n+    class Route {\n+\n+        private final String path;\n+        private final Method method;\n+\n+        public Route(Method method, String path) {\n+            this.path = path;\n+            this.method = method;\n+        }\n+\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        public Method getMethod() {\n+            return method;\n+        }\n+    }\n+\n+    /**\n+     * Represents an API that has been deprecated and is slated for removal.\n+     */\n+    class DeprecatedRoute extends Route {\n+\n+        private final String deprecationMessage;\n+        private final DeprecationLogger logger;\n+\n+        public DeprecatedRoute(Method method, String path, String deprecationMessage, DeprecationLogger logger) {", "originalCommit": "e40372a166091b9524e10c710c59e1ef7c60404d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0NjExMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51950#discussion_r376746111", "bodyText": "Same comment here about the deprecation logger.", "author": "jasontedor", "createdAt": "2020-02-09T01:01:00Z", "path": "server/src/main/java/org/elasticsearch/rest/RestHandler.java", "diffHunk": "@@ -59,4 +64,101 @@ default boolean supportsContentStream() {\n     default boolean allowsUnsafeBuffers() {\n         return false;\n     }\n+\n+    /**\n+     * The list of {@link Route}s that this RestHandler is responsible for handling.\n+     */\n+    default List<Route> routes() {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * A list of routes handled by this RestHandler that are deprecated and do not have a direct\n+     * replacement. If changing the {@code path} or {@code method} of a route,\n+     * use {@link #replacedRoutes()}.\n+     */\n+    default List<DeprecatedRoute> deprecatedRoutes() {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * A list of routes handled by this RestHandler that have had their {@code path} and/or\n+     * {@code method} changed. The pre-existing {@code route} will be registered\n+     * as deprecated alongside the updated {@code route}.\n+     */\n+    default List<ReplacedRoute> replacedRoutes() {\n+        return Collections.emptyList();\n+    }\n+\n+    class Route {\n+\n+        private final String path;\n+        private final Method method;\n+\n+        public Route(Method method, String path) {\n+            this.path = path;\n+            this.method = method;\n+        }\n+\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        public Method getMethod() {\n+            return method;\n+        }\n+    }\n+\n+    /**\n+     * Represents an API that has been deprecated and is slated for removal.\n+     */\n+    class DeprecatedRoute extends Route {\n+\n+        private final String deprecationMessage;\n+        private final DeprecationLogger logger;\n+\n+        public DeprecatedRoute(Method method, String path, String deprecationMessage, DeprecationLogger logger) {\n+            super(method, path);\n+            this.deprecationMessage = deprecationMessage;\n+            this.logger = logger;\n+        }\n+\n+        public String getDeprecationMessage() {\n+            return deprecationMessage;\n+        }\n+\n+        public DeprecationLogger getLogger() {\n+            return logger;\n+        }\n+    }\n+\n+    /**\n+     * Represents an API that has had its {@code path} or {@code method} changed. Holds both the\n+     * new and previous {@code path} and {@code method} combination.\n+     */\n+    class ReplacedRoute extends Route {\n+\n+        private final String deprecatedPath;\n+        private final Method deprecatedMethod;\n+        private final DeprecationLogger logger;\n+\n+        public ReplacedRoute(Method method, String path, Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger) {", "originalCommit": "e40372a166091b9524e10c710c59e1ef7c60404d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "76ec12590048523831242a8174fa0d0b33336a2e", "url": "https://github.com/elastic/elasticsearch/commit/76ec12590048523831242a8174fa0d0b33336a2e", "message": "Merge branch 'master' into rest_handler_safe_register", "committedDate": "2020-02-09T01:04:14Z", "type": "commit"}, {"oid": "bda4cc54519bd20973291b91d34612d669b0d358", "url": "https://github.com/elastic/elasticsearch/commit/bda4cc54519bd20973291b91d34612d669b0d358", "message": "Fix imports", "committedDate": "2020-02-09T14:10:43Z", "type": "commit"}, {"oid": "8ad163e23b9a118a2ff3e5f5c5b694d683f6eee2", "url": "https://github.com/elastic/elasticsearch/commit/8ad163e23b9a118a2ff3e5f5c5b694d683f6eee2", "message": "Merge branch 'master' into rest_handler_safe_register", "committedDate": "2020-02-10T03:32:22Z", "type": "commit"}]}