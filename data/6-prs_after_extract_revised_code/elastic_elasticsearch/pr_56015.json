{"pr_number": 56015, "pr_title": "SQL: Add BigDecimal support to JDBC", "pr_createdAt": "2020-04-30T11:52:14Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56015", "timeline": [{"oid": "4921a1a3681bfbbd00a3e1bd28be84e33441ebe2", "url": "https://github.com/elastic/elasticsearch/commit/4921a1a3681bfbbd00a3e1bd28be84e33441ebe2", "message": "Introduce BigDecimal support to JDBC -- fetching\n\nThis commit adds support for the getBigDecimal() methods.", "committedDate": "2020-04-29T20:35:42Z", "type": "commit"}, {"oid": "a20e4f08a09942d00fd21891ef8ef9e1f5fdbee3", "url": "https://github.com/elastic/elasticsearch/commit/a20e4f08a09942d00fd21891ef8ef9e1f5fdbee3", "message": "Allow BigDecimal params in double range\n\nA prepared statement will now accept a BigDecimal parameter as a proxy\nfor a double, if the conversion is lossless.", "committedDate": "2020-04-30T11:18:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1NDYyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r417954629", "bodyText": "I've removed an index involvement mostly due to #56013. Using an index for this test doesn't seem to bring any particular value, but can revert if I'm missing anything.", "author": "bpintea", "createdAt": "2020-04-30T11:54:23Z", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/PreparedStatementTestCase.java", "diffHunk": "@@ -16,16 +17,12 @@\n import java.sql.SQLException;\n import java.sql.SQLSyntaxErrorException;\n \n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.startsWith;\n \n public class PreparedStatementTestCase extends JdbcIntegrationTestCase {\n \n     public void testSupportedTypes() throws Exception {\n-        index(\"library\", builder -> {\n-            builder.field(\"name\", \"Don Quixote\");\n-            builder.field(\"page_count\", 1072);\n-        });\n-", "originalCommit": "a20e4f08a09942d00fd21891ef8ef9e1f5fdbee3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "77110760753698221dcb636edbb68fd086c787b2", "url": "https://github.com/elastic/elasticsearch/commit/77110760753698221dcb636edbb68fd086c787b2", "message": "Styling, line limit\n\n- adjust unchanged line to newly enforced line limit", "committedDate": "2020-04-30T13:12:28Z", "type": "commit"}, {"oid": "0860ffaf90cd1e1d8cfc8bda1dc345ff4ae0642f", "url": "https://github.com/elastic/elasticsearch/commit/0860ffaf90cd1e1d8cfc8bda1dc345ff4ae0642f", "message": "style check fix\n\nRemove wrongly added chunk.", "committedDate": "2020-04-30T14:06:01Z", "type": "commit"}, {"oid": "aac1914518f613569881bd69f1699d1b2cda7795", "url": "https://github.com/elastic/elasticsearch/commit/aac1914518f613569881bd69f1699d1b2cda7795", "message": "Merge remote-tracking branch 'upstream/master' into enh/jdbc_bigdecimal", "committedDate": "2020-05-04T10:42:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3NDQ3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419374471", "bodyText": "Why not delegate to the other getBigDecimal -> return getBigDecimal(column(columnLabel), scale) ?", "author": "costin", "createdAt": "2020-05-04T11:38:46Z", "path": "x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java", "diffHunk": "@@ -547,7 +550,9 @@ public InputStream getBinaryStream(int columnIndex) throws SQLException {\n     @Override\n     @Deprecated\n     public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException {\n-        throw new SQLFeatureNotSupportedException(\"BigDecimal not supported\");\n+        BigDecimal bd = getBigDecimal(columnLabel);", "originalCommit": "aac1914518f613569881bd69f1699d1b2cda7795", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NjU1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419546557", "bodyText": "Right, good point! Thanks.", "author": "bpintea", "createdAt": "2020-05-04T16:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3NDQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3dfa9d58b0c9f1205f72776f2ee5cb3277edb1af", "chunk": "diff --git a/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java\nindex 606f7bf063f..eaf29d85195 100644\n--- a/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java\n+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java\n\n@@ -550,9 +550,7 @@ class JdbcResultSet implements ResultSet, JdbcWrapper {\n     @Override\n     @Deprecated\n     public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException {\n-        BigDecimal bd = getBigDecimal(columnLabel);\n-        // see comment in {@link #getBigDecimal(int columnIndex, int scale)}\n-        return bd == null ? null : bd.setScale(scale);\n+        return getBigDecimal(column(columnLabel), scale);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5ODEyMg==", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419398122", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for(Entry<String, Number> e : map.entrySet()) {\n          \n          \n            \n                        for (Entry<String, Number> e : map.entrySet()) {", "author": "matriv", "createdAt": "2020-05-04T12:27:25Z", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java", "diffHunk": "@@ -791,7 +789,188 @@ public void testGettingInvalidFloat() throws Exception {\n                     sqle.getMessage());\n         });\n     }\n-    \n+\n+    //\n+    // BigDecimal fetching testing\n+    //\n+    static final Map<Class<? extends Number>, Integer> JAVA_TO_SQL_NUMERIC_TYPES_MAP = new HashMap<>() {{\n+        put(Byte.class, Types.TINYINT);\n+        put(Short.class, Types.SMALLINT);\n+        put(Integer.class, Types.INTEGER);\n+        put(Long.class, Types.BIGINT);\n+        put(Float.class, Types.REAL);\n+        put(Double.class, Types.DOUBLE);\n+        // TODO: no half & scaled float testing\n+    }};\n+\n+    private static <T extends Number> void validateBigDecimalWithoutCasting(ResultSet results, List<T> testValues)\n+        throws SQLException {\n+\n+        ResultSetMetaData resultSetMetaData = results.getMetaData();\n+\n+        Class<? extends Number> clazz = testValues.get(0).getClass();\n+        String primitiveName = clazz.getSimpleName().toLowerCase(Locale.ROOT);\n+\n+        BigDecimal testVal1 = new BigDecimal(testValues.get(0).toString());\n+        BigDecimal testVal2 = new BigDecimal(testValues.get(1).toString());\n+        BigDecimal testVal3 = new BigDecimal(testValues.get(2).toString());\n+\n+        assertEquals(3, resultSetMetaData.getColumnCount());\n+        assertEquals(JAVA_TO_SQL_NUMERIC_TYPES_MAP.get(clazz).longValue(), resultSetMetaData.getColumnType(1));\n+        assertEquals(JAVA_TO_SQL_NUMERIC_TYPES_MAP.get(clazz).longValue(), resultSetMetaData.getColumnType(2));\n+\n+        assertTrue(results.next());\n+\n+        assertEquals(testVal1, results.getBigDecimal(1));\n+        assertEquals(testVal1, results.getBigDecimal(\"test_\" + primitiveName));\n+        assertEquals(testVal1, results.getObject(\"test_\" + primitiveName, BigDecimal.class));\n+        assertEquals(results.getObject(1).getClass(), clazz);\n+\n+        assertNull(results.getBigDecimal(2));\n+        assertTrue(results.wasNull());\n+        assertNull(results.getObject(\"test_null_\" + primitiveName));\n+        assertTrue(results.wasNull());\n+\n+        assertTrue(results.next());\n+\n+        assertEquals(testVal2, results.getBigDecimal(1));\n+        assertEquals(testVal2, results.getBigDecimal(\"test_\" + primitiveName));\n+        assertEquals(results.getObject(1).getClass(), clazz);\n+        assertEquals(testVal3, results.getBigDecimal(\"test_keyword\"));\n+\n+        assertFalse(results.next());\n+    }\n+\n+    public void testGettingValidBigDecimalFromBooleanWithoutCasting() throws Exception {\n+        createTestDataForBooleanValueTests();\n+\n+        doWithQuery(\"SELECT test_boolean, test_null_boolean, test_keyword FROM test\", results -> {\n+            ResultSetMetaData resultSetMetaData = results.getMetaData();\n+            assertEquals(3, resultSetMetaData.getColumnCount());\n+            assertEquals(Types.BOOLEAN, resultSetMetaData.getColumnType(1));\n+            assertEquals(Types.BOOLEAN, resultSetMetaData.getColumnType(2));\n+\n+            assertTrue(results.next());\n+\n+            assertEquals(BigDecimal.ONE, results.getBigDecimal(1));\n+            assertEquals(BigDecimal.ONE, results.getBigDecimal(\"test_boolean\"));\n+            assertEquals(BigDecimal.ONE, results.getObject(1, BigDecimal.class));\n+\n+            assertNull(results.getBigDecimal(2));\n+            assertTrue(results.wasNull());\n+            assertNull(results.getBigDecimal(\"test_null_boolean\"));\n+            assertTrue(results.wasNull());\n+\n+            assertEquals(BigDecimal.ONE, results.getBigDecimal(3));\n+            assertEquals(BigDecimal.ONE, results.getBigDecimal(\"test_keyword\"));\n+\n+            assertTrue(results.next());\n+\n+            assertEquals(BigDecimal.ZERO, results.getBigDecimal(1));\n+            assertEquals(BigDecimal.ZERO, results.getBigDecimal(\"test_boolean\"));\n+            assertEquals(BigDecimal.ZERO, results.getObject(1, BigDecimal.class));\n+\n+            assertNull(results.getBigDecimal(2));\n+            assertTrue(results.wasNull());\n+            assertNull(results.getBigDecimal(\"test_null_boolean\"));\n+            assertTrue(results.wasNull());\n+\n+            assertEquals(BigDecimal.ZERO, results.getBigDecimal(3));\n+            assertEquals(BigDecimal.ZERO, results.getBigDecimal(\"test_keyword\"));\n+\n+            assertFalse(results.next());\n+        });\n+    }\n+    public void testGettingValidBigDecimalFromByteWithoutCasting() throws Exception {\n+        List<Byte> byteTestValues = createTestDataForNumericValueTests(ESTestCase::randomByte);\n+        doWithQuery(\"SELECT test_byte, test_null_byte, test_keyword FROM test\", byteTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromShortWithoutCasting() throws Exception {\n+        List<Short> shortTestValues = createTestDataForNumericValueTests(ESTestCase::randomShort);\n+        doWithQuery(\"SELECT test_short, test_null_short, test_keyword FROM test\", shortTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromIntegerWithoutCasting() throws Exception {\n+        List<Integer> integerTestValues = createTestDataForNumericValueTests(ESTestCase::randomInt);\n+        doWithQuery(\"SELECT test_integer, test_null_integer, test_keyword FROM test\", integerTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromLongWithoutCasting() throws Exception {\n+        List<Long> longTestValues = createTestDataForNumericValueTests(ESTestCase::randomLong);\n+        doWithQuery(\"SELECT test_long, test_null_long, test_keyword FROM test\", longTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromFloatWithoutCasting() throws Exception {\n+        List<Float> floatTestValues = createTestDataForNumericValueTests(ESTestCase::randomFloat);\n+        doWithQuery(\"SELECT test_float, test_null_float, test_keyword FROM test\", floatTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+    public void testGettingValidBigDecimalFromDoubleWithoutCasting() throws Exception {\n+        List<Double> doubleTestValues = createTestDataForNumericValueTests(ESTestCase::randomDouble);\n+        doWithQuery(\"SELECT test_double, test_null_double, test_keyword FROM test\", doubleTestValues,\n+            ResultSetTestCase::validateBigDecimalWithoutCasting);\n+    }\n+\n+    public void testGettingValidBigDecimalWithCasting() throws Exception {\n+        Map<String,Number> map = createTestDataForNumericValueTypes(() -> randomDouble());\n+\n+        doWithQuery(SELECT_WILDCARD, (results) -> {\n+            results.next();\n+            for(Entry<String, Number> e : map.entrySet()) {", "originalCommit": "aac1914518f613569881bd69f1699d1b2cda7795", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1bb357b94033bc6b1a1644d34810d698687a8cb7", "chunk": "diff --git a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java\nindex bbb5016c7be..390e1e52333 100644\n--- a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java\n+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java\n\n@@ -917,7 +917,7 @@ public class ResultSetTestCase extends JdbcIntegrationTestCase {\n \n         doWithQuery(SELECT_WILDCARD, (results) -> {\n             results.next();\n-            for(Entry<String, Number> e : map.entrySet()) {\n+            for (Entry<String, Number> e : map.entrySet()) {\n                 BigDecimal actualByObj = results.getObject(e.getKey(), BigDecimal.class);\n                 BigDecimal actualByType = results.getBigDecimal(e.getKey());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5ODczNw==", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419398737", "bodyText": "Why not adding those too?", "author": "matriv", "createdAt": "2020-05-04T12:28:38Z", "path": "x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java", "diffHunk": "@@ -791,7 +789,188 @@ public void testGettingInvalidFloat() throws Exception {\n                     sqle.getMessage());\n         });\n     }\n-    \n+\n+    //\n+    // BigDecimal fetching testing\n+    //\n+    static final Map<Class<? extends Number>, Integer> JAVA_TO_SQL_NUMERIC_TYPES_MAP = new HashMap<>() {{\n+        put(Byte.class, Types.TINYINT);\n+        put(Short.class, Types.SMALLINT);\n+        put(Integer.class, Types.INTEGER);\n+        put(Long.class, Types.BIGINT);\n+        put(Float.class, Types.REAL);\n+        put(Double.class, Types.DOUBLE);\n+        // TODO: no half & scaled float testing", "originalCommit": "aac1914518f613569881bd69f1699d1b2cda7795", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MjAzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56015#discussion_r419552039", "bodyText": "It probably should be done indeed, but I was thinking to keep it focused on BigDecimal for now, since adding coverage for half- and scaled- floats would require extending the testing for the rest of the types too.", "author": "bpintea", "createdAt": "2020-05-04T16:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5ODczNw=="}], "type": "inlineReview", "revised_code": {"commit": "1bb357b94033bc6b1a1644d34810d698687a8cb7", "chunk": "diff --git a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java\nindex bbb5016c7be..390e1e52333 100644\n--- a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java\n+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java\n\n@@ -917,7 +917,7 @@ public class ResultSetTestCase extends JdbcIntegrationTestCase {\n \n         doWithQuery(SELECT_WILDCARD, (results) -> {\n             results.next();\n-            for(Entry<String, Number> e : map.entrySet()) {\n+            for (Entry<String, Number> e : map.entrySet()) {\n                 BigDecimal actualByObj = results.getObject(e.getKey(), BigDecimal.class);\n                 BigDecimal actualByType = results.getBigDecimal(e.getKey());\n \n"}}, {"oid": "3dfa9d58b0c9f1205f72776f2ee5cb3277edb1af", "url": "https://github.com/elastic/elasticsearch/commit/3dfa9d58b0c9f1205f72776f2ee5cb3277edb1af", "message": "Adress review comments\n\nRemove code duplicate in getBigDecimal(String columnLabel, int scale).", "committedDate": "2020-05-04T16:01:36Z", "type": "commit"}, {"oid": "1bb357b94033bc6b1a1644d34810d698687a8cb7", "url": "https://github.com/elastic/elasticsearch/commit/1bb357b94033bc6b1a1644d34810d698687a8cb7", "message": "Update x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ResultSetTestCase.java\n\nCo-authored-by: Marios Trivyzas <matriv@gmail.com>", "committedDate": "2020-05-04T16:05:54Z", "type": "commit"}, {"oid": "75be8a5a5288092123d092b787942ff388ea16d7", "url": "https://github.com/elastic/elasticsearch/commit/75be8a5a5288092123d092b787942ff388ea16d7", "message": "Suppress failure due to use of deprecated APIs\n\nDisable the deprecation-API usage failure, since this is used to\nimplement a deprecated API itself.", "committedDate": "2020-05-04T16:28:59Z", "type": "commit"}, {"oid": "a7da84384bddd282b33761d1fc8decac2e1b1aee", "url": "https://github.com/elastic/elasticsearch/commit/a7da84384bddd282b33761d1fc8decac2e1b1aee", "message": "Merge branch 'enh/jdbc_bigdecimal' of github.com:bpintea/elasticsearch into enh/jdbc_bigdecimal", "committedDate": "2020-05-04T16:30:39Z", "type": "commit"}]}