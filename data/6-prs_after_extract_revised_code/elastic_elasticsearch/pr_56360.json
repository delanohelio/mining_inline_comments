{"pr_number": 56360, "pr_title": "[ML] Allow stopping DF analytics whose config is missing", "pr_createdAt": "2020-05-07T15:53:55Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56360", "timeline": [{"oid": "edcb4f37313c3b19b8088f15e7975e955f9e5b66", "url": "https://github.com/elastic/elasticsearch/commit/edcb4f37313c3b19b8088f15e7975e955f9e5b66", "message": "[ML] Allow stopping DF analytics whose config is missing\n\nIt is possible that the config document for a data frame\nanalytics job is deleted from the config index. If that is\nthe case the user is unable to stop a running job because\nwe attempt to retrieve the config and that will throw.\n\nThis commit changes that. When the request is forced,\nwe do not expand the requested ids based on the existing\nconfigs but from the list of running tasks instead.", "committedDate": "2020-05-07T15:12:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTIzNw==", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421955237", "bodyText": "Can it be that an item will be added twice to matchingItems  because it matches 2 patterns? E.g. item \"abc\" and patterns \"a*\" and \"ab*\"?\nPlease add a unit test for this case.", "author": "przemekwitek", "createdAt": "2020-05-08T05:59:58Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlStrings.java", "diffHunk": "@@ -94,4 +101,33 @@ public static String getParentField(String fieldPath) {\n         }\n         return fieldPath.substring(0, lastIndexOfDot);\n     }\n+\n+    /**\n+     * Given a collection of strings and some patterns, it finds the strings that match against at least one pattern.\n+     * @param patterns the patterns may contain wildcards\n+     * @param items the collections of strings\n+     * @return the strings from {@code items} that match against at least one pattern\n+     */\n+    public static Collection<String> findMatching(String[] patterns, Set<String> items) {\n+        if (items.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        if (Strings.isAllOrWildcard(patterns)) {\n+            return items;\n+        }\n+\n+        List<String> matchingItems = new ArrayList<>();\n+        for (String pattern : patterns) {\n+            if (items.contains(pattern))  {\n+                matchingItems.add(pattern);\n+            } else if (Regex.isSimpleMatchPattern(pattern)) {\n+                for (String item : items) {\n+                    if (Regex.simpleMatch(pattern, item)) {\n+                        matchingItems.add(item);", "originalCommit": "edcb4f37313c3b19b8088f15e7975e955f9e5b66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5Mjc4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421992785", "bodyText": "It very well can! Well spotted! Fixing.", "author": "dimitris-athanasiou", "createdAt": "2020-05-08T07:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5NDQ0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421994443", "bodyText": "Ah, I didn't notice the \"Set\" type, so the code was correct. Anyway, thanks for adding a test!", "author": "przemekwitek", "createdAt": "2020-05-08T07:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlStrings.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlStrings.java\nindex 5a09f9b2cfa3..9eda14b63acb 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlStrings.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlStrings.java\n\n@@ -108,15 +109,15 @@ public final class MlStrings {\n      * @param items the collections of strings\n      * @return the strings from {@code items} that match against at least one pattern\n      */\n-    public static Collection<String> findMatching(String[] patterns, Set<String> items) {\n+    public static Set<String> findMatching(String[] patterns, Set<String> items) {\n         if (items.isEmpty()) {\n-            return Collections.emptyList();\n+            return Collections.emptySet();\n         }\n         if (Strings.isAllOrWildcard(patterns)) {\n             return items;\n         }\n \n-        List<String> matchingItems = new ArrayList<>();\n+        Set<String> matchingItems = new LinkedHashSet<>();\n         for (String pattern : patterns) {\n             if (items.contains(pattern))  {\n                 matchingItems.add(pattern);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NjU4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421956583", "bodyText": "IIRC hasItems is a partial match (i.e. it asserts that the actual collection has expected items and maybe some more).\nI think org.hamcrest.Matchers.contains should be used instead in order to achieve full match.", "author": "przemekwitek", "createdAt": "2020-05-08T06:04:27Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java", "diffHunk": "@@ -46,4 +53,21 @@ public void testHasValidLengthForId() {\n         assertThat(MlStrings.hasValidLengthForId(randomAlphaOfLength(64)), is(true));\n         assertThat(MlStrings.hasValidLengthForId(randomAlphaOfLength(65)), is(false));\n     }\n+\n+    public void testFindMatching_GivenEmptyItems() {\n+        assertThat(MlStrings.findMatching(new String[0], Collections.emptySet()), is(empty()));\n+    }\n+\n+    public void testFindMatching_GivenAllPattern() {\n+        assertThat(MlStrings.findMatching(new String[] {\"_all\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));", "originalCommit": "edcb4f37313c3b19b8088f15e7975e955f9e5b66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5Mjg3OA==", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421992878", "bodyText": "\ud83d\udc4d", "author": "dimitris-athanasiou", "createdAt": "2020-05-08T07:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NjU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java\nindex 44bc5005677b..f4e638fc9199 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java\n\n@@ -59,15 +60,20 @@ public class MlStringsTests extends ESTestCase {\n     }\n \n     public void testFindMatching_GivenAllPattern() {\n-        assertThat(MlStrings.findMatching(new String[] {\"_all\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));\n+        assertThat(MlStrings.findMatching(new String[] {\"_all\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), contains(\"a\", \"b\"));\n     }\n \n     public void testFindMatching_GivenWildcardPattern() {\n-        assertThat(MlStrings.findMatching(new String[] {\"*\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));\n+        assertThat(MlStrings.findMatching(new String[] {\"*\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), contains(\"a\", \"b\"));\n     }\n \n     public void testFindMatching_GivenMixedPatterns() {\n         assertThat(MlStrings.findMatching(new String[] {\"concrete\", \"wild-*\"}, new HashSet<>(\n-            Arrays.asList(\"a\", \"concrete\", \"con*\", \"wild-1\", \"wild-2\"))), hasItems(\"concrete\", \"wild-1\", \"wild-2\"));\n+            Arrays.asList(\"a\", \"concrete\", \"con*\", \"wild-1\", \"wild-2\"))), contains(\"concrete\", \"wild-1\", \"wild-2\"));\n+    }\n+\n+    public void testFindMatching_GivenItemMatchedByTwoPatterns() {\n+        Set<String> matching = MlStrings.findMatching(new String[]{\"a*\", \"ab*\"}, new HashSet<>(Collections.singletonList(\"abc\")));\n+        assertThat(matching, contains(\"abc\"));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NjgzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421956831", "bodyText": "As noted before, please add a test when one item matches 2 patterns.", "author": "przemekwitek", "createdAt": "2020-05-08T06:05:17Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java", "diffHunk": "@@ -46,4 +53,21 @@ public void testHasValidLengthForId() {\n         assertThat(MlStrings.hasValidLengthForId(randomAlphaOfLength(64)), is(true));\n         assertThat(MlStrings.hasValidLengthForId(randomAlphaOfLength(65)), is(false));\n     }\n+\n+    public void testFindMatching_GivenEmptyItems() {\n+        assertThat(MlStrings.findMatching(new String[0], Collections.emptySet()), is(empty()));\n+    }\n+\n+    public void testFindMatching_GivenAllPattern() {\n+        assertThat(MlStrings.findMatching(new String[] {\"_all\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));\n+    }\n+\n+    public void testFindMatching_GivenWildcardPattern() {\n+        assertThat(MlStrings.findMatching(new String[] {\"*\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));\n+    }\n+\n+    public void testFindMatching_GivenMixedPatterns() {\n+        assertThat(MlStrings.findMatching(new String[] {\"concrete\", \"wild-*\"}, new HashSet<>(", "originalCommit": "edcb4f37313c3b19b8088f15e7975e955f9e5b66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5Mjk0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421992949", "bodyText": "\ud83d\udc4d", "author": "dimitris-athanasiou", "createdAt": "2020-05-08T07:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NjgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java\nindex 44bc5005677b..f4e638fc9199 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/utils/MlStringsTests.java\n\n@@ -59,15 +60,20 @@ public class MlStringsTests extends ESTestCase {\n     }\n \n     public void testFindMatching_GivenAllPattern() {\n-        assertThat(MlStrings.findMatching(new String[] {\"_all\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));\n+        assertThat(MlStrings.findMatching(new String[] {\"_all\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), contains(\"a\", \"b\"));\n     }\n \n     public void testFindMatching_GivenWildcardPattern() {\n-        assertThat(MlStrings.findMatching(new String[] {\"*\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), hasItems(\"a\", \"b\"));\n+        assertThat(MlStrings.findMatching(new String[] {\"*\"}, new HashSet<>(Arrays.asList(\"a\", \"b\"))), contains(\"a\", \"b\"));\n     }\n \n     public void testFindMatching_GivenMixedPatterns() {\n         assertThat(MlStrings.findMatching(new String[] {\"concrete\", \"wild-*\"}, new HashSet<>(\n-            Arrays.asList(\"a\", \"concrete\", \"con*\", \"wild-1\", \"wild-2\"))), hasItems(\"concrete\", \"wild-1\", \"wild-2\"));\n+            Arrays.asList(\"a\", \"concrete\", \"con*\", \"wild-1\", \"wild-2\"))), contains(\"concrete\", \"wild-1\", \"wild-2\"));\n+    }\n+\n+    public void testFindMatching_GivenItemMatchedByTwoPatterns() {\n+        Set<String> matching = MlStrings.findMatching(new String[]{\"a*\", \"ab*\"}, new HashSet<>(Collections.singletonList(\"abc\")));\n+        assertThat(matching, contains(\"abc\"));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1ODMyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56360#discussion_r421958321", "bodyText": "static?", "author": "przemekwitek", "createdAt": "2020-05-08T06:09:55Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDataFrameAnalyticsAction.java", "diffHunk": "@@ -112,26 +115,51 @@ protected void doExecute(Task task, StopDataFrameAnalyticsAction.Request request\n             listener::onFailure\n         );\n \n-        expandIds(state, request, expandedIdsListener);\n+        findIdsToStop(state, request, expandedIdsListener);\n     }\n \n-    private void expandIds(ClusterState clusterState, StopDataFrameAnalyticsAction.Request request,\n-                           ActionListener<Set<String>> expandedIdsListener) {\n-        ActionListener<List<DataFrameAnalyticsConfig>> configsListener = ActionListener.wrap(\n-            configs -> {\n-                Set<String> matchingIds = configs.stream().map(DataFrameAnalyticsConfig::getId).collect(Collectors.toSet());\n-                PersistentTasksCustomMetadata tasksMetadata = clusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n-                Set<String> startedIds = tasksMetadata == null ? Collections.emptySet() : tasksMetadata.tasks().stream()\n-                    .filter(t -> t.getId().startsWith(MlTasks.DATA_FRAME_ANALYTICS_TASK_ID_PREFIX))\n-                    .map(t -> t.getId().replaceFirst(MlTasks.DATA_FRAME_ANALYTICS_TASK_ID_PREFIX, \"\"))\n-                    .collect(Collectors.toSet());\n+    private void findIdsToStop(ClusterState clusterState, StopDataFrameAnalyticsAction.Request request,\n+                               ActionListener<Set<String>> expandedIdsListener) {\n+        Set<String> startedIds = getAllStartedIds(clusterState);\n+\n+        ActionListener<Set<String>> matchingIdsListener = ActionListener.wrap(\n+            matchingIds -> {\n                 startedIds.retainAll(matchingIds);\n                 expandedIdsListener.onResponse(startedIds);\n             },\n             expandedIdsListener::onFailure\n         );\n \n-        configProvider.getMultiple(request.getId(), request.allowNoMatch(), configsListener);\n+        if (request.isForce()) {\n+            matchAllStartedIds(request, startedIds, matchingIdsListener);\n+        } else {\n+            configProvider.getMultiple(request.getId(), request.allowNoMatch(), ActionListener.wrap(\n+                configs -> matchingIdsListener.onResponse(\n+                    configs.stream().map(DataFrameAnalyticsConfig::getId).collect(Collectors.toSet())),\n+                matchingIdsListener::onFailure\n+            ));\n+        }\n+    }\n+\n+    private Set<String> getAllStartedIds(ClusterState clusterState) {", "originalCommit": "edcb4f37313c3b19b8088f15e7975e955f9e5b66", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDataFrameAnalyticsAction.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDataFrameAnalyticsAction.java\nindex 52efc623afd3..7f7bbefebe51 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDataFrameAnalyticsAction.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDataFrameAnalyticsAction.java\n\n@@ -141,7 +140,7 @@ public class TransportStopDataFrameAnalyticsAction\n         }\n     }\n \n-    private Set<String> getAllStartedIds(ClusterState clusterState) {\n+    private static Set<String> getAllStartedIds(ClusterState clusterState) {\n         PersistentTasksCustomMetadata tasksMetadata = clusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n         return tasksMetadata == null ? Collections.emptySet() : tasksMetadata.tasks().stream()\n             .filter(t -> t.getId().startsWith(MlTasks.DATA_FRAME_ANALYTICS_TASK_ID_PREFIX))\n"}}, {"oid": "4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca", "url": "https://github.com/elastic/elasticsearch/commit/4b52ffdee29fbe4879bc2b5abc1b2e2b0fee3fca", "message": "Address review comments", "committedDate": "2020-05-08T07:36:30Z", "type": "commit"}, {"oid": "9f3266cd8031219645307f8352f9862e2b40d2c3", "url": "https://github.com/elastic/elasticsearch/commit/9f3266cd8031219645307f8352f9862e2b40d2c3", "message": "Remove unused imports", "committedDate": "2020-05-08T08:04:03Z", "type": "commit"}]}