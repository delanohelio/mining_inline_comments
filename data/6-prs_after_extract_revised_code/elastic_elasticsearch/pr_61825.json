{"pr_number": 61825, "pr_title": "Change compound assignment structure to support String concatenation", "pr_createdAt": "2020-09-01T22:05:34Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61825", "timeline": [{"oid": "36f77cd4f6c5a09ce2d8284ab1895d27c8cc457e", "url": "https://github.com/elastic/elasticsearch/commit/36f77cd4f6c5a09ce2d8284ab1895d27c8cc457e", "message": "fix node ordering for string concatenation in compound assignment", "committedDate": "2020-08-31T23:55:53Z", "type": "commit"}, {"oid": "8deb61cff9d97edf11e156292f2cee04446e0e2e", "url": "https://github.com/elastic/elasticsearch/commit/8deb61cff9d97edf11e156292f2cee04446e0e2e", "message": "update to work with Java 8", "committedDate": "2020-09-01T22:02:15Z", "type": "commit"}, {"oid": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed", "url": "https://github.com/elastic/elasticsearch/commit/98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed", "message": "Merge branch 'master' into stringnode", "committedDate": "2020-09-01T23:31:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1Mzc1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r482253753", "bodyText": "Brief comment on what this node is", "author": "stu-elastic", "createdAt": "2020-09-02T17:45:37Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/BinaryImplNode.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.painless.ir;\n+\n+import org.elasticsearch.painless.ClassWriter;\n+import org.elasticsearch.painless.MethodWriter;\n+import org.elasticsearch.painless.phase.IRTreeVisitor;\n+import org.elasticsearch.painless.symbol.WriteScope;\n+\n+public class BinaryImplNode extends BinaryNode {", "originalCommit": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5Mzc4MA==", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r483093780", "bodyText": "Added.", "author": "jdconrad", "createdAt": "2020-09-03T16:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1Mzc1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MzI0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r482273246", "bodyText": "add a line about the subtlety here.", "author": "stu-elastic", "createdAt": "2020-09-02T18:18:51Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -427,89 +426,63 @@ protected ExpressionNode injectCast(AExpression userExpressionNode, ScriptScope\n     protected ExpressionNode buildLoadStore(int accessDepth, Location location, boolean isNullSafe,\n             ExpressionNode irPrefixNode, ExpressionNode irIndexNode, ExpressionNode irLoadNode, StoreNode irStoreNode) {\n \n-        ExpressionNode irExpressionNode;\n-\n-        // this load/store is only a load (read)\n-        if (irStoreNode == null) {\n-            ExpressionNode irAccessNode;\n-\n-            // this load is a symbol or dot load with no index node\n-            if (irIndexNode == null) {\n-                irAccessNode = irLoadNode;\n-            // this load is a dot or brace load with an index node\n-            } else {\n-                BinaryNode irBinaryNode = new BinaryNode();\n-                irBinaryNode.setLocation(location);\n-                irBinaryNode.setExpressionType(irLoadNode.getExpressionType());\n-                irBinaryNode.setLeftNode(irIndexNode);\n-                irBinaryNode.setRightNode(irLoadNode);\n-\n-                irAccessNode = irBinaryNode;\n+        // build out the load structure for load/compound assignment or the store structure for just store\n+        ExpressionNode irExpressionNode = irLoadNode != null ? irLoadNode : irStoreNode;\n+\n+        // this load/store is a dot or brace load\n+        if (irPrefixNode != null) {\n+            // this load/store requires and index\n+            if (irIndexNode != null) {\n+                BinaryImplNode binaryImplNode = new BinaryImplNode();\n+                binaryImplNode.setLocation(location);\n+                binaryImplNode.setExpressionType(void.class);\n+\n+                if (isNullSafe) {", "originalCommit": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5NTk0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r483095941", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-09-03T16:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MzI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7b7bf1e516c16fcd43f43063236a9b74fa699b5a", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 1793e02d763..fb1f49e1e52 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -429,15 +429,18 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n         // build out the load structure for load/compound assignment or the store structure for just store\n         ExpressionNode irExpressionNode = irLoadNode != null ? irLoadNode : irStoreNode;\n \n-        // this load/store is a dot or brace load\n         if (irPrefixNode != null) {\n-            // this load/store requires and index\n+            // this load/store is a dot or brace load/store\n+\n             if (irIndexNode != null) {\n+                // this load/store requires an index\n                 BinaryImplNode binaryImplNode = new BinaryImplNode();\n                 binaryImplNode.setLocation(location);\n                 binaryImplNode.setExpressionType(void.class);\n \n                 if (isNullSafe) {\n+                    // the null-safe structure is slightly different from the standard structure since\n+                    // both the index and expression are not written to the stack if the prefix is null\n                     binaryImplNode.setLeftNode(irIndexNode);\n                     binaryImplNode.setRightNode(irExpressionNode);\n                     irExpressionNode = binaryImplNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NDgzMA==", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r482274830", "bodyText": "maybe put these after the control structure on the same line so intellij doesn't keep \"intelligently\" moving them.", "author": "stu-elastic", "createdAt": "2020-09-02T18:20:34Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -862,7 +835,7 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 stringConcatenationNode.setLocation(irStoreNode.getLocation());\n                 stringConcatenationNode.setExpressionType(String.class);\n                 irCompoundNode = stringConcatenationNode;\n-            // handles when the operation is mathematical\n+                // handles when the operation is mathematical", "originalCommit": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5Njc3OA==", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r483096778", "bodyText": "Fixed.", "author": "jdconrad", "createdAt": "2020-09-03T16:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NDgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "7b7bf1e516c16fcd43f43063236a9b74fa699b5a", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 1793e02d763..fb1f49e1e52 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -835,7 +839,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n                 stringConcatenationNode.setLocation(irStoreNode.getLocation());\n                 stringConcatenationNode.setExpressionType(String.class);\n                 irCompoundNode = stringConcatenationNode;\n-                // handles when the operation is mathematical\n+            // handles when the operation is mathematical\n             } else {\n                 BinaryMathNode irBinaryMathNode = new BinaryMathNode();\n                 irBinaryMathNode.setLocation(irStoreNode.getLocation());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NTI1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r482275259", "bodyText": "indented", "author": "stu-elastic", "createdAt": "2020-09-02T18:21:03Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java", "diffHunk": "@@ -938,9 +911,11 @@ public void visitAssignment(EAssignment userAssignmentNode, ScriptScope scriptSc\n                 irBinaryMathNode.setLeftNode(irLoadNode);\n                 irBinaryMathNode.setRightNode(irValueNode);\n             }\n-        // handles a standard assignment\n+\n+            irAssignmentNode = irStoreNode;\n+            // handles a standard assignment", "originalCommit": "98f5cc09ebc8d38fb8039514f8a2ed54f621b5ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5NjgxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61825#discussion_r483096819", "bodyText": "Fixed.", "author": "jdconrad", "createdAt": "2020-09-03T16:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NTI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b7bf1e516c16fcd43f43063236a9b74fa699b5a", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\nindex 1793e02d763..fb1f49e1e52 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java\n\n@@ -913,7 +917,7 @@ public class DefaultUserTreeToIRTreePhase implements UserTreeVisitor<ScriptScope\n             }\n \n             irAssignmentNode = irStoreNode;\n-            // handles a standard assignment\n+        // handles a standard assignment\n         } else {\n             irAssignmentNode = (ExpressionNode)visit(userAssignmentNode.getLeftNode(), scriptScope);\n \n"}}, {"oid": "68eba526253f290a0f072ee3e35be32d7457a193", "url": "https://github.com/elastic/elasticsearch/commit/68eba526253f290a0f072ee3e35be32d7457a193", "message": "Merge branch 'master' into stringnode", "committedDate": "2020-09-03T16:05:47Z", "type": "commit"}, {"oid": "7b7bf1e516c16fcd43f43063236a9b74fa699b5a", "url": "https://github.com/elastic/elasticsearch/commit/7b7bf1e516c16fcd43f43063236a9b74fa699b5a", "message": "response to pr comments", "committedDate": "2020-09-03T16:15:29Z", "type": "commit"}, {"oid": "ee32b29630ad4d5d186cff03ccea0e0c86a2a696", "url": "https://github.com/elastic/elasticsearch/commit/ee32b29630ad4d5d186cff03ccea0e0c86a2a696", "message": "handle java 8", "committedDate": "2020-09-03T16:27:01Z", "type": "commit"}]}