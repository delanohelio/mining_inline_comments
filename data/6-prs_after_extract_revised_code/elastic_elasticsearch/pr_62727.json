{"pr_number": 62727, "pr_title": "Cleanup Blobstore Repository Metadata Serialization", "pr_createdAt": "2020-09-21T19:16:59Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62727", "timeline": [{"oid": "1824fb384dbdde173011d4a2262ea538dff0c1ec", "url": "https://github.com/elastic/elasticsearch/commit/1824fb384dbdde173011d4a2262ea538dff0c1ec", "message": "Cleanup Blobstore Repository Metadata Serialization\n\nFollow ups to #62684 making use of shorter utility for corruption checks.", "committedDate": "2020-09-21T19:13:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzNDMzMg==", "url": "https://github.com/elastic/elasticsearch/pull/62727#discussion_r492534332", "bodyText": "I'd prefer this to be final", "author": "tlrx", "createdAt": "2020-09-22T07:46:02Z", "path": "server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java", "diffHunk": "@@ -507,39 +508,36 @@ public static BlobStoreIndexShardSnapshot fromXContent(XContentParser parser) th\n         XContentParser.Token token = parser.currentToken();\n         if (token == XContentParser.Token.START_OBJECT) {\n             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n-                if (token == XContentParser.Token.FIELD_NAME) {\n-                    String currentFieldName = parser.currentName();\n-                    token = parser.nextToken();\n-                    if (token.isValue()) {\n-                        if (PARSE_NAME.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            snapshot = parser.text();\n-                        } else if (PARSE_INDEX_VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            // The index-version is needed for backward compatibility with v 1.0\n-                            indexVersion = parser.longValue();\n-                        } else if (PARSE_START_TIME.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            startTime = parser.longValue();\n-                        } else if (PARSE_TIME.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            time = parser.longValue();\n-                        } else if (PARSE_INCREMENTAL_FILE_COUNT.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            incrementalFileCount = parser.intValue();\n-                        } else if (PARSE_INCREMENTAL_SIZE.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            incrementalSize = parser.longValue();\n-                        } else {\n-                            throw new ElasticsearchParseException(\"unknown parameter [{}]\", currentFieldName);\n-                        }\n-                    } else if (token == XContentParser.Token.START_ARRAY) {\n-                        if (PARSE_FILES.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            while ((parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n-                                indexFiles.add(FileInfo.fromXContent(parser));\n-                            }\n-                        } else {\n-                            throw new ElasticsearchParseException(\"unknown parameter [{}]\", currentFieldName);\n+                XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser);\n+                String currentFieldName = parser.currentName();", "originalCommit": "1824fb384dbdde173011d4a2262ea538dff0c1ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83431aea32aa2c03ecf521f313557cb88d14758e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java b/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java\nindex 0fd7e66ad6c..826af94e750 100644\n--- a/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java\n+++ b/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java\n\n@@ -537,7 +537,7 @@ public class BlobStoreIndexShardSnapshot implements ToXContentFragment {\n                         throw new ElasticsearchParseException(\"unknown parameter [{}]\", currentFieldName);\n                     }\n                 } else {\n-                    throw new ElasticsearchParseException(\"unexpected token  [{}]\", token);\n+                    throw new ElasticsearchParseException(\"unexpected token [{}]\", token);\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzNDY0OA==", "url": "https://github.com/elastic/elasticsearch/pull/62727#discussion_r492534648", "bodyText": "Do you really prefer with an extra space? :)", "author": "tlrx", "createdAt": "2020-09-22T07:46:37Z", "path": "server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java", "diffHunk": "@@ -507,39 +508,36 @@ public static BlobStoreIndexShardSnapshot fromXContent(XContentParser parser) th\n         XContentParser.Token token = parser.currentToken();\n         if (token == XContentParser.Token.START_OBJECT) {\n             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n-                if (token == XContentParser.Token.FIELD_NAME) {\n-                    String currentFieldName = parser.currentName();\n-                    token = parser.nextToken();\n-                    if (token.isValue()) {\n-                        if (PARSE_NAME.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            snapshot = parser.text();\n-                        } else if (PARSE_INDEX_VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            // The index-version is needed for backward compatibility with v 1.0\n-                            indexVersion = parser.longValue();\n-                        } else if (PARSE_START_TIME.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            startTime = parser.longValue();\n-                        } else if (PARSE_TIME.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            time = parser.longValue();\n-                        } else if (PARSE_INCREMENTAL_FILE_COUNT.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            incrementalFileCount = parser.intValue();\n-                        } else if (PARSE_INCREMENTAL_SIZE.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            incrementalSize = parser.longValue();\n-                        } else {\n-                            throw new ElasticsearchParseException(\"unknown parameter [{}]\", currentFieldName);\n-                        }\n-                    } else if (token == XContentParser.Token.START_ARRAY) {\n-                        if (PARSE_FILES.match(currentFieldName, parser.getDeprecationHandler())) {\n-                            while ((parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n-                                indexFiles.add(FileInfo.fromXContent(parser));\n-                            }\n-                        } else {\n-                            throw new ElasticsearchParseException(\"unknown parameter [{}]\", currentFieldName);\n+                XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser);\n+                String currentFieldName = parser.currentName();\n+                token = parser.nextToken();\n+                if (token.isValue()) {\n+                    if (PARSE_NAME.match(currentFieldName, parser.getDeprecationHandler())) {\n+                        snapshot = parser.text();\n+                    } else if (PARSE_INDEX_VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n+                        // The index-version is needed for backward compatibility with v 1.0\n+                        indexVersion = parser.longValue();\n+                    } else if (PARSE_START_TIME.match(currentFieldName, parser.getDeprecationHandler())) {\n+                        startTime = parser.longValue();\n+                    } else if (PARSE_TIME.match(currentFieldName, parser.getDeprecationHandler())) {\n+                        time = parser.longValue();\n+                    } else if (PARSE_INCREMENTAL_FILE_COUNT.match(currentFieldName, parser.getDeprecationHandler())) {\n+                        incrementalFileCount = parser.intValue();\n+                    } else if (PARSE_INCREMENTAL_SIZE.match(currentFieldName, parser.getDeprecationHandler())) {\n+                        incrementalSize = parser.longValue();\n+                    } else {\n+                        throw new ElasticsearchParseException(\"unknown parameter [{}]\", currentFieldName);\n+                    }\n+                } else if (token == XContentParser.Token.START_ARRAY) {\n+                    if (PARSE_FILES.match(currentFieldName, parser.getDeprecationHandler())) {\n+                        while ((parser.nextToken()) != XContentParser.Token.END_ARRAY) {\n+                            indexFiles.add(FileInfo.fromXContent(parser));\n                         }\n                     } else {\n-                        throw new ElasticsearchParseException(\"unexpected token  [{}]\", token);\n+                        throw new ElasticsearchParseException(\"unknown parameter [{}]\", currentFieldName);\n                     }\n                 } else {\n-                    throw new ElasticsearchParseException(\"unexpected token [{}]\", token);\n+                    throw new ElasticsearchParseException(\"unexpected token  [{}]\", token);", "originalCommit": "1824fb384dbdde173011d4a2262ea538dff0c1ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83431aea32aa2c03ecf521f313557cb88d14758e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java b/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java\nindex 0fd7e66ad6c..826af94e750 100644\n--- a/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java\n+++ b/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java\n\n@@ -537,7 +537,7 @@ public class BlobStoreIndexShardSnapshot implements ToXContentFragment {\n                         throw new ElasticsearchParseException(\"unknown parameter [{}]\", currentFieldName);\n                     }\n                 } else {\n-                    throw new ElasticsearchParseException(\"unexpected token  [{}]\", token);\n+                    throw new ElasticsearchParseException(\"unexpected token [{}]\", token);\n                 }\n             }\n         }\n"}}, {"oid": "9b253fd8437eeab2d6d5c734b1cdf3f592a12db9", "url": "https://github.com/elastic/elasticsearch/commit/9b253fd8437eeab2d6d5c734b1cdf3f592a12db9", "message": "Merge remote-tracking branch 'elastic/master' into cleanup-repo-data-serialization", "committedDate": "2020-09-22T08:15:57Z", "type": "commit"}, {"oid": "83431aea32aa2c03ecf521f313557cb88d14758e", "url": "https://github.com/elastic/elasticsearch/commit/83431aea32aa2c03ecf521f313557cb88d14758e", "message": "remove weird extra space", "committedDate": "2020-09-22T08:16:45Z", "type": "commit"}, {"oid": "d6e78662ef12922194550efeaa744872437a3355", "url": "https://github.com/elastic/elasticsearch/commit/d6e78662ef12922194550efeaa744872437a3355", "message": "final", "committedDate": "2020-09-22T08:19:35Z", "type": "commit"}]}