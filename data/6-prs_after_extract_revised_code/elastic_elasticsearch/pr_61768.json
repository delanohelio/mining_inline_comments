{"pr_number": 61768, "pr_title": "Fix to actually throttle indexing under memory pressure", "pr_createdAt": "2020-09-01T06:58:13Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61768", "timeline": [{"oid": "33b3c62da7a5300b83fcb39062430372c03fdba8", "url": "https://github.com/elastic/elasticsearch/commit/33b3c62da7a5300b83fcb39062430372c03fdba8", "message": "Fix to actually throttle indexing on getting activated", "committedDate": "2020-09-08T09:27:44Z", "type": "commit"}, {"oid": "33b3c62da7a5300b83fcb39062430372c03fdba8", "url": "https://github.com/elastic/elasticsearch/commit/33b3c62da7a5300b83fcb39062430372c03fdba8", "message": "Fix to actually throttle indexing on getting activated", "committedDate": "2020-09-08T09:27:44Z", "type": "forcePushed"}, {"oid": "93f6f163c4cfac8872d28e2facd1db4022e145ad", "url": "https://github.com/elastic/elasticsearch/commit/93f6f163c4cfac8872d28e2facd1db4022e145ad", "message": "Add test\n\nAdd test", "committedDate": "2020-09-23T11:45:02Z", "type": "commit"}, {"oid": "93f6f163c4cfac8872d28e2facd1db4022e145ad", "url": "https://github.com/elastic/elasticsearch/commit/93f6f163c4cfac8872d28e2facd1db4022e145ad", "message": "Add test\n\nAdd test", "committedDate": "2020-09-23T11:45:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MTc0OA==", "url": "https://github.com/elastic/elasticsearch/pull/61768#discussion_r493491748", "bodyText": "I know it's not a good design but couldn't think of a better way to ensure sequential indexing in case of throttling", "author": "nitin2goyal", "createdAt": "2020-09-23T11:46:46Z", "path": "server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java", "diffHunk": "@@ -5786,6 +5788,69 @@ private void runTestDeleteFailure(final CheckedBiConsumer<InternalEngine, Engine\n         }\n     }\n \n+    public void testIndexThrottling() throws Exception {\n+        engine = spy(engine);\n+\n+        long sleepInMillis = 1000;\n+        engine.activateThrottling();\n+        Long timeTaken = concurrentIndexingWithSleep(sleepInMillis);\n+        assertTrue(timeTaken > (2 * sleepInMillis));\n+\n+        engine.deactivateThrottling();\n+        timeTaken = concurrentIndexingWithSleep(sleepInMillis);\n+        assertTrue(timeTaken < (2 * sleepInMillis));\n+    }\n+\n+    private long concurrentIndexingWithSleep(long sleepInMillis) throws Exception {\n+        CountDownLatch countDownLatch = new CountDownLatch(3);\n+        Mockito.doAnswer((Answer<InternalEngine.IndexingStrategy>) invocation -> {\n+            try {\n+                Thread.sleep(sleepInMillis);", "originalCommit": "93f6f163c4cfac8872d28e2facd1db4022e145ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ede13c5c2a404d3bababd730e10f4480507b6c6", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java b/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java\nindex b1c7a35849d..9ad2329cfb4 100644\n--- a/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java\n\n@@ -5789,66 +5792,30 @@ public class InternalEngineTests extends EngineTestCase {\n     }\n \n     public void testIndexThrottling() throws Exception {\n-        engine = spy(engine);\n-\n-        long sleepInMillis = 1000;\n-        engine.activateThrottling();\n-        Long timeTaken = concurrentIndexingWithSleep(sleepInMillis);\n-        assertTrue(timeTaken > (2 * sleepInMillis));\n-\n-        engine.deactivateThrottling();\n-        timeTaken = concurrentIndexingWithSleep(sleepInMillis);\n-        assertTrue(timeTaken < (2 * sleepInMillis));\n-    }\n-\n-    private long concurrentIndexingWithSleep(long sleepInMillis) throws Exception {\n-        CountDownLatch countDownLatch = new CountDownLatch(3);\n-        Mockito.doAnswer((Answer<InternalEngine.IndexingStrategy>) invocation -> {\n-            try {\n-                Thread.sleep(sleepInMillis);\n-                return (InternalEngine.IndexingStrategy) invocation.callRealMethod();\n-            } catch (InterruptedException ex) {\n-                throw new RuntimeException(ex);\n-            }\n-        }).when(engine).indexingStrategyForOperation(Mockito.any(Engine.Index.class));\n-\n-        Thread indexer1 = new Thread(() -> {\n+        final Engine.Index indexWithThrottlingCheck = spy(indexForDoc(createParsedDoc(\"1\", null)));\n+        final Engine.Index indexWithoutThrottlingCheck = spy(indexForDoc(createParsedDoc(\"2\", null)));\n+        doAnswer((Answer<Long>) invocation -> {\n             try {\n-                countDownLatch.countDown();\n-                countDownLatch.await();\n-                Engine.Index index = indexForDoc(createParsedDoc(\"1\", null));\n-                engine.index(index);\n-            } catch (IOException e) {\n-                throw new AssertionError(e);\n-            } catch (AlreadyClosedException e) {\n-                return;\n+                assertTrue(engine.throttleLockIsHeldByCurrentThread());\n+                return (Long) invocation.callRealMethod();\n             } catch (InterruptedException ex) {\n                 throw new RuntimeException(ex);\n             }\n-        });\n-\n-        Thread indexer2 = new Thread(() -> {\n+        }).when(indexWithThrottlingCheck).startTime();\n+        doAnswer((Answer<Long>) invocation -> {\n             try {\n-                countDownLatch.countDown();\n-                countDownLatch.await();\n-                Engine.Index index = indexForDoc(createParsedDoc(\"2\", null));\n-                engine.index(index);\n-            } catch (IOException e) {\n-                throw new AssertionError(e);\n-            } catch (AlreadyClosedException e) {\n-                return;\n+                assertFalse(engine.throttleLockIsHeldByCurrentThread());\n+                return (Long) invocation.callRealMethod();\n             } catch (InterruptedException ex) {\n                 throw new RuntimeException(ex);\n             }\n-        });\n-        indexer1.start();\n-        indexer2.start();\n-        long start = System.nanoTime();\n-        countDownLatch.countDown();\n-        countDownLatch.await();\n-        indexer1.join();\n-        indexer2.join();\n-        return TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n+        }).when(indexWithoutThrottlingCheck).startTime();\n+        engine.activateThrottling();\n+        engine.index(indexWithThrottlingCheck);\n+        engine.deactivateThrottling();\n+        engine.index(indexWithoutThrottlingCheck);\n+        verify(indexWithThrottlingCheck, atLeastOnce()).startTime();\n+        verify(indexWithoutThrottlingCheck, atLeastOnce()).startTime();\n     }\n \n     public void testRealtimeGetOnlyRefreshIfNeeded() throws Exception {\n"}}, {"oid": "1ede13c5c2a404d3bababd730e10f4480507b6c6", "url": "https://github.com/elastic/elasticsearch/commit/1ede13c5c2a404d3bababd730e10f4480507b6c6", "message": "Improved test", "committedDate": "2020-10-02T04:40:41Z", "type": "commit"}, {"oid": "5ee786069c4f82f25ba5ef0782f4f960efb5740c", "url": "https://github.com/elastic/elasticsearch/commit/5ee786069c4f82f25ba5ef0782f4f960efb5740c", "message": "Removed unused import", "committedDate": "2020-10-02T04:43:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzNDMxMw==", "url": "https://github.com/elastic/elasticsearch/pull/61768#discussion_r498634313", "bodyText": "I would like to add a comment that this is to be used in assertions and tests only.", "author": "henningandersen", "createdAt": "2020-10-02T06:21:13Z", "path": "server/src/main/java/org/elasticsearch/index/engine/Engine.java", "diffHunk": "@@ -279,6 +279,13 @@ long getThrottleTimeInMillis() {\n         boolean isThrottled() {\n             return lock != NOOP_LOCK;\n         }\n+", "originalCommit": "5ee786069c4f82f25ba5ef0782f4f960efb5740c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05e91af97db8b29bb1e1209af7de91b17dbe7901", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/engine/Engine.java b/server/src/main/java/org/elasticsearch/index/engine/Engine.java\nindex e195e0200e3..5f1292faee8 100644\n--- a/server/src/main/java/org/elasticsearch/index/engine/Engine.java\n+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java\n\n@@ -280,7 +280,7 @@ public abstract class Engine implements Closeable {\n             return lock != NOOP_LOCK;\n         }\n \n-        boolean throtteLockIsHeldByCurrentThread() {\n+        boolean throttleLockIsHeldByCurrentThread() { // to be used in assertions and tests only\n             if(isThrottled()) {\n                 return lock.isHeldByCurrentThread();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzNDM4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61768#discussion_r498634389", "bodyText": "Also add comment here on only use in assertions and tests.", "author": "henningandersen", "createdAt": "2020-10-02T06:21:31Z", "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -2178,6 +2178,10 @@ public boolean isThrottled() {\n         return throttle.isThrottled();\n     }\n \n+    boolean throttleLockIsHeldByCurrentThread() {", "originalCommit": "5ee786069c4f82f25ba5ef0782f4f960efb5740c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05e91af97db8b29bb1e1209af7de91b17dbe7901", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java\nindex d471ccf1cfe..0b4c730ee10 100644\n--- a/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java\n+++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java\n\n@@ -2178,8 +2178,8 @@ public class InternalEngine extends Engine {\n         return throttle.isThrottled();\n     }\n \n-    boolean throttleLockIsHeldByCurrentThread() {\n-        return throttle.throtteLockIsHeldByCurrentThread();\n+    boolean throttleLockIsHeldByCurrentThread() {  // to be used in assertions and tests only\n+        return throttle.throttleLockIsHeldByCurrentThread();\n     }\n \n     @Override\n"}}, {"oid": "05e91af97db8b29bb1e1209af7de91b17dbe7901", "url": "https://github.com/elastic/elasticsearch/commit/05e91af97db8b29bb1e1209af7de91b17dbe7901", "message": "Add comments and fix spelling mistake", "committedDate": "2020-10-02T06:36:49Z", "type": "commit"}, {"oid": "05e91af97db8b29bb1e1209af7de91b17dbe7901", "url": "https://github.com/elastic/elasticsearch/commit/05e91af97db8b29bb1e1209af7de91b17dbe7901", "message": "Add comments and fix spelling mistake", "committedDate": "2020-10-02T06:36:49Z", "type": "forcePushed"}, {"oid": "e170ce2bd843af36b301ea01df4b9de07812b6aa", "url": "https://github.com/elastic/elasticsearch/commit/e170ce2bd843af36b301ea01df4b9de07812b6aa", "message": "Merge remote-tracking branch 'origin/master' into throttle-fix", "committedDate": "2020-10-02T08:16:24Z", "type": "commit"}]}