{"pr_number": 61987, "pr_title": "Media-type parser", "pr_createdAt": "2020-09-04T13:17:00Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61987", "timeline": [{"oid": "5e4239099c44ff785746ed7ee86b326789910c4d", "url": "https://github.com/elastic/elasticsearch/commit/5e4239099c44ff785746ed7ee86b326789910c4d", "message": "Split responsibility for format parsing", "committedDate": "2020-09-02T12:03:20Z", "type": "commit"}, {"oid": "01f001d57540b3d44634551ee067e443eae09b75", "url": "https://github.com/elastic/elasticsearch/commit/01f001d57540b3d44634551ee067e443eae09b75", "message": "parse * and ndjson", "committedDate": "2020-09-02T12:24:16Z", "type": "commit"}, {"oid": "50a88a0d190a882ed3cb389d17a97349de6e540a", "url": "https://github.com/elastic/elasticsearch/commit/50a88a0d190a882ed3cb389d17a97349de6e540a", "message": "make format not accepting applicaiton/", "committedDate": "2020-09-02T12:26:40Z", "type": "commit"}, {"oid": "fb03ffd4551e01e2b86b7ec1a8bdff4610eaccfd", "url": "https://github.com/elastic/elasticsearch/commit/fb03ffd4551e01e2b86b7ec1a8bdff4610eaccfd", "message": "post data request should parse applicaiton/json style", "committedDate": "2020-09-02T12:35:26Z", "type": "commit"}, {"oid": "09f281ecf956a7dc76c72daedc18dbb097709d02", "url": "https://github.com/elastic/elasticsearch/commit/09f281ecf956a7dc76c72daedc18dbb097709d02", "message": "unused import", "committedDate": "2020-09-02T14:34:45Z", "type": "commit"}, {"oid": "8bc024f5af943b2e38dce377dae21c8db34115aa", "url": "https://github.com/elastic/elasticsearch/commit/8bc024f5af943b2e38dce377dae21c8db34115aa", "message": "fix sql parsing", "committedDate": "2020-09-02T15:11:32Z", "type": "commit"}, {"oid": "070508c2a2adc3e1197377f6747de18fff3c4b88", "url": "https://github.com/elastic/elasticsearch/commit/070508c2a2adc3e1197377f6747de18fff3c4b88", "message": "split format and accept header", "committedDate": "2020-09-03T13:32:00Z", "type": "commit"}, {"oid": "3c7ab16fc839d7ade510e8025ad39f106d12752f", "url": "https://github.com/elastic/elasticsearch/commit/3c7ab16fc839d7ade510e8025ad39f106d12752f", "message": "fix and todos", "committedDate": "2020-09-03T15:29:51Z", "type": "commit"}, {"oid": "59a7f42f1877c31102196900c9e33ee1dc6ededd", "url": "https://github.com/elastic/elasticsearch/commit/59a7f42f1877c31102196900c9e33ee1dc6ededd", "message": "Merge branch 'master' into xcontent_format_parsing", "committedDate": "2020-09-03T16:09:35Z", "type": "commit"}, {"oid": "968b1c98da20f2efecd989d6b5926e4241ec46e0", "url": "https://github.com/elastic/elasticsearch/commit/968b1c98da20f2efecd989d6b5926e4241ec46e0", "message": "media type parser", "committedDate": "2020-09-04T13:04:22Z", "type": "commit"}, {"oid": "46f8f33af567e170cf235f12f246b689dbf687d9", "url": "https://github.com/elastic/elasticsearch/commit/46f8f33af567e170cf235f12f246b689dbf687d9", "message": "media type parser", "committedDate": "2020-09-04T13:12:39Z", "type": "commit"}, {"oid": "cbbe0933024511f2e5fd9686df8f95df4d86be08", "url": "https://github.com/elastic/elasticsearch/commit/cbbe0933024511f2e5fd9686df8f95df4d86be08", "message": "precommit", "committedDate": "2020-09-04T14:33:00Z", "type": "commit"}, {"oid": "222caeea550d1d0340e717546cc280b64c5d1c58", "url": "https://github.com/elastic/elasticsearch/commit/222caeea550d1d0340e717546cc280b64c5d1c58", "message": "rename and null check", "committedDate": "2020-09-07T08:21:21Z", "type": "commit"}, {"oid": "6bdec139fc47573e4d7de0b95994dd25714708ed", "url": "https://github.com/elastic/elasticsearch/commit/6bdec139fc47573e4d7de0b95994dd25714708ed", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-07T08:40:32Z", "type": "commit"}, {"oid": "ee9756490274252a6ee4f9f18956e32d80c98aeb", "url": "https://github.com/elastic/elasticsearch/commit/ee9756490274252a6ee4f9f18956e32d80c98aeb", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-07T08:51:29Z", "type": "commit"}, {"oid": "7f52e11aae3df3fe785f30d5c4668cae5b663058", "url": "https://github.com/elastic/elasticsearch/commit/7f52e11aae3df3fe785f30d5c4668cae5b663058", "message": "fix text format parsing", "committedDate": "2020-09-07T10:52:30Z", "type": "commit"}, {"oid": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "url": "https://github.com/elastic/elasticsearch/commit/63db70c3c79a2343f4c4864d1f77fb96cfecc657", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-08T10:56:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MTIwNA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484961204", "bodyText": "Wondering if this media-type origin split is strictly necessary: the previous code tried to fetch a token from somewhere - in order of preference: enforced format (CBOR), format URL attribute, Accept header, Content-Type header and repeatedly checking accept against null - then validate that token against a media type or as a format (#fromMediaTypeOrFormat()).\nThe new code checks if it's a format (in getXContentType() @ L143), or then if it's a media type, by one of these XContentType instances (@ L147). But the source preferences is already stored in the way the accept member is set (by those subsequent null checks), so could we not simply serially invoke #fromMediaType(accept) and #fromFormat(accept) and return the first non-null value to simplify the code? Similar to what we do in TextFormat#fromMediaTypeOrFormat().", "author": "bpintea", "createdAt": "2020-09-08T14:24:02Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -65,6 +65,8 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n          * isn't then we use the {@code Content-Type} header which is required.\n          */\n         String accept = null;\n+        XContentType acceptHeader = null;\n+        XContentType contentTypeHeader = null;", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MTIzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485651235", "bodyText": "good point, I have refactored this as per your suggestions", "author": "pgomulka", "createdAt": "2020-09-09T14:21:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MTIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\nindex 39f371b66c4..6fe4b31ba11 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n\n@@ -64,9 +64,7 @@ public class RestSqlQueryAction extends BaseRestHandler {\n          * isn't but there is a {@code Accept} header then we use that. If there\n          * isn't then we use the {@code Content-Type} header which is required.\n          */\n-        String accept = null;\n-        XContentType acceptHeader = null;\n-        XContentType contentTypeHeader = null;\n+        String accept;\n \n         if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n                 && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MzE2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484963165", "bodyText": "Is the extension necessary?", "author": "bpintea", "createdAt": "2020-09-08T14:26:33Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -32,7 +34,7 @@\n /**\n  * Templating class for displaying SQL responses in text formats.\n  */\n-enum TextFormat {\n+enum TextFormat implements MediaType {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MjA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485652078", "bodyText": "in order to use a MediaType parser for both TextFormat and XContentType i had to introduce an interface that is implemented by both", "author": "pgomulka", "createdAt": "2020-09-09T14:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MzE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MzI2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486493261", "bodyText": "Right. Thanks.", "author": "bpintea", "createdAt": "2020-09-10T16:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2MzE2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2NTExMw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484965113", "bodyText": "remove reminder.", "author": "bpintea", "createdAt": "2020-09-08T14:29:06Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -92,7 +97,8 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n          * that doesn't parse it'll throw an {@link IllegalArgumentException}\n          * which we turn into a 400 error.\n          */\n-        XContentType xContentType = accept == null ? XContentType.JSON : XContentType.fromMediaTypeOrFormat(accept);\n+        //TODO PG this all logic needs a review from SQL team", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\nindex 39f371b66c4..6fe4b31ba11 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n\n@@ -97,8 +92,7 @@ public class RestSqlQueryAction extends BaseRestHandler {\n          * that doesn't parse it'll throw an {@link IllegalArgumentException}\n          * which we turn into a 400 error.\n          */\n-        //TODO PG this all logic needs a review from SQL team\n-        XContentType xContentType = getXContentType(accept, acceptHeader, contentTypeHeader);\n+        XContentType xContentType = getXContentType(accept);\n         textFormat = xContentType == null ? TextFormat.fromMediaTypeOrFormat(accept) : null;\n \n         if (xContentType == null && sqlRequest.columnar()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MDA4OA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r484970088", "bodyText": "Good to know. Having multiple header fields with same name is legal though, I guess we should leave it as is.", "author": "bpintea", "createdAt": "2020-09-08T14:35:19Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java", "diffHunk": "@@ -197,6 +204,7 @@ String maybeEscape(String value, Character delimiter) {\n         boolean hasHeader(RestRequest request) {\n             String header = request.param(URL_PARAM_HEADER);\n             if (header == null) {\n+                //TODO PG in most places we only assume one accept header", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java\nindex e65577affb8..6bdcaa44e95 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/TextFormat.java\n\n@@ -204,7 +204,6 @@ enum TextFormat implements MediaType {\n         boolean hasHeader(RestRequest request) {\n             String header = request.param(URL_PARAM_HEADER);\n             if (header == null) {\n-                //TODO PG in most places we only assume one accept header\n                 List<String> values = request.getAllHeaderValues(\"Accept\");\n                 if (values != null) {\n                     // header values are separated by `;` so try breaking it down\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MTc0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485071742", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return type()+\"/\"+subtype();\n          \n          \n            \n                    return type() + \"/\" + subtype();", "author": "jaymode", "createdAt": "2020-09-08T17:07:10Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();\n+\n+    default String typeSubtype(){\n+        return type()+\"/\"+subtype();", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex 635375fb843..25abc15f124 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -25,6 +25,6 @@ public interface MediaType {\n     String format();\n \n     default String typeSubtype(){\n-        return type()+\"/\"+subtype();\n+        return type() + \"/\" + subtype();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjI4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485072287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(format == null) {\n          \n          \n            \n                    if (format == null) {", "author": "jaymode", "createdAt": "2020-09-08T17:08:13Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 33602bee43b..b74d5dbb4c3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -24,8 +24,8 @@ import java.util.Locale;\n import java.util.Map;\n \n public class MediaTypeParser<T extends MediaType> {\n-    private Map<String, T> formatToMediaType = new HashMap<>();\n-    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n \n     public MediaTypeParser(T[] acceptedMediaTypes) {\n         for (T mediaType : acceptedMediaTypes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjkxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485072915", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "author": "jaymode", "createdAt": "2020-09-08T17:09:18Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 33602bee43b..b74d5dbb4c3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -24,8 +24,8 @@ import java.util.Locale;\n import java.util.Map;\n \n public class MediaTypeParser<T extends MediaType> {\n-    private Map<String, T> formatToMediaType = new HashMap<>();\n-    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n \n     public MediaTypeParser(T[] acceptedMediaTypes) {\n         for (T mediaType : acceptedMediaTypes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MzM2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485073365", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n          \n          \n            \n                public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())", "author": "jaymode", "createdAt": "2020-09-08T17:10:06Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,54 +111,31 @@ public XContent xContent() {\n         }\n     };\n \n+    public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\nindex 3e004f88d80..ab27dcf703e 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n\n@@ -111,12 +111,10 @@ public enum XContentType implements MediaType {\n         }\n     };\n \n-    public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n+    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n         .withAdditionalMediaType(\"application/*\", JSON)\n         .withAdditionalMediaType(\"application/x-ndjson\", JSON);\n \n-\n-\n     /**\n      * Accepts either a format string, which is equivalent to {@link XContentType#shortName()} or a media type that optionally has\n      * parameters and attempts to match the value to an {@link XContentType}. The comparisons are done in lower case format and this method\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDE0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074143", "bodyText": "can we remove this method? I favor immutability and this could be replaced by a constructor that takes another argument that is a map?", "author": "jaymode", "createdAt": "2020-09-08T17:11:35Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMDkwNg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485420906", "bodyText": "will do", "author": "pgomulka", "createdAt": "2020-09-09T08:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 33602bee43b..b74d5dbb4c3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -24,8 +24,8 @@ import java.util.Locale;\n import java.util.Map;\n \n public class MediaTypeParser<T extends MediaType> {\n-    private Map<String, T> formatToMediaType = new HashMap<>();\n-    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n \n     public MediaTypeParser(T[] acceptedMediaTypes) {\n         for (T mediaType : acceptedMediaTypes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074383", "bodyText": "Suggested change", "author": "jaymode", "createdAt": "2020-09-08T17:11:59Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -114,54 +111,31 @@ public XContent xContent() {\n         }\n     };\n \n+    public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n+        .withAdditionalMediaType(\"application/*\", JSON)\n+        .withAdditionalMediaType(\"application/x-ndjson\", JSON);\n+\n+\n+", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\nindex 3e004f88d80..ab27dcf703e 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n\n@@ -111,12 +111,10 @@ public enum XContentType implements MediaType {\n         }\n     };\n \n-    public static MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n+    public static final MediaTypeParser<XContentType> mediaTypeParser = new MediaTypeParser<>(XContentType.values())\n         .withAdditionalMediaType(\"application/*\", JSON)\n         .withAdditionalMediaType(\"application/x-ndjson\", JSON);\n \n-\n-\n     /**\n      * Accepts either a format string, which is equivalent to {@link XContentType#shortName()} or a media type that optionally has\n      * parameters and attempts to match the value to an {@link XContentType}. The comparisons are done in lower case format and this method\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485074958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(responseContentType == null) {\n          \n          \n            \n                        if (responseContentType == null) {", "author": "jaymode", "createdAt": "2020-09-08T17:13:05Z", "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -96,7 +98,11 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            responseContentType = XContentType.fromMediaTypeOrFormat(format);\n+            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?\n+            responseContentType = XContentType.fromFormat(format);\n+            if(responseContentType == null) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java b/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java\nindex a9f28ae2869..c5bf1efa2cd 100644\n--- a/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java\n+++ b/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java\n\n@@ -100,7 +100,7 @@ public abstract class AbstractRestChannel implements RestChannel {\n         if (responseContentType == null) {\n             //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?\n             responseContentType = XContentType.fromFormat(format);\n-            if(responseContentType == null) {\n+            if (responseContentType == null) {\n                 responseContentType = XContentType.fromMediaType(acceptHeader);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTUyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485075529", "bodyText": "Maybe open an issue for this. My guess is that there is some precedence already and it might be that format overrides the header", "author": "jaymode", "createdAt": "2020-09-08T17:14:09Z", "path": "server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java", "diffHunk": "@@ -96,7 +98,11 @@ public XContentBuilder newBuilder(@Nullable XContentType requestContentType, boo\n     public XContentBuilder newBuilder(@Nullable XContentType requestContentType, @Nullable XContentType responseContentType,\n             boolean useFiltering) throws IOException {\n         if (responseContentType == null) {\n-            responseContentType = XContentType.fromMediaTypeOrFormat(format);\n+            //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MDgwMA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r487780800", "bodyText": "raised #62294 to discuss this", "author": "pgomulka", "createdAt": "2020-09-14T09:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java b/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java\nindex a9f28ae2869..c5bf1efa2cd 100644\n--- a/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java\n+++ b/server/src/main/java/org/elasticsearch/rest/AbstractRestChannel.java\n\n@@ -100,7 +100,7 @@ public abstract class AbstractRestChannel implements RestChannel {\n         if (responseContentType == null) {\n             //TODO PG shoudld format vs acceptHeader be always the same, do we allow overriding?\n             responseContentType = XContentType.fromFormat(format);\n-            if(responseContentType == null) {\n+            if (responseContentType == null) {\n                 responseContentType = XContentType.fromMediaType(acceptHeader);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NTcwMg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485075702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(request.hasParam(\"format\")) {\n          \n          \n            \n                    if (request.hasParam(\"format\")) {", "author": "jaymode", "createdAt": "2020-09-08T17:14:27Z", "path": "server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java", "diffHunk": "@@ -51,13 +51,20 @@\n \n     public static RestResponse buildResponse(Table table, RestChannel channel) throws Exception {\n         RestRequest request = channel.request();\n-        XContentType xContentType = XContentType.fromMediaTypeOrFormat(request.param(\"format\", request.header(\"Accept\")));\n+        XContentType xContentType = getxContentType(request);\n         if (xContentType != null) {\n             return buildXContentBuilder(table, channel);\n         }\n         return buildTextPlainResponse(table, channel);\n     }\n \n+    private static XContentType getxContentType(RestRequest request) {\n+        if(request.hasParam(\"format\")) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java b/server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java\nindex bb3476d7ca3..fa4bd586a47 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java\n\n@@ -59,7 +59,7 @@ public class RestTable {\n     }\n \n     private static XContentType getxContentType(RestRequest request) {\n-        if(request.hasParam(\"format\")) {\n+        if (request.hasParam(\"format\")) {\n             return XContentType.fromFormat(request.param(\"format\"));\n         }\n         return XContentType.fromMediaType(request.header(\"Accept\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485270166", "bodyText": "I think you need to check for keyValueParam.size before accessing [1] in the case of a malformed key= (no value)", "author": "jakelandis", "createdAt": "2020-09-09T00:39:22Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwOTkyNA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485609924", "bodyText": "good point, will add test cases", "author": "pgomulka", "createdAt": "2020-09-09T13:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 33602bee43b..b74d5dbb4c3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -24,8 +24,8 @@ import java.util.Locale;\n import java.util.Map;\n \n public class MediaTypeParser<T extends MediaType> {\n-    private Map<String, T> formatToMediaType = new HashMap<>();\n-    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n \n     public MediaTypeParser(T[] acceptedMediaTypes) {\n         for (T mediaType : acceptedMediaTypes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485275066", "bodyText": "I'm not sure I completely follow the format variant of parsing... but I think this method does not support that... right ?\nThe previous version accepted either variants (format (json) or the mime type (application/json) ... so splitting these requires the caller to know know which one to call.\nI see two cases TextTemplateEngine and RestSqlQueryAction where it is not immediately obvious that is correct. It seems strange that we would support this shorter name in some cases for parsing headers, but not others, and when the the format variant is used (e.g. json) is used we don't support parsing the parameters.\nIs possible to just support the mime type for all content-type and accept header parsing ? (leaving the format soley to the realm of the query string parameter)", "author": "jakelandis", "createdAt": "2020-09-09T00:58:13Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwOTQ5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485609492", "bodyText": "4x yes.\nso this is exactly the intention here.\nre1 The parseMediaType is not supporting the format parsing.\nre2 The caller has to know which one to call.\nre3 There should not be a place were we parse a format but a value is taken from Accept or Content-Type headers. Values from headers should follow media-type format (type/subtype;parameters)\nre4 I hope after this PR this will be clear that mime types are for headers, format for query parameter", "author": "pgomulka", "createdAt": "2020-09-09T13:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4NTUxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485685511", "bodyText": "thanks.. i double checked TextTemplateEngine and while it appears that the former supported either application/json or json,  I think we are fine (as-is here) to only support json for these reasons:   1) only applicable to inline mustache scripts in watcher 2) it is not documented and only lightly tested 3) only found one example of its usage in the wild  (and it used json).  Given the lack of documentation i doubt this is used much at all and if so likely uses the short form json.\nI have not validated RestSqlQueryAction behavior", "author": "jakelandis", "createdAt": "2020-09-09T15:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NjgzNg==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r487756836", "bodyText": "RestSqlQueryAction was reviewed by @bpintea", "author": "pgomulka", "createdAt": "2020-09-14T08:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTA2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 33602bee43b..b74d5dbb4c3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -24,8 +24,8 @@ import java.util.Locale;\n import java.util.Map;\n \n public class MediaTypeParser<T extends MediaType> {\n-    private Map<String, T> formatToMediaType = new HashMap<>();\n-    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n \n     public MediaTypeParser(T[] acceptedMediaTypes) {\n         for (T mediaType : acceptedMediaTypes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3ODEyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485278129", "bodyText": "Format, shortName, and subType seem like 3 ways to represent the same thing, and would be great if we could get to a common term (subtype) across the board. I think we can just drop format in favor of subtype ?", "author": "jakelandis", "createdAt": "2020-09-09T01:09:41Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMDMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485420315", "bodyText": "in some cases these 3 are actually different. For instance - text/plain has subtype=plain, but format and shortName txt \nsimilarly for versioned media types I plan this to be: application/vnd.elasticsearch+json;compatible-with=7 subtype is vnd.elasticsearch+json, format is json and shortName json\nI think shortName is redundant and I will give it a go to remove it", "author": "pgomulka", "createdAt": "2020-09-09T08:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3ODEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex 635375fb843..25abc15f124 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -25,6 +25,6 @@ public interface MediaType {\n     String format();\n \n     default String typeSubtype(){\n-        return type()+\"/\"+subtype();\n+        return type() + \"/\" + subtype();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3OTkyNw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485279927", "bodyText": "I think type and subtype here are redundant since they can be found via the MediaType", "author": "jakelandis", "createdAt": "2020-09-09T01:15:57Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeSubtypeToMediaType.put(mediaType.typeSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public MediaTypeParser<T> withAdditionalMediaType(String typeSubtype, T xContentType) {\n+        typeSubtypeToMediaType.put(typeSubtype.toLowerCase(Locale.ROOT), xContentType);\n+        formatToMediaType.put(xContentType.format(), xContentType);\n+        return this;\n+    }\n+\n+    public ParsedMediaType parseMediaType(String mediaType) {\n+        if (mediaType != null) {\n+            String headerValue = mediaType.toLowerCase(Locale.ROOT);\n+            // split string on semicolon\n+            // validate media type is accepted (IIRC whitespace is ok so trim it) //TODO PG whitespace only ok in params\n+            // rest of strings are params. validate per RFC 7230 and use ones that we care about\n+            // or use a regex and we can change if necessary\n+            String[] split = headerValue.split(\";\");\n+\n+            String[] typeSubtype =  split[0].toLowerCase(Locale.ROOT)\n+                                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                    }\n+                    return new ParsedMediaType(type, subtype, parameters, xContentType);\n+                }\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * A media type object that contains all the information provided on a Content-Type or Accept header\n+     * // TODO PG to be extended with getCompatibleAPIVersion and more\n+     */\n+    public class ParsedMediaType {\n+        private final String type;\n+        private final String subtype;", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMTA5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485421093", "bodyText": "good point, will remove", "author": "pgomulka", "createdAt": "2020-09-09T08:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3OTkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 33602bee43b..b74d5dbb4c3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -24,8 +24,8 @@ import java.util.Locale;\n import java.util.Map;\n \n public class MediaTypeParser<T extends MediaType> {\n-    private Map<String, T> formatToMediaType = new HashMap<>();\n-    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n \n     public MediaTypeParser(T[] acceptedMediaTypes) {\n         for (T mediaType : acceptedMediaTypes) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjkxOA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485282918", "bodyText": "nit: typeWithSubtype or or just get() or asString", "author": "jakelandis", "createdAt": "2020-09-09T01:27:08Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {\n+    String type();\n+    String subtype();\n+    String format();\n+\n+    default String typeSubtype(){", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMDYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485420638", "bodyText": "typeWithSubtype looks best to me. (although asString is tempting too..)", "author": "pgomulka", "createdAt": "2020-09-09T08:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex 635375fb843..25abc15f124 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -25,6 +25,6 @@ public interface MediaType {\n     String format();\n \n     default String typeSubtype(){\n-        return type()+\"/\"+subtype();\n+        return type() + \"/\" + subtype();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzQ3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485283479", "bodyText": "nit: typeWithSubTypeToMediaType or stringToMediaType", "author": "jakelandis", "createdAt": "2020-09-09T01:29:01Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private Map<String, T> formatToMediaType = new HashMap<>();\n+    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();", "originalCommit": "63db70c3c79a2343f4c4864d1f77fb96cfecc657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 33602bee43b..b74d5dbb4c3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -24,8 +24,8 @@ import java.util.Locale;\n import java.util.Map;\n \n public class MediaTypeParser<T extends MediaType> {\n-    private Map<String, T> formatToMediaType = new HashMap<>();\n-    private Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeSubtypeToMediaType = new HashMap<>();\n \n     public MediaTypeParser(T[] acceptedMediaTypes) {\n         for (T mediaType : acceptedMediaTypes) {\n"}}, {"oid": "57ddb407557e4cf5b97a8a030bf97da7d836c728", "url": "https://github.com/elastic/elasticsearch/commit/57ddb407557e4cf5b97a8a030bf97da7d836c728", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>", "committedDate": "2020-09-09T08:11:57Z", "type": "commit"}, {"oid": "b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "url": "https://github.com/elastic/elasticsearch/commit/b5f1eff4a93591c8f23fd657b7ec0c0971bb7e43", "message": "code review follow up", "committedDate": "2020-09-09T14:59:09Z", "type": "commit"}, {"oid": "90e798dd31197bc7424db396c6b5f152d6864f92", "url": "https://github.com/elastic/elasticsearch/commit/90e798dd31197bc7424db396c6b5f152d6864f92", "message": "Merge branch 'header_version_split' of github.com:pgomulka/elasticsearch into header_version_split", "committedDate": "2020-09-09T15:03:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4NjE0MA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r485686140", "bodyText": "You can remove this todo, answered in another comment.", "author": "jakelandis", "createdAt": "2020-09-09T15:05:34Z", "path": "x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java", "diffHunk": "@@ -82,7 +82,8 @@ private XContentType detectContentType(String content) {\n             //There must be a __<content_type__:: prefix so the minimum length before detecting '__::' is 3\n             int endOfContentName = content.indexOf(\"__::\", 3);\n             if (endOfContentName != -1) {\n-                return XContentType.fromMediaTypeOrFormat(content.substring(2, endOfContentName));\n+                //TODO PG what do we expect here?", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "chunk": "diff --git a/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java\nindex 8e92532d6bc..f6c84ef2ad9 100644\n--- a/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java\n+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java\n\n@@ -82,7 +82,6 @@ public class TextTemplateEngine {\n             //There must be a __<content_type__:: prefix so the minimum length before detecting '__::' is 3\n             int endOfContentName = content.indexOf(\"__::\", 3);\n             if (endOfContentName != -1) {\n-                //TODO PG what do we expect here?\n                 return XContentType.fromFormat(content.substring(2, endOfContentName));\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NjU2NA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486486564", "bodyText": "can you add javadocs to the class and methods?", "author": "jaymode", "createdAt": "2020-09-10T16:43:31Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+public interface MediaType {", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex e58219a4a64..fdbf9d08718 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -19,11 +19,30 @@\n \n package org.elasticsearch.common.xcontent;\n \n+/**\n+ * Abstracts a Media Type <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\"> and a format parameter.\n+ * Media types are used as values on Content-Type and Accept headers\n+ * format is an URL parameter, which when specified overrides Accept and Content-Type headers.\n+ */\n public interface MediaType {\n+    /**\n+     * Returns a type part of a MediaType\n+     * i.e. application for application/json\n+     */\n     String type();\n+    /**\n+     * Returns a subtype part of a MediaType.\n+     * i.e. json for application/json\n+     */\n     String subtype();\n+    /**\n+     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n+     */\n     String format();\n \n+    /**\n+     * returns a string representation of a media type.\n+     */\n     default String typeWithSubtype(){\n         return type() + \"/\" + subtype();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Nzk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486487974", "bodyText": "shouldn't we base this on https://tools.ietf.org/html/rfc7231#section-3.1.1.1", "author": "jaymode", "createdAt": "2020-09-10T16:45:46Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc2616#section-3.7", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1MjM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r487752397", "bodyText": "you are right. the rfc2616 is obsolete.\nrfc7231 is the updated one", "author": "pgomulka", "createdAt": "2020-09-14T08:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Nzk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 4904ba6a3d5..7e99ae3e8e3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -58,7 +58,7 @@ public class MediaTypeParser<T extends MediaType> {\n     }\n \n     /**\n-     * parsing media type that follows https://tools.ietf.org/html/rfc2616#section-3.7\n+     * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n      * @param headerValue a header value from Accept or Content-Type\n      * @return a parsed media-type\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MTY0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486491645", "bodyText": "per the RFC, it is not allowed so I guess we should", "author": "jaymode", "createdAt": "2020-09-10T16:52:04Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc2616#section-3.7\n+     * @param headerValue a header value from Accept or Content-Type\n+     * @return a parsed media-type\n+     */\n+    public ParsedMediaType parseMediaType(String headerValue) {\n+        if (headerValue != null) {\n+            String[] split = headerValue.toLowerCase(Locale.ROOT).split(\";\");\n+\n+            String[] typeSubtype = split[0].trim().toLowerCase(Locale.ROOT)\n+                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeWithSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        // should we validate that there are no spaces between key = value?", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 4904ba6a3d5..7e99ae3e8e3 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -58,7 +58,7 @@ public class MediaTypeParser<T extends MediaType> {\n     }\n \n     /**\n-     * parsing media type that follows https://tools.ietf.org/html/rfc2616#section-3.7\n+     * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n      * @param headerValue a header value from Accept or Content-Type\n      * @return a parsed media-type\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5NTA5NA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r486495094", "bodyText": "Just a small compacting suggestion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    XContentType xContentType = XContentType.fromFormat(accept);\n          \n          \n            \n                    if (xContentType != null) {\n          \n          \n            \n                        return xContentType;\n          \n          \n            \n                    }\n          \n          \n            \n                    xContentType = XContentType.fromMediaType(accept);\n          \n          \n            \n                    if (xContentType != null) {\n          \n          \n            \n                        return xContentType;\n          \n          \n            \n                    }\n          \n          \n            \n                    return xContentType;\n          \n          \n            \n                    XContentType xContentType = XContentType.fromFormat(accept);\n          \n          \n            \n                    return xContentType != null ? xContentType : XContentType.fromMediaType(accept);", "author": "bpintea", "createdAt": "2020-09-10T16:57:36Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -130,6 +130,21 @@ public RestResponse buildResponse(SqlQueryResponse response) throws Exception {\n         });\n     }\n \n+    private XContentType getXContentType(String accept) {\n+        if (accept == null) {\n+            return XContentType.JSON;\n+        }\n+        XContentType xContentType = XContentType.fromFormat(accept);\n+        if (xContentType != null) {\n+            return xContentType;\n+        }\n+        xContentType = XContentType.fromMediaType(accept);\n+        if (xContentType != null) {\n+            return xContentType;\n+        }\n+        return xContentType;", "originalCommit": "90e798dd31197bc7424db396c6b5f152d6864f92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31d92ace7506a1316dbdb77bddbc05d0d87f36f5", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\nindex 6fe4b31ba11..4ade958b60e 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n\n@@ -135,14 +135,7 @@ public class RestSqlQueryAction extends BaseRestHandler {\n             return XContentType.JSON;\n         }\n         XContentType xContentType = XContentType.fromFormat(accept);\n-        if (xContentType != null) {\n-            return xContentType;\n-        }\n-        xContentType = XContentType.fromMediaType(accept);\n-        if (xContentType != null) {\n-            return xContentType;\n-        }\n-        return xContentType;\n+        return xContentType != null ? xContentType : XContentType.fromMediaType(accept);\n     }\n \n     @Override\n"}}, {"oid": "fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "url": "https://github.com/elastic/elasticsearch/commit/fa49be43ac51915037094f1e6dc16ab6bd78c0b5", "message": "javadoc and validation", "committedDate": "2020-09-14T09:22:20Z", "type": "commit"}, {"oid": "31d92ace7506a1316dbdb77bddbc05d0d87f36f5", "url": "https://github.com/elastic/elasticsearch/commit/31d92ace7506a1316dbdb77bddbc05d0d87f36f5", "message": "Update x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n\nCo-authored-by: Bogdan Pintea <bpintea@gmail.com>", "committedDate": "2020-09-14T09:22:25Z", "type": "commit"}, {"oid": "a925fbebfa43ee1ae179ef1d9638a948ad654677", "url": "https://github.com/elastic/elasticsearch/commit/a925fbebfa43ee1ae179ef1d9638a948ad654677", "message": "Merge branch 'header_version_split' of github.com:pgomulka/elasticsearch into header_version_split", "committedDate": "2020-09-14T09:26:31Z", "type": "commit"}, {"oid": "23c4e41ceca7ea2c90cc0f1708461e2dd81a71ac", "url": "https://github.com/elastic/elasticsearch/commit/23c4e41ceca7ea2c90cc0f1708461e2dd81a71ac", "message": "javadoc fix", "committedDate": "2020-09-14T11:31:37Z", "type": "commit"}, {"oid": "b1e3fb1defcffa4f2ba75a7d4de20517e9550432", "url": "https://github.com/elastic/elasticsearch/commit/b1e3fb1defcffa4f2ba75a7d4de20517e9550432", "message": "remove shortName", "committedDate": "2020-09-14T11:45:10Z", "type": "commit"}, {"oid": "c17a8958fbeb2ce9339129f11d2236acdbac9d5a", "url": "https://github.com/elastic/elasticsearch/commit/c17a8958fbeb2ce9339129f11d2236acdbac9d5a", "message": "javadoc fix", "committedDate": "2020-09-14T12:33:28Z", "type": "commit"}, {"oid": "7d6bd08e0a9f18576c30ac8b355794eb22605160", "url": "https://github.com/elastic/elasticsearch/commit/7d6bd08e0a9f18576c30ac8b355794eb22605160", "message": "fix compile error", "committedDate": "2020-09-14T12:40:41Z", "type": "commit"}, {"oid": "3c93954f1c40b90ecdadb5e4d50f675cf9dab0f2", "url": "https://github.com/elastic/elasticsearch/commit/3c93954f1c40b90ecdadb5e4d50f675cf9dab0f2", "message": "fix test compile", "committedDate": "2020-09-14T12:56:58Z", "type": "commit"}, {"oid": "77068a802c498afb4582186bab517913b4414a2a", "url": "https://github.com/elastic/elasticsearch/commit/77068a802c498afb4582186bab517913b4414a2a", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-15T06:47:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1OTUzNw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488659537", "bodyText": "can you add a test for assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key=\") I think it will error with index out of bounds.", "author": "jakelandis", "createdAt": "2020-09-15T13:18:47Z", "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class MediaTypeParserTests extends ESTestCase {\n+    MediaTypeParser<XContentType> mediaTypeParser = XContentType.mediaTypeParser;\n+\n+    public void testJsonWithParameters() throws Exception {\n+        String mediaType = \"application/json\";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType).getParameters(),\n+            equalTo(Collections.emptyMap()));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \";\").getParameters(),\n+            equalTo(Collections.emptyMap()));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\")));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123;charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+    }\n+\n+    public void testWhiteSpaceInTypeSubtype() {\n+        String mediaType = \" application/json \";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType).getMediaType(),\n+            equalTo(XContentType.JSON));\n+\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123; charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; custom=123;\\n charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"custom\", \"123\")));\n+\n+        mediaType = \" application / json \";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType),\n+            is(nullValue()));\n+    }\n+\n+    public void testInvalidParameters() {\n+        String mediaType = \"application/json\";\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; keyvalueNoEqualsSign\"),\n+            is(nullValue()));\n+\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key = value\"),\n+            is(nullValue()));", "originalCommit": "77068a802c498afb4582186bab517913b4414a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MzQzNw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489573437", "bodyText": "this would mean that the result of String[] keyValueParam = split[i].trim().split(\"=\"); has length  = 1\nit is checked in a next line.\n if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\nadded a testcase", "author": "pgomulka", "createdAt": "2020-09-16T16:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1OTUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "chunk": "diff --git a/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java\nindex b2b1831ef75..6514c7ec733 100644\n--- a/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java\n+++ b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/MediaTypeParserTests.java\n\n@@ -65,5 +65,7 @@ public class MediaTypeParserTests extends ESTestCase {\n \n         assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key = value\"),\n             is(nullValue()));\n+        assertThat(mediaTypeParser.parseMediaType(mediaType + \"; key=\") ,\n+            is(nullValue()));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2MTkwMA==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488661900", "bodyText": "can you leave these specific TODO's out. IMO TODO's left in the code base should be rare and general enough such that any future dev can understand and implement it.", "author": "jakelandis", "createdAt": "2020-09-15T13:21:59Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public T fromMediaType(String mediaType) {\n+        ParsedMediaType parsedMediaType = parseMediaType(mediaType);\n+        return parsedMediaType != null ? parsedMediaType.getMediaType() : null;\n+    }\n+\n+    public T fromFormat(String format) {\n+        if (format == null) {\n+            return null;\n+        }\n+        return formatToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    /**\n+     * parsing media type that follows https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+     * @param headerValue a header value from Accept or Content-Type\n+     * @return a parsed media-type\n+     */\n+    public ParsedMediaType parseMediaType(String headerValue) {\n+        if (headerValue != null) {\n+            String[] split = headerValue.toLowerCase(Locale.ROOT).split(\";\");\n+\n+            String[] typeSubtype = split[0].trim().toLowerCase(Locale.ROOT)\n+                .split(\"/\");\n+            if (typeSubtype.length == 2) {\n+                String type = typeSubtype[0];\n+                String subtype = typeSubtype[1];\n+                T xContentType = typeWithSubtypeToMediaType.get(type + \"/\" + subtype);\n+                if (xContentType != null) {\n+                    Map<String, String> parameters = new HashMap<>();\n+                    for (int i = 1; i < split.length; i++) {\n+                        //spaces are allowed between parameters, but not between '=' sign\n+                        String[] keyValueParam = split[i].trim().split(\"=\");\n+                        if (keyValueParam.length != 2 || hasSpaces(keyValueParam[0]) || hasSpaces(keyValueParam[1])) {\n+                            return null;\n+                        }\n+                        parameters.put(keyValueParam[0].toLowerCase(Locale.ROOT), keyValueParam[1].toLowerCase(Locale.ROOT));\n+                    }\n+                    return new ParsedMediaType(xContentType, parameters);\n+                }\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    private boolean hasSpaces(String s) {\n+        return s.trim().equals(s) == false;\n+    }\n+\n+    /**\n+     * A media type object that contains all the information provided on a Content-Type or Accept header\n+     * // TODO PG to be extended with getCompatibleAPIVersion and more", "originalCommit": "77068a802c498afb4582186bab517913b4414a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MzYxMw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489573613", "bodyText": "agree. removed the todo", "author": "pgomulka", "createdAt": "2020-09-16T16:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2MTkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 7e99ae3e8e3..3a5273408ce 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -96,7 +96,6 @@ public class MediaTypeParser<T extends MediaType> {\n \n     /**\n      * A media type object that contains all the information provided on a Content-Type or Accept header\n-     * // TODO PG to be extended with getCompatibleAPIVersion and more\n      */\n     public class ParsedMediaType {\n         private final Map<String, String> parameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2MzIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r488663225", "bodyText": "\u2764\ufe0f", "author": "jakelandis", "createdAt": "2020-09-15T13:23:42Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+/**\n+ * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n+ * Media types are used as values on Content-Type and Accept headers\n+ * format is an URL parameter, specifies response media type.\n+ */\n+public interface MediaType {\n+    /**\n+     * Returns a type part of a MediaType\n+     * i.e. application for application/json\n+     */\n+    String type();\n+\n+    /**\n+     * Returns a subtype part of a MediaType.\n+     * i.e. json for application/json\n+     */\n+    String subtype();\n+\n+    /**\n+     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n+     * Can differ from the MediaType's subtype i.e plain/text but format is txt", "originalCommit": "77068a802c498afb4582186bab517913b4414a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4598a0a9a1dbc301673e217849be11c7778cc539", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex 9e3affc5bce..2d611202887 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -39,7 +39,7 @@ public interface MediaType {\n \n     /**\n      * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n-     * Can differ from the MediaType's subtype i.e plain/text but format is txt\n+     * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt\n      */\n     String format();\n \n"}}, {"oid": "8fb0cd4c41710853001b5468f931dca0b0227c05", "url": "https://github.com/elastic/elasticsearch/commit/8fb0cd4c41710853001b5468f931dca0b0227c05", "message": "Merge branch 'master' into header_version_split", "committedDate": "2020-09-15T18:54:24Z", "type": "commit"}, {"oid": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "url": "https://github.com/elastic/elasticsearch/commit/63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "message": "remove todo and a testcase", "committedDate": "2020-09-16T16:37:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjc1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489722755", "bodyText": "Thank you for adding these javadocs!\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Can differ from the MediaType's subtype i.e plain/text but format is txt\n          \n          \n            \n                 * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt", "author": "jaymode", "createdAt": "2020-09-16T20:04:08Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+/**\n+ * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n+ * Media types are used as values on Content-Type and Accept headers\n+ * format is an URL parameter, specifies response media type.\n+ */\n+public interface MediaType {\n+    /**\n+     * Returns a type part of a MediaType\n+     * i.e. application for application/json\n+     */\n+    String type();\n+\n+    /**\n+     * Returns a subtype part of a MediaType.\n+     * i.e. json for application/json\n+     */\n+    String subtype();\n+\n+    /**\n+     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n+     * Can differ from the MediaType's subtype i.e plain/text but format is txt", "originalCommit": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4598a0a9a1dbc301673e217849be11c7778cc539", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex 9e3affc5bce..2d611202887 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -39,7 +39,7 @@ public interface MediaType {\n \n     /**\n      * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n-     * Can differ from the MediaType's subtype i.e plain/text but format is txt\n+     * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt\n      */\n     String format();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNzY5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61987#discussion_r489727697", "bodyText": "This could be considered a nit and is my preference on style and immutability.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, T> formatToMediaType = new HashMap<>();\n          \n          \n            \n                private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes) {\n          \n          \n            \n                    for (T mediaType : acceptedMediaTypes) {\n          \n          \n            \n                        typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n          \n          \n            \n                        formatToMediaType.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n          \n          \n            \n                    this(acceptedMediaTypes);\n          \n          \n            \n                    for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n          \n          \n            \n                        String typeWithSubtype = entry.getKey();\n          \n          \n            \n                        T mediaType = entry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                        typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n          \n          \n            \n                        formatToMediaType.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private final Map<String, T> formatToMediaType;\n          \n          \n            \n                private final Map<String, T> typeWithSubtypeToMediaType;\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes) {\n          \n          \n            \n                    this(acceptedMediaTypes, Map.of());\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n          \n          \n            \n                    final int size = acceptedMediaTypes.length + additionalMediaTypes.size();\n          \n          \n            \n                    Map<String, T> formatMap = new HashMap<>(size);\n          \n          \n            \n                    Map<String, T> typeMap = new HashMap<>(size);\n          \n          \n            \n                    for (T mediaType : acceptedMediaTypes) {\n          \n          \n            \n                        typeMap.put(mediaType.typeWithSubtype(), mediaType);\n          \n          \n            \n                        formatMap.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n                    for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n          \n          \n            \n                        String typeWithSubtype = entry.getKey();\n          \n          \n            \n                        T mediaType = entry.getValue();\n          \n          \n            \n            \n          \n          \n            \n                        typeMap.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n          \n          \n            \n                        formatMap.put(mediaType.format(), mediaType);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    this.formatToMediaType = Map.copyOf(formatMap);\n          \n          \n            \n                    this.typeWithSubtypeToMediaType = Map.copyOf(typeMap);\n          \n          \n            \n                }", "author": "jaymode", "createdAt": "2020-09-16T20:14:06Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public class MediaTypeParser<T extends MediaType> {\n+    private final Map<String, T> formatToMediaType = new HashMap<>();\n+    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes) {\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }\n+\n+    public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n+        this(acceptedMediaTypes);\n+        for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n+            String typeWithSubtype = entry.getKey();\n+            T mediaType = entry.getValue();\n+\n+            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatToMediaType.put(mediaType.format(), mediaType);\n+        }\n+    }", "originalCommit": "63fb6c7766f9ce39c00891a85a9594a1d84e49a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4598a0a9a1dbc301673e217849be11c7778cc539", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\nindex 3a5273408ce..ce310a5b3f8 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeParser.java\n\n@@ -24,25 +24,31 @@ import java.util.Locale;\n import java.util.Map;\n \n public class MediaTypeParser<T extends MediaType> {\n-    private final Map<String, T> formatToMediaType = new HashMap<>();\n-    private final Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+    private final Map<String, T> formatToMediaType;\n+    private final Map<String, T> typeWithSubtypeToMediaType;\n \n     public MediaTypeParser(T[] acceptedMediaTypes) {\n-        for (T mediaType : acceptedMediaTypes) {\n-            typeWithSubtypeToMediaType.put(mediaType.typeWithSubtype(), mediaType);\n-            formatToMediaType.put(mediaType.format(), mediaType);\n-        }\n+        this(acceptedMediaTypes, Map.of());\n     }\n \n     public MediaTypeParser(T[] acceptedMediaTypes, Map<String, T> additionalMediaTypes) {\n-        this(acceptedMediaTypes);\n+        final int size = acceptedMediaTypes.length + additionalMediaTypes.size();\n+        Map<String, T> formatMap = new HashMap<>(size);\n+        Map<String, T> typeMap = new HashMap<>(size);\n+        for (T mediaType : acceptedMediaTypes) {\n+            typeMap.put(mediaType.typeWithSubtype(), mediaType);\n+            formatMap.put(mediaType.format(), mediaType);\n+        }\n         for (Map.Entry<String, T> entry : additionalMediaTypes.entrySet()) {\n             String typeWithSubtype = entry.getKey();\n             T mediaType = entry.getValue();\n \n-            typeWithSubtypeToMediaType.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n-            formatToMediaType.put(mediaType.format(), mediaType);\n+            typeMap.put(typeWithSubtype.toLowerCase(Locale.ROOT), mediaType);\n+            formatMap.put(mediaType.format(), mediaType);\n         }\n+\n+        this.formatToMediaType = Map.copyOf(formatMap);\n+        this.typeWithSubtypeToMediaType = Map.copyOf(typeMap);\n     }\n \n     public T fromMediaType(String mediaType) {\n"}}, {"oid": "4598a0a9a1dbc301673e217849be11c7778cc539", "url": "https://github.com/elastic/elasticsearch/commit/4598a0a9a1dbc301673e217849be11c7778cc539", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>", "committedDate": "2020-09-17T12:58:23Z", "type": "commit"}]}