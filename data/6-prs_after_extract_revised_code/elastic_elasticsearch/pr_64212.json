{"pr_number": 64212, "pr_title": "EQL: Wrap a verification_exception in an index_not_found_exception in case there is no valid index available", "pr_createdAt": "2020-10-27T12:39:07Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64212", "timeline": [{"oid": "6e25ab3b916e632ed945090accf776ab0e3a3b5d", "url": "https://github.com/elastic/elasticsearch/commit/6e25ab3b916e632ed945090accf776ab0e3a3b5d", "message": "Wrap a verification_exception in case there is no valid index available\nin an index_not_found_exception providing also the original index pattern\nthat may be lost in the chain of filters involving the Security one.", "committedDate": "2020-10-27T12:32:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc5NzU4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64212#discussion_r512797589", "bodyText": "Would be good to add a comment on why this is needed.", "author": "costin", "createdAt": "2020-10-27T15:36:09Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java", "diffHunk": "@@ -59,12 +64,33 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n \n         return channel -> {\n             RestCancellableNodeClient cancellableClient = new RestCancellableNodeClient(client, request.getHttpChannel());\n-            cancellableClient.execute(EqlSearchAction.INSTANCE, eqlRequest, new RestResponseListener<>(channel) {\n+            cancellableClient.execute(EqlSearchAction.INSTANCE, eqlRequest, new ActionListener<>() {\n                 @Override\n-                public RestResponse buildResponse(EqlSearchResponse response) throws Exception {\n-                    XContentBuilder builder = channel.newBuilder(request.getXContentType(), XContentType.JSON, true);\n-                    response.toXContent(builder, request);\n-                    return new BytesRestResponse(RestStatus.OK, builder);\n+                public void onResponse(EqlSearchResponse response) {\n+                    try {\n+                        XContentBuilder builder = channel.newBuilder(request.getXContentType(), XContentType.JSON, true);\n+                        response.toXContent(builder, request);\n+                        channel.sendResponse(new BytesRestResponse(RestStatus.OK, builder));\n+                    } catch (Exception e) {\n+                        onFailure(e);\n+                    }\n+                }\n+\n+                @Override\n+                public void onFailure(Exception e) {\n+                    Exception finalException = e;\n+                    if (e instanceof IndexNotFoundException) {", "originalCommit": "6e25ab3b916e632ed945090accf776ab0e3a3b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4787e4077fa7f0e0b2c9e774215a0d3075d7a2f", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java\nindex 743f0d578c6..5dc48c5af43 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java\n\n@@ -79,6 +79,12 @@ public class RestEqlSearchAction extends BaseRestHandler {\n                 @Override\n                 public void onFailure(Exception e) {\n                     Exception finalException = e;\n+                    /* \n+                     * In a scenario when Security is enabled and a wildcarded pattern gets resolved to no index, the original error\n+                     * message will not contain the initial pattern, but \"*,-*\". So, we'll throw a INFE from the PreAnalyzer that will\n+                     * contain as cause the VerificationException with \"*,-*\" pattern but we'll rewrite the INFE here with the initial\n+                     * pattern that failed resolving. More details here https://github.com/elastic/elasticsearch/issues/63529\n+                     */\n                     if (e instanceof IndexNotFoundException) {\n                         IndexNotFoundException infe = (IndexNotFoundException) e;\n                         if (infe.getIndex() != null && infe.getIndex().getName().equals(\"Unknown index [*,-*]\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc5OTYxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64212#discussion_r512799619", "bodyText": "A comment is useful to indicate why the Verification exception is wrapped inside an infe", "author": "costin", "createdAt": "2020-10-27T15:38:14Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/PreAnalyzer.java", "diffHunk": "@@ -17,9 +18,9 @@\n public class PreAnalyzer {\n \n     public LogicalPlan preAnalyze(LogicalPlan plan, IndexResolution indices) {\n-        // wrap a potential index_not_found_exception with a VerificationException (expected by client)\n         if (indices.isValid() == false) {", "originalCommit": "6e25ab3b916e632ed945090accf776ab0e3a3b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4787e4077fa7f0e0b2c9e774215a0d3075d7a2f", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/PreAnalyzer.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/PreAnalyzer.java\nindex 10b4d6d6e13..c628723a89f 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/PreAnalyzer.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/analysis/PreAnalyzer.java\n\n@@ -20,6 +20,8 @@ public class PreAnalyzer {\n     public LogicalPlan preAnalyze(LogicalPlan plan, IndexResolution indices) {\n         if (indices.isValid() == false) {\n             VerificationException cause = new VerificationException(Collections.singletonList(Failure.fail(plan, indices.toString())));\n+            // Wrapping the verification_exception in an infe to easily distinguish it on the rest layer in case it needs rewriting\n+            // (see RestEqlSearchAction for its usage).\n             throw new IndexNotFoundException(indices.toString(), cause);\n         }\n         if (plan.analyzed() == false) {\n"}}, {"oid": "b4787e4077fa7f0e0b2c9e774215a0d3075d7a2f", "url": "https://github.com/elastic/elasticsearch/commit/b4787e4077fa7f0e0b2c9e774215a0d3075d7a2f", "message": "Added code comments", "committedDate": "2020-10-27T17:03:18Z", "type": "commit"}, {"oid": "d97ed0dacac7c2b4463a54f04dc1d7a7d23dcf35", "url": "https://github.com/elastic/elasticsearch/commit/d97ed0dacac7c2b4463a54f04dc1d7a7d23dcf35", "message": "Merge branch 'master' into 63529_fix", "committedDate": "2020-10-28T07:40:57Z", "type": "commit"}]}