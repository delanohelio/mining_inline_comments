{"pr_number": 51734, "pr_title": "Fix completeWith exception handling", "pr_createdAt": "2020-01-31T11:33:36Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51734", "timeline": [{"oid": "ef7a2b8ed9076ac0852292023e38b0e0c71376b4", "url": "https://github.com/elastic/elasticsearch/commit/ef7a2b8ed9076ac0852292023e38b0e0c71376b4", "message": "Fix completeWith exception handling\n\nActionListener.completeWith would catch exceptions from\nlistener.onResponse and deliver them to lister.onFailure, essentially\ndouble notifying the listener. Instead we now assert that listeners do\nnot throw when using ActionListener.completeWith.\n\nRelates #50886", "committedDate": "2020-01-31T11:01:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2NTQyNw==", "url": "https://github.com/elastic/elasticsearch/pull/51734#discussion_r373465427", "bodyText": "I'm starting to wonder ... maybe (as the eventual goal of our efforts here, don't think it's possible right now), we should just make ActionListener an abstract class and enforce that nothing is thrown in onResponse and onFailure by simply making these lines call some protected innerOnResponse or so.\nIt seems just enforcing the not throwing in onComplete and map is simply a small part of the overall issue of enforcing the callbacks to handle their own exceptions and we could just dry things up that way?", "author": "original-brownbear", "createdAt": "2020-01-31T12:54:25Z", "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "diffHunk": "@@ -315,12 +315,28 @@ protected void innerOnFailure(Exception e) {\n     /**\n      * Completes the given listener with the result from the provided supplier accordingly.\n      * This method is mainly used to complete a listener with a block of synchronous code.\n+     *\n+     * If the supplier fails, the listener's onFailure handler will be called.\n+     * It is the responsibility of {@code delegate} to handle its own exceptions inside `onResponse` and `onFailure`.\n      */\n     static <Response> void completeWith(ActionListener<Response> listener, CheckedSupplier<Response, ? extends Exception> supplier) {\n+        Response response;\n         try {\n-            listener.onResponse(supplier.get());\n+            response = supplier.get();\n         } catch (Exception e) {\n-            listener.onFailure(e);\n+            try {\n+                listener.onFailure(e);\n+            } catch (RuntimeException ex) {\n+                assert false : ex;\n+                throw ex;\n+            }\n+            return;\n+        }\n+        try {\n+            listener.onResponse(response);\n+        } catch (RuntimeException ex) {", "originalCommit": "ef7a2b8ed9076ac0852292023e38b0e0c71376b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4OTkzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51734#discussion_r373489931", "bodyText": "I think I agree to this, but unfortunately it does not free us from avoiding for instance wrap, since it delegates failures from inner calls to listener.onResponse to onFailure in production (i.e., without assertions).", "author": "henningandersen", "createdAt": "2020-01-31T13:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2NTQyNw=="}], "type": "inlineReview", "revised_code": null}]}