{"pr_number": 53461, "pr_title": "/_cat/shards support path stats", "pr_createdAt": "2020-03-12T09:29:47Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53461", "timeline": [{"oid": "4650439ba7025058b9d16ef1bcecb44ceff7f787", "url": "https://github.com/elastic/elasticsearch/commit/4650439ba7025058b9d16ef1bcecb44ceff7f787", "message": "_cat/shards support path stats", "committedDate": "2020-03-12T09:15:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53461#discussion_r392512225", "bodyText": "Please move arguments to single line (you can extract ShardRoutingState to variable to make it more readable)", "author": "probakowski", "createdAt": "2020-03-13T22:23:59Z", "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.cat;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.action.admin.indices.stats.CommonStats;\n+import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\n+import org.elasticsearch.action.admin.indices.stats.ShardStats;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.TestShardRouting;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.index.shard.ShardPath;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.usage.UsageService;\n+\n+public class RestShardsActionTests extends ESTestCase {\n+\n+    public void testBuildTable() {\n+        final int numShards = randomIntBetween(1, 5);\n+        DiscoveryNode localNode = new DiscoveryNode(\"local\", buildNewFakeTransportAddress(), Version.CURRENT);\n+\n+        List<ShardRouting> shardRoutings = new ArrayList<>(numShards);\n+        Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();\n+        String index = \"index\";\n+        for (int i = 0; i < numShards; i++) {\n+            ShardRouting shardRouting = TestShardRouting.newShardRouting(", "originalCommit": "4650439ba7025058b9d16ef1bcecb44ceff7f787", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ee62cca3730d4be2006ca02e63ddaa1d8613c9b", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java b/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\nindex 1a7966948ff..8c9cd33e708 100644\n--- a/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\n+++ b/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\n\n@@ -19,17 +19,6 @@\n \n package org.elasticsearch.rest.action.cat;\n \n-import static org.hamcrest.Matchers.equalTo;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n import org.elasticsearch.Version;\n import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n import org.elasticsearch.action.admin.indices.stats.CommonStats;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjI3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53461#discussion_r392512271", "bodyText": "Same as above", "author": "probakowski", "createdAt": "2020-03-13T22:24:12Z", "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.cat;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.action.admin.indices.stats.CommonStats;\n+import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\n+import org.elasticsearch.action.admin.indices.stats.ShardStats;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.TestShardRouting;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.index.shard.ShardPath;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.usage.UsageService;\n+\n+public class RestShardsActionTests extends ESTestCase {\n+\n+    public void testBuildTable() {\n+        final int numShards = randomIntBetween(1, 5);\n+        DiscoveryNode localNode = new DiscoveryNode(\"local\", buildNewFakeTransportAddress(), Version.CURRENT);\n+\n+        List<ShardRouting> shardRoutings = new ArrayList<>(numShards);\n+        Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();\n+        String index = \"index\";\n+        for (int i = 0; i < numShards; i++) {\n+            ShardRouting shardRouting = TestShardRouting.newShardRouting(\n+                index,\n+                i,\n+                localNode.getId(),\n+                randomBoolean(),\n+                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3))\n+            );\n+            Path path = createTempDir().resolve(\"indices\")\n+                .resolve(shardRouting.shardId().getIndex().getUUID())\n+                .resolve(String.valueOf(shardRouting.shardId().id()));\n+            ShardStats shardStats = new ShardStats(", "originalCommit": "4650439ba7025058b9d16ef1bcecb44ceff7f787", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ee62cca3730d4be2006ca02e63ddaa1d8613c9b", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java b/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\nindex 1a7966948ff..8c9cd33e708 100644\n--- a/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\n+++ b/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\n\n@@ -19,17 +19,6 @@\n \n package org.elasticsearch.rest.action.cat;\n \n-import static org.hamcrest.Matchers.equalTo;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n import org.elasticsearch.Version;\n import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n import org.elasticsearch.action.admin.indices.stats.CommonStats;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjM0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53461#discussion_r392512347", "bodyText": "restController is not really used here, it can be removed", "author": "probakowski", "createdAt": "2020-03-13T22:24:32Z", "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.cat;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.action.admin.indices.stats.CommonStats;\n+import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\n+import org.elasticsearch.action.admin.indices.stats.ShardStats;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.TestShardRouting;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.index.shard.ShardPath;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.usage.UsageService;\n+\n+public class RestShardsActionTests extends ESTestCase {\n+\n+    public void testBuildTable() {\n+        final int numShards = randomIntBetween(1, 5);\n+        DiscoveryNode localNode = new DiscoveryNode(\"local\", buildNewFakeTransportAddress(), Version.CURRENT);\n+\n+        List<ShardRouting> shardRoutings = new ArrayList<>(numShards);\n+        Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();\n+        String index = \"index\";\n+        for (int i = 0; i < numShards; i++) {\n+            ShardRouting shardRouting = TestShardRouting.newShardRouting(\n+                index,\n+                i,\n+                localNode.getId(),\n+                randomBoolean(),\n+                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3))\n+            );\n+            Path path = createTempDir().resolve(\"indices\")\n+                .resolve(shardRouting.shardId().getIndex().getUUID())\n+                .resolve(String.valueOf(shardRouting.shardId().id()));\n+            ShardStats shardStats = new ShardStats(\n+                shardRouting,\n+                new ShardPath(false, path, path, shardRouting.shardId()),\n+                null,\n+                null,\n+                null,\n+                null\n+            );\n+            shardStatsMap.put(shardRouting, shardStats);\n+            shardRoutings.add(shardRouting);\n+        }\n+\n+        IndexStats indexStats = mock(IndexStats.class);\n+        when(indexStats.getPrimaries()).thenReturn(new CommonStats());\n+        when(indexStats.getTotal()).thenReturn(new CommonStats());\n+\n+        IndicesStatsResponse stats = mock(IndicesStatsResponse.class);\n+        when(stats.asMap()).thenReturn(shardStatsMap);\n+\n+        DiscoveryNodes discoveryNodes = mock(DiscoveryNodes.class);\n+        when(discoveryNodes.get(localNode.getId())).thenReturn(localNode);\n+\n+        ClusterStateResponse state = mock(ClusterStateResponse.class);\n+        RoutingTable routingTable = mock(RoutingTable.class);\n+        when(routingTable.allShards()).thenReturn(shardRoutings);\n+        ClusterState clusterState = mock(ClusterState.class);\n+        when(clusterState.routingTable()).thenReturn(routingTable);\n+        when(clusterState.nodes()).thenReturn(discoveryNodes);\n+        when(state.getState()).thenReturn(clusterState);\n+\n+        final RestController restController = new RestController(", "originalCommit": "4650439ba7025058b9d16ef1bcecb44ceff7f787", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ee62cca3730d4be2006ca02e63ddaa1d8613c9b", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java b/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\nindex 1a7966948ff..8c9cd33e708 100644\n--- a/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\n+++ b/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\n\n@@ -19,17 +19,6 @@\n \n package org.elasticsearch.rest.action.cat;\n \n-import static org.hamcrest.Matchers.equalTo;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n import org.elasticsearch.Version;\n import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n import org.elasticsearch.action.admin.indices.stats.CommonStats;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjc2OA==", "url": "https://github.com/elastic/elasticsearch/pull/53461#discussion_r392512768", "bodyText": "Consider using iterator here, you don't have to increment counter by yourself\nIterator<ShardRouting> shardRoutingsIt = shardRoutings.iterator();\nfor (final List<Table.Cell> row : rows) {\n    ShardRouting shardRouting = shardRoutingsIt.next();", "author": "probakowski", "createdAt": "2020-03-13T22:26:02Z", "path": "server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.cat;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.action.admin.indices.stats.CommonStats;\n+import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\n+import org.elasticsearch.action.admin.indices.stats.ShardStats;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.TestShardRouting;\n+import org.elasticsearch.common.Table;\n+import org.elasticsearch.index.shard.ShardPath;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.rest.FakeRestRequest;\n+import org.elasticsearch.usage.UsageService;\n+\n+public class RestShardsActionTests extends ESTestCase {\n+\n+    public void testBuildTable() {\n+        final int numShards = randomIntBetween(1, 5);\n+        DiscoveryNode localNode = new DiscoveryNode(\"local\", buildNewFakeTransportAddress(), Version.CURRENT);\n+\n+        List<ShardRouting> shardRoutings = new ArrayList<>(numShards);\n+        Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();\n+        String index = \"index\";\n+        for (int i = 0; i < numShards; i++) {\n+            ShardRouting shardRouting = TestShardRouting.newShardRouting(\n+                index,\n+                i,\n+                localNode.getId(),\n+                randomBoolean(),\n+                ShardRoutingState.fromValue((byte) randomIntBetween(2, 3))\n+            );\n+            Path path = createTempDir().resolve(\"indices\")\n+                .resolve(shardRouting.shardId().getIndex().getUUID())\n+                .resolve(String.valueOf(shardRouting.shardId().id()));\n+            ShardStats shardStats = new ShardStats(\n+                shardRouting,\n+                new ShardPath(false, path, path, shardRouting.shardId()),\n+                null,\n+                null,\n+                null,\n+                null\n+            );\n+            shardStatsMap.put(shardRouting, shardStats);\n+            shardRoutings.add(shardRouting);\n+        }\n+\n+        IndexStats indexStats = mock(IndexStats.class);\n+        when(indexStats.getPrimaries()).thenReturn(new CommonStats());\n+        when(indexStats.getTotal()).thenReturn(new CommonStats());\n+\n+        IndicesStatsResponse stats = mock(IndicesStatsResponse.class);\n+        when(stats.asMap()).thenReturn(shardStatsMap);\n+\n+        DiscoveryNodes discoveryNodes = mock(DiscoveryNodes.class);\n+        when(discoveryNodes.get(localNode.getId())).thenReturn(localNode);\n+\n+        ClusterStateResponse state = mock(ClusterStateResponse.class);\n+        RoutingTable routingTable = mock(RoutingTable.class);\n+        when(routingTable.allShards()).thenReturn(shardRoutings);\n+        ClusterState clusterState = mock(ClusterState.class);\n+        when(clusterState.routingTable()).thenReturn(routingTable);\n+        when(clusterState.nodes()).thenReturn(discoveryNodes);\n+        when(state.getState()).thenReturn(clusterState);\n+\n+        final RestController restController = new RestController(\n+            Collections.emptySet(),\n+            null,\n+            null,\n+            null,\n+            new UsageService(),\n+            randomBoolean()\n+        );\n+        final RestShardsAction action = new RestShardsAction();\n+        restController.registerHandler(action);\n+\n+        final Table table = action.buildTable(new FakeRestRequest(), state, stats);\n+\n+        // now, verify the table is correct\n+        List<Table.Cell> headers = table.getHeaders();\n+        assertThat(headers.get(0).value, equalTo(\"index\"));\n+        assertThat(headers.get(1).value, equalTo(\"shard\"));\n+        assertThat(headers.get(2).value, equalTo(\"prirep\"));\n+        assertThat(headers.get(3).value, equalTo(\"state\"));\n+        assertThat(headers.get(4).value, equalTo(\"docs\"));\n+        assertThat(headers.get(5).value, equalTo(\"store\"));\n+        assertThat(headers.get(6).value, equalTo(\"ip\"));\n+        assertThat(headers.get(7).value, equalTo(\"id\"));\n+        assertThat(headers.get(8).value, equalTo(\"node\"));\n+\n+        final List<List<Table.Cell>> rows = table.getRows();\n+        assertThat(rows.size(), equalTo(numShards));\n+\n+        int i = 0;\n+        for (final List<Table.Cell> row : rows) {\n+            ShardRouting shardRouting = shardRoutings.get(i);", "originalCommit": "4650439ba7025058b9d16ef1bcecb44ceff7f787", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ee62cca3730d4be2006ca02e63ddaa1d8613c9b", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java b/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\nindex 1a7966948ff..8c9cd33e708 100644\n--- a/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\n+++ b/server/src/test/java/org/elasticsearch/rest/action/cat/RestShardsActionTests.java\n\n@@ -19,17 +19,6 @@\n \n package org.elasticsearch.rest.action.cat;\n \n-import static org.hamcrest.Matchers.equalTo;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n import org.elasticsearch.Version;\n import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n import org.elasticsearch.action.admin.indices.stats.CommonStats;\n"}}, {"oid": "6ee62cca3730d4be2006ca02e63ddaa1d8613c9b", "url": "https://github.com/elastic/elasticsearch/commit/6ee62cca3730d4be2006ca02e63ddaa1d8613c9b", "message": "fix some style case", "committedDate": "2020-03-14T13:19:16Z", "type": "commit"}, {"oid": "de173dee67dffa8b2c2b270575b6705931e2ce1f", "url": "https://github.com/elastic/elasticsearch/commit/de173dee67dffa8b2c2b270575b6705931e2ce1f", "message": "fix some style case", "committedDate": "2020-03-14T14:14:38Z", "type": "commit"}, {"oid": "43da1816c25ee73e1485906c113194cd343ea5bb", "url": "https://github.com/elastic/elasticsearch/commit/43da1816c25ee73e1485906c113194cd343ea5bb", "message": "fix rest-api-spec cat.shards error", "committedDate": "2020-03-15T03:07:01Z", "type": "commit"}, {"oid": "e4f539ca41dd8103bdb3f554699e29cb08b87e68", "url": "https://github.com/elastic/elasticsearch/commit/e4f539ca41dd8103bdb3f554699e29cb08b87e68", "message": "Merge branch 'master' into improve-cat-shards-shardPath-stats", "committedDate": "2020-03-15T21:02:02Z", "type": "commit"}, {"oid": "9b11fd948996987245f2a2df5f1a2b024fd58e8a", "url": "https://github.com/elastic/elasticsearch/commit/9b11fd948996987245f2a2df5f1a2b024fd58e8a", "message": "fix rest-api-spec cat.shards bwc error", "committedDate": "2020-03-17T07:14:59Z", "type": "commit"}, {"oid": "5a02b0ea9a4aeef9fde13e8a68bea9fe61eb8c87", "url": "https://github.com/elastic/elasticsearch/commit/5a02b0ea9a4aeef9fde13e8a68bea9fe61eb8c87", "message": "Merge branch 'master' into improve-cat-shards-shardPath-stats", "committedDate": "2020-03-19T01:53:59Z", "type": "commit"}, {"oid": "94cb9606fe006b586d3a8f35459f2dd4a1cc54b4", "url": "https://github.com/elastic/elasticsearch/commit/94cb9606fe006b586d3a8f35459f2dd4a1cc54b4", "message": "Merge branch 'master' into improve-cat-shards-shardPath-stats", "committedDate": "2020-03-19T16:18:24Z", "type": "commit"}, {"oid": "bf5929f53df9b43f59cdce112cb196cbab3a4dc4", "url": "https://github.com/elastic/elasticsearch/commit/bf5929f53df9b43f59cdce112cb196cbab3a4dc4", "message": "Merge branch 'master' into improve-cat-shards-shardPath-stats", "committedDate": "2020-03-21T02:13:31Z", "type": "commit"}]}