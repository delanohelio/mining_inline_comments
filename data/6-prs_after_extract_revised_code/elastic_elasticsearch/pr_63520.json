{"pr_number": 63520, "pr_title": "Cancel search on shard failure when partial results disallowed", "pr_createdAt": "2020-10-09T15:20:57Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63520", "timeline": [{"oid": "0b4aab930b62ad4d7de4218c7d4ab34444594455", "url": "https://github.com/elastic/elasticsearch/commit/0b4aab930b62ad4d7de4218c7d4ab34444594455", "message": "Cancel search on failure when partial result disallowed", "committedDate": "2020-10-09T02:46:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MzQ1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63520#discussion_r504553451", "bodyText": "Should we replace the exception with a simple error message since that's the only part we're using in the method ?", "author": "jimczi", "createdAt": "2020-10-14T09:58:43Z", "path": "server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java", "diffHunk": "@@ -423,4 +430,13 @@ private boolean assertNodePresent() {\n             return true;\n         }\n     }\n+\n+    public void cancelSearchTask(SearchTask task, Exception exc) {", "originalCommit": "0b4aab930b62ad4d7de4218c7d4ab34444594455", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1MjI2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63520#discussion_r504652269", "bodyText": "++", "author": "dnhatn", "createdAt": "2020-10-14T12:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MzQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f038c4388d3e3dd5d8c87df1eacfa92b09343c59", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java b/server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java\nindex 5950d25196a..fb5980dda03 100644\n--- a/server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java\n+++ b/server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java\n\n@@ -431,11 +431,10 @@ public class SearchTransportService {\n         }\n     }\n \n-    public void cancelSearchTask(SearchTask task, Exception exc) {\n-        String errorMsg = exc.getMessage() != null ? exc.getMessage() : \"\";\n+    public void cancelSearchTask(SearchTask task, String reason) {\n         CancelTasksRequest req = new CancelTasksRequest()\n             .setTaskId(new TaskId(client.getLocalNodeId(), task.getId()))\n-            .setReason(\"Fatal failure during search: \" + errorMsg);\n+            .setReason(\"Fatal failure during search: \" + reason);\n         // force the origin to execute the cancellation as a system user\n         new OriginSettingClient(client, GetTaskAction.TASKS_ORIGIN).admin().cluster().cancelTasks(req, ActionListener.wrap(() -> {}));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1Mzg3MA==", "url": "https://github.com/elastic/elasticsearch/pull/63520#discussion_r504553870", "bodyText": "Why is it needed to override ?", "author": "jimczi", "createdAt": "2020-10-14T09:59:27Z", "path": "server/src/test/java/org/elasticsearch/action/search/CanMatchPreFilterSearchPhaseTests.java", "diffHunk": "@@ -204,6 +204,11 @@ public void sendCanMatch(\n                     ActionListener<SearchService.CanMatchResponse> listener) {\n                     listener.onResponse(new SearchService.CanMatchResponse(randomBoolean(), null));\n                 }\n+\n+                @Override\n+                public void cancelSearchTask(SearchTask task, Exception exc) {", "originalCommit": "0b4aab930b62ad4d7de4218c7d4ab34444594455", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f038c4388d3e3dd5d8c87df1eacfa92b09343c59", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/search/CanMatchPreFilterSearchPhaseTests.java b/server/src/test/java/org/elasticsearch/action/search/CanMatchPreFilterSearchPhaseTests.java\nindex 129310385ae..af5f71e8e4b 100644\n--- a/server/src/test/java/org/elasticsearch/action/search/CanMatchPreFilterSearchPhaseTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/search/CanMatchPreFilterSearchPhaseTests.java\n\n@@ -204,11 +204,6 @@ public class CanMatchPreFilterSearchPhaseTests extends ESTestCase {\n                     ActionListener<SearchService.CanMatchResponse> listener) {\n                     listener.onResponse(new SearchService.CanMatchResponse(randomBoolean(), null));\n                 }\n-\n-                @Override\n-                public void cancelSearchTask(SearchTask task, Exception exc) {\n-                    super.cancelSearchTask(task, exc);\n-                }\n             };\n \n         final CountDownLatch latch = new CountDownLatch(1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDI3OA==", "url": "https://github.com/elastic/elasticsearch/pull/63520#discussion_r504554278", "bodyText": "The exception seems off, we should just set the error message or at least use a TaskCancelledException ?", "author": "jimczi", "createdAt": "2020-10-14T10:00:06Z", "path": "server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java", "diffHunk": "@@ -393,6 +395,16 @@ private void onShardFailure(final int shardIndex, @Nullable SearchShardTarget sh\n         logger.debug(() -> new ParameterizedMessage(\"{}: Failed to execute [{}] lastShard [{}]\",\n             shard != null ? shard : shardIt.shardId(), request, lastShard), e);\n         if (lastShard) {\n+            if (request.allowPartialSearchResults() == false) {\n+                if (requestCancelled.compareAndSet(false, true)) {\n+                    try {\n+                        searchTransportService.cancelSearchTask(task, new CancellationException(", "originalCommit": "0b4aab930b62ad4d7de4218c7d4ab34444594455", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1MjIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/63520#discussion_r504652206", "bodyText": "Good catch. Adjusted in f038c43", "author": "dnhatn", "createdAt": "2020-10-14T12:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1NDI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "f038c4388d3e3dd5d8c87df1eacfa92b09343c59", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java\nindex 3fb6feccb09..c2393e891f3 100644\n--- a/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java\n+++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java\n\n@@ -398,8 +397,7 @@ abstract class AbstractSearchAsyncAction<Result extends SearchPhaseResult> exten\n             if (request.allowPartialSearchResults() == false) {\n                 if (requestCancelled.compareAndSet(false, true)) {\n                     try {\n-                        searchTransportService.cancelSearchTask(task, new CancellationException(\n-                            \"Search is cancelled because partial results are not allowed and at least one shard has failed\"));\n+                        searchTransportService.cancelSearchTask(task, \"partial results are not allowed and at least one shard has failed\");\n                     } catch (Exception cancelFailure) {\n                         logger.debug(\"Failed to cancel search request\", cancelFailure);\n                     }\n"}}, {"oid": "e56ebc7cfee52b56d75d1a334cf44de6d5456e85", "url": "https://github.com/elastic/elasticsearch/commit/e56ebc7cfee52b56d75d1a334cf44de6d5456e85", "message": "Merge branch 'master' into cancel-search-on-failure", "committedDate": "2020-10-14T12:30:11Z", "type": "commit"}, {"oid": "f038c4388d3e3dd5d8c87df1eacfa92b09343c59", "url": "https://github.com/elastic/elasticsearch/commit/f038c4388d3e3dd5d8c87df1eacfa92b09343c59", "message": "feedback", "committedDate": "2020-10-14T12:53:48Z", "type": "commit"}]}