{"pr_number": 52880, "pr_title": "BoolQueryBuilder uses ObjectParser", "pr_createdAt": "2020-02-27T11:25:44Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52880", "timeline": [{"oid": "278daaa7f0950a5e4a686077e22c45085282a996", "url": "https://github.com/elastic/elasticsearch/commit/278daaa7f0950a5e4a686077e22c45085282a996", "message": "BoolQueryBuilder uses ObjectParser", "committedDate": "2020-02-27T11:23:21Z", "type": "commit"}, {"oid": "ec59f9784978926435fcf746808f57ff4436a56d", "url": "https://github.com/elastic/elasticsearch/commit/ec59f9784978926435fcf746808f57ff4436a56d", "message": "msm can be string or number", "committedDate": "2020-02-27T11:53:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MzgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/52880#discussion_r385693828", "bodyText": "I think so!", "author": "nik9000", "createdAt": "2020-02-28T13:26:48Z", "path": "server/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java", "diffHunk": "@@ -51,13 +52,11 @@\n \n     public static final boolean ADJUST_PURE_NEGATIVE_DEFAULT = true;\n \n-    private static final String MUSTNOT = \"mustNot\";\n-    private static final String MUST_NOT = \"must_not\";\n-    private static final String FILTER = \"filter\";\n-    private static final String SHOULD = \"should\";\n-    private static final String MUST = \"must\";\n-    private static final ParseField DISABLE_COORD_FIELD = new ParseField(\"disable_coord\")\n-            .withAllDeprecated(\"disable_coord has been removed\");\n+    private static final ParseField MUSTNOT = new ParseField(\"mustNot\");    // TODO deprecate?", "originalCommit": "ec59f9784978926435fcf746808f57ff4436a56d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NjYzMw==", "url": "https://github.com/elastic/elasticsearch/pull/52880#discussion_r386276633", "bodyText": "I think I'll do this in a followup to get more eyes on it.", "author": "romseygeek", "createdAt": "2020-03-02T09:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MzgyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NDEyNg==", "url": "https://github.com/elastic/elasticsearch/pull/52880#discussion_r385694126", "bodyText": "Might be worth asserting on the \"inner\" exception too. Or something. Because this message isn't nearly a nice as the other one.", "author": "nik9000", "createdAt": "2020-02-28T13:27:29Z", "path": "server/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java", "diffHunk": "@@ -277,14 +277,20 @@ public void testFromJson() throws IOException {\n         assertEquals(query, \"kimchy\", ((TermQueryBuilder)queryBuilder.must().get(0)).value());\n     }\n \n+    public void testMinimumShouldMatchNumber() throws IOException {\n+        String query = \"{\\\"bool\\\" : {\\\"must\\\" : { \\\"term\\\" : { \\\"field\\\" : \\\"value\\\" } }, \\\"minimum_should_match\\\" : 1 } }\";\n+        BoolQueryBuilder builder = (BoolQueryBuilder) parseQuery(query);\n+        assertEquals(\"1\", builder.minimumShouldMatch());\n+    }\n+\n     /**\n      * test that unknown query names in the clauses throw an error\n      */\n     public void testUnknownQueryName() throws IOException {\n         String query = \"{\\\"bool\\\" : {\\\"must\\\" : { \\\"unknown_query\\\" : { } } } }\";\n \n-        ParsingException ex = expectThrows(ParsingException.class, () -> parseQuery(query));\n-        assertEquals(\"unknown query [unknown_query]\", ex.getMessage());\n+        XContentParseException ex = expectThrows(XContentParseException.class, () -> parseQuery(query));\n+        assertEquals(\"[1:41] [bool] failed to parse field [must]\", ex.getMessage());", "originalCommit": "ec59f9784978926435fcf746808f57ff4436a56d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTc3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52880#discussion_r386279779", "bodyText": "++ I pushed f0f9b15", "author": "romseygeek", "createdAt": "2020-03-02T09:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NDEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "f0f9b1542bd57f969d8c5149328b8ed368bebf05", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java b/server/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java\nindex 95b61ec8d50..c974f106e56 100644\n--- a/server/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java\n\n@@ -291,6 +292,9 @@ public class BoolQueryBuilderTests extends AbstractQueryTestCase<BoolQueryBuilde\n \n         XContentParseException ex = expectThrows(XContentParseException.class, () -> parseQuery(query));\n         assertEquals(\"[1:41] [bool] failed to parse field [must]\", ex.getMessage());\n+        Throwable e = ex.getCause();\n+        assertThat(e.getMessage(), containsString(\"unknown query [unknown_query]\"));\n+\n     }\n \n     public void testRewrite() throws IOException {\n"}}, {"oid": "f0f9b1542bd57f969d8c5149328b8ed368bebf05", "url": "https://github.com/elastic/elasticsearch/commit/f0f9b1542bd57f969d8c5149328b8ed368bebf05", "message": "assert on wrapped exception as well", "committedDate": "2020-03-02T09:30:45Z", "type": "commit"}, {"oid": "02dbd643b79b7bdfaeb11f8bd8204bf758f06d87", "url": "https://github.com/elastic/elasticsearch/commit/02dbd643b79b7bdfaeb11f8bd8204bf758f06d87", "message": "Merge remote-tracking branch 'origin/master' into refactor/boolqueryparser", "committedDate": "2020-03-02T09:50:01Z", "type": "commit"}, {"oid": "ba4f0652f6e00da925774c1b19a4c2b4ed08596e", "url": "https://github.com/elastic/elasticsearch/commit/ba4f0652f6e00da925774c1b19a4c2b4ed08596e", "message": "Merge branch 'master' into refactor/boolqueryparser", "committedDate": "2020-03-02T14:17:47Z", "type": "commit"}]}