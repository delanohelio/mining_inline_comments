{"pr_number": 51061, "pr_title": "Calculate results and model snapshot retention using latest bucket timestamps", "pr_createdAt": "2020-01-15T17:54:29Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51061", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyNDY1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r367024655", "bodyText": "There is no way to create a job without a model snapshot retention policy. If you set modelSnapshotRetentionDays to null then the builder will automatically default it back to 1 when the job is read back from xcontent.\nNegative numbers are not tolerated and throw a validation exception so the only way of not having a retention policy is setting it to a large value", "author": "davidkyle", "createdAt": "2020-01-15T18:03:19Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java", "diffHunk": "@@ -45,114 +43,97 @@\n import static org.mockito.Matchers.same;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n public class ExpiredModelSnapshotsRemoverTests extends ESTestCase {\n \n     private Client client;\n     private OriginSettingClient originSettingClient;\n-    private ThreadPool threadPool;\n     private List<SearchRequest> capturedSearchRequests;\n     private List<DeleteModelSnapshotAction.Request> capturedDeleteModelSnapshotRequests;\n-    private List<SearchResponse> searchResponsesPerCall;\n     private TestListener listener;\n \n     @Before\n     public void setUpTests() {\n         capturedSearchRequests = new ArrayList<>();\n         capturedDeleteModelSnapshotRequests = new ArrayList<>();\n-        searchResponsesPerCall = new ArrayList<>();\n \n         client = mock(Client.class);\n         originSettingClient = MockOriginSettingClient.mockOriginSettingClient(client, ClientHelper.ML_ORIGIN);\n \n         listener = new TestListener();\n-\n-        // Init thread pool\n-        Settings settings = Settings.builder()\n-                .put(\"node.name\", \"expired_model_snapshots_remover_test\")\n-                .build();\n-        threadPool = new ThreadPool(settings,\n-                new FixedExecutorBuilder(settings, MachineLearning.UTILITY_THREAD_POOL_NAME, 1, 1000, \"\"));\n-    }\n-\n-    @After\n-    public void shutdownThreadPool() {\n-        terminate(threadPool);\n-    }\n-\n-    public void testRemove_GivenJobsWithoutRetentionPolicy() throws IOException {", "originalCommit": "fdd99d3908a02cdb3d5b876e5061bb014f789d99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7c0161a4c02000bed885294a723b6779bbb849ed", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\nindex a178cd48b7c..6e332bf148d 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemoverTests.java\n\n@@ -43,97 +45,114 @@ import static org.mockito.Matchers.eq;\n import static org.mockito.Matchers.same;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n public class ExpiredModelSnapshotsRemoverTests extends ESTestCase {\n \n     private Client client;\n     private OriginSettingClient originSettingClient;\n+    private ThreadPool threadPool;\n     private List<SearchRequest> capturedSearchRequests;\n     private List<DeleteModelSnapshotAction.Request> capturedDeleteModelSnapshotRequests;\n+    private List<SearchResponse> searchResponsesPerCall;\n     private TestListener listener;\n \n     @Before\n     public void setUpTests() {\n         capturedSearchRequests = new ArrayList<>();\n         capturedDeleteModelSnapshotRequests = new ArrayList<>();\n+        searchResponsesPerCall = new ArrayList<>();\n \n         client = mock(Client.class);\n         originSettingClient = MockOriginSettingClient.mockOriginSettingClient(client, ClientHelper.ML_ORIGIN);\n \n         listener = new TestListener();\n+\n+        // Init thread pool\n+        Settings settings = Settings.builder()\n+                .put(\"node.name\", \"expired_model_snapshots_remover_test\")\n+                .build();\n+        threadPool = new ThreadPool(settings,\n+                new FixedExecutorBuilder(settings, MachineLearning.UTILITY_THREAD_POOL_NAME, 1, 1000, \"\"));\n     }\n \n-    public void testRemove_GivenJobWithoutActiveSnapshot() throws IOException {\n-        List<SearchResponse> responses = Arrays.asList(\n-                AbstractExpiredJobDataRemoverTests.createSearchResponse(Collections.singletonList(JobTests.buildJobBuilder(\"foo\")\n-                        .setModelSnapshotRetentionDays(7L).build())),\n-                AbstractExpiredJobDataRemoverTests.createSearchResponse(Collections.emptyList()));\n+    @After\n+    public void shutdownThreadPool() {\n+        terminate(threadPool);\n+    }\n+\n+    public void testRemove_GivenJobsWithoutRetentionPolicy() throws IOException {\n+        givenClientRequestsSucceed(Arrays.asList(\n+                JobTests.buildJobBuilder(\"foo\").build(),\n+                JobTests.buildJobBuilder(\"bar\").build()\n+        ));\n+\n+        createExpiredModelSnapshotsRemover().remove(listener, () -> false);\n+\n+        listener.waitToCompletion();\n+        assertThat(listener.success, is(true));\n+        verify(client).execute(eq(SearchAction.INSTANCE), any(), any());\n+    }\n \n-        givenClientRequestsSucceed(responses);\n+    public void testRemove_GivenJobWithoutActiveSnapshot() throws IOException {\n+        givenClientRequestsSucceed(Collections.singletonList(JobTests.buildJobBuilder(\"foo\").setModelSnapshotRetentionDays(7L).build()));\n \n         createExpiredModelSnapshotsRemover().remove(listener, () -> false);\n \n         listener.waitToCompletion();\n         assertThat(listener.success, is(true));\n-        verify(client, times(2)).execute(eq(SearchAction.INSTANCE), any(), any());\n+        verify(client).execute(eq(SearchAction.INSTANCE), any(), any());\n     }\n \n     public void testRemove_GivenJobsWithMixedRetentionPolicies() throws IOException {\n-        List<SearchResponse> searchResponses = new ArrayList<>();\n-        searchResponses.add(\n-                AbstractExpiredJobDataRemoverTests.createSearchResponse(Arrays.asList(\n-                        JobTests.buildJobBuilder(\"job-1\").setModelSnapshotRetentionDays(7L).setModelSnapshotId(\"active\").build(),\n-                        JobTests.buildJobBuilder(\"job-2\").setModelSnapshotRetentionDays(17L).setModelSnapshotId(\"active\").build()\n-        )));\n-\n-        Date oneDayAgo = new Date(new Date().getTime() - TimeValue.timeValueDays(1).getMillis());\n-        ModelSnapshot snapshot1_1 = createModelSnapshot(\"job-1\", \"fresh-snapshot\", oneDayAgo);\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(Collections.singletonList(snapshot1_1)));\n-\n-        Date eightDaysAgo = new Date(new Date().getTime() - TimeValue.timeValueDays(8).getMillis());\n-        ModelSnapshot snapshotToBeDeleted = createModelSnapshot(\"job-1\", \"old-snapshot\", eightDaysAgo);\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(Collections.singletonList(snapshotToBeDeleted)));\n-\n-        ModelSnapshot snapshot2_1 = createModelSnapshot(\"job-1\", \"snapshots-1_1\", eightDaysAgo);\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(Collections.singletonList(snapshot2_1)));\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(Collections.emptyList()));\n-\n-        givenClientRequestsSucceed(searchResponses);\n+        givenClientRequestsSucceed(\n+                Arrays.asList(\n+                JobTests.buildJobBuilder(\"none\").build(),\n+                JobTests.buildJobBuilder(\"snapshots-1\").setModelSnapshotRetentionDays(7L).setModelSnapshotId(\"active\").build(),\n+                JobTests.buildJobBuilder(\"snapshots-2\").setModelSnapshotRetentionDays(17L).setModelSnapshotId(\"active\").build()\n+        ));\n+\n+        List<ModelSnapshot> snapshots1JobSnapshots = Arrays.asList(createModelSnapshot(\"snapshots-1\", \"snapshots-1_1\"),\n+                createModelSnapshot(\"snapshots-1\", \"snapshots-1_2\"));\n+        List<ModelSnapshot> snapshots2JobSnapshots = Collections.singletonList(createModelSnapshot(\"snapshots-2\", \"snapshots-2_1\"));\n+        searchResponsesPerCall.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(snapshots1JobSnapshots));\n+        searchResponsesPerCall.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(snapshots2JobSnapshots));\n+\n         createExpiredModelSnapshotsRemover().remove(listener, () -> false);\n \n         listener.waitToCompletion();\n         assertThat(listener.success, is(true));\n \n-        assertThat(capturedSearchRequests.size(), equalTo(5));\n-        SearchRequest searchRequest = capturedSearchRequests.get(1);\n-        assertThat(searchRequest.indices(), equalTo(new String[] {AnomalyDetectorsIndex.jobResultsAliasedName(\"job-1\")}));\n-        searchRequest = capturedSearchRequests.get(3);\n-        assertThat(searchRequest.indices(), equalTo(new String[] {AnomalyDetectorsIndex.jobResultsAliasedName(\"job-2\")}));\n+        assertThat(capturedSearchRequests.size(), equalTo(2));\n+        SearchRequest searchRequest = capturedSearchRequests.get(0);\n+        assertThat(searchRequest.indices(), equalTo(new String[] {AnomalyDetectorsIndex.jobResultsAliasedName(\"snapshots-1\")}));\n+        searchRequest = capturedSearchRequests.get(1);\n+        assertThat(searchRequest.indices(), equalTo(new String[] {AnomalyDetectorsIndex.jobResultsAliasedName(\"snapshots-2\")}));\n \n-        assertThat(capturedDeleteModelSnapshotRequests.size(), equalTo(1));\n+        assertThat(capturedDeleteModelSnapshotRequests.size(), equalTo(3));\n         DeleteModelSnapshotAction.Request deleteSnapshotRequest = capturedDeleteModelSnapshotRequests.get(0);\n-        assertThat(deleteSnapshotRequest.getJobId(), equalTo(\"job-1\"));\n-        assertThat(deleteSnapshotRequest.getSnapshotId(), equalTo(\"old-snapshot\"));\n+        assertThat(deleteSnapshotRequest.getJobId(), equalTo(\"snapshots-1\"));\n+        assertThat(deleteSnapshotRequest.getSnapshotId(), equalTo(\"snapshots-1_1\"));\n+        deleteSnapshotRequest = capturedDeleteModelSnapshotRequests.get(1);\n+        assertThat(deleteSnapshotRequest.getJobId(), equalTo(\"snapshots-1\"));\n+        assertThat(deleteSnapshotRequest.getSnapshotId(), equalTo(\"snapshots-1_2\"));\n+        deleteSnapshotRequest = capturedDeleteModelSnapshotRequests.get(2);\n+        assertThat(deleteSnapshotRequest.getJobId(), equalTo(\"snapshots-2\"));\n+        assertThat(deleteSnapshotRequest.getSnapshotId(), equalTo(\"snapshots-2_1\"));\n     }\n \n     public void testRemove_GivenTimeout() throws IOException {\n-        List<SearchResponse> searchResponses = new ArrayList<>();\n-        searchResponses.add(\n-                AbstractExpiredJobDataRemoverTests.createSearchResponse(Arrays.asList(\n+        givenClientRequestsSucceed(\n+                Arrays.asList(\n             JobTests.buildJobBuilder(\"snapshots-1\").setModelSnapshotRetentionDays(7L).setModelSnapshotId(\"active\").build(),\n             JobTests.buildJobBuilder(\"snapshots-2\").setModelSnapshotRetentionDays(17L).setModelSnapshotId(\"active\").build()\n-        )));\n+        ));\n \n         List<ModelSnapshot> snapshots1JobSnapshots = Arrays.asList(createModelSnapshot(\"snapshots-1\", \"snapshots-1_1\"),\n             createModelSnapshot(\"snapshots-1\", \"snapshots-1_2\"));\n         List<ModelSnapshot> snapshots2JobSnapshots = Collections.singletonList(createModelSnapshot(\"snapshots-2\", \"snapshots-2_1\"));\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(snapshots1JobSnapshots));\n-        searchResponses.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(snapshots2JobSnapshots));\n-\n-        givenClientRequestsSucceed(searchResponses);\n+        searchResponsesPerCall.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(snapshots1JobSnapshots));\n+        searchResponsesPerCall.add(AbstractExpiredJobDataRemoverTests.createSearchResponse(snapshots2JobSnapshots));\n \n         final int timeoutAfter = randomIntBetween(0, 1);\n         AtomicInteger attemptsLeft = new AtomicInteger(timeoutAfter);\n"}}, {"oid": "d1fc8f8a00cfc4d82758c4bc2be61ef68c3013e3", "url": "https://github.com/elastic/elasticsearch/commit/d1fc8f8a00cfc4d82758c4bc2be61ef68c3013e3", "message": "Rework docs", "committedDate": "2020-01-16T10:34:56Z", "type": "forcePushed"}, {"oid": "7c0161a4c02000bed885294a723b6779bbb849ed", "url": "https://github.com/elastic/elasticsearch/commit/7c0161a4c02000bed885294a723b6779bbb849ed", "message": "Calculate the results retention period based on the latest bucket time", "committedDate": "2020-01-16T13:47:59Z", "type": "commit"}, {"oid": "7ca8db9d6610516ed415718d7db0c02be1841401", "url": "https://github.com/elastic/elasticsearch/commit/7ca8db9d6610516ed415718d7db0c02be1841401", "message": "Define retention period in docs", "committedDate": "2020-01-16T13:47:59Z", "type": "commit"}, {"oid": "f620d6b1071b18c37af33f72b87beecd532b048b", "url": "https://github.com/elastic/elasticsearch/commit/f620d6b1071b18c37af33f72b87beecd532b048b", "message": "Start expired snapshots", "committedDate": "2020-01-16T13:47:59Z", "type": "commit"}, {"oid": "6c56dda250b1f3cdf59da1c3e2ed19dc1dfde66d", "url": "https://github.com/elastic/elasticsearch/commit/6c56dda250b1f3cdf59da1c3e2ed19dc1dfde66d", "message": "Adapt for origin setting client", "committedDate": "2020-01-16T13:47:59Z", "type": "commit"}, {"oid": "11fa81bd8467c8b6c086c763d6af69bb95778f17", "url": "https://github.com/elastic/elasticsearch/commit/11fa81bd8467c8b6c086c763d6af69bb95778f17", "message": "Fix the tests", "committedDate": "2020-01-16T13:47:59Z", "type": "commit"}, {"oid": "aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "url": "https://github.com/elastic/elasticsearch/commit/aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "message": "Rework docs", "committedDate": "2020-01-16T13:47:59Z", "type": "commit"}, {"oid": "aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "url": "https://github.com/elastic/elasticsearch/commit/aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "message": "Rework docs", "committedDate": "2020-01-16T13:47:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MzMxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368563311", "bodyText": "typo: lastest -> latest", "author": "droberts195", "createdAt": "2020-01-20T14:03:34Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java", "diffHunk": "@@ -57,15 +57,15 @@ public void setUpData() throws IOException {\n                 .setMapping(\"time\", \"type=date,format=epoch_millis\")\n                 .get();\n \n-        // We are going to create data for last 2 days\n-        long nowMillis = System.currentTimeMillis();\n+        // We are going to create 2 days of data starting 24 hrs ago\n+        long lastestBucketTime = System.currentTimeMillis() - TimeValue.timeValueHours(1).millis();", "originalCommit": "aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "498f5b0adea88ab5e7d8e50d45147946a0f8f69c", "chunk": "diff --git a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\nindex 68410d50947..08d139c27c2 100644\n--- a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\n+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\n\n@@ -57,15 +57,15 @@ public class DeleteExpiredDataIT extends MlNativeAutodetectIntegTestCase {\n                 .setMapping(\"time\", \"type=date,format=epoch_millis\")\n                 .get();\n \n-        // We are going to create 2 days of data starting 24 hrs ago\n-        long lastestBucketTime = System.currentTimeMillis() - TimeValue.timeValueHours(1).millis();\n+        // We are going to create 3 days of data starting 1 hr ago\n+        long latestBucketTime = System.currentTimeMillis() - TimeValue.timeValueHours(1).millis();\n         int totalBuckets = 3 * 24;\n         int normalRate = 10;\n         int anomalousRate = 100;\n         int anomalousBucket = 30;\n         BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();\n         for (int bucket = 0; bucket < totalBuckets; bucket++) {\n-            long timestamp = lastestBucketTime - TimeValue.timeValueHours(totalBuckets - bucket).getMillis();\n+            long timestamp = latestBucketTime - TimeValue.timeValueHours(totalBuckets - bucket).getMillis();\n             int bucketRate = bucket == anomalousBucket ? anomalousRate : normalRate;\n             for (int point = 0; point < bucketRate; point++) {\n                 IndexRequest indexRequest = new IndexRequest(DATA_INDEX);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2NTg3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368565872", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // We are going to create 2 days of data starting 24 hrs ago\n          \n          \n            \n                    // We are going to create 3 days of data ending 1 hour ago", "author": "droberts195", "createdAt": "2020-01-20T14:09:08Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java", "diffHunk": "@@ -57,15 +57,15 @@ public void setUpData() throws IOException {\n                 .setMapping(\"time\", \"type=date,format=epoch_millis\")\n                 .get();\n \n-        // We are going to create data for last 2 days\n-        long nowMillis = System.currentTimeMillis();\n+        // We are going to create 2 days of data starting 24 hrs ago", "originalCommit": "aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "498f5b0adea88ab5e7d8e50d45147946a0f8f69c", "chunk": "diff --git a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\nindex 68410d50947..08d139c27c2 100644\n--- a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\n+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\n\n@@ -57,15 +57,15 @@ public class DeleteExpiredDataIT extends MlNativeAutodetectIntegTestCase {\n                 .setMapping(\"time\", \"type=date,format=epoch_millis\")\n                 .get();\n \n-        // We are going to create 2 days of data starting 24 hrs ago\n-        long lastestBucketTime = System.currentTimeMillis() - TimeValue.timeValueHours(1).millis();\n+        // We are going to create 3 days of data starting 1 hr ago\n+        long latestBucketTime = System.currentTimeMillis() - TimeValue.timeValueHours(1).millis();\n         int totalBuckets = 3 * 24;\n         int normalRate = 10;\n         int anomalousRate = 100;\n         int anomalousBucket = 30;\n         BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();\n         for (int bucket = 0; bucket < totalBuckets; bucket++) {\n-            long timestamp = lastestBucketTime - TimeValue.timeValueHours(totalBuckets - bucket).getMillis();\n+            long timestamp = latestBucketTime - TimeValue.timeValueHours(totalBuckets - bucket).getMillis();\n             int bucketRate = bucket == anomalousBucket ? anomalousRate : normalRate;\n             for (int point = 0; point < bucketRate; point++) {\n                 IndexRequest indexRequest = new IndexRequest(DATA_INDEX);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3MDA5NA==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368570094", "bodyText": "Could this method be abstract instead of providing a default based on wall clock time?  It seems that now we've made deletion of model snapshots and results relative to latest bucket time rather than wall clock time we should do that for all job related documents that have a timestamp.  So having a default implementation of this method that uses wall clock time just seems like a way that we'll introduce a bug by accidentally deleting some other type of document based on wall clock time.", "author": "droberts195", "createdAt": "2020-01-20T14:17:54Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java", "diffHunk": "@@ -68,19 +68,29 @@ private void removeData(WrappedBatchedJobsIterator jobIterator, ActionListener<B\n             removeData(jobIterator, listener, isTimedOutSupplier);\n             return;\n         }\n-        long cutoffEpochMs = calcCutoffEpochMs(retentionDays);\n-        removeDataBefore(job, cutoffEpochMs,\n-            ActionListener.wrap(response -> removeData(jobIterator, listener, isTimedOutSupplier), listener::onFailure));\n+\n+        calcCutoffEpochMs(job.getId(), retentionDays, ActionListener.wrap(\n+                cutoffEpochMs -> {\n+                    if (cutoffEpochMs == null) {\n+                        removeData(jobIterator, listener, isTimedOutSupplier);\n+                    } else {\n+                        removeDataBefore(job, cutoffEpochMs, ActionListener.wrap(\n+                                response -> removeData(jobIterator, listener, isTimedOutSupplier),\n+                                listener::onFailure));\n+                    }\n+                },\n+                listener::onFailure\n+        ));\n     }\n \n     private WrappedBatchedJobsIterator newJobIterator() {\n         BatchedJobsIterator jobsIterator = new BatchedJobsIterator(client, AnomalyDetectorsIndex.configIndexName());\n         return new WrappedBatchedJobsIterator(jobsIterator);\n     }\n \n-    private long calcCutoffEpochMs(long retentionDays) {\n+    void calcCutoffEpochMs(String jobId, long retentionDays, ActionListener<Long> listener) {\n         long nowEpochMs = Instant.now(Clock.systemDefaultZone()).toEpochMilli();\n-        return nowEpochMs - new TimeValue(retentionDays, TimeUnit.DAYS).getMillis();\n+        listener.onResponse(nowEpochMs - new TimeValue(retentionDays, TimeUnit.DAYS).getMillis());\n     }", "originalCommit": "aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "498f5b0adea88ab5e7d8e50d45147946a0f8f69c", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\nindex dbe7cf27f9a..c0535d32e8f 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\n\n@@ -88,10 +84,8 @@ abstract class AbstractExpiredJobDataRemover implements MlDataRemover {\n         return new WrappedBatchedJobsIterator(jobsIterator);\n     }\n \n-    void calcCutoffEpochMs(String jobId, long retentionDays, ActionListener<Long> listener) {\n-        long nowEpochMs = Instant.now(Clock.systemDefaultZone()).toEpochMilli();\n-        listener.onResponse(nowEpochMs - new TimeValue(retentionDays, TimeUnit.DAYS).getMillis());\n-    }\n+    // package-private for testing\n+    abstract void calcCutoffEpochMs(String jobId, long retentionDays, ActionListener<Long> listener);\n \n     protected abstract Long getRetentionDays(Job job);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3ODY5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368578692", "bodyText": "Looks like this is indented more than the line above.", "author": "droberts195", "createdAt": "2020-01-20T14:35:04Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemoverTests.java", "diffHunk": "@@ -82,10 +82,10 @@ static SearchResponse createSearchResponse(List<? extends ToXContent> toXContent\n     static void givenJobs(Client client, List<Job> jobs) throws IOException {\n         SearchResponse response = AbstractExpiredJobDataRemoverTests.createSearchResponse(jobs);\n \n-        doAnswer(invocationOnMock -> {\n-            ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[2];\n-            listener.onResponse(response);\n-            return null;\n+            doAnswer(invocationOnMock -> {", "originalCommit": "aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "498f5b0adea88ab5e7d8e50d45147946a0f8f69c", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemoverTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemoverTests.java\nindex 2d115d4fba2..2d7f3d1b324 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemoverTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemoverTests.java\n\n@@ -82,10 +90,10 @@ public class AbstractExpiredJobDataRemoverTests extends ESTestCase {\n     static void givenJobs(Client client, List<Job> jobs) throws IOException {\n         SearchResponse response = AbstractExpiredJobDataRemoverTests.createSearchResponse(jobs);\n \n-            doAnswer(invocationOnMock -> {\n-                ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[2];\n-                listener.onResponse(response);\n-                return null;\n+        doAnswer(invocationOnMock -> {\n+            ActionListener<SearchResponse> listener = (ActionListener<SearchResponse>) invocationOnMock.getArguments()[2];\n+            listener.onResponse(response);\n+            return null;\n         }).when(client).execute(eq(SearchAction.INSTANCE), any(), any());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTQzMA==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368585430", "bodyText": "The other methods that extending classes are expected to override are protected, even though the actual classes that do extend this class are all in the same package.  But then this class's constructor is package private so it would be impossible to have a derived class in another package despite the abstract methods being set up for that.  I think for consistency they should all be the same - either protected or package private.  Certainly with a default implementation here I think protected makes it clearer that we expect derived classes to modify it rather than it's just been made accessible for testing.  But then if you agree with my other suggestion and make this abstract then that also makes that clear.", "author": "droberts195", "createdAt": "2020-01-20T14:48:14Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java", "diffHunk": "@@ -68,19 +68,29 @@ private void removeData(WrappedBatchedJobsIterator jobIterator, ActionListener<B\n             removeData(jobIterator, listener, isTimedOutSupplier);\n             return;\n         }\n-        long cutoffEpochMs = calcCutoffEpochMs(retentionDays);\n-        removeDataBefore(job, cutoffEpochMs,\n-            ActionListener.wrap(response -> removeData(jobIterator, listener, isTimedOutSupplier), listener::onFailure));\n+\n+        calcCutoffEpochMs(job.getId(), retentionDays, ActionListener.wrap(\n+                cutoffEpochMs -> {\n+                    if (cutoffEpochMs == null) {\n+                        removeData(jobIterator, listener, isTimedOutSupplier);\n+                    } else {\n+                        removeDataBefore(job, cutoffEpochMs, ActionListener.wrap(\n+                                response -> removeData(jobIterator, listener, isTimedOutSupplier),\n+                                listener::onFailure));\n+                    }\n+                },\n+                listener::onFailure\n+        ));\n     }\n \n     private WrappedBatchedJobsIterator newJobIterator() {\n         BatchedJobsIterator jobsIterator = new BatchedJobsIterator(client, AnomalyDetectorsIndex.configIndexName());\n         return new WrappedBatchedJobsIterator(jobsIterator);\n     }\n \n-    private long calcCutoffEpochMs(long retentionDays) {\n+    void calcCutoffEpochMs(String jobId, long retentionDays, ActionListener<Long> listener) {", "originalCommit": "aee2d136a65b62dbd462fe4e57e12c0194d02f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzODUxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368638515", "bodyText": "The method is package-private for testing otherwise it is very difficult to test and can only be done indirectly. abstract makes sense.", "author": "davidkyle", "createdAt": "2020-01-20T16:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0NTY3MA==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368645670", "bodyText": "But protected would also allow it to be tested directly.  Basically I think all the abstract methods and the constructor should have the same accessibility, whether that be protected or package private.  So either change the ones that are currently protected to be package private or change this one plus the constructor to be protected.", "author": "droberts195", "createdAt": "2020-01-20T16:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2MzYyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368663625", "bodyText": "Given that the base class is package private, only classes in the same package can implement the abstract method whether the method is protected or package private. The only difference is I could derive a new class from one of the package's public non-abstract classes and reimplement calcCutoffEpochMs in a different package if it was protected but not if package private. In practice this isn't a concern so I've gone for the principle of least visibility and made the abstract methods package private.", "author": "davidkyle", "createdAt": "2020-01-20T17:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "498f5b0adea88ab5e7d8e50d45147946a0f8f69c", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\nindex dbe7cf27f9a..c0535d32e8f 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\n\n@@ -88,10 +84,8 @@ abstract class AbstractExpiredJobDataRemover implements MlDataRemover {\n         return new WrappedBatchedJobsIterator(jobsIterator);\n     }\n \n-    void calcCutoffEpochMs(String jobId, long retentionDays, ActionListener<Long> listener) {\n-        long nowEpochMs = Instant.now(Clock.systemDefaultZone()).toEpochMilli();\n-        listener.onResponse(nowEpochMs - new TimeValue(retentionDays, TimeUnit.DAYS).getMillis());\n-    }\n+    // package-private for testing\n+    abstract void calcCutoffEpochMs(String jobId, long retentionDays, ActionListener<Long> listener);\n \n     protected abstract Long getRetentionDays(Job job);\n \n"}}, {"oid": "498f5b0adea88ab5e7d8e50d45147946a0f8f69c", "url": "https://github.com/elastic/elasticsearch/commit/498f5b0adea88ab5e7d8e50d45147946a0f8f69c", "message": "Address review comments", "committedDate": "2020-01-20T17:00:59Z", "type": "commit"}, {"oid": "580c51765c28ea3d23112ea6e044f505f9ad68ea", "url": "https://github.com/elastic/elasticsearch/commit/580c51765c28ea3d23112ea6e044f505f9ad68ea", "message": "Make package-private", "committedDate": "2020-01-20T17:24:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2NTQ3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368665476", "bodyText": "The next two methods (removeDataBefore and createQuery) might as well be package private too for consistency with the other abstract methods.", "author": "droberts195", "createdAt": "2020-01-20T17:39:08Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java", "diffHunk": "@@ -68,22 +64,29 @@ private void removeData(WrappedBatchedJobsIterator jobIterator, ActionListener<B\n             removeData(jobIterator, listener, isTimedOutSupplier);\n             return;\n         }\n-        long cutoffEpochMs = calcCutoffEpochMs(retentionDays);\n-        removeDataBefore(job, cutoffEpochMs,\n-            ActionListener.wrap(response -> removeData(jobIterator, listener, isTimedOutSupplier), listener::onFailure));\n+\n+        calcCutoffEpochMs(job.getId(), retentionDays, ActionListener.wrap(\n+                cutoffEpochMs -> {\n+                    if (cutoffEpochMs == null) {\n+                        removeData(jobIterator, listener, isTimedOutSupplier);\n+                    } else {\n+                        removeDataBefore(job, cutoffEpochMs, ActionListener.wrap(\n+                                response -> removeData(jobIterator, listener, isTimedOutSupplier),\n+                                listener::onFailure));\n+                    }\n+                },\n+                listener::onFailure\n+        ));\n     }\n \n     private WrappedBatchedJobsIterator newJobIterator() {\n         BatchedJobsIterator jobsIterator = new BatchedJobsIterator(client, AnomalyDetectorsIndex.configIndexName());\n         return new WrappedBatchedJobsIterator(jobsIterator);\n     }\n \n-    private long calcCutoffEpochMs(long retentionDays) {\n-        long nowEpochMs = Instant.now(Clock.systemDefaultZone()).toEpochMilli();\n-        return nowEpochMs - new TimeValue(retentionDays, TimeUnit.DAYS).getMillis();\n-    }\n+    abstract void calcCutoffEpochMs(String jobId, long retentionDays, ActionListener<Long> listener);\n \n-    protected abstract Long getRetentionDays(Job job);\n+    abstract Long getRetentionDays(Job job);\n \n     /**\n      * Template method to allow implementation details of various types of data (e.g. results, model snapshots).", "originalCommit": "580c51765c28ea3d23112ea6e044f505f9ad68ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7724b9e6a57bf6a4f499ae75e197ba11b5fef60", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\nindex e0fd4f224cc..439db5c21a9 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java\n\n@@ -92,9 +92,9 @@ abstract class AbstractExpiredJobDataRemover implements MlDataRemover {\n      * Template method to allow implementation details of various types of data (e.g. results, model snapshots).\n      * Implementors need to call {@code listener.onResponse} when they are done in order to continue to the next job.\n      */\n-    protected abstract void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener);\n+    abstract void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener);\n \n-    protected static BoolQueryBuilder createQuery(String jobId, long cutoffEpochMs) {\n+    static BoolQueryBuilder createQuery(String jobId, long cutoffEpochMs) {\n         return QueryBuilders.boolQuery()\n                 .filter(QueryBuilders.termQuery(Job.ID.getPreferredName(), jobId))\n                 .filter(QueryBuilders.rangeQuery(Result.TIMESTAMP.getPreferredName()).lt(cutoffEpochMs).format(\"epoch_millis\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2NjM5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51061#discussion_r368666391", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // We are going to create 3 days of data starting 1 hr ago\n          \n          \n            \n                    // We are going to create 3 days of data ending 1 hr ago", "author": "droberts195", "createdAt": "2020-01-20T17:41:49Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java", "diffHunk": "@@ -57,15 +57,15 @@ public void setUpData() throws IOException {\n                 .setMapping(\"time\", \"type=date,format=epoch_millis\")\n                 .get();\n \n-        // We are going to create data for last 2 days\n-        long nowMillis = System.currentTimeMillis();\n+        // We are going to create 3 days of data starting 1 hr ago", "originalCommit": "580c51765c28ea3d23112ea6e044f505f9ad68ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7724b9e6a57bf6a4f499ae75e197ba11b5fef60", "chunk": "diff --git a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\nindex 08d139c27c2..c420567754b 100644\n--- a/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\n+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/DeleteExpiredDataIT.java\n\n@@ -52,12 +50,12 @@ public class DeleteExpiredDataIT extends MlNativeAutodetectIntegTestCase {\n     private static final String DATA_INDEX = \"delete-expired-data-test-data\";\n \n     @Before\n-    public void setUpData() throws IOException {\n+    public void setUpData()  {\n         client().admin().indices().prepareCreate(DATA_INDEX)\n                 .setMapping(\"time\", \"type=date,format=epoch_millis\")\n                 .get();\n \n-        // We are going to create 3 days of data starting 1 hr ago\n+        // We are going to create 3 days of data ending 1 hr ago\n         long latestBucketTime = System.currentTimeMillis() - TimeValue.timeValueHours(1).millis();\n         int totalBuckets = 3 * 24;\n         int normalRate = 10;\n"}}, {"oid": "e7724b9e6a57bf6a4f499ae75e197ba11b5fef60", "url": "https://github.com/elastic/elasticsearch/commit/e7724b9e6a57bf6a4f499ae75e197ba11b5fef60", "message": "nits", "committedDate": "2020-01-20T17:50:34Z", "type": "commit"}, {"oid": "e5026ee0babea5c6291a5f6c7781942272b2ddb6", "url": "https://github.com/elastic/elasticsearch/commit/e5026ee0babea5c6291a5f6c7781942272b2ddb6", "message": "Update docs/reference/ml/ml-shared.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2020-01-20T18:05:02Z", "type": "commit"}, {"oid": "8bd4f993144a97a513938a81fd4cedaa2acc9e77", "url": "https://github.com/elastic/elasticsearch/commit/8bd4f993144a97a513938a81fd4cedaa2acc9e77", "message": "Add \u2018in days\u2019", "committedDate": "2020-01-20T18:08:39Z", "type": "commit"}, {"oid": "542869a73322a5d1c98c7101344d27c85ab71efe", "url": "https://github.com/elastic/elasticsearch/commit/542869a73322a5d1c98c7101344d27c85ab71efe", "message": "Apply docs suggestions from code review\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2020-01-21T09:57:21Z", "type": "commit"}, {"oid": "c553a425e51801ed2707f8fcd3acf34cc75d940a", "url": "https://github.com/elastic/elasticsearch/commit/c553a425e51801ed2707f8fcd3acf34cc75d940a", "message": "Update docs/reference/ml/ml-shared.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2020-01-21T09:57:57Z", "type": "commit"}, {"oid": "7569a2addfaf7506258dc5ba169d4165a6b821bd", "url": "https://github.com/elastic/elasticsearch/commit/7569a2addfaf7506258dc5ba169d4165a6b821bd", "message": "Remove duplicated line", "committedDate": "2020-01-21T10:03:52Z", "type": "commit"}]}