{"pr_number": 55182, "pr_title": "EQL: Add match function implementation", "pr_createdAt": "2020-04-14T21:46:59Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55182", "timeline": [{"oid": "6f898a8829ab4a77fd98d22793b1bb63af2e2f5f", "url": "https://github.com/elastic/elasticsearch/commit/6f898a8829ab4a77fd98d22793b1bb63af2e2f5f", "message": "EQL: Add Match function", "committedDate": "2020-04-14T21:29:34Z", "type": "commit"}, {"oid": "98d6e7a0a53843074529c26b0a5dca5de87a692f", "url": "https://github.com/elastic/elasticsearch/commit/98d6e7a0a53843074529c26b0a5dca5de87a692f", "message": "EQL: Add note about character classes", "committedDate": "2020-04-14T21:43:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjAxNg==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408456016", "bodyText": "Any idea why I'm getting an error here at all?", "author": "rw-access", "createdAt": "2020-04-14T21:47:38Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java", "diffHunk": "@@ -111,8 +111,8 @@ public void testArrayFunctionsUnsupported() {\n \n     // Some functions fail with \"Unknown\" message at the parse stage\n     public void testFunctionParsingUnknown() {\n-        assertEquals(\"1:15: Unknown function [matchLite]\",\n-                error(\"process where matchLite(?'.*?net1\\\\s+localgroup\\\\s+.*?', command_line)\"));\n+        assertEquals(\"1:15: Unknown function [matchLite], did you mean any of [matchLite, match]?\",", "originalCommit": "98d6e7a0a53843074529c26b0a5dca5de87a692f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyNTA2OA==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408725068", "bodyText": "This being a test unit, it would have been easier to debug in an IDE.", "author": "astefan", "createdAt": "2020-04-15T10:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "521b3f9d1376e06c5f78a9341a4e33ad2c08d301", "chunk": "diff --git a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java\nindex 05ee8121cab..c53ba84b151 100644\n--- a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java\n+++ b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/analysis/VerifierTests.java\n\n@@ -111,8 +111,6 @@ public class VerifierTests extends ESTestCase {\n \n     // Some functions fail with \"Unknown\" message at the parse stage\n     public void testFunctionParsingUnknown() {\n-        assertEquals(\"1:15: Unknown function [matchLite], did you mean any of [matchLite, match]?\",\n-                error(\"process where matchLite(command_line, ?'.*?net1\\\\s+localgroup\\\\s+.*?')\"));\n         assertEquals(\"1:15: Unknown function [safe]\",\n                 error(\"network where safe(process_name)\"));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NzIyOA==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408457228", "bodyText": "This function is just an old alias for match that was kept for compatibility. Should we drop?", "author": "rw-access", "createdAt": "2020-04-14T21:50:12Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -37,6 +38,8 @@ public EqlFunctionRegistry() {\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n+                def(Match.class, Match::new, \"match\"),\n+                def(Match.class, Match::new, \"matchLite\"),", "originalCommit": "98d6e7a0a53843074529c26b0a5dca5de87a692f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMzgzMg==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408723832", "bodyText": "I think this is the answer for the question you asked here. The definition of def accepts more values for the third argument. Everything past the first value is an \"alias\". I would try with matchLite definition as an alias. There are plenty of examples in SqlFunctionRegistry.", "author": "astefan", "createdAt": "2020-04-15T09:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NzIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTAwMA==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408971000", "bodyText": "fixed in 521b3f9", "author": "rw-access", "createdAt": "2020-04-15T16:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NzIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "521b3f9d1376e06c5f78a9341a4e33ad2c08d301", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java\nindex ac3b6594a67..9e5dabfd778 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java\n\n@@ -38,8 +38,7 @@ public class EqlFunctionRegistry extends FunctionRegistry {\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n-                def(Match.class, Match::new, \"match\"),\n-                def(Match.class, Match::new, \"matchLite\"),\n+                def(Match.class, Match::new, \"match\", \"matchlite\"),\n                 def(StartsWith.class, StartsWith::new, \"startswith\"),\n                 def(ToString.class, ToString::new, \"string\"),\n                 def(StringContains.class, StringContains::new, \"stringcontains\"),\n"}}, {"oid": "86468b765a236c43d48feb681a31d34bf29811b9", "url": "https://github.com/elastic/elasticsearch/commit/86468b765a236c43d48feb681a31d34bf29811b9", "message": "EQL: QueryFolderFailTests.java", "committedDate": "2020-04-14T22:54:06Z", "type": "commit"}, {"oid": "8b65ff9939332953c4d313c16c52584adbeef995", "url": "https://github.com/elastic/elasticsearch/commit/8b65ff9939332953c4d313c16c52584adbeef995", "message": "EQL: Add match() fail tests", "committedDate": "2020-04-15T01:13:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMjYwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408732601", "bodyText": "No test for regexes?", "author": "astefan", "createdAt": "2020-04-15T10:13:49Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -62,53 +62,61 @@ public void testBetweenWrongTypeParams() {\n                 error(\"process where between(process_name, \\\"s\\\", \\\"e\\\", false, 2)\"));\n     }\n \n+    public void testMatchWithText() {", "originalCommit": "8b65ff9939332953c4d313c16c52584adbeef995", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDE2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r408994162", "bodyText": "added more in 44af6a6", "author": "rw-access", "createdAt": "2020-04-15T16:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMjYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "44af6a6dd84d5ff45ac0ee8b26462d88236b21b9", "chunk": "diff --git a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java\nindex abcedf9a22f..29a7cfd774c 100644\n--- a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java\n+++ b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java\n\n@@ -71,6 +71,24 @@ public class QueryFolderFailTests extends AbstractQueryFolderTestCase {\n             \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n     }\n \n+    public void testMatchWithNonString() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(process_name, parent_process_name)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: second argument of [match(process_name, parent_process_name)] \" +\n+            \"must be a constant, received [parent_process_name]\", msg);\n+    }\n+\n+    public void testMatchWithNonRegex() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(process_name, 1)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: second argument of [match(process_name, 1)] \" +\n+            \"must be [string], found value [1] type [integer]\", msg);\n+    }\n+\n     public void testLengthFunctionWithInexact() {\n         VerificationException e = expectThrows(VerificationException.class,\n                 () -> plan(\"process where length(plain_text) > 0\"));\n"}}, {"oid": "521b3f9d1376e06c5f78a9341a4e33ad2c08d301", "url": "https://github.com/elastic/elasticsearch/commit/521b3f9d1376e06c5f78a9341a4e33ad2c08d301", "message": "EQL: Add match tests and fix alias", "committedDate": "2020-04-15T16:21:38Z", "type": "commit"}, {"oid": "44af6a6dd84d5ff45ac0ee8b26462d88236b21b9", "url": "https://github.com/elastic/elasticsearch/commit/44af6a6dd84d5ff45ac0ee8b26462d88236b21b9", "message": "EQL: Add match verifier failure tests", "committedDate": "2020-04-15T16:33:48Z", "type": "commit"}, {"oid": "7bc7697fe010cbad43b3d23a48b8cb2e66ad75f7", "url": "https://github.com/elastic/elasticsearch/commit/7bc7697fe010cbad43b3d23a48b8cb2e66ad75f7", "message": "Merge remote-tracking branch 'origin/master' into eql/match-function", "committedDate": "2020-04-15T16:58:19Z", "type": "commit"}, {"oid": "3cf4707625020cc518aa79d4ecdc699cc69661af", "url": "https://github.com/elastic/elasticsearch/commit/3cf4707625020cc518aa79d4ecdc699cc69661af", "message": "EQL: Reorder query folder fail tests", "committedDate": "2020-04-22T21:18:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MjQ0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r413352442", "bodyText": "I rearranged these test methods alphabetically in hopes that it makes git conflicts less likely", "author": "rw-access", "createdAt": "2020-04-22T21:40:35Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -62,51 +62,78 @@ public void testBetweenWrongTypeParams() {\n                 error(\"process where between(process_name, \\\"s\\\", \\\"e\\\", false, 2)\"));\n     }\n \n-    public void testCIDRMatchNonIPField() {\n+    public void testCIDRMatchAgainstField() {", "originalCommit": "3cf4707625020cc518aa79d4ecdc699cc69661af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "774a3b231ae1d278e8d39ca913726272ed6b0105", "url": "https://github.com/elastic/elasticsearch/commit/774a3b231ae1d278e8d39ca913726272ed6b0105", "message": "Merge branch 'master' into eql/match-function", "committedDate": "2020-04-30T20:18:14Z", "type": "forcePushed"}, {"oid": "f1138373011db156d225ce5392dbc29e22427e95", "url": "https://github.com/elastic/elasticsearch/commit/f1138373011db156d225ce5392dbc29e22427e95", "message": "Merge branch 'master' into eql/match-function", "committedDate": "2020-04-30T20:20:05Z", "type": "commit"}, {"oid": "f1138373011db156d225ce5392dbc29e22427e95", "url": "https://github.com/elastic/elasticsearch/commit/f1138373011db156d225ce5392dbc29e22427e95", "message": "Merge branch 'master' into eql/match-function", "committedDate": "2020-04-30T20:20:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyODc4NA==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r418328784", "bodyText": "is there a test where match is passed only one argument?", "author": "aleksmaus", "createdAt": "2020-04-30T22:39:11Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -62,51 +62,78 @@ public void testBetweenWrongTypeParams() {\n                 error(\"process where between(process_name, \\\"s\\\", \\\"e\\\", false, 2)\"));\n     }\n \n-    public void testCIDRMatchNonIPField() {\n+    public void testCIDRMatchAgainstField() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(hostname, \\\"10.0.0.0/8\\\")\"));\n+            () -> plan(\"process where cidrMatch(source_address, hostname)\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: first argument of [cidrMatch(hostname, \\\"10.0.0.0/8\\\")] must be [ip], found value [hostname] type [text]\", msg);\n+            \"line 1:15: second argument of [cidrMatch(source_address, hostname)] must be a constant, received [hostname]\", msg);\n     }\n \n     public void testCIDRMatchMissingValue() {\n         ParsingException e = expectThrows(ParsingException.class,\n-                () -> plan(\"process where cidrMatch(source_address)\"));\n+            () -> plan(\"process where cidrMatch(source_address)\"));\n         String msg = e.getMessage();\n         assertEquals(\"line 1:16: error building [cidrmatch]: expects at least two arguments\", msg);\n     }\n \n-    public void testCIDRMatchAgainstField() {\n+    public void testCIDRMatchNonIPField() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(source_address, hostname)\"));\n+            () -> plan(\"process where cidrMatch(hostname, \\\"10.0.0.0/8\\\")\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: second argument of [cidrMatch(source_address, hostname)] must be a constant, received [hostname]\", msg);\n+            \"line 1:15: first argument of [cidrMatch(hostname, \\\"10.0.0.0/8\\\")] must be [ip], found value [hostname] type [text]\", msg);\n     }\n \n     public void testCIDRMatchNonString() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where cidrMatch(source_address, 12345)\"));\n+            () -> plan(\"process where cidrMatch(source_address, 12345)\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\n\" +\n-                \"line 1:15: argument of [cidrMatch(source_address, 12345)] must be [string], found value [12345] type [integer]\", msg);\n+            \"line 1:15: argument of [cidrMatch(source_address, 12345)] must be [string], found value [12345] type [integer]\", msg);\n     }\n \n     public void testEndsWithFunctionWithInexact() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where endsWith(plain_text, \\\"foo\\\") == true\"));\n+            () -> plan(\"process where endsWith(plain_text, \\\"foo\\\") == true\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\nline 1:15: [endsWith(plain_text, \\\"foo\\\")] cannot operate on first argument field of data type \"\n-                + \"[text]: No keyword/multi-field defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+            + \"[text]: No keyword/multi-field defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n     }\n \n     public void testLengthFunctionWithInexact() {\n         VerificationException e = expectThrows(VerificationException.class,\n-                () -> plan(\"process where length(plain_text) > 0\"));\n+            () -> plan(\"process where length(plain_text) > 0\"));\n         String msg = e.getMessage();\n         assertEquals(\"Found 1 problem\\nline 1:15: [length(plain_text)] cannot operate on field of data type [text]: No keyword/multi-field \"\n-                + \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+            + \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+    }\n+\n+    public void testMatchWithText() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(plain_text, 'foo.*')\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: [match(plain_text, 'foo.*')] cannot operate on first argument field of data type [text]: No keyword/multi-field \" +\n+            \"defined exact matches for [plain_text]; define one or use MATCH/QUERY instead\", msg);\n+    }\n+\n+    public void testMatchWithNonString() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(process_name, parent_process_name)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: second argument of [match(process_name, parent_process_name)] \" +\n+            \"must be a constant, received [parent_process_name]\", msg);\n+    }\n+\n+    public void testMatchWithNonRegex() {\n+        VerificationException e = expectThrows(VerificationException.class,\n+            () -> plan(\"process where match(process_name, 1)\"));\n+        String msg = e.getMessage();\n+        assertEquals(\"Found 1 problem\\n\" +\n+            \"line 1:15: second argument of [match(process_name, 1)] \" +\n+            \"must be [string], found value [1] type [integer]\", msg);", "originalCommit": "f1138373011db156d225ce5392dbc29e22427e95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTE5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r418329197", "bodyText": "what about?\nprocess where match(process_name, null)", "author": "aleksmaus", "createdAt": "2020-04-30T22:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyODc4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA5NjIzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r419096231", "bodyText": "matchLite as an alias to match?", "author": "costin", "createdAt": "2020-05-03T12:24:34Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -42,6 +43,7 @@ public EqlFunctionRegistry() {\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n+                def(Match.class, Match::new, \"match\", \"matchlite\"),", "originalCommit": "f1138373011db156d225ce5392dbc29e22427e95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjI0NA==", "url": "https://github.com/elastic/elasticsearch/pull/55182#discussion_r419522244", "bodyText": "I originally had \"matchLite\" but apparently the aliases have to also be normalized to lowercase, so it's \"matchlite\"\nboth functions have been around for a while, but matchLite was more limited than regex -- had character clasess and *, *?,  and + because of our underlying implementation.\nnow, they both have the same functionality, so the alias is just for backwards compatibility.", "author": "rw-access", "createdAt": "2020-05-04T15:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA5NjIzMQ=="}], "type": "inlineReview", "revised_code": null}]}