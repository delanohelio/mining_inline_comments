{"pr_number": 52176, "pr_title": "Add unit tests for reading JVM options files", "pr_createdAt": "2020-02-11T01:54:15Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52176", "timeline": [{"oid": "ffda7189ed11674fb82598887cea223cd11f2b99", "url": "https://github.com/elastic/elasticsearch/commit/ffda7189ed11674fb82598887cea223cd11f2b99", "message": "Add unit tests for reading JVM options files\n\nThis commit adds some unit tests to cover the reading of JVM options\nfiles.", "committedDate": "2020-02-11T01:52:42Z", "type": "commit"}, {"oid": "d48f6ae16e1fde854f160615374fb38b5c792fce", "url": "https://github.com/elastic/elasticsearch/commit/d48f6ae16e1fde854f160615374fb38b5c792fce", "message": "Formatting", "committedDate": "2020-02-11T04:36:02Z", "type": "commit"}, {"oid": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6", "url": "https://github.com/elastic/elasticsearch/commit/dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6", "message": "Ensure temp directory exists", "committedDate": "2020-02-11T12:47:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODkxNA==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377618914", "bodyText": "This is what is triggering the need for the temporary directory to exist.", "author": "jasontedor", "createdAt": "2020-02-11T13:00:53Z", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();", "originalCommit": "dbf08eb39550d3da2cbf3949c2492e09a6c0e8e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMzc1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377813752", "bodyText": "I can't seem to find any other usages of this method in any of our other tests. Perhaps it relies on some different assumptions regarding test execution environment. Our other tests seem to rely on LuceneTestCase.createTempDir() instead.\nThis project doesn't seem to use our test framework, just the \"vanilla\" randomized runner stuff.", "author": "mark-vieira", "createdAt": "2020-02-11T18:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNzYwNg==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377817606", "bodyText": "Yeah, and that ensures that the temporary directory exists: https://github.com/apache/lucene-solr/blob/9a4f7661e96416e3aac3e48f1108422ab4184473/lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup.java#L187", "author": "jasontedor", "createdAt": "2020-02-11T18:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "274a7bbf0a33799c215e812c6b2329db63f44e9a", "chunk": "diff --git a/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java b/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\nindex 0b7a4fcf5f7..00ec30dfee3 100644\n--- a/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\n+++ b/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\n\n@@ -161,7 +161,7 @@ public class JvmOptionsParserTests extends LaunchersTestCase {\n         try {\n             final JvmOptionsParser parser = new JvmOptionsParser();\n             parser.readJvmOptionsFiles(config);\n-            fail();\n+            fail(\"expected no such file exception, the root jvm.options file does not exist\");\n         } catch (final NoSuchFileException expected) {\n             // this is expected, the root JVM options file must exist\n         }\n"}}, {"oid": "214c4a6609649b0f998a770be52d00da17809b88", "url": "https://github.com/elastic/elasticsearch/commit/214c4a6609649b0f998a770be52d00da17809b88", "message": "Merge branch 'master' into read-jvm-options-files-tests", "committedDate": "2020-02-11T19:53:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377896843", "bodyText": "Should we provide a message for this assertion such as \"Expected NoSuchFileException but no exception was thrown\"?", "author": "mark-vieira", "createdAt": "2020-02-11T21:03:38Z", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "originalCommit": "214c4a6609649b0f998a770be52d00da17809b88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNTUxNg==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377935516", "bodyText": "A pattern I've sometimes used is to capture any exception thrown, then assert that it's:\n\nNot null\nHas the right class\nHas the right message\n\nUp to you if you think that's overkill, but at least if the test fails then it'll tell you exactly why.", "author": "pugnascotia", "createdAt": "2020-02-11T22:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNjk3OA==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377936978", "bodyText": "What we're doing here is effectively doing the first two items of your list. I'm so-so on testing the message in most cases. FWIW, what you describe is trivial using Spock \ud83d\ude09", "author": "mark-vieira", "createdAt": "2020-02-11T22:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDk1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377954953", "bodyText": "As @mark-vieira mentions, that's not needed here because we have an explicit catch for the expected exception type which ensures non-nullness, and also that it's the right type. Asserting on the exception message here is not needed because it's going to come from the operating system, it's not an exception message that we control.\nThere are cases where the three checks are appropriate. For example, when asserting that a listener is called back with the proper exception, asserting non-null and the type are good. The message can be a valuable assertion when we need to distinguish between two reasons that a given exception type might arise (e.g., IllegalArgumentException). It a lot of cases, asserting on an exception message is a smell, especially in production code, and in those cases I prefer that make dedicated exception types (we've done this a few times in CCR, when an exception is going to cross the wire, for example).", "author": "jasontedor", "createdAt": "2020-02-11T23:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5Njg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "274a7bbf0a33799c215e812c6b2329db63f44e9a", "chunk": "diff --git a/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java b/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\nindex 0b7a4fcf5f7..00ec30dfee3 100644\n--- a/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\n+++ b/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\n\n@@ -161,7 +161,7 @@ public class JvmOptionsParserTests extends LaunchersTestCase {\n         try {\n             final JvmOptionsParser parser = new JvmOptionsParser();\n             parser.readJvmOptionsFiles(config);\n-            fail();\n+            fail(\"expected no such file exception, the root jvm.options file does not exist\");\n         } catch (final NoSuchFileException expected) {\n             // this is expected, the root JVM options file must exist\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5ODA4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377898081", "bodyText": "Same as above, seems it would be helpful to provide a message here to avoid a generic AssertionError.", "author": "mark-vieira", "createdAt": "2020-02-11T21:06:13Z", "path": "distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java", "diffHunk": "@@ -149,6 +156,108 @@ public void testComplexOptions() throws IOException {\n         }\n     }\n \n+    public void testMissingRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();\n+        } catch (final NoSuchFileException expected) {\n+            // this is expected, the root JVM options file must exist\n+        }\n+    }\n+\n+    public void testReadRootJvmOptions() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        final Path rootJvmOptions = config.resolve(\"jvm.options\");\n+        Files.write(rootJvmOptions, List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"), StandardOpenOption.CREATE_NEW, StandardOpenOption.APPEND);\n+        if (randomBoolean()) {\n+            // an empty jvm.options.d directory should be irrelevant\n+            Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        }\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectory() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"heap.options\"),\n+            List.of(\"# comment\", \"-Xms384m\", \"-Xmx384m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\", \"-Xms384m\", \"-Xmx384m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectoryInOrder() throws IOException, JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"first.options\"),\n+            List.of(\"# comment\", \"-Xms384m\", \"-Xmx384m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"second.options\"),\n+            List.of(\"# comment\", \"-Xms512m\", \"-Xmx512m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, contains(\"-Xms256m\", \"-Xmx256m\", \"-Xms384m\", \"-Xmx384m\", \"-Xms512m\", \"-Xmx512m\"));\n+    }\n+\n+    public void testReadJvmOptionsDirectoryIgnoresFilesNotNamedOptions() throws IOException,\n+        JvmOptionsParser.JvmOptionsFileParserException {\n+        final Path config = newTempDir();\n+        Files.createFile(config.resolve(\"jvm.options\"));\n+        Files.createDirectory(config.resolve(\"jvm.options.d\"));\n+        Files.write(\n+            config.resolve(\"jvm.options.d\").resolve(\"heap.not-named-options\"),\n+            List.of(\"# comment\", \"-Xms256m\", \"-Xmx256m\"),\n+            StandardOpenOption.CREATE_NEW,\n+            StandardOpenOption.APPEND\n+        );\n+        final JvmOptionsParser parser = new JvmOptionsParser();\n+        final List<String> jvmOptions = parser.readJvmOptionsFiles(config);\n+        assertThat(jvmOptions, empty());\n+    }\n+\n+    public void testFileContainsInvalidLinesThrowsParserException() throws IOException {\n+        final Path config = newTempDir();\n+        final Path rootJvmOptions = config.resolve(\"jvm.options\");\n+        Files.write(rootJvmOptions, List.of(\"XX:+UseG1GC\"), StandardOpenOption.CREATE_NEW, StandardOpenOption.APPEND);\n+        try {\n+            final JvmOptionsParser parser = new JvmOptionsParser();\n+            parser.readJvmOptionsFiles(config);\n+            fail();", "originalCommit": "214c4a6609649b0f998a770be52d00da17809b88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "274a7bbf0a33799c215e812c6b2329db63f44e9a", "chunk": "diff --git a/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java b/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\nindex 0b7a4fcf5f7..00ec30dfee3 100644\n--- a/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\n+++ b/distribution/tools/launchers/src/test/java/org/elasticsearch/tools/launchers/JvmOptionsParserTests.java\n\n@@ -161,7 +161,7 @@ public class JvmOptionsParserTests extends LaunchersTestCase {\n         try {\n             final JvmOptionsParser parser = new JvmOptionsParser();\n             parser.readJvmOptionsFiles(config);\n-            fail();\n+            fail(\"expected no such file exception, the root jvm.options file does not exist\");\n         } catch (final NoSuchFileException expected) {\n             // this is expected, the root JVM options file must exist\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNDQxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52176#discussion_r377934419", "bodyText": "Maybe?\nfor (String opt : esJavaOpts.split(\"\\\\s+\")) {\n    if (opt.isBlank() == false) {\n        jvmOptions.add(opt);\n    }\n}", "author": "pugnascotia", "createdAt": "2020-02-11T22:20:44Z", "path": "distribution/tools/launchers/src/main/java/org/elasticsearch/tools/launchers/JvmOptionsParser.java", "diffHunk": "@@ -127,6 +127,29 @@ public static void main(final String[] args) throws InterruptedException, IOExce\n         throws InterruptedException,\n         IOException,\n         JvmOptionsFileParserException {\n+\n+        final List<String> jvmOptions = readJvmOptionsFiles(config);\n+\n+        if (esJavaOpts != null) {\n+            jvmOptions.addAll(\n+                Arrays.stream(esJavaOpts.split(\"\\\\s+\")).filter(Predicate.not(String::isBlank)).collect(Collectors.toUnmodifiableList())", "originalCommit": "214c4a6609649b0f998a770be52d00da17809b88", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "274a7bbf0a33799c215e812c6b2329db63f44e9a", "url": "https://github.com/elastic/elasticsearch/commit/274a7bbf0a33799c215e812c6b2329db63f44e9a", "message": "Add messages", "committedDate": "2020-02-11T23:15:09Z", "type": "commit"}]}