{"pr_number": 55349, "pr_title": "[ML] fixing and unmuting testHRDSplit test", "pr_createdAt": "2020-04-16T20:45:48Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55349", "timeline": [{"oid": "bda01172634d88b1eb86a2580a9349a57a7438fe", "url": "https://github.com/elastic/elasticsearch/commit/bda01172634d88b1eb86a2580a9349a57a7438fe", "message": "[ML] fixing and unmuting testHRDSplit test", "committedDate": "2020-04-16T20:47:21Z", "type": "commit"}, {"oid": "bda01172634d88b1eb86a2580a9349a57a7438fe", "url": "https://github.com/elastic/elasticsearch/commit/bda01172634d88b1eb86a2580a9349a57a7438fe", "message": "[ML] fixing and unmuting testHRDSplit test", "committedDate": "2020-04-16T20:47:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MTM5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55349#discussion_r410151392", "bodyText": "This fail dates back to when the assertBusy on line 330 was an awaitBusy.  I think the whole try/catch is redundant now.", "author": "droberts195", "createdAt": "2020-04-17T11:02:53Z", "path": "x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java", "diffHunk": "@@ -355,4 +366,16 @@ public void testHRDSplit() throws Exception {\n             fail(\"Anomaly records were not found within 5 seconds\");", "originalCommit": "bda01172634d88b1eb86a2580a9349a57a7438fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE2NDEyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55349#discussion_r410164121", "bodyText": "For sure, I will refactor the test to make it cleaner", "author": "benwtrent", "createdAt": "2020-04-17T11:32:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MTM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "35ba4fa611144f9d01d31bbb2531a1edb46ef5b7", "chunk": "diff --git a/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java b/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\nindex 17917b9d563..864bf5c3612 100644\n--- a/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\n+++ b/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\n\n@@ -314,57 +314,39 @@ public class PainlessDomainSplitIT extends ESRestTestCase {\n         startDatafeedRequest.addParameter(\"start\", baseTime.format(DateTimeFormatter.ISO_DATE_TIME));\n         startDatafeedRequest.addParameter(\"end\", ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_DATE_TIME));\n         client().performRequest(startDatafeedRequest);\n-        assertBusy(() -> {\n-            try {\n-                Response datafeedStatsResponse = client().performRequest(new Request(\"GET\",\n-                    MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_stats\"));\n-                assertThat(EntityUtils.toString(datafeedStatsResponse.getEntity()),\n-                    containsString(\"\\\"state\\\":\\\"stopped\\\"\"));\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        }, 60, TimeUnit.SECONDS);\n \n+        waitUntilDatafeedIsStopped(\"hrd-split-datafeed\");\n         waitUntilJobIsClosed(\"hrd-split-job\");\n-        try {\n-            assertBusy(() -> {\n-                client().performRequest(new Request(\"POST\", \"/_refresh\"));\n-\n-                Response response = client().performRequest(new Request(\"GET\",\n-                    MachineLearning.BASE_PATH + \"anomaly_detectors/hrd-split-job/results/records\"));\n-                String responseBody = EntityUtils.toString(response.getEntity());\n-\n-                if (responseBody.contains(\"\\\"count\\\":2\")) {\n-                    Matcher m = pattern.matcher(responseBody);\n-\n-                    String actualSubDomain = \"\";\n-                    String actualDomain = \"\";\n-                    if (m.find()) {\n-                        actualSubDomain = m.group(1).replace(\"\\\"\", \"\");\n-                        actualDomain = m.group(2).replace(\"\\\"\", \"\");\n-                    }\n-\n-                    String expectedTotal = \"[\" + test.subDomainExpected + \",\" + test.domainExpected + \"]\";\n-                    String actualTotal = \"[\" + actualSubDomain + \",\" + actualDomain + \"]\";\n-\n-                    // domainSplit() tests had subdomain, testHighestRegisteredDomainCases() do not\n-                    if (test.subDomainExpected != null) {\n-                        assertThat(\"Expected subdomain [\" + test.subDomainExpected + \"] but found [\" + actualSubDomain\n-                            + \"]. Actual \" + actualTotal + \" vs Expected \" + expectedTotal, actualSubDomain,\n-                            equalTo(test.subDomainExpected));\n-                    }\n-\n-                    assertThat(\"Expected domain [\" + test.domainExpected + \"] but found [\" + actualDomain + \"].  Actual \"\n-                        + actualTotal + \" vs Expected \" + expectedTotal, actualDomain, equalTo(test.domainExpected));\n-                } else {\n-                    logger.error(responseBody);\n-                    fail(\"Response body didn't contain [\\\"count\\\":2]\");\n-                }\n-            }, 5, TimeUnit.SECONDS);\n-        } catch (Exception e) {\n-            logger.error(e.getMessage());\n-            fail(\"Anomaly records were not found within 5 seconds\");\n+\n+        client().performRequest(new Request(\"POST\", \"/.ml-anomalies-*/_refresh\"));\n+\n+        Response records = client().performRequest(new Request(\"GET\",\n+            MachineLearning.BASE_PATH + \"anomaly_detectors/hrd-split-job/results/records\"));\n+        String responseBody = EntityUtils.toString(records.getEntity());\n+        assertThat(\"response body [\" + responseBody + \"] did not contain [\\\"count\\\":2]\",\n+            responseBody,\n+            containsString(\"\\\"count\\\":2\"));\n+\n+        Matcher m = pattern.matcher(responseBody);\n+        String actualSubDomain = \"\";\n+        String actualDomain = \"\";\n+        if (m.find()) {\n+            actualSubDomain = m.group(1).replace(\"\\\"\", \"\");\n+            actualDomain = m.group(2).replace(\"\\\"\", \"\");\n+        }\n+\n+        String expectedTotal = \"[\" + test.subDomainExpected + \",\" + test.domainExpected + \"]\";\n+        String actualTotal = \"[\" + actualSubDomain + \",\" + actualDomain + \"]\";\n+\n+        // domainSplit() tests had subdomain, testHighestRegisteredDomainCases() do not\n+        if (test.subDomainExpected != null) {\n+            assertThat(\"Expected subdomain [\" + test.subDomainExpected + \"] but found [\" + actualSubDomain\n+                + \"]. Actual \" + actualTotal + \" vs Expected \" + expectedTotal, actualSubDomain,\n+                equalTo(test.subDomainExpected));\n         }\n+\n+        assertThat(\"Expected domain [\" + test.domainExpected + \"] but found [\" + actualDomain + \"].  Actual \"\n+           + actualTotal + \" vs Expected \" + expectedTotal, actualDomain, equalTo(test.domainExpected));\n     }\n \n     private void waitUntilJobIsClosed(String jobId) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MjExMg==", "url": "https://github.com/elastic/elasticsearch/pull/55349#discussion_r410152112", "bodyText": "Now that you're waiting for the job to be closed we shouldn't need to loop here.  By the time the job is closed it should have written all results it's ever going to write.", "author": "droberts195", "createdAt": "2020-04-17T11:04:39Z", "path": "x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java", "diffHunk": "@@ -313,8 +310,22 @@ public void testHRDSplit() throws Exception {\n                 \"}\");\n \n         client().performRequest(createFeedRequest);\n-        client().performRequest(new Request(\"POST\", MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_start\"));\n+        Request startDatafeedRequest = new Request(\"POST\", MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_start\");\n+        startDatafeedRequest.addParameter(\"start\", baseTime.format(DateTimeFormatter.ISO_DATE_TIME));\n+        startDatafeedRequest.addParameter(\"end\", ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_DATE_TIME));\n+        client().performRequest(startDatafeedRequest);\n+        assertBusy(() -> {\n+            try {\n+                Response datafeedStatsResponse = client().performRequest(new Request(\"GET\",\n+                    MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_stats\"));\n+                assertThat(EntityUtils.toString(datafeedStatsResponse.getEntity()),\n+                    containsString(\"\\\"state\\\":\\\"stopped\\\"\"));\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, 60, TimeUnit.SECONDS);\n \n+        waitUntilJobIsClosed(\"hrd-split-job\");\n         try {\n             assertBusy(() -> {", "originalCommit": "bda01172634d88b1eb86a2580a9349a57a7438fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35ba4fa611144f9d01d31bbb2531a1edb46ef5b7", "chunk": "diff --git a/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java b/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\nindex 17917b9d563..864bf5c3612 100644\n--- a/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\n+++ b/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\n\n@@ -314,57 +314,39 @@ public class PainlessDomainSplitIT extends ESRestTestCase {\n         startDatafeedRequest.addParameter(\"start\", baseTime.format(DateTimeFormatter.ISO_DATE_TIME));\n         startDatafeedRequest.addParameter(\"end\", ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_DATE_TIME));\n         client().performRequest(startDatafeedRequest);\n-        assertBusy(() -> {\n-            try {\n-                Response datafeedStatsResponse = client().performRequest(new Request(\"GET\",\n-                    MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_stats\"));\n-                assertThat(EntityUtils.toString(datafeedStatsResponse.getEntity()),\n-                    containsString(\"\\\"state\\\":\\\"stopped\\\"\"));\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        }, 60, TimeUnit.SECONDS);\n \n+        waitUntilDatafeedIsStopped(\"hrd-split-datafeed\");\n         waitUntilJobIsClosed(\"hrd-split-job\");\n-        try {\n-            assertBusy(() -> {\n-                client().performRequest(new Request(\"POST\", \"/_refresh\"));\n-\n-                Response response = client().performRequest(new Request(\"GET\",\n-                    MachineLearning.BASE_PATH + \"anomaly_detectors/hrd-split-job/results/records\"));\n-                String responseBody = EntityUtils.toString(response.getEntity());\n-\n-                if (responseBody.contains(\"\\\"count\\\":2\")) {\n-                    Matcher m = pattern.matcher(responseBody);\n-\n-                    String actualSubDomain = \"\";\n-                    String actualDomain = \"\";\n-                    if (m.find()) {\n-                        actualSubDomain = m.group(1).replace(\"\\\"\", \"\");\n-                        actualDomain = m.group(2).replace(\"\\\"\", \"\");\n-                    }\n-\n-                    String expectedTotal = \"[\" + test.subDomainExpected + \",\" + test.domainExpected + \"]\";\n-                    String actualTotal = \"[\" + actualSubDomain + \",\" + actualDomain + \"]\";\n-\n-                    // domainSplit() tests had subdomain, testHighestRegisteredDomainCases() do not\n-                    if (test.subDomainExpected != null) {\n-                        assertThat(\"Expected subdomain [\" + test.subDomainExpected + \"] but found [\" + actualSubDomain\n-                            + \"]. Actual \" + actualTotal + \" vs Expected \" + expectedTotal, actualSubDomain,\n-                            equalTo(test.subDomainExpected));\n-                    }\n-\n-                    assertThat(\"Expected domain [\" + test.domainExpected + \"] but found [\" + actualDomain + \"].  Actual \"\n-                        + actualTotal + \" vs Expected \" + expectedTotal, actualDomain, equalTo(test.domainExpected));\n-                } else {\n-                    logger.error(responseBody);\n-                    fail(\"Response body didn't contain [\\\"count\\\":2]\");\n-                }\n-            }, 5, TimeUnit.SECONDS);\n-        } catch (Exception e) {\n-            logger.error(e.getMessage());\n-            fail(\"Anomaly records were not found within 5 seconds\");\n+\n+        client().performRequest(new Request(\"POST\", \"/.ml-anomalies-*/_refresh\"));\n+\n+        Response records = client().performRequest(new Request(\"GET\",\n+            MachineLearning.BASE_PATH + \"anomaly_detectors/hrd-split-job/results/records\"));\n+        String responseBody = EntityUtils.toString(records.getEntity());\n+        assertThat(\"response body [\" + responseBody + \"] did not contain [\\\"count\\\":2]\",\n+            responseBody,\n+            containsString(\"\\\"count\\\":2\"));\n+\n+        Matcher m = pattern.matcher(responseBody);\n+        String actualSubDomain = \"\";\n+        String actualDomain = \"\";\n+        if (m.find()) {\n+            actualSubDomain = m.group(1).replace(\"\\\"\", \"\");\n+            actualDomain = m.group(2).replace(\"\\\"\", \"\");\n+        }\n+\n+        String expectedTotal = \"[\" + test.subDomainExpected + \",\" + test.domainExpected + \"]\";\n+        String actualTotal = \"[\" + actualSubDomain + \",\" + actualDomain + \"]\";\n+\n+        // domainSplit() tests had subdomain, testHighestRegisteredDomainCases() do not\n+        if (test.subDomainExpected != null) {\n+            assertThat(\"Expected subdomain [\" + test.subDomainExpected + \"] but found [\" + actualSubDomain\n+                + \"]. Actual \" + actualTotal + \" vs Expected \" + expectedTotal, actualSubDomain,\n+                equalTo(test.subDomainExpected));\n         }\n+\n+        assertThat(\"Expected domain [\" + test.domainExpected + \"] but found [\" + actualDomain + \"].  Actual \"\n+           + actualTotal + \" vs Expected \" + expectedTotal, actualDomain, equalTo(test.domainExpected));\n     }\n \n     private void waitUntilJobIsClosed(String jobId) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1Mzc3MA==", "url": "https://github.com/elastic/elasticsearch/pull/55349#discussion_r410153770", "bodyText": "Now that our indices are hidden this won't be refreshing them.  The assertBusy will be masking this at the moment, but I think that should be removed and it's sometimes waiting a second unnecessarily.  We only need it to refresh .ml-anomalies-*, so might as well specify this in the refresh.", "author": "droberts195", "createdAt": "2020-04-17T11:08:35Z", "path": "x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java", "diffHunk": "@@ -313,8 +310,22 @@ public void testHRDSplit() throws Exception {\n                 \"}\");\n \n         client().performRequest(createFeedRequest);\n-        client().performRequest(new Request(\"POST\", MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_start\"));\n+        Request startDatafeedRequest = new Request(\"POST\", MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_start\");\n+        startDatafeedRequest.addParameter(\"start\", baseTime.format(DateTimeFormatter.ISO_DATE_TIME));\n+        startDatafeedRequest.addParameter(\"end\", ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_DATE_TIME));\n+        client().performRequest(startDatafeedRequest);\n+        assertBusy(() -> {\n+            try {\n+                Response datafeedStatsResponse = client().performRequest(new Request(\"GET\",\n+                    MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_stats\"));\n+                assertThat(EntityUtils.toString(datafeedStatsResponse.getEntity()),\n+                    containsString(\"\\\"state\\\":\\\"stopped\\\"\"));\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, 60, TimeUnit.SECONDS);\n \n+        waitUntilJobIsClosed(\"hrd-split-job\");\n         try {\n             assertBusy(() -> {\n                 client().performRequest(new Request(\"POST\", \"/_refresh\"));", "originalCommit": "bda01172634d88b1eb86a2580a9349a57a7438fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35ba4fa611144f9d01d31bbb2531a1edb46ef5b7", "chunk": "diff --git a/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java b/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\nindex 17917b9d563..864bf5c3612 100644\n--- a/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\n+++ b/x-pack/plugin/ml/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/ml/transforms/PainlessDomainSplitIT.java\n\n@@ -314,57 +314,39 @@ public class PainlessDomainSplitIT extends ESRestTestCase {\n         startDatafeedRequest.addParameter(\"start\", baseTime.format(DateTimeFormatter.ISO_DATE_TIME));\n         startDatafeedRequest.addParameter(\"end\", ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_DATE_TIME));\n         client().performRequest(startDatafeedRequest);\n-        assertBusy(() -> {\n-            try {\n-                Response datafeedStatsResponse = client().performRequest(new Request(\"GET\",\n-                    MachineLearning.BASE_PATH + \"datafeeds/hrd-split-datafeed/_stats\"));\n-                assertThat(EntityUtils.toString(datafeedStatsResponse.getEntity()),\n-                    containsString(\"\\\"state\\\":\\\"stopped\\\"\"));\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        }, 60, TimeUnit.SECONDS);\n \n+        waitUntilDatafeedIsStopped(\"hrd-split-datafeed\");\n         waitUntilJobIsClosed(\"hrd-split-job\");\n-        try {\n-            assertBusy(() -> {\n-                client().performRequest(new Request(\"POST\", \"/_refresh\"));\n-\n-                Response response = client().performRequest(new Request(\"GET\",\n-                    MachineLearning.BASE_PATH + \"anomaly_detectors/hrd-split-job/results/records\"));\n-                String responseBody = EntityUtils.toString(response.getEntity());\n-\n-                if (responseBody.contains(\"\\\"count\\\":2\")) {\n-                    Matcher m = pattern.matcher(responseBody);\n-\n-                    String actualSubDomain = \"\";\n-                    String actualDomain = \"\";\n-                    if (m.find()) {\n-                        actualSubDomain = m.group(1).replace(\"\\\"\", \"\");\n-                        actualDomain = m.group(2).replace(\"\\\"\", \"\");\n-                    }\n-\n-                    String expectedTotal = \"[\" + test.subDomainExpected + \",\" + test.domainExpected + \"]\";\n-                    String actualTotal = \"[\" + actualSubDomain + \",\" + actualDomain + \"]\";\n-\n-                    // domainSplit() tests had subdomain, testHighestRegisteredDomainCases() do not\n-                    if (test.subDomainExpected != null) {\n-                        assertThat(\"Expected subdomain [\" + test.subDomainExpected + \"] but found [\" + actualSubDomain\n-                            + \"]. Actual \" + actualTotal + \" vs Expected \" + expectedTotal, actualSubDomain,\n-                            equalTo(test.subDomainExpected));\n-                    }\n-\n-                    assertThat(\"Expected domain [\" + test.domainExpected + \"] but found [\" + actualDomain + \"].  Actual \"\n-                        + actualTotal + \" vs Expected \" + expectedTotal, actualDomain, equalTo(test.domainExpected));\n-                } else {\n-                    logger.error(responseBody);\n-                    fail(\"Response body didn't contain [\\\"count\\\":2]\");\n-                }\n-            }, 5, TimeUnit.SECONDS);\n-        } catch (Exception e) {\n-            logger.error(e.getMessage());\n-            fail(\"Anomaly records were not found within 5 seconds\");\n+\n+        client().performRequest(new Request(\"POST\", \"/.ml-anomalies-*/_refresh\"));\n+\n+        Response records = client().performRequest(new Request(\"GET\",\n+            MachineLearning.BASE_PATH + \"anomaly_detectors/hrd-split-job/results/records\"));\n+        String responseBody = EntityUtils.toString(records.getEntity());\n+        assertThat(\"response body [\" + responseBody + \"] did not contain [\\\"count\\\":2]\",\n+            responseBody,\n+            containsString(\"\\\"count\\\":2\"));\n+\n+        Matcher m = pattern.matcher(responseBody);\n+        String actualSubDomain = \"\";\n+        String actualDomain = \"\";\n+        if (m.find()) {\n+            actualSubDomain = m.group(1).replace(\"\\\"\", \"\");\n+            actualDomain = m.group(2).replace(\"\\\"\", \"\");\n+        }\n+\n+        String expectedTotal = \"[\" + test.subDomainExpected + \",\" + test.domainExpected + \"]\";\n+        String actualTotal = \"[\" + actualSubDomain + \",\" + actualDomain + \"]\";\n+\n+        // domainSplit() tests had subdomain, testHighestRegisteredDomainCases() do not\n+        if (test.subDomainExpected != null) {\n+            assertThat(\"Expected subdomain [\" + test.subDomainExpected + \"] but found [\" + actualSubDomain\n+                + \"]. Actual \" + actualTotal + \" vs Expected \" + expectedTotal, actualSubDomain,\n+                equalTo(test.subDomainExpected));\n         }\n+\n+        assertThat(\"Expected domain [\" + test.domainExpected + \"] but found [\" + actualDomain + \"].  Actual \"\n+           + actualTotal + \" vs Expected \" + expectedTotal, actualDomain, equalTo(test.domainExpected));\n     }\n \n     private void waitUntilJobIsClosed(String jobId) throws Exception {\n"}}, {"oid": "35ba4fa611144f9d01d31bbb2531a1edb46ef5b7", "url": "https://github.com/elastic/elasticsearch/commit/35ba4fa611144f9d01d31bbb2531a1edb46ef5b7", "message": "fixing up test", "committedDate": "2020-04-17T11:46:39Z", "type": "commit"}, {"oid": "9413842bfb58dc56f8b83931734da23f1c134d7a", "url": "https://github.com/elastic/elasticsearch/commit/9413842bfb58dc56f8b83931734da23f1c134d7a", "message": "Merge branch 'master' into feature/ml-fix-test-hrd-test", "committedDate": "2020-04-17T12:19:32Z", "type": "commit"}]}