{"pr_number": 63555, "pr_title": "Match query to respect lenient flag", "pr_createdAt": "2020-10-12T13:23:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63555", "timeline": [{"oid": "802fc6b5263c2a6880cd02c4dcc3edef737ad00b", "url": "https://github.com/elastic/elasticsearch/commit/802fc6b5263c2a6880cd02c4dcc3edef737ad00b", "message": "Match query to respect lenient flag\n\nA recent change introduced throwing exception when a match query is executed against a field that does not support text search. The query would fail anyways, only at a later stage. The problem though is that the lenient flag needs to be taken into account.", "committedDate": "2020-10-12T13:19:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NDQ0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63555#discussion_r503294442", "bodyText": "Maybe assert that this != TextSearchInfo.NONE?", "author": "romseygeek", "createdAt": "2020-10-12T13:25:43Z", "path": "server/src/main/java/org/elasticsearch/index/search/MatchQuery.java", "diffHunk": "@@ -297,13 +307,7 @@ protected final Query parseInternal(Type type, String fieldName, MatchQueryBuild\n     }\n \n     protected Analyzer getAnalyzer(MappedFieldType fieldType, boolean quoted) {\n-        // We check here that the field supports text searches and therefore has an analyzer -\n-        // if it doesn't, we can bail out early without doing any further parsing.\n         TextSearchInfo tsi = fieldType.getTextSearchInfo();", "originalCommit": "802fc6b5263c2a6880cd02c4dcc3edef737ad00b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1fdb87e55d52574e94ea3c85073078f14321a56", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java b/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java\nindex 75ce048a791..a2996248563 100644\n--- a/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java\n+++ b/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java\n\n@@ -308,6 +308,7 @@ public class MatchQuery {\n \n     protected Analyzer getAnalyzer(MappedFieldType fieldType, boolean quoted) {\n         TextSearchInfo tsi = fieldType.getTextSearchInfo();\n+        assert tsi != TextSearchInfo.NONE;\n         if (analyzer == null) {\n             return quoted ? tsi.getSearchQuoteAnalyzer() : tsi.getSearchAnalyzer();\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NDcwNw==", "url": "https://github.com/elastic/elasticsearch/pull/63555#discussion_r503294707", "bodyText": "check that this is a MatchNoDocsQuery?", "author": "romseygeek", "createdAt": "2020-10-12T13:26:11Z", "path": "server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java", "diffHunk": "@@ -297,7 +297,16 @@ public void testExactOnUnsupportedField() throws Exception {\n         query.toQuery(context); // no exception\n     }\n \n-    public void testParseFailsWithMultipleFields() throws IOException {\n+    public void testLenientFlag() throws Exception {\n+        MatchQueryBuilder query = new MatchQueryBuilder(BINARY_FIELD_NAME, \"test\");\n+        QueryShardContext context = createShardContext();\n+        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n+        assertEquals(\"Field [mapped_binary] of type [binary does not support match queries\", e.getMessage());\n+        query.lenient(true);\n+        query.toQuery(context); // no exception", "originalCommit": "802fc6b5263c2a6880cd02c4dcc3edef737ad00b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1fdb87e55d52574e94ea3c85073078f14321a56", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java b/server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java\nindex 6513994ad3d..cd72e8f048e 100644\n--- a/server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java\n\n@@ -303,7 +304,8 @@ public class MatchQueryBuilderTests extends AbstractQueryTestCase<MatchQueryBuil\n         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n         assertEquals(\"Field [mapped_binary] of type [binary does not support match queries\", e.getMessage());\n         query.lenient(true);\n-        query.toQuery(context); // no exception\n+        query.toQuery(context);\n+        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n     }\n \n     public void testParseFailsWithMultipleFields() {\n"}}, {"oid": "e1fdb87e55d52574e94ea3c85073078f14321a56", "url": "https://github.com/elastic/elasticsearch/commit/e1fdb87e55d52574e94ea3c85073078f14321a56", "message": "iter and more tests", "committedDate": "2020-10-12T14:06:59Z", "type": "commit"}]}