{"pr_number": 52020, "pr_title": "GeoShape Doc Values: Fix and document tiling semantics for shapes", "pr_createdAt": "2020-02-06T22:28:53Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52020", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5OTMwNg==", "url": "https://github.com/elastic/elasticsearch/pull/52020#discussion_r376299306", "bodyText": "We need to do a similar change for Tile2D#contains and Tile2D#relateLine", "author": "iverase", "createdAt": "2020-02-07T09:44:29Z", "path": "server/src/main/java/org/elasticsearch/common/geo/TriangleTreeReader.java", "diffHunk": "@@ -311,22 +314,23 @@ private boolean intersectsLine(int aX, int aY, int bX, int bY) {\n          * Checks if the rectangle intersects the provided triangle\n          **/\n         private GeoRelation relateTriangle(int aX, int aY, boolean ab, int bX, int bY, boolean bc, int cX, int cY, boolean ca) {\n-            // 1. query contains any triangle points\n-            if (contains(aX, aY) || contains(bX, bY) || contains(cX, cY)) {\n-                return GeoRelation.QUERY_CROSSES;\n-            }\n-\n             // compute bounding box of triangle\n             int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n             int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n             int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n             int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n \n-            // 2. check bounding boxes are disjoint\n-            if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n+\n+            // 1. check bounding boxes are disjoint, where north and east boundaries are not considered as crossing\n+            if (tMaxX <= minX || tMinX > maxX || tMinY > maxY || tMaxY <= minY) {", "originalCommit": "fff54653ef36ad69a27c8cfa85443b8bee86be8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczOTI1OA==", "url": "https://github.com/elastic/elasticsearch/pull/52020#discussion_r377739258", "bodyText": "I have deferred some of these changes as it isn't clear as to which behavior is preferred as previous expected tests are failing", "author": "talevy", "createdAt": "2020-02-11T16:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5OTMwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5OTUxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52020#discussion_r376299511", "bodyText": "+1", "author": "iverase", "createdAt": "2020-02-07T09:44:58Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridTiler.java", "diffHunk": "@@ -200,19 +226,13 @@ protected int setValuesByBruteForceScan(GeoShapeCellValues values, MultiGeoValue\n         }\n \n         protected int setValuesByRasterization(int xTile, int yTile, int zTile, GeoShapeCellValues values,\n-                                               int valuesIndex, int targetPrecision, MultiGeoValues.GeoValue geoValue,\n-                                               MultiGeoValues.BoundingBox shapeBounds) {\n+                                               int valuesIndex, int targetPrecision, MultiGeoValues.GeoValue geoValue) {\n             zTile++;\n             for (int i = 0; i < 2; i++) {\n                 for (int j = 0; j < 2; j++) {\n                     int nextX = 2 * xTile + i;\n                     int nextY = 2 * yTile + j;\n                     Rectangle rectangle = GeoTileUtils.toBoundingBox(nextX, nextY, zTile);\n-                    // TODO: this looks hacky, maybe the relate method should handle it?\n-                    if (shapeBounds.minX() == rectangle.getMaxX() ||\n-                        shapeBounds.maxY() == rectangle.getMinY()) {\n-                        continue;\n-                    }", "originalCommit": "fff54653ef36ad69a27c8cfa85443b8bee86be8c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d718d38ec125ec1f7787db4d2ba58b5a14eb709a", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridTiler.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridTiler.java\nindex 6d856901a36..53bce7db8ab 100644\n--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridTiler.java\n+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridTiler.java\n\n@@ -226,13 +231,19 @@ public interface GeoGridTiler {\n         }\n \n         protected int setValuesByRasterization(int xTile, int yTile, int zTile, GeoShapeCellValues values,\n-                                               int valuesIndex, int targetPrecision, MultiGeoValues.GeoValue geoValue) {\n+                                               int valuesIndex, int targetPrecision, MultiGeoValues.GeoValue geoValue,\n+                                               MultiGeoValues.BoundingBox shapeBounds) {\n             zTile++;\n             for (int i = 0; i < 2; i++) {\n                 for (int j = 0; j < 2; j++) {\n                     int nextX = 2 * xTile + i;\n                     int nextY = 2 * yTile + j;\n                     Rectangle rectangle = GeoTileUtils.toBoundingBox(nextX, nextY, zTile);\n+                    // TODO: this looks hacky, maybe the relate method should handle it?\n+                    if (shapeBounds.minX() == rectangle.getMaxX() ||\n+                        shapeBounds.maxY() == rectangle.getMinY()) {\n+                        continue;\n+                    }\n                     GeoRelation relation = geoValue.relate(rectangle);\n                     if (GeoRelation.QUERY_INSIDE == relation) {\n                         if (zTile == targetPrecision) {\n"}}, {"oid": "d718d38ec125ec1f7787db4d2ba58b5a14eb709a", "url": "https://github.com/elastic/elasticsearch/commit/d718d38ec125ec1f7787db4d2ba58b5a14eb709a", "message": "Fix and document tiling semantics for shapes\n\nThis commit resolves an issue in the geogrid shape tiler\n\n1. fixes geohash brute-force-tiling to be equivalent to recursive geohash\n   tiling\n2. Resolves geotile tiling so that shapes outside of the geotile bounds are\n   discarded\n3. TriangleTree#relate is changed to be a specific relation against tiles\n   such that intersections of tiles on the southern and western bounds\n   of the shape are counted", "committedDate": "2020-02-10T20:50:45Z", "type": "commit"}, {"oid": "f87ea0f0e5c39a5ca9836bbc68c836a675cbbf35", "url": "https://github.com/elastic/elasticsearch/commit/f87ea0f0e5c39a5ca9836bbc68c836a675cbbf35", "message": "more cleanup", "committedDate": "2020-02-10T20:50:45Z", "type": "commit"}, {"oid": "5842a5df32e893bc5668d5e9b5cd503100d1f8fe", "url": "https://github.com/elastic/elasticsearch/commit/5842a5df32e893bc5668d5e9b5cd503100d1f8fe", "message": "in silico", "committedDate": "2020-02-10T20:50:45Z", "type": "commit"}, {"oid": "ad89be5871c824b228111bd21df43aa638f3ec06", "url": "https://github.com/elastic/elasticsearch/commit/ad89be5871c824b228111bd21df43aa638f3ec06", "message": "fix a few more edge cases and mute tests for more debugging\n\n- Extent -> BoundingBox had a bug where 180/-180 and 90/-90 were\n  treated as infinities.\n- awaitfixed a few edge-case tests\n- added muted test for checking that tile hashes of points along a\n  tile reflect the same tiles returned by the tiler's setValues", "committedDate": "2020-02-11T16:12:00Z", "type": "commit"}, {"oid": "ad89be5871c824b228111bd21df43aa638f3ec06", "url": "https://github.com/elastic/elasticsearch/commit/ad89be5871c824b228111bd21df43aa638f3ec06", "message": "fix a few more edge cases and mute tests for more debugging\n\n- Extent -> BoundingBox had a bug where 180/-180 and 90/-90 were\n  treated as infinities.\n- awaitfixed a few edge-case tests\n- added muted test for checking that tile hashes of points along a\n  tile reflect the same tiles returned by the tiler's setValues", "committedDate": "2020-02-11T16:12:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MDEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/52020#discussion_r377740108", "bodyText": "I believe this can be improved, maybe there can be a way to wrap the shape such that all the latitudes above the map can be normalized down to the edge tile", "author": "talevy", "createdAt": "2020-02-11T16:16:13Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridTiler.java", "diffHunk": "@@ -156,10 +157,37 @@ public long encode(double x, double y, int precision) {\n             return GeoTileUtils.longEncode(x, y, precision);\n         }\n \n+        /**\n+         * Sets the values of the long[] underlying {@link GeoShapeCellValues}.\n+         *\n+         * If the shape resides between <code>GeoTileUtils.LATITUDE_MASK</code> and 90 degree latitudes, then\n+         * the shape is not accounted for since geo-tiles are only defined within those bounds.\n+         *\n+         * @param values     the bucket values\n+         * @param geoValue   the input shape\n+         * @param precision  the tile zoom-level\n+         *\n+         * @return the number of tiles set by the shape\n+         */\n         @Override\n         public int setValues(GeoShapeCellValues values, MultiGeoValues.GeoValue geoValue, int precision) {\n             MultiGeoValues.BoundingBox bounds = geoValue.boundingBox();\n             assert bounds.minX() <= bounds.maxX();\n+\n+            if (precision == 0) {\n+                values.resizeCell(1);\n+                values.add(0, GeoTileUtils.longEncodeTiles(0, 0, 0));\n+                return 1;\n+            }\n+\n+            // geo tiles are not defined at the extreme latitudes due to them\n+            // tiling the world as a square.\n+            if ((bounds.top > GeoTileUtils.LATITUDE_MASK && bounds.bottom > GeoTileUtils.LATITUDE_MASK)", "originalCommit": "ad89be5871c824b228111bd21df43aa638f3ec06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MzkzMw==", "url": "https://github.com/elastic/elasticsearch/pull/52020#discussion_r377743933", "bodyText": "Not sure what is the right answer, but if the shape is out of the grid bounds, I think returning an empty intersection is the correct answer.", "author": "iverase", "createdAt": "2020-02-11T16:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MDEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0ODU0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52020#discussion_r377748541", "bodyText": "makes sense", "author": "talevy", "createdAt": "2020-02-11T16:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MDEwOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1024396949e7c1811b91d4ea5180f24d1fd8aafd", "url": "https://github.com/elastic/elasticsearch/commit/1024396949e7c1811b91d4ea5180f24d1fd8aafd", "message": "fix checkstyle", "committedDate": "2020-02-11T16:32:55Z", "type": "commit"}, {"oid": "fa4b352b623e02a3b0d028e20eacefa3371fc1c7", "url": "https://github.com/elastic/elasticsearch/commit/fa4b352b623e02a3b0d028e20eacefa3371fc1c7", "message": "Merge remote-tracking branch 'elastic/geoshape-doc-values' into gdv-tiler-relate", "committedDate": "2020-02-11T16:57:36Z", "type": "commit"}]}