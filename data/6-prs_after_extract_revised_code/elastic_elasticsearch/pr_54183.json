{"pr_number": 54183, "pr_title": "Java8 implementations of collection initializers", "pr_createdAt": "2020-03-25T13:36:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54183", "timeline": [{"oid": "b6f29cdb22308fb3e683568a582c5f120392dad4", "url": "https://github.com/elastic/elasticsearch/commit/b6f29cdb22308fb3e683568a582c5f120392dad4", "message": "Java8 implementations of collection initializers", "committedDate": "2020-03-25T13:30:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3ODQyNg==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398278426", "bodyText": "The JDK 9 collections have specializations for empty, one, and two-element lists; I think we could have those too.", "author": "jasontedor", "createdAt": "2020-03-26T02:14:49Z", "path": "libs/core/src/main/java9/org/elasticsearch/common/collect/List.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+public class List {\n+\n+    /**\n+     * Delegates to the Java9 {@code List.of()} method.\n+     * @param entries the elements to be contained in the list\n+     * @param <T> the {@code List}'s element type\n+     * @return an unmodifiable list containing the specified elements.\n+     */\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\")\n+    public static <T> java.util.List<T> of(T... entries) {\n+        return java.util.List.of(entries);", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java9/org/elasticsearch/common/collect/List.java b/libs/core/src/main/java9/org/elasticsearch/common/collect/List.java\nindex c661daca8ff..355cfb4bf45 100644\n--- a/libs/core/src/main/java9/org/elasticsearch/common/collect/List.java\n+++ b/libs/core/src/main/java9/org/elasticsearch/common/collect/List.java\n\n@@ -19,12 +19,36 @@\n \n package org.elasticsearch.common.collect;\n \n+import java.util.Collection;\n+\n public class List {\n \n     /**\n      * Delegates to the Java9 {@code List.of()} method.\n-     * @param entries the elements to be contained in the list\n+     *\n      * @param <T> the {@code List}'s element type\n+     * @return an empty {@code List}\n+     */\n+    public static <T> java.util.List<T> of() {\n+        return java.util.List.of();\n+    }\n+\n+    /**\n+     * Delegates to the Java9 {@code List.of()} method.\n+     *\n+     * @param <T> the {@code List}'s element type\n+     * @param e1  the single element\n+     * @return a {@code List} containing the specified element\n+     */\n+    public static <T> java.util.List<T> of(T e1) {\n+        return java.util.List.of(e1);\n+    }\n+\n+    /**\n+     * Delegates to the Java9 {@code List.of()} method.\n+     *\n+     * @param entries the elements to be contained in the list\n+     * @param <T>     the {@code List}'s element type\n      * @return an unmodifiable list containing the specified elements.\n      */\n     @SafeVarargs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3ODkxNw==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398278917", "bodyText": "We probably want the Map.ofEntries method too, for both Java 8 and Java 9+.", "author": "jasontedor", "createdAt": "2020-03-26T02:16:40Z", "path": "libs/core/src/main/java9/org/elasticsearch/common/collect/Map.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+public class Map {", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3OTE3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398279171", "bodyText": "Additionally, Map.copyOf.", "author": "jasontedor", "createdAt": "2020-03-26T02:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3ODkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java9/org/elasticsearch/common/collect/Map.java b/libs/core/src/main/java9/org/elasticsearch/common/collect/Map.java\nindex 7c6d04e5086..f9badb14c2e 100644\n--- a/libs/core/src/main/java9/org/elasticsearch/common/collect/Map.java\n+++ b/libs/core/src/main/java9/org/elasticsearch/common/collect/Map.java\n\n@@ -21,6 +21,13 @@ package org.elasticsearch.common.collect;\n \n public class Map {\n \n+    /**\n+     * Delegates to the Java9 {@code Map.of()} method.\n+     */\n+    public static <K, V> java.util.Map<K, V> of() {\n+        return java.util.Map.of();\n+    }\n+\n     /**\n      * Delegates to the Java9 {@code Map.of()} method.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3OTM1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398279353", "bodyText": "I think that we will want a specialization for the empty list (List.of() -> Collections.emptyList());", "author": "jasontedor", "createdAt": "2020-03-26T02:18:12Z", "path": "libs/core/src/main/java/org/elasticsearch/common/collect/List.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+public class List {\n+\n+    /**\n+     * A Java8 implementation of the Java9 {@code List.of()} method.\n+     * @param entries the elements to be contained in the list\n+     * @param <T> the {@code List}'s element type\n+     * @return an unmodifiable list containing the specified elements.\n+     */\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\")\n+    public static <T> java.util.List<T> of(T... entries) {", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java/org/elasticsearch/common/collect/List.java b/libs/core/src/main/java/org/elasticsearch/common/collect/List.java\nindex c96d986733e..802b2df9024 100644\n--- a/libs/core/src/main/java/org/elasticsearch/common/collect/List.java\n+++ b/libs/core/src/main/java/org/elasticsearch/common/collect/List.java\n\n@@ -20,14 +20,37 @@\n package org.elasticsearch.common.collect;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n \n public class List {\n \n     /**\n-     * A Java8 implementation of the Java9 {@code List.of()} method.\n-     * @param entries the elements to be contained in the list\n+     * Returns an unmodifiable list containing zero elements.\n+     *\n+     * @param <T> the {@code List}'s element type\n+     * @return an empty {@code List}\n+     */\n+    public static <T> java.util.List<T> of() {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * Returns an unmodifiable list containing one element.\n+     *\n      * @param <T> the {@code List}'s element type\n+     * @param e1  the single element\n+     * @return a {@code List} containing the specified element\n+     */\n+    public static <T> java.util.List<T> of(T e1) {\n+        return Collections.singletonList(e1);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable list containing an arbitrary number of elements.\n+     *\n+     * @param entries the elements to be contained in the list\n+     * @param <T>     the {@code List}'s element type\n      * @return an unmodifiable list containing the specified elements.\n      */\n     @SafeVarargs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3OTM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398279383", "bodyText": "I think that we will want List.copyOf too.", "author": "jasontedor", "createdAt": "2020-03-26T02:18:20Z", "path": "libs/core/src/main/java/org/elasticsearch/common/collect/List.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+public class List {", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java/org/elasticsearch/common/collect/List.java b/libs/core/src/main/java/org/elasticsearch/common/collect/List.java\nindex c96d986733e..802b2df9024 100644\n--- a/libs/core/src/main/java/org/elasticsearch/common/collect/List.java\n+++ b/libs/core/src/main/java/org/elasticsearch/common/collect/List.java\n\n@@ -20,14 +20,37 @@\n package org.elasticsearch.common.collect;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n \n public class List {\n \n     /**\n-     * A Java8 implementation of the Java9 {@code List.of()} method.\n-     * @param entries the elements to be contained in the list\n+     * Returns an unmodifiable list containing zero elements.\n+     *\n+     * @param <T> the {@code List}'s element type\n+     * @return an empty {@code List}\n+     */\n+    public static <T> java.util.List<T> of() {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * Returns an unmodifiable list containing one element.\n+     *\n      * @param <T> the {@code List}'s element type\n+     * @param e1  the single element\n+     * @return a {@code List} containing the specified element\n+     */\n+    public static <T> java.util.List<T> of(T e1) {\n+        return Collections.singletonList(e1);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable list containing an arbitrary number of elements.\n+     *\n+     * @param entries the elements to be contained in the list\n+     * @param <T>     the {@code List}'s element type\n      * @return an unmodifiable list containing the specified elements.\n      */\n     @SafeVarargs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3OTQ2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398279465", "bodyText": "We will want Map.copyOf and Map.ofEntries too.", "author": "jasontedor", "createdAt": "2020-03-26T02:18:40Z", "path": "libs/core/src/main/java/org/elasticsearch/common/collect/Map.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+public class Map {", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java/org/elasticsearch/common/collect/Map.java b/libs/core/src/main/java/org/elasticsearch/common/collect/Map.java\nindex 0bb5597b59c..e6483969bec 100644\n--- a/libs/core/src/main/java/org/elasticsearch/common/collect/Map.java\n+++ b/libs/core/src/main/java/org/elasticsearch/common/collect/Map.java\n\n@@ -24,11 +24,18 @@ import java.util.HashMap;\n \n public class Map {\n \n+    /**\n+     * Returns an unmodifiable map containing one mapping.\n+     */\n+    public static <K, V> java.util.Map<K, V> of() {\n+        return Collections.emptyMap();\n+    }\n+\n     /**\n      * Returns an unmodifiable map containing one mapping.\n      */\n     public static <K, V> java.util.Map<K, V> of(K k1, V v1) {\n-        return mapN(k1, v1);\n+        return Collections.singletonMap(k1, v1);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3OTYxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398279611", "bodyText": "We probably want Set.copyOf.", "author": "jasontedor", "createdAt": "2020-03-26T02:19:07Z", "path": "libs/core/src/main/java/org/elasticsearch/common/collect/Set.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+\n+public class Set {", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java/org/elasticsearch/common/collect/Set.java b/libs/core/src/main/java/org/elasticsearch/common/collect/Set.java\nindex 16ba78e9138..6bb05f75cf4 100644\n--- a/libs/core/src/main/java/org/elasticsearch/common/collect/Set.java\n+++ b/libs/core/src/main/java/org/elasticsearch/common/collect/Set.java\n\n@@ -20,20 +20,64 @@\n package org.elasticsearch.common.collect;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n \n public class Set {\n \n     /**\n-     * A Java8 implementation of the Java9 {@code Set.of()} method.\n-     * @param entries the elements to be contained in the set\n+     * Returns an unmodifiable set containing zero elements.\n+     *\n+     * @param <T> the {@code Set}'s element type\n+     * @return an empty {@code Set}\n+     */\n+    public static <T> java.util.Set<T> of() {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * Returns an unmodifiable set containing one element.\n+     *\n      * @param <T> the {@code Set}'s element type\n+     * @param e1  the single element\n+     * @return a {@code Set} containing the specified element\n+     */\n+    public static <T> java.util.Set<T> of(T e1) {\n+        return Collections.singleton(e1);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable set containing an arbitrary number of elements.\n+     *\n+     * @param entries the elements to be contained in the set\n+     * @param <T>     the {@code Set}'s element type\n      * @return an unmodifiable set containing the specified elements.\n      */\n     @SafeVarargs\n     @SuppressWarnings(\"varargs\")\n     public static <T> java.util.Set<T> of(T... entries) {\n-        return Collections.unmodifiableSet(new HashSet<>(Arrays.asList(entries)));\n+        switch (entries.length) {\n+            case 0:\n+                return Set.of();\n+            case 1:\n+                return Set.of(entries[0]);\n+            default:\n+                return Collections.unmodifiableSet(new HashSet<>(Arrays.asList(entries)));\n+        }\n+    }\n+\n+    /**\n+     * Returns an unmodifiable {@code Set} containing the elements of the given Collection.\n+     *\n+     * @param <T> the {@code Set}'s element type\n+     * @param coll a {@code Collection} from which elements are drawn, must be non-null\n+     * @return a {@code Set} containing the elements of the given {@code Collection}\n+     * @throws NullPointerException if coll is null, or if it contains any nulls\n+     * @since 10\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> java.util.Set<T> copyOf(Collection<? extends T> coll) {\n+        return (java.util.Set<T>) Set.of(new HashSet<>(coll).toArray());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3OTcwMA==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398279700", "bodyText": "I think we will want a specialization for the empty set (Set.of() -> Collections.emptySet()).", "author": "jasontedor", "createdAt": "2020-03-26T02:19:27Z", "path": "libs/core/src/main/java/org/elasticsearch/common/collect/Set.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+\n+public class Set {\n+\n+    /**\n+     * A Java8 implementation of the Java9 {@code Set.of()} method.\n+     * @param entries the elements to be contained in the set\n+     * @param <T> the {@code Set}'s element type\n+     * @return an unmodifiable set containing the specified elements.\n+     */\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\")\n+    public static <T> java.util.Set<T> of(T... entries) {", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java/org/elasticsearch/common/collect/Set.java b/libs/core/src/main/java/org/elasticsearch/common/collect/Set.java\nindex 16ba78e9138..6bb05f75cf4 100644\n--- a/libs/core/src/main/java/org/elasticsearch/common/collect/Set.java\n+++ b/libs/core/src/main/java/org/elasticsearch/common/collect/Set.java\n\n@@ -20,20 +20,64 @@\n package org.elasticsearch.common.collect;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n \n public class Set {\n \n     /**\n-     * A Java8 implementation of the Java9 {@code Set.of()} method.\n-     * @param entries the elements to be contained in the set\n+     * Returns an unmodifiable set containing zero elements.\n+     *\n+     * @param <T> the {@code Set}'s element type\n+     * @return an empty {@code Set}\n+     */\n+    public static <T> java.util.Set<T> of() {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * Returns an unmodifiable set containing one element.\n+     *\n      * @param <T> the {@code Set}'s element type\n+     * @param e1  the single element\n+     * @return a {@code Set} containing the specified element\n+     */\n+    public static <T> java.util.Set<T> of(T e1) {\n+        return Collections.singleton(e1);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable set containing an arbitrary number of elements.\n+     *\n+     * @param entries the elements to be contained in the set\n+     * @param <T>     the {@code Set}'s element type\n      * @return an unmodifiable set containing the specified elements.\n      */\n     @SafeVarargs\n     @SuppressWarnings(\"varargs\")\n     public static <T> java.util.Set<T> of(T... entries) {\n-        return Collections.unmodifiableSet(new HashSet<>(Arrays.asList(entries)));\n+        switch (entries.length) {\n+            case 0:\n+                return Set.of();\n+            case 1:\n+                return Set.of(entries[0]);\n+            default:\n+                return Collections.unmodifiableSet(new HashSet<>(Arrays.asList(entries)));\n+        }\n+    }\n+\n+    /**\n+     * Returns an unmodifiable {@code Set} containing the elements of the given Collection.\n+     *\n+     * @param <T> the {@code Set}'s element type\n+     * @param coll a {@code Collection} from which elements are drawn, must be non-null\n+     * @return a {@code Set} containing the elements of the given {@code Collection}\n+     * @throws NullPointerException if coll is null, or if it contains any nulls\n+     * @since 10\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> java.util.Set<T> copyOf(Collection<? extends T> coll) {\n+        return (java.util.Set<T>) Set.of(new HashSet<>(coll).toArray());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI4MDYzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398280639", "bodyText": "I think we will want Set.copyOf.", "author": "jasontedor", "createdAt": "2020-03-26T02:22:22Z", "path": "libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+public class Set {", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java b/libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java\nindex 4ce0f687239..75312eb6583 100644\n--- a/libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java\n+++ b/libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java\n\n@@ -19,12 +19,36 @@\n \n package org.elasticsearch.common.collect;\n \n+import java.util.Collection;\n+\n public class Set {\n \n     /**\n      * Delegates to the Java9 {@code Set.of()} method.\n-     * @param entries the elements to be contained in the set\n+     *\n      * @param <T> the {@code Set}'s element type\n+     * @return an empty {@code Set}\n+     */\n+    public static <T> java.util.Set<T> of() {\n+        return java.util.Set.of();\n+    }\n+\n+    /**\n+     * Delegates to the Java9 {@code Set.of()} method.\n+     *\n+     * @param <T> the {@code Set}'s element type\n+     * @param e1  the single element\n+     * @return a {@code Set} containing the specified element\n+     */\n+    public static <T> java.util.Set<T> of(T e1) {\n+        return java.util.Set.of(e1);\n+    }\n+\n+    /**\n+     * Delegates to the Java9 {@code Set.of()} method.\n+     *\n+     * @param entries the elements to be contained in the set\n+     * @param <T>     the {@code Set}'s element type\n      * @return an unmodifiable set containing the specified elements.\n      */\n     @SafeVarargs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI4MDY5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54183#discussion_r398280693", "bodyText": "I think we will want specializations for empty, one, and two-element sets.", "author": "jasontedor", "createdAt": "2020-03-26T02:22:33Z", "path": "libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.collect;\n+\n+public class Set {\n+\n+    /**\n+     * Delegates to the Java9 {@code Set.of()} method.\n+     * @param entries the elements to be contained in the set\n+     * @param <T> the {@code Set}'s element type\n+     * @return an unmodifiable set containing the specified elements.\n+     */\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\")\n+    public static <T> java.util.Set<T> of(T... entries) {", "originalCommit": "b6f29cdb22308fb3e683568a582c5f120392dad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "chunk": "diff --git a/libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java b/libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java\nindex 4ce0f687239..75312eb6583 100644\n--- a/libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java\n+++ b/libs/core/src/main/java9/org/elasticsearch/common/collect/Set.java\n\n@@ -19,12 +19,36 @@\n \n package org.elasticsearch.common.collect;\n \n+import java.util.Collection;\n+\n public class Set {\n \n     /**\n      * Delegates to the Java9 {@code Set.of()} method.\n-     * @param entries the elements to be contained in the set\n+     *\n      * @param <T> the {@code Set}'s element type\n+     * @return an empty {@code Set}\n+     */\n+    public static <T> java.util.Set<T> of() {\n+        return java.util.Set.of();\n+    }\n+\n+    /**\n+     * Delegates to the Java9 {@code Set.of()} method.\n+     *\n+     * @param <T> the {@code Set}'s element type\n+     * @param e1  the single element\n+     * @return a {@code Set} containing the specified element\n+     */\n+    public static <T> java.util.Set<T> of(T e1) {\n+        return java.util.Set.of(e1);\n+    }\n+\n+    /**\n+     * Delegates to the Java9 {@code Set.of()} method.\n+     *\n+     * @param entries the elements to be contained in the set\n+     * @param <T>     the {@code Set}'s element type\n      * @return an unmodifiable set containing the specified elements.\n      */\n     @SafeVarargs\n"}}, {"oid": "a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "url": "https://github.com/elastic/elasticsearch/commit/a7fc7227ac9e9fe0f7520a54a914189ec13d82ca", "message": "review comments", "committedDate": "2020-03-26T19:02:17Z", "type": "commit"}, {"oid": "2f03e2832cf1b043fa538ce7e173130a16d345a7", "url": "https://github.com/elastic/elasticsearch/commit/2f03e2832cf1b043fa538ce7e173130a16d345a7", "message": "optimized paths for zero and one elements", "committedDate": "2020-03-26T19:27:09Z", "type": "commit"}, {"oid": "0f40f57ea08c95463df5d2998069c69613ba0e9e", "url": "https://github.com/elastic/elasticsearch/commit/0f40f57ea08c95463df5d2998069c69613ba0e9e", "message": "Merge branch '7.x' into java8_collection_utils", "committedDate": "2020-03-27T08:32:23Z", "type": "commit"}, {"oid": "b643df9051814d1d259a4b04dacb4aaea2d34135", "url": "https://github.com/elastic/elasticsearch/commit/b643df9051814d1d259a4b04dacb4aaea2d34135", "message": "two-element overrides", "committedDate": "2020-03-27T08:32:31Z", "type": "commit"}, {"oid": "2d00d269f3a8e4f1cc3cf8e70183a28e388ed403", "url": "https://github.com/elastic/elasticsearch/commit/2d00d269f3a8e4f1cc3cf8e70183a28e388ed403", "message": "Merge branch 'java8_collection_utils' of https://github.com/danhermann/elasticsearch into java8_collection_utils", "committedDate": "2020-03-27T08:32:46Z", "type": "commit"}, {"oid": "35ba4973eec75184ee240fe72e9760eec46a8a3a", "url": "https://github.com/elastic/elasticsearch/commit/35ba4973eec75184ee240fe72e9760eec46a8a3a", "message": "missing test", "committedDate": "2020-03-27T13:01:48Z", "type": "commit"}, {"oid": "271b687f4e3d2f7f5f818b305671a616e2dfe863", "url": "https://github.com/elastic/elasticsearch/commit/271b687f4e3d2f7f5f818b305671a616e2dfe863", "message": "revert build.gradle changes", "committedDate": "2020-03-31T11:51:20Z", "type": "commit"}, {"oid": "7bde3231685b6743a4f8761fd200fdc72daad98a", "url": "https://github.com/elastic/elasticsearch/commit/7bde3231685b6743a4f8761fd200fdc72daad98a", "message": "Merge branch '7.x' into java8_collection_utils", "committedDate": "2020-03-31T11:52:12Z", "type": "commit"}, {"oid": "91d0e9295cdf78f9d0966d407bbaec8c977dacc1", "url": "https://github.com/elastic/elasticsearch/commit/91d0e9295cdf78f9d0966d407bbaec8c977dacc1", "message": "move to java11 source set", "committedDate": "2020-03-31T11:54:34Z", "type": "commit"}]}