{"pr_number": 52415, "pr_title": "Generate SAML metadata for the Identity Provider", "pr_createdAt": "2020-02-17T14:12:45Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52415", "timeline": [{"oid": "f09d280de697c4187f679b79c6375ab1093f7ca7", "url": "https://github.com/elastic/elasticsearch/commit/f09d280de697c4187f679b79c6375ab1093f7ca7", "message": "Handle incoming AuthnRequests\n\n- Expose an API that consumes (possibly signed) AuthnRequests as\ndefined by the HTTP-Redirect binding.\n- Process AuthnRequests, validate and parse them into a minimum\nset of information to be used for subsequent API calls to get a\nSAML Response", "committedDate": "2020-02-06T21:43:33Z", "type": "commit"}, {"oid": "68a13c70b97f84c9a5e0ae039b539fc2b9204746", "url": "https://github.com/elastic/elasticsearch/commit/68a13c70b97f84c9a5e0ae039b539fc2b9204746", "message": "remove redundant schema files", "committedDate": "2020-02-06T21:51:19Z", "type": "commit"}, {"oid": "52583996b18c9fd1426610942e5571fc28ce62f6", "url": "https://github.com/elastic/elasticsearch/commit/52583996b18c9fd1426610942e5571fc28ce62f6", "message": "Merge branch 'feature-internal-idp' into idp-sp-init-handlers", "committedDate": "2020-02-07T06:04:01Z", "type": "commit"}, {"oid": "9573ebdc06bbf51c8100c8fc82463a1250b8823e", "url": "https://github.com/elastic/elasticsearch/commit/9573ebdc06bbf51c8100c8fc82463a1250b8823e", "message": "address feedbacl and add Transport action tests", "committedDate": "2020-02-13T07:37:11Z", "type": "commit"}, {"oid": "f15cc9f5ccc6c8fe542a3706d9865913d4beb129", "url": "https://github.com/elastic/elasticsearch/commit/f15cc9f5ccc6c8fe542a3706d9865913d4beb129", "message": "Merge branch 'feature-internal-idp' into idp-sp-init-handlers", "committedDate": "2020-02-13T07:55:52Z", "type": "commit"}, {"oid": "54e1eaf80cb5853ba09b175934482c4d803d9cd6", "url": "https://github.com/elastic/elasticsearch/commit/54e1eaf80cb5853ba09b175934482c4d803d9cd6", "message": "Generate SAML metadata for the Identity Provider\n\nThis change adds an API for generating SAML metadata for the\nconfigured Identity Provider. All parameters that can contribute\nto the metadata, from signing keys to Organization and contact\ndetails are all configured in node settings.\nThe caller of the API needs to define the SP that will consume this\nmetadata as the values included can potentially be different,\ndepending on the registered SP configuration and the IDP policy.", "committedDate": "2020-02-17T14:04:43Z", "type": "commit"}, {"oid": "5b1c41055f27c467a011c2dbaafeabe97a0f22b1", "url": "https://github.com/elastic/elasticsearch/commit/5b1c41055f27c467a011c2dbaafeabe97a0f22b1", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into idp-metadata-api", "committedDate": "2020-02-17T14:09:41Z", "type": "commit"}, {"oid": "eec55c1eca16ea62b0b1376bdc4a48900f656666", "url": "https://github.com/elastic/elasticsearch/commit/eec55c1eca16ea62b0b1376bdc4a48900f656666", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into idp-sp-init-handlers", "committedDate": "2020-02-18T08:04:39Z", "type": "commit"}, {"oid": "80b074540293413fe226b06f355d9bd5ff1a63ce", "url": "https://github.com/elastic/elasticsearch/commit/80b074540293413fe226b06f355d9bd5ff1a63ce", "message": "additions", "committedDate": "2020-02-18T08:13:05Z", "type": "commit"}, {"oid": "76c45efb32f18a78b4e92bf6d26dfa003d7d7224", "url": "https://github.com/elastic/elasticsearch/commit/76c45efb32f18a78b4e92bf6d26dfa003d7d7224", "message": "address feedback", "committedDate": "2020-02-20T15:37:19Z", "type": "commit"}, {"oid": "16826b2f39b30a1311beed3303a87c103ecc032b", "url": "https://github.com/elastic/elasticsearch/commit/16826b2f39b30a1311beed3303a87c103ecc032b", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into idp-sp-init-handlers", "committedDate": "2020-02-20T16:44:03Z", "type": "commit"}, {"oid": "e3d379d73e73b9b74a9875b3298d854fd2c2299e", "url": "https://github.com/elastic/elasticsearch/commit/e3d379d73e73b9b74a9875b3298d854fd2c2299e", "message": "Split Utils to Factory and Init, treat URLs as URLs", "committedDate": "2020-02-24T14:05:56Z", "type": "commit"}, {"oid": "03eba44834bca6b6b56e725a4c52c1ebe55156e5", "url": "https://github.com/elastic/elasticsearch/commit/03eba44834bca6b6b56e725a4c52c1ebe55156e5", "message": "Merge remote-tracking branch 'origin/feature-internal-idp' into idp-sp-init-handlers", "committedDate": "2020-02-24T14:34:30Z", "type": "commit"}, {"oid": "eef3dd60f0f93aac4ebf5cd57dc5ed04a44def5e", "url": "https://github.com/elastic/elasticsearch/commit/eef3dd60f0f93aac4ebf5cd57dc5ed04a44def5e", "message": "Support multiple allowed NameID formats per SP", "committedDate": "2020-02-25T11:26:53Z", "type": "commit"}, {"oid": "db688a47e51b86d26dc3f42b098357013b46ebed", "url": "https://github.com/elastic/elasticsearch/commit/db688a47e51b86d26dc3f42b098357013b46ebed", "message": "Merge branch 'idp-sp-init-handlers' into idp-metadata-api", "committedDate": "2020-02-25T14:59:39Z", "type": "commit"}, {"oid": "4cd943a96367d7ad039cce32911d31f2e6132557", "url": "https://github.com/elastic/elasticsearch/commit/4cd943a96367d7ad039cce32911d31f2e6132557", "message": "Changes:\n\n- Bring back the IDP wide signing credentials setup until we figure\nout what to do with per SP signing credentials\n- Make URL Settings URLs.", "committedDate": "2020-02-26T09:32:09Z", "type": "commit"}, {"oid": "e536026f3ba1b9388f245ab9776248b3f642d4a9", "url": "https://github.com/elastic/elasticsearch/commit/e536026f3ba1b9388f245ab9776248b3f642d4a9", "message": "Merge branch 'feature-internal-idp' into idp-metadata-api", "committedDate": "2020-02-26T14:37:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNjc1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r384536753", "bodyText": "Should we make this configurable?", "author": "jkakavas", "createdAt": "2020-02-26T14:44:58Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n+import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n+import org.elasticsearch.xpack.idp.saml.support.SamlInit;\n+import org.opensaml.core.xml.io.MarshallingException;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorMarshaller;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.xmlsec.signature.Signature;\n+import org.opensaml.xmlsec.signature.support.SignatureException;\n+import org.opensaml.xmlsec.signature.support.Signer;\n+import org.w3c.dom.Element;\n+\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML2_POST_BINDING_URI;\n+import static org.opensaml.saml.common.xml.SAMLConstants.SAML2_REDIRECT_BINDING_URI;\n+import static org.opensaml.saml.saml2.core.NameIDType.PERSISTENT;\n+import static org.opensaml.saml.saml2.core.NameIDType.TRANSIENT;\n+import static org.opensaml.xmlsec.signature.Signature.DEFAULT_ELEMENT_NAME;\n+import static org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS;\n+import static org.opensaml.xmlsec.signature.support.SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA256;\n+\n+public class SamlMetadataGenerator {\n+\n+    private final SamlFactory samlFactory;\n+    private final SamlIdentityProvider idp;\n+    private final Logger logger = LogManager.getLogger(SamlMetadataGenerator.class);\n+\n+    public SamlMetadataGenerator(SamlFactory samlFactory, SamlIdentityProvider idp) {\n+        this.samlFactory = samlFactory;\n+        this.idp = idp;\n+        SamlInit.initialize();\n+    }\n+\n+    public void generateMetadata(String spEntityId, ActionListener<SamlGenerateMetadataResponse> listener) {\n+        try {\n+            // this will be async\n+            SamlServiceProvider sp = idp.getRegisteredServiceProvider(spEntityId);\n+            if (null == sp) {\n+                listener.onFailure(new IllegalArgumentException(\"Service provider with Entity ID [\" + spEntityId\n+                    + \"] is not registered with this Identity Provider\"));\n+                return;\n+            }\n+            EntityDescriptor metadata = buildEntityDescriptor(sp);\n+            final X509Credential signingCredential = idp.getMetadataSigningCredential();\n+            Element metadataElement = possiblySignDescriptor(metadata, signingCredential);\n+            listener.onResponse(new SamlGenerateMetadataResponse(samlFactory.toString(metadataElement, false)));\n+        } catch (Exception e) {\n+            logger.debug(\"Error generating IDP metadata to share with [\" + spEntityId + \"]\", e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    EntityDescriptor buildEntityDescriptor(SamlServiceProvider sp) throws Exception {\n+        final SamlIdPMetadataBuilder builder = new SamlIdPMetadataBuilder(idp.getEntityId())\n+            .wantAuthnRequestsSigned(sp.shouldSignAuthnRequests())\n+            .withSingleSignOnServiceUrl(SAML2_REDIRECT_BINDING_URI,\n+                idp.getSingleSignOnEndpoint(SAML2_REDIRECT_BINDING_URI))\n+            .withSingleSignOnServiceUrl(SAML2_POST_BINDING_URI,\n+                idp.getSingleSignOnEndpoint(SAML2_POST_BINDING_URI))\n+            .withSingleLogoutServiceUrl(SAML2_REDIRECT_BINDING_URI,\n+                idp.getSingleLogoutEndpoint(SAML2_REDIRECT_BINDING_URI))\n+            .withSingleLogoutServiceUrl(SAML2_POST_BINDING_URI,\n+                idp.getSingleLogoutEndpoint(SAML2_POST_BINDING_URI))\n+            .withSigningCertificate(idp.getSigningCredential().getEntityCertificate())\n+            .withNameIdFormat(PERSISTENT)\n+            .withNameIdFormat(TRANSIENT)\n+            .organization(idp.getOrganization())\n+            .withContact(idp.getTechnicalContact());\n+        return builder.build();\n+    }\n+\n+    Element possiblySignDescriptor(EntityDescriptor descriptor, X509Credential signingCredential) throws MarshallingException,\n+        SignatureException {\n+        EntityDescriptorMarshaller marshaller = new EntityDescriptorMarshaller();\n+        if (null == signingCredential) {\n+            return marshaller.marshall(descriptor);\n+        } else {\n+            Signature signature = samlFactory.buildObject(Signature.class, DEFAULT_ELEMENT_NAME);\n+            signature.setSigningCredential(signingCredential);\n+            signature.setSignatureAlgorithm(ALGO_ID_SIGNATURE_RSA_SHA256);", "originalCommit": "e536026f3ba1b9388f245ab9776248b3f642d4a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5ODA2NA==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385098064", "bodyText": "Not now. We're already implementing more than the absolute minimum we need. We really need to focus on MVP here.", "author": "tvernum", "createdAt": "2020-02-27T12:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNjc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java\nindex 0ca97f6f27a..792db7d01fd 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java\n\n@@ -8,7 +8,7 @@ package org.elasticsearch.xpack.idp.saml.idp;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.elasticsearch.action.ActionListener;\n-import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataResponse;\n import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProvider;\n import org.elasticsearch.xpack.idp.saml.support.SamlFactory;\n import org.elasticsearch.xpack.idp.saml.support.SamlInit;\n"}}, {"oid": "c72c82b5ac713ef6338be51db63501ef6c493ae0", "url": "https://github.com/elastic/elasticsearch/commit/c72c82b5ac713ef6338be51db63501ef6c493ae0", "message": "Minor modifications", "committedDate": "2020-02-26T14:58:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0OTE4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r384549189", "bodyText": "@tvernum your upstream issue seems to be resolved in opensaml 3.4 but we use 3.4.5 here and it still actually has the same problematic behavior, reproducible (without this fix) with\n./gradlew ':x-pack:plugin:identity-provider:test' --tests \"org.elasticsearch.xpack.idp.saml.idp.SamlIdpMetadataBuilderTests.testMetadataGenerationWithAllParameters\" -Dtests.seed=15A837259F3EDCCF -Dtests.security.manager=true -Dtests.locale=tr -Dtests.timezone=America/Glace_Bay -Dcompiler.java=13\n\nwhich creates metadata with key usage : <md:KeyDescriptor use=\"s\u0131gn\u0131ng\"> , note \u0131 vs i", "author": "jkakavas", "createdAt": "2020-02-26T15:02:29Z", "path": "x-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/test/IdpSamlTestCase.java", "diffHunk": "@@ -22,30 +28,59 @@\n import org.opensaml.security.x509.X509Credential;\n import org.w3c.dom.Element;\n \n-import javax.xml.XMLConstants;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n-import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.StringWriter;\n import java.io.UncheckedIOException;\n import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Path;\n import java.security.PrivateKey;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n \n import static org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport.getUnmarshallerFactory;\n \n public abstract class IdpSamlTestCase extends ESTestCase {\n \n+    private static Locale restoreLocale;\n+\n+    @BeforeClass\n+    public static void localeChecks() throws Exception {\n+        Logger logger = LogManager.getLogger(IdpSamlTestCase.class);\n+        SamlInit.initialize();\n+        if (isTurkishLocale()) {\n+            // See: https://github.com/elastic/elasticsearch/issues/29824", "originalCommit": "c72c82b5ac713ef6338be51db63501ef6c493ae0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMTE4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385101182", "bodyText": "They fixed the KeyDescriptorUnmarshaller but not the KeyDescriptorMarshaller \ud83e\udd26\u200d\u2642", "author": "tvernum", "createdAt": "2020-02-27T12:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0OTE4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDE4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385090186", "bodyText": "I don't think Generate is needed in these names. SamlMetadataAction would be sufficient.", "author": "tvernum", "createdAt": "2020-02-27T12:16:26Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataAction.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionType;\n+\n+public class SamlGenerateMetadataAction extends ActionType<SamlGenerateMetadataResponse> {", "originalCommit": "c72c82b5ac713ef6338be51db63501ef6c493ae0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataAction.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataAction.java\nsimilarity index 59%\nrename from x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataAction.java\nrename to x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataAction.java\nindex 4df29d2070a..4c816ef122a 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataAction.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataAction.java\n\n@@ -7,12 +7,12 @@ package org.elasticsearch.xpack.idp.action;\n \n import org.elasticsearch.action.ActionType;\n \n-public class SamlGenerateMetadataAction extends ActionType<SamlGenerateMetadataResponse> {\n+public class SamlMetadataAction extends ActionType<SamlMetadataResponse> {\n \n     public static final String NAME = \"cluster:admin/idp/saml/metadata\";\n-    public static final SamlGenerateMetadataAction INSTANCE = new SamlGenerateMetadataAction();\n+    public static final SamlMetadataAction INSTANCE = new SamlMetadataAction();\n \n-    private SamlGenerateMetadataAction() {\n-        super(NAME, SamlGenerateMetadataResponse::new);\n+    private SamlMetadataAction() {\n+        super(NAME, SamlMetadataResponse::new);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDY5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385090695", "bodyText": "There's no need to override this if it doesn't have a body.", "author": "tvernum", "createdAt": "2020-02-27T12:17:33Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SamlGenerateMetadataRequest extends ActionRequest {\n+\n+    private String spEntityId;\n+\n+    public SamlGenerateMetadataRequest(StreamInput in) throws IOException {\n+        super(in);\n+        spEntityId = in.readString();\n+    }\n+\n+    public SamlGenerateMetadataRequest(String spEntityId) {\n+        this.spEntityId = Objects.requireNonNull(spEntityId, \"Service Provider entity id must be provided\");\n+    }\n+\n+    public SamlGenerateMetadataRequest() {\n+        this.spEntityId = null;\n+    }\n+\n+    @Override\n+    public ActionRequestValidationException validate() {\n+        return null;\n+    }", "originalCommit": "c72c82b5ac713ef6338be51db63501ef6c493ae0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyMjI5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385122295", "bodyText": "But ActionRequest#validate is abstract so I don't really have a choice :/", "author": "jkakavas", "createdAt": "2020-02-27T13:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODA5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385508091", "bodyText": "Ah, so it is. Sorry, I forgot that was the case.", "author": "tvernum", "createdAt": "2020-02-28T04:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataRequest.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataRequest.java\nsimilarity index 82%\nrename from x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataRequest.java\nrename to x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataRequest.java\nindex bad311c209d..86ba297629a 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataRequest.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataRequest.java\n\n@@ -12,20 +12,20 @@ import org.elasticsearch.common.io.stream.StreamInput;\n import java.io.IOException;\n import java.util.Objects;\n \n-public class SamlGenerateMetadataRequest extends ActionRequest {\n+public class SamlMetadataRequest extends ActionRequest {\n \n     private String spEntityId;\n \n-    public SamlGenerateMetadataRequest(StreamInput in) throws IOException {\n+    public SamlMetadataRequest(StreamInput in) throws IOException {\n         super(in);\n         spEntityId = in.readString();\n     }\n \n-    public SamlGenerateMetadataRequest(String spEntityId) {\n+    public SamlMetadataRequest(String spEntityId) {\n         this.spEntityId = Objects.requireNonNull(spEntityId, \"Service Provider entity id must be provided\");\n     }\n \n-    public SamlGenerateMetadataRequest() {\n+    public SamlMetadataRequest() {\n         this.spEntityId = null;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDkyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385090925", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public SamlGenerateMetadataResponse( String xmlString) {\n          \n          \n            \n                public SamlGenerateMetadataResponse(String xmlString) {", "author": "tvernum", "createdAt": "2020-02-27T12:18:02Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataResponse.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.action;\n+\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class SamlGenerateMetadataResponse extends ActionResponse {\n+\n+    private final String xmlString;\n+\n+    public SamlGenerateMetadataResponse(StreamInput in) throws IOException {\n+        super(in);\n+        this.xmlString = in.readString();\n+    }\n+\n+    public SamlGenerateMetadataResponse( String xmlString) {", "originalCommit": "c72c82b5ac713ef6338be51db63501ef6c493ae0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataResponse.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataResponse.java\nsimilarity index 81%\nrename from x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataResponse.java\nrename to x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataResponse.java\nindex a7252d568a9..0839dc70b48 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlGenerateMetadataResponse.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/SamlMetadataResponse.java\n\n@@ -12,16 +12,16 @@ import org.elasticsearch.common.io.stream.StreamOutput;\n import java.io.IOException;\n import java.util.Objects;\n \n-public class SamlGenerateMetadataResponse extends ActionResponse {\n+public class SamlMetadataResponse extends ActionResponse {\n \n     private final String xmlString;\n \n-    public SamlGenerateMetadataResponse(StreamInput in) throws IOException {\n+    public SamlMetadataResponse(StreamInput in) throws IOException {\n         super(in);\n         this.xmlString = in.readString();\n     }\n \n-    public SamlGenerateMetadataResponse( String xmlString) {\n+    public SamlMetadataResponse(String xmlString) {\n         this.xmlString = Objects.requireNonNull(xmlString, \"Metadata XML string must be provided\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MjM1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385092355", "bodyText": "Did you have a reason for putting this in the body rather than as a URL/query parameter?", "author": "tvernum", "createdAt": "2020-02-27T12:21:16Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlGenerateMetadataRequest extends BaseRestHandler {\n+\n+    static final ObjectParser<SamlGenerateMetadataRequest, Void> PARSER =\n+        new ObjectParser<>(\"idp_generate_metadata\", SamlGenerateMetadataRequest::new);\n+\n+    static {\n+        PARSER.declareString(SamlGenerateMetadataRequest::setSpEntityId, new ParseField(\"sp_entity_id\"));", "originalCommit": "c72c82b5ac713ef6338be51db63501ef6c493ae0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyODExMA==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385128110", "bodyText": "No, I think I had this as a POST originally so that I wouldn't have to worry about the ugliness of\nGET https://node1.example.com/_idp/saml/sp/https%3A%2F%2Fsp.entityid.org\n\nOn the other hand, GET makes sense and I thought I'd change it but the change was nto completed.\nI assume we will be doing the same in the registration API ( with PUT in that case ). Thoughts?", "author": "jkakavas", "createdAt": "2020-02-27T13:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1ODgzNA==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385158834", "bodyText": "GET it is.", "author": "jkakavas", "createdAt": "2020-02-27T14:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODM3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385508373", "bodyText": "What you've got in the most recent commit is what I expected.", "author": "tvernum", "createdAt": "2020-02-28T05:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MjM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequest.java\nsimilarity index 64%\nrename from x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java\nrename to x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequest.java\nindex 506ccd20474..f176ed929e2 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlGenerateMetadataRequest.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequest.java\n\n@@ -16,9 +16,9 @@ import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.RestResponse;\n import org.elasticsearch.rest.RestStatus;\n import org.elasticsearch.rest.action.RestBuilderListener;\n-import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataAction;\n-import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataRequest;\n-import org.elasticsearch.xpack.idp.action.SamlGenerateMetadataResponse;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataResponse;\n \n import java.io.IOException;\n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NTQ2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385095469", "bodyText": "Nit, extra line", "author": "tvernum", "createdAt": "2020-02-27T12:28:18Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.MapBuilder;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.metadata.ContactPerson;\n+import org.opensaml.saml.saml2.metadata.ContactPersonTypeEnumeration;\n+import org.opensaml.saml.saml2.metadata.EmailAddress;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.GivenName;\n+import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n+import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n+import org.opensaml.saml.saml2.metadata.NameIDFormat;\n+import org.opensaml.saml.saml2.metadata.Organization;\n+import org.opensaml.saml.saml2.metadata.OrganizationDisplayName;\n+import org.opensaml.saml.saml2.metadata.OrganizationName;\n+import org.opensaml.saml.saml2.metadata.OrganizationURL;\n+import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n+import org.opensaml.saml.saml2.metadata.SingleSignOnService;\n+import org.opensaml.saml.saml2.metadata.SurName;\n+import org.opensaml.saml.saml2.metadata.impl.ContactPersonBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EmailAddressBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.GivenNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.IDPSSODescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.KeyDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.NameIDFormatBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationDisplayNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationURLBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleLogoutServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleSignOnServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SurNameBuilder;\n+import org.opensaml.security.credential.UsageType;\n+import org.opensaml.xmlsec.keyinfo.KeyInfoSupport;\n+import org.opensaml.xmlsec.signature.KeyInfo;\n+import org.opensaml.xmlsec.signature.impl.KeyInfoBuilder;\n+\n+import java.net.URL;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class SamlIdPMetadataBuilder {\n+\n+    private Locale locale;\n+    private final String entityId;\n+    private Set<String> nameIdFormats;\n+    private boolean wantAuthnRequestsSigned;\n+    private Map<String, URL> singleSignOnServiceUrls = new HashMap<>();\n+    private Map<String, URL> singleLogoutServiceUrls = new HashMap<>();\n+    private List<X509Certificate> signingCertificates;\n+    private OrganizationInfo organization;\n+    private final List<ContactInfo> contacts;\n+\n+\n+    public SamlIdPMetadataBuilder(String entityId) {\n+        this.entityId = entityId;\n+        this.locale = Locale.getDefault();\n+        this.contacts = new ArrayList<>();\n+        this.nameIdFormats = new HashSet<>();\n+        this.signingCertificates = new ArrayList<>();\n+        this.wantAuthnRequestsSigned = false;\n+    }\n+\n+    public SamlIdPMetadataBuilder withLocale(Locale locale) {\n+        this.locale = locale;\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withNameIdFormat(String nameIdFormat) {\n+        if (Strings.isNullOrEmpty(nameIdFormat) == false) {\n+            this.nameIdFormats.add(nameIdFormat);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder wantAuthnRequestsSigned(boolean wants) {\n+        this.wantAuthnRequestsSigned = wants;\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSingleSignOnServiceUrl(String binding, URL url) {\n+        if ( null != url) {\n+            this.singleSignOnServiceUrls.put(binding, url);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSingleLogoutServiceUrl(String binding, URL url) {\n+        if (null != url) {\n+            this.singleLogoutServiceUrls.put(binding, url);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSigningCertificates(List<X509Certificate> signingCertificates) {\n+        if (null != signingCertificates) {\n+            this.signingCertificates.addAll(signingCertificates);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSigningCertificate(X509Certificate signingCertificate) {\n+        return withSigningCertificates(Collections.singletonList(signingCertificate));\n+    }\n+\n+    public SamlIdPMetadataBuilder organization(OrganizationInfo organization) {\n+        if (null != organization) {\n+            this.organization = organization;\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder organization(String orgName, String displayName, String url) {\n+        return organization(new OrganizationInfo(orgName, displayName, url));\n+    }\n+\n+    public SamlIdPMetadataBuilder withContact(ContactInfo contact) {\n+        if (null != contact) {\n+            this.contacts.add(contact);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withContact(String type, String givenName, String surName, String email) {\n+        return withContact(new ContactInfo(ContactInfo.getType(type), givenName, surName, email));\n+    }\n+\n+", "originalCommit": "c72c82b5ac713ef6338be51db63501ef6c493ae0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java\nindex 3ad340c0a81..f9baa9e4f77 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java\n\n@@ -142,26 +142,25 @@ public class SamlIdPMetadataBuilder {\n         return withContact(new ContactInfo(ContactInfo.getType(type), givenName, surName, email));\n     }\n \n-\n     public EntityDescriptor build() throws CertificateEncodingException {\n-        final IDPSSODescriptor idpssoDescriptor = new IDPSSODescriptorBuilder().buildObject();\n-        idpssoDescriptor.removeAllSupportedProtocols();\n-        idpssoDescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n-        idpssoDescriptor.setWantAuthnRequestsSigned(this.wantAuthnRequestsSigned);\n+        final IDPSSODescriptor idpSsoDescriptor = new IDPSSODescriptorBuilder().buildObject();\n+        idpSsoDescriptor.removeAllSupportedProtocols();\n+        idpSsoDescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n+        idpSsoDescriptor.setWantAuthnRequestsSigned(this.wantAuthnRequestsSigned);\n         if (nameIdFormats.isEmpty() == false) {\n-            idpssoDescriptor.getNameIDFormats().addAll(buildNameIDFormats());\n+            idpSsoDescriptor.getNameIDFormats().addAll(buildNameIDFormats());\n         }\n         if (singleSignOnServiceUrls.isEmpty() == false) {\n-            idpssoDescriptor.getSingleSignOnServices().addAll(buildSingleSignOnServices());\n+            idpSsoDescriptor.getSingleSignOnServices().addAll(buildSingleSignOnServices());\n         }\n         if (singleLogoutServiceUrls.isEmpty() == false) {\n-            idpssoDescriptor.getSingleLogoutServices().addAll(buildSingleLogoutServices());\n+            idpSsoDescriptor.getSingleLogoutServices().addAll(buildSingleLogoutServices());\n         }\n-        idpssoDescriptor.getKeyDescriptors().addAll(buildKeyDescriptors());\n+        idpSsoDescriptor.getKeyDescriptors().addAll(buildKeyDescriptors());\n \n         final EntityDescriptor descriptor = new EntityDescriptorBuilder().buildObject();\n         descriptor.setEntityID(this.entityId);\n-        descriptor.getRoleDescriptors().add(idpssoDescriptor);\n+        descriptor.getRoleDescriptors().add(idpSsoDescriptor);\n         if (organization != null) {\n             descriptor.setOrganization(buildOrganization());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NTYyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385095629", "bodyText": "Nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final IDPSSODescriptor idpssoDescriptor = new IDPSSODescriptorBuilder().buildObject();\n          \n          \n            \n                    final IDPSSODescriptor idpSsoDescriptor = new IDPSSODescriptorBuilder().buildObject();", "author": "tvernum", "createdAt": "2020-02-27T12:28:38Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.MapBuilder;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.metadata.ContactPerson;\n+import org.opensaml.saml.saml2.metadata.ContactPersonTypeEnumeration;\n+import org.opensaml.saml.saml2.metadata.EmailAddress;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.GivenName;\n+import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n+import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n+import org.opensaml.saml.saml2.metadata.NameIDFormat;\n+import org.opensaml.saml.saml2.metadata.Organization;\n+import org.opensaml.saml.saml2.metadata.OrganizationDisplayName;\n+import org.opensaml.saml.saml2.metadata.OrganizationName;\n+import org.opensaml.saml.saml2.metadata.OrganizationURL;\n+import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n+import org.opensaml.saml.saml2.metadata.SingleSignOnService;\n+import org.opensaml.saml.saml2.metadata.SurName;\n+import org.opensaml.saml.saml2.metadata.impl.ContactPersonBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EmailAddressBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.GivenNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.IDPSSODescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.KeyDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.NameIDFormatBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationDisplayNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationNameBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.OrganizationURLBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleLogoutServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleSignOnServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SurNameBuilder;\n+import org.opensaml.security.credential.UsageType;\n+import org.opensaml.xmlsec.keyinfo.KeyInfoSupport;\n+import org.opensaml.xmlsec.signature.KeyInfo;\n+import org.opensaml.xmlsec.signature.impl.KeyInfoBuilder;\n+\n+import java.net.URL;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class SamlIdPMetadataBuilder {\n+\n+    private Locale locale;\n+    private final String entityId;\n+    private Set<String> nameIdFormats;\n+    private boolean wantAuthnRequestsSigned;\n+    private Map<String, URL> singleSignOnServiceUrls = new HashMap<>();\n+    private Map<String, URL> singleLogoutServiceUrls = new HashMap<>();\n+    private List<X509Certificate> signingCertificates;\n+    private OrganizationInfo organization;\n+    private final List<ContactInfo> contacts;\n+\n+\n+    public SamlIdPMetadataBuilder(String entityId) {\n+        this.entityId = entityId;\n+        this.locale = Locale.getDefault();\n+        this.contacts = new ArrayList<>();\n+        this.nameIdFormats = new HashSet<>();\n+        this.signingCertificates = new ArrayList<>();\n+        this.wantAuthnRequestsSigned = false;\n+    }\n+\n+    public SamlIdPMetadataBuilder withLocale(Locale locale) {\n+        this.locale = locale;\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withNameIdFormat(String nameIdFormat) {\n+        if (Strings.isNullOrEmpty(nameIdFormat) == false) {\n+            this.nameIdFormats.add(nameIdFormat);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder wantAuthnRequestsSigned(boolean wants) {\n+        this.wantAuthnRequestsSigned = wants;\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSingleSignOnServiceUrl(String binding, URL url) {\n+        if ( null != url) {\n+            this.singleSignOnServiceUrls.put(binding, url);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSingleLogoutServiceUrl(String binding, URL url) {\n+        if (null != url) {\n+            this.singleLogoutServiceUrls.put(binding, url);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSigningCertificates(List<X509Certificate> signingCertificates) {\n+        if (null != signingCertificates) {\n+            this.signingCertificates.addAll(signingCertificates);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withSigningCertificate(X509Certificate signingCertificate) {\n+        return withSigningCertificates(Collections.singletonList(signingCertificate));\n+    }\n+\n+    public SamlIdPMetadataBuilder organization(OrganizationInfo organization) {\n+        if (null != organization) {\n+            this.organization = organization;\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder organization(String orgName, String displayName, String url) {\n+        return organization(new OrganizationInfo(orgName, displayName, url));\n+    }\n+\n+    public SamlIdPMetadataBuilder withContact(ContactInfo contact) {\n+        if (null != contact) {\n+            this.contacts.add(contact);\n+        }\n+        return this;\n+    }\n+\n+    public SamlIdPMetadataBuilder withContact(String type, String givenName, String surName, String email) {\n+        return withContact(new ContactInfo(ContactInfo.getType(type), givenName, surName, email));\n+    }\n+\n+\n+    public EntityDescriptor build() throws CertificateEncodingException {\n+        final IDPSSODescriptor idpssoDescriptor = new IDPSSODescriptorBuilder().buildObject();", "originalCommit": "c72c82b5ac713ef6338be51db63501ef6c493ae0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java\nindex 3ad340c0a81..f9baa9e4f77 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdPMetadataBuilder.java\n\n@@ -142,26 +142,25 @@ public class SamlIdPMetadataBuilder {\n         return withContact(new ContactInfo(ContactInfo.getType(type), givenName, surName, email));\n     }\n \n-\n     public EntityDescriptor build() throws CertificateEncodingException {\n-        final IDPSSODescriptor idpssoDescriptor = new IDPSSODescriptorBuilder().buildObject();\n-        idpssoDescriptor.removeAllSupportedProtocols();\n-        idpssoDescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n-        idpssoDescriptor.setWantAuthnRequestsSigned(this.wantAuthnRequestsSigned);\n+        final IDPSSODescriptor idpSsoDescriptor = new IDPSSODescriptorBuilder().buildObject();\n+        idpSsoDescriptor.removeAllSupportedProtocols();\n+        idpSsoDescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n+        idpSsoDescriptor.setWantAuthnRequestsSigned(this.wantAuthnRequestsSigned);\n         if (nameIdFormats.isEmpty() == false) {\n-            idpssoDescriptor.getNameIDFormats().addAll(buildNameIDFormats());\n+            idpSsoDescriptor.getNameIDFormats().addAll(buildNameIDFormats());\n         }\n         if (singleSignOnServiceUrls.isEmpty() == false) {\n-            idpssoDescriptor.getSingleSignOnServices().addAll(buildSingleSignOnServices());\n+            idpSsoDescriptor.getSingleSignOnServices().addAll(buildSingleSignOnServices());\n         }\n         if (singleLogoutServiceUrls.isEmpty() == false) {\n-            idpssoDescriptor.getSingleLogoutServices().addAll(buildSingleLogoutServices());\n+            idpSsoDescriptor.getSingleLogoutServices().addAll(buildSingleLogoutServices());\n         }\n-        idpssoDescriptor.getKeyDescriptors().addAll(buildKeyDescriptors());\n+        idpSsoDescriptor.getKeyDescriptors().addAll(buildKeyDescriptors());\n \n         final EntityDescriptor descriptor = new EntityDescriptorBuilder().buildObject();\n         descriptor.setEntityID(this.entityId);\n-        descriptor.getRoleDescriptors().add(idpssoDescriptor);\n+        descriptor.getRoleDescriptors().add(idpSsoDescriptor);\n         if (organization != null) {\n             descriptor.setOrganization(buildOrganization());\n         }\n"}}, {"oid": "d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "url": "https://github.com/elastic/elasticsearch/commit/d72805a2142bcc8e4d93c57612f21f4a703e5f9e", "message": "Renames", "committedDate": "2020-02-27T13:43:36Z", "type": "commit"}, {"oid": "c7c4b174149581dd795101a66ce5121c1f30c7bf", "url": "https://github.com/elastic/elasticsearch/commit/c7c4b174149581dd795101a66ce5121c1f30c7bf", "message": "GET parameters and register actions", "committedDate": "2020-02-27T14:21:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODc0MA==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385508740", "bodyText": "I would call this either\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RestSamlMetadataRequestAction extends BaseRestHandler {\n          \n          \n            \n            public class RestGetSamlMetadataAction extends BaseRestHandler {\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RestSamlMetadataRequestAction extends BaseRestHandler {\n          \n          \n            \n            public class RestSamlMetadataAction extends BaseRestHandler {", "author": "tvernum", "createdAt": "2020-02-28T05:03:24Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlMetadataRequestAction extends BaseRestHandler {", "originalCommit": "c7c4b174149581dd795101a66ce5121c1f30c7bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2929f1cfd0ac4330d1308a2a63596ab42421f7a1", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\nsimilarity index 94%\nrename from x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java\nrename to x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\nindex 6ab88ff1af4..28171f3440b 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\n\n@@ -23,11 +23,11 @@ import java.util.List;\n \n import static org.elasticsearch.rest.RestRequest.Method.GET;\n \n-public class RestSamlMetadataRequestAction extends BaseRestHandler {\n+public class RestSamlMetadataAction extends BaseRestHandler {\n \n     @Override\n     public String getName() {\n-        return \"saml_idp_generate_metadata\";\n+        return \"saml_metadata\";\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODg4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385508889", "bodyText": "I'd probably change this name, based on what you decide to call the class.", "author": "tvernum", "createdAt": "2020-02-28T05:04:01Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.idp.rest;\n+\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.RestResponse;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.action.RestBuilderListener;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataAction;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataRequest;\n+import org.elasticsearch.xpack.idp.action.SamlMetadataResponse;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+\n+public class RestSamlMetadataRequestAction extends BaseRestHandler {\n+\n+    @Override\n+    public String getName() {\n+        return \"saml_idp_generate_metadata\";", "originalCommit": "c7c4b174149581dd795101a66ce5121c1f30c7bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2929f1cfd0ac4330d1308a2a63596ab42421f7a1", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\nsimilarity index 94%\nrename from x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java\nrename to x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\nindex 6ab88ff1af4..28171f3440b 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataRequestAction.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\n\n@@ -23,11 +23,11 @@ import java.util.List;\n \n import static org.elasticsearch.rest.RestRequest.Method.GET;\n \n-public class RestSamlMetadataRequestAction extends BaseRestHandler {\n+public class RestSamlMetadataAction extends BaseRestHandler {\n \n     @Override\n     public String getName() {\n-        return \"saml_idp_generate_metadata\";\n+        return \"saml_metadata\";\n     }\n \n     @Override\n"}}, {"oid": "2929f1cfd0ac4330d1308a2a63596ab42421f7a1", "url": "https://github.com/elastic/elasticsearch/commit/2929f1cfd0ac4330d1308a2a63596ab42421f7a1", "message": "address feedback", "committedDate": "2020-02-28T05:43:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUxOTk1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52415#discussion_r385519957", "bodyText": "Tiny nit, our names typically end in _action.\nTBH I don't know why - it's already obvious it's an action.", "author": "tvernum", "createdAt": "2020-02-28T05:58:30Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java", "diffHunk": "@@ -23,11 +23,11 @@\n \n import static org.elasticsearch.rest.RestRequest.Method.GET;\n \n-public class RestSamlMetadataRequestAction extends BaseRestHandler {\n+public class RestSamlMetadataAction extends BaseRestHandler {\n \n     @Override\n     public String getName() {\n-        return \"saml_idp_generate_metadata\";\n+        return \"saml_metadata\";", "originalCommit": "2929f1cfd0ac4330d1308a2a63596ab42421f7a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2442a7268d2420b2357026ad2f38e04467254af9", "chunk": "diff --git a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\nindex 28171f3440b..30665fe59bd 100644\n--- a/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\n+++ b/x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/rest/RestSamlMetadataAction.java\n\n@@ -27,7 +27,7 @@ public class RestSamlMetadataAction extends BaseRestHandler {\n \n     @Override\n     public String getName() {\n-        return \"saml_metadata\";\n+        return \"saml_metadata_action\";\n     }\n \n     @Override\n"}}, {"oid": "2442a7268d2420b2357026ad2f38e04467254af9", "url": "https://github.com/elastic/elasticsearch/commit/2442a7268d2420b2357026ad2f38e04467254af9", "message": "address feedback", "committedDate": "2020-02-28T06:00:07Z", "type": "commit"}, {"oid": "2585872a2c98edef8ce08e519caa9a125a48a212", "url": "https://github.com/elastic/elasticsearch/commit/2585872a2c98edef8ce08e519caa9a125a48a212", "message": "Merge branch 'feature-internal-idp' into idp-metadata-api", "committedDate": "2020-02-28T06:26:43Z", "type": "commit"}]}