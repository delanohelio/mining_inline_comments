{"pr_number": 56631, "pr_title": "EQL: Adds an ability to start an asynchronous EQL search", "pr_createdAt": "2020-05-12T18:10:06Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56631", "timeline": [{"oid": "b770022914d5e8226f635002cc66f098c526cc2d", "url": "https://github.com/elastic/elasticsearch/commit/b770022914d5e8226f635002cc66f098c526cc2d", "message": "EQL: Adds an ability to start an asynchronous EQL search\n\nAdds support for async searches to eql search API. This commit is limited to\nonly submitting search API requests and doesn't provide APIs to get results\nnor delete the results. These functions will be added in follow up PRs.\n\nRelates to #49638", "committedDate": "2020-05-12T18:06:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MjY3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/56631#discussion_r423982673", "bodyText": "We should share this in core next to AsyncTaskMaintenanceService ?\nI also wonder who should be responsible to start the AsyncTaskMaintenanceService since we don't need to start it twice ?", "author": "jimczi", "createdAt": "2020-05-12T19:33:05Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/EqlPlugin.java", "diffHunk": "@@ -46,6 +46,8 @@\n import java.util.function.Supplier;\n \n public class EqlPlugin extends Plugin implements ActionPlugin {\n+    // We are going to reuse the same index as normal async search until system indices are implemented\n+    public static final String INDEX = \".async-search\";", "originalCommit": "b770022914d5e8226f635002cc66f098c526cc2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNzEyMA==", "url": "https://github.com/elastic/elasticsearch/pull/56631#discussion_r424027120", "bodyText": "Yes. Good point. Let's deal with it in the next PR when I start moving stuff around.", "author": "imotov", "createdAt": "2020-05-12T20:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MjY3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MzY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56631#discussion_r423983659", "bodyText": "You should use RestCancellableNodeClient in order to get the automatic cancellation if the user closes the rest channel ?", "author": "jimczi", "createdAt": "2020-05-12T19:34:17Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java", "diffHunk": "@@ -46,6 +46,14 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             eqlRequest = EqlSearchRequest.fromXContent(parser);\n             eqlRequest.indices(Strings.splitStringByCommaToArray(request.param(\"index\")));\n             eqlRequest.indicesOptions(IndicesOptions.fromRequest(request, eqlRequest.indicesOptions()));\n+            if (request.hasParam(\"wait_for_completion_timeout\")) {\n+                eqlRequest.waitForCompletionTimeout(\n+                    request.paramAsTime(\"wait_for_completion_timeout\", eqlRequest.waitForCompletionTimeout()));\n+            }\n+            if (request.hasParam(\"keep_alive\")) {\n+                eqlRequest.keepAlive(request.paramAsTime(\"keep_alive\", eqlRequest.keepAlive()));\n+            }\n+            eqlRequest.keepOnCompletion(request.paramAsBoolean(\"keep_on_completion\", eqlRequest.keepOnCompletion()));\n         }\n \n         return channel -> client.execute(EqlSearchAction.INSTANCE, eqlRequest, new RestResponseListener<>(channel) {", "originalCommit": "b770022914d5e8226f635002cc66f098c526cc2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyODY0NA==", "url": "https://github.com/elastic/elasticsearch/pull/56631#discussion_r424028644", "bodyText": "Good catch. I am going to open PR against master for that in a bit since it's not async execution-specific.", "author": "imotov", "createdAt": "2020-05-12T20:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MzY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5Mzc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56631#discussion_r424393757", "bodyText": "Hmm, I need AbstractEqlBlockingIntegTestCase to do IT testing for it and it only exists in this branch for now. So, I think I will open a separate PR but against this branch.", "author": "imotov", "createdAt": "2020-05-13T12:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MzY1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwNzMzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56631#discussion_r424007331", "bodyText": "PlanExecutor already has a Client and NamedWriteableRegistry injected - unless they are different, you could get them from there.", "author": "costin", "createdAt": "2020-05-12T20:17:06Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/TransportEqlSearchAction.java", "diffHunk": "@@ -29,32 +34,72 @@\n import org.elasticsearch.xpack.eql.session.EqlConfiguration;\n import org.elasticsearch.xpack.eql.session.Results;\n \n+import java.io.IOException;\n import java.time.ZoneId;\n+import java.util.Map;\n \n import static org.elasticsearch.action.ActionListener.wrap;\n+import static org.elasticsearch.xpack.core.ClientHelper.ASYNC_SEARCH_ORIGIN;\n+\n+public class TransportEqlSearchAction extends HandledTransportAction<EqlSearchRequest, EqlSearchResponse>\n+    implements AsyncTaskManagementService.AsyncOperation<EqlSearchRequest, EqlSearchResponse, EqlSearchTask> {\n \n-public class TransportEqlSearchAction extends HandledTransportAction<EqlSearchRequest, EqlSearchResponse> {\n     private final SecurityContext securityContext;\n     private final ClusterService clusterService;\n     private final PlanExecutor planExecutor;\n+    private final ThreadPool threadPool;\n+    private final AsyncTaskManagementService<EqlSearchRequest, EqlSearchResponse, EqlSearchTask> asyncTaskManagementService;\n \n     @Inject\n     public TransportEqlSearchAction(Settings settings, ClusterService clusterService, TransportService transportService,", "originalCommit": "b770022914d5e8226f635002cc66f098c526cc2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMzM2OA==", "url": "https://github.com/elastic/elasticsearch/pull/56631#discussion_r424033368", "bodyText": "They are the same, I just feel like having client as an explicit dependency is a bit cleaner. Otherwise, I would need to reach into PlanExecutor and possibly mock PlanExecutor in AsyncTaskManagementServiceTests. I also don't feel like providing access to client and writableRegistry shouldn't be a PlainExecutor's concern. Especially considering that writableRegistry is not even used by PlainExecutor at the moment.", "author": "imotov", "createdAt": "2020-05-12T21:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwNzMzMQ=="}], "type": "inlineReview", "revised_code": null}]}