{"pr_number": 64406, "pr_title": "Introduce per REST endpoint media types", "pr_createdAt": "2020-10-30T11:50:10Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64406", "timeline": [{"oid": "e468fdf350c54bcfd63ee9a1f221232478c111bc", "url": "https://github.com/elastic/elasticsearch/commit/e468fdf350c54bcfd63ee9a1f221232478c111bc", "message": "Introduce per endpoint media types", "committedDate": "2020-10-30T09:28:47Z", "type": "commit"}, {"oid": "5cfa11e9db3416a4f7920806977f1333b1c837fa", "url": "https://github.com/elastic/elasticsearch/commit/5cfa11e9db3416a4f7920806977f1333b1c837fa", "message": "Merge branch 'master' into compat/parsed_media_type", "committedDate": "2020-10-30T09:45:06Z", "type": "commit"}, {"oid": "66224e74f5ede806080c282914870ebac7a8c508", "url": "https://github.com/elastic/elasticsearch/commit/66224e74f5ede806080c282914870ebac7a8c508", "message": "allow smile and cbor to parse charset param. See ClientYamlTestExecutionContext:L122", "committedDate": "2020-10-30T10:14:20Z", "type": "commit"}, {"oid": "29b27e805f8e31f7b2e21cd54ae9a2342d9398aa", "url": "https://github.com/elastic/elasticsearch/commit/29b27e805f8e31f7b2e21cd54ae9a2342d9398aa", "message": "javadocs", "committedDate": "2020-10-30T12:37:26Z", "type": "commit"}, {"oid": "46903625a056c3f615d0c593370e3c442b1a99b5", "url": "https://github.com/elastic/elasticsearch/commit/46903625a056c3f615d0c593370e3c442b1a99b5", "message": "fix javadoc", "committedDate": "2020-10-30T12:42:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MjExNg==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516182116", "bodyText": "I think the description here is a bit off/out of date ? (specifically the last 2 sentences)", "author": "jakelandis", "createdAt": "2020-11-02T18:43:22Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A registry of mappings between String typeWithSubtype to a MediaType instances. For instance application/json to XContentType.JSON\n+ * Defines parameters that are allowed for media types and a regex to validate them.\n+ * Specifies format path parameter values that are used to specify requested response Content-Type.\n+ */", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU5MTQzOA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516591438", "bodyText": "updated. Let me know if looks better.", "author": "pgomulka", "createdAt": "2020-11-03T11:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MjExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyNzM5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516927396", "bodyText": "how about something like this:\n\nMultiple header represenations may map to a single {@link MediaType} for example, \"application/json\" and \"application/vnd.elasticsearch+json\" both represent a JSON MediaType. A MediaType can have only one query parameter representation. For example \"json\" (case insensitive) maps back to a JSON media type. \n\nAdditionally, a http header may optionally have parameters. For example \"application/json; charset=utf-8\". This class also allows to define a regular expression for valid values of charset.", "author": "jakelandis", "createdAt": "2020-11-03T20:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4MjExNg=="}], "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\nindex 2b7a070e06c..0984a4cdbc1 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\n\n@@ -19,8 +19,6 @@\n \n package org.elasticsearch.common.xcontent;\n \n-import org.elasticsearch.common.collect.Tuple;\n-\n import java.util.HashMap;\n import java.util.Locale;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NzM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516187383", "bodyText": "I would prefer to avoid using Tuple in interfaces. Rather a container object (which is essentially a tuple) to hold the two pieces of state. It helps with more readable code and future additions that may require more then two items. i.e. Set<MediaTypeHeader>\n(which I think would also help with naming this method to httpHeaders() ...technically these are valid headers, not mappings, they are valid ones are used to find the mappings. )", "author": "jakelandis", "createdAt": "2020-11-02T18:53:10Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -19,34 +19,31 @@\n \n package org.elasticsearch.common.xcontent;\n \n+import org.elasticsearch.common.collect.Tuple;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n  * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n  * Media types are used as values on Content-Type and Accept headers\n  * format is an URL parameter, specifies response media type.\n  */\n public interface MediaType {\n-    /**\n-     * Returns a type part of a MediaType\n-     * i.e. application for application/json\n-     */\n-    String type();\n+    String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n+    String VERSION_PATTERN = \"\\\\d+\";\n \n-    /**\n-     * Returns a subtype part of a MediaType.\n-     * i.e. json for application/json\n-     */\n-    String subtype();\n \n     /**\n      * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n      * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt\n      */\n-    String format();\n+    String formatPathParameter();\n \n     /**\n-     * returns a string representation of a media type.\n+     * returns a set of Tuples where a key is a sting - MediaType's type with subtype i.e application/json\n+     * and a value is a map of parameters to be validated.\n+     * Map's key is a parameter name, value is a parameter regex which is used for validation\n      */\n-    default String typeWithSubtype(){\n-        return type() + \"/\" + subtype();\n-    }\n+    Set<Tuple<String, Map<String,String>>> mediaTypeMappings();", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4OTUwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516189509", "bodyText": "Also, can the Pattern be part of return e.g. ``Set<...Map<String, String>>> -> Set<...Map<String, Pattern>>>` ?\nI remember this discussion before, but can't remember the original reason why it is string well enough or if this is still the case.", "author": "jakelandis", "createdAt": "2020-11-02T18:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NzM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5MTM2NA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516491364", "bodyText": "Agree - a container object would be better here.\nI am not sure about the MediaTypeHeader or httpHeaders names. httpHeaders I would expect to be something like Accept or Content-Type, and we want values here.\nHow about MediaTypeValue ? and mediaTypeValues method?\nre String/Pattern. We want to parse regex case insensitively. If we define a Pattern ,then all methods would have to remember to set case insensitive flag - easy to miss. With a string and a javadoc mentioning how it will be parsed (added now) we can make sure we parse case insensitively.", "author": "pgomulka", "createdAt": "2020-11-03T08:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NzM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex 3136e8d94c4..60e10010e3e 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -33,17 +33,26 @@ public interface MediaType {\n     String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n     String VERSION_PATTERN = \"\\\\d+\";\n \n+    /**\n+     * Returns a corresponding format path parameter for a MediaType.\n+     * i.e. ?format=txt for plain/text media type\n+     */\n+    String queryParameter();\n \n     /**\n-     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n-     * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt\n+     * returns a set of MediaTypeValues - allowed media type values on Accept or Content-Type headers\n+     * Also defines parameters for validation.\n      */\n-    String formatPathParameter();\n+    Set<MediaTypeValue> mediaTypeValues();\n \n     /**\n-     * returns a set of Tuples where a key is a sting - MediaType's type with subtype i.e application/json\n-     * and a value is a map of parameters to be validated.\n-     * Map's key is a parameter name, value is a parameter regex which is used for validation\n+     * A class to represent supported mediaType values i.e. application/json and parameters to be validated.\n+     * Parameters for validation is a map where a key is a parameter name, value is a parameter regex which is used for validation.\n+     * Regex will be applied with case insensitivity.\n      */\n-    Set<Tuple<String, Map<String,String>>> mediaTypeMappings();\n+    class MediaTypeValue extends Tuple<String, Map<String, String>> {\n+        public MediaTypeValue(String mediaTypeValue, Map<String, String> parametersForValidation) {\n+            super(mediaTypeValue, parametersForValidation);\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwNjExMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516206111", "bodyText": "I would suggest to change this to queryParameter (drop the format, but leave as an example in the javadoc). If this is named queryParamter and the other method is httpHeaders I think that it makes it clear implementing this class is a way to describe a MediaType.\n(also can you update the java doc...no need to mention subtype anymore, but a and example of ?format=json would be useful.", "author": "jakelandis", "createdAt": "2020-11-02T19:30:09Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -19,34 +19,31 @@\n \n package org.elasticsearch.common.xcontent;\n \n+import org.elasticsearch.common.collect.Tuple;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n  * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n  * Media types are used as values on Content-Type and Accept headers\n  * format is an URL parameter, specifies response media type.\n  */\n public interface MediaType {\n-    /**\n-     * Returns a type part of a MediaType\n-     * i.e. application for application/json\n-     */\n-    String type();\n+    String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n+    String VERSION_PATTERN = \"\\\\d+\";\n \n-    /**\n-     * Returns a subtype part of a MediaType.\n-     * i.e. json for application/json\n-     */\n-    String subtype();\n \n     /**\n      * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n      * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt\n      */\n-    String format();\n+    String formatPathParameter();", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex 3136e8d94c4..60e10010e3e 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -33,17 +33,26 @@ public interface MediaType {\n     String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n     String VERSION_PATTERN = \"\\\\d+\";\n \n+    /**\n+     * Returns a corresponding format path parameter for a MediaType.\n+     * i.e. ?format=txt for plain/text media type\n+     */\n+    String queryParameter();\n \n     /**\n-     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n-     * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt\n+     * returns a set of MediaTypeValues - allowed media type values on Accept or Content-Type headers\n+     * Also defines parameters for validation.\n      */\n-    String formatPathParameter();\n+    Set<MediaTypeValue> mediaTypeValues();\n \n     /**\n-     * returns a set of Tuples where a key is a sting - MediaType's type with subtype i.e application/json\n-     * and a value is a map of parameters to be validated.\n-     * Map's key is a parameter name, value is a parameter regex which is used for validation\n+     * A class to represent supported mediaType values i.e. application/json and parameters to be validated.\n+     * Parameters for validation is a map where a key is a parameter name, value is a parameter regex which is used for validation.\n+     * Regex will be applied with case insensitivity.\n      */\n-    Set<Tuple<String, Map<String,String>>> mediaTypeMappings();\n+    class MediaTypeValue extends Tuple<String, Map<String, String>> {\n+        public MediaTypeValue(String mediaTypeValue, Map<String, String> parametersForValidation) {\n+            super(mediaTypeValue, parametersForValidation);\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwNzIwMg==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516207202", "bodyText": "I think we should also have a VENDER_PREFIX\t= \"application/vnd.elasticsearch+\" here", "author": "jakelandis", "createdAt": "2020-11-02T19:32:17Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java", "diffHunk": "@@ -19,34 +19,31 @@\n \n package org.elasticsearch.common.xcontent;\n \n+import org.elasticsearch.common.collect.Tuple;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n  * Abstracts a <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">Media Type</a> and a format parameter.\n  * Media types are used as values on Content-Type and Accept headers\n  * format is an URL parameter, specifies response media type.\n  */\n public interface MediaType {\n-    /**\n-     * Returns a type part of a MediaType\n-     * i.e. application for application/json\n-     */\n-    String type();\n+    String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n+    String VERSION_PATTERN = \"\\\\d+\";", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NzUwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516497509", "bodyText": "agree, but I think it should be in XContentType.", "author": "pgomulka", "createdAt": "2020-11-03T08:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwNzIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\nindex 3136e8d94c4..60e10010e3e 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaType.java\n\n@@ -33,17 +33,26 @@ public interface MediaType {\n     String COMPATIBLE_WITH_PARAMETER_NAME = \"compatible-with\";\n     String VERSION_PATTERN = \"\\\\d+\";\n \n+    /**\n+     * Returns a corresponding format path parameter for a MediaType.\n+     * i.e. ?format=txt for plain/text media type\n+     */\n+    String queryParameter();\n \n     /**\n-     * Returns a corresponding format for a MediaType. i.e. json for application/json media type\n-     * Can differ from the MediaType's subtype i.e plain/text has a subtype of text but format is txt\n+     * returns a set of MediaTypeValues - allowed media type values on Accept or Content-Type headers\n+     * Also defines parameters for validation.\n      */\n-    String formatPathParameter();\n+    Set<MediaTypeValue> mediaTypeValues();\n \n     /**\n-     * returns a set of Tuples where a key is a sting - MediaType's type with subtype i.e application/json\n-     * and a value is a map of parameters to be validated.\n-     * Map's key is a parameter name, value is a parameter regex which is used for validation\n+     * A class to represent supported mediaType values i.e. application/json and parameters to be validated.\n+     * Parameters for validation is a map where a key is a parameter name, value is a parameter regex which is used for validation.\n+     * Regex will be applied with case insensitivity.\n      */\n-    Set<Tuple<String, Map<String,String>>> mediaTypeMappings();\n+    class MediaTypeValue extends Tuple<String, Map<String, String>> {\n+        public MediaTypeValue(String mediaTypeValue, Map<String, String> parametersForValidation) {\n+            super(mediaTypeValue, parametersForValidation);\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMjI0OA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516212248", "bodyText": "can you log an issue for more stricter parsing and add a TODO that references that to remove this ? Also, probably good to mention that this class can currently return null for unknown mediaTypes, but once issue_number is implemented that won't be possible, so don't rely on null return values.", "author": "jakelandis", "createdAt": "2020-11-02T19:42:14Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A raw result of parsing media types from Accept or Content-Type headers.\n+ * It follow parsing and validates as per  rules defined in https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+ * Can be resolved to <code>MediaType</code>\n+ * @see MediaType\n+ * @see MediaTypeRegistry\n+ */\n+public class ParsedMediaType {\n+    //sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request\n+    public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\nindex 3eef3c1ac6b..70ff2534032 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n\n@@ -33,7 +33,9 @@ import java.util.regex.Pattern;\n  * @see MediaTypeRegistry\n  */\n public class ParsedMediaType {\n-    //sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request\n+    // TODO this should be removed once strict parsing is implemented https://github.com/elastic/elasticsearch/issues/63080\n+    // sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request.\n+    // For this value Parsing returns null.\n     public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n \n     private final String type;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMjc2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516212761", "bodyText": "can you add or null if no media type could be found", "author": "jakelandis", "createdAt": "2020-11-02T19:43:16Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A raw result of parsing media types from Accept or Content-Type headers.\n+ * It follow parsing and validates as per  rules defined in https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+ * Can be resolved to <code>MediaType</code>\n+ * @see MediaType\n+ * @see MediaTypeRegistry\n+ */\n+public class ParsedMediaType {\n+    //sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request\n+    public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n+\n+    private final String type;\n+    private final String subType;\n+    private final Map<String, String> parameters;\n+    // tchar pattern as defined by RFC7230 section 3.2.6\n+    private static final Pattern TCHAR_PATTERN = Pattern.compile(\"[a-zA-z0-9!#$%&'*+\\\\-.\\\\^_`|~]+\");\n+\n+    private ParsedMediaType(String type, String subType, Map<String, String> parameters) {\n+        this.type = type;\n+        this.subType = subType;\n+        this.parameters = Collections.unmodifiableMap(parameters);\n+    }\n+\n+    /**\n+     * The parsed mime type without the associated parameters. Will always return lowercase.\n+     */\n+    public String mimeTypeWithoutParams() {\n+        return type + \"/\" + subType;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+        return parameters;\n+    }\n+\n+    /**\n+     * Parses a header value into it's parts.\n+     *\n+     * @return a {@link ParsedMediaType} if the header could be parsed. TODO: don't return null\n+     * @throws IllegalArgumentException if the header is malformed\n+     */\n+    public static ParsedMediaType parseMediaType(String headerValue) {\n+        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n+            return null;\n+        }\n+        if (headerValue != null) {\n+            final String[] elements = headerValue.toLowerCase(Locale.ROOT).split(\"[\\\\s\\\\t]*;\");\n+\n+            final String[] splitMediaType = elements[0].split(\"/\");\n+            if ((splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0].trim()).matches()\n+                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) == false) {\n+                throw new IllegalArgumentException(\"invalid media type [\" + headerValue + \"]\");\n+            }\n+            if (elements.length == 1) {\n+                return new ParsedMediaType(splitMediaType[0].trim(), splitMediaType[1].trim(), Collections.emptyMap());\n+            } else {\n+                Map<String, String> parameters = new HashMap<>();\n+                for (int i = 1; i < elements.length; i++) {\n+                    String paramsAsString = elements[i].trim();\n+                    if (paramsAsString.isEmpty()) {\n+                        continue;\n+                    }\n+                    String[] keyValueParam = elements[i].trim().split(\"=\");\n+                    if (keyValueParam.length == 2) {\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT).trim();\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT).trim();\n+                        parameters.put(parameterName, parameterValue);\n+                    } else {\n+                        throw new IllegalArgumentException(\"invalid parameters for header [\" + headerValue + \"]\");\n+                    }\n+                }\n+                return new ParsedMediaType(splitMediaType[0].trim().toLowerCase(Locale.ROOT),\n+                    splitMediaType[1].trim().toLowerCase(Locale.ROOT), parameters);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Resolves this instance to a MediaType instance defined in given MediaTypeRegistry.\n+     * Performs validation against parameters.\n+     * @param mediaTypeRegistry a registry where a mapping between a raw media type to an instance MediaType is defined\n+     * @return a MediaType instance", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\nindex 3eef3c1ac6b..70ff2534032 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n\n@@ -33,7 +33,9 @@ import java.util.regex.Pattern;\n  * @see MediaTypeRegistry\n  */\n public class ParsedMediaType {\n-    //sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request\n+    // TODO this should be removed once strict parsing is implemented https://github.com/elastic/elasticsearch/issues/63080\n+    // sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request.\n+    // For this value Parsing returns null.\n     public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n \n     private final String type;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNTkyMg==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516215922", "bodyText": "is this intended be commented out ?", "author": "jakelandis", "createdAt": "2020-11-02T19:49:06Z", "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ParsedMediaTypeTests.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class ParsedMediaTypeTests extends ESTestCase {\n+\n+    MediaTypeRegistry<XContentType> mediaTypeRegistry = new MediaTypeRegistry<XContentType>()\n+        .register(XContentType.values());\n+\n+    public void testJsonWithParameters() throws Exception {\n+        String mediaType = \"application/vnd.elasticsearch+json\";\n+        assertThat(ParsedMediaType.parseMediaType(mediaType).getParameters(),\n+            equalTo(Collections.emptyMap()));\n+        assertThat(ParsedMediaType.parseMediaType(mediaType + \";\").getParameters(),\n+            equalTo(Collections.emptyMap()));\n+        assertThat(ParsedMediaType.parseMediaType(mediaType + \"; charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\")));\n+        assertThat(ParsedMediaType.parseMediaType(mediaType + \"; compatible-with=123;charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"compatible-with\", \"123\")));\n+    }\n+\n+    public void testWhiteSpaceInTypeSubtype() {\n+        String mediaType = \" application/vnd.elasticsearch+json \";\n+        assertThat(ParsedMediaType.parseMediaType(mediaType).toMediaType(mediaTypeRegistry),\n+            equalTo(XContentType.JSON));\n+\n+        assertThat(ParsedMediaType.parseMediaType(mediaType + \"; compatible-with=123; charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"compatible-with\", \"123\")));\n+        assertThat(ParsedMediaType.parseMediaType(mediaType + \"; compatible-with=123;\\n charset=UTF-8\").getParameters(),\n+            equalTo(Map.of(\"charset\", \"utf-8\", \"compatible-with\", \"123\")));\n+\n+\n+    }\n+\n+    public void testInvalidParameters() {\n+        String mediaType = \"application/vnd.elasticsearch+json\";\n+        expectThrows(IllegalArgumentException.class, () -> ParsedMediaType.parseMediaType(mediaType + \"; keyvalueNoEqualsSign\")\n+            .toMediaType(mediaTypeRegistry));\n+        // allowing spaces between =\n+        // expectThrows(IllegalArgumentException.class, () -> ParsedMediaType.parseMediaType(mediaType + \"; key = value\")\n+        //            .toMediaType(mediaTypeRegistry));", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMDU1MA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516520550", "bodyText": "yes, I intentionally left that commented out.\nthe specs disallows spaces around = in parameters, so I think this makes it clear that we made a conscious decision to allow it.\nbut maybe it would be better to just comment about the trim we de on ParsedMediaType?", "author": "pgomulka", "createdAt": "2020-11-03T09:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MTY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516571659", "bodyText": "I moved a comment to parsing method and removed that commented out testcase", "author": "pgomulka", "createdAt": "2020-11-03T10:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNTkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ParsedMediaTypeTests.java b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ParsedMediaTypeTests.java\nindex 2f63e4e2274..15b01014830 100644\n--- a/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ParsedMediaTypeTests.java\n+++ b/libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ParsedMediaTypeTests.java\n\n@@ -54,17 +54,13 @@ public class ParsedMediaTypeTests extends ESTestCase {\n             equalTo(Map.of(\"charset\", \"utf-8\", \"compatible-with\", \"123\")));\n         assertThat(ParsedMediaType.parseMediaType(mediaType + \"; compatible-with=123;\\n charset=UTF-8\").getParameters(),\n             equalTo(Map.of(\"charset\", \"utf-8\", \"compatible-with\", \"123\")));\n-\n-\n     }\n \n     public void testInvalidParameters() {\n         String mediaType = \"application/vnd.elasticsearch+json\";\n         expectThrows(IllegalArgumentException.class, () -> ParsedMediaType.parseMediaType(mediaType + \"; keyvalueNoEqualsSign\")\n             .toMediaType(mediaTypeRegistry));\n-        // allowing spaces between =\n-        // expectThrows(IllegalArgumentException.class, () -> ParsedMediaType.parseMediaType(mediaType + \"; key = value\")\n-        //            .toMediaType(mediaTypeRegistry));\n+\n         expectThrows(IllegalArgumentException.class, () -> ParsedMediaType.parseMediaType(mediaType + \"; key=\")\n             .toMediaType(mediaTypeRegistry));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNzk4NA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516217984", "bodyText": "For 7.x we will want to issue a deprecation warning for scenario... an known media type but with unknown parameters will result in ?? (json i think)", "author": "jakelandis", "createdAt": "2020-11-02T19:53:09Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A raw result of parsing media types from Accept or Content-Type headers.\n+ * It follow parsing and validates as per  rules defined in https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+ * Can be resolved to <code>MediaType</code>\n+ * @see MediaType\n+ * @see MediaTypeRegistry\n+ */\n+public class ParsedMediaType {\n+    //sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request\n+    public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n+\n+    private final String type;\n+    private final String subType;\n+    private final Map<String, String> parameters;\n+    // tchar pattern as defined by RFC7230 section 3.2.6\n+    private static final Pattern TCHAR_PATTERN = Pattern.compile(\"[a-zA-z0-9!#$%&'*+\\\\-.\\\\^_`|~]+\");\n+\n+    private ParsedMediaType(String type, String subType, Map<String, String> parameters) {\n+        this.type = type;\n+        this.subType = subType;\n+        this.parameters = Collections.unmodifiableMap(parameters);\n+    }\n+\n+    /**\n+     * The parsed mime type without the associated parameters. Will always return lowercase.\n+     */\n+    public String mimeTypeWithoutParams() {\n+        return type + \"/\" + subType;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+        return parameters;\n+    }\n+\n+    /**\n+     * Parses a header value into it's parts.\n+     *\n+     * @return a {@link ParsedMediaType} if the header could be parsed. TODO: don't return null\n+     * @throws IllegalArgumentException if the header is malformed\n+     */\n+    public static ParsedMediaType parseMediaType(String headerValue) {\n+        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n+            return null;\n+        }\n+        if (headerValue != null) {\n+            final String[] elements = headerValue.toLowerCase(Locale.ROOT).split(\"[\\\\s\\\\t]*;\");\n+\n+            final String[] splitMediaType = elements[0].split(\"/\");\n+            if ((splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0].trim()).matches()\n+                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) == false) {\n+                throw new IllegalArgumentException(\"invalid media type [\" + headerValue + \"]\");\n+            }\n+            if (elements.length == 1) {\n+                return new ParsedMediaType(splitMediaType[0].trim(), splitMediaType[1].trim(), Collections.emptyMap());\n+            } else {\n+                Map<String, String> parameters = new HashMap<>();\n+                for (int i = 1; i < elements.length; i++) {\n+                    String paramsAsString = elements[i].trim();\n+                    if (paramsAsString.isEmpty()) {\n+                        continue;\n+                    }\n+                    String[] keyValueParam = elements[i].trim().split(\"=\");\n+                    if (keyValueParam.length == 2) {\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT).trim();\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT).trim();\n+                        parameters.put(parameterName, parameterValue);\n+                    } else {\n+                        throw new IllegalArgumentException(\"invalid parameters for header [\" + headerValue + \"]\");\n+                    }\n+                }\n+                return new ParsedMediaType(splitMediaType[0].trim().toLowerCase(Locale.ROOT),\n+                    splitMediaType[1].trim().toLowerCase(Locale.ROOT), parameters);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Resolves this instance to a MediaType instance defined in given MediaTypeRegistry.\n+     * Performs validation against parameters.\n+     * @param mediaTypeRegistry a registry where a mapping between a raw media type to an instance MediaType is defined\n+     * @return a MediaType instance\n+     */\n+    public  <T extends MediaType> T toMediaType(MediaTypeRegistry<T> mediaTypeRegistry) {\n+        T type = mediaTypeRegistry.typeWithSubtypeToMediaType(mimeTypeWithoutParams());\n+        if (type != null) {\n+\n+            Map<String, Pattern> registeredParams = mediaTypeRegistry.parametersFor(mimeTypeWithoutParams());\n+            for (Map.Entry<String, String> givenParamEntry : parameters.entrySet()) {\n+                if (isValidParameter(givenParamEntry.getKey(), givenParamEntry.getValue(), registeredParams) == false) {\n+                    return null;", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3NjE3NA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516576174", "bodyText": "good point.. somehow I thought that unknown parameters should not be allowed.\nBut so far we allowed this and we would succeed in parsing.\nThis should be fixed by #63080", "author": "pgomulka", "createdAt": "2020-11-03T10:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzOTM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516939397", "bodyText": "The concern here is that someone requests application/yaml;charset=Windows-1252, they will now get back application/json (since it is the null/default), right ?\nI think this should log deprecation warning about an unsupported charset and still return the type.", "author": "jakelandis", "createdAt": "2020-11-03T20:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3NzM3NA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517177374", "bodyText": "good point.. how about we remove the validation in this PR?", "author": "pgomulka", "createdAt": "2020-11-04T08:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5ODM5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517198396", "bodyText": "I have removed charset validation from this PR. We have an infrastructure to do this with this PR, but it should be enabled in a separate PR just to make it more focused. I added a note here #63080", "author": "pgomulka", "createdAt": "2020-11-04T09:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNzk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\nindex 3eef3c1ac6b..70ff2534032 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n\n@@ -33,7 +33,9 @@ import java.util.regex.Pattern;\n  * @see MediaTypeRegistry\n  */\n public class ParsedMediaType {\n-    //sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request\n+    // TODO this should be removed once strict parsing is implemented https://github.com/elastic/elasticsearch/issues/63080\n+    // sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request.\n+    // For this value Parsing returns null.\n     public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n \n     private final String type;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyMTk1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516221953", "bodyText": "It's not clear from here if the \"charset\" is 'required', or if it is present only allows for these values. I think using a first class object (not a Tuple) would help with readability here.", "author": "jakelandis", "createdAt": "2020-11-02T20:00:46Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -47,14 +49,26 @@ public String mediaType() {\n         }\n \n         @Override\n-        public String subtype() {\n+        public String formatPathParameter() {\n             return \"json\";\n         }\n \n         @Override\n         public XContent xContent() {\n             return JsonXContent.jsonXContent;\n         }\n+\n+        @Override\n+        public Set<Tuple<String, Map<String, String>>> mediaTypeMappings() {\n+            return Set.of(\n+                Tuple.tuple(\"application/json\", Map.of(\"charset\", \"UTF-8\")),", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwMTQ3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516601471", "bodyText": "agree. It should look better with a class object here.", "author": "pgomulka", "createdAt": "2020-11-03T11:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyMTk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\nindex b77b5705fa6..6b9c6654e86 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n\n@@ -49,7 +48,7 @@ public enum XContentType implements MediaType {\n         }\n \n         @Override\n-        public String formatPathParameter() {\n+        public String queryParameter() {\n             return \"json\";\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDc0NA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516224744", "bodyText": "Since this can now be either Accept or Content-Type we probably want to change this to MediaTypeHeaderException", "author": "jakelandis", "createdAt": "2020-11-02T20:06:26Z", "path": "server/src/main/java/org/elasticsearch/rest/RestRequest.java", "diffHunk": "@@ -86,15 +88,15 @@ protected RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String\n \n     private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String> params, String path,\n                         Map<String, List<String>> headers, HttpRequest httpRequest, HttpChannel httpChannel, long requestId) {\n-        final XContentType xContentType;\n-        try {\n-            xContentType = parseContentType(headers.get(\"Content-Type\"));\n-        } catch (final IllegalArgumentException e) {\n+        try{\n+            this.parsedAccept = parseHeaderWithMediaType(httpRequest.getHeaders(), \"Accept\");\n+            this.parsedContentType = parseHeaderWithMediaType(httpRequest.getHeaders(), \"Content-Type\");\n+            if (parsedContentType != null) {\n+                this.xContentType.set(parsedContentType.toMediaType(XContentType.MEDIA_TYPE_REGISTRY));\n+            }\n+        }catch (IllegalArgumentException e){\n             throw new ContentTypeHeaderException(e);", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestRequest.java b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\nindex 26dd9e7776a..400ad6ab119 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n\n@@ -95,7 +95,7 @@ public class RestRequest implements ToXContent.Params {\n                 this.xContentType.set(parsedContentType.toMediaType(XContentType.MEDIA_TYPE_REGISTRY));\n             }\n         }catch (IllegalArgumentException e){\n-            throw new ContentTypeHeaderException(e);\n+            throw new MediaTypeHeaderException(e);\n         }\n         this.xContentRegistry = xContentRegistry;\n         this.httpRequest = httpRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNTc1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516225759", "bodyText": "might to include the header name in the exception for troubleshooting.", "author": "jakelandis", "createdAt": "2020-11-02T20:08:25Z", "path": "server/src/main/java/org/elasticsearch/rest/RestRequest.java", "diffHunk": "@@ -104,6 +106,22 @@ private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String>\n         this.requestId = requestId;\n     }\n \n+    private static @Nullable ParsedMediaType parseHeaderWithMediaType(Map<String, List<String>> headers, String headerName) {\n+        //TOOD: shouldn't this be case insensitive ?\n+        List<String> header = headers.get(headerName);\n+        if (header == null || header.isEmpty()) {\n+            return null;\n+        } else if (header.size() > 1) {\n+            throw new IllegalArgumentException(\"only one value for the  header should be provided\");", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestRequest.java b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\nindex 26dd9e7776a..400ad6ab119 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n\n@@ -107,12 +107,13 @@ public class RestRequest implements ToXContent.Params {\n     }\n \n     private static @Nullable ParsedMediaType parseHeaderWithMediaType(Map<String, List<String>> headers, String headerName) {\n-        //TOOD: shouldn't this be case insensitive ?\n+        //TODO: make all usages of headers case-insensitive\n         List<String> header = headers.get(headerName);\n         if (header == null || header.isEmpty()) {\n             return null;\n         } else if (header.size() > 1) {\n-            throw new IllegalArgumentException(\"only one value for the  header should be provided\");\n+            throw new IllegalArgumentException(\"Incorrect header [\"+headerName+\"]. \" +\n+                \"Only one value should be provided\");\n         }\n         String rawContentType = header.get(0);\n         if (Strings.hasText(rawContentType)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNjk1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516226953", "bodyText": "should we resolve this TODO with this PR ?", "author": "jakelandis", "createdAt": "2020-11-02T20:10:58Z", "path": "server/src/main/java/org/elasticsearch/rest/RestRequest.java", "diffHunk": "@@ -104,6 +106,22 @@ private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String>\n         this.requestId = requestId;\n     }\n \n+    private static @Nullable ParsedMediaType parseHeaderWithMediaType(Map<String, List<String>> headers, String headerName) {\n+        //TOOD: shouldn't this be case insensitive ?", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MzkwNw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516553907", "bodyText": "Probably better to apply this in a new PR. This would apply to all usages of headers. RFC says that it should be case-insensitive", "author": "pgomulka", "createdAt": "2020-11-03T10:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNjk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestRequest.java b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\nindex 26dd9e7776a..400ad6ab119 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n\n@@ -107,12 +107,13 @@ public class RestRequest implements ToXContent.Params {\n     }\n \n     private static @Nullable ParsedMediaType parseHeaderWithMediaType(Map<String, List<String>> headers, String headerName) {\n-        //TOOD: shouldn't this be case insensitive ?\n+        //TODO: make all usages of headers case-insensitive\n         List<String> header = headers.get(headerName);\n         if (header == null || header.isEmpty()) {\n             return null;\n         } else if (header.size() > 1) {\n-            throw new IllegalArgumentException(\"only one value for the  header should be provided\");\n+            throw new IllegalArgumentException(\"Incorrect header [\"+headerName+\"]. \" +\n+                \"Only one value should be provided\");\n         }\n         String rawContentType = header.get(0);\n         if (Strings.hasText(rawContentType)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyOTU0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516229547", "bodyText": "whoops .. missing line break.", "author": "jakelandis", "createdAt": "2020-11-02T20:16:28Z", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java", "diffHunk": "@@ -53,8 +53,8 @@ public ClientYamlTestResponse(Response response) throws IOException {\n         this.response = response;\n         if (response.getEntity() != null) {\n             String contentType = response.getHeader(\"Content-Type\");\n-            this.bodyContentType = XContentType.fromMediaType(contentType);\n-            try {\n+            //Do not know about sql media types. relies on null\n+            this.bodyContentType = getContentTypeIgnoreExceptions(contentType);            try {", "originalCommit": "46903625a056c3f615d0c593370e3c442b1a99b5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "chunk": "diff --git a/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java\nindex 0d1bf320893..819f33a1b32 100644\n--- a/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java\n+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java\n\n@@ -54,7 +54,8 @@ public class ClientYamlTestResponse {\n         if (response.getEntity() != null) {\n             String contentType = response.getHeader(\"Content-Type\");\n             //Do not know about sql media types. relies on null\n-            this.bodyContentType = getContentTypeIgnoreExceptions(contentType);            try {\n+            this.bodyContentType = getContentTypeIgnoreExceptions(contentType);\n+            try {\n                 byte[] bytes = EntityUtils.toByteArray(response.getEntity());\n                 //skip parsing if we got text back (e.g. if we called _cat apis)\n                 if (bodyContentType != null) {\n"}}, {"oid": "2bda74f773d6b682deaa0c256a3568cbc0c1956c", "url": "https://github.com/elastic/elasticsearch/commit/2bda74f773d6b682deaa0c256a3568cbc0c1956c", "message": "code review follow up", "committedDate": "2020-11-03T12:15:42Z", "type": "commit"}, {"oid": "7779083b4e5ed3301bd75bfc340bff51bae2042c", "url": "https://github.com/elastic/elasticsearch/commit/7779083b4e5ed3301bd75bfc340bff51bae2042c", "message": "minor tweaks", "committedDate": "2020-11-03T12:52:14Z", "type": "commit"}, {"oid": "dd26408343b5633d4981d15207c5a714a8a44e7e", "url": "https://github.com/elastic/elasticsearch/commit/dd26408343b5633d4981d15207c5a714a8a44e7e", "message": "Merge branch 'master' into compat/introduce_per_endpoint_media_types", "committedDate": "2020-11-03T12:52:41Z", "type": "commit"}, {"oid": "94b4a0a85ece16e597818e815d958675e5879125", "url": "https://github.com/elastic/elasticsearch/commit/94b4a0a85ece16e597818e815d958675e5879125", "message": "fix test after exception msg rename", "committedDate": "2020-11-03T13:41:27Z", "type": "commit"}, {"oid": "43855911ed3ec0ad1d245cc398e7d67f59acb975", "url": "https://github.com/elastic/elasticsearch/commit/43855911ed3ec0ad1d245cc398e7d67f59acb975", "message": "rename to header value", "committedDate": "2020-11-03T15:30:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyODQ4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516928489", "bodyText": "should */* be a JSON type ? (with this lenient parsing null defaults to that..but I think it should be explicit that */* is JSON)", "author": "jakelandis", "createdAt": "2020-11-03T20:11:09Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A raw result of parsing media types from Accept or Content-Type headers.\n+ * It follow parsing and validates as per  rules defined in https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+ * Can be resolved to <code>MediaType</code>\n+ * @see MediaType\n+ * @see MediaTypeRegistry\n+ */\n+public class ParsedMediaType {\n+    // TODO this should be removed once strict parsing is implemented https://github.com/elastic/elasticsearch/issues/63080\n+    // sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request.\n+    // For this value Parsing returns null.\n+    public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n+\n+    private final String type;\n+    private final String subType;\n+    private final Map<String, String> parameters;\n+    // tchar pattern as defined by RFC7230 section 3.2.6\n+    private static final Pattern TCHAR_PATTERN = Pattern.compile(\"[a-zA-z0-9!#$%&'*+\\\\-.\\\\^_`|~]+\");\n+\n+    private ParsedMediaType(String type, String subType, Map<String, String> parameters) {\n+        this.type = type;\n+        this.subType = subType;\n+        this.parameters = Collections.unmodifiableMap(parameters);\n+    }\n+\n+    /**\n+     * The parsed mime type without the associated parameters. Will always return lowercase.\n+     */\n+    public String mediaTypeWithoutParameters() {\n+        return type + \"/\" + subType;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+        return parameters;\n+    }\n+\n+    /**\n+     * Parses a header value into it's parts.\n+     * Note: parsing can return null, but it will throw exceptions once https://github.com/elastic/elasticsearch/issues/63080 is done\n+     * Do not rely on nulls\n+     *\n+     * @return a {@link ParsedMediaType} if the header could be parsed.\n+     * @throws IllegalArgumentException if the header is malformed\n+     */\n+    public static ParsedMediaType parseMediaType(String headerValue) {\n+        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {", "originalCommit": "43855911ed3ec0ad1d245cc398e7d67f59acb975", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1Njc4NA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517156784", "bodyText": "It is a JSON type but only when used on Accept header.\n*/* or text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 are used when a user did not set an Accept header, so I think it is good that it results in null from parseMediaType. The same would be returned if header indeed was not set (and other tooling did not override it)\nWe can think of creating a new Media type where / or default java accept header maps to JSON. We then add it to default validAcceptMediaTypes.\nFor this PR I think we stay with the lenience that exist now.\nI added a note to Make media type parsing strict #63080", "author": "pgomulka", "createdAt": "2020-11-04T08:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyODQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\nindex e63f0064d58..fbae2014514 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n\n@@ -90,7 +90,8 @@ public class ParsedMediaType {\n                     if (paramsAsString.isEmpty()) {\n                         continue;\n                     }\n-                    // intentionally allowing to have spaces around `=` (RFC disallows this)\n+                    // intentionally allowing to have spaces around `=`\n+                    // https://tools.ietf.org/html/rfc7231#section-3.1.1.1 disallows this\n                     String[] keyValueParam = elements[i].trim().split(\"=\");\n                     if (keyValueParam.length == 2) {\n                         String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT).trim();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzNTkwMA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516935900", "bodyText": "The only mention I saw in the spec was \" No whitespace is allowed between the header field-name and colon. \"\nThe field value is not covered by this mandate:\nheader-field   = field-name \":\" OWS field-value OWS\n\nThis does not explicitly state that the field-value can not have whitespace. For example, \"application/<space>json\" isn't forbidden by the HTTP spec (spaces are allowed in the field-value). The correctness of spaces in mimetypes or parameters would be defined by https://tools.ietf.org/html/rfc6838 (media type spec). While it is pretty clear that \"application/<space>json\" != \"application/json\", I think we should still allow it since that is a nightmare to troubleshoot. Also the spec is not clear on if ;<space>param<space>=<space>value is acceptable. I think it actually is.\nI would suggest to remove the \"RFC disallows this\".", "author": "jakelandis", "createdAt": "2020-11-03T20:26:23Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A raw result of parsing media types from Accept or Content-Type headers.\n+ * It follow parsing and validates as per  rules defined in https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+ * Can be resolved to <code>MediaType</code>\n+ * @see MediaType\n+ * @see MediaTypeRegistry\n+ */\n+public class ParsedMediaType {\n+    // TODO this should be removed once strict parsing is implemented https://github.com/elastic/elasticsearch/issues/63080\n+    // sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request.\n+    // For this value Parsing returns null.\n+    public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n+\n+    private final String type;\n+    private final String subType;\n+    private final Map<String, String> parameters;\n+    // tchar pattern as defined by RFC7230 section 3.2.6\n+    private static final Pattern TCHAR_PATTERN = Pattern.compile(\"[a-zA-z0-9!#$%&'*+\\\\-.\\\\^_`|~]+\");\n+\n+    private ParsedMediaType(String type, String subType, Map<String, String> parameters) {\n+        this.type = type;\n+        this.subType = subType;\n+        this.parameters = Collections.unmodifiableMap(parameters);\n+    }\n+\n+    /**\n+     * The parsed mime type without the associated parameters. Will always return lowercase.\n+     */\n+    public String mediaTypeWithoutParameters() {\n+        return type + \"/\" + subType;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+        return parameters;\n+    }\n+\n+    /**\n+     * Parses a header value into it's parts.\n+     * Note: parsing can return null, but it will throw exceptions once https://github.com/elastic/elasticsearch/issues/63080 is done\n+     * Do not rely on nulls\n+     *\n+     * @return a {@link ParsedMediaType} if the header could be parsed.\n+     * @throws IllegalArgumentException if the header is malformed\n+     */\n+    public static ParsedMediaType parseMediaType(String headerValue) {\n+        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n+            return null;\n+        }\n+        if (headerValue != null) {\n+            final String[] elements = headerValue.toLowerCase(Locale.ROOT).split(\"[\\\\s\\\\t]*;\");\n+\n+            final String[] splitMediaType = elements[0].split(\"/\");\n+            if ((splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0].trim()).matches()\n+                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) == false) {\n+                throw new IllegalArgumentException(\"invalid media type [\" + headerValue + \"]\");\n+            }\n+            if (elements.length == 1) {\n+                return new ParsedMediaType(splitMediaType[0].trim(), splitMediaType[1].trim(), Collections.emptyMap());\n+            } else {\n+                Map<String, String> parameters = new HashMap<>();\n+                for (int i = 1; i < elements.length; i++) {\n+                    String paramsAsString = elements[i].trim();\n+                    if (paramsAsString.isEmpty()) {\n+                        continue;\n+                    }\n+                    // intentionally allowing to have spaces around `=` (RFC disallows this)", "originalCommit": "43855911ed3ec0ad1d245cc398e7d67f59acb975", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE1OTMwMw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517159303", "bodyText": "by RFC I meant https://tools.ietf.org/html/rfc7231#section-3.1.1.1 where it refers to the rfc6838 (the one you quoted) and makes it more strict\n Internet media types ought to be registered with IANA according to\n   the procedures defined in [BCP13].\n\n      Note: Unlike some similar constructs in other header fields, media\n      type parameters do not allow whitespace (even \"bad\" whitespace)\n      around the \"=\" character.\n\n\n[BCP13]    Freed, N., Klensin, J., and T. Hansen, \"Media Type\nSpecifications and Registration Procedures\", BCP 13,\nRFC 6838, January 2013.", "author": "pgomulka", "createdAt": "2020-11-04T08:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzNTkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4Mjk5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517482992", "bodyText": "I missed that, sorry. You were right, probably shouldn't be lenient here, but only with the whitespace around the =.  The code here is fine, but a follow up (or on this PR) to remove adhere to that would probably be best. sorry for steering you in the wrong direction on this.", "author": "jakelandis", "createdAt": "2020-11-04T16:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzNTkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzMzQ3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517533475", "bodyText": "I will add validation around =", "author": "pgomulka", "createdAt": "2020-11-04T18:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzNTkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\nindex e63f0064d58..fbae2014514 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n\n@@ -90,7 +90,8 @@ public class ParsedMediaType {\n                     if (paramsAsString.isEmpty()) {\n                         continue;\n                     }\n-                    // intentionally allowing to have spaces around `=` (RFC disallows this)\n+                    // intentionally allowing to have spaces around `=`\n+                    // https://tools.ietf.org/html/rfc7231#section-3.1.1.1 disallows this\n                     String[] keyValueParam = elements[i].trim().split(\"=\");\n                     if (keyValueParam.length == 2) {\n                         String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT).trim();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0MDA1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r516940056", "bodyText": "can we also emit a deprecation warning ?", "author": "jakelandis", "createdAt": "2020-11-03T20:34:57Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A raw result of parsing media types from Accept or Content-Type headers.\n+ * It follow parsing and validates as per  rules defined in https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+ * Can be resolved to <code>MediaType</code>\n+ * @see MediaType\n+ * @see MediaTypeRegistry\n+ */\n+public class ParsedMediaType {\n+    // TODO this should be removed once strict parsing is implemented https://github.com/elastic/elasticsearch/issues/63080\n+    // sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request.\n+    // For this value Parsing returns null.\n+    public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n+\n+    private final String type;\n+    private final String subType;\n+    private final Map<String, String> parameters;\n+    // tchar pattern as defined by RFC7230 section 3.2.6\n+    private static final Pattern TCHAR_PATTERN = Pattern.compile(\"[a-zA-z0-9!#$%&'*+\\\\-.\\\\^_`|~]+\");\n+\n+    private ParsedMediaType(String type, String subType, Map<String, String> parameters) {\n+        this.type = type;\n+        this.subType = subType;\n+        this.parameters = Collections.unmodifiableMap(parameters);\n+    }\n+\n+    /**\n+     * The parsed mime type without the associated parameters. Will always return lowercase.\n+     */\n+    public String mediaTypeWithoutParameters() {\n+        return type + \"/\" + subType;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+        return parameters;\n+    }\n+\n+    /**\n+     * Parses a header value into it's parts.\n+     * Note: parsing can return null, but it will throw exceptions once https://github.com/elastic/elasticsearch/issues/63080 is done\n+     * Do not rely on nulls\n+     *\n+     * @return a {@link ParsedMediaType} if the header could be parsed.\n+     * @throws IllegalArgumentException if the header is malformed\n+     */\n+    public static ParsedMediaType parseMediaType(String headerValue) {\n+        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n+            return null;\n+        }\n+        if (headerValue != null) {\n+            final String[] elements = headerValue.toLowerCase(Locale.ROOT).split(\"[\\\\s\\\\t]*;\");\n+\n+            final String[] splitMediaType = elements[0].split(\"/\");\n+            if ((splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0].trim()).matches()\n+                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) == false) {\n+                throw new IllegalArgumentException(\"invalid media type [\" + headerValue + \"]\");\n+            }\n+            if (elements.length == 1) {\n+                return new ParsedMediaType(splitMediaType[0].trim(), splitMediaType[1].trim(), Collections.emptyMap());\n+            } else {\n+                Map<String, String> parameters = new HashMap<>();\n+                for (int i = 1; i < elements.length; i++) {\n+                    String paramsAsString = elements[i].trim();\n+                    if (paramsAsString.isEmpty()) {\n+                        continue;\n+                    }\n+                    // intentionally allowing to have spaces around `=` (RFC disallows this)\n+                    String[] keyValueParam = elements[i].trim().split(\"=\");\n+                    if (keyValueParam.length == 2) {\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT).trim();\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT).trim();\n+                        parameters.put(parameterName, parameterValue);\n+                    } else {\n+                        throw new IllegalArgumentException(\"invalid parameters for header [\" + headerValue + \"]\");\n+                    }\n+                }\n+                return new ParsedMediaType(splitMediaType[0].trim().toLowerCase(Locale.ROOT),\n+                    splitMediaType[1].trim().toLowerCase(Locale.ROOT), parameters);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Resolves this instance to a MediaType instance defined in given MediaTypeRegistry.\n+     * Performs validation against parameters.\n+     * @param mediaTypeRegistry a registry where a mapping between a raw media type to an instance MediaType is defined\n+     * @return a MediaType instance or null if no media type could be found or if a known parameter do not passes validation\n+     */\n+    public  <T extends MediaType> T toMediaType(MediaTypeRegistry<T> mediaTypeRegistry) {\n+        T type = mediaTypeRegistry.typeWithSubtypeToMediaType(mediaTypeWithoutParameters());\n+        if (type != null) {\n+\n+            Map<String, Pattern> registeredParams = mediaTypeRegistry.parametersFor(mediaTypeWithoutParameters());\n+            for (Map.Entry<String, String> givenParamEntry : parameters.entrySet()) {\n+                if (isValidParameter(givenParamEntry.getKey(), givenParamEntry.getValue(), registeredParams) == false) {\n+                    return null;\n+                }\n+            }\n+            return type;\n+        }\n+        return null;\n+    }\n+\n+    private boolean isValidParameter(String paramName, String value, Map<String, Pattern> registeredParams) {\n+        if(registeredParams.containsKey(paramName)){\n+            Pattern regex = registeredParams.get(paramName);\n+            return regex.matcher(value).matches();\n+        }\n+        //TODO undefined parameters are allowed until https://github.com/elastic/elasticsearch/issues/63080", "originalCommit": "43855911ed3ec0ad1d245cc398e7d67f59acb975", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3NzUzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517177535", "bodyText": "I removed the validation of charset in this PR", "author": "pgomulka", "createdAt": "2020-11-04T08:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0MDA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\nindex e63f0064d58..fbae2014514 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n\n@@ -90,7 +90,8 @@ public class ParsedMediaType {\n                     if (paramsAsString.isEmpty()) {\n                         continue;\n                     }\n-                    // intentionally allowing to have spaces around `=` (RFC disallows this)\n+                    // intentionally allowing to have spaces around `=`\n+                    // https://tools.ietf.org/html/rfc7231#section-3.1.1.1 disallows this\n                     String[] keyValueParam = elements[i].trim().split(\"=\");\n                     if (keyValueParam.length == 2) {\n                         String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT).trim();\n"}}, {"oid": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "url": "https://github.com/elastic/elasticsearch/commit/dc61731ba05c6d2338ff46cf3f3bf665b334c525", "message": "remove charset validation", "committedDate": "2020-11-04T09:24:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTUyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517629521", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(format == null) {\n          \n          \n            \n                    if (format == null) {", "author": "jaymode", "createdAt": "2020-11-04T21:02:44Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A registry for quick media type lookup.\n+ * It allows to find media type by a header value - typeWithSubtype aka mediaType without parameters.\n+ * I.e. application/json will return XContentType.JSON\n+ * Also allows to find media type by a path parameter <code>format</code>.\n+ * I.e. txt used in path _sql?format=txt will return TextFormat.PLAIN_TEXT\n+ *\n+ * Multiple header representations may map to a single {@link MediaType} for example, \"application/json\"\n+ * and \"application/vnd.elasticsearch+json\" both represent a JSON MediaType.\n+ * A MediaType can have only one query parameter representation.\n+ * For example \"json\" (case insensitive) maps back to a JSON media type.\n+ *\n+ * Additionally, a http header may optionally have parameters. For example \"application/json; charset=utf-8\".\n+ * This class also allows to define a regular expression for valid values of charset.\n+ */\n+public class MediaTypeRegistry<T extends MediaType> {\n+\n+    private Map<String, T> queryParamToMediaType = new HashMap<>();\n+    private Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+    private Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+    public T queryParamToMediaType(String format) {\n+        if(format == null) {", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\nindex c1b185fbd11..8324adfa253 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\n\n@@ -47,7 +47,7 @@ public class MediaTypeRegistry<T extends MediaType> {\n     private Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n \n     public T queryParamToMediaType(String format) {\n-        if(format == null) {\n+        if (format == null) {\n             return null;\n         }\n         return queryParamToMediaType.get(format.toLowerCase(Locale.ROOT));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTcyOA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517629728", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            queryParamToMediaType.put(mediaType.queryParameter(),mediaType);\n          \n          \n            \n                            queryParamToMediaType.put(mediaType.queryParameter(), mediaType);", "author": "jaymode", "createdAt": "2020-11-04T21:03:10Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A registry for quick media type lookup.\n+ * It allows to find media type by a header value - typeWithSubtype aka mediaType without parameters.\n+ * I.e. application/json will return XContentType.JSON\n+ * Also allows to find media type by a path parameter <code>format</code>.\n+ * I.e. txt used in path _sql?format=txt will return TextFormat.PLAIN_TEXT\n+ *\n+ * Multiple header representations may map to a single {@link MediaType} for example, \"application/json\"\n+ * and \"application/vnd.elasticsearch+json\" both represent a JSON MediaType.\n+ * A MediaType can have only one query parameter representation.\n+ * For example \"json\" (case insensitive) maps back to a JSON media type.\n+ *\n+ * Additionally, a http header may optionally have parameters. For example \"application/json; charset=utf-8\".\n+ * This class also allows to define a regular expression for valid values of charset.\n+ */\n+public class MediaTypeRegistry<T extends MediaType> {\n+\n+    private Map<String, T> queryParamToMediaType = new HashMap<>();\n+    private Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+    private Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+    public T queryParamToMediaType(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return queryParamToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public T typeWithSubtypeToMediaType(String typeWithSubtype) {\n+        return typeWithSubtypeToMediaType.get(typeWithSubtype.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public Map<String, Pattern> parametersFor(String typeWithSubtype) {\n+        return parametersMap.get(typeWithSubtype);\n+    }\n+\n+    public MediaTypeRegistry<T> register(T[] mediaTypes ) {\n+        for (T mediaType : mediaTypes) {\n+            Set<MediaType.HeaderValue> tuples = mediaType.headerValues();\n+            for (MediaType.HeaderValue headerValue : tuples) {\n+                queryParamToMediaType.put(mediaType.queryParameter(),mediaType);", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\nindex c1b185fbd11..8324adfa253 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\n\n@@ -47,7 +47,7 @@ public class MediaTypeRegistry<T extends MediaType> {\n     private Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n \n     public T queryParamToMediaType(String format) {\n-        if(format == null) {\n+        if (format == null) {\n             return null;\n         }\n         return queryParamToMediaType.get(format.toLowerCase(Locale.ROOT));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTg2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517629862", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String,Pattern> convertPatterns(Map<String,String> paramNameAndValueRegex){\n          \n          \n            \n                private Map<String,Pattern> convertPatterns(Map<String, String> paramNameAndValueRegex) {", "author": "jaymode", "createdAt": "2020-11-04T21:03:28Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A registry for quick media type lookup.\n+ * It allows to find media type by a header value - typeWithSubtype aka mediaType without parameters.\n+ * I.e. application/json will return XContentType.JSON\n+ * Also allows to find media type by a path parameter <code>format</code>.\n+ * I.e. txt used in path _sql?format=txt will return TextFormat.PLAIN_TEXT\n+ *\n+ * Multiple header representations may map to a single {@link MediaType} for example, \"application/json\"\n+ * and \"application/vnd.elasticsearch+json\" both represent a JSON MediaType.\n+ * A MediaType can have only one query parameter representation.\n+ * For example \"json\" (case insensitive) maps back to a JSON media type.\n+ *\n+ * Additionally, a http header may optionally have parameters. For example \"application/json; charset=utf-8\".\n+ * This class also allows to define a regular expression for valid values of charset.\n+ */\n+public class MediaTypeRegistry<T extends MediaType> {\n+\n+    private Map<String, T> queryParamToMediaType = new HashMap<>();\n+    private Map<String, T> typeWithSubtypeToMediaType = new HashMap<>();\n+    private Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n+\n+    public T queryParamToMediaType(String format) {\n+        if(format == null) {\n+            return null;\n+        }\n+        return queryParamToMediaType.get(format.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public T typeWithSubtypeToMediaType(String typeWithSubtype) {\n+        return typeWithSubtypeToMediaType.get(typeWithSubtype.toLowerCase(Locale.ROOT));\n+    }\n+\n+    public Map<String, Pattern> parametersFor(String typeWithSubtype) {\n+        return parametersMap.get(typeWithSubtype);\n+    }\n+\n+    public MediaTypeRegistry<T> register(T[] mediaTypes ) {\n+        for (T mediaType : mediaTypes) {\n+            Set<MediaType.HeaderValue> tuples = mediaType.headerValues();\n+            for (MediaType.HeaderValue headerValue : tuples) {\n+                queryParamToMediaType.put(mediaType.queryParameter(),mediaType);\n+                typeWithSubtypeToMediaType.put(headerValue.v1(), mediaType);\n+                parametersMap.put(headerValue.v1(), convertPatterns(headerValue.v2()));\n+            }\n+        }\n+        return this;\n+    }\n+\n+    private Map<String,Pattern> convertPatterns(Map<String,String> paramNameAndValueRegex){", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\nindex c1b185fbd11..8324adfa253 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/MediaTypeRegistry.java\n\n@@ -47,7 +47,7 @@ public class MediaTypeRegistry<T extends MediaType> {\n     private Map<String, Map<String, Pattern>> parametersMap = new HashMap<>();\n \n     public T queryParamToMediaType(String format) {\n-        if(format == null) {\n+        if (format == null) {\n             return null;\n         }\n         return queryParamToMediaType.get(format.toLowerCase(Locale.ROOT));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDg1NA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517630854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(registeredParams.containsKey(paramName)){\n          \n          \n            \n                    if (registeredParams.containsKey(paramName)) {", "author": "jaymode", "createdAt": "2020-11-04T21:05:23Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A raw result of parsing media types from Accept or Content-Type headers.\n+ * It follow parsing and validates as per  rules defined in https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+ * Can be resolved to <code>MediaType</code>\n+ * @see MediaType\n+ * @see MediaTypeRegistry\n+ */\n+public class ParsedMediaType {\n+    // TODO this should be removed once strict parsing is implemented https://github.com/elastic/elasticsearch/issues/63080\n+    // sun.net.www.protocol.http.HttpURLConnection sets a default Accept header if it was not provided on a request.\n+    // For this value Parsing returns null.\n+    public static final String DEFAULT_ACCEPT_STRING = \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\";\n+\n+    private final String type;\n+    private final String subType;\n+    private final Map<String, String> parameters;\n+    // tchar pattern as defined by RFC7230 section 3.2.6\n+    private static final Pattern TCHAR_PATTERN = Pattern.compile(\"[a-zA-z0-9!#$%&'*+\\\\-.\\\\^_`|~]+\");\n+\n+    private ParsedMediaType(String type, String subType, Map<String, String> parameters) {\n+        this.type = type;\n+        this.subType = subType;\n+        this.parameters = Collections.unmodifiableMap(parameters);\n+    }\n+\n+    /**\n+     * The parsed mime type without the associated parameters. Will always return lowercase.\n+     */\n+    public String mediaTypeWithoutParameters() {\n+        return type + \"/\" + subType;\n+    }\n+\n+    public Map<String, String> getParameters() {\n+        return parameters;\n+    }\n+\n+    /**\n+     * Parses a header value into it's parts.\n+     * Note: parsing can return null, but it will throw exceptions once https://github.com/elastic/elasticsearch/issues/63080 is done\n+     * Do not rely on nulls\n+     *\n+     * @return a {@link ParsedMediaType} if the header could be parsed.\n+     * @throws IllegalArgumentException if the header is malformed\n+     */\n+    public static ParsedMediaType parseMediaType(String headerValue) {\n+        if (DEFAULT_ACCEPT_STRING.equals(headerValue) || \"*/*\".equals(headerValue)) {\n+            return null;\n+        }\n+        if (headerValue != null) {\n+            final String[] elements = headerValue.toLowerCase(Locale.ROOT).split(\"[\\\\s\\\\t]*;\");\n+\n+            final String[] splitMediaType = elements[0].split(\"/\");\n+            if ((splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0].trim()).matches()\n+                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) == false) {\n+                throw new IllegalArgumentException(\"invalid media type [\" + headerValue + \"]\");\n+            }\n+            if (elements.length == 1) {\n+                return new ParsedMediaType(splitMediaType[0].trim(), splitMediaType[1].trim(), Collections.emptyMap());\n+            } else {\n+                Map<String, String> parameters = new HashMap<>();\n+                for (int i = 1; i < elements.length; i++) {\n+                    String paramsAsString = elements[i].trim();\n+                    if (paramsAsString.isEmpty()) {\n+                        continue;\n+                    }\n+                    // intentionally allowing to have spaces around `=`\n+                    // https://tools.ietf.org/html/rfc7231#section-3.1.1.1 disallows this\n+                    String[] keyValueParam = elements[i].trim().split(\"=\");\n+                    if (keyValueParam.length == 2) {\n+                        String parameterName = keyValueParam[0].toLowerCase(Locale.ROOT).trim();\n+                        String parameterValue = keyValueParam[1].toLowerCase(Locale.ROOT).trim();\n+                        parameters.put(parameterName, parameterValue);\n+                    } else {\n+                        throw new IllegalArgumentException(\"invalid parameters for header [\" + headerValue + \"]\");\n+                    }\n+                }\n+                return new ParsedMediaType(splitMediaType[0].trim().toLowerCase(Locale.ROOT),\n+                    splitMediaType[1].trim().toLowerCase(Locale.ROOT), parameters);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Resolves this instance to a MediaType instance defined in given MediaTypeRegistry.\n+     * Performs validation against parameters.\n+     * @param mediaTypeRegistry a registry where a mapping between a raw media type to an instance MediaType is defined\n+     * @return a MediaType instance or null if no media type could be found or if a known parameter do not passes validation\n+     */\n+    public  <T extends MediaType> T toMediaType(MediaTypeRegistry<T> mediaTypeRegistry) {\n+        T type = mediaTypeRegistry.typeWithSubtypeToMediaType(mediaTypeWithoutParameters());\n+        if (type != null) {\n+\n+            Map<String, Pattern> registeredParams = mediaTypeRegistry.parametersFor(mediaTypeWithoutParameters());\n+            for (Map.Entry<String, String> givenParamEntry : parameters.entrySet()) {\n+                if (isValidParameter(givenParamEntry.getKey(), givenParamEntry.getValue(), registeredParams) == false) {\n+                    return null;\n+                }\n+            }\n+            return type;\n+        }\n+        return null;\n+    }\n+\n+    private boolean isValidParameter(String paramName, String value, Map<String, Pattern> registeredParams) {\n+        if(registeredParams.containsKey(paramName)){", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\nindex fbae2014514..83676cbfa19 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ParsedMediaType.java\n\n@@ -130,7 +130,7 @@ public class ParsedMediaType {\n     }\n \n     private boolean isValidParameter(String paramName, String value, Map<String, Pattern> registeredParams) {\n-        if(registeredParams.containsKey(paramName)){\n+        if (registeredParams.containsKey(paramName)) {\n             Pattern regex = registeredParams.get(paramName);\n             return regex.matcher(value).matches();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMTIyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517631225", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                default MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes(){\n          \n          \n            \n                default MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes() {", "author": "jaymode", "createdAt": "2020-11-04T21:06:07Z", "path": "server/src/main/java/org/elasticsearch/rest/RestHandler.java", "diffHunk": "@@ -99,6 +102,10 @@ default boolean allowSystemIndexAccessByDefault() {\n         return false;\n     }\n \n+    default MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes(){", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestHandler.java b/server/src/main/java/org/elasticsearch/rest/RestHandler.java\nindex 21d4a6f278f..aa9393d7aa8 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestHandler.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestHandler.java\n\n@@ -102,7 +102,7 @@ public interface RestHandler {\n         return false;\n     }\n \n-    default MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes(){\n+    default MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes() {\n         return XContentType.MEDIA_TYPE_REGISTRY;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMTMzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517631339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }catch (IllegalArgumentException e){\n          \n          \n            \n                    } catch (IllegalArgumentException e) {", "author": "jaymode", "createdAt": "2020-11-04T21:06:22Z", "path": "server/src/main/java/org/elasticsearch/rest/RestRequest.java", "diffHunk": "@@ -86,14 +88,14 @@ protected RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String\n \n     private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String> params, String path,\n                         Map<String, List<String>> headers, HttpRequest httpRequest, HttpChannel httpChannel, long requestId) {\n-        final XContentType xContentType;\n-        try {\n-            xContentType = parseContentType(headers.get(\"Content-Type\"));\n-        } catch (final IllegalArgumentException e) {\n-            throw new ContentTypeHeaderException(e);\n-        }\n-        if (xContentType != null) {\n-            this.xContentType.set(xContentType);\n+        try{\n+            this.parsedAccept = parseHeaderWithMediaType(httpRequest.getHeaders(), \"Accept\");\n+            this.parsedContentType = parseHeaderWithMediaType(httpRequest.getHeaders(), \"Content-Type\");\n+            if (parsedContentType != null) {\n+                this.xContentType.set(parsedContentType.toMediaType(XContentType.MEDIA_TYPE_REGISTRY));\n+            }\n+        }catch (IllegalArgumentException e){", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestRequest.java b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\nindex 400ad6ab119..49a8eabef5f 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n\n@@ -88,13 +88,13 @@ public class RestRequest implements ToXContent.Params {\n \n     private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String> params, String path,\n                         Map<String, List<String>> headers, HttpRequest httpRequest, HttpChannel httpChannel, long requestId) {\n-        try{\n+        try {\n             this.parsedAccept = parseHeaderWithMediaType(httpRequest.getHeaders(), \"Accept\");\n             this.parsedContentType = parseHeaderWithMediaType(httpRequest.getHeaders(), \"Content-Type\");\n             if (parsedContentType != null) {\n                 this.xContentType.set(parsedContentType.toMediaType(XContentType.MEDIA_TYPE_REGISTRY));\n             }\n-        }catch (IllegalArgumentException e){\n+        } catch (IllegalArgumentException e) {\n             throw new MediaTypeHeaderException(e);\n         }\n         this.xContentRegistry = xContentRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMTQ5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517631499", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(request.getParsedAccept() != null){\n          \n          \n            \n                    if (request.getParsedAccept() != null) {", "author": "jaymode", "createdAt": "2020-11-04T21:06:45Z", "path": "server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java", "diffHunk": "@@ -51,18 +51,21 @@\n \n     public static RestResponse buildResponse(Table table, RestChannel channel) throws Exception {\n         RestRequest request = channel.request();\n-        XContentType xContentType = getXContentType(request);\n+        XContentType xContentType = getResponseContentType(request);\n         if (xContentType != null) {\n             return buildXContentBuilder(table, channel);\n         }\n         return buildTextPlainResponse(table, channel);\n     }\n \n-    private static XContentType getXContentType(RestRequest request) {\n+    private static XContentType getResponseContentType(RestRequest request) {\n         if (request.hasParam(\"format\")) {\n             return XContentType.fromFormat(request.param(\"format\"));\n         }\n-        return XContentType.fromMediaType(request.header(\"Accept\"));\n+        if(request.getParsedAccept() != null){", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java b/server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java\nindex 0587e633867..645d3afdcd1 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/cat/RestTable.java\n\n@@ -62,7 +62,7 @@ public class RestTable {\n         if (request.hasParam(\"format\")) {\n             return XContentType.fromFormat(request.param(\"format\"));\n         }\n-        if(request.getParsedAccept() != null){\n+        if (request.getParsedAccept() != null) {\n             return request.getParsedAccept().toMediaType(XContentType.MEDIA_TYPE_REGISTRY);\n         }\n         return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMTYyOA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517631628", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes(){\n          \n          \n            \n                public MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes() {", "author": "jaymode", "createdAt": "2020-11-04T21:07:00Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java", "diffHunk": "@@ -44,6 +45,10 @@\n             new Route(POST, Protocol.SQL_QUERY_REST_ENDPOINT));\n     }\n \n+    public MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes(){", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\nindex 155bb7de05b..7243b8b8ad4 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/RestSqlQueryAction.java\n\n@@ -45,7 +45,7 @@ public class RestSqlQueryAction extends BaseRestHandler {\n             new Route(POST, Protocol.SQL_QUERY_REST_ENDPOINT));\n     }\n \n-    public MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes(){\n+    public MediaTypeRegistry<? extends MediaType> validAcceptMediaTypes() {\n         return SqlMediaTypeParser.MEDIA_TYPE_REGISTRY;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMTgwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517631805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }catch (IllegalArgumentException e){\n          \n          \n            \n                    } catch (IllegalArgumentException e) {", "author": "jaymode", "createdAt": "2020-11-04T21:07:25Z", "path": "x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpResponse.java", "diffHunk": "@@ -105,7 +105,12 @@ public XContentType xContentType() {\n         if (values == null || values.length == 0) {\n             return null;\n         }\n-        return XContentType.fromMediaType(values[0]);\n+        try {\n+            return XContentType.fromMediaType(values[0]);\n+        }catch (IllegalArgumentException e){", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpResponse.java b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpResponse.java\nindex 0b98c884d99..e89e049ffe4 100644\n--- a/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpResponse.java\n+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpResponse.java\n\n@@ -107,7 +107,7 @@ public class HttpResponse implements ToXContentObject {\n         }\n         try {\n             return XContentType.fromMediaType(values[0]);\n-        }catch (IllegalArgumentException e){\n+        } catch (IllegalArgumentException e) {\n             //HttpInputTests - content-type being unrecognized_content_type\n             return null;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMjA5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517632096", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX +\"json\",\n          \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX + \"json\",", "author": "jaymode", "createdAt": "2020-11-04T21:08:04Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -47,14 +47,26 @@ public String mediaType() {\n         }\n \n         @Override\n-        public String subtype() {\n+        public String queryParameter() {\n             return \"json\";\n         }\n \n         @Override\n         public XContent xContent() {\n             return JsonXContent.jsonXContent;\n         }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n+                new HeaderValue(\"application/json\"),\n+                new HeaderValue(\"application/x-ndjson\"),\n+                new HeaderValue(\"application/*\"),\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"json\",", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\nindex 8ab6115a22c..c1cd11aef5f 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n\n@@ -62,9 +62,9 @@ public enum XContentType implements MediaType {\n                 new HeaderValue(\"application/json\"),\n                 new HeaderValue(\"application/x-ndjson\"),\n                 new HeaderValue(\"application/*\"),\n-                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"json\",\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"json\",\n                     Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)),\n-                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"x-ndjson\",\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"x-ndjson\",\n                     Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n         }\n     },\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMjE4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517632185", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX +\"x-ndjson\",\n          \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX + \"x-ndjson\",", "author": "jaymode", "createdAt": "2020-11-04T21:08:15Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -47,14 +47,26 @@ public String mediaType() {\n         }\n \n         @Override\n-        public String subtype() {\n+        public String queryParameter() {\n             return \"json\";\n         }\n \n         @Override\n         public XContent xContent() {\n             return JsonXContent.jsonXContent;\n         }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n+                new HeaderValue(\"application/json\"),\n+                new HeaderValue(\"application/x-ndjson\"),\n+                new HeaderValue(\"application/*\"),\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"json\",\n+                    Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)),\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"x-ndjson\",", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\nindex 8ab6115a22c..c1cd11aef5f 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n\n@@ -62,9 +62,9 @@ public enum XContentType implements MediaType {\n                 new HeaderValue(\"application/json\"),\n                 new HeaderValue(\"application/x-ndjson\"),\n                 new HeaderValue(\"application/*\"),\n-                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"json\",\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"json\",\n                     Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)),\n-                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"x-ndjson\",\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"x-ndjson\",\n                     Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n         }\n     },\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMjcyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517632721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX +\"smile\",\n          \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX + \"smile\",", "author": "jaymode", "createdAt": "2020-11-04T21:09:31Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -66,14 +78,22 @@ public String mediaTypeWithoutParameters() {\n         }\n \n         @Override\n-        public String subtype() {\n+        public String queryParameter() {\n             return \"smile\";\n         }\n \n         @Override\n         public XContent xContent() {\n             return SmileXContent.smileXContent;\n         }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n+                new HeaderValue(\"application/smile\"),\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"smile\",", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\nindex 8ab6115a22c..c1cd11aef5f 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n\n@@ -91,7 +91,7 @@ public enum XContentType implements MediaType {\n         public Set<HeaderValue> headerValues() {\n             return Set.of(\n                 new HeaderValue(\"application/smile\"),\n-                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"smile\",\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"smile\",\n                     Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n         }\n     },\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMjgxMg==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517632812", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX +\"yaml\",\n          \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX + \"yaml\",", "author": "jaymode", "createdAt": "2020-11-04T21:09:41Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -85,14 +105,22 @@ public String mediaTypeWithoutParameters() {\n         }\n \n         @Override\n-        public String subtype() {\n+        public String queryParameter() {\n             return \"yaml\";\n         }\n \n         @Override\n         public XContent xContent() {\n             return YamlXContent.yamlXContent;\n         }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n+                new HeaderValue(\"application/yaml\"),\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"yaml\",", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\nindex 8ab6115a22c..c1cd11aef5f 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n\n@@ -118,7 +118,7 @@ public enum XContentType implements MediaType {\n         public Set<HeaderValue> headerValues() {\n             return Set.of(\n                 new HeaderValue(\"application/yaml\"),\n-                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"yaml\",\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"yaml\",\n                     Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n         }\n     },\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMjg5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517632897", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX +\"cbor\",\n          \n          \n            \n                            new HeaderValue(VENDOR_APPLICATION_PREFIX + \"cbor\",", "author": "jaymode", "createdAt": "2020-11-04T21:09:53Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java", "diffHunk": "@@ -104,45 +132,36 @@ public String mediaTypeWithoutParameters() {\n         }\n \n         @Override\n-        public String subtype() {\n+        public String queryParameter() {\n             return \"cbor\";\n         }\n \n         @Override\n         public XContent xContent() {\n             return CborXContent.cborXContent;\n         }\n+\n+        @Override\n+        public Set<HeaderValue> headerValues() {\n+            return Set.of(\n+                new HeaderValue(\"application/cbor\"),\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"cbor\",", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\nindex 8ab6115a22c..c1cd11aef5f 100644\n--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentType.java\n\n@@ -145,7 +145,7 @@ public enum XContentType implements MediaType {\n         public Set<HeaderValue> headerValues() {\n             return Set.of(\n                 new HeaderValue(\"application/cbor\"),\n-                new HeaderValue(VENDOR_APPLICATION_PREFIX +\"cbor\",\n+                new HeaderValue(VENDOR_APPLICATION_PREFIX + \"cbor\",\n                     Map.of(COMPATIBLE_WITH_PARAMETER_NAME, VERSION_PATTERN)));\n         }\n     };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMzEyNg==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517633126", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"Incorrect header [\"+headerName+\"]. \" +\n          \n          \n            \n                        throw new IllegalArgumentException(\"Incorrect header [\" + headerName + \"]. \" +", "author": "jaymode", "createdAt": "2020-11-04T21:10:21Z", "path": "server/src/main/java/org/elasticsearch/rest/RestRequest.java", "diffHunk": "@@ -104,6 +106,23 @@ private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String>\n         this.requestId = requestId;\n     }\n \n+    private static @Nullable ParsedMediaType parseHeaderWithMediaType(Map<String, List<String>> headers, String headerName) {\n+        //TODO: make all usages of headers case-insensitive\n+        List<String> header = headers.get(headerName);\n+        if (header == null || header.isEmpty()) {\n+            return null;\n+        } else if (header.size() > 1) {\n+            throw new IllegalArgumentException(\"Incorrect header [\"+headerName+\"]. \" +", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestRequest.java b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\nindex 400ad6ab119..49a8eabef5f 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n\n@@ -112,7 +112,7 @@ public class RestRequest implements ToXContent.Params {\n         if (header == null || header.isEmpty()) {\n             return null;\n         } else if (header.size() > 1) {\n-            throw new IllegalArgumentException(\"Incorrect header [\"+headerName+\"]. \" +\n+            throw new IllegalArgumentException(\"Incorrect header [\" + headerName + \"]. \" +\n                 \"Only one value should be provided\");\n         }\n         String rawContentType = header.get(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1NzQ5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517657495", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try{\n          \n          \n            \n                    try {", "author": "jaymode", "createdAt": "2020-11-04T22:03:18Z", "path": "server/src/main/java/org/elasticsearch/rest/RestRequest.java", "diffHunk": "@@ -86,14 +88,14 @@ protected RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String\n \n     private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String> params, String path,\n                         Map<String, List<String>> headers, HttpRequest httpRequest, HttpChannel httpChannel, long requestId) {\n-        final XContentType xContentType;\n-        try {\n-            xContentType = parseContentType(headers.get(\"Content-Type\"));\n-        } catch (final IllegalArgumentException e) {\n-            throw new ContentTypeHeaderException(e);\n-        }\n-        if (xContentType != null) {\n-            this.xContentType.set(xContentType);\n+        try{", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestRequest.java b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\nindex 400ad6ab119..49a8eabef5f 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n\n@@ -88,13 +88,13 @@ public class RestRequest implements ToXContent.Params {\n \n     private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String> params, String path,\n                         Map<String, List<String>> headers, HttpRequest httpRequest, HttpChannel httpChannel, long requestId) {\n-        try{\n+        try {\n             this.parsedAccept = parseHeaderWithMediaType(httpRequest.getHeaders(), \"Accept\");\n             this.parsedContentType = parseHeaderWithMediaType(httpRequest.getHeaders(), \"Content-Type\");\n             if (parsedContentType != null) {\n                 this.xContentType.set(parsedContentType.toMediaType(XContentType.MEDIA_TYPE_REGISTRY));\n             }\n-        }catch (IllegalArgumentException e){\n+        } catch (IllegalArgumentException e) {\n             throw new MediaTypeHeaderException(e);\n         }\n         this.xContentRegistry = xContentRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1OTI1OA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517659258", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(request.getParsedAccept() != null) {\n          \n          \n            \n                    if (request.getParsedAccept() != null) {", "author": "jaymode", "createdAt": "2020-11-04T22:07:14Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java", "diffHunk": "@@ -42,25 +34,19 @@\n      * isn't then we use the {@code Content-Type} header which is required.\n      */\n     public MediaType getMediaType(RestRequest request, SqlQueryRequest sqlRequest) {\n-\n         if (Mode.isDedicatedClient(sqlRequest.requestInfo().mode())\n             && (sqlRequest.binaryCommunication() == null || sqlRequest.binaryCommunication())) {\n             // enforce CBOR response for drivers and CLI (unless instructed differently through the config param)\n             return XContentType.CBOR;\n         } else if (request.hasParam(URL_PARAM_FORMAT)) {\n-            return validateColumnarRequest(sqlRequest.columnar(), parser.fromFormat(request.param(URL_PARAM_FORMAT)));\n-        }\n-        if (request.getHeaders().containsKey(\"Accept\")) {\n-            String accept = request.header(\"Accept\");\n-            // */* means \"I don't care\" which we should treat like not specifying the header\n-            if (\"*/*\".equals(accept) == false) {\n-                return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(accept));\n-            }\n+            return validateColumnarRequest(sqlRequest.columnar(),\n+                MEDIA_TYPE_REGISTRY.queryParamToMediaType(request.param(URL_PARAM_FORMAT)));\n         }\n \n-        String contentType = request.header(\"Content-Type\");\n-        assert contentType != null : \"The Content-Type header is required\";\n-        return validateColumnarRequest(sqlRequest.columnar(), parser.fromMediaType(contentType));\n+        if(request.getParsedAccept() != null) {", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java\nindex d4a5fddac14..560ad710dfd 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plugin/SqlMediaTypeParser.java\n\n@@ -43,7 +43,7 @@ public class SqlMediaTypeParser {\n                 MEDIA_TYPE_REGISTRY.queryParamToMediaType(request.param(URL_PARAM_FORMAT)));\n         }\n \n-        if(request.getParsedAccept() != null) {\n+        if (request.getParsedAccept() != null) {\n             return request.getParsedAccept().toMediaType(MEDIA_TYPE_REGISTRY);\n         }\n         return request.getXContentType();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mjk2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517662966", "bodyText": "this is a not well documented fact, but by default Netty uses a case insensitive hashing strategy for retrieval of headers. Checkout the DefaultHttpHeaders class if you're interested. Due to our use of Netty for HTTP parsing we also get this benefit in the nio transport. Also, see the Netty4HttpRequest/NioHttpRequest.HttpHeadersMap class.", "author": "jaymode", "createdAt": "2020-11-04T22:15:47Z", "path": "server/src/main/java/org/elasticsearch/rest/RestRequest.java", "diffHunk": "@@ -104,6 +106,23 @@ private RestRequest(NamedXContentRegistry xContentRegistry, Map<String, String>\n         this.requestId = requestId;\n     }\n \n+    private static @Nullable ParsedMediaType parseHeaderWithMediaType(Map<String, List<String>> headers, String headerName) {\n+        //TODO: make all usages of headers case-insensitive", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg1MDg0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517850843", "bodyText": "Interesting, I did not know about this.\nI wrongly relied on tests only using map from java collections.\nMaybe we might want to refactor usages of java.util.Map to an interface that documents/enforces case insensitivity?\nI will leave this todo for now so that we can reconsider this in the future", "author": "pgomulka", "createdAt": "2020-11-05T07:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mjk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/RestRequest.java b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\nindex 400ad6ab119..49a8eabef5f 100644\n--- a/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n+++ b/server/src/main/java/org/elasticsearch/rest/RestRequest.java\n\n@@ -112,7 +112,7 @@ public class RestRequest implements ToXContent.Params {\n         if (header == null || header.isEmpty()) {\n             return null;\n         } else if (header.size() > 1) {\n-            throw new IllegalArgumentException(\"Incorrect header [\"+headerName+\"]. \" +\n+            throw new IllegalArgumentException(\"Incorrect header [\" + headerName + \"]. \" +\n                 \"Only one value should be provided\");\n         }\n         String rawContentType = header.get(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mzg2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517663866", "bodyText": "I'd love if we can move the comment from the usage to a method level documentation that expands on why we use null; I get it now but at some point it won't be obvious anymore", "author": "jaymode", "createdAt": "2020-11-04T22:17:47Z", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java", "diffHunk": "@@ -71,6 +72,14 @@ public ClientYamlTestResponse(Response response) throws IOException {\n         }\n     }\n \n+    private XContentType getContentTypeIgnoreExceptions(String contentType) {", "originalCommit": "dc61731ba05c6d2338ff46cf3f3bf665b334c525", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NjUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/64406#discussion_r517846524", "bodyText": "true, will add more comment on per method javadoc", "author": "pgomulka", "createdAt": "2020-11-05T07:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mzg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0b565e566cfb0555b25d02e082105bb482e7e6fd", "chunk": "diff --git a/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java\nindex 819f33a1b32..5e000d38c05 100644\n--- a/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java\n+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestResponse.java\n\n@@ -72,6 +72,12 @@ public class ClientYamlTestResponse {\n         }\n     }\n \n+    /**\n+     * A content type returned on a response can be a media type defined outside XContentType (for instance plain/text, plain/csv etc).\n+     * This means that the response cannot be parsed.DefaultHttpHeaders\n+     * Also in testing there is no access to media types defined outside of XContentType.\n+     * Therefore a null has to be returned if a response content-type has a mediatype not defined in XContentType.\n+     */\n     private XContentType getContentTypeIgnoreExceptions(String contentType) {\n         try {\n             return XContentType.fromMediaType(contentType);\n"}}, {"oid": "4a3138dd46c7826e902f0375e2a61d5aef036c70", "url": "https://github.com/elastic/elasticsearch/commit/4a3138dd46c7826e902f0375e2a61d5aef036c70", "message": "Apply suggestions from code review\n\nCo-authored-by: Jay Modi <jaymode@users.noreply.github.com>", "committedDate": "2020-11-05T07:33:33Z", "type": "commit"}, {"oid": "0b565e566cfb0555b25d02e082105bb482e7e6fd", "url": "https://github.com/elastic/elasticsearch/commit/0b565e566cfb0555b25d02e082105bb482e7e6fd", "message": "javadoc", "committedDate": "2020-11-05T08:02:03Z", "type": "commit"}, {"oid": "b35ad2ce54f0577edd332d8ebedb4fa817475e71", "url": "https://github.com/elastic/elasticsearch/commit/b35ad2ce54f0577edd332d8ebedb4fa817475e71", "message": "Merge branch 'master' into compat/introduce_per_endpoint_media_types", "committedDate": "2020-11-05T08:02:35Z", "type": "commit"}, {"oid": "b908bfebd14c7157aeb7592f17c4907d8e9c6a7f", "url": "https://github.com/elastic/elasticsearch/commit/b908bfebd14c7157aeb7592f17c4907d8e9c6a7f", "message": "Merge branch 'compat/introduce_per_endpoint_media_types' of github.com:pgomulka/elasticsearch into compat/introduce_per_endpoint_media_types", "committedDate": "2020-11-05T08:03:20Z", "type": "commit"}]}