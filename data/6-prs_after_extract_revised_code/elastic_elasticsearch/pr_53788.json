{"pr_number": 53788, "pr_title": "[ML] Data frame analytics analysis stats", "pr_createdAt": "2020-03-19T11:38:04Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53788", "timeline": [{"oid": "96ab3add767cdbb17f6850fed952a27eec459c99", "url": "https://github.com/elastic/elasticsearch/commit/96ab3add767cdbb17f6850fed952a27eec459c99", "message": "[ML] Data frame analytics analysis stats\n\nAdds parsing and indexing of analysis instrumentation stats.\nThe latest one is also returned from the get-stats API.\n\nNote that we chose to duplicate objects even where they are currently\nsimilar. There are already ideas on how these will diverge in the future\nand while the duplication looks ugly at the moment, it is the option\nthat offers the highest flexibility.", "committedDate": "2020-03-19T11:04:24Z", "type": "commit"}, {"oid": "931e1b6ea151bc478f9b27177692f162a7b25f79", "url": "https://github.com/elastic/elasticsearch/commit/931e1b6ea151bc478f9b27177692f162a7b25f79", "message": "Fix RestHighLevelClientTests", "committedDate": "2020-03-19T13:20:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4MjE4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395082183", "bodyText": "I wonder if all these should be optional.\nThen we have a private ctor that contains nullable boxed types. It would then unbox to zero values and pass to the public ctor?\nThis flexibility will help the hlrc compatibility.", "author": "benwtrent", "createdAt": "2020-03-19T14:47:15Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+\n+public class Hyperparameters implements ToXContentObject {\n+\n+    public static final ParseField CLASS_ASSIGNMENT_OBJECTIVE = new ParseField(\"class_assignment_objective\");\n+    public static final ParseField DOWNSAMPLE_FACTOR = new ParseField(\"downsample_factor\");\n+    public static final ParseField ETA = new ParseField(\"eta\");\n+    public static final ParseField ETA_GROWTH_RATE_PER_TREE = new ParseField(\"eta_growth_rate_per_tree\");\n+    public static final ParseField FEATURE_BAG_FRACTION = new ParseField(\"feature_bag_fraction\");\n+    public static final ParseField MAX_ATTEMPTS_TO_ADD_TREE = new ParseField(\"max_attempts_to_add_tree\");\n+    public static final ParseField MAX_OPTIMIZATION_ROUNDS_PER_HYPERPARAMETER = new ParseField(\n+        \"max_optimization_rounds_per_hyperparameter\");\n+    public static final ParseField MAX_TREES = new ParseField(\"max_trees\");\n+    public static final ParseField NUM_FOLDS = new ParseField(\"num_folds\");\n+    public static final ParseField NUM_SPLITS_PER_FEATURE = new ParseField(\"num_splits_per_feature\");\n+    public static final ParseField REGULARIZATION_DEPTH_PENALTY_MULTIPLIER = new ParseField(\"regularization_depth_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_LEAF_WEIGHT_PENALTY_MULTIPLIER\n+        = new ParseField(\"regularization_leaf_weight_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_LIMIT = new ParseField(\"regularization_soft_tree_depth_limit\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_TOLERANCE = new ParseField(\"regularization_soft_tree_depth_tolerance\");\n+    public static final ParseField REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER =\n+        new ParseField(\"regularization_tree_size_penalty_multiplier\");\n+\n+    public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n+        true,\n+        a -> new Hyperparameters(\n+            (String) a[0],\n+            (double) a[1],\n+            (double) a[2],\n+            (double) a[3],\n+            (double) a[4],\n+            (int) a[5],\n+            (int) a[6],\n+            (int) a[7],\n+            (int) a[8],\n+            (int) a[9],\n+            (double) a[10],\n+            (double) a[11],\n+            (double) a[12],\n+            (double) a[13],\n+            (double) a[14]\n+        ));\n+\n+    static {\n+        PARSER.declareString(constructorArg(), CLASS_ASSIGNMENT_OBJECTIVE);\n+        PARSER.declareDouble(constructorArg(), DOWNSAMPLE_FACTOR);\n+        PARSER.declareDouble(constructorArg(), ETA);\n+        PARSER.declareDouble(constructorArg(), ETA_GROWTH_RATE_PER_TREE);\n+        PARSER.declareDouble(constructorArg(), FEATURE_BAG_FRACTION);\n+        PARSER.declareInt(constructorArg(), MAX_ATTEMPTS_TO_ADD_TREE);\n+        PARSER.declareInt(constructorArg(), MAX_OPTIMIZATION_ROUNDS_PER_HYPERPARAMETER);\n+        PARSER.declareInt(constructorArg(), MAX_TREES);\n+        PARSER.declareInt(constructorArg(), NUM_FOLDS);\n+        PARSER.declareInt(constructorArg(), NUM_SPLITS_PER_FEATURE);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_DEPTH_PENALTY_MULTIPLIER);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_LEAF_WEIGHT_PENALTY_MULTIPLIER);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_SOFT_TREE_DEPTH_LIMIT);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_SOFT_TREE_DEPTH_TOLERANCE);\n+        PARSER.declareDouble(constructorArg(), REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER);", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java\nindex 4c9811d0101..757b846a93e 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java\n\n@@ -49,7 +49,7 @@ public class Hyperparameters implements ToXContentObject {\n     public static final ParseField REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER =\n         new ParseField(\"regularization_tree_size_penalty_multiplier\");\n \n-    public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n+    public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"classification_hyperparameters\",\n         true,\n         a -> new Hyperparameters(\n             (String) a[0],\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4MzE1OA==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395083158", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n          \n          \n            \n                public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"classification_hyperparameters\",", "author": "benwtrent", "createdAt": "2020-03-19T14:48:29Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+\n+public class Hyperparameters implements ToXContentObject {\n+\n+    public static final ParseField CLASS_ASSIGNMENT_OBJECTIVE = new ParseField(\"class_assignment_objective\");\n+    public static final ParseField DOWNSAMPLE_FACTOR = new ParseField(\"downsample_factor\");\n+    public static final ParseField ETA = new ParseField(\"eta\");\n+    public static final ParseField ETA_GROWTH_RATE_PER_TREE = new ParseField(\"eta_growth_rate_per_tree\");\n+    public static final ParseField FEATURE_BAG_FRACTION = new ParseField(\"feature_bag_fraction\");\n+    public static final ParseField MAX_ATTEMPTS_TO_ADD_TREE = new ParseField(\"max_attempts_to_add_tree\");\n+    public static final ParseField MAX_OPTIMIZATION_ROUNDS_PER_HYPERPARAMETER = new ParseField(\n+        \"max_optimization_rounds_per_hyperparameter\");\n+    public static final ParseField MAX_TREES = new ParseField(\"max_trees\");\n+    public static final ParseField NUM_FOLDS = new ParseField(\"num_folds\");\n+    public static final ParseField NUM_SPLITS_PER_FEATURE = new ParseField(\"num_splits_per_feature\");\n+    public static final ParseField REGULARIZATION_DEPTH_PENALTY_MULTIPLIER = new ParseField(\"regularization_depth_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_LEAF_WEIGHT_PENALTY_MULTIPLIER\n+        = new ParseField(\"regularization_leaf_weight_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_LIMIT = new ParseField(\"regularization_soft_tree_depth_limit\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_TOLERANCE = new ParseField(\"regularization_soft_tree_depth_tolerance\");\n+    public static final ParseField REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER =\n+        new ParseField(\"regularization_tree_size_penalty_multiplier\");\n+\n+    public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"regression_hyperparameters\",", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java\nindex 4c9811d0101..757b846a93e 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/Hyperparameters.java\n\n@@ -49,7 +49,7 @@ public class Hyperparameters implements ToXContentObject {\n     public static final ParseField REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER =\n         new ParseField(\"regularization_tree_size_penalty_multiplier\");\n \n-    public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n+    public static ConstructingObjectParser<Hyperparameters, Void> PARSER = new ConstructingObjectParser<>(\"classification_hyperparameters\",\n         true,\n         a -> new Hyperparameters(\n             (String) a[0],\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4MzYzMg==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395083632", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,\n          \n          \n            \n                public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"classification_timing_stats\", true,", "author": "benwtrent", "createdAt": "2020-03-19T14:49:05Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/TimingStats.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+    public static final ParseField ITERATION_TIME = new ParseField(\"iteration_time\");\n+\n+    public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/TimingStats.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/TimingStats.java\nindex f48a131af87..ba2477d1b43 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/TimingStats.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/TimingStats.java\n\n@@ -32,7 +32,7 @@ public class TimingStats implements ToXContentObject {\n     public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n     public static final ParseField ITERATION_TIME = new ParseField(\"iteration_time\");\n \n-    public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,\n+    public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"classification_timing_stats\", true,\n         a -> new TimingStats(TimeValue.timeValueMillis((long) a[0]), TimeValue.timeValueMillis((long) a[1])));\n \n     static {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4NDI0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395084246", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TYPE = \"validation_loss\";\n          \n          \n            \n                public static final String TYPE = \"classification_validation_loss\";", "author": "benwtrent", "createdAt": "2020-03-19T14:49:55Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/ValidationLoss.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.client.ml.dataframe.stats.common.FoldValues;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ValidationLoss implements ToXContentObject {\n+\n+    public static final String TYPE = \"validation_loss\";", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/ValidationLoss.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/ValidationLoss.java\nindex 0f93d8ca322..ccd514c4886 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/ValidationLoss.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/classification/ValidationLoss.java\n\n@@ -30,13 +30,12 @@ import java.util.Objects;\n \n public class ValidationLoss implements ToXContentObject {\n \n-    public static final String TYPE = \"validation_loss\";\n-\n     public static final ParseField LOSS_TYPE = new ParseField(\"loss_type\");\n     public static final ParseField FOLD_VALUES = new ParseField(\"fold_values\");\n \n     @SuppressWarnings(\"unchecked\")\n-    public static ConstructingObjectParser<ValidationLoss, Void> PARSER = new ConstructingObjectParser<>(TYPE, true,\n+    public static ConstructingObjectParser<ValidationLoss, Void> PARSER = new ConstructingObjectParser<>(\"classification_validation_loss\",\n+        true,\n         a -> new ValidationLoss((String) a[0], (List<FoldValues>) a[1]));\n \n     static {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4NTcwNg==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395085706", "bodyText": "Similar thought around optional parameters and boxed -> nullable -> zero_values.", "author": "benwtrent", "createdAt": "2020-03-19T14:51:43Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.outlierdetection;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+\n+public class Parameters implements ToXContentObject {\n+\n+    public static final ParseField N_NEIGHBORS = new ParseField(\"n_neighbors\");\n+    public static final ParseField METHODS = new ParseField(\"methods\");\n+    public static final ParseField FEATURE_INFLUENCE_THRESHOLD = new ParseField(\"feature_influence_threshold\");\n+    public static final ParseField COMPUTE_FEATURE_INFLUENCE = new ParseField(\"compute_feature_influence\");\n+    public static final ParseField OUTLIER_FRACTION = new ParseField(\"outlier_fraction\");\n+    public static final ParseField STANDARDIZATION_ENABLED = new ParseField(\"standardization_enabled\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static ConstructingObjectParser<Parameters, Void> PARSER = new ConstructingObjectParser<>(\"outlier_detection_parameters\",\n+        true,\n+        a -> new Parameters(\n+            (int) a[0],\n+            new TreeSet<>((List<String>) a[1]),\n+            (boolean) a[2],\n+            (double) a[3],\n+            (double) a[4],\n+            (boolean) a[5]\n+        ));\n+\n+    static {\n+        PARSER.declareInt(constructorArg(), N_NEIGHBORS);\n+        PARSER.declareStringArray(constructorArg(), METHODS);\n+        PARSER.declareBoolean(constructorArg(), COMPUTE_FEATURE_INFLUENCE);\n+        PARSER.declareDouble(constructorArg(), FEATURE_INFLUENCE_THRESHOLD);\n+        PARSER.declareDouble(constructorArg(), OUTLIER_FRACTION);\n+        PARSER.declareBoolean(constructorArg(), STANDARDIZATION_ENABLED);", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea9fed5432c49a60c4f8b66be562be0b599896bf", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java\nindex aa1aa611a13..19cb0fa0633 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java\n\n@@ -24,18 +24,14 @@ import org.elasticsearch.common.xcontent.ToXContentObject;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n \n import java.io.IOException;\n-import java.util.Collections;\n-import java.util.List;\n import java.util.Objects;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n \n import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n \n public class Parameters implements ToXContentObject {\n \n     public static final ParseField N_NEIGHBORS = new ParseField(\"n_neighbors\");\n-    public static final ParseField METHODS = new ParseField(\"methods\");\n+    public static final ParseField METHOD = new ParseField(\"method\");\n     public static final ParseField FEATURE_INFLUENCE_THRESHOLD = new ParseField(\"feature_influence_threshold\");\n     public static final ParseField COMPUTE_FEATURE_INFLUENCE = new ParseField(\"compute_feature_influence\");\n     public static final ParseField OUTLIER_FRACTION = new ParseField(\"outlier_fraction\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4NzI1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395087251", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TYPE = \"validation_loss\";\n          \n          \n            \n                public static final String TYPE = \"regression_validation_loss\";", "author": "benwtrent", "createdAt": "2020-03-19T14:53:44Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/regression/ValidationLoss.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.regression;\n+\n+import org.elasticsearch.client.ml.dataframe.stats.common.FoldValues;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ValidationLoss implements ToXContentObject {\n+\n+    public static final String TYPE = \"validation_loss\";", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/regression/ValidationLoss.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/regression/ValidationLoss.java\nindex 3f60ac8bcf3..925667793f4 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/regression/ValidationLoss.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/regression/ValidationLoss.java\n\n@@ -30,13 +30,12 @@ import java.util.Objects;\n \n public class ValidationLoss implements ToXContentObject {\n \n-    public static final String TYPE = \"validation_loss\";\n-\n     public static final ParseField LOSS_TYPE = new ParseField(\"loss_type\");\n     public static final ParseField FOLD_VALUES = new ParseField(\"fold_values\");\n \n     @SuppressWarnings(\"unchecked\")\n-    public static ConstructingObjectParser<ValidationLoss, Void> PARSER = new ConstructingObjectParser<>(TYPE, true,\n+    public static ConstructingObjectParser<ValidationLoss, Void> PARSER = new ConstructingObjectParser<>(\"regression_validation_loss\",\n+        true,\n         a -> new ValidationLoss((String) a[0], (List<FoldValues>) a[1]));\n \n     static {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4OTM5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395089395", "bodyText": "FWIW, inference added some nice helpers around NamedToXContentObject classes. Nice things for serializing them to and from xcontent if you need it :).", "author": "benwtrent", "createdAt": "2020-03-19T14:56:27Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/AnalysisStats.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats;\n+\n+import org.elasticsearch.common.io.stream.NamedWriteable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+\n+/**\n+ * Statistics for the data frame analysis\n+ */\n+public interface AnalysisStats extends ToXContentObject, NamedWriteable {", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MDY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395090642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n          \n          \n            \n                    ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(\"classification_hyperparameters\",", "author": "benwtrent", "createdAt": "2020-03-19T14:58:00Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;\n+\n+public class Hyperparameters implements ToXContentObject, Writeable {\n+\n+    public static final ParseField CLASS_ASSIGNMENT_OBJECTIVE = new ParseField(\"class_assignment_objective\");\n+    public static final ParseField DOWNSAMPLE_FACTOR = new ParseField(\"downsample_factor\");\n+    public static final ParseField ETA = new ParseField(\"eta\");\n+    public static final ParseField ETA_GROWTH_RATE_PER_TREE = new ParseField(\"eta_growth_rate_per_tree\");\n+    public static final ParseField FEATURE_BAG_FRACTION = new ParseField(\"feature_bag_fraction\");\n+    public static final ParseField MAX_ATTEMPTS_TO_ADD_TREE = new ParseField(\"max_attempts_to_add_tree\");\n+    public static final ParseField MAX_OPTIMIZATION_ROUNDS_PER_HYPERPARAMETER = new ParseField(\n+        \"max_optimization_rounds_per_hyperparameter\");\n+    public static final ParseField MAX_TREES = new ParseField(\"max_trees\");\n+    public static final ParseField NUM_FOLDS = new ParseField(\"num_folds\");\n+    public static final ParseField NUM_SPLITS_PER_FEATURE = new ParseField(\"num_splits_per_feature\");\n+    public static final ParseField REGULARIZATION_DEPTH_PENALTY_MULTIPLIER = new ParseField(\"regularization_depth_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_LEAF_WEIGHT_PENALTY_MULTIPLIER\n+        = new ParseField(\"regularization_leaf_weight_penalty_multiplier\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_LIMIT = new ParseField(\"regularization_soft_tree_depth_limit\");\n+    public static final ParseField REGULARIZATION_SOFT_TREE_DEPTH_TOLERANCE = new ParseField(\"regularization_soft_tree_depth_tolerance\");\n+    public static final ParseField REGULARIZATION_TREE_SIZE_PENALTY_MULTIPLIER =\n+        new ParseField(\"regularization_tree_size_penalty_multiplier\");\n+\n+    public static Hyperparameters fromXContent(XContentParser parser, boolean ignoreUnknownFields) {\n+        return createParser(ignoreUnknownFields).apply(parser, null);\n+    }\n+\n+    private static ConstructingObjectParser<Hyperparameters, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(\"regression_hyperparameters\",", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/Hyperparameters.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/Hyperparameters.java\nindex a5a956d50ff..c7f2c901428 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/Hyperparameters.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/Hyperparameters.java\n\n@@ -45,7 +45,7 @@ public class Hyperparameters implements ToXContentObject, Writeable {\n     }\n \n     private static ConstructingObjectParser<Hyperparameters, Void> createParser(boolean ignoreUnknownFields) {\n-        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(\"regression_hyperparameters\",\n+        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(\"classification_hyperparameters\",\n             ignoreUnknownFields,\n             a -> new Hyperparameters(\n                 (String) a[0],\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MTYwNw==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395091607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n          \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"classification_timing_stats\", ignoreUnknownFields,", "author": "benwtrent", "createdAt": "2020-03-19T14:59:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/TimingStats.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements Writeable, ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+    public static final ParseField ITERATION_TIME = new ParseField(\"iteration_time\");\n+\n+    public static TimingStats fromXContent(XContentParser parser, boolean ignoreUnknownFields) {\n+        return createParser(ignoreUnknownFields).apply(parser, null);\n+    }\n+\n+    private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/TimingStats.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/TimingStats.java\nindex 0802a32b30e..07245c88f20 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/TimingStats.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/TimingStats.java\n\n@@ -28,7 +28,8 @@ public class TimingStats implements Writeable, ToXContentObject {\n     }\n \n     private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n-        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"classification_timing_stats\",\n+            ignoreUnknownFields,\n             a -> new TimingStats(TimeValue.timeValueMillis((long) a[0]), TimeValue.timeValueMillis((long) a[1])));\n \n         parser.declareLong(ConstructingObjectParser.constructorArg(), ELAPSED_TIME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MTg5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395091896", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TYPE = \"validation_loss\";\n          \n          \n            \n                public static final String TYPE = \"classification_validation_loss\";", "author": "benwtrent", "createdAt": "2020-03-19T14:59:43Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/ValidationLoss.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.classification;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.dataframe.stats.common.FoldValues;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ValidationLoss implements ToXContentObject, Writeable {\n+\n+    public static final String TYPE = \"validation_loss\";", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/ValidationLoss.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/ValidationLoss.java\nindex cf66395c23b..5526ae063a4 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/ValidationLoss.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/classification/ValidationLoss.java\n\n@@ -21,8 +21,6 @@ import java.util.Objects;\n \n public class ValidationLoss implements ToXContentObject, Writeable {\n \n-    public static final String TYPE = \"validation_loss\";\n-\n     public static final ParseField LOSS_TYPE = new ParseField(\"loss_type\");\n     public static final ParseField FOLD_VALUES = new ParseField(\"fold_values\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MjU5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395092599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n          \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"outlierdetection_timing_stats\", ignoreUnknownFields,", "author": "benwtrent", "createdAt": "2020-03-19T15:00:37Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/outlierdetection/TimingStats.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.outlierdetection;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements Writeable, ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+\n+    public static TimingStats fromXContent(XContentParser parser, boolean ignoreUnknownFields) {\n+        return createParser(ignoreUnknownFields).apply(parser, null);\n+    }\n+\n+    private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/outlierdetection/TimingStats.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/outlierdetection/TimingStats.java\nindex 2db94414912..7721cd3fb67 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/outlierdetection/TimingStats.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/outlierdetection/TimingStats.java\n\n@@ -27,7 +27,8 @@ public class TimingStats implements Writeable, ToXContentObject {\n     }\n \n     private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n-        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"outlier_detection_timing_stats\",\n+            ignoreUnknownFields,\n             a -> new TimingStats(TimeValue.timeValueMillis((long) a[0])));\n \n         parser.declareLong(ConstructingObjectParser.constructorArg(), ELAPSED_TIME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MzA4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395093087", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n          \n          \n            \n                    ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"regression_timing_stats\", ignoreUnknownFields,", "author": "benwtrent", "createdAt": "2020-03-19T15:01:15Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/TimingStats.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.regression;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements Writeable, ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+    public static final ParseField ITERATION_TIME = new ParseField(\"iteration_time\");\n+\n+    public static TimingStats fromXContent(XContentParser parser, boolean ignoreUnknownFields) {\n+        return createParser(ignoreUnknownFields).apply(parser, null);\n+    }\n+\n+    private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/TimingStats.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/TimingStats.java\nindex a1305ded11c..8dba89f601d 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/TimingStats.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/TimingStats.java\n\n@@ -28,7 +28,7 @@ public class TimingStats implements Writeable, ToXContentObject {\n     }\n \n     private static ConstructingObjectParser<TimingStats, Void> createParser(boolean ignoreUnknownFields) {\n-        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"timing_stats\", ignoreUnknownFields,\n+        ConstructingObjectParser<TimingStats, Void> parser = new ConstructingObjectParser<>(\"regression_timing_stats\", ignoreUnknownFields,\n             a -> new TimingStats(TimeValue.timeValueMillis((long) a[0]), TimeValue.timeValueMillis((long) a[1])));\n \n         parser.declareLong(ConstructingObjectParser.constructorArg(), ELAPSED_TIME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MzMxMA==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395093310", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TYPE = \"validation_loss\";\n          \n          \n            \n                public static final String TYPE = \"regression_validation_loss\";", "author": "benwtrent", "createdAt": "2020-03-19T15:01:33Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/ValidationLoss.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.dataframe.stats.regression;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.dataframe.stats.common.FoldValues;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class ValidationLoss implements ToXContentObject, Writeable {\n+\n+    public static final String TYPE = \"validation_loss\";", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/ValidationLoss.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/ValidationLoss.java\nindex 8265eb0ea9e..c31eb72bce0 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/ValidationLoss.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/stats/regression/ValidationLoss.java\n\n@@ -21,8 +21,6 @@ import java.util.Objects;\n \n public class ValidationLoss implements ToXContentObject, Writeable {\n \n-    public static final String TYPE = \"validation_loss\";\n-\n     public static final ParseField LOSS_TYPE = new ParseField(\"loss_type\");\n     public static final ParseField FOLD_VALUES = new ParseField(\"fold_values\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NTExNA==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395095114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        AnalysisStats analysisStats = null;\n          \n          \n            \n                        if (randomBoolean()) {\n          \n          \n            \n                            analysisStats = OutlierDetectionStatsTests.createRandom();\n          \n          \n            \n                        } else if (randomBoolean()) {\n          \n          \n            \n                            analysisStats = RegressionStatsTests.createRandom();\n          \n          \n            \n                        } else {\n          \n          \n            \n                            analysisStats = ClassificationStatsTests.createRandom();\n          \n          \n            \n                        }\n          \n          \n            \n                        AnalysisStats analysisStats = randomBoolean() ? null : \n          \n          \n            \n                            randomFrom(\n          \n          \n            \n                                OutlierDetectionStatsTests.createRandom(), \n          \n          \n            \n                                RegressionStatsTests.createRandom(), \n          \n          \n            \n                                ClassificationStatsTests.createRandom());", "author": "benwtrent", "createdAt": "2020-03-19T15:03:55Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java", "diffHunk": "@@ -30,8 +43,17 @@ public static Response randomResponse(int listSize) {\n             IntStream.of(progressSize).forEach(progressIndex -> progress.add(\n                 new PhaseProgress(randomAlphaOfLength(10), randomIntBetween(0, 100))));\n             MemoryUsage memoryUsage = randomBoolean() ? null : MemoryUsageTests.createRandom();\n+            AnalysisStats analysisStats = null;\n+            if (randomBoolean()) {\n+                analysisStats = OutlierDetectionStatsTests.createRandom();\n+            } else if (randomBoolean()) {\n+                analysisStats = RegressionStatsTests.createRandom();\n+            } else {\n+                analysisStats = ClassificationStatsTests.createRandom();\n+            }", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExNDE5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395114193", "bodyText": "Ah, much better!", "author": "dimitris-athanasiou", "createdAt": "2020-03-19T15:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NTExNA=="}], "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java\nindex c4011f80852..c5fc9f830a9 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java\n\n@@ -43,14 +43,12 @@ public class GetDataFrameAnalyticsStatsActionResponseTests extends AbstractWireS\n             IntStream.of(progressSize).forEach(progressIndex -> progress.add(\n                 new PhaseProgress(randomAlphaOfLength(10), randomIntBetween(0, 100))));\n             MemoryUsage memoryUsage = randomBoolean() ? null : MemoryUsageTests.createRandom();\n-            AnalysisStats analysisStats = null;\n-            if (randomBoolean()) {\n-                analysisStats = OutlierDetectionStatsTests.createRandom();\n-            } else if (randomBoolean()) {\n-                analysisStats = RegressionStatsTests.createRandom();\n-            } else {\n-                analysisStats = ClassificationStatsTests.createRandom();\n-            }\n+            AnalysisStats analysisStats = randomBoolean() ? null :\n+                randomFrom(\n+                    ClassificationStatsTests.createRandom(),\n+                    OutlierDetectionStatsTests.createRandom(),\n+                    RegressionStatsTests.createRandom())\n+                ;\n             Response.Stats stats = new Response.Stats(DataFrameAnalyticsConfigTests.randomValidId(),\n                 randomFrom(DataFrameAnalyticsState.values()), failureReason, progress, memoryUsage, analysisStats, null,\n                 randomAlphaOfLength(20));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5ODY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395098696", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,\n          \n          \n            \n                public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"outlierdetection_timing_stats\", true,", "author": "benwtrent", "createdAt": "2020-03-19T15:08:33Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/TimingStats.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.client.ml.dataframe.stats.outlierdetection;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class TimingStats implements ToXContentObject {\n+\n+    public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n+\n+    public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,", "originalCommit": "931e1b6ea151bc478f9b27177692f162a7b25f79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/TimingStats.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/TimingStats.java\nindex b0f9d0eb376..c6e4a081fd2 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/TimingStats.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/TimingStats.java\n\n@@ -31,7 +31,8 @@ public class TimingStats implements ToXContentObject {\n \n     public static final ParseField ELAPSED_TIME = new ParseField(\"elapsed_time\");\n \n-    public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"timing_stats\", true,\n+    public static ConstructingObjectParser<TimingStats, Void> PARSER = new ConstructingObjectParser<>(\"outlier_detection_timing_stats\",\n+        true,\n         a -> new TimingStats(TimeValue.timeValueMillis((long) a[0])));\n \n     static {\n"}}, {"oid": "3bcaa889688bd4f1d9de7a99561a7670646440fd", "url": "https://github.com/elastic/elasticsearch/commit/3bcaa889688bd4f1d9de7a99561a7670646440fd", "message": "Fix minor review points", "committedDate": "2020-03-19T15:38:47Z", "type": "commit"}, {"oid": "ea9fed5432c49a60c4f8b66be562be0b599896bf", "url": "https://github.com/elastic/elasticsearch/commit/ea9fed5432c49a60c4f8b66be562be0b599896bf", "message": "Outlier detection paremeters methods should be just a single method", "committedDate": "2020-03-19T15:43:26Z", "type": "commit"}, {"oid": "0d2aebaf22be37e24384b12ade79afc51433adba", "url": "https://github.com/elastic/elasticsearch/commit/0d2aebaf22be37e24384b12ade79afc51433adba", "message": "Make HLRC lenient and add getters", "committedDate": "2020-03-19T17:34:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjY3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395212679", "bodyText": "This will return a List<String> even if there is just one element. If this is to just be a string we should  declareString", "author": "benwtrent", "createdAt": "2020-03-19T17:50:29Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java", "diffHunk": "@@ -45,49 +41,85 @@\n     public static ConstructingObjectParser<Parameters, Void> PARSER = new ConstructingObjectParser<>(\"outlier_detection_parameters\",\n         true,\n         a -> new Parameters(\n-            (int) a[0],\n-            new TreeSet<>((List<String>) a[1]),\n-            (boolean) a[2],\n-            (double) a[3],\n-            (double) a[4],\n-            (boolean) a[5]\n+            (Integer) a[0],\n+            (String) a[1],\n+            (Boolean) a[2],\n+            (Double) a[3],\n+            (Double) a[4],\n+            (Boolean) a[5]\n         ));\n \n     static {\n-        PARSER.declareInt(constructorArg(), N_NEIGHBORS);\n-        PARSER.declareStringArray(constructorArg(), METHODS);\n-        PARSER.declareBoolean(constructorArg(), COMPUTE_FEATURE_INFLUENCE);\n-        PARSER.declareDouble(constructorArg(), FEATURE_INFLUENCE_THRESHOLD);\n-        PARSER.declareDouble(constructorArg(), OUTLIER_FRACTION);\n-        PARSER.declareBoolean(constructorArg(), STANDARDIZATION_ENABLED);\n+        PARSER.declareInt(optionalConstructorArg(), N_NEIGHBORS);\n+        PARSER.declareStringArray(optionalConstructorArg(), METHOD);", "originalCommit": "0d2aebaf22be37e24384b12ade79afc51433adba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c74d7f1e52c3e343c6d8a39a21040c1ba780821", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java\nindex 956d66c24b8..deafb55081d 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/stats/outlierdetection/Parameters.java\n\n@@ -51,7 +51,7 @@ public class Parameters implements ToXContentObject {\n \n     static {\n         PARSER.declareInt(optionalConstructorArg(), N_NEIGHBORS);\n-        PARSER.declareStringArray(optionalConstructorArg(), METHOD);\n+        PARSER.declareString(optionalConstructorArg(), METHOD);\n         PARSER.declareBoolean(optionalConstructorArg(), COMPUTE_FEATURE_INFLUENCE);\n         PARSER.declareDouble(optionalConstructorArg(), FEATURE_INFLUENCE_THRESHOLD);\n         PARSER.declareDouble(optionalConstructorArg(), OUTLIER_FRACTION);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNDIyNg==", "url": "https://github.com/elastic/elasticsearch/pull/53788#discussion_r395214226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                RegressionStatsTests.createRandom())\n          \n          \n            \n                            ;\n          \n          \n            \n                                RegressionStatsTests.createRandom());", "author": "benwtrent", "createdAt": "2020-03-19T17:53:05Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java", "diffHunk": "@@ -43,14 +43,12 @@ public static Response randomResponse(int listSize) {\n             IntStream.of(progressSize).forEach(progressIndex -> progress.add(\n                 new PhaseProgress(randomAlphaOfLength(10), randomIntBetween(0, 100))));\n             MemoryUsage memoryUsage = randomBoolean() ? null : MemoryUsageTests.createRandom();\n-            AnalysisStats analysisStats = null;\n-            if (randomBoolean()) {\n-                analysisStats = OutlierDetectionStatsTests.createRandom();\n-            } else if (randomBoolean()) {\n-                analysisStats = RegressionStatsTests.createRandom();\n-            } else {\n-                analysisStats = ClassificationStatsTests.createRandom();\n-            }\n+            AnalysisStats analysisStats = randomBoolean() ? null :\n+                randomFrom(\n+                    ClassificationStatsTests.createRandom(),\n+                    OutlierDetectionStatsTests.createRandom(),\n+                    RegressionStatsTests.createRandom())\n+                ;", "originalCommit": "0d2aebaf22be37e24384b12ade79afc51433adba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c74d7f1e52c3e343c6d8a39a21040c1ba780821", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java\nindex c5fc9f830a9..5cb2b3fef54 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/GetDataFrameAnalyticsStatsActionResponseTests.java\n\n@@ -47,8 +47,8 @@ public class GetDataFrameAnalyticsStatsActionResponseTests extends AbstractWireS\n                 randomFrom(\n                     ClassificationStatsTests.createRandom(),\n                     OutlierDetectionStatsTests.createRandom(),\n-                    RegressionStatsTests.createRandom())\n-                ;\n+                    RegressionStatsTests.createRandom()\n+                );\n             Response.Stats stats = new Response.Stats(DataFrameAnalyticsConfigTests.randomValidId(),\n                 randomFrom(DataFrameAnalyticsState.values()), failureReason, progress, memoryUsage, analysisStats, null,\n                 randomAlphaOfLength(20));\n"}}, {"oid": "0c74d7f1e52c3e343c6d8a39a21040c1ba780821", "url": "https://github.com/elastic/elasticsearch/commit/0c74d7f1e52c3e343c6d8a39a21040c1ba780821", "message": "Fix a couple more minor things", "committedDate": "2020-03-19T18:14:23Z", "type": "commit"}]}