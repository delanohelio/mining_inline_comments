{"pr_number": 53140, "pr_title": "Serialize NodesInfoRequest as a set of strings", "pr_createdAt": "2020-03-04T21:59:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53140", "timeline": [{"oid": "82476a98456c0e7ca942350dedeb75a769f46e7b", "url": "https://github.com/elastic/elasticsearch/commit/82476a98456c0e7ca942350dedeb75a769f46e7b", "message": "Replace booleans with set in NodesInfoRequest\n\nFor Node Info to be pluggable, NodesInfoRequest must be able to carry\narbitrary strings. This commit reworks the internals of that class to\nuse a set rather than hard-coded boolean fields.", "committedDate": "2020-03-04T19:04:28Z", "type": "commit"}, {"oid": "3c98a1c68704c4ab7f1c9b95582997a3ae557ccc", "url": "https://github.com/elastic/elasticsearch/commit/3c98a1c68704c4ab7f1c9b95582997a3ae557ccc", "message": "Add license; use standard unit test class", "committedDate": "2020-03-04T19:04:28Z", "type": "commit"}, {"oid": "49e31e3a4bda03e32b058d1758cd79140967caba", "url": "https://github.com/elastic/elasticsearch/commit/49e31e3a4bda03e32b058d1758cd79140967caba", "message": "Set initial defaults", "committedDate": "2020-03-04T19:04:28Z", "type": "commit"}, {"oid": "7b8f9d772eb4cd98195a5d053b9335cc2216e906", "url": "https://github.com/elastic/elasticsearch/commit/7b8f9d772eb4cd98195a5d053b9335cc2216e906", "message": "Streamline tests and test defaults\n\nNodesInfoRequest defaults to specifying all values. We need to test for\nthis behavior as we refactor. Also, we can use random testing for the\nvarious combinations of metrics rather than having individual tests for\neach metric.", "committedDate": "2020-03-04T19:04:28Z", "type": "commit"}, {"oid": "7c6de4d08a50884a9bc6391e7f490a3d294ee9cb", "url": "https://github.com/elastic/elasticsearch/commit/7c6de4d08a50884a9bc6391e7f490a3d294ee9cb", "message": "Add backwards compatibility for transport requests", "committedDate": "2020-03-04T19:44:36Z", "type": "commit"}, {"oid": "c71be193c0a43a31418d54c3c0c38662349a6e2d", "url": "https://github.com/elastic/elasticsearch/commit/c71be193c0a43a31418d54c3c0c38662349a6e2d", "message": "Rename variables and add javadoc", "committedDate": "2020-03-04T20:34:22Z", "type": "commit"}, {"oid": "40a9a98e0c9f7f2dd00a026612efeb3ba2dbe98b", "url": "https://github.com/elastic/elasticsearch/commit/40a9a98e0c9f7f2dd00a026612efeb3ba2dbe98b", "message": "Adding test javadoc and renaming test variables", "committedDate": "2020-03-04T20:45:11Z", "type": "commit"}, {"oid": "a6950a566e0fc7762fa4929de7686e78de6a1d43", "url": "https://github.com/elastic/elasticsearch/commit/a6950a566e0fc7762fa4929de7686e78de6a1d43", "message": "Reverse order of if/else clauses", "committedDate": "2020-03-04T21:39:43Z", "type": "commit"}, {"oid": "31699047009720648908cd26aaff7f7ce8c38392", "url": "https://github.com/elastic/elasticsearch/commit/31699047009720648908cd26aaff7f7ce8c38392", "message": "Take advantage of convenience methods for brevity", "committedDate": "2020-03-04T22:00:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNzk0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388227949", "bodyText": "I'm in two minds over whether this is a better name. WDYT?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void addOrRemoveMetric(boolean includeMetric, String metricName) {\n          \n          \n            \n                private void toggleMetric(boolean includeMetric, String metricName) {", "author": "pugnascotia", "createdAt": "2020-03-05T11:12:56Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -208,61 +199,116 @@ public NodesInfoRequest http(boolean http) {\n      * @return The request\n      */\n     public NodesInfoRequest plugins(boolean plugins) {\n-        this.plugins = plugins;\n+        addOrRemoveMetric(plugins, Metrics.PLUGINS.metricName());\n         return this;\n     }\n \n     /**\n      * @return true if information about plugins is requested\n      */\n     public boolean plugins() {\n-        return plugins;\n+        return Metrics.PLUGINS.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should information about ingest be returned\n      * @param ingest true if you want info\n      */\n     public NodesInfoRequest ingest(boolean ingest) {\n-        this.ingest = ingest;\n+        addOrRemoveMetric(ingest, Metrics.INGEST.metricName());\n         return this;\n     }\n \n     /**\n      * @return true if information about ingest is requested\n      */\n     public boolean ingest() {\n-        return ingest;\n+        return Metrics.INGEST.containedIn(requestedMetrics);\n     }\n \n     /**\n      * Should information about indices (currently just indexing buffers) be returned\n      * @param indices true if you want info\n      */\n     public NodesInfoRequest indices(boolean indices) {\n-        this.indices = indices;\n+        addOrRemoveMetric(indices, Metrics.INDICES.metricName());\n         return this;\n     }\n \n     /**\n      * @return true if information about indices (currently just indexing buffers)\n      */\n     public boolean indices() {\n-        return indices;\n+        return Metrics.INDICES.containedIn(requestedMetrics);\n+    }\n+\n+    /**\n+     * Helper method for adding and removing metrics.\n+     * @param includeMetric Whether or not to include a metric.\n+     * @param metricName Name of the metric to include or remove.\n+     */\n+    private void addOrRemoveMetric(boolean includeMetric, String metricName) {", "originalCommit": "31699047009720648908cd26aaff7f7ce8c38392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NjkxMg==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388476912", "bodyText": "toggle doesn't make sense, since the new state is passed in, not flipped.", "author": "rjernst", "createdAt": "2020-03-05T18:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNzk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NTg0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388555846", "bodyText": "I'll see if I can make this awkwardly named method go away when I change this class's public API in an upcoming PR.", "author": "williamrandolph", "createdAt": "2020-03-05T20:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNzk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3989d283d73d028ad0000c451650309d16ef15ce", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java\nindex 8cc010e0c80..4ea78a17fd0 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java\n\n@@ -258,7 +258,7 @@ public class NodesInfoRequest extends BaseNodesRequest<NodesInfoRequest> {\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         super.writeTo(out);\n-        if (out.getVersion().before(Version.V_8_0_0)){\n+        if (out.getVersion().before(Version.V_7_7_0)){\n             // prior to version 8.x, a NodesInfoRequest was serialized as a list\n             // of booleans in a fixed order\n             out.writeBoolean(Metrics.SETTINGS.containedIn(requestedMetrics));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMjYzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388232639", "bodyText": "What do you think about exposing requestedMetrics but readonly? e.g.\nSet<String> getRequestedMetrics() {\n   return Collections.unmodifiableSet(requestedMetrics);\n}\nThen the test can just do:\nassertThat(request1.getRequestedMetrics(), equalTo(request2.getRequestedMetrics()));", "author": "pugnascotia", "createdAt": "2020-03-05T11:22:55Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.node.info;\n+\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+/**\n+ * Granular tests for the {@link NodesInfoRequest} class. Higher-level tests\n+ * can be found in {@link org.elasticsearch.rest.action.admin.cluster.RestNodesInfoActionTests}.\n+ */\n+public class NodesInfoRequestTests extends ESTestCase {\n+\n+    /**\n+     * Make sure that we can set, serialize, and deserialize arbitrary sets\n+     * of metrics.\n+     */\n+    public void testMetricsSetters() throws Exception {\n+        NodesInfoRequest request = new NodesInfoRequest(randomAlphaOfLength(8));\n+        request.settings(randomBoolean());\n+        request.os(randomBoolean());\n+        request.process(randomBoolean());\n+        request.jvm(randomBoolean());\n+        request.threadPool(randomBoolean());\n+        request.transport(randomBoolean());\n+        request.http(randomBoolean());\n+        request.plugins(randomBoolean());\n+        request.ingest(randomBoolean());\n+        request.indices(randomBoolean());\n+        NodesInfoRequest deserializedRequest = roundTripRequest(request);\n+        assertThat(request.settings(), equalTo(deserializedRequest.settings()));\n+    }\n+\n+    /**\n+     * Test that a newly constructed NodesInfoRequestObject requests all of the\n+     * possible metrics defined in {@link NodesInfoRequest.Metrics}.\n+     */\n+    public void testNodesInfoRequestDefaults() {\n+        NodesInfoRequest defaultNodesInfoRequest = new NodesInfoRequest(randomAlphaOfLength(8));\n+        NodesInfoRequest allMetricsNodesInfoRequest = new NodesInfoRequest(randomAlphaOfLength(8));\n+        allMetricsNodesInfoRequest.all();\n+\n+        assertRequestsEqual(defaultNodesInfoRequest, allMetricsNodesInfoRequest);\n+    }\n+\n+    /**\n+     * Test that the {@link NodesInfoRequest#all()} method sets all of the\n+     * metrics to {@code true}.\n+     */\n+    public void testNodesInfoRequestAll() throws Exception {\n+        NodesInfoRequest request = new NodesInfoRequest(\"node\");\n+        request.all();\n+\n+        assertTrue(request.settings());\n+        assertTrue(request.os());\n+        assertTrue(request.process());\n+        assertTrue(request.jvm());\n+        assertTrue(request.threadPool());\n+        assertTrue(request.transport());\n+        assertTrue(request.http());\n+        assertTrue(request.plugins());\n+        assertTrue(request.ingest());\n+        assertTrue(request.indices());\n+    }\n+\n+    /**\n+     * Test that the {@link NodesInfoRequest#clear()} method sets all of the\n+     * metrics to {@code false}.\n+     */\n+    public void testNodesInfoRequestClear() throws Exception {\n+        NodesInfoRequest request = new NodesInfoRequest(\"node\");\n+        request.clear();\n+\n+        assertFalse(request.settings());\n+        assertFalse(request.os());\n+        assertFalse(request.process());\n+        assertFalse(request.jvm());\n+        assertFalse(request.threadPool());\n+        assertFalse(request.transport());\n+        assertFalse(request.http());\n+        assertFalse(request.plugins());\n+        assertFalse(request.ingest());\n+        assertFalse(request.indices());\n+    }\n+\n+    /**\n+     * Serialize and deserialize a request.\n+     * @param request A request to serialize.\n+     * @return The deserialized, \"round-tripped\" request.\n+     */\n+    private static NodesInfoRequest roundTripRequest(NodesInfoRequest request) throws Exception {\n+        try (BytesStreamOutput out = new BytesStreamOutput()) {\n+            request.writeTo(out);\n+            try (StreamInput in = out.bytes().streamInput()) {\n+                return new NodesInfoRequest(in);\n+            }\n+        }\n+    }\n+\n+    private static void assertRequestsEqual(NodesInfoRequest request1, NodesInfoRequest request2) {", "originalCommit": "31699047009720648908cd26aaff7f7ce8c38392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMzA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388313049", "bodyText": "I will do something like that on the next PR, when I change how this class interacts with other classes. In this refactoring PR, I wanted to focus on comparisons for the existing API. But you're right about where this should be heading.", "author": "williamrandolph", "createdAt": "2020-03-05T14:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMjYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "86da887119fe498b7cc0a741ba7e68c9ee7c2939", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\nindex 59811ee1aa5..7e944541024 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\n\n@@ -34,6 +34,9 @@ public class NodesInfoRequestTests extends ESTestCase {\n     /**\n      * Make sure that we can set, serialize, and deserialize arbitrary sets\n      * of metrics.\n+     *\n+     * TODO: Once we can set values by string, use a collection rather than\n+     *   checking each and every setter in the public API\n      */\n     public void testMetricsSetters() throws Exception {\n         NodesInfoRequest request = new NodesInfoRequest(randomAlphaOfLength(8));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5OTA0OA==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388399048", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(request.settings(), equalTo(deserializedRequest.settings()));\n          \n          \n            \n                    assertRequestsEqual(request, deserializedRequest);", "author": "williamrandolph", "createdAt": "2020-03-05T16:12:43Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.node.info;\n+\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+/**\n+ * Granular tests for the {@link NodesInfoRequest} class. Higher-level tests\n+ * can be found in {@link org.elasticsearch.rest.action.admin.cluster.RestNodesInfoActionTests}.\n+ */\n+public class NodesInfoRequestTests extends ESTestCase {\n+\n+    /**\n+     * Make sure that we can set, serialize, and deserialize arbitrary sets\n+     * of metrics.\n+     */\n+    public void testMetricsSetters() throws Exception {\n+        NodesInfoRequest request = new NodesInfoRequest(randomAlphaOfLength(8));\n+        request.settings(randomBoolean());\n+        request.os(randomBoolean());\n+        request.process(randomBoolean());\n+        request.jvm(randomBoolean());\n+        request.threadPool(randomBoolean());\n+        request.transport(randomBoolean());\n+        request.http(randomBoolean());\n+        request.plugins(randomBoolean());\n+        request.ingest(randomBoolean());\n+        request.indices(randomBoolean());\n+        NodesInfoRequest deserializedRequest = roundTripRequest(request);\n+        assertThat(request.settings(), equalTo(deserializedRequest.settings()));", "originalCommit": "31699047009720648908cd26aaff7f7ce8c38392", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86da887119fe498b7cc0a741ba7e68c9ee7c2939", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\nindex 59811ee1aa5..7e944541024 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\n\n@@ -34,6 +34,9 @@ public class NodesInfoRequestTests extends ESTestCase {\n     /**\n      * Make sure that we can set, serialize, and deserialize arbitrary sets\n      * of metrics.\n+     *\n+     * TODO: Once we can set values by string, use a collection rather than\n+     *   checking each and every setter in the public API\n      */\n     public void testMetricsSetters() throws Exception {\n         NodesInfoRequest request = new NodesInfoRequest(randomAlphaOfLength(8));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NTkxNg==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388475916", "bodyText": "This should be whatever version we are backporting to.", "author": "rjernst", "createdAt": "2020-03-05T18:20:53Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java", "diffHunk": "@@ -19,40 +19,48 @@\n \n package org.elasticsearch.action.admin.cluster.node.info;\n \n+import org.elasticsearch.Version;\n import org.elasticsearch.action.support.nodes.BaseNodesRequest;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n \n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * A request to get node (cluster) level information.\n  */\n public class NodesInfoRequest extends BaseNodesRequest<NodesInfoRequest> {\n \n-    private boolean settings = true;\n-    private boolean os = true;\n-    private boolean process = true;\n-    private boolean jvm = true;\n-    private boolean threadPool = true;\n-    private boolean transport = true;\n-    private boolean http = true;\n-    private boolean plugins = true;\n-    private boolean ingest = true;\n-    private boolean indices = true;\n+    private Set<String> requestedMetrics = Metrics.allMetrics();\n \n+    /**\n+     * Create a new NodeInfoRequest from a {@link StreamInput} object.\n+     *\n+     * @param in A stream input object.\n+     * @throws IOException if the stream cannot be deserialized.\n+     */\n     public NodesInfoRequest(StreamInput in) throws IOException {\n         super(in);\n-        settings = in.readBoolean();\n-        os = in.readBoolean();\n-        process = in.readBoolean();\n-        jvm = in.readBoolean();\n-        threadPool = in.readBoolean();\n-        transport = in.readBoolean();\n-        http = in.readBoolean();\n-        plugins = in.readBoolean();\n-        ingest = in.readBoolean();\n-        indices = in.readBoolean();\n+        requestedMetrics.clear();\n+        if (in.getVersion().before(Version.V_8_0_0)){", "originalCommit": "31699047009720648908cd26aaff7f7ce8c38392", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3989d283d73d028ad0000c451650309d16ef15ce", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java\nindex 8cc010e0c80..4ea78a17fd0 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequest.java\n\n@@ -45,7 +45,7 @@ public class NodesInfoRequest extends BaseNodesRequest<NodesInfoRequest> {\n     public NodesInfoRequest(StreamInput in) throws IOException {\n         super(in);\n         requestedMetrics.clear();\n-        if (in.getVersion().before(Version.V_8_0_0)){\n+        if (in.getVersion().before(Version.V_7_7_0)){\n             // prior to version 8.x, a NodesInfoRequest was serialized as a list\n             // of booleans in a fixed order\n             addOrRemoveMetric(in.readBoolean(), Metrics.SETTINGS.metricName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3ODM3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388478377", "bodyText": "You could loop through Metric.values() instead of hardcoding each to check for?", "author": "rjernst", "createdAt": "2020-03-05T18:25:33Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.node.info;\n+\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.test.ESTestCase;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+/**\n+ * Granular tests for the {@link NodesInfoRequest} class. Higher-level tests\n+ * can be found in {@link org.elasticsearch.rest.action.admin.cluster.RestNodesInfoActionTests}.\n+ */\n+public class NodesInfoRequestTests extends ESTestCase {\n+\n+    /**\n+     * Make sure that we can set, serialize, and deserialize arbitrary sets\n+     * of metrics.\n+     */\n+    public void testMetricsSetters() throws Exception {\n+        NodesInfoRequest request = new NodesInfoRequest(randomAlphaOfLength(8));\n+        request.settings(randomBoolean());\n+        request.os(randomBoolean());\n+        request.process(randomBoolean());\n+        request.jvm(randomBoolean());\n+        request.threadPool(randomBoolean());\n+        request.transport(randomBoolean());\n+        request.http(randomBoolean());\n+        request.plugins(randomBoolean());\n+        request.ingest(randomBoolean());\n+        request.indices(randomBoolean());\n+        NodesInfoRequest deserializedRequest = roundTripRequest(request);\n+        assertThat(request.settings(), equalTo(deserializedRequest.settings()));\n+    }\n+\n+    /**\n+     * Test that a newly constructed NodesInfoRequestObject requests all of the\n+     * possible metrics defined in {@link NodesInfoRequest.Metrics}.\n+     */\n+    public void testNodesInfoRequestDefaults() {\n+        NodesInfoRequest defaultNodesInfoRequest = new NodesInfoRequest(randomAlphaOfLength(8));\n+        NodesInfoRequest allMetricsNodesInfoRequest = new NodesInfoRequest(randomAlphaOfLength(8));\n+        allMetricsNodesInfoRequest.all();\n+\n+        assertRequestsEqual(defaultNodesInfoRequest, allMetricsNodesInfoRequest);\n+    }\n+\n+    /**\n+     * Test that the {@link NodesInfoRequest#all()} method sets all of the\n+     * metrics to {@code true}.\n+     */\n+    public void testNodesInfoRequestAll() throws Exception {\n+        NodesInfoRequest request = new NodesInfoRequest(\"node\");\n+        request.all();\n+\n+        assertTrue(request.settings());", "originalCommit": "31699047009720648908cd26aaff7f7ce8c38392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMzc0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53140#discussion_r388533747", "bodyText": "I'll add some TODOs to this effect, since I will definitely be doing this in a follow-up.", "author": "williamrandolph", "createdAt": "2020-03-05T20:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3ODM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "86da887119fe498b7cc0a741ba7e68c9ee7c2939", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\nindex 59811ee1aa5..7e944541024 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/info/NodesInfoRequestTests.java\n\n@@ -34,6 +34,9 @@ public class NodesInfoRequestTests extends ESTestCase {\n     /**\n      * Make sure that we can set, serialize, and deserialize arbitrary sets\n      * of metrics.\n+     *\n+     * TODO: Once we can set values by string, use a collection rather than\n+     *   checking each and every setter in the public API\n      */\n     public void testMetricsSetters() throws Exception {\n         NodesInfoRequest request = new NodesInfoRequest(randomAlphaOfLength(8));\n"}}, {"oid": "86da887119fe498b7cc0a741ba7e68c9ee7c2939", "url": "https://github.com/elastic/elasticsearch/commit/86da887119fe498b7cc0a741ba7e68c9ee7c2939", "message": "Add todos and fix test checks", "committedDate": "2020-03-05T20:48:21Z", "type": "commit"}, {"oid": "3989d283d73d028ad0000c451650309d16ef15ce", "url": "https://github.com/elastic/elasticsearch/commit/3989d283d73d028ad0000c451650309d16ef15ce", "message": "Disable backwards compatibility tests", "committedDate": "2020-03-05T21:52:42Z", "type": "commit"}]}