{"pr_number": 60953, "pr_title": "Simplify and Speed up some Compression Usage", "pr_createdAt": "2020-08-11T09:33:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60953", "timeline": [{"oid": "c41903c6ac5e23824ab5c923497a7302c0e9e2f9", "url": "https://github.com/elastic/elasticsearch/commit/c41903c6ac5e23824ab5c923497a7302c0e9e2f9", "message": "Simplify and Speed up some Compression Usage\n\nUse thread-local buffers and deflater and inflater instances to speed up\ncompressing and decompressing from in-memory bytes.\nNot manually invoking `end()` on these should be safe since their off-heap memory\nwill eventually be reclaimed by the finalizer thread which should not be an issue for thread-locals\nthat are not instantiated at a high frequency.\nThis significantly reduces the amount of byte copying and object creation relative to the previous approach\nwhich had to create a fresh temporary buffer (that was then resized multiple times during operations), copied\nbytes out of that buffer to a freshly allocated `byte[]`, used 4k stream buffers needlessly when working with\nbytes that are already in arrays (`writeTo` handles efficient writing to the compression logic now) etc.\n\nRelates #57284 which should be helped by this change to some degree.\nAlso, I expect this change to speed up mapping/template updates a little as those make heavy use of these\ncode paths.", "committedDate": "2020-08-11T09:31:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDE4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468710189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return uncompressed().equals(uncompressed());\n          \n          \n            \n                    return uncompressed().equals(that.uncompressed());\n          \n      \n    \n    \n  \n\nalso looking at the code above, I wonder why we don't compare crc32 first before comparing the compressed byte arrays", "author": "jaymode", "createdAt": "2020-08-11T16:28:54Z", "path": "server/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java", "diffHunk": "@@ -167,7 +162,7 @@ public boolean equals(Object o) {\n             return false;\n         }\n \n-        return Arrays.equals(uncompressed(), that.uncompressed());\n+        return uncompressed().equals(uncompressed());", "originalCommit": "c41903c6ac5e23824ab5c923497a7302c0e9e2f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjg1OA==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468822858", "bodyText": "\ud83e\udd26 thanks for spotting.\n\nI wonder why we don't compare crc32 first before comparing the compressed byte arrays\n\nI guess you could argue that it's really unlikely that the compressed bytes in the equal (as in equal uncompressed bytes) case aren't actually equal so you'd just add an extra int comparison in the equal case. So if we assume it's mostly the equal case here then the current version is better, I have no clue if that's true though. Probably doesn't matter much in practice since byte array comparison in JDK9+ is blazing fast anyway via jdk.internal.util.ArraysSupport#vectorizedMismatch? :)", "author": "original-brownbear", "createdAt": "2020-08-11T19:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NjY2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468846665", "bodyText": "Probably doesn't matter much in practice\n\nI agree that it doesn't matter much. Just a random thought that popped into my head :)", "author": "jaymode", "createdAt": "2020-08-11T20:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "af815ae229eb3ab4caa7cb502210356063d85a47", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java b/server/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java\nindex 8f15eeaedd0..08f0a1d34b4 100644\n--- a/server/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java\n+++ b/server/src/main/java/org/elasticsearch/common/compress/CompressedXContent.java\n\n@@ -162,7 +162,7 @@ public final class CompressedXContent {\n             return false;\n         }\n \n-        return uncompressed().equals(uncompressed());\n+        return uncompressed().equals(that.uncompressed());\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzA0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468713046", "bodyText": "IMO it would be a good idea to add a comment about why these threadlocals are not used in the other methods of the class", "author": "jaymode", "createdAt": "2020-08-11T16:33:18Z", "path": "server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java", "diffHunk": "@@ -129,4 +131,37 @@ public void close() throws IOException {\n             }\n         };\n     }\n+\n+    private static final ThreadLocal<Inflater> inflaterRef = ThreadLocal.withInitial(() -> new Inflater(true));", "originalCommit": "c41903c6ac5e23824ab5c923497a7302c0e9e2f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60953#discussion_r468822905", "bodyText": "++", "author": "original-brownbear", "createdAt": "2020-08-11T19:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "af815ae229eb3ab4caa7cb502210356063d85a47", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java b/server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java\nindex 896e153cbd7..8cb8084a4df 100644\n--- a/server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java\n+++ b/server/src/main/java/org/elasticsearch/common/compress/DeflateCompressor.java\n\n@@ -132,6 +132,8 @@ public class DeflateCompressor implements Compressor {\n         };\n     }\n \n+    // Reusable Inflater reference. Note: This is not used for the decompressing stream wrapper because we don't have strong guarantees\n+    // about the scope in which the stream wrapper is used.\n     private static final ThreadLocal<Inflater> inflaterRef = ThreadLocal.withInitial(() -> new Inflater(true));\n \n     private static final ThreadLocal<BytesStreamOutput> baos = ThreadLocal.withInitial(BytesStreamOutput::new);\n"}}, {"oid": "a02149db0c03391f23345b2d8d72850609152007", "url": "https://github.com/elastic/elasticsearch/commit/a02149db0c03391f23345b2d8d72850609152007", "message": "Merge remote-tracking branch 'elastic/master' into faster-compression", "committedDate": "2020-08-11T19:24:07Z", "type": "commit"}, {"oid": "af815ae229eb3ab4caa7cb502210356063d85a47", "url": "https://github.com/elastic/elasticsearch/commit/af815ae229eb3ab4caa7cb502210356063d85a47", "message": "CR: comments", "committedDate": "2020-08-11T19:44:54Z", "type": "commit"}]}