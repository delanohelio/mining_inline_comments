{"pr_number": 53033, "pr_title": "Add more tests in GeoBoundsAggregatorTests", "pr_createdAt": "2020-03-02T21:12:54Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53033", "timeline": [{"oid": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0", "url": "https://github.com/elastic/elasticsearch/commit/85386ee0a5c946b75edc6b89fbcbe1c7fa346de0", "message": "Add more tests in GeoBoundsAggregatorTests\n\nthis commit introduces more thorough field-type support tests\nas well as tests for unmapped and missing values.\n\nrelates #42949.", "committedDate": "2020-03-02T21:09:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTg4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387079883", "bodyText": "This looks like it has a mapped field, just no docs indexed against it, so I don't think it's correct to call it an \"Unmapped\" test? or am I missing something?", "author": "not-napoleon", "createdAt": "2020-03-03T15:03:12Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -26,20 +26,29 @@\n import org.apache.lucene.search.IndexSearcher;\n import org.apache.lucene.search.MatchAllDocsQuery;\n import org.apache.lucene.store.Directory;\n+import org.elasticsearch.ElasticsearchParseException;\n import org.elasticsearch.common.geo.GeoPoint;\n+import org.elasticsearch.geo.GeometryTestUtils;\n+import org.elasticsearch.geometry.Point;\n import org.elasticsearch.index.mapper.GeoPointFieldMapper;\n import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.search.aggregations.AggregationBuilder;\n import org.elasticsearch.search.aggregations.AggregatorTestCase;\n import org.elasticsearch.search.aggregations.support.AggregationInspectionHelper;\n+import org.elasticsearch.search.aggregations.support.CoreValuesSourceType;\n+import org.elasticsearch.search.aggregations.support.ValuesSourceType;\n import org.elasticsearch.test.geo.RandomGeoGenerator;\n \n+import java.util.List;\n+\n import static org.elasticsearch.search.aggregations.metrics.InternalGeoBoundsTests.GEOHASH_TOLERANCE;\n import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.startsWith;\n \n public class GeoBoundsAggregatorTests extends AggregatorTestCase {\n-    public void testEmpty() throws Exception {\n-        try (Directory dir = newDirectory();\n-             RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+    public void testUnmappedWithNoDocs() throws Exception {", "originalCommit": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NjUxNA==", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387156514", "bodyText": "woops. right!", "author": "talevy", "createdAt": "2020-03-03T16:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "54168c086eecc300f3f90a6efc9ae1bbfaeea3a8", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\nindex 85c0087da66..ef42a2d210e 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\n\n@@ -21,6 +21,7 @@ package org.elasticsearch.search.aggregations.metrics;\n \n import org.apache.lucene.document.Document;\n import org.apache.lucene.document.LatLonDocValuesField;\n+import org.apache.lucene.document.NumericDocValuesField;\n import org.apache.lucene.index.IndexReader;\n import org.apache.lucene.index.RandomIndexWriter;\n import org.apache.lucene.search.IndexSearcher;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NjIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387086206", "bodyText": "Nit - I think it would be clearer that the aggregation isn't operating on this field if we used some completely different type, like a keyword or a number.", "author": "not-napoleon", "createdAt": "2020-03-03T15:12:28Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -61,6 +70,83 @@ public void testEmpty() throws Exception {\n         }\n     }\n \n+    public void testUnmappedFieldWithDocs() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            if (randomBoolean()) {\n+                Document doc = new Document();\n+                doc.add(new LatLonDocValuesField(\"field\", 0.0, 0.0));\n+                w.addDocument(doc);\n+            }\n+\n+            GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                .field(\"non_existent\")\n+                .wrapLongitude(false);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+            try (IndexReader reader = w.getReader()) {\n+                IndexSearcher searcher = new IndexSearcher(reader);\n+                InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                assertTrue(Double.isInfinite(bounds.top));\n+                assertTrue(Double.isInfinite(bounds.bottom));\n+                assertTrue(Double.isInfinite(bounds.posLeft));\n+                assertTrue(Double.isInfinite(bounds.posRight));\n+                assertTrue(Double.isInfinite(bounds.negLeft));\n+                assertTrue(Double.isInfinite(bounds.negRight));\n+                assertFalse(AggregationInspectionHelper.hasValue(bounds));\n+            }\n+        }\n+    }\n+\n+    public void testMissing() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            Document doc = new Document();\n+            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));", "originalCommit": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NzQxOA==", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387157418", "bodyText": "\ud83d\udc4d", "author": "talevy", "createdAt": "2020-03-03T16:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NjIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "54168c086eecc300f3f90a6efc9ae1bbfaeea3a8", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\nindex 85c0087da66..ef42a2d210e 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\n\n@@ -102,7 +103,7 @@ public class GeoBoundsAggregatorTests extends AggregatorTestCase {\n     public void testMissing() throws Exception {\n         try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n             Document doc = new Document();\n-            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));\n+            doc.add(new NumericDocValuesField(\"not_field\", 1000L));\n             w.addDocument(doc);\n \n             MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53033#discussion_r387090642", "bodyText": "Nit - I would split this into two tests, for valid and invalid missing cases.", "author": "not-napoleon", "createdAt": "2020-03-03T15:18:46Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java", "diffHunk": "@@ -61,6 +70,83 @@ public void testEmpty() throws Exception {\n         }\n     }\n \n+    public void testUnmappedFieldWithDocs() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            if (randomBoolean()) {\n+                Document doc = new Document();\n+                doc.add(new LatLonDocValuesField(\"field\", 0.0, 0.0));\n+                w.addDocument(doc);\n+            }\n+\n+            GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                .field(\"non_existent\")\n+                .wrapLongitude(false);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+            try (IndexReader reader = w.getReader()) {\n+                IndexSearcher searcher = new IndexSearcher(reader);\n+                InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                assertTrue(Double.isInfinite(bounds.top));\n+                assertTrue(Double.isInfinite(bounds.bottom));\n+                assertTrue(Double.isInfinite(bounds.posLeft));\n+                assertTrue(Double.isInfinite(bounds.posRight));\n+                assertTrue(Double.isInfinite(bounds.negLeft));\n+                assertTrue(Double.isInfinite(bounds.negRight));\n+                assertFalse(AggregationInspectionHelper.hasValue(bounds));\n+            }\n+        }\n+    }\n+\n+    public void testMissing() throws Exception {\n+        try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n+            Document doc = new Document();\n+            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));\n+            w.addDocument(doc);\n+\n+            MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n+            fieldType.setHasDocValues(true);\n+            fieldType.setName(\"field\");\n+\n+            Point point = GeometryTestUtils.randomPoint(false);\n+            double lon = point.getX();\n+            double lat = point.getY();\n+\n+            // valid missing values\n+            for (Object missingVal : List.of(\"POINT(\" + lon + \" \" + lat + \")\", lat + \", \" + lon, new GeoPoint(lat, lon))) {\n+                GeoBoundsAggregationBuilder aggBuilder = new GeoBoundsAggregationBuilder(\"my_agg\")\n+                    .field(\"field\")\n+                    .missing(missingVal)\n+                    .wrapLongitude(false);\n+\n+                try (IndexReader reader = w.getReader()) {\n+                    IndexSearcher searcher = new IndexSearcher(reader);\n+                    InternalGeoBounds bounds = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n+                    assertThat(bounds.top, equalTo(lat));\n+                    assertThat(bounds.bottom, equalTo(lat));\n+                    assertThat(bounds.posLeft, equalTo(lon >= 0 ? lon : Double.POSITIVE_INFINITY));\n+                    assertThat(bounds.posRight, equalTo(lon >= 0 ? lon : Double.NEGATIVE_INFINITY));\n+                    assertThat(bounds.negLeft, equalTo(lon >= 0 ? Double.POSITIVE_INFINITY : lon));\n+                    assertThat(bounds.negRight, equalTo(lon >= 0 ? Double.NEGATIVE_INFINITY : lon));\n+                }\n+            }\n+\n+            // invalid missing values", "originalCommit": "85386ee0a5c946b75edc6b89fbcbe1c7fa346de0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54168c086eecc300f3f90a6efc9ae1bbfaeea3a8", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\nindex 85c0087da66..ef42a2d210e 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/GeoBoundsAggregatorTests.java\n\n@@ -102,7 +103,7 @@ public class GeoBoundsAggregatorTests extends AggregatorTestCase {\n     public void testMissing() throws Exception {\n         try (Directory dir = newDirectory(); RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n             Document doc = new Document();\n-            doc.add(new LatLonDocValuesField(\"not_field\", 0.0, 0.0));\n+            doc.add(new NumericDocValuesField(\"not_field\", 1000L));\n             w.addDocument(doc);\n \n             MappedFieldType fieldType = new GeoPointFieldMapper.GeoPointFieldType();\n"}}, {"oid": "9be81c3d163a8e51abb6c5a5d964cced2c376167", "url": "https://github.com/elastic/elasticsearch/commit/9be81c3d163a8e51abb6c5a5d964cced2c376167", "message": "Merge remote-tracking branch 'elastic/master' into geobounds-unittests", "committedDate": "2020-03-03T16:47:36Z", "type": "commit"}, {"oid": "54168c086eecc300f3f90a6efc9ae1bbfaeea3a8", "url": "https://github.com/elastic/elasticsearch/commit/54168c086eecc300f3f90a6efc9ae1bbfaeea3a8", "message": "respond to review comments", "committedDate": "2020-03-03T16:56:05Z", "type": "commit"}]}