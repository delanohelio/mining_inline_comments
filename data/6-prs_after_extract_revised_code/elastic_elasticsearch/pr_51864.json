{"pr_number": 51864, "pr_title": "Add enterprise mode and refactor", "pr_createdAt": "2020-02-04T14:11:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51864", "timeline": [{"oid": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf", "url": "https://github.com/elastic/elasticsearch/commit/588acf8a8dae590dcfd66f65ce4ebed01082ceaf", "message": "Add enterprise mode and refactor", "committedDate": "2020-02-04T13:41:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MjY1OA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r374692658", "bodyText": "The allowTrial argument is always true for all usages. It can be dropped unless anyone can foresee some future usage.", "author": "ywangd", "createdAt": "2020-02-04T14:13:03Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +809,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    private synchronized boolean checkMinimumLicense(\n+        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {", "originalCommit": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MTYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375071638", "bodyText": "I think we should leave this be. While this is currently the case, there is no guarantee that all features will be available in trial*, and having this as a parameter would help future implementations take this into account in license checks.\n* We do have differences in handling trial licenses already w.r.t. to functionality already, see #isTransportTlsRequired for instance", "author": "jkakavas", "createdAt": "2020-02-05T05:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MjY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNjI5OA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375226298", "bodyText": "The semantic of isTransportRequired method is a bit different from the isXxxAllowed methods. So I can see trial could be handled differently. With that being said, I agree to keep the argument for 1) future proof; 2) consistent with pre-refactor logic", "author": "ywangd", "createdAt": "2020-02-05T12:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MjY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxOTUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376219524", "bodyText": "The semantic of isTransportRequired method is a bit different from the isXxxAllowed methods. So I can see trial could be handled differently.\n\nagreed, I was just trying to make a point that it is not unheard of to have the need to treat trial differently.", "author": "jkakavas", "createdAt": "2020-02-07T05:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MjY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "0fe8af17a000a5c5f976f33bc962dacbe201336e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 2aabebbf49c..1615c69f9ae 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -810,11 +802,21 @@ public class XPackLicenseState {\n         return new XPackLicenseState(this);\n     }\n \n-    private synchronized boolean checkSecurityEnabled() {\n+    private synchronized boolean isAllowedBySecurity() {\n         return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n     }\n \n-    private synchronized boolean checkMinimumLicense(\n+    /**\n+     * Test whether a feature is allowed by the status of current license and security config.\n+     *\n+     * @param minimumMode  The minimum license to meet or exceed\n+     * @param needSecurity Whether security is required for feature to be allowed\n+     * @param needActive   Whether current license needs to be active\n+     * @param allowTrial   Whether the feature is allowed for trial license\n+     *\n+     * @return true if feature is allowed, otherwise false\n+     */\n+    private synchronized boolean isAllowedByLicenseAndSecurity(\n         OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {\n \n         final Status localStatus = status;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MzU4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r374693587", "bodyText": "It is possible to replace this method with just a call of checkMinimumLicense(MISSING, true, false, true). But I feel a separate method clears the intention and is more readable.", "author": "ywangd", "createdAt": "2020-02-04T14:14:36Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +809,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {", "originalCommit": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwOTI1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375109253", "bodyText": "It is possible to replace this method with just a call of checkMinimumLicense(MISSING, true, false, true)\n\nis it ? That wouldn't handle the intricacies of isSecurityExplicitlyEnabled vs isSecurityEnabled", "author": "jkakavas", "createdAt": "2020-02-05T08:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MzU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyNzM1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375227359", "bodyText": "isSecurityEnabled is called inside checkMinimumLicense as well. So it can handle the subtlety. I do prefer to keep it separated for clarity.", "author": "ywangd", "createdAt": "2020-02-05T12:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MzU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0fe8af17a000a5c5f976f33bc962dacbe201336e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex 2aabebbf49c..1615c69f9ae 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -810,11 +802,21 @@ public class XPackLicenseState {\n         return new XPackLicenseState(this);\n     }\n \n-    private synchronized boolean checkSecurityEnabled() {\n+    private synchronized boolean isAllowedBySecurity() {\n         return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n     }\n \n-    private synchronized boolean checkMinimumLicense(\n+    /**\n+     * Test whether a feature is allowed by the status of current license and security config.\n+     *\n+     * @param minimumMode  The minimum license to meet or exceed\n+     * @param needSecurity Whether security is required for feature to be allowed\n+     * @param needActive   Whether current license needs to be active\n+     * @param allowTrial   Whether the feature is allowed for trial license\n+     *\n+     * @return true if feature is allowed, otherwise false\n+     */\n+    private synchronized boolean isAllowedByLicenseAndSecurity(\n         OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {\n \n         final Status localStatus = status;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5Mzk3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r374693977", "bodyText": "isActive is an existing synchronized method.", "author": "ywangd", "createdAt": "2020-02-04T14:15:20Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -391,8 +372,8 @@ public synchronized boolean isAuditingAllowed() {\n      *\n      * @return true if the license allows for the stats and health APIs to be used.\n      */\n-    public synchronized boolean isStatsAndHealthAllowed() {\n-        return status.active;\n+    public boolean isStatsAndHealthAllowed() {\n+        return isActive();", "originalCommit": "588acf8a8dae590dcfd66f65ce4ebed01082ceaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyOTE3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376829172", "bodyText": "I'd prefer a method name like allowForAllLicenses()\nMost of these isXYZAllowed() methods are added by people who deal with licensing questions very rarely. They just want to come in and implement a method in the most obvious way.\nThey don't know what \"active\" means (I forget what it means half the time), and their likely response here is \"I'll just copy one of these other methods and hope that it's right\". And it will be, but I'd rather we had something that was clearly correct to them, so that they don't need to hope. And that is a method that is named to be exactly in line with their requirement.\nThere's a good chance the PR reviewer isn't an expert on licensing either, so a method that copies this code isn't obviously correct to the reviewer - they need to look at how other methods are implemented to check. A method that has the equivalent of isMyFeatureAllowed() { return thisIsAllowedForAllLicenseTypes(); } is correct just from reading the diff.\nI'm very open to discussion on a preferred name, but I'm pretty keen for these to be readable in a literal sense.", "author": "tvernum", "createdAt": "2020-02-10T00:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5Mzk3Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e2622daf558fd3535e26700363887ef1adf7c305", "url": "https://github.com/elastic/elasticsearch/commit/e2622daf558fd3535e26700363887ef1adf7c305", "message": "Fix test failure", "committedDate": "2020-02-04T14:30:46Z", "type": "commit"}, {"oid": "ff12f9168f806663a7df8f26a8ac08cef5034c2d", "url": "https://github.com/elastic/elasticsearch/commit/ff12f9168f806663a7df8f26a8ac08cef5034c2d", "message": "Fix broken IT tests", "committedDate": "2020-02-05T00:06:56Z", "type": "commit"}, {"oid": "f311e7a6efc2a44fc3103685a9466600dd6ceac5", "url": "https://github.com/elastic/elasticsearch/commit/f311e7a6efc2a44fc3103685a9466600dd6ceac5", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode", "committedDate": "2020-02-05T00:48:54Z", "type": "commit"}, {"oid": "5805cde25f08286633498d71c10cba9659b2c2d0", "url": "https://github.com/elastic/elasticsearch/commit/5805cde25f08286633498d71c10cba9659b2c2d0", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode", "committedDate": "2020-02-05T01:38:19Z", "type": "commit"}, {"oid": "23e265e5cb807dc4ef13a62d92419f758293405a", "url": "https://github.com/elastic/elasticsearch/commit/23e265e5cb807dc4ef13a62d92419f758293405a", "message": "Fix more test failure due to missing enterprise handling", "committedDate": "2020-02-05T05:25:31Z", "type": "commit"}, {"oid": "25411e32eed4467c2627ffd39179c49d0d06eb98", "url": "https://github.com/elastic/elasticsearch/commit/25411e32eed4467c2627ffd39179c49d0d06eb98", "message": "Remove unnecessary javadocs", "committedDate": "2020-02-05T05:34:26Z", "type": "commit"}, {"oid": "b599f829b0fa6e096fa4f95c8cac0b1679ded911", "url": "https://github.com/elastic/elasticsearch/commit/b599f829b0fa6e096fa4f95c8cac0b1679ded911", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode", "committedDate": "2020-02-05T05:34:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MDYwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375070601", "bodyText": "The name of the method threw me off while initially reading the code. I don't have a good suggestion that isn't too long for a method name, but can we add a line of javadoc explaining that this checks if the current license is at least minimumMode and the rest of the requirements are satisfied ?", "author": "jkakavas", "createdAt": "2020-02-05T05:52:29Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +802,24 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean checkSecurityEnabled() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    private synchronized boolean checkMinimumLicense(", "originalCommit": "b599f829b0fa6e096fa4f95c8cac0b1679ded911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyODc5OA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375228798", "bodyText": "I agree that the name is not good. I am not happy with the usage of check since this name usually feels like a void method. How about isAllowedByLicenseAndSecurity? I'll also add javadoc. Thanks", "author": "ywangd", "createdAt": "2020-02-05T12:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MDYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyMjg5OA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375622898", "bodyText": "Updated", "author": "ywangd", "createdAt": "2020-02-06T03:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3MDYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fe8af17a000a5c5f976f33bc962dacbe201336e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex bc35b6ebf7a..1615c69f9ae 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -803,11 +802,21 @@ public class XPackLicenseState {\n         return new XPackLicenseState(this);\n     }\n \n-    private synchronized boolean checkSecurityEnabled() {\n+    private synchronized boolean isAllowedBySecurity() {\n         return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n     }\n \n-    private synchronized boolean checkMinimumLicense(\n+    /**\n+     * Test whether a feature is allowed by the status of current license and security config.\n+     *\n+     * @param minimumMode  The minimum license to meet or exceed\n+     * @param needSecurity Whether security is required for feature to be allowed\n+     * @param needActive   Whether current license needs to be active\n+     * @param allowTrial   Whether the feature is allowed for trial license\n+     *\n+     * @return true if feature is allowed, otherwise false\n+     */\n+    private synchronized boolean isAllowedByLicenseAndSecurity(\n         OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {\n \n         final Status localStatus = status;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5OTg2OA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375099868", "bodyText": "We can probably remove this and expose an isFipsModeAllowed() method here. Happy with a followup but I think it makes sense for the current refactoring", "author": "jkakavas", "createdAt": "2020-02-05T07:45:27Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -31,7 +31,7 @@\n public class XPackLicenseState {\n \n     public static final Set<OperationMode> FIPS_ALLOWED_LICENSE_OPERATION_MODES =", "originalCommit": "b599f829b0fa6e096fa4f95c8cac0b1679ded911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMDI2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375230263", "bodyText": "Sounds like a reasonable change to me. There are a few other public static boolean isXxxAllowedForOperationMode methods. This can be another addition.", "author": "ywangd", "createdAt": "2020-02-05T12:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5OTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyMzA3NA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375623074", "bodyText": "Updated", "author": "ywangd", "createdAt": "2020-02-06T03:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5OTg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "0fe8af17a000a5c5f976f33bc962dacbe201336e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex bc35b6ebf7a..1615c69f9ae 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -30,9 +28,6 @@ import java.util.function.BiFunction;\n  */\n public class XPackLicenseState {\n \n-    public static final Set<OperationMode> FIPS_ALLOWED_LICENSE_OPERATION_MODES =\n-        EnumSet.of(OperationMode.PLATINUM, OperationMode.ENTERPRISE, OperationMode.TRIAL);\n-\n     /** Messages for each feature which are printed when the license expires. */\n     static final Map<String, String[]> EXPIRATION_MESSAGES;\n     static {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMTUxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375111511", "bodyText": "Could we make this generic too ? Something like isMinimumLicense(final OperationMode minimumMode, final OperationMode currentMode) ? The callers of this should know what the minimum allowed op mode is", "author": "jkakavas", "createdAt": "2020-02-05T08:18:44Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -857,17 +780,16 @@ private static boolean isSecurityEnabled(final OperationMode mode, final boolean\n      *\n      * @return true is the license is compatible, otherwise false\n      */\n-    public synchronized boolean isCcrAllowed() {\n-        final Status currentStatus = status;\n-        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode);\n+    public boolean isCcrAllowed() {\n+        return checkMinimumLicense(OperationMode.PLATINUM, false, true, true);\n     }\n \n     public static boolean isCcrAllowedForOperationMode(final OperationMode operationMode) {\n-        return isPlatinumOrTrialOperationMode(operationMode);\n+        return isPlatinumPlusOrTrialOperationMode(operationMode);\n     }\n \n-    public static boolean isPlatinumOrTrialOperationMode(final OperationMode operationMode) {\n-        return operationMode == OperationMode.PLATINUM || operationMode == OperationMode.TRIAL;\n+    public static boolean isPlatinumPlusOrTrialOperationMode(final OperationMode operationMode) {", "originalCommit": "b599f829b0fa6e096fa4f95c8cac0b1679ded911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNzI0OA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375237248", "bodyText": "I thought about consolidate this with checkMinimumLicense method as well. I didn't do it because this method is static and not synchronised. Also it is used as a predicate for RemoteClusterLicenseChecker. So it has some ripple effect.\nIt will be more feasible if it does not need to be consolidated with checkMinimumLicense. I'll give it a go.\nPS: I am confused by the inconsistent synchronisation involved for license check. These static methods can possibly run into racing issues. Is this not a concern? If so why other methods require synchronize?\nThere are pair of methods for some checks, e.g. isMachineLearningAllowedForOperationMode and isMachineLearningAllowed, where the former is static and the latter is non-static and synchronized. How so?", "author": "ywangd", "createdAt": "2020-02-05T12:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMTUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyMzc2NA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375623764", "bodyText": "This methoid is now refactored to be isAllowedByOperationMode. It is also used by the isAllowedByLicenseAndSecurity (previously checkMinimumLicense) method. So that's an extra generification.", "author": "ywangd", "createdAt": "2020-02-06T03:23:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMTUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fe8af17a000a5c5f976f33bc962dacbe201336e", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex bc35b6ebf7a..1615c69f9ae 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -781,7 +780,7 @@ public class XPackLicenseState {\n      * @return true is the license is compatible, otherwise false\n      */\n     public boolean isCcrAllowed() {\n-        return checkMinimumLicense(OperationMode.PLATINUM, false, true, true);\n+        return isAllowedByLicenseAndSecurity(OperationMode.PLATINUM, false, true, true);\n     }\n \n     public static boolean isCcrAllowedForOperationMode(final OperationMode operationMode) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMzM3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375113371", "bodyText": "nit: I think we generally prefer separate calls for builder as it is clearer to read, or at least split them in different lines. Also maxResourceUnits can be called with a randomIntegerInRange", "author": "jkakavas", "createdAt": "2020-02-05T08:23:25Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java", "diffHunk": "@@ -274,14 +274,17 @@ public static License generateSignedLicense(String type, int version, long issue\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType)\n+                .type(licenseType )\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n         if (version == License.VERSION_START) {\n             builder.subscriptionType((type != null) ? type : randomFrom(\"dev\", \"gold\", \"platinum\", \"silver\"));\n             builder.feature(randomAlphaOfLength(10));\n         }\n+        if (\"enterprise\".equals(licenseType)) {\n+            builder.version(License.VERSION_ENTERPRISE).maxResourceUnits(5).maxNodes(-1);", "originalCommit": "b599f829b0fa6e096fa4f95c8cac0b1679ded911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzODEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r375238108", "bodyText": "Splitted them in different lines. Also updated for random integer.", "author": "ywangd", "createdAt": "2020-02-05T12:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMzM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fe8af17a000a5c5f976f33bc962dacbe201336e", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\nindex 627bbafe390..2c48e25a760 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\n\n@@ -283,7 +283,10 @@ public class TestUtils {\n             builder.feature(randomAlphaOfLength(10));\n         }\n         if (\"enterprise\".equals(licenseType)) {\n-            builder.version(License.VERSION_ENTERPRISE).maxResourceUnits(5).maxNodes(-1);\n+            builder\n+                .version(License.VERSION_ENTERPRISE)\n+                .maxResourceUnits(randomIntBetween(5, 500))\n+                .maxNodes(-1);\n         }\n         final LicenseSigner signer = new LicenseSigner(getTestPriKeyPath(), getTestPubKeyPath());\n         return signer.sign(builder.build());\n"}}, {"oid": "0fe8af17a000a5c5f976f33bc962dacbe201336e", "url": "https://github.com/elastic/elasticsearch/commit/0fe8af17a000a5c5f976f33bc962dacbe201336e", "message": "Address feedbacks", "committedDate": "2020-02-05T14:09:14Z", "type": "commit"}, {"oid": "e6a1ac20e2bdb347815945523b6e10da00a18bbd", "url": "https://github.com/elastic/elasticsearch/commit/e6a1ac20e2bdb347815945523b6e10da00a18bbd", "message": "Address feedback to consolidate OperationMode logic", "committedDate": "2020-02-06T03:15:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODUzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376218539", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static boolean isAllowedByLicenseInfo(final XPackInfoResponse.LicenseInfo licenseInfo) {\n          \n          \n            \n                public static boolean isAllowedByLicense(final XPackInfoResponse.LicenseInfo licenseInfo) {", "author": "jkakavas", "createdAt": "2020-02-07T05:19:47Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java", "diffHunk": "@@ -138,9 +138,9 @@ public RemoteClusterLicenseChecker(final Client client, final Predicate<License.\n         this.predicate = predicate;\n     }\n \n-    public static boolean isLicensePlatinumOrTrial(final XPackInfoResponse.LicenseInfo licenseInfo) {\n+    public static boolean isAllowedByLicenseInfo(final XPackInfoResponse.LicenseInfo licenseInfo) {", "originalCommit": "e6a1ac20e2bdb347815945523b6e10da00a18bbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzQ4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376357482", "bodyText": "Updated", "author": "ywangd", "createdAt": "2020-02-07T12:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d413b0c961ab6a6566c05ed1c4452797e3c55f33", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java\nindex 96177faa4a6..b4abf6e88c8 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java\n\n@@ -138,7 +138,7 @@ public final class RemoteClusterLicenseChecker {\n         this.predicate = predicate;\n     }\n \n-    public static boolean isAllowedByLicenseInfo(final XPackInfoResponse.LicenseInfo licenseInfo) {\n+    public static boolean isAllowedByLicense(final XPackInfoResponse.LicenseInfo licenseInfo) {\n         final License.OperationMode mode = License.OperationMode.parse(licenseInfo.getMode());\n         return XPackLicenseState.isAllowedByOperationMode(mode, License.OperationMode.PLATINUM, true);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODgwNA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376218804", "bodyText": "nit: extra space", "author": "jkakavas", "createdAt": "2020-02-07T05:21:17Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java", "diffHunk": "@@ -274,14 +274,20 @@ public static License generateSignedLicense(String type, int version, long issue\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType)\n+                .type(licenseType )", "originalCommit": "e6a1ac20e2bdb347815945523b6e10da00a18bbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzU0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376357545", "bodyText": "Fixed", "author": "ywangd", "createdAt": "2020-02-07T12:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "d413b0c961ab6a6566c05ed1c4452797e3c55f33", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\nindex 2c48e25a760..75ff3e50c12 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\n\n@@ -274,7 +274,7 @@ public class TestUtils {\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType )\n+                .type(licenseType)\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODkyMA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376218920", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        builder\n          \n          \n            \n                        builder.version(License.VERSION_ENTERPRISE)", "author": "jkakavas", "createdAt": "2020-02-07T05:21:57Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java", "diffHunk": "@@ -274,14 +274,20 @@ public static License generateSignedLicense(String type, int version, long issue\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType)\n+                .type(licenseType )\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n         if (version == License.VERSION_START) {\n             builder.subscriptionType((type != null) ? type : randomFrom(\"dev\", \"gold\", \"platinum\", \"silver\"));\n             builder.feature(randomAlphaOfLength(10));\n         }\n+        if (\"enterprise\".equals(licenseType)) {\n+            builder", "originalCommit": "e6a1ac20e2bdb347815945523b6e10da00a18bbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzU5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376357592", "bodyText": "Updated", "author": "ywangd", "createdAt": "2020-02-07T12:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "d413b0c961ab6a6566c05ed1c4452797e3c55f33", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\nindex 2c48e25a760..75ff3e50c12 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\n\n@@ -274,7 +274,7 @@ public class TestUtils {\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType )\n+                .type(licenseType)\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODk1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376218957", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .version(License.VERSION_ENTERPRISE)", "author": "jkakavas", "createdAt": "2020-02-07T05:22:16Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java", "diffHunk": "@@ -274,14 +274,20 @@ public static License generateSignedLicense(String type, int version, long issue\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType)\n+                .type(licenseType )\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n         if (version == License.VERSION_START) {\n             builder.subscriptionType((type != null) ? type : randomFrom(\"dev\", \"gold\", \"platinum\", \"silver\"));\n             builder.feature(randomAlphaOfLength(10));\n         }\n+        if (\"enterprise\".equals(licenseType)) {\n+            builder\n+                .version(License.VERSION_ENTERPRISE)", "originalCommit": "e6a1ac20e2bdb347815945523b6e10da00a18bbd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d413b0c961ab6a6566c05ed1c4452797e3c55f33", "chunk": "diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\nindex 2c48e25a760..75ff3e50c12 100644\n--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\n+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/TestUtils.java\n\n@@ -274,7 +274,7 @@ public class TestUtils {\n                 .version(version)\n                 .expiryDate(System.currentTimeMillis() + expiryDuration.getMillis())\n                 .issueDate(issue)\n-                .type(licenseType )\n+                .type(licenseType)\n                 .issuedTo(\"customer\")\n                 .issuer(\"elasticsearch\")\n                 .maxNodes(5);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMTM4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376221385", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Test whether a feature is allowed by the status of current license and security config.\n          \n          \n            \n                 * Test whether a feature is allowed by the status of current license and security configuration.", "author": "jkakavas", "createdAt": "2020-02-07T05:35:45Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +805,32 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean isAllowedBySecurity() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    /**\n+     * Test whether a feature is allowed by the status of current license and security config.", "originalCommit": "e6a1ac20e2bdb347815945523b6e10da00a18bbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzY0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376357649", "bodyText": "Updated", "author": "ywangd", "createdAt": "2020-02-07T12:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMTM4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d413b0c961ab6a6566c05ed1c4452797e3c55f33", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex fbec3b16af6..d4dacd96d73 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -811,7 +802,7 @@ public class XPackLicenseState {\n     }\n \n     /**\n-     * Test whether a feature is allowed by the status of current license and security config.\n+     * Test whether a feature is allowed by the status of current license and security configuration.\n      *\n      * @param minimumMode  The minimum license to meet or exceed\n      * @param needSecurity Whether security is required for feature to be allowed\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMzI0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376223249", "bodyText": "I agree with your reasoning that since status is not volatile, we can remove the local variables from here and other places ( I don't think there was an explicit reason this was not done in #33396 )", "author": "jkakavas", "createdAt": "2020-02-07T05:45:23Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -880,4 +805,32 @@ public static boolean isPlatinumOrTrialOperationMode(final OperationMode operati\n     public synchronized XPackLicenseState copyCurrentLicenseState() {\n         return new XPackLicenseState(this);\n     }\n+\n+    private synchronized boolean isAllowedBySecurity() {\n+        return isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n+    }\n+\n+    /**\n+     * Test whether a feature is allowed by the status of current license and security config.\n+     *\n+     * @param minimumMode  The minimum license to meet or exceed\n+     * @param needSecurity Whether security is required for feature to be allowed\n+     * @param needActive   Whether current license needs to be active\n+     * @param allowTrial   Whether the feature is allowed for trial license\n+     *\n+     * @return true if feature is allowed, otherwise false\n+     */\n+    private synchronized boolean isAllowedByLicenseAndSecurity(\n+        OperationMode minimumMode, boolean needSecurity, boolean needActive, boolean allowTrial) {\n+\n+        final Status localStatus = status;", "originalCommit": "e6a1ac20e2bdb347815945523b6e10da00a18bbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1Nzc1OA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376357758", "bodyText": "Removed. Also see my comments below", "author": "ywangd", "createdAt": "2020-02-07T12:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d413b0c961ab6a6566c05ed1c4452797e3c55f33", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\nindex fbec3b16af6..d4dacd96d73 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java\n\n@@ -811,7 +802,7 @@ public class XPackLicenseState {\n     }\n \n     /**\n-     * Test whether a feature is allowed by the status of current license and security config.\n+     * Test whether a feature is allowed by the status of current license and security configuration.\n      *\n      * @param minimumMode  The minimum license to meet or exceed\n      * @param needSecurity Whether security is required for feature to be allowed\n"}}, {"oid": "d413b0c961ab6a6566c05ed1c4452797e3c55f33", "url": "https://github.com/elastic/elasticsearch/commit/d413b0c961ab6a6566c05ed1c4452797e3c55f33", "message": "Address feedbacks", "committedDate": "2020-02-07T12:00:32Z", "type": "commit"}, {"oid": "540538ee23a30c308c81b2021581164579fc423e", "url": "https://github.com/elastic/elasticsearch/commit/540538ee23a30c308c81b2021581164579fc423e", "message": "Merge remote-tracking branch 'origin/master' into es-51081-enterprise-operation-mode", "committedDate": "2020-02-07T12:27:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyODE1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376828159", "bodyText": "I'd prefer that we change this to either be < PLATINUM, or use methods on XPackLicenseState so that we don't have a bunch of code that assumes the set of licenses and their ordering.", "author": "tvernum", "createdAt": "2020-02-09T23:49:13Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java", "diffHunk": "@@ -256,6 +256,7 @@ public void registerLicense(final PutLicenseRequest request, final ActionListene\n                         \"] license unless TLS is configured or security is disabled\");\n                 } else if (XPackSettings.FIPS_MODE_ENABLED.get(settings)\n                     && newLicense.operationMode() != License.OperationMode.PLATINUM\n+                    && newLicense.operationMode() != License.OperationMode.ENTERPRISE", "originalCommit": "540538ee23a30c308c81b2021581164579fc423e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyOTY3MA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376829670", "bodyText": "This reads strangely to me.\nI realise that, in terms of readability, it's logically equivalent to the isAllowedByLicenseAndSecurity method, but here with no parameters, it just looks like a mistake.\nGiven this is the only place it's called, I would just replace it with isAllowedByLicenseAndSecurity(OperationMode.BASIC, true, false, true);", "author": "tvernum", "createdAt": "2020-02-10T00:07:24Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -449,51 +431,38 @@ public synchronized AllowedRealmType allowedRealmType() {\n     /**\n      * @return whether custom role providers are allowed based on the license {@link OperationMode}\n      */\n-    public synchronized boolean isCustomRoleProvidersAllowed() {\n-        final boolean isSecurityCurrentlyEnabled =\n-            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)\n-                && status.active;\n+    public boolean isCustomRoleProvidersAllowed() {\n+        return isAllowedByLicenseAndSecurity(OperationMode.PLATINUM, true, true, true);\n     }\n \n     /**\n      * @return whether the Elasticsearch {@code TokenService} is allowed based on the license {@link OperationMode}\n      */\n-    public synchronized boolean isTokenServiceAllowed() {\n-        final OperationMode mode = status.mode;\n-        final boolean isSecurityCurrentlyEnabled = isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL);\n+    public boolean isTokenServiceAllowed() {\n+        return isAllowedByLicenseAndSecurity(OperationMode.GOLD, true, false, true);\n     }\n \n     /**\n      * @return whether the Elasticsearch {@code ApiKeyService} is allowed based on the current node/cluster state\n      */\n-    public synchronized boolean isApiKeyServiceAllowed() {\n-        final OperationMode mode = status.mode;\n-        final boolean isSecurityCurrentlyEnabled = isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled);\n-        return isSecurityCurrentlyEnabled;\n+    public boolean isApiKeyServiceAllowed() {\n+        return isAllowedBySecurity();", "originalCommit": "540538ee23a30c308c81b2021581164579fc423e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMDAyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376830025", "bodyText": "I don't like the version of this method that passes false for security.\nIt's calling a method named isAllowedBy___Security` and then says \"oh, but not really security\".\nReading this method, on its own, if you aren't intimately familiar with what isAllowedByLicenseAndSecurity does, and what those parameters mean, a reader is left:\n\nWondering why watcher cares about security (because it's in that method name).\nWhat all those parameters mean, and whether they're correct.\n\nPeople adding a new license check for paid functionality shouldn't be expected to make decisions about so many parameters. There should be one obvious method with the smallest set of parameters that they can use.", "author": "tvernum", "createdAt": "2020-02-10T00:10:49Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -509,31 +478,17 @@ public synchronized boolean isAuthorizationEngineAllowed() {\n      *\n      * @return {@code true} as long as the license is valid. Otherwise {@code false}.\n      */\n-    public synchronized boolean isWatcherAllowed() {\n-        Status localStatus = status;\n-\n-        if (localStatus.active == false) {\n-            return false;\n-        }\n-\n-        switch (localStatus.mode) {\n-            case TRIAL:\n-            case GOLD:\n-            case PLATINUM:\n-            case STANDARD:\n-                return true;\n-            default:\n-                return false;\n-        }\n+    public boolean isWatcherAllowed() {\n+        return isAllowedByLicenseAndSecurity(OperationMode.STANDARD, false, true, true);", "originalCommit": "540538ee23a30c308c81b2021581164579fc423e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMDI3MA==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376830270", "bodyText": "It bothers me that we have this method, and them re-implement the same OperationMode check for FIPS in LicenseService", "author": "tvernum", "createdAt": "2020-02-10T00:13:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -593,197 +542,160 @@ public synchronized boolean isGraphAllowed() {\n      * @return {@code true} as long as the license is valid. Otherwise\n      *         {@code false}.\n      */\n-    public synchronized boolean isMachineLearningAllowed() {\n-        final Status currentStatus = status;\n-        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode);\n+    public boolean isMachineLearningAllowed() {\n+        return isAllowedByLicenseAndSecurity(OperationMode.PLATINUM, false, true, true);\n     }\n \n     public static boolean isMachineLearningAllowedForOperationMode(final OperationMode operationMode) {\n-        return isPlatinumOrTrialOperationMode(operationMode);\n+        return isAllowedByOperationMode(operationMode, OperationMode.PLATINUM, true);\n     }\n \n     /**\n      * Transform is always available as long as there is a valid license\n      *\n      * @return true if the license is active\n      */\n-    public synchronized boolean isTransformAllowed() {\n-        return status.active;\n+    public boolean isTransformAllowed() {\n+        return isActive();\n     }\n \n     public static boolean isTransformAllowedForOperationMode(final OperationMode operationMode) {\n         // any license (basic and upwards)\n         return operationMode != License.OperationMode.MISSING;\n     }\n \n+    public static boolean isFipsAllowedForOperationMode(final OperationMode operationMode) {\n+        return isAllowedByOperationMode(operationMode, OperationMode.PLATINUM, true);\n+    }", "originalCommit": "540538ee23a30c308c81b2021581164579fc423e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMDQ3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376830472", "bodyText": "I think we can just replace with with mode != MISSING.", "author": "tvernum", "createdAt": "2020-02-10T00:15:33Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java", "diffHunk": "@@ -796,7 +708,7 @@ public synchronized boolean isTrialLicense() {\n     public synchronized boolean isSecurityAvailable() {\n         OperationMode mode = status.mode;\n         return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||\n-                mode == OperationMode.TRIAL || mode == OperationMode.BASIC;\n+                mode == OperationMode.TRIAL || mode == OperationMode.BASIC || mode == OperationMode.ENTERPRISE;", "originalCommit": "540538ee23a30c308c81b2021581164579fc423e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMDgyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51864#discussion_r376830829", "bodyText": "Strictly speaking, this check is incorrect because there is a race condition between the 2 calls. I don't think we should be perpetuating this style of call, and should actually push it to a single call that passes in the licenseState object and checks both active and operation mode.", "author": "tvernum", "createdAt": "2020-02-10T00:19:17Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -243,7 +243,8 @@ public boolean isAvailableWithLicense(XPackLicenseState licenseState) {\n         }\n \n         // The model license does not matter, this is the highest licensed level\n-        if (licenseState.isActive() && XPackLicenseState.isPlatinumOrTrialOperationMode(licenseState.getOperationMode())) {\n+        if (licenseState.isActive() && XPackLicenseState.isAllowedByOperationMode(\n+            licenseState.getOperationMode(), License.OperationMode.PLATINUM, true)) {", "originalCommit": "540538ee23a30c308c81b2021581164579fc423e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}