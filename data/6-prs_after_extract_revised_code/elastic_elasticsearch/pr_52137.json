{"pr_number": 52137, "pr_title": "SQL: Make parsing of date more lenient", "pr_createdAt": "2020-02-10T11:00:03Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52137", "timeline": [{"oid": "32850d405d2342cf8e562e5ce9b5d58335270279", "url": "https://github.com/elastic/elasticsearch/commit/32850d405d2342cf8e562e5ce9b5d58335270279", "message": "SQL: Make parsing of date more lenient\n\nMake the parsing of date more lenient\n - as an escaped literal: `{d '2020-02-10[[T| ]10:20[:30][.123456789][tz]]'}`\n - cast a string to a date: `CAST(2020-02-10[[T| ]10:20[:30][.123456789][tz]]' AS DATE)`\n\nCloses: #49379", "committedDate": "2020-02-10T11:00:25Z", "type": "commit"}, {"oid": "32850d405d2342cf8e562e5ce9b5d58335270279", "url": "https://github.com/elastic/elasticsearch/commit/32850d405d2342cf8e562e5ce9b5d58335270279", "message": "SQL: Make parsing of date more lenient\n\nMake the parsing of date more lenient\n - as an escaped literal: `{d '2020-02-10[[T| ]10:20[:30][.123456789][tz]]'}`\n - cast a string to a date: `CAST(2020-02-10[[T| ]10:20[:30][.123456789][tz]]' AS DATE)`\n\nCloses: #49379", "committedDate": "2020-02-10T11:00:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExNTA0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52137#discussion_r377115043", "bodyText": "For sake of completeness, I'd suggest a test without the duration separator, but with a timezone (or a Z).", "author": "bpintea", "createdAt": "2020-02-10T15:00:39Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/SqlDataTypeConverterTests.java", "diffHunk": "@@ -172,13 +172,19 @@ public void testConversionToDate() {\n             Converter conversion = converterFor(KEYWORD, to);\n             assertNull(conversion.convert(null));\n \n-            assertEquals(date(0L), conversion.convert(\"1970-01-01\"));\n-            assertEquals(date(1483228800000L), conversion.convert(\"2017-01-01\"));\n-            assertEquals(date(-1672531200000L), conversion.convert(\"1917-01-01\"));\n-            assertEquals(date(18000000L), conversion.convert(\"1970-01-01\"));\n+            assertEquals(date(1581292800000L), conversion.convert(\"2020-02-10T10:20\"));\n+            assertEquals(date(-125908819200000L), conversion.convert(\"-2020-02-10T10:20:30.123\"));\n+            assertEquals(date(1581292800000L), conversion.convert(\"2020-02-10T10:20:30.123456789\"));\n \n-            // double check back and forth conversion\n+            assertEquals(date(1581292800000L), conversion.convert(\"2020-02-10 10:20\"));\n+            assertEquals(date(-125908819200000L), conversion.convert(\"-2020-02-10 10:20:30.123\"));\n+            assertEquals(date(1581292800000L), conversion.convert(\"2020-02-10 10:20:30.123456789\"));", "originalCommit": "32850d405d2342cf8e562e5ce9b5d58335270279", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "381741f89e2ffdc7cc783deb31b2e76a10f4b960", "chunk": "diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/SqlDataTypeConverterTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/SqlDataTypeConverterTests.java\nindex 11dfc60750a..29abaa0362b 100644\n--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/SqlDataTypeConverterTests.java\n+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/SqlDataTypeConverterTests.java\n\n@@ -191,6 +191,8 @@ public class SqlDataTypeConverterTests extends ESTestCase {\n             assertEquals(asDateOnly(zdt), back.convert(forward.convert(zdt)));\n             Exception e = expectThrows(QlIllegalArgumentException.class, () -> conversion.convert(\"0xff\"));\n             assertEquals(\"cannot cast [0xff] to [date]: Text '0xff' could not be parsed at index 0\", e.getMessage());\n+            e = expectThrows(QlIllegalArgumentException.class, () -> conversion.convert(\"2020-02-\"));\n+            assertEquals(\"cannot cast [2020-02-] to [date]: Text '0xff' could not be parsed at index 8\", e.getMessage());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE3MDAyMg==", "url": "https://github.com/elastic/elasticsearch/pull/52137#discussion_r377170022", "bodyText": "I think the name of the formatters could be more descriptive? The fact that time can be added, but it's optional, imo should be reflected in the formatter's name. Also, not to abuse the length of the names, how about DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE? (ie get rid of ESCAPED_LITERAL keep the FORMATTER and mention the whitespace/'T') Same idea could be applied to the rest of the formatters: `DATE_OPTIONAL_OPTIONAL_TIME_FORMATTER_T, ISO_DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE, ISO_DATE_OPTIONAL_TIME_FORMATTER_T.....", "author": "astefan", "createdAt": "2020-02-10T16:25:15Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java", "diffHunk": "@@ -42,6 +42,30 @@\n             .appendLiteral('T')\n             .append(ISO_LOCAL_TIME)\n             .toFormatter().withZone(UTC);\n+    private static final DateTimeFormatter DATE_ESCAPED_LITERAL_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()", "originalCommit": "32850d405d2342cf8e562e5ce9b5d58335270279", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "381741f89e2ffdc7cc783deb31b2e76a10f4b960", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\nindex b7fa2272b86..7ea20224a86 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\n\n@@ -32,36 +32,36 @@ public final class DateUtils {\n     public static final LocalDate EPOCH = LocalDate.of(1970, 1, 1);\n     public static final long DAY_IN_MILLIS = 60 * 60 * 24 * 1000L;\n \n-    private static final DateTimeFormatter DATE_TIME_ESCAPED_LITERAL_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()\n             .append(ISO_LOCAL_DATE)\n             .appendLiteral(' ')\n             .append(ISO_LOCAL_TIME)\n             .toFormatter().withZone(UTC);\n-    private static final DateTimeFormatter DATE_TIME_ESCAPED_LITERAL_FORMATTER_T_LITERAL = new DateTimeFormatterBuilder()\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER_T_LITERAL = new DateTimeFormatterBuilder()\n             .append(ISO_LOCAL_DATE)\n             .appendLiteral('T')\n             .append(ISO_LOCAL_TIME)\n             .toFormatter().withZone(UTC);\n-    private static final DateTimeFormatter DATE_ESCAPED_LITERAL_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()\n+    private static final DateTimeFormatter DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()\n             .append(ISO_LOCAL_DATE)\n             .optionalStart()\n             .appendLiteral(' ')\n             .append(ISO_LOCAL_TIME)\n             .toFormatter().withZone(UTC);\n-    private static final DateTimeFormatter DATE_ESCAPED_LITERAL_FORMATTER_T_LITERAL = new DateTimeFormatterBuilder()\n+    private static final DateTimeFormatter DATE_OPTIONAL_TIME_FORMATTER_T_LITERAL = new DateTimeFormatterBuilder()\n             .append(ISO_LOCAL_DATE)\n             .optionalStart()\n             .appendLiteral('T')\n             .append(ISO_LOCAL_TIME)\n             .toFormatter().withZone(UTC);\n     private static final DateTimeFormatter ISO_LOCAL_DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()\n-            .append(DATE_ESCAPED_LITERAL_FORMATTER_WHITESPACE)\n+            .append(DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE)\n             .optionalStart()\n             .appendZoneOrOffsetId()\n             .optionalEnd()\n             .toFormatter().withZone(UTC);\n     private static final DateTimeFormatter ISO_LOCAL_DATE_OPTIONAL_TIME_FORMATTER_T_LITERAL = new DateTimeFormatterBuilder()\n-            .append(DATE_ESCAPED_LITERAL_FORMATTER_T_LITERAL)\n+            .append(DATE_OPTIONAL_TIME_FORMATTER_T_LITERAL)\n             .optionalStart()\n             .appendZoneOrOffsetId()\n             .optionalEnd()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE3MTM0NA==", "url": "https://github.com/elastic/elasticsearch/pull/52137#discussion_r377171344", "bodyText": "Since separatorIdx == 0 then the indexOf call should be indexOf('-', 1) right?", "author": "astefan", "createdAt": "2020-02-10T16:27:23Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java", "diffHunk": "@@ -91,7 +115,17 @@ public static ZonedDateTime asDateTime(long millis, ZoneId id) {\n      * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.\n      */\n     public static ZonedDateTime asDateOnly(String dateFormat) {\n-        return LocalDate.parse(dateFormat, ISO_LOCAL_DATE).atStartOfDay(UTC);\n+        int separatorIdx = dateFormat.indexOf('-');\n+        if (separatorIdx == 0) { // negative year\n+            separatorIdx = dateFormat.indexOf('-', separatorIdx + 1);", "originalCommit": "32850d405d2342cf8e562e5ce9b5d58335270279", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "381741f89e2ffdc7cc783deb31b2e76a10f4b960", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\nindex b7fa2272b86..7ea20224a86 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\n\n@@ -117,7 +117,7 @@ public final class DateUtils {\n     public static ZonedDateTime asDateOnly(String dateFormat) {\n         int separatorIdx = dateFormat.indexOf('-');\n         if (separatorIdx == 0) { // negative year\n-            separatorIdx = dateFormat.indexOf('-', separatorIdx + 1);\n+            separatorIdx = dateFormat.indexOf('-', 1);\n         }\n         separatorIdx = dateFormat.indexOf('-', separatorIdx + 1) + 3;\n         // Avoid index out of bounds - it will lead to DateTimeParseException anyways\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4OTkwMw==", "url": "https://github.com/elastic/elasticsearch/pull/52137#discussion_r377189903", "bodyText": "In which situation is the > valid here? (I refer to separatorIdx >= dateFormat.length()) Isn't == enough to detect a date-only string?", "author": "astefan", "createdAt": "2020-02-10T16:57:02Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java", "diffHunk": "@@ -91,7 +115,17 @@ public static ZonedDateTime asDateTime(long millis, ZoneId id) {\n      * Parses the given string into a Date (SQL DATE type) using UTC as a default timezone.\n      */\n     public static ZonedDateTime asDateOnly(String dateFormat) {\n-        return LocalDate.parse(dateFormat, ISO_LOCAL_DATE).atStartOfDay(UTC);\n+        int separatorIdx = dateFormat.indexOf('-');\n+        if (separatorIdx == 0) { // negative year\n+            separatorIdx = dateFormat.indexOf('-', separatorIdx + 1);\n+        }\n+        separatorIdx = dateFormat.indexOf('-', separatorIdx + 1) + 3;\n+        // Avoid index out of bounds - it will lead to DateTimeParseException anyways\n+        if (separatorIdx >= dateFormat.length() || dateFormat.charAt(separatorIdx) == 'T') {", "originalCommit": "32850d405d2342cf8e562e5ce9b5d58335270279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0MDM3OA==", "url": "https://github.com/elastic/elasticsearch/pull/52137#discussion_r377240378", "bodyText": "2 lines above we do +3 to move directly after the day part in the string.\nIf the string passed is something like: 2020-12- then we have moved passed the string's length and dateFormat.charAt() will throw OutOfBounds exception.\nI forgot to add a test for that, will do.", "author": "matriv", "createdAt": "2020-02-10T18:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4OTkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "381741f89e2ffdc7cc783deb31b2e76a10f4b960", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\nindex b7fa2272b86..7ea20224a86 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java\n\n@@ -117,7 +117,7 @@ public final class DateUtils {\n     public static ZonedDateTime asDateOnly(String dateFormat) {\n         int separatorIdx = dateFormat.indexOf('-');\n         if (separatorIdx == 0) { // negative year\n-            separatorIdx = dateFormat.indexOf('-', separatorIdx + 1);\n+            separatorIdx = dateFormat.indexOf('-', 1);\n         }\n         separatorIdx = dateFormat.indexOf('-', separatorIdx + 1) + 3;\n         // Avoid index out of bounds - it will lead to DateTimeParseException anyways\n"}}, {"oid": "381741f89e2ffdc7cc783deb31b2e76a10f4b960", "url": "https://github.com/elastic/elasticsearch/commit/381741f89e2ffdc7cc783deb31b2e76a10f4b960", "message": "Address comments", "committedDate": "2020-02-10T19:00:36Z", "type": "commit"}, {"oid": "6e6ef0b61868dec347a663deb136bdd375ed653b", "url": "https://github.com/elastic/elasticsearch/commit/6e6ef0b61868dec347a663deb136bdd375ed653b", "message": "Merge remote-tracking branch 'upstream/master' into fix-49379", "committedDate": "2020-02-10T19:00:53Z", "type": "commit"}, {"oid": "89bf5e8d8af024346e9820d1715492c4ea4a3b74", "url": "https://github.com/elastic/elasticsearch/commit/89bf5e8d8af024346e9820d1715492c4ea4a3b74", "message": "address comments", "committedDate": "2020-02-10T19:36:09Z", "type": "commit"}, {"oid": "7241b91cd3b6a7ae1cae8bf80a368418cc2ef96d", "url": "https://github.com/elastic/elasticsearch/commit/7241b91cd3b6a7ae1cae8bf80a368418cc2ef96d", "message": "Merge remote-tracking branch 'upstream/master' into fix-49379", "committedDate": "2020-02-10T19:36:19Z", "type": "commit"}, {"oid": "62f5919d05c78db7d33d4c3077415789b28bb8af", "url": "https://github.com/elastic/elasticsearch/commit/62f5919d05c78db7d33d4c3077415789b28bb8af", "message": "Add more invalid date parsing tests", "committedDate": "2020-02-10T19:45:40Z", "type": "commit"}]}