{"pr_number": 64845, "pr_title": "SQL:Fix the return type problem in the sign function", "pr_createdAt": "2020-11-10T08:38:08Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64845", "timeline": [{"oid": "bf16659ac90b72c705577390eaffa327c641431a", "url": "https://github.com/elastic/elasticsearch/commit/bf16659ac90b72c705577390eaffa327c641431a", "message": "SQL:Fix the return type problem in the sign function\n\nSigned-off-by: mantuliu <240951888@qq.com>", "committedDate": "2020-11-10T07:01:14Z", "type": "commit"}, {"oid": "bf16659ac90b72c705577390eaffa327c641431a", "url": "https://github.com/elastic/elasticsearch/commit/bf16659ac90b72c705577390eaffa327c641431a", "message": "SQL:Fix the return type problem in the sign function\n\nSigned-off-by: mantuliu <240951888@qq.com>", "committedDate": "2020-11-10T07:01:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MTUwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/64845#discussion_r521261505", "bodyText": "Since the assertion values are the same, please put the values in an array and iterate over them:\nList<Number> negative = asList(-42, Long.value(-42), etc...)\nfor (Number number : negative) {\n\tNumber result = MathOperations.SIGN.apply(number);\n    assertEquals(Integer.class, result.getClass());\n    assertEquals(-1, result);\n}\n...", "author": "costin", "createdAt": "2020-11-11T10:28:29Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathOperationTests.java", "diffHunk": "@@ -35,4 +35,25 @@ public void testAbsPreservesType() {\n         assertEquals(42f, MathOperation.ABS.apply(-42f));\n         assertEquals(42d, MathOperation.ABS.apply(-42d));\n     }\n+\n+    public void testSignIntegerType() {\n+        assertEquals(-1, MathOperation.SIGN.apply((byte) -42));\n+        assertEquals( -1, MathOperation.SIGN.apply((short) -42));\n+        assertEquals(-1, MathOperation.SIGN.apply(-42));\n+        assertEquals( -1, MathOperation.SIGN.apply((long) -42));\n+        assertEquals(-1, MathOperation.SIGN.apply(-42.0f));\n+        assertEquals(-1, MathOperation.SIGN.apply(-42.0d));\n+        assertEquals( 1, MathOperation.SIGN.apply((byte) 42));\n+        assertEquals( 1, MathOperation.SIGN.apply((short) 42));\n+        assertEquals(1, MathOperation.SIGN.apply(42));\n+        assertEquals( 1, MathOperation.SIGN.apply((long) 42));\n+        assertEquals(1, MathOperation.SIGN.apply(42.0f));\n+        assertEquals(1, MathOperation.SIGN.apply(42.0d));\n+        assertEquals(0, MathOperation.SIGN.apply((byte) 0));\n+        assertEquals( 0, MathOperation.SIGN.apply((short) 0));\n+        assertEquals(0, MathOperation.SIGN.apply(0));\n+        assertEquals( 0, MathOperation.SIGN.apply((long) 0));\n+        assertEquals(0, MathOperation.SIGN.apply(-0.0f));\n+        assertEquals(0, MathOperation.SIGN.apply(-0.0d));\n+    }", "originalCommit": "bf16659ac90b72c705577390eaffa327c641431a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMzMjcyMg==", "url": "https://github.com/elastic/elasticsearch/pull/64845#discussion_r521332722", "bodyText": "Has been changed to an iterative way. PTAL.", "author": "sourcelliu", "createdAt": "2020-11-11T12:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MTUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "893b9ab8123f5f4954989408ef85afebfdd16399", "chunk": "diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathOperationTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathOperationTests.java\nindex b2c7beb5cd5..615cb87d843 100644\n--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathOperationTests.java\n+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathOperationTests.java\n\n@@ -37,23 +40,26 @@ public class MathOperationTests extends ESTestCase {\n     }\n \n     public void testSignIntegerType() {\n-        assertEquals(-1, MathOperation.SIGN.apply((byte) -42));\n-        assertEquals( -1, MathOperation.SIGN.apply((short) -42));\n-        assertEquals(-1, MathOperation.SIGN.apply(-42));\n-        assertEquals( -1, MathOperation.SIGN.apply((long) -42));\n-        assertEquals(-1, MathOperation.SIGN.apply(-42.0f));\n-        assertEquals(-1, MathOperation.SIGN.apply(-42.0d));\n-        assertEquals( 1, MathOperation.SIGN.apply((byte) 42));\n-        assertEquals( 1, MathOperation.SIGN.apply((short) 42));\n-        assertEquals(1, MathOperation.SIGN.apply(42));\n-        assertEquals( 1, MathOperation.SIGN.apply((long) 42));\n-        assertEquals(1, MathOperation.SIGN.apply(42.0f));\n-        assertEquals(1, MathOperation.SIGN.apply(42.0d));\n-        assertEquals(0, MathOperation.SIGN.apply((byte) 0));\n-        assertEquals( 0, MathOperation.SIGN.apply((short) 0));\n-        assertEquals(0, MathOperation.SIGN.apply(0));\n-        assertEquals( 0, MathOperation.SIGN.apply((long) 0));\n-        assertEquals(0, MathOperation.SIGN.apply(-0.0f));\n-        assertEquals(0, MathOperation.SIGN.apply(-0.0d));\n+        List<Number> negative = Arrays.asList((byte) -42, (short) -42, -42, Long.valueOf(-42), Float.valueOf(-42.0f), Double.valueOf(-42.0d));\n+        List<Number> zero = Arrays.asList((byte) 0, (short) 0, 0, Long.valueOf(0), Float.valueOf(0.0f), Double.valueOf(0.0d));\n+        List<Number> positive = Arrays.asList((byte) 42, (short)42, 42, Long.valueOf(42), Float.valueOf(42.0f), Double.valueOf(42.0d));\n+\n+        for (Number number : negative) {\n+            Number result = MathOperation.SIGN.apply(number);\n+            assertEquals(Integer.class, result.getClass());\n+            assertEquals(-1, result);\n+        }\n+\n+        for (Number number : zero) {\n+            Number result = MathOperation.SIGN.apply(number);\n+            assertEquals(Integer.class, result.getClass());\n+            assertEquals(0, result);\n+        }\n+\n+        for (Number number : positive) {\n+            Number result = MathOperation.SIGN.apply(number);\n+            assertEquals(Integer.class, result.getClass());\n+            assertEquals(1, result);\n+        }\n     }\n }\n"}}, {"oid": "893b9ab8123f5f4954989408ef85afebfdd16399", "url": "https://github.com/elastic/elasticsearch/commit/893b9ab8123f5f4954989408ef85afebfdd16399", "message": "Use iterative method to optimize test\n\nSigned-off-by: mantuliu <240951888@qq.com>", "committedDate": "2020-11-11T12:41:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0Njg2OA==", "url": "https://github.com/elastic/elasticsearch/pull/64845#discussion_r521346868", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (int)Math.signum((Double) l);\n          \n          \n            \n                            return (int) Math.signum((Double) l);", "author": "matriv", "createdAt": "2020-11-11T13:10:11Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java", "diffHunk": "@@ -77,26 +77,13 @@\n                 Randomness.get().nextDouble(), true),\n         SIGN((Object l) -> {\n             if (l instanceof Double) {\n-                return Math.signum((Double) l);\n+                return (int)Math.signum((Double) l);", "originalCommit": "893b9ab8123f5f4954989408ef85afebfdd16399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a80ad5a39ba83f0d7b1f4c8caa6d5cfbe29713c", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java\nindex 19ecbb72be1..10a9a7660a7 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java\n\n@@ -77,7 +77,7 @@ public class MathProcessor implements Processor {\n                 Randomness.get().nextDouble(), true),\n         SIGN((Object l) -> {\n             if (l instanceof Double) {\n-                return (int)Math.signum((Double) l);\n+                return (int) Math.signum((Double) l);\n             }\n             if (l instanceof Float) {\n                 return (int)Math.signum((Float) l);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0Njk2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64845#discussion_r521346963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (int)Math.signum((Float) l);\n          \n          \n            \n                            return (int) Math.signum((Float) l);", "author": "matriv", "createdAt": "2020-11-11T13:10:22Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java", "diffHunk": "@@ -77,26 +77,13 @@\n                 Randomness.get().nextDouble(), true),\n         SIGN((Object l) -> {\n             if (l instanceof Double) {\n-                return Math.signum((Double) l);\n+                return (int)Math.signum((Double) l);\n             }\n             if (l instanceof Float) {\n-                return Math.signum((Float) l);\n+                return (int)Math.signum((Float) l);", "originalCommit": "893b9ab8123f5f4954989408ef85afebfdd16399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a80ad5a39ba83f0d7b1f4c8caa6d5cfbe29713c", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java\nindex 19ecbb72be1..10a9a7660a7 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathProcessor.java\n\n@@ -77,7 +77,7 @@ public class MathProcessor implements Processor {\n                 Randomness.get().nextDouble(), true),\n         SIGN((Object l) -> {\n             if (l instanceof Double) {\n-                return (int)Math.signum((Double) l);\n+                return (int) Math.signum((Double) l);\n             }\n             if (l instanceof Float) {\n                 return (int)Math.signum((Float) l);\n"}}, {"oid": "3a80ad5a39ba83f0d7b1f4c8caa6d5cfbe29713c", "url": "https://github.com/elastic/elasticsearch/commit/3a80ad5a39ba83f0d7b1f4c8caa6d5cfbe29713c", "message": "formatting fix.\n\nCo-authored-by: Marios Trivyzas <matriv@gmail.com>", "committedDate": "2020-11-11T13:16:06Z", "type": "commit"}, {"oid": "1419c7c4fea28592c5d3ed0f10997543934bfa71", "url": "https://github.com/elastic/elasticsearch/commit/1419c7c4fea28592c5d3ed0f10997543934bfa71", "message": "formatting fix.\n\nCo-authored-by: Marios Trivyzas <matriv@gmail.com>", "committedDate": "2020-11-11T13:16:37Z", "type": "commit"}, {"oid": "e7cbc5848fbc39682563cd00936ebb847794c7ae", "url": "https://github.com/elastic/elasticsearch/commit/e7cbc5848fbc39682563cd00936ebb847794c7ae", "message": "formatting fix.\n\nSigned-off-by: mantuliu <240951888@qq.com>", "committedDate": "2020-11-11T13:20:27Z", "type": "commit"}]}