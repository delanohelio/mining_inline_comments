{"pr_number": 60201, "pr_title": "Don't Allocate Redundant Pages in BigArrays", "pr_createdAt": "2020-07-27T12:39:55Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60201", "timeline": [{"oid": "53c2d3d82b9e860c75890443eda14d1bdd1a448a", "url": "https://github.com/elastic/elasticsearch/commit/53c2d3d82b9e860c75890443eda14d1bdd1a448a", "message": "Don't Allocate Redundant Pages in BigArrays\n\nThe oversize algorithm was allocating more pages than necessary to accomodate `minTargetSize`.\nAn example would be that a 16k page size and 15k `minTargetSize` would result in a new size of 32k (2 pages).\nThe difference between the minimum number of necessary pages and the estimated size then keeps growing as sizes increase.\n\nI don't think there is much value in preemptively allocating pages by oversizing aggressively since the behavior of\nthe system is quite different from that of a single array where oversizing avoids copying\nonce the minimum target size is more than a single page.\n\nRelates #60173 which lead me to this when `BytesStreamOutput` would allocate a large number of never used\npages during serialization of repository metadata.", "committedDate": "2020-07-27T12:22:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzcyMw==", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462307723", "bodyText": "This now doesn't always return a multiple of pageSize; is that deliberate? Maybe it's ok, but if it is ok then why do we put effort into rounding newSize up to the next multiple of pageSize in the else branch?", "author": "DaveCTurner", "createdAt": "2020-07-29T13:42:26Z", "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,9 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);", "originalCommit": "53c2d3d82b9e860c75890443eda14d1bdd1a448a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNDIxMA==", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462334210", "bodyText": "This now doesn't always return a multiple of pageSize; is that deliberate?\n\nThis was the case before as well. For small allocations (those for which Arrays.oversize does return less than a page) we return the result of oversize.\n\nMaybe it's ok, but if it is ok then why do we put effort into rounding newSize up to the next multiple of pageSize in the else branch?\n\nI think the reasoning is that we only want to use a full page for allocations above a certain size. But once we get to large allocations we only want to use full pages.\nFor small pages I mostly retained the behavior here. Except for the case of say 15k with 16k pages, where previously oversize would spit out something like 17k and we'd then go for 2 pages, whereas now we go for a single page.\nBut as long as oversize stays below a full page in size the behavior should not change with this PR.", "author": "original-brownbear", "createdAt": "2020-07-29T14:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzOTIwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462339205", "bodyText": "Ah ok I misinterpreted min as max. I see now, thanks.", "author": "DaveCTurner", "createdAt": "2020-07-29T14:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "7b581b01f0a7726197d2cab606282d72c3c450df", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/util/BigArrays.java b/server/src/main/java/org/elasticsearch/common/util/BigArrays.java\nindex 369431062fa..a98a09acf80 100644\n--- a/server/src/main/java/org/elasticsearch/common/util/BigArrays.java\n+++ b/server/src/main/java/org/elasticsearch/common/util/BigArrays.java\n\n@@ -60,7 +60,8 @@ public class BigArrays {\n         if (minTargetSize < pageSize) {\n             newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize / pageSize * pageSize + (minTargetSize % pageSize == 0 ? 0 : pageSize);\n+            final long pages = (minTargetSize + pageSize - 1) / pageSize; // ceil(minTargetSize/pageSize)\n+            newSize = pages * pageSize;\n         }\n \n         return newSize;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwODUxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462308519", "bodyText": "Optional suggestion, I prefer this implementation of ceil(n/d).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        newSize = minTargetSize / pageSize * pageSize + (minTargetSize % pageSize == 0 ? 0 : pageSize);\n          \n          \n            \n                        final long pages = (minTargetSize + pageSize - 1) / pageSize; // ceil(minTargetSize/pageSize)\n          \n          \n            \n                        newSize = pages * pageSize;", "author": "DaveCTurner", "createdAt": "2020-07-29T13:43:35Z", "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,9 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize + (minTargetSize >>> 3);\n-        }\n-\n-        if (newSize > pageSize) {\n-            // round to a multiple of pageSize\n-            newSize = newSize - (newSize % pageSize) + pageSize;\n-            assert newSize % pageSize == 0;\n+            newSize = minTargetSize / pageSize * pageSize + (minTargetSize % pageSize == 0 ? 0 : pageSize);", "originalCommit": "53c2d3d82b9e860c75890443eda14d1bdd1a448a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b581b01f0a7726197d2cab606282d72c3c450df", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/util/BigArrays.java b/server/src/main/java/org/elasticsearch/common/util/BigArrays.java\nindex 369431062fa..a98a09acf80 100644\n--- a/server/src/main/java/org/elasticsearch/common/util/BigArrays.java\n+++ b/server/src/main/java/org/elasticsearch/common/util/BigArrays.java\n\n@@ -60,7 +60,8 @@ public class BigArrays {\n         if (minTargetSize < pageSize) {\n             newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize / pageSize * pageSize + (minTargetSize % pageSize == 0 ? 0 : pageSize);\n+            final long pages = (minTargetSize + pageSize - 1) / pageSize; // ceil(minTargetSize/pageSize)\n+            newSize = pages * pageSize;\n         }\n \n         return newSize;\n"}}, {"oid": "7b581b01f0a7726197d2cab606282d72c3c450df", "url": "https://github.com/elastic/elasticsearch/commit/7b581b01f0a7726197d2cab606282d72c3c450df", "message": "Update server/src/main/java/org/elasticsearch/common/util/BigArrays.java\n\nCo-authored-by: David Turner <david.turner@elastic.co>", "committedDate": "2020-07-29T14:11:56Z", "type": "commit"}, {"oid": "9142bc39057caf3e5267a2c88a2c58667123fcf1", "url": "https://github.com/elastic/elasticsearch/commit/9142bc39057caf3e5267a2c88a2c58667123fcf1", "message": "Merge remote-tracking branch 'elastic/master' into large-snapshot-memory", "committedDate": "2020-07-29T14:12:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462344049", "bodyText": "Stronger assertions that would have avoided my confusion here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(size - minSize, lessThan((long) pageSize));\n          \n          \n            \n                    assertThat(size, greaterThanOrEqualTo((long)minSize));\n          \n          \n            \n                    if (size >= pageSize) {\n          \n          \n            \n                        assertThat(size + \" is a multiple of \" + pageSize, size % pageSize, equalTo(0L));\n          \n          \n            \n                    }\n          \n          \n            \n                    assertThat(size - minSize, lessThan((long) pageSize));", "author": "DaveCTurner", "createdAt": "2020-07-29T14:29:52Z", "path": "server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java", "diffHunk": "@@ -389,6 +390,13 @@ public void testEstimatedBytesSameAsActualBytes() throws Exception {\n         }\n     }\n \n+    public void testOverSizeUsesMinPageCount() {\n+        final int pageSize = 1 << (randomIntBetween(2, 16));\n+        final int minSize = randomIntBetween(1, pageSize) * randomIntBetween(1, 100);\n+        final long size = BigArrays.overSize(minSize, pageSize, 1);\n+        assertThat(size - minSize, lessThan((long) pageSize));", "originalCommit": "9142bc39057caf3e5267a2c88a2c58667123fcf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NTcxNg==", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462345716", "bodyText": "++ makes sense", "author": "original-brownbear", "createdAt": "2020-07-29T14:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "df555888b0ac4a4d6dd8ca77b95395d8b7277711", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java b/server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java\nindex b4249cc2abe..5c3763afa85 100644\n--- a/server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java\n+++ b/server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java\n\n@@ -394,6 +394,10 @@ public class BigArraysTests extends ESTestCase {\n         final int pageSize = 1 << (randomIntBetween(2, 16));\n         final int minSize = randomIntBetween(1, pageSize) * randomIntBetween(1, 100);\n         final long size = BigArrays.overSize(minSize, pageSize, 1);\n+        assertThat(size, greaterThanOrEqualTo((long)minSize));\n+        if (size >= pageSize) {\n+            assertThat(size + \" is a multiple of \" + pageSize, size % pageSize, equalTo(0L));\n+        }\n         assertThat(size - minSize, lessThan((long) pageSize));\n     }\n \n"}}, {"oid": "df555888b0ac4a4d6dd8ca77b95395d8b7277711", "url": "https://github.com/elastic/elasticsearch/commit/df555888b0ac4a4d6dd8ca77b95395d8b7277711", "message": "Update server/src/test/java/org/elasticsearch/common/util/BigArraysTests.java\n\nCo-authored-by: David Turner <david.turner@elastic.co>", "committedDate": "2020-07-29T14:31:45Z", "type": "commit"}, {"oid": "2b763bbe1686094ca40c22a7f1af090b84d4c857", "url": "https://github.com/elastic/elasticsearch/commit/2b763bbe1686094ca40c22a7f1af090b84d4c857", "message": "Merge remote-tracking branch 'elastic/master' into large-snapshot-memory", "committedDate": "2020-07-29T14:45:14Z", "type": "commit"}, {"oid": "99a3d94c46c0c2763e8097efbf7c604648a99383", "url": "https://github.com/elastic/elasticsearch/commit/99a3d94c46c0c2763e8097efbf7c604648a99383", "message": "imports", "committedDate": "2020-07-29T14:45:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDkxMw==", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462454913", "bodyText": "I wonder if resizeInPlace took a number of pages instead of a size and we only used oversize for when the size is less than a page. We may not need this method at all in that case. I just feel like we're doing something like (pages + 1) * pageSize / pageSize and it feels clumsy.", "author": "nik9000", "createdAt": "2020-07-29T17:09:47Z", "path": "server/src/main/java/org/elasticsearch/common/util/BigArrays.java", "diffHunk": "@@ -58,15 +58,10 @@ public static long overSize(long minTargetSize, int pageSize, int bytesPerElemen\n \n         long newSize;\n         if (minTargetSize < pageSize) {\n-            newSize = ArrayUtil.oversize((int)minTargetSize, bytesPerElement);\n+            newSize = Math.min(ArrayUtil.oversize((int) minTargetSize, bytesPerElement), pageSize);\n         } else {\n-            newSize = minTargetSize + (minTargetSize >>> 3);\n-        }\n-\n-        if (newSize > pageSize) {", "originalCommit": "99a3d94c46c0c2763e8097efbf7c604648a99383", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NTAwNA==", "url": "https://github.com/elastic/elasticsearch/pull/60201#discussion_r462455004", "bodyText": "It'd be a bigger change though.", "author": "nik9000", "createdAt": "2020-07-29T17:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDkxMw=="}], "type": "inlineReview", "revised_code": null}]}