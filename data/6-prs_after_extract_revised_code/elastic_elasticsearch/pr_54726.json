{"pr_number": 54726, "pr_title": "Make data streams in APIs resolvable.", "pr_createdAt": "2020-04-03T15:32:34Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54726", "timeline": [{"oid": "23c08e4582001214ce003c745fd0794d2ebb3caa", "url": "https://github.com/elastic/elasticsearch/commit/23c08e4582001214ce003c745fd0794d2ebb3caa", "message": "Make data streams in APIs resolvable.\n\nThis change makes data stream resolvable in all APIs.\nFor APIs that have `FORBID_ALIASES_TO_MULTIPLE_INDICES` set\nin the index options, this means that a data stream is resolved\nto the latest backing index. For all other APIs this means\nthat a data stream is resolved to all backing indices.\n\nAdditionally also a `IGNORE_DATA_STREAMS` indices option is added,\nso that for specific APIs data stream resolvability can be disabled.\n\nRelates to #53100", "committedDate": "2020-04-03T15:29:58Z", "type": "commit"}, {"oid": "dc7e5c1ac5486feea23be1a16663eed025891822", "url": "https://github.com/elastic/elasticsearch/commit/dc7e5c1ac5486feea23be1a16663eed025891822", "message": "iter", "committedDate": "2020-04-03T16:18:11Z", "type": "commit"}, {"oid": "2f7046974bb125ca213fa09b64b1ca34a9617ffd", "url": "https://github.com/elastic/elasticsearch/commit/2f7046974bb125ca213fa09b64b1ca34a9617ffd", "message": "Merge remote-tracking branch 'es/master' into make_data_streams_resolvable_in_apis", "committedDate": "2020-04-06T07:12:02Z", "type": "commit"}, {"oid": "8be36bcb523e020cf76b91b85fee89f6e01639d4", "url": "https://github.com/elastic/elasticsearch/commit/8be36bcb523e020cf76b91b85fee89f6e01639d4", "message": "fixed checkstyle errors.", "committedDate": "2020-04-06T07:12:36Z", "type": "commit"}, {"oid": "559af0fe0cf8de06487eccaf55d19b61880423ea", "url": "https://github.com/elastic/elasticsearch/commit/559af0fe0cf8de06487eccaf55d19b61880423ea", "message": "fixed tests", "committedDate": "2020-04-06T08:35:47Z", "type": "commit"}, {"oid": "aaf88c2c1e79b221055dbca04c5ec1505274abd4", "url": "https://github.com/elastic/elasticsearch/commit/aaf88c2c1e79b221055dbca04c5ec1505274abd4", "message": "fixed forbidden api violation", "committedDate": "2020-04-06T08:55:06Z", "type": "commit"}, {"oid": "fdef59c6ac764b3548c7b586e1ec67bb20cbdabe", "url": "https://github.com/elastic/elasticsearch/commit/fdef59c6ac764b3548c7b586e1ec67bb20cbdabe", "message": "iter", "committedDate": "2020-04-06T09:31:19Z", "type": "commit"}, {"oid": "7b4279733f1056fb1cab7950e093967f574b0cce", "url": "https://github.com/elastic/elasticsearch/commit/7b4279733f1056fb1cab7950e093967f574b0cce", "message": "fixed checkstyle violation", "committedDate": "2020-04-06T09:49:16Z", "type": "commit"}, {"oid": "67a339f0f12e9d547fe3f8c065859417a4b9289e", "url": "https://github.com/elastic/elasticsearch/commit/67a339f0f12e9d547fe3f8c065859417a4b9289e", "message": "iter", "committedDate": "2020-04-06T12:45:03Z", "type": "commit"}, {"oid": "a418dbf70c80d9e8d0c19ee678f0ba446e112526", "url": "https://github.com/elastic/elasticsearch/commit/a418dbf70c80d9e8d0c19ee678f0ba446e112526", "message": "added more tests", "committedDate": "2020-04-07T09:24:24Z", "type": "commit"}, {"oid": "84b0f5ced189353eb3593b9fb4521784d0c4c043", "url": "https://github.com/elastic/elasticsearch/commit/84b0f5ced189353eb3593b9fb4521784d0c4c043", "message": "Merge remote-tracking branch 'es/master' into make_data_streams_resolvable_in_apis", "committedDate": "2020-04-07T09:27:07Z", "type": "commit"}, {"oid": "f4cc145d368a1dc37bdf060bd74f8fb6b8f222c8", "url": "https://github.com/elastic/elasticsearch/commit/f4cc145d368a1dc37bdf060bd74f8fb6b8f222c8", "message": "fixed test", "committedDate": "2020-04-07T09:33:07Z", "type": "commit"}, {"oid": "f3f96dda347b0ec912d065af33952d5a38fd663c", "url": "https://github.com/elastic/elasticsearch/commit/f3f96dda347b0ec912d065af33952d5a38fd663c", "message": "reuse test method", "committedDate": "2020-04-07T09:41:19Z", "type": "commit"}, {"oid": "53e540059fd978ba793ebae515f17220dfe3fe6a", "url": "https://github.com/elastic/elasticsearch/commit/53e540059fd978ba793ebae515f17220dfe3fe6a", "message": "altered test and fixed checkstyle violation", "committedDate": "2020-04-07T09:51:58Z", "type": "commit"}, {"oid": "4875ef6c9216b3294f37d1bbdcb3462b03f1519e", "url": "https://github.com/elastic/elasticsearch/commit/4875ef6c9216b3294f37d1bbdcb3462b03f1519e", "message": "Change node command so that it can parse, DataStreamMetadata.\n\nIt is used in the Metadata class and otherwise\nnode commands can't load the cluster state.", "committedDate": "2020-04-07T15:15:06Z", "type": "commit"}, {"oid": "65cb2045baa99c4d6dc08dc3a2bd0c6f9cfc5860", "url": "https://github.com/elastic/elasticsearch/commit/65cb2045baa99c4d6dc08dc3a2bd0c6f9cfc5860", "message": "added test", "committedDate": "2020-04-07T15:39:55Z", "type": "commit"}, {"oid": "18382c4bfa0844c5b2df43471d98864c02d11a71", "url": "https://github.com/elastic/elasticsearch/commit/18382c4bfa0844c5b2df43471d98864c02d11a71", "message": "Merge remote-tracking branch 'es/master' into make_data_streams_resolvable_in_apis", "committedDate": "2020-04-07T15:40:09Z", "type": "commit"}, {"oid": "4b289c574f13383011a4b297b7ea4603d53f0c3b", "url": "https://github.com/elastic/elasticsearch/commit/4b289c574f13383011a4b297b7ea4603d53f0c3b", "message": "supply core custom metadata to namedXContentRegistry of es node commands.", "committedDate": "2020-04-08T09:18:07Z", "type": "commit"}, {"oid": "c2482a885088b22d4ef7329ad494fbcf41774916", "url": "https://github.com/elastic/elasticsearch/commit/c2482a885088b22d4ef7329ad494fbcf41774916", "message": "Merge remote-tracking branch 'es/master' into make_data_streams_resolvable_in_apis", "committedDate": "2020-04-08T09:18:33Z", "type": "commit"}, {"oid": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "url": "https://github.com/elastic/elasticsearch/commit/5b76cc20a82f679281fc035dcc41c588ec10b46a", "message": "iter", "committedDate": "2020-04-08T10:16:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NTg0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405545841", "bodyText": "I'd like to see the write index derived from the data stream's generation so that this API can't be used to set the write index to something other than the current generation backing index. That's for a follow-up PR, though.", "author": "danhermann", "createdAt": "2020-04-08T13:57:54Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -257,4 +257,42 @@ private boolean isNonEmpty(List<IndexMetadata> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {\n+\n+        private final org.elasticsearch.cluster.metadata.DataStream dataStream;\n+        private final List<IndexMetadata> dataStreamIndices;\n+        private final IndexMetadata writeIndex;\n+\n+        public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n+                          List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n+            this.dataStream = dataStream;\n+            this.dataStreamIndices = dataStreamIndices;\n+            this.writeIndex = writeIndex;", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5Mzk5MA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405593990", "bodyText": "Yes, agreed. If that pr lands before this pr gets merged then I will adjust this pr and otherwise the pr that adds the generation should also adjust the code here.", "author": "martijnvg", "createdAt": "2020-04-08T15:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NTg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\nindex a86b4984253..2e0e927b49a 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\n\n@@ -267,8 +267,9 @@ public interface IndexAbstraction {\n         public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n                           List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n             this.dataStream = dataStream;\n-            this.dataStreamIndices = dataStreamIndices;\n+            this.dataStreamIndices = List.copyOf(dataStreamIndices);\n             this.writeIndex = writeIndex;\n+            assert dataStreamIndices.contains(writeIndex);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTUyNg==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405551526", "bodyText": "Should the error message be updated to suggest specifying either concrete indices or aliases since either are legally resolvable if only IGNORE_DATA_STREAMS is specified?", "author": "danhermann", "createdAt": "2020-04-08T14:05:40Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -260,6 +272,11 @@ private static IllegalArgumentException aliasesNotSupportedException(String expr\n                 \"alias, specify the corresponding concrete indices instead.\");\n     }\n \n+    private static IllegalArgumentException dataStreamsNotSupportedException(String expression) {\n+        return new IllegalArgumentException(\"The provided expression [\" + expression + \"] matches a \" +\n+            \"data stream, specify the corresponding concrete indices instead.\");", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzE4OA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405553188", "bodyText": "It looks like there's a lot of places in this class where aliasOrIndex could be changed to indexAbstraction. Maybe something for a follow-up PR.", "author": "danhermann", "createdAt": "2020-04-08T14:08:05Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -766,9 +785,20 @@ private static void validateAliasOrIndex(String expression) {\n \n         private static boolean aliasOrIndexExists(IndicesOptions options, Metadata metadata, String expression) {", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NjA3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405596076", "bodyText": "Yes, we should have a follow up pr that replaces aliasOrIndex with indexAbstraction.", "author": "martijnvg", "createdAt": "2020-04-08T15:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "12db3c26064172a8d9fe3ecf5f04a8d3fbbb1488", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\nindex faf04675292..4116d4790d8 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\n\n@@ -794,7 +797,7 @@ public class IndexNameExpressionResolver {\n                 return false;\n             }\n \n-            if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && options.ignoreDataStreams()) {\n+            if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && options.includeDataStreams() == false) {\n                 return false;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5ODc5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405598797", "bodyText": "Maybe add\nassert dataStreamIndices.contains(writeIndex)", "author": "henningandersen", "createdAt": "2020-04-08T15:10:04Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -257,4 +257,42 @@ private boolean isNonEmpty(List<IndexMetadata> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {\n+\n+        private final org.elasticsearch.cluster.metadata.DataStream dataStream;\n+        private final List<IndexMetadata> dataStreamIndices;\n+        private final IndexMetadata writeIndex;\n+\n+        public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n+                          List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n+            this.dataStream = dataStream;", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\nindex a86b4984253..2e0e927b49a 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\n\n@@ -267,8 +267,9 @@ public interface IndexAbstraction {\n         public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n                           List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n             this.dataStream = dataStream;\n-            this.dataStreamIndices = dataStreamIndices;\n+            this.dataStreamIndices = List.copyOf(dataStreamIndices);\n             this.writeIndex = writeIndex;\n+            assert dataStreamIndices.contains(writeIndex);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwMjM3NA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405602374", "bodyText": "Let us wrap in immutableList.", "author": "henningandersen", "createdAt": "2020-04-08T15:14:54Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -257,4 +257,42 @@ private boolean isNonEmpty(List<IndexMetadata> idxMetas) {\n             return (Objects.isNull(idxMetas) || idxMetas.isEmpty()) == false;\n         }\n     }\n+\n+    class DataStream implements IndexAbstraction {\n+\n+        private final org.elasticsearch.cluster.metadata.DataStream dataStream;\n+        private final List<IndexMetadata> dataStreamIndices;\n+        private final IndexMetadata writeIndex;\n+\n+        public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n+                          List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n+            this.dataStream = dataStream;\n+            this.dataStreamIndices = dataStreamIndices;", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\nindex a86b4984253..2e0e927b49a 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java\n\n@@ -267,8 +267,9 @@ public interface IndexAbstraction {\n         public DataStream(org.elasticsearch.cluster.metadata.DataStream dataStream,\n                           List<IndexMetadata> dataStreamIndices, IndexMetadata writeIndex) {\n             this.dataStream = dataStream;\n-            this.dataStreamIndices = dataStreamIndices;\n+            this.dataStreamIndices = List.copyOf(dataStreamIndices);\n             this.writeIndex = writeIndex;\n+            assert dataStreamIndices.contains(writeIndex);\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNDU1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405604557", "bodyText": "nit: it seems a bit odd that we here do alias, then data-stream and in the next block we do data-stream, then alias. Just for readability it would be nice to align the two.", "author": "henningandersen", "createdAt": "2020-04-08T15:17:54Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -200,9 +201,20 @@\n                 } else {\n                     continue;\n                 }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.getOptions().ignoreDataStreams()) {", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\nindex faf04675292..e8e989f4328 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\n\n@@ -209,12 +209,7 @@ public class IndexNameExpressionResolver {\n                 }\n             }\n \n-            if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.isResolveToWriteIndex()) {\n-                IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n-                if (addIndex(writeIndex, context)) {\n-                    concreteIndices.add(writeIndex.getIndex());\n-                }\n-            } else if (indexAbstraction.getType() == IndexAbstraction.Type.ALIAS && context.isResolveToWriteIndex()) {\n+            if (indexAbstraction.getType() == IndexAbstraction.Type.ALIAS && context.isResolveToWriteIndex()) {\n                 IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n                 if (writeIndex == null) {\n                     throw new IllegalArgumentException(\"no write index is defined for alias [\" + indexAbstraction.getName() + \"].\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNzcwMg==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405607702", "bodyText": "Line 234 below needs to pick the name from the index abstraction rather than say \"Alias\". (throw new IllegalArgumentException(\"Alias...)", "author": "henningandersen", "createdAt": "2020-04-08T15:22:04Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -200,9 +201,20 @@\n                 } else {\n                     continue;\n                 }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.getOptions().ignoreDataStreams()) {\n+                if (failNoIndices) {\n+                    throw dataStreamsNotSupportedException(expression);\n+                } else {\n+                    continue;\n+                }\n             }\n \n-            if (indexAbstraction.getType() == IndexAbstraction.Type.ALIAS && context.isResolveToWriteIndex()) {\n+            if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.isResolveToWriteIndex()) {\n+                IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n+                if (addIndex(writeIndex, context)) {\n+                    concreteIndices.add(writeIndex.getIndex());\n+                }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.ALIAS && context.isResolveToWriteIndex()) {\n                 IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n                 if (writeIndex == null) {\n                     throw new IllegalArgumentException(\"no write index is defined for alias [\" + indexAbstraction.getName() + \"].\" +", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\nindex faf04675292..e8e989f4328 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java\n\n@@ -209,12 +209,7 @@ public class IndexNameExpressionResolver {\n                 }\n             }\n \n-            if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.isResolveToWriteIndex()) {\n-                IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n-                if (addIndex(writeIndex, context)) {\n-                    concreteIndices.add(writeIndex.getIndex());\n-                }\n-            } else if (indexAbstraction.getType() == IndexAbstraction.Type.ALIAS && context.isResolveToWriteIndex()) {\n+            if (indexAbstraction.getType() == IndexAbstraction.Type.ALIAS && context.isResolveToWriteIndex()) {\n                 IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n                 if (writeIndex == null) {\n                     throw new IllegalArgumentException(\"no write index is defined for alias [\" + indexAbstraction.getName() + \"].\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTM5MA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405615390", "bodyText": "Let us also assert existing != null to ensure tests fail.", "author": "henningandersen", "createdAt": "2020-04-08T15:32:12Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1369,6 +1369,25 @@ public Metadata build() {\n                 }\n             }\n \n+            DataStreamMetadata dataStreamMetadata = (DataStreamMetadata) this.customs.get(DataStreamMetadata.TYPE);\n+            if (dataStreamMetadata != null) {\n+                for (Map.Entry<String, DataStream> entry : dataStreamMetadata.dataStreams().entrySet()) {\n+                    DataStream dataStream = entry.getValue();\n+                    List<IndexMetadata> backingIndices = dataStream.getIndices().stream()\n+                        .map(index -> indices.get(index.getName()))\n+                        .collect(Collectors.toList());\n+                    assert backingIndices.isEmpty() == false;\n+\n+                    IndexMetadata writeIndex = backingIndices.get(backingIndices.size() - 1);\n+                    IndexAbstraction existing = aliasAndIndexLookup.put(dataStream.getName(),\n+                        new IndexAbstraction.DataStream(dataStream, backingIndices, writeIndex));\n+                    if (existing != null) {", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNjIyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r406016221", "bodyText": "The line below throws an exception, so tests do fail if existing is not null?", "author": "martijnvg", "createdAt": "2020-04-09T07:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java b/server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java\nindex 8a4b0a0bfc8..bb3daa40fcc 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java\n\n@@ -1377,6 +1377,7 @@ public class Metadata implements Iterable<IndexMetadata>, Diffable<Metadata>, To\n                         .map(index -> indices.get(index.getName()))\n                         .collect(Collectors.toList());\n                     assert backingIndices.isEmpty() == false;\n+                    assert backingIndices.contains(null) == false;\n \n                     IndexMetadata writeIndex = backingIndices.get(backingIndices.size() - 1);\n                     IndexAbstraction existing = aliasAndIndexLookup.put(dataStream.getName(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNjk5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405616993", "bodyText": "I think we should also add assert backingIndices.contains(null) == -1 to ensure that the indices.get lookup above found entries in all cases.", "author": "henningandersen", "createdAt": "2020-04-08T15:34:21Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1369,6 +1369,25 @@ public Metadata build() {\n                 }\n             }\n \n+            DataStreamMetadata dataStreamMetadata = (DataStreamMetadata) this.customs.get(DataStreamMetadata.TYPE);\n+            if (dataStreamMetadata != null) {\n+                for (Map.Entry<String, DataStream> entry : dataStreamMetadata.dataStreams().entrySet()) {\n+                    DataStream dataStream = entry.getValue();\n+                    List<IndexMetadata> backingIndices = dataStream.getIndices().stream()\n+                        .map(index -> indices.get(index.getName()))\n+                        .collect(Collectors.toList());\n+                    assert backingIndices.isEmpty() == false;", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java b/server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java\nindex 8a4b0a0bfc8..bb3daa40fcc 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java\n\n@@ -1377,6 +1377,7 @@ public class Metadata implements Iterable<IndexMetadata>, Diffable<Metadata>, To\n                         .map(index -> indices.get(index.getName()))\n                         .collect(Collectors.toList());\n                     assert backingIndices.isEmpty() == false;\n+                    assert backingIndices.contains(null) == false;\n \n                     IndexMetadata writeIndex = backingIndices.get(backingIndices.size() - 1);\n                     IndexAbstraction existing = aliasAndIndexLookup.put(dataStream.getName(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMTgxMg==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405621812", "bodyText": "Should this condition not match the one above? i.e., use <=?\nI would prefer using 0..n-1 instead like we do in most places, but not important.", "author": "henningandersen", "createdAt": "2020-04-08T15:40:56Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java", "diffHunk": "@@ -978,6 +995,37 @@ public void testBuilderForDataStreamWithRandomlyNumberedBackingIndices() {\n         assertThat(metadata.dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n     }\n \n+    public void testBuildIndicesLookupForDataStreams() {\n+        Metadata.Builder b = Metadata.builder();\n+        int numDataStreams = randomIntBetween(2, 8);\n+        for (int i = 1; i <= numDataStreams; i++) {\n+            String name = \"data-stream-\" + i;\n+            int numBackingIndices = randomIntBetween(1, 4);\n+            List<Index> indices = new ArrayList<>(numBackingIndices);\n+            for (int j = 1; j <= numBackingIndices; j++) {\n+                IndexMetadata idx = createBackingIndex(name, j).build();\n+                indices.add(idx.getIndex());\n+                b.put(idx, true);\n+            }\n+            b.put(new DataStream(name, \"ts\", indices));\n+        }\n+\n+        Metadata metadata = b.build();\n+        assertThat(metadata.dataStreams().size(), equalTo(numDataStreams));\n+        for (int i = 1; i < numDataStreams; i++) {", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java b/server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java\nindex cee72a7e9e1..8164cfbad4f 100644\n--- a/server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java\n+++ b/server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java\n\n@@ -998,7 +1000,7 @@ public class MetadataTests extends ESTestCase {\n     public void testBuildIndicesLookupForDataStreams() {\n         Metadata.Builder b = Metadata.builder();\n         int numDataStreams = randomIntBetween(2, 8);\n-        for (int i = 1; i <= numDataStreams; i++) {\n+        for (int i = 0; i < numDataStreams; i++) {\n             String name = \"data-stream-\" + i;\n             int numBackingIndices = randomIntBetween(1, 4);\n             List<Index> indices = new ArrayList<>(numBackingIndices);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzMTEyMA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r405631120", "bodyText": "I think we should not allow deleting the indices of a data stream through a data stream name?", "author": "henningandersen", "createdAt": "2020-04-08T15:53:45Z", "path": "test/framework/src/main/java/org/elasticsearch/test/TestCluster.java", "diffHunk": "@@ -137,7 +137,7 @@ public void wipeIndices(String... indices) {\n             try {\n                 // include wiping hidden indices!\n                 assertAcked(client().admin().indices().prepareDelete(indices)\n-                    .setIndicesOptions(IndicesOptions.fromOptions(false, true, true, true, true, false, false, true, false)));\n+                    .setIndicesOptions(IndicesOptions.fromOptions(false, true, true, true, true, false, false, true, false, true)));", "originalCommit": "5b76cc20a82f679281fc035dcc41c588ec10b46a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "chunk": "diff --git a/test/framework/src/main/java/org/elasticsearch/test/TestCluster.java b/test/framework/src/main/java/org/elasticsearch/test/TestCluster.java\nindex dcabb4dfd69..67223a1dfbc 100644\n--- a/test/framework/src/main/java/org/elasticsearch/test/TestCluster.java\n+++ b/test/framework/src/main/java/org/elasticsearch/test/TestCluster.java\n\n@@ -137,7 +137,7 @@ public abstract class TestCluster implements Closeable {\n             try {\n                 // include wiping hidden indices!\n                 assertAcked(client().admin().indices().prepareDelete(indices)\n-                    .setIndicesOptions(IndicesOptions.fromOptions(false, true, true, true, true, false, false, true, false, true)));\n+                    .setIndicesOptions(IndicesOptions.fromOptions(false, true, true, true, true, false, false, true, false, false)));\n             } catch (IndexNotFoundException e) {\n                 // ignore\n             } catch (IllegalArgumentException e) {\n"}}, {"oid": "f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "url": "https://github.com/elastic/elasticsearch/commit/f13143b2e8c4da8fc13c76d048ea12a2ee0973ba", "message": "applied first feedback", "committedDate": "2020-04-09T08:07:42Z", "type": "commit"}, {"oid": "0554e1b2d00edf7beec0bbe6dae9029737c91333", "url": "https://github.com/elastic/elasticsearch/commit/0554e1b2d00edf7beec0bbe6dae9029737c91333", "message": "renamed variable", "committedDate": "2020-04-09T08:08:42Z", "type": "commit"}, {"oid": "70cb2276d237e07d7c0d78e3d6c81f5afea87e69", "url": "https://github.com/elastic/elasticsearch/commit/70cb2276d237e07d7c0d78e3d6c81f5afea87e69", "message": "Merge remote-tracking branch 'es/master' into make_data_streams_resolvable_in_apis", "committedDate": "2020-04-09T08:14:44Z", "type": "commit"}, {"oid": "a7bf1cf7811005a0a09c9a8d9b771605a8e60385", "url": "https://github.com/elastic/elasticsearch/commit/a7bf1cf7811005a0a09c9a8d9b771605a8e60385", "message": "removed unused import", "committedDate": "2020-04-09T08:52:01Z", "type": "commit"}, {"oid": "74b9c8b3cfcfe3e774cfc2b4cb0ceb5d0868cfb3", "url": "https://github.com/elastic/elasticsearch/commit/74b9c8b3cfcfe3e774cfc2b4cb0ceb5d0868cfb3", "message": "adjust delete data stream logic to play nice with added assertions", "committedDate": "2020-04-09T09:00:49Z", "type": "commit"}, {"oid": "4d1dc1d227c514279cd4d61b387d99629c2a3ef4", "url": "https://github.com/elastic/elasticsearch/commit/4d1dc1d227c514279cd4d61b387d99629c2a3ef4", "message": "Only attempt to build indicesLookup if there are indices, otherwise data streams can't point to a concrete index.\nAlso fixed a few tests.", "committedDate": "2020-04-09T09:51:52Z", "type": "commit"}, {"oid": "a97a606fe2b500e55710164b9cb6c48badbb636b", "url": "https://github.com/elastic/elasticsearch/commit/a97a606fe2b500e55710164b9cb6c48badbb636b", "message": "fixed test due to error message change", "committedDate": "2020-04-09T11:06:14Z", "type": "commit"}, {"oid": "fc10fe2badb82a61f23ff897530d7e3a362339b9", "url": "https://github.com/elastic/elasticsearch/commit/fc10fe2badb82a61f23ff897530d7e3a362339b9", "message": "if yaml test runs in a mixed cluster then `Alias` may be returned due\nto a change in the error message, this pr now returns `alias` with\noriginates from the index abstraction type's display name.", "committedDate": "2020-04-09T11:36:35Z", "type": "commit"}, {"oid": "a2c45561afda9649b0a4673d9da060a6c128c650", "url": "https://github.com/elastic/elasticsearch/commit/a2c45561afda9649b0a4673d9da060a6c128c650", "message": "clean data streams in test", "committedDate": "2020-04-09T12:11:28Z", "type": "commit"}, {"oid": "12db3c26064172a8d9fe3ecf5f04a8d3fbbb1488", "url": "https://github.com/elastic/elasticsearch/commit/12db3c26064172a8d9fe3ecf5f04a8d3fbbb1488", "message": "Replaced IGNORE_DATA_STREAMS indices option with INCLUDE_DATA_STREAMS indices option.\n\nData streams are not resolved unless the INCLUDE_DATA_STREAMS indices option is specified.\nOnly search, msearch, index (with op type create) and refresh requests are configured with\nthe INCLUDE_DATA_STREAMS indices option. All other requests / apis don't resolve data streams.", "committedDate": "2020-04-10T11:25:57Z", "type": "commit"}, {"oid": "af24175266a1d30fd796344b2ed1a8c6ce50968b", "url": "https://github.com/elastic/elasticsearch/commit/af24175266a1d30fd796344b2ed1a8c6ce50968b", "message": "fixed tests", "committedDate": "2020-04-10T13:34:28Z", "type": "commit"}, {"oid": "1b59cb21527f3919522521966570a1e0c1833a54", "url": "https://github.com/elastic/elasticsearch/commit/1b59cb21527f3919522521966570a1e0c1833a54", "message": "Merge remote-tracking branch 'es/master' into make_data_streams_resolvable_in_apis", "committedDate": "2020-04-10T13:34:43Z", "type": "commit"}, {"oid": "1f91c80f89f2fa1b9463002b16b80f94c6e025f0", "url": "https://github.com/elastic/elasticsearch/commit/1f91c80f89f2fa1b9463002b16b80f94c6e025f0", "message": "don't serialize include_datastreams if other node doesn't support it", "committedDate": "2020-04-10T14:37:49Z", "type": "commit"}, {"oid": "9a604aff5cd4c2fb8040a46c78125a22b3eeca9c", "url": "https://github.com/elastic/elasticsearch/commit/9a604aff5cd4c2fb8040a46c78125a22b3eeca9c", "message": "Merge remote-tracking branch 'es/master' into make_data_streams_resolvable_in_apis", "committedDate": "2020-04-14T13:40:45Z", "type": "commit"}, {"oid": "c04439f4936f490b8d0bf34753c02206404bf0fc", "url": "https://github.com/elastic/elasticsearch/commit/c04439f4936f490b8d0bf34753c02206404bf0fc", "message": "add yaml tests that check that using a data stream in a number of apis is forbidden.", "committedDate": "2020-04-14T14:59:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTAwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408701009", "bodyText": "I think this would be better handled in the IndexNameExpressionResolver.Context and thus by adding new methods to IndexNameExpressionResolver (similar to concreteWriteIndex). It looks like only search, refresh (and index) really need to resolve data streams? Indexing data can be resolved in concreteWriteIndex. For search some of the search specific methods are already there (resolveSearchRouting).\nThe benefits of this is that we avoid the additional IndicesOptions instances, it becomes more clear when data streams are resolved to indices and it more clearly separates the responsibility of IndicesOptions (which is sort of the user specified options) vs. the specific action's needs.", "author": "henningandersen", "createdAt": "2020-04-15T09:20:47Z", "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -103,7 +102,8 @@ public static XContentBuilder toXContent(EnumSet<WildcardStates> states, XConten\n         ALLOW_NO_INDICES,\n         FORBID_ALIASES_TO_MULTIPLE_INDICES,\n         FORBID_CLOSED_INDICES,\n-        IGNORE_THROTTLED;\n+        IGNORE_THROTTLED,\n+        INCLUDE_DATA_STREAMS;", "originalCommit": "c04439f4936f490b8d0bf34753c02206404bf0fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MDgyMw==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408790823", "bodyText": "It looks like only search, refresh (and index) really need to resolve data streams?\n\nI think more apis will need to be able to resolve data streams. I just enabled the ability for the APIs you mentioned in order to make integration tests pass. For example I think that field capability, get field mapping and eql APIs will need to resolve data streams as well.\nAlso I suspect that get mapping and settings apis will need to be able to resolve data streams too (if a data stream is used then all mappings/settings for all backing indices are returned.) When talking to the Fleet team, they would like to the put mapping/settings apis to understand data streams as well (in this case a data stream should resolve to the latest index, otherwise they will need to figure out what the current write index is and do the required update). This was just part of casual conversation, so no decisions made yet.\nI'm pretty sure that more apis will need to support data streams, so\nI prefer if we keep the current approach that enables the use data streams via an Indices.Option enum instance. Also the way I look at data streams is that it is a way to group indices and from that perspective exposing the ability to use data streams in apis as an indices option makes sense. I don't think we should ever hide the fact that a data stream is backed by indices.\nOnly part of indices option is user specified. The include data streams indices option is not a user specified option as apposed to example allow_no_indices option. Each api/action can opt-in whether data streams should be resolvable. I think adding a method to IndexNameExpressionResolver will complicate the code. Now most apis use the same method for resolving user specified indices expressions and for all apis that need to be able support data streams this needs to be changed. Also apis tend to reuse the same base class.", "author": "martijnvg", "createdAt": "2020-04-15T12:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3Mzc0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r409673749", "bodyText": "We spoke about this on another channel and came to the conclusion to keep this as is. There is agreement that a split of the user level and the action-specific options would be desirable, but we postpone that work to a separate effort.", "author": "henningandersen", "createdAt": "2020-04-16T16:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTAwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTQ0NA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408701444", "bodyText": "If we stick to this approach, this should also be renamed?", "author": "henningandersen", "createdAt": "2020-04-15T09:21:33Z", "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -133,12 +133,19 @@ public static XContentBuilder toXContent(EnumSet<WildcardStates> states, XConten\n         new IndicesOptions(EnumSet.of(Option.ALLOW_NO_INDICES, Option.FORBID_CLOSED_INDICES),\n             EnumSet.of(WildcardStates.OPEN, WildcardStates.HIDDEN));\n     public static final IndicesOptions STRICT_EXPAND_OPEN_FORBID_CLOSED_IGNORE_THROTTLED =", "originalCommit": "c04439f4936f490b8d0bf34753c02206404bf0fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "390f070fcb7653f3ad58d30ca06649ad75b85277", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java b/server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java\nindex e5effe24e05..c1c2fad4e94 100644\n--- a/server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java\n+++ b/server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java\n\n@@ -132,7 +135,7 @@ public class IndicesOptions implements ToXContentFragment {\n     public static final IndicesOptions STRICT_EXPAND_OPEN_HIDDEN_FORBID_CLOSED =\n         new IndicesOptions(EnumSet.of(Option.ALLOW_NO_INDICES, Option.FORBID_CLOSED_INDICES),\n             EnumSet.of(WildcardStates.OPEN, WildcardStates.HIDDEN));\n-    public static final IndicesOptions STRICT_EXPAND_OPEN_FORBID_CLOSED_IGNORE_THROTTLED =\n+    public static final IndicesOptions STRICT_INCLUDE_DATA_STREAMS_EXPAND_OPEN_FORBID_CLOSED_IGNORE_THROTTLED =\n         new IndicesOptions(EnumSet.of(Option.ALLOW_NO_INDICES, Option.FORBID_CLOSED_INDICES, Option.IGNORE_THROTTLED,\n             Option.INCLUDE_DATA_STREAMS), EnumSet.of(WildcardStates.OPEN));\n     public static final IndicesOptions STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODI0NA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408708244", "bodyText": "I think reusing this flag for data streams is not ideal. I wonder if we should instead flat out fail, if an expression matches a data-stream and we are not in one of the cases where data-streams are resolved.\nI think I prefer this over skipping data-streams. Index, alias and data-stream are in the same namespace. I think it will be confusing to have some index admin operations that match indices and aliases, but ignores data-streams. Suppose you have:\nxalias -> yindex\nxindex\nxdatastream\nand you do POST /x*/_close, I think it would close yindex, xindex, but silently ignore xdatastream. Obviously, users should design their namings to avoid such scenarios, but I think a better default would be to fail, if an operation unexpectedly resolves to a data-stream.", "author": "henningandersen", "createdAt": "2020-04-15T09:32:51Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -212,15 +220,21 @@\n                 if (addIndex(writeIndex, context)) {\n                     concreteIndices.add(writeIndex.getIndex());\n                 }\n+            } else if (indexAbstraction.getType() == IndexAbstraction.Type.DATA_STREAM && context.isResolveToWriteIndex()) {\n+                IndexMetadata writeIndex = indexAbstraction.getWriteIndex();\n+                if (addIndex(writeIndex, context)) {\n+                    concreteIndices.add(writeIndex.getIndex());\n+                }\n             } else {\n                 if (indexAbstraction.getIndices().size() > 1 && !options.allowAliasesToMultipleIndices()) {", "originalCommit": "c04439f4936f490b8d0bf34753c02206404bf0fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MTUwMA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408791500", "bodyText": "Whether an operation or api is expected to expand a wildcard expression to a data stream that depends on whether that api is setup to resolve data streams. So in this case that would mean that ignoring data streams is expected behaviour. This is at least my expectation.", "author": "martijnvg", "createdAt": "2020-04-15T12:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjEyMg==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r409346122", "bodyText": "Henning and I chatted about this and we both now agree that the request should fail if data streams are not resolvable both the expression matches with one or more data streams. It makes it clear that an api doesn't support data streams (just like if a user specified a concrete data stream name) and this makes it easier to add data stream support if an api should support data streams.", "author": "martijnvg", "createdAt": "2020-04-16T07:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODI0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NjM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r408756381", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testDataSteams() {\n          \n          \n            \n                public void testDataStreams() {", "author": "henningandersen", "createdAt": "2020-04-15T10:59:15Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "diffHunk": "@@ -1759,4 +1760,158 @@ public void testIgnoreThrottled() {\n             assertEquals(\"test-index\", indices[2].getName());\n         }\n     }\n+\n+    public void testDataSteams() {", "originalCommit": "c04439f4936f490b8d0bf34753c02206404bf0fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d63d618dc5c4c1cd5cd3210a8bb855747a39e2d", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java b/server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java\nindex 49809edf17f..514235e5307 100644\n--- a/server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java\n+++ b/server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java\n\n@@ -1801,8 +1801,10 @@ public class IndexNameExpressionResolverTests extends ESTestCase {\n             // Ignore data streams, allow no indices and ignore unavailable\n             IndicesOptions indicesOptions = new IndicesOptions(EnumSet.of(IndicesOptions.Option.ALLOW_NO_INDICES,\n                 IndicesOptions.Option.IGNORE_UNAVAILABLE), EnumSet.of(IndicesOptions.WildcardStates.OPEN));\n-            Index[] result = indexNameExpressionResolver.concreteIndices(state, indicesOptions, \"my-data-stream\");\n-            assertThat(result.length, equalTo(0));\n+            Exception e = expectThrows(IllegalArgumentException.class,\n+                () -> indexNameExpressionResolver.concreteIndices(state, indicesOptions, \"my-data-stream\"));\n+            assertThat(e.getMessage(), equalTo(\"The provided expression [my-data-stream] matches a \" +\n+                \"data stream, specify the corresponding concrete indices instead.\"));\n         }\n         {\n             IndicesOptions indicesOptions = new IndicesOptions(EnumSet.of(IndicesOptions.Option.INCLUDE_DATA_STREAMS),\n"}}, {"oid": "8a256f325c39f1984fed37b50be9ac0a7cafbac1", "url": "https://github.com/elastic/elasticsearch/commit/8a256f325c39f1984fed37b50be9ac0a7cafbac1", "message": "Merge remote-tracking branch 'es/master' into make_data_streams_resolvable_in_apis", "committedDate": "2020-04-16T07:34:28Z", "type": "commit"}, {"oid": "3d63d618dc5c4c1cd5cd3210a8bb855747a39e2d", "url": "https://github.com/elastic/elasticsearch/commit/3d63d618dc5c4c1cd5cd3210a8bb855747a39e2d", "message": "If include data stream indices option is not set and a wildcard expression expands to a data stream then fail.\nThis means the api doesn't support data streams, but the wildcard expression is resolving to a data stream.\nPrior to this commit data streams would be quietly ignored.\n\nWe think that failing is more clear, so that it is clear that a specific api call isn't executed over a data stream.", "committedDate": "2020-04-16T13:13:35Z", "type": "commit"}, {"oid": "254490084fd5dd38db0335a8aa5feeee45834f6d", "url": "https://github.com/elastic/elasticsearch/commit/254490084fd5dd38db0335a8aa5feeee45834f6d", "message": "renamed test method", "committedDate": "2020-04-16T13:13:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3OTU3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r409679573", "bodyText": "I think we should put in a check into CreateDataStreamAction to not allow creating data streams before all nodes are on the target release (7.8)? To ensure that there are no surprises in a mixed cluster.", "author": "henningandersen", "createdAt": "2020-04-16T16:12:50Z", "path": "server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java", "diffHunk": "@@ -227,8 +237,21 @@ public boolean ignoreThrottled() {\n         return EnumSet.copyOf(expandWildcards);\n     }\n \n+    /**\n+     * @return Whether to include data streams when resolving index expressions to concrete indices.\n+     */\n+    public boolean includeDataStreams() {\n+        return options.contains(Option.INCLUDE_DATA_STREAMS);\n+    }\n+\n     public void writeIndicesOptions(StreamOutput out) throws IOException {\n-        out.writeEnumSet(options);\n+        if (out.getVersion().before(Version.V_8_0_0) && options.contains(Option.INCLUDE_DATA_STREAMS)) {\n+            EnumSet<Option> copy = EnumSet.copyOf(options);\n+            copy.remove(Option.INCLUDE_DATA_STREAMS);", "originalCommit": "254490084fd5dd38db0335a8aa5feeee45834f6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwODg4MA==", "url": "https://github.com/elastic/elasticsearch/pull/54726#discussion_r409708880", "bodyText": "\ud83d\udc4d I will make this change in a followup change.", "author": "martijnvg", "createdAt": "2020-04-16T16:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3OTU3Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "390f070fcb7653f3ad58d30ca06649ad75b85277", "url": "https://github.com/elastic/elasticsearch/commit/390f070fcb7653f3ad58d30ca06649ad75b85277", "message": "renamed constant", "committedDate": "2020-04-16T16:58:37Z", "type": "commit"}]}