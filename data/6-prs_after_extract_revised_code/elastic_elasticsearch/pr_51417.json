{"pr_number": 51417, "pr_title": "Remove translog retention policy", "pr_createdAt": "2020-01-24T13:48:51Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51417", "timeline": [{"oid": "d1c086327a113523748d064bc3654172e74b3208", "url": "https://github.com/elastic/elasticsearch/commit/d1c086327a113523748d064bc3654172e74b3208", "message": "Remove translog retention policy", "committedDate": "2020-01-24T13:32:14Z", "type": "commit"}, {"oid": "f0118f20e8b8b3229e12d856a6483f721ee857f1", "url": "https://github.com/elastic/elasticsearch/commit/f0118f20e8b8b3229e12d856a6483f721ee857f1", "message": "fix translog policy in truncate translog", "committedDate": "2020-01-24T14:42:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjEyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51417#discussion_r370742129", "bodyText": "should we deprecate these settings in 7 and disallow setting them on 8.x indices?\nWe should also add docs in this PR saying that these settings are no longer supported and are effectively ignored", "author": "ywelsch", "createdAt": "2020-01-24T17:05:43Z", "path": "server/src/main/java/org/elasticsearch/index/IndexSettings.java", "diffHunk": "@@ -248,8 +248,7 @@\n      * This setting will be ignored if soft-deletes is used in peer recoveries (default in 7.4).\n      **/\n     public static final Setting<TimeValue> INDEX_TRANSLOG_RETENTION_AGE_SETTING =", "originalCommit": "f0118f20e8b8b3229e12d856a6483f721ee857f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0OTcyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51417#discussion_r370749721", "bodyText": "should we deprecate these settings in 7 and disallow setting them on 8.x indices? We should also add docs in this PR saying that these settings are no longer supported and are effectively ignored\n\nYup, It was planned in the next step :)", "author": "dnhatn", "createdAt": "2020-01-24T17:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjEyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NTA1NA==", "url": "https://github.com/elastic/elasticsearch/pull/51417#discussion_r370745054", "bodyText": "\ud83d\udcaf", "author": "ywelsch", "createdAt": "2020-01-24T17:12:17Z", "path": "server/src/main/java/org/elasticsearch/index/translog/TranslogDeletionPolicy.java", "diffHunk": "@@ -156,66 +134,9 @@ private synchronized void releaseTranslogGen(long translogGen) {\n     /**\n      * returns the minimum translog generation that is still required by the system. Any generation below\n      * the returned value may be safely deleted\n-     *\n-     * @param readers current translog readers\n-     * @param writer  current translog writer\n      */\n-    synchronized long minTranslogGenRequired(List<TranslogReader> readers, TranslogWriter writer) throws IOException {\n-        long minByLocks = getMinTranslogGenRequiredByLocks();\n-        long minByAge = getMinTranslogGenByAge(readers, writer, retentionAgeInMillis, currentTime());\n-        long minBySize = getMinTranslogGenBySize(readers, writer, retentionSizeInBytes);\n-        final long minByAgeAndSize;\n-        if (minBySize == Long.MIN_VALUE && minByAge == Long.MIN_VALUE) {\n-            // both size and age are disabled;\n-            minByAgeAndSize = Long.MAX_VALUE;\n-        } else {\n-            minByAgeAndSize = Math.max(minByAge, minBySize);\n-        }\n-        long minByNumFiles = getMinTranslogGenByTotalFiles(readers, writer, retentionTotalFiles);\n-        return Math.min(Math.max(minByAgeAndSize, minByNumFiles), Math.min(minByLocks, minTranslogGenerationForRecovery));\n-    }\n-\n-    static long getMinTranslogGenBySize(List<TranslogReader> readers, TranslogWriter writer, long retentionSizeInBytes) {\n-        if (retentionSizeInBytes >= 0) {\n-            long totalSize = writer.sizeInBytes();\n-            long minGen = writer.getGeneration();\n-            for (int i = readers.size() - 1; i >= 0 && totalSize < retentionSizeInBytes; i--) {\n-                final TranslogReader reader = readers.get(i);\n-                totalSize += reader.sizeInBytes();\n-                minGen = reader.getGeneration();\n-            }\n-            return minGen;\n-        } else {\n-            return Long.MIN_VALUE;\n-        }\n-    }\n-\n-    static long getMinTranslogGenByAge(List<TranslogReader> readers, TranslogWriter writer, long maxRetentionAgeInMillis, long now)\n-        throws IOException {\n-        if (maxRetentionAgeInMillis >= 0) {\n-            for (TranslogReader reader: readers) {\n-                if (now - reader.getLastModifiedTime() <= maxRetentionAgeInMillis) {\n-                    return reader.getGeneration();\n-                }\n-            }\n-            return writer.getGeneration();\n-        } else {\n-            return Long.MIN_VALUE;\n-        }\n-    }\n-\n-    static long getMinTranslogGenByTotalFiles(List<TranslogReader> readers, TranslogWriter writer, final int maxTotalFiles) {\n-        long minGen = writer.generation;\n-        int totalFiles = 1; // for the current writer\n-        for (int i = readers.size() - 1; i >= 0 && totalFiles < maxTotalFiles; i--) {\n-            totalFiles++;\n-            minGen = readers.get(i).generation;\n-        }\n-        return minGen;\n-    }\n-\n-    protected long currentTime() {\n-        return System.currentTimeMillis();\n+    synchronized long minTranslogGenRequired() {\n+        return Math.min(getMinTranslogGenRequiredByLocks(), minTranslogGenerationForRecovery);", "originalCommit": "f0118f20e8b8b3229e12d856a6483f721ee857f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NTYyMw==", "url": "https://github.com/elastic/elasticsearch/pull/51417#discussion_r370745623", "bodyText": "why remove this test (and the one below)? We have not removed this functionality and still need it, no?", "author": "ywelsch", "createdAt": "2020-01-24T17:13:41Z", "path": "server/src/test/java/org/elasticsearch/index/IndexServiceTests.java", "diffHunk": "@@ -367,70 +361,6 @@ public void testRescheduleAsyncFsync() throws Exception {\n         assertNotNull(indexService.getFsyncTask());\n     }\n \n-    public void testAsyncTranslogTrimActuallyWorks() throws Exception {", "originalCommit": "f0118f20e8b8b3229e12d856a6483f721ee857f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1MTEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/51417#discussion_r370751102", "bodyText": "restored in 82255aa.", "author": "dnhatn", "createdAt": "2020-01-24T17:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NTYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "82255aae678c57e1b0ab4c67d7e21be7266cfb7f", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/index/IndexServiceTests.java b/server/src/test/java/org/elasticsearch/index/IndexServiceTests.java\nindex 2fd8b0707d8..55b65dbe116 100644\n--- a/server/src/test/java/org/elasticsearch/index/IndexServiceTests.java\n+++ b/server/src/test/java/org/elasticsearch/index/IndexServiceTests.java\n\n@@ -361,6 +367,70 @@ public class IndexServiceTests extends ESSingleNodeTestCase {\n         assertNotNull(indexService.getFsyncTask());\n     }\n \n+    public void testAsyncTranslogTrimActuallyWorks() throws Exception {\n+        Settings settings = Settings.builder()\n+            .put(TRANSLOG_RETENTION_CHECK_INTERVAL_SETTING.getKey(), \"100ms\") // very often :)\n+            .build();\n+        IndexService indexService = createIndex(\"test\", settings);\n+        ensureGreen(\"test\");\n+        assertTrue(indexService.getTrimTranslogTask().mustReschedule());\n+        client().prepareIndex(\"test\").setId(\"1\").setSource(\"{\\\"foo\\\": \\\"bar\\\"}\", XContentType.JSON).get();\n+        client().admin().indices().prepareFlush(\"test\").get();\n+        client().admin().indices().prepareUpdateSettings(\"test\")\n+            .setSettings(Settings.builder()\n+                .put(IndexSettings.INDEX_TRANSLOG_RETENTION_SIZE_SETTING.getKey(), -1)\n+                .put(IndexSettings.INDEX_TRANSLOG_RETENTION_AGE_SETTING.getKey(), -1))\n+            .get();\n+        IndexShard shard = indexService.getShard(0);\n+        assertBusy(() -> assertThat(IndexShardTestCase.getTranslog(shard).totalOperations(), equalTo(0)));\n+    }\n+\n+    public void testAsyncTranslogTrimTaskOnClosedIndex() throws Exception {\n+        final String indexName = \"test\";\n+        IndexService indexService = createIndex(indexName, Settings.builder()\n+            .put(TRANSLOG_RETENTION_CHECK_INTERVAL_SETTING.getKey(), \"100ms\")\n+            .build());\n+        Translog translog = IndexShardTestCase.getTranslog(indexService.getShard(0));\n+        final Path translogPath = translog.getConfig().getTranslogPath();\n+        final String translogUuid = translog.getTranslogUUID();\n+\n+        int translogOps = 0;\n+        final int numDocs = scaledRandomIntBetween(10, 100);\n+        for (int i = 0; i < numDocs; i++) {\n+            client().prepareIndex().setIndex(indexName).setId(String.valueOf(i)).setSource(\"{\\\"foo\\\": \\\"bar\\\"}\", XContentType.JSON).get();\n+            translogOps++;\n+            if (randomBoolean()) {\n+                client().admin().indices().prepareFlush(indexName).get();\n+                if (indexService.getIndexSettings().isSoftDeleteEnabled()) {\n+                    translogOps = 0;\n+                }\n+            }\n+        }\n+        assertThat(translog.totalOperations(), equalTo(translogOps));\n+        assertThat(translog.stats().estimatedNumberOfOperations(), equalTo(translogOps));\n+        assertAcked(client().admin().indices().prepareClose(\"test\"));\n+\n+        indexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(indexService.index());\n+        assertTrue(indexService.getTrimTranslogTask().mustReschedule());\n+\n+        final long lastCommitedTranslogGeneration;\n+        try (Engine.IndexCommitRef indexCommitRef = getEngine(indexService.getShard(0)).acquireLastIndexCommit(false)) {\n+            Map<String, String> lastCommittedUserData = indexCommitRef.getIndexCommit().getUserData();\n+            lastCommitedTranslogGeneration = Long.parseLong(lastCommittedUserData.get(Translog.TRANSLOG_GENERATION_KEY));\n+        }\n+        assertBusy(() -> {\n+            long minTranslogGen = Translog.readMinTranslogGeneration(translogPath, translogUuid);\n+            assertThat(minTranslogGen, equalTo(lastCommitedTranslogGeneration));\n+        });\n+\n+        assertAcked(client().admin().indices().prepareOpen(\"test\"));\n+\n+        indexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(indexService.index());\n+        translog = IndexShardTestCase.getTranslog(indexService.getShard(0));\n+        assertThat(translog.totalOperations(), equalTo(0));\n+        assertThat(translog.stats().estimatedNumberOfOperations(), equalTo(0));\n+    }\n+\n     public void testIllegalFsyncInterval() {\n         Settings settings = Settings.builder()\n             .put(IndexSettings.INDEX_TRANSLOG_SYNC_INTERVAL_SETTING.getKey(), \"0ms\") // disable\n"}}, {"oid": "82255aae678c57e1b0ab4c67d7e21be7266cfb7f", "url": "https://github.com/elastic/elasticsearch/commit/82255aae678c57e1b0ab4c67d7e21be7266cfb7f", "message": "revert async trim task test", "committedDate": "2020-01-24T17:25:18Z", "type": "commit"}, {"oid": "975b8e46bac37eae858732f582f4af8037f85c4d", "url": "https://github.com/elastic/elasticsearch/commit/975b8e46bac37eae858732f582f4af8037f85c4d", "message": "Merge branch 'master' into remove-translog-deletion-policy", "committedDate": "2020-01-24T17:25:50Z", "type": "commit"}]}