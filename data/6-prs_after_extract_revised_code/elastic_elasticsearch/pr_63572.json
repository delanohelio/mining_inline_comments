{"pr_number": 63572, "pr_title": "Use ValueFetcher when loading text snippets to highlight", "pr_createdAt": "2020-10-12T18:00:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63572", "timeline": [{"oid": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68", "url": "https://github.com/elastic/elasticsearch/commit/48bf4b683f786e68c8576b2abaa2cdfad08dfe68", "message": "Use ValueFetcher when loading text snippets to highlight", "committedDate": "2020-10-12T17:55:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503463812", "bodyText": "null looks is going to cause this to fail on runtime fields. Do we filter those out other places?", "author": "nik9000", "createdAt": "2020-10-12T18:24:31Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n-            CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n-            hitContext.reader().document(hitContext.docId(), fieldVisitor);\n-            textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n-            if (textsToHighlight == null) {\n-                // Can happen if the document doesn't have the field to highlight\n-                textsToHighlight = Collections.emptyList();\n-            }\n-        } else {\n-            SourceLookup sourceLookup = hitContext.sourceLookup();\n-            textsToHighlight = sourceLookup.extractRawValues(fieldType.name());\n-        }\n-        assert textsToHighlight != null;\n-        return textsToHighlight;\n+                                               MapperService mapperService,\n+                                               FetchSubPhase.HitContext hitContext) throws IOException {\n+        ValueFetcher fetcher = fieldType.valueFetcher(mapperService, null, null);", "originalCommit": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MjYyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503482625", "bodyText": "I meant to highlight this with a comment of 'not sure about this' - I'm pretty sure that we filter out non-text fields further up the stack, but I need to double-check.", "author": "romseygeek", "createdAt": "2020-10-12T19:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4MjkzNA==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r504282934", "bodyText": "I think we do try to highlight runtime fields. I'm not sure how we manage not to fail here. Runtime fields really need the SearchLookup to do anything.", "author": "nik9000", "createdAt": "2020-10-13T21:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxNTc4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r504515786", "bodyText": "I vaguely remember looking at this too, and finding that for runtime fields we simply don't return anything highlighted rather than failing, as they are not in _source nor stored.", "author": "javanna", "createdAt": "2020-10-14T08:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzMjk4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r526932987", "bodyText": "Given that runtime fields can't be highlighted anyway, I just added a null check for SearchLookup inside the value fetcher in AbstractScriptFieldType.", "author": "romseygeek", "createdAt": "2020-11-19T14:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MzgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "36469e3966afc9ee9282bd8b974601de03a3bdb3", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\nindex a73bc1f3502..23b57845d0a 100644\n--- a/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\n+++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\n\n@@ -44,7 +49,14 @@ public final class HighlightUtils {\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n                                                MapperService mapperService,\n-                                               FetchSubPhase.HitContext hitContext) throws IOException {\n+                                               FetchSubPhase.HitContext hitContext,\n+                                               boolean storedFieldsAvailable) throws IOException {\n+        if (storedFieldsAvailable && fieldType.isStored()) {\n+            CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n+            hitContext.reader().document(hitContext.docId(), fieldVisitor);\n+            List<Object> textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n+            return Objects.requireNonNullElse(textsToHighlight, Collections.emptyList());\n+        }\n         ValueFetcher fetcher = fieldType.valueFetcher(mapperService, null, null);\n         return fetcher.fetchValues(hitContext.sourceLookup());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503464452", "bodyText": "Dropping this is a behavior change - this behavior of defaulting to stored fields was something folks were really keen on historically.", "author": "nik9000", "createdAt": "2020-10-12T18:26:05Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +43,10 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                               FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {", "originalCommit": "48bf4b683f786e68c8576b2abaa2cdfad08dfe68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MzM2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503483361", "bodyText": "Is this something that we can build into the ValueFetchers themselves? If it's a performance enhancement here, then it presumably will be elsewhere as well?", "author": "romseygeek", "createdAt": "2020-10-12T19:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4Nzc0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503487745", "bodyText": "Is this something that we can build into the ValueFetchers themselves? If it's a performance enhancement here, then it presumably will be elsewhere as well?\n\nIt'd be super nice to have one way to think about this. So, hopefully!", "author": "nik9000", "createdAt": "2020-10-12T19:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUwMTgyNg==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503501826", "bodyText": "+1 to explore automatically loading stored fields when they're available. Beyond highlighting, this would simplify some field retrieval workflows where users currently need to request both _source and stored_fields. This seems like it'd be a bigger change, maybe it'd make sense as a follow-up issue or PR ?", "author": "jtibshirani", "createdAt": "2020-10-12T19:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMTg0MA==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503511840", "bodyText": "I think that using stored fields if they exist is kind of a blocker for this change, or, at least, for the part of this change that drops the stored fields stuff.", "author": "nik9000", "createdAt": "2020-10-12T20:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMDA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503530085", "bodyText": "Yes, I think we want to make that change first.  The tricky part will be communicating to the SourceLookup (or whatever stored-fields equivalent we come up with) which fields we want to load up-front.  I wonder what the cost of just automatically reading all stored fields in the Visitor would be?", "author": "romseygeek", "createdAt": "2020-10-12T21:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMjc2OA==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503532768", "bodyText": "Could we just restore the conditional if (forceSource == false && fieldType.isStored()) { ...  here in order not to block this change on a larger one around stored fields ?", "author": "jtibshirani", "createdAt": "2020-10-12T21:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzkyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503533929", "bodyText": "I think that means we need to add back in the 'ignoreAbove' logic, which was the main reason I tried this out.", "author": "romseygeek", "createdAt": "2020-10-12T21:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNjM1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503536352", "bodyText": "I don't think so, because stored fields already respect the ignore_above option for keywords, so they'll be naturally excluded.", "author": "jtibshirani", "createdAt": "2020-10-12T21:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0NDQ2OA==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r503744468", "bodyText": "That was the crux that I was missing, thank you!  Have pushed an update", "author": "romseygeek", "createdAt": "2020-10-13T07:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NDQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "36469e3966afc9ee9282bd8b974601de03a3bdb3", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\nindex a73bc1f3502..23b57845d0a 100644\n--- a/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\n+++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\n\n@@ -44,7 +49,14 @@ public final class HighlightUtils {\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n                                                MapperService mapperService,\n-                                               FetchSubPhase.HitContext hitContext) throws IOException {\n+                                               FetchSubPhase.HitContext hitContext,\n+                                               boolean storedFieldsAvailable) throws IOException {\n+        if (storedFieldsAvailable && fieldType.isStored()) {\n+            CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n+            hitContext.reader().document(hitContext.docId(), fieldVisitor);\n+            List<Object> textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n+            return Objects.requireNonNullElse(textsToHighlight, Collections.emptyList());\n+        }\n         ValueFetcher fetcher = fieldType.valueFetcher(mapperService, null, null);\n         return fetcher.fetchValues(hitContext.sourceLookup());\n     }\n"}}, {"oid": "36469e3966afc9ee9282bd8b974601de03a3bdb3", "url": "https://github.com/elastic/elasticsearch/commit/36469e3966afc9ee9282bd8b974601de03a3bdb3", "message": "Add back stored-fields branch", "committedDate": "2020-10-13T07:58:14Z", "type": "commit"}, {"oid": "972a635210ce44c8c50bf9fcd0e296e8622063a7", "url": "https://github.com/elastic/elasticsearch/commit/972a635210ce44c8c50bf9fcd0e296e8622063a7", "message": "Merge remote-tracking branch 'origin/master' into highlight/fetcher", "committedDate": "2020-10-13T07:58:29Z", "type": "commit"}, {"oid": "5b72b8bddcbe09cc6c73a19cba497485090a4e97", "url": "https://github.com/elastic/elasticsearch/commit/5b72b8bddcbe09cc6c73a19cba497485090a4e97", "message": "Merge remote-tracking branch 'origin/master' into highlight/fetcher", "committedDate": "2020-11-19T14:19:19Z", "type": "commit"}, {"oid": "a3baf24b5eba540425f2fc0e550339f72b08d49e", "url": "https://github.com/elastic/elasticsearch/commit/a3baf24b5eba540425f2fc0e550339f72b08d49e", "message": "Check for nulls in tokencount", "committedDate": "2020-11-19T14:27:41Z", "type": "commit"}, {"oid": "1c28877ca19adbb799d58139d345b4874df27e4b", "url": "https://github.com/elastic/elasticsearch/commit/1c28877ca19adbb799d58139d345b4874df27e4b", "message": "test for copy_to highlighting; check *all* source paths", "committedDate": "2020-11-19T14:50:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1ODk0NA==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r526958944", "bodyText": "This was a bug - if the first of multiple source paths didn't have any values, we returned early instead of continuing to check further paths.", "author": "romseygeek", "createdAt": "2020-11-19T15:06:19Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/SourceValueFetcher.java", "diffHunk": "@@ -60,7 +60,7 @@ public SourceValueFetcher(String fieldName, QueryShardContext context, Object nu\n         for (String path : sourcePaths) {\n             Object sourceValue = lookup.extractValue(path, nullValue);\n             if (sourceValue == null) {\n-                return List.of();\n+                continue;", "originalCommit": "1c28877ca19adbb799d58139d345b4874df27e4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4OTM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r527189383", "bodyText": "Thank you for catching this! Maybe we could fix this in a separate PR (with a quick test) to keep this one scoped to highlighting?", "author": "jtibshirani", "createdAt": "2020-11-19T20:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1ODk0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk2MTA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r526961063", "bodyText": "Another option here would be to pass the Fetch-phase search lookup through all the highlighting code to HighlightUtils.loadValues(), and I think we probably will want to do that eventually, but it's not really ready yet given our uncertainty around how that lookup is built and passed around anyway.", "author": "romseygeek", "createdAt": "2020-11-19T15:09:01Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java", "diffHunk": "@@ -198,6 +199,9 @@ protected final void checkAllowExpensiveQueries(QueryShardContext context) {\n \n     @Override\n     public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup lookup, String format) {\n+        if (lookup == null) {\n+            return v -> Collections.emptyList();\n+        }", "originalCommit": "1c28877ca19adbb799d58139d345b4874df27e4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzM4NA==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r527133384", "bodyText": "I was going to ask why it is null, the supplier could throw unsupported operation exception and not be null, but it is no supplier in this case. I am not liking that much that it can be null, but I am not sure how we can avoid that in this scenario.", "author": "javanna", "createdAt": "2020-11-19T19:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk2MTA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2ea506de64a10a5bd3c56c126d4204f166a5d086", "chunk": "diff --git a/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java b/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java\nindex 7b9b1651278..91438df9a06 100644\n--- a/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java\n+++ b/x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/AbstractScriptFieldType.java\n\n@@ -198,11 +197,8 @@ abstract class AbstractScriptFieldType<LeafFactory> extends RuntimeFieldType {\n     }\n \n     @Override\n-    public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup lookup, String format) {\n-        if (lookup == null) {\n-            return v -> Collections.emptyList();\n-        }\n-        return new DocValueFetcher(docValueFormat(format, null), lookup.doc().getForField(this));\n+    public ValueFetcher valueFetcher(QueryShardContext context, String format) {\n+        return new DocValueFetcher(docValueFormat(format, null), context.getForField(this));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5NDMyOA==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r527194328", "bodyText": "To me it'd be best to keep the original forceSource name and value -- it matches the  force_source REST option that this value comes and avoids having mixed concepts in the code.", "author": "jtibshirani", "createdAt": "2020-11-19T20:59:12Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +48,17 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n+                                               QueryShardContext qsc,\n                                                FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n+                                               boolean storedFieldsAvailable) throws IOException {", "originalCommit": "1c28877ca19adbb799d58139d345b4874df27e4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea506de64a10a5bd3c56c126d4204f166a5d086", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\nindex ffde45b7db6..5e4047d8bee 100644\n--- a/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\n+++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\n\n@@ -57,7 +57,7 @@ public final class HighlightUtils {\n             List<Object> textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n             return Objects.requireNonNullElse(textsToHighlight, Collections.emptyList());\n         }\n-        ValueFetcher fetcher = fieldType.valueFetcher(qsc, null, null);\n+        ValueFetcher fetcher = fieldType.valueFetcher(qsc, null);\n         return fetcher.fetchValues(hitContext.sourceLookup());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2NDA1NA==", "url": "https://github.com/elastic/elasticsearch/pull/63572#discussion_r527364054", "bodyText": "I just opened #65292 -- if we like the direction and it gets merged, then MappedFieldType#valueFetcher won't need a dedicated SearchLookup at all. I think highlighting on runtime fields would 'just work' here (although it'd be worth a test!)", "author": "jtibshirani", "createdAt": "2020-11-20T03:04:33Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java", "diffHunk": "@@ -46,24 +48,17 @@ private HighlightUtils() {\n      * Load field values for highlighting.\n      */\n     public static List<Object> loadFieldValues(MappedFieldType fieldType,\n+                                               QueryShardContext qsc,\n                                                FetchSubPhase.HitContext hitContext,\n-                                               boolean forceSource) throws IOException {\n-        //percolator needs to always load from source, thus it sets the global force source to true\n-        List<Object> textsToHighlight;\n-        if (forceSource == false && fieldType.isStored()) {\n+                                               boolean storedFieldsAvailable) throws IOException {\n+        if (storedFieldsAvailable && fieldType.isStored()) {\n             CustomFieldsVisitor fieldVisitor = new CustomFieldsVisitor(singleton(fieldType.name()), false);\n             hitContext.reader().document(hitContext.docId(), fieldVisitor);\n-            textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n-            if (textsToHighlight == null) {\n-                // Can happen if the document doesn't have the field to highlight\n-                textsToHighlight = Collections.emptyList();\n-            }\n-        } else {\n-            SourceLookup sourceLookup = hitContext.sourceLookup();\n-            textsToHighlight = sourceLookup.extractRawValues(fieldType.name());\n+            List<Object> textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n+            return Objects.requireNonNullElse(textsToHighlight, Collections.emptyList());\n         }\n-        assert textsToHighlight != null;\n-        return textsToHighlight;\n+        ValueFetcher fetcher = fieldType.valueFetcher(qsc, null, null);", "originalCommit": "1c28877ca19adbb799d58139d345b4874df27e4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea506de64a10a5bd3c56c126d4204f166a5d086", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\nindex ffde45b7db6..5e4047d8bee 100644\n--- a/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\n+++ b/server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/HighlightUtils.java\n\n@@ -57,7 +57,7 @@ public final class HighlightUtils {\n             List<Object> textsToHighlight = fieldVisitor.fields().get(fieldType.name());\n             return Objects.requireNonNullElse(textsToHighlight, Collections.emptyList());\n         }\n-        ValueFetcher fetcher = fieldType.valueFetcher(qsc, null, null);\n+        ValueFetcher fetcher = fieldType.valueFetcher(qsc, null);\n         return fetcher.fetchValues(hitContext.sourceLookup());\n     }\n \n"}}, {"oid": "2ea506de64a10a5bd3c56c126d4204f166a5d086", "url": "https://github.com/elastic/elasticsearch/commit/2ea506de64a10a5bd3c56c126d4204f166a5d086", "message": "Merge remote-tracking branch 'origin/master' into highlight/fetcher", "committedDate": "2020-11-23T15:16:01Z", "type": "commit"}, {"oid": "0b3ecee4c4b47cb4529cbae29df4b89dd9473cff", "url": "https://github.com/elastic/elasticsearch/commit/0b3ecee4c4b47cb4529cbae29df4b89dd9473cff", "message": "Call it forceSource again", "committedDate": "2020-11-23T15:20:08Z", "type": "commit"}, {"oid": "70e68809a342eb7531852c24c7935d28359965d6", "url": "https://github.com/elastic/elasticsearch/commit/70e68809a342eb7531852c24c7935d28359965d6", "message": "change test expectation", "committedDate": "2020-11-23T15:41:06Z", "type": "commit"}, {"oid": "dc7585591e0957937d29929f123b36983d002d10", "url": "https://github.com/elastic/elasticsearch/commit/dc7585591e0957937d29929f123b36983d002d10", "message": "Merge remote-tracking branch 'origin/master' into highlight/fetcher", "committedDate": "2020-11-24T13:48:52Z", "type": "commit"}]}