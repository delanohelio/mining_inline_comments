{"pr_number": 66207, "pr_title": "EQL: Optimize string retention", "pr_createdAt": "2020-12-11T17:30:49Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66207", "timeline": [{"oid": "97e40080029ec6f0d192e41e591d377d39567903", "url": "https://github.com/elastic/elasticsearch/commit/97e40080029ec6f0d192e41e591d377d39567903", "message": "EQL: Optimize string retaintion\n\nWhen iterating across search hits, common strings such as the index name\nor common keys get allocated new strings. When dealing with a large\nnumber of potential keys these add up and end up wasting memory though\ntheir content is the same.\nThis commit introduces a simple LRU cache (up to 64 entries) to minimize\nthe duplication.", "committedDate": "2020-12-11T17:24:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NTE1OA==", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r541545158", "bodyText": "You could have used a variable initialized with keys.size() and use that in the Object[] initialization and further down in the for loop.", "author": "astefan", "createdAt": "2020-12-12T09:58:46Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/Criterion.java", "diffHunk": "@@ -52,20 +51,14 @@ public Q queryRequest() {\n         return queryRequest;\n     }\n \n-    public int keySize() {\n-        return keys.size();\n-    }\n-\n-    public SequenceKey key(SearchHit hit) {\n-        SequenceKey key;\n-        if (keys.isEmpty()) {\n-            key = SequenceKey.NONE;\n-        } else {\n+    public Object[] key(SearchHit hit) {\n+        Object[] key = null;\n+        if (keys.isEmpty() == false) {\n             Object[] docKeys = new Object[keys.size()];", "originalCommit": "97e40080029ec6f0d192e41e591d377d39567903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d0baacef81cdd9c349c336e60e15d4c3f99ff65", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/Criterion.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/Criterion.java\nindex 4fc1324bdf7..82ce19abc68 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/Criterion.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/Criterion.java\n\n@@ -53,9 +56,9 @@ public class Criterion<Q extends QueryRequest> {\n \n     public Object[] key(SearchHit hit) {\n         Object[] key = null;\n-        if (keys.isEmpty() == false) {\n-            Object[] docKeys = new Object[keys.size()];\n-            for (int i = 0; i < docKeys.length; i++) {\n+        if (keySize > 0) {\n+            Object[] docKeys = new Object[keySize];\n+            for (int i = 0; i < keySize; i++) {\n                 docKeys[i] = keys.get(i).extract(hit);\n             }\n             key = docKeys;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NTMwNg==", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r541545306", "bodyText": "The PR description mentioned 64.", "author": "astefan", "createdAt": "2020-12-12T09:59:31Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java", "diffHunk": "@@ -47,8 +49,23 @@\n  */\n public class TumblingWindow implements Executable {\n \n+    private static final int CACHE_MAX_SIZE = 63;", "originalCommit": "97e40080029ec6f0d192e41e591d377d39567903", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE3NDQ1OA==", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r542174458", "bodyText": "I wanted to make sure the eviction occurs before the map gets resized. Checking the code it looks like checking the equality on 64 should work.", "author": "costin", "createdAt": "2020-12-14T07:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0NTMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "1d0baacef81cdd9c349c336e60e15d4c3f99ff65", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java\nindex 48b8ccb7a78..c7281368f9b 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java\n\n@@ -49,13 +49,13 @@ import static org.elasticsearch.xpack.eql.execution.search.RuntimeUtils.searchHi\n  */\n public class TumblingWindow implements Executable {\n \n-    private static final int CACHE_MAX_SIZE = 63;\n+    private static final int CACHE_MAX_SIZE = 64;\n \n     private final Logger log = LogManager.getLogger(TumblingWindow.class);\n \n     /**\n      * Simple cache for removing duplicate strings (such as index name or common keys).\n-     * Designed to be low-effort and thus optimistic in nature.\n+     * Designed to be low-effort, non-concurrent (not needed) and thus optimistic in nature.\n      * Thus it has a small, upper limit so that it doesn't require any cleaning up.\n      */\n     // start with the default size and allow growth until the max size\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyNTQ0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r542025443", "bodyText": "Since we have a Cache class in the common lib, which is more complex and supports concurrency, could we have a comment here that concurrency is not needed?", "author": "matriv", "createdAt": "2020-12-13T22:57:27Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java", "diffHunk": "@@ -47,8 +49,23 @@\n  */\n public class TumblingWindow implements Executable {\n \n+    private static final int CACHE_MAX_SIZE = 63;\n+\n     private final Logger log = LogManager.getLogger(TumblingWindow.class);\n \n+    /**\n+     * Simple cache for removing duplicate strings (such as index name or common keys).\n+     * Designed to be low-effort and thus optimistic in nature.\n+     * Thus it has a small, upper limit so that it doesn't require any cleaning up.", "originalCommit": "97e40080029ec6f0d192e41e591d377d39567903", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d0baacef81cdd9c349c336e60e15d4c3f99ff65", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java\nindex 48b8ccb7a78..c7281368f9b 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java\n\n@@ -49,13 +49,13 @@ import static org.elasticsearch.xpack.eql.execution.search.RuntimeUtils.searchHi\n  */\n public class TumblingWindow implements Executable {\n \n-    private static final int CACHE_MAX_SIZE = 63;\n+    private static final int CACHE_MAX_SIZE = 64;\n \n     private final Logger log = LogManager.getLogger(TumblingWindow.class);\n \n     /**\n      * Simple cache for removing duplicate strings (such as index name or common keys).\n-     * Designed to be low-effort and thus optimistic in nature.\n+     * Designed to be low-effort, non-concurrent (not needed) and thus optimistic in nature.\n      * Thus it has a small, upper limit so that it doesn't require any cleaning up.\n      */\n     // start with the default size and allow growth until the max size\n"}}, {"oid": "1d0baacef81cdd9c349c336e60e15d4c3f99ff65", "url": "https://github.com/elastic/elasticsearch/commit/1d0baacef81cdd9c349c336e60e15d4c3f99ff65", "message": "Address feedback", "committedDate": "2020-12-14T07:50:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4ODY3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66207#discussion_r542488676", "bodyText": "One things to consider: Start with the CACHE_MAX_SIZE instead of the default size (16). The HashMap will have to grow anyways, unless you think that the chances of having <= 32 different strings are high.", "author": "palesz", "createdAt": "2020-12-14T15:46:28Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java", "diffHunk": "@@ -47,8 +49,23 @@\n  */\n public class TumblingWindow implements Executable {\n \n+    private static final int CACHE_MAX_SIZE = 64;\n+\n     private final Logger log = LogManager.getLogger(TumblingWindow.class);\n \n+    /**\n+     * Simple cache for removing duplicate strings (such as index name or common keys).\n+     * Designed to be low-effort, non-concurrent (not needed) and thus optimistic in nature.\n+     * Thus it has a small, upper limit so that it doesn't require any cleaning up.\n+     */\n+    // start with the default size and allow growth until the max size\n+    private final Map<String, String> stringCache = new LinkedHashMap<>(16, 0.75f, true) {", "originalCommit": "1d0baacef81cdd9c349c336e60e15d4c3f99ff65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}