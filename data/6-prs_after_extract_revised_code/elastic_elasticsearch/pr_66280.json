{"pr_number": 66280, "pr_title": "Fix handling of search shard failures in the coordinating node", "pr_createdAt": "2020-12-14T17:54:23Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66280", "timeline": [{"oid": "9ffd623ec49d5364aa938ca3d2c65dab88b4a7a5", "url": "https://github.com/elastic/elasticsearch/commit/9ffd623ec49d5364aa938ca3d2c65dab88b4a7a5", "message": "Fix handling of search shard failures in the coordinating node\n\nThis commit ensures that we catch exceptions that happens when the coordinating\nnode consumes a shard response. Such failures can happen if we need to compute\nthe serialized size of an aggregation that was computed locally and the serialization\nfails. In such case, we now return a shard error rather than an uncaught NPE for the entire\nsearch.", "committedDate": "2020-12-14T17:53:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MTAzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66280#discussion_r545771031", "bodyText": "Is it needed both conditions? I would expect that if reducePhase.aggregations is not null, then hasAggs is always true?", "author": "iverase", "createdAt": "2020-12-18T11:26:28Z", "path": "server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java", "diffHunk": "@@ -140,7 +140,7 @@ public void consumeResult(SearchPhaseResult result, Runnable next) {\n         }\n         SearchPhaseController.ReducedQueryPhase reducePhase = controller.reducedQueryPhase(results.asList(), aggsList,\n             topDocsList, topDocsStats, pendingMerges.numReducePhases, false, aggReduceContextBuilder, performFinalReduce);\n-        if (hasAggs) {\n+        if (hasAggs && reducePhase.aggregations != null) {", "originalCommit": "9ffd623ec49d5364aa938ca3d2c65dab88b4a7a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3NDE1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66280#discussion_r545774155", "bodyText": "I added a comment in baabbbd, it can be null if all shards failed.", "author": "jimczi", "createdAt": "2020-12-18T11:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MTAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "baabbbd38f395b7ca6adacd590a5475db647f168", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java b/server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java\nindex 983e88c9b2f1..d591af5219cd 100644\n--- a/server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java\n+++ b/server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java\n\n@@ -140,7 +140,10 @@ public class QueryPhaseResultConsumer extends ArraySearchPhaseResults<SearchPhas\n         }\n         SearchPhaseController.ReducedQueryPhase reducePhase = controller.reducedQueryPhase(results.asList(), aggsList,\n             topDocsList, topDocsStats, pendingMerges.numReducePhases, false, aggReduceContextBuilder, performFinalReduce);\n-        if (hasAggs && reducePhase.aggregations != null) {\n+        if (hasAggs\n+                // reduced aggregations can be null if all shards failed\n+                && reducePhase.aggregations != null) {\n+\n             // Update the circuit breaker to replace the estimation with the serialized size of the newly reduced result\n             long finalSize = reducePhase.aggregations.getSerializedSize() - breakerSize;\n             pendingMerges.addWithoutBreaking(finalSize);\n"}}, {"oid": "baabbbd38f395b7ca6adacd590a5475db647f168", "url": "https://github.com/elastic/elasticsearch/commit/baabbbd38f395b7ca6adacd590a5475db647f168", "message": "add comment", "committedDate": "2020-12-18T11:32:38Z", "type": "commit"}, {"oid": "d465d3bfb8d860f1234d2595c8ef9d0376135961", "url": "https://github.com/elastic/elasticsearch/commit/d465d3bfb8d860f1234d2595c8ef9d0376135961", "message": "Merge branch 'master' into shard_consumer_failure", "committedDate": "2020-12-18T12:13:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMzU5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66280#discussion_r545823599", "bodyText": "I find this change hard to follow, I am sure I am missing something. Why do we need the conditional compared to before? And why do we call asSerialized when the aggregation is already serialized?", "author": "javanna", "createdAt": "2020-12-18T13:15:28Z", "path": "server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java", "diffHunk": "@@ -290,9 +293,13 @@ long ramBytesUsedQueryResult(QuerySearchResult result) {\n             if (hasAggs == false) {\n                 return 0;\n             }\n-            return result.aggregations()\n-                .asSerialized(InternalAggregations::readFrom, namedWriteableRegistry)\n-                .ramBytesUsed();\n+            if (result.aggregations().isSerialized()) {\n+                return result.aggregations()\n+                    .asSerialized(InternalAggregations::readFrom, namedWriteableRegistry)\n+                    .ramBytesUsed();\n+            } else {\n+                return result.aggregations().expand().getSerializedSize();\n+            }", "originalCommit": "d465d3bfb8d860f1234d2595c8ef9d0376135961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNzM1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66280#discussion_r545837357", "bodyText": "This is just to avoid serializing on a real buffer since we don't need to keep the result if the aggregations is already expanded. However I agree that it can be confusing so I pushed c867307 to address your concerns. Does it look better ?", "author": "jimczi", "createdAt": "2020-12-18T13:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMzU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzMjIxMg==", "url": "https://github.com/elastic/elasticsearch/pull/66280#discussion_r546032212", "bodyText": "yea much better thanks", "author": "javanna", "createdAt": "2020-12-18T19:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMzU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8673076f2de921f4799de19de3e82d2c83e0149", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java b/server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java\nindex d591af5219cd..07c85004cf56 100644\n--- a/server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java\n+++ b/server/src/main/java/org/elasticsearch/action/search/QueryPhaseResultConsumer.java\n\n@@ -290,16 +291,7 @@ public class QueryPhaseResultConsumer extends ArraySearchPhaseResults<SearchPhas\n          * provided {@link QuerySearchResult}.\n          */\n         long ramBytesUsedQueryResult(QuerySearchResult result) {\n-            if (hasAggs == false) {\n-                return 0;\n-            }\n-            if (result.aggregations().isSerialized()) {\n-                return result.aggregations()\n-                    .asSerialized(InternalAggregations::readFrom, namedWriteableRegistry)\n-                    .ramBytesUsed();\n-            } else {\n-                return result.aggregations().expand().getSerializedSize();\n-            }\n+            return hasAggs ? result.aggregations().getSerializedSize() : 0;\n         }\n \n         /**\n"}}, {"oid": "c8673076f2de921f4799de19de3e82d2c83e0149", "url": "https://github.com/elastic/elasticsearch/commit/c8673076f2de921f4799de19de3e82d2c83e0149", "message": "cleanup serialized size", "committedDate": "2020-12-18T13:40:02Z", "type": "commit"}, {"oid": "41dcd84613ad1178e76996fa33de2493ad8530fb", "url": "https://github.com/elastic/elasticsearch/commit/41dcd84613ad1178e76996fa33de2493ad8530fb", "message": "Merge branch 'master' into shard_consumer_failure", "committedDate": "2020-12-18T14:51:25Z", "type": "commit"}]}