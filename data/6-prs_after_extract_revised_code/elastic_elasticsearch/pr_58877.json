{"pr_number": 58877, "pr_title": "[ML] Perform test inference on java", "pr_createdAt": "2020-07-01T20:22:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58877", "timeline": [{"oid": "4f4fefab19011cb2dc227ba11f02e7d4ff24cff3", "url": "https://github.com/elastic/elasticsearch/commit/4f4fefab19011cb2dc227ba11f02e7d4ff24cff3", "message": "[ML] Perform test inference in java\n\nSince we are able to load the inference model\nand perform inference in java, we no longer need\nto rely on the analytics process to be performing\ntest inference on the docs that were not used for\ntraining. The benefit is that we do not need to\nsend test docs and fit them in memory of the c++\nprocess.", "committedDate": "2020-06-29T18:00:19Z", "type": "commit"}, {"oid": "cabd9a2cebd196247e8ab3dd9ee390a78ea169f2", "url": "https://github.com/elastic/elasticsearch/commit/cabd9a2cebd196247e8ab3dd9ee390a78ea169f2", "message": "Unit tests for inference runner", "committedDate": "2020-06-29T18:02:10Z", "type": "commit"}, {"oid": "b94b1e4889a27830777f7230d08c37a9cca64171", "url": "https://github.com/elastic/elasticsearch/commit/b94b1e4889a27830777f7230d08c37a9cca64171", "message": "Stop sending test data to c++", "committedDate": "2020-06-29T18:02:10Z", "type": "commit"}, {"oid": "45c18768bcfe0c444ffa09d95e744371123b4390", "url": "https://github.com/elastic/elasticsearch/commit/45c18768bcfe0c444ffa09d95e744371123b4390", "message": "Remove unused import", "committedDate": "2020-06-29T18:11:37Z", "type": "commit"}, {"oid": "a784d92fc1a859e8ce688238e0dd88962345b126", "url": "https://github.com/elastic/elasticsearch/commit/a784d92fc1a859e8ce688238e0dd88962345b126", "message": "Merge remote-tracking branch 'upstream/master' into HEAD", "committedDate": "2020-07-01T18:11:42Z", "type": "commit"}, {"oid": "e8ebd51acd8638fc2eb72be5820a2e4a0b3c0b87", "url": "https://github.com/elastic/elasticsearch/commit/e8ebd51acd8638fc2eb72be5820a2e4a0b3c0b87", "message": "post merge adjustments", "committedDate": "2020-07-01T18:11:59Z", "type": "commit"}, {"oid": "c9fb8ae217fd8bc6287095b67041c86d5ed3f9ea", "url": "https://github.com/elastic/elasticsearch/commit/c9fb8ae217fd8bc6287095b67041c86d5ed3f9ea", "message": "adding tests, fixing minor issues", "committedDate": "2020-07-01T20:07:08Z", "type": "commit"}, {"oid": "d84aa88e52d6704b6789523fd3a2547c37646eeb", "url": "https://github.com/elastic/elasticsearch/commit/d84aa88e52d6704b6789523fd3a2547c37646eeb", "message": "fixing test", "committedDate": "2020-07-02T11:01:05Z", "type": "commit"}, {"oid": "b237db24c29370f356aad09fd551d8bc6368925c", "url": "https://github.com/elastic/elasticsearch/commit/b237db24c29370f356aad09fd551d8bc6368925c", "message": "Merge branch 'master' into feature/perform-test-inference-on-java", "committedDate": "2020-07-02T18:47:37Z", "type": "commit"}, {"oid": "36a9e17d8ad5374e1f9e0fd73360b3e90b9de752", "url": "https://github.com/elastic/elasticsearch/commit/36a9e17d8ad5374e1f9e0fd73360b3e90b9de752", "message": "Rename to testRun", "committedDate": "2020-07-07T15:36:09Z", "type": "commit"}, {"oid": "d77048bdacdd327e4a730e1b353de15762ab477f", "url": "https://github.com/elastic/elasticsearch/commit/d77048bdacdd327e4a730e1b353de15762ab477f", "message": "Add test for cancelling inference runner", "committedDate": "2020-07-07T15:46:33Z", "type": "commit"}, {"oid": "a10a46c9949c0532fde947a2f8103398b9811991", "url": "https://github.com/elastic/elasticsearch/commit/a10a46c9949c0532fde947a2f8103398b9811991", "message": "Add tests for progress with or without inference", "committedDate": "2020-07-07T15:53:41Z", "type": "commit"}, {"oid": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "url": "https://github.com/elastic/elasticsearch/commit/e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "message": "Merge branch 'master' into feature/perform-test-inference-on-java", "committedDate": "2020-07-07T16:29:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1NDI4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451354286", "bodyText": "Why is this set to true for RegressionEvaluationIT but false for ClassificationEvaluationIT?", "author": "przemekwitek", "createdAt": "2020-07-08T07:57:40Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/RegressionEvaluationIT.java", "diffHunk": "@@ -148,4 +148,9 @@ private static void indexHousesData(String indexName) {\n             fail(\"Failed to index data: \" + bulkResponse.buildFailureMessage());\n         }\n     }\n+\n+    @Override\n+    boolean supportsInference() {\n+        return true;", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1ODMyMA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451358320", "bodyText": "[nit] You can drop the parentheses here", "author": "przemekwitek", "createdAt": "2020-07-08T08:04:31Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/CrossValidationSplitterFactory.java", "diffHunk": "@@ -47,7 +47,7 @@ public CrossValidationSplitter create() {\n         if (config.getAnalysis() instanceof Classification) {\n             return createStratifiedSplitter((Classification) config.getAnalysis());\n         }\n-        return (row, incrementTrainingDocs, incrementTestDocs) -> incrementTrainingDocs.run();\n+        return (row) -> true;", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/CrossValidationSplitterFactory.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/CrossValidationSplitterFactory.java\nindex c1dc1418425..3408a642804 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/CrossValidationSplitterFactory.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/CrossValidationSplitterFactory.java\n\n@@ -47,7 +47,7 @@ public class CrossValidationSplitterFactory {\n         if (config.getAnalysis() instanceof Classification) {\n             return createStratifiedSplitter((Classification) config.getAnalysis());\n         }\n-        return (row) -> true;\n+        return row -> true;\n     }\n \n     private CrossValidationSplitter createSingleClassSplitter(Regression regression) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3ODE5OA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451378198", "bodyText": "IMO the logic would be simpler (less comparisons with false) if this method was negated.", "author": "przemekwitek", "createdAt": "2020-07-08T08:37:55Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java", "diffHunk": "@@ -162,17 +162,21 @@ public boolean hasNext() {\n         @Override\n         public DataFrameDataExtractor.Row next() {\n             DataFrameDataExtractor.Row row = null;\n-            while ((row == null || row.shouldSkip()) && hasNext()) {\n+            while (shouldHaveMatch(row) == false && hasNext()) {\n                 advanceToNextBatchIfNecessary();\n                 row = currentDataFrameRows.get(currentDataFrameRowsIndex++);\n             }\n \n-            if (row == null || row.shouldSkip()) {\n+            if (shouldHaveMatch(row) == false) {\n                 throw ExceptionsHelper.serverError(\"no more data frame rows could be found while joining results\");\n             }\n             return row;\n         }\n \n+        private boolean shouldHaveMatch(DataFrameDataExtractor.Row row) {", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java\nindex 5c62540fc4d..8ec023ec573 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoiner.java\n\n@@ -162,19 +162,19 @@ class DataFrameRowsJoiner implements AutoCloseable {\n         @Override\n         public DataFrameDataExtractor.Row next() {\n             DataFrameDataExtractor.Row row = null;\n-            while (shouldHaveMatch(row) == false && hasNext()) {\n+            while (hasNoMatch(row) && hasNext()) {\n                 advanceToNextBatchIfNecessary();\n                 row = currentDataFrameRows.get(currentDataFrameRowsIndex++);\n             }\n \n-            if (shouldHaveMatch(row) == false) {\n+            if (hasNoMatch(row)) {\n                 throw ExceptionsHelper.serverError(\"no more data frame rows could be found while joining results\");\n             }\n             return row;\n         }\n \n-        private boolean shouldHaveMatch(DataFrameDataExtractor.Row row) {\n-            return row != null && row.shouldSkip() == false && row.isTraining();\n+        private boolean hasNoMatch(DataFrameDataExtractor.Row row) {\n+            return row == null || row.shouldSkip() || row.isTraining() == false;\n         }\n \n         private void advanceToNextBatchIfNecessary() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3OTYwMA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451379600", "bodyText": "I think there is no need to mix List.of and Arrays.asList here. Could you choose one of them (probably Arrays.asList as the code below suggests you want to make it backportable to 7.x)?", "author": "przemekwitek", "createdAt": "2020-07-08T08:40:15Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java", "diffHunk": "@@ -188,12 +188,72 @@ public void testProcess_GivenTwoBatchesWhereFirstEndsWithSkippedRow() throws IOE\n         assertThat(indexedDocSource.get(\"b\"), equalTo(\"2\"));\n     }\n \n+    public void testProcess_GivenSingleBatchWithTestRows() throws IOException {\n+        givenClientHasNoFailures();\n+\n+        String dataDoc = \"{\\\"f_1\\\": \\\"foo\\\", \\\"f_2\\\": 42.0}\";\n+        String[] dataValues = {\"42.0\"};\n+        DataFrameDataExtractor.Row testRow = newTestRow(newHit(dataDoc), dataValues, 1);\n+        DataFrameDataExtractor.Row normalRow = newTrainingRow(newHit(dataDoc), dataValues, 2);\n+        givenDataFrameBatches(List.of(Arrays.asList(testRow, normalRow)));", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java\nindex 3917865ac08..d93849af04a 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/DataFrameRowsJoinerTests.java\n\n@@ -195,7 +195,7 @@ public class DataFrameRowsJoinerTests extends ESTestCase {\n         String[] dataValues = {\"42.0\"};\n         DataFrameDataExtractor.Row testRow = newTestRow(newHit(dataDoc), dataValues, 1);\n         DataFrameDataExtractor.Row normalRow = newTrainingRow(newHit(dataDoc), dataValues, 2);\n-        givenDataFrameBatches(List.of(Arrays.asList(testRow, normalRow)));\n+        givenDataFrameBatches(Arrays.asList(Arrays.asList(testRow, normalRow)));\n \n         Map<String, Object> resultFields = new HashMap<>();\n         resultFields.put(\"a\", \"1\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MzA3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451383076", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean istraining = crossValidationSplitter.isTraining(processedRow);\n          \n          \n            \n                            boolean isTraining = crossValidationSplitter.isTraining(processedRow);", "author": "przemekwitek", "createdAt": "2020-07-08T08:45:42Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/StratifiedCrossValidationSplitterTests.java", "diffHunk": "@@ -211,9 +199,10 @@ public void testProcess_SelectsTrainingRowsUniformly() {\n                 }\n \n                 String[] processedRow = Arrays.copyOf(row, row.length);\n-                crossValidationSplitter.process(processedRow, this::incrementTrainingDocsCount, this::incrementTestDocsCount);\n+                boolean istraining = crossValidationSplitter.isTraining(processedRow);", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/StratifiedCrossValidationSplitterTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/StratifiedCrossValidationSplitterTests.java\nindex 1e9971fc041..ad26fd7190c 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/StratifiedCrossValidationSplitterTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/crossvalidation/StratifiedCrossValidationSplitterTests.java\n\n@@ -199,10 +199,10 @@ public class StratifiedCrossValidationSplitterTests extends ESTestCase {\n                 }\n \n                 String[] processedRow = Arrays.copyOf(row, row.length);\n-                boolean istraining = crossValidationSplitter.isTraining(processedRow);\n+                boolean isTraining = crossValidationSplitter.isTraining(processedRow);\n                 assertThat(Arrays.equals(processedRow, row), is(true));\n \n-                if (istraining) {\n+                if (isTraining) {\n                     trainingCountPerRow[i]++;\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4Mzk4MA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451383980", "bodyText": "I think current and latest mean the same thing here.\nCould you use the same word for method name and variable name?", "author": "przemekwitek", "createdAt": "2020-07-08T08:47:11Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java", "diffHunk": "@@ -190,4 +191,9 @@ private void processMemoryUsage(MemoryUsage memoryUsage) {\n         statsHolder.setMemoryUsage(memoryUsage);\n         statsPersister.persistWithRetry(memoryUsage, memoryUsage::documentId);\n     }\n+\n+    @Nullable\n+    public String getLatestModelId() {", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java\nindex 70c82882bd2..32af30a93da 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/AnalyticsResultProcessor.java\n\n@@ -194,6 +194,6 @@ public class AnalyticsResultProcessor {\n \n     @Nullable\n     public String getLatestModelId() {\n-        return currentModelId;\n+        return latestModelId;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NzEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451387102", "bodyText": "Why is it 98 rather than 99?", "author": "przemekwitek", "createdAt": "2020-07-08T08:52:12Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.dataframe.inference;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.tasks.TaskId;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+import org.elasticsearch.xpack.ml.dataframe.DestinationIndex;\n+import org.elasticsearch.xpack.ml.dataframe.stats.DataCountsTracker;\n+import org.elasticsearch.xpack.ml.dataframe.stats.ProgressTracker;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.LocalModel;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.ModelLoadingService;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InferenceRunner {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(InferenceRunner.class);\n+\n+    private static final int MAX_PROGRESS_BEFORE_COMPLETION = 98;", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5ef3c19efa6891f2b5f4e229a07fb3de4bed56f", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\nindex ac661b21263..5322484db60 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\n\n@@ -70,14 +70,13 @@ public class InferenceRunner {\n             return;\n         }\n \n-        LOGGER.info(\"[{}] Running inference on model [{}]\", config.getId(), modelId);\n+        LOGGER.info(\"[{}] Started inference on test data against model [{}]\", config.getId(), modelId);\n         try {\n             PlainActionFuture<LocalModel> localModelPlainActionFuture = new PlainActionFuture<>();\n             modelLoadingService.getModelForSearch(modelId, localModelPlainActionFuture);\n             LocalModel localModel = localModelPlainActionFuture.actionGet();\n             TestDocsIterator testDocsIterator = new TestDocsIterator(new OriginSettingClient(client, ClientHelper.ML_ORIGIN), config);\n             inferTestDocs(localModel, testDocsIterator);\n-            LOGGER.info(\"[{}] Inference finished\", config.getId());\n         } catch (Exception e) {\n             throw ExceptionsHelper.serverError(\"[{}] failed running inference on model [{}]\", e, config.getId(), modelId);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4ODEyMg==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451388122", "bodyText": "Suggested change", "author": "przemekwitek", "createdAt": "2020-07-08T08:53:48Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunnerTests.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.dataframe.inference;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.tasks.TaskId;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsDest;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsSource;\n+import org.elasticsearch.xpack.core.ml.dataframe.analyses.RegressionTests;\n+import org.elasticsearch.xpack.core.ml.inference.results.ClassificationInferenceResults;\n+import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n+import org.elasticsearch.xpack.core.ml.inference.trainedmodel.ClassificationConfig;\n+import org.elasticsearch.xpack.core.ml.inference.trainedmodel.InferenceConfig;\n+import org.elasticsearch.xpack.ml.dataframe.stats.DataCountsTracker;\n+import org.elasticsearch.xpack.ml.dataframe.stats.ProgressTracker;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.LocalModel;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.ModelLoadingService;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+import org.junit.Before;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class InferenceRunnerTests extends ESTestCase {\n+\n+    private Client client;\n+    private ResultsPersisterService resultsPersisterService;\n+    private ModelLoadingService modelLoadingService;\n+    private DataFrameAnalyticsConfig config;\n+    private ProgressTracker progressTracker;\n+    private TaskId parentTaskId;\n+\n+    @Before\n+    public void setupTests() {\n+        client = mock(Client.class);\n+        resultsPersisterService = mock(ResultsPersisterService.class);\n+        config = new DataFrameAnalyticsConfig.Builder()\n+            .setId(\"test\")\n+            .setAnalysis(RegressionTests.createRandom())\n+            .setSource(new DataFrameAnalyticsSource(new String[] {\"source_index\"}, null, null))\n+            .setDest(new DataFrameAnalyticsDest(\"dest_index\", \"test_results_field\"))\n+            .build();\n+        progressTracker = ProgressTracker.fromZeroes(config.getAnalysis().getProgressPhases(), config.getAnalysis().supportsInference());\n+        parentTaskId = new TaskId(randomAlphaOfLength(10), randomLong());\n+        modelLoadingService = mock(ModelLoadingService.class);\n+    }\n+\n+    public void testInferTestDocs() {\n+        Map<String, Object> doc1 = new HashMap<>();\n+        doc1.put(\"key\", 1);\n+        Map<String, Object> doc2 = new HashMap<>();\n+        doc2.put(\"key\", 2);\n+        TestDocsIterator testDocsIterator = mock(TestDocsIterator.class);\n+        when(testDocsIterator.hasNext()).thenReturn(true, false);\n+        when(testDocsIterator.next()).thenReturn(buildSearchHits(Arrays.asList(doc1, doc2)));\n+        when(testDocsIterator.getTotalHits()).thenReturn(2L);\n+        InferenceConfig config = ClassificationConfig.EMPTY_PARAMS;\n+\n+        LocalModel localModel = localModelInferences(new ClassificationInferenceResults(1.0,\n+        \"foo\",\n+            Collections.emptyList(),\n+            config),\n+            new ClassificationInferenceResults(0.0,\n+                \"bar\",\n+                Collections.emptyList(),\n+                config));\n+\n+        InferenceRunner inferenceRunner = createInferenceRunner();\n+\n+        inferenceRunner.inferTestDocs(localModel, testDocsIterator);\n+\n+        ArgumentCaptor<BulkRequest> argumentCaptor = ArgumentCaptor.forClass(BulkRequest.class);\n+\n+        verify(resultsPersisterService).bulkIndexWithHeadersWithRetry(any(), argumentCaptor.capture(), any(), any(), any());\n+        assertThat(progressTracker.getInferenceProgressPercent(), equalTo(100));\n+\n+        BulkRequest bulkRequest = argumentCaptor.getAllValues().get(0);\n+        List<DocWriteRequest<?>> indexRequests = bulkRequest.requests();\n+        Map<String, Object> doc1Source = ((IndexRequest)indexRequests.get(0)).sourceAsMap();\n+        Map<String, Object> doc2Source = ((IndexRequest)indexRequests.get(1)).sourceAsMap();\n+\n+        assertThat(doc1Source.get(\"test_results_field\"),\n+            equalTo(new HashMap<>(){{\n+                put(\"predicted_value\", \"foo\");\n+                put(\"is_training\", false);\n+        }}));\n+        assertThat(doc2Source.get(\"test_results_field\"),\n+            equalTo(new HashMap<>(){{\n+                put(\"predicted_value\", \"bar\");\n+                put(\"is_training\", false);\n+            }}));\n+    }\n+\n+    public void testInferTestDocs_GivenCancelWasCalled() {\n+\n+        LocalModel localModel = mock(LocalModel.class);\n+\n+        TestDocsIterator infiniteDocsIterator = mock(TestDocsIterator.class);\n+        when(infiniteDocsIterator.hasNext()).thenReturn(true);\n+\n+        InferenceRunner inferenceRunner = createInferenceRunner();\n+        inferenceRunner.cancel();\n+\n+        inferenceRunner.inferTestDocs(localModel, infiniteDocsIterator);\n+", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunnerTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunnerTests.java\nindex d1bf41504ba..9c955851e33 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunnerTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunnerTests.java\n\n@@ -132,7 +132,6 @@ public class InferenceRunnerTests extends ESTestCase {\n \n         inferenceRunner.inferTestDocs(localModel, infiniteDocsIterator);\n \n-\n         Mockito.verifyNoMoreInteractions(localModel, resultsPersisterService);\n         assertThat(progressTracker.getInferenceProgressPercent(), equalTo(0));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MDI5OA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451390298", "bodyText": "Please make it final.", "author": "przemekwitek", "createdAt": "2020-07-08T08:57:02Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/SearchAfterDocumentsIterator.java", "diffHunk": "@@ -44,12 +46,19 @@\n \n     private final OriginSettingClient client;\n     private final String index;\n+    private final boolean trackTotalHits;\n+    private AtomicLong totalHits = new AtomicLong();", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/SearchAfterDocumentsIterator.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/SearchAfterDocumentsIterator.java\nindex 10ca6b34f72..e15dc0ccbac 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/SearchAfterDocumentsIterator.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/SearchAfterDocumentsIterator.java\n\n@@ -47,7 +47,7 @@ public abstract class SearchAfterDocumentsIterator<T> implements BatchedIterator\n     private final OriginSettingClient client;\n     private final String index;\n     private final boolean trackTotalHits;\n-    private AtomicLong totalHits = new AtomicLong();\n+    private final AtomicLong totalHits = new AtomicLong();\n     private final AtomicBoolean lastSearchReturnedResults;\n     private int batchSize = BATCH_SIZE;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NDIyNA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451384224", "bodyText": "nit: this is a very generic message can we be more precise. Is this testing?", "author": "davidkyle", "createdAt": "2020-07-08T08:47:33Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.dataframe.inference;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.tasks.TaskId;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+import org.elasticsearch.xpack.ml.dataframe.DestinationIndex;\n+import org.elasticsearch.xpack.ml.dataframe.stats.DataCountsTracker;\n+import org.elasticsearch.xpack.ml.dataframe.stats.ProgressTracker;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.LocalModel;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.ModelLoadingService;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InferenceRunner {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(InferenceRunner.class);\n+\n+    private static final int MAX_PROGRESS_BEFORE_COMPLETION = 98;\n+    private static final int RESULTS_BATCH_SIZE = 1000;\n+\n+    private final Client client;\n+    private final ModelLoadingService modelLoadingService;\n+    private final ResultsPersisterService resultsPersisterService;\n+    private final TaskId parentTaskId;\n+    private final DataFrameAnalyticsConfig config;\n+    private final ProgressTracker progressTracker;\n+    private final DataCountsTracker dataCountsTracker;\n+    private volatile boolean isCancelled;\n+\n+    public InferenceRunner(Client client, ModelLoadingService modelLoadingService, ResultsPersisterService resultsPersisterService,\n+                           TaskId parentTaskId, DataFrameAnalyticsConfig config, ProgressTracker progressTracker,\n+                           DataCountsTracker dataCountsTracker) {\n+        this.client = Objects.requireNonNull(client);\n+        this.modelLoadingService = Objects.requireNonNull(modelLoadingService);\n+        this.resultsPersisterService = Objects.requireNonNull(resultsPersisterService);\n+        this.parentTaskId = Objects.requireNonNull(parentTaskId);\n+        this.config = Objects.requireNonNull(config);\n+        this.progressTracker = Objects.requireNonNull(progressTracker);\n+        this.dataCountsTracker = Objects.requireNonNull(dataCountsTracker);\n+    }\n+\n+    public void cancel() {\n+        isCancelled = true;\n+    }\n+\n+    public void run(String modelId) {\n+        if (isCancelled) {\n+            return;\n+        }\n+\n+        LOGGER.info(\"[{}] Running inference on model [{}]\", config.getId(), modelId);", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2Mzk2MA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451663960", "bodyText": "I have reworded this one and removed the \"finished\" one.", "author": "dimitris-athanasiou", "createdAt": "2020-07-08T16:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NDIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "e5ef3c19efa6891f2b5f4e229a07fb3de4bed56f", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\nindex ac661b21263..5322484db60 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\n\n@@ -70,14 +70,13 @@ public class InferenceRunner {\n             return;\n         }\n \n-        LOGGER.info(\"[{}] Running inference on model [{}]\", config.getId(), modelId);\n+        LOGGER.info(\"[{}] Started inference on test data against model [{}]\", config.getId(), modelId);\n         try {\n             PlainActionFuture<LocalModel> localModelPlainActionFuture = new PlainActionFuture<>();\n             modelLoadingService.getModelForSearch(modelId, localModelPlainActionFuture);\n             LocalModel localModel = localModelPlainActionFuture.actionGet();\n             TestDocsIterator testDocsIterator = new TestDocsIterator(new OriginSettingClient(client, ClientHelper.ML_ORIGIN), config);\n             inferTestDocs(localModel, testDocsIterator);\n-            LOGGER.info(\"[{}] Inference finished\", config.getId());\n         } catch (Exception e) {\n             throw ExceptionsHelper.serverError(\"[{}] failed running inference on model [{}]\", e, config.getId(), modelId);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4ODY2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451388663", "bodyText": "I'm pleased you've implemented the progress meter gets to fixed number then stalls for ages feature", "author": "davidkyle", "createdAt": "2020-07-08T08:54:36Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ml.dataframe.inference;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.DocWriteRequest;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.PlainActionFuture;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.OriginSettingClient;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.tasks.TaskId;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;\n+import org.elasticsearch.xpack.core.ml.inference.results.InferenceResults;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+import org.elasticsearch.xpack.ml.dataframe.DestinationIndex;\n+import org.elasticsearch.xpack.ml.dataframe.stats.DataCountsTracker;\n+import org.elasticsearch.xpack.ml.dataframe.stats.ProgressTracker;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.LocalModel;\n+import org.elasticsearch.xpack.ml.inference.loadingservice.ModelLoadingService;\n+import org.elasticsearch.xpack.ml.utils.persistence.ResultsPersisterService;\n+\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class InferenceRunner {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(InferenceRunner.class);\n+\n+    private static final int MAX_PROGRESS_BEFORE_COMPLETION = 98;", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4MzAzMA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451483030", "bodyText": "Hehe! It's not what it looks like!\n@przemekwitek This answer should also cover your question about the magic 98.\nSo, this is a fairly linear progress here. We go through the test docs, infer, and bulk index when we have a batch. The only reason we want to hold the progress from going 100, is that after we infer the last doc there's still a bulk index action pending and we don't want to appear completed before that.\nWhy 98 instead of 99, just to make room for a slow bulk index. :-)", "author": "dimitris-athanasiou", "createdAt": "2020-07-08T11:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4ODY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwODA5OA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451508098", "bodyText": "Can we make it 97.5 instead", "author": "benwtrent", "createdAt": "2020-07-08T12:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4ODY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e5ef3c19efa6891f2b5f4e229a07fb3de4bed56f", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\nindex ac661b21263..5322484db60 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/inference/InferenceRunner.java\n\n@@ -70,14 +70,13 @@ public class InferenceRunner {\n             return;\n         }\n \n-        LOGGER.info(\"[{}] Running inference on model [{}]\", config.getId(), modelId);\n+        LOGGER.info(\"[{}] Started inference on test data against model [{}]\", config.getId(), modelId);\n         try {\n             PlainActionFuture<LocalModel> localModelPlainActionFuture = new PlainActionFuture<>();\n             modelLoadingService.getModelForSearch(modelId, localModelPlainActionFuture);\n             LocalModel localModel = localModelPlainActionFuture.actionGet();\n             TestDocsIterator testDocsIterator = new TestDocsIterator(new OriginSettingClient(client, ClientHelper.ML_ORIGIN), config);\n             inferTestDocs(localModel, testDocsIterator);\n-            LOGGER.info(\"[{}] Inference finished\", config.getId());\n         } catch (Exception e) {\n             throw ExceptionsHelper.serverError(\"[{}] failed running inference on model [{}]\", e, config.getId(), modelId);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1MDY2OA==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451450668", "bodyText": "Looks like a partial refactoring, a public method should not be called internalX.\nThis does not update the stats fields as infer() does is that intentional?", "author": "davidkyle", "createdAt": "2020-07-08T10:45:56Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java", "diffHunk": "@@ -80,6 +80,15 @@ void persistStats(boolean flush) {\n         }\n     }\n \n+    public InferenceResults internalInfer(Map<String, Object> fields) {", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4MzU1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451483552", "bodyText": "I agree. I'll rename this to inferNoStats. Indeed, we intentionally don't want to account stats here as it's not an explicit user action but rather the implicit consequence of running the job that trains the model in the first place.", "author": "dimitris-athanasiou", "createdAt": "2020-07-08T11:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1MDY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e5ef3c19efa6891f2b5f4e229a07fb3de4bed56f", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java\nindex 17767212057..88e92dfa929 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java\n\n@@ -80,7 +80,12 @@ public class LocalModel {\n         }\n     }\n \n-    public InferenceResults internalInfer(Map<String, Object> fields) {\n+    /**\n+     * Infers without updating the stats.\n+     * This is mainly for usage by data frame analytics jobs\n+     * when they do inference against test data.\n+     */\n+    public InferenceResults inferNoStats(Map<String, Object> fields) {\n         LocalModel.mapFieldsIfNecessary(fields, defaultFieldMap);\n         Map<String, Object> flattenedFields = MapHelper.dotCollapse(fields, fieldNames);\n         if (flattenedFields.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NTA3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451455076", "bodyText": "Whats the behaviour here if the documents in the index change between batches e.g. if more are added or removed? Will the value getTotalHits() change?", "author": "davidkyle", "createdAt": "2020-07-08T10:54:59Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/utils/persistence/SearchAfterDocumentsIterator.java", "diffHunk": "@@ -88,6 +97,9 @@ public boolean hasNext() {\n         }\n \n         SearchResponse searchResponse = doSearch(searchAfterFields());\n+        if (trackTotalHits && totalHits.get() == 0) {\n+            totalHits.set(searchResponse.getHits().getTotalHits().value);", "originalCommit": "e7775048eb7f3d7ff4ee973e6dec9f10e2ffb81f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4NTI4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451485281", "bodyText": "Good point. I only track total hits in the first search to avoid possible overhead after the first time. But in an index that is receiving new docs that number may become outdated. Not sure what's the best way to go about this though. I could make an extra search request just for getting the total hits count instead of adding this here. But I'm not sure.\nAn alternative design would be for the SearchAfterDocumentsIterator to allow for a sub-class to add this and then take care of it only in the TestDocsIterator where we know we're dealing with a static index.\nOpen to ideas.", "author": "dimitris-athanasiou", "createdAt": "2020-07-08T11:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NTA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUxODc1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451518751", "bodyText": "You could used BatchedDocumentsIterator which uses scroll but testing may take a while and you have to keep the context alive.\nDo you expect any changes to the underlying index when this is running? TBH this is only used in the progress meter which are notoriously imprecise. Embrace the imprecision and let that progress meter bounce up and down", "author": "davidkyle", "createdAt": "2020-07-08T12:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NTA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY3Mjk0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58877#discussion_r451672949", "bodyText": "I ended up adding a comment that explains how total hits are tracked.", "author": "dimitris-athanasiou", "createdAt": "2020-07-08T16:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NTA3Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "url": "https://github.com/elastic/elasticsearch/commit/02b9e5afd27b75dff7ca80985b23ad0b1d313d59", "message": "Addresses Przemek's review comments", "committedDate": "2020-07-08T16:24:44Z", "type": "commit"}, {"oid": "e5ef3c19efa6891f2b5f4e229a07fb3de4bed56f", "url": "https://github.com/elastic/elasticsearch/commit/e5ef3c19efa6891f2b5f4e229a07fb3de4bed56f", "message": "More review comments", "committedDate": "2020-07-08T16:24:46Z", "type": "commit"}, {"oid": "9a7b78dbb7bfdc618f170edf465ea5a15ffbb37a", "url": "https://github.com/elastic/elasticsearch/commit/9a7b78dbb7bfdc618f170edf465ea5a15ffbb37a", "message": "Add comment for trackick total hits", "committedDate": "2020-07-08T16:27:27Z", "type": "commit"}, {"oid": "906902d322c06166258243670f2959bb337881a9", "url": "https://github.com/elastic/elasticsearch/commit/906902d322c06166258243670f2959bb337881a9", "message": "Merge branch 'master' into feature/perform-test-inference-on-java", "committedDate": "2020-07-08T17:31:11Z", "type": "commit"}]}