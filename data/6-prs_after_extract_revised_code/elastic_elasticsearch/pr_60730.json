{"pr_number": 60730, "pr_title": "Improve some BytesStreamOutput Usage", "pr_createdAt": "2020-08-05T11:10:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60730", "timeline": [{"oid": "ce1f65acbe7dec418f1df3e5ad06a508691053a5", "url": "https://github.com/elastic/elasticsearch/commit/ce1f65acbe7dec418f1df3e5ad06a508691053a5", "message": "Improve some BytesStreamOutput Usage\n\n* Stop redundantly creating a `0` length `ByteArray` that is never used\n* Add efficient way to get a minimal size copy of the bytes in a `BytesStreamOutput`\n* Avoid multiple redundant `byte[]` copies in search cache key creation", "committedDate": "2020-08-05T11:06:40Z", "type": "commit"}, {"oid": "5ca8e09523977c53e14b26908fc64330b450392d", "url": "https://github.com/elastic/elasticsearch/commit/5ca8e09523977c53e14b26908fc64330b450392d", "message": "fix", "committedDate": "2020-08-05T11:14:38Z", "type": "commit"}, {"oid": "1a09622477de3abb27edfa3ee07ba84416fd4a57", "url": "https://github.com/elastic/elasticsearch/commit/1a09622477de3abb27edfa3ee07ba84416fd4a57", "message": "fix", "committedDate": "2020-08-05T11:15:27Z", "type": "commit"}, {"oid": "c237272e321c933e1a1382949196f60fc32a76ea", "url": "https://github.com/elastic/elasticsearch/commit/c237272e321c933e1a1382949196f60fc32a76ea", "message": "fix", "committedDate": "2020-08-05T11:16:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NDE2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465654165", "bodyText": "Same optimization already added to IOUtils for a single Releasable since we now use that heavily in closing the releasable stream.", "author": "original-brownbear", "createdAt": "2020-08-05T11:16:47Z", "path": "server/src/main/java/org/elasticsearch/common/lease/Releasables.java", "diffHunk": "@@ -46,6 +47,15 @@ public static void close(Iterable<? extends Releasable> releasables) {\n         close(releasables, false);\n     }\n \n+    /** Release the provided {@link Releasable}. */\n+    public static void close(@Nullable Releasable releasable) {", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NTAwNA==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465655004", "bodyText": "This was really inefficient before. The cache key would usually be ~100b but be written with buffers of sizes 8, 56 and then 1xx, then copied again below.", "author": "original-brownbear", "createdAt": "2020-08-05T11:18:43Z", "path": "server/src/main/java/org/elasticsearch/search/internal/ShardSearchRequest.java", "diffHunk": "@@ -342,15 +341,20 @@ public void canReturnNullResponseIfMatchNoDocs(boolean value) {\n         this.canReturnNullResponseIfMatchNoDocs = value;\n     }\n \n+    private static final ThreadLocal<BytesStreamOutput> scratch = ThreadLocal.withInitial(BytesStreamOutput::new);\n+\n     /**\n      * Returns the cache key for this shard search request, based on its content\n      */\n     public BytesReference cacheKey() throws IOException {\n-        BytesStreamOutput out = new BytesStreamOutput();", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NTIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465655215", "bodyText": "Obviously somewhat trivial but why not save some bounds checks.", "author": "original-brownbear", "createdAt": "2020-08-05T11:19:10Z", "path": "server/src/main/java/org/elasticsearch/transport/TcpHeader.java", "diffHunk": "@@ -60,10 +60,11 @@ public static int headerSize(Version version) {\n         }\n     }\n \n+    private static final byte[] PREFIX = {(byte) 'E', (byte) 'S'};\n+\n     public static void writeHeader(StreamOutput output, long requestId, byte status, Version version, int contentSize,\n                                    int variableHeaderSize) throws IOException {\n-        output.writeByte((byte)'E');\n-        output.writeByte((byte)'S');\n+        output.writeBytes(PREFIX);", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1ODY1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465658651", "bodyText": "Tiny nit - this could be declared inside the try.", "author": "pugnascotia", "createdAt": "2020-08-05T11:26:29Z", "path": "server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java", "diffHunk": "@@ -143,6 +150,27 @@ public BytesReference bytes() {\n         return new PagedBytesReference(bytes, count);\n     }\n \n+    /**\n+     * Like {@link #bytes()} but copies the bytes to a freshly allocated buffer.\n+     *\n+     * @return copy of the bytes in this instances\n+     */\n+    public BytesReference copyBytes() {\n+        final byte[] keyBytes = new byte[count];\n+        int offset = 0;\n+        final BytesRefIterator iterator = bytes().iterator();\n+        BytesRef slice;", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87ee451eea1d1b9baa207cd112a8271da0eed54c", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java b/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java\nindex 658ead35a0b..b396170caef 100644\n--- a/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java\n+++ b/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java\n\n@@ -159,8 +159,8 @@ public class BytesStreamOutput extends BytesStream {\n         final byte[] keyBytes = new byte[count];\n         int offset = 0;\n         final BytesRefIterator iterator = bytes().iterator();\n-        BytesRef slice;\n         try {\n+            BytesRef slice;\n             while ((slice = iterator.next()) != null) {\n                 System.arraycopy(slice.bytes, slice.offset, keyBytes, offset, slice.length);\n                 offset += slice.length;\n"}}, {"oid": "87ee451eea1d1b9baa207cd112a8271da0eed54c", "url": "https://github.com/elastic/elasticsearch/commit/87ee451eea1d1b9baa207cd112a8271da0eed54c", "message": "nits", "committedDate": "2020-08-05T11:27:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDAwOA==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465660008", "bodyText": "Is this comment supposed to be here?", "author": "pugnascotia", "createdAt": "2020-08-05T11:29:24Z", "path": "server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java", "diffHunk": "@@ -143,6 +150,27 @@ public BytesReference bytes() {\n         return new PagedBytesReference(bytes, count);\n     }\n \n+    /**\n+     * Like {@link #bytes()} but copies the bytes to a freshly allocated buffer.\n+     *\n+     * @return copy of the bytes in this instances\n+     */\n+    public BytesReference copyBytes() {\n+        final byte[] keyBytes = new byte[count];\n+        int offset = 0;\n+        final BytesRefIterator iterator = bytes().iterator();\n+        BytesRef slice;\n+        try {\n+            while ((slice = iterator.next()) != null) {\n+                System.arraycopy(slice.bytes, slice.offset, keyBytes, offset, slice.length);\n+                offset += slice.length;\n+            }\n+        } catch (IOException e) {\n+            throw new AssertionError(e);\n+        }\n+        return new BytesArray(keyBytes);// do a deep copy", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDY4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465660685", "bodyText": "no :)", "author": "original-brownbear", "createdAt": "2020-08-05T11:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "39a6cc4314c2927557fd8a50f504f4b6b64ffcae", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java b/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java\nindex 658ead35a0b..c55417de3e2 100644\n--- a/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java\n+++ b/server/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java\n\n@@ -159,8 +159,8 @@ public class BytesStreamOutput extends BytesStream {\n         final byte[] keyBytes = new byte[count];\n         int offset = 0;\n         final BytesRefIterator iterator = bytes().iterator();\n-        BytesRef slice;\n         try {\n+            BytesRef slice;\n             while ((slice = iterator.next()) != null) {\n                 System.arraycopy(slice.bytes, slice.offset, keyBytes, offset, slice.length);\n                 offset += slice.length;\n"}}, {"oid": "39a6cc4314c2927557fd8a50f504f4b6b64ffcae", "url": "https://github.com/elastic/elasticsearch/commit/39a6cc4314c2927557fd8a50f504f4b6b64ffcae", "message": "no :)", "committedDate": "2020-08-05T11:30:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2Mjk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465662958", "bodyText": "What is the purpose of this block? Is it just to generate a BytesReference containing \"ES\"? If so, could we not just do:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final BytesReference PING_MESSAGE;\n          \n          \n            \n            \n          \n          \n            \n                static {\n          \n          \n            \n                    try (BytesStreamOutput out = new BytesStreamOutput()) {\n          \n          \n            \n                        out.writeByte((byte) 'E');\n          \n          \n            \n                        out.writeByte((byte) 'S');\n          \n          \n            \n                        out.writeInt(PING_DATA_SIZE);\n          \n          \n            \n                        PING_MESSAGE = out.copyBytes();\n          \n          \n            \n                    } catch (IOException e) {\n          \n          \n            \n                        throw new AssertionError(e.getMessage(), e); // won't happen\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private static final BytesReference PING_MESSAGE = new BytesArray(\"ES\");", "author": "pugnascotia", "createdAt": "2020-08-05T11:35:22Z", "path": "server/src/main/java/org/elasticsearch/transport/TransportKeepAlive.java", "diffHunk": "@@ -48,28 +48,31 @@\n \n     static final int PING_DATA_SIZE = -1;\n \n+    private static final BytesReference PING_MESSAGE;\n+\n+    static {\n+        try (BytesStreamOutput out = new BytesStreamOutput()) {\n+            out.writeByte((byte) 'E');\n+            out.writeByte((byte) 'S');\n+            out.writeInt(PING_DATA_SIZE);\n+            PING_MESSAGE = out.copyBytes();\n+        } catch (IOException e) {\n+            throw new AssertionError(e.getMessage(), e); // won't happen\n+        }\n+    }", "originalCommit": "c237272e321c933e1a1382949196f60fc32a76ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MzczNw==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465663737", "bodyText": "We also have the int PING_DATA_SIZE, but yea the only purpose of the block is setting up the message but I don't think we have a nicer way of building it right at this point.", "author": "original-brownbear", "createdAt": "2020-08-05T11:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2Mjk1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5NTM0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60730#discussion_r465695343", "bodyText": "Oh, I missed the part where it writes the size as well.", "author": "pugnascotia", "createdAt": "2020-08-05T12:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2Mjk1OA=="}], "type": "inlineReview", "revised_code": null}]}