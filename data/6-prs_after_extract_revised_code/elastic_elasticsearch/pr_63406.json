{"pr_number": 63406, "pr_title": "Remove MapperService searchAnalyzer and searchQuoteAnalyzer", "pr_createdAt": "2020-10-07T14:13:02Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63406", "timeline": [{"oid": "0383f9aa0722f52bd347569bdd2a058af23d9878", "url": "https://github.com/elastic/elasticsearch/commit/0383f9aa0722f52bd347569bdd2a058af23d9878", "message": "Remove QueryShardContext#searchAnalyzer and #searchQuoteAnalyzer", "committedDate": "2020-10-07T14:06:58Z", "type": "commit"}, {"oid": "f2436e0fc820f73597d0248cd6de73bf79e97789", "url": "https://github.com/elastic/elasticsearch/commit/f2436e0fc820f73597d0248cd6de73bf79e97789", "message": "Merge remote-tracking branch 'origin/master' into qsc/search-analyzer", "committedDate": "2020-10-07T14:09:12Z", "type": "commit"}, {"oid": "13d56e777ee592c8d54cb4121a8888a536e0d0a5", "url": "https://github.com/elastic/elasticsearch/commit/13d56e777ee592c8d54cb4121a8888a536e0d0a5", "message": "compilation", "committedDate": "2020-10-07T14:20:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NDcxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501054711", "bodyText": "This looks like it's changing behaviour, but is actually just detecting the error earlier - previously we would go through analysis and parsing and then blow up when calling one of the query factory methods on MappedFieldType.", "author": "romseygeek", "createdAt": "2020-10-07T14:23:30Z", "path": "server/src/main/java/org/elasticsearch/index/search/MatchQuery.java", "diffHunk": "@@ -296,8 +297,13 @@ protected final Query parseInternal(Type type, String fieldName, MatchQueryBuild\n     }\n \n     protected Analyzer getAnalyzer(MappedFieldType fieldType, boolean quoted) {\n+        TextSearchInfo tsi = fieldType.getTextSearchInfo();", "originalCommit": "13d56e777ee592c8d54cb4121a8888a536e0d0a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyOTA2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501629069", "bodyText": "would you mind adding a comment about this? It seems to me that we cannot avoid checking this here otherwise the analyzers may be null, and as a result we would only fail earlier compared to before.", "author": "javanna", "createdAt": "2020-10-08T10:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NDcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "323fe140b19fef8bba2a8581cd7b1642d52dc43d", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java b/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java\nindex 02eb2075d36..7e84bd3395b 100644\n--- a/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java\n+++ b/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java\n\n@@ -297,6 +297,8 @@ public class MatchQuery {\n     }\n \n     protected Analyzer getAnalyzer(MappedFieldType fieldType, boolean quoted) {\n+        // We check here that the field supports text searches and therefore has an analyzer -\n+        // if it doesn't, we can bail out early without doing any further parsing.\n         TextSearchInfo tsi = fieldType.getTextSearchInfo();\n         if (tsi == TextSearchInfo.NONE) {\n             throw new IllegalArgumentException(\"Field [\" + fieldType.name() + \"] of type [\" + fieldType.typeName() +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NTMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501055315", "bodyText": "This change makes range query and fuzzy query behave the same way as prefix query", "author": "romseygeek", "createdAt": "2020-10-07T14:24:16Z", "path": "server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java", "diffHunk": "@@ -417,11 +417,11 @@ protected Query getRangeQuery(String field, String part1, String part2,\n     private Query getRangeQuerySingle(String field, String part1, String part2,\n                                       boolean startInclusive, boolean endInclusive, QueryShardContext context) {\n         MappedFieldType currentFieldType = context.fieldMapper(field);\n-        if (currentFieldType == null) {\n+        if (currentFieldType == null || currentFieldType.getTextSearchInfo() == TextSearchInfo.NONE) {", "originalCommit": "13d56e777ee592c8d54cb4121a8888a536e0d0a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf3b0c88b49bb2f6dacc294897af90af5be957d6", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java\nindex 113ac8da66c..a28bc71adea 100644\n--- a/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java\n+++ b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java\n\n@@ -416,7 +416,7 @@ public class QueryStringQueryParser extends XQueryParser {\n \n     private Query getRangeQuerySingle(String field, String part1, String part2,\n                                       boolean startInclusive, boolean endInclusive, QueryShardContext context) {\n-        MappedFieldType currentFieldType = context.fieldMapper(field);\n+        MappedFieldType currentFieldType = context.getFieldType(field);\n         if (currentFieldType == null || currentFieldType.getTextSearchInfo() == TextSearchInfo.NONE) {\n             return newUnmappedFieldQuery(field);\n         }\n"}}, {"oid": "d2614e4817befd9cdeda7f00d2d98fdef5e0c96d", "url": "https://github.com/elastic/elasticsearch/commit/d2614e4817befd9cdeda7f00d2d98fdef5e0c96d", "message": "Remove MapperSearch searchAnalyzer and searchQuoteAnalyzer entirely", "committedDate": "2020-10-07T15:30:56Z", "type": "commit"}, {"oid": "bf3b0c88b49bb2f6dacc294897af90af5be957d6", "url": "https://github.com/elastic/elasticsearch/commit/bf3b0c88b49bb2f6dacc294897af90af5be957d6", "message": "Merge remote-tracking branch 'origin/master' into qsc/search-analyzer", "committedDate": "2020-10-07T16:08:21Z", "type": "commit"}, {"oid": "4bd6b6cf45d7df76070e23e5228ae5afaaf8e8f1", "url": "https://github.com/elastic/elasticsearch/commit/4bd6b6cf45d7df76070e23e5228ae5afaaf8e8f1", "message": "Merge remote-tracking branch 'origin/master' into qsc/search-analyzer", "committedDate": "2020-10-08T08:36:37Z", "type": "commit"}, {"oid": "a97fc8dec7b621e13bdfec433ea99ff4691fafed", "url": "https://github.com/elastic/elasticsearch/commit/a97fc8dec7b621e13bdfec433ea99ff4691fafed", "message": "Add test for MLT analyzer", "committedDate": "2020-10-08T09:11:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMTA4NA==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501631084", "bodyText": "I wonder if this may have implications: we treat a field that does not support term queries as an unmapped field? Shouldn't we rather throw exception?", "author": "javanna", "createdAt": "2020-10-08T10:58:54Z", "path": "server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java", "diffHunk": "@@ -467,11 +467,11 @@ protected Query getFuzzyQuery(String field, String termStr, float minSimilarity)\n \n     private Query getFuzzyQuerySingle(String field, String termStr, int minSimilarity) throws ParseException {\n         MappedFieldType currentFieldType = context.getFieldType(field);\n-        if (currentFieldType == null) {\n+        if (currentFieldType == null || currentFieldType.getTextSearchInfo() == TextSearchInfo.NONE) {", "originalCommit": "a97fc8dec7b621e13bdfec433ea99ff4691fafed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0MTM0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501641341", "bodyText": "QueryStringQueryParser tries not to throw exceptions; the idea is that can chuck any old rubbish in there and it will attempt to build a valid query from it.", "author": "romseygeek", "createdAt": "2020-10-08T11:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMTA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0MzY2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501643669", "bodyText": "right, that makes sense. so without this change, it would break because there is no analyzer set if you query the wrong field?", "author": "javanna", "createdAt": "2020-10-08T11:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMTA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NDU1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501644551", "bodyText": "yes", "author": "romseygeek", "createdAt": "2020-10-08T11:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMTA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0ODQ4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501648481", "bodyText": "would it make sense to have a test for this? I see we are a bit light on testing for query string, I think. Maybe we should address that as a followup?", "author": "javanna", "createdAt": "2020-10-08T11:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMTA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3MDI0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501670241", "bodyText": "Most of the testing is in QueryStringQueryBuilderTests I think, and it does look like we have no tests for completely unsearchable fields - let's add in a followup?", "author": "romseygeek", "createdAt": "2020-10-08T12:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMTA4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMjEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501632102", "bodyText": "here we don't need a delegating analyzer because we don't do cross fields, but rather the field name that the analyzer will get as an argument is always the same field name which we the suggestions are pulled from?", "author": "javanna", "createdAt": "2020-10-08T11:00:50Z", "path": "server/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java", "diffHunk": "@@ -306,7 +306,7 @@ protected void populateCommonFields(QueryShardContext context, SuggestionSearchC\n \n         MappedFieldType fieldType = context.getFieldType(field);\n         if (analyzer == null) {\n-            suggestionContext.setAnalyzer(context.getSearchAnalyzer(fieldType));\n+            suggestionContext.setAnalyzer(fieldType.getTextSearchInfo().getSearchAnalyzer());", "originalCommit": "a97fc8dec7b621e13bdfec433ea99ff4691fafed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0Mjg3OA==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501642878", "bodyText": "Correct.", "author": "romseygeek", "createdAt": "2020-10-08T11:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMjEwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMzM3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501633375", "bodyText": "wasn't this a useful test? Dont we lose coverage by removing this case? maybe though we should have a specific test for this scenario?", "author": "javanna", "createdAt": "2020-10-08T11:03:12Z", "path": "server/src/test/java/org/elasticsearch/search/suggest/AbstractSuggestionBuilderTestCase.java", "diffHunk": "@@ -165,10 +165,7 @@ public void testBuild() throws IOException {\n                     indexSettings);\n             MapperService mapperService = mock(MapperService.class);\n             ScriptService scriptService = mock(ScriptService.class);\n-            boolean fieldTypeSearchAnalyzerSet = randomBoolean();", "originalCommit": "a97fc8dec7b621e13bdfec433ea99ff4691fafed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0MzU2MA==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501643560", "bodyText": "The test is checking what happens when a field has a null analyzer configured.  The only place that this actually happens is in this test (I have a separate PR ready to go that adds null checks to TextSearchInfo, and the only place that triggers failures is this test), so it's in effect testing a situation that will never occur.", "author": "romseygeek", "createdAt": "2020-10-08T11:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMzM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NDIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501644215", "bodyText": "thanks for explaining, I thought that it was rather testing the fallback from search analyzer to default search analyzer.", "author": "javanna", "createdAt": "2020-10-08T11:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMzM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NDQ2MA==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501644460", "bodyText": "Maybe that is what the test wanted to initially do but it ended up setting a null analyzer to TextSearchInfo which would not be allowed?", "author": "javanna", "createdAt": "2020-10-08T11:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMzM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0NTI5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501645291", "bodyText": "yes, the 'fallback-to-default' behaviour is now done up-front in TextSearchInfo, so it can't be tested here anymore.", "author": "romseygeek", "createdAt": "2020-10-08T11:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMzM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0OTUyNw==", "url": "https://github.com/elastic/elasticsearch/pull/63406#discussion_r501649527", "bodyText": "yes yes I finally got it. Last famous words :)", "author": "javanna", "createdAt": "2020-10-08T11:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzMzM3NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "323fe140b19fef8bba2a8581cd7b1642d52dc43d", "url": "https://github.com/elastic/elasticsearch/commit/323fe140b19fef8bba2a8581cd7b1642d52dc43d", "message": "add a comment", "committedDate": "2020-10-08T11:28:35Z", "type": "commit"}]}