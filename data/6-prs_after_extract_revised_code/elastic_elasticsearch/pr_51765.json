{"pr_number": 51765, "pr_title": "[ML] Refactor ML mappings and templates into JSON resources", "pr_createdAt": "2020-01-31T17:30:17Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51765", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NjczNQ==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r373596735", "bodyText": "@gwbrown Here are the changes I made to allow variable replacement on template loading. Could you take a look please when you have some time?", "author": "dimitris-athanasiou", "createdAt": "2020-01-31T17:31:32Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java", "diffHunk": "@@ -57,11 +58,18 @@ public static void loadTemplateIntoMap(String resource, Map<String, IndexTemplat\n      * Loads a built-in template and returns its source.\n      */\n     public static String loadTemplate(String resource, String version, String versionProperty) {\n+        return loadTemplate(resource, version, versionProperty, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * Loads a built-in template and returns its source after replacing given variables.\n+     */\n+    public static String loadTemplate(String resource, String version, String versionProperty, Map<String, String> variables) {\n         try {\n             BytesReference source = load(resource);\n+            source = replaceVariables(source, version, versionProperty, variables);", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\nindex bd22a64007b8..57e0cce1d1ea 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\n\n@@ -66,10 +67,10 @@ public class TemplateUtils {\n      */\n     public static String loadTemplate(String resource, String version, String versionProperty, Map<String, String> variables) {\n         try {\n-            BytesReference source = load(resource);\n+            String source = load(resource);\n             source = replaceVariables(source, version, versionProperty, variables);\n             validate(source);\n-            return source.utf8ToString();\n+            return source;\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\"Unable to load template [\" + resource + \"]\", e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NzE3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r373597171", "bodyText": "I have not replaced this with returning an operator that does nothing yet because it is unclear whether IndexTemplateRegistry fully addresses upgrading issues. I'm waiting to hear on this, until then the PR is WIP.", "author": "dimitris-athanasiou", "createdAt": "2020-01-31T17:32:42Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java", "diffHunk": "@@ -887,101 +881,6 @@ protected Clock getClock() {\n     public UnaryOperator<Map<String, IndexTemplateMetaData>> getIndexTemplateMetaDataUpgrader() {\n         return templates -> {", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5Nzc4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r373597786", "bodyText": "These tests are unfortunately the result of extreme mocking, something we tried in the past but doesn't seem to bring benefits. I have removed them and replaced them with integration tests in JobResultsProviderIT.", "author": "dimitris-athanasiou", "createdAt": "2020-01-31T17:34:11Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java", "diffHunk": "@@ -66,182 +52,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n \n-import static org.elasticsearch.xpack.core.ml.job.config.JobTests.buildJobBuilder;\n import static org.hamcrest.Matchers.anEmptyMap;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasSize;\n import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.verifyZeroInteractions;\n import static org.mockito.Mockito.when;\n \n public class JobResultsProviderTests extends ESTestCase {\n-    private static final String CLUSTER_NAME = \"myCluster\";\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testCreateJobResultsIndex() {", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5Nzk5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r373597992", "bodyText": "I just noticed this one, I forgot to address it. I'll take care of it before removing the WIP label.", "author": "dimitris-athanasiou", "createdAt": "2020-01-31T17:34:40Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java", "diffHunk": "@@ -1031,6 +855,31 @@ public void testDatafeedTimingStats_NotFound() throws IOException {\n         verifyNoMoreInteractions(client);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+//    public void testTermFieldMapping() throws IOException {", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java\nindex 25552400f5d7..9480330ef01f 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProviderTests.java\n\n@@ -847,7 +853,7 @@ public class JobResultsProviderTests extends ESTestCase {\n         provider.datafeedTimingStats(\n             \"foo\",\n             stats -> assertThat(stats, equalTo(new DatafeedTimingStats(\"foo\"))),\n-            e -> { throw new AssertionError(); });\n+            e -> { throw new AssertionError(\"Failure getting datafeed timing stats\", e); });\n \n         verify(client).prepareSearch(indexName);\n         verify(client).threadPool();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5ODM3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r373598373", "bodyText": "In hindsight I'm not sure this mock client class was useful. I remove all unused methods.", "author": "dimitris-athanasiou", "createdAt": "2020-01-31T17:35:38Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/persistence/MockClientBuilder.java", "diffHunk": "@@ -77,14 +56,11 @@\n     private ClusterAdminClient clusterAdminClient;\n     private IndicesAdminClient indicesAdminClient;\n \n-    private IndicesAliasesRequestBuilder aliasesRequestBuilder;", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5ODk2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r373598962", "bodyText": "This template's name is formed by the inference prefix plus the latest version. This would mean that once we change version we'll create a new template. I think that's probably not a good idea. I left it as is for now but we can address in this PR. In fact, our template naming is a bit inconsistent but I'm not sure we can iron it easily. I'll make sure we discuss this.", "author": "dimitris-athanasiou", "createdAt": "2020-01-31T17:37:03Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.MlConfigIndex;\n+import org.elasticsearch.xpack.core.ml.MlMetaIndex;\n+import org.elasticsearch.xpack.core.ml.inference.persistence.InferenceIndexConstants;\n+import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndex;\n+import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndexFields;\n+import org.elasticsearch.xpack.core.ml.notifications.NotificationsIndex;\n+import org.elasticsearch.xpack.core.template.IndexTemplateConfig;\n+import org.elasticsearch.xpack.core.template.IndexTemplateRegistry;\n+import org.elasticsearch.xpack.core.template.LifecyclePolicyConfig;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+public class MlIndexTemplateRegistry extends IndexTemplateRegistry {\n+\n+    private static final String ROOT_RESOURCE_PATH = \"/org/elasticsearch/xpack/core/ml/\";\n+    private static final String ANOMALY_DETECTION_PATH = ROOT_RESOURCE_PATH + \"anomalydetection/\";\n+    private static final String VERSION_PATTERN = \"xpack.ml.version\";\n+    private static final String VERSION_ID_PATTERN = \"xpack.ml.version.id\";\n+\n+    private static final IndexTemplateConfig ANOMALY_DETECTION_RESULTS_TEMPLATE = anomalyDetectionResultsTemplate();\n+\n+    private static final IndexTemplateConfig ANOMALY_DETECTION_STATE_TEMPLATE = new IndexTemplateConfig(\n+        AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX,ANOMALY_DETECTION_PATH + \"state_index_template.json\",\n+        Version.CURRENT.toString(), VERSION_PATTERN,\n+        Collections.singletonMap(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id)));\n+\n+    private static final IndexTemplateConfig META_TEMPLATE = new IndexTemplateConfig(MlMetaIndex.INDEX_NAME,\n+        ROOT_RESOURCE_PATH + \"meta_index_template.json\", Version.CURRENT.toString(), VERSION_PATTERN,\n+        Collections.singletonMap(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id)));\n+\n+    private static final IndexTemplateConfig NOTIFICATIONS_TEMPLATE = new IndexTemplateConfig(NotificationsIndex.NOTIFICATIONS_INDEX,\n+        ROOT_RESOURCE_PATH + \"notifications_index_template.json\", Version.CURRENT.toString(), VERSION_PATTERN,\n+        Collections.singletonMap(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id)));\n+\n+    private static final IndexTemplateConfig CONFIG_TEMPLATE = configTemplate();\n+\n+    private static final IndexTemplateConfig INFERENCE_TEMPLATE = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\nindex 5d865120995e..bc6b5f4848f7 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\n\n@@ -27,7 +27,6 @@ import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.regex.Pattern;\n \n public class MlIndexTemplateRegistry extends IndexTemplateRegistry {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMzQ3NA==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r373723474", "bodyText": "I don't like the difference here between how versionProperty is treated (that is, wrapped with ${} and escaped via Pattern.quote()) and how the variables are treated (not wrapped with anything and not escaped) - I think this will lead to confusion, and very possibly accidentally ending up with regexes where we expected to have static strings.\nIf we don't end up escaping the keys in variables either here or in TemplateUtils#replaceVariable, it should be made clear that the keys will be compiles as regexes.", "author": "gwbrown", "createdAt": "2020-01-31T23:03:59Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/IndexTemplateConfig.java", "diffHunk": "@@ -55,7 +82,7 @@ public String getTemplateName() {\n      */\n     public byte[] loadBytes() {\n         String template = TemplateUtils.loadTemplate(fileName, version,\n-            Pattern.quote(\"${\" + versionProperty + \"}\"));\n+            Pattern.quote(\"${\" + versionProperty + \"}\"), variables);", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NTk2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374275962", "bodyText": "I have pused b765370 to ensure we wrap and escape everywhere.", "author": "dimitris-athanasiou", "createdAt": "2020-02-03T18:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMzQ3NA=="}], "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/IndexTemplateConfig.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/IndexTemplateConfig.java\nindex 12a57b74470a..315ea79af400 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/IndexTemplateConfig.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/IndexTemplateConfig.java\n\n@@ -76,14 +79,19 @@ public class IndexTemplateConfig {\n         return templateName;\n     }\n \n+    public int getVersion() {\n+        return version;\n+    }\n+\n     /**\n      * Loads the template from disk as a UTF-8 byte array.\n      * @return The template as a UTF-8 byte array.\n      */\n     public byte[] loadBytes() {\n-        String template = TemplateUtils.loadTemplate(fileName, version,\n-            Pattern.quote(\"${\" + versionProperty + \"}\"), variables);\n+        String template = TemplateUtils.loadTemplate(fileName, Integer.toString(version), versionProperty, variables);\n         assert template != null && template.length() > 0;\n+        assert Pattern.compile(\"\\\"version\\\"\\\\s*:\\\\s*\" + version).matcher(template).find()\n+            : \"index template must have a version property set to the given version property\";\n         return template.getBytes(StandardCharsets.UTF_8);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyNTU3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r373725579", "bodyText": "Because the only usage of this function is in TemplateUtils, maybe we should add the LITERAL flag here rather than quoting higher in the call stack? I think we're unlikely to need full regex support here.", "author": "gwbrown", "createdAt": "2020-01-31T23:13:02Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java", "diffHunk": "@@ -91,13 +99,22 @@ public static void validate(BytesReference source) {\n         }\n     }\n \n+    private static BytesReference replaceVariables(BytesReference input, String version, String versionProperty,\n+                                                         Map<String, String> variables) {\n+        String template = replaceVariable(input.utf8ToString(), versionProperty, version);\n+        for (Map.Entry<String, String> variable : variables.entrySet()) {\n+            template = replaceVariable(template, variable.getKey(), variable.getValue());\n+        }\n+        return new BytesArray(template);\n+    }\n+\n     /**\n-     * Filters the source: replaces any template version property with the version number\n+     * Replaces all occurences of given variable with the value\n      */\n-    public static String filter(BytesReference source, String version, String versionProperty) {\n-        return Pattern.compile(versionProperty)\n-                .matcher(source.utf8ToString())\n-                .replaceAll(version);\n+    public static String replaceVariable(String input, String variable, String value) {\n+        return Pattern.compile(variable)", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NjAwNw==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374276007", "bodyText": "Done", "author": "dimitris-athanasiou", "createdAt": "2020-02-03T18:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyNTU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\nindex bd22a64007b8..57e0cce1d1ea 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\n\n@@ -78,41 +79,41 @@ public class TemplateUtils {\n     /**\n      * Loads a resource from the classpath and returns it as a {@link BytesReference}\n      */\n-    public static BytesReference load(String name) throws IOException {\n-        return Streams.readFully(TemplateUtils.class.getResourceAsStream(name));\n+    public static String load(String name) throws IOException {\n+        return Streams.readFully(TemplateUtils.class.getResourceAsStream(name)).utf8ToString();\n     }\n \n     /**\n      * Parses and validates that the source is not empty.\n      */\n-    public static void validate(BytesReference source) {\n+    public static void validate(String source) {\n         if (source == null) {\n             throw new ElasticsearchParseException(\"Template must not be null\");\n         }\n+        if (Strings.isEmpty(source)) {\n+            throw new ElasticsearchParseException(\"Template must not be empty\");\n+        }\n \n         try {\n-            XContentHelper.convertToMap(source, false, XContentType.JSON).v2();\n-        } catch (NotXContentException e) {\n-            throw new ElasticsearchParseException(\"Template must not be empty\");\n+            XContentHelper.convertToMap(JsonXContent.jsonXContent, source, false);\n         } catch (Exception e) {\n             throw new ElasticsearchParseException(\"Invalid template\", e);\n         }\n     }\n \n-    private static BytesReference replaceVariables(BytesReference input, String version, String versionProperty,\n-                                                         Map<String, String> variables) {\n-        String template = replaceVariable(input.utf8ToString(), versionProperty, version);\n+    private static String replaceVariables(String input, String version, String versionProperty, Map<String, String> variables) {\n+        String template = replaceVariable(input, versionProperty, version);\n         for (Map.Entry<String, String> variable : variables.entrySet()) {\n             template = replaceVariable(template, variable.getKey(), variable.getValue());\n         }\n-        return new BytesArray(template);\n+        return template;\n     }\n \n     /**\n      * Replaces all occurences of given variable with the value\n      */\n     public static String replaceVariable(String input, String variable, String value) {\n-        return Pattern.compile(variable)\n+        return Pattern.compile(\"${\" + variable + \"}\", Pattern.LITERAL)\n                 .matcher(input)\n                 .replaceAll(value);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2MjM0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374162343", "bodyText": "For the templates we decided to leave this out in the future.  Can it be omitted here too now we're explicitly setting it in the affected tests?  (Plus the code above that looks for whether we're using the black hole autodetect process.)", "author": "droberts195", "createdAt": "2020-02-03T15:20:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/AnnotationIndex.java", "diffHunk": "@@ -73,30 +72,26 @@ public static void createAnnotationsIndexIfNecessary(Settings settings, Client c\n                 }\n \n                 CreateIndexRequest createIndexRequest = new CreateIndexRequest(INDEX_NAME);\n-                try (XContentBuilder annotationsMapping = AnnotationIndex.annotationsMapping()) {\n-                    createIndexRequest.mapping(annotationsMapping);\n-                    createIndexRequest.settings(Settings.builder()\n-                        .put(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS, \"0-1\")\n-                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"1\")\n-                        .put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), delayedNodeTimeOutSetting));\n-\n-                    executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, createIndexRequest,\n-                        ActionListener.<CreateIndexResponse>wrap(\n-                            r -> createAliasListener.onResponse(r.isAcknowledged()),\n-                            e -> {\n-                                // Possible that the index was created while the request was executing,\n-                                // so we need to handle that possibility\n-                                if (ExceptionsHelper.unwrapCause(e) instanceof ResourceAlreadyExistsException) {\n-                                    // Create the alias\n-                                    createAliasListener.onResponse(true);\n-                                } else {\n-                                    finalListener.onFailure(e);\n-                                }\n+                createIndexRequest.mapping(annotationsMapping());\n+                createIndexRequest.settings(Settings.builder()\n+                    .put(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS, \"0-1\")\n+                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"1\")\n+                    .put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), delayedNodeTimeOutSetting));", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/AnnotationIndex.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/AnnotationIndex.java\nindex fd311356d431..705c06a70e1a 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/AnnotationIndex.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/annotations/AnnotationIndex.java\n\n@@ -63,20 +59,11 @@ public class AnnotationIndex {\n             // Create the annotations index if it doesn't exist already.\n             if (mlLookup.containsKey(INDEX_NAME) == false) {\n \n-                final TimeValue delayedNodeTimeOutSetting;\n-                // Whether we are using native process is a good way to detect whether we are in dev / test mode:\n-                if (MachineLearningField.AUTODETECT_PROCESS.get(settings)) {\n-                    delayedNodeTimeOutSetting = UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(settings);\n-                } else {\n-                    delayedNodeTimeOutSetting = TimeValue.ZERO;\n-                }\n-\n                 CreateIndexRequest createIndexRequest = new CreateIndexRequest(INDEX_NAME);\n                 createIndexRequest.mapping(annotationsMapping());\n                 createIndexRequest.settings(Settings.builder()\n                     .put(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS, \"0-1\")\n-                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"1\")\n-                    .put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), delayedNodeTimeOutSetting));\n+                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"1\"));\n \n                 executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, createIndexRequest,\n                     ActionListener.<CreateIndexResponse>wrap(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyNDgwOA==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374224808", "bodyText": "We're using the same state index for data frame analytics state too, so maybe drop the ANOMALY_DETECTION_ bit?", "author": "droberts195", "createdAt": "2020-02-03T17:05:47Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.MlConfigIndex;\n+import org.elasticsearch.xpack.core.ml.MlMetaIndex;\n+import org.elasticsearch.xpack.core.ml.inference.persistence.InferenceIndexConstants;\n+import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndex;\n+import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndexFields;\n+import org.elasticsearch.xpack.core.ml.notifications.NotificationsIndex;\n+import org.elasticsearch.xpack.core.template.IndexTemplateConfig;\n+import org.elasticsearch.xpack.core.template.IndexTemplateRegistry;\n+import org.elasticsearch.xpack.core.template.LifecyclePolicyConfig;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+public class MlIndexTemplateRegistry extends IndexTemplateRegistry {\n+\n+    private static final String ROOT_RESOURCE_PATH = \"/org/elasticsearch/xpack/core/ml/\";\n+    private static final String ANOMALY_DETECTION_PATH = ROOT_RESOURCE_PATH + \"anomalydetection/\";\n+    private static final String VERSION_PATTERN = \"xpack.ml.version\";\n+    private static final String VERSION_ID_PATTERN = \"xpack.ml.version.id\";\n+\n+    private static final IndexTemplateConfig ANOMALY_DETECTION_RESULTS_TEMPLATE = anomalyDetectionResultsTemplate();\n+\n+    private static final IndexTemplateConfig ANOMALY_DETECTION_STATE_TEMPLATE = new IndexTemplateConfig(", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU4NDA2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374584069", "bodyText": "I'd like to move all state-related logic in AnomalyDetectorsIndex into a MlStateIndex class. But I'd rather do that in a follow-up PR.", "author": "dimitris-athanasiou", "createdAt": "2020-02-04T10:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyNDgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\nindex 5d865120995e..bc6b5f4848f7 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\n\n@@ -27,7 +27,6 @@ import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.regex.Pattern;\n \n public class MlIndexTemplateRegistry extends IndexTemplateRegistry {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMDc4NA==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374230784", "bodyText": "This is a difference compared to what we did with the old getIndexTemplateMetaDataUpgrader() functionality.  In that we used to return our templates even when ML was disabled on the node.  Returning nothing when ML is disabled isn't necessarily wrong, but it's a difference that needs thinking about.\nThere may be some subtle effect in Cloud for example.  I think at one time there was a proposal that when a Cloud cluster gets switched to different hardware and a full cluster snapshot from the old hardware is restored into brand new empty cluster running on different hardware that all the X-Pack plugins are disabled during that restore.  I am not sure if this is still being proposed or not.  But it's a scenario where the ML plugin would be disabled in a cluster that contained ML indices.\nLet's consult more widely on this offline.", "author": "droberts195", "createdAt": "2020-02-03T17:17:35Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.ml;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.xpack.core.ClientHelper;\n+import org.elasticsearch.xpack.core.ml.MlConfigIndex;\n+import org.elasticsearch.xpack.core.ml.MlMetaIndex;\n+import org.elasticsearch.xpack.core.ml.inference.persistence.InferenceIndexConstants;\n+import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndex;\n+import org.elasticsearch.xpack.core.ml.job.persistence.AnomalyDetectorsIndexFields;\n+import org.elasticsearch.xpack.core.ml.notifications.NotificationsIndex;\n+import org.elasticsearch.xpack.core.template.IndexTemplateConfig;\n+import org.elasticsearch.xpack.core.template.IndexTemplateRegistry;\n+import org.elasticsearch.xpack.core.template.LifecyclePolicyConfig;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+public class MlIndexTemplateRegistry extends IndexTemplateRegistry {\n+\n+    private static final String ROOT_RESOURCE_PATH = \"/org/elasticsearch/xpack/core/ml/\";\n+    private static final String ANOMALY_DETECTION_PATH = ROOT_RESOURCE_PATH + \"anomalydetection/\";\n+    private static final String VERSION_PATTERN = \"xpack.ml.version\";\n+    private static final String VERSION_ID_PATTERN = \"xpack.ml.version.id\";\n+\n+    private static final IndexTemplateConfig ANOMALY_DETECTION_RESULTS_TEMPLATE = anomalyDetectionResultsTemplate();\n+\n+    private static final IndexTemplateConfig ANOMALY_DETECTION_STATE_TEMPLATE = new IndexTemplateConfig(\n+        AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX,ANOMALY_DETECTION_PATH + \"state_index_template.json\",\n+        Version.CURRENT.toString(), VERSION_PATTERN,\n+        Collections.singletonMap(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id)));\n+\n+    private static final IndexTemplateConfig META_TEMPLATE = new IndexTemplateConfig(MlMetaIndex.INDEX_NAME,\n+        ROOT_RESOURCE_PATH + \"meta_index_template.json\", Version.CURRENT.toString(), VERSION_PATTERN,\n+        Collections.singletonMap(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id)));\n+\n+    private static final IndexTemplateConfig NOTIFICATIONS_TEMPLATE = new IndexTemplateConfig(NotificationsIndex.NOTIFICATIONS_INDEX,\n+        ROOT_RESOURCE_PATH + \"notifications_index_template.json\", Version.CURRENT.toString(), VERSION_PATTERN,\n+        Collections.singletonMap(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id)));\n+\n+    private static final IndexTemplateConfig CONFIG_TEMPLATE = configTemplate();\n+\n+    private static final IndexTemplateConfig INFERENCE_TEMPLATE = new IndexTemplateConfig(InferenceIndexConstants.LATEST_INDEX_NAME,\n+        ROOT_RESOURCE_PATH + \"inference_index_template.json\", Version.CURRENT.toString(), VERSION_PATTERN,\n+        Collections.singletonMap(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id)));\n+\n+    private static IndexTemplateConfig configTemplate() {\n+        Map<String, String> variables = new HashMap<>();\n+        variables.put(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id));\n+        variables.put(Pattern.quote(\"${xpack.ml.config.max_result_window}\"),\n+            String.valueOf(AnomalyDetectorsIndex.CONFIG_INDEX_MAX_RESULTS_WINDOW));\n+        variables.put(Pattern.quote(\"${xpack.ml.config.mappings}\"), MlConfigIndex.mapping());\n+\n+        return new IndexTemplateConfig(AnomalyDetectorsIndex.configIndexName(),\n+            ROOT_RESOURCE_PATH + \"config_index_template.json\",\n+            Version.CURRENT.toString(), VERSION_PATTERN,\n+            variables);\n+    }\n+\n+    private static IndexTemplateConfig anomalyDetectionResultsTemplate() {\n+        Map<String, String> variables = new HashMap<>();\n+        variables.put(Pattern.quote(\"${\" + VERSION_ID_PATTERN + \"}\"), String.valueOf(Version.CURRENT.id));\n+        variables.put(Pattern.quote(\"${xpack.ml.anomalydetection.results.mappings}\"), AnomalyDetectorsIndex.resultsMapping());\n+\n+        return new IndexTemplateConfig(AnomalyDetectorsIndex.jobResultsIndexPrefix(),\n+            ANOMALY_DETECTION_PATH + \"results_index_template.json\",\n+            Version.CURRENT.toString(), VERSION_PATTERN,\n+            variables);\n+    }\n+\n+    private final boolean mlEnabled;\n+\n+    public MlIndexTemplateRegistry(Settings nodeSettings, ClusterService clusterService, ThreadPool threadPool, Client client,\n+                                   NamedXContentRegistry xContentRegistry) {\n+        super(nodeSettings, clusterService, threadPool, client, xContentRegistry);\n+        this.mlEnabled = MachineLearning.ML_ENABLED.get(nodeSettings);\n+    }\n+\n+    @Override\n+    protected List<IndexTemplateConfig> getTemplateConfigs() {\n+        if (mlEnabled == false) {\n+            return Collections.emptyList();", "originalCommit": "79f20f58c9495ee51c979a8c2c4c0509f209c9ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NjgxNg==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374276816", "bodyText": "It was wrong to return an empty list. A number of tests was failing because of that. As long as the plugin is loaded, the templates should be there as some nodes may become ML nodes.", "author": "dimitris-athanasiou", "createdAt": "2020-02-03T18:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMDc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\nindex 5d865120995e..bc6b5f4848f7 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlIndexTemplateRegistry.java\n\n@@ -27,7 +27,6 @@ import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.regex.Pattern;\n \n public class MlIndexTemplateRegistry extends IndexTemplateRegistry {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0Mjc0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374642746", "bodyText": "there is a lot of conversions and deep copies: utf8->utf16->utf8->utf16. It does not look to hard to implement  replaceVariables and validate with strings instead of utf8 byte buffers.", "author": "hendrikmuhs", "createdAt": "2020-02-04T12:31:20Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java", "diffHunk": "@@ -57,11 +58,18 @@ public static void loadTemplateIntoMap(String resource, Map<String, IndexTemplat\n      * Loads a built-in template and returns its source.\n      */\n     public static String loadTemplate(String resource, String version, String versionProperty) {\n+        return loadTemplate(resource, version, versionProperty, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * Loads a built-in template and returns its source after replacing given variables.\n+     */\n+    public static String loadTemplate(String resource, String version, String versionProperty, Map<String, String> variables) {\n         try {\n             BytesReference source = load(resource);\n+            source = replaceVariables(source, version, versionProperty, variables);\n             validate(source);\n-\n-            return filter(source, version, versionProperty);\n+            return source.utf8ToString();", "originalCommit": "c844a918e7b55116be96e787fb2ad3763b280f10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1NjcxNg==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374756716", "bodyText": "Done.", "author": "dimitris-athanasiou", "createdAt": "2020-02-04T15:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0Mjc0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\nindex e70d25c1c6cc..57e0cce1d1ea 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\n\n@@ -66,10 +67,10 @@ public class TemplateUtils {\n      */\n     public static String loadTemplate(String resource, String version, String versionProperty, Map<String, String> variables) {\n         try {\n-            BytesReference source = load(resource);\n+            String source = load(resource);\n             source = replaceVariables(source, version, versionProperty, variables);\n             validate(source);\n-            return source.utf8ToString();\n+            return source;\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\"Unable to load template [\" + resource + \"]\", e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0NzEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374647102", "bodyText": "it looks unsafe to inject a string into a regex pattern like this, it would be good to use Pattern.quote(variable) or disallow special characters", "author": "hendrikmuhs", "createdAt": "2020-02-04T12:40:52Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java", "diffHunk": "@@ -91,13 +99,22 @@ public static void validate(BytesReference source) {\n         }\n     }\n \n+    private static BytesReference replaceVariables(BytesReference input, String version, String versionProperty,\n+                                                         Map<String, String> variables) {\n+        String template = replaceVariable(input.utf8ToString(), versionProperty, version);\n+        for (Map.Entry<String, String> variable : variables.entrySet()) {\n+            template = replaceVariable(template, variable.getKey(), variable.getValue());\n+        }\n+        return new BytesArray(template);\n+    }\n+\n     /**\n-     * Filters the source: replaces any template version property with the version number\n+     * Replaces all occurences of given variable with the value\n      */\n-    public static String filter(BytesReference source, String version, String versionProperty) {\n-        return Pattern.compile(versionProperty)\n-                .matcher(source.utf8ToString())\n-                .replaceAll(version);\n+    public static String replaceVariable(String input, String variable, String value) {\n+        return Pattern.compile(\"${\" + variable + \"}\", Pattern.LITERAL)", "originalCommit": "c844a918e7b55116be96e787fb2ad3763b280f10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwMDQ0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r374700443", "bodyText": "That should be handled by the LITERAL flag, no?", "author": "dimitris-athanasiou", "createdAt": "2020-02-04T14:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0NzEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\nindex e70d25c1c6cc..57e0cce1d1ea 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java\n\n@@ -78,34 +79,34 @@ public class TemplateUtils {\n     /**\n      * Loads a resource from the classpath and returns it as a {@link BytesReference}\n      */\n-    public static BytesReference load(String name) throws IOException {\n-        return Streams.readFully(TemplateUtils.class.getResourceAsStream(name));\n+    public static String load(String name) throws IOException {\n+        return Streams.readFully(TemplateUtils.class.getResourceAsStream(name)).utf8ToString();\n     }\n \n     /**\n      * Parses and validates that the source is not empty.\n      */\n-    public static void validate(BytesReference source) {\n+    public static void validate(String source) {\n         if (source == null) {\n             throw new ElasticsearchParseException(\"Template must not be null\");\n         }\n+        if (Strings.isEmpty(source)) {\n+            throw new ElasticsearchParseException(\"Template must not be empty\");\n+        }\n \n         try {\n-            XContentHelper.convertToMap(source, false, XContentType.JSON).v2();\n-        } catch (NotXContentException e) {\n-            throw new ElasticsearchParseException(\"Template must not be empty\");\n+            XContentHelper.convertToMap(JsonXContent.jsonXContent, source, false);\n         } catch (Exception e) {\n             throw new ElasticsearchParseException(\"Invalid template\", e);\n         }\n     }\n \n-    private static BytesReference replaceVariables(BytesReference input, String version, String versionProperty,\n-                                                         Map<String, String> variables) {\n-        String template = replaceVariable(input.utf8ToString(), versionProperty, version);\n+    private static String replaceVariables(String input, String version, String versionProperty, Map<String, String> variables) {\n+        String template = replaceVariable(input, versionProperty, version);\n         for (Map.Entry<String, String> variable : variables.entrySet()) {\n             template = replaceVariable(template, variable.getKey(), variable.getValue());\n         }\n-        return new BytesArray(template);\n+        return template;\n     }\n \n     /**\n"}}, {"oid": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "url": "https://github.com/elastic/elasticsearch/commit/7ace93cdbed490c7de67e008eb66ac653a3b6337", "message": "[ML] Refactor ML mappings and templates into JSON resources\n\nML mappings and index templates have so far been created\nprogrammatically. While this had its merits due to static typing,\nthere is consensus it would be clear to maintain those in json files.\nIn addition, we are going to adding ILM policies to these indices\nand the component for a plugin to register ILM policies is\n`IndexTemplateRegistry`. It expects the templates to be in resource\njson files.\n\nFor the above reasons this commit refactors ML mappings and index\ntemplates into json resource files that are registered via\n`MlIndexTemplateRegistry`.", "committedDate": "2020-02-12T10:36:07Z", "type": "commit"}, {"oid": "7ace93cdbed490c7de67e008eb66ac653a3b6337", "url": "https://github.com/elastic/elasticsearch/commit/7ace93cdbed490c7de67e008eb66ac653a3b6337", "message": "[ML] Refactor ML mappings and templates into JSON resources\n\nML mappings and index templates have so far been created\nprogrammatically. While this had its merits due to static typing,\nthere is consensus it would be clear to maintain those in json files.\nIn addition, we are going to adding ILM policies to these indices\nand the component for a plugin to register ILM policies is\n`IndexTemplateRegistry`. It expects the templates to be in resource\njson files.\n\nFor the above reasons this commit refactors ML mappings and index\ntemplates into json resource files that are registered via\n`MlIndexTemplateRegistry`.", "committedDate": "2020-02-12T10:36:07Z", "type": "forcePushed"}, {"oid": "0aba76e427518eadb854add3d1d24c5ca64feef1", "url": "https://github.com/elastic/elasticsearch/commit/0aba76e427518eadb854add3d1d24c5ca64feef1", "message": "Force upgrades to happen on master node", "committedDate": "2020-02-12T16:44:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczODQ5NA==", "url": "https://github.com/elastic/elasticsearch/pull/51765#discussion_r378738494", "bodyText": "nit: I wonder about that: this exception type is used if a REST request is malformed. In this context this makes no sense and we consider the input immutable, right? IMHO this is more of a RTE kind of thing.\nAnyway, this is out of scope for this PR, you just add another exception and follow the existing style.", "author": "hendrikmuhs", "createdAt": "2020-02-13T09:22:54Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/template/TemplateUtils.java", "diffHunk": "@@ -71,34 +79,43 @@ public static String loadTemplate(String resource, String version, String versio\n     /**\n      * Loads a resource from the classpath and returns it as a {@link BytesReference}\n      */\n-    public static BytesReference load(String name) throws IOException {\n-        return Streams.readFully(TemplateUtils.class.getResourceAsStream(name));\n+    public static String load(String name) throws IOException {\n+        return Streams.readFully(TemplateUtils.class.getResourceAsStream(name)).utf8ToString();\n     }\n \n     /**\n      * Parses and validates that the source is not empty.\n      */\n-    public static void validate(BytesReference source) {\n+    public static void validate(String source) {\n         if (source == null) {\n             throw new ElasticsearchParseException(\"Template must not be null\");\n         }\n+        if (Strings.isEmpty(source)) {\n+            throw new ElasticsearchParseException(\"Template must not be empty\");", "originalCommit": "0aba76e427518eadb854add3d1d24c5ca64feef1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}