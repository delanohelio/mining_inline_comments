{"pr_number": 64664, "pr_title": "SQL: Remove the deprecated `AttributeMap(Map)` calls", "pr_createdAt": "2020-11-05T17:36:01Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64664", "timeline": [{"oid": "dbe03f9454e02cc1537585ddabfb8437792e905d", "url": "https://github.com/elastic/elasticsearch/commit/dbe03f9454e02cc1537585ddabfb8437792e905d", "message": "SQL: Removed all the `AttributeMap(Map)` usage", "committedDate": "2020-11-05T17:21:35Z", "type": "commit"}, {"oid": "ff70ca7f9968596e9241045a6b4b3bdf764f4369", "url": "https://github.com/elastic/elasticsearch/commit/ff70ca7f9968596e9241045a6b4b3bdf764f4369", "message": "Fix the AttributeSet type inference", "committedDate": "2020-11-05T17:43:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0MjU5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518242597", "bodyText": "Aaah. It seems that IDEA rereads the settings from .editorconfig all the time.", "author": "palesz", "createdAt": "2020-11-05T17:45:57Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeSet.java", "diffHunk": "@@ -185,4 +183,4 @@ public int hashCode() {\n     public String toString() {\n         return delegate.keySet().toString();\n     }\n-}\n\\ No newline at end of file\n+}", "originalCommit": "ff70ca7f9968596e9241045a6b4b3bdf764f4369", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a46db5822b51034f7b34f2ad8023b80f4749a8dc", "chunk": "diff --git a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeSet.java b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeSet.java\nindex 1553579ae35..3c46f42e804 100644\n--- a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeSet.java\n+++ b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeSet.java\n\n@@ -183,4 +183,4 @@ public class AttributeSet implements Set<Attribute> {\n     public String toString() {\n         return delegate.keySet().toString();\n     }\n-}\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NDQ0NA==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518254444", "bodyText": "AttributeMap.builder(qContainer.scalarFunctions()).put().build()", "author": "costin", "createdAt": "2020-11-05T18:01:25Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -432,9 +432,8 @@ public FieldExtraction resolve(Attribute attribute) {\n \n         // update proc (if needed)\n         if (qContainer.scalarFunctions().size() != scalarFunctions.size()) {\n-            Map<Attribute, Pipe> procs = new LinkedHashMap<>(qContainer.scalarFunctions());\n-            procs.put(attr, proc);\n-            qContainer = qContainer.withScalarProcessors(new AttributeMap<>(procs));\n+            qContainer = qContainer.withScalarProcessors(\n+                AttributeMap.<Pipe>builder().putAll(qContainer.scalarFunctions).put(attr, proc).build());", "originalCommit": "ff70ca7f9968596e9241045a6b4b3bdf764f4369", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\nindex 526551a43e1..64e4245b557 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\n\n@@ -433,7 +433,7 @@ public class QueryContainer {\n         // update proc (if needed)\n         if (qContainer.scalarFunctions().size() != scalarFunctions.size()) {\n             qContainer = qContainer.withScalarProcessors(\n-                AttributeMap.<Pipe>builder().putAll(qContainer.scalarFunctions).put(attr, proc).build());\n+                AttributeMap.builder(qContainer.scalarFunctions).put(attr, proc).build());\n         }\n \n         return new Tuple<>(qContainer, new ComputedRef(proc));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NzI0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518257246", "bodyText": "Please format only the touched lines - there's a plugin/setting for IDEA that does that.", "author": "costin", "createdAt": "2020-11-05T18:04:18Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -366,8 +366,8 @@ private FieldExtraction topHitFieldRef(FieldAttribute fieldAttr) {\n     private Tuple<QueryContainer, FieldExtraction> nestedHitFieldRef(FieldAttribute attr) {\n         String name = aliasName(attr);\n         Query q = rewriteToContainNestedField(query, attr.source(),\n-                attr.nestedParent().name(), name, \n-                SqlDataTypes.format(attr.field().getDataType()), \n+                attr.nestedParent().name(), name,\n+                SqlDataTypes.format(attr.field().getDataType()),", "originalCommit": "ff70ca7f9968596e9241045a6b4b3bdf764f4369", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MDA5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518280093", "bodyText": "For those such changes that touch code lines, it adds some more effort when checking the git history, or simply \"blame\". On the other hand, personally I have no problem when deleting whitespaces from empty lines, as long as it's in the touched files.", "author": "matriv", "createdAt": "2020-11-05T18:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NzI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a46db5822b51034f7b34f2ad8023b80f4749a8dc", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\nindex 526551a43e1..4684b4dfbb9 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\n\n@@ -366,8 +366,8 @@ public class QueryContainer {\n     private Tuple<QueryContainer, FieldExtraction> nestedHitFieldRef(FieldAttribute attr) {\n         String name = aliasName(attr);\n         Query q = rewriteToContainNestedField(query, attr.source(),\n-                attr.nestedParent().name(), name,\n-                SqlDataTypes.format(attr.field().getDataType()),\n+                attr.nestedParent().name(), name, \n+                SqlDataTypes.format(attr.field().getDataType()), \n                 SqlDataTypes.isFromDocValuesOnly(attr.field().getDataType()));\n \n         SearchHitFieldRef nestedFieldRef = new SearchHitFieldRef(name, null, attr.field().getDataType(), attr.field().isAggregatable(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1ODY5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518258697", "bodyText": "Extra space missing, should be (Alias) ne", "author": "costin", "createdAt": "2020-11-05T18:06:49Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +422,20 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n-            for (NamedExpression ne : a.aggregates()) {\n-                if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n-                }\n-            }\n \n-            if (aliasMap.isEmpty() == false) {\n-                Map<Attribute, Expression> newAliases = new LinkedHashMap<>(queryC.aliases());\n-                newAliases.putAll(aliasMap);\n-                queryC = queryC.withAliases(new AttributeMap<>(newAliases));\n+            List<Alias> aliases = a.aggregates().stream()\n+                .filter(ne -> ne instanceof Alias)\n+                .map(ne -> (Alias)ne)", "originalCommit": "ff70ca7f9968596e9241045a6b4b3bdf764f4369", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a46db5822b51034f7b34f2ad8023b80f4749a8dc", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\nindex 2851e29f2c5..196307c93dd 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\n\n@@ -424,15 +423,17 @@ class QueryFolder extends RuleExecutor<PhysicalPlan> {\n             // SELECT x AS a ... GROUP BY a\n             String id = null;\n \n-            List<Alias> aliases = a.aggregates().stream()\n-                .filter(ne -> ne instanceof Alias)\n-                .map(ne -> (Alias)ne)\n-                .collect(Collectors.toList());\n+            AttributeMap.Builder<Expression> aliases = AttributeMap.builder();\n+            for (NamedExpression ne : a.aggregates()) {\n+                if (ne instanceof Alias) {\n+                    Alias alias = (Alias) ne;\n+                    aliases.put(alias.toAttribute(), alias.child());\n+                }\n+            }\n \n             if (aliases.isEmpty() == false) {\n-                AttributeMap.Builder<Expression> aliasMapBuilder = AttributeMap.<Expression>builder().putAll(queryC.aliases());\n-                aliases.forEach(alias -> aliasMapBuilder.put(alias.toAttribute(), alias.child()));\n-                queryC = queryC.withAliases(aliasMapBuilder.build());\n+                aliases.putAll(queryC.aliases());\n+                queryC = queryC.withAliases(aliases.build());\n             }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjMxNA==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518262314", "bodyText": "The initial code was using a Map of attributes, the change uses a List of Aliases which are then converted into a Map.\nThe use of streams doesn't seem to simplify things either - instead of one iteration there are too.\nThis needs reworking - just create an AttributeMap with the children and then combine that with the existing aliases.", "author": "costin", "createdAt": "2020-11-05T18:12:53Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +422,20 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n-            for (NamedExpression ne : a.aggregates()) {\n-                if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n-                }\n-            }\n \n-            if (aliasMap.isEmpty() == false) {\n-                Map<Attribute, Expression> newAliases = new LinkedHashMap<>(queryC.aliases());\n-                newAliases.putAll(aliasMap);\n-                queryC = queryC.withAliases(new AttributeMap<>(newAliases));\n+            List<Alias> aliases = a.aggregates().stream()\n+                .filter(ne -> ne instanceof Alias)\n+                .map(ne -> (Alias)ne)\n+                .collect(Collectors.toList());", "originalCommit": "ff70ca7f9968596e9241045a6b4b3bdf764f4369", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NDk5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518264996", "bodyText": "Ok, now that there is no chance of overwrite that makes more sense.", "author": "palesz", "createdAt": "2020-11-05T18:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "a46db5822b51034f7b34f2ad8023b80f4749a8dc", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\nindex 2851e29f2c5..196307c93dd 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\n\n@@ -424,15 +423,17 @@ class QueryFolder extends RuleExecutor<PhysicalPlan> {\n             // SELECT x AS a ... GROUP BY a\n             String id = null;\n \n-            List<Alias> aliases = a.aggregates().stream()\n-                .filter(ne -> ne instanceof Alias)\n-                .map(ne -> (Alias)ne)\n-                .collect(Collectors.toList());\n+            AttributeMap.Builder<Expression> aliases = AttributeMap.builder();\n+            for (NamedExpression ne : a.aggregates()) {\n+                if (ne instanceof Alias) {\n+                    Alias alias = (Alias) ne;\n+                    aliases.put(alias.toAttribute(), alias.child());\n+                }\n+            }\n \n             if (aliases.isEmpty() == false) {\n-                AttributeMap.Builder<Expression> aliasMapBuilder = AttributeMap.<Expression>builder().putAll(queryC.aliases());\n-                aliases.forEach(alias -> aliasMapBuilder.put(alias.toAttribute(), alias.child()));\n-                queryC = queryC.withAliases(aliasMapBuilder.build());\n+                aliases.putAll(queryC.aliases());\n+                queryC = queryC.withAliases(aliases.build());\n             }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjQ3OA==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518262478", "bodyText": "Again, unneeded formatting.", "author": "costin", "createdAt": "2020-11-05T18:13:12Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java", "diffHunk": "@@ -171,7 +171,7 @@ public QueryContainer(Query query,\n \n             sortingColumns.add(new Tuple<>(Integer.valueOf(atIndex), comp));\n         }\n-        \n+", "originalCommit": "ff70ca7f9968596e9241045a6b4b3bdf764f4369", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTQ4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518265481", "bodyText": "Seems I have to disable the EditorConfig, otherwise IDEA is too clever the resets these settings.", "author": "palesz", "createdAt": "2020-11-05T18:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a46db5822b51034f7b34f2ad8023b80f4749a8dc", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\nindex 526551a43e1..4684b4dfbb9 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/container/QueryContainer.java\n\n@@ -171,7 +171,7 @@ public class QueryContainer {\n \n             sortingColumns.add(new Tuple<>(Integer.valueOf(atIndex), comp));\n         }\n-\n+        \n         return sortingColumns;\n     }\n \n"}}, {"oid": "a46db5822b51034f7b34f2ad8023b80f4749a8dc", "url": "https://github.com/elastic/elasticsearch/commit/a46db5822b51034f7b34f2ad8023b80f4749a8dc", "message": "PR suggestion and whitespace reverts", "committedDate": "2020-11-05T23:08:48Z", "type": "commit"}, {"oid": "280a6926a6d19577864357df940c98aa6e46614e", "url": "https://github.com/elastic/elasticsearch/commit/280a6926a6d19577864357df940c98aa6e46614e", "message": "Merge remote-tracking branch 'origin/master' into fix/56013-attributemap-cleanup", "committedDate": "2020-11-05T23:22:50Z", "type": "commit"}, {"oid": "62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1", "url": "https://github.com/elastic/elasticsearch/commit/62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1", "message": "Missed PR suggestion", "committedDate": "2020-11-05T23:26:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MDkyMA==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518640920", "bodyText": "A builder should just assemble a state, not question it's in-transit state.", "author": "costin", "createdAt": "2020-11-06T09:54:34Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java", "diffHunk": "@@ -392,8 +378,15 @@ private Builder() {}\n             return this;\n         }\n \n+        public boolean isEmpty() {\n+            return map.isEmpty();\n+        }\n+", "originalCommit": "62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60185351d40df3492910c235133b30d8e2c52d74", "chunk": "diff --git a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java\nindex ab58740f0c4..7490af4a64b 100644\n--- a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java\n+++ b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java\n\n@@ -378,10 +378,6 @@ public class AttributeMap<E> implements Map<Attribute, E> {\n             return this;\n         }\n \n-        public boolean isEmpty() {\n-            return map.isEmpty();\n-        }\n-\n         public AttributeMap<E> build() {\n             // copy, in case someone would do a .build, .put, .build sequence\n             AttributeMap<E> m = new AttributeMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MTkxMw==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518641913", "bodyText": "Shouldn't be called on a builder. Optimizations are good but in this case they simply get in the way.\nCreate two AttributeMaps if needed.", "author": "costin", "createdAt": "2020-11-06T09:56:15Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +421,22 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n+\n+            AttributeMap.Builder<Expression> aliases = AttributeMap.builder();\n             for (NamedExpression ne : a.aggregates()) {\n                 if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n+                    Alias alias = (Alias) ne;\n+                    aliases.put(alias.toAttribute(), alias.child());\n                 }\n             }\n \n-            if (aliasMap.isEmpty() == false) {\n-                Map<Attribute, Expression> newAliases = new LinkedHashMap<>(queryC.aliases());\n-                newAliases.putAll(aliasMap);\n-                queryC = queryC.withAliases(new AttributeMap<>(newAliases));\n+            if (aliases.isEmpty() == false) {\n+                aliases.putAll(queryC.aliases());\n+                queryC = queryC.withAliases(aliases.build());", "originalCommit": "62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60185351d40df3492910c235133b30d8e2c52d74", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\nindex 196307c93dd..86da3948eaf 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\n\n@@ -426,12 +426,11 @@ class QueryFolder extends RuleExecutor<PhysicalPlan> {\n             AttributeMap.Builder<Expression> aliases = AttributeMap.builder();\n             for (NamedExpression ne : a.aggregates()) {\n                 if (ne instanceof Alias) {\n-                    Alias alias = (Alias) ne;\n-                    aliases.put(alias.toAttribute(), alias.child());\n+                    aliases.put(ne.toAttribute(), ((Alias) ne).child());\n                 }\n             }\n \n-            if (aliases.isEmpty() == false) {\n+            if (aliases.build().isEmpty() == false) {\n                 aliases.putAll(queryC.aliases());\n                 queryC = queryC.withAliases(aliases.build());\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MjU4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r518642589", "bodyText": "This change is not needed - there's no value in holding the alias reference.", "author": "costin", "createdAt": "2020-11-06T09:57:24Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java", "diffHunk": "@@ -421,20 +421,22 @@ static EsQueryExec fold(AggregateExec a, EsQueryExec exec) {\n \n             // track aliases defined in the SELECT and used inside GROUP BY\n             // SELECT x AS a ... GROUP BY a\n-            Map<Attribute, Expression> aliasMap = new LinkedHashMap<>();\n             String id = null;\n+\n+            AttributeMap.Builder<Expression> aliases = AttributeMap.builder();\n             for (NamedExpression ne : a.aggregates()) {\n                 if (ne instanceof Alias) {\n-                    aliasMap.put(ne.toAttribute(), ((Alias) ne).child());\n+                    Alias alias = (Alias) ne;\n+                    aliases.put(alias.toAttribute(), alias.child());", "originalCommit": "62f01c1b491d8d70f7bf5d671e8ce1b1ffa922f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60185351d40df3492910c235133b30d8e2c52d74", "chunk": "diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\nindex 196307c93dd..86da3948eaf 100644\n--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\n+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryFolder.java\n\n@@ -426,12 +426,11 @@ class QueryFolder extends RuleExecutor<PhysicalPlan> {\n             AttributeMap.Builder<Expression> aliases = AttributeMap.builder();\n             for (NamedExpression ne : a.aggregates()) {\n                 if (ne instanceof Alias) {\n-                    Alias alias = (Alias) ne;\n-                    aliases.put(alias.toAttribute(), alias.child());\n+                    aliases.put(ne.toAttribute(), ((Alias) ne).child());\n                 }\n             }\n \n-            if (aliases.isEmpty() == false) {\n+            if (aliases.build().isEmpty() == false) {\n                 aliases.putAll(queryC.aliases());\n                 queryC = queryC.withAliases(aliases.build());\n             }\n"}}, {"oid": "60185351d40df3492910c235133b30d8e2c52d74", "url": "https://github.com/elastic/elasticsearch/commit/60185351d40df3492910c235133b30d8e2c52d74", "message": "PR suggestions", "committedDate": "2020-11-06T14:06:31Z", "type": "commit"}, {"oid": "b44b0600ead8c215a9e807719ce48a6c59676878", "url": "https://github.com/elastic/elasticsearch/commit/b44b0600ead8c215a9e807719ce48a6c59676878", "message": "Merge remote-tracking branch 'origin/master' into fix/56013-attributemap-cleanup", "committedDate": "2020-11-06T15:39:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NTU4MA==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r519595580", "bodyText": "Why not return the map directly? AttributeMap is immutable.\nTo guarantee that the builder is not used after build() is called, a flag could be used instead of copying things over.", "author": "costin", "createdAt": "2020-11-09T07:21:36Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java", "diffHunk": "@@ -393,7 +379,10 @@ private Builder() {}\n         }\n \n         public AttributeMap<E> build() {\n-            return new AttributeMap<>(map);\n+            // copy, in case someone would do a .build, .put, .build sequence\n+            AttributeMap<E> m = new AttributeMap<>();\n+            m.addAll(map);\n+            return m;", "originalCommit": "b44b0600ead8c215a9e807719ce48a6c59676878", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5ODE1MA==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r519998150", "bodyText": "Changed, won't copy on .build(), only will copy once on the first .put() after a .build().", "author": "palesz", "createdAt": "2020-11-09T17:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NTU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyNjg1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/64664#discussion_r520626857", "bodyText": "Removed the defensive copy completely: c4e3fc4", "author": "palesz", "createdAt": "2020-11-10T14:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NTU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "272624e0c275c830d064b9929bb48d80d21dac83", "chunk": "diff --git a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java\nindex 7490af4a64b..aec6102c6d9 100644\n--- a/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java\n+++ b/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/AttributeMap.java\n\n@@ -364,24 +364,35 @@ public class AttributeMap<E> implements Map<Attribute, E> {\n     }\n \n     public static class Builder<E> {\n-        private final AttributeMap<E> map = new AttributeMap<>();\n+        private AttributeMap<E> map = null;\n+        private AttributeMap<E> previouslyBuiltMap = null;\n \n         private Builder() {}\n \n+        private AttributeMap<E> map() {\n+            if (map == null) {\n+                map = new AttributeMap<>();\n+                if (previouslyBuiltMap != null) {\n+                    map.addAll(previouslyBuiltMap);\n+                }\n+            }\n+            return map;\n+        }\n+\n         public Builder<E> put(Attribute attr, E value) {\n-            map.add(attr, value);\n+            map().add(attr, value);\n             return this;\n         }\n \n         public Builder<E> putAll(AttributeMap<E> m) {\n-            map.addAll(m);\n+            map().addAll(m);\n             return this;\n         }\n \n         public AttributeMap<E> build() {\n-            // copy, in case someone would do a .build, .put, .build sequence\n-            AttributeMap<E> m = new AttributeMap<>();\n-            m.addAll(map);\n+            AttributeMap<E> m = map();\n+            previouslyBuiltMap = m;\n+            map = null;\n             return m;\n         }\n     }\n"}}, {"oid": "272624e0c275c830d064b9929bb48d80d21dac83", "url": "https://github.com/elastic/elasticsearch/commit/272624e0c275c830d064b9929bb48d80d21dac83", "message": "Change behaviour: do not copy on each `build()`", "committedDate": "2020-11-09T16:43:02Z", "type": "commit"}, {"oid": "ee79cbaad035b3efd8daa5697b91afe083557f86", "url": "https://github.com/elastic/elasticsearch/commit/ee79cbaad035b3efd8daa5697b91afe083557f86", "message": "Merge remote-tracking branch 'origin/master' into fix/56013-attributemap-cleanup", "committedDate": "2020-11-09T16:43:21Z", "type": "commit"}]}