{"pr_number": 63634, "pr_title": "Convert flaky yml tests to EsRestTestCases", "pr_createdAt": "2020-10-13T17:16:36Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63634", "timeline": [{"oid": "00e36279f3d3d98dd492a234e5d619892fe1642e", "url": "https://github.com/elastic/elasticsearch/commit/00e36279f3d3d98dd492a234e5d619892fe1642e", "message": "Remove \"Test Basic Move to Step\"\n\nThis use case is covered in the `TimeseriesLifecycleActionIT` in several\ntests like: `testMoveToAllocateStep` or `testMoveToRolloverStep`", "committedDate": "2020-10-13T17:08:46Z", "type": "commit"}, {"oid": "3552a1e303573c7670ee1299283f97c7535b2ebd", "url": "https://github.com/elastic/elasticsearch/commit/3552a1e303573c7670ee1299283f97c7535b2ebd", "message": "Conver move to invalid next step to ESRestTestCase\n\nThe yml \"Test Invalid Move To Step With Invalid Next Step\" worked based on\nassuming the current step is a particular one. As we can't control the\ntiming of ILM and we can't busy assert in yml test, this converts the\ntest to a java test and makes use of `assertBusy`", "committedDate": "2020-10-13T17:08:46Z", "type": "commit"}, {"oid": "b52964e3b3ea1f166432281d52d699b8b9826742", "url": "https://github.com/elastic/elasticsearch/commit/b52964e3b3ea1f166432281d52d699b8b9826742", "message": "Convert explain lifecycle yml tests to java tests\n\nThis converts the explain lifecycle yml tests that depende on ILM having run\nat least once to a java integration test that makes use of `assertBusy`.", "committedDate": "2020-10-13T17:08:46Z", "type": "commit"}, {"oid": "938565fce2c1670f7aec6c93a9fe5bb4873a7d31", "url": "https://github.com/elastic/elasticsearch/commit/938565fce2c1670f7aec6c93a9fe5bb4873a7d31", "message": "Move `move-to-step` api tests into own class", "committedDate": "2020-10-13T17:08:46Z", "type": "commit"}, {"oid": "24cbd490c11d5618269eb6466f1aa5a44b8e7409", "url": "https://github.com/elastic/elasticsearch/commit/24cbd490c11d5618269eb6466f1aa5a44b8e7409", "message": "Extract the ILM explain tests into own class", "committedDate": "2020-10-13T17:08:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjE0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63634#discussion_r504166141", "bodyText": "Maybe instead of adding a helper (it's also strange that it's called \"NoAlias\" since the default should always be no alias), we should change the other createIndexWithSettings to make the alias @Nullable?", "author": "dakrone", "createdAt": "2020-10-13T18:20:05Z", "path": "x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java", "diffHunk": "@@ -228,6 +242,15 @@ public static void createIndexWithSettings(RestClient client, String index, Stri\n         ensureGreen(index);\n     }\n \n+    public static void createIndexWithSettingsNoAlias(RestClient client, String index, Settings.Builder settings) throws IOException {", "originalCommit": "24cbd490c11d5618269eb6466f1aa5a44b8e7409", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1Mzg1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63634#discussion_r504553856", "bodyText": "I've renamed the method createIndexWithSettings (c399088) with signature:\n    public static void createIndexWithSettings(RestClient client, String index, Settings.Builder settings) throws IOException {\n\nI think piggybacking this use case on the helper that has the alias and useWriteIndex parameters by making both @Nullable over complicates the logic (and we'd end up passing 2 null parameters).\nWhat do you think?", "author": "andreidan", "createdAt": "2020-10-14T09:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c399088d20e07e3d116c211657c7c297bc4133f5", "chunk": "diff --git a/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java b/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java\nindex fa3081ce26f..cb55434c389 100644\n--- a/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java\n+++ b/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java\n\n@@ -242,10 +242,9 @@ public final class TimeSeriesRestDriver {\n         ensureGreen(index);\n     }\n \n-    public static void createIndexWithSettingsNoAlias(RestClient client, String index, Settings.Builder settings) throws IOException {\n+    public static void createIndexWithSettings(RestClient client, String index, Settings.Builder settings) throws IOException {\n         Request request = new Request(\"PUT\", \"/\" + index);\n-        request.setJsonEntity(\"{\\n \\\"settings\\\": \" + Strings.toString(settings.build())\n-            + \"}\");\n+        request.setJsonEntity(\"{\\n \\\"settings\\\": \" + Strings.toString(settings.build()) + \"}\");\n         client.performRequest(request);\n         // wait for the shards to initialize\n         ensureGreen(index);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NjQ5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/63634#discussion_r504166497", "bodyText": "Super minor, but probably no need for a newline here :)", "author": "dakrone", "createdAt": "2020-10-13T18:20:44Z", "path": "x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java", "diffHunk": "@@ -228,6 +242,15 @@ public static void createIndexWithSettings(RestClient client, String index, Stri\n         ensureGreen(index);\n     }\n \n+    public static void createIndexWithSettingsNoAlias(RestClient client, String index, Settings.Builder settings) throws IOException {\n+        Request request = new Request(\"PUT\", \"/\" + index);\n+        request.setJsonEntity(\"{\\n \\\"settings\\\": \" + Strings.toString(settings.build())\n+            + \"}\");", "originalCommit": "24cbd490c11d5618269eb6466f1aa5a44b8e7409", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c399088d20e07e3d116c211657c7c297bc4133f5", "chunk": "diff --git a/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java b/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java\nindex fa3081ce26f..cb55434c389 100644\n--- a/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java\n+++ b/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/TimeSeriesRestDriver.java\n\n@@ -242,10 +242,9 @@ public final class TimeSeriesRestDriver {\n         ensureGreen(index);\n     }\n \n-    public static void createIndexWithSettingsNoAlias(RestClient client, String index, Settings.Builder settings) throws IOException {\n+    public static void createIndexWithSettings(RestClient client, String index, Settings.Builder settings) throws IOException {\n         Request request = new Request(\"PUT\", \"/\" + index);\n-        request.setJsonEntity(\"{\\n \\\"settings\\\": \" + Strings.toString(settings.build())\n-            + \"}\");\n+        request.setJsonEntity(\"{\\n \\\"settings\\\": \" + Strings.toString(settings.build()) + \"}\");\n         client.performRequest(request);\n         // wait for the shards to initialize\n         ensureGreen(index);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNDMwMA==", "url": "https://github.com/elastic/elasticsearch/pull/63634#discussion_r504204300", "bodyText": "I think we could probably put this one is a second assertBusy so that we don't end up doing two explains when we only need to do one", "author": "dakrone", "createdAt": "2020-10-13T19:29:56Z", "path": "x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/ilm/ExplainLifecycleIT.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ilm;\n+\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.elasticsearch.xpack.core.ilm.DeleteAction;\n+import org.elasticsearch.xpack.core.ilm.LifecycleAction;\n+import org.elasticsearch.xpack.core.ilm.LifecyclePolicy;\n+import org.elasticsearch.xpack.core.ilm.LifecycleSettings;\n+import org.elasticsearch.xpack.core.ilm.Phase;\n+import org.elasticsearch.xpack.core.ilm.RolloverAction;\n+import org.elasticsearch.xpack.core.ilm.ShrinkAction;\n+import org.junit.Before;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.createFullPolicy;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.createIndexWithSettings;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.createIndexWithSettingsNoAlias;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.createNewSingletonPolicy;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.explain;\n+import static org.elasticsearch.xpack.TimeSeriesRestDriver.explainIndex;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class ExplainLifecycleIT extends ESRestTestCase {\n+    private static final Logger logger = LogManager.getLogger(ExplainLifecycleIT.class);\n+    private static final String FAILED_STEP_RETRY_COUNT_FIELD = \"failed_step_retry_count\";\n+    private static final String IS_AUTO_RETRYABLE_ERROR_FIELD = \"is_auto_retryable_error\";\n+\n+    private String policy;\n+    private String index;\n+    private String alias;\n+\n+    @Before\n+    public void refreshIndex() {\n+        index = \"index-\" + randomAlphaOfLength(10).toLowerCase(Locale.ROOT);\n+        policy = \"policy-\" + randomAlphaOfLength(5);\n+        alias = \"alias-\" + randomAlphaOfLength(5);\n+    }\n+\n+    public void testExplainFilters() throws Exception {\n+        String goodIndex = index + \"-good-000001\";\n+        String errorIndex = index + \"-error\";\n+        String nonexistantPolicyIndex = index + \"-nonexistant-policy\";\n+        String unmanagedIndex = index + \"-unmanaged\";\n+\n+        createFullPolicy(client(), policy, TimeValue.ZERO);\n+\n+        {\n+            // Create a \"shrink-only-policy\"\n+            Map<String, LifecycleAction> warmActions = new HashMap<>();\n+            warmActions.put(ShrinkAction.NAME, new ShrinkAction(17));\n+            Map<String, Phase> phases = new HashMap<>();\n+            phases.put(\"warm\", new Phase(\"warm\", TimeValue.ZERO, warmActions));\n+            LifecyclePolicy lifecyclePolicy = new LifecyclePolicy(\"shrink-only-policy\", phases);\n+            // PUT policy\n+            XContentBuilder builder = jsonBuilder();\n+            lifecyclePolicy.toXContent(builder, null);\n+            final StringEntity entity = new StringEntity(\n+                \"{ \\\"policy\\\":\" + Strings.toString(builder) + \"}\", ContentType.APPLICATION_JSON);\n+            Request request = new Request(\"PUT\", \"_ilm/policy/shrink-only-policy\");\n+            request.setEntity(entity);\n+            assertOK(client().performRequest(request));\n+        }\n+\n+        createIndexWithSettings(client(), goodIndex, alias, Settings.builder()\n+            .put(RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, alias)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(LifecycleSettings.LIFECYCLE_NAME, policy)\n+        );\n+        createIndexWithSettingsNoAlias(client(), errorIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(LifecycleSettings.LIFECYCLE_NAME, \"shrink-only-policy\")\n+        );\n+        createIndexWithSettingsNoAlias(client(), nonexistantPolicyIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(LifecycleSettings.LIFECYCLE_NAME, randomValueOtherThan(policy, () -> randomAlphaOfLengthBetween(3, 10))));\n+        createIndexWithSettingsNoAlias(client(), unmanagedIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0));\n+\n+        assertBusy(() -> {\n+            Map<String, Map<String, Object>> explainResponse = explain(client(), index + \"*\", false, false);\n+            assertNotNull(explainResponse);\n+            assertThat(explainResponse,\n+                allOf(hasKey(goodIndex), hasKey(errorIndex), hasKey(nonexistantPolicyIndex), hasKey(unmanagedIndex)));\n+\n+            Map<String, Map<String, Object>> onlyManagedResponse = explain(client(), index + \"*\", false, true);\n+            assertNotNull(onlyManagedResponse);\n+            assertThat(onlyManagedResponse, allOf(hasKey(goodIndex), hasKey(errorIndex), hasKey(nonexistantPolicyIndex)));\n+            assertThat(onlyManagedResponse, not(hasKey(unmanagedIndex)));\n+\n+            Map<String, Map<String, Object>> onlyErrorsResponse = explain(client(), index + \"*\", true, true);\n+            assertNotNull(onlyErrorsResponse);\n+            assertThat(onlyErrorsResponse, allOf(hasKey(errorIndex), hasKey(nonexistantPolicyIndex)));\n+            assertThat(onlyErrorsResponse, allOf(not(hasKey(goodIndex)), not(hasKey(unmanagedIndex))));\n+        });\n+    }\n+\n+    public void testExplainIndexContainsAutomaticRetriesInformation() throws Exception {\n+        createFullPolicy(client(), policy, TimeValue.ZERO);\n+\n+        // create index without alias so the rollover action fails and is retried\n+        createIndexWithSettingsNoAlias(client(), index, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(LifecycleSettings.LIFECYCLE_NAME, policy)\n+        );\n+\n+        assertBusy(() -> {\n+            Map<String, Object> explainIndex = explainIndex(client(), index);\n+            assertThat((Integer) explainIndex.get(FAILED_STEP_RETRY_COUNT_FIELD), greaterThanOrEqualTo(1));\n+            assertThat(explainIndex.get(IS_AUTO_RETRYABLE_ERROR_FIELD), is(true));\n+        });\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testExplainIndicesWildcard() throws Exception {\n+        createNewSingletonPolicy(client(), policy, \"delete\", new DeleteAction(), TimeValue.timeValueDays(100));\n+        String firstIndex = this.index + \"-first\";\n+        String secondIndex = this.index + \"-second\";\n+        String unmanagedIndex = this.index + \"-unmanaged\";\n+        String indexWithMissingPolicy = this.index + \"-missing_policy\";\n+        createIndexWithSettings(client(), firstIndex, alias + firstIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(LifecycleSettings.LIFECYCLE_NAME, policy));\n+        createIndexWithSettings(client(), secondIndex, alias + secondIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(LifecycleSettings.LIFECYCLE_NAME, policy));\n+        createIndexWithSettings(client(), unmanagedIndex, alias + unmanagedIndex, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0));\n+        String missingPolicyName = \"missing_policy_\";\n+        createIndexWithSettings(client(), indexWithMissingPolicy, alias + indexWithMissingPolicy, Settings.builder()\n+            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+            .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+            .put(LifecycleSettings.LIFECYCLE_NAME, missingPolicyName));\n+\n+        assertBusy(() -> {\n+            Map<String, Map<String, Object>> explain = explain(client(), this.index + \"*\", false, false);\n+            assertManagedIndex(explain.get(firstIndex));\n+            assertManagedIndex(explain.get(secondIndex));\n+            assertUnmanagedIndex(explain.get(unmanagedIndex));\n+\n+            Map<String, Object> explainIndexWithMissingPolicy = explain.get(indexWithMissingPolicy);", "originalCommit": "24cbd490c11d5618269eb6466f1aa5a44b8e7409", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0OTQ3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/63634#discussion_r504549475", "bodyText": "There's only one explain API call in this assertBusy. I believe it's ok to leave it in one assertBusy call.", "author": "andreidan", "createdAt": "2020-10-14T09:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNDMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "c399088d20e07e3d116c211657c7c297bc4133f5", "chunk": "diff --git a/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/ilm/ExplainLifecycleIT.java b/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/ilm/ExplainLifecycleIT.java\nindex 41b712bd234..c1e5b5abcd7 100644\n--- a/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/ilm/ExplainLifecycleIT.java\n+++ b/x-pack/plugin/ilm/qa/multi-node/src/javaRestTest/java/org/elasticsearch/xpack/ilm/ExplainLifecycleIT.java\n\n@@ -33,7 +33,6 @@ import java.util.Map;\n import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n import static org.elasticsearch.xpack.TimeSeriesRestDriver.createFullPolicy;\n import static org.elasticsearch.xpack.TimeSeriesRestDriver.createIndexWithSettings;\n-import static org.elasticsearch.xpack.TimeSeriesRestDriver.createIndexWithSettingsNoAlias;\n import static org.elasticsearch.xpack.TimeSeriesRestDriver.createNewSingletonPolicy;\n import static org.elasticsearch.xpack.TimeSeriesRestDriver.explain;\n import static org.elasticsearch.xpack.TimeSeriesRestDriver.explainIndex;\n"}}, {"oid": "c399088d20e07e3d116c211657c7c297bc4133f5", "url": "https://github.com/elastic/elasticsearch/commit/c399088d20e07e3d116c211657c7c297bc4133f5", "message": "Rename createIndexWithSettingsNoAlias", "committedDate": "2020-10-14T10:01:25Z", "type": "commit"}, {"oid": "166111ec31dbc825043cbb6f1d642bc8e71bb833", "url": "https://github.com/elastic/elasticsearch/commit/166111ec31dbc825043cbb6f1d642bc8e71bb833", "message": "Merge branch 'master' into convert-yml-tests", "committedDate": "2020-10-26T15:14:56Z", "type": "commit"}, {"oid": "2f0eb5b940590d45a5cf21af43a55a8eccb8b050", "url": "https://github.com/elastic/elasticsearch/commit/2f0eb5b940590d45a5cf21af43a55a8eccb8b050", "message": "Merge branch 'master' into convert-yml-tests", "committedDate": "2020-10-27T07:14:53Z", "type": "commit"}]}