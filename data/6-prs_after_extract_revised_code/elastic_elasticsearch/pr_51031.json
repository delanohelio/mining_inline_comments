{"pr_number": 51031, "pr_title": "Add analysis components and mapping types to the usage API.", "pr_createdAt": "2020-01-15T11:08:07Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51031", "timeline": [{"oid": "cb1297bb701db1af1459fc770deda3d5ba7ac2cb", "url": "https://github.com/elastic/elasticsearch/commit/cb1297bb701db1af1459fc770deda3d5ba7ac2cb", "message": "Add analysis components and mapping types to the usage API.\n\nKnowing about used analysis components and mapping types would be incredibly\nuseful in order to know which ones may be deprecated or should get more love.\n\nSome field types also act as a proxy to know about feature usage of some APIs\nlike the `percolator` or `completion` fields types for percolation and the\ncompletion suggester, respectively.", "committedDate": "2020-01-15T11:05:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg1MjEzNw==", "url": "https://github.com/elastic/elasticsearch/pull/51031#discussion_r366852137", "bodyText": "Should we also extract the analyzers set on the fields ? This could be useful to check the usage of the pre-built analyzers ?", "author": "jimczi", "createdAt": "2020-01-15T12:35:31Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.oss;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.protocol.xpack.XPackUsageRequest;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureAction;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureResponse;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureTransportAction;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class IndexUsageTransportAction extends XPackUsageFeatureTransportAction {\n+\n+    @Inject\n+    public IndexUsageTransportAction(TransportService transportService, ClusterService clusterService, ThreadPool threadPool,\n+                                     ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {\n+        super(XPackUsageFeatureAction.INDEX.name(), transportService, clusterService, threadPool, actionFilters,\n+            indexNameExpressionResolver);\n+    }\n+\n+    @Override\n+    protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n+                                   ActionListener<XPackUsageFeatureResponse> listener) {\n+\n+        final Set<String> usedFieldTypes = new HashSet<>();\n+        final Set<String> usedCharFilters = new HashSet<>();\n+        final Set<String> usedTokenizers = new HashSet<>();\n+        final Set<String> usedTokenFilters = new HashSet<>();\n+        final Set<String> usedAnalyzers = new HashSet<>();\n+\n+        for (IndexMetaData indexMetaData : state.metaData()) {\n+            MappingMetaData mappingMetaData = indexMetaData.mapping();\n+            if (mappingMetaData != null) {\n+                populateFieldTypesFromObject(mappingMetaData.sourceAsMap(), usedFieldTypes);", "originalCommit": "cb1297bb701db1af1459fc770deda3d5ba7ac2cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c6278f621c8e808ac7c887c5cd3990dabd99c79", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java\nindex 273c1d268fb..dd0e002c93e 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java\n\n@@ -27,6 +27,7 @@ import java.util.Collection;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Consumer;\n \n public class IndexUsageTransportAction extends XPackUsageFeatureTransportAction {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg1MjUzNA==", "url": "https://github.com/elastic/elasticsearch/pull/51031#discussion_r366852534", "bodyText": "Should we also extract the pre-built tokenizer, filters and char_filters from custom analyzers ?", "author": "jimczi", "createdAt": "2020-01-15T12:36:35Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.oss;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.protocol.xpack.XPackUsageRequest;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureAction;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureResponse;\n+import org.elasticsearch.xpack.core.action.XPackUsageFeatureTransportAction;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class IndexUsageTransportAction extends XPackUsageFeatureTransportAction {\n+\n+    @Inject\n+    public IndexUsageTransportAction(TransportService transportService, ClusterService clusterService, ThreadPool threadPool,\n+                                     ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {\n+        super(XPackUsageFeatureAction.INDEX.name(), transportService, clusterService, threadPool, actionFilters,\n+            indexNameExpressionResolver);\n+    }\n+\n+    @Override\n+    protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n+                                   ActionListener<XPackUsageFeatureResponse> listener) {\n+\n+        final Set<String> usedFieldTypes = new HashSet<>();\n+        final Set<String> usedCharFilters = new HashSet<>();\n+        final Set<String> usedTokenizers = new HashSet<>();\n+        final Set<String> usedTokenFilters = new HashSet<>();\n+        final Set<String> usedAnalyzers = new HashSet<>();\n+\n+        for (IndexMetaData indexMetaData : state.metaData()) {\n+            MappingMetaData mappingMetaData = indexMetaData.mapping();\n+            if (mappingMetaData != null) {\n+                populateFieldTypesFromObject(mappingMetaData.sourceAsMap(), usedFieldTypes);\n+            }\n+\n+            Settings indexSettings = indexMetaData.getSettings();\n+\n+            Map<String, Settings> charFilterSettings = indexSettings.getGroups(\"index.analysis.char_filter\");\n+            aggregateAnalysisTypes(charFilterSettings.values(), usedCharFilters);\n+\n+            Map<String, Settings> tokenizerSettings = indexSettings.getGroups(\"index.analysis.tokenizer\");\n+            aggregateAnalysisTypes(tokenizerSettings.values(), usedTokenizers);\n+\n+            Map<String, Settings> tokenFilterSettings = indexSettings.getGroups(\"index.analysis.filter\");\n+            aggregateAnalysisTypes(tokenFilterSettings.values(), usedTokenFilters);\n+\n+            Map<String, Settings> analyzerSettings = indexSettings.getGroups(\"index.analysis.analyzer\");\n+            aggregateAnalysisTypes(analyzerSettings.values(), usedAnalyzers);", "originalCommit": "cb1297bb701db1af1459fc770deda3d5ba7ac2cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c6278f621c8e808ac7c887c5cd3990dabd99c79", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java\nindex 273c1d268fb..dd0e002c93e 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/oss/IndexUsageTransportAction.java\n\n@@ -27,6 +27,7 @@ import java.util.Collection;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Consumer;\n \n public class IndexUsageTransportAction extends XPackUsageFeatureTransportAction {\n \n"}}, {"oid": "5c6278f621c8e808ac7c887c5cd3990dabd99c79", "url": "https://github.com/elastic/elasticsearch/commit/5c6278f621c8e808ac7c887c5cd3990dabd99c79", "message": "Review", "committedDate": "2020-01-15T15:18:21Z", "type": "commit"}, {"oid": "5214ae158da1342c9e56e11951024af9dfd7b99b", "url": "https://github.com/elastic/elasticsearch/commit/5214ae158da1342c9e56e11951024af9dfd7b99b", "message": "Merge branch 'master' into usage_mappings_analysis", "committedDate": "2020-01-15T15:46:12Z", "type": "commit"}]}