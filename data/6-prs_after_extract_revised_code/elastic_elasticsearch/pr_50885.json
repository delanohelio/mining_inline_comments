{"pr_number": 50885, "pr_title": "Add Get Source API to the HLRC", "pr_createdAt": "2020-01-11T13:17:06Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50885", "timeline": [{"oid": "c79ed70cc3fba4b9502063ea8c9a7b17ee3e0d53", "url": "https://github.com/elastic/elasticsearch/commit/c79ed70cc3fba4b9502063ea8c9a7b17ee3e0d53", "message": "Add Get Source API to the HLRC\n\nrelates: #47678", "committedDate": "2020-01-12T11:49:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r365838562", "bodyText": "I think this api needs to use its own Request and Response class.\nAlthough the get source api support almost all request parameters that the get api support, the get source api doesn't support stored_fields, version and version_type. The latter two may be supported in the future, but I don't see stored_fields ever be supported (that retrieves something that isn't part of the _source). Also I see that the get api may support doc_value_fields option to and this is unrelated to the _source like stored_fields is. Therefor I think that this api should have its own high level client side request class.\nI also think that this api should have a dedicated response class, that just includes a Map<String, Object> field for the source instead of the generic RestResponse class.", "author": "martijnvg", "createdAt": "2020-01-13T14:39:26Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java", "diffHunk": "@@ -860,6 +863,32 @@ public final Cancellable existsSourceAsync(GetRequest getRequest, RequestOptions\n             RestHighLevelClient::convertExistsResponse, listener, emptySet());\n     }\n \n+    /**\n+     * Retrieves the source field only of a document using GetSource API.\n+     * See <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#_source\">Get Source API\n+     * on elastic.co</a>\n+     * @param getRequest the request\n+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n+     * @return the response\n+     */\n+    public RestResponse getSource(GetRequest getRequest, RequestOptions options) throws IOException {", "originalCommit": "c79ed70cc3fba4b9502063ea8c9a7b17ee3e0d53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0NTk2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r365845967", "bodyText": "Server's RestGetSourceAction returns BytesRestResponse object. Actually HLRC getSouce method returns the same, I just used more generic class for the method signature. Will it be ok to replace RestResponse with BytesRestResponse, or Map<String, Object> is preferable anyway?", "author": "timoninmaxim", "createdAt": "2020-01-13T14:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1MjczMw==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r365852733", "bodyText": "Server's RestGetSourceAction returns BytesRestResponse object.\n\nSo do many RestAction classes, it is a common way for rest actions to serialize the response to a byte array, so that the networking layer can send a response.\n\nWill it be ok to replace RestResponse with BytesRestResponse, or Map<String, Object> is preferable anyway?\n\nI think if the getSource(...) methods return a Map<String, Object> then that is ok too, because _source is the only thing that this API returns and the exists(...) and existsSource(...) methods in RestHighLevelClient class also return just a boolean.", "author": "martijnvg", "createdAt": "2020-01-13T15:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE5NDg0OA==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r366194848", "bodyText": "@martijnvg thanks for the clarification! Could I use new GetSourceRequest class with exists(...) method too as under the hood they use the same server's API? But it's already released with v6.6.0 (#34519), are we able break compatibility here?", "author": "timoninmaxim", "createdAt": "2020-01-14T08:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwNDMxMA==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r366204310", "bodyText": "Let's do that in a separate PR. We can then deprecate the old methods in favour for the new methods.", "author": "martijnvg", "createdAt": "2020-01-14T08:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0MDA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r366340049", "bodyText": "Ok, I've committed the requested change. Should I create an issue for change exists(...) or it's possible to link to this conversation in new PR?", "author": "timoninmaxim", "createdAt": "2020-01-14T13:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2NjE0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r366366146", "bodyText": "No need to create an issue for this. You can just mention it in a new PR.", "author": "martijnvg", "createdAt": "2020-01-14T14:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyNTQxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r373825419", "bodyText": "@martijnvg Create PR for that #51789", "author": "timoninmaxim", "createdAt": "2020-02-02T07:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3c3ed1e627433ca45a488d1261aed4c91e5b64a1", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java\nindex fb58a41f3e1..d5c745414b4 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java\n\n@@ -871,8 +870,9 @@ public class RestHighLevelClient implements Closeable {\n      * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized\n      * @return the response\n      */\n-    public RestResponse getSource(GetRequest getRequest, RequestOptions options) throws IOException {\n-        return performRequest(getRequest, RequestConverters::getSource, options, RestHighLevelClient::convertBytesResponse, emptySet());\n+    public GetSourceResponse getSource(GetSourceRequest getRequest, RequestOptions options) throws IOException {\n+        return performRequestAndParseEntity(getRequest, RequestConverters::getSource, options,\n+            GetSourceResponse::fromXContent, emptySet());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2NDA0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r366364042", "bodyText": "Maybe add a test for this in RequestConvertersTests?", "author": "martijnvg", "createdAt": "2020-01-14T14:20:54Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java", "diffHunk": "@@ -275,14 +276,30 @@ private static Request getStyleRequest(String method, GetRequest getRequest) {\n     }\n \n     static Request sourceExists(GetRequest getRequest) {\n-        String endpoint = endpoint(getRequest.index(), \"_source\", getRequest.id());\n-        Request request = new Request(HttpHead.METHOD_NAME, endpoint);\n         Params parameters = new Params();\n         parameters.withPreference(getRequest.preference());\n         parameters.withRouting(getRequest.routing());\n         parameters.withRefresh(getRequest.refresh());\n         parameters.withRealtime(getRequest.realtime());\n-        // Version params are not currently supported by the source exists API so are not passed\n+        parameters.withFetchSourceContext(getRequest.fetchSourceContext());\n+        // Version params are not currently supported by the _source API so are not passed\n+\n+        String endpoint = endpoint(getRequest.index(), \"_source\", getRequest.id());\n+        Request request = new Request(HttpHead.METHOD_NAME, endpoint);\n+        request.addParameters(parameters.asMap());\n+        return request;\n+    }\n+\n+    static Request getSource(GetSourceRequest getSourceRequest) {", "originalCommit": "b795421c243281531e7fc2ec6ca9b3d7d8597013", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1689b36d0005a29d865780290cf3173636755258", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java\nindex 63132e0c266..10df75c1f58 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java\n\n@@ -276,34 +275,30 @@ final class RequestConverters {\n     }\n \n     static Request sourceExists(GetRequest getRequest) {\n-        Params parameters = new Params();\n-        parameters.withPreference(getRequest.preference());\n-        parameters.withRouting(getRequest.routing());\n-        parameters.withRefresh(getRequest.refresh());\n-        parameters.withRealtime(getRequest.realtime());\n-        parameters.withFetchSourceContext(getRequest.fetchSourceContext());\n-        // Version params are not currently supported by the _source API so are not passed\n-\n         String endpoint = endpoint(getRequest.index(), \"_source\", getRequest.id());\n         Request request = new Request(HttpHead.METHOD_NAME, endpoint);\n-        request.addParameters(parameters.asMap());\n+        request.addParameters(sourceParams(getRequest).asMap());\n         return request;\n     }\n \n-    static Request getSource(GetSourceRequest getSourceRequest) {\n-        Params parameters = new Params();\n-        parameters.withPreference(getSourceRequest.preference());\n-        parameters.withRouting(getSourceRequest.routing());\n-        parameters.withRefresh(getSourceRequest.refresh());\n-        parameters.withRealtime(getSourceRequest.realtime());\n-        parameters.withFetchSourceContext(getSourceRequest.fetchSourceContext());\n-\n-        String endpoint = endpoint(getSourceRequest.index(), \"_source\", getSourceRequest.id());\n+    static Request getSource(GetRequest getRequest) {\n+        String endpoint = endpoint(getRequest.index(), \"_source\", getRequest.id());\n         Request request = new Request(HttpGet.METHOD_NAME, endpoint);\n-        request.addParameters(parameters.asMap());\n+        request.addParameters(sourceParams(getRequest).asMap());\n         return request;\n     }\n \n+    private static Params sourceParams(GetRequest getRequest) {\n+        Params parameters = new Params();\n+        parameters.withPreference(getRequest.preference());\n+        parameters.withRouting(getRequest.routing());\n+        parameters.withRefresh(getRequest.refresh());\n+        parameters.withRealtime(getRequest.realtime());\n+        parameters.withFetchSourceContext(getRequest.fetchSourceContext());\n+        // Version params are not currently supported by the _source API so are not passed\n+        return parameters;\n+    }\n+\n     static Request multiGet(MultiGetRequest multiGetRequest) throws IOException {\n         Request request = new Request(HttpPost.METHOD_NAME, \"/_mget\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM2NDkwMg==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r366364902", "bodyText": "There isn't much here, but maybe also add a test for this? You can extend from AbstractResponseTestCase, this should be straight forward.", "author": "martijnvg", "createdAt": "2020-01-14T14:22:20Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/core/GetSourceResponse.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.core;\n+\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public final class GetSourceResponse {", "originalCommit": "b795421c243281531e7fc2ec6ca9b3d7d8597013", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1689b36d0005a29d865780290cf3173636755258", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/core/GetSourceResponse.java b/plugins/examples/custom-significance-heuristic/src/main/java/org/elasticsearch/example/customsigheuristic/CustomSignificanceHeuristicPlugin.java\nsimilarity index 54%\nrename from client/rest-high-level/src/main/java/org/elasticsearch/client/core/GetSourceResponse.java\nrename to plugins/examples/custom-significance-heuristic/src/main/java/org/elasticsearch/example/customsigheuristic/CustomSignificanceHeuristicPlugin.java\nindex 02d29e3eb45..f0e5ae2a313 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/core/GetSourceResponse.java\n+++ b/plugins/examples/custom-significance-heuristic/src/main/java/org/elasticsearch/example/customsigheuristic/CustomSignificanceHeuristicPlugin.java\n\n@@ -17,31 +17,22 @@\n  * under the License.\n  */\n \n-package org.elasticsearch.client.core;\n+package org.elasticsearch.example.customsigheuristic;\n \n-import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SearchPlugin;\n+import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristic;\n \n-import java.io.IOException;\n-import java.util.Map;\n+import java.util.List;\n \n-public final class GetSourceResponse {\n-\n-    private final Map<String, Object> source;\n-\n-    public GetSourceResponse(Map<String, Object> source) {\n-        this.source = source;\n-    }\n-\n-    public static GetSourceResponse fromXContent(XContentParser parser) throws IOException {\n-        return new GetSourceResponse(parser.map());\n-    }\n-\n-    public Map<String, Object> getSource() {\n-        return this.source;\n-    }\n+import static java.util.Collections.singletonList;\n \n+/**\n+ * Plugin declaring a custom {@link SignificanceHeuristic}.\n+ */\n+public class CustomSignificanceHeuristicPlugin extends Plugin implements SearchPlugin {\n     @Override\n-    public String toString() {\n-        return source.toString();\n+    public List<SignificanceHeuristicSpec<?>> getSignificanceHeuristics() {\n+        return singletonList(new SignificanceHeuristicSpec<>(SimpleHeuristic.NAME, SimpleHeuristic::new, SimpleHeuristic.PARSER));\n     }\n }\n"}}, {"oid": "1689b36d0005a29d865780290cf3173636755258", "url": "https://github.com/elastic/elasticsearch/commit/1689b36d0005a29d865780290cf3173636755258", "message": "Add Get Source API to the HLRC\n\nrelates: #47678", "committedDate": "2020-01-20T09:39:36Z", "type": "commit"}, {"oid": "3c3ed1e627433ca45a488d1261aed4c91e5b64a1", "url": "https://github.com/elastic/elasticsearch/commit/3c3ed1e627433ca45a488d1261aed4c91e5b64a1", "message": "Use GetSourceRequest, GetSourceResponse for GetSource API", "committedDate": "2020-01-20T09:39:36Z", "type": "commit"}, {"oid": "eb81a82dd1f1aa5a3136be211606afe15b890385", "url": "https://github.com/elastic/elasticsearch/commit/eb81a82dd1f1aa5a3136be211606afe15b890385", "message": "Add tests for GetSourceRequest, GetSourceResponse", "committedDate": "2020-01-20T09:39:36Z", "type": "forcePushed"}, {"oid": "7e7341ce5bd9cb5143e28570b027d457f79e8c62", "url": "https://github.com/elastic/elasticsearch/commit/7e7341ce5bd9cb5143e28570b027d457f79e8c62", "message": "Add tests for GetSourceRequest, GetSourceResponse", "committedDate": "2020-01-20T13:32:44Z", "type": "commit"}, {"oid": "7e7341ce5bd9cb5143e28570b027d457f79e8c62", "url": "https://github.com/elastic/elasticsearch/commit/7e7341ce5bd9cb5143e28570b027d457f79e8c62", "message": "Add tests for GetSourceRequest, GetSourceResponse", "committedDate": "2020-01-20T13:32:44Z", "type": "forcePushed"}, {"oid": "4ccf870164ffaab733be5b540b67095274f86f8d", "url": "https://github.com/elastic/elasticsearch/commit/4ccf870164ffaab733be5b540b67095274f86f8d", "message": "Explicit list of imports", "committedDate": "2020-01-20T16:35:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NDAzOA==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368874038", "bodyText": "This should be replaced by:\ntry (XContentBuilder sourceBuilder = XContentBuilder.builder(xContentType.xContent())) {\n            sourceBuilder.startObject();\n            sourceBuilder.field(\"field\", \"value\");\n            sourceBuilder.endObject();\n            return new SourceOnlyResponse(BytesReference.bytes(sourceBuilder));\n        } catch (IOException ioe) {\n            throw new UncheckedIOException(ioe);\n        }\n\nSometimes the test framework uses a different xcontent type, for example yaml or cbor and this is now hardcoded to json.", "author": "martijnvg", "createdAt": "2020-01-21T08:53:42Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.core;\n+\n+import org.elasticsearch.client.AbstractResponseTestCase;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+public final class GetSourceResponseTests extends\n+    AbstractResponseTestCase<GetSourceResponseTests.SourceOnlyResponse, GetSourceResponse> {\n+\n+    static class SourceOnlyResponse implements ToXContent {\n+\n+        private final BytesReference source;\n+\n+        SourceOnlyResponse(BytesReference source) {\n+            this.source = source;\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            // this implementation copied from RestGetSourceAction.RestGetSourceResponseListener::buildResponse\n+            try (InputStream stream = source.streamInput()) {\n+                builder.rawValue(stream, XContentHelper.xContentType(source));\n+            }\n+            return builder;\n+        }\n+    }\n+\n+    @Override\n+    protected SourceOnlyResponse createServerTestInstance(XContentType xContentType) {\n+        BytesReference source = new BytesArray(\"{\\\"field\\\":\\\"value\\\"}\");", "originalCommit": "7e7341ce5bd9cb5143e28570b027d457f79e8c62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5MzAzMg==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368893032", "bodyText": "Actually this is not needed, because the XContentBuilder#rawValue invocation in the SourceOnlyResponse#toXContent() method does the right conversion.", "author": "martijnvg", "createdAt": "2020-01-21T09:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NDAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "chunk": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\nindex 56cc2c16aa1..c80b73c3e99 100644\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\n+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\n\n@@ -22,11 +22,14 @@ package org.elasticsearch.client.core;\n import org.elasticsearch.client.AbstractResponseTestCase;\n import org.elasticsearch.common.bytes.BytesArray;\n import org.elasticsearch.common.bytes.BytesReference;\n-import org.elasticsearch.common.xcontent.*;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NTQ2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368875465", "bodyText": "You need to overwrite isFragment() method here and let it return false or implement ToXContentObject instead.\nOtherwise the test base class tries to always add a json object, which is already added in this test.", "author": "martijnvg", "createdAt": "2020-01-21T08:56:45Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.core;\n+\n+import org.elasticsearch.client.AbstractResponseTestCase;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+public final class GetSourceResponseTests extends\n+    AbstractResponseTestCase<GetSourceResponseTests.SourceOnlyResponse, GetSourceResponse> {\n+\n+    static class SourceOnlyResponse implements ToXContent {", "originalCommit": "7e7341ce5bd9cb5143e28570b027d457f79e8c62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NzYwMw==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368877603", "bodyText": "yes you're correct, I've just did it and send new commit", "author": "timoninmaxim", "createdAt": "2020-01-21T09:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NTQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "chunk": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\nindex 56cc2c16aa1..c80b73c3e99 100644\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\n+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\n\n@@ -22,11 +22,14 @@ package org.elasticsearch.client.core;\n import org.elasticsearch.client.AbstractResponseTestCase;\n import org.elasticsearch.common.bytes.BytesArray;\n import org.elasticsearch.common.bytes.BytesReference;\n-import org.elasticsearch.common.xcontent.*;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NTkxNA==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368875914", "bodyText": "The body of this method can be replaced with: assertThat(clientInstance.getSource(), equalTo(Map.of(\"field\", \"value\")));. Just checking for the expected map is sufficient here.", "author": "martijnvg", "createdAt": "2020-01-21T08:57:44Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.client.core;\n+\n+import org.elasticsearch.client.AbstractResponseTestCase;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.xcontent.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+public final class GetSourceResponseTests extends\n+    AbstractResponseTestCase<GetSourceResponseTests.SourceOnlyResponse, GetSourceResponse> {\n+\n+    static class SourceOnlyResponse implements ToXContent {\n+\n+        private final BytesReference source;\n+\n+        SourceOnlyResponse(BytesReference source) {\n+            this.source = source;\n+        }\n+\n+        @Override\n+        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+            // this implementation copied from RestGetSourceAction.RestGetSourceResponseListener::buildResponse\n+            try (InputStream stream = source.streamInput()) {\n+                builder.rawValue(stream, XContentHelper.xContentType(source));\n+            }\n+            return builder;\n+        }\n+    }\n+\n+    @Override\n+    protected SourceOnlyResponse createServerTestInstance(XContentType xContentType) {\n+        BytesReference source = new BytesArray(\"{\\\"field\\\":\\\"value\\\"}\");\n+        return new SourceOnlyResponse(source);\n+    }\n+\n+    @Override\n+    protected GetSourceResponse doParseToClientInstance(XContentParser parser) throws IOException {\n+        return GetSourceResponse.fromXContent(parser);\n+    }\n+\n+    @Override\n+    protected void assertInstances(SourceOnlyResponse serverTestInstance, GetSourceResponse clientInstance) {\n+        Map<String, Object> expected = new HashMap<>();\n+        expected.put(\"field\", \"value\");\n+\n+        assertThat(clientInstance.getSource(), equalTo(serverTestInstance.source));\n+        assertThat(clientInstance.getSource(), equalTo(expected));", "originalCommit": "7e7341ce5bd9cb5143e28570b027d457f79e8c62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg4MDkyMA==", "url": "https://github.com/elastic/elasticsearch/pull/50885#discussion_r368880920", "bodyText": "did it too", "author": "timoninmaxim", "createdAt": "2020-01-21T09:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3NTkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "chunk": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\nindex 56cc2c16aa1..c80b73c3e99 100644\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\n+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/core/GetSourceResponseTests.java\n\n@@ -22,11 +22,14 @@ package org.elasticsearch.client.core;\n import org.elasticsearch.client.AbstractResponseTestCase;\n import org.elasticsearch.common.bytes.BytesArray;\n import org.elasticsearch.common.bytes.BytesReference;\n-import org.elasticsearch.common.xcontent.*;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentHelper;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n"}}, {"oid": "bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "url": "https://github.com/elastic/elasticsearch/commit/bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "message": "fix tests: Use ToXContentObject for mock server response", "committedDate": "2020-01-21T09:03:26Z", "type": "commit"}, {"oid": "bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "url": "https://github.com/elastic/elasticsearch/commit/bfa0cd9426e73a3bb4c1d37a812f0d12a9c40320", "message": "fix tests: Use ToXContentObject for mock server response", "committedDate": "2020-01-21T09:03:26Z", "type": "forcePushed"}]}