{"pr_number": 51146, "pr_title": "[ML] Add audit warning for 1000 categories found early in job", "pr_createdAt": "2020-01-17T11:05:28Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51146", "timeline": [{"oid": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42", "url": "https://github.com/elastic/elasticsearch/commit/8c0d870b8e0fd83765b232d0e1798dddcf52ee42", "message": "[ML] Add audit warning for 1000 categories found early in job\n\nIf 1000 different category definitions are created for a job in\nthe first 100 buckets it processes then an audit warning will now\nbe created.  (This will cause a yellow warning triangle in the\nML UI's jobs list.)\n\nSuch a large number of categories suggests that the field that\ncategorization is working on is not well suited to the ML\ncategorization functionality.", "committedDate": "2020-01-17T10:47:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkwMDUwMg==", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367900502", "bodyText": "We have square brackets about the second number in this message but not the first. Should we make it consistent?", "author": "dimitris-athanasiou", "createdAt": "2020-01-17T11:54:25Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java", "diffHunk": "@@ -135,6 +135,8 @@\n             \"Adjust the analysis_limits.model_memory_limit setting to ensure all data is analyzed\";\n     public static final String JOB_AUDIT_MEMORY_STATUS_HARD_LIMIT_PRE_7_2 = \"Job memory status changed to hard_limit at {0}; adjust the \" +\n         \"analysis_limits.model_memory_limit setting to ensure all data is analyzed\";\n+    public static final String JOB_AUDIT_EXCESSIVE_EARLY_CATEGORIES = \"{0} categories observed in the first [{1}] buckets.\" +", "originalCommit": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2ODQ0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367968446", "bodyText": "The reason I didn't put the first one in square brackets is that it won't vary (at least for a particular version of the product).  The first number will always be 1000 unless somebody changes the code, whereas the second number can vary between different occurrences of the audit message.", "author": "droberts195", "createdAt": "2020-01-17T14:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkwMDUwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTYzMw==", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367911633", "bodyText": "should we take this chance and make this a long as well? It seems like something that could hit overflow problems.", "author": "dimitris-athanasiou", "createdAt": "2020-01-17T12:26:58Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -87,7 +90,9 @@\n     private final FlushListener flushListener;\n     private volatile boolean processKilled;\n     private volatile boolean failed;\n-    private int bucketCount; // only used from the process() thread, so doesn't need to be volatile\n+    private long priorRunsBucketCount;\n+    private int currentRunBucketCount; // only used from the process() thread, so doesn't need to be volatile", "originalCommit": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2OTE1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367969159", "bodyText": "With a 1 second bucket span it will take 68 years to overflow, so pretty unlikely.  But maybe I can avoid some casting by making it long, which will make the code cleaner.  If so I'll change it.", "author": "droberts195", "createdAt": "2020-01-17T14:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTYzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk3NzA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367977063", "bodyText": "There wasn't much casting but I changed it anyway just so both variables have the same type.", "author": "droberts195", "createdAt": "2020-01-17T14:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "69172d390eef916825eae84816d1665a5d75b984", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java\nindex f7215fa4f4a..51043d4da42 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java\n\n@@ -91,7 +91,7 @@ public class AutodetectResultProcessor {\n     private volatile boolean processKilled;\n     private volatile boolean failed;\n     private long priorRunsBucketCount;\n-    private int currentRunBucketCount; // only used from the process() thread, so doesn't need to be volatile\n+    private long currentRunBucketCount; // only used from the process() thread, so doesn't need to be volatile\n     private boolean excessiveCategoryWarningIssued; // only used from the process() thread, so doesn't need to be volatile\n     private final JobResultsPersister.Builder bulkResultsPersister;\n     private boolean deleteInterimRequired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMTg0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367911846", "bodyText": "I was wondering where we'd get this from but it's cool we already pass it in!", "author": "dimitris-athanasiou", "createdAt": "2020-01-17T12:27:36Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -122,6 +127,7 @@ public AutodetectResultProcessor(Client client,\n         this.bulkResultsPersister = persister.bulkPersisterBuilder(jobId, this::isAlive);\n         this.timingStatsReporter = new TimingStatsReporter(timingStats, bulkResultsPersister);\n         this.deleteInterimRequired = true;\n+        this.priorRunsBucketCount = timingStats.getBucketCount();", "originalCommit": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMjQ4OA==", "url": "https://github.com/elastic/elasticsearch/pull/51146#discussion_r367912488", "bodyText": "Now that all this has become more complex than a single call to the persister, I'd be tempted to extract this in a handleCategoryDefinition method.", "author": "dimitris-athanasiou", "createdAt": "2020-01-17T12:29:29Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java", "diffHunk": "@@ -225,6 +231,18 @@ void processResult(AutodetectResult result) {\n         CategoryDefinition categoryDefinition = result.getCategoryDefinition();\n         if (categoryDefinition != null) {\n             persister.persistCategoryDefinition(categoryDefinition, this::isAlive);", "originalCommit": "8c0d870b8e0fd83765b232d0e1798dddcf52ee42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "69172d390eef916825eae84816d1665a5d75b984", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java\nindex f7215fa4f4a..51043d4da42 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutodetectResultProcessor.java\n\n@@ -230,19 +230,7 @@ public class AutodetectResultProcessor {\n         }\n         CategoryDefinition categoryDefinition = result.getCategoryDefinition();\n         if (categoryDefinition != null) {\n-            persister.persistCategoryDefinition(categoryDefinition, this::isAlive);\n-            if (categoryDefinition.getCategoryId() == EXCESSIVE_EARLY_CATEGORY_COUNT &&\n-                priorRunsBucketCount + currentRunBucketCount < EARLY_BUCKET_THRESHOLD &&\n-                excessiveCategoryWarningIssued == false) {\n-                auditor.warning(jobId, Messages.getMessage(Messages.JOB_AUDIT_EXCESSIVE_EARLY_CATEGORIES, EXCESSIVE_EARLY_CATEGORY_COUNT,\n-                    // Add 1 because category definitions are written before buckets\n-                    1 + priorRunsBucketCount + currentRunBucketCount));\n-                // This flag won't be retained if the job is closed and reopened, or if the job migrates to another node.\n-                // This means it's possible the audit message is generated multiple times.  However, that's not a\n-                // disaster, and is also very unlikely in the the (best practice) cases where initial lookback covers\n-                // more than 100 buckets.\n-                excessiveCategoryWarningIssued = true;\n-            }\n+            processCategoryDefinition(categoryDefinition);\n         }\n         ModelPlot modelPlot = result.getModelPlot();\n         if (modelPlot != null) {\n"}}, {"oid": "30afa3fda2e7da682cc6b7f346ac7c136142cd54", "url": "https://github.com/elastic/elasticsearch/commit/30afa3fda2e7da682cc6b7f346ac7c136142cd54", "message": "Merge branch 'master' into excessive_categories_audit_message", "committedDate": "2020-01-17T14:44:06Z", "type": "commit"}, {"oid": "69172d390eef916825eae84816d1665a5d75b984", "url": "https://github.com/elastic/elasticsearch/commit/69172d390eef916825eae84816d1665a5d75b984", "message": "Address review comments", "committedDate": "2020-01-17T14:57:51Z", "type": "commit"}]}