{"pr_number": 66240, "pr_title": "Coerce blank fields to null in ApiKey requests", "pr_createdAt": "2020-12-14T04:22:58Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66240", "timeline": [{"oid": "a464afc34cf6a358826488f39d5c339d36278f5a", "url": "https://github.com/elastic/elasticsearch/commit/a464afc34cf6a358826488f39d5c339d36278f5a", "message": "Coerce blank fields to null in ApiKey requests\n\nAPI Key request objects (`InvalidateApiKeyRequest` and\n`GetApiKeyRequest`) support multiple key-selection parameters such as\nrealm-name, user-name, key-id and key-name.\n\nThe specified behaviour is that if any of these are _blank_ then they\nact as a wildcard and do not restrict the search criteria.\n\nThis change moves the \"is blank\" logic into the constructor for these\nrequests so that there is a single consistent way to determine blank\n(`Strings.hasText(arg) == false`) and all usage of these fields can\nrely on the getter returning either `null` or a _real value_, and\nnever a non-null blank.\n\nRelates: #62916", "committedDate": "2020-12-14T03:54:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMDI4OA==", "url": "https://github.com/elastic/elasticsearch/pull/66240#discussion_r542110288", "bodyText": "Before I touched this class in 7.10, there is no check for id in either constructor. Last time I added\nids = Strings.hasText(id) == false ? null : new String[] { id };\n\nin the constructor with StreamInput. Looking back now, this introduced a tiny inconsistency of how empty id is handled in different constructors. Your change here fixed this inconsistency. Thanks!\nNow I have a new question: since a single empty string is now handled and excluded from the constructor, should we also apply the empty check for the string array of ids, i.e., should we move the validation logic of ids into here as well? On one hand, relocating the check for ids is good for consistency in that validate() is more about interactions between multiple fields. On the other hand, it complicates the constructors and also could be considered as a slight behaviour change. Overall, I think I prefer to not touch it.", "author": "ywangd", "createdAt": "2020-12-14T04:51:39Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/InvalidateApiKeyRequest.java", "diffHunk": "@@ -65,17 +65,21 @@ public InvalidateApiKeyRequest(@Nullable String realmName, @Nullable String user\n             throw new IllegalArgumentException(\"Must use either [id] or [ids], not both at the same time\");\n         }\n \n-        this.realmName = realmName;\n-        this.userName = userName;\n-        if (id != null) {\n-            this.ids = new String[] {id};\n+        this.realmName = textOrNull(realmName);\n+        this.userName = textOrNull(userName);\n+        if (Strings.hasText(id)) {\n+            this.ids = new String[]{id};\n         } else {\n             this.ids = ids;\n         }", "originalCommit": "a464afc34cf6a358826488f39d5c339d36278f5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzI5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66240#discussion_r542117297", "bodyText": "I took the cautious approach and decided to make this as close as possible to having zero visible changes.\nSince the deserialisation code has a hasText check (as you note) I decided that this fix made sense, but chose not to try and filter empty values in the ids array. That seemed like a behavioural change that was outside the scope of this PR.\nI'm not necessarily opposed to someone making that change I just wanted this PR to be quick and simple.", "author": "tvernum", "createdAt": "2020-12-14T05:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMDI4OA=="}], "type": "inlineReview", "revised_code": null}]}