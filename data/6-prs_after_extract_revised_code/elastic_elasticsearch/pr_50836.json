{"pr_number": 50836, "pr_title": "Voting config exclusions should work with absent nodes", "pr_createdAt": "2020-01-10T06:46:49Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50836", "timeline": [{"oid": "c3d46152bbd340a09dcb321bf93b37eea5517cfd", "url": "https://github.com/elastic/elasticsearch/commit/c3d46152bbd340a09dcb321bf93b37eea5517cfd", "message": "Voting config exclusions should work with absent nodes", "committedDate": "2020-01-09T02:23:09Z", "type": "commit"}, {"oid": "7881e7bfc30adba3f4f0edd60bc678080d2b83fa", "url": "https://github.com/elastic/elasticsearch/commit/7881e7bfc30adba3f4f0edd60bc678080d2b83fa", "message": "Merge branch 'master' into issue-47990", "committedDate": "2020-01-17T19:24:19Z", "type": "commit"}, {"oid": "39eb2a11bb95b50a18fb408a52a925f9161275c8", "url": "https://github.com/elastic/elasticsearch/commit/39eb2a11bb95b50a18fb408a52a925f9161275c8", "message": "Add new APIs to add voting config exclusion just based on node id or name", "committedDate": "2020-01-17T21:47:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NTg3OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371855878", "bodyText": "I think you can register the bare URI /_cluster/voting_config_exclusions (no query parameters) and then consume the query parameters in code.", "author": "DaveCTurner", "createdAt": "2020-01-28T15:02:05Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -36,7 +36,11 @@\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n+        // TODO This API is being deprecated.\n         controller.registerHandler(RestRequest.Method.POST, \"/_cluster/voting_config_exclusions/{node_name}\", this);\n+\n+        controller.registerHandler(RestRequest.Method.POST,\n+            \"/_cluster/voting_config_exclusions/node_ids_or_names/{node_id_or_names}\", this);", "originalCommit": "39eb2a11bb95b50a18fb408a52a925f9161275c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDI4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r385524286", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-02-28T06:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NTg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\nindex 8669ff626ae..075dab3a64c 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n\n@@ -23,24 +23,28 @@ import org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclu\n import org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclusionsRequest;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.common.unit.TimeValue;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.RestController;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n \n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n+    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(logger);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n         // TODO This API is being deprecated.\n         controller.registerHandler(RestRequest.Method.POST, \"/_cluster/voting_config_exclusions/{node_name}\", this);\n \n-        controller.registerHandler(RestRequest.Method.POST,\n-            \"/_cluster/voting_config_exclusions/node_ids_or_names/{node_id_or_names}\", this);\n+        controller.registerHandler(RestRequest.Method.POST, \"/_cluster/voting_config_exclusions\", this);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzEzOA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371857138", "bodyText": "See e.g. here for how to emit deprecation warnings:\n\n  \n    \n      elasticsearch/server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestSyncedFlushAction.java\n    \n    \n        Lines 65 to 66\n      in\n      09b46c8\n    \n    \n    \n    \n\n        \n          \n           DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"synced_flush\", \n        \n\n        \n          \n               \"Synced flush was removed and a normal flush was performed instead. This transition will be removed in a future version.\");", "author": "DaveCTurner", "createdAt": "2020-01-28T15:04:05Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,9 +59,20 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String nodeDescriptions;\n+\n+        // TODO This request param is being deprecated", "originalCommit": "39eb2a11bb95b50a18fb408a52a925f9161275c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDMwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r385524305", "bodyText": "Added deprecation warning.", "author": "zacharymorn", "createdAt": "2020-02-28T06:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\nindex 8669ff626ae..075dab3a64c 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n\n@@ -59,21 +63,53 @@ public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeDescriptions;\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n \n-        // TODO This request param is being deprecated\n         if (request.hasParam(\"node_name\")) {\n-            nodeDescriptions = request.param(\"node_name\");\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",\n+                \"Using [node_name] for adding voting config exclustion will be removed in a future version. \" +\n+                    \"Please use [node_ids] or [node_names] instead\");\n+            deprecatedNodeDescription = request.param(\"node_name\");\n         }\n-        else {\n-            nodeDescriptions = request.param(\"node_ids_or_names\");\n+\n+        if (request.hasParam(\"node_ids\")){\n+            nodeIds = request.param(\"node_ids\");\n         }\n \n-        assert !Strings.isNullOrEmpty(nodeDescriptions);\n+        if (request.hasParam(\"node_names\")){\n+            nodeNames = request.param(\"node_names\");\n+        }\n+\n+        if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n \n         return new AddVotingConfigExclusionsRequest(\n-            Strings.splitStringByCommaToArray(nodeDescriptions),\n+            Strings.splitStringByCommaToArray(deprecatedNodeDescription),\n+            Strings.splitStringByCommaToArray(nodeIds),\n+            Strings.splitStringByCommaToArray(nodeNames),\n             TimeValue.parseTimeValue(request.param(\"timeout\"), DEFAULT_TIMEOUT, getClass().getSimpleName() + \".timeout\")\n         );\n     }\n+\n+    private boolean oneAndonlyOneIsSet(String deprecatedNodeDescription, String nodeIds, String nodeNames) {\n+        if(Strings.hasText(deprecatedNodeDescription)) {\n+            return Strings.isNullOrEmpty(nodeIds) && Strings.isNullOrEmpty(nodeNames);\n+        }\n+        else if (Strings.hasText(nodeIds)) {\n+            return Strings.isNullOrEmpty(nodeNames);\n+        }\n+        else if (Strings.hasText(nodeNames)) {\n+            return true;\n+        }\n+        else {\n+            // none of the node identifiers are set\n+            return false;\n+        }\n+\n+    }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzU4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371857581", "bodyText": "We should throw an IllegalArgumentException if this is set as well as the query parameters, and should also throw an IllegalArgumentException if both query parameters are in use.", "author": "DaveCTurner", "createdAt": "2020-01-28T15:04:50Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,9 +59,20 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String nodeDescriptions;\n+\n+        // TODO This request param is being deprecated\n+        if (request.hasParam(\"node_name\")) {\n+            nodeDescriptions = request.param(\"node_name\");", "originalCommit": "39eb2a11bb95b50a18fb408a52a925f9161275c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDMxOA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r385524318", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-02-28T06:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\nindex 8669ff626ae..075dab3a64c 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n\n@@ -59,21 +63,53 @@ public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeDescriptions;\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n \n-        // TODO This request param is being deprecated\n         if (request.hasParam(\"node_name\")) {\n-            nodeDescriptions = request.param(\"node_name\");\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",\n+                \"Using [node_name] for adding voting config exclustion will be removed in a future version. \" +\n+                    \"Please use [node_ids] or [node_names] instead\");\n+            deprecatedNodeDescription = request.param(\"node_name\");\n         }\n-        else {\n-            nodeDescriptions = request.param(\"node_ids_or_names\");\n+\n+        if (request.hasParam(\"node_ids\")){\n+            nodeIds = request.param(\"node_ids\");\n         }\n \n-        assert !Strings.isNullOrEmpty(nodeDescriptions);\n+        if (request.hasParam(\"node_names\")){\n+            nodeNames = request.param(\"node_names\");\n+        }\n+\n+        if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n \n         return new AddVotingConfigExclusionsRequest(\n-            Strings.splitStringByCommaToArray(nodeDescriptions),\n+            Strings.splitStringByCommaToArray(deprecatedNodeDescription),\n+            Strings.splitStringByCommaToArray(nodeIds),\n+            Strings.splitStringByCommaToArray(nodeNames),\n             TimeValue.parseTimeValue(request.param(\"timeout\"), DEFAULT_TIMEOUT, getClass().getSimpleName() + \".timeout\")\n         );\n     }\n+\n+    private boolean oneAndonlyOneIsSet(String deprecatedNodeDescription, String nodeIds, String nodeNames) {\n+        if(Strings.hasText(deprecatedNodeDescription)) {\n+            return Strings.isNullOrEmpty(nodeIds) && Strings.isNullOrEmpty(nodeNames);\n+        }\n+        else if (Strings.hasText(nodeIds)) {\n+            return Strings.isNullOrEmpty(nodeNames);\n+        }\n+        else if (Strings.hasText(nodeNames)) {\n+            return true;\n+        }\n+        else {\n+            // none of the node identifiers are set\n+            return false;\n+        }\n+\n+    }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODgxNg==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371858816", "bodyText": "I think this should be stricter about interpreting the node descriptions differently depending on their source (whether old-style deprecated URI or one of the two new-style parameters). This will entail adding more fields to this request class, and supporting backwards-compatibility on (de)serialisation by behaving differently according to StreamOutput#getVersion and StreamInput#getVersion.\nAs it is, this is too lenient.", "author": "DaveCTurner", "createdAt": "2020-01-28T15:06:44Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -72,16 +74,22 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        final DiscoveryNodes.NodeResolutionResults nodeResolutionResults = allNodes.resolveNodesExact(nodeDescriptions);", "originalCommit": "39eb2a11bb95b50a18fb408a52a925f9161275c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NzM2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r371867367", "bodyText": "To be more precise, I think AddVotingConfigExclusionsRequest should have three String[] fields, one for old-style nodeDescriptions, one for nodeIds and one for nodeNames, no more than one of which may be nonempty.", "author": "DaveCTurner", "createdAt": "2020-01-28T15:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDQwNw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r385524407", "bodyText": "Done. However, I'm not sure which version to use to enable this feature, do I need to create a new version? I've put TODOs in the relevant section of the code to highlight this.", "author": "zacharymorn", "createdAt": "2020-02-28T06:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 3b9e04ade78..759c920bbd7 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -58,34 +62,68 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final DiscoveryNodes.NodeResolutionResults nodeResolutionResults = allNodes.resolveNodesExact(nodeDescriptions);\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n \n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(nodeResolutionResults.getResolvedNodes())\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());\n+            }\n+\n+            resolvedNodes = Arrays.stream(nodeResolutionResults.getResolvedNodes())\n                 .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n-        final Set<VotingConfigExclusion> unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n-                .map(nodeIdOrName -> new VotingConfigExclusion(nodeIdOrName, nodeIdOrName)).collect(Collectors.toSet());\n \n-        Set<VotingConfigExclusion> allProcessedNodes = Sets.newHashSet(Iterables.concat(resolvedNodes, unresolvedNodes));\n+            allProcessedNodes = Sets.newHashSet(Iterables.concat(resolvedNodes, unresolvedNodes));\n \n-        if (allProcessedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes or absent nodes\");\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for nodeIds \" + Arrays.asList(nodeIds) +\n+                    \" or nodeNames \" + Arrays.asList(nodeNames) + \" matched no master-eligible nodes or absent nodes\");\n+            }\n         }\n \n         allProcessedNodes.removeIf(n -> currentState.getVotingConfigExclusions().contains(n));\n"}}, {"oid": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "url": "https://github.com/elastic/elasticsearch/commit/c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "message": "Address feedback comment", "committedDate": "2020-02-28T06:18:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYwNg==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386249606", "bodyText": "I think this can (and should) be final.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:26:02Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -39,6 +43,8 @@\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n+    private String[] nodeIds = null;", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzIzMA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487230", "bodyText": "Before when I declared private final String[] nodeId; instead of private String[] nodeIds = null;, I got an IDE compiler warning Variables might not have been initialized. The reason was due to the constructor initializing these fields using StreamInput only initialize them for new version. I've made an update to the constructor to allow this declaration.", "author": "zacharymorn", "createdAt": "2020-03-04T07:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -43,9 +46,11 @@ import java.util.stream.Collectors;\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n-    private String[] nodeIds = null;\n-    private String[] nodeNames = null;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n+    public static final String nodeDescriptionDeprecationMsg = \"Using [node_name] for adding voting config exclustion will be removed \" +\n+        \"in a future version. Please use [node_ids] or [node_names] instead\";\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYzNA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386249634", "bodyText": "I think this can (and should) be final.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:26:06Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -39,6 +43,8 @@\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n+    private String[] nodeIds = null;\n+    private String[] nodeNames = null;", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzI2MA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487260", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-04T07:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0OTYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -43,9 +46,11 @@ import java.util.stream.Collectors;\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n-    private String[] nodeIds = null;\n-    private String[] nodeNames = null;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n+    public static final String nodeDescriptionDeprecationMsg = \"Using [node_name] for adding voting config exclustion will be removed \" +\n+        \"in a future version. Please use [node_ids] or [node_names] instead\";\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MDQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386250431", "bodyText": "Since we're currently targeting master:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (in.getVersion() == Version.V_EMPTY) {\n          \n          \n            \n                    if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n          \n      \n    \n    \n  \n\nWe will adjust this when backporting.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:28:07Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzI4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487287", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-04T07:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MDQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -66,6 +71,12 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n         this.nodeIds = nodeIds;\n         this.nodeNames = nodeNames;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386252931", "bodyText": "Yes, this PR deprecates this parameter which means that after the backport is complete we can follow-up with another PR that removes it. No action required in this PR, however.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:33:51Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzMyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487321", "bodyText": "Sounds good.", "author": "zacharymorn", "createdAt": "2020-03-04T07:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNDk0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397724945", "bodyText": "Would you remove this (and other //TODO comments)? We can track follow-up work with GitHub issues if needed, although the follow-up to remove this parameter should be relatively simple so we can go straight to a PR.", "author": "DaveCTurner", "createdAt": "2020-03-25T09:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDU0OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314548", "bodyText": "Make sense, I've removed this and others.", "author": "zacharymorn", "createdAt": "2020-03-26T04:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MjkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -66,6 +71,12 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n         this.nodeIds = nodeIds;\n         this.nodeNames = nodeNames;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386254430", "bodyText": "This constructor is only used in tests, and it looks like we could migrate all of those tests over to using node names instead of node descriptions. Some of them would also be neater if we used a varargs:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n          \n          \n            \n                public AddVotingConfigExclusionsRequest(String... nodeNames) {", "author": "DaveCTurner", "createdAt": "2020-03-02T08:37:27Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -47,7 +53,7 @@\n      * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n      */\n     public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzUyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487521", "bodyText": "If we migrate these tests now to use node names instead of descriptions, I'm a bit concerned that we may not have tests to prove that the changes are still backward compatible and don't have bugs that may break logic based on nodeDescriptions, before it is fully migrated to nodeIds / nodeNames. What do you think?", "author": "zacharymorn", "createdAt": "2020-03-04T07:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDEwNA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387520104", "bodyText": "Sorry, you're right, I didn't quite mean \"all\" these tests. We should comprehensively test the different kinds of node resolution by strengthening AddVotingConfigExclusionsRequestTests. The other tests can move over to node names without loss of coverage IMO.", "author": "DaveCTurner", "createdAt": "2020-03-04T08:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTE3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388119176", "bodyText": "Make sense.", "author": "zacharymorn", "createdAt": "2020-03-05T07:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMTIyNw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397721227", "bodyText": "This isn't resolved yet?", "author": "DaveCTurner", "createdAt": "2020-03-25T09:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2NDY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r399064659", "bodyText": "Sorry missed this earlier. Done in commit 02a3533", "author": "zacharymorn", "createdAt": "2020-03-27T06:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5MDgxMA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405490810", "bodyText": "You removed this useful constructor in 02a3533 and added a lot of noise to the tests as a result. Could you follow my suggestion above instead?", "author": "DaveCTurner", "createdAt": "2020-04-08T12:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1MjIxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405952215", "bodyText": "Sorry when I re-read this thread I somehow got the wrong idea that this constructor need to be removed. I reverted that commit and tried again in commit 5c7a226. Could you let me know if this looks good?", "author": "zacharymorn", "createdAt": "2020-04-09T04:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -43,9 +46,11 @@ import java.util.stream.Collectors;\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n     private final String[] nodeDescriptions;\n-    private String[] nodeIds = null;\n-    private String[] nodeNames = null;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n+    public static final String nodeDescriptionDeprecationMsg = \"Using [node_name] for adding voting config exclustion will be removed \" +\n+        \"in a future version. Please use [node_ids] or [node_names] instead\";\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDg1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386254853", "bodyText": "Maybe also throw an IllegalArgumentException here if more than one of the args is nonempty.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:38:31Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzU1OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487558", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-04T07:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NDg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -66,6 +71,12 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n         this.nodeIds = nodeIds;\n         this.nodeNames = nodeNames;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NTgzOA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386255838", "bodyText": "Think you can revert the changes to this file?", "author": "DaveCTurner", "createdAt": "2020-03-02T08:40:56Z", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java", "diffHunk": "@@ -233,7 +233,8 @@ public CoordinationMetaData build() {\n         private final String nodeName;\n \n         public VotingConfigExclusion(DiscoveryNode node) {\n-            this(node.getId(), node.getName());\n+            this.nodeId = node.getId();", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzU3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487576", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-04T07:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NTgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java\nindex 340bfba003f..4d6483df614 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationMetaData.java\n\n@@ -233,8 +233,7 @@ public class CoordinationMetaData implements Writeable, ToXContentFragment {\n         private final String nodeName;\n \n         public VotingConfigExclusion(DiscoveryNode node) {\n-            this.nodeId = node.getId();\n-            this.nodeName = node.getName();\n+            this(node.getId(), node.getName());\n         }\n \n         public VotingConfigExclusion(StreamInput in) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NjczMA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386256730", "bodyText": "Does controller.registerAsDeprecatedHandler work for this?", "author": "DaveCTurner", "createdAt": "2020-03-02T08:43:07Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -23,20 +23,28 @@\n import org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclusionsRequest;\n import org.elasticsearch.client.node.NodeClient;\n import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n import org.elasticsearch.common.unit.TimeValue;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.RestController;\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n \n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n+    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(logger);\n \n     public RestAddVotingConfigExclusionAction(RestController controller) {\n+        // TODO This API is being deprecated.", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzcwNw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487707", "bodyText": "Changed to use this method.", "author": "zacharymorn", "createdAt": "2020-03-04T07:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NjczMA=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\nindex 075dab3a64c..7d96ac7321b 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n\n@@ -34,6 +34,8 @@ import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n \n+import static org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclusionsRequest.nodeDescriptionDeprecationMsg;\n+\n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n \n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NzE3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386257179", "bodyText": "This isn't needed if using controller.registerAsDeprecatedHandler.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:44:09Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,10 +63,53 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n+\n+        if (request.hasParam(\"node_name\")) {\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzc0NA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487744", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-04T07:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NzE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\nindex 075dab3a64c..7d96ac7321b 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n\n@@ -68,9 +70,6 @@ public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n         String nodeNames = null;\n \n         if (request.hasParam(\"node_name\")) {\n-            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",\n-                \"Using [node_name] for adding voting config exclustion will be removed in a future version. \" +\n-                    \"Please use [node_ids] or [node_names] instead\");\n             deprecatedNodeDescription = request.param(\"node_name\");\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1ODI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386258283", "bodyText": "The house style is to use == false since unary ! is too easy to miss:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n          \n            \n                    if (oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames) == false) {\n          \n      \n    \n    \n  \n\nHowever in this case maybe we can invert the sense of this method instead:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n          \n            \n                    if (moreThanOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {\n          \n      \n    \n    \n  \n\nAlso, as requested earlier, we can move this validation to the constructor of AddVotingConfigExclusionsRequest.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:46:40Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -55,10 +63,53 @@ protected RestChannelConsumer prepareRequest(final RestRequest request, final No\n     }\n \n     AddVotingConfigExclusionsRequest resolveVotingConfigExclusionsRequest(final RestRequest request) {\n-        String nodeName = request.param(\"node_name\");\n+        String deprecatedNodeDescription = null;\n+        String nodeIds = null;\n+        String nodeNames = null;\n+\n+        if (request.hasParam(\"node_name\")) {\n+            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",\n+                \"Using [node_name] for adding voting config exclustion will be removed in a future version. \" +\n+                    \"Please use [node_ids] or [node_names] instead\");\n+            deprecatedNodeDescription = request.param(\"node_name\");\n+        }\n+\n+        if (request.hasParam(\"node_ids\")){\n+            nodeIds = request.param(\"node_ids\");\n+        }\n+\n+        if (request.hasParam(\"node_names\")){\n+            nodeNames = request.param(\"node_names\");\n+        }\n+\n+        if(!oneAndonlyOneIsSet(deprecatedNodeDescription, nodeIds, nodeNames)) {", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzc5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487797", "bodyText": "Done.\nTo be more precise, I use noneOrMoreThanOneIsSet instead of moreThanOneIsSet", "author": "zacharymorn", "createdAt": "2020-03-04T07:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1ODI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\nindex 075dab3a64c..7d96ac7321b 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n\n@@ -68,9 +70,6 @@ public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n         String nodeNames = null;\n \n         if (request.hasParam(\"node_name\")) {\n-            DEPRECATION_LOGGER.deprecatedAndMaybeLog(\"add_voting_config_exclusion\",\n-                \"Using [node_name] for adding voting config exclustion will be removed in a future version. \" +\n-                    \"Please use [node_ids] or [node_names] instead\");\n             deprecatedNodeDescription = request.param(\"node_name\");\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386259748", "bodyText": "I think we should revert the changes to these tests (they're still valid tests of the now-deprecated behaviour) and add more tests for the new behaviour. We should remove them in the followup PR that removes the old behaviour.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:50:04Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -87,16 +88,6 @@ public void testResolve() {\n \n         assertThat(makeRequest().resolveVotingConfigExclusions(clusterState),\n                 containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n-        assertThat(makeRequest(\"_all\").resolveVotingConfigExclusions(clusterState),", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzg1OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487858", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-04T07:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNDY5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397734699", "bodyText": "Could you revert the whitespace changes too?", "author": "DaveCTurner", "createdAt": "2020-03-25T10:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDk1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314952", "bodyText": "Reverted for the 3 contains... below.", "author": "zacharymorn", "createdAt": "2020-03-26T04:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1OTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\nindex dfca53764e2..02ea9da3b92 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\n\n@@ -88,6 +89,16 @@ public class AddVotingConfigExclusionsRequestTests extends ESTestCase {\n \n         assertThat(makeRequest().resolveVotingConfigExclusions(clusterState),\n                 containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n+        assertThat(makeRequest(\"_all\").resolveVotingConfigExclusions(clusterState),\n+        containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n+        assertThat(makeRequest(\"_local\").resolveVotingConfigExclusions(clusterState),\n+            contains(localNodeExclusion));\n+        assertThat(makeRequest(\"other*\").resolveVotingConfigExclusions(clusterState),\n+            containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n+\n+        assertThat(expectThrows(IllegalArgumentException.class,\n+            () -> makeRequest(\"not-a-node\").resolveVotingConfigExclusions(clusterState)).getMessage(),\n+            equalTo(\"add voting config exclusions request for [not-a-node] matched no master-eligible nodes\"));\n     }\n \n     public void testResolveAndCheckMaximum() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MDIxNA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386260214", "bodyText": "I think we should revert the changes to these tests (they're still valid tests of the now-deprecated behaviour) and add more tests for the new behaviour. We can remove them in the followup PR that removes the legacy support.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:50:58Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -166,58 +167,6 @@ public void testWithdrawsVotesFromMultipleNodes() throws InterruptedException {\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n                 containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n     }\n-\n-    public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedException {", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzg5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487895", "bodyText": "I've reverted the deletion. Will add more tests once the production implementation looks good.", "author": "zacharymorn", "createdAt": "2020-03-04T07:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MDIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\nindex 107fd6e75d3..343739ad241 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\n\n@@ -167,6 +167,57 @@ public class TransportAddVotingConfigExclusionsActionTests extends ESTestCase {\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n                 containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n     }\n+\n+    public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedException {\n+        final CountDownLatch countDownLatch = new CountDownLatch(1);\n+\n+        clusterStateObserver.waitForNextChange(new AdjustConfigurationForExclusions());\n+        transportService.sendRequest(localNode, AddVotingConfigExclusionsAction.NAME,\n+            new AddVotingConfigExclusionsRequest(new String[]{\"other*\"}),\n+            expectSuccess(r -> {\n+                assertNotNull(r);\n+                countDownLatch.countDown();\n+            })\n+        );\n+\n+        assertTrue(countDownLatch.await(30, TimeUnit.SECONDS));\n+        assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n+            containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n+    }\n+\n+    public void testWithdrawsVotesFromAllMasterEligibleNodes() throws InterruptedException {\n+        final CountDownLatch countDownLatch = new CountDownLatch(1);\n+\n+        clusterStateObserver.waitForNextChange(new AdjustConfigurationForExclusions());\n+        transportService.sendRequest(localNode, AddVotingConfigExclusionsAction.NAME,\n+            new AddVotingConfigExclusionsRequest(new String[]{\"_all\"}),\n+            expectSuccess(r -> {\n+                assertNotNull(r);\n+                countDownLatch.countDown();\n+            })\n+        );\n+\n+        assertTrue(countDownLatch.await(30, TimeUnit.SECONDS));\n+        assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n+            containsInAnyOrder(localNodeExclusion, otherNode1Exclusion, otherNode2Exclusion));\n+    }\n+\n+    public void testWithdrawsVoteFromLocalNode() throws InterruptedException {\n+        final CountDownLatch countDownLatch = new CountDownLatch(1);\n+\n+        clusterStateObserver.waitForNextChange(new AdjustConfigurationForExclusions());\n+        transportService.sendRequest(localNode, AddVotingConfigExclusionsAction.NAME,\n+            new AddVotingConfigExclusionsRequest(new String[]{\"_local\"}),\n+            expectSuccess(r -> {\n+                assertNotNull(r);\n+                countDownLatch.countDown();\n+            })\n+        );\n+\n+        assertTrue(countDownLatch.await(30, TimeUnit.SECONDS));\n+        assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n+            contains(localNodeExclusion));\n+    }\n     public void testReturnsImmediatelyIfVoteAlreadyWithdrawn() throws InterruptedException {\n         final ClusterState state = clusterService.state();\n         setState(clusterService, builder(state)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MTI5MA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386261290", "bodyText": "I don't think we should ever call this with a null or empty array.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:53:12Z", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NzkzMA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487930", "bodyText": "Removed.", "author": "zacharymorn", "createdAt": "2020-03-04T07:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MTI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\nindex 8f59b1b965c..22600b9f48c 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\n\n@@ -318,63 +317,6 @@ public class DiscoveryNodes extends AbstractDiffable<DiscoveryNodes> implements\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n-    public static class NodeResolutionResults {\n-        private String[] resolvedNodes;\n-        private String[] unresolvedNodes;\n-\n-        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n-            this.resolvedNodes = resolvedNodes;\n-            this.unresolvedNodes = unresolvedNodes;\n-        }\n-\n-        public String[] getResolvedNodes() {\n-            return resolvedNodes;\n-        }\n-\n-        public String[] getUnresolvedNodes() {\n-            return unresolvedNodes;\n-        }\n-    }\n-\n-    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n-        if (nodes == null || nodes.length == 0) {\n-            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n-                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n-        } else {\n-            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n-            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n-\n-            if (isNodeIds) {\n-                for (String nodeId : nodes) {\n-                    if (nodeExists(nodeId)) {\n-                        resolvedNodes.add(nodeId);\n-                    }\n-                    else {\n-                        unresolvedNodes.add(nodeId);\n-                    }\n-                }\n-            }\n-            else {\n-                Map<String, String> existingNodesNameId = new HashMap<>();\n-                for (DiscoveryNode node : this) {\n-                    existingNodesNameId.put(node.getName(), node.getId());\n-                }\n-\n-                for (String nodeName : nodes) {\n-                    if (existingNodesNameId.containsKey(nodeName)){\n-                        resolvedNodes.add(existingNodesNameId.get(nodeName));\n-                    }\n-                    else {\n-                        unresolvedNodes.add(nodeName);\n-                    }\n-                }\n-            }\n-\n-            return new NodeResolutionResults(resolvedNodes.toArray(String.class), unresolvedNodes.toArray(String.class));\n-        }\n-    }\n-\n-\n     /**\n      * resolves a set of node \"descriptions\" to concrete and existing node ids. \"descriptions\" can be (resolved in this order):\n      * - \"_local\" or \"_master\" for the relevant nodes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjY0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386262641", "bodyText": "Seems strange to select two completely different behaviours with a boolean flag like this. Why not two methods? Or even no methods and just inline the two branches at the call sites.", "author": "DaveCTurner", "createdAt": "2020-03-02T08:55:57Z", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzk2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487967", "bodyText": "I like the idea of inlining the method, but on the other hand I also feel the AddVotingConfigExclusionsRequest class contains too much logic (I feel it should be more of a pojo like class). However, I've inlined the method.", "author": "zacharymorn", "createdAt": "2020-03-04T07:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\nindex 8f59b1b965c..22600b9f48c 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\n\n@@ -318,63 +317,6 @@ public class DiscoveryNodes extends AbstractDiffable<DiscoveryNodes> implements\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n-    public static class NodeResolutionResults {\n-        private String[] resolvedNodes;\n-        private String[] unresolvedNodes;\n-\n-        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n-            this.resolvedNodes = resolvedNodes;\n-            this.unresolvedNodes = unresolvedNodes;\n-        }\n-\n-        public String[] getResolvedNodes() {\n-            return resolvedNodes;\n-        }\n-\n-        public String[] getUnresolvedNodes() {\n-            return unresolvedNodes;\n-        }\n-    }\n-\n-    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n-        if (nodes == null || nodes.length == 0) {\n-            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n-                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n-        } else {\n-            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n-            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n-\n-            if (isNodeIds) {\n-                for (String nodeId : nodes) {\n-                    if (nodeExists(nodeId)) {\n-                        resolvedNodes.add(nodeId);\n-                    }\n-                    else {\n-                        unresolvedNodes.add(nodeId);\n-                    }\n-                }\n-            }\n-            else {\n-                Map<String, String> existingNodesNameId = new HashMap<>();\n-                for (DiscoveryNode node : this) {\n-                    existingNodesNameId.put(node.getName(), node.getId());\n-                }\n-\n-                for (String nodeName : nodes) {\n-                    if (existingNodesNameId.containsKey(nodeName)){\n-                        resolvedNodes.add(existingNodesNameId.get(nodeName));\n-                    }\n-                    else {\n-                        unresolvedNodes.add(nodeName);\n-                    }\n-                }\n-            }\n-\n-            return new NodeResolutionResults(resolvedNodes.toArray(String.class), unresolvedNodes.toArray(String.class));\n-        }\n-    }\n-\n-\n     /**\n      * resolves a set of node \"descriptions\" to concrete and existing node ids. \"descriptions\" can be (resolved in this order):\n      * - \"_local\" or \"_master\" for the relevant nodes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386263135", "bodyText": "Maybe just the master-eligible nodes?", "author": "DaveCTurner", "createdAt": "2020-03-02T08:57:02Z", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -317,6 +318,63 @@ public DiscoveryNode resolveNode(String node) {\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n+    public static class NodeResolutionResults {\n+        private String[] resolvedNodes;\n+        private String[] unresolvedNodes;\n+\n+        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n+            this.resolvedNodes = resolvedNodes;\n+            this.unresolvedNodes = unresolvedNodes;\n+        }\n+\n+        public String[] getResolvedNodes() {\n+            return resolvedNodes;\n+        }\n+\n+        public String[] getUnresolvedNodes() {\n+            return unresolvedNodes;\n+        }\n+    }\n+\n+    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n+        if (nodes == null || nodes.length == 0) {\n+            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n+                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n+        } else {\n+            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n+            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n+\n+            if (isNodeIds) {\n+                for (String nodeId : nodes) {\n+                    if (nodeExists(nodeId)) {\n+                        resolvedNodes.add(nodeId);\n+                    }\n+                    else {\n+                        unresolvedNodes.add(nodeId);\n+                    }\n+                }\n+            }\n+            else {\n+                Map<String, String> existingNodesNameId = new HashMap<>();\n+                for (DiscoveryNode node : this) {", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzk4NA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387487984", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-04T07:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzA0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r389233047", "bodyText": "Sorry a question just came up when I looked at this again. When we resolve by nodeId, we use ALL existing nodes to check if it exists, not just the master-eligible ones. Shall we keep this behavior the same for resolving by node name as well?", "author": "zacharymorn", "createdAt": "2020-03-07T06:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5MzExNA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405493114", "bodyText": "I'll open a new comment thread on the newly-moved code.", "author": "DaveCTurner", "createdAt": "2020-04-08T12:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\nindex 8f59b1b965c..22600b9f48c 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\n\n@@ -318,63 +317,6 @@ public class DiscoveryNodes extends AbstractDiffable<DiscoveryNodes> implements\n         return nodes.get(resolvedNodeIds[0]);\n     }\n \n-    public static class NodeResolutionResults {\n-        private String[] resolvedNodes;\n-        private String[] unresolvedNodes;\n-\n-        public NodeResolutionResults(String[] resolvedNodes, String[] unresolvedNodes) {\n-            this.resolvedNodes = resolvedNodes;\n-            this.unresolvedNodes = unresolvedNodes;\n-        }\n-\n-        public String[] getResolvedNodes() {\n-            return resolvedNodes;\n-        }\n-\n-        public String[] getUnresolvedNodes() {\n-            return unresolvedNodes;\n-        }\n-    }\n-\n-    public NodeResolutionResults resolveNodesExact(boolean isNodeIds, String... nodes) {\n-        if (nodes == null || nodes.length == 0) {\n-            return new NodeResolutionResults(StreamSupport.stream(this.spliterator(), false)\n-                                            .map(DiscoveryNode::getId).toArray(String[]::new), new String[0]);\n-        } else {\n-            ObjectHashSet<String> resolvedNodes = new ObjectHashSet<>(nodes.length);\n-            ObjectHashSet<String> unresolvedNodes = new ObjectHashSet<>();\n-\n-            if (isNodeIds) {\n-                for (String nodeId : nodes) {\n-                    if (nodeExists(nodeId)) {\n-                        resolvedNodes.add(nodeId);\n-                    }\n-                    else {\n-                        unresolvedNodes.add(nodeId);\n-                    }\n-                }\n-            }\n-            else {\n-                Map<String, String> existingNodesNameId = new HashMap<>();\n-                for (DiscoveryNode node : this) {\n-                    existingNodesNameId.put(node.getName(), node.getId());\n-                }\n-\n-                for (String nodeName : nodes) {\n-                    if (existingNodesNameId.containsKey(nodeName)){\n-                        resolvedNodes.add(existingNodesNameId.get(nodeName));\n-                    }\n-                    else {\n-                        unresolvedNodes.add(nodeName);\n-                    }\n-                }\n-            }\n-\n-            return new NodeResolutionResults(resolvedNodes.toArray(String.class), unresolvedNodes.toArray(String.class));\n-        }\n-    }\n-\n-\n     /**\n      * resolves a set of node \"descriptions\" to concrete and existing node ids. \"descriptions\" can be (resolved in this order):\n      * - \"_local\" or \"_master\" for the relevant nodes\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2NTYwMg==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386265602", "bodyText": "Can this happen? I think only if both args are empty? In which case I think we can detect it sooner and throw a more helpful message.", "author": "DaveCTurner", "createdAt": "2020-03-02T09:02:14Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());\n+            }\n+\n+            resolvedNodes = Arrays.stream(nodeResolutionResults.getResolvedNodes())\n                 .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n \n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+            allProcessedNodes = Sets.newHashSet(Iterables.concat(resolvedNodes, unresolvedNodes));\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for nodeIds \" + Arrays.asList(nodeIds) +\n+                    \" or nodeNames \" + Arrays.asList(nodeNames) + \" matched no master-eligible nodes or absent nodes\");", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODAxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387488011", "bodyText": "You are right, in the new approach this shouldn't happen anymore. This is more of a left-over from previous implementation. I've removed it.", "author": "zacharymorn", "createdAt": "2020-03-04T07:27:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2NTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -66,6 +71,12 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n         this.nodeIds = nodeIds;\n         this.nodeNames = nodeNames;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386269477", "bodyText": "Suggest using a sentinel value other than \"\" here to clarify why the node name is missing. I suspect this will save some confusion in a future debugging session.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());\n          \n          \n            \n                                .map(nodeName -> new VotingConfigExclusion(\"_absent_\", nodeName)).collect(Collectors.toSet());\n          \n      \n    \n    \n  \n\nDo these name-only exclusions do anything? IOW if you add an exclusion by name for an absent node, and then a node with that name joins the cluster, do we exclude it from the voting configuration? I think we don't today, but we should. I think it would also be helpful to update the VotingConfigExclusion to include the node  ID in that case.", "author": "DaveCTurner", "createdAt": "2020-03-02T09:10:44Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n+            }\n+            else {\n+                nodeResolutionResults = allNodes.resolveNodesExact(false, nodeNames);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeName -> new VotingConfigExclusion(\"\", nodeName)).collect(Collectors.toSet());", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODUwNA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387488504", "bodyText": "Changed to use _absent_ here.\n\nI think we don't today, but we should. I think it would also be helpful to update the VotingConfigExclusion to include the node ID in that case.\n\nMake sense, I'll push another commit for this. VotingConfigExclusion may need an additional flag to indicate its nodeId is set when node joins, so that later the set nodeId can be cleared when node leaves.", "author": "zacharymorn", "createdAt": "2020-03-04T07:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxMTY2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387511661", "bodyText": "I think it's ok to leave the node ID set when the node leaves. You shouldn't really have more than one node with the same name, at least not when you're using the node name to identify the node as a user would be doing here. If they want to go against recommendations and use duplicate node names then they'll need to specify node IDs in the API.", "author": "DaveCTurner", "createdAt": "2020-03-04T08:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTczOQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388119739", "bodyText": "I've pushed a new commit for this. Please let me know if that's the right place to put this logic.\nOnce these all look good, I'll start to work on adding more tests.", "author": "zacharymorn", "createdAt": "2020-03-05T07:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzMjQyMA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388132420", "bodyText": "Yes, the JoinTaskExecutor is indeed the right place to do this  \ud83d\udc4d\nI think this means that no cluster states contain unresolved voting configurations which could be resolved, which is an invariant that we should assert somewhere. Maybe in Coordinator#improveConfiguration since that's where we actually use the exclusions?", "author": "DaveCTurner", "createdAt": "2020-03-05T08:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc1NTgwOA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388755808", "bodyText": "no cluster states contain unresolved voting configurations which could be resolved\n\nIn terms of code, do you mean that no node ID should be empty when it reaches Coordinator#improveConfiguration (as it needs to have value of either _absent_ when no node with matching name joins yet, or an actual node  ID?) The reason I'm asking is currently there should not be any code path that set empty node ID, as we basically use _absent_ to denote that,  so I'm not quite sure what needs to be asserted  there?", "author": "zacharymorn", "createdAt": "2020-03-06T07:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg1OTk2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r388859966", "bodyText": "I mean that every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name, and every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID (except, I guess, for nodes whose name is literally the string \"_absent_\").\nThe point is that we are only resolving these things in the JoinTaskExecutor which today  is the only way that nodes can join the cluster, but we don't want to get caught out by any future changes that might generalise that.", "author": "DaveCTurner", "createdAt": "2020-03-06T11:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzAyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r389233021", "bodyText": "Ah I see, make sense. I've added the invariant check.", "author": "zacharymorn", "createdAt": "2020-03-07T06:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2OTQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -66,6 +71,12 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n         this.nodeIds = nodeIds;\n         this.nodeNames = nodeNames;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDY2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r386270669", "bodyText": "Suggest using a sentinel value other than \"\" here to clarify why the node name is missing. I suspect this will save some confusion in a future debugging session.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());\n          \n          \n            \n                                .map(nodeId -> new VotingConfigExclusion(nodeId, \"_absent_\")).collect(Collectors.toSet());", "author": "DaveCTurner", "createdAt": "2020-03-02T09:13:17Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +62,72 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        // TODO which version to use here?\n+        if (in.getVersion() == Version.V_EMPTY) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        }\n+        else {\n+            DiscoveryNodes.NodeResolutionResults nodeResolutionResults;\n+            Set<VotingConfigExclusion> resolvedNodes;\n+            Set<VotingConfigExclusion> unresolvedNodes;\n+\n+            if (nodeIds.length >= 1) {\n+                nodeResolutionResults = allNodes.resolveNodesExact(true, nodeIds);\n+\n+                unresolvedNodes = Arrays.stream(nodeResolutionResults.getUnresolvedNodes())\n+                    .map(nodeId -> new VotingConfigExclusion(nodeId, \"\")).collect(Collectors.toSet());", "originalCommit": "c3eb5a1f2ed01e8687cbab6b84d443dc037eb66e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4ODU1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r387488555", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-04T07:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ad415731524169e2f745ff3fff302aa67f04abfa", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 759c920bbd7..729cecbdbed 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -66,6 +71,12 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n         this.nodeIds = nodeIds;\n         this.nodeNames = nodeNames;\n"}}, {"oid": "ad415731524169e2f745ff3fff302aa67f04abfa", "url": "https://github.com/elastic/elasticsearch/commit/ad415731524169e2f745ff3fff302aa67f04abfa", "message": "Address feedback", "committedDate": "2020-03-04T07:23:06Z", "type": "commit"}, {"oid": "b085c2cd8980b504ba19c1ce89c4513f9ab143f5", "url": "https://github.com/elastic/elasticsearch/commit/b085c2cd8980b504ba19c1ce89c4513f9ab143f5", "message": "Address comment", "committedDate": "2020-03-04T07:57:50Z", "type": "commit"}, {"oid": "57cbc474394df4f442e849dc953ad1281b6c430a", "url": "https://github.com/elastic/elasticsearch/commit/57cbc474394df4f442e849dc953ad1281b6c430a", "message": "Update nodeId for VotingConfigExclusion when node with matching name joins", "committedDate": "2020-03-04T22:00:30Z", "type": "commit"}, {"oid": "e08a8a15a34a8ed138b62ac1115f9232323a41dd", "url": "https://github.com/elastic/elasticsearch/commit/e08a8a15a34a8ed138b62ac1115f9232323a41dd", "message": "Add test cases to AddVotingConfigExclusionsRequestTests", "committedDate": "2020-03-06T07:37:34Z", "type": "commit"}, {"oid": "d32512355d379374ae40cd8b7f1d7e0fd2a207cb", "url": "https://github.com/elastic/elasticsearch/commit/d32512355d379374ae40cd8b7f1d7e0fd2a207cb", "message": "Add assertion for voting config exclusion in cluster state", "committedDate": "2020-03-06T22:21:38Z", "type": "commit"}, {"oid": "bede9a011b95a8b838bbd51d6053726e1f008932", "url": "https://github.com/elastic/elasticsearch/commit/bede9a011b95a8b838bbd51d6053726e1f008932", "message": "Add test cases to TransportAddVotingConfigExclusionsActionTests", "committedDate": "2020-03-06T23:12:54Z", "type": "commit"}, {"oid": "fb337f2efd5476fe0160356b45cda3a653de67ce", "url": "https://github.com/elastic/elasticsearch/commit/fb337f2efd5476fe0160356b45cda3a653de67ce", "message": "Add test to NodeJoinTests", "committedDate": "2020-03-09T17:54:15Z", "type": "commit"}, {"oid": "5e28294d54d11a047ed376d1eb517591ab6fc11f", "url": "https://github.com/elastic/elasticsearch/commit/5e28294d54d11a047ed376d1eb517591ab6fc11f", "message": "Add test to CooridnatorTests", "committedDate": "2020-03-09T20:20:57Z", "type": "commit"}, {"oid": "49f749c02cb7c2fda6f705f130e1e269f97e7703", "url": "https://github.com/elastic/elasticsearch/commit/49f749c02cb7c2fda6f705f130e1e269f97e7703", "message": "Inline deprecation message", "committedDate": "2020-03-10T05:35:25Z", "type": "commit"}, {"oid": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "url": "https://github.com/elastic/elasticsearch/commit/a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "message": "Merge branch 'master' into issue-47990", "committedDate": "2020-03-10T05:51:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzU4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397727589", "bodyText": "This whole process seems more complicated than it needs to be. Why not create a new HashSet<VotingConfigExclusion>() here and then add the voting config exclusions to it as we go? IOW why collect the node IDs, then separately convert them to unresolved exclusions, and then do the lookups all over again for the resolved nodes?", "author": "DaveCTurner", "createdAt": "2020-03-25T09:52:22Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -56,32 +65,100 @@ public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if(noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        }\n+        else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n+        Set<VotingConfigExclusion> allProcessedNodes = null;\n+\n+        if (nodeDescriptions.length >= 1) {\n+            allProcessedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                                    .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (allProcessedNodes.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else {", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2NDk4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r399064983", "bodyText": "I did some refactoring in commit aaa0f89. Could you please let me know if it looks good to you?", "author": "zacharymorn", "createdAt": "2020-03-27T06:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex f78d4b87f88..65fbb1e88f7 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -75,6 +80,10 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n                 \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n         }\n \n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\", DEPRECATION_MESSAGE);\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n         this.nodeIds = nodeIds;\n         this.nodeNames = nodeNames;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzg5NA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397727894", "bodyText": "I think this is equivalent:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    else if (arrayHasElement(nodeNames)) {\n          \n          \n            \n                    else {\n          \n          \n            \n                        return arrayHasElement(nodeNames) == false;\n          \n          \n            \n                    }", "author": "DaveCTurner", "createdAt": "2020-03-25T09:52:51Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -99,13 +176,47 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         return resolvedExclusions;\n     }\n \n+    private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n+        if(arrayHasElement(deprecatedNodeDescription)) {\n+            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeIds)) {\n+            return arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeNames)) {", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDY1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314657", "bodyText": "Ah yes, fixed.", "author": "zacharymorn", "createdAt": "2020-03-26T04:42:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNzg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex f78d4b87f88..65fbb1e88f7 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -177,25 +191,17 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n     }\n \n     private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n-        if(arrayHasElement(deprecatedNodeDescription)) {\n-            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n-        }\n-        else if (arrayHasElement(nodeIds)) {\n-            return arrayHasElement(nodeNames);\n+        if(deprecatedNodeDescription.length > 0) {\n+            return nodeIds.length > 0 || nodeNames.length > 0;\n         }\n-        else if (arrayHasElement(nodeNames)) {\n-            return false;\n+        else if (nodeIds.length > 0) {\n+            return nodeNames.length > 0;\n         }\n         else {\n-            // none of the node identifiers are set\n-            return true;\n+            return nodeNames.length > 0 == false;\n         }\n     }\n \n-    private boolean arrayHasElement(String[] array) {\n-        return array != null && array.length > 0;\n-    }\n-\n     /**\n      * @return descriptions of the nodes for whom to add voting config exclusions.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTY2OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397729668", "bodyText": "I don't think these things can be null so this can be simplified to a length check (and then inlined, the length check is shorter than the method call)", "author": "DaveCTurner", "createdAt": "2020-03-25T09:55:48Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -99,13 +176,47 @@ public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         return resolvedExclusions;\n     }\n \n+    private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n+        if(arrayHasElement(deprecatedNodeDescription)) {\n+            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeIds)) {\n+            return arrayHasElement(nodeNames);\n+        }\n+        else if (arrayHasElement(nodeNames)) {\n+            return false;\n+        }\n+        else {\n+            // none of the node identifiers are set\n+            return true;\n+        }\n+    }\n+\n+    private boolean arrayHasElement(String[] array) {\n+        return array != null && array.length > 0;", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDY5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314695", "bodyText": "I've implemented it as you suggested. The reason I had it there before was it's working on array params passed through AddVotingConfigExclusionsRequest constructor, so I thought we might want to guard against NPE for future constructor call.", "author": "zacharymorn", "createdAt": "2020-03-26T04:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyOTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex f78d4b87f88..65fbb1e88f7 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -177,25 +191,17 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n     }\n \n     private boolean noneOrMoreThanOneIsSet(String[] deprecatedNodeDescription, String[] nodeIds, String[] nodeNames) {\n-        if(arrayHasElement(deprecatedNodeDescription)) {\n-            return arrayHasElement(nodeIds) || arrayHasElement(nodeNames);\n-        }\n-        else if (arrayHasElement(nodeIds)) {\n-            return arrayHasElement(nodeNames);\n+        if(deprecatedNodeDescription.length > 0) {\n+            return nodeIds.length > 0 || nodeNames.length > 0;\n         }\n-        else if (arrayHasElement(nodeNames)) {\n-            return false;\n+        else if (nodeIds.length > 0) {\n+            return nodeNames.length > 0;\n         }\n         else {\n-            // none of the node identifiers are set\n-            return true;\n+            return nodeNames.length > 0 == false;\n         }\n     }\n \n-    private boolean arrayHasElement(String[] array) {\n-        return array != null && array.length > 0;\n-    }\n-\n     /**\n      * @return descriptions of the nodes for whom to add voting config exclusions.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMTQ4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397731489", "bodyText": "Hmm this is a good point. We should deprecate the use of nodeDescriptions in this PR so we can remove it in 8.0. That means the constructor should log a deprecation warning  if nodeDescriptions is nonempty.\nThis is in addition to the deprecation warning on the REST layer, because it's possible that someone is using the transport client to bypass those checks in 7.x.\n(Also this TODO comment should be removed)", "author": "DaveCTurner", "createdAt": "2020-03-25T09:58:40Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -121,15 +232,22 @@ public ActionRequestValidationException validate() {\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         super.writeTo(out);\n+        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDcxMw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314713", "bodyText": "Added the additional deprecation warning and removed the TODO.", "author": "zacharymorn", "createdAt": "2020-03-26T04:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMTQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex f78d4b87f88..65fbb1e88f7 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -232,7 +238,6 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         super.writeTo(out);\n-        // TODO should this be removed in the latest version where nodeIds and nodeNames are used?\n         out.writeStringArray(nodeDescriptions);\n         if (out.getVersion().onOrAfter(Version.V_8_0_0)) {\n             out.writeStringArray(nodeIds);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMjM2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397732363", "bodyText": "We can deduce that it's this assertion that fails from the stack trace, so there's no need for this message, but it would be useful to see the cluster state when it fails:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert validVotingConfigExclusionState(clusterState) : \"Voting Config Exclusion in invalid state. \" +\n          \n          \n            \n                    assert validVotingConfigExclusionState(clusterState) : clusterState;", "author": "DaveCTurner", "createdAt": "2020-03-25T10:00:04Z", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -868,6 +868,8 @@ assert localNodeMayWinElection(getLastAcceptedState()) :\n     // Package-private for testing\n     ClusterState improveConfiguration(ClusterState clusterState) {\n         assert Thread.holdsLock(mutex) : \"Coordinator mutex not held\";\n+        assert validVotingConfigExclusionState(clusterState) : \"Voting Config Exclusion in invalid state. \" +", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDczMw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314733", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-26T04:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMjM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\nindex eadb37c0f2d..7b971dcadbd 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\n\n@@ -868,8 +868,7 @@ public class Coordinator extends AbstractLifecycleComponent implements Discovery\n     // Package-private for testing\n     ClusterState improveConfiguration(ClusterState clusterState) {\n         assert Thread.holdsLock(mutex) : \"Coordinator mutex not held\";\n-        assert validVotingConfigExclusionState(clusterState) : \"Voting Config Exclusion in invalid state. \" +\n-            \"Exclusions may not be processed correctly\";\n+        assert validVotingConfigExclusionState(clusterState) : clusterState;\n \n         // exclude any nodes whose ID is in the voting config exclusions list ...\n         final Stream<String> excludedNodeIds = clusterState.getVotingConfigExclusions().stream().map(VotingConfigExclusion::getNodeId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMzU1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397733552", "bodyText": "The changes to this file are now only whitespace, would you revert them please?", "author": "DaveCTurner", "createdAt": "2020-03-25T10:01:57Z", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java", "diffHunk": "@@ -337,6 +337,7 @@ public DiscoveryNode resolveNode(String node) {\n             return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new);\n         } else {\n             ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length);\n+", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDg4OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314888", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-26T04:43:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMzU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\nindex 75d63309731..6f8f680b10a 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java\n\n@@ -337,7 +337,6 @@ public class DiscoveryNodes extends AbstractDiffable<DiscoveryNodes> implements\n             return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new);\n         } else {\n             ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length);\n-\n             for (String nodeId : nodes) {\n                 if (nodeId.equals(\"_local\")) {\n                     String localNodeId = getLocalNodeId();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTM5NA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735394", "bodyText": "Did you mean to remove these assertions? Can you explain why?", "author": "DaveCTurner", "createdAt": "2020-03-25T10:04:50Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -131,15 +322,8 @@ public void testResolveAndCheckMaximum() {\n                 .coordinationMetaData(CoordinationMetaData.builder().addVotingConfigExclusion(otherNode1Exclusion).build()));\n         final ClusterState clusterState = builder.build();\n \n-        assertThat(makeRequest().resolveVotingConfigExclusionsAndCheckMaximum(clusterState, 3, \"setting.name\"),", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyODQ2NA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398328464", "bodyText": "This was due to makeRequest() will now throw\nIllegalArgumentException: Please set node identifiers correctly. One and only one of [node_name], [node_names] and [node_ids] has to be set\nbecause it's not passing in any node identifiers, as the definition of makeRequest is\n    private static AddVotingConfigExclusionsRequest makeRequest(String... descriptions) {\n        return new AddVotingConfigExclusionsRequest(descriptions);\n    }\n\nSo the new check added inside AddVotingConfigExclusionsRequest constructor throws exception under this scenario.\nIn addition, the remaining assertions using makeRequest(\"_local\") seems to verify the logic AddVotingConfigExclusionsRequest#resolveVotingConfigExclusionsAndCheckMaximum already.\nDo you think I should still add back these assertions with tweak for testing AddVotingConfigExclusionsRequest#resolveVotingConfigExclusionsAndCheckMaximum  more thoroughly?", "author": "zacharymorn", "createdAt": "2020-03-26T05:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NTkyNA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405495924", "bodyText": "Looks ok now, I will re-review rather than trying to trace the history here.", "author": "DaveCTurner", "createdAt": "2020-04-08T12:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\nindex 119757064aa..495550796f9 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\n\n@@ -328,6 +323,7 @@ public class AddVotingConfigExclusionsRequestTests extends ESTestCase {\n             () -> makeRequest(\"_local\").resolveVotingConfigExclusionsAndCheckMaximum(clusterState, 1, \"setting.name\")).getMessage(),\n             equalTo(\"add voting config exclusions request for [_local] would add [1] exclusions to the existing [1] which would \" +\n                 \"exceed the maximum of [1] set by [setting.name]\"));\n+        assertWarnings(AddVotingConfigExclusionsRequest.DEPRECATION_MESSAGE);\n     }\n \n     private static AddVotingConfigExclusionsRequest makeRequest(String... descriptions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735696", "bodyText": "Could you revert the whitespace changes to this file?", "author": "DaveCTurner", "createdAt": "2020-03-25T10:05:18Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -181,7 +182,7 @@ public void testWithdrawsVotesFromNodesMatchingWildcard() throws InterruptedExce\n \n         assertTrue(countDownLatch.await(30, TimeUnit.SECONDS));\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n-                containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNTAxMA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398315010", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-26T04:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\nindex 09a16a1b5d1..253c682852b 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\n\n@@ -182,7 +184,8 @@ public class TransportAddVotingConfigExclusionsActionTests extends ESTestCase {\n \n         assertTrue(countDownLatch.await(30, TimeUnit.SECONDS));\n         assertThat(clusterService.getClusterApplierService().state().getVotingConfigExclusions(),\n-            containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n+                containsInAnyOrder(otherNode1Exclusion, otherNode2Exclusion));\n+        assertWarnings(AddVotingConfigExclusionsRequest.DEPRECATION_MESSAGE);\n     }\n \n     public void testWithdrawsVotesFromAllMasterEligibleNodes() throws InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTg3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397735877", "bodyText": "I think the zero timeout is important for this test?", "author": "DaveCTurner", "createdAt": "2020-03-25T10:05:37Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java", "diffHunk": "@@ -231,7 +231,7 @@ public void testReturnsImmediatelyIfVoteAlreadyWithdrawn() throws InterruptedExc\n \n         // no observer to reconfigure\n         transportService.sendRequest(localNode, AddVotingConfigExclusionsAction.NAME,\n-            new AddVotingConfigExclusionsRequest(new String[]{\"other1\"}, TimeValue.ZERO),", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNTAyNg==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398315026", "bodyText": "This was removed in between commits that change the constructor signature. I've added it back.", "author": "zacharymorn", "createdAt": "2020-03-26T04:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\nindex 09a16a1b5d1..253c682852b 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/TransportAddVotingConfigExclusionsActionTests.java\n\n@@ -231,7 +236,7 @@ public class TransportAddVotingConfigExclusionsActionTests extends ESTestCase {\n \n         // no observer to reconfigure\n         transportService.sendRequest(localNode, AddVotingConfigExclusionsAction.NAME,\n-            new AddVotingConfigExclusionsRequest(new String[]{\"other1\"}),\n+            new AddVotingConfigExclusionsRequest(new String[]{\"other1\"}, Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY, TimeValue.ZERO),\n             expectSuccess(r -> {\n                 assertNotNull(r);\n                 countDownLatch.countDown();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNjA3NA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397736074", "bodyText": "Lost newline?", "author": "DaveCTurner", "createdAt": "2020-03-25T10:06:00Z", "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "diffHunk": "@@ -302,8 +304,7 @@ public void testJoinWithHigherTermButBetterStateGetsRejected() {\n         assertFalse(isLocalNodeElectedMaster());\n     }\n \n-    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() {\n-        DiscoveryNode node0 = newNode(0, true);\n+    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() { DiscoveryNode node0 = newNode(0, true);", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNTA1OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398315058", "bodyText": "Ah sorry, fixed.", "author": "zacharymorn", "createdAt": "2020-03-26T04:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNjA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java b/server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java\nindex ab1cc54f96f..f6bd8f528b0 100644\n--- a/server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java\n+++ b/server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java\n\n@@ -304,7 +304,8 @@ public class NodeJoinTests extends ESTestCase {\n         assertFalse(isLocalNodeElectedMaster());\n     }\n \n-    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() { DiscoveryNode node0 = newNode(0, true);\n+    public void testJoinWithHigherTermButBetterStateStillElectsMasterThroughSelfJoin() {\n+        DiscoveryNode node0 = newNode(0, true);\n         DiscoveryNode node1 = newNode(1, true);\n         long initialTerm = randomLongBetween(1, 10);\n         long initialVersion = randomLongBetween(1, 10);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNzUxMA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397737510", "bodyText": "I think this might cause confusion as it's not clear exactly what change needs to be made. How about this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String DEPRECATION_MESSAGE = \"Using [node_name] for adding voting config exclustion will be removed \" +\n          \n          \n            \n                private static final String DEPRECATION_MESSAGE = \"POST /_cluster/voting_config_exclusions/{node_name} will be removed in a future version. Please use POST /_cluster/voting_config_exclusions?node_ids=... or POST /_cluster/voting_config_exclusions?node_names=... instead.\"", "author": "DaveCTurner", "createdAt": "2020-03-25T10:08:26Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java", "diffHunk": "@@ -28,23 +28,28 @@\n import org.elasticsearch.rest.RestRequest;\n import org.elasticsearch.rest.action.RestToXContentListener;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import java.io.IOException;\n import java.util.List;\n \n import static org.elasticsearch.rest.RestRequest.Method.POST;\n \n public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n-\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n+    private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n \n+    private static final String DEPRECATION_MESSAGE = \"Using [node_name] for adding voting config exclustion will be removed \" +", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDkxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314911", "bodyText": "Make sense. Done.", "author": "zacharymorn", "createdAt": "2020-03-26T04:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNzUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\nindex fd25844ee11..01355c5e50e 100644\n--- a/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n+++ b/server/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestAddVotingConfigExclusionAction.java\n\n@@ -39,8 +39,11 @@ public class RestAddVotingConfigExclusionAction extends BaseRestHandler {\n     private static final TimeValue DEFAULT_TIMEOUT = TimeValue.timeValueSeconds(30L);\n     private static final Logger logger = LogManager.getLogger(RestAddVotingConfigExclusionAction.class);\n \n-    private static final String DEPRECATION_MESSAGE = \"Using [node_name] for adding voting config exclustion will be removed \" +\n-        \"in a future version. Please use [node_ids] or [node_names] instead\";\n+    private static final String DEPRECATION_MESSAGE = \"POST /_cluster/voting_config_exclusions/{node_name} \" +\n+        \"will be removed in a future version. \" +\n+        \"Please use POST /_cluster/voting_config_exclusions?node_ids=... \" +\n+        \"or POST /_cluster/voting_config_exclusions?node_names=... instead.\";\n+\n     @Override\n     public String getName() {\n         return \"add_voting_config_exclusions_action\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczODM5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397738399", "bodyText": "Yes I think we should ignore master-ineligible nodes here.", "author": "DaveCTurner", "createdAt": "2020-03-25T10:09:52Z", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,19 +148,43 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n+                    // eligibility will be taken into account anyway, here we may not need the check?", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDgxOA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314818", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-26T04:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczODM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\nindex 82bfd51ee41..afd29adf4ab 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\n\n@@ -148,9 +149,9 @@ public class JoinTaskExecutor implements ClusterStateTaskExecutor<JoinTaskExecut\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n-                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n-                    // eligibility will be taken into account anyway, here we may not need the check?\n-                    joiniedNodeNameIds.put(node.getName(), node.getId());\n+                    if(node.isMasterNode()) {\n+                        joiniedNodeNameIds.put(node.getName(), node.getId());\n+                    }\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTgwOA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397741808", "bodyText": "Yes, seems reasonable.", "author": "DaveCTurner", "createdAt": "2020-03-25T10:15:32Z", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -895,6 +897,31 @@ ClusterState improveConfiguration(ClusterState clusterState) {\n         return clusterState;\n     }\n \n+    /*\n+    * Valid Voting Configuration Exclusion state criteria:\n+    * 1. Every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name\n+    * 2. Every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID\n+     */\n+    private boolean validVotingConfigExclusionState(ClusterState clusterState) {\n+        Set<VotingConfigExclusion> votingConfigExclusions = clusterState.getVotingConfigExclusions();\n+        Set<String> nodeNamesWithAbsentId = votingConfigExclusions.stream()\n+                                                .filter(e -> e.getNodeId().equals(VotingConfigExclusion.MISSING_VALUE_MARKER))\n+                                                .map(VotingConfigExclusion::getNodeName)\n+                                                .collect(Collectors.toSet());\n+        Set<String> nodeIdsWithAbsentName = votingConfigExclusions.stream()\n+                                                .filter(e -> e.getNodeName().equals(VotingConfigExclusion.MISSING_VALUE_MARKER))\n+                                                .map(VotingConfigExclusion::getNodeId)\n+                                                .collect(Collectors.toSet());\n+        for (DiscoveryNode node : clusterState.getNodes()) {\n+            // TODO should this check be applied to master-eligible nodes only?", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDc4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314781", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-26T04:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MTgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\nindex eadb37c0f2d..7b971dcadbd 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\n\n@@ -913,9 +912,9 @@ public class Coordinator extends AbstractLifecycleComponent implements Discovery\n                                                 .map(VotingConfigExclusion::getNodeId)\n                                                 .collect(Collectors.toSet());\n         for (DiscoveryNode node : clusterState.getNodes()) {\n-            // TODO should this check be applied to master-eligible nodes only?\n-            if(nodeIdsWithAbsentName.contains(node.getId()) || nodeNamesWithAbsentId.contains(node.getName())) {\n-                return false;\n+            if (node.isMasterNode() &&\n+                (nodeIdsWithAbsentName.contains(node.getId()) || nodeNamesWithAbsentId.contains(node.getName()))) {\n+                    return false;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MzIwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397743205", "bodyText": "I think we should only do this if we actually resolved any missing values (i.e. newVotingConfigExclusions is different from currentVotingConfigExclusions).", "author": "DaveCTurner", "createdAt": "2020-03-25T10:17:51Z", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,19 +148,43 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n+                    // eligibility will be taken into account anyway, here we may not need the check?\n+                    joiniedNodeNameIds.put(node.getName(), node.getId());\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n                 }\n             }\n             results.success(joinTask);\n         }\n+\n         if (nodesChanged) {\n             rerouteService.reroute(\"post-join reroute\", Priority.HIGH, ActionListener.wrap(\n                 r -> logger.trace(\"post-join reroute completed\"),\n                 e -> logger.debug(\"post-join reroute failed\", e)));\n \n-            return results.build(allocationService.adaptAutoExpandReplicas(newState.nodes(nodesBuilder).build()));\n+            if (joiniedNodeNameIds.isEmpty() == false) {\n+                Set<CoordinationMetaData.VotingConfigExclusion> currentVotingConfigExclusions = currentState.getVotingConfigExclusions();\n+                Set<CoordinationMetaData.VotingConfigExclusion> newVotingConfigExclusions = currentVotingConfigExclusions.stream()\n+                    .map(e -> {\n+                        // Update nodeId in VotingConfigExclusion when a new node with excluded node name joins\n+                        if (CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER.equals(e.getNodeId()) &&\n+                            joiniedNodeNameIds.containsKey(e.getNodeName())) {\n+                            return new CoordinationMetaData.VotingConfigExclusion(joiniedNodeNameIds.get(e.getNodeName()), e.getNodeName());\n+                        } else {\n+                            return e;\n+                        }\n+                    }).collect(Collectors.toSet());\n+\n+                CoordinationMetaData.Builder coordMetaDataBuilder = CoordinationMetaData.builder(currentState.coordinationMetaData())", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDg0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314847", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-26T04:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0MzIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\nindex 82bfd51ee41..afd29adf4ab 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\n\n@@ -148,9 +149,9 @@ public class JoinTaskExecutor implements ClusterStateTaskExecutor<JoinTaskExecut\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n-                    // TODO do we need to check node.isMasterNode here for eligibility? I think since in the checks later master\n-                    // eligibility will be taken into account anyway, here we may not need the check?\n-                    joiniedNodeNameIds.put(node.getName(), node.getId());\n+                    if(node.isMasterNode()) {\n+                        joiniedNodeNameIds.put(node.getName(), node.getId());\n+                    }\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NTA5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397745093", "bodyText": "No, cross-version compatibility should be covered by the BWC integration tests.", "author": "DaveCTurner", "createdAt": "2020-03-25T10:21:02Z", "path": "server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java", "diffHunk": "@@ -35,25 +36,50 @@\n \n import static java.util.Collections.emptyMap;\n import static java.util.Collections.emptySet;\n-import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.equalTo;\n \n public class AddVotingConfigExclusionsRequestTests extends ESTestCase {\n     public void testSerialization() throws IOException {\n-        int descriptionCount = between(0, 5);\n+        int descriptionCount = between(1, 5);\n         String[] descriptions = new String[descriptionCount];\n         for (int i = 0; i < descriptionCount; i++) {\n             descriptions[i] = randomAlphaOfLength(10);\n         }\n         TimeValue timeout = TimeValue.timeValueMillis(between(0, 30000));\n-        final AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(descriptions, timeout);\n+        final AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(descriptions, Strings.EMPTY_ARRAY,\n+            Strings.EMPTY_ARRAY, timeout);\n         final AddVotingConfigExclusionsRequest deserialized = copyWriteable(originalRequest, writableRegistry(),\n             AddVotingConfigExclusionsRequest::new);\n         assertThat(deserialized.getNodeDescriptions(), equalTo(originalRequest.getNodeDescriptions()));\n         assertThat(deserialized.getTimeout(), equalTo(originalRequest.getTimeout()));\n     }\n \n+    public void testSerializationForNodeIdOrNodeName() throws IOException {\n+        // TODO still need adjustment for version? copyWriteable uses Version.CURRENT", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNDkzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398314935", "bodyText": "Ok and TODO removed.", "author": "zacharymorn", "createdAt": "2020-03-26T04:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0NTA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\nindex 119757064aa..495550796f9 100644\n--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\n+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequestTests.java\n\n@@ -54,10 +54,10 @@ public class AddVotingConfigExclusionsRequestTests extends ESTestCase {\n             AddVotingConfigExclusionsRequest::new);\n         assertThat(deserialized.getNodeDescriptions(), equalTo(originalRequest.getNodeDescriptions()));\n         assertThat(deserialized.getTimeout(), equalTo(originalRequest.getTimeout()));\n+        assertWarnings(AddVotingConfigExclusionsRequest.DEPRECATION_MESSAGE);\n     }\n \n     public void testSerializationForNodeIdOrNodeName() throws IOException {\n-        // TODO still need adjustment for version? copyWriteable uses Version.CURRENT\n         AddVotingConfigExclusionsRequest originalRequest = new AddVotingConfigExclusionsRequest(Strings.EMPTY_ARRAY,\n                                         new String[]{\"nodeId1\", \"nodeId2\"}, Strings.EMPTY_ARRAY, TimeValue.ZERO);\n         AddVotingConfigExclusionsRequest deserialized = copyWriteable(originalRequest, writableRegistry(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0ODc5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397748795", "bodyText": "I think it would be better to only add this in testJoinUpdateVotingConfigExclusion by taking the result of initialState and adjusting it. It will make the setup for that test a bit longer, but I don't think we should pollute other tests with this change.", "author": "DaveCTurner", "createdAt": "2020-03-25T10:26:58Z", "path": "server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java", "diffHunk": "@@ -113,6 +113,8 @@ private static ClusterState initialState(DiscoveryNode localNode, long term, lon\n                         .term(term)\n                         .lastAcceptedConfiguration(config)\n                         .lastCommittedConfiguration(config)\n+                        .addVotingConfigExclusion(new CoordinationMetaData.VotingConfigExclusion(\n+                            CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER, \"knownNodeName\"))", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2NTE2NA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r399065164", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-03-27T06:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc0ODc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "aaa0f895ff2fa09ac0922997314944946647d042", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java b/server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java\nindex ab1cc54f96f..bd3c7ca8f95 100644\n--- a/server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java\n+++ b/server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java\n\n@@ -113,8 +113,6 @@ public class NodeJoinTests extends ESTestCase {\n                         .term(term)\n                         .lastAcceptedConfiguration(config)\n                         .lastCommittedConfiguration(config)\n-                        .addVotingConfigExclusion(new CoordinationMetaData.VotingConfigExclusion(\n-                            CoordinationMetaData.VotingConfigExclusion.MISSING_VALUE_MARKER, \"knownNodeName\"))\n                     .build()))\n             .version(version)\n             .blocks(ClusterBlocks.EMPTY_CLUSTER_BLOCK).build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTI3MA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397751270", "bodyText": "Suggest making this non-private and static so you can test it directly, rather than indirectly by catching assertions in tests.", "author": "DaveCTurner", "createdAt": "2020-03-25T10:31:02Z", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java", "diffHunk": "@@ -895,6 +897,31 @@ ClusterState improveConfiguration(ClusterState clusterState) {\n         return clusterState;\n     }\n \n+    /*\n+    * Valid Voting Configuration Exclusion state criteria:\n+    * 1. Every voting config exclusion with an ID of _absent_ should not match any nodes currently in the cluster by name\n+    * 2. Every voting config exclusion with a name of _absent_ should not match any nodes currently in the cluster by ID\n+     */\n+    private boolean validVotingConfigExclusionState(ClusterState clusterState) {", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\nindex eadb37c0f2d..7b971dcadbd 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java\n\n@@ -913,9 +912,9 @@ public class Coordinator extends AbstractLifecycleComponent implements Discovery\n                                                 .map(VotingConfigExclusion::getNodeId)\n                                                 .collect(Collectors.toSet());\n         for (DiscoveryNode node : clusterState.getNodes()) {\n-            // TODO should this check be applied to master-eligible nodes only?\n-            if(nodeIdsWithAbsentName.contains(node.getId()) || nodeNamesWithAbsentId.contains(node.getName())) {\n-                return false;\n+            if (node.isMasterNode() &&\n+                (nodeIdsWithAbsentName.contains(node.getId()) || nodeNamesWithAbsentId.contains(node.getName()))) {\n+                    return false;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTg1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r397751857", "bodyText": "I'd prefer to test the logic in the assertion directly (by making the method static) rather than this quite complicated setup that catches assertions.", "author": "DaveCTurner", "createdAt": "2020-03-25T10:32:02Z", "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "diffHunk": "@@ -1418,4 +1421,53 @@ public void testDoesNotPerformElectionWhenRestartingFollower() {\n         }\n     }\n \n+    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {", "originalCommit": "a174c7ca94a6ff18241a88cc04db088c0dc3abb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyNTM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r398325381", "bodyText": "I tried this and pushed up the commit 0fb29c3 to show the changes.\nIt appears to me though that it didn't cut down the code needed for the setup (for getting the current ClusterState, and 2 new invalid ClusterState with VotingConfigExclusion). In addition, since we are now no longer testing the assertion in Cooridnator#improveConfiguration, it is possible to introduce some bugs that may still call the validation method, or somehow bypass it, and doesn't throw assertion error even when the validation method returns false.\nWhat do you think? Or there's other way to simplify this test method even further?", "author": "zacharymorn", "createdAt": "2020-03-26T05:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODE0MA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r405498140", "bodyText": "Looks good IMO. Not catching AssertionError is an improvement; I'm not too worried about failing to call this assertion, that's not an error that we often make.", "author": "DaveCTurner", "createdAt": "2020-04-08T12:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1MTg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java b/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java\nindex d71808a3656..282c2b2a49b 100644\n--- a/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java\n\n@@ -1437,9 +1437,7 @@ public class CoordinatorTests extends AbstractCoordinatorTestCase {\n             ClusterState newState1 = buildNewClusterStateWithVotingConfigExclusion(currentState, newVotingConfigExclusion1);\n \n             synchronized (coordinator.mutex) {\n-                AssertionError error = expectThrows(AssertionError.class, () -> coordinator.improveConfiguration(newState1));\n-                assertEquals(\"Voting Config Exclusion in invalid state. Exclusions may not be processed correctly\",\n-                                error.getMessage());\n+                expectThrows(AssertionError.class, () -> coordinator.improveConfiguration(newState1));\n             }\n \n             Set<CoordinationMetaData.VotingConfigExclusion> newVotingConfigExclusion2 = new HashSet<>(){{\n"}}, {"oid": "2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "url": "https://github.com/elastic/elasticsearch/commit/2d37e5cc1f0e64786e95b5cf59fb7666be3f13d2", "message": "Address some comments that can be fixed quickly", "committedDate": "2020-03-26T04:40:29Z", "type": "commit"}, {"oid": "0fb29c3e76656cd13b4c8ee6e523ceb2adff97cc", "url": "https://github.com/elastic/elasticsearch/commit/0fb29c3e76656cd13b4c8ee6e523ceb2adff97cc", "message": "Make Coordinator#validVotingConfigExclusionState package static for testability", "committedDate": "2020-03-26T05:16:04Z", "type": "commit"}, {"oid": "aaa0f895ff2fa09ac0922997314944946647d042", "url": "https://github.com/elastic/elasticsearch/commit/aaa0f895ff2fa09ac0922997314944946647d042", "message": "Refactoring for node resolution logic and NodeJoinTest", "committedDate": "2020-03-26T17:25:36Z", "type": "commit"}, {"oid": "02a353317d415560ba94947771f09e7fa1257277", "url": "https://github.com/elastic/elasticsearch/commit/02a353317d415560ba94947771f09e7fa1257277", "message": "Refactor out deprecated AddVotingConfigExclusionsRequest constructor", "committedDate": "2020-03-26T18:29:29Z", "type": "commit"}, {"oid": "53f133c3c434d5aa22a4f79a2e4fdc3badae63a3", "url": "https://github.com/elastic/elasticsearch/commit/53f133c3c434d5aa22a4f79a2e4fdc3badae63a3", "message": "Fix checkstyle and tests", "committedDate": "2020-03-27T06:53:54Z", "type": "commit"}, {"oid": "5fe180ee5e48039d21fdbfaf87f10c9920b85b5d", "url": "https://github.com/elastic/elasticsearch/commit/5fe180ee5e48039d21fdbfaf87f10c9920b85b5d", "message": "Merge branch 'master' into issue-47990", "committedDate": "2020-03-27T07:02:10Z", "type": "commit"}, {"oid": "0f6dd6fd5e9d1501c84345f1c666659fed1bd9ef", "url": "https://github.com/elastic/elasticsearch/commit/0f6dd6fd5e9d1501c84345f1c666659fed1bd9ef", "message": "Fix test failure due to misnomer", "committedDate": "2020-03-27T07:54:14Z", "type": "commit"}, {"oid": "b0d0a976f6366dd7370239e42aa6858837380e26", "url": "https://github.com/elastic/elasticsearch/commit/b0d0a976f6366dd7370239e42aa6858837380e26", "message": "Revert \"Refactor out deprecated AddVotingConfigExclusionsRequest constructor\"\n\nThis reverts commit 02a353317d415560ba94947771f09e7fa1257277.", "committedDate": "2020-04-08T17:03:59Z", "type": "commit"}, {"oid": "5c7a226f29540e46f5d6e26db8722e1f8123db69", "url": "https://github.com/elastic/elasticsearch/commit/5c7a226f29540e46f5d6e26db8722e1f8123db69", "message": "Migrate some tests that use nodeDescriptions to using nodeNames", "committedDate": "2020-04-08T18:26:42Z", "type": "commit"}, {"oid": "c6fbce8534d44b6b073415412bccc7aa14c77831", "url": "https://github.com/elastic/elasticsearch/commit/c6fbce8534d44b6b073415412bccc7aa14c77831", "message": "Fix style", "committedDate": "2020-04-08T20:23:33Z", "type": "commit"}, {"oid": "fcd39120b5cd35a42ba6c53a3de6a349cb119fff", "url": "https://github.com/elastic/elasticsearch/commit/fcd39120b5cd35a42ba6c53a3de6a349cb119fff", "message": "Merge branch 'master' into issue-47990", "committedDate": "2020-04-08T20:26:19Z", "type": "commit"}, {"oid": "a2e6247b5e768e28f797b4e0e96eba803e76736c", "url": "https://github.com/elastic/elasticsearch/commit/a2e6247b5e768e28f797b4e0e96eba803e76736c", "message": "Revert \"Merge branch 'master' into issue-47990\"\n\nThis reverts commit fcd39120b5cd35a42ba6c53a3de6a349cb119fff.", "committedDate": "2020-04-09T03:27:28Z", "type": "commit"}, {"oid": "ccf6c7388184d57d0e1b523a3aaa1efc6053d173", "url": "https://github.com/elastic/elasticsearch/commit/ccf6c7388184d57d0e1b523a3aaa1efc6053d173", "message": "Merge branch 'master' into issue-47990", "committedDate": "2020-04-09T03:44:46Z", "type": "commit"}, {"oid": "2a01d702a3861af4655b2c6524b0adfb61e38ba0", "url": "https://github.com/elastic/elasticsearch/commit/2a01d702a3861af4655b2c6524b0adfb61e38ba0", "message": "Fix spacing", "committedDate": "2020-04-09T06:18:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4MjA5OA==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406082098", "bodyText": "Suggest a Map<String, DiscoveryNode> here rather than doing two lookups, and also suggest only adding master-eligible nodes to this map rather than filtering them out below.", "author": "DaveCTurner", "createdAt": "2020-04-09T09:39:12Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -18,70 +18,140 @@\n  */\n package org.elasticsearch.action.admin.cluster.configuration;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n import org.elasticsearch.action.ActionRequestValidationException;\n import org.elasticsearch.action.support.master.MasterNodeRequest;\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.coordination.CoordinationMetadata.VotingConfigExclusion;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A request to add voting config exclusions for certain master-eligible nodes, and wait for these nodes to be removed from the voting\n  * configuration.\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n+    public static final String DEPRECATION_MESSAGE = \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+                                                                        LogManager.getLogger(AddVotingConfigExclusionsRequest.class));\n     private final String[] nodeDescriptions;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n \n     /**\n-     * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n+     * Construct a request to add voting config exclusions for master-eligible nodes matching the given node names, and wait for a\n      * default 30 seconds for these exclusions to take effect, removing the nodes from the voting configuration.\n-     * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n+     * @param nodeNames Names of the nodes to add - see {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n-        this(nodeDescriptions, TimeValue.timeValueSeconds(30));\n+    public AddVotingConfigExclusionsRequest(String... nodeNames) {\n+        this(Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY, nodeNames, TimeValue.timeValueSeconds(30));\n     }\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for these\n      * nodes to be removed from the voting configuration.\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n+     * @param nodeIds Ids of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n+     * @param nodeNames Names of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if (noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\", DEPRECATION_MESSAGE);\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        } else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\",\n+                \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\");\n+        }\n+\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n-                .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n-\n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+        Set<VotingConfigExclusion> newVotingConfigExclusions = new HashSet<>();\n+\n+        if (nodeDescriptions.length >= 1) {\n+            newVotingConfigExclusions = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (newVotingConfigExclusions.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else if (nodeIds.length >= 1) {\n+            for (String nodeId : nodeIds) {\n+                if (allNodes.nodeExists(nodeId)) {\n+                    DiscoveryNode discoveryNode = allNodes.get(nodeId);\n+                    if (discoveryNode.isMasterNode()) {\n+                        newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n+                    }\n+                } else {\n+                    newVotingConfigExclusions.add(new VotingConfigExclusion(nodeId, VotingConfigExclusion.MISSING_VALUE_MARKER));\n+                }\n+            }\n+        } else {\n+            Map<String, String> existingNodeNameId = StreamSupport.stream(allNodes.spliterator(), false)", "originalCommit": "2a01d702a3861af4655b2c6524b0adfb61e38ba0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NjI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406566283", "bodyText": "I have updated the map to Map<String, DiscoveryNode>, it's a good further enhancement!\nHowever, if we filter out master-ineligible nodes at map level, then we may get code like this without further refactoring\nif (existingMasterEligibleNodeNameId.containsKey(nodeName)){\n         DiscoveryNode discoveryNode = allNodes.get(existingNodeNameId.get(nodeName));\n         newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n} else {\n         newVotingConfigExclusions.add(new VotingConfigExclusion(VotingConfigExclusion.MISSING_VALUE_MARKER, nodeName));\n}\n\nThis will allow master-ineligible node to be added into newVotingConfigExclusions as well in the form of <absent, nodeName> , thus ES will start to keep track of master ineligible nodes in VotingConfigExclusion with their node names. In the current implementation, this wont be added.\nI thought we don't want that behavior?", "author": "zacharymorn", "createdAt": "2020-04-10T01:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4MjA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "99a584d65fa3aacffc8e99709e60f6115fe5322f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 1b0ed0a3640..83e2381d496 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -135,6 +135,7 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n                 }\n             }\n         } else {\n+            assert nodeNames.length >= 1;\n             Map<String, String> existingNodeNameId = StreamSupport.stream(allNodes.spliterator(), false)\n                                                                 .collect(Collectors.toMap(DiscoveryNode::getName, DiscoveryNode::getId));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4NTMwMw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406085303", "bodyText": "I think this is equivalent and simpler:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (Sets.difference(currentVotingConfigExclusions, newVotingConfigExclusions).isEmpty() == false) {\n          \n          \n            \n                            if (newVotingConfigExclusions.equals(currentVotingConfigExclusions) == false) {", "author": "DaveCTurner", "createdAt": "2020-04-09T09:44:55Z", "path": "server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java", "diffHunk": "@@ -143,18 +149,47 @@ public JoinTaskExecutor(AllocationService allocationService, Logger logger, Rero\n                     nodesChanged = true;\n                     minClusterNodeVersion = Version.min(minClusterNodeVersion, node.getVersion());\n                     maxClusterNodeVersion = Version.max(maxClusterNodeVersion, node.getVersion());\n+                    if (node.isMasterNode()) {\n+                        joiniedNodeNameIds.put(node.getName(), node.getId());\n+                    }\n                 } catch (IllegalArgumentException | IllegalStateException e) {\n                     results.failure(joinTask, e);\n                     continue;\n                 }\n             }\n             results.success(joinTask);\n         }\n+\n         if (nodesChanged) {\n             rerouteService.reroute(\"post-join reroute\", Priority.HIGH, ActionListener.wrap(\n                 r -> logger.trace(\"post-join reroute completed\"),\n                 e -> logger.debug(\"post-join reroute failed\", e)));\n \n+            if (joiniedNodeNameIds.isEmpty() == false) {\n+                Set<CoordinationMetadata.VotingConfigExclusion> currentVotingConfigExclusions = currentState.getVotingConfigExclusions();\n+                Set<CoordinationMetadata.VotingConfigExclusion> newVotingConfigExclusions = currentVotingConfigExclusions.stream()\n+                    .map(e -> {\n+                        // Update nodeId in VotingConfigExclusion when a new node with excluded node name joins\n+                        if (CoordinationMetadata.VotingConfigExclusion.MISSING_VALUE_MARKER.equals(e.getNodeId()) &&\n+                            joiniedNodeNameIds.containsKey(e.getNodeName())) {\n+                            return new CoordinationMetadata.VotingConfigExclusion(joiniedNodeNameIds.get(e.getNodeName()), e.getNodeName());\n+                        } else {\n+                            return e;\n+                        }\n+                    }).collect(Collectors.toSet());\n+\n+                // if VotingConfigExclusions did get updated\n+                if (Sets.difference(currentVotingConfigExclusions, newVotingConfigExclusions).isEmpty() == false) {", "originalCommit": "2a01d702a3861af4655b2c6524b0adfb61e38ba0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d6353eb1962ff0a12ee00c43d6effe75ece1c31", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\nindex db87147bcbe..b9f8fdc1032 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\n\n@@ -179,7 +179,7 @@ public class JoinTaskExecutor implements ClusterStateTaskExecutor<JoinTaskExecut\n                     }).collect(Collectors.toSet());\n \n                 // if VotingConfigExclusions did get updated\n-                if (Sets.difference(currentVotingConfigExclusions, newVotingConfigExclusions).isEmpty() == false) {\n+                if (newVotingConfigExclusions.equals(currentVotingConfigExclusions) == false) {\n                     CoordinationMetadata.Builder coordMetadataBuilder = CoordinationMetadata.builder(currentState.coordinationMetadata())\n                         .clearVotingConfigExclusions();\n                     newVotingConfigExclusions.forEach(coordMetadataBuilder::addVotingConfigExclusion);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MjQzNg==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406092436", "bodyText": "To clarify that we already excluded the case where the user didn't ask for anything at all:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                    } else {\n          \n          \n            \n                        assert nodeNames.length >= 1;", "author": "DaveCTurner", "createdAt": "2020-04-09T09:57:10Z", "path": "server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java", "diffHunk": "@@ -18,70 +18,140 @@\n  */\n package org.elasticsearch.action.admin.cluster.configuration;\n \n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n import org.elasticsearch.action.ActionRequestValidationException;\n import org.elasticsearch.action.support.master.MasterNodeRequest;\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.coordination.CoordinationMetadata.VotingConfigExclusion;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A request to add voting config exclusions for certain master-eligible nodes, and wait for these nodes to be removed from the voting\n  * configuration.\n  */\n public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotingConfigExclusionsRequest> {\n+    public static final String DEPRECATION_MESSAGE = \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\";\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+                                                                        LogManager.getLogger(AddVotingConfigExclusionsRequest.class));\n     private final String[] nodeDescriptions;\n+    private final String[] nodeIds;\n+    private final String[] nodeNames;\n     private final TimeValue timeout;\n \n     /**\n-     * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for a\n+     * Construct a request to add voting config exclusions for master-eligible nodes matching the given node names, and wait for a\n      * default 30 seconds for these exclusions to take effect, removing the nodes from the voting configuration.\n-     * @param nodeDescriptions Descriptions of the nodes to add - see {@link DiscoveryNodes#resolveNodes(String...)}\n+     * @param nodeNames Names of the nodes to add - see {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions) {\n-        this(nodeDescriptions, TimeValue.timeValueSeconds(30));\n+    public AddVotingConfigExclusionsRequest(String... nodeNames) {\n+        this(Strings.EMPTY_ARRAY, Strings.EMPTY_ARRAY, nodeNames, TimeValue.timeValueSeconds(30));\n     }\n \n     /**\n      * Construct a request to add voting config exclusions for master-eligible nodes matching the given descriptions, and wait for these\n      * nodes to be removed from the voting configuration.\n      * @param nodeDescriptions Descriptions of the nodes whose exclusions to add - see {@link DiscoveryNodes#resolveNodes(String...)}.\n+     * @param nodeIds Ids of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n+     * @param nodeNames Names of the nodes whose exclusions to add - see\n+     *                  {@link AddVotingConfigExclusionsRequest#resolveVotingConfigExclusions(ClusterState)}.\n      * @param timeout How long to wait for the added exclusions to take effect and be removed from the voting configuration.\n      */\n-    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, TimeValue timeout) {\n+    public AddVotingConfigExclusionsRequest(String[] nodeDescriptions, String[] nodeIds, String[] nodeNames, TimeValue timeout) {\n         if (timeout.compareTo(TimeValue.ZERO) < 0) {\n             throw new IllegalArgumentException(\"timeout [\" + timeout + \"] must be non-negative\");\n         }\n+\n+        if (noneOrMoreThanOneIsSet(nodeDescriptions, nodeIds, nodeNames)) {\n+            throw new IllegalArgumentException(\"Please set node identifiers correctly. \" +\n+                \"One and only one of [node_name], [node_names] and [node_ids] has to be set\");\n+        }\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\", DEPRECATION_MESSAGE);\n+        }\n+\n         this.nodeDescriptions = nodeDescriptions;\n+        this.nodeIds = nodeIds;\n+        this.nodeNames = nodeNames;\n         this.timeout = timeout;\n     }\n \n     public AddVotingConfigExclusionsRequest(StreamInput in) throws IOException {\n         super(in);\n         nodeDescriptions = in.readStringArray();\n+        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+            nodeIds = in.readStringArray();\n+            nodeNames = in.readStringArray();\n+        } else {\n+            nodeIds = Strings.EMPTY_ARRAY;\n+            nodeNames = Strings.EMPTY_ARRAY;\n+        }\n         timeout = in.readTimeValue();\n+\n+        if (nodeDescriptions.length > 0) {\n+            deprecationLogger.deprecatedAndMaybeLog(\"voting_config_exclusion\",\n+                \"nodeDescription is deprecated and will be removed, use nodeIds or nodeNames instead\");\n+        }\n+\n     }\n \n     Set<VotingConfigExclusion> resolveVotingConfigExclusions(ClusterState currentState) {\n         final DiscoveryNodes allNodes = currentState.nodes();\n-        final Set<VotingConfigExclusion> resolvedNodes = Arrays.stream(allNodes.resolveNodes(nodeDescriptions))\n-                .map(allNodes::get).filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n-\n-        if (resolvedNodes.isEmpty()) {\n-            throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n-                + \" matched no master-eligible nodes\");\n+        Set<VotingConfigExclusion> newVotingConfigExclusions = new HashSet<>();\n+\n+        if (nodeDescriptions.length >= 1) {\n+            newVotingConfigExclusions = Arrays.stream(allNodes.resolveNodes(nodeDescriptions)).map(allNodes::get)\n+                .filter(DiscoveryNode::isMasterNode).map(VotingConfigExclusion::new).collect(Collectors.toSet());\n+\n+            if (newVotingConfigExclusions.isEmpty()) {\n+                throw new IllegalArgumentException(\"add voting config exclusions request for \" + Arrays.asList(nodeDescriptions)\n+                    + \" matched no master-eligible nodes\");\n+            }\n+        } else if (nodeIds.length >= 1) {\n+            for (String nodeId : nodeIds) {\n+                if (allNodes.nodeExists(nodeId)) {\n+                    DiscoveryNode discoveryNode = allNodes.get(nodeId);\n+                    if (discoveryNode.isMasterNode()) {\n+                        newVotingConfigExclusions.add(new VotingConfigExclusion(discoveryNode));\n+                    }\n+                } else {\n+                    newVotingConfigExclusions.add(new VotingConfigExclusion(nodeId, VotingConfigExclusion.MISSING_VALUE_MARKER));\n+                }\n+            }\n+        } else {", "originalCommit": "2a01d702a3861af4655b2c6524b0adfb61e38ba0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99a584d65fa3aacffc8e99709e60f6115fe5322f", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\nindex 1b0ed0a3640..83e2381d496 100644\n--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\n@@ -135,6 +135,7 @@ public class AddVotingConfigExclusionsRequest extends MasterNodeRequest<AddVotin\n                 }\n             }\n         } else {\n+            assert nodeNames.length >= 1;\n             Map<String, String> existingNodeNameId = StreamSupport.stream(allNodes.spliterator(), false)\n                                                                 .collect(Collectors.toMap(DiscoveryNode::getName, DiscoveryNode::getId));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5ODUwMw==", "url": "https://github.com/elastic/elasticsearch/pull/50836#discussion_r406098503", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {\n          \n          \n            \n                public void testImproveConfigurationPerformsVotingConfigExclusionStateCheck() {", "author": "DaveCTurner", "createdAt": "2020-04-09T10:07:34Z", "path": "server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java", "diffHunk": "@@ -1433,4 +1436,46 @@ public void testDoesNotPerformElectionWhenRestartingFollower() {\n         }\n     }\n \n+    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {", "originalCommit": "2a01d702a3861af4655b2c6524b0adfb61e38ba0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89ab437277a67d4f48689a32374424c2ba393992", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java b/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java\nindex 439b830802b..673d087c950 100644\n--- a/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java\n\n@@ -1436,7 +1436,7 @@ public class CoordinatorTests extends AbstractCoordinatorTestCase {\n         }\n     }\n \n-    public void testImprovecOnfigurationPerformsVotingConfigExclusionStateCheck() {\n+    public void testImproveConfigurationPerformsVotingConfigExclusionStateCheck() {\n         try (Cluster cluster = new Cluster(1)) {\n             cluster.runRandomly();\n             cluster.stabilise();\n"}}, {"oid": "6d6353eb1962ff0a12ee00c43d6effe75ece1c31", "url": "https://github.com/elastic/elasticsearch/commit/6d6353eb1962ff0a12ee00c43d6effe75ece1c31", "message": "Update server/src/main/java/org/elasticsearch/cluster/coordination/JoinTaskExecutor.java\n\nCo-Authored-By: David Turner <david.turner@elastic.co>", "committedDate": "2020-04-10T01:47:54Z", "type": "commit"}, {"oid": "99a584d65fa3aacffc8e99709e60f6115fe5322f", "url": "https://github.com/elastic/elasticsearch/commit/99a584d65fa3aacffc8e99709e60f6115fe5322f", "message": "Update server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsRequest.java\n\nCo-Authored-By: David Turner <david.turner@elastic.co>", "committedDate": "2020-04-10T01:48:41Z", "type": "commit"}, {"oid": "89ab437277a67d4f48689a32374424c2ba393992", "url": "https://github.com/elastic/elasticsearch/commit/89ab437277a67d4f48689a32374424c2ba393992", "message": "Update server/src/test/java/org/elasticsearch/cluster/coordination/CoordinatorTests.java\n\nCo-Authored-By: David Turner <david.turner@elastic.co>", "committedDate": "2020-04-10T01:49:12Z", "type": "commit"}, {"oid": "fd64f4b9f4673b3c341bb52a3df5098cc046db1b", "url": "https://github.com/elastic/elasticsearch/commit/fd64f4b9f4673b3c341bb52a3df5098cc046db1b", "message": "Address feedback to use Map<String, DiscoveryNode> for existing nodes", "committedDate": "2020-04-10T01:52:28Z", "type": "commit"}, {"oid": "51f74bfaac3fd279fd895b28032b1c56840b4a5b", "url": "https://github.com/elastic/elasticsearch/commit/51f74bfaac3fd279fd895b28032b1c56840b4a5b", "message": "Fix checkstyle", "committedDate": "2020-04-10T17:55:00Z", "type": "commit"}]}