{"pr_number": 55366, "pr_title": "Remove combo security and license helper from license state", "pr_createdAt": "2020-04-17T01:31:50Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55366", "timeline": [{"oid": "2fb5e1b3dd8505d0e15a6c917a29883e54c8056f", "url": "https://github.com/elastic/elasticsearch/commit/2fb5e1b3dd8505d0e15a6c917a29883e54c8056f", "message": "Remove combo security and license helper from license state\n\nSecurity features in the license state currently do a dynamic check on\nwhether security is enabled. This is because the license level can\nchange the default security enabled state. This commit splits out the\ncheck on security being enabled, so that the combo method of security\nenabled plus license allowed is no longer necessary.", "committedDate": "2020-04-17T01:30:37Z", "type": "commit"}, {"oid": "6f1532ed67d262b97bf32595d1c06afcaddc53ba", "url": "https://github.com/elastic/elasticsearch/commit/6f1532ed67d262b97bf32595d1c06afcaddc53ba", "message": "fix bad enabled logic in FLS", "committedDate": "2020-04-17T01:57:17Z", "type": "commit"}, {"oid": "6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "url": "https://github.com/elastic/elasticsearch/commit/6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "message": "test fixes", "committedDate": "2020-04-17T02:27:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NjU5NA==", "url": "https://github.com/elastic/elasticsearch/pull/55366#discussion_r409976594", "bodyText": "The isSecurityEnabled is covered in the enclosing if", "author": "tvernum", "createdAt": "2020-04-17T03:48:39Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/IndicesAliasesRequestInterceptor.java", "diffHunk": "@@ -51,7 +51,7 @@ public void intercept(RequestInfo requestInfo, AuthorizationEngine authorization\n             final XPackLicenseState frozenLicenseState = licenseState.copyCurrentLicenseState();\n             final AuditTrail auditTrail = auditTrailService.get();\n             if (frozenLicenseState.isSecurityEnabled()) {\n-                if (frozenLicenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+                if (frozenLicenseState.isSecurityEnabled() && frozenLicenseState.isDocumentAndFieldLevelSecurityAllowed()) {", "originalCommit": "6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc5b796d8593228447190e879e0ccb5b7cbdba76", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/IndicesAliasesRequestInterceptor.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/IndicesAliasesRequestInterceptor.java\nindex 6285f16804d..90d10ec9c0a 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/IndicesAliasesRequestInterceptor.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/IndicesAliasesRequestInterceptor.java\n\n@@ -51,7 +51,7 @@ public final class IndicesAliasesRequestInterceptor implements RequestIntercepto\n             final XPackLicenseState frozenLicenseState = licenseState.copyCurrentLicenseState();\n             final AuditTrail auditTrail = auditTrailService.get();\n             if (frozenLicenseState.isSecurityEnabled()) {\n-                if (frozenLicenseState.isSecurityEnabled() && frozenLicenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+                if (frozenLicenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n                     IndicesAccessControl indicesAccessControl =\n                         threadContext.getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n                     for (IndicesAliasesRequest.AliasActions aliasAction : request.getAliasActions()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3Njg4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55366#discussion_r409976885", "bodyText": "isSecurityEnabled is covered in the enclosing if", "author": "tvernum", "createdAt": "2020-04-17T03:49:38Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/ResizeRequestInterceptor.java", "diffHunk": "@@ -47,7 +47,7 @@ public void intercept(RequestInfo requestInfo, AuthorizationEngine authorization\n             final XPackLicenseState frozenLicenseState = licenseState.copyCurrentLicenseState();\n             final AuditTrail auditTrail = auditTrailService.get();\n             if (frozenLicenseState.isSecurityEnabled()) {\n-                if (frozenLicenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+                if (frozenLicenseState.isSecurityEnabled() && frozenLicenseState.isDocumentAndFieldLevelSecurityAllowed()) {", "originalCommit": "6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc5b796d8593228447190e879e0ccb5b7cbdba76", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/ResizeRequestInterceptor.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/ResizeRequestInterceptor.java\nindex 9cee399251c..539de036d8f 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/ResizeRequestInterceptor.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/interceptor/ResizeRequestInterceptor.java\n\n@@ -47,7 +47,7 @@ public final class ResizeRequestInterceptor implements RequestInterceptor {\n             final XPackLicenseState frozenLicenseState = licenseState.copyCurrentLicenseState();\n             final AuditTrail auditTrail = auditTrailService.get();\n             if (frozenLicenseState.isSecurityEnabled()) {\n-                if (frozenLicenseState.isSecurityEnabled() && frozenLicenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+                if (frozenLicenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n                     IndicesAccessControl indicesAccessControl =\n                         threadContext.getTransient(AuthorizationServiceField.INDICES_PERMISSIONS_KEY);\n                     IndicesAccessControl.IndexAccessControl indexAccessControl =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NzE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55366#discussion_r409977166", "bodyText": "I think in this context we should ignore isSecurityEnabled()\nIt's a check to disable roles with DLS/FLS is the license does not permit it. I think it confuses the code to explicitly include enabled in that check.", "author": "tvernum", "createdAt": "2020-04-17T03:51:00Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java", "diffHunk": "@@ -165,7 +165,7 @@ public void roles(Set<String> roleNames, ActionListener<Role> roleActionListener\n                                     rolesRetrievalResult.getMissingRoles()));\n                         }\n                         final Set<RoleDescriptor> effectiveDescriptors;\n-                        if (licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+                        if (licenseState.isSecurityEnabled() && licenseState.isDocumentAndFieldLevelSecurityAllowed()) {", "originalCommit": "6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc5b796d8593228447190e879e0ccb5b7cbdba76", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java\nindex cf945cf638d..3ffe3b0a02b 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java\n\n@@ -165,7 +165,7 @@ public class CompositeRolesStore {\n                                     rolesRetrievalResult.getMissingRoles()));\n                         }\n                         final Set<RoleDescriptor> effectiveDescriptors;\n-                        if (licenseState.isSecurityEnabled() && licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+                        if (licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n                             effectiveDescriptors = rolesRetrievalResult.getRoleDescriptors();\n                         } else {\n                             effectiveDescriptors = rolesRetrievalResult.getRoleDescriptors().stream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NzQwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/55366#discussion_r409977409", "bodyText": "As above, I'd skip the enabled check here. It's not clear why we'd prefer one behaviour over another if we ended up in deep in this method but security was disabled.", "author": "tvernum", "createdAt": "2020-04-17T03:52:04Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java", "diffHunk": "@@ -319,8 +319,9 @@ private void roleDescriptors(Set<String> roleNames, ActionListener<RolesRetrieva\n \n     private void loadRoleDescriptorsAsync(Set<String> roleNames, ActionListener<RolesRetrievalResult> listener) {\n         final RolesRetrievalResult rolesResult = new RolesRetrievalResult();\n+        boolean allAllowed = licenseState.isSecurityEnabled() && licenseState.isCustomRoleProvidersAllowed();", "originalCommit": "6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc5b796d8593228447190e879e0ccb5b7cbdba76", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java\nindex cf945cf638d..3ffe3b0a02b 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java\n\n@@ -319,9 +319,8 @@ public class CompositeRolesStore {\n \n     private void loadRoleDescriptorsAsync(Set<String> roleNames, ActionListener<RolesRetrievalResult> listener) {\n         final RolesRetrievalResult rolesResult = new RolesRetrievalResult();\n-        boolean allAllowed = licenseState.isSecurityEnabled() && licenseState.isCustomRoleProvidersAllowed();\n         final List<BiConsumer<Set<String>, ActionListener<RoleRetrievalResult>>> asyncRoleProviders =\n-            allAllowed ? allRoleProviders : builtInRoleProviders;\n+            licenseState.isCustomRoleProvidersAllowed() ? allRoleProviders : builtInRoleProviders;\n \n         final ActionListener<RoleRetrievalResult> descriptorsListener =\n             ContextPreservingActionListener.wrapPreservingContext(ActionListener.wrap(ignore -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NzQ4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55366#discussion_r409977483", "bodyText": "As above, I'd skip enabled", "author": "tvernum", "createdAt": "2020-04-17T03:52:28Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/FileRolesStore.java", "diffHunk": "@@ -175,7 +175,7 @@ public static Path resolveFile(Environment env) {\n         if (Files.exists(path)) {\n             try {\n                 List<String> roleSegments = roleSegments(path);\n-                final boolean flsDlsLicensed = licenseState.isDocumentAndFieldLevelSecurityAllowed();\n+                final boolean flsDlsLicensed = licenseState.isSecurityEnabled() && licenseState.isDocumentAndFieldLevelSecurityAllowed();", "originalCommit": "6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc5b796d8593228447190e879e0ccb5b7cbdba76", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/FileRolesStore.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/FileRolesStore.java\nindex 586183d21c5..90b94d12759 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/FileRolesStore.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/FileRolesStore.java\n\n@@ -175,7 +175,7 @@ public class FileRolesStore implements BiConsumer<Set<String>, ActionListener<Ro\n         if (Files.exists(path)) {\n             try {\n                 List<String> roleSegments = roleSegments(path);\n-                final boolean flsDlsLicensed = licenseState.isSecurityEnabled() && licenseState.isDocumentAndFieldLevelSecurityAllowed();\n+                final boolean flsDlsLicensed = licenseState.isDocumentAndFieldLevelSecurityAllowed();\n                 for (String segment : roleSegments) {\n                     RoleDescriptor descriptor = parseRoleDescriptor(segment, path, logger, resolvePermission, settings, xContentRegistry);\n                     if (descriptor != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NzU3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/55366#discussion_r409977575", "bodyText": "As above.", "author": "tvernum", "createdAt": "2020-04-17T03:52:49Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java", "diffHunk": "@@ -188,7 +188,7 @@ public void onFailure(Exception e) {\n     }\n \n     public void putRole(final PutRoleRequest request, final RoleDescriptor role, final ActionListener<Boolean> listener) {\n-        if (licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+        if (licenseState.isSecurityEnabled() && licenseState.isDocumentAndFieldLevelSecurityAllowed()) {", "originalCommit": "6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc5b796d8593228447190e879e0ccb5b7cbdba76", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java\nindex ebb1ce58658..db48b8eb406 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java\n\n@@ -188,7 +188,7 @@ public class NativeRolesStore implements BiConsumer<Set<String>, ActionListener<\n     }\n \n     public void putRole(final PutRoleRequest request, final RoleDescriptor role, final ActionListener<Boolean> listener) {\n-        if (licenseState.isSecurityEnabled() && licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+        if (licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n             innerPutRole(request, role, listener);\n         } else if (role.isUsingDocumentOrFieldLevelSecurity()) {\n             listener.onFailure(LicenseUtils.newComplianceException(\"field and document level security\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NzYzMA==", "url": "https://github.com/elastic/elasticsearch/pull/55366#discussion_r409977630", "bodyText": "As above.", "author": "tvernum", "createdAt": "2020-04-17T03:53:05Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java", "diffHunk": "@@ -369,7 +369,7 @@ static RoleDescriptor transformRole(String id, BytesReference sourceBytes, Logge\n             // we pass true as last parameter because we do not want to reject permissions if the field permissions\n             // are given in 2.x syntax\n             RoleDescriptor roleDescriptor = RoleDescriptor.parse(name, sourceBytes, true, XContentType.JSON);\n-            if (licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+            if (licenseState.isSecurityEnabled() && licenseState.isDocumentAndFieldLevelSecurityAllowed()) {", "originalCommit": "6ecc6d4930ff2a69265b991ff6613ddb5bbb7618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc5b796d8593228447190e879e0ccb5b7cbdba76", "chunk": "diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java\nindex ebb1ce58658..db48b8eb406 100644\n--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java\n+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java\n\n@@ -369,7 +369,7 @@ public class NativeRolesStore implements BiConsumer<Set<String>, ActionListener<\n             // we pass true as last parameter because we do not want to reject permissions if the field permissions\n             // are given in 2.x syntax\n             RoleDescriptor roleDescriptor = RoleDescriptor.parse(name, sourceBytes, true, XContentType.JSON);\n-            if (licenseState.isSecurityEnabled() && licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n+            if (licenseState.isDocumentAndFieldLevelSecurityAllowed()) {\n                 return roleDescriptor;\n             } else {\n                 final boolean dlsEnabled =\n"}}, {"oid": "b0b86c0790dde2abfeed3df143f57fc3ca78fe8d", "url": "https://github.com/elastic/elasticsearch/commit/b0b86c0790dde2abfeed3df143f57fc3ca78fe8d", "message": "Merge branch 'master' into refactor_license9", "committedDate": "2020-04-17T17:14:46Z", "type": "commit"}, {"oid": "dc5b796d8593228447190e879e0ccb5b7cbdba76", "url": "https://github.com/elastic/elasticsearch/commit/dc5b796d8593228447190e879e0ccb5b7cbdba76", "message": "address feedback", "committedDate": "2020-04-17T17:18:42Z", "type": "commit"}]}