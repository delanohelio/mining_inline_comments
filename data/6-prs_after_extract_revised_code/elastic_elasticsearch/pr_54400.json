{"pr_number": 54400, "pr_title": "EQL: startsWith function implementation", "pr_createdAt": "2020-03-30T09:42:34Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54400", "timeline": [{"oid": "4287304c79e07ebcfe4af7402d01d58e64de4bb0", "url": "https://github.com/elastic/elasticsearch/commit/4287304c79e07ebcfe4af7402d01d58e64de4bb0", "message": "startsWith function implementation", "committedDate": "2020-03-29T20:12:06Z", "type": "commit"}, {"oid": "f582f8970bb3d04deac878ab86c7014eb6fd08e5", "url": "https://github.com/elastic/elasticsearch/commit/f582f8970bb3d04deac878ab86c7014eb6fd08e5", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl", "committedDate": "2020-03-30T09:39:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MDYxMg==", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400170612", "bodyText": "maybe open for discussion: return null only if he source is null and exception for the rest of params that should not be null?", "author": "aleksmaus", "createdAt": "2020-03-30T12:59:14Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {", "originalCommit": "f582f8970bb3d04deac878ab86c7014eb6fd08e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMzQ0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400303449", "bodyText": "#54419", "author": "astefan", "createdAt": "2020-03-30T15:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MDYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwOTI5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400309291", "bodyText": "Sound good. Looks like another pattern that could be extracted/reused depending on which way we want to proceed with null handling for consistency between all functions.", "author": "aleksmaus", "createdAt": "2020-03-30T16:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MDYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "b0a2dcf5258caee52d66b96afed149c60b720101", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\nindex 526cf12888e..8792abab8b8 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\n\n@@ -62,7 +62,11 @@ public class StartsWithFunctionProcessor implements Processor {\n     protected Processor source() {\n         return source;\n     }\n-    \n+\n+    protected Processor pattern() {\n+        return pattern;\n+    }\n+\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MjAwMw==", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400172003", "bodyText": "nit: just a suggestion maybe extract the function to avoid repetition, for example:\nhttps://github.com/elastic/elasticsearch/pull/54380/files#diff-5ad1821091fb7e7473cbdfdded44fbcbR52", "author": "aleksmaus", "createdAt": "2020-03-30T13:01:19Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);", "originalCommit": "f582f8970bb3d04deac878ab86c7014eb6fd08e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDQyMA==", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400304420", "bodyText": "I believe that, at one point after all these string functions are done, we need to refactor them and extract some common code in a base class, if possible of course.", "author": "astefan", "createdAt": "2020-03-30T15:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MjAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "b0a2dcf5258caee52d66b96afed149c60b720101", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\nindex 526cf12888e..8792abab8b8 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\n\n@@ -62,7 +62,11 @@ public class StartsWithFunctionProcessor implements Processor {\n     protected Processor source() {\n         return source;\n     }\n-    \n+\n+    protected Processor pattern() {\n+        return pattern;\n+    }\n+\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MzE3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400173171", "bodyText": "should include the pattern in both equals and hashCode?", "author": "aleksmaus", "createdAt": "2020-03-30T13:03:14Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class StartsWithFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstw\";\n+\n+    private final Processor source;\n+    private final Processor pattern;\n+\n+    public StartsWithFunctionProcessor(Processor source, Processor pattern) {\n+        this.source = source;\n+        this.pattern = pattern;\n+    }\n+\n+    public StartsWithFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        pattern = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(pattern);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), pattern.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object pattern) {\n+        if (source == null) {\n+            return null;\n+        }\n+        if (source instanceof String == false && source instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", source);\n+        }\n+        if (pattern == null) {\n+            return null;\n+        }\n+        if (pattern instanceof String == false && pattern instanceof Character == false) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", pattern);\n+        }\n+\n+        return source.toString().toLowerCase(Locale.ROOT).startsWith(pattern.toString().toLowerCase(Locale.ROOT));\n+    }\n+    \n+    protected Processor source() {\n+        return source;\n+    }\n+    \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        \n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        \n+        return Objects.equals(source(), ((StartsWithFunctionProcessor) obj).source());\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(source());", "originalCommit": "f582f8970bb3d04deac878ab86c7014eb6fd08e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMDI0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54400#discussion_r400320243", "bodyText": "Good catch. Will fix.", "author": "astefan", "createdAt": "2020-03-30T16:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3MzE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b0a2dcf5258caee52d66b96afed149c60b720101", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\nindex 526cf12888e..8792abab8b8 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StartsWithFunctionProcessor.java\n\n@@ -62,7 +62,11 @@ public class StartsWithFunctionProcessor implements Processor {\n     protected Processor source() {\n         return source;\n     }\n-    \n+\n+    protected Processor pattern() {\n+        return pattern;\n+    }\n+\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj) {\n"}}, {"oid": "b0a2dcf5258caee52d66b96afed149c60b720101", "url": "https://github.com/elastic/elasticsearch/commit/b0a2dcf5258caee52d66b96afed149c60b720101", "message": "Address reviews", "committedDate": "2020-03-30T16:30:50Z", "type": "commit"}, {"oid": "792a938886a79ce3cb2ad3e718710b796b4c3d3d", "url": "https://github.com/elastic/elasticsearch/commit/792a938886a79ce3cb2ad3e718710b796b4c3d3d", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl", "committedDate": "2020-03-30T16:31:05Z", "type": "commit"}, {"oid": "5d1b61c00a0717f7dca3f52bc446f262289c911d", "url": "https://github.com/elastic/elasticsearch/commit/5d1b61c00a0717f7dca3f52bc446f262289c911d", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl", "committedDate": "2020-03-31T11:15:48Z", "type": "commit"}, {"oid": "834d25dbb0fb3f40d40e2a63511e90bee9dcdd84", "url": "https://github.com/elastic/elasticsearch/commit/834d25dbb0fb3f40d40e2a63511e90bee9dcdd84", "message": "Added one more test", "committedDate": "2020-03-31T11:33:30Z", "type": "commit"}, {"oid": "7378290064f255ce82bd4c6720b044093b272be7", "url": "https://github.com/elastic/elasticsearch/commit/7378290064f255ce82bd4c6720b044093b272be7", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl", "committedDate": "2020-03-31T11:35:22Z", "type": "commit"}, {"oid": "7378290064f255ce82bd4c6720b044093b272be7", "url": "https://github.com/elastic/elasticsearch/commit/7378290064f255ce82bd4c6720b044093b272be7", "message": "Merge branch 'master' of https://github.com/elastic/elasticsearch into 53855_impl", "committedDate": "2020-03-31T11:35:22Z", "type": "forcePushed"}]}