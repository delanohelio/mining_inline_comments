{"pr_number": 66167, "pr_title": "[ML] Report cause when datafeed extraction encounters error", "pr_createdAt": "2020-12-10T13:37:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66167", "timeline": [{"oid": "c72a8dd490b594997cee05b0525f86ce77a04843", "url": "https://github.com/elastic/elasticsearch/commit/c72a8dd490b594997cee05b0525f86ce77a04843", "message": "[ML] Report cause when datafeed extraction encounters error\n\nWhen a datafeed encounters errors extracting data, often\nthe error is an instance of `SearchPhaseExecutionException`.\nIn that case the top level error message is `Partial shards failure`\nwhich is not very informative.\n\nThis commit refactors a transform util method from\n`ExceptionRootCauseFinder`, which unwraps exceptions with special\nhandling for `SearchPhaseExecutionException`, and makes use of\nit from datafeed `ProblemTracker` in order to provide a more\nuseful error message.", "committedDate": "2020-12-10T12:57:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4ODc0NA==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540188744", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.error(\"[\" + jobId + \"] error while extracting data\", e);\n          \n          \n            \n                            LOGGER.error(new ParameterizedMessage(\"[{}] error while extracting data\", jobId), e);\n          \n      \n    \n    \n  \n\nGreat to log the full trace now!!!", "author": "benwtrent", "createdAt": "2020-12-10T13:57:36Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -318,7 +320,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n             try {\n                 extractedData = dataExtractor.next();\n             } catch (Exception e) {\n-                LOGGER.debug(\"[\" + jobId + \"] error while extracting data\", e);\n+                LOGGER.error(\"[\" + jobId + \"] error while extracting data\", e);", "originalCommit": "c72a8dd490b594997cee05b0525f86ce77a04843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a28233a3ff5b8ae1c610bbed2eb4f15986778ac7", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java\nindex 379295d00b3..1f7e50579d3 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java\n\n@@ -320,7 +320,7 @@ class DatafeedJob {\n             try {\n                 extractedData = dataExtractor.next();\n             } catch (Exception e) {\n-                LOGGER.error(\"[\" + jobId + \"] error while extracting data\", e);\n+                LOGGER.error(new ParameterizedMessage(\"[{}] error while extracting data\", jobId), e);\n                 // When extraction problems are encountered, we do not want to advance time.\n                 // Instead, it is preferable to retry the given interval next time an extraction\n                 // is triggered.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4ODg5OA==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540188898", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LOGGER.error(\"[\" + jobId + \"] error while posting data\", e);\n          \n          \n            \n                            LOGGER.error(new ParameterizedMessage(\"[{}] error while posting data\", jobId), e);", "author": "benwtrent", "createdAt": "2020-12-10T13:57:50Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -350,7 +352,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n                     if (isIsolated) {\n                         return;\n                     }\n-                    LOGGER.debug(\"[\" + jobId + \"] error while posting data\", e);\n+                    LOGGER.error(\"[\" + jobId + \"] error while posting data\", e);", "originalCommit": "c72a8dd490b594997cee05b0525f86ce77a04843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0df275d681dd7222ad6c827178879efa1cc753bb", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java\nindex 379295d00b3..d9542865367 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java\n\n@@ -352,7 +352,7 @@ class DatafeedJob {\n                     if (isIsolated) {\n                         return;\n                     }\n-                    LOGGER.error(\"[\" + jobId + \"] error while posting data\", e);\n+                LOGGER.error(new ParameterizedMessage(\"[{}] error while posting data\", jobId), e);\n \n                     // a conflict exception means the job state is not open any more.\n                     // we should therefore stop the datafeed.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MDIxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540190219", "bodyText": "Anyway to add the rest of the shard failures as suppressed?", "author": "benwtrent", "createdAt": "2020-12-10T13:59:35Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "diffHunk": "@@ -112,7 +113,29 @@ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[]\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * Unwrap the exception stack and return the most likely cause.\n+     * This method has special handling for {@link SearchPhaseExecutionException}\n+     * where it returns the cause of the first shard failure.\n+     *\n+     * @param t raw Throwable\n+     * @return unwrapped throwable if possible\n+     */\n     public static Throwable unwrapCause(Throwable t) {\n-       return org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+        // circuit breaking exceptions are at the bottom\n+        Throwable unwrappedThrowable = org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+\n+        if (unwrappedThrowable instanceof SearchPhaseExecutionException) {\n+            SearchPhaseExecutionException searchPhaseException = (SearchPhaseExecutionException) unwrappedThrowable;\n+            for (ShardSearchFailure shardFailure : searchPhaseException.shardFailures()) {\n+                Throwable unwrappedShardFailure = org.elasticsearch.ExceptionsHelper.unwrapCause(shardFailure.getCause());\n+\n+                if (unwrappedShardFailure instanceof ElasticsearchException) {\n+                    return unwrappedShardFailure;\n+                }\n+            }", "originalCommit": "c72a8dd490b594997cee05b0525f86ce77a04843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NDIyMg==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540194222", "bodyText": "Trying something like that can make the message unreadable. Note we're already logging the SearchPhaseExecutionException.\nI think there are 2 scenarios:\n\nthe search fails because of some user error (e.g. time field doesn't exist in some index). In this scenario there will be a single cause and we'll bubble it up.\nthe search fails due to the cluster being unstable. Here, we will have many shard failures. I think in this scenario we'd have to look at the logs anyhow to debug what's happening.\n\nHaving said that, I'm open to suggestions if you see another way.", "author": "dimitris-athanasiou", "createdAt": "2020-12-10T14:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MDIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMTk1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540221957", "bodyText": "I haven't explored this for search, but for indexing I use a similar method that tries to get the most important error. That means you could loop through the shard failures and get the most problematic one, e.g. IllegalArgumentException > RuntimeException, because the IAE is irrecoverable, the RE might just be a 429 (too manu requests).\nHaving that said: \"it depends\" on what you are aiming for with this", "author": "hendrikmuhs", "createdAt": "2020-12-10T14:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MDIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3894a4951e84aa837beba089463174b3fa28b30d", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java\nindex 732aa211b3e..e71b6010414 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java\n\n@@ -113,6 +113,13 @@ public class ExceptionsHelper {\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * @see org.elasticsearch.ExceptionsHelper#unwrapCause(Throwable)\n+     */\n+    public static Throwable unwrapCause(Throwable t) {\n+        return org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+    }\n+\n     /**\n      * Unwrap the exception stack and return the most likely cause.\n      * This method has special handling for {@link SearchPhaseExecutionException}\n"}}, {"oid": "a28233a3ff5b8ae1c610bbed2eb4f15986778ac7", "url": "https://github.com/elastic/elasticsearch/commit/a28233a3ff5b8ae1c610bbed2eb4f15986778ac7", "message": "Update x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-10T14:02:06Z", "type": "commit"}, {"oid": "0df275d681dd7222ad6c827178879efa1cc753bb", "url": "https://github.com/elastic/elasticsearch/commit/0df275d681dd7222ad6c827178879efa1cc753bb", "message": "Update x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-10T14:02:12Z", "type": "commit"}, {"oid": "944d19cf230c78f5b3b59efed86de3a4bad9abc5", "url": "https://github.com/elastic/elasticsearch/commit/944d19cf230c78f5b3b59efed86de3a4bad9abc5", "message": "Add missing import", "committedDate": "2020-12-10T14:08:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMDEzNA==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540210134", "bodyText": "I think this is a bad name as it collides with org.elasticsearch.ExceptionsHelper.unwrapCause\nNot saying getRootCauseException is a good one, maybe something that indicates the intent: unwrapping search responses, e.g. unwrapSearchException or findSearchExceptionRootCause.\nI think this method should not become a general exception handling method, but only for handling search errors. Otherwise the chances are high that code sharing lead to undesired bugs.\nFor that reason I think it would be good to move it out of the ml subpackage (despite this is just a logical but not technically limiting) into a more common area.\nTransform should use this without indirection.", "author": "hendrikmuhs", "createdAt": "2020-12-10T14:25:58Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java", "diffHunk": "@@ -112,7 +113,29 @@ public static String shardFailuresToErrorMsg(String jobId, ShardSearchFailure[]\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * Unwrap the exception stack and return the most likely cause.\n+     * This method has special handling for {@link SearchPhaseExecutionException}\n+     * where it returns the cause of the first shard failure.\n+     *\n+     * @param t raw Throwable\n+     * @return unwrapped throwable if possible\n+     */\n     public static Throwable unwrapCause(Throwable t) {", "originalCommit": "944d19cf230c78f5b3b59efed86de3a4bad9abc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxODkyNw==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540218927", "bodyText": "It is basically an unwrapCause that also handles SearchPhaseExecutionException. The problem with SearchPhaseExecutionException is that it doesn't implement ElasticsearchWrapperException. Let's discuss this further offline.", "author": "dimitris-athanasiou", "createdAt": "2020-12-10T14:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMDEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MzU1NA==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r542473554", "bodyText": "OK, I have refactored the code to keep a method named findSearchExceptionRootCause instead of replacing unwrapCause.", "author": "dimitris-athanasiou", "createdAt": "2020-12-14T15:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMDEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "3894a4951e84aa837beba089463174b3fa28b30d", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java\nindex 732aa211b3e..e71b6010414 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/ExceptionsHelper.java\n\n@@ -113,6 +113,13 @@ public class ExceptionsHelper {\n         return requireNonNull(obj, paramName.getPreferredName());\n     }\n \n+    /**\n+     * @see org.elasticsearch.ExceptionsHelper#unwrapCause(Throwable)\n+     */\n+    public static Throwable unwrapCause(Throwable t) {\n+        return org.elasticsearch.ExceptionsHelper.unwrapCause(t);\n+    }\n+\n     /**\n      * Unwrap the exception stack and return the most likely cause.\n      * This method has special handling for {@link SearchPhaseExecutionException}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMjEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540212108", "bodyText": "see my 1st comment, this makes no sense to me", "author": "hendrikmuhs", "createdAt": "2020-12-10T14:28:27Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java", "diffHunk": "@@ -19,4 +19,11 @@\n         }\n         return obj;\n     }\n+\n+    /**\n+     * @see org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper#unwrapCause(Throwable)\n+     */\n+    public static Throwable unwrapCause(Throwable t) {\n+        return org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper.unwrapCause(t);", "originalCommit": "944d19cf230c78f5b3b59efed86de3a4bad9abc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3894a4951e84aa837beba089463174b3fa28b30d", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java\nindex 45502f829d0..a312d1dbbbc 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java\n\n@@ -21,9 +21,9 @@ public class ExceptionsHelper {\n     }\n \n     /**\n-     * @see org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper#unwrapCause(Throwable)\n+     * @see org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper#findSearchExceptionRootCause(Throwable)\n      */\n-    public static Throwable unwrapCause(Throwable t) {\n+    public static Throwable findSearchExceptionRootCause(Throwable t) {\n         return org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper.unwrapCause(t);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540214078", "bodyText": "now that you made it an error: should it be audited as well?", "author": "hendrikmuhs", "createdAt": "2020-12-10T14:30:57Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -318,7 +321,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n             try {\n                 extractedData = dataExtractor.next();\n             } catch (Exception e) {\n-                LOGGER.debug(\"[\" + jobId + \"] error while extracting data\", e);\n+                LOGGER.error(new ParameterizedMessage(\"[{}] error while extracting data\", jobId), e);", "originalCommit": "944d19cf230c78f5b3b59efed86de3a4bad9abc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNjk3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540216976", "bodyText": "ProblemTracker makes sure this is audited", "author": "dimitris-athanasiou", "createdAt": "2020-12-10T14:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDA3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDIzNA==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540214234", "bodyText": "audit, too?", "author": "hendrikmuhs", "createdAt": "2020-12-10T14:31:09Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java", "diffHunk": "@@ -350,7 +353,7 @@ private void run(long start, long end, FlushJobAction.Request flushRequest) thro\n                     if (isIsolated) {\n                         return;\n                     }\n-                    LOGGER.debug(\"[\" + jobId + \"] error while posting data\", e);\n+                LOGGER.error(new ParameterizedMessage(\"[{}] error while posting data\", jobId), e);", "originalCommit": "944d19cf230c78f5b3b59efed86de3a4bad9abc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNzAyNw==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r540217027", "bodyText": "ProblemTracker makes sure this is audited", "author": "dimitris-athanasiou", "createdAt": "2020-12-10T14:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDIzNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3894a4951e84aa837beba089463174b3fa28b30d", "url": "https://github.com/elastic/elasticsearch/commit/3894a4951e84aa837beba089463174b3fa28b30d", "message": "Address review comments", "committedDate": "2020-12-14T15:26:17Z", "type": "commit"}, {"oid": "d2ed15141dbd38acce6bcb6737b05130acf78e78", "url": "https://github.com/elastic/elasticsearch/commit/d2ed15141dbd38acce6bcb6737b05130acf78e78", "message": "Merge branch 'master' into report-cause-when-datafeed-extraction-encounters-error", "committedDate": "2020-12-14T15:38:06Z", "type": "commit"}, {"oid": "33c8a7806a75d7a5cae4855b8a4a259f341f5e60", "url": "https://github.com/elastic/elasticsearch/commit/33c8a7806a75d7a5cae4855b8a4a259f341f5e60", "message": "Fix failing tests", "committedDate": "2020-12-14T16:25:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNDA1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r543134051", "bodyText": "Is this cross-package dependency ok?\nI'd consider introducing ExceptionsHelper class under org.elasticsearch.xpack.core.common instead.", "author": "przemekwitek", "createdAt": "2020-12-15T08:17:24Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/transform/utils/ExceptionsHelper.java", "diffHunk": "@@ -19,4 +19,11 @@\n         }\n         return obj;\n     }\n+\n+    /**\n+     * @see org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper#findSearchExceptionRootCause(Throwable)\n+     */\n+    public static Throwable findSearchExceptionRootCause(Throwable t) {\n+        return org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper.findSearchExceptionRootCause(t);", "originalCommit": "33c8a7806a75d7a5cae4855b8a4a259f341f5e60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0NzczMA==", "url": "https://github.com/elastic/elasticsearch/pull/66167#discussion_r543147730", "bodyText": "We discussed this with Hendrik. It's not great but harmless otherwise. Adding another ExceptionsHelper class is marginally worse. There is much to improve in our exceptions handling framework. I am going to raise an issue that once fixed should make this method unnecessary.", "author": "dimitris-athanasiou", "createdAt": "2020-12-15T08:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNDA1MQ=="}], "type": "inlineReview", "revised_code": null}]}