{"pr_number": 62932, "pr_title": "EQL: Allow escaped backquote in identifiers", "pr_createdAt": "2020-09-28T08:27:46Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62932", "timeline": [{"oid": "07f54646128593b2e84b05c0d15f304daa7b22a8", "url": "https://github.com/elastic/elasticsearch/commit/07f54646128593b2e84b05c0d15f304daa7b22a8", "message": "EQL: Allow escaped backquote in identifiers\n\nPreviously, backquote couldn't not be used inside an escaped identifier,\ne.g.:\n```\n`my`identifier` = \"some_value\"\n```\nwas not allowed. Introduce escaping of the backtick with a leading\nbackslash:\n```\n`my\\`identifier` = \"some_value\"\n```", "committedDate": "2020-09-28T08:24:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NjA3MA==", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r495896070", "bodyText": "Please add some tests for failures, e.g.:\n\nbackquote unescaped\ndouble backquotes\nescaped backslash and backquote: \\\\\\`", "author": "costin", "createdAt": "2020-09-28T12:21:20Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "diffHunk": "@@ -136,6 +136,19 @@ public void testBackQuotedAttribute() {\n         assertThat(ua.qualifier(), is(nullValue()));\n     }\n \n+    public void testBackQuotedIdentifierWithEscapedBackQuote() {", "originalCommit": "07f54646128593b2e84b05c0d15f304daa7b22a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d4fca0d6c85b43651c9adfd7d06f924812e1040", "chunk": "diff --git a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\nindex 39b1dd6fcba..8d815fb8baf 100644\n--- a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\n+++ b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\n\n@@ -138,8 +139,8 @@ public class ExpressionTests extends ESTestCase {\n \n     public void testBackQuotedIdentifierWithEscapedBackQuote() {\n         String quote = \"`\";\n-        String qualifier = \"\\\\`test\\\\`table\\\\`\";\n-        String expectedQualifier = \"`test`table`\";\n+        String qualifier = \"\\\\`test\\\\\\\\`table\\\\`\";\n+        String expectedQualifier = \"`test\\\\`table`\";\n         String name = \"@timestamp\";\n         Expression exp = expr(quote + qualifier + quote + \".\" + quote + name + quote);\n         assertThat(exp, instanceOf(UnresolvedAttribute.class));\n"}}, {"oid": "7d4fca0d6c85b43651c9adfd7d06f924812e1040", "url": "https://github.com/elastic/elasticsearch/commit/7d4fca0d6c85b43651c9adfd7d06f924812e1040", "message": "add more tests", "committedDate": "2020-09-28T12:43:32Z", "type": "commit"}, {"oid": "9cbfebb22168adea68c4fe294b9da57e243226c9", "url": "https://github.com/elastic/elasticsearch/commit/9cbfebb22168adea68c4fe294b9da57e243226c9", "message": "Merge remote-tracking branch 'upstream/master' into escape-backtick", "committedDate": "2020-09-30T13:03:14Z", "type": "commit"}, {"oid": "61ce147577143bf471eedcc99ce905bc454ae326", "url": "https://github.com/elastic/elasticsearch/commit/61ce147577143bf471eedcc99ce905bc454ae326", "message": "Use double `` for escaping instead of \\`", "committedDate": "2020-09-30T13:21:23Z", "type": "commit"}, {"oid": "a8a3d0866924a29cf25a659b6bc8782a3e58d650", "url": "https://github.com/elastic/elasticsearch/commit/a8a3d0866924a29cf25a659b6bc8782a3e58d650", "message": "remove unused import", "committedDate": "2020-09-30T13:30:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxMTA0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r497511049", "bodyText": "Why is there a newIdentifier and the existing identifier is not reused?\nAlso shouldn't the condition check that the identifiers starts and stops with a backtick?\nPlease add a test for the following cases:\n`bar\n``bar`\n```bar`\nbar`\nbar``", "author": "costin", "createdAt": "2020-09-30T13:31:21Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/IdentifierBuilder.java", "diffHunk": "@@ -27,6 +27,10 @@ public String visitQualifiedName(QualifiedNameContext ctx) {\n     }\n \n     private static String unquoteIdentifier(String identifier) {\n-        return identifier.replace(\"`\", \"\");\n+        String newIdentifier = identifier;\n+        if (identifier.charAt(0) == '`') {\n+            newIdentifier = identifier.substring(1, identifier.length() - 1);\n+        }\n+        return newIdentifier.replace(\"``\", \"`\");", "originalCommit": "61ce147577143bf471eedcc99ce905bc454ae326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUzMjEzNg==", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r497532136", "bodyText": "I can reuse it, it's just personal pref to not change the passed arg.\nNot necessary because if it's correctly parsed from the parser it always has the ending backquote, we use the same checks for the unquoteString method.\nWill add more tests", "author": "matriv", "createdAt": "2020-09-30T13:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxMTA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1c0da2c88907546b1ef1e78286bb7900f8c68e5c", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/IdentifierBuilder.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/IdentifierBuilder.java\nindex 0218290d002..46bbc74e446 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/IdentifierBuilder.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/parser/IdentifierBuilder.java\n\n@@ -27,10 +27,9 @@ abstract class IdentifierBuilder extends AbstractBuilder {\n     }\n \n     private static String unquoteIdentifier(String identifier) {\n-        String newIdentifier = identifier;\n         if (identifier.charAt(0) == '`') {\n-            newIdentifier = identifier.substring(1, identifier.length() - 1);\n+            identifier = identifier.substring(1, identifier.length() - 1);\n         }\n-        return newIdentifier.replace(\"``\", \"`\");\n+        return identifier.replace(\"``\", \"`\");\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxNDE2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r497514166", "bodyText": "this indicates = is not supported rather than the identifier not working...", "author": "costin", "createdAt": "2020-09-30T13:35:34Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "diffHunk": "@@ -136,6 +136,33 @@ public void testBackQuotedAttribute() {\n         assertThat(ua.qualifier(), is(nullValue()));\n     }\n \n+    public void testBackQuotedIdentifierWithEscapedBackQuote() {\n+        String quote = \"`\";\n+        String qualifier = \"``test``table``\";\n+        String expectedQualifier = \"`test`table`\";\n+        String name = \"@timestamp\";\n+        Expression exp = expr(quote + qualifier + quote + \".\" + quote + name + quote);\n+        assertThat(exp, instanceOf(UnresolvedAttribute.class));\n+        UnresolvedAttribute ua = (UnresolvedAttribute) exp;\n+        assertThat(ua.name(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifiedName(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifier(), is(nullValue()));\n+    }\n+\n+    public void testBackQuotedIdentifierWithUnescapedBackQuotes() {\n+        ParsingException e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"``wrong_identifier` = \\\"some_value\\\"\"));\n+        assertEquals(\"line 1:19: token recognition error at: '` = \\\"some_value\\\"'\", e.getMessage());", "originalCommit": "a8a3d0866924a29cf25a659b6bc8782a3e58d650", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c0da2c88907546b1ef1e78286bb7900f8c68e5c", "chunk": "diff --git a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\nindex 2cb355bccbe..5233daa57a8 100644\n--- a/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\n+++ b/x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java\n\n@@ -147,20 +148,47 @@ public class ExpressionTests extends ESTestCase {\n         assertThat(ua.name(), equalTo(expectedQualifier + \".\" + name));\n         assertThat(ua.qualifiedName(), equalTo(expectedQualifier + \".\" + name));\n         assertThat(ua.qualifier(), is(nullValue()));\n+\n+        quote = \"`\";\n+        qualifier = \"``test_table\";\n+        expectedQualifier = \"`test_table\";\n+        name = \"@timestamp\";\n+        exp = expr(quote + qualifier + quote + \".\" + quote + name + quote);\n+        assertThat(exp, instanceOf(UnresolvedAttribute.class));\n+        ua = (UnresolvedAttribute) exp;\n+        assertThat(ua.name(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifiedName(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifier(), is(nullValue()));\n     }\n \n     public void testBackQuotedIdentifierWithUnescapedBackQuotes() {\n         ParsingException e = expectThrows(ParsingException.class, \"Expected syntax error\",\n-                () -> expr(\"``wrong_identifier` = \\\"some_value\\\"\"));\n-        assertEquals(\"line 1:19: token recognition error at: '` = \\\"some_value\\\"'\", e.getMessage());\n+                () -> expr(\"`wrong_identifier == true\"));\n+        assertEquals(\"line 1:1: token recognition error at: '`wrong_identifier == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"``wrong_identifier == true\"));\n+        assertThat(e.getMessage(), startsWith(\"line 1:3: mismatched input 'wrong_identifier' expecting {<EOF>, \"));\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"``wrong_identifier` == true\"));\n+        assertEquals(\"line 1:19: token recognition error at: '` == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"`wrong`identifier` == true\"));\n+        assertEquals(\"line 1:18: token recognition error at: '` == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"wrong_identifier` == true\"));\n+        assertEquals(\"line 1:17: token recognition error at: '` == true'\", e.getMessage());\n \n         e = expectThrows(ParsingException.class, \"Expected syntax error\",\n-                () -> expr(\"`wrong`identifier` = \\\"some_value\\\"\"));\n-        assertEquals(\"line 1:18: token recognition error at: '` = \\\"some_value\\\"'\", e.getMessage());\n+                () -> expr(\"wrong_identifier`` == true\"));\n+        assertThat(e.getMessage(), startsWith(\"line 1:17: mismatched input '``' expecting {<EOF>,\"));\n \n         e = expectThrows(ParsingException.class, \"Expected syntax error\",\n-                () -> expr(\"`wrong_identifier`` = \\\"some_value\\\"\"));\n-        assertEquals(\"line 1:19: token recognition error at: '` = \\\"some_value\\\"'\", e.getMessage());\n+                () -> expr(\"`wrong_identifier`` == true\"));\n+        assertEquals(\"line 1:19: token recognition error at: '` == true'\", e.getMessage());\n     }\n \n     public void testFunctions() {\n"}}, {"oid": "1c0da2c88907546b1ef1e78286bb7900f8c68e5c", "url": "https://github.com/elastic/elasticsearch/commit/1c0da2c88907546b1ef1e78286bb7900f8c68e5c", "message": "Add more tests", "committedDate": "2020-09-30T14:19:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1MTY3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/62932#discussion_r497551677", "bodyText": "This means that any identifier containing a backquote needs quoting (that is be surrounded by backticks and any ticks inside of it be escaped by doubling:\n`foo -> ```foo`\n\n/cc @jrodewig", "author": "costin", "createdAt": "2020-09-30T14:24:11Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/parser/ExpressionTests.java", "diffHunk": "@@ -136,6 +137,60 @@ public void testBackQuotedAttribute() {\n         assertThat(ua.qualifier(), is(nullValue()));\n     }\n \n+    public void testBackQuotedIdentifierWithEscapedBackQuote() {\n+        String quote = \"`\";\n+        String qualifier = \"``test``table``\";\n+        String expectedQualifier = \"`test`table`\";\n+        String name = \"@timestamp\";\n+        Expression exp = expr(quote + qualifier + quote + \".\" + quote + name + quote);\n+        assertThat(exp, instanceOf(UnresolvedAttribute.class));\n+        UnresolvedAttribute ua = (UnresolvedAttribute) exp;\n+        assertThat(ua.name(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifiedName(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifier(), is(nullValue()));\n+\n+        quote = \"`\";\n+        qualifier = \"``test_table\";\n+        expectedQualifier = \"`test_table\";\n+        name = \"@timestamp\";\n+        exp = expr(quote + qualifier + quote + \".\" + quote + name + quote);\n+        assertThat(exp, instanceOf(UnresolvedAttribute.class));\n+        ua = (UnresolvedAttribute) exp;\n+        assertThat(ua.name(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifiedName(), equalTo(expectedQualifier + \".\" + name));\n+        assertThat(ua.qualifier(), is(nullValue()));\n+    }\n+\n+    public void testBackQuotedIdentifierWithUnescapedBackQuotes() {\n+        ParsingException e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"`wrong_identifier == true\"));\n+        assertEquals(\"line 1:1: token recognition error at: '`wrong_identifier == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"``wrong_identifier == true\"));\n+        assertThat(e.getMessage(), startsWith(\"line 1:3: mismatched input 'wrong_identifier' expecting {<EOF>, \"));\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"``wrong_identifier` == true\"));\n+        assertEquals(\"line 1:19: token recognition error at: '` == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"`wrong`identifier` == true\"));\n+        assertEquals(\"line 1:18: token recognition error at: '` == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"wrong_identifier` == true\"));\n+        assertEquals(\"line 1:17: token recognition error at: '` == true'\", e.getMessage());\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"wrong_identifier`` == true\"));\n+        assertThat(e.getMessage(), startsWith(\"line 1:17: mismatched input '``' expecting {<EOF>,\"));\n+\n+        e = expectThrows(ParsingException.class, \"Expected syntax error\",\n+                () -> expr(\"`wrong_identifier`` == true\"));\n+        assertEquals(\"line 1:19: token recognition error at: '` == true'\", e.getMessage());\n+    }", "originalCommit": "1c0da2c88907546b1ef1e78286bb7900f8c68e5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}