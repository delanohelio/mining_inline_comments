{"pr_number": 64177, "pr_title": "Improve decoration system in ir nodes", "pr_createdAt": "2020-10-26T17:02:37Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64177", "timeline": [{"oid": "0a1b5ed092704a1c25d1509213b16966d263c9c1", "url": "https://github.com/elastic/elasticsearch/commit/0a1b5ed092704a1c25d1509213b16966d263c9c1", "message": "make location final in IRNode", "committedDate": "2020-09-26T16:39:29Z", "type": "commit"}, {"oid": "7d62d0752fb2a99ae998fcab291c0f709bded0f5", "url": "https://github.com/elastic/elasticsearch/commit/7d62d0752fb2a99ae998fcab291c0f709bded0f5", "message": "add scoping for script, class, and method to WriteScope", "committedDate": "2020-09-26T17:18:49Z", "type": "commit"}, {"oid": "712b0a8965bba0939acd0f8e73932796eddc7238", "url": "https://github.com/elastic/elasticsearch/commit/712b0a8965bba0939acd0f8e73932796eddc7238", "message": "update scope to include classwriter and methodwriter", "committedDate": "2020-09-26T17:36:01Z", "type": "commit"}, {"oid": "8e38647855a1c5cca0c30a3f7e43f71c5d164edf", "url": "https://github.com/elastic/elasticsearch/commit/8e38647855a1c5cca0c30a3f7e43f71c5d164edf", "message": "move loop labels to writescope", "committedDate": "2020-09-26T17:56:22Z", "type": "commit"}, {"oid": "65502b186dbd52a0c784a52a83b1fb659e3a6abc", "url": "https://github.com/elastic/elasticsearch/commit/65502b186dbd52a0c784a52a83b1fb659e3a6abc", "message": "move try/catch labels to WriteScope", "committedDate": "2020-09-26T18:22:52Z", "type": "commit"}, {"oid": "7231b5ebd24838d08a18b46615849ab7842667eb", "url": "https://github.com/elastic/elasticsearch/commit/7231b5ebd24838d08a18b46615849ab7842667eb", "message": "move write to an external phase", "committedDate": "2020-09-26T20:26:14Z", "type": "commit"}, {"oid": "18098089e58987981be7c35788a1a8b93e3bcbb5", "url": "https://github.com/elastic/elasticsearch/commit/18098089e58987981be7c35788a1a8b93e3bcbb5", "message": "convert expression type to ir decoration", "committedDate": "2020-09-26T21:42:15Z", "type": "commit"}, {"oid": "fab7ab346732b15568ad76fbb2ac6f70310a9dfa", "url": "https://github.com/elastic/elasticsearch/commit/fab7ab346732b15568ad76fbb2ac6f70310a9dfa", "message": "update ir decoration system", "committedDate": "2020-09-27T19:33:17Z", "type": "commit"}, {"oid": "ae8d2a1f12069641171f0013205b5887c7dfcd6a", "url": "https://github.com/elastic/elasticsearch/commit/ae8d2a1f12069641171f0013205b5887c7dfcd6a", "message": "Merge branch 'master' into proto", "committedDate": "2020-09-30T14:38:56Z", "type": "commit"}, {"oid": "760b9b940997249b18947d6da787d338f2a9dc38", "url": "https://github.com/elastic/elasticsearch/commit/760b9b940997249b18947d6da787d338f2a9dc38", "message": "Merge branch 'master' into proto", "committedDate": "2020-10-05T16:36:09Z", "type": "commit"}, {"oid": "b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "url": "https://github.com/elastic/elasticsearch/commit/b0320fe53e81db05b2d0b571bb34fb92af6e57c5", "message": "Merge branch 'proto' into proto2", "committedDate": "2020-10-05T17:04:18Z", "type": "commit"}, {"oid": "527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "url": "https://github.com/elastic/elasticsearch/commit/527afc40f1b3a96f97b63aaf64c0f2c908b9b97f", "message": "Merge branch 'master' into proto", "committedDate": "2020-10-08T19:53:15Z", "type": "commit"}, {"oid": "879afcac4496aa42f0d57c3485a94d11575bfe4c", "url": "https://github.com/elastic/elasticsearch/commit/879afcac4496aa42f0d57c3485a94d11575bfe4c", "message": "Merge branch 'proto' into proto2", "committedDate": "2020-10-08T19:53:23Z", "type": "commit"}, {"oid": "49397f77f269c06949af28d6a0b33e8f5d653018", "url": "https://github.com/elastic/elasticsearch/commit/49397f77f269c06949af28d6a0b33e8f5d653018", "message": "response to pr comments", "committedDate": "2020-10-08T20:17:35Z", "type": "commit"}, {"oid": "4c8082f74654dccabbb2ee339e9089623f445fb3", "url": "https://github.com/elastic/elasticsearch/commit/4c8082f74654dccabbb2ee339e9089623f445fb3", "message": "Merge branch 'master' into proto2", "committedDate": "2020-10-08T21:21:07Z", "type": "commit"}, {"oid": "883486155e6f1c304fe53b5c8ef09ee255964141", "url": "https://github.com/elastic/elasticsearch/commit/883486155e6f1c304fe53b5c8ef09ee255964141", "message": "Merge branch 'proto2' into proto3", "committedDate": "2020-10-08T21:32:23Z", "type": "commit"}, {"oid": "e31faeae9f99ed35a64d812596604b342fbc63f1", "url": "https://github.com/elastic/elasticsearch/commit/e31faeae9f99ed35a64d812596604b342fbc63f1", "message": "Merge branch 'master' into proto2", "committedDate": "2020-10-16T19:07:24Z", "type": "commit"}, {"oid": "16031ac02038b84fd67bdc650a3f374ba9c8b927", "url": "https://github.com/elastic/elasticsearch/commit/16031ac02038b84fd67bdc650a3f374ba9c8b927", "message": "Merge branch 'proto2' into proto3", "committedDate": "2020-10-16T19:07:32Z", "type": "commit"}, {"oid": "902b2ba328e4f9e3fc0a3d5f3809e257e396d2a4", "url": "https://github.com/elastic/elasticsearch/commit/902b2ba328e4f9e3fc0a3d5f3809e257e396d2a4", "message": "response to pr comments", "committedDate": "2020-10-16T19:51:59Z", "type": "commit"}, {"oid": "c245ddd2784cc981bfa207bbb5074ae73f4b5422", "url": "https://github.com/elastic/elasticsearch/commit/c245ddd2784cc981bfa207bbb5074ae73f4b5422", "message": "Merge branch 'master' into proto3", "committedDate": "2020-10-16T20:53:25Z", "type": "commit"}, {"oid": "4bfe0db6687dfe3269ef82b771f11269c0702b57", "url": "https://github.com/elastic/elasticsearch/commit/4bfe0db6687dfe3269ef82b771f11269c0702b57", "message": "Merge branch 'master' into proto3", "committedDate": "2020-10-19T16:32:50Z", "type": "commit"}, {"oid": "e025b887a4018c746f944293b59f4276a6d43170", "url": "https://github.com/elastic/elasticsearch/commit/e025b887a4018c746f944293b59f4276a6d43170", "message": "Merge branch 'proto3' into proto4", "committedDate": "2020-10-19T16:49:40Z", "type": "commit"}, {"oid": "d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "url": "https://github.com/elastic/elasticsearch/commit/d09de9a0acb7fd9e7f8dcff97f62745412310fe3", "message": "Merge branch 'master' into proto3", "committedDate": "2020-10-22T17:01:04Z", "type": "commit"}, {"oid": "b22e832b888257ab748b0191a868171928c09629", "url": "https://github.com/elastic/elasticsearch/commit/b22e832b888257ab748b0191a868171928c09629", "message": "Merge branch 'proto3' into proto4", "committedDate": "2020-10-22T17:01:14Z", "type": "commit"}, {"oid": "376eda6647a7ce28433183830d3956c7faab513f", "url": "https://github.com/elastic/elasticsearch/commit/376eda6647a7ce28433183830d3956c7faab513f", "message": "response to pr comments", "committedDate": "2020-10-22T18:09:32Z", "type": "commit"}, {"oid": "a66b3936a904f5591cb5899edf3618faa8415b47", "url": "https://github.com/elastic/elasticsearch/commit/a66b3936a904f5591cb5899edf3618faa8415b47", "message": "Merge branch 'master' into proto4", "committedDate": "2020-10-22T22:06:32Z", "type": "commit"}, {"oid": "084cfe10473577b0c093fb1ff5db6e006950ed2b", "url": "https://github.com/elastic/elasticsearch/commit/084cfe10473577b0c093fb1ff5db6e006950ed2b", "message": "Merge branch 'master' into proto4", "committedDate": "2020-10-26T15:58:17Z", "type": "commit"}, {"oid": "40f3e98230120f60bc2e4717dd866630a5f4ab5e", "url": "https://github.com/elastic/elasticsearch/commit/40f3e98230120f60bc2e4717dd866630a5f4ab5e", "message": "Merge branch 'proto4' into proto5", "committedDate": "2020-10-26T16:55:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MTYxMA==", "url": "https://github.com/elastic/elasticsearch/pull/64177#discussion_r513571610", "bodyText": "This is a substantional enough class that it should be pulled out into it's own file.", "author": "stu-elastic", "createdAt": "2020-10-28T16:08:45Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -31,40 +31,56 @@\n \n     /* ---- begin decorations ---- */\n \n-    public interface IRDecoration {\n+    public abstract static class IRDecoration<V> {", "originalCommit": "40f3e98230120f60bc2e4717dd866630a5f4ab5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4MjM3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/64177#discussion_r515182376", "bodyText": "I agree, but I'm going to hold off on this for now as I think we should reorg everything into user and ir packages with subpackages for node and phase. I will do that in a follow up PR.", "author": "jdconrad", "createdAt": "2020-10-30T15:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MTYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "b80b1f16c4c4d1324d0f7fa135dab422ac54f411", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\nindex 1de2ed1ab56..eee72261288 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\n\n@@ -31,56 +31,40 @@ public abstract class IRNode {\n \n     /* ---- begin decorations ---- */\n \n-    public abstract static class IRDecoration<V> {\n+    public interface IRDecoration {\n \n-        private final V value;\n-\n-        public IRDecoration(V value) {\n-            this.value = value;\n-        }\n-\n-        public V getValue() {\n-            return value;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return value.toString();\n-        }\n     }\n \n-    private final Map<Class<? extends IRDecoration<?>>, IRDecoration<?>> decorations = new HashMap<>();\n+    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n \n     @SuppressWarnings(\"unchecked\")\n-    public <V> V attachDecoration(IRDecoration<V> decoration) {\n-        IRDecoration<V> previous = (IRDecoration<V>)decorations.put((Class<? extends IRDecoration<?>>)decoration.getClass(), decoration);\n-        return previous == null ? null : previous.getValue();\n+    public <T extends IRDecoration> T attachDecoration(T decoration) {\n+        return (T)decorations.put(decoration.getClass(), decoration);\n     }\n \n-    public <T extends IRDecoration<?>> T removeDecoration(Class<T> type) {\n+    public <T extends IRDecoration> T removeDecoration(Class<T> type) {\n         return type.cast(decorations.remove(type));\n     }\n \n-    public boolean hasDecoration(Class<? extends IRDecoration<?>> type) {\n-        return decorations.containsKey(type);\n-    }\n-\n-    public <T extends IRDecoration<?>> T getDecoration(Class<T> type) {\n+    public <T extends IRDecoration> T getDecoration(Class<T> type) {\n         return type.cast(decorations.get(type));\n     }\n \n-    public <T extends IRDecoration<V>, V> V getDecorationValue(Class<T> type) {\n-        return getDecorationValueOrDefaultValue(type, null);\n+    public boolean hasDecoration(Class<? extends IRDecoration> type) {\n+        return decorations.containsKey(type);\n     }\n \n-    public <T extends IRDecoration<V>, V> V getDecorationValueOrDefaultValue(Class<T> type, V defaultValue) {\n-        T decoration = type.cast(decorations.get(type));\n-        return decoration == null ? defaultValue : decoration.getValue();\n-    }\n+    public <T extends IRDecoration> boolean copyDecorationFrom(IRNode copyFromIRNode, Class<T> type) {\n+        T decoration = copyFromIRNode.getDecoration(type);\n+\n+\n+        if (decoration != null) {\n+            attachDecoration(decoration);\n+\n+            return true;\n+        }\n \n-    public <T extends IRDecoration<?>> String getDecorationString(Class<T> type) {\n-        T decoration = type.cast(decorations.get(type));\n-        return decoration == null ? null : decoration.toString();\n+        return false;\n     }\n \n     /* ---- end decorations, begin conditions ---- */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MjQyNg==", "url": "https://github.com/elastic/elasticsearch/pull/64177#discussion_r513572426", "bodyText": "getDecorationValueOrDefault", "author": "stu-elastic", "createdAt": "2020-10-28T16:09:44Z", "path": "modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java", "diffHunk": "@@ -31,40 +31,56 @@\n \n     /* ---- begin decorations ---- */\n \n-    public interface IRDecoration {\n+    public abstract static class IRDecoration<V> {\n \n+        private final V value;\n+\n+        public IRDecoration(V value) {\n+            this.value = value;\n+        }\n+\n+        public V getValue() {\n+            return value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return value.toString();\n+        }\n     }\n \n-    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n+    private final Map<Class<? extends IRDecoration<?>>, IRDecoration<?>> decorations = new HashMap<>();\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends IRDecoration> T attachDecoration(T decoration) {\n-        return (T)decorations.put(decoration.getClass(), decoration);\n+    public <V> V attachDecoration(IRDecoration<V> decoration) {\n+        IRDecoration<V> previous = (IRDecoration<V>)decorations.put((Class<? extends IRDecoration<?>>)decoration.getClass(), decoration);\n+        return previous == null ? null : previous.getValue();\n     }\n \n-    public <T extends IRDecoration> T removeDecoration(Class<T> type) {\n+    public <T extends IRDecoration<?>> T removeDecoration(Class<T> type) {\n         return type.cast(decorations.remove(type));\n     }\n \n-    public <T extends IRDecoration> T getDecoration(Class<T> type) {\n-        return type.cast(decorations.get(type));\n-    }\n-\n-    public boolean hasDecoration(Class<? extends IRDecoration> type) {\n+    public boolean hasDecoration(Class<? extends IRDecoration<?>> type) {\n         return decorations.containsKey(type);\n     }\n \n-    public <T extends IRDecoration> boolean copyDecorationFrom(IRNode copyFromIRNode, Class<T> type) {\n-        T decoration = copyFromIRNode.getDecoration(type);\n-\n+    public <T extends IRDecoration<?>> T getDecoration(Class<T> type) {\n+        return type.cast(decorations.get(type));\n+    }\n \n-        if (decoration != null) {\n-            attachDecoration(decoration);\n+    public <T extends IRDecoration<V>, V> V getDecorationValue(Class<T> type) {\n+        return getDecorationValueOrDefaultValue(type, null);\n+    }\n \n-            return true;\n-        }\n+    public <T extends IRDecoration<V>, V> V getDecorationValueOrDefaultValue(Class<T> type, V defaultValue) {", "originalCommit": "40f3e98230120f60bc2e4717dd866630a5f4ab5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4NjU4NA==", "url": "https://github.com/elastic/elasticsearch/pull/64177#discussion_r515186584", "bodyText": "Done.", "author": "jdconrad", "createdAt": "2020-10-30T15:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MjQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "b80b1f16c4c4d1324d0f7fa135dab422ac54f411", "chunk": "diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\nindex 1de2ed1ab56..eee72261288 100644\n--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\n+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ir/IRNode.java\n\n@@ -31,56 +31,40 @@ public abstract class IRNode {\n \n     /* ---- begin decorations ---- */\n \n-    public abstract static class IRDecoration<V> {\n+    public interface IRDecoration {\n \n-        private final V value;\n-\n-        public IRDecoration(V value) {\n-            this.value = value;\n-        }\n-\n-        public V getValue() {\n-            return value;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return value.toString();\n-        }\n     }\n \n-    private final Map<Class<? extends IRDecoration<?>>, IRDecoration<?>> decorations = new HashMap<>();\n+    private final Map<Class<? extends IRDecoration>, IRDecoration> decorations = new HashMap<>();\n \n     @SuppressWarnings(\"unchecked\")\n-    public <V> V attachDecoration(IRDecoration<V> decoration) {\n-        IRDecoration<V> previous = (IRDecoration<V>)decorations.put((Class<? extends IRDecoration<?>>)decoration.getClass(), decoration);\n-        return previous == null ? null : previous.getValue();\n+    public <T extends IRDecoration> T attachDecoration(T decoration) {\n+        return (T)decorations.put(decoration.getClass(), decoration);\n     }\n \n-    public <T extends IRDecoration<?>> T removeDecoration(Class<T> type) {\n+    public <T extends IRDecoration> T removeDecoration(Class<T> type) {\n         return type.cast(decorations.remove(type));\n     }\n \n-    public boolean hasDecoration(Class<? extends IRDecoration<?>> type) {\n-        return decorations.containsKey(type);\n-    }\n-\n-    public <T extends IRDecoration<?>> T getDecoration(Class<T> type) {\n+    public <T extends IRDecoration> T getDecoration(Class<T> type) {\n         return type.cast(decorations.get(type));\n     }\n \n-    public <T extends IRDecoration<V>, V> V getDecorationValue(Class<T> type) {\n-        return getDecorationValueOrDefaultValue(type, null);\n+    public boolean hasDecoration(Class<? extends IRDecoration> type) {\n+        return decorations.containsKey(type);\n     }\n \n-    public <T extends IRDecoration<V>, V> V getDecorationValueOrDefaultValue(Class<T> type, V defaultValue) {\n-        T decoration = type.cast(decorations.get(type));\n-        return decoration == null ? defaultValue : decoration.getValue();\n-    }\n+    public <T extends IRDecoration> boolean copyDecorationFrom(IRNode copyFromIRNode, Class<T> type) {\n+        T decoration = copyFromIRNode.getDecoration(type);\n+\n+\n+        if (decoration != null) {\n+            attachDecoration(decoration);\n+\n+            return true;\n+        }\n \n-    public <T extends IRDecoration<?>> String getDecorationString(Class<T> type) {\n-        T decoration = type.cast(decorations.get(type));\n-        return decoration == null ? null : decoration.toString();\n+        return false;\n     }\n \n     /* ---- end decorations, begin conditions ---- */\n"}}, {"oid": "b80b1f16c4c4d1324d0f7fa135dab422ac54f411", "url": "https://github.com/elastic/elasticsearch/commit/b80b1f16c4c4d1324d0f7fa135dab422ac54f411", "message": "Merge branch 'master' into proto4", "committedDate": "2020-10-30T15:29:52Z", "type": "commit"}, {"oid": "0959d19140ce68754367fe9235218f2bd5dc9bc3", "url": "https://github.com/elastic/elasticsearch/commit/0959d19140ce68754367fe9235218f2bd5dc9bc3", "message": "Merge branch 'proto4' into proto5", "committedDate": "2020-10-30T15:29:59Z", "type": "commit"}, {"oid": "79cb97c798506de691603b0ca899027314d815bf", "url": "https://github.com/elastic/elasticsearch/commit/79cb97c798506de691603b0ca899027314d815bf", "message": "response to pr comments", "committedDate": "2020-10-30T15:33:00Z", "type": "commit"}]}