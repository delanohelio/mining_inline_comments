{"pr_number": 61820, "pr_title": "Test DLS and FLS against runtime fields", "pr_createdAt": "2020-09-01T20:58:44Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61820", "timeline": [{"oid": "471ae862ed9d6af48580bd34d9d7e29e01401546", "url": "https://github.com/elastic/elasticsearch/commit/471ae862ed9d6af48580bd34d9d7e29e01401546", "message": "Test DLS and FLS against runtime fields", "committedDate": "2020-09-01T20:55:50Z", "type": "commit"}, {"oid": "728bda7edd092ceca12aa08c4cf0efaff2b3d375", "url": "https://github.com/elastic/elasticsearch/commit/728bda7edd092ceca12aa08c4cf0efaff2b3d375", "message": "Merge branch 'feature/runtime_fields' into test/runtime_fields_with_security", "committedDate": "2020-09-01T21:03:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDMyMg==", "url": "https://github.com/elastic/elasticsearch/pull/61820#discussion_r481434322", "bodyText": "s/\\\\\"/'` I think will work.", "author": "nik9000", "createdAt": "2020-09-01T21:12:08Z", "path": "x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security;\n+\n+import org.elasticsearch.action.fieldcaps.FieldCapabilitiesRequest;\n+import org.elasticsearch.action.fieldcaps.FieldCapabilitiesResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.document.DocumentField;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+\n+public class PermissionsIT extends ESRestTestCase {\n+\n+    private static HighLevelClient highLevelClient;\n+    private static HighLevelClient adminHighLevelClient;\n+\n+    @Override\n+    protected Settings restClientSettings() {\n+        String token = basicAuthHeaderValue(\"test\", new SecureString(\"x-pack-test-password\".toCharArray()));\n+        return Settings.builder()\n+            .put(ThreadContext.PREFIX + \".Authorization\", token)\n+            .build();\n+    }\n+\n+    @Override\n+    protected Settings restAdminSettings() {\n+        String token = basicAuthHeaderValue(\"test_admin\", new SecureString(\"x-pack-test-password\".toCharArray()));\n+        return Settings.builder()\n+            .put(ThreadContext.PREFIX + \".Authorization\", token)\n+            .build();\n+    }\n+\n+    @Before\n+    public void initHighLevelClient() {\n+        if (highLevelClient == null) {\n+            highLevelClient = new HighLevelClient(client());\n+            adminHighLevelClient = new HighLevelClient(adminClient());\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void closeHighLevelClients() throws IOException {\n+        highLevelClient.close();\n+        adminHighLevelClient.close();\n+        highLevelClient = null;\n+        adminHighLevelClient = null;\n+    }\n+\n+    public void testDLS() throws IOException  {\n+        Request createIndex = new Request(\"PUT\", \"/dls\");\n+        createIndex.setJsonEntity(\"{\\n\" +\n+            \"    \\\"mappings\\\" : {\\n\" +\n+            \"        \\\"properties\\\" : {\\n\" +\n+            \"            \\\"date\\\" : {\\\"type\\\" : \\\"keyword\\\"},\\n\" +\n+            \"            \\\"year\\\" : {\\n\" +\n+            \"              \\\"type\\\" : \\\"runtime_script\\\", \\n\" +\n+            \"              \\\"runtime_type\\\" : \\\"keyword\\\",\\n\" +\n+            \"              \\\"script\\\" : \\\"emitValue(doc[\\\\\\\"date\\\\\\\"].value.substring(0,4))\\\"\\n\" +\n+            \"            }\\n\" +\n+            \"        }\\n\" +\n+            \"    }\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(createIndex));\n+\n+        Request indexDoc1 = new Request(\"PUT\", \"/dls/_doc/1\");\n+        indexDoc1.setJsonEntity(\"{\\n\" +\n+            \"    \\\"date\\\" : \\\"2009-11-15T14:12:12\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc1));\n+\n+        Request indexDoc2 = new Request(\"PUT\", \"/dls/_doc/2\");\n+        indexDoc2.setJsonEntity(\"{\\n\" +\n+            \"    \\\"date\\\" : \\\"2016-11-15T14:12:12\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc2));\n+\n+        Request indexDoc3 = new Request(\"PUT\", \"/dls/_doc/3\");\n+        indexDoc3.addParameter(\"refresh\", \"wait_for\");\n+        indexDoc3.setJsonEntity(\"{\\n\" +\n+            \"    \\\"date\\\" : \\\"2018-11-15T14:12:12\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc3));\n+\n+        SearchRequest searchRequest = new SearchRequest(\"dls\");\n+        {\n+            SearchResponse searchResponse = adminHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n+            assertEquals(3, searchResponse.getHits().getTotalHits().value);\n+        }\n+        {\n+            SearchResponse searchResponse = highLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n+            assertEquals(1, searchResponse.getHits().getTotalHits().value);\n+        }\n+    }\n+\n+    public void testFLSProtectsData() throws IOException {\n+        Request createIndex = new Request(\"PUT\", \"/fls\");\n+        createIndex.setJsonEntity(\"{\\n\" +\n+            \"    \\\"mappings\\\" : {\\n\" +\n+            \"        \\\"properties\\\" : {\\n\" +\n+            \"            \\\"hidden\\\" : {\\\"type\\\" : \\\"keyword\\\"},\\n\" +\n+            \"            \\\"hidden_values_count\\\" : {\\n\" +\n+            \"              \\\"type\\\" : \\\"runtime_script\\\", \\n\" +\n+            \"              \\\"runtime_type\\\" : \\\"long\\\",\\n\" +\n+            \"              \\\"script\\\" : \\\"emitValue(doc[\\\\\\\"hidden\\\\\\\"].size())\\\"\\n\" +\n+            \"            }\\n\" +\n+            \"        }\\n\" +\n+            \"    }\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(createIndex));\n+\n+        Request indexDoc1 = new Request(\"PUT\", \"/fls/_doc/1\");\n+        indexDoc1.setJsonEntity(\"{\\n\" +\n+            \"    \\\"hidden\\\" : \\\"should not be read\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc1));\n+\n+        Request indexDoc2 = new Request(\"PUT\", \"/fls/_doc/2\");\n+        indexDoc2.setJsonEntity(\"{\\n\" +\n+            \"    \\\"hidden\\\" : \\\"should not be read\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc2));\n+\n+        Request indexDoc3 = new Request(\"PUT\", \"/fls/_doc/3\");\n+        indexDoc3.addParameter(\"refresh\", \"wait_for\");\n+        indexDoc3.setJsonEntity(\"{\\n\" +\n+            \"    \\\"hidden\\\" : \\\"should not be read\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc3));\n+\n+        SearchRequest searchRequest = new SearchRequest(\"fls\").source(new SearchSourceBuilder().docValueField(\"hidden_values_count\"));\n+        {\n+            SearchResponse searchResponse = adminHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n+            assertEquals(3, searchResponse.getHits().getTotalHits().value);\n+            for (SearchHit hit : searchResponse.getHits().getHits()) {\n+                assertEquals(1, hit.getFields().size());\n+                assertEquals(1, (int)hit.getFields().get(\"hidden_values_count\").getValue());\n+            }\n+        }\n+        {\n+            SearchResponse searchResponse = highLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n+            assertEquals(3, searchResponse.getHits().getTotalHits().value);\n+            for (SearchHit hit : searchResponse.getHits().getHits()) {\n+                assertEquals(0, (int)hit.getFields().get(\"hidden_values_count\").getValue());\n+            }\n+        }\n+    }\n+\n+    public void testFLSOnRuntimeField() throws IOException {\n+        Request createIndex = new Request(\"PUT\", \"/fls\");\n+        createIndex.setJsonEntity(\"{\\n\" +\n+            \"    \\\"mappings\\\" : {\\n\" +\n+            \"        \\\"properties\\\" : {\\n\" +\n+            \"            \\\"date\\\" : {\\\"type\\\" : \\\"keyword\\\"},\\n\" +\n+            \"            \\\"year\\\" : {\\n\" +\n+            \"              \\\"type\\\" : \\\"runtime_script\\\", \\n\" +\n+            \"              \\\"runtime_type\\\" : \\\"keyword\\\",\\n\" +\n+            \"              \\\"script\\\" : \\\"emitValue(doc[\\\\\\\"date\\\\\\\"].value.substring(0,4))\\\"\\n\" +", "originalCommit": "728bda7edd092ceca12aa08c4cf0efaff2b3d375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1af5a32c8a74676378436edbeee495fc4d385da8", "chunk": "diff --git a/x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java b/x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java\nindex e418afc8745..fe6732519a7 100644\n--- a/x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java\n+++ b/x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java\n\n@@ -38,17 +38,13 @@ public class PermissionsIT extends ESRestTestCase {\n     @Override\n     protected Settings restClientSettings() {\n         String token = basicAuthHeaderValue(\"test\", new SecureString(\"x-pack-test-password\".toCharArray()));\n-        return Settings.builder()\n-            .put(ThreadContext.PREFIX + \".Authorization\", token)\n-            .build();\n+        return Settings.builder().put(ThreadContext.PREFIX + \".Authorization\", token).build();\n     }\n \n     @Override\n     protected Settings restAdminSettings() {\n         String token = basicAuthHeaderValue(\"test_admin\", new SecureString(\"x-pack-test-password\".toCharArray()));\n-        return Settings.builder()\n-            .put(ThreadContext.PREFIX + \".Authorization\", token)\n-            .build();\n+        return Settings.builder().put(ThreadContext.PREFIX + \".Authorization\", token).build();\n     }\n \n     @Before\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/61820#discussion_r481434524", "bodyText": "I don't think we need to wait_for a refresh, we can just do true, I think.", "author": "nik9000", "createdAt": "2020-09-01T21:12:30Z", "path": "x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.security;\n+\n+import org.elasticsearch.action.fieldcaps.FieldCapabilitiesRequest;\n+import org.elasticsearch.action.fieldcaps.FieldCapabilitiesResponse;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.common.document.DocumentField;\n+import org.elasticsearch.common.settings.SecureString;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.test.rest.ESRestTestCase;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;\n+\n+public class PermissionsIT extends ESRestTestCase {\n+\n+    private static HighLevelClient highLevelClient;\n+    private static HighLevelClient adminHighLevelClient;\n+\n+    @Override\n+    protected Settings restClientSettings() {\n+        String token = basicAuthHeaderValue(\"test\", new SecureString(\"x-pack-test-password\".toCharArray()));\n+        return Settings.builder()\n+            .put(ThreadContext.PREFIX + \".Authorization\", token)\n+            .build();\n+    }\n+\n+    @Override\n+    protected Settings restAdminSettings() {\n+        String token = basicAuthHeaderValue(\"test_admin\", new SecureString(\"x-pack-test-password\".toCharArray()));\n+        return Settings.builder()\n+            .put(ThreadContext.PREFIX + \".Authorization\", token)\n+            .build();\n+    }\n+\n+    @Before\n+    public void initHighLevelClient() {\n+        if (highLevelClient == null) {\n+            highLevelClient = new HighLevelClient(client());\n+            adminHighLevelClient = new HighLevelClient(adminClient());\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void closeHighLevelClients() throws IOException {\n+        highLevelClient.close();\n+        adminHighLevelClient.close();\n+        highLevelClient = null;\n+        adminHighLevelClient = null;\n+    }\n+\n+    public void testDLS() throws IOException  {\n+        Request createIndex = new Request(\"PUT\", \"/dls\");\n+        createIndex.setJsonEntity(\"{\\n\" +\n+            \"    \\\"mappings\\\" : {\\n\" +\n+            \"        \\\"properties\\\" : {\\n\" +\n+            \"            \\\"date\\\" : {\\\"type\\\" : \\\"keyword\\\"},\\n\" +\n+            \"            \\\"year\\\" : {\\n\" +\n+            \"              \\\"type\\\" : \\\"runtime_script\\\", \\n\" +\n+            \"              \\\"runtime_type\\\" : \\\"keyword\\\",\\n\" +\n+            \"              \\\"script\\\" : \\\"emitValue(doc[\\\\\\\"date\\\\\\\"].value.substring(0,4))\\\"\\n\" +\n+            \"            }\\n\" +\n+            \"        }\\n\" +\n+            \"    }\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(createIndex));\n+\n+        Request indexDoc1 = new Request(\"PUT\", \"/dls/_doc/1\");\n+        indexDoc1.setJsonEntity(\"{\\n\" +\n+            \"    \\\"date\\\" : \\\"2009-11-15T14:12:12\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc1));\n+\n+        Request indexDoc2 = new Request(\"PUT\", \"/dls/_doc/2\");\n+        indexDoc2.setJsonEntity(\"{\\n\" +\n+            \"    \\\"date\\\" : \\\"2016-11-15T14:12:12\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc2));\n+\n+        Request indexDoc3 = new Request(\"PUT\", \"/dls/_doc/3\");\n+        indexDoc3.addParameter(\"refresh\", \"wait_for\");\n+        indexDoc3.setJsonEntity(\"{\\n\" +\n+            \"    \\\"date\\\" : \\\"2018-11-15T14:12:12\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc3));\n+\n+        SearchRequest searchRequest = new SearchRequest(\"dls\");\n+        {\n+            SearchResponse searchResponse = adminHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n+            assertEquals(3, searchResponse.getHits().getTotalHits().value);\n+        }\n+        {\n+            SearchResponse searchResponse = highLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n+            assertEquals(1, searchResponse.getHits().getTotalHits().value);\n+        }\n+    }\n+\n+    public void testFLSProtectsData() throws IOException {\n+        Request createIndex = new Request(\"PUT\", \"/fls\");\n+        createIndex.setJsonEntity(\"{\\n\" +\n+            \"    \\\"mappings\\\" : {\\n\" +\n+            \"        \\\"properties\\\" : {\\n\" +\n+            \"            \\\"hidden\\\" : {\\\"type\\\" : \\\"keyword\\\"},\\n\" +\n+            \"            \\\"hidden_values_count\\\" : {\\n\" +\n+            \"              \\\"type\\\" : \\\"runtime_script\\\", \\n\" +\n+            \"              \\\"runtime_type\\\" : \\\"long\\\",\\n\" +\n+            \"              \\\"script\\\" : \\\"emitValue(doc[\\\\\\\"hidden\\\\\\\"].size())\\\"\\n\" +\n+            \"            }\\n\" +\n+            \"        }\\n\" +\n+            \"    }\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(createIndex));\n+\n+        Request indexDoc1 = new Request(\"PUT\", \"/fls/_doc/1\");\n+        indexDoc1.setJsonEntity(\"{\\n\" +\n+            \"    \\\"hidden\\\" : \\\"should not be read\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc1));\n+\n+        Request indexDoc2 = new Request(\"PUT\", \"/fls/_doc/2\");\n+        indexDoc2.setJsonEntity(\"{\\n\" +\n+            \"    \\\"hidden\\\" : \\\"should not be read\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc2));\n+\n+        Request indexDoc3 = new Request(\"PUT\", \"/fls/_doc/3\");\n+        indexDoc3.addParameter(\"refresh\", \"wait_for\");\n+        indexDoc3.setJsonEntity(\"{\\n\" +\n+            \"    \\\"hidden\\\" : \\\"should not be read\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc3));\n+\n+        SearchRequest searchRequest = new SearchRequest(\"fls\").source(new SearchSourceBuilder().docValueField(\"hidden_values_count\"));\n+        {\n+            SearchResponse searchResponse = adminHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n+            assertEquals(3, searchResponse.getHits().getTotalHits().value);\n+            for (SearchHit hit : searchResponse.getHits().getHits()) {\n+                assertEquals(1, hit.getFields().size());\n+                assertEquals(1, (int)hit.getFields().get(\"hidden_values_count\").getValue());\n+            }\n+        }\n+        {\n+            SearchResponse searchResponse = highLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n+            assertEquals(3, searchResponse.getHits().getTotalHits().value);\n+            for (SearchHit hit : searchResponse.getHits().getHits()) {\n+                assertEquals(0, (int)hit.getFields().get(\"hidden_values_count\").getValue());\n+            }\n+        }\n+    }\n+\n+    public void testFLSOnRuntimeField() throws IOException {\n+        Request createIndex = new Request(\"PUT\", \"/fls\");\n+        createIndex.setJsonEntity(\"{\\n\" +\n+            \"    \\\"mappings\\\" : {\\n\" +\n+            \"        \\\"properties\\\" : {\\n\" +\n+            \"            \\\"date\\\" : {\\\"type\\\" : \\\"keyword\\\"},\\n\" +\n+            \"            \\\"year\\\" : {\\n\" +\n+            \"              \\\"type\\\" : \\\"runtime_script\\\", \\n\" +\n+            \"              \\\"runtime_type\\\" : \\\"keyword\\\",\\n\" +\n+            \"              \\\"script\\\" : \\\"emitValue(doc[\\\\\\\"date\\\\\\\"].value.substring(0,4))\\\"\\n\" +\n+            \"            }\\n\" +\n+            \"        }\\n\" +\n+            \"    }\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(createIndex));\n+\n+        Request indexDoc1 = new Request(\"PUT\", \"/fls/_doc/1\");\n+        indexDoc1.setJsonEntity(\"{\\n\" +\n+            \"    \\\"date\\\" : \\\"2009-11-15T14:12:12\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc1));\n+\n+        Request indexDoc2 = new Request(\"PUT\", \"/fls/_doc/2\");\n+        indexDoc2.setJsonEntity(\"{\\n\" +\n+            \"    \\\"date\\\" : \\\"2016-11-15T14:12:12\\\"\\n\" +\n+            \"}\\n\");\n+        assertOK(adminClient().performRequest(indexDoc2));\n+\n+        Request indexDoc3 = new Request(\"PUT\", \"/fls/_doc/3\");\n+        indexDoc3.addParameter(\"refresh\", \"wait_for\");", "originalCommit": "728bda7edd092ceca12aa08c4cf0efaff2b3d375", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MDYyOA==", "url": "https://github.com/elastic/elasticsearch/pull/61820#discussion_r481440628", "bodyText": "both work I guess", "author": "javanna", "createdAt": "2020-09-01T21:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "1af5a32c8a74676378436edbeee495fc4d385da8", "chunk": "diff --git a/x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java b/x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java\nindex e418afc8745..fe6732519a7 100644\n--- a/x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java\n+++ b/x-pack/plugin/runtime-fields/qa/with-security/src/test/java/org/elasticsearch/xpack/security/PermissionsIT.java\n\n@@ -38,17 +38,13 @@ public class PermissionsIT extends ESRestTestCase {\n     @Override\n     protected Settings restClientSettings() {\n         String token = basicAuthHeaderValue(\"test\", new SecureString(\"x-pack-test-password\".toCharArray()));\n-        return Settings.builder()\n-            .put(ThreadContext.PREFIX + \".Authorization\", token)\n-            .build();\n+        return Settings.builder().put(ThreadContext.PREFIX + \".Authorization\", token).build();\n     }\n \n     @Override\n     protected Settings restAdminSettings() {\n         String token = basicAuthHeaderValue(\"test_admin\", new SecureString(\"x-pack-test-password\".toCharArray()));\n-        return Settings.builder()\n-            .put(ThreadContext.PREFIX + \".Authorization\", token)\n-            .build();\n+        return Settings.builder().put(ThreadContext.PREFIX + \".Authorization\", token).build();\n     }\n \n     @Before\n"}}, {"oid": "1af5a32c8a74676378436edbeee495fc4d385da8", "url": "https://github.com/elastic/elasticsearch/commit/1af5a32c8a74676378436edbeee495fc4d385da8", "message": "iter", "committedDate": "2020-09-01T21:31:09Z", "type": "commit"}, {"oid": "f2da46eb84bda9d5bc531d0d6b63f5b792e0670c", "url": "https://github.com/elastic/elasticsearch/commit/f2da46eb84bda9d5bc531d0d6b63f5b792e0670c", "message": "Merge branch 'feature/runtime_fields' into test/runtime_fields_with_security", "committedDate": "2020-09-02T06:51:42Z", "type": "commit"}]}