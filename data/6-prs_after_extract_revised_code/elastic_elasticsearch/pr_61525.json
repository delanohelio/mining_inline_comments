{"pr_number": 61525, "pr_title": "Migrate aliased indices to data stream", "pr_createdAt": "2020-08-25T13:26:29Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61525", "timeline": [{"oid": "1780b792424e80577a1bec72759f25b978a10051", "url": "https://github.com/elastic/elasticsearch/commit/1780b792424e80577a1bec72759f25b978a10051", "message": "migrate aliased indices to data stream", "committedDate": "2020-08-25T13:23:05Z", "type": "commit"}, {"oid": "36c4ace21b403e4ae95213661b9af4e0cd48493b", "url": "https://github.com/elastic/elasticsearch/commit/36c4ace21b403e4ae95213661b9af4e0cd48493b", "message": "update cluster state a single time for all backing indices", "committedDate": "2020-08-26T13:09:28Z", "type": "commit"}, {"oid": "d32b7990394bd7cd263f86e66ebd17cecd74a28c", "url": "https://github.com/elastic/elasticsearch/commit/d32b7990394bd7cd263f86e66ebd17cecd74a28c", "message": "Merge branch 'master' into 61046_migrate_to_data_stream", "committedDate": "2020-09-29T19:52:08Z", "type": "commit"}, {"oid": "3bfdfda46c468168fc7f2fd07450f1d940ed8852", "url": "https://github.com/elastic/elasticsearch/commit/3bfdfda46c468168fc7f2fd07450f1d940ed8852", "message": "add data stream timestamp field mapper", "committedDate": "2020-09-29T22:20:23Z", "type": "commit"}, {"oid": "24eaac9dbd40e7cb493485b3f308f19dd089c9cc", "url": "https://github.com/elastic/elasticsearch/commit/24eaac9dbd40e7cb493485b3f308f19dd089c9cc", "message": "prohibit migration of aliases without a write index", "committedDate": "2020-10-01T13:15:18Z", "type": "commit"}, {"oid": "8062020a8c41cd98ac0f5128eb5de14980b3a740", "url": "https://github.com/elastic/elasticsearch/commit/8062020a8c41cd98ac0f5128eb5de14980b3a740", "message": "Merge branch 'master' into 61046_migrate_to_data_stream", "committedDate": "2020-10-13T17:14:16Z", "type": "commit"}, {"oid": "d1d79ab5926ef0fbe8d7ab77020baed2941e3e65", "url": "https://github.com/elastic/elasticsearch/commit/d1d79ab5926ef0fbe8d7ab77020baed2941e3e65", "message": "fix compilation and test", "committedDate": "2020-10-13T17:45:12Z", "type": "commit"}, {"oid": "c1196d3cceee35cf97f120dd8906b4479492e220", "url": "https://github.com/elastic/elasticsearch/commit/c1196d3cceee35cf97f120dd8906b4479492e220", "message": "add transport actions", "committedDate": "2020-10-13T20:22:34Z", "type": "commit"}, {"oid": "d583acd0e5ed517ede3af66d5c1ca3cb76570b83", "url": "https://github.com/elastic/elasticsearch/commit/d583acd0e5ed517ede3af66d5c1ca3cb76570b83", "message": "minor fixes", "committedDate": "2020-10-13T21:34:41Z", "type": "commit"}, {"oid": "9fad1c395faaa4d4446a3429ed71285e37900ff0", "url": "https://github.com/elastic/elasticsearch/commit/9fad1c395faaa4d4446a3429ed71285e37900ff0", "message": "wip on IT", "committedDate": "2020-10-19T21:01:46Z", "type": "commit"}, {"oid": "ea390690d3a0c68d5c640485443b6b82309c66a3", "url": "https://github.com/elastic/elasticsearch/commit/ea390690d3a0c68d5c640485443b6b82309c66a3", "message": "basic IT", "committedDate": "2020-10-19T22:05:36Z", "type": "commit"}, {"oid": "b117559d761ff07cb97ba6858d9599ba772bb267", "url": "https://github.com/elastic/elasticsearch/commit/b117559d761ff07cb97ba6858d9599ba772bb267", "message": "Merge branch 'master' into 61046_migrate_to_data_stream", "committedDate": "2020-10-19T22:09:59Z", "type": "commit"}, {"oid": "9ad2cbf4d3f277d33ee4f7ca6be16193db97c9d5", "url": "https://github.com/elastic/elasticsearch/commit/9ad2cbf4d3f277d33ee4f7ca6be16193db97c9d5", "message": "spotless", "committedDate": "2020-10-19T22:18:35Z", "type": "commit"}, {"oid": "847ff2bc19de3e0e3cc6b91e65a97627cfa5bbb9", "url": "https://github.com/elastic/elasticsearch/commit/847ff2bc19de3e0e3cc6b91e65a97627cfa5bbb9", "message": "wip", "committedDate": "2020-10-20T15:32:11Z", "type": "commit"}, {"oid": "4d2149fe85b030e1e7381091a60d32552856fc67", "url": "https://github.com/elastic/elasticsearch/commit/4d2149fe85b030e1e7381091a60d32552856fc67", "message": "Merge branch 'master' into 61046_migrate_to_data_stream", "committedDate": "2020-10-21T15:24:11Z", "type": "commit"}, {"oid": "6017302aab2243c63aa6b11dad69c552aa6afdcb", "url": "https://github.com/elastic/elasticsearch/commit/6017302aab2243c63aa6b11dad69c552aa6afdcb", "message": "fix test", "committedDate": "2020-10-21T16:57:29Z", "type": "commit"}, {"oid": "89348ed35f9e52c398d473568925a3dfcae86627", "url": "https://github.com/elastic/elasticsearch/commit/89348ed35f9e52c398d473568925a3dfcae86627", "message": "Use MapperService to update the mapping.\n\nA side effect is moving logic that prepares indices to be backing indices to migrate service.\n\n* By using the mapper service directly in the migrate logic,\n  mapping validation error occur before updating the cluster state.\n  Whereas before the validation errors occurred when all mapper\n  services in other nodes where updated in the cluster,\n  which is too late, because the update already happened.\n* Updating the mapping using maps somehow changed the ordering, which caused assertions to trip.", "committedDate": "2020-10-22T09:37:47Z", "type": "commit"}, {"oid": "3550fad78ee165baef932105566b138533bd5458", "url": "https://github.com/elastic/elasticsearch/commit/3550fad78ee165baef932105566b138533bd5458", "message": "add min node version check, fix spotless", "committedDate": "2020-10-22T17:52:43Z", "type": "commit"}, {"oid": "4c806729b02d6d7e4cc4d7e6569084831fff3644", "url": "https://github.com/elastic/elasticsearch/commit/4c806729b02d6d7e4cc4d7e6569084831fff3644", "message": "add tests", "committedDate": "2020-10-22T18:46:59Z", "type": "commit"}, {"oid": "9cb64c85bc24185ba41db611d2322f32dcd203cf", "url": "https://github.com/elastic/elasticsearch/commit/9cb64c85bc24185ba41db611d2322f32dcd203cf", "message": "spotless", "committedDate": "2020-10-22T19:01:40Z", "type": "commit"}, {"oid": "35ea278a2c76cb9cc2b0f27c34896757cad1238a", "url": "https://github.com/elastic/elasticsearch/commit/35ea278a2c76cb9cc2b0f27c34896757cad1238a", "message": "Merge branch 'master' into 61046_migrate_to_data_stream", "committedDate": "2020-10-22T19:02:12Z", "type": "commit"}, {"oid": "0bda0b951c295ad4e5d35aca0fdd2b98619c9c4f", "url": "https://github.com/elastic/elasticsearch/commit/0bda0b951c295ad4e5d35aca0fdd2b98619c9c4f", "message": "Merge branch 'master' into 61046_migrate_to_data_stream", "committedDate": "2020-10-26T18:42:33Z", "type": "commit"}, {"oid": "9816cc384854054fea9f8fdaacb3ae151b2bea58", "url": "https://github.com/elastic/elasticsearch/commit/9816cc384854054fea9f8fdaacb3ae151b2bea58", "message": "fix merge error", "committedDate": "2020-10-26T18:49:06Z", "type": "commit"}, {"oid": "2d9ba916f9697b2442d699104ce52f8df84f296c", "url": "https://github.com/elastic/elasticsearch/commit/2d9ba916f9697b2442d699104ce52f8df84f296c", "message": "moar compile errors", "committedDate": "2020-10-26T19:11:44Z", "type": "commit"}, {"oid": "497f64b998bee8c671f17c7e1a399196301563cd", "url": "https://github.com/elastic/elasticsearch/commit/497f64b998bee8c671f17c7e1a399196301563cd", "message": "revise tests", "committedDate": "2020-10-27T16:09:52Z", "type": "commit"}, {"oid": "51528252b1d6cf7ec82945c11f38fdf6a1017235", "url": "https://github.com/elastic/elasticsearch/commit/51528252b1d6cf7ec82945c11f38fdf6a1017235", "message": "spotless", "committedDate": "2020-10-27T16:28:13Z", "type": "commit"}, {"oid": "264602bce786dc1702dc4cfd2e8f68c51bb54cf5", "url": "https://github.com/elastic/elasticsearch/commit/264602bce786dc1702dc4cfd2e8f68c51bb54cf5", "message": "Merge branch 'master' into 61046_migrate_to_data_stream", "committedDate": "2020-10-27T18:53:13Z", "type": "commit"}, {"oid": "768b163afa438ec8796fe7f3b8c5650f3f1db2a9", "url": "https://github.com/elastic/elasticsearch/commit/768b163afa438ec8796fe7f3b8c5650f3f1db2a9", "message": "remove test code", "committedDate": "2020-10-27T19:07:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwMjk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61525#discussion_r513302997", "bodyText": "maybe add what the write index is and backing indices (if any) to this log message?", "author": "martijnvg", "createdAt": "2020-10-28T09:41:04Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java", "diffHunk": "@@ -120,49 +123,75 @@ public CreateDataStreamClusterStateUpdateRequest(String name,\n \n     static ClusterState createDataStream(MetadataCreateIndexService metadataCreateIndexService,\n                                          ClusterState currentState,\n-                                         CreateDataStreamClusterStateUpdateRequest request)\n-        throws Exception {\n-        if (currentState.metadata().dataStreams().containsKey(request.name)) {\n-            throw new ResourceAlreadyExistsException(\"data_stream [\" + request.name + \"] already exists\");\n+                                         CreateDataStreamClusterStateUpdateRequest request) throws Exception {\n+        return createDataStream(metadataCreateIndexService, currentState, request.name, List.of(), null);\n+    }\n+\n+    /**\n+     * Creates a data stream with the specified properties.\n+     *\n+     * @param metadataCreateIndexService Used if a new write index must be created\n+     * @param currentState               Cluster state\n+     * @param dataStreamName             Name of the data stream\n+     * @param backingIndices             List of backing indices. May be empty\n+     * @param writeIndex                 Write index for the data stream. If null, a new write index will be created.\n+     * @return                           Cluster state containing the new data stream\n+     */\n+    static ClusterState createDataStream(MetadataCreateIndexService metadataCreateIndexService,\n+                                         ClusterState currentState,\n+                                         String dataStreamName,\n+                                         List<IndexMetadata> backingIndices,\n+                                         IndexMetadata writeIndex) throws Exception\n+    {\n+        if (writeIndex == null) {\n+            Objects.requireNonNull(metadataCreateIndexService);\n+        }\n+        Objects.requireNonNull(currentState);\n+        Objects.requireNonNull(backingIndices);\n+        if (currentState.metadata().dataStreams().containsKey(dataStreamName)) {\n+            throw new ResourceAlreadyExistsException(\"data_stream [\" + dataStreamName + \"] already exists\");\n         }\n \n-        MetadataCreateIndexService.validateIndexOrAliasName(request.name,\n+        MetadataCreateIndexService.validateIndexOrAliasName(dataStreamName,\n             (s1, s2) -> new IllegalArgumentException(\"data_stream [\" + s1 + \"] \" + s2));\n \n-        if (request.name.toLowerCase(Locale.ROOT).equals(request.name) == false) {\n-            throw new IllegalArgumentException(\"data_stream [\" + request.name + \"] must be lowercase\");\n+        if (dataStreamName.toLowerCase(Locale.ROOT).equals(dataStreamName) == false) {\n+            throw new IllegalArgumentException(\"data_stream [\" + dataStreamName + \"] must be lowercase\");\n         }\n-        if (request.name.startsWith(\".\")) {\n-            throw new IllegalArgumentException(\"data_stream [\" + request.name + \"] must not start with '.'\");\n+        if (dataStreamName.startsWith(\".\")) {\n+            throw new IllegalArgumentException(\"data_stream [\" + dataStreamName + \"] must not start with '.'\");\n         }\n \n-        ComposableIndexTemplate template = lookupTemplateForDataStream(request.name, currentState.metadata());\n-\n-        String firstBackingIndexName = DataStream.getDefaultBackingIndexName(request.name, 1);\n-        CreateIndexClusterStateUpdateRequest createIndexRequest =\n-            new CreateIndexClusterStateUpdateRequest(\"initialize_data_stream\", firstBackingIndexName, firstBackingIndexName)\n-                .dataStreamName(request.name)\n-                .settings(Settings.builder().put(\"index.hidden\", true).build());\n-        try {\n-            currentState = metadataCreateIndexService.applyCreateIndexRequest(currentState, createIndexRequest, false);\n-        } catch (ResourceAlreadyExistsException e) {\n-            // Rethrow as ElasticsearchStatusException, so that bulk transport action doesn't ignore it during\n-            // auto index/data stream creation.\n-            // (otherwise bulk execution fails later, because data stream will also not have been created)\n-            throw new ElasticsearchStatusException(\"data stream could not be created because backing index [{}] already exists\",\n-                RestStatus.BAD_REQUEST, e, firstBackingIndexName);\n+        ComposableIndexTemplate template = lookupTemplateForDataStream(dataStreamName, currentState.metadata());\n+\n+        if (writeIndex == null) {\n+            String firstBackingIndexName = DataStream.getDefaultBackingIndexName(dataStreamName, 1);\n+            CreateIndexClusterStateUpdateRequest createIndexRequest =\n+                new CreateIndexClusterStateUpdateRequest(\"initialize_data_stream\", firstBackingIndexName, firstBackingIndexName)\n+                    .dataStreamName(dataStreamName)\n+                    .settings(Settings.builder().put(\"index.hidden\", true).build());\n+            try {\n+                currentState = metadataCreateIndexService.applyCreateIndexRequest(currentState, createIndexRequest, false);\n+            } catch (ResourceAlreadyExistsException e) {\n+                // Rethrow as ElasticsearchStatusException, so that bulk transport action doesn't ignore it during\n+                // auto index/data stream creation.\n+                // (otherwise bulk execution fails later, because data stream will also not have been created)\n+                throw new ElasticsearchStatusException(\"data stream could not be created because backing index [{}] already exists\",\n+                    RestStatus.BAD_REQUEST, e, firstBackingIndexName);\n+            }\n+            writeIndex = currentState.metadata().index(firstBackingIndexName);\n         }\n-        IndexMetadata firstBackingIndex = currentState.metadata().index(firstBackingIndexName);\n-        assert firstBackingIndex != null;\n-        assert firstBackingIndex.mapping() != null : \"no mapping found for backing index [\" + firstBackingIndexName + \"]\";\n+        assert writeIndex != null;\n+        assert writeIndex.mapping() != null : \"no mapping found for backing index [\" + writeIndex.getIndex().getName() + \"]\";\n \n         String fieldName = template.getDataStreamTemplate().getTimestampField();\n         DataStream.TimestampField timestampField = new DataStream.TimestampField(fieldName);\n-        DataStream newDataStream =\n-            new DataStream(request.name, timestampField, List.of(firstBackingIndex.getIndex()), 1L,\n-                template.metadata() != null ? Map.copyOf(template.metadata()) : null);\n+        List<Index> dsBackingIndices = backingIndices.stream().map(IndexMetadata::getIndex).collect(Collectors.toList());\n+        dsBackingIndices.add(writeIndex.getIndex());\n+        DataStream newDataStream = new DataStream(dataStreamName, timestampField, dsBackingIndices, 1L,\n+                                                  template.metadata() != null ? Map.copyOf(template.metadata()) : null);\n         Metadata.Builder builder = Metadata.builder(currentState.metadata()).put(newDataStream);\n-        logger.info(\"adding data stream [{}]\", request.name);\n+        logger.info(\"adding data stream [{}]\", dataStreamName);", "originalCommit": "768b163afa438ec8796fe7f3b8c5650f3f1db2a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbcec4f9f9965c59498e0ed74d833aa7f250bc2c", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java b/server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java\nindex 9a2d0cd9e83..41e1192d788 100644\n--- a/server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java\n+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java\n\n@@ -191,7 +192,9 @@ public class MetadataCreateDataStreamService {\n         DataStream newDataStream = new DataStream(dataStreamName, timestampField, dsBackingIndices, 1L,\n                                                   template.metadata() != null ? Map.copyOf(template.metadata()) : null);\n         Metadata.Builder builder = Metadata.builder(currentState.metadata()).put(newDataStream);\n-        logger.info(\"adding data stream [{}]\", dataStreamName);\n+        logger.info(\"adding data stream [{}] with write index [{}] and backing indices [{}]\", dataStreamName,\n+            writeIndex.getIndex().getName(),\n+            Strings.arrayToCommaDelimitedString(backingIndices.stream().map(i -> i.getIndex().getName()).toArray()));\n         return ClusterState.builder(currentState).metadata(builder).build();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzMzk3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61525#discussion_r513333975", "bodyText": "I think we need to adjust test and the data stream timestamp field mapper.\nUpdating from false to true is allowed, but updating from true to false is disallowed.\n`", "author": "martijnvg", "createdAt": "2020-10-28T10:27:52Z", "path": "x-pack/plugin/data-streams/src/test/java/org/elasticsearch/xpack/datastreams/mapper/DataStreamTimestampFieldMapperTests.java", "diffHunk": "@@ -277,17 +277,17 @@ public void testValidateNotDisallowedAttribute() throws IOException {\n         assertThat(e.getMessage(), equalTo(\"data stream timestamp field [@timestamp] has disallowed attributes: [store]\"));\n     }\n \n-    public void testCannotUpdateTimestampField() throws IOException {\n+    public void testCanUpdateTimestampField() throws IOException {", "originalCommit": "768b163afa438ec8796fe7f3b8c5650f3f1db2a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NDk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61525#discussion_r513344997", "bodyText": "This validation can be added by invoking setMergeValidator(...)method when building enabled parameter in DataStreamTimestampFieldMapper line 78.", "author": "martijnvg", "createdAt": "2020-10-28T10:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzMzk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "af7d4b489a44611b9577b7678d55eefd98fbe0aa", "chunk": "diff --git a/x-pack/plugin/data-streams/src/test/java/org/elasticsearch/xpack/datastreams/mapper/DataStreamTimestampFieldMapperTests.java b/x-pack/plugin/data-streams/src/test/java/org/elasticsearch/xpack/datastreams/mapper/DataStreamTimestampFieldMapperTests.java\nindex 90185ce3813..6e0d567f14b 100644\n--- a/x-pack/plugin/data-streams/src/test/java/org/elasticsearch/xpack/datastreams/mapper/DataStreamTimestampFieldMapperTests.java\n+++ b/x-pack/plugin/data-streams/src/test/java/org/elasticsearch/xpack/datastreams/mapper/DataStreamTimestampFieldMapperTests.java\n\n@@ -277,7 +277,7 @@ public class DataStreamTimestampFieldMapperTests extends ESSingleNodeTestCase {\n         assertThat(e.getMessage(), equalTo(\"data stream timestamp field [@timestamp] has disallowed attributes: [store]\"));\n     }\n \n-    public void testCanUpdateTimestampField() throws IOException {\n+    public void testCanUpdateTimestampFieldMapperFromDisabledToEnabled() throws IOException {\n         MapperService mapperService = createIndex(\"test\").mapperService();\n         String mapping1 =\n             \"{\\\"type\\\":{\\\"_data_stream_timestamp\\\":{\\\"enabled\\\":false}, \\\"properties\\\": {\\\"@timestamp\\\": {\\\"type\\\": \\\"date\\\"}}}}}\";\n"}}, {"oid": "bbcec4f9f9965c59498e0ed74d833aa7f250bc2c", "url": "https://github.com/elastic/elasticsearch/commit/bbcec4f9f9965c59498e0ed74d833aa7f250bc2c", "message": "revise log message", "committedDate": "2020-10-28T12:27:48Z", "type": "commit"}, {"oid": "af7d4b489a44611b9577b7678d55eefd98fbe0aa", "url": "https://github.com/elastic/elasticsearch/commit/af7d4b489a44611b9577b7678d55eefd98fbe0aa", "message": "validate that TSFM can be enabled but not disabled", "committedDate": "2020-10-28T12:38:46Z", "type": "commit"}, {"oid": "b0c73d43c15d11733464abaf1b702c42f1355da4", "url": "https://github.com/elastic/elasticsearch/commit/b0c73d43c15d11733464abaf1b702c42f1355da4", "message": "checkstyle", "committedDate": "2020-10-28T12:45:10Z", "type": "commit"}, {"oid": "4edaf1d73dffda4da4f116919762b2e8575997b5", "url": "https://github.com/elastic/elasticsearch/commit/4edaf1d73dffda4da4f116919762b2e8575997b5", "message": "fix wording", "committedDate": "2020-10-28T12:46:16Z", "type": "commit"}]}