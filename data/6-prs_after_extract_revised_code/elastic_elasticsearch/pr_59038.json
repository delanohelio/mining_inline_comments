{"pr_number": 59038, "pr_title": "Add the possibility to inject a custom RecoveryState factory to IndexStorePlugin implementations", "pr_createdAt": "2020-07-05T10:54:08Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59038", "timeline": [{"oid": "90f85da10690df56c3b514d921f9cc6721859c26", "url": "https://github.com/elastic/elasticsearch/commit/90f85da10690df56c3b514d921f9cc6721859c26", "message": "Add the possibility to inject a custom RecoveryState factory.\n\nAdd a custom factory for recovery state into IndexStorePlugin that\nallows different implementors to provide its own RecoveryState\nimplementation.", "committedDate": "2020-07-05T10:51:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1NTAyNw==", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450055027", "bodyText": "Can we lose this override? It looks only to be used in one test that could use the default recovery state factory anyway.", "author": "DaveCTurner", "createdAt": "2020-07-06T08:12:42Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -742,6 +745,30 @@ public synchronized void verifyIndexMetadata(IndexMetadata metadata, IndexMetada\n         }\n     }\n \n+    @Override\n+    public IndexShard createShard(\n+            final ShardRouting shardRouting,\n+            final PeerRecoveryTargetService recoveryTargetService,\n+            final PeerRecoveryTargetService.RecoveryListener recoveryListener,\n+            final RepositoriesService repositoriesService,\n+            final Consumer<IndexShard.ShardFailure> onShardFailure,\n+            final Consumer<ShardId> globalCheckpointSyncer,\n+            final RetentionLeaseSyncer retentionLeaseSyncer,\n+            final DiscoveryNode targetNode,\n+            final DiscoveryNode sourceNode) throws IOException {\n+        IndexService indexService = indexService(shardRouting.index());\n+        RecoveryState recoveryState = indexService.createRecoveryState(shardRouting, targetNode, sourceNode);\n+\n+        return createShard(shardRouting,\n+            recoveryState,\n+            recoveryTargetService,\n+            recoveryListener,\n+            repositoriesService,\n+            onShardFailure,\n+            globalCheckpointSyncer,\n+            retentionLeaseSyncer);\n+    }\n+\n     @Override\n     public IndexShard createShard(", "originalCommit": "90f85da10690df56c3b514d921f9cc6721859c26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyMDI4OA==", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450120288", "bodyText": "Do you mean removing this method from AllocatedIndices interface?", "author": "fcofdez", "createdAt": "2020-07-06T10:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1NTAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzNDc4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450134786", "bodyText": "Yes", "author": "DaveCTurner", "createdAt": "2020-07-06T10:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1NTAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "81c33e7d27253bb88c22f6c37c11ed929b1567d7", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/IndicesService.java b/server/src/main/java/org/elasticsearch/indices/IndicesService.java\nindex f80c38fe71d..375c3e6f1da 100644\n--- a/server/src/main/java/org/elasticsearch/indices/IndicesService.java\n+++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java\n\n@@ -756,32 +756,11 @@ public class IndicesService extends AbstractLifecycleComponent\n             final RetentionLeaseSyncer retentionLeaseSyncer,\n             final DiscoveryNode targetNode,\n             final DiscoveryNode sourceNode) throws IOException {\n-        IndexService indexService = indexService(shardRouting.index());\n-        RecoveryState recoveryState = indexService.createRecoveryState(shardRouting, targetNode, sourceNode);\n-\n-        return createShard(shardRouting,\n-            recoveryState,\n-            recoveryTargetService,\n-            recoveryListener,\n-            repositoriesService,\n-            onShardFailure,\n-            globalCheckpointSyncer,\n-            retentionLeaseSyncer);\n-    }\n-\n-    @Override\n-    public IndexShard createShard(\n-            final ShardRouting shardRouting,\n-            final RecoveryState recoveryState,\n-            final PeerRecoveryTargetService recoveryTargetService,\n-            final PeerRecoveryTargetService.RecoveryListener recoveryListener,\n-            final RepositoriesService repositoriesService,\n-            final Consumer<IndexShard.ShardFailure> onShardFailure,\n-            final Consumer<ShardId> globalCheckpointSyncer,\n-            final RetentionLeaseSyncer retentionLeaseSyncer) throws IOException {\n         Objects.requireNonNull(retentionLeaseSyncer);\n         ensureChangesAllowed();\n         IndexService indexService = indexService(shardRouting.index());\n+        assert indexService != null;\n+        RecoveryState recoveryState = indexService.createRecoveryState(shardRouting, targetNode, sourceNode);\n         IndexShard indexShard = indexService.createShard(shardRouting, globalCheckpointSyncer, retentionLeaseSyncer);\n         indexShard.addShardFailureCallback(onShardFailure);\n         indexShard.startRecovery(recoveryState, recoveryTargetService, recoveryListener, repositoriesService,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2MzQwMg==", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450063402", "bodyText": "Can we assert that indexService exists?", "author": "tlrx", "createdAt": "2020-07-06T08:27:36Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -742,6 +745,30 @@ public synchronized void verifyIndexMetadata(IndexMetadata metadata, IndexMetada\n         }\n     }\n \n+    @Override\n+    public IndexShard createShard(\n+            final ShardRouting shardRouting,\n+            final PeerRecoveryTargetService recoveryTargetService,\n+            final PeerRecoveryTargetService.RecoveryListener recoveryListener,\n+            final RepositoriesService repositoriesService,\n+            final Consumer<IndexShard.ShardFailure> onShardFailure,\n+            final Consumer<ShardId> globalCheckpointSyncer,\n+            final RetentionLeaseSyncer retentionLeaseSyncer,\n+            final DiscoveryNode targetNode,\n+            final DiscoveryNode sourceNode) throws IOException {\n+        IndexService indexService = indexService(shardRouting.index());", "originalCommit": "90f85da10690df56c3b514d921f9cc6721859c26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81c33e7d27253bb88c22f6c37c11ed929b1567d7", "chunk": "diff --git a/server/src/main/java/org/elasticsearch/indices/IndicesService.java b/server/src/main/java/org/elasticsearch/indices/IndicesService.java\nindex f80c38fe71d..375c3e6f1da 100644\n--- a/server/src/main/java/org/elasticsearch/indices/IndicesService.java\n+++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java\n\n@@ -756,32 +756,11 @@ public class IndicesService extends AbstractLifecycleComponent\n             final RetentionLeaseSyncer retentionLeaseSyncer,\n             final DiscoveryNode targetNode,\n             final DiscoveryNode sourceNode) throws IOException {\n-        IndexService indexService = indexService(shardRouting.index());\n-        RecoveryState recoveryState = indexService.createRecoveryState(shardRouting, targetNode, sourceNode);\n-\n-        return createShard(shardRouting,\n-            recoveryState,\n-            recoveryTargetService,\n-            recoveryListener,\n-            repositoriesService,\n-            onShardFailure,\n-            globalCheckpointSyncer,\n-            retentionLeaseSyncer);\n-    }\n-\n-    @Override\n-    public IndexShard createShard(\n-            final ShardRouting shardRouting,\n-            final RecoveryState recoveryState,\n-            final PeerRecoveryTargetService recoveryTargetService,\n-            final PeerRecoveryTargetService.RecoveryListener recoveryListener,\n-            final RepositoriesService repositoriesService,\n-            final Consumer<IndexShard.ShardFailure> onShardFailure,\n-            final Consumer<ShardId> globalCheckpointSyncer,\n-            final RetentionLeaseSyncer retentionLeaseSyncer) throws IOException {\n         Objects.requireNonNull(retentionLeaseSyncer);\n         ensureChangesAllowed();\n         IndexService indexService = indexService(shardRouting.index());\n+        assert indexService != null;\n+        RecoveryState recoveryState = indexService.createRecoveryState(shardRouting, targetNode, sourceNode);\n         IndexShard indexShard = indexService.createShard(shardRouting, globalCheckpointSyncer, retentionLeaseSyncer);\n         indexShard.addShardFailureCallback(onShardFailure);\n         indexShard.startRecovery(recoveryState, recoveryTargetService, recoveryListener, repositoriesService,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2Nzk3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450067973", "bodyText": "Can we add a test to ensure that a plugin cannot override the default recovery state factory? And that duplicates are not allowed too?", "author": "tlrx", "createdAt": "2020-07-06T08:35:46Z", "path": "server/src/main/java/org/elasticsearch/plugins/IndexStorePlugin.java", "diffHunk": "@@ -55,4 +60,26 @@\n      */\n     Map<String, DirectoryFactory> getDirectoryFactories();\n \n+    /**\n+     * An interface that allows to create a new {@link RecoveryState} per shard.\n+     */\n+    @FunctionalInterface\n+    interface RecoveryStateFactory {\n+        /**\n+         * Creates a new {@link RecoveryState} per shard. This method is called once per shard on shard creation.\n+         * @return a new RecoveryState instance\n+         */\n+        RecoveryState newRecoveryState(ShardRouting shardRouting, DiscoveryNode targetNode, @Nullable DiscoveryNode sourceNode);\n+    }\n+\n+    /**\n+     * The {@link RecoveryStateFactory} mappings for this plugin. When an index is created the recovery type setting\n+     * {@link org.elasticsearch.index.IndexModule#INDEX_RECOVERY_TYPE_SETTING} on the index will be examined and either use the default\n+     * or looked up among all the recovery state factories from {@link IndexStorePlugin} plugins.\n+     *\n+     * @return a map from recovery type to an recovery state factory\n+     */\n+    default Map<String, RecoveryStateFactory> getRecoveryStateFactories() {\n+        return Collections.emptyMap();", "originalCommit": "90f85da10690df56c3b514d921f9cc6721859c26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "81c33e7d27253bb88c22f6c37c11ed929b1567d7", "url": "https://github.com/elastic/elasticsearch/commit/81c33e7d27253bb88c22f6c37c11ed929b1567d7", "message": "Address review comments.", "committedDate": "2020-07-06T10:56:02Z", "type": "commit"}, {"oid": "0aad47b516086140229ed4d1dc1e51e4db1e5558", "url": "https://github.com/elastic/elasticsearch/commit/0aad47b516086140229ed4d1dc1e51e4db1e5558", "message": "Merge branch 'master' into add-recovery-state-factory-to-index-store-plugin", "committedDate": "2020-07-06T17:00:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MjQxNg==", "url": "https://github.com/elastic/elasticsearch/pull/59038#discussion_r450652416", "bodyText": "I think we shouldn't be asserting that our recovery factories have a toString() that returns org.elasticsearch.plugins.IndexStorePluginTests$RecoveryFactory@[\\\\w\\\\d]+: the fact that the message contains the duplicated key (and the string Duplicate key) should be enough IMO.\nBit of a pain the message doesn't contain the key in Java 8 but such is life.", "author": "DaveCTurner", "createdAt": "2020-07-07T07:05:38Z", "path": "server/src/test/java/org/elasticsearch/plugins/IndexStorePluginTests.java", "diffHunk": "@@ -92,4 +127,20 @@ public void testDuplicateIndexStoreFactories() {\n         }\n     }\n \n+    public void testDuplicateIndexStoreRecoveryStateFactories() {\n+        final Settings settings = Settings.builder().put(\"path.home\", createTempDir()).build();\n+        final IllegalStateException e = expectThrows(\n+            IllegalStateException.class, () -> new MockNode(settings, Arrays.asList(FooCustomRecoveryStore.class,\n+                                                                                    BarCustomRecoveryStore.class)));\n+        if (JavaVersion.current().compareTo(JavaVersion.parse(\"9\")) >= 0) {\n+            assertThat(e, hasToString(matches(\n+                \"java.lang.IllegalStateException: Duplicate key recovery-type \\\\(attempted merging values \" +\n+                    \"org.elasticsearch.plugins.IndexStorePluginTests\\\\$RecoveryFactory@[\\\\w\\\\d]+ \" +\n+                    \"and org.elasticsearch.plugins.IndexStorePluginTests\\\\$RecoveryFactory@[\\\\w\\\\d]+\\\\)\")));\n+        } else {\n+            assertThat(e, hasToString(matches(\n+                \"java.lang.IllegalStateException: Duplicate key \" +\n+                    \"org.elasticsearch.plugins.IndexStorePluginTests$RecoveryFactory@[\\\\w\\\\d]+\")));", "originalCommit": "0aad47b516086140229ed4d1dc1e51e4db1e5558", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2387417a7c35698e0613f4aa6b909fc9a350cc0b", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/plugins/IndexStorePluginTests.java b/server/src/test/java/org/elasticsearch/plugins/IndexStorePluginTests.java\nindex fbb3d84769f..3c9eecb188a 100644\n--- a/server/src/test/java/org/elasticsearch/plugins/IndexStorePluginTests.java\n+++ b/server/src/test/java/org/elasticsearch/plugins/IndexStorePluginTests.java\n\n@@ -133,10 +133,7 @@ public class IndexStorePluginTests extends ESTestCase {\n             IllegalStateException.class, () -> new MockNode(settings, Arrays.asList(FooCustomRecoveryStore.class,\n                                                                                     BarCustomRecoveryStore.class)));\n         if (JavaVersion.current().compareTo(JavaVersion.parse(\"9\")) >= 0) {\n-            assertThat(e, hasToString(matches(\n-                \"java.lang.IllegalStateException: Duplicate key recovery-type \\\\(attempted merging values \" +\n-                    \"org.elasticsearch.plugins.IndexStorePluginTests\\\\$RecoveryFactory@[\\\\w\\\\d]+ \" +\n-                    \"and org.elasticsearch.plugins.IndexStorePluginTests\\\\$RecoveryFactory@[\\\\w\\\\d]+\\\\)\")));\n+            assertThat(e.getMessage(), containsString(\"Duplicate key recovery-type\"));\n         } else {\n             assertThat(e, hasToString(matches(\n                 \"java.lang.IllegalStateException: Duplicate key \" +\n"}}, {"oid": "2387417a7c35698e0613f4aa6b909fc9a350cc0b", "url": "https://github.com/elastic/elasticsearch/commit/2387417a7c35698e0613f4aa6b909fc9a350cc0b", "message": "Addres reveiw comment", "committedDate": "2020-07-07T08:23:15Z", "type": "commit"}]}