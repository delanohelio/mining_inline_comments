{"pr_number": 55826, "pr_title": "Modified searchAndReduce() to return empty agg when no docs exist ", "pr_createdAt": "2020-04-27T20:29:15Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55826", "timeline": [{"oid": "66c96a61ae7756ffbb9ef392f3fd5cff56e9ae70", "url": "https://github.com/elastic/elasticsearch/commit/66c96a61ae7756ffbb9ef392f3fd5cff56e9ae70", "message": "Fix searchAndReduce() returning null for no docs\n\nIf no documents exist searchAndReduce() will\nreturn an empty aggregation result", "committedDate": "2020-04-27T20:24:37Z", "type": "commit"}, {"oid": "edc51da20d0c10c83b97c2e301e9aa0859293427", "url": "https://github.com/elastic/elasticsearch/commit/edc51da20d0c10c83b97c2e301e9aa0859293427", "message": "Cleaned up testCase() methods in agg tests", "committedDate": "2020-04-27T20:25:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyODUwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416128509", "bodyText": "This should do all the work for returning an empty aggregation. I am not 100% sure pre-pos-Collection is needed. Feedback is very welcome.", "author": "csoulios", "createdAt": "2020-04-27T20:33:15Z", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -499,7 +499,9 @@ protected ScriptService getMockScriptService() {\n             InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer);\n         }\n         if (aggs.isEmpty()) {\n-            return null;\n+            root.preCollection();", "originalCommit": "edc51da20d0c10c83b97c2e301e9aa0859293427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MDUzOA==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416150538", "bodyText": "What about just calling aggregator.buildEmptyAggregation? I think this one shouldn't need the pre and post stuff. Probably.", "author": "nik9000", "createdAt": "2020-04-27T21:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyODUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3NTY5MA==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416675690", "bodyText": "aggregator.buildEmptyAggregation() seems to be working fine. thanks!", "author": "csoulios", "createdAt": "2020-04-28T14:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyODUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "23917bdb52f8ad140a79b1501652d17ba389c9ed", "chunk": "diff --git a/test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java b/test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java\nindex df02ca7800e..12500d20786 100644\n--- a/test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java\n+++ b/test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java\n\n@@ -499,9 +499,7 @@ public abstract class AggregatorTestCase extends ESTestCase {\n             InternalAggregationTestCase.assertMultiBucketConsumer(agg, shardBucketConsumer);\n         }\n         if (aggs.isEmpty()) {\n-            root.preCollection();\n-            root.postCollection();\n-            return (A) root.buildAggregation(0L);\n+            return (A) root.buildEmptyAggregation();\n         } else {\n             if (randomBoolean() && aggs.size() > 1) {\n                 // sometimes do an incremental reduce\n"}}, {"oid": "98f1996eeb8e4baf8c5091f8991273b91e573fa6", "url": "https://github.com/elastic/elasticsearch/commit/98f1996eeb8e4baf8c5091f8991273b91e573fa6", "message": "Merge branch 'master' into agg-test-case-nodocs", "committedDate": "2020-04-27T20:58:15Z", "type": "commit"}, {"oid": "5b94c16bacb719f60ba9141d101f1ecd0a547708", "url": "https://github.com/elastic/elasticsearch/commit/5b94c16bacb719f60ba9141d101f1ecd0a547708", "message": "Fixed tests in analytics plugin", "committedDate": "2020-04-27T21:05:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzE0NA==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416147144", "bodyText": "Extra newline?", "author": "nik9000", "createdAt": "2020-04-27T21:03:46Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorTests.java", "diffHunk": "@@ -155,18 +155,18 @@ public void testMatchAllDocs() throws IOException {\n     public void testNoDocsDeprecatedInterval() throws IOException {\n         Query query = new MatchNoDocsQuery();\n         List<String> dates = Collections.emptyList();\n-        Consumer<DateHistogramAggregationBuilder> aggregation = agg ->\n-                agg.dateHistogramInterval(DateHistogramInterval.YEAR).field(DATE_FIELD);\n-\n-        testSearchCase(query, dates, aggregation,\n-                histogram -> {\n-                    assertEquals(0, histogram.getBuckets().size());\n-                    assertFalse(AggregationInspectionHelper.hasValue(histogram));\n-                }, false\n-        );\n-        testSearchAndReduceCase(query, dates, aggregation,\n-                histogram -> assertNull(histogram), false\n-        );\n+        Consumer<DateHistogramAggregationBuilder>\n+            aggregation =", "originalCommit": "edc51da20d0c10c83b97c2e301e9aa0859293427", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23917bdb52f8ad140a79b1501652d17ba389c9ed", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorTests.java\nindex a9d3555237e..7443a823c0f 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramAggregatorTests.java\n\n@@ -155,8 +155,7 @@ public class DateHistogramAggregatorTests extends AggregatorTestCase {\n     public void testNoDocsDeprecatedInterval() throws IOException {\n         Query query = new MatchNoDocsQuery();\n         List<String> dates = Collections.emptyList();\n-        Consumer<DateHistogramAggregationBuilder>\n-            aggregation =\n+        Consumer<DateHistogramAggregationBuilder> aggregation =\n             agg -> agg.dateHistogramInterval(DateHistogramInterval.YEAR).field(DATE_FIELD);\n \n         testSearchCase(query, dates, aggregation, histogram -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzgzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416147835", "bodyText": "Do we need the < bits?", "author": "nik9000", "createdAt": "2020-04-27T21:04:58Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java", "diffHunk": "@@ -228,31 +228,31 @@ public void testSummationAccuracy() throws IOException {\n \n     public void testUnmappedField() throws IOException {\n         AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"_name\").field(\"number\");\n-        testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {\n+        this.<AvgAggregationBuilder, InternalAvg>testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {", "originalCommit": "edc51da20d0c10c83b97c2e301e9aa0859293427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MzI4OA==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416153288", "bodyText": "The < bits are ugly but required, otherwise compile fails. Hence I suggested this:\n#55826 (comment)", "author": "csoulios", "createdAt": "2020-04-27T21:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0OTUzMA==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416649530", "bodyText": "I see what is up. I wonder if it'd be cleaner to return V instead of take a Consumer<V>. You'd get the implicit cast from assigning it to the result type you wanted. I wonder if that could save us a little ceremony?", "author": "nik9000", "createdAt": "2020-04-28T14:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwMzM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416703383", "bodyText": "For every agg test I have created a local private method named testAggregation(). This method converts generic arguments to specific arguments and calls AggregateTestCase.testCase(). I think this is a lot cleaner and simpler.\nPlease check commit 23917bd and let me know what you think.", "author": "csoulios", "createdAt": "2020-04-28T15:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "23917bdb52f8ad140a79b1501652d17ba389c9ed", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java\nindex 35360dbb318..7a69afd8a29 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java\n\n@@ -228,7 +228,7 @@ public class AvgAggregatorTests extends AggregatorTestCase {\n \n     public void testUnmappedField() throws IOException {\n         AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"_name\").field(\"number\");\n-        this.<AvgAggregationBuilder, InternalAvg>testCase(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {\n+        testAggregation(aggregationBuilder, new DocValuesFieldExistsQuery(\"number\"), iw -> {\n             iw.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n         }, avg -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0OTMxNA==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416149314", "bodyText": "Maybe rename these so they don't \"hide\" the superclass method and require the casts?", "author": "nik9000", "createdAt": "2020-04-27T21:07:14Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java", "diffHunk": "@@ -181,25 +177,9 @@ private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOExceptio\n         testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n     }\n \n-    private void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,\n+    protected void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,", "originalCommit": "edc51da20d0c10c83b97c2e301e9aa0859293427", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23917bdb52f8ad140a79b1501652d17ba389c9ed", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java\nindex df0322b9134..f8d30275419 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java\n\n@@ -130,56 +132,56 @@ public class CardinalityAggregatorTests extends AggregatorTestCase {\n         CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"name\")\n             .field(\"number\").missing(\"\ud83c\udf4c\ud83c\udf4c\ud83c\udf4c\");\n \n-        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n+        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 7)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 8)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 9)));\n         }, card -> {\n             assertEquals(1, card.getValue(), 0);\n             assertTrue(AggregationInspectionHelper.hasValue(card));\n-        }, (MappedFieldType) null);\n+        }, null);\n     }\n \n     public void testUnmappedMissingNumber() throws IOException {\n         CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"name\")\n             .field(\"number\").missing(1234);\n \n-        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n+        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 7)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 8)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 9)));\n         }, card -> {\n             assertEquals(1, card.getValue(), 0);\n             assertTrue(AggregationInspectionHelper.hasValue(card));\n-        }, (MappedFieldType) null);\n+        }, null);\n     }\n \n     public void testUnmappedMissingGeoPoint() throws IOException {\n         CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"name\")\n             .field(\"number\").missing(new GeoPoint(42.39561, -71.13051));\n \n-        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n+        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 7)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 8)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 9)));\n         }, card -> {\n             assertEquals(1, card.getValue(), 0);\n             assertTrue(AggregationInspectionHelper.hasValue(card));\n-        }, (MappedFieldType) null);\n+        }, null);\n     }\n \n-    private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n+    private void testAggregation(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                           Consumer<InternalCardinality> verify) throws IOException {\n         MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n             NumberFieldMapper.NumberType.LONG);\n         fieldType.setName(\"number\");\n         final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\").field(\"number\");\n-        testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n+        testAggregation(aggregationBuilder, query, buildIndex, verify, fieldType);\n     }\n \n-    protected void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,\n-                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalCardinality> verify,\n-                          MappedFieldType fieldType) throws IOException {\n-        super.testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n+    private void testAggregation(AggregationBuilder aggregationBuilder, Query query,\n+        CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalCardinality> verify,\n+        MappedFieldType fieldType) throws IOException {\n+        testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MTMzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/55826#discussion_r416151331", "bodyText": "Creating a method with specific (and not generic) arguments is a shortcut that saves us from writing\n   this.<CardinalityAggregationBuilder, InternalCardinality>testCase(.....)\n\nat every test case. This method simply passes the arguments to the generic AggregatorTestCase.testCase() method. I don't have a strong opinion about which option is best and I am happy go with any of the two methods.", "author": "csoulios", "createdAt": "2020-04-27T21:10:48Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java", "diffHunk": "@@ -181,25 +177,9 @@ private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOExceptio\n         testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n     }\n \n-    private void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,\n+    protected void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,\n                           CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalCardinality> verify,\n                           MappedFieldType fieldType) throws IOException {\n-        Directory directory = newDirectory();\n-        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n-        buildIndex.accept(indexWriter);\n-        indexWriter.close();\n-\n-        IndexReader indexReader = DirectoryReader.open(directory);\n-        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n-\n-        CardinalityAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher,\n-            fieldType);\n-        aggregator.preCollection();\n-        indexSearcher.search(query, aggregator);\n-        aggregator.postCollection();\n-        verify.accept((InternalCardinality) aggregator.buildAggregation(0L));\n-\n-        indexReader.close();\n-        directory.close();\n+        super.testCase(aggregationBuilder, query, buildIndex, verify, fieldType);", "originalCommit": "edc51da20d0c10c83b97c2e301e9aa0859293427", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23917bdb52f8ad140a79b1501652d17ba389c9ed", "chunk": "diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java\nindex df0322b9134..f8d30275419 100644\n--- a/server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java\n+++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java\n\n@@ -130,56 +132,56 @@ public class CardinalityAggregatorTests extends AggregatorTestCase {\n         CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"name\")\n             .field(\"number\").missing(\"\ud83c\udf4c\ud83c\udf4c\ud83c\udf4c\");\n \n-        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n+        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 7)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 8)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 9)));\n         }, card -> {\n             assertEquals(1, card.getValue(), 0);\n             assertTrue(AggregationInspectionHelper.hasValue(card));\n-        }, (MappedFieldType) null);\n+        }, null);\n     }\n \n     public void testUnmappedMissingNumber() throws IOException {\n         CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"name\")\n             .field(\"number\").missing(1234);\n \n-        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n+        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 7)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 8)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 9)));\n         }, card -> {\n             assertEquals(1, card.getValue(), 0);\n             assertTrue(AggregationInspectionHelper.hasValue(card));\n-        }, (MappedFieldType) null);\n+        }, null);\n     }\n \n     public void testUnmappedMissingGeoPoint() throws IOException {\n         CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"name\")\n             .field(\"number\").missing(new GeoPoint(42.39561, -71.13051));\n \n-        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n+        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 7)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 8)));\n             iw.addDocument(singleton(new NumericDocValuesField(\"unrelatedField\", 9)));\n         }, card -> {\n             assertEquals(1, card.getValue(), 0);\n             assertTrue(AggregationInspectionHelper.hasValue(card));\n-        }, (MappedFieldType) null);\n+        }, null);\n     }\n \n-    private void testCase(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n+    private void testAggregation(Query query, CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                           Consumer<InternalCardinality> verify) throws IOException {\n         MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n             NumberFieldMapper.NumberType.LONG);\n         fieldType.setName(\"number\");\n         final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\").field(\"number\");\n-        testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n+        testAggregation(aggregationBuilder, query, buildIndex, verify, fieldType);\n     }\n \n-    protected void testCase(CardinalityAggregationBuilder aggregationBuilder, Query query,\n-                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalCardinality> verify,\n-                          MappedFieldType fieldType) throws IOException {\n-        super.testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n+    private void testAggregation(AggregationBuilder aggregationBuilder, Query query,\n+        CheckedConsumer<RandomIndexWriter, IOException> buildIndex, Consumer<InternalCardinality> verify,\n+        MappedFieldType fieldType) throws IOException {\n+        testCase(aggregationBuilder, query, buildIndex, verify, fieldType);\n     }\n }\n"}}, {"oid": "23917bdb52f8ad140a79b1501652d17ba389c9ed", "url": "https://github.com/elastic/elasticsearch/commit/23917bdb52f8ad140a79b1501652d17ba389c9ed", "message": "Refactored code to address reviewer's comments", "committedDate": "2020-04-28T15:18:33Z", "type": "commit"}]}