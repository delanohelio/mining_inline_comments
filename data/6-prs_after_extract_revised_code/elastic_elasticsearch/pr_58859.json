{"pr_number": 58859, "pr_title": "EQL: Introduce sequence internal paging", "pr_createdAt": "2020-07-01T16:05:51Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58859", "timeline": [{"oid": "73ace52b418c5f8343f46aa1437772e7243b966e", "url": "https://github.com/elastic/elasticsearch/commit/73ace52b418c5f8343f46aa1437772e7243b966e", "message": "EQL: Introduce sequence internal paging\n\nRefactor sequence matching classes in order to decouple querying from\nresults consumption (and matching).\nRename some classes to better convey their intent.\n\nIntroduce internal pagination of sequence algorithm, that is getting the\ndata in slices and, if needed, moving forward in order to find more\nmatches until either the dataset is consumer or the number of results\ndesired is found.", "committedDate": "2020-07-01T16:04:21Z", "type": "commit"}, {"oid": "1eedae623945a611f15beb62fd6aea2d90bef96a", "url": "https://github.com/elastic/elasticsearch/commit/1eedae623945a611f15beb62fd6aea2d90bef96a", "message": "Fix incorrect ternary conditional", "committedDate": "2020-07-01T16:57:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ5ODYzNg==", "url": "https://github.com/elastic/elasticsearch/pull/58859#discussion_r448498636", "bodyText": "This used to be inside SequenceRuntime but now it has been extracted and takes care only of matching.", "author": "costin", "createdAt": "2020-07-01T17:00:56Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/Matcher.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.execution.assembler;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.xpack.eql.execution.search.Limit;\n+import org.elasticsearch.xpack.eql.execution.search.Ordinal;\n+import org.elasticsearch.xpack.eql.execution.sequence.Sequence;\n+import org.elasticsearch.xpack.eql.execution.sequence.SequenceStateMachine;\n+import org.elasticsearch.xpack.eql.session.Payload;\n+\n+import java.util.List;\n+\n+/**\n+ * Executable tracking sequences at runtime.\n+ */\n+class Matcher {", "originalCommit": "1eedae623945a611f15beb62fd6aea2d90bef96a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ5OTg2MA==", "url": "https://github.com/elastic/elasticsearch/pull/58859#discussion_r448499860", "bodyText": "This is the querying/pagination part from SequenceRuntime; in this version it introduces two new things:\n\nrange queries to the current window (instead of being open ended which made it hard to reason on whether a sequence should be matched or data be discarded)\npagination/advancement. If there's no more data in the current query, keep looking in the other queries (as long as they have something to match against).", "author": "costin", "createdAt": "2020-07-01T17:03:11Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/TumblingWindow.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.assembler;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.xpack.eql.execution.search.Ordinal;\n+import org.elasticsearch.xpack.eql.execution.search.QueryClient;\n+import org.elasticsearch.xpack.eql.execution.sequence.SequenceKey;\n+import org.elasticsearch.xpack.eql.session.Payload;\n+import org.elasticsearch.xpack.eql.util.ReversedIterator;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static org.elasticsearch.action.ActionListener.wrap;\n+\n+/**\n+ * Time-based window encapsulating query creation and advancement.\n+ * Since queries can return different number of results, to avoid creating incorrect sequences,\n+ * all searches are 'boxed' to a base query.\n+ * The base query is initially the first query - when no results are found, the next query gets promoted.\n+ * \n+ * This allows the window to find any follow-up results even if they are found outside the initial window\n+ * of a base query.\n+ */\n+public class TumblingWindow implements Executable {", "originalCommit": "1eedae623945a611f15beb62fd6aea2d90bef96a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "d8445184607f80c61911b75de709dc0c5ff5c6b0", "url": "https://github.com/elastic/elasticsearch/commit/d8445184607f80c61911b75de709dc0c5ff5c6b0", "message": "Merge branch 'master' into eql/paging", "committedDate": "2020-07-01T18:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMDE5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58859#discussion_r448630192", "bodyText": "This one doesn't seem to actually be used.", "author": "astefan", "createdAt": "2020-07-01T21:39:23Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java", "diffHunk": "@@ -48,27 +47,52 @@ public Executable assemble(List<List<Attribute>> listOfKeys,\n                                Limit limit) {\n         FieldExtractorRegistry extractorRegistry = new FieldExtractorRegistry();\n         \n-        List<Criterion> criteria = new ArrayList<>(plans.size() - 1);\n-        \n         boolean descending = direction == OrderDirection.DESC;\n+\n+        // fields\n+        HitExtractor tsExtractor = timestampExtractor(hitExtractor(timestamp, extractorRegistry));\n+        HitExtractor tbExtractor = Expressions.isPresent(tiebreaker) ? hitExtractor(tiebreaker, extractorRegistry) : null;\n+        // NB: since there's no aliasing inside EQL, the attribute name is the same as the underlying field name\n+        String timestampName = Expressions.name(timestamp);\n+        String tiebreakerName = Expressions.isPresent(tiebreaker) ? Expressions.name(tiebreaker) : null;\n+\n+        Criterion<QueryRequest> base = null;", "originalCommit": "d8445184607f80c61911b75de709dc0c5ff5c6b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60532812f5f366e1178d294cbc45763ec99a79fa", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java\nindex dbd8e988ed86..1ed781537fd1 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java\n\n@@ -56,7 +56,6 @@ public class ExecutionManager {\n         String timestampName = Expressions.name(timestamp);\n         String tiebreakerName = Expressions.isPresent(tiebreaker) ? Expressions.name(tiebreaker) : null;\n \n-        Criterion<QueryRequest> base = null;\n         // secondary criteria\n         List<Criterion<BoxedQueryRequest>> criteria = new ArrayList<>(plans.size() - 1);\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMDQ4MA==", "url": "https://github.com/elastic/elasticsearch/pull/58859#discussion_r448630480", "bodyText": "i > 0", "author": "astefan", "createdAt": "2020-07-01T21:40:06Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java", "diffHunk": "@@ -48,27 +47,52 @@ public Executable assemble(List<List<Attribute>> listOfKeys,\n                                Limit limit) {\n         FieldExtractorRegistry extractorRegistry = new FieldExtractorRegistry();\n         \n-        List<Criterion> criteria = new ArrayList<>(plans.size() - 1);\n-        \n         boolean descending = direction == OrderDirection.DESC;\n+\n+        // fields\n+        HitExtractor tsExtractor = timestampExtractor(hitExtractor(timestamp, extractorRegistry));\n+        HitExtractor tbExtractor = Expressions.isPresent(tiebreaker) ? hitExtractor(tiebreaker, extractorRegistry) : null;\n+        // NB: since there's no aliasing inside EQL, the attribute name is the same as the underlying field name\n+        String timestampName = Expressions.name(timestamp);\n+        String tiebreakerName = Expressions.isPresent(tiebreaker) ? Expressions.name(tiebreaker) : null;\n+\n+        Criterion<QueryRequest> base = null;\n+        // secondary criteria\n+        List<Criterion<BoxedQueryRequest>> criteria = new ArrayList<>(plans.size() - 1);\n         \n         // build a criterion for each query\n-        for (int i = 0; i < plans.size() - 1; i++) {\n+        for (int i = 0; i < plans.size(); i++) {\n             List<Attribute> keys = listOfKeys.get(i);\n-            // fields\n-            HitExtractor tsExtractor = timestampExtractor(hitExtractor(timestamp, extractorRegistry));\n-            HitExtractor tbExtractor = Expressions.isPresent(tiebreaker) ? hitExtractor(tiebreaker, extractorRegistry) : null;\n             List<HitExtractor> keyExtractors = hitExtractors(keys, extractorRegistry);\n \n             PhysicalPlan query = plans.get(i);\n             // search query\n-            // TODO: this could be generalized into an exec only query\n-            Check.isTrue(query instanceof EsQueryExec, \"Expected a query but got [{}]\", query.getClass());\n-            QueryRequest request = ((EsQueryExec) query).queryRequest(session);\n-            // base query remains descending, the rest need to flip\n-            criteria.add(new Criterion(request.searchSource(), keyExtractors, tsExtractor, tbExtractor, i > 0 && descending));\n+            if (query instanceof EsQueryExec) {\n+                QueryRequest original = ((EsQueryExec) query).queryRequest(session);\n+                \n+                BoxedQueryRequest boxedRequest = new BoxedQueryRequest(original, timestampName, tiebreakerName);\n+                Criterion<BoxedQueryRequest> criterion =\n+                        new Criterion<>(i, boxedRequest, keyExtractors, tsExtractor, tbExtractor, i> 0 && descending);", "originalCommit": "d8445184607f80c61911b75de709dc0c5ff5c6b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxNjk3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58859#discussion_r448816972", "bodyText": "descending can be false so i > 0 && descending != i > 0", "author": "costin", "createdAt": "2020-07-02T07:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMDQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxNjIxNw==", "url": "https://github.com/elastic/elasticsearch/pull/58859#discussion_r449016217", "bodyText": "I think it was about the formatting (missing space)", "author": "matriv", "createdAt": "2020-07-02T13:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMDQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "60532812f5f366e1178d294cbc45763ec99a79fa", "chunk": "diff --git a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java\nindex dbd8e988ed86..1ed781537fd1 100644\n--- a/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java\n+++ b/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/ExecutionManager.java\n\n@@ -56,7 +56,6 @@ public class ExecutionManager {\n         String timestampName = Expressions.name(timestamp);\n         String tiebreakerName = Expressions.isPresent(tiebreaker) ? Expressions.name(tiebreaker) : null;\n \n-        Criterion<QueryRequest> base = null;\n         // secondary criteria\n         List<Criterion<BoxedQueryRequest>> criteria = new ArrayList<>(plans.size() - 1);\n         \n"}}, {"oid": "60532812f5f366e1178d294cbc45763ec99a79fa", "url": "https://github.com/elastic/elasticsearch/commit/60532812f5f366e1178d294cbc45763ec99a79fa", "message": "Remove unused variable", "committedDate": "2020-07-02T10:12:57Z", "type": "commit"}]}