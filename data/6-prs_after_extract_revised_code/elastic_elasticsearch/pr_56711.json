{"pr_number": 56711, "pr_title": "[ML] relax throttling on expired data cleanup", "pr_createdAt": "2020-05-13T19:02:58Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56711", "timeline": [{"oid": "9d473e033b006f91e299b8f7b0e06ffd1e8d4738", "url": "https://github.com/elastic/elasticsearch/commit/9d473e033b006f91e299b8f7b0e06ffd1e8d4738", "message": "[ML] relax throttling on expired data cleanup", "committedDate": "2020-05-13T18:45:47Z", "type": "commit"}, {"oid": "9ad0cf7b156443aafb7f8730bfcc38117d41eb42", "url": "https://github.com/elastic/elasticsearch/commit/9ad0cf7b156443aafb7f8730bfcc38117d41eb42", "message": "addressing pr comments", "committedDate": "2020-05-14T14:55:56Z", "type": "commit"}, {"oid": "b8f4722423334d6bae85859c27cc598c999099d8", "url": "https://github.com/elastic/elasticsearch/commit/b8f4722423334d6bae85859c27cc598c999099d8", "message": "Merge branch 'master' into feature/ml-allow-faster-expired-data-cleanup", "committedDate": "2020-05-14T14:56:36Z", "type": "commit"}, {"oid": "6c31b0eda5eddb6626a1ea5c2f80b26b46c698d7", "url": "https://github.com/elastic/elasticsearch/commit/6c31b0eda5eddb6626a1ea5c2f80b26b46c698d7", "message": "adding parameters to expired data cleanup", "committedDate": "2020-05-14T18:45:17Z", "type": "commit"}, {"oid": "bfc44a5faa2674a377662abc0377d63bc48fc167", "url": "https://github.com/elastic/elasticsearch/commit/bfc44a5faa2674a377662abc0377d63bc48fc167", "message": "fixing and adding tests", "committedDate": "2020-05-14T19:40:50Z", "type": "commit"}, {"oid": "4fca004be5554611e81cd359385dd34fa6b84065", "url": "https://github.com/elastic/elasticsearch/commit/4fca004be5554611e81cd359385dd34fa6b84065", "message": "removing unused import", "committedDate": "2020-05-14T19:54:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425689922", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes\n          \n          \n            \n                 * `1.0f` indicates the default behavior where throttling scales according to the number of data nodes", "author": "davidkyle", "createdAt": "2020-05-15T09:46:58Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes", "originalCommit": "4fca004be5554611e81cd359385dd34fa6b84065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NDUyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425744521", "bodyText": "GRAMMAR! My old nemesis.", "author": "benwtrent", "createdAt": "2020-05-15T11:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NTkwMg==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425765902", "bodyText": "It looks like the magic value is -1.0f in the core code, not 1.0f.  Negative also makes more sense for the magic value.", "author": "droberts195", "createdAt": "2020-05-15T12:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMjQxOA==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425802418", "bodyText": "Good point. I think null (unspecified) means use the default and in the action that is interpreted as the magic value -1.0f", "author": "davidkyle", "createdAt": "2020-05-15T13:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNjY3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425806679", "bodyText": "null means no throttle\n-1.0f is our \"magic\" calculation.", "author": "benwtrent", "createdAt": "2020-05-15T13:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4OTkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "2b92d090188caf5d14f0d666cc2b94a09e827324", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java\nindex 9538b2c02ae..2dc829ba9fb 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java\n\n@@ -50,7 +50,7 @@ public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n     /**\n      * The requests allowed per second in the underlying Delete by Query requests executed.\n      *\n-     * `1.0f` indicates the default behavior where throttling scales according too the number of data nodes\n+     * `1.0f` indicates the default behavior where throttling scales according to the number of data nodes.\n      * `null` means no throttling occurs.\n      */\n     public Float getRequestsPerSecond() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNTM4OA==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425705388", "bodyText": "Why not a plain Object.equals(requestsPerSecond, request.requestsPerSecond)\nI see there is a difference between compare and equals but only in terms of NANs and comparing +0 to -0\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Float.html#equals(java.lang.Object)", "author": "davidkyle", "createdAt": "2020-05-15T10:17:01Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java", "diffHunk": "@@ -31,20 +34,97 @@ private DeleteExpiredDataAction() {\n \n     public static class Request extends ActionRequest {\n \n+        public static final ParseField REQUESTS_PER_SECOND = new ParseField(\"requests_per_second\");\n+        public static final ParseField TIMEOUT = new ParseField(\"timeout\");\n+\n+        public static final ObjectParser<Request, Void> PARSER = new ObjectParser<>(\n+            \"delete_expired_data_request\",\n+            true,\n+            Request::new);\n+\n+        static {\n+            PARSER.declareFloat(Request::setRequestsPerSecond, REQUESTS_PER_SECOND);\n+            PARSER.declareString((obj, value) -> obj.setTimeout(TimeValue.parseTimeValue(value, TIMEOUT.getPreferredName())),\n+                TIMEOUT);\n+        }\n+\n+        private Float requestsPerSecond;\n+        private TimeValue timeout;\n+\n         public Request() {}\n \n+        public Request(Float requestsPerSecond, TimeValue timeValue) {\n+            this.requestsPerSecond = requestsPerSecond;\n+            this.timeout = timeValue;\n+        }\n+\n         public Request(StreamInput in) throws IOException {\n             super(in);\n+            if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n+                this.requestsPerSecond = in.readOptionalFloat();\n+                this.timeout = in.readOptionalTimeValue();\n+            } else {\n+                this.requestsPerSecond = null;\n+                this.timeout = null;\n+            }\n+        }\n+\n+        public Float getRequestsPerSecond() {\n+            return requestsPerSecond;\n+        }\n+\n+        public TimeValue getTimeout() {\n+            return timeout;\n+        }\n+\n+        public Request setRequestsPerSecond(Float requestsPerSecond) {\n+            this.requestsPerSecond = requestsPerSecond;\n+            return this;\n+        }\n+\n+        public Request setTimeout(TimeValue timeout) {\n+            this.timeout = timeout;\n+            return this;\n         }\n \n         @Override\n         public ActionRequestValidationException validate() {\n+            if (this.requestsPerSecond != null && this.requestsPerSecond != -1.0f && this.requestsPerSecond <= 0) {\n+                ActionRequestValidationException requestValidationException = new ActionRequestValidationException();\n+                requestValidationException.addValidationError(\"[requests_per_second] must either be -1 or greater than 0\");\n+                return requestValidationException;\n+            }\n             return null;\n         }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Request request = (Request) o;\n+            return Float.compare(", "originalCommit": "4fca004be5554611e81cd359385dd34fa6b84065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NzAxMw==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425747013", "bodyText": "you are correct. This is left over from when I had requestsPerSecond an unboxed value :).", "author": "benwtrent", "createdAt": "2020-05-15T11:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2b92d090188caf5d14f0d666cc2b94a09e827324", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java\nindex 074f5687924..08bd0fd583b 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java\n\n@@ -102,10 +102,7 @@ public class DeleteExpiredDataAction extends ActionType<DeleteExpiredDataAction.\n             if (this == o) return true;\n             if (o == null || getClass() != o.getClass()) return false;\n             Request request = (Request) o;\n-            return Float.compare(\n-                request.requestsPerSecond == null ? Float.POSITIVE_INFINITY : request.requestsPerSecond,\n-                requestsPerSecond == null ? Float.POSITIVE_INFINITY : requestsPerSecond\n-            ) == 0\n+            return Objects.equals(requestsPerSecond, request.requestsPerSecond)\n                 && Objects.equals(timeout, request.timeout);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxOTY3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425719679", "bodyText": "Is there a way to deregister the update consumer?\nThe consumer is added when the node becomes a master node but when it goes off master mlDailyMaintenanceService is set to null in uninstallDailyMaintenanceService() but this consumer referencing  mlDailyMaintenanceService will prevent it being garbage collected.\nMaybe make this class the consumer the set method will directly set the value on mlDailyMaintenanceService if it is not null", "author": "davidkyle", "createdAt": "2020-05-15T10:46:08Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java", "diffHunk": "@@ -87,10 +87,24 @@ public String executorName() {\n \n     private synchronized void installDailyMaintenanceService() {\n         if (mlDailyMaintenanceService == null) {\n-            mlDailyMaintenanceService =\n-                new MlDailyMaintenanceService(clusterService.getClusterName(), threadPool, client, clusterService, mlAssignmentNotifier);\n+            mlDailyMaintenanceService = new MlDailyMaintenanceService(\n+                settings,\n+                clusterService.getClusterName(),\n+                threadPool,\n+                client,\n+                clusterService,\n+                mlAssignmentNotifier\n+            );\n             mlDailyMaintenanceService.start();\n             clusterService.addLifecycleListener(new LifecycleListener() {\n+                @Override\n+                public void afterStart() {\n+                    clusterService.getClusterSettings().addSettingsUpdateConsumer(", "originalCommit": "4fca004be5554611e81cd359385dd34fa6b84065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NTI5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425745299", "bodyText": "\ud83e\udd14 good point. The setting updater might have to be in the initialization service itself...\nTo my knowledge there is no way to deregister a setting consumer. The consumers have no unique identification.", "author": "benwtrent", "createdAt": "2020-05-15T11:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxOTY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzA5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425757097", "bodyText": "Why is this being set to null anyways? I assume so it can be GC'd, but the object itself is not HUGE, and only really has references to things are referenced by the MlInitializationService.java.\nI am gonna change the code so that it does not get set null. It seems like a waste to me.\n@dimitris-athanasiou @droberts195 ^ Let me know if you have a prevailing opinion the other way.", "author": "benwtrent", "createdAt": "2020-05-15T12:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxOTY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2b92d090188caf5d14f0d666cc2b94a09e827324", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java\nindex d1a9fcc718b..2859bd0c6f7 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java\n\n@@ -85,49 +107,10 @@ class MlInitializationService implements LocalNodeMasterListener, ClusterStateLi\n         return ThreadPool.Names.GENERIC;\n     }\n \n-    private synchronized void installDailyMaintenanceService() {\n-        if (mlDailyMaintenanceService == null) {\n-            mlDailyMaintenanceService = new MlDailyMaintenanceService(\n-                settings,\n-                clusterService.getClusterName(),\n-                threadPool,\n-                client,\n-                clusterService,\n-                mlAssignmentNotifier\n-            );\n-            mlDailyMaintenanceService.start();\n-            clusterService.addLifecycleListener(new LifecycleListener() {\n-                @Override\n-                public void afterStart() {\n-                    clusterService.getClusterSettings().addSettingsUpdateConsumer(\n-                        MachineLearning.NIGHTLY_MAINTENANCE_REQUESTS_PER_SECOND,\n-                        mlDailyMaintenanceService::setDeleteExpiredDataRequestsPerSecond\n-                    );\n-                }\n-\n-                @Override\n-                public void beforeStop() {\n-                    uninstallDailyMaintenanceService();\n-                }\n-            });\n-        }\n-    }\n-\n-    private synchronized void uninstallDailyMaintenanceService() {\n-        if (mlDailyMaintenanceService != null) {\n-            mlDailyMaintenanceService.stop();\n-            mlDailyMaintenanceService = null;\n-        }\n-    }\n-\n     /** For testing */\n     MlDailyMaintenanceService getDailyMaintenanceService() {\n         return mlDailyMaintenanceService;\n     }\n \n-    /** For testing */\n-    synchronized void setDailyMaintenanceService(MlDailyMaintenanceService service) {\n-        mlDailyMaintenanceService = service;\n-    }\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0MTU3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425741579", "bodyText": "Good \ud83d\udc40 I stared at this for a long time before I saw the difference", "author": "davidkyle", "createdAt": "2020-05-15T11:34:26Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/UnusedStateRemover.java", "diffHunk": "@@ -98,12 +98,12 @@ public void remove(ActionListener<Boolean> listener, Supplier<Boolean> isTimedOu\n \n     private Set<String> getJobIds() {\n         Set<String> jobIds = new HashSet<>();\n-        jobIds.addAll(getAnamalyDetectionJobIds());\n+        jobIds.addAll(getAnomalyDetectionJobIds());\n         jobIds.addAll(getDataFrameAnalyticsJobIds());\n         return jobIds;\n     }\n \n-    private Set<String> getAnamalyDetectionJobIds() {\n+    private Set<String> getAnomalyDetectionJobIds() {", "originalCommit": "4fca004be5554611e81cd359385dd34fa6b84065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NDM0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425764342", "bodyText": "We would usually error on unknown fields when parsing REST requests.  Should this be false on the server side?", "author": "droberts195", "createdAt": "2020-05-15T12:23:08Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java", "diffHunk": "@@ -31,20 +34,97 @@ private DeleteExpiredDataAction() {\n \n     public static class Request extends ActionRequest {\n \n+        public static final ParseField REQUESTS_PER_SECOND = new ParseField(\"requests_per_second\");\n+        public static final ParseField TIMEOUT = new ParseField(\"timeout\");\n+\n+        public static final ObjectParser<Request, Void> PARSER = new ObjectParser<>(\n+            \"delete_expired_data_request\",\n+            true,", "originalCommit": "4fca004be5554611e81cd359385dd34fa6b84065", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNzAwNg==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425807006", "bodyText": "yes yes, it should be false. Fixing!", "author": "benwtrent", "createdAt": "2020-05-15T13:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NDM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2b92d090188caf5d14f0d666cc2b94a09e827324", "chunk": "diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java\nindex 074f5687924..08bd0fd583b 100644\n--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java\n+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/DeleteExpiredDataAction.java\n\n@@ -102,10 +102,7 @@ public class DeleteExpiredDataAction extends ActionType<DeleteExpiredDataAction.\n             if (this == o) return true;\n             if (o == null || getClass() != o.getClass()) return false;\n             Request request = (Request) o;\n-            return Float.compare(\n-                request.requestsPerSecond == null ? Float.POSITIVE_INFINITY : request.requestsPerSecond,\n-                requestsPerSecond == null ? Float.POSITIVE_INFINITY : requestsPerSecond\n-            ) == 0\n+            return Objects.equals(requestsPerSecond, request.requestsPerSecond)\n                 && Objects.equals(timeout, request.timeout);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3Mzk1NA==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425773954", "bodyText": "Maybe rename MAX_DURATION to DEFAULT_MAX_DURATION now it's not always used.", "author": "droberts195", "createdAt": "2020-05-15T12:41:33Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java", "diffHunk": "@@ -73,12 +74,18 @@ public TransportDeleteExpiredDataAction(ThreadPool threadPool, TransportService\n     protected void doExecute(Task task, DeleteExpiredDataAction.Request request,\n                              ActionListener<DeleteExpiredDataAction.Response> listener) {\n         logger.info(\"Deleting expired data\");\n-        Instant timeoutTime = Instant.now(clock).plus(MAX_DURATION);\n+        Instant timeoutTime = Instant.now(clock).plus(\n+            request.getTimeout() == null ? MAX_DURATION : Duration.ofMillis(request.getTimeout().millis())", "originalCommit": "4fca004be5554611e81cd359385dd34fa6b84065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "941b288bc426d30abaf0c4117c8d92b1d9478f1c", "chunk": "diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java\nindex 12d347ef460..4357fa438ba 100644\n--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java\n+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java\n\n@@ -75,7 +74,7 @@ public class TransportDeleteExpiredDataAction extends HandledTransportAction<Del\n                              ActionListener<DeleteExpiredDataAction.Response> listener) {\n         logger.info(\"Deleting expired data\");\n         Instant timeoutTime = Instant.now(clock).plus(\n-            request.getTimeout() == null ? MAX_DURATION : Duration.ofMillis(request.getTimeout().millis())\n+            request.getTimeout() == null ? DEFAULT_MAX_DURATION : Duration.ofMillis(request.getTimeout().millis())\n         );\n \n         Supplier<Boolean> isTimedOutSupplier = () -> Instant.now(clock).isAfter(timeoutTime);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NTA5NA==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425775094", "bodyText": "Might be better to test with values other than 1, as 1 is more likely to end up in the output due to the combination of a bug and a fluke.", "author": "droberts195", "createdAt": "2020-05-15T12:43:32Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/MLRequestConvertersTests.java", "diffHunk": "@@ -214,12 +214,13 @@ public void testCloseJob() throws Exception {\n             requestEntityToString(request));\n     }\n \n-    public void testDeleteExpiredData() {\n-        DeleteExpiredDataRequest deleteExpiredDataRequest = new DeleteExpiredDataRequest();\n+    public void testDeleteExpiredData() throws Exception {\n+        DeleteExpiredDataRequest deleteExpiredDataRequest = new DeleteExpiredDataRequest(1.0f, TimeValue.timeValueHours(1));", "originalCommit": "4fca004be5554611e81cd359385dd34fa6b84065", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "941b288bc426d30abaf0c4117c8d92b1d9478f1c", "chunk": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/MLRequestConvertersTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/MLRequestConvertersTests.java\nindex 46f4222f28e..bd552d5ff7d 100644\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/MLRequestConvertersTests.java\n+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/MLRequestConvertersTests.java\n\n@@ -215,12 +215,15 @@ public class MLRequestConvertersTests extends ESTestCase {\n     }\n \n     public void testDeleteExpiredData() throws Exception {\n-        DeleteExpiredDataRequest deleteExpiredDataRequest = new DeleteExpiredDataRequest(1.0f, TimeValue.timeValueHours(1));\n+        float requestsPerSec = randomBoolean() ? -1.0f : (float)randomDoubleBetween(0.0, 100000.0, false);\n+        DeleteExpiredDataRequest deleteExpiredDataRequest = new DeleteExpiredDataRequest(\n+            requestsPerSec,\n+            TimeValue.timeValueHours(1));\n \n         Request request = MLRequestConverters.deleteExpiredData(deleteExpiredDataRequest);\n         assertEquals(HttpDelete.METHOD_NAME, request.getMethod());\n         assertEquals(\"/_ml/_delete_expired_data\", request.getEndpoint());\n-        assertEquals(\"{\\\"requests_per_second\\\":1.0,\\\"timeout\\\":\\\"1h\\\"}\", requestEntityToString(request));\n+        assertEquals(\"{\\\"requests_per_second\\\":\" + requestsPerSec + \",\\\"timeout\\\":\\\"1h\\\"}\", requestEntityToString(request));\n     }\n \n     public void testDeleteJob() {\n"}}, {"oid": "2b92d090188caf5d14f0d666cc2b94a09e827324", "url": "https://github.com/elastic/elasticsearch/commit/2b92d090188caf5d14f0d666cc2b94a09e827324", "message": "addressing pr comments", "committedDate": "2020-05-15T13:31:30Z", "type": "commit"}, {"oid": "941b288bc426d30abaf0c4117c8d92b1d9478f1c", "url": "https://github.com/elastic/elasticsearch/commit/941b288bc426d30abaf0c4117c8d92b1d9478f1c", "message": "addressing pr comments", "committedDate": "2020-05-15T14:03:42Z", "type": "commit"}, {"oid": "6cd2bb7d4adc5043815ef3719bfa33f95ee203e4", "url": "https://github.com/elastic/elasticsearch/commit/6cd2bb7d4adc5043815ef3719bfa33f95ee203e4", "message": "Merge branch 'master' into feature/ml-allow-faster-expired-data-cleanup", "committedDate": "2020-05-15T15:07:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NDc1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425994759", "bodyText": "It seems dodgy to test two error conditions together: a timeout and requests per second = 0.  Maybe the .0f was a typo?  I think this test should just test the timeout.", "author": "droberts195", "createdAt": "2020-05-15T19:04:33Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataActionTests.java", "diffHunk": "@@ -93,7 +97,7 @@ public void testDeleteExpiredDataIterationWithTimeout() {\n \n         Supplier<Boolean> isTimedOutSupplier = () -> (removersRemaining.getAndDecrement() <= 0);\n \n-        transportDeleteExpiredDataAction.deleteExpiredData(removers.iterator(), finalListener, isTimedOutSupplier, true);\n+        transportDeleteExpiredDataAction.deleteExpiredData(removers.iterator(), .0f, finalListener, isTimedOutSupplier, true);", "originalCommit": "6cd2bb7d4adc5043815ef3719bfa33f95ee203e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "790d30caf6485b4adb1acd979d99bfed629a40f4", "chunk": "diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataActionTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataActionTests.java\nindex 1bc31b4d9c4..3937e5f8e0c 100644\n--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataActionTests.java\n+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataActionTests.java\n\n@@ -97,7 +97,7 @@ public class TransportDeleteExpiredDataActionTests extends ESTestCase {\n \n         Supplier<Boolean> isTimedOutSupplier = () -> (removersRemaining.getAndDecrement() <= 0);\n \n-        transportDeleteExpiredDataAction.deleteExpiredData(removers.iterator(), .0f, finalListener, isTimedOutSupplier, true);\n+        transportDeleteExpiredDataAction.deleteExpiredData(removers.iterator(), 1.0f, finalListener, isTimedOutSupplier, true);\n \n         assertFalse(succeeded.get());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NTYxMA==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r425995610", "bodyText": "\"default\" is probably the wrong word for this comment.  The other HLRC docs say the default is null, and that's what's implemented in the HLRC.\nSo maybe \"default\" to \"standard nightly maintenance behavior\" or something like that.", "author": "droberts195", "createdAt": "2020-05-15T19:06:24Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java", "diffHunk": "@@ -19,16 +19,77 @@\n package org.elasticsearch.client.ml;\n \n import org.elasticsearch.client.Validatable;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * Request to delete expired model snapshots and forecasts\n  */\n-public class DeleteExpiredDataRequest implements Validatable {\n+public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n \n+    static final String REQUESTS_PER_SECOND = \"requests_per_second\";\n+    static final String TIMEOUT = \"timeout\";\n+    private final Float requestsPerSecond;\n+    private final TimeValue timeout;\n    /**\n      * Create a new request to delete expired data\n      */\n     public DeleteExpiredDataRequest() {\n+        this(null, null);\n+    }\n+\n+    public DeleteExpiredDataRequest(Float requestsPerSecond, TimeValue timeout) {\n+        this.requestsPerSecond = requestsPerSecond;\n+        this.timeout = timeout;\n+    }\n+\n+    /**\n+     * The requests allowed per second in the underlying Delete by Query requests executed.\n+     *\n+     * `-1.0f` indicates the default behavior where throttling scales according to the number of data nodes.", "originalCommit": "6cd2bb7d4adc5043815ef3719bfa33f95ee203e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwNjYyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56711#discussion_r426006629", "bodyText": "Definitely, saying default is a bit disingenuous.", "author": "benwtrent", "createdAt": "2020-05-15T19:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NTYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "790d30caf6485b4adb1acd979d99bfed629a40f4", "chunk": "diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java\nindex 07dbfe1d2b6..c8ae8a01f9b 100644\n--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java\n+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/ml/DeleteExpiredDataRequest.java\n\n@@ -50,8 +50,9 @@ public class DeleteExpiredDataRequest implements Validatable, ToXContentObject {\n     /**\n      * The requests allowed per second in the underlying Delete by Query requests executed.\n      *\n-     * `-1.0f` indicates the default behavior where throttling scales according to the number of data nodes.\n-     * `null` means no throttling occur .\n+     * `-1.0f` indicates that the standard nightly cleanup behavior should be ran.\n+     *         Throttling scales according to the number of data nodes.\n+     * `null` is default and means no throttling will occur.\n      */\n     public Float getRequestsPerSecond() {\n         return requestsPerSecond;\n"}}, {"oid": "790d30caf6485b4adb1acd979d99bfed629a40f4", "url": "https://github.com/elastic/elasticsearch/commit/790d30caf6485b4adb1acd979d99bfed629a40f4", "message": "addressing pr comments", "committedDate": "2020-05-15T20:18:01Z", "type": "commit"}, {"oid": "17b3e9766471d8d16f07b799d35a8ad952d3e6a2", "url": "https://github.com/elastic/elasticsearch/commit/17b3e9766471d8d16f07b799d35a8ad952d3e6a2", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-allow-faster-expired-data-cleanup", "committedDate": "2020-05-15T20:18:16Z", "type": "commit"}]}