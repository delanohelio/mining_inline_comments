{"pr_number": 982, "pr_title": "Handle Routes as objects", "pr_createdAt": "2020-10-30T11:13:52Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MTQ1Mg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515141452", "bodyText": "If we have complex and well defined equals of CloudRouteSummary, it could be possible to use native set addAll()", "author": "boyan-velinov", "createdAt": "2020-10-30T14:33:30Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java", "diffHunk": "@@ -45,19 +46,28 @@ private Object getPropertyValue(List<Map<String, Object>> propertiesList, String\n         return PropertiesUtil.getPropertyValue(propertiesList, propertyName, defaultValue);\n     }\n \n-    private List<String> appendExistingUris(List<String> uris, DeployedMtaApplication deployedMtaApplication) {\n-        Set<String> result = new HashSet<>(uris);\n-        if (deployedMtaApplication != null) {\n-            result.addAll(deployedMtaApplication.getUris());\n+    private Set<CloudRouteSummary> addExistingRoutes(Set<CloudRouteSummary> routes, DeployedMtaApplication deployedMtaApplication) {\n+        if (deployedMtaApplication == null) {\n+            return routes;\n+        }\n+\n+        Set<CloudRouteSummary> combinedRoutes = new HashSet<>(deployedMtaApplication.getRoutes());\n+        for (CloudRouteSummary newRoute : routes) {", "originalCommit": "2b61c57eb34579768b4c545aeed19d44085fd30d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MDAzMg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515840032", "bodyText": "+1", "author": "theghost5800", "createdAt": "2020-11-02T09:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1NzM4OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516857388", "bodyText": "done", "author": "ikasarov", "createdAt": "2020-11-03T18:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0MTQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java\nindex f081a07a3..7124fdff9 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java\n\n@@ -52,19 +52,13 @@ public class ApplicationRoutesCloudModelBuilder {\n         }\n \n         Set<CloudRouteSummary> combinedRoutes = new HashSet<>(deployedMtaApplication.getRoutes());\n-        for (CloudRouteSummary newRoute : routes) {\n-            boolean routeIsNew = combinedRoutes.stream()\n-                                       .noneMatch(oldRoute -> oldRoute.describesTheSameUri(newRoute));\n-            if (routeIsNew) {\n-                combinedRoutes.add(newRoute);\n-            }\n-        }\n+        combinedRoutes.addAll(routes);\n \n         return combinedRoutes;\n     }\n \n     public List<String> getApplicationDomains(Module module, List<Map<String, Object>> propertiesList) {\n-        return getUriParametersParser(module).getApplicationDomains(propertiesList);\n+        return getRouteParametersParser(module).getApplicationDomains(propertiesList);\n     }\n \n     public Set<CloudRouteSummary> getIdleApplicationRoutes(Module module, List<Map<String, Object>> propertiesList) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0NDA3NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515144074", "bodyText": "Is that a leftover?", "author": "boyan-velinov", "createdAt": "2020-10-30T14:37:29Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleUriParametersParser.java", "diffHunk": "@@ -24,51 +28,63 @@ public IdleUriParametersParser(String defaultHost, String defaultDomain, String\n     }\n \n     @Override\n-    public List<String> getApplicationRoutes(List<Map<String, Object>> parametersList) {\n-        List<String> idleRoutes = getIdleRoutes(parametersList);\n+    public Set<CloudRouteSummary> getApplicationRoutes(List<Map<String, Object>> parametersList) {\n+        Set<CloudRouteSummary> idleRoutes = getIdleRoutes(parametersList);\n         if (!idleRoutes.isEmpty()) {\n             return idleRoutes;\n         }\n \n-        List<String> liveRoutes = super.getApplicationRoutes(parametersList);\n+        Set<CloudRouteSummary> liveRoutes = super.getApplicationRoutes(parametersList);\n         if (!liveRoutes.isEmpty()) {\n             return modifyLiveRoutes(liveRoutes);\n         }\n-        return Collections.emptyList();\n+        return Collections.emptySet();\n     }\n \n-    private List<String> getIdleRoutes(List<Map<String, Object>> parametersList) {\n+    private Set<CloudRouteSummary> getIdleRoutes(List<Map<String, Object>> parametersList) {\n         List<Map<String, Object>> idleRoutesMaps = RoutesValidator.applyRoutesType(PropertiesUtil.getPropertyValue(parametersList,\n                                                                                                                    SupportedParameters.IDLE_ROUTES,\n                                                                                                                    null));\n         return idleRoutesMaps.stream()\n-                             .map(routesMap -> (String) routesMap.get(SupportedParameters.IDLE_ROUTE))\n+                             .map(this::parseIdleRouteMap)\n                              .filter(Objects::nonNull)\n-                             .map(UriUtil::stripScheme)\n-                             .collect(Collectors.toList());\n+                             .collect(Collectors.toSet());\n \n     }\n \n-    private List<String> modifyLiveRoutes(List<String> liveRoutes) {\n-        return liveRoutes.stream()\n-                         .map(this::modifyUri)\n-                         .collect(Collectors.toList());\n+    public CloudRouteSummary parseIdleRouteMap(Map<String, Object> routeMap) {\n+        String routeString = (String) routeMap.get(SupportedParameters.IDLE_ROUTE);\n+        boolean noHostname = MapUtil.parseBooleanFlag(routeMap, SupportedParameters.NO_HOSTNAME, false);\n+\n+        if (routeString == null) {\n+            return null;\n+        }\n+\n+        return new ApplicationURI(routeString, noHostname).toCloudRouteSummary();\n     }\n \n-    private String modifyUri(String inputURI) {\n-        ApplicationURI modifiedURI = new ApplicationURI(inputURI);\n+    private Set<CloudRouteSummary> modifyLiveRoutes(Set<CloudRouteSummary> liveRoutes) {\n+        return liveRoutes.stream()\n+                         .map(this::modifyRoute)\n+                         .collect(Collectors.toSet());\n+    }\n \n+    private CloudRouteSummary modifyRoute(CloudRouteSummary inputRoute) {\n+        ImmutableCloudRouteSummary.Builder modifiedRouteBuilder = ImmutableCloudRouteSummary.builder()\n+                                                                                            .from(inputRoute);\n         String defaultDomain = getDefaultDomain();\n         String defaultHost = getDefaultHost();\n \n         if (defaultDomain != null) {\n-            modifiedURI.setDomain(defaultDomain);\n+            modifiedRouteBuilder.domain(defaultDomain);\n         }\n \n         if (defaultHost != null) {\n-            modifiedURI.setHost(defaultHost);\n+            modifiedRouteBuilder.host(defaultHost);\n+        } else if (inputRoute.getHost() == null) {\n+            // TODO: must handle this weird case", "originalCommit": "2b61c57eb34579768b4c545aeed19d44085fd30d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1NzYzMQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516857631", "bodyText": "yes, upon investigation, this case shouldn't be an issue", "author": "ikasarov", "createdAt": "2020-11-03T18:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0NDA3NA=="}], "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleUriParametersParser.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleRouteParametersParser.java\nsimilarity index 89%\nrename from multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleUriParametersParser.java\nrename to multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleRouteParametersParser.java\nindex d242b4c04..3d0d0d061 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleUriParametersParser.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleRouteParametersParser.java\n\n@@ -16,13 +16,13 @@ import org.cloudfoundry.multiapps.controller.core.util.ApplicationURI;\n import org.cloudfoundry.multiapps.controller.core.validators.parameters.RoutesValidator;\n import org.cloudfoundry.multiapps.mta.util.PropertiesUtil;\n \n-public class IdleUriParametersParser extends UriParametersParser {\n+public class IdleRouteParametersParser extends RouteParametersParser {\n \n-    public IdleUriParametersParser(String defaultHost, String defaultDomain, String routePath) {\n+    public IdleRouteParametersParser(String defaultHost, String defaultDomain, String routePath) {\n         super(defaultHost, defaultDomain, SupportedParameters.IDLE_HOST, SupportedParameters.IDLE_DOMAIN, routePath);\n     }\n \n-    public IdleUriParametersParser(String defaultHost, String defaultDomain, String hostParameterName, String domainParameterName,\n+    public IdleRouteParametersParser(String defaultHost, String defaultDomain, String hostParameterName, String domainParameterName,\n                                    String routePath) {\n         super(defaultHost, defaultDomain, hostParameterName, domainParameterName, routePath);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0ODEyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515148128", "bodyText": "Can we make it on one line", "author": "boyan-velinov", "createdAt": "2020-10-30T14:43:30Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java", "diffHunk": "@@ -33,20 +33,24 @@ public UriParametersParser(String defaultHost, String defaultDomain, String host\n         this.defaultDomain = defaultDomain;\n         this.hostParameterName = hostParameterName;\n         this.domainParameterName = domainParameterName;\n-        this.routePath = routePath;\n+        if (routePath != null) {", "originalCommit": "2b61c57eb34579768b4c545aeed19d44085fd30d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\nsimilarity index 90%\nrename from multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java\nrename to multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\nindex 9cbbfa105..53643726c 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\n\n@@ -23,21 +23,17 @@ public class UriParametersParser implements ParametersParser<Set<CloudRouteSumma\n     private final String domainParameterName;\n     private final String routePath;\n \n-    public UriParametersParser(String defaultHost, String defaultDomain, String routePath) {\n+    public RouteParametersParser(String defaultHost, String defaultDomain, String routePath) {\n         this(defaultHost, defaultDomain, SupportedParameters.HOST, SupportedParameters.DOMAIN, routePath);\n     }\n \n-    public UriParametersParser(String defaultHost, String defaultDomain, String hostParameterName, String domainParameterName,\n+    public RouteParametersParser(String defaultHost, String defaultDomain, String hostParameterName, String domainParameterName,\n                                String routePath) {\n         this.defaultHost = defaultHost;\n         this.defaultDomain = defaultDomain;\n         this.hostParameterName = hostParameterName;\n         this.domainParameterName = domainParameterName;\n-        if (routePath != null) {\n-            this.routePath = routePath;\n-        } else {\n-            this.routePath = \"\";\n-        }\n+        this.routePath = routePath != null ? routePath : \"\";\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MTM0OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515151349", "bodyText": "Why this is called TestDataUtil but file TestData.java", "author": "boyan-velinov", "createdAt": "2020-10-30T14:48:19Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.cloudfoundry.multiapps.controller.core.parser;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n+\n+import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n+import com.sap.cloudfoundry.client.facade.domain.ImmutableCloudRouteSummary;\n+\n+public class TestDataUtil {", "originalCommit": "2b61c57eb34579768b4c545aeed19d44085fd30d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ac92fa8de10ed766b2be661f5a54f12bbd0f4dd", "chunk": "diff --git a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java\nindex 94d50c6ca..188a5d324 100644\n--- a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java\n+++ b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java\n\n@@ -1,31 +1,48 @@\n-package org.cloudfoundry.multiapps.controller.core.parser;\n+package org.cloudfoundry.multiapps.controller.core.util;\n \n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n \n import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n import com.sap.cloudfoundry.client.facade.domain.ImmutableCloudRouteSummary;\n \n-public class TestDataUtil {\n-    private static Map<String, Object> routeParameter(String route) {\n-        return routeParameter(route, false, null);\n+//TODO: this class repeats code from test class org.cloudfoundry.multiapps.controller.process.steps.TestData; consolidate if we refactor core module and stplit ApplicationUri out of it\n+public class TestData {\n+\n+    public static Map<String, Object> routeParameterWithAdditionalValues(String route, boolean noHostname,\n+                                                                         Map<String, Object> additionalParameters) {\n+        Map<String, Object> resultParameter = constructRouteParameter(route, false, noHostname);\n+\n+        if (additionalParameters != null) {\n+            resultParameter.putAll(additionalParameters);\n+        }\n+\n+        return resultParameter;\n+    }\n+\n+    public static Map<String, Object> routeParameter(String route) {\n+        return constructRouteParameter(route, false, null);\n     }\n \n-    private static Map<String, Object> idleRouteParameter(String route) {\n-        return routeParameter(route, true, null);\n+    public static Map<String, Object> idleRouteParameter(String route) {\n+        return constructRouteParameter(route, true, null);\n     }\n \n-    private static Map<String, Object> routeParameter(String route, boolean noHostname) {\n-        return routeParameter(route, false, noHostname);\n+    public static Map<String, Object> routeParameter(String route, Boolean noHostname) {\n+        return constructRouteParameter(route, false, noHostname);\n     }\n \n-    private static Map<String, Object> idleRouteParameter(String route, boolean noHostname) {\n-        return routeParameter(route, true, noHostname);\n+    public static Map<String, Object> idleRouteParameter(String route, Boolean noHostname) {\n+        return constructRouteParameter(route, true, noHostname);\n     }\n \n-    private static Map<String, Object> routeParameter(String route, boolean isIdle, Boolean noHostname) {\n+    public static Map<String, Object> constructRouteParameter(String route, boolean isIdle, Boolean noHostname) {\n         Map<String, Object> resultMap = new HashMap<>();\n \n         resultMap.put(isIdle ? SupportedParameters.IDLE_ROUTE : SupportedParameters.ROUTE, route);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1NDczMg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515154732", "bodyText": "The class also has toString()", "author": "boyan-velinov", "createdAt": "2020-10-30T14:51:48Z", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/DeleteApplicationRoutesStep.java", "diffHunk": "@@ -57,20 +58,20 @@ protected ApplicationRoutesGetter getApplicationRoutesGetter(CloudControllerClie\n         return new ApplicationRoutesGetter(client);\n     }\n \n-    private void deleteApplicationRoutes(CloudControllerClient client, List<CloudRoute> routes, String uri) {\n+    private void deleteApplicationRoutes(CloudControllerClient client, List<CloudRoute> routes, CloudRouteSummary routeSummary) {\n         try {\n-            CloudRoute route = UriUtil.findRoute(routes, uri);\n+            CloudRoute route = UriUtil.matchRoute(routes, routeSummary);\n             if (route.getAppsUsingRoute() > 1 || route.hasServiceUsingRoute()) {\n-                getStepLogger().warn(Messages.ROUTE_NOT_DELETED, uri);\n+                getStepLogger().warn(Messages.ROUTE_NOT_DELETED, routeSummary.toUriString());\n                 return;\n             }\n         } catch (NotFoundException e) {\n-            getStepLogger().debug(org.cloudfoundry.multiapps.controller.core.Messages.ROUTE_NOT_FOUND, uri);\n+            getStepLogger().debug(org.cloudfoundry.multiapps.controller.core.Messages.ROUTE_NOT_FOUND, routeSummary.toUriString());\n             return;\n         }\n-        getStepLogger().info(Messages.DELETING_ROUTE, uri);\n-        new ClientHelper(client).deleteRoute(uri);\n-        getStepLogger().debug(Messages.ROUTE_DELETED, uri);\n+        getStepLogger().info(Messages.DELETING_ROUTE, routeSummary.toUriString());\n+        new ClientHelper(client).deleteRoute(routeSummary);\n+        getStepLogger().debug(Messages.ROUTE_DELETED, routeSummary.toUriString());", "originalCommit": "2b61c57eb34579768b4c545aeed19d44085fd30d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg2OTc0MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516869740", "bodyText": "used the longer method name for clarity", "author": "ikasarov", "createdAt": "2020-11-03T18:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1NDczMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1NjE5Mg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515156192", "bodyText": "It is ok to send null or empty since it is not used.\nProbably this was the reason for passing null before.", "author": "boyan-velinov", "createdAt": "2020-10-30T14:52:52Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutePartValidator.java", "diffHunk": "@@ -22,7 +22,7 @@ public String attemptToCorrect(Object routePart, final Map<String, Object> conte\n         result = result.replaceAll(\"^(-*)\", \"\");\n         result = result.replaceAll(\"(-*)$\", \"\");\n \n-        if (!isValid(result, null)) {\n+        if (!isValid(result, context)) {", "originalCommit": "2b61c57eb34579768b4c545aeed19d44085fd30d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg2OTYwMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516869603", "bodyText": "changed it to pass the context since Kris required that as well for his changes", "author": "ikasarov", "createdAt": "2020-11-03T18:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1NjE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEzNjIxMQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r517136211", "bodyText": "Good", "author": "boyan-velinov", "createdAt": "2020-11-04T07:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1NjE5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2MTc1Mg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515161752", "bodyText": "Use directly Set.of()", "author": "boyan-velinov", "createdAt": "2020-10-30T14:59:22Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -17,11 +19,15 @@\n public class RoutesValidator implements ParameterValidator {\n \n     private final Map<String, ParameterValidator> validators;\n+    private final Set<String> supportedParamsWithoutValidators;\n \n     public RoutesValidator() {\n         this.validators = new HashMap<>();\n         ParameterValidator routeValidator = new RouteValidator();\n         this.validators.put(routeValidator.getParameterName(), routeValidator);\n+\n+        this.supportedParamsWithoutValidators = new TreeSet<>();", "originalCommit": "2b61c57eb34579768b4c545aeed19d44085fd30d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java\nindex 3c951825c..3a682773e 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java\n\n@@ -26,8 +25,7 @@ public class RoutesValidator implements ParameterValidator {\n         ParameterValidator routeValidator = new RouteValidator();\n         this.validators.put(routeValidator.getParameterName(), routeValidator);\n \n-        this.supportedParamsWithoutValidators = new TreeSet<>();\n-        this.supportedParamsWithoutValidators.add(SupportedParameters.NO_HOSTNAME);\n+        this.supportedParamsWithoutValidators = Set.of(SupportedParameters.NO_HOSTNAME);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2MjIyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515162228", "bodyText": "I think context should be renamed to routesElement because this is a private function dedicated only for this use case where we pass route entry and routesElement. However, this is my personal perception becai", "author": "boyan-velinov", "createdAt": "2020-10-30T15:00:02Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -45,9 +51,17 @@ public boolean isValid(Object routes, final Map<String, Object> context) {\n         return true;\n     }\n \n-    private boolean isElementUnsupportedOrInvalid(Entry<String, Object> entry) {\n-        ParameterValidator validator = validators.get(entry.getKey());\n-        return validator == null || !validator.isValid(entry.getValue(), null);\n+    private boolean isElementUnsupportedOrInvalid(Entry<String, Object> entry, final Map<String, Object> context) {", "originalCommit": "2b61c57eb34579768b4c545aeed19d44085fd30d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3MDI5MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516870290", "bodyText": "Changed the names, the previous ones were too generic, I agree", "author": "ikasarov", "createdAt": "2020-11-03T18:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2MjIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java\nindex 3c951825c..3a682773e 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java\n\n@@ -51,16 +49,16 @@ public class RoutesValidator implements ParameterValidator {\n         return true;\n     }\n \n-    private boolean isElementUnsupportedOrInvalid(Entry<String, Object> entry, final Map<String, Object> context) {\n-        if (supportedParamsWithoutValidators.contains(entry.getKey())) {\n+    private boolean isElementUnsupportedOrInvalid(Entry<String, Object> routeElement, final Map<String, Object> allRouteElements) {\n+        if (supportedParamsWithoutValidators.contains(routeElement.getKey())) {\n             return false;\n         }\n \n-        if (validators.containsKey(entry.getKey())) {\n-            ParameterValidator validator = validators.get(entry.getKey());            \n-            return !validator.isValid(entry.getValue(), context);\n+        if (validators.containsKey(routeElement.getKey())) {\n+            ParameterValidator validator = validators.get(routeElement.getKey());\n+            return !validator.isValid(routeElement.getValue(), allRouteElements);\n         }\n-        \n+\n         return true;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2NzE3Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515167177", "bodyText": "can you add some short description for each test", "author": "boyan-velinov", "createdAt": "2020-10-30T15:07:42Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java", "diffHunk": "@@ -19,36 +25,58 @@\n     static Stream<Arguments> getParameters() {\n         return Stream.of(\n // @formatter:off\n-            // [0]\n-            Arguments.of(\"valid-host.domain\", true, \"valid-host.domain\", null),\n             // [1]\n-            Arguments.of(\"should_correct$this$host.domain\", false, \"should-correct-this-host.domain\", null),\n+            Arguments.of(\"valid-host.domain\", null, true, \"valid-host.domain\", null),", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\nindex afb864ef4..a1445117d 100644\n--- a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\n+++ b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\n\n@@ -25,58 +19,36 @@ class RouteValidatorTest {\n     static Stream<Arguments> getParameters() {\n         return Stream.of(\n // @formatter:off\n+            // [0]\n+            Arguments.of(\"valid-host.domain\", true, \"valid-host.domain\", null),\n             // [1]\n-            Arguments.of(\"valid-host.domain\", null, true, \"valid-host.domain\", null),\n+            Arguments.of(\"should_correct$this$host.domain\", false, \"should-correct-this-host.domain\", null),\n             // [2]\n-            Arguments.of(\"should_correct$this$host.domain\", null, false, \"should-correct-this-host.domain\", null),\n-            // [3]\n-            Arguments.of(\"host_can_be_corrected.domain.com\", Boolean.FALSE, false, \"host-can-be-corrected.domain.com\", null),\n-            // [4]\n-            Arguments.of(\"doesnt.matter.com\", 1, false, null, MessageFormat.format(Messages.COULD_NOT_PARSE_BOOLEAN_FLAG, SupportedParameters.NO_HOSTNAME)),\n-            // [5]\n-            Arguments.of(\"domain_can_be_corrected.com\", Boolean.TRUE, false, \"domain-can-be-corrected.com\", null)\n+            Arguments.of(\"host_can_be_corrected.domain.com\", false, \"host-can-be-corrected.domain.com\", null)\n // @formatter:on\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"getParameters\")\n-    void testValidate(String inputRoute, Object noHostname, boolean isValid, String correctedRoute, String expectedException) {\n-        Map<String, Object> routeContext = constructContext(noHostname);\n-        try {\n-            assertEquals(isValid, validator.isValid(inputRoute, routeContext));\n-            assertNull(expectedException, \"Expected an exception but test passed!\");\n-        } catch (Exception e) {\n-            assertNotNull(expectedException, \"Didn't expect an exception, but got \" + e.getMessage());\n-            assertEquals(expectedException, e.getMessage(), \"Exception's message doesn't match up!\");\n-        }\n+    void testValidate(String inputRoute, boolean isValid, String correctedRoute, String expectedException) {\n+        assertEquals(isValid, validator.isValid(inputRoute, null));\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"getParameters\")\n-    void testAttemptToCorrect(String inputRoute, Object noHostname, boolean isValid, String correctedRoute, String expectedException) {\n+    void testAttemptToCorrect(String inputRoute, boolean isValid, String correctedRoute, String expectedException) {\n         if (!validator.canCorrect())\n             return;\n         try {\n-            Map<String, Object> routeContext = constructContext(noHostname);\n-            String result = validator.attemptToCorrect(inputRoute, routeContext);\n-            assertNull(expectedException, \"Expected an exception but test passed!\");\n+            String result = validator.attemptToCorrect(inputRoute, null);\n             assertEquals(correctedRoute, result);\n         } catch (Exception e) {\n-            assertNotNull(expectedException, \"Didn't expect an exception, but got \" + e.getMessage());\n-            assertEquals(expectedException, e.getMessage(), \"Exception's message doesn't match up!\");\n+            assertNotNull(e.getMessage(), expectedException);\n+            assertEquals(\"Exception's message doesn't match up!\", e.getMessage(), expectedException);\n         }\n     }\n \n-    private Map<String, Object> constructContext(Object noHostname) {\n-        Map<String, Object> context = new HashMap<>();\n-        if (noHostname != null) {\n-            context.put(SupportedParameters.NO_HOSTNAME, noHostname);\n-        }\n-\n-        return context;\n-    }\n-\n     @Test\n     void testCanCorrect() {\n         assertTrue(validator.canCorrect());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzODc2OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515838768", "bodyText": "getUriParametersParser should be renamed to routeParameterParser", "author": "theghost5800", "createdAt": "2020-11-02T09:26:47Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java", "diffHunk": "@@ -16,27 +15,29 @@\n import org.cloudfoundry.multiapps.mta.model.Module;\n import org.cloudfoundry.multiapps.mta.util.PropertiesUtil;\n \n-public class ApplicationUrisCloudModelBuilder {\n+import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n+\n+public class ApplicationRoutesCloudModelBuilder {\n \n     private final DeploymentDescriptor descriptor;\n     private final CloudApplicationExtended.AttributeUpdateStrategy applicationAttributeUpdateStrategy;\n \n-    public ApplicationUrisCloudModelBuilder(DeploymentDescriptor descriptor,\n-                                            CloudApplicationExtended.AttributeUpdateStrategy applicationAttributeUpdateStrategy) {\n+    public ApplicationRoutesCloudModelBuilder(DeploymentDescriptor descriptor,\n+                                              CloudApplicationExtended.AttributeUpdateStrategy applicationAttributeUpdateStrategy) {\n         this.descriptor = descriptor;\n         this.applicationAttributeUpdateStrategy = applicationAttributeUpdateStrategy;\n     }\n \n-    public List<String> getApplicationUris(Module module, List<Map<String, Object>> propertiesList,\n-                                           DeployedMtaApplication deployedApplication) {\n-        List<String> uris = getUriParametersParser(module).parse(propertiesList);\n-        if (shouldKeepExistingUris(propertiesList)) {\n-            return appendExistingUris(uris, deployedApplication);\n+    public Set<CloudRouteSummary> getApplicationRoutes(Module module, List<Map<String, Object>> propertiesList,\n+                                                       DeployedMtaApplication deployedApplication) {\n+        Set<CloudRouteSummary> routes = getUriParametersParser(module).parse(propertiesList);", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java\nindex f081a07a3..7124fdff9 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/v2/ApplicationRoutesCloudModelBuilder.java\n\n@@ -9,8 +9,8 @@ import org.cloudfoundry.multiapps.controller.client.lib.domain.CloudApplicationE\n import org.cloudfoundry.multiapps.controller.core.model.DeployedMtaApplication;\n import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters.RoutingParameterSet;\n-import org.cloudfoundry.multiapps.controller.core.parser.IdleUriParametersParser;\n-import org.cloudfoundry.multiapps.controller.core.parser.UriParametersParser;\n+import org.cloudfoundry.multiapps.controller.core.parser.IdleRouteParametersParser;\n+import org.cloudfoundry.multiapps.controller.core.parser.RouteParametersParser;\n import org.cloudfoundry.multiapps.mta.model.DeploymentDescriptor;\n import org.cloudfoundry.multiapps.mta.model.Module;\n import org.cloudfoundry.multiapps.mta.util.PropertiesUtil;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2NDU4MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515864581", "bodyText": "I think now this class should be renamed to RouteParameterParser", "author": "theghost5800", "createdAt": "2020-11-02T10:09:38Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java", "diffHunk": "@@ -9,13 +8,14 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n+import org.cloudfoundry.multiapps.common.util.MapUtil;\n import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n import org.cloudfoundry.multiapps.controller.core.util.ApplicationURI;\n-import org.cloudfoundry.multiapps.controller.core.util.UriUtil;\n import org.cloudfoundry.multiapps.controller.core.validators.parameters.RoutesValidator;\n import org.cloudfoundry.multiapps.mta.util.PropertiesUtil;\n \n-public class UriParametersParser implements ParametersParser<List<String>> {\n+public class UriParametersParser implements ParametersParser<Set<CloudRouteSummary>> {", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\nsimilarity index 90%\nrename from multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java\nrename to multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\nindex 9cbbfa105..53643726c 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\n\n@@ -15,7 +15,7 @@ import org.cloudfoundry.multiapps.controller.core.util.ApplicationURI;\n import org.cloudfoundry.multiapps.controller.core.validators.parameters.RoutesValidator;\n import org.cloudfoundry.multiapps.mta.util.PropertiesUtil;\n \n-public class UriParametersParser implements ParametersParser<Set<CloudRouteSummary>> {\n+public class RouteParametersParser implements ParametersParser<Set<CloudRouteSummary>> {\n \n     private final String defaultHost;\n     private final String defaultDomain;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MDk4NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515870984", "bodyText": "You can add that set of assembled routes is returned", "author": "theghost5800", "createdAt": "2020-11-02T10:19:57Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java", "diffHunk": "@@ -94,40 +98,57 @@ public UriParametersParser(String defaultHost, String defaultDomain, String host\n         return domains;\n     }\n \n-    private List<String> assembleUris(List<String> hosts, List<String> domains) {\n-        Set<String> uris = new LinkedHashSet<>();\n+    /**\n+     * This method is doing a DesCartesian multiplication for given hosts and domains and returns constructed routes\n+     * \n+     * @param hosts\n+     * @param domains\n+     * @return", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\nsimilarity index 90%\nrename from multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java\nrename to multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\nindex 9cbbfa105..53643726c 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\n\n@@ -103,7 +99,7 @@ public class UriParametersParser implements ParametersParser<Set<CloudRouteSumma\n      * \n      * @param hosts\n      * @param domains\n-     * @return\n+     * @return set of all routes created\n      */\n     private Set<CloudRouteSummary> assembleRoutes(List<String> hosts, List<String> domains) {\n         Set<CloudRouteSummary> routes = new LinkedHashSet<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3ODAxMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515878013", "bodyText": "Rename uris to routes", "author": "theghost5800", "createdAt": "2020-11-02T10:31:33Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java", "diffHunk": "@@ -94,40 +98,57 @@ public UriParametersParser(String defaultHost, String defaultDomain, String host\n         return domains;\n     }\n \n-    private List<String> assembleUris(List<String> hosts, List<String> domains) {\n-        Set<String> uris = new LinkedHashSet<>();\n+    /**\n+     * This method is doing a DesCartesian multiplication for given hosts and domains and returns constructed routes\n+     * \n+     * @param hosts\n+     * @param domains\n+     * @return\n+     */\n+    private Set<CloudRouteSummary> assembleRoutes(List<String> hosts, List<String> domains) {\n+        Set<CloudRouteSummary> routes = new LinkedHashSet<>();\n         for (String domain : domains) {\n             if (!hosts.isEmpty()) {\n-                addHostBasedUris(uris, domain, hosts);\n+                addHostBasedRoutes(routes, domain, hosts);\n             } else {\n-                uris.add(appendRoutePathIfPresent(domain));\n+                routes.add(buildCloudPathSummary(\"\", domain));\n             }\n         }\n \n-        return new ArrayList<>(uris);\n+        return routes;\n     }\n \n-    private void addHostBasedUris(Set<String> uris, String domain, List<String> hosts) {\n+    private void addHostBasedRoutes(Set<CloudRouteSummary> uris, String domain, List<String> hosts) {", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\nsimilarity index 90%\nrename from multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java\nrename to multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\nindex 9cbbfa105..53643726c 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/UriParametersParser.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/RouteParametersParser.java\n\n@@ -103,7 +99,7 @@ public class UriParametersParser implements ParametersParser<Set<CloudRouteSumma\n      * \n      * @param hosts\n      * @param domains\n-     * @return\n+     * @return set of all routes created\n      */\n     private Set<CloudRouteSummary> assembleRoutes(List<String> hosts, List<String> domains) {\n         Set<CloudRouteSummary> routes = new LinkedHashSet<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMTE0Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515921143", "bodyText": "Is it exist case when passed argument will be null?", "author": "theghost5800", "createdAt": "2020-11-02T11:52:24Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURI.java", "diffHunk": "@@ -41,21 +41,26 @@ public ApplicationURI(String initial) {\n         }\n     }\n \n-    public ApplicationURI(CloudRoute route) {\n-        if (route == null) {\n+    public ApplicationURI(CloudRouteSummary routeSummary) {\n+        if (routeSummary == null) {", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3NzkxOQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516877919", "bodyText": "this constructor as is is only used in tests; I don't really want to restrict it's use by removing the null value check though", "author": "ikasarov", "createdAt": "2020-11-03T18:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMTE0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyODMwOQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515928309", "bodyText": "Did we previously support routes with port in CF?", "author": "theghost5800", "createdAt": "2020-11-02T12:07:40Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURI.java", "diffHunk": "@@ -104,6 +114,15 @@ public void setURIPart(String partName, String part) {\n         }\n     }\n \n+    public CloudRouteSummary toCloudRouteSummary() {\n+        return ImmutableCloudRouteSummary.builder()\n+                                         .host(getHost())\n+                                         .domain(getDomain())\n+                                         .path(getPath())\n+                                         .port(null)", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3NTc1MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516875751", "bodyText": "yes, but have since removed it from the source; setting it to null here as the apps/summary response does contain a null port", "author": "ikasarov", "createdAt": "2020-11-03T18:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyODMwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyOTIyMQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515929221", "bodyText": "I think this method should be use private access modifier", "author": "theghost5800", "createdAt": "2020-11-02T12:09:42Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURI.java", "diffHunk": "@@ -146,6 +165,12 @@ public void setPath(String path) {\n         this.path = path;\n     }\n \n+    public void setParts(String host, String domain, String path) {", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURI.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURI.java\nindex 10a9d5edf..081c4dcf8 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURI.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURI.java\n\n@@ -165,7 +165,7 @@ public class ApplicationURI {\n         this.path = path;\n     }\n \n-    public void setParts(String host, String domain, String path) {\n+    private void setParts(String host, String domain, String path) {\n         this.host = host;\n         this.domain = domain;\n         this.path = path;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkzODgxMQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515938811", "bodyText": "Is it used the right code formatter for this class?", "author": "theghost5800", "createdAt": "2020-11-02T12:30:51Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/v2/CloudModelBuilderTest.java", "diffHunk": "@@ -44,567 +44,562 @@\n \n public class CloudModelBuilderTest {\n \n-    protected static final String DEFAULT_DOMAIN_CF = \"cfapps.neo.ondemand.com\";\n-    protected static final String DEFAULT_DOMAIN_XS = \"sofd60245639a\";\n-    protected static final AppSuffixDeterminer DEFAULT_APP_SUFFIX_DETERMINER = new AppSuffixDeterminer(false, false);\n-\n-    protected static final String DEPLOY_ID = \"123\";\n-\n-    protected final Tester tester = Tester.forClass(getClass());\n-    protected final DescriptorParser descriptorParser = getDescriptorParser();\n-    protected final ConfigurationParser configurationParser = new ConfigurationParser();\n-    protected DeploymentDescriptor deploymentDescriptor;\n-\n-    protected String deploymentDescriptorLocation;\n-    protected String extensionDescriptorLocation;\n-    protected String platformLocation;\n-    protected String deployedMtaLocation;\n-    protected String namespace;\n-    protected boolean applyNamespace;\n-    private ModulesCloudModelBuilderContentCalculator modulesCalculator;\n-    protected ModuleToDeployHelper moduleToDeployHelper;\n-    protected ResourcesCloudModelBuilderContentCalculator resourcesCalculator;\n-\n-    protected ApplicationCloudModelBuilder appBuilder;\n-    protected ServicesCloudModelBuilder servicesBuilder;\n-\n-    public static Stream<Arguments> getParameters() {\n-        return Stream.of(\n+\tprotected static final String DEFAULT_DOMAIN_CF = \"cfapps.neo.ondemand.com\";", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3ODQwMQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516878401", "bodyText": "no, mistake when switching workspaces", "author": "ikasarov", "createdAt": "2020-11-03T18:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkzODgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/v2/CloudModelBuilderTest.java b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/v2/CloudModelBuilderTest.java\nindex 9062a45ad..5c0192ae6 100644\n--- a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/v2/CloudModelBuilderTest.java\n+++ b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/v2/CloudModelBuilderTest.java\n\n@@ -44,562 +44,567 @@ import org.mockito.Mockito;\n \n public class CloudModelBuilderTest {\n \n-\tprotected static final String DEFAULT_DOMAIN_CF = \"cfapps.neo.ondemand.com\";\n-\tprotected static final String DEFAULT_DOMAIN_XS = \"sofd60245639a\";\n-\tprotected static final AppSuffixDeterminer DEFAULT_APP_SUFFIX_DETERMINER = new AppSuffixDeterminer(false, false);\n-\n-\tprotected static final String DEPLOY_ID = \"123\";\n-\n-\tprotected final Tester tester = Tester.forClass(getClass());\n-\tprotected final DescriptorParser descriptorParser = getDescriptorParser();\n-\tprotected final ConfigurationParser configurationParser = new ConfigurationParser();\n-\tprotected DeploymentDescriptor deploymentDescriptor;\n-\n-\tprotected String deploymentDescriptorLocation;\n-\tprotected String extensionDescriptorLocation;\n-\tprotected String platformLocation;\n-\tprotected String deployedMtaLocation;\n-\tprotected String namespace;\n-\tprotected boolean applyNamespace;\n-\tprivate ModulesCloudModelBuilderContentCalculator modulesCalculator;\n-\tprotected ModuleToDeployHelper moduleToDeployHelper;\n-\tprotected ResourcesCloudModelBuilderContentCalculator resourcesCalculator;\n-\n-\tprotected ApplicationCloudModelBuilder appBuilder;\n-\tprotected ServicesCloudModelBuilder servicesBuilder;\n-\n-\tprivate static Stream<Arguments> getParameters() {\n-\t\treturn Stream.of(\n+    protected static final String DEFAULT_DOMAIN_CF = \"cfapps.neo.ondemand.com\";\n+    protected static final String DEFAULT_DOMAIN_XS = \"sofd60245639a\";\n+    protected static final AppSuffixDeterminer DEFAULT_APP_SUFFIX_DETERMINER = new AppSuffixDeterminer(false, false);\n+\n+    protected static final String DEPLOY_ID = \"123\";\n+\n+    protected final Tester tester = Tester.forClass(getClass());\n+    protected final DescriptorParser descriptorParser = getDescriptorParser();\n+    protected final ConfigurationParser configurationParser = new ConfigurationParser();\n+    protected DeploymentDescriptor deploymentDescriptor;\n+\n+    protected String deploymentDescriptorLocation;\n+    protected String extensionDescriptorLocation;\n+    protected String platformLocation;\n+    protected String deployedMtaLocation;\n+    protected String namespace;\n+    protected boolean applyNamespace;\n+    private ModulesCloudModelBuilderContentCalculator modulesCalculator;\n+    protected ModuleToDeployHelper moduleToDeployHelper;\n+    protected ResourcesCloudModelBuilderContentCalculator resourcesCalculator;\n+\n+    protected ApplicationCloudModelBuilder appBuilder;\n+    protected ServicesCloudModelBuilder servicesBuilder;\n+\n+    public static Stream<Arguments> getParameters() {\n+        return Stream.of(\n // @formatter:off\n-\t\t\t\t// (01) Full MTA:\n-\t\t\t\tArguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\",\n-\t\t\t\t\t\t\"/mta/cf-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (02)\n-\t\t\t\tArguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/xs2-config.mtaext\",\n-\t\t\t\t\t\t\"/mta/xs-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/xs2-services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/xs2-apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (03) Full MTA with namespace:\n-\t\t\t\tArguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\",\n-\t\t\t\t\t\t\"/mta/cf-platform.json\", null, \"namespace1\", true,\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-ns-1.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-ns-1.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (04) Full MTA with long namespace:\n-\t\t\t\tArguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\",\n-\t\t\t\t\t\t\"/mta/cf-platform.json\", null, \"namespace2-but-it-is-really-really-long\", true,\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-ns-2.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-ns-2.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (05) Patch MTA (resolved inter-module dependencies):\n-\t\t\t\tArguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\",\n-\t\t\t\t\t\t\"/mta/cf-platform.json\", null, null, false, new String[] { \"java-hello-world\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-patch.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-patch.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (06) Patch MTA with namespaces (resolved inter-module dependencies):\n-\t\t\t\tArguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\",\n-\t\t\t\t\t\t\"/mta/cf-platform.json\", null, \"namespace\", true, new String[] { \"java-hello-world\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-patch-ns.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-patch-ns.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (07) Patch MTA (unresolved inter-module dependencies):\n-\t\t\t\tArguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\",\n-\t\t\t\t\t\t\"/mta/cf-platform.json\", null, null, false, new String[] { \"java-hello-world\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", }, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-patch.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.EXCEPTION,\n-\t\t\t\t\t\t\t\t\"Unresolved MTA modules [java-hello-world-backend, java-hello-world-db]\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (08)\n-\t\t\t\tArguments.of(\"/mta/shine/mtad.yaml\", \"/mta/shine/config.mtaext\", \"/mta/cf-platform.json\", null, null,\n-\t\t\t\t\t\tfalse, new String[] { \"shine\", \"shine-xsjs\", \"shine-odata\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"shine\", \"shine-xsjs\", \"shine-odata\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/shine/services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/shine/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (09)\n-\t\t\t\tArguments.of(\"/mta/sample/mtad.yaml\", \"/mta/sample/config.mtaext\", \"/mta/sample/platform.json\", null,\n-\t\t\t\t\t\tnull, false, new String[] { \"pricing\", \"pricing-db\", \"web-server\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"pricing\", \"pricing-db\", \"web-server\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/sample/services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/sample/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (10)\n-\t\t\t\tArguments.of(\"/mta/devxwebide/mtad.yaml\", \"/mta/devxwebide/config.mtaext\", \"/mta/cf-platform.json\",\n-\t\t\t\t\t\tnull, null, false, new String[] { \"webide\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"webide\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxwebide/services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxwebide/apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (11)\n-\t\t\t\tArguments.of(\"/mta/devxwebide/mtad.yaml\", \"/mta/devxwebide/xs2-config-1.mtaext\",\n-\t\t\t\t\t\t\"/mta/xs-platform.json\", null, null, false, new String[] { \"webide\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"webide\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxwebide/services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxwebide/xs2-apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (12)\n-\t\t\t\tArguments.of(\"/mta/devxdi/mtad.yaml\", \"/mta/devxdi/config.mtaext\", \"/mta/cf-platform.json\", null, null,\n-\t\t\t\t\t\tfalse, new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxdi/services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxdi/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (13)\n-\t\t\t\tArguments.of(\"/mta/devxdi/mtad.yaml\", \"/mta/devxdi/xs2-config-1.mtaext\", \"/mta/xs-platform.json\", null,\n-\t\t\t\t\t\tnull, false, new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxdi/xs2-services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxdi/xs2-apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (14)\n-\t\t\t\tArguments.of(\"/mta/devxwebide/mtad.yaml\", \"/mta/devxwebide/xs2-config-2.mtaext\",\n-\t\t\t\t\t\t\"/mta/xs-platform.json\", null, null, false, new String[] { \"webide\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"webide\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxwebide/services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxwebide/xs2-apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (15) Unknown typed resource parameters:\n-\t\t\t\tArguments.of(\"/mta/devxdi/mtad.yaml\", \"/mta/devxdi/xs2-config-2.mtaext\", \"/mta/xs-platform.json\", null,\n-\t\t\t\t\t\tnull, false, new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxdi/xs2-services.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/devxdi/xs2-apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (16) Service binding parameters in requires dependency:\n-\t\t\t\tArguments.of(\"mtad-01.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"apps-01.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (17) Service binding parameters in requires dependency:\n-\t\t\t\tArguments.of(\"mtad-02.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.EXCEPTION,\n-\t\t\t\t\t\t\t\t\"Invalid type for key \\\"foo#bar#config\\\", expected \\\"Map\\\" but got \\\"String\\\"\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (18) Custom application names are used:\n-\t\t\t\tArguments.of(\"mtad-03.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"apps-02.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (19) Custom application names are used:\n-\t\t\t\tArguments.of(\"mtad-03.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, \"something\", true,\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"apps-03.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (20) Temporary URIs are used:\n-\t\t\t\tArguments.of(\"mtad-05.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"apps-05.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (21) Use list parameter:\n-\t\t\t\tArguments.of(\"mtad-06.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"framework\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"framework\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"apps-06.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (22) Use partial plugin:\n-\t\t\t\tArguments.of(\"mtad-07.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"framework\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"framework\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"apps-07.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (23) Overwrite service-name resource property in ext. descriptor:\n-\t\t\t\tArguments.of(\"mtad-08.yaml\", \"config-03.mtaext\", \"/mta/xs-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"module-1\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"module-1\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"services-03.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-08.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (24) Test support for one-off tasks:\n-\t\t\t\tArguments.of(\"mtad-09.yaml\", \"config-03.mtaext\", \"/mta/xs-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\", \"module-3\", \"module-4\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\", \"module-3\", \"module-4\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"apps-09.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (25) With 'health-check-type' set to 'port':\n-\t\t\t\tArguments.of(\"mtad-health-check-type-port.yaml\", \"config-03.mtaext\", \"/mta/xs-platform.json\", null,\n-\t\t\t\t\t\tnull, false, new String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-with-health-check-type-port.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (26) With 'health-check-type' set to 'http' and a non-default\n-\t\t\t\t// 'health-check-http-endpoint':\n-\t\t\t\tArguments.of(\"mtad-health-check-type-http-with-endpoint.yaml\", \"config-03.mtaext\",\n-\t\t\t\t\t\t\"/mta/xs-platform.json\", null, null, false, new String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-with-health-check-type-http-with-endpoint.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (27) With 'health-check-type' set to 'http' and no\n-\t\t\t\t// 'health-check-http-endpoint':\n-\t\t\t\tArguments.of(\"mtad-health-check-type-http-without-endpoint.yaml\", \"config-03.mtaext\",\n-\t\t\t\t\t\t\"/mta/xs-platform.json\", null, null, false, new String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON,\n-\t\t\t\t\t\t\t\t\"apps-with-health-check-type-http-without-endpoint.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (28) Test inject service keys:\n-\t\t\t\tArguments.of(\"mtad-10.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"module-1\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"module-1\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"apps-10.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (29) With 'enable-ssh' set to true:\n-\t\t\t\tArguments.of(\"mtad-ssh-enabled-true.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null,\n-\t\t\t\t\t\tfalse, new String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-with-ssh-enabled-true.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (30) With 'enable-ssh' set to false:\n-\t\t\t\tArguments.of(\"mtad-ssh-enabled-false.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null,\n-\t\t\t\t\t\tfalse, new String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-with-ssh-enabled-false.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (31) Do not restart on env change - bg-deploy\n-\t\t\t\tArguments.of(\"mtad-restart-on-env-change.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null,\n-\t\t\t\t\t\tfalse, new String[] { \"module-1\", \"module-2\", \"module-3\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"module-1\", \"module-2\", \"module-3\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-with-restart-parameters-false.json\") // services\n-\t\t\t\t\t\t, DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (32) With 'keep-existing-routes' set to true and no deployed MTA:\n-\t\t\t\tArguments.of(\"keep-existing-routes/mtad.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null, null,\n-\t\t\t\t\t\tfalse, new String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (33) With 'keep-existing-routes' set to true and no deployed module:\n-\t\t\t\tArguments.of(\"keep-existing-routes/mtad.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\",\n-\t\t\t\t\t\t\"keep-existing-routes/deployed-mta-without-foo-module.json\", null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (34) With 'keep-existing-routes' set to true and an already deployed module\n-\t\t\t\t// with no URIs:\n-\t\t\t\tArguments.of(\"keep-existing-routes/mtad.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\",\n-\t\t\t\t\t\t\"keep-existing-routes/deployed-mta-without-routes.json\", null, false, new String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), new Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (35) With 'keep-existing-routes' set to true and an already deployed module:\n-\t\t\t\tArguments.of(\"keep-existing-routes/mtad.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\",\n-\t\t\t\t\t\t\"keep-existing-routes/deployed-mta.json\", null, false, new String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps-with-existing-routes.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (36) With global 'keep-existing-routes' set to true and an already deployed\n-\t\t\t\t// module:\n-\t\t\t\tArguments.of(\"keep-existing-routes/mtad-with-global-parameter.yaml\", \"config-02.mtaext\",\n-\t\t\t\t\t\t\"/mta/xs-platform.json\", \"keep-existing-routes/deployed-mta.json\", null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps-with-existing-routes.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (37) With new parameter - 'route'\n-\t\t\t\tArguments.of(\"mtad-12.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), // services\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-12.json\") // applications\n-\t\t\t\t\t\t, DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (38) With new parameter - 'routes'\n-\t\t\t\tArguments.of(\"mtad-13.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), // services\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-13.json\") // applications\n-\t\t\t\t\t\t, DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (39) Test plural priority over singular for hosts and domains\n-\t\t\t\tArguments.of(\"mtad-14.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), // services\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-14.json\") // applications\n-\t\t\t\t\t\t, DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (40) Test multiple buildpacks functionality\n-\t\t\t\tArguments.of(\"mtad-15.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), // services\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-15.json\") // applications\n-\t\t\t\t\t\t, DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (41) Full MTA with namespace, global apply flag set to false:\n-\t\t\t\tArguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\",\n-\t\t\t\t\t\t\"/mta/cf-platform.json\", null, \"namespace3\", false,\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-ns-3.json\"),\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-ns-3.json\"),\n-\t\t\t\t\t\tDEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (42) Test app-name parameter resolution:\n-\t\t\t\tArguments.of(\"mtad-16.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null, null, false,\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), // services\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-16.json\") // applications\n-\t\t\t\t\t\t, new AppSuffixDeterminer(true, true)),\n-\t\t\t\t// (43) With hostless routes\n-\t\t\t\tArguments.of(\"mtad-routes-with-nohostname.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null,\n-\t\t\t\t\t\tnull, false, new String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), // services\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"apps-with-nohostname.json\") // applications\n-\t\t\t\t\t\t, DEFAULT_APP_SUFFIX_DETERMINER),\n-\t\t\t\t// (44) With hostless routes and existing mta\n-\t\t\t\tArguments.of(\"keep-existing-routes/mtad-routes-with-nohostname.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\",\n-\t\t\t\t\t\t\"keep-existing-routes/deployed-mta.json\", null, false, new String[] { \"foo\", }, // mtaArchiveModules\n-\t\t\t\t\t\tnew String[] { \"foo\", }, // mtaModules\n-\t\t\t\t\t\tnew String[] {}, // deployedApps\n-\t\t\t\t\t\tnew Expectation(\"[]\"), // services\n-\t\t\t\t\t\tnew Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps-with-nohostname.json\") // applications\n-\t\t\t\t\t\t, DEFAULT_APP_SUFFIX_DETERMINER)\n+            // (00) Full MTA:\n+            Arguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (01)\n+           Arguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/xs2-config.mtaext\", \"/mta/xs-platform.json\", null,\n+                   null, false,\n+                   new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n+                   new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n+                   new String[] {}, // deployedApps\n+                   new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/xs2-services.json\"),\n+                   new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/xs2-apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (02) Full MTA with namespace:\n+            Arguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                   \"namespace1\", true,\n+                   new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n+                   new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n+                   new String[] {}, // deployedApps\n+                   new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-ns-1.json\"),\n+                   new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-ns-1.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (03) Full MTA with long namespace:\n+            Arguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                    \"namespace2-but-it-is-really-really-long\", true,\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-ns-2.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-ns-2.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (04) Patch MTA (resolved inter-module dependencies):\n+            Arguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"java-hello-world\" }, // mtaArchiveModules\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-patch.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-patch.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (05) Patch MTA with namespaces (resolved inter-module dependencies):\n+            Arguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                    \"namespace\", true,\n+                    new String[] { \"java-hello-world\" }, // mtaArchiveModules\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-patch-ns.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-patch-ns.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+           // (06) Patch MTA (unresolved inter-module dependencies):\n+           Arguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                   null, false,\n+                   new String[] { \"java-hello-world\" }, // mtaArchiveModules\n+                   new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n+                   new String[] { \"java-hello-world\", }, // deployedApps\n+                   new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-patch.json\"),\n+                   new Expectation(Expectation.Type.EXCEPTION, \"Unresolved MTA modules [java-hello-world-backend, java-hello-world-db]\"),\n+                   DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (07)\n+            Arguments.of(\"/mta/shine/mtad.yaml\", \"/mta/shine/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"shine\", \"shine-xsjs\", \"shine-odata\" }, // mtaArchiveModules\n+                    new String[] { \"shine\", \"shine-xsjs\", \"shine-odata\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/shine/services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/shine/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (08)\n+            Arguments.of(\"/mta/sample/mtad.yaml\", \"/mta/sample/config.mtaext\", \"/mta/sample/platform.json\", null,\n+                    null, false,\n+                    new String[] { \"pricing\", \"pricing-db\", \"web-server\" }, // mtaArchiveModules\n+                    new String[] { \"pricing\", \"pricing-db\", \"web-server\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/sample/services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/sample/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (09)\n+            Arguments.of(\"/mta/devxwebide/mtad.yaml\", \"/mta/devxwebide/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"webide\" }, // mtaArchiveModules\n+                    new String[] { \"webide\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxwebide/services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxwebide/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (10)\n+            Arguments.of(\"/mta/devxwebide/mtad.yaml\", \"/mta/devxwebide/xs2-config-1.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"webide\" }, // mtaArchiveModules\n+                    new String[] { \"webide\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxwebide/services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxwebide/xs2-apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (11)\n+            Arguments.of(\"/mta/devxdi/mtad.yaml\", \"/mta/devxdi/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaArchiveModules\n+                    new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxdi/services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxdi/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (12)\n+            Arguments.of(\"/mta/devxdi/mtad.yaml\", \"/mta/devxdi/xs2-config-1.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaArchiveModules\n+                    new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxdi/xs2-services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxdi/xs2-apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (13)\n+            Arguments.of(\"/mta/devxwebide/mtad.yaml\", \"/mta/devxwebide/xs2-config-2.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"webide\" }, // mtaArchiveModules\n+                    new String[] { \"webide\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxwebide/services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxwebide/xs2-apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (14) Unknown typed resource parameters:\n+            Arguments.of(\"/mta/devxdi/mtad.yaml\", \"/mta/devxdi/xs2-config-2.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaArchiveModules\n+                    new String[] { \"di-core\", \"di-builder\", \"di-runner\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxdi/xs2-services.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/devxdi/xs2-apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (15) Service binding parameters in requires dependency:\n+            Arguments.of(\"mtad-01.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\", }, // mtaArchiveModules\n+                    new String[] { \"foo\", }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-01.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (16) Service binding parameters in requires dependency:\n+            Arguments.of(\"mtad-02.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\", }, // mtaArchiveModules\n+                    new String[] { \"foo\", }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.EXCEPTION, \"Invalid type for key \\\"foo#bar#config\\\", expected \\\"Map\\\" but got \\\"String\\\"\"),\n+                    DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (17) Custom application names are used:\n+            Arguments.of(\"mtad-03.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"module-1\", \"module-2\" }, // mtaArchiveModules\n+                    new String[] { \"module-1\", \"module-2\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-02.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (18) Custom application names are used:\n+            Arguments.of(\"mtad-03.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    \"something\", true,\n+                    new String[] { \"module-1\", \"module-2\" }, // mtaArchiveModules\n+                    new String[] { \"module-1\", \"module-2\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-03.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (19) Temporary URIs are used:\n+            Arguments.of(\"mtad-05.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"module-1\", \"module-2\" }, // mtaArchiveModules\n+                    new String[] { \"module-1\", \"module-2\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-05.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (20) Use list parameter:\n+            Arguments.of(\"mtad-06.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"framework\" }, // mtaArchiveModules\n+                    new String[] { \"framework\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-06.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (21) Use partial plugin:\n+            Arguments.of(\"mtad-07.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"framework\" }, // mtaArchiveModules\n+                    new String[] { \"framework\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-07.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (22) Overwrite service-name resource property in ext. descriptor:\n+            Arguments.of(\"mtad-08.yaml\", \"config-03.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"module-1\" }, // mtaArchiveModules\n+                    new String[] { \"module-1\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"services-03.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-08.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (23) Test support for one-off tasks:\n+            Arguments.of(\"mtad-09.yaml\", \"config-03.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"module-1\", \"module-2\", \"module-3\", \"module-4\" }, // mtaArchiveModules\n+                    new String[] { \"module-1\", \"module-2\", \"module-3\", \"module-4\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-09.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (24) With 'health-check-type' set to 'port':\n+            Arguments.of(\"mtad-health-check-type-port.yaml\", \"config-03.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-with-health-check-type-port.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (25) With 'health-check-type' set to 'http' and a non-default 'health-check-http-endpoint':\n+            Arguments.of(\"mtad-health-check-type-http-with-endpoint.yaml\", \"config-03.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-with-health-check-type-http-with-endpoint.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (26) With 'health-check-type' set to 'http' and no 'health-check-http-endpoint':\n+            Arguments.of(\"mtad-health-check-type-http-without-endpoint.yaml\", \"config-03.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-with-health-check-type-http-without-endpoint.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (27) Test inject service keys:\n+            Arguments.of(\"mtad-10.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"module-1\" }, // mtaArchiveModules\n+                    new String[] { \"module-1\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-10.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (28) With 'enable-ssh' set to true:\n+            Arguments.of(\"mtad-ssh-enabled-true.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-with-ssh-enabled-true.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (29) With 'enable-ssh' set to false:\n+            Arguments.of(\"mtad-ssh-enabled-false.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-with-ssh-enabled-false.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (30) Do not restart on env change - bg-deploy\n+            Arguments.of(\"mtad-restart-on-env-change.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"module-1\", \"module-2\", \"module-3\" }, // mtaArchiveModules\n+                    new String[] { \"module-1\", \"module-2\", \"module-3\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"apps-with-restart-parameters-false.json\") // services\n+                    , DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (31) With 'keep-existing-routes' set to true and no deployed MTA:\n+            Arguments.of(\"keep-existing-routes/mtad.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (32) With 'keep-existing-routes' set to true and no deployed module:\n+            Arguments.of(\"keep-existing-routes/mtad.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\",\n+                    \"keep-existing-routes/deployed-mta-without-foo-module.json\",\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (33) With 'keep-existing-routes' set to true and an already deployed module with no URIs:\n+            Arguments.of(\"keep-existing-routes/mtad.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\",\n+                    \"keep-existing-routes/deployed-mta-without-uris.json\",\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (34) With 'keep-existing-routes' set to true and an already deployed module:\n+            Arguments.of(\"keep-existing-routes/mtad.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\",\n+                    \"keep-existing-routes/deployed-mta.json\",\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps-with-existing-routes.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (35) With global 'keep-existing-routes' set to true and an already deployed module:\n+            Arguments.of(\"keep-existing-routes/mtad-with-global-parameter.yaml\", \"config-02.mtaext\", \"/mta/xs-platform.json\",\n+                    \"keep-existing-routes/deployed-mta.json\",\n+                    null, false,\n+                    new String[] { \"foo\" }, // mtaArchiveModules\n+                    new String[] { \"foo\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"),\n+                    new Expectation(Expectation.Type.JSON, \"keep-existing-routes/apps-with-existing-routes.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (36) With new parameter - 'route'\n+            Arguments.of(\"mtad-12.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\", }, // mtaArchiveModules\n+                    new String[] { \"foo\", }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"), //services\n+                    new Expectation(Expectation.Type.JSON, \"apps-12.json\")  //applications\n+                    , DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (37) With new parameter - 'routes'\n+            Arguments.of(\"mtad-13.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\", }, // mtaArchiveModules\n+                    new String[] { \"foo\", }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"), //services\n+                    new Expectation(Expectation.Type.JSON, \"apps-13.json\")  //applications\n+                    , DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (38) Test plural priority over singular for hosts and domains\n+            Arguments.of(\"mtad-14.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\", }, // mtaArchiveModules\n+                    new String[] { \"foo\", }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"), //services\n+                    new Expectation(Expectation.Type.JSON, \"apps-14.json\")  //applications\n+                    , DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (39) Test multiple buildpacks functionality\n+            Arguments.of(\"mtad-15.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\", }, // mtaArchiveModules\n+                    new String[] { \"foo\", }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"), //services\n+                    new Expectation(Expectation.Type.JSON, \"apps-15.json\")  //applications\n+                    , DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (40) Full MTA with namespace, global apply flag set to false:\n+            Arguments.of(\"/mta/javahelloworld/mtad.yaml\", \"/mta/javahelloworld/config.mtaext\", \"/mta/cf-platform.json\", null,\n+                    \"namespace3\", false,\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaArchiveModules\n+                    new String[] { \"java-hello-world\", \"java-hello-world-db\", \"java-hello-world-backend\" }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/services-ns-3.json\"),\n+                    new Expectation(Expectation.Type.JSON, \"/mta/javahelloworld/apps-ns-3.json\"), DEFAULT_APP_SUFFIX_DETERMINER),\n+            // (41) Test app-name parameter resolution:\n+            Arguments.of(\"mtad-16.yaml\", \"config-01.mtaext\", \"/mta/cf-platform.json\", null,\n+                    null, false,\n+                    new String[] { \"foo\", }, // mtaArchiveModules\n+                    new String[] { \"foo\", }, // mtaModules\n+                    new String[] {}, // deployedApps\n+                    new Expectation(\"[]\"), //services\n+                    new Expectation(Expectation.Type.JSON, \"apps-16.json\")  //applications\n+                    , new AppSuffixDeterminer(true, true))\n // @formatter:on\n-\t\t);\n-\t}\n-\n-\tprotected UserMessageLogger getUserMessageLogger() {\n-\t\treturn null;\n-\t}\n-\n-\tprotected DescriptorParser getDescriptorParser() {\n-\t\treturn getHandlerFactory().getDescriptorParser();\n-\t}\n-\n-\tprotected CloudHandlerFactory getHandlerFactory() {\n-\t\treturn CloudHandlerFactory.forSchemaVersion(2);\n-\t}\n-\n-\tprotected Map<String, Object> getParameters(Module module) {\n-\t\treturn module.getParameters();\n-\t}\n-\n-\tprotected ServicesCloudModelBuilder getServicesCloudModelBuilder(DeploymentDescriptor deploymentDescriptor) {\n-\t\treturn new ServicesCloudModelBuilder(deploymentDescriptor, namespace);\n-\t}\n-\n-\tprotected ApplicationCloudModelBuilder getApplicationCloudModelBuilder(DeploymentDescriptor deploymentDescriptor,\n-\t\t\tboolean prettyPrinting, DeployedMta deployedMta, AppSuffixDeterminer appSuffixDeterminer) {\n-\t\tdeploymentDescriptor = new DescriptorReferenceResolver(deploymentDescriptor, new ResolverBuilder(),\n-\t\t\t\tnew ResolverBuilder()).resolve();\n-\t\treturn new ApplicationCloudModelBuilder.Builder().deploymentDescriptor(deploymentDescriptor)\n-\t\t\t\t.prettyPrinting(prettyPrinting).deployedMta(deployedMta).deployId(DEPLOY_ID).namespace(namespace)\n-\t\t\t\t.userMessageLogger(Mockito.mock(UserMessageLogger.class)).appSuffixDeterminer(appSuffixDeterminer)\n-\t\t\t\t.build();\n-\t}\n-\n-\tprotected PlatformMerger getPlatformMerger(Platform platform) {\n-\t\treturn getHandlerFactory().getPlatformMerger(platform);\n-\t}\n-\n-\tprotected DescriptorMerger getDescriptorMerger() {\n-\t\treturn new DescriptorMerger();\n-\t}\n-\n-\tprivate DeploymentDescriptor loadDeploymentDescriptor() {\n-\t\tInputStream deploymentDescriptorYaml = getClass().getResourceAsStream(deploymentDescriptorLocation);\n-\t\tMap<String, Object> deploymentDescriptorMap = new YamlParser().convertYamlToMap(deploymentDescriptorYaml);\n-\t\treturn descriptorParser.parseDeploymentDescriptor(deploymentDescriptorMap);\n-\t}\n-\n-\tprivate ExtensionDescriptor loadExtensionDescriptor() {\n-\t\tInputStream extensionDescriptorYaml = getClass().getResourceAsStream(extensionDescriptorLocation);\n-\t\tMap<String, Object> extensionDescriptorMap = new YamlParser().convertYamlToMap(extensionDescriptorYaml);\n-\t\treturn descriptorParser.parseExtensionDescriptor(extensionDescriptorMap);\n-\t}\n-\n-\tprivate Platform loadPlatform() {\n-\t\tInputStream platformJson = getClass().getResourceAsStream(platformLocation);\n-\t\treturn configurationParser.parsePlatformJson(platformJson);\n-\t}\n-\n-\tprivate DeployedMta loadDeployedMta() throws IOException {\n-\t\tif (deployedMtaLocation == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tInputStream deployedMtaStream = getClass().getResourceAsStream(deployedMtaLocation);\n-\t\tString deployedMtaJson = IOUtils.toString(deployedMtaStream, StandardCharsets.UTF_8);\n-\t\treturn JsonUtil.fromJson(deployedMtaJson, DeployedMta.class);\n-\t}\n-\n-\tprotected void insertProperNames(DeploymentDescriptor descriptor) {\n-\t\tinsertProperAppNames(descriptor);\n-\t\tinsertProperServiceNames(descriptor);\n-\t}\n-\n-\tprivate void insertProperAppNames(DeploymentDescriptor descriptor) {\n-\t\tfor (Module module : descriptor.getModules()) {\n-\t\t\tString appName = computeAppName(module);\n-\t\t\tMap<String, Object> parameters = new TreeMap<>(module.getParameters());\n-\t\t\tparameters.put(SupportedParameters.APP_NAME, appName);\n-\t\t\tmodule.setParameters(parameters);\n-\t\t}\n-\t}\n-\n-\tprivate void insertProperServiceNames(DeploymentDescriptor descriptor) {\n-\t\tfor (Resource resource : descriptor.getResources()) {\n-\t\t\tString serviceName = computeServiceName(resource);\n-\t\t\tMap<String, Object> parameters = new TreeMap<>(resource.getParameters());\n-\t\t\tparameters.put(SupportedParameters.SERVICE_NAME, serviceName);\n-\t\t\tresource.setParameters(parameters);\n-\t\t}\n-\t}\n-\n-\tprivate String computeAppName(Module module) {\n-\t\tString appName = NameUtil.getApplicationName(module);\n-\t\tappName = appName != null ? appName : module.getName();\n-\t\treturn NameUtil.computeValidApplicationName(appName, namespace, applyNamespace);\n-\t}\n-\n-\tprivate String computeServiceName(Resource resource) {\n-\t\tString serviceName = NameUtil.getServiceName(resource);\n-\t\tserviceName = serviceName != null ? serviceName : resource.getName();\n-\t\treturn NameUtil.computeValidServiceName(serviceName, namespace, applyNamespace);\n-\t}\n-\n-\tprotected String getDefaultDomain(String targetName) {\n-\t\treturn targetName.equals(\"CLOUD-FOUNDRY\") ? DEFAULT_DOMAIN_CF : DEFAULT_DOMAIN_XS;\n-\t}\n-\n-\tprotected void injectSystemParameters(DeploymentDescriptor descriptor, String defaultDomain) {\n-\t\tMap<String, Object> generalSystemParameters = Map.of(SupportedParameters.DEFAULT_DOMAIN, defaultDomain);\n-\t\tdescriptor.setParameters(MapUtil.merge(generalSystemParameters, descriptor.getParameters()));\n-\t\tfor (Module module : descriptor.getModules()) {\n-\t\t\tMap<String, Object> moduleSystemParameters = Map.of(SupportedParameters.DEFAULT_HOST, module.getName());\n-\t\t\tmodule.setParameters(MapUtil.merge(moduleSystemParameters, module.getParameters()));\n-\t\t}\n-\t}\n-\n-\t@ParameterizedTest\n-\t@MethodSource(\"getParameters\")\n-\tvoid testGetApplications(String deploymentDescriptorLocation, String extensionDescriptorLocation,\n-\t\t\tString platformsLocation, String deployedMtaLocation, String namespace, boolean applyNamespace,\n-\t\t\tString[] mtaArchiveModules, String[] mtaModules, String[] deployedApps, Expectation expectedServices,\n-\t\t\tExpectation expectedApps, AppSuffixDeterminer appSuffixDeterminer) throws Exception {\n-\t\tinitializeParameters(deploymentDescriptorLocation, extensionDescriptorLocation, platformsLocation,\n-\t\t\t\tdeployedMtaLocation, namespace, applyNamespace, mtaArchiveModules, mtaModules, deployedApps,\n-\t\t\t\tappSuffixDeterminer);\n-\t\ttester.test(\n-\t\t\t\t() -> modulesCalculator.calculateContentForBuilding(deploymentDescriptor.getModules()).stream()\n-\t\t\t\t\t\t.map(module -> appBuilder.build(module, moduleToDeployHelper)).collect(Collectors.toList()),\n-\t\t\t\texpectedApps);\n-\t}\n-\n-\t@ParameterizedTest\n-\t@MethodSource(\"getParameters\")\n-\tvoid testGetServices(String deploymentDescriptorLocation, String extensionDescriptorLocation,\n-\t\t\tString platformsLocation, String deployedMtaLocation, String namespace, boolean applyNamespace,\n-\t\t\tString[] mtaArchiveModules, String[] mtaModules, String[] deployedApps, Expectation expectedServices,\n-\t\t\tExpectation expectedApps, AppSuffixDeterminer appSuffixDeterminer) throws Exception {\n-\t\tinitializeParameters(deploymentDescriptorLocation, extensionDescriptorLocation, platformsLocation,\n-\t\t\t\tdeployedMtaLocation, namespace, applyNamespace, mtaArchiveModules, mtaModules, deployedApps,\n-\t\t\t\tappSuffixDeterminer);\n-\t\ttester.test(\n-\t\t\t\t() -> servicesBuilder\n-\t\t\t\t\t\t.build(resourcesCalculator.calculateContentForBuilding(deploymentDescriptor.getResources())),\n-\t\t\t\texpectedServices);\n-\t}\n-\n-\tprotected void initializeParameters(String deploymentDescriptorLocation, String extensionDescriptorLocation,\n-\t\t\tString platformsLocation, String deployedMtaLocation, String namespace, boolean applyNamespace,\n-\t\t\tString[] mtaArchiveModules, String[] mtaModules, String[] deployedApps,\n-\t\t\tAppSuffixDeterminer appSuffixDeterminer) throws Exception {\n-\t\tthis.deploymentDescriptorLocation = deploymentDescriptorLocation;\n-\t\tthis.extensionDescriptorLocation = extensionDescriptorLocation;\n-\t\tthis.platformLocation = platformsLocation;\n-\t\tthis.deployedMtaLocation = deployedMtaLocation;\n-\t\tthis.namespace = namespace;\n-\t\tthis.applyNamespace = applyNamespace;\n-\t\tdeploymentDescriptor = loadDeploymentDescriptor();\n-\t\tExtensionDescriptor extensionDescriptor = loadExtensionDescriptor();\n-\t\tPlatform platform = loadPlatform();\n-\t\tDeployedMta deployedMta = loadDeployedMta();\n-\t\tdeploymentDescriptor = getDescriptorMerger().merge(deploymentDescriptor, List.of(extensionDescriptor));\n-\t\tPlatformMerger platformMerger = getPlatformMerger(platform);\n-\t\tplatformMerger.mergeInto(deploymentDescriptor);\n-\t\tString defaultDomain = getDefaultDomain(platform.getName());\n-\t\tinsertProperNames(deploymentDescriptor);\n-\t\tinjectSystemParameters(deploymentDescriptor, defaultDomain);\n-\t\tappBuilder = getApplicationCloudModelBuilder(deploymentDescriptor, false, deployedMta, appSuffixDeterminer);\n-\t\tservicesBuilder = getServicesCloudModelBuilder(deploymentDescriptor);\n-\t\tmodulesCalculator = getModulesCalculator(Set.of(mtaArchiveModules), Set.of(mtaModules), Set.of(deployedApps));\n-\t\tmoduleToDeployHelper = new ModuleToDeployHelper();\n-\t\tresourcesCalculator = new ResourcesCloudModelBuilderContentCalculator(null, getUserMessageLogger());\n-\t}\n-\n-\tprivate ModulesCloudModelBuilderContentCalculator getModulesCalculator(Set<String> mtaArchiveModules,\n-\t\t\tSet<String> mtaModules, Set<String> deployedApps) {\n-\t\treturn new ModulesCloudModelBuilderContentCalculator(mtaArchiveModules, deployedApps, null,\n-\t\t\t\tgetUserMessageLogger(), new ModuleToDeployHelper(),\n-\t\t\t\tList.of(new UnresolvedModulesContentValidator(mtaModules, deployedApps)));\n-\t}\n+        );\n+    }\n+\n+    protected UserMessageLogger getUserMessageLogger() {\n+        return null;\n+    }\n+\n+    protected DescriptorParser getDescriptorParser() {\n+        return getHandlerFactory().getDescriptorParser();\n+    }\n+\n+    protected CloudHandlerFactory getHandlerFactory() {\n+        return CloudHandlerFactory.forSchemaVersion(2);\n+    }\n+\n+    protected Map<String, Object> getParameters(Module module) {\n+        return module.getParameters();\n+    }\n+\n+    protected ServicesCloudModelBuilder getServicesCloudModelBuilder(DeploymentDescriptor deploymentDescriptor) {\n+        return new ServicesCloudModelBuilder(deploymentDescriptor, namespace);\n+    }\n+\n+    protected ApplicationCloudModelBuilder getApplicationCloudModelBuilder(DeploymentDescriptor deploymentDescriptor,\n+                                                                           boolean prettyPrinting, DeployedMta deployedMta,\n+                                                                           AppSuffixDeterminer appSuffixDeterminer) {\n+        deploymentDescriptor = new DescriptorReferenceResolver(deploymentDescriptor,\n+                                                               new ResolverBuilder(),\n+                                                               new ResolverBuilder()).resolve();\n+        return new ApplicationCloudModelBuilder.Builder().deploymentDescriptor(deploymentDescriptor)\n+                                                         .prettyPrinting(prettyPrinting)\n+                                                         .deployedMta(deployedMta)\n+                                                         .deployId(DEPLOY_ID)\n+                                                         .namespace(namespace)\n+                                                         .userMessageLogger(Mockito.mock(UserMessageLogger.class))\n+                                                         .appSuffixDeterminer(appSuffixDeterminer)\n+                                                         .build();\n+    }\n+\n+    protected PlatformMerger getPlatformMerger(Platform platform) {\n+        return getHandlerFactory().getPlatformMerger(platform);\n+    }\n+\n+    protected DescriptorMerger getDescriptorMerger() {\n+        return new DescriptorMerger();\n+    }\n+\n+    private DeploymentDescriptor loadDeploymentDescriptor() {\n+        InputStream deploymentDescriptorYaml = getClass().getResourceAsStream(deploymentDescriptorLocation);\n+        Map<String, Object> deploymentDescriptorMap = new YamlParser().convertYamlToMap(deploymentDescriptorYaml);\n+        return descriptorParser.parseDeploymentDescriptor(deploymentDescriptorMap);\n+    }\n+\n+    private ExtensionDescriptor loadExtensionDescriptor() {\n+        InputStream extensionDescriptorYaml = getClass().getResourceAsStream(extensionDescriptorLocation);\n+        Map<String, Object> extensionDescriptorMap = new YamlParser().convertYamlToMap(extensionDescriptorYaml);\n+        return descriptorParser.parseExtensionDescriptor(extensionDescriptorMap);\n+    }\n+\n+    private Platform loadPlatform() {\n+        InputStream platformJson = getClass().getResourceAsStream(platformLocation);\n+        return configurationParser.parsePlatformJson(platformJson);\n+    }\n+\n+    private DeployedMta loadDeployedMta() throws IOException {\n+        if (deployedMtaLocation == null) {\n+            return null;\n+        }\n+        InputStream deployedMtaStream = getClass().getResourceAsStream(deployedMtaLocation);\n+        String deployedMtaJson = IOUtils.toString(deployedMtaStream, StandardCharsets.UTF_8);\n+        return JsonUtil.fromJson(deployedMtaJson, DeployedMta.class);\n+    }\n+\n+    protected void insertProperNames(DeploymentDescriptor descriptor) {\n+        insertProperAppNames(descriptor);\n+        insertProperServiceNames(descriptor);\n+    }\n+\n+    private void insertProperAppNames(DeploymentDescriptor descriptor) {\n+        for (Module module : descriptor.getModules()) {\n+            String appName = computeAppName(module);\n+            Map<String, Object> parameters = new TreeMap<>(module.getParameters());\n+            parameters.put(SupportedParameters.APP_NAME, appName);\n+            module.setParameters(parameters);\n+        }\n+    }\n+\n+    private void insertProperServiceNames(DeploymentDescriptor descriptor) {\n+        for (Resource resource : descriptor.getResources()) {\n+            String serviceName = computeServiceName(resource);\n+            Map<String, Object> parameters = new TreeMap<>(resource.getParameters());\n+            parameters.put(SupportedParameters.SERVICE_NAME, serviceName);\n+            resource.setParameters(parameters);\n+        }\n+    }\n+\n+    private String computeAppName(Module module) {\n+        String appName = NameUtil.getApplicationName(module);\n+        appName = appName != null ? appName : module.getName();\n+        return NameUtil.computeValidApplicationName(appName, namespace, applyNamespace);\n+    }\n+\n+    private String computeServiceName(Resource resource) {\n+        String serviceName = NameUtil.getServiceName(resource);\n+        serviceName = serviceName != null ? serviceName : resource.getName();\n+        return NameUtil.computeValidServiceName(serviceName, namespace, applyNamespace);\n+    }\n+\n+    protected String getDefaultDomain(String targetName) {\n+        return targetName.equals(\"CLOUD-FOUNDRY\") ? DEFAULT_DOMAIN_CF : DEFAULT_DOMAIN_XS;\n+    }\n+\n+    protected void injectSystemParameters(DeploymentDescriptor descriptor, String defaultDomain) {\n+        Map<String, Object> generalSystemParameters = Map.of(SupportedParameters.DEFAULT_DOMAIN, defaultDomain);\n+        descriptor.setParameters(MapUtil.merge(generalSystemParameters, descriptor.getParameters()));\n+        for (Module module : descriptor.getModules()) {\n+            Map<String, Object> moduleSystemParameters = Map.of(SupportedParameters.DEFAULT_HOST, module.getName());\n+            module.setParameters(MapUtil.merge(moduleSystemParameters, module.getParameters()));\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParameters\")\n+    void testGetApplications(String deploymentDescriptorLocation, String extensionDescriptorLocation, String platformsLocation,\n+                             String deployedMtaLocation, String namespace, boolean applyNamespace, String[] mtaArchiveModules,\n+                             String[] mtaModules, String[] deployedApps, Expectation expectedServices, Expectation expectedApps,\n+                             AppSuffixDeterminer appSuffixDeterminer)\n+        throws Exception {\n+        initializeParameters(deploymentDescriptorLocation, extensionDescriptorLocation, platformsLocation, deployedMtaLocation, namespace,\n+                             applyNamespace, mtaArchiveModules, mtaModules, deployedApps, appSuffixDeterminer);\n+        tester.test(() -> modulesCalculator.calculateContentForBuilding(deploymentDescriptor.getModules())\n+                                           .stream()\n+                                           .map(module -> appBuilder.build(module, moduleToDeployHelper))\n+                                           .collect(Collectors.toList()), expectedApps);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParameters\")\n+    void testGetServices(String deploymentDescriptorLocation, String extensionDescriptorLocation, String platformsLocation,\n+                         String deployedMtaLocation, String namespace, boolean applyNamespace, String[] mtaArchiveModules,\n+                         String[] mtaModules, String[] deployedApps, Expectation expectedServices, Expectation expectedApps,\n+                         AppSuffixDeterminer appSuffixDeterminer)\n+        throws Exception {\n+        initializeParameters(deploymentDescriptorLocation, extensionDescriptorLocation, platformsLocation, deployedMtaLocation, namespace,\n+                             applyNamespace, mtaArchiveModules, mtaModules, deployedApps, appSuffixDeterminer);\n+        tester.test(() -> servicesBuilder.build(resourcesCalculator.calculateContentForBuilding(deploymentDescriptor.getResources())),\n+                    expectedServices);\n+    }\n+\n+    protected void initializeParameters(String deploymentDescriptorLocation, String extensionDescriptorLocation, String platformsLocation,\n+                                        String deployedMtaLocation, String namespace, boolean applyNamespace, String[] mtaArchiveModules,\n+                                        String[] mtaModules, String[] deployedApps, AppSuffixDeterminer appSuffixDeterminer)\n+        throws Exception {\n+        this.deploymentDescriptorLocation = deploymentDescriptorLocation;\n+        this.extensionDescriptorLocation = extensionDescriptorLocation;\n+        this.platformLocation = platformsLocation;\n+        this.deployedMtaLocation = deployedMtaLocation;\n+        this.namespace = namespace;\n+        this.applyNamespace = applyNamespace;\n+        deploymentDescriptor = loadDeploymentDescriptor();\n+        ExtensionDescriptor extensionDescriptor = loadExtensionDescriptor();\n+        Platform platform = loadPlatform();\n+        DeployedMta deployedMta = loadDeployedMta();\n+        deploymentDescriptor = getDescriptorMerger().merge(deploymentDescriptor, List.of(extensionDescriptor));\n+        PlatformMerger platformMerger = getPlatformMerger(platform);\n+        platformMerger.mergeInto(deploymentDescriptor);\n+        String defaultDomain = getDefaultDomain(platform.getName());\n+        insertProperNames(deploymentDescriptor);\n+        injectSystemParameters(deploymentDescriptor, defaultDomain);\n+        appBuilder = getApplicationCloudModelBuilder(deploymentDescriptor, false, deployedMta, appSuffixDeterminer);\n+        servicesBuilder = getServicesCloudModelBuilder(deploymentDescriptor);\n+        modulesCalculator = getModulesCalculator(Set.of(mtaArchiveModules), Set.of(mtaModules),\n+                                                 Set.of(deployedApps));\n+        moduleToDeployHelper = new ModuleToDeployHelper();\n+        resourcesCalculator = new ResourcesCloudModelBuilderContentCalculator(null, getUserMessageLogger());\n+    }\n+\n+    private ModulesCloudModelBuilderContentCalculator getModulesCalculator(Set<String> mtaArchiveModules, Set<String> mtaModules,\n+                                                                           Set<String> deployedApps) {\n+        return new ModulesCloudModelBuilderContentCalculator(mtaArchiveModules,\n+                                                             deployedApps,\n+                                                             null,\n+                                                             getUserMessageLogger(),\n+                                                             new ModuleToDeployHelper(),\n+                                                             List.of(new UnresolvedModulesContentValidator(mtaModules, deployedApps)));\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk0ODkxNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515948914", "bodyText": "You can use Map.of instead of new HashMap() {}", "author": "theghost5800", "createdAt": "2020-11-02T12:50:12Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURITest.java", "diffHunk": "@@ -11,68 +13,88 @@\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n \n-import com.sap.cloudfoundry.client.facade.domain.CloudDomain;\n-import com.sap.cloudfoundry.client.facade.domain.CloudRoute;\n-import com.sap.cloudfoundry.client.facade.domain.ImmutableCloudDomain;\n-import com.sap.cloudfoundry.client.facade.domain.ImmutableCloudRoute;\n+import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n \n class ApplicationURITest {\n \n     private static final String CUSTOM = \"custom-\";\n \n-    static Stream<Arguments> testParameters() {\n-        return Stream.of(Arguments.of(\"https://valid-host.valid-domain\", \"valid-host\", \"valid-domain\", \"\"),\n-                         Arguments.of(\"https://valid-domain\", \"\", \"valid-domain\", \"\"), Arguments.of(\"valid-domain\", \"\", \"valid-domain\", \"\"),\n-                         Arguments.of(\"https://valid-domain/really/long/path\", \"\", \"valid-domain\", \"/really/long/path\"),\n-                         Arguments.of(\"https://valid-host.valid-domain/really/long/path\", \"valid-host\", \"valid-domain\",\n+    static Stream<Arguments> testGetHostDomainPath() {\n+        return Stream.of(Arguments.of(\"https://valid-host.valid-domain\", false, \"valid-host\", \"valid-domain\", \"\"),\n+                         Arguments.of(\"https://valid-domain\", false, \"\", \"valid-domain\", \"\"),\n+                         Arguments.of(\"valid-domain\", true, \"\", \"valid-domain\", \"\"),\n+                         Arguments.of(\"https://valid-domain/really/long/path\", false, \"\", \"valid-domain\", \"/really/long/path\"),\n+                         Arguments.of(\"https://valid-host.valid-domain/really/long/path\", false, \"valid-host\", \"valid-domain\",\n                                       \"/really/long/path\"),\n-                         Arguments.of(\"deploy-service.cfapps.industrycloud-staging.siemens.com\", \"deploy-service\",\n-                                      \"cfapps.industrycloud-staging.siemens.com\", \"\"));\n+                         Arguments.of(\"deploy-service.cfapps.industrycloud-staging.siemens.com\", false, \"deploy-service\",\n+                                      \"cfapps.industrycloud-staging.siemens.com\", \"\"),\n+                         Arguments.of(\"everything.is.in.domain/and/path\", true, \"\", \"everything.is.in.domain\", \"/and/path\"));\n     }\n \n     @ParameterizedTest\n-    @MethodSource(\"testParameters\")\n-    void testGetHostDomainPath(String uri, String expectedHost, String expectedDomain, String expectedPath) {\n-        ApplicationURI applicationURI = new ApplicationURI(uri);\n+    @MethodSource\n+    void testGetHostDomainPath(String uri, boolean noHostname, String expectedHost, String expectedDomain, String expectedPath) {\n+        ApplicationURI applicationURI = new ApplicationURI(uri, noHostname);\n         Assertions.assertEquals(expectedHost, applicationURI.getHost());\n         Assertions.assertEquals(expectedDomain, applicationURI.getDomain());\n         Assertions.assertEquals(expectedPath, applicationURI.getPath());\n     }\n \n+    @SuppressWarnings(\"serial\")\n+    static Stream<Arguments> testGetURIParts() {\n+        return Stream.of(Arguments.of(\"host\", \"domain.com\", \"/path\", new HashMap<String, Object>() {\n+            {\n+                put(SupportedParameters.HOST, \"host\");", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURITest.java b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURITest.java\nindex 597de060e..79913c4b4 100644\n--- a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURITest.java\n+++ b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/ApplicationURITest.java\n\n@@ -13,88 +11,68 @@ import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n \n-import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n+import com.sap.cloudfoundry.client.facade.domain.CloudDomain;\n+import com.sap.cloudfoundry.client.facade.domain.CloudRoute;\n+import com.sap.cloudfoundry.client.facade.domain.ImmutableCloudDomain;\n+import com.sap.cloudfoundry.client.facade.domain.ImmutableCloudRoute;\n \n class ApplicationURITest {\n \n     private static final String CUSTOM = \"custom-\";\n \n-    static Stream<Arguments> testGetHostDomainPath() {\n-        return Stream.of(Arguments.of(\"https://valid-host.valid-domain\", false, \"valid-host\", \"valid-domain\", \"\"),\n-                         Arguments.of(\"https://valid-domain\", false, \"\", \"valid-domain\", \"\"),\n-                         Arguments.of(\"valid-domain\", true, \"\", \"valid-domain\", \"\"),\n-                         Arguments.of(\"https://valid-domain/really/long/path\", false, \"\", \"valid-domain\", \"/really/long/path\"),\n-                         Arguments.of(\"https://valid-host.valid-domain/really/long/path\", false, \"valid-host\", \"valid-domain\",\n+    static Stream<Arguments> testParameters() {\n+        return Stream.of(Arguments.of(\"https://valid-host.valid-domain\", \"valid-host\", \"valid-domain\", \"\"),\n+                         Arguments.of(\"https://valid-domain\", \"\", \"valid-domain\", \"\"), Arguments.of(\"valid-domain\", \"\", \"valid-domain\", \"\"),\n+                         Arguments.of(\"https://valid-domain/really/long/path\", \"\", \"valid-domain\", \"/really/long/path\"),\n+                         Arguments.of(\"https://valid-host.valid-domain/really/long/path\", \"valid-host\", \"valid-domain\",\n                                       \"/really/long/path\"),\n-                         Arguments.of(\"deploy-service.cfapps.industrycloud-staging.siemens.com\", false, \"deploy-service\",\n-                                      \"cfapps.industrycloud-staging.siemens.com\", \"\"),\n-                         Arguments.of(\"everything.is.in.domain/and/path\", true, \"\", \"everything.is.in.domain\", \"/and/path\"));\n+                         Arguments.of(\"deploy-service.cfapps.industrycloud-staging.siemens.com\", \"deploy-service\",\n+                                      \"cfapps.industrycloud-staging.siemens.com\", \"\"));\n     }\n \n     @ParameterizedTest\n-    @MethodSource\n-    void testGetHostDomainPath(String uri, boolean noHostname, String expectedHost, String expectedDomain, String expectedPath) {\n-        ApplicationURI applicationURI = new ApplicationURI(uri, noHostname);\n+    @MethodSource(\"testParameters\")\n+    void testGetHostDomainPath(String uri, String expectedHost, String expectedDomain, String expectedPath) {\n+        ApplicationURI applicationURI = new ApplicationURI(uri);\n         Assertions.assertEquals(expectedHost, applicationURI.getHost());\n         Assertions.assertEquals(expectedDomain, applicationURI.getDomain());\n         Assertions.assertEquals(expectedPath, applicationURI.getPath());\n     }\n \n-    @SuppressWarnings(\"serial\")\n-    static Stream<Arguments> testGetURIParts() {\n-        return Stream.of(Arguments.of(\"host\", \"domain.com\", \"/path\", new HashMap<String, Object>() {\n-            {\n-                put(SupportedParameters.HOST, \"host\");\n-                put(SupportedParameters.DOMAIN, \"domain.com\");\n-                put(SupportedParameters.ROUTE_PATH, \"/path\");\n-            }\n-        }), Arguments.of(\"\", \"domain.com\", \"/path\", new HashMap<String, Object>() {\n-            {\n-                put(SupportedParameters.DOMAIN, \"domain.com\");\n-                put(SupportedParameters.ROUTE_PATH, \"/path\");\n-            }\n-        }), Arguments.of(null, \"domain.com\", \"/path\", new HashMap<String, Object>() {\n-            {\n-                put(SupportedParameters.DOMAIN, \"domain.com\");\n-                put(SupportedParameters.ROUTE_PATH, \"/path\");\n-            }\n-        }), Arguments.of(\"\", \"domain.only.this.time\", \"\", new HashMap<String, Object>() {\n-            {\n-                put(SupportedParameters.DOMAIN, \"domain.only.this.time\");\n-            }\n-        }));\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource\n-    void testGetURIParts(String host, String domain, String path, Map<String, Object> expectedParts) {\n-        ApplicationURI applicationURIFromSummary = new ApplicationURI(routeSummary(host, domain, path));\n-\n-        Assertions.assertEquals(expectedParts, applicationURIFromSummary.getURIParts());\n-    }\n-\n     @Test\n     void testGetHostDomainWithoutPathFromRoute() {\n-        CloudRouteSummary route = routeSummary(CUSTOM + \"host\", CUSTOM + \"domain\", \"\");\n+        CloudRoute route = createCloudRoute(CUSTOM + \"host\", createCloudDomain(CUSTOM + \"domain\"), null);\n         ApplicationURI applicationURI = new ApplicationURI(route);\n         Assertions.assertEquals(CUSTOM + \"host\", applicationURI.getHost());\n-        Assertions.assertEquals(CUSTOM + \"domain\", route.getDomain());\n+        Assertions.assertEquals(CUSTOM + \"domain\", route.getDomain()\n+                                                        .getName());\n         Assertions.assertEquals(\"\", applicationURI.getPath());\n     }\n \n     @Test\n     void testGetHostDomainWithPathFromRoute() {\n-        CloudRouteSummary route = routeSummary(CUSTOM + \"host\", CUSTOM + \"domain\", \"/\" + CUSTOM + \"path\");\n+        CloudRoute route = createCloudRoute(CUSTOM + \"host\", createCloudDomain(CUSTOM + \"domain\"), \"/\" + CUSTOM + \"path\");\n         ApplicationURI applicationURI = new ApplicationURI(route);\n         Assertions.assertEquals(CUSTOM + \"host\", applicationURI.getHost());\n-        Assertions.assertEquals(CUSTOM + \"domain\", applicationURI.getDomain());\n+        Assertions.assertEquals(CUSTOM + \"domain\", route.getDomain()\n+                                                        .getName());\n         Assertions.assertEquals(\"/\" + CUSTOM + \"path\", applicationURI.getPath());\n     }\n \n+    @Test\n+    void testGetURIParts() {\n+        ApplicationURI applicationURI = new ApplicationURI(createCloudRoute(CUSTOM + \"host\", createCloudDomain(CUSTOM + \"domain\"), null));\n+        Map<String, Object> expectedParts = new HashMap<>();\n+        expectedParts.put(SupportedParameters.HOST, CUSTOM + \"host\");\n+        expectedParts.put(SupportedParameters.DOMAIN, CUSTOM + \"domain\");\n+        expectedParts.put(SupportedParameters.ROUTE_PATH, \"\");\n+        Assertions.assertEquals(expectedParts, applicationURI.getURIParts());\n+    }\n+\n     @Test\n     void testGetURIPart() {\n-        CloudRouteSummary route = routeSummary(CUSTOM + \"host\", CUSTOM + \"domain\", \"/\" + CUSTOM + \"path\");\n-        ApplicationURI applicationURI = new ApplicationURI(route);\n+        ApplicationURI applicationURI = new ApplicationURI(createCloudRoute(CUSTOM + \"host\", createCloudDomain(CUSTOM + \"domain\"),\n+                                                                            \"/\" + CUSTOM + \"path\"));\n         Assertions.assertEquals(CUSTOM + \"host\", applicationURI.getURIPart(SupportedParameters.HOST));\n         Assertions.assertEquals(CUSTOM + \"domain\", applicationURI.getURIPart(SupportedParameters.DOMAIN));\n         Assertions.assertEquals(\"/\" + CUSTOM + \"path\", applicationURI.getURIPart(SupportedParameters.ROUTE_PATH));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1NTExNg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515955116", "bodyText": "So we cannot keep only one TestData class in util or process package?", "author": "theghost5800", "createdAt": "2020-11-02T13:01:22Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.cloudfoundry.multiapps.controller.core.util;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n+\n+import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n+import com.sap.cloudfoundry.client.facade.domain.ImmutableCloudRouteSummary;\n+\n+//TODO: this class repeats code from test class org.cloudfoundry.multiapps.controller.process.steps.TestData; consolidate if we refactor core module and stplit ApplicationUri out of it", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4MTQ4NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516881484", "bodyText": "no, since we do not want to export a test jar to share the classes", "author": "ikasarov", "createdAt": "2020-11-03T18:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1NTExNg=="}], "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java\nindex 188a5d324..94d50c6ca 100644\n--- a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java\n+++ b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/util/TestData.java\n\n@@ -1,48 +1,31 @@\n-package org.cloudfoundry.multiapps.controller.core.util;\n+package org.cloudfoundry.multiapps.controller.core.parser;\n \n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n \n import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n import com.sap.cloudfoundry.client.facade.domain.ImmutableCloudRouteSummary;\n \n-//TODO: this class repeats code from test class org.cloudfoundry.multiapps.controller.process.steps.TestData; consolidate if we refactor core module and stplit ApplicationUri out of it\n-public class TestData {\n-\n-    public static Map<String, Object> routeParameterWithAdditionalValues(String route, boolean noHostname,\n-                                                                         Map<String, Object> additionalParameters) {\n-        Map<String, Object> resultParameter = constructRouteParameter(route, false, noHostname);\n-\n-        if (additionalParameters != null) {\n-            resultParameter.putAll(additionalParameters);\n-        }\n-\n-        return resultParameter;\n-    }\n-\n-    public static Map<String, Object> routeParameter(String route) {\n-        return constructRouteParameter(route, false, null);\n+public class TestDataUtil {\n+    private static Map<String, Object> routeParameter(String route) {\n+        return routeParameter(route, false, null);\n     }\n \n-    public static Map<String, Object> idleRouteParameter(String route) {\n-        return constructRouteParameter(route, true, null);\n+    private static Map<String, Object> idleRouteParameter(String route) {\n+        return routeParameter(route, true, null);\n     }\n \n-    public static Map<String, Object> routeParameter(String route, Boolean noHostname) {\n-        return constructRouteParameter(route, false, noHostname);\n+    private static Map<String, Object> routeParameter(String route, boolean noHostname) {\n+        return routeParameter(route, false, noHostname);\n     }\n \n-    public static Map<String, Object> idleRouteParameter(String route, Boolean noHostname) {\n-        return constructRouteParameter(route, true, noHostname);\n+    private static Map<String, Object> idleRouteParameter(String route, boolean noHostname) {\n+        return routeParameter(route, true, noHostname);\n     }\n \n-    public static Map<String, Object> constructRouteParameter(String route, boolean isIdle, Boolean noHostname) {\n+    private static Map<String, Object> routeParameter(String route, boolean isIdle, Boolean noHostname) {\n         Map<String, Object> resultMap = new HashMap<>();\n \n         resultMap.put(isIdle ? SupportedParameters.IDLE_ROUTE : SupportedParameters.ROUTE, route);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1OTExNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515959114", "bodyText": "You can use Map.of with short if statement", "author": "theghost5800", "createdAt": "2020-11-02T13:08:34Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java", "diffHunk": "@@ -19,36 +25,58 @@\n     static Stream<Arguments> getParameters() {\n         return Stream.of(\n // @formatter:off\n-            // [0]\n-            Arguments.of(\"valid-host.domain\", true, \"valid-host.domain\", null),\n             // [1]\n-            Arguments.of(\"should_correct$this$host.domain\", false, \"should-correct-this-host.domain\", null),\n+            Arguments.of(\"valid-host.domain\", null, true, \"valid-host.domain\", null),\n             // [2]\n-            Arguments.of(\"host_can_be_corrected.domain.com\", false, \"host-can-be-corrected.domain.com\", null)\n+            Arguments.of(\"should_correct$this$host.domain\", null, false, \"should-correct-this-host.domain\", null),\n+            // [3]\n+            Arguments.of(\"host_can_be_corrected.domain.com\", Boolean.FALSE, false, \"host-can-be-corrected.domain.com\", null),\n+            // [4]\n+            Arguments.of(\"doesnt.matter.com\", 1, false, null, MessageFormat.format(Messages.COULD_NOT_PARSE_BOOLEAN_FLAG, SupportedParameters.NO_HOSTNAME)),\n+            // [5]\n+            Arguments.of(\"domain_can_be_corrected.com\", Boolean.TRUE, false, \"domain-can-be-corrected.com\", null)\n // @formatter:on\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"getParameters\")\n-    void testValidate(String inputRoute, boolean isValid, String correctedRoute, String expectedException) {\n-        assertEquals(isValid, validator.isValid(inputRoute, null));\n+    void testValidate(String inputRoute, Object noHostname, boolean isValid, String correctedRoute, String expectedException) {\n+        Map<String, Object> routeContext = constructContext(noHostname);\n+        try {\n+            assertEquals(isValid, validator.isValid(inputRoute, routeContext));\n+            assertNull(expectedException, \"Expected an exception but test passed!\");\n+        } catch (Exception e) {\n+            assertNotNull(expectedException, \"Didn't expect an exception, but got \" + e.getMessage());\n+            assertEquals(expectedException, e.getMessage(), \"Exception's message doesn't match up!\");\n+        }\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"getParameters\")\n-    void testAttemptToCorrect(String inputRoute, boolean isValid, String correctedRoute, String expectedException) {\n+    void testAttemptToCorrect(String inputRoute, Object noHostname, boolean isValid, String correctedRoute, String expectedException) {\n         if (!validator.canCorrect())\n             return;\n         try {\n-            String result = validator.attemptToCorrect(inputRoute, null);\n+            Map<String, Object> routeContext = constructContext(noHostname);\n+            String result = validator.attemptToCorrect(inputRoute, routeContext);\n+            assertNull(expectedException, \"Expected an exception but test passed!\");\n             assertEquals(correctedRoute, result);\n         } catch (Exception e) {\n-            assertNotNull(e.getMessage(), expectedException);\n-            assertEquals(\"Exception's message doesn't match up!\", e.getMessage(), expectedException);\n+            assertNotNull(expectedException, \"Didn't expect an exception, but got \" + e.getMessage());\n+            assertEquals(expectedException, e.getMessage(), \"Exception's message doesn't match up!\");\n         }\n     }\n \n+    private Map<String, Object> constructContext(Object noHostname) {\n+        Map<String, Object> context = new HashMap<>();", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\nindex afb864ef4..a1445117d 100644\n--- a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\n+++ b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\n\n@@ -25,58 +19,36 @@ class RouteValidatorTest {\n     static Stream<Arguments> getParameters() {\n         return Stream.of(\n // @formatter:off\n+            // [0]\n+            Arguments.of(\"valid-host.domain\", true, \"valid-host.domain\", null),\n             // [1]\n-            Arguments.of(\"valid-host.domain\", null, true, \"valid-host.domain\", null),\n+            Arguments.of(\"should_correct$this$host.domain\", false, \"should-correct-this-host.domain\", null),\n             // [2]\n-            Arguments.of(\"should_correct$this$host.domain\", null, false, \"should-correct-this-host.domain\", null),\n-            // [3]\n-            Arguments.of(\"host_can_be_corrected.domain.com\", Boolean.FALSE, false, \"host-can-be-corrected.domain.com\", null),\n-            // [4]\n-            Arguments.of(\"doesnt.matter.com\", 1, false, null, MessageFormat.format(Messages.COULD_NOT_PARSE_BOOLEAN_FLAG, SupportedParameters.NO_HOSTNAME)),\n-            // [5]\n-            Arguments.of(\"domain_can_be_corrected.com\", Boolean.TRUE, false, \"domain-can-be-corrected.com\", null)\n+            Arguments.of(\"host_can_be_corrected.domain.com\", false, \"host-can-be-corrected.domain.com\", null)\n // @formatter:on\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"getParameters\")\n-    void testValidate(String inputRoute, Object noHostname, boolean isValid, String correctedRoute, String expectedException) {\n-        Map<String, Object> routeContext = constructContext(noHostname);\n-        try {\n-            assertEquals(isValid, validator.isValid(inputRoute, routeContext));\n-            assertNull(expectedException, \"Expected an exception but test passed!\");\n-        } catch (Exception e) {\n-            assertNotNull(expectedException, \"Didn't expect an exception, but got \" + e.getMessage());\n-            assertEquals(expectedException, e.getMessage(), \"Exception's message doesn't match up!\");\n-        }\n+    void testValidate(String inputRoute, boolean isValid, String correctedRoute, String expectedException) {\n+        assertEquals(isValid, validator.isValid(inputRoute, null));\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"getParameters\")\n-    void testAttemptToCorrect(String inputRoute, Object noHostname, boolean isValid, String correctedRoute, String expectedException) {\n+    void testAttemptToCorrect(String inputRoute, boolean isValid, String correctedRoute, String expectedException) {\n         if (!validator.canCorrect())\n             return;\n         try {\n-            Map<String, Object> routeContext = constructContext(noHostname);\n-            String result = validator.attemptToCorrect(inputRoute, routeContext);\n-            assertNull(expectedException, \"Expected an exception but test passed!\");\n+            String result = validator.attemptToCorrect(inputRoute, null);\n             assertEquals(correctedRoute, result);\n         } catch (Exception e) {\n-            assertNotNull(expectedException, \"Didn't expect an exception, but got \" + e.getMessage());\n-            assertEquals(expectedException, e.getMessage(), \"Exception's message doesn't match up!\");\n+            assertNotNull(e.getMessage(), expectedException);\n+            assertEquals(\"Exception's message doesn't match up!\", e.getMessage(), expectedException);\n         }\n     }\n \n-    private Map<String, Object> constructContext(Object noHostname) {\n-        Map<String, Object> context = new HashMap<>();\n-        if (noHostname != null) {\n-            context.put(SupportedParameters.NO_HOSTNAME, noHostname);\n-        }\n-\n-        return context;\n-    }\n-\n     @Test\n     void testCanCorrect() {\n         assertTrue(validator.canCorrect());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk3ODA2MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515978061", "bodyText": "I didn't see where is used java.util.stream.Collectors and StringUtils imports", "author": "theghost5800", "createdAt": "2020-11-02T13:41:29Z", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/BuildApplicationDeployModelStep.java", "diffHunk": "@@ -3,10 +3,14 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/BuildApplicationDeployModelStep.java b/multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/BuildApplicationDeployModelStep.java\nindex b2d7b220e..fbe8f3082 100644\n--- a/multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/BuildApplicationDeployModelStep.java\n+++ b/multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/BuildApplicationDeployModelStep.java\n\n@@ -4,13 +4,10 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n-import org.apache.commons.lang3.StringUtils;\n-import com.sap.cloudfoundry.client.facade.domain.CloudRouteSummary;\n import org.cloudfoundry.multiapps.controller.client.lib.domain.CloudApplicationExtended;\n import org.cloudfoundry.multiapps.controller.client.lib.domain.ImmutableCloudApplicationExtended;\n import org.cloudfoundry.multiapps.controller.core.cf.v2.ConfigurationEntriesCloudModelBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk4MjcwNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515982704", "bodyText": "CloudRouteSummary as far as I remember it has toString() imeplemented. So you can just pass the object itself and it will be printed", "author": "theghost5800", "createdAt": "2020-11-02T13:49:34Z", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/DeleteIdleRoutesStep.java", "diffHunk": "@@ -44,30 +45,31 @@ protected String getStepErrorMessage(ProcessContext context) {\n     }\n \n     private void deleteIdleRoutes(CloudApplication idleApp, CloudControllerClient client, CloudApplication newLiveApp) {\n-        List<String> idleUris = ListUtils.subtract(idleApp.getUris(), newLiveApp.getUris());\n-        getStepLogger().debug(Messages.IDLE_URIS_FOR_APPLICATION, idleUris);\n+        Set<CloudRouteSummary> idleRoutes = SetUtils.difference(idleApp.getRoutes(), newLiveApp.getRoutes())\n+                                                    .toSet();\n+        getStepLogger().debug(Messages.IDLE_URIS_FOR_APPLICATION, idleRoutes);\n \n-        for (String idleUri : idleUris) {\n-            deleteRoute(idleUri, client);\n-            getStepLogger().debug(Messages.ROUTE_DELETED, idleUri);\n+        for (CloudRouteSummary idleRoute : idleRoutes) {\n+            deleteRoute(idleRoute, client);\n+            getStepLogger().debug(Messages.ROUTE_DELETED, idleRoute.toUriString());", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4MzQyNQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516883425", "bodyText": "intentionally used this method, to make it more clear that we're doing custom string formatting (i.e. concat with '.')", "author": "ikasarov", "createdAt": "2020-11-03T18:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk4MjcwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk4OTk4Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515989983", "bodyText": "Previously this will result in List with duplicated old elements in result list, is it right?", "author": "theghost5800", "createdAt": "2020-11-02T14:00:58Z", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ElementUpdater.java", "diffHunk": "@@ -30,7 +39,14 @@\n \n         @Override\n         public <T> List<T> updateList(List<T> oldList, List<T> newList) {\n-            return ListUtils.union(oldList, newList);\n+            List<T> newPartsOnly = ListUtils.subtract(newList, oldList);\n+            return ListUtils.union(oldList, newPartsOnly);", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4MzkyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r516883928", "bodyText": "yes, this was a defect previously; thankfully we also didn't have a real case which would've used this code", "author": "ikasarov", "createdAt": "2020-11-03T18:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk4OTk4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk5NDM5NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r515994394", "bodyText": "There is some issue with spaces, maybe there is tabs instead of spaces", "author": "theghost5800", "createdAt": "2020-11-02T14:07:32Z", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/steps/DeleteApplicationRoutesStepTest.java", "diffHunk": "@@ -67,7 +67,7 @@ private void assertRoutesWereDeleted() {\n         assertEquals(0, routesToDeleteCount, \"A number of routes were not deleted: \");\n     }\n \n-    @Test\n+\t@Test", "originalCommit": "b580b042a3b612a04bd547169e6734537ee8803e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/steps/DeleteApplicationRoutesStepTest.java b/multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/steps/DeleteApplicationRoutesStepTest.java\nindex fbeb598d2..ebc0c53c7 100644\n--- a/multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/steps/DeleteApplicationRoutesStepTest.java\n+++ b/multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/steps/DeleteApplicationRoutesStepTest.java\n\n@@ -67,7 +67,7 @@ class DeleteApplicationRoutesStepTest extends UndeployAppStepTest {\n         assertEquals(0, routesToDeleteCount, \"A number of routes were not deleted: \");\n     }\n \n-\t@Test\n+    @Test\n     void testGetHookPhaseBefore() {\n         Mockito.when(hooksPhaseBuilder.buildHookPhases(List.of(HookPhase.BEFORE_UNMAP_ROUTES, HookPhase.APPLICATION_BEFORE_UNMAP_ROUTES),\n                                                        context))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4MzgxNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r517183814", "bodyText": "Rename IdleUriParametersParser to IdleRouteParametersParser", "author": "theghost5800", "createdAt": "2020-11-04T08:53:08Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleUriParametersParser.java", "diffHunk": "@@ -16,7 +16,7 @@\n import org.cloudfoundry.multiapps.controller.core.validators.parameters.RoutesValidator;\n import org.cloudfoundry.multiapps.mta.util.PropertiesUtil;\n \n-public class IdleUriParametersParser extends UriParametersParser {\n+public class IdleUriParametersParser extends RouteParametersParser {", "originalCommit": "df4cdbbdb25e8110199178bb731a8246e608e7aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleUriParametersParser.java b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleRouteParametersParser.java\nsimilarity index 92%\nrename from multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleUriParametersParser.java\nrename to multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleRouteParametersParser.java\nindex e03ef2aa8..3d0d0d061 100644\n--- a/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleUriParametersParser.java\n+++ b/multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/parser/IdleRouteParametersParser.java\n\n@@ -16,13 +16,13 @@ import org.cloudfoundry.multiapps.controller.core.util.ApplicationURI;\n import org.cloudfoundry.multiapps.controller.core.validators.parameters.RoutesValidator;\n import org.cloudfoundry.multiapps.mta.util.PropertiesUtil;\n \n-public class IdleUriParametersParser extends RouteParametersParser {\n+public class IdleRouteParametersParser extends RouteParametersParser {\n \n-    public IdleUriParametersParser(String defaultHost, String defaultDomain, String routePath) {\n+    public IdleRouteParametersParser(String defaultHost, String defaultDomain, String routePath) {\n         super(defaultHost, defaultDomain, SupportedParameters.IDLE_HOST, SupportedParameters.IDLE_DOMAIN, routePath);\n     }\n \n-    public IdleUriParametersParser(String defaultHost, String defaultDomain, String hostParameterName, String domainParameterName,\n+    public IdleRouteParametersParser(String defaultHost, String defaultDomain, String hostParameterName, String domainParameterName,\n                                    String routePath) {\n         super(defaultHost, defaultDomain, hostParameterName, domainParameterName, routePath);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4NjIxNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/982#discussion_r517186217", "bodyText": "If you don't add entries in the map after that, you can return Collections.emptyMap()", "author": "theghost5800", "createdAt": "2020-11-04T08:57:03Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java", "diffHunk": "@@ -69,12 +69,11 @@ void testAttemptToCorrect(String inputRoute, Object noHostname, boolean isValid,\n     }\n \n     private Map<String, Object> constructContext(Object noHostname) {\n-        Map<String, Object> context = new HashMap<>();\n-        if (noHostname != null) {\n-            context.put(SupportedParameters.NO_HOSTNAME, noHostname);\n+        if (noHostname == null) {\n+            return new HashMap<>();", "originalCommit": "df4cdbbdb25e8110199178bb731a8246e608e7aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08431987923db8d49eb7a6764d7bbd75932735df", "chunk": "diff --git a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\nindex e0c23c587..a1445117d 100644\n--- a/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\n+++ b/multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidatorTest.java\n\n@@ -25,57 +19,36 @@ class RouteValidatorTest {\n     static Stream<Arguments> getParameters() {\n         return Stream.of(\n // @formatter:off\n-            // [1] basic host and domain route; is already valid, no correction needed\n-            Arguments.of(\"valid-host.domain\", null, true, \"valid-host.domain\", null),\n-            // [2] route with host and domain; contains invalid characters, can be corrected\n-            Arguments.of(\"should_correct$this$host.domain\", null, false, \"should-correct-this-host.domain\", null),\n-            // [3] route with host and domain, and explicit no-hostname parameter; host should be corrected\n-            Arguments.of(\"host_can_be_corrected.domain.com\", Boolean.FALSE, false, \"host-can-be-corrected.domain.com\", null),\n-            // [4] no-hostname parameter provided is of invalid type; should raise exception during validation\n-            Arguments.of(\"doesnt.matter.com\", 1, false, null, MessageFormat.format(Messages.COULD_NOT_PARSE_BOOLEAN_FLAG, SupportedParameters.NO_HOSTNAME)),\n-            // [5] a route without hostname; domain contains invalid character, can be corrected\n-            Arguments.of(\"domain_can_be_corrected.com\", Boolean.TRUE, false, \"domain-can-be-corrected.com\", null)\n+            // [0]\n+            Arguments.of(\"valid-host.domain\", true, \"valid-host.domain\", null),\n+            // [1]\n+            Arguments.of(\"should_correct$this$host.domain\", false, \"should-correct-this-host.domain\", null),\n+            // [2]\n+            Arguments.of(\"host_can_be_corrected.domain.com\", false, \"host-can-be-corrected.domain.com\", null)\n // @formatter:on\n         );\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"getParameters\")\n-    void testValidate(String inputRoute, Object noHostname, boolean isValid, String correctedRoute, String expectedException) {\n-        Map<String, Object> routeContext = constructContext(noHostname);\n-        try {\n-            assertEquals(isValid, validator.isValid(inputRoute, routeContext));\n-            assertNull(expectedException, \"Expected an exception but test passed!\");\n-        } catch (Exception e) {\n-            assertNotNull(expectedException, \"Didn't expect an exception, but got \" + e.getMessage());\n-            assertEquals(expectedException, e.getMessage(), \"Exception's message doesn't match up!\");\n-        }\n+    void testValidate(String inputRoute, boolean isValid, String correctedRoute, String expectedException) {\n+        assertEquals(isValid, validator.isValid(inputRoute, null));\n     }\n \n     @ParameterizedTest\n     @MethodSource(\"getParameters\")\n-    void testAttemptToCorrect(String inputRoute, Object noHostname, boolean isValid, String correctedRoute, String expectedException) {\n+    void testAttemptToCorrect(String inputRoute, boolean isValid, String correctedRoute, String expectedException) {\n         if (!validator.canCorrect())\n             return;\n         try {\n-            Map<String, Object> routeContext = constructContext(noHostname);\n-            String result = validator.attemptToCorrect(inputRoute, routeContext);\n-            assertNull(expectedException, \"Expected an exception but test passed!\");\n+            String result = validator.attemptToCorrect(inputRoute, null);\n             assertEquals(correctedRoute, result);\n         } catch (Exception e) {\n-            assertNotNull(expectedException, \"Didn't expect an exception, but got \" + e.getMessage());\n-            assertEquals(expectedException, e.getMessage(), \"Exception's message doesn't match up!\");\n+            assertNotNull(e.getMessage(), expectedException);\n+            assertEquals(\"Exception's message doesn't match up!\", e.getMessage(), expectedException);\n         }\n     }\n \n-    private Map<String, Object> constructContext(Object noHostname) {\n-        if (noHostname == null) {\n-            return new HashMap<>();\n-        }\n-\n-        return Map.of(SupportedParameters.NO_HOSTNAME, noHostname);\n-    }\n-\n     @Test\n     void testCanCorrect() {\n         assertTrue(validator.canCorrect());\n"}}, {"oid": "08431987923db8d49eb7a6764d7bbd75932735df", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/08431987923db8d49eb7a6764d7bbd75932735df", "message": "routes are no longer handled as strings", "committedDate": "2020-11-04T12:06:43Z", "type": "commit"}, {"oid": "1ac92fa8de10ed766b2be661f5a54f12bbd0f4dd", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/1ac92fa8de10ed766b2be661f5a54f12bbd0f4dd", "message": "fixing junit tests", "committedDate": "2020-11-04T12:06:44Z", "type": "commit"}, {"oid": "b93f27512f86d2c2de3777f9366c19c16bcf07dd", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/b93f27512f86d2c2de3777f9366c19c16bcf07dd", "message": "deleted unused test files", "committedDate": "2020-11-04T12:06:44Z", "type": "commit"}, {"oid": "b93f27512f86d2c2de3777f9366c19c16bcf07dd", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/b93f27512f86d2c2de3777f9366c19c16bcf07dd", "message": "deleted unused test files", "committedDate": "2020-11-04T12:06:44Z", "type": "forcePushed"}]}