{"pr_number": 901, "pr_title": "Adds tests for database migration tool and refactors database migration executors ", "pr_createdAt": "2020-07-14T07:01:59Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0ODg0MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454148841", "bodyText": "Use Collections.emptyList() here and remove the NON_EXISTING_DATABASE_TYPE_SETTER constant (BOOL_DEFAULT_DATABASE_TYPE_SETTER would do the job).", "author": "nictas", "createdAt": "2020-07-14T07:09:20Z", "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";\n+    private static final String LONG_DEFAULT_DATABASE_TYPE_SETTER = \"int8\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_1 = \"varchar\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_2 = \"text\";\n+\n+    private DatabaseTypeSetterFactory databaseTypeSetterFactory;\n+\n+    @Test\n+    public void testGetWithNullStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(null));\n+    }\n+\n+    @Test\n+    public void testGetWithEmptyStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(\"\"));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersAndSingleMatch() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertEquals(registeredDatabaseTypeSetters.get(0), resultDatabaseTypeSetter);\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenNoMatchingTypeSetter() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);", "originalCommit": "87b75694479f4b22d9b473cebd839bf0aed288a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\nindex 415ecb46c..b9de3c79d 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n\n@@ -1,6 +1,7 @@\n package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n import org.junit.jupiter.api.Assertions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0OTI3Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454149273", "bodyText": "Remove this field. Use a local variable instead. Fields are only useful for sharing state between methods, but you're always re-initializing the value of this one.", "author": "nictas", "createdAt": "2020-07-14T07:10:20Z", "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";\n+    private static final String LONG_DEFAULT_DATABASE_TYPE_SETTER = \"int8\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_1 = \"varchar\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_2 = \"text\";\n+\n+    private DatabaseTypeSetterFactory databaseTypeSetterFactory;", "originalCommit": "87b75694479f4b22d9b473cebd839bf0aed288a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\nindex 415ecb46c..b9de3c79d 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n\n@@ -1,6 +1,7 @@\n package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n import org.junit.jupiter.api.Assertions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0OTg0Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454149847", "bodyText": "Rename these constants to BOOL_TYPE, LONG_TYPE, etc. Right now, based on their name, it looks like they should contain instances of DatabaseTypeSetter.", "author": "nictas", "createdAt": "2020-07-14T07:11:31Z", "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";", "originalCommit": "87b75694479f4b22d9b473cebd839bf0aed288a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\nindex 415ecb46c..b9de3c79d 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n\n@@ -1,6 +1,7 @@\n package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n import org.junit.jupiter.api.Assertions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MDM0MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454150340", "bodyText": "Merge this test with the next two. All three of them test whether the default configuration is correct, so there's no reason to have them as separate tests.", "author": "nictas", "createdAt": "2020-07-14T07:12:32Z", "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";\n+    private static final String LONG_DEFAULT_DATABASE_TYPE_SETTER = \"int8\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_1 = \"varchar\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_2 = \"text\";\n+\n+    private DatabaseTypeSetterFactory databaseTypeSetterFactory;\n+\n+    @Test\n+    public void testGetWithNullStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(null));\n+    }\n+\n+    @Test\n+    public void testGetWithEmptyStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(\"\"));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersAndSingleMatch() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertEquals(registeredDatabaseTypeSetters.get(0), resultDatabaseTypeSetter);\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenNoMatchingTypeSetter() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(NON_EXISTING_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenMultipleMatchingTypeSetters() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter(),\n+                                                                               new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithDefaultRegisteredTypeSettersWhenMatchingBoolTypeSetter() {", "originalCommit": "87b75694479f4b22d9b473cebd839bf0aed288a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\nindex 415ecb46c..b9de3c79d 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n\n@@ -1,6 +1,7 @@\n package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n import org.junit.jupiter.api.Assertions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MTM4MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454151381", "bodyText": "This assertion actually tests the type setter itself (whether it supports both string types) and not the factory. Change it to Assertions.assertTrue(resultDatabaseTypeSetter.getSupportedTypes().contains(STRING_TYPE)); and remove the STRING_DEFAULT_DATABASE_TYPE_SETTER_2 constant.", "author": "nictas", "createdAt": "2020-07-14T07:14:43Z", "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";\n+    private static final String LONG_DEFAULT_DATABASE_TYPE_SETTER = \"int8\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_1 = \"varchar\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_2 = \"text\";\n+\n+    private DatabaseTypeSetterFactory databaseTypeSetterFactory;\n+\n+    @Test\n+    public void testGetWithNullStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(null));\n+    }\n+\n+    @Test\n+    public void testGetWithEmptyStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(\"\"));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersAndSingleMatch() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertEquals(registeredDatabaseTypeSetters.get(0), resultDatabaseTypeSetter);\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenNoMatchingTypeSetter() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(NON_EXISTING_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenMultipleMatchingTypeSetters() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter(),\n+                                                                               new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithDefaultRegisteredTypeSettersWhenMatchingBoolTypeSetter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertTrue(resultDatabaseTypeSetter.getSupportedTypes()\n+                                                      .contains(BOOL_DEFAULT_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithDefaultRegisteredTypeSettersWhenMatchingLongTypeSetter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(LONG_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertTrue(resultDatabaseTypeSetter.getSupportedTypes()\n+                                                      .contains(LONG_DEFAULT_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithDefaultRegisteredTypeSettersWhenMatchingStringTypeSetter1() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(STRING_DEFAULT_DATABASE_TYPE_SETTER_1);\n+\n+        Assertions.assertTrue(resultDatabaseTypeSetter.getSupportedTypes()\n+                                                      .contains(STRING_DEFAULT_DATABASE_TYPE_SETTER_2));", "originalCommit": "87b75694479f4b22d9b473cebd839bf0aed288a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\nindex 415ecb46c..b9de3c79d 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java\n\n@@ -1,6 +1,7 @@\n package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n import org.junit.jupiter.api.Assertions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MjAwNQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454152005", "bodyText": "You've renamed the type, but not some of the variables/methods. Rename them for consistency.", "author": "nictas", "createdAt": "2020-07-14T07:15:58Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutor.java", "diffHunk": "@@ -24,11 +24,11 @@\n     @Override\n     public void executeMigrationInternal(String databaseTable) throws SQLException {\n         logger.info(\"Migrating table \\\"{}\\\"...\", databaseTable);\n-        DatabaseTableMetadata sourceTableMetadata = extractTableMetadataFromSourceDatabase(databaseTable);\n+        DatabaseTableData sourceTableMetadata = extractTableMetadataFromSourceDatabase(databaseTable);", "originalCommit": "5827a0a88efd9383a9482c7b7afa015a487ec662", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutor.java b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutor.java\nindex ea376f19f..294f3bf06 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutor.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutor.java\n\n@@ -1,111 +1,31 @@\n package com.sap.cloud.lm.sl.cf.database.migration.executor;\n \n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n-import java.util.List;\n \n-import org.immutables.value.Value.Immutable;\n+import org.immutables.value.Value;\n \n-import com.sap.cloud.lm.sl.cf.database.migration.executor.type.DatabaseTypeSetter;\n-import com.sap.cloud.lm.sl.cf.database.migration.executor.type.DatabaseTypeSetterFactory;\n import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n-import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableColumnMetadata;\n import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n-import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableColumnMetadata;\n-import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableData;\n-import com.sap.cloud.lm.sl.cf.persistence.util.JdbcUtil;\n \n-@Immutable\n+@Value.Immutable\n public abstract class DatabaseTableMigrationExecutor extends DatabaseMigrationExecutor {\n \n     @Override\n     public void executeMigrationInternal(String databaseTable) throws SQLException {\n         logger.info(\"Migrating table \\\"{}\\\"...\", databaseTable);\n-        DatabaseTableData sourceTableMetadata = extractTableMetadataFromSourceDatabase(databaseTable);\n-        transferData(databaseTable, sourceTableMetadata);\n+        DatabaseTableData sourceTableData = getSourceDatabaseQueryClient().extractTableData(databaseTable);\n+        transferData(databaseTable, sourceTableData);\n     }\n \n-    private DatabaseTableData extractTableMetadataFromSourceDatabase(String databaseTable) throws SQLException {\n-        return getSqlQueryExecutor(getSourceDataSource()).executeWithAutoCommit((connection) -> {\n-            PreparedStatement statement = null;\n-            ResultSet resultSet = null;\n-            try {\n-                statement = connection.prepareStatement(String.format(\"SELECT * FROM %s\", databaseTable));\n-                resultSet = statement.executeQuery();\n-                return parseDatabaseTableMetadata(databaseTable, resultSet.getMetaData());\n-            } finally {\n-                JdbcUtil.closeQuietly(resultSet);\n-                JdbcUtil.closeQuietly(statement);\n-            }\n-        });\n-    }\n-\n-    private DatabaseTableData parseDatabaseTableMetadata(String databaseTable, ResultSetMetaData resultSetMetadata) throws SQLException {\n-        ImmutableDatabaseTableData.Builder tableMetadataBuilder = ImmutableDatabaseTableData.builder()\n-                                                                                            .tableName(databaseTable);\n-        for (int currentColumnIndex = 1; currentColumnIndex <= resultSetMetadata.getColumnCount(); currentColumnIndex++) {\n-            tableMetadataBuilder.addTableColumnsMetadata(ImmutableDatabaseTableColumnMetadata.builder()\n-                                                                                             .columnName(resultSetMetadata.getColumnName(currentColumnIndex))\n-                                                                                             .columnType(resultSetMetadata.getColumnTypeName(currentColumnIndex))\n-                                                                                             .build());\n-        }\n-        return tableMetadataBuilder.build();\n-    }\n-\n-    private void transferData(String databaseTable, DatabaseTableData sourceTableMetadata) throws SQLException {\n+    private void transferData(String databaseTable, DatabaseTableData sourceTableData) throws SQLException {\n         logger.info(\"Transfering data for table \\\"{}\\\"...\", databaseTable);\n-        String insertQuery = new DatabaseTableInsertQueryGenerator().generate(sourceTableMetadata);\n-        getSqlQueryExecutor(getSourceDataSource()).executeWithAutoCommit((sourceConnection) -> {\n-            getSqlQueryExecutor(getTargetDataSource()).execute((targetConnection) -> {\n-                PreparedStatement statement = null;\n-                ResultSet resultSet = null;\n-                try {\n-                    statement = sourceConnection.prepareStatement(String.format(\"SELECT * FROM %s\", databaseTable));\n-                    resultSet = statement.executeQuery();\n-                    while (resultSet.next()) {\n-                        transferDataToTargetDatasource(targetConnection, insertQuery, sourceTableMetadata, resultSet);\n-                    }\n-                    return null;\n-                } finally {\n-                    JdbcUtil.closeQuietly(resultSet);\n-                    JdbcUtil.closeQuietly(statement);\n-                }\n-            });\n-            return null;\n-        });\n+        String insertQuery = getDatabaseTableInsertQueryGenerator().generate(sourceTableData);\n+        getTargetDatabaseQueryClient().writeDataToDataSource(insertQuery, sourceTableData);\n     }\n \n-    private void transferDataToTargetDatasource(Connection connection, String insertQuery, DatabaseTableData sourceTableMetadata,\n-                                                ResultSet resultSet)\n-        throws SQLException {\n-        PreparedStatement insertStatement = null;\n-        try {\n-            insertStatement = connection.prepareStatement(insertQuery);\n-            populateInsertStatementParameters(insertStatement, sourceTableMetadata.getTableColumnsMetadata(), resultSet);\n-            insertStatement.executeUpdate();\n-        } finally {\n-            JdbcUtil.closeQuietly(insertStatement);\n-        }\n-\n-    }\n-\n-    private void populateInsertStatementParameters(PreparedStatement insertStatement, List<DatabaseTableColumnMetadata> columnsMetadata,\n-                                                   ResultSet resultSet)\n-        throws SQLException {\n-        for (int columnIndex = 0; columnIndex < columnsMetadata.size(); columnIndex++) {\n-            setInsertStatementBasedOnType(columnsMetadata.get(columnIndex)\n-                                                         .getColumnType(),\n-                                          insertStatement, resultSet, columnIndex + 1);\n-        }\n+    @Value.Default\n+    protected DatabaseTableInsertQueryGenerator getDatabaseTableInsertQueryGenerator() {\n+        return new DatabaseTableInsertQueryGenerator();\n     }\n \n-    private void setInsertStatementBasedOnType(String databaseColumnType, PreparedStatement insertStatement, ResultSet resultSet,\n-                                               int columnIndex)\n-        throws SQLException {\n-        DatabaseTypeSetter databaseTypeSetter = new DatabaseTypeSetterFactory().get(databaseColumnType);\n-        databaseTypeSetter.setType(columnIndex, insertStatement, resultSet);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1Mzk4MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454153980", "bodyText": "Do you need the entire metadata as key? Why not just the column's name?", "author": "nictas", "createdAt": "2020-07-14T07:19:59Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/metadata/DatabaseTableRowData.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.metadata;\n+\n+import java.util.Map;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface DatabaseTableRowData {\n+\n+    Map<DatabaseTableColumnMetadata, Object> getValues();", "originalCommit": "5827a0a88efd9383a9482c7b7afa015a487ec662", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/metadata/DatabaseTableRowData.java b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/metadata/DatabaseTableRowData.java\nindex 03cfbf275..7ddce3575 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/metadata/DatabaseTableRowData.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/metadata/DatabaseTableRowData.java\n\n@@ -7,6 +7,6 @@ import org.immutables.value.Value;\n @Value.Immutable\n public interface DatabaseTableRowData {\n \n-    Map<DatabaseTableColumnMetadata, Object> getValues();\n+    Map<String, Object> getValues();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1Njk0MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454156940", "bodyText": "The index starts from 0 here, but ResultSet counts is columns from 1. See: https://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html#getObject(int,%20java.util.Map)", "author": "nictas", "createdAt": "2020-07-14T07:25:42Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/client/DatabaseQueryClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.client;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.executor.type.DatabaseTypeSetter;\n+import com.sap.cloud.lm.sl.cf.database.migration.executor.type.DatabaseTypeSetterFactory;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableRowData;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableData;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableRowData;\n+import com.sap.cloud.lm.sl.cf.persistence.util.JdbcUtil;\n+import com.sap.cloud.lm.sl.cf.persistence.util.SqlQueryExecutor;\n+\n+public class DatabaseQueryClient {\n+\n+    private final SqlQueryExecutor sqlQueryExecutor;\n+\n+    public DatabaseQueryClient(SqlQueryExecutor sqlQueryExecutor) {\n+        this.sqlQueryExecutor = sqlQueryExecutor;\n+    }\n+\n+    public long getLastSequenceValue(String sequenceName) throws SQLException {\n+        return sqlQueryExecutor.executeWithAutoCommit(connection -> {\n+            PreparedStatement preparedStatement = null;\n+            ResultSet resultSet = null;\n+            try {\n+                preparedStatement = connection.prepareStatement(String.format(\"SELECT last_value FROM %s\", sequenceName));\n+                resultSet = preparedStatement.executeQuery();\n+                while (resultSet.next()) {\n+                    return resultSet.getLong(1);\n+                }\n+                return 0L;\n+            } finally {\n+                JdbcUtil.closeQuietly(resultSet);\n+                JdbcUtil.closeQuietly(preparedStatement);\n+            }\n+        });\n+    }\n+\n+    public void updateSequence(String sequenceName, long lastSequenceValue) throws SQLException {\n+        sqlQueryExecutor.executeWithAutoCommit(connection -> {\n+            PreparedStatement preparedStatement = null;\n+            try {\n+                preparedStatement = connection.prepareStatement(String.format(\"SELECT setval('%s', %d, false)\", sequenceName,\n+                                                                              lastSequenceValue));\n+                preparedStatement.executeQuery();\n+                return null;\n+            } finally {\n+                JdbcUtil.closeQuietly(preparedStatement);\n+            }\n+        });\n+    }\n+\n+    public DatabaseTableData extractTableData(String databaseTable) throws SQLException {\n+        return sqlQueryExecutor.executeWithAutoCommit(connection -> {\n+            PreparedStatement preparedStatement = null;\n+            ResultSet resultSet = null;\n+            try {\n+                preparedStatement = connection.prepareStatement(String.format(\"SELECT * FROM %s\", databaseTable));\n+                resultSet = preparedStatement.executeQuery();\n+                return buildDatabaseTableData(databaseTable, resultSet);\n+            } finally {\n+                JdbcUtil.closeQuietly(resultSet);\n+                JdbcUtil.closeQuietly(preparedStatement);\n+            }\n+        });\n+    }\n+\n+    private DatabaseTableData buildDatabaseTableData(String databaseTable, ResultSet resultSet) throws SQLException {\n+        List<DatabaseTableColumnMetadata> databaseTableColumnsMetadata = parseDatabaseColumnsMetadata(resultSet.getMetaData());\n+        List<DatabaseTableRowData> databaseTableRowsData = parseDatabaseRowsData(resultSet, databaseTableColumnsMetadata);\n+        return ImmutableDatabaseTableData.builder()\n+                                         .tableName(databaseTable)\n+                                         .addAllTableColumnsMetadata(databaseTableColumnsMetadata)\n+                                         .addAllTableRowsData(databaseTableRowsData)\n+                                         .build();\n+    }\n+\n+    private List<DatabaseTableColumnMetadata> parseDatabaseColumnsMetadata(ResultSetMetaData resultSetMetadata) throws SQLException {\n+        List<DatabaseTableColumnMetadata> databaseColumnsMetadata = new ArrayList<>();\n+        for (int currentColumnIndex = 1; currentColumnIndex <= resultSetMetadata.getColumnCount(); currentColumnIndex++) {\n+            databaseColumnsMetadata.add(ImmutableDatabaseTableColumnMetadata.builder()\n+                                                                            .columnName(resultSetMetadata.getColumnName(currentColumnIndex))\n+                                                                            .columnType(resultSetMetadata.getColumnTypeName(currentColumnIndex))\n+                                                                            .build());\n+        }\n+        return databaseColumnsMetadata;\n+    }\n+\n+    private List<DatabaseTableRowData> parseDatabaseRowsData(ResultSet resultSet, List<DatabaseTableColumnMetadata> databaseColumnsMetadata)\n+        throws SQLException {\n+        List<DatabaseTableRowData> databaseTableRowsData = new ArrayList<>();\n+        while (resultSet.next()) {\n+            databaseTableRowsData.add(ImmutableDatabaseTableRowData.builder()\n+                                                                   .putAllValues(collectRowValues(resultSet, databaseColumnsMetadata))\n+                                                                   .build());\n+        }\n+        return databaseTableRowsData;\n+    }\n+\n+    private Map<DatabaseTableColumnMetadata, Object>\n+            collectRowValues(ResultSet resultSet, List<DatabaseTableColumnMetadata> databaseColumnsMetadata) throws SQLException {\n+        Map<DatabaseTableColumnMetadata, Object> databaseTableRowValues = new HashMap<>();\n+        for (int currentColumnIndex = 0; currentColumnIndex < databaseColumnsMetadata.size(); currentColumnIndex++) {", "originalCommit": "ef2c261918da4608cb417db81c63816aaa136a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/client/DatabaseQueryClient.java b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/client/DatabaseQueryClient.java\nindex 422a54cf4..88f8d51fc 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/client/DatabaseQueryClient.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/client/DatabaseQueryClient.java\n\n@@ -108,11 +108,12 @@ public class DatabaseQueryClient {\n         return databaseTableRowsData;\n     }\n \n-    private Map<DatabaseTableColumnMetadata, Object>\n-            collectRowValues(ResultSet resultSet, List<DatabaseTableColumnMetadata> databaseColumnsMetadata) throws SQLException {\n-        Map<DatabaseTableColumnMetadata, Object> databaseTableRowValues = new HashMap<>();\n-        for (int currentColumnIndex = 0; currentColumnIndex < databaseColumnsMetadata.size(); currentColumnIndex++) {\n-            databaseTableRowValues.put(databaseColumnsMetadata.get(currentColumnIndex), resultSet.getObject(currentColumnIndex));\n+    private Map<String, Object> collectRowValues(ResultSet resultSet, List<DatabaseTableColumnMetadata> databaseColumnsMetadata)\n+        throws SQLException {\n+        Map<String, Object> databaseTableRowValues = new HashMap<>();\n+        for (DatabaseTableColumnMetadata databaseColumnMetadata : databaseColumnsMetadata) {\n+            String columnName = databaseColumnMetadata.getColumnName();\n+            databaseTableRowValues.put(columnName, resultSet.getObject(columnName));\n         }\n         return databaseTableRowValues;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MDA4NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454160084", "bodyText": "You don't need constants for these. Just use them directly. Constants are useful for reducing duplication and giving a meaningful name to something, but here they're not doing either.", "author": "nictas", "createdAt": "2020-07-14T07:31:39Z", "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseSequenceMigrationExecutorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.SQLException;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.client.DatabaseQueryClient;\n+\n+class DatabaseSequenceMigrationExecutorTest {\n+\n+    private static final String TEST_SEQUENCE_NAME = \"test\";\n+\n+    private static final long ZERO_SEQUENCE_VALUE = 0L;", "originalCommit": "c7531498dc719495f9865826d67156371ad36097", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseSequenceMigrationExecutorTest.java b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseSequenceMigrationExecutorTest.java\nindex d699f640a..b119d35b8 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseSequenceMigrationExecutorTest.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseSequenceMigrationExecutorTest.java\n\n@@ -17,10 +17,6 @@ class DatabaseSequenceMigrationExecutorTest {\n \n     private static final String TEST_SEQUENCE_NAME = \"test\";\n \n-    private static final long ZERO_SEQUENCE_VALUE = 0L;\n-    private static final long NEGATIVE_SEQUENCE_VALUE = -1L;\n-    private static final long POSITIVE_SEQUENCE_VALUE = 1L;\n-\n     @Mock\n     private DataSource mockSourceDataSource;\n     @Mock\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MDgwNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454160807", "bodyText": "Since null is the default value mocks return, this statement is not needed.", "author": "nictas", "createdAt": "2020-07-14T07:33:07Z", "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.SQLException;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.client.DatabaseQueryClient;\n+import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n+\n+class DatabaseTableMigrationExecutorTest {\n+\n+    private static final String TEST_DATABASE_TABLE = \"test\";\n+    private static final DatabaseTableData DATABASE_TABLE_METADATA = null;\n+\n+    @Mock\n+    private DataSource mockSourceDataSource;\n+    @Mock\n+    private DataSource mockTargetDataSource;\n+    @Mock\n+    private DatabaseQueryClient mockSourceDatabaseQueryClient;\n+    @Mock\n+    private DatabaseQueryClient mockTargetDatabaseQueryClient;\n+    @Mock\n+    private DatabaseTableInsertQueryGenerator mockDatabaseTableInsertQueryGenerator;\n+\n+    private ImmutableDatabaseTableMigrationExecutor databaseTableMigrationExecutor;\n+\n+    @BeforeEach\n+    public void initialiseDatabaseTableMigrationExecutorAndConfigureMocks() throws SQLException {\n+        MockitoAnnotations.initMocks(this);\n+        databaseTableMigrationExecutor = ImmutableDatabaseTableMigrationExecutor.builder()\n+                                                                                .sourceDataSource(mockSourceDataSource)\n+                                                                                .targetDataSource(mockTargetDataSource)\n+                                                                                .sourceDatabaseQueryClient(mockSourceDatabaseQueryClient)\n+                                                                                .targetDatabaseQueryClient(mockTargetDatabaseQueryClient)\n+                                                                                .databaseTableInsertQueryGenerator(mockDatabaseTableInsertQueryGenerator)\n+                                                                                .build();\n+        Mockito.doReturn(DATABASE_TABLE_METADATA)", "originalCommit": "13cfc2fb9f64b58f53853b674b92f4e6f99415f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java\nindex 4752f53bd..c744bad6a 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java\n\n@@ -12,12 +12,10 @@ import org.mockito.MockitoAnnotations;\n \n import com.sap.cloud.lm.sl.cf.database.migration.client.DatabaseQueryClient;\n import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n-import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n \n class DatabaseTableMigrationExecutorTest {\n \n     private static final String TEST_DATABASE_TABLE = \"test\";\n-    private static final DatabaseTableData DATABASE_TABLE_METADATA = null;\n \n     @Mock\n     private DataSource mockSourceDataSource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MTYxNg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454161616", "bodyText": "Test executeMigration and not executeMigrationInternal since the latter is more prone to changes in its interface.", "author": "nictas", "createdAt": "2020-07-14T07:34:43Z", "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.SQLException;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.client.DatabaseQueryClient;\n+import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n+\n+class DatabaseTableMigrationExecutorTest {\n+\n+    private static final String TEST_DATABASE_TABLE = \"test\";\n+    private static final DatabaseTableData DATABASE_TABLE_METADATA = null;\n+\n+    @Mock\n+    private DataSource mockSourceDataSource;\n+    @Mock\n+    private DataSource mockTargetDataSource;\n+    @Mock\n+    private DatabaseQueryClient mockSourceDatabaseQueryClient;\n+    @Mock\n+    private DatabaseQueryClient mockTargetDatabaseQueryClient;\n+    @Mock\n+    private DatabaseTableInsertQueryGenerator mockDatabaseTableInsertQueryGenerator;\n+\n+    private ImmutableDatabaseTableMigrationExecutor databaseTableMigrationExecutor;\n+\n+    @BeforeEach\n+    public void initialiseDatabaseTableMigrationExecutorAndConfigureMocks() throws SQLException {\n+        MockitoAnnotations.initMocks(this);\n+        databaseTableMigrationExecutor = ImmutableDatabaseTableMigrationExecutor.builder()\n+                                                                                .sourceDataSource(mockSourceDataSource)\n+                                                                                .targetDataSource(mockTargetDataSource)\n+                                                                                .sourceDatabaseQueryClient(mockSourceDatabaseQueryClient)\n+                                                                                .targetDatabaseQueryClient(mockTargetDatabaseQueryClient)\n+                                                                                .databaseTableInsertQueryGenerator(mockDatabaseTableInsertQueryGenerator)\n+                                                                                .build();\n+        Mockito.doReturn(DATABASE_TABLE_METADATA)\n+               .when(mockSourceDatabaseQueryClient)\n+               .extractTableData(Mockito.anyString());\n+        Mockito.doReturn(\"\")\n+               .when(mockDatabaseTableInsertQueryGenerator)\n+               .generate(DATABASE_TABLE_METADATA);\n+    }\n+\n+    @Test\n+    public void testExecuteMigrationInternalWithTestDatabaseTableString() throws SQLException {\n+        databaseTableMigrationExecutor.executeMigrationInternal(TEST_DATABASE_TABLE);", "originalCommit": "13cfc2fb9f64b58f53853b674b92f4e6f99415f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java\nindex 4752f53bd..c744bad6a 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java\n\n@@ -12,12 +12,10 @@ import org.mockito.MockitoAnnotations;\n \n import com.sap.cloud.lm.sl.cf.database.migration.client.DatabaseQueryClient;\n import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n-import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n \n class DatabaseTableMigrationExecutorTest {\n \n     private static final String TEST_DATABASE_TABLE = \"test\";\n-    private static final DatabaseTableData DATABASE_TABLE_METADATA = null;\n \n     @Mock\n     private DataSource mockSourceDataSource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyMDc5MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454220791", "bodyText": "Unnecessary unboxing of value", "author": "radito3", "createdAt": "2020-07-14T09:19:36Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/BooleanDatabaseTypeSetter.java", "diffHunk": "@@ -14,8 +13,9 @@\n     }\n \n     @Override\n-    public void setType(int columnIndex, PreparedStatement insertStatement, ResultSet sourceData) throws SQLException {\n-        insertStatement.setBoolean(columnIndex, sourceData.getBoolean(columnIndex));\n+    public void setType(int columnIndex, PreparedStatement insertStatement, Object value) throws SQLException {\n+        insertStatement.setBoolean(columnIndex, ((Boolean) value).booleanValue());", "originalCommit": "ea5f1ebe3d7a1edd70420dbe673b975c682842dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/BooleanDatabaseTypeSetter.java b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/BooleanDatabaseTypeSetter.java\nindex cef36e9fb..00445ffba 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/BooleanDatabaseTypeSetter.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/BooleanDatabaseTypeSetter.java\n\n@@ -14,8 +14,7 @@ public class BooleanDatabaseTypeSetter implements DatabaseTypeSetter {\n \n     @Override\n     public void setType(int columnIndex, PreparedStatement insertStatement, Object value) throws SQLException {\n-        insertStatement.setBoolean(columnIndex, ((Boolean) value).booleanValue());\n-\n+        insertStatement.setBoolean(columnIndex, (Boolean) value);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyMTAzMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454221033", "bodyText": "Unnecessary unboxing of value", "author": "radito3", "createdAt": "2020-07-14T09:20:01Z", "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/LongDatabaseTypeSetter.java", "diffHunk": "@@ -14,8 +13,8 @@\n     }\n \n     @Override\n-    public void setType(int columnIndex, PreparedStatement insertStatement, ResultSet sourceData) throws SQLException {\n-        insertStatement.setLong(columnIndex, sourceData.getLong(columnIndex));\n+    public void setType(int columnIndex, PreparedStatement insertStatement, Object value) throws SQLException {\n+        insertStatement.setLong(columnIndex, ((Long) value).longValue());", "originalCommit": "ea5f1ebe3d7a1edd70420dbe673b975c682842dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dadba95ca85f138b1de9e57a326468629d50d76", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/LongDatabaseTypeSetter.java b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/LongDatabaseTypeSetter.java\nindex c90e9ea14..9625f38a5 100644\n--- a/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/LongDatabaseTypeSetter.java\n+++ b/com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/LongDatabaseTypeSetter.java\n\n@@ -14,7 +14,7 @@ public class LongDatabaseTypeSetter implements DatabaseTypeSetter {\n \n     @Override\n     public void setType(int columnIndex, PreparedStatement insertStatement, Object value) throws SQLException {\n-        insertStatement.setLong(columnIndex, ((Long) value).longValue());\n+        insertStatement.setLong(columnIndex, (Long) value);\n     }\n \n }\n"}}, {"oid": "0dadba95ca85f138b1de9e57a326468629d50d76", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0dadba95ca85f138b1de9e57a326468629d50d76", "message": "Adds test for DatabaseTableInsertQueryGenerator", "committedDate": "2020-07-14T09:40:01Z", "type": "forcePushed"}, {"oid": "a38f26c99256b66530702c5e4fb6f9660c05ba45", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/a38f26c99256b66530702c5e4fb6f9660c05ba45", "message": "Adds test for DatabaseTableInsertQueryGenerator", "committedDate": "2020-07-14T09:46:01Z", "type": "forcePushed"}, {"oid": "1292277df421f1d548566d5eec1d23f9f3e6656a", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/1292277df421f1d548566d5eec1d23f9f3e6656a", "message": "Adds test for DatabaseTableInsertQueryGenerator", "committedDate": "2020-07-14T09:54:04Z", "type": "forcePushed"}, {"oid": "f8bef3a8854d5677ac6989b10d8c427903668a72", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/f8bef3a8854d5677ac6989b10d8c427903668a72", "message": "Makes DatabaseTypeSetterFactory testable", "committedDate": "2020-07-16T15:04:17Z", "type": "commit"}, {"oid": "cd09d2e87a890f6541669a15510bab37e6f88016", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/cd09d2e87a890f6541669a15510bab37e6f88016", "message": "Adds DatabaseTypeSetterFactory test class", "committedDate": "2020-07-16T15:04:17Z", "type": "commit"}, {"oid": "d778409837e01a9f3b7e473b6cd91c736fd6bb92", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/d778409837e01a9f3b7e473b6cd91c736fd6bb92", "message": "Adds DatabaseTableRowData interface and renames DatabaseTableMetadata to DatabaseTableData", "committedDate": "2020-07-17T06:51:49Z", "type": "commit"}, {"oid": "788b5e24165f3565db0199b5c477a92ee4ab3b6e", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/788b5e24165f3565db0199b5c477a92ee4ab3b6e", "message": "Adds DatabaseQueryClient class with changes in type setters and implements them in the project", "committedDate": "2020-07-17T06:52:52Z", "type": "commit"}, {"oid": "4268e018e9ccd37567f5627e6636a1025b4e96b2", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/4268e018e9ccd37567f5627e6636a1025b4e96b2", "message": "Adds test for DatabaseSequenceMigrationExecutor", "committedDate": "2020-07-17T06:52:52Z", "type": "commit"}, {"oid": "c0c3839aee79ebba9e2c8fe6f0fb2afa21a35cbe", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/c0c3839aee79ebba9e2c8fe6f0fb2afa21a35cbe", "message": "Adds test for DatabaseTableMigrationExecutor", "committedDate": "2020-07-17T06:52:52Z", "type": "commit"}, {"oid": "8b718255bacc9c71bcfd3823f63e61c2d18c424a", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8b718255bacc9c71bcfd3823f63e61c2d18c424a", "message": "Adds test for DatabaseTableInsertQueryGenerator", "committedDate": "2020-07-17T06:52:52Z", "type": "commit"}, {"oid": "8b718255bacc9c71bcfd3823f63e61c2d18c424a", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8b718255bacc9c71bcfd3823f63e61c2d18c424a", "message": "Adds test for DatabaseTableInsertQueryGenerator", "committedDate": "2020-07-17T06:52:52Z", "type": "forcePushed"}, {"oid": "9e44639d5eccc6c954514162af00c8a6a66b169f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9e44639d5eccc6c954514162af00c8a6a66b169f", "message": "Adds multiapps package-info file and updates DatabaseTableRowData", "committedDate": "2020-07-17T09:20:16Z", "type": "commit"}]}