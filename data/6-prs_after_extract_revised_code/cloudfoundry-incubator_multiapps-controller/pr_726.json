{"pr_number": 726, "pr_title": "Metadata", "pr_createdAt": "2020-01-14T13:05:56Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726", "timeline": [{"oid": "8bc405963750a01048a97b993916b86a75f8dd2c", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8bc405963750a01048a97b993916b86a75f8dd2c", "message": "Refactoring Mta Metadata", "committedDate": "2020-01-24T07:14:00Z", "type": "forcePushed"}, {"oid": "e1ac8c0452fa919dfd235a0a924742b9d0f9b292", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/e1ac8c0452fa919dfd235a0a924742b9d0f9b292", "message": "Refactoring Mta Metadata", "committedDate": "2020-01-24T07:42:30Z", "type": "forcePushed"}, {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/11d9462ec98a34c4811fb8c58bede26e204d11fe", "message": "Refactoring Mta Metadata", "committedDate": "2020-01-24T07:59:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0ODU4NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370548585", "bodyText": "Why are we creating 2 streams from lists and then collect into a list?\nWhy don't we just use ListUtils.union(List, List) ?", "author": "radito3", "createdAt": "2020-01-24T09:50:12Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Autowired\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Autowired\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = getDeployedMtasByEnv(client).stream()\n+                                                                          .filter(deployedMtaByEnv -> !deployedMtas.contains(deployedMtaByEnv))\n+                                                                          .collect(Collectors.toList());\n+        return Stream.concat(deployedMtas.stream(), deployedMtasByEnv.stream())", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\nindex ca7484f6a..6fb3a6526 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n\n@@ -1,22 +1,22 @@\n package com.sap.cloud.lm.sl.cf.core.cf.detect;\n \n-import java.util.Collection;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n \n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1Mzg0NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370553845", "bodyText": "I think a cleaner way of doing this is collecting like this\nCollectors.toMap(mta -> mta.getMetadata().getId(), mta -> mta, this::mergeMtas)\nThis way, there won't be a need to use optional and the map's values could be directly passed to a list constructor", "author": "radito3", "createdAt": "2020-01-24T10:02:01Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Autowired\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Autowired\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = getDeployedMtasByEnv(client).stream()\n+                                                                          .filter(deployedMtaByEnv -> !deployedMtas.contains(deployedMtaByEnv))\n+                                                                          .collect(Collectors.toList());\n+        return Stream.concat(deployedMtas.stream(), deployedMtasByEnv.stream())\n+                     .collect(Collectors.toList());\n+    }\n+\n+    private List<DeployedMta> getDeployedMtasByMetadataSelectionCriteria(MtaMetadataCriteria criteria, CloudControllerClient client) {\n+        List<MtaMetadataEntity> mtaMetadataEntities = mtaMetadataEntityCollectors.stream()\n+                                                                                 .map(collector -> collector.collect(criteria, client))\n+                                                                                 .flatMap(List::stream)\n+                                                                                 .collect(Collectors.toList());\n+        List<DeployedMta> deployedMtas = mtaMetadataEntityAggregator.aggregate(mtaMetadataEntities);\n+        return processDeployedMtas(deployedMtas);\n+    }\n+\n+    private List<DeployedMta> processDeployedMtas(List<DeployedMta> deployedMtas) {\n+        List<DeployedMta> mergedMtasById = mergeDifferentVersionsOfMtasWithSameId(deployedMtas);\n+        return removeEmptyMtas(mergedMtasById);\n+    }\n+\n+    private List<DeployedMta> mergeDifferentVersionsOfMtasWithSameId(List<DeployedMta> mtas) {\n+        Map<String, Optional<DeployedMta>> deployedMtasById = mtas.stream()", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\nindex ca7484f6a..6fb3a6526 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n\n@@ -1,22 +1,22 @@\n package com.sap.cloud.lm.sl.cf.core.cf.detect;\n \n-import java.util.Collection;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n \n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NDg3Ng==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370554876", "bodyText": "Why not use Immutables?", "author": "radito3", "createdAt": "2020-01-24T10:04:21Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ApplicationMtaMetadata.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+\n+public class ApplicationMtaMetadata {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ApplicationMtaMetadata.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ApplicationMtaMetadata.java\nindex ff0d57631..7e6352dae 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ApplicationMtaMetadata.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ApplicationMtaMetadata.java\n\n@@ -1,50 +1,14 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata;\n \n-import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n-\n-public class ApplicationMtaMetadata {\n-\n-    private MtaMetadata mtaMetadata;\n-    private DeployedMtaModule deployedMtaModule;\n-\n-    private ApplicationMtaMetadata(Builder builder) {\n-        this.mtaMetadata = builder.mtaMetadata;\n-        this.deployedMtaModule = builder.module;\n-    }\n-    \n-    public MtaMetadata getMtaMetadata() {\n-        return mtaMetadata;\n-    }\n-\n-    public DeployedMtaModule getDeployedMtaModule() {\n-        return deployedMtaModule;\n-    }\n+import org.immutables.value.Value;\n \n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    public static final class Builder {\n-        private MtaMetadata mtaMetadata;\n-        private DeployedMtaModule module;\n-\n-        private Builder() {\n-        }\n-\n-        public Builder withMtaMetadata(MtaMetadata mtaMetadata) {\n-            this.mtaMetadata = mtaMetadata;\n-            return this;\n-        }\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n \n-        public Builder withModule(DeployedMtaModule module) {\n-            this.module = module;\n-            return this;\n-        }\n+@Value.Immutable\n+public interface ApplicationMtaMetadata {\n \n-        public ApplicationMtaMetadata build() {\n-            return new ApplicationMtaMetadata(this);\n-        }\n-    }\n+    MtaMetadata getMtaMetadata();\n \n+    DeployedMtaModule getDeployedMtaModule();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NTIxMg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370555212", "bodyText": "Same as the above comment.\nThis is unneeded complexity with the merging of mtas.", "author": "radito3", "createdAt": "2020-01-24T10:05:12Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetectorEnv.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ApplicationMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ApplicationMtaMetadataEnvExtractor;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+public class DeployedMtaDetectorEnv {\n+\n+    /**\n+     * Detects all deployed components on this platform.\n+     *\n+     */\n+\n+    private final CloudControllerClient client;\n+\n+    public DeployedMtaDetectorEnv(CloudControllerClient client) {\n+        this.client = client;\n+    }\n+\n+    public List<DeployedMta> detectAllDeployedComponents() {\n+        List<DeployedMta> deployedMtas = client.getApplications()\n+                                               .stream()\n+                                               .map(ApplicationMtaMetadataEnvExtractor::extractMetadata)\n+                                               .filter(Objects::nonNull)\n+                                               .map(this::getDeployedMta)\n+                                               .collect(Collectors.toList());\n+        return mergeDifferentVersionsOfMtasWithSameId(deployedMtas);", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetectorEnv.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetectorEnv.java\nindex e694181f9..07f488635 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetectorEnv.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetectorEnv.java\n\n@@ -3,6 +3,7 @@ package com.sap.cloud.lm.sl.cf.core.cf.detect;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NTM1Mg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370555352", "bodyText": "Immutables?", "author": "radito3", "createdAt": "2020-01-24T10:05:33Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ServiceMtaMetadata.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+\n+public class ServiceMtaMetadata {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ServiceMtaMetadata.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ServiceMtaMetadata.java\nindex 2cef79fe0..9a9625d10 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ServiceMtaMetadata.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ServiceMtaMetadata.java\n\n@@ -1,59 +1,14 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata;\n \n-import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n-\n-public class ServiceMtaMetadata {\n-\n-    private MtaMetadata mtaMetadata;\n-    private DeployedMtaResource deployedMtaResource;\n-\n-    public ServiceMtaMetadata() {\n-    }\n-\n-    private ServiceMtaMetadata(Builder builder) {\n-        this.mtaMetadata = builder.mtaMetadata;\n-        this.deployedMtaResource = builder.deployedMtaResource;\n-    }\n-\n-    public MtaMetadata getMtaMetadata() {\n-        return mtaMetadata;\n-    }\n+import org.immutables.value.Value;\n \n-    public void setMtaMetadata(MtaMetadata mtaMetadata) {\n-        this.mtaMetadata = mtaMetadata;\n-    }\n-\n-    public DeployedMtaResource getDeployedMtaResource() {\n-        return deployedMtaResource;\n-    }\n-\n-    public void setDeployedMtaResource(DeployedMtaResource deployedMtaResource) {\n-        this.deployedMtaResource = deployedMtaResource;\n-    }\n-\n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    public static final class Builder {\n-        private MtaMetadata mtaMetadata;\n-        private DeployedMtaResource deployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n \n-        private Builder() {\n-        }\n+@Value.Immutable\n+public interface ServiceMtaMetadata {\n \n-        public Builder withMtaMetadata(MtaMetadata mtaMetadata) {\n-            this.mtaMetadata = mtaMetadata;\n-            return this;\n-        }\n+    MtaMetadata getMtaMetadata();\n \n-        public Builder withDeployedMtaResource(DeployedMtaResource deployedMtaResource) {\n-            this.deployedMtaResource = deployedMtaResource;\n-            return this;\n-        }\n+    DeployedMtaResource getDeployedMtaResource();\n \n-        public ServiceMtaMetadata build() {\n-            return new ServiceMtaMetadata(this);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NjA3Mg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370556072", "bodyText": "Why not give the prefix and label a default non-null value and/or check when they are being set that the value passed is not null and change this to return prefix + label?", "author": "radito3", "createdAt": "2020-01-24T10:07:06Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/criteria/LabelBuilder.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class LabelBuilder {\n+    private MtaMetadataCriteriaBuilder mtaMetadataCriteriaBuilder;\n+    private String label;\n+    private String prefix;\n+\n+    public LabelBuilder(MtaMetadataCriteriaBuilder mtaMetadataCriteriaBuilder, String label) {\n+        this.mtaMetadataCriteriaBuilder = mtaMetadataCriteriaBuilder;\n+        this.label = label;\n+    }\n+\n+    public LabelBuilder withPrefix(String prefix) {\n+        MtaMetadataCriteriaValidator.validateLabelKeyPrefix(prefix);\n+        this.prefix = prefix;\n+        return this;\n+    }\n+\n+    public FinalizingBuilder exists() {\n+        return completeQuery(buildLabel());\n+    }\n+\n+    public FinalizingBuilder notExists() {\n+        return completeQuery(\"!\" + buildLabel());\n+    }\n+\n+    public FinalizingBuilder haveValue(String value) {\n+        MtaMetadataCriteriaValidator.validateLabelValue(value);\n+        return completeQuery(buildLabel() + \"=\" + value);\n+    }\n+\n+    public FinalizingBuilder notHaveValue(String value) {\n+        MtaMetadataCriteriaValidator.validateLabelValue(value);\n+        return completeQuery(buildLabel() + \"!=\" + value);\n+    }\n+\n+    public FinalizingBuilder valueIn(List<String> values) {\n+        String concatenatedValues = values.stream()\n+                                          .peek(MtaMetadataCriteriaValidator::validateLabelValue)\n+                                          .collect(Collectors.joining(\",\"));\n+        return completeQuery(buildLabel() + \" in (\" + concatenatedValues + \")\");\n+    }\n+\n+    public FinalizingBuilder valueNotIn(List<String> values) {\n+        String concatenatedValues = values.stream()\n+                                          .peek(MtaMetadataCriteriaValidator::validateLabelValue)\n+                                          .collect(Collectors.joining(\",\"));\n+        return completeQuery(buildLabel() + \" notin (\" + concatenatedValues + \")\");\n+    }\n+\n+    private String buildLabel() {\n+        return Stream.of(prefix, label)", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9337c3ba3b50e83385b94df28c5e67566ca5dc8d", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/criteria/LabelBuilder.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/criteria/LabelBuilder.java\ndeleted file mode 100644\nindex 18749b932..000000000\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/criteria/LabelBuilder.java\n+++ /dev/null\n\n@@ -1,79 +0,0 @@\n-package com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria;\n-\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-public class LabelBuilder {\n-    private MtaMetadataCriteriaBuilder mtaMetadataCriteriaBuilder;\n-    private String label;\n-    private String prefix;\n-\n-    public LabelBuilder(MtaMetadataCriteriaBuilder mtaMetadataCriteriaBuilder, String label) {\n-        this.mtaMetadataCriteriaBuilder = mtaMetadataCriteriaBuilder;\n-        this.label = label;\n-    }\n-\n-    public LabelBuilder withPrefix(String prefix) {\n-        MtaMetadataCriteriaValidator.validateLabelKeyPrefix(prefix);\n-        this.prefix = prefix;\n-        return this;\n-    }\n-\n-    public FinalizingBuilder exists() {\n-        return completeQuery(buildLabel());\n-    }\n-\n-    public FinalizingBuilder notExists() {\n-        return completeQuery(\"!\" + buildLabel());\n-    }\n-\n-    public FinalizingBuilder haveValue(String value) {\n-        MtaMetadataCriteriaValidator.validateLabelValue(value);\n-        return completeQuery(buildLabel() + \"=\" + value);\n-    }\n-\n-    public FinalizingBuilder notHaveValue(String value) {\n-        MtaMetadataCriteriaValidator.validateLabelValue(value);\n-        return completeQuery(buildLabel() + \"!=\" + value);\n-    }\n-\n-    public FinalizingBuilder valueIn(List<String> values) {\n-        String concatenatedValues = values.stream()\n-                                          .peek(MtaMetadataCriteriaValidator::validateLabelValue)\n-                                          .collect(Collectors.joining(\",\"));\n-        return completeQuery(buildLabel() + \" in (\" + concatenatedValues + \")\");\n-    }\n-\n-    public FinalizingBuilder valueNotIn(List<String> values) {\n-        String concatenatedValues = values.stream()\n-                                          .peek(MtaMetadataCriteriaValidator::validateLabelValue)\n-                                          .collect(Collectors.joining(\",\"));\n-        return completeQuery(buildLabel() + \" notin (\" + concatenatedValues + \")\");\n-    }\n-\n-    private String buildLabel() {\n-        return Stream.of(prefix, label)\n-                     .filter(Objects::nonNull)\n-                     .collect(Collectors.joining(\"\"));\n-    }\n-\n-    private FinalizingBuilder completeQuery(String query) {\n-        MtaMetadataCriteriaBuilder nextBuilder = getNextBuilder();\n-        nextBuilder.getQueries()\n-                   .add(query);\n-        return new FinalizingBuilder(nextBuilder);\n-    }\n-\n-    private MtaMetadataCriteriaBuilder getNextBuilder() {\n-        MtaMetadataCriteriaBuilder nextBuilder = new MtaMetadataCriteriaBuilder();\n-        nextBuilder.getQueries()\n-                   .addAll(mtaMetadataCriteriaBuilder.getQueries());\n-        return nextBuilder;\n-    }\n-\n-    public String getLabel() {\n-        return label;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODE4MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370558180", "bodyText": "I prefer .map(Map::values).flatMap(Collection::stream)", "author": "radito3", "createdAt": "2020-01-24T10:11:39Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    public List<DeployedMta> aggregate(List<MtaMetadataEntity> entities) {\n+        Map<String, Map<Version, List<MtaMetadataEntity>>> entitiesByIdByVersion = getMtaMetadataEntitiesByIdByVersion(entities);\n+        return entitiesByIdByVersion.values()\n+                                    .stream()\n+                                    .flatMap(entitiesByVersion -> entitiesByVersion.values()", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1736fef636a4f38959966f6d6a859dc70045679", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\nindex 8de6ebe7c..412d9c3d1 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n\n@@ -1,38 +1,106 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n import com.sap.cloud.lm.sl.mta.model.Version;\n \n @Component\n public class MtaMetadataEntityAggregator {\n \n-    public List<DeployedMta> aggregate(List<MtaMetadataEntity> entities) {\n-        Map<String, Map<Version, List<MtaMetadataEntity>>> entitiesByIdByVersion = getMtaMetadataEntitiesByIdByVersion(entities);\n-        return entitiesByIdByVersion.values()\n-                                    .stream()\n-                                    .flatMap(entitiesByVersion -> entitiesByVersion.values()\n-                                                                                   .stream())\n-                                    .map(this::aggregateMtaMetadataEntitiesWithSameId)\n-                                    .collect(Collectors.toList());\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();\n+        for (CloudEntity entity : entities) {\n+            String mtaId = mtaMetadataParser.parseMtaMetadata(entity)\n+                                            .getId();\n+            if (entitiesByMtaId.containsKey(mtaId)) {\n+                entitiesByMtaId.get(mtaId)\n+                               .add(entity);\n+            } else {\n+                entitiesByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(entity)));\n+            }\n+        }\n+        return entitiesByMtaId;\n+    }\n+\n+    private DeployedMta toDeployedMta(List<CloudEntity> entities) {\n+        MtaMetadata mtaMetadata = getMtaMetadata(entities);\n+        return ImmutableDeployedMta.builder()\n+                                   .metadata(mtaMetadata)\n+                                   .modules(getModules(entities))\n+                                   .resources(getResources(entities))\n+                                   .build();\n+    }\n+\n+    private MtaMetadata getMtaMetadata(List<CloudEntity> entities) {\n+        String mtaId = mtaMetadataParser.parseMtaMetadata(entities.get(0))\n+                                        .getId();\n+        Version version = getVersion(entities);\n+        return ImmutableMtaMetadata.builder()\n+                                   .id(mtaId)\n+                                   .version(version)\n+                                   .build();\n+    }\n+\n+    private Version getVersion(List<CloudEntity> entities) {\n+        if (allHaveSameMtaVersion(entities)) {\n+            return mtaMetadataParser.parseMtaMetadata(entities.get(0))\n+                                    .getVersion();\n+        }\n+        return null;\n     }\n \n-    private Map<String, Map<Version, List<MtaMetadataEntity>>> getMtaMetadataEntitiesByIdByVersion(List<MtaMetadataEntity> entities) {\n+    private boolean allHaveSameMtaVersion(List<CloudEntity> entities) {\n         return entities.stream()\n-                       .collect(Collectors.groupingBy(e -> e.getMtaMetadata()\n-                                                            .getId(),\n-                                                      Collectors.groupingBy(e -> e.getMtaMetadata()\n-                                                                                  .getVersion())));\n+                       .map(entity -> mtaMetadataParser.parseMtaMetadata(entity)\n+                                                       .getVersion())\n+                       .distinct()\n+                       .count() == 1;\n     }\n \n-    private DeployedMta aggregateMtaMetadataEntitiesWithSameId(List<MtaMetadataEntity> mtaMetadataEntities) {\n-        return new DeployedMtaFiller().fillUsing(mtaMetadataEntities);\n+    private List<DeployedMtaModule> getModules(List<CloudEntity> entities) {\n+        return entities.stream()\n+                       .filter(CloudApplication.class::isInstance)\n+                       .map(CloudApplication.class::cast)\n+                       .map(mtaMetadataParser::parseModule)\n+                       .collect(Collectors.toList());\n+    }\n+\n+    private List<DeployedMtaResource> getResources(List<CloudEntity> entities) {\n+        return entities.stream()\n+                       .filter(CloudService.class::isInstance)\n+                       .map(CloudService.class::cast)\n+                       .map(mtaMetadataParser::parseResource)\n+                       .collect(Collectors.toList());\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjQxNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370582414", "bodyText": "Parameters can't be null since it's .getOrDefault(..., Collections.emptyMap())", "author": "radito3", "createdAt": "2020-01-24T11:09:56Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ApplicationMtaMetadataExtractor;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.SupportedParameters;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.ProvidedDependency;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+\n+public class ApplicationMetadataBuilder {\n+\n+    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> moduleResources,\n+                                 List<String> uris) {\n+        List<DeployedMtaResource> deployedResources = moduleResources.stream()\n+                                                                     .map(resource -> mapResourceToDeployedMtaResource(resource, module))\n+                                                                     .collect(Collectors.toList());\n+\n+        List<String> providedDependenciesNames = module.getProvidedDependencies()\n+                                                       .stream()\n+                                                       .filter(ProvidedDependency::isPublic)\n+                                                       .map(ProvidedDependency::getName)\n+                                                       .collect(Collectors.toList());\n+\n+        DeployedMtaModule deployedMtaModule = DeployedMtaModule.builder()\n+                                                               .withModuleName(module.getName())\n+                                                               .withAppName(NameUtil.getApplicationName(module))\n+                                                               .withProvidedDependencyNames(providedDependenciesNames)\n+                                                               .withResources(deployedResources)\n+                                                               .withUris(uris)\n+                                                               .build();\n+\n+        return Metadata.builder()\n+                       .label(MtaMetadataLabels.MTA_ID, deploymentDescriptor.getId())\n+                       .label(MtaMetadataLabels.MTA_VERSION, deploymentDescriptor.getVersion())\n+                       .annotation(ApplicationMtaMetadataExtractor.MODULE, JsonUtil.toJson(deployedMtaModule, true))\n+                       .build();\n+    }\n+\n+    private static DeployedMtaResource mapResourceToDeployedMtaResource(ResourceAndResourceType applicationService, Module module) {\n+        ResourceType resourceType = applicationService.getResourceType();\n+        Resource resource = applicationService.getResource();\n+        if (resourceType != ResourceType.USER_PROVIDED_SERVICE) {\n+            return DeployedMtaResource.builder()\n+                                      .withServiceName(NameUtil.getServiceName(resource))\n+                                      .withResourceName(resource.getName())\n+                                      .build();\n+        }\n+\n+        List<DeployedMtaModule> deployedMtaModules = Collections.singletonList(DeployedMtaModule.builder()\n+                                                                                                .withModuleName(module.getName())\n+                                                                                                .withAppName(NameUtil.getApplicationName(module))\n+                                                                                                .build());\n+        Map<String, Object> parameters = (Map<String, Object>) resource.getParameters()\n+                                                                       .getOrDefault(SupportedParameters.SERVICE_CONFIG,\n+                                                                                     Collections.emptyMap());\n+        if (parameters == null) {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\nindex 50a9c951f..37f865d02 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\n\n@@ -27,13 +27,7 @@ public class ApplicationMetadataBuilder {\n         List<DeployedMtaResource> deployedResources = moduleResources.stream()\n                                                                      .map(resource -> mapResourceToDeployedMtaResource(resource, module))\n                                                                      .collect(Collectors.toList());\n-\n-        List<String> providedDependenciesNames = module.getProvidedDependencies()\n-                                                       .stream()\n-                                                       .filter(ProvidedDependency::isPublic)\n-                                                       .map(ProvidedDependency::getName)\n-                                                       .collect(Collectors.toList());\n-\n+        List<String> providedDependenciesNames = getProvidedDependencies(module);\n         DeployedMtaModule deployedMtaModule = DeployedMtaModule.builder()\n                                                                .withModuleName(module.getName())\n                                                                .withAppName(NameUtil.getApplicationName(module))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzA4OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370583089", "bodyText": "This class has a lot in common with the application metadata builder.\nIs it possible that some form of generalization be done to reduce duplication?", "author": "radito3", "createdAt": "2020-01-24T11:11:41Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ServiceMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ServiceMtaMetadataExtractor;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class ServiceMetadataBuilder {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NDY2NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372374665", "bodyText": "Check my above comment and you will find a way to workaround it.", "author": "enchobelezirev", "createdAt": "2020-01-29T13:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d1736fef636a4f38959966f6d6a859dc70045679", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ServiceMetadataBuilder.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ServiceMetadataBuilder.java\nindex 68770faba..f5c516655 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ServiceMetadataBuilder.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ServiceMetadataBuilder.java\n\n@@ -1,19 +1,22 @@\n package com.sap.cloud.lm.sl.cf.core.cf.v2;\n \n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ServiceMtaMetadataExtractor;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n import com.sap.cloud.lm.sl.common.util.JsonUtil;\n import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n import com.sap.cloud.lm.sl.mta.model.Module;\n import com.sap.cloud.lm.sl.mta.model.Resource;\n-import org.cloudfoundry.client.v3.Metadata;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n \n public class ServiceMetadataBuilder {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTI1MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370585250", "bodyText": "Is it possible to use Immutables?", "author": "radito3", "createdAt": "2020-01-24T11:17:59Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMta.java", "diffHunk": "@@ -1,29 +1,37 @@\n package com.sap.cloud.lm.sl.cf.core.model;\r\n \r\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\r\n+\r\n+import java.util.ArrayList;\r\n import java.util.List;\r\n import java.util.Objects;\r\n-import java.util.Set;\r\n \r\n public class DeployedMta {\r", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1736fef636a4f38959966f6d6a859dc70045679", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMta.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMta.java\nindex 6a21e2556..a3cdab8b3 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMta.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMta.java\n\n@@ -1,114 +1,22 @@\n package com.sap.cloud.lm.sl.cf.core.model;\n \n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n-\n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Objects;\n-\n-public class DeployedMta {\n-\n-    private MtaMetadata metadata;\n-    private List<DeployedMtaModule> modules = new ArrayList<>();\n-    private List<DeployedMtaResource> resources = new ArrayList<>();\n-\n-    private DeployedMta(Builder builder) {\n-        this.metadata = builder.metadata;\n-        this.modules = builder.modules;\n-        this.resources = builder.resources;\n-    }\n-\n-    public DeployedMta() {\n-    }\n-\n-    public DeployedMta(MtaMetadata metadata, List<DeployedMtaModule> modules, List<DeployedMtaResource> resources) {\n-        this.metadata = metadata;\n-        this.modules = modules;\n-        this.resources = resources;\n-    }\n-\n-    public MtaMetadata getMetadata() {\n-        return metadata;\n-    }\n-\n-    public void setMetadata(MtaMetadata metadata) {\n-        this.metadata = metadata;\n-    }\n \n-    public List<DeployedMtaModule> getModules() {\n-        return modules;\n-    }\n+import org.immutables.value.Value;\n \n-    public void setModules(List<DeployedMtaModule> modules) {\n-        this.modules = modules;\n-    }\n-\n-    public List<DeployedMtaResource> getResources() {\n-        return resources;\n-    }\n-\n-    public void setResources(List<DeployedMtaResource> resources) {\n-        this.resources = resources;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(metadata);\n-    }\n-\n-    @Override\n-    public boolean equals(Object object) {\n-        if (this == object) {\n-            return true;\n-        }\n-        if (object == null) {\n-            return false;\n-        }\n-        if (getClass() != object.getClass()) {\n-            return false;\n-        }\n-        DeployedMta other = (DeployedMta) object;\n-        return Objects.equals(metadata, other.metadata);\n-    }\n-\n-    public DeployedMtaModule findDeployedModule(String moduleName) {\n-        return getModules().stream()\n-                           .filter(module -> module.getModuleName()\n-                                                   .equalsIgnoreCase(moduleName))\n-                           .findFirst()\n-                           .orElse(null);\n-    }\n-\n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    public static final class Builder {\n-        private MtaMetadata metadata;\n-        private List<DeployedMtaModule> modules = new ArrayList<>();\n-        private List<DeployedMtaResource> resources = new ArrayList<>();\n-\n-        private Builder() {\n-        }\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n \n-        public Builder withMetadata(MtaMetadata metadata) {\n-            this.metadata = metadata;\n-            return this;\n-        }\n+@Value.Immutable\n+@JsonDeserialize(builder = ImmutableDeployedMta.Builder.class)\n+public interface DeployedMta {\n \n-        public Builder withModules(List<DeployedMtaModule> modules) {\n-            this.modules = modules;\n-            return this;\n-        }\n+    MtaMetadata getMetadata();\n \n-        public Builder withResources(List<DeployedMtaResource> resources) {\n-            this.resources = resources;\n-            return this;\n-        }\n+    @Value.Auxiliary\n+    List<DeployedMtaModule> getModules();\n \n-        public DeployedMta build() {\n-            return new DeployedMta(this);\n-        }\n-    }\n+    @Value.Auxiliary\n+    List<DeployedMtaResource> getResources();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTU2NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370585564", "bodyText": "Immutables?", "author": "radito3", "createdAt": "2020-01-24T11:18:51Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaModule.java", "diffHunk": "@@ -1,30 +1,31 @@\n package com.sap.cloud.lm.sl.cf.core.model;\n \n+import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Objects;\n \n public class DeployedMtaModule {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1736fef636a4f38959966f6d6a859dc70045679", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaModule.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaModule.java\nindex a130649ee..11ffc5aeb 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaModule.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaModule.java\n\n@@ -1,156 +1,36 @@\n package com.sap.cloud.lm.sl.cf.core.model;\n \n-import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n-import java.util.Objects;\n \n-public class DeployedMtaModule {\n+import org.cloudfoundry.client.lib.domain.annotation.Nullable;\n+import org.immutables.value.Value;\n \n-    private String moduleName;\n-    private String appName;\n-    private Date createdOn;\n-    private Date updatedOn;\n-    private List<DeployedMtaResource> resources;\n-    private List<String> providedDependencyNames;\n-    private List<String> uris;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n \n-    private DeployedMtaModule(Builder builder) {\n-        this.moduleName = builder.moduleName;\n-        this.appName = builder.appName;\n-        this.createdOn = builder.createdOn;\n-        this.updatedOn = builder.updatedOn;\n-        this.resources = builder.resources;\n-        this.providedDependencyNames = builder.providedDependencyNames;\n-        this.uris = builder.uris;\n-    }\n+@Value.Immutable\n+@JsonDeserialize(builder = ImmutableDeployedMtaModule.Builder.class)\n+public interface DeployedMtaModule {\n \n-    public DeployedMtaModule() {\n-    }\n+    String getModuleName();\n \n-    public String getModuleName() {\n-        return moduleName;\n-    }\n+    String getAppName();\n \n-    public String getAppName() {\n-        return appName;\n-    }\n+    @Nullable\n+    @Value.Auxiliary\n+    Date getCreatedOn();\n \n-    public Date getCreatedOn() {\n-        return createdOn;\n-    }\n+    @Nullable\n+    @Value.Auxiliary\n+    Date getUpdatedOn();\n \n-    public Date getUpdatedOn() {\n-        return updatedOn;\n-    }\n+    @Value.Auxiliary\n+    List<DeployedMtaResource> getResources();\n \n-    public List<DeployedMtaResource> getResources() {\n-        return resources;\n-    }\n+    @Value.Auxiliary\n+    List<String> getProvidedDependencyNames();\n \n-    public List<String> getProvidedDependencyNames() {\n-        return providedDependencyNames;\n-    }\n+    @Value.Auxiliary\n+    List<String> getUris();\n \n-    public List<String> getUris() {\n-        return uris;\n-    }\n-\n-    public void setAppName(String appName) {\n-        this.appName = appName;\n-    }\n-\n-    public void setModuleName(String moduleName) {\n-        this.moduleName = moduleName;\n-    }\n-\n-    public void setCreatedOn(Date createdOn) {\n-        this.createdOn = createdOn;\n-    }\n-\n-    public void setUpdatedOn(Date updatedOn) {\n-        this.updatedOn = updatedOn;\n-    }\n-\n-    public void setResources(List<DeployedMtaResource> resources) {\n-        this.resources = resources;\n-    }\n-\n-    public void setProvidedDependencyNames(List<String> providedDependencyNames) {\n-        this.providedDependencyNames = providedDependencyNames;\n-    }\n-\n-    public void setUris(List<String> uris) {\n-        this.uris = uris;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-        DeployedMtaModule that = (DeployedMtaModule) o;\n-        return Objects.equals(moduleName, that.moduleName) &&\n-                Objects.equals(appName, that.appName);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(moduleName, appName);\n-    }\n-\n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    public static final class Builder {\n-        private String moduleName;\n-        private String appName;\n-        private Date createdOn;\n-        private Date updatedOn;\n-        private List<DeployedMtaResource> resources = new ArrayList<>();\n-        private List<String> providedDependencyNames = new ArrayList<>();\n-        private List<String> uris = new ArrayList<>();\n-\n-        private Builder() {\n-        }\n-\n-        public Builder withModuleName(String moduleName) {\n-            this.moduleName = moduleName;\n-            return this;\n-        }\n-\n-        public Builder withAppName(String appName) {\n-            this.appName = appName;\n-            return this;\n-        }\n-\n-        public Builder withCreatedOn(Date createdOn) {\n-            this.createdOn = createdOn;\n-            return this;\n-        }\n-\n-        public Builder withUpdatedOn(Date updatedOn) {\n-            this.updatedOn = updatedOn;\n-            return this;\n-        }\n-\n-        public Builder withResources(List<DeployedMtaResource> resources) {\n-            this.resources = resources;\n-            return this;\n-        }\n-\n-        public Builder withProvidedDependencyNames(List<String> providedDependencyNames) {\n-            this.providedDependencyNames = providedDependencyNames;\n-            return this;\n-        }\n-\n-        public Builder withUris(List<String> uris) {\n-            this.uris = uris;\n-            return this;\n-        }\n-\n-        public DeployedMtaModule build() {\n-            return new DeployedMtaModule(this);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTY3OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370585679", "bodyText": "Immutables?", "author": "radito3", "createdAt": "2020-01-24T11:19:11Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaResource.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.sap.cloud.lm.sl.cf.core.model;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class DeployedMtaResource {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1736fef636a4f38959966f6d6a859dc70045679", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaResource.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaResource.java\nindex dbb4b1ab2..04face2e0 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaResource.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaResource.java\n\n@@ -1,141 +1,36 @@\n package com.sap.cloud.lm.sl.cf.core.model;\n \n-import java.util.ArrayList;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n \n-public class DeployedMtaResource {\n-    private String resourceName;\n-    private String serviceName;\n-    private Date createdOn;\n-    private Date updatedOn;\n-    private List<DeployedMtaModule> modules;\n-    private Map<String, Object> serviceInstanceParameters;\n+import javax.annotation.Nullable;\n \n-    public DeployedMtaResource() {\n-    }\n+import org.immutables.value.Value;\n \n-    private DeployedMtaResource(Builder builder) {\n-        this.resourceName = builder.resourceName;\n-        this.serviceName = builder.serviceName;\n-        this.createdOn = builder.createdOn;\n-        this.updatedOn = builder.updatedOn;\n-        this.modules = builder.modules;\n-        this.serviceInstanceParameters = builder.serviceInstanceParameters;\n-    }\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n \n-    public String getResourceName() {\n-        return resourceName;\n-    }\n+@Value.Immutable\n+@JsonDeserialize(builder = ImmutableDeployedMtaResource.Builder.class)\n+public interface DeployedMtaResource {\n \n-    public void setResourceName(String resourceName) {\n-        this.resourceName = resourceName;\n-    }\n+    @Nullable\n+    String getResourceName();\n \n-    public String getServiceName() {\n-        return serviceName;\n-    }\n+    String getServiceName();\n \n-    public void setServiceName(String serviceName) {\n-        this.serviceName = serviceName;\n-    }\n+    @Nullable\n+    @Value.Auxiliary\n+    Date getCreatedOn();\n \n-    public Date getCreatedOn() {\n-        return createdOn;\n-    }\n+    @Nullable\n+    @Value.Auxiliary\n+    Date getUpdatedOn();\n \n-    public void setCreatedOn(Date createdOn) {\n-        this.createdOn = createdOn;\n-    }\n+    @Value.Auxiliary\n+    List<DeployedMtaModule> getModules();\n \n-    public Date getUpdatedOn() {\n-        return updatedOn;\n-    }\n+    @Value.Auxiliary\n+    Map<String, Object> getServiceInstanceParameters();\n \n-    public void setUpdatedOn(Date updatedOn) {\n-        this.updatedOn = updatedOn;\n-    }\n-\n-    public List<DeployedMtaModule> getModules() {\n-        return modules;\n-    }\n-\n-    public void setModules(List<DeployedMtaModule> modules) {\n-        this.modules = modules;\n-    }\n-\n-    public Map<String, Object> getServiceInstanceParameters() {\n-        return serviceInstanceParameters;\n-    }\n-\n-    public void setServiceInstanceParameters(Map<String, Object> serviceInstanceParameters) {\n-        this.serviceInstanceParameters = serviceInstanceParameters;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-        DeployedMtaResource that = (DeployedMtaResource) o;\n-        return Objects.equals(resourceName, that.resourceName) &&\n-                Objects.equals(serviceName, that.serviceName);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(resourceName, serviceName);\n-    }\n-\n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    public static final class Builder {\n-        private String resourceName;\n-        private String serviceName;\n-        private Date createdOn;\n-        private Date updatedOn;\n-        private List<DeployedMtaModule> modules = new ArrayList<>();\n-        private Map<String, Object> serviceInstanceParameters = new HashMap<>();\n-\n-        private Builder() {\n-        }\n-\n-        public Builder withResourceName(String resourceName) {\n-            this.resourceName = resourceName;\n-            return this;\n-        }\n-\n-        public Builder withServiceName(String serviceName) {\n-            this.serviceName = serviceName;\n-            return this;\n-        }\n-\n-        public Builder withCreatedOn(Date createdOn) {\n-            this.createdOn = createdOn;\n-            return this;\n-        }\n-\n-        public Builder withUpdatedOn(Date updatedOn) {\n-            this.updatedOn = updatedOn;\n-            return this;\n-        }\n-\n-        public Builder withModules(List<DeployedMtaModule> modules) {\n-            this.modules = modules;\n-            return this;\n-        }\n-\n-        public Builder withServiceInstanceParameters(Map<String, Object> serviceInstanceParameters) {\n-            this.serviceInstanceParameters = serviceInstanceParameters;\n-            return this;\n-        }\n-\n-        public DeployedMtaResource build() {\n-            return new DeployedMtaResource(this);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NzQwMA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370587400", "bodyText": "I prefer .map(Module::getResources).flatMap(List::stream)", "author": "radito3", "createdAt": "2020-01-24T11:24:00Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/BuildCloudUndeployModelStep.java", "diffHunk": "@@ -142,18 +143,20 @@ private void setComponentsToUndeploy(DelegateExecution context, List<String> ser\n         StepsUtil.setAppsToUndeploy(context, apps);\n     }\n \n-    private List<String> computeServicesToDelete(List<DeployedMtaModule> modulesWithoutChange, Set<String> existingServices,\n+    private List<String> computeServicesToDelete(List<DeployedMtaModule> modulesWithoutChange, List<DeployedMtaResource> existingServices,\n                                                  Set<String> servicesForApplications) {\n         return existingServices.stream()\n-                               .filter(service -> shouldDeleteService(modulesWithoutChange, service, servicesForApplications))\n+                               .map(DeployedMtaResource::getServiceName)\n+                               .filter(name -> shouldDeleteService(modulesWithoutChange, name, servicesForApplications))\n                                .sorted()\n                                .collect(Collectors.toList());\n     }\n \n     private boolean shouldDeleteService(List<DeployedMtaModule> modulesToKeep, String service, Set<String> servicesForApplications) {\n         return modulesToKeep.stream()\n-                            .map(DeployedMtaModule::getServices)\n-                            .noneMatch(moduleToKeepService -> moduleToKeepService.contains(service))\n+                            .flatMap(module -> module.getResources().stream())", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1736fef636a4f38959966f6d6a859dc70045679", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/BuildCloudUndeployModelStep.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/BuildCloudUndeployModelStep.java\nindex eeff07014..0e6be8b06 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/BuildCloudUndeployModelStep.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/BuildCloudUndeployModelStep.java\n\n@@ -154,7 +154,8 @@ public class BuildCloudUndeployModelStep extends SyncFlowableStep {\n \n     private boolean shouldDeleteService(List<DeployedMtaModule> modulesToKeep, String service, Set<String> servicesForApplications) {\n         return modulesToKeep.stream()\n-                            .flatMap(module -> module.getResources().stream())\n+                            .flatMap(module -> module.getResources()\n+                                                     .stream())\n                             .map(DeployedMtaResource::getServiceName)\n                             .noneMatch(service::equalsIgnoreCase)\n             && !servicesForApplications.contains(service);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4ODcxNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370588717", "bodyText": "The formatting in this class seems a bit weird", "author": "radito3", "createdAt": "2020-01-24T11:27:35Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CheckForCreationConflictsStep.java", "diffHunk": "@@ -11,31 +11,39 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import javax.inject.Inject;\n import javax.inject.Named;\n \n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n+import org.apache.commons.lang3.StringUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.CloudControllerException;\n import org.cloudfoundry.client.lib.CloudOperationException;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.v3.Metadata;\n import org.flowable.engine.delegate.DelegateExecution;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.context.annotation.Scope;\n \n import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n-import com.sap.cloud.lm.sl.cf.core.cf.detect.ApplicationMtaMetadataParser;\n-import com.sap.cloud.lm.sl.cf.core.cf.detect.DeployedComponentsDetector;\n-import com.sap.cloud.lm.sl.cf.core.model.ApplicationMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ApplicationMtaMetadataEnvExtractor;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ApplicationMtaMetadataExtractor;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ApplicationMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.process.message.Messages;\n import com.sap.cloud.lm.sl.common.SLException;\n \n @Named(\"checkForCreationConflictsStep\")\n @Scope(BeanDefinition.SCOPE_PROTOTYPE)\n public class CheckForCreationConflictsStep extends SyncFlowableStep {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1736fef636a4f38959966f6d6a859dc70045679", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CheckForCreationConflictsStep.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CheckForCreationConflictsStep.java\nindex cb50e2e74..9209779f7 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CheckForCreationConflictsStep.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CheckForCreationConflictsStep.java\n\n@@ -14,7 +14,6 @@ import java.util.stream.Collectors;\n import javax.inject.Inject;\n import javax.inject.Named;\n \n-import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n import org.apache.commons.lang3.StringUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.CloudControllerException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4OTQxOQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370589419", "bodyText": "Why is this duplicated?\nFirst here in handleAppAtributes, then again in handleAppMetadata?", "author": "radito3", "createdAt": "2020-01-24T11:29:37Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java", "diffHunk": "@@ -171,6 +173,10 @@ public void handleApplicationAttributes() {\n             }\r\n             client.createApplication(app.getName(), app.getStaging(), diskQuota, memory, uris, Collections.emptyList(),\r\n                                      app.getDockerInfo());\r\n+            CloudApplication application = client.getApplication(app.getName());\r", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9337c3ba3b50e83385b94df28c5e67566ca5dc8d", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\nindex 35b0d08c5..d18fbd4ee 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\n\n@@ -173,10 +171,6 @@ public class CreateOrUpdateAppStep extends SyncFlowableStep {\n             }\n             client.createApplication(app.getName(), app.getStaging(), diskQuota, memory, uris, Collections.emptyList(),\n                                      app.getDockerInfo());\n-            CloudApplication application = client.getApplication(app.getName());\n-            client.updateApplicationMetadata(application.getMetadata()\n-                                                        .getGuid(),\n-                                             app.getV3Metadata());\n             StepsUtil.setVcapAppPropertiesChanged(execution.getContext(), true);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4OTc2OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370589768", "bodyText": "Does the metadata override the equals() method?", "author": "radito3", "createdAt": "2020-01-24T11:30:39Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java", "diffHunk": "@@ -279,6 +293,19 @@ public void printStepEndMessage() {\n                                                               getStepLogger()).updateApplication(client, app);\r\n         }\r\n \r\n+        @Override\r\n+        public void handleApplicationMetadata() {\r\n+            if(app.getV3Metadata() != null) {\r\n+                boolean shouldUpdateMetadata = true;\r\n+                if(existingApp.getV3Metadata() != null) {\r\n+                    shouldUpdateMetadata = !existingApp.getV3Metadata().equals(app.getV3Metadata());\r", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\nindex 35b0d08c5..ccbde46ef 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\n\n@@ -295,14 +295,18 @@ public class CreateOrUpdateAppStep extends SyncFlowableStep {\n \n         @Override\n         public void handleApplicationMetadata() {\n-            if(app.getV3Metadata() != null) {\n-                boolean shouldUpdateMetadata = true;\n-                if(existingApp.getV3Metadata() != null) {\n-                    shouldUpdateMetadata = !existingApp.getV3Metadata().equals(app.getV3Metadata());\n-                }\n-                if(shouldUpdateMetadata) {\n-                    client.updateApplicationMetadata(existingApp.getMetadata().getGuid(), app.getV3Metadata());\n-                }\n+            if (app.getV3Metadata() == null) {\n+                return;\n+            }\n+            boolean shouldUpdateMetadata = true;\n+            if (existingApp.getV3Metadata() != null) {\n+                shouldUpdateMetadata = !existingApp.getV3Metadata()\n+                                                   .equals(app.getV3Metadata());\n+            }\n+            if (shouldUpdateMetadata) {\n+                client.updateApplicationMetadata(existingApp.getMetadata()\n+                                                            .getGuid(),\n+                                                 app.getV3Metadata());\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MDEzNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370590137", "bodyText": "I think it would be slightly better if this condition is inverted and the function returns if the metadata is null", "author": "radito3", "createdAt": "2020-01-24T11:31:29Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java", "diffHunk": "@@ -279,6 +293,19 @@ public void printStepEndMessage() {\n                                                               getStepLogger()).updateApplication(client, app);\r\n         }\r\n \r\n+        @Override\r\n+        public void handleApplicationMetadata() {\r\n+            if(app.getV3Metadata() != null) {\r", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\nindex 35b0d08c5..ccbde46ef 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java\n\n@@ -295,14 +295,18 @@ public class CreateOrUpdateAppStep extends SyncFlowableStep {\n \n         @Override\n         public void handleApplicationMetadata() {\n-            if(app.getV3Metadata() != null) {\n-                boolean shouldUpdateMetadata = true;\n-                if(existingApp.getV3Metadata() != null) {\n-                    shouldUpdateMetadata = !existingApp.getV3Metadata().equals(app.getV3Metadata());\n-                }\n-                if(shouldUpdateMetadata) {\n-                    client.updateApplicationMetadata(existingApp.getMetadata().getGuid(), app.getV3Metadata());\n-                }\n+            if (app.getV3Metadata() == null) {\n+                return;\n+            }\n+            boolean shouldUpdateMetadata = true;\n+            if (existingApp.getV3Metadata() != null) {\n+                shouldUpdateMetadata = !existingApp.getV3Metadata()\n+                                                   .equals(app.getV3Metadata());\n+            }\n+            if (shouldUpdateMetadata) {\n+                client.updateApplicationMetadata(existingApp.getMetadata()\n+                                                            .getGuid(),\n+                                                 app.getV3Metadata());\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTAxNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370591014", "bodyText": "Could be substituted with return newMetadata != null", "author": "radito3", "createdAt": "2020-01-24T11:34:03Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetermineServiceCreateUpdateServiceActionsStep.java", "diffHunk": "@@ -177,6 +184,18 @@ private String buildServiceType(CloudService service) {\n         return label + \"/\" + plan;\n     }\n \n+    private boolean shouldUpdateMetadata(CloudServiceExtended service, CloudService existingService, CloudControllerClient client) {\n+        Metadata existingMetadata = existingService.getV3Metadata();\n+        Metadata newMetadata = service.getV3Metadata();\n+        if (existingMetadata != null && newMetadata != null) {\n+            return !existingMetadata.equals(newMetadata);\n+        }\n+        if (newMetadata != null) {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetermineServiceCreateUpdateServiceActionsStep.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetermineServiceCreateUpdateServiceActionsStep.java\nindex 299acc4b8..3776794cd 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetermineServiceCreateUpdateServiceActionsStep.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetermineServiceCreateUpdateServiceActionsStep.java\n\n@@ -190,10 +208,7 @@ public class DetermineServiceCreateUpdateServiceActionsStep extends SyncFlowable\n         if (existingMetadata != null && newMetadata != null) {\n             return !existingMetadata.equals(newMetadata);\n         }\n-        if (newMetadata != null) {\n-            return true;\n-        }\n-        return false;\n+        return newMetadata != null;\n     }\n \n     private CloudServiceExtended prepareServiceParameters(DelegateExecution context, CloudServiceExtended service)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTI1Mg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370591252", "bodyText": "Why is this imported if it's not used?", "author": "radito3", "createdAt": "2020-01-24T11:34:46Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/ServiceStep.java", "diffHunk": "@@ -8,6 +8,7 @@\n import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.v3.Metadata;", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/ServiceStep.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/ServiceStep.java\nindex b0e7436a4..5ccdfbf6f 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/ServiceStep.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/ServiceStep.java\n\n@@ -14,9 +14,9 @@ import org.flowable.engine.delegate.DelegateExecution;\n \n import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceUpdater;\n-import com.sap.cloud.lm.sl.cf.core.cf.services.ServiceOperationType;\n-import com.sap.cloud.lm.sl.cf.core.exec.MethodExecution;\n-import com.sap.cloud.lm.sl.cf.core.exec.MethodExecution.ExecutionState;\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\n+import com.sap.cloud.lm.sl.cf.core.util.MethodExecution;\n+import com.sap.cloud.lm.sl.cf.core.util.MethodExecution.ExecutionState;\n import com.sap.cloud.lm.sl.cf.process.message.Messages;\n import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\n import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTU5Mg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370591592", "bodyText": "This method is duplicated a lot in many files.\nMaybe introduce a Factory for the metadata?", "author": "radito3", "createdAt": "2020-01-24T11:35:44Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/SyncFlowableStepWithHooks.java", "diffHunk": "@@ -89,8 +97,17 @@ private Module determineModuleFromAppName(DeploymentDescriptor deploymentDescrip\n     }\n \n     protected String getModuleName(CloudApplicationExtended cloudApplication) {\n-        return ApplicationMtaMetadataParser.parseAppMetadata(cloudApplication)\n-                                           .getModuleName();\n+        return getApplicationMtaMetadata(cloudApplication)\n+            .getDeployedMtaModule()\n+            .getModuleName();\n+    }\n+\n+    private ApplicationMtaMetadata getApplicationMtaMetadata(CloudApplication app) {", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d1736fef636a4f38959966f6d6a859dc70045679", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/SyncFlowableStepWithHooks.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/SyncFlowableStepWithHooks.java\nindex 764471ebe..ce80d55d3 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/SyncFlowableStepWithHooks.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/SyncFlowableStepWithHooks.java\n\n@@ -97,17 +100,14 @@ public abstract class SyncFlowableStepWithHooks extends SyncFlowableStep {\n     }\n \n     protected String getModuleName(CloudApplicationExtended cloudApplication) {\n-        return getApplicationMtaMetadata(cloudApplication)\n-            .getDeployedMtaModule()\n-            .getModuleName();\n+        return getDeployedMtaModule(cloudApplication).getModuleName();\n     }\n \n-    private ApplicationMtaMetadata getApplicationMtaMetadata(CloudApplication app) {\n-        if(app.getV3Metadata() == null) {\n-            return ApplicationMtaMetadataEnvExtractor.extractMetadata(app);\n-        } else {\n-            return applicationMetadataMapper.extractMetadata(app);\n+    private DeployedMtaModule getDeployedMtaModule(CloudApplication app) {\n+        if (app.getV3Metadata() == null) {\n+            return envMtaMetadataParser.parseModule(app);\n         }\n+        return mtaMetadataParser.parseModule(app);\n     }\n \n     private Module findModuleByNameFromDeploymentDescriptor(HandlerFactory handlerFactory, DeploymentDescriptor deploymentDescriptor,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTg5OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370591899", "bodyText": "singletonList", "author": "radito3", "createdAt": "2020-01-24T11:36:34Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/UpdateServiceMetadataStep.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudMetadata;\n+import org.cloudfoundry.client.lib.domain.ImmutableCloudService;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceWithAlternativesCreator;\n+import com.sap.cloud.lm.sl.cf.core.cf.services.ServiceOperationType;\n+import com.sap.cloud.lm.sl.cf.core.exec.MethodExecution;\n+import com.sap.cloud.lm.sl.cf.core.exec.MethodExecution.ExecutionState;\n+import com.sap.cloud.lm.sl.cf.process.message.Messages;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Component(\"updateServiceMetadataStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class UpdateServiceMetadataStep extends ServiceStep {\n+\n+    @Override\n+    protected MethodExecution<String> executeOperation(DelegateExecution execution, CloudControllerClient controllerClient,\n+                                                       CloudServiceExtended service) {\n+        return updateServiceMetadata(execution, controllerClient, service);\n+    }\n+\n+    private MethodExecution<String> updateServiceMetadata(DelegateExecution context, CloudControllerClient client, CloudServiceExtended service) {\n+        getStepLogger().debug(Messages.UPDATING_SERVICE_METADATA, service.getName(), service.getResourceName());\n+        updateServiceMetadata(service, client);\n+        getStepLogger().debug(Messages.SERVICE_METADATA_UPDATED, service.getName());\n+        return new MethodExecution<>(null, ExecutionState.FINISHED);\n+    }\n+\n+    private void updateServiceMetadata(CloudServiceExtended serviceToProcess, CloudControllerClient client) {\n+        ImmutableCloudService serviceWithMetadata = ImmutableCloudService.copyOf(serviceToProcess);\n+        CloudMetadata serviceMeta = client.getService(serviceWithMetadata.getName()).getMetadata();\n+        serviceWithMetadata = serviceWithMetadata.withMetadata(serviceMeta);\n+        client.updateServiceMetadata(serviceWithMetadata.getMetadata().getGuid(), serviceWithMetadata.getV3Metadata());\n+        getStepLogger().debug(\"updated service metadata name: \" + serviceWithMetadata + \" metadata: \" + JsonUtil.toJson(serviceWithMetadata.getV3Metadata(), true));\n+    }\n+\n+    @Override\n+    protected List<AsyncExecution> getAsyncStepExecutions(ExecutionWrapper execution) {\n+        return Arrays.asList(new PollServiceCreateOrUpdateOperationsExecution(getServiceOperationGetter(), getServiceProgressReporter()));", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/UpdateServiceMetadataStep.java b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/UpdateServiceMetadataStep.java\nindex 8c57dc88b..c44f189f2 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/UpdateServiceMetadataStep.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/UpdateServiceMetadataStep.java\n\n@@ -2,6 +2,7 @@ package com.sap.cloud.lm.sl.cf.process.steps;\n \n import java.text.MessageFormat;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n import javax.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MjMyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370592328", "bodyText": "It's difficult to read with this formatting", "author": "radito3", "createdAt": "2020-01-24T11:37:51Z", "path": "com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/helpers/ApplicationColorDetectorTest.java", "diffHunk": "@@ -225,11 +230,7 @@ private Date parseDate(String date) {\n     }\n \n     private DeployedMtaModule createMtaModule(String moduleName, String appName, Date createdOn) {\n-        DeployedMtaModule deployedMtaModule = new DeployedMtaModule();\n-        deployedMtaModule.setModuleName(moduleName);\n-        deployedMtaModule.setAppName(appName);\n-        deployedMtaModule.setCreatedOn(createdOn);\n-        return deployedMtaModule;\n+        return DeployedMtaModule.builder().withModuleName(moduleName).withAppName(appName).withCreatedOn(createdOn).build();", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/helpers/ApplicationColorDetectorTest.java b/com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/helpers/ApplicationColorDetectorTest.java\nindex 17305991b..ea115a701 100644\n--- a/com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/helpers/ApplicationColorDetectorTest.java\n+++ b/com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/helpers/ApplicationColorDetectorTest.java\n\n@@ -230,7 +232,11 @@ public class ApplicationColorDetectorTest {\n     }\n \n     private DeployedMtaModule createMtaModule(String moduleName, String appName, Date createdOn) {\n-        return DeployedMtaModule.builder().withModuleName(moduleName).withAppName(appName).withCreatedOn(createdOn).build();\n+        return DeployedMtaModule.builder()\n+                                .withModuleName(moduleName)\n+                                .withAppName(appName)\n+                                .withCreatedOn(createdOn)\n+                                .build();\n     }\n \n     private void mockOperationServiceNoOtherOperations(Operation currentOperation) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzI5Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370593297", "bodyText": "return deployedMtas.stream().map(this::getMta).collect(Collectors.toList())", "author": "radito3", "createdAt": "2020-01-24T11:40:46Z", "path": "com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java", "diffHunk": "@@ -34,45 +35,47 @@\n     @Inject\n     private CloudControllerClientProvider clientProvider;\n \n+    @Inject\n+    private DeployedMtaDetector deployedMtaDetector;\n+\n     @Override\n     public ResponseEntity<List<Mta>> getMtas(String spaceGuid) {\n-        DeployedComponents deployedComponents = detectDeployedComponents(spaceGuid);\n+        List<DeployedMta> deployedMtas = deployedMtaDetector.getAllDeployedMtas(getCloudFoundryClient(spaceGuid));\n+        List<Mta> mtas = getMtas(deployedMtas);\n         return ResponseEntity.ok()\n-                             .body(getMtas(deployedComponents));\n+                             .body(mtas);\n     }\n \n     @Override\n     public ResponseEntity<Mta> getMta(String spaceGuid, String mtaId) {\n-        DeployedMta mta = detectDeployedComponents(spaceGuid).findDeployedMta(mtaId);\n-        if (mta == null) {\n-            throw new NotFoundException(Messages.MTA_NOT_FOUND, mtaId);\n-        }\n+        Optional<DeployedMta> optionalDeployedMta = deployedMtaDetector.getDeployedMta(mtaId, getCloudFoundryClient(spaceGuid));\n+        DeployedMta deployedMta = optionalDeployedMta.orElseThrow(() -> new NotFoundException(Messages.MTA_NOT_FOUND, mtaId));\n         return ResponseEntity.ok()\n-                             .body(getMta(mta));\n-    }\n-\n-    private DeployedComponents detectDeployedComponents(String spaceGuid) {\n-        List<CloudApplication> applications = getCloudFoundryClient(spaceGuid).getApplications();\n-        return new DeployedComponentsDetector().detectAllDeployedComponents(applications);\n+                             .body(getMta(deployedMta));\n     }\n \n     private CloudControllerClient getCloudFoundryClient(String spaceGuid) {\n         UserInfo userInfo = SecurityContextUtil.getUserInfo();\n         return clientProvider.getControllerClient(userInfo.getName(), spaceGuid);\n     }\n \n-    private List<Mta> getMtas(DeployedComponents components) {\n-        return components.getMtas()\n-                         .stream()\n-                         .map(this::getMta)\n-                         .collect(Collectors.toList());\n+    private List<Mta> getMtas(List<DeployedMta> deployedMtas) {\n+        List<Mta> mtas = new ArrayList<>();", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java b/com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java\nindex ce1f99448..f0fad47bc 100644\n--- a/com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java\n+++ b/com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java\n\n@@ -60,12 +60,9 @@ public class MtasApiServiceImpl implements MtasApiService {\n     }\n \n     private List<Mta> getMtas(List<DeployedMta> deployedMtas) {\n-        List<Mta> mtas = new ArrayList<>();\n-        for (DeployedMta mta : deployedMtas) {\n-            mtas.add(getMta(mta));\n-        }\n-\n-        return mtas;\n+        return deployedMtas.stream()\n+                           .map(this::getMta)\n+                           .collect(Collectors.toList());\n     }\n \n     private Mta getMta(DeployedMta mta) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzY4OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370593688", "bodyText": "In the change above you use a method reference, here you don't.\nUse one or the other in all places", "author": "radito3", "createdAt": "2020-01-24T11:41:51Z", "path": "com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java", "diffHunk": "@@ -88,11 +91,14 @@ private Module getModule(DeployedMtaModule module) {\n                               .moduleName(module.getModuleName())\n                               .providedDendencyNames(module.getProvidedDependencyNames())\n                               .uris(module.getUris())\n-                              .services(module.getServices())\n+                              .services(module.getResources()\n+                                              .stream()\n+                                              .map(s -> s.getServiceName())", "originalCommit": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java b/com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java\nindex ce1f99448..f0fad47bc 100644\n--- a/com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java\n+++ b/com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java\n\n@@ -93,7 +90,7 @@ public class MtasApiServiceImpl implements MtasApiService {\n                               .uris(module.getUris())\n                               .services(module.getResources()\n                                               .stream()\n-                                              .map(s -> s.getServiceName())\n+                                              .map(DeployedMtaResource::getServiceName)\n                                               .collect(Collectors.toList()))\n                               .build();\n     }\n"}}, {"oid": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/78df8caa5c7d3f458d21bd81fc67b431aff10584", "message": "Refactoring Mta Metadata", "committedDate": "2020-01-27T08:31:25Z", "type": "forcePushed"}, {"oid": "d1736fef636a4f38959966f6d6a859dc70045679", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/d1736fef636a4f38959966f6d6a859dc70045679", "message": "Refactoring Mta Metadata", "committedDate": "2020-01-28T22:32:29Z", "type": "forcePushed"}, {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/4603b0626b9898d17e21f3643adc5926df7bca3a", "message": "Refactoring Mta Metadata", "committedDate": "2020-01-28T22:53:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MzEzNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372263137", "bodyText": "This can be substituted with\napplications.stream().collect(groupingBy(app -> parseMetadata(app).getId())", "author": "radito3", "createdAt": "2020-01-29T09:10:43Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n+        return applicationsByMtaId.values()\n+                                  .stream()\n+                                  .map(this::toDeployedMta)\n+                                  .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n+        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n+        for (CloudApplication application : applications) {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTIwMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372299203", "bodyText": "This used to be groupingBy but got changed recently as a discussion with Encho led us to agree that we wanted to avoid having the complexity of 'groupingBy' in the code. What do you think?", "author": "valentinEmpy", "createdAt": "2020-01-29T10:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MzEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzOTc4NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372339784", "bodyText": "I half agree. Using grouping by in complex scenarios, like having to modify the downstream (eg. groupingBy(<some property>, mapping()/collectingAndThen()/toSet()...), is worse than using a regular loop. But this is a standard scenario. My opinion is that all the extra lines and extra operations on the map are more complex than using stream().collect(groupingBy(func()))", "author": "radito3", "createdAt": "2020-01-29T11:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MzEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1MDkxOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372350918", "bodyText": "As we talked with Radi, try using computeIfAbsent and if it is looking better -> leave it that way.", "author": "enchobelezirev", "createdAt": "2020-01-29T12:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MzEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\nindex 53fe09292..5463e5776 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n\n@@ -1,76 +1,67 @@\n package com.sap.cloud.lm.sl.cf.core.cf.detect;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n-import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.Constants;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n import com.sap.cloud.lm.sl.mta.model.Version;\n \n-//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n-//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n-@Component\n+/**\n+ * Remains solely for backwards compatibility with the 'environment' approach of detecting MTAs. Once past the deprecation period this will\n+ * be deleted, allowing the 'metadata' {@link com.sap.cloud.lm.sl.cf.core.cf.detect.DeployedMtaDetector} to become the standard approach for\n+ * detecting MTAs.\n+ */\n+@Deprecated\n+@Named\n public class DeployedMtaEnvDetector {\n \n-    @Inject\n     private EnvMtaMetadataParser envMtaMetadataParser;\n \n-    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n-        return applicationsByMtaId.values()\n-                                  .stream()\n-                                  .map(this::toDeployedMta)\n-                                  .collect(Collectors.toList());\n+    @Inject\n+    public DeployedMtaEnvDetector(EnvMtaMetadataParser envMtaMetadataParser) {\n+        this.envMtaMetadataParser = envMtaMetadataParser;\n     }\n \n-    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n-        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n-        for (CloudApplication application : applications) {\n-            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n-                                               .getId();\n-            if (applicationsByMtaId.containsKey(mtaId)) {\n-                applicationsByMtaId.get(mtaId)\n-                                   .add(application);\n-            } else {\n-                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n-            }\n-        }\n-        return applicationsByMtaId;\n+    public List<DeployedMta> detectDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsWithEnvMetadata(client).stream()\n+                                                                                                        .collect(Collectors.groupingBy(this::getMtaId));\n+        return applicationsByMtaId.entrySet()\n+                                  .stream()\n+                                  .map(entry -> toDeployedMta(entry.getKey(), entry.getValue()))\n+                                  .collect(Collectors.toList());\n     }\n \n     private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n         return client.getApplications()\n                      .stream()\n-                     .filter(this::hasEnvMetadata)\n+                     .filter(MtaMetadataUtil::hasEnvMtaMetadata)\n                      .collect(Collectors.toList());\n     }\n \n-    private boolean hasEnvMetadata(CloudApplication application) {\n-        Map<String, String> env = application.getEnv();\n-        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)\n-            || env.containsKey(Constants.ENV_MTA_SERVICES) || env.containsKey(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+    private String getMtaId(CloudApplication application) {\n+        return envMtaMetadataParser.parseMtaMetadata(application)\n+                                   .getId();\n     }\n \n-    private DeployedMta toDeployedMta(List<CloudApplication> applications) {\n-        MtaMetadata mtaMetadata = getMtaMetadata(applications);\n+    private DeployedMta toDeployedMta(String mtaId, List<CloudApplication> applications) {\n+        Version mtaVersion = getMtaVersion(applications);\n+        MtaMetadata mtaMetadata = getMtaMetadata(mtaId, mtaVersion);\n         List<DeployedMtaModule> modules = new ArrayList<>();\n         List<DeployedMtaResource> resources = new ArrayList<>();\n         for (CloudApplication application : applications) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2NDYzMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372264633", "bodyText": "can be substituted with\nentities.stream().collect(groupingBy(entity -> parseMetadata(entity).getId())", "author": "radito3", "createdAt": "2020-01-29T09:14:03Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTI0Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372299243", "bodyText": "Same as above response.", "author": "valentinEmpy", "createdAt": "2020-01-29T10:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2NDYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\nindex 412d9c3d1..9cf057ac1 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n\n@@ -1,18 +1,15 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n import org.cloudfoundry.client.lib.domain.CloudService;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2ODc5Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372268793", "bodyText": "This is a bit confusing. The check is if the keys of the env don't have common elements with the metadata fields and then negates it. That's a bit roundabout.\nI would prefer the other way around.\nChange it to app.getEnv().keySet().stream().anyMatch(ENV_METADATA_FIELDS::contains)\nAnd if you want that slight bit of performance, change the type of the env_metadata_fields to a HashSet", "author": "radito3", "createdAt": "2020-01-29T09:22:59Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                         Constants.ENV_MTA_SERVICES,\n+                                                                         Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return !Collections.disjoint(application.getEnv()", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTI5Ng==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372299296", "bodyText": "Agreed. I also do not like the complexity of disjoint.", "author": "valentinEmpy", "createdAt": "2020-01-29T10:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2ODc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "19fe229012989c6a094822b4c6c10241784cdf03", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\nindex 837d1b869..244a9abf3 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n\n@@ -30,13 +30,14 @@ public class EnvMtaMetadataParser {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n     private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n-                                                                         Constants.ENV_MTA_SERVICES,\n-                                                                         Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n \n     public boolean hasMtaMetadata(CloudApplication application) {\n-        return !Collections.disjoint(application.getEnv()\n-                                                .keySet(),\n-                                     ENV_METADATA_FIELDS);\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n     }\n \n     public MtaMetadata parseMtaMetadata(CloudApplication application) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MjAxNg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372272016", "bodyText": "Shouldn't this be negated?", "author": "radito3", "createdAt": "2020-01-29T09:29:25Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaId;\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.v3.Metadata;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Component\n+public class MtaMetadataParser {\n+\n+    private static final List<String> METADATA_LABELS = Arrays.asList(MtaMetadataLabels.MTA_ID, MtaMetadataLabels.MTA_VERSION);\n+\n+    public boolean hasMtaMetadata(CloudEntity entity) {\n+        Metadata metadata = entity.getV3Metadata();\n+        if (metadata == null || metadata.getLabels() == null) {\n+            return false;\n+        }\n+        return Collections.disjoint(metadata.getLabels()", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTM0OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372299348", "bodyText": "It should. Will replace this with stream anyMatch to avoid mistakes as this one and to avoid the complexity.", "author": "valentinEmpy", "createdAt": "2020-01-29T10:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MjAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "19fe229012989c6a094822b4c6c10241784cdf03", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\nindex 5408ddf96..7743187d3 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\n\n@@ -4,7 +4,6 @@ import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMt\n import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n \n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n"}}, {"oid": "19fe229012989c6a094822b4c6c10241784cdf03", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/19fe229012989c6a094822b4c6c10241784cdf03", "message": "Refactoring Mta Metadata", "committedDate": "2020-01-29T10:22:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MjgwOQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372272809", "bodyText": "Extract this to method as well.", "author": "enchobelezirev", "createdAt": "2020-01-29T09:31:02Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Inject\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Inject\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    @Inject\n+    private DeployedMtaEnvDetector deployedMtaEnvDetector;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = deployedMtaEnvDetector.getAllDeployedMtas(client)", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\nindex f8921464f..25186a939 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n\n@@ -5,11 +5,11 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.apache.commons.collections4.ListUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MzI1Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372273257", "bodyText": "Order to method by their invocation order.", "author": "enchobelezirev", "createdAt": "2020-01-29T09:31:57Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Inject\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Inject\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    @Inject\n+    private DeployedMtaEnvDetector deployedMtaEnvDetector;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = deployedMtaEnvDetector.getAllDeployedMtas(client)\n+                                                                    .stream()\n+                                                                    .filter(deployedMtaByEnv -> !deployedMtas.contains(deployedMtaByEnv))\n+                                                                    .collect(Collectors.toList());\n+        return ListUtils.union(deployedMtas, deployedMtasByEnv);\n+    }\n+\n+    private List<DeployedMta> getDeployedMtasByMetadataSelectionCriteria(MtaMetadataCriteria criteria, CloudControllerClient client) {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\nindex f8921464f..25186a939 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n\n@@ -5,11 +5,11 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.apache.commons.collections4.ListUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MzY4OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372273689", "bodyText": "Re-order the args(client, criteria) - this way it would match some of the others interfaces we have which are working with the Client.", "author": "enchobelezirev", "createdAt": "2020-01-29T09:32:58Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityCollector.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+\n+public interface MtaMetadataEntityCollector<T extends CloudEntity> {\n+\n+    List<T> collect(MtaMetadataCriteria criteria, CloudControllerClient client);", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityCollector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityCollector.java\nindex 17ee4ed0d..e76ce80b9 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityCollector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityCollector.java\n\n@@ -9,6 +9,6 @@ import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n \n public interface MtaMetadataEntityCollector<T extends CloudEntity> {\n \n-    List<T> collect(MtaMetadataCriteria criteria, CloudControllerClient client);\n+    List<T> collect(CloudControllerClient client, MtaMetadataCriteria criteria);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDA2Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372274063", "bodyText": "Use Named annotation for consistency", "author": "enchobelezirev", "createdAt": "2020-01-29T09:33:36Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\nindex f8921464f..25186a939 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n\n@@ -5,11 +5,11 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.apache.commons.collections4.ListUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDY5OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372274698", "bodyText": "Maybe detectDeployedMtas ?", "author": "enchobelezirev", "createdAt": "2020-01-29T09:34:55Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Inject\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Inject\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    @Inject\n+    private DeployedMtaEnvDetector deployedMtaEnvDetector;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\nindex f8921464f..25186a939 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n\n@@ -5,11 +5,11 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.apache.commons.collections4.ListUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDgxMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372274813", "bodyText": "Maybe detect...?", "author": "enchobelezirev", "createdAt": "2020-01-29T09:35:10Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Inject\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Inject\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    @Inject\n+    private DeployedMtaEnvDetector deployedMtaEnvDetector;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = deployedMtaEnvDetector.getAllDeployedMtas(client)\n+                                                                    .stream()\n+                                                                    .filter(deployedMtaByEnv -> !deployedMtas.contains(deployedMtaByEnv))\n+                                                                    .collect(Collectors.toList());\n+        return ListUtils.union(deployedMtas, deployedMtasByEnv);\n+    }\n+\n+    private List<DeployedMta> getDeployedMtasByMetadataSelectionCriteria(MtaMetadataCriteria criteria, CloudControllerClient client) {\n+        List<CloudEntity> mtaMetadataEntities = mtaMetadataEntityCollectors.stream()\n+                                                                           .map(collector -> collector.collect(criteria, client))\n+                                                                           .flatMap(List::stream)\n+                                                                           .collect(Collectors.toList());\n+        return mtaMetadataEntityAggregator.aggregate(mtaMetadataEntities);\n+    }\n+\n+    public Optional<DeployedMta> getDeployedMta(String mtaId, CloudControllerClient client) {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\nindex f8921464f..25186a939 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java\n\n@@ -5,11 +5,11 @@ import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.apache.commons.collections4.ListUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NTExMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372275113", "bodyText": "We are aware of this TODO.\nBetter - remove it and write a java doc which explains it.\nAlso, add Deprecated annotation", "author": "enchobelezirev", "createdAt": "2020-01-29T09:35:50Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\nindex 53fe09292..5463e5776 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n\n@@ -1,76 +1,67 @@\n package com.sap.cloud.lm.sl.cf.core.cf.detect;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n-import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.Constants;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n import com.sap.cloud.lm.sl.mta.model.Version;\n \n-//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n-//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n-@Component\n+/**\n+ * Remains solely for backwards compatibility with the 'environment' approach of detecting MTAs. Once past the deprecation period this will\n+ * be deleted, allowing the 'metadata' {@link com.sap.cloud.lm.sl.cf.core.cf.detect.DeployedMtaDetector} to become the standard approach for\n+ * detecting MTAs.\n+ */\n+@Deprecated\n+@Named\n public class DeployedMtaEnvDetector {\n \n-    @Inject\n     private EnvMtaMetadataParser envMtaMetadataParser;\n \n-    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n-        return applicationsByMtaId.values()\n-                                  .stream()\n-                                  .map(this::toDeployedMta)\n-                                  .collect(Collectors.toList());\n+    @Inject\n+    public DeployedMtaEnvDetector(EnvMtaMetadataParser envMtaMetadataParser) {\n+        this.envMtaMetadataParser = envMtaMetadataParser;\n     }\n \n-    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n-        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n-        for (CloudApplication application : applications) {\n-            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n-                                               .getId();\n-            if (applicationsByMtaId.containsKey(mtaId)) {\n-                applicationsByMtaId.get(mtaId)\n-                                   .add(application);\n-            } else {\n-                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n-            }\n-        }\n-        return applicationsByMtaId;\n+    public List<DeployedMta> detectDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsWithEnvMetadata(client).stream()\n+                                                                                                        .collect(Collectors.groupingBy(this::getMtaId));\n+        return applicationsByMtaId.entrySet()\n+                                  .stream()\n+                                  .map(entry -> toDeployedMta(entry.getKey(), entry.getValue()))\n+                                  .collect(Collectors.toList());\n     }\n \n     private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n         return client.getApplications()\n                      .stream()\n-                     .filter(this::hasEnvMetadata)\n+                     .filter(MtaMetadataUtil::hasEnvMtaMetadata)\n                      .collect(Collectors.toList());\n     }\n \n-    private boolean hasEnvMetadata(CloudApplication application) {\n-        Map<String, String> env = application.getEnv();\n-        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)\n-            || env.containsKey(Constants.ENV_MTA_SERVICES) || env.containsKey(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+    private String getMtaId(CloudApplication application) {\n+        return envMtaMetadataParser.parseMtaMetadata(application)\n+                                   .getId();\n     }\n \n-    private DeployedMta toDeployedMta(List<CloudApplication> applications) {\n-        MtaMetadata mtaMetadata = getMtaMetadata(applications);\n+    private DeployedMta toDeployedMta(String mtaId, List<CloudApplication> applications) {\n+        Version mtaVersion = getMtaVersion(applications);\n+        MtaMetadata mtaMetadata = getMtaMetadata(mtaId, mtaVersion);\n         List<DeployedMtaModule> modules = new ArrayList<>();\n         List<DeployedMtaResource> resources = new ArrayList<>();\n         for (CloudApplication application : applications) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NTQxNQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372275415", "bodyText": "I would use Constructor based injection for one or two class fields", "author": "enchobelezirev", "createdAt": "2020-01-29T09:36:27Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\nindex 53fe09292..5463e5776 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n\n@@ -1,76 +1,67 @@\n package com.sap.cloud.lm.sl.cf.core.cf.detect;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n-import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.Constants;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n import com.sap.cloud.lm.sl.mta.model.Version;\n \n-//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n-//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n-@Component\n+/**\n+ * Remains solely for backwards compatibility with the 'environment' approach of detecting MTAs. Once past the deprecation period this will\n+ * be deleted, allowing the 'metadata' {@link com.sap.cloud.lm.sl.cf.core.cf.detect.DeployedMtaDetector} to become the standard approach for\n+ * detecting MTAs.\n+ */\n+@Deprecated\n+@Named\n public class DeployedMtaEnvDetector {\n \n-    @Inject\n     private EnvMtaMetadataParser envMtaMetadataParser;\n \n-    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n-        return applicationsByMtaId.values()\n-                                  .stream()\n-                                  .map(this::toDeployedMta)\n-                                  .collect(Collectors.toList());\n+    @Inject\n+    public DeployedMtaEnvDetector(EnvMtaMetadataParser envMtaMetadataParser) {\n+        this.envMtaMetadataParser = envMtaMetadataParser;\n     }\n \n-    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n-        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n-        for (CloudApplication application : applications) {\n-            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n-                                               .getId();\n-            if (applicationsByMtaId.containsKey(mtaId)) {\n-                applicationsByMtaId.get(mtaId)\n-                                   .add(application);\n-            } else {\n-                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n-            }\n-        }\n-        return applicationsByMtaId;\n+    public List<DeployedMta> detectDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsWithEnvMetadata(client).stream()\n+                                                                                                        .collect(Collectors.groupingBy(this::getMtaId));\n+        return applicationsByMtaId.entrySet()\n+                                  .stream()\n+                                  .map(entry -> toDeployedMta(entry.getKey(), entry.getValue()))\n+                                  .collect(Collectors.toList());\n     }\n \n     private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n         return client.getApplications()\n                      .stream()\n-                     .filter(this::hasEnvMetadata)\n+                     .filter(MtaMetadataUtil::hasEnvMtaMetadata)\n                      .collect(Collectors.toList());\n     }\n \n-    private boolean hasEnvMetadata(CloudApplication application) {\n-        Map<String, String> env = application.getEnv();\n-        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)\n-            || env.containsKey(Constants.ENV_MTA_SERVICES) || env.containsKey(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+    private String getMtaId(CloudApplication application) {\n+        return envMtaMetadataParser.parseMtaMetadata(application)\n+                                   .getId();\n     }\n \n-    private DeployedMta toDeployedMta(List<CloudApplication> applications) {\n-        MtaMetadata mtaMetadata = getMtaMetadata(applications);\n+    private DeployedMta toDeployedMta(String mtaId, List<CloudApplication> applications) {\n+        Version mtaVersion = getMtaVersion(applications);\n+        MtaMetadata mtaMetadata = getMtaMetadata(mtaId, mtaVersion);\n         List<DeployedMtaModule> modules = new ArrayList<>();\n         List<DeployedMtaResource> resources = new ArrayList<>();\n         for (CloudApplication application : applications) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NTkyMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372275923", "bodyText": "Hmm both detectors have, maybe, the same interface??", "author": "enchobelezirev", "createdAt": "2020-01-29T09:37:28Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\nindex 53fe09292..5463e5776 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n\n@@ -1,76 +1,67 @@\n package com.sap.cloud.lm.sl.cf.core.cf.detect;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n-import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.Constants;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n import com.sap.cloud.lm.sl.mta.model.Version;\n \n-//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n-//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n-@Component\n+/**\n+ * Remains solely for backwards compatibility with the 'environment' approach of detecting MTAs. Once past the deprecation period this will\n+ * be deleted, allowing the 'metadata' {@link com.sap.cloud.lm.sl.cf.core.cf.detect.DeployedMtaDetector} to become the standard approach for\n+ * detecting MTAs.\n+ */\n+@Deprecated\n+@Named\n public class DeployedMtaEnvDetector {\n \n-    @Inject\n     private EnvMtaMetadataParser envMtaMetadataParser;\n \n-    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n-        return applicationsByMtaId.values()\n-                                  .stream()\n-                                  .map(this::toDeployedMta)\n-                                  .collect(Collectors.toList());\n+    @Inject\n+    public DeployedMtaEnvDetector(EnvMtaMetadataParser envMtaMetadataParser) {\n+        this.envMtaMetadataParser = envMtaMetadataParser;\n     }\n \n-    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n-        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n-        for (CloudApplication application : applications) {\n-            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n-                                               .getId();\n-            if (applicationsByMtaId.containsKey(mtaId)) {\n-                applicationsByMtaId.get(mtaId)\n-                                   .add(application);\n-            } else {\n-                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n-            }\n-        }\n-        return applicationsByMtaId;\n+    public List<DeployedMta> detectDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsWithEnvMetadata(client).stream()\n+                                                                                                        .collect(Collectors.groupingBy(this::getMtaId));\n+        return applicationsByMtaId.entrySet()\n+                                  .stream()\n+                                  .map(entry -> toDeployedMta(entry.getKey(), entry.getValue()))\n+                                  .collect(Collectors.toList());\n     }\n \n     private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n         return client.getApplications()\n                      .stream()\n-                     .filter(this::hasEnvMetadata)\n+                     .filter(MtaMetadataUtil::hasEnvMtaMetadata)\n                      .collect(Collectors.toList());\n     }\n \n-    private boolean hasEnvMetadata(CloudApplication application) {\n-        Map<String, String> env = application.getEnv();\n-        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)\n-            || env.containsKey(Constants.ENV_MTA_SERVICES) || env.containsKey(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+    private String getMtaId(CloudApplication application) {\n+        return envMtaMetadataParser.parseMtaMetadata(application)\n+                                   .getId();\n     }\n \n-    private DeployedMta toDeployedMta(List<CloudApplication> applications) {\n-        MtaMetadata mtaMetadata = getMtaMetadata(applications);\n+    private DeployedMta toDeployedMta(String mtaId, List<CloudApplication> applications) {\n+        Version mtaVersion = getMtaVersion(applications);\n+        MtaMetadata mtaMetadata = getMtaMetadata(mtaId, mtaVersion);\n         List<DeployedMtaModule> modules = new ArrayList<>();\n         List<DeployedMtaResource> resources = new ArrayList<>();\n         for (CloudApplication application : applications) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3OTY3OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372279679", "bodyText": "I think entries.get(0) is confusing.\nWhy don't just iterate trhrough the entryset and then for each do the below methods?", "author": "enchobelezirev", "createdAt": "2020-01-29T09:44:48Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();\n+        for (CloudEntity entity : entities) {\n+            String mtaId = mtaMetadataParser.parseMtaMetadata(entity)\n+                                            .getId();\n+            if (entitiesByMtaId.containsKey(mtaId)) {\n+                entitiesByMtaId.get(mtaId)\n+                               .add(entity);\n+            } else {\n+                entitiesByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(entity)));\n+            }\n+        }\n+        return entitiesByMtaId;\n+    }\n+\n+    private DeployedMta toDeployedMta(List<CloudEntity> entities) {\n+        MtaMetadata mtaMetadata = getMtaMetadata(entities);\n+        return ImmutableDeployedMta.builder()\n+                                   .metadata(mtaMetadata)\n+                                   .modules(getModules(entities))\n+                                   .resources(getResources(entities))\n+                                   .build();\n+    }\n+\n+    private MtaMetadata getMtaMetadata(List<CloudEntity> entities) {\n+        String mtaId = mtaMetadataParser.parseMtaMetadata(entities.get(0))", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\nindex 412d9c3d1..9cf057ac1 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n\n@@ -1,18 +1,15 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n import org.cloudfoundry.client.lib.domain.CloudService;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MDE5Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372280197", "bodyText": "maybe groupEntitiesByMtaId?", "author": "enchobelezirev", "createdAt": "2020-01-29T09:45:50Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\nindex 412d9c3d1..9cf057ac1 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n\n@@ -1,18 +1,15 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n import org.cloudfoundry.client.lib.domain.CloudService;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MDMyMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372280323", "bodyText": "Rename it to result - easy for reading.", "author": "enchobelezirev", "createdAt": "2020-01-29T09:46:06Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\nindex 412d9c3d1..9cf057ac1 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n\n@@ -1,18 +1,15 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n import org.cloudfoundry.client.lib.domain.CloudService;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NTg0Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372285843", "bodyText": "What about computeIfAbsent?\nTry it - if it is readable and understandable -> do it that way otherwise leave it as it is.", "author": "enchobelezirev", "createdAt": "2020-01-29T09:56:29Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();\n+        for (CloudEntity entity : entities) {\n+            String mtaId = mtaMetadataParser.parseMtaMetadata(entity)\n+                                            .getId();\n+            if (entitiesByMtaId.containsKey(mtaId)) {\n+                entitiesByMtaId.get(mtaId)\n+                               .add(entity);\n+            } else {\n+                entitiesByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(entity)));\n+            }", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\nindex 412d9c3d1..9cf057ac1 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n\n@@ -1,18 +1,15 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n import org.cloudfoundry.client.lib.domain.CloudService;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NzI0NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372287244", "bodyText": "Do we need to check for the others except Constants.ENV_MTA_METADATA", "author": "enchobelezirev", "createdAt": "2020-01-29T09:59:06Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n+        return applicationsByMtaId.values()\n+                                  .stream()\n+                                  .map(this::toDeployedMta)\n+                                  .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n+        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n+        for (CloudApplication application : applications) {\n+            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n+                                               .getId();\n+            if (applicationsByMtaId.containsKey(mtaId)) {\n+                applicationsByMtaId.get(mtaId)\n+                                   .add(application);\n+            } else {\n+                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n+            }\n+        }\n+        return applicationsByMtaId;\n+    }\n+\n+    private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n+        return client.getApplications()\n+                     .stream()\n+                     .filter(this::hasEnvMetadata)\n+                     .collect(Collectors.toList());\n+    }\n+\n+    private boolean hasEnvMetadata(CloudApplication application) {\n+        Map<String, String> env = application.getEnv();\n+        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\nindex 53fe09292..5463e5776 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n\n@@ -1,76 +1,67 @@\n package com.sap.cloud.lm.sl.cf.core.cf.detect;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n-import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.Constants;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n import com.sap.cloud.lm.sl.mta.model.Version;\n \n-//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n-//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n-@Component\n+/**\n+ * Remains solely for backwards compatibility with the 'environment' approach of detecting MTAs. Once past the deprecation period this will\n+ * be deleted, allowing the 'metadata' {@link com.sap.cloud.lm.sl.cf.core.cf.detect.DeployedMtaDetector} to become the standard approach for\n+ * detecting MTAs.\n+ */\n+@Deprecated\n+@Named\n public class DeployedMtaEnvDetector {\n \n-    @Inject\n     private EnvMtaMetadataParser envMtaMetadataParser;\n \n-    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n-        return applicationsByMtaId.values()\n-                                  .stream()\n-                                  .map(this::toDeployedMta)\n-                                  .collect(Collectors.toList());\n+    @Inject\n+    public DeployedMtaEnvDetector(EnvMtaMetadataParser envMtaMetadataParser) {\n+        this.envMtaMetadataParser = envMtaMetadataParser;\n     }\n \n-    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n-        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n-        for (CloudApplication application : applications) {\n-            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n-                                               .getId();\n-            if (applicationsByMtaId.containsKey(mtaId)) {\n-                applicationsByMtaId.get(mtaId)\n-                                   .add(application);\n-            } else {\n-                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n-            }\n-        }\n-        return applicationsByMtaId;\n+    public List<DeployedMta> detectDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsWithEnvMetadata(client).stream()\n+                                                                                                        .collect(Collectors.groupingBy(this::getMtaId));\n+        return applicationsByMtaId.entrySet()\n+                                  .stream()\n+                                  .map(entry -> toDeployedMta(entry.getKey(), entry.getValue()))\n+                                  .collect(Collectors.toList());\n     }\n \n     private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n         return client.getApplications()\n                      .stream()\n-                     .filter(this::hasEnvMetadata)\n+                     .filter(MtaMetadataUtil::hasEnvMtaMetadata)\n                      .collect(Collectors.toList());\n     }\n \n-    private boolean hasEnvMetadata(CloudApplication application) {\n-        Map<String, String> env = application.getEnv();\n-        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)\n-            || env.containsKey(Constants.ENV_MTA_SERVICES) || env.containsKey(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+    private String getMtaId(CloudApplication application) {\n+        return envMtaMetadataParser.parseMtaMetadata(application)\n+                                   .getId();\n     }\n \n-    private DeployedMta toDeployedMta(List<CloudApplication> applications) {\n-        MtaMetadata mtaMetadata = getMtaMetadata(applications);\n+    private DeployedMta toDeployedMta(String mtaId, List<CloudApplication> applications) {\n+        Version mtaVersion = getMtaVersion(applications);\n+        MtaMetadata mtaMetadata = getMtaMetadata(mtaId, mtaVersion);\n         List<DeployedMtaModule> modules = new ArrayList<>();\n         List<DeployedMtaResource> resources = new ArrayList<>();\n         for (CloudApplication application : applications) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NzYzMg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372287632", "bodyText": "Hmmmmm I think I have already seen this ????????!??!?!?!?!?!", "author": "enchobelezirev", "createdAt": "2020-01-29T09:59:51Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n+        return applicationsByMtaId.values()\n+                                  .stream()\n+                                  .map(this::toDeployedMta)\n+                                  .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n+        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n+        for (CloudApplication application : applications) {\n+            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n+                                               .getId();\n+            if (applicationsByMtaId.containsKey(mtaId)) {\n+                applicationsByMtaId.get(mtaId)\n+                                   .add(application);\n+            } else {\n+                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n+            }\n+        }\n+        return applicationsByMtaId;\n+    }\n+\n+    private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n+        return client.getApplications()\n+                     .stream()\n+                     .filter(this::hasEnvMetadata)\n+                     .collect(Collectors.toList());\n+    }\n+\n+    private boolean hasEnvMetadata(CloudApplication application) {\n+        Map<String, String> env = application.getEnv();\n+        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)\n+            || env.containsKey(Constants.ENV_MTA_SERVICES) || env.containsKey(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+    }\n+\n+    private DeployedMta toDeployedMta(List<CloudApplication> applications) {\n+        MtaMetadata mtaMetadata = getMtaMetadata(applications);\n+        List<DeployedMtaModule> modules = new ArrayList<>();\n+        List<DeployedMtaResource> resources = new ArrayList<>();\n+        for (CloudApplication application : applications) {\n+            DeployedMtaModule module = envMtaMetadataParser.parseModule(application);\n+            modules.add(module);\n+            resources.addAll(module.getResources());\n+        }\n+        return ImmutableDeployedMta.builder()\n+                                   .metadata(mtaMetadata)\n+                                   .modules(modules)\n+                                   .resources(resources)\n+                                   .build();\n+    }\n+\n+    private MtaMetadata getMtaMetadata(List<CloudApplication> applications) {\n+        String mtaId = envMtaMetadataParser.parseMtaMetadata(applications.get(0))\n+                                           .getId();\n+        Version version = getVersion(applications);\n+        return ImmutableMtaMetadata.builder()\n+                                   .id(mtaId)\n+                                   .version(version)\n+                                   .build();\n+    }\n+\n+    private Version getVersion(List<CloudApplication> applications) {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\nindex 53fe09292..5463e5776 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java\n\n@@ -1,76 +1,67 @@\n package com.sap.cloud.lm.sl.cf.core.cf.detect;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n-import org.springframework.stereotype.Component;\n \n-import com.sap.cloud.lm.sl.cf.core.Constants;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n import com.sap.cloud.lm.sl.mta.model.Version;\n \n-//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n-//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n-@Component\n+/**\n+ * Remains solely for backwards compatibility with the 'environment' approach of detecting MTAs. Once past the deprecation period this will\n+ * be deleted, allowing the 'metadata' {@link com.sap.cloud.lm.sl.cf.core.cf.detect.DeployedMtaDetector} to become the standard approach for\n+ * detecting MTAs.\n+ */\n+@Deprecated\n+@Named\n public class DeployedMtaEnvDetector {\n \n-    @Inject\n     private EnvMtaMetadataParser envMtaMetadataParser;\n \n-    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n-        return applicationsByMtaId.values()\n-                                  .stream()\n-                                  .map(this::toDeployedMta)\n-                                  .collect(Collectors.toList());\n+    @Inject\n+    public DeployedMtaEnvDetector(EnvMtaMetadataParser envMtaMetadataParser) {\n+        this.envMtaMetadataParser = envMtaMetadataParser;\n     }\n \n-    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n-        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n-        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n-        for (CloudApplication application : applications) {\n-            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n-                                               .getId();\n-            if (applicationsByMtaId.containsKey(mtaId)) {\n-                applicationsByMtaId.get(mtaId)\n-                                   .add(application);\n-            } else {\n-                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n-            }\n-        }\n-        return applicationsByMtaId;\n+    public List<DeployedMta> detectDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsWithEnvMetadata(client).stream()\n+                                                                                                        .collect(Collectors.groupingBy(this::getMtaId));\n+        return applicationsByMtaId.entrySet()\n+                                  .stream()\n+                                  .map(entry -> toDeployedMta(entry.getKey(), entry.getValue()))\n+                                  .collect(Collectors.toList());\n     }\n \n     private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n         return client.getApplications()\n                      .stream()\n-                     .filter(this::hasEnvMetadata)\n+                     .filter(MtaMetadataUtil::hasEnvMtaMetadata)\n                      .collect(Collectors.toList());\n     }\n \n-    private boolean hasEnvMetadata(CloudApplication application) {\n-        Map<String, String> env = application.getEnv();\n-        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)\n-            || env.containsKey(Constants.ENV_MTA_SERVICES) || env.containsKey(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+    private String getMtaId(CloudApplication application) {\n+        return envMtaMetadataParser.parseMtaMetadata(application)\n+                                   .getId();\n     }\n \n-    private DeployedMta toDeployedMta(List<CloudApplication> applications) {\n-        MtaMetadata mtaMetadata = getMtaMetadata(applications);\n+    private DeployedMta toDeployedMta(String mtaId, List<CloudApplication> applications) {\n+        Version mtaVersion = getMtaVersion(applications);\n+        MtaMetadata mtaMetadata = getMtaMetadata(mtaId, mtaVersion);\n         List<DeployedMtaModule> modules = new ArrayList<>();\n         List<DeployedMtaResource> resources = new ArrayList<>();\n         for (CloudApplication application : applications) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4ODIyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372288228", "bodyText": "Named", "author": "enchobelezirev", "createdAt": "2020-01-29T10:00:56Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataApplicationCollector.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+\n+@Component\n+public class MtaMetadataApplicationCollector implements MtaMetadataEntityCollector<CloudApplication> {", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2ODA5OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372368098", "bodyText": "Apply Named annotation everywhere.", "author": "enchobelezirev", "createdAt": "2020-01-29T13:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4ODIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataApplicationCollector.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataApplicationCollector.java\nindex 0af47cfd9..d51998e7e 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataApplicationCollector.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataApplicationCollector.java\n\n@@ -2,17 +2,18 @@ package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n \n import java.util.List;\n \n+import javax.inject.Named;\n+\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n \n-@Component\n+@Named\n public class MtaMetadataApplicationCollector implements MtaMetadataEntityCollector<CloudApplication> {\n \n     @Override\n-    public List<CloudApplication> collect(MtaMetadataCriteria criteria, CloudControllerClient client) {\n+    public List<CloudApplication> collect(CloudControllerClient client, MtaMetadataCriteria criteria) {\n         return client.getApplicationsByMetadataLabelSelector(criteria.get());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzM1MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372297351", "bodyText": "Make it generic and put it in the method", "author": "enchobelezirev", "createdAt": "2020-01-29T10:19:01Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                         Constants.ENV_MTA_SERVICES,\n+                                                                         Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return !Collections.disjoint(application.getEnv()\n+                                                .keySet(),\n+                                     ENV_METADATA_FIELDS);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19fe229012989c6a094822b4c6c10241784cdf03", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\nindex 837d1b869..244a9abf3 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n\n@@ -30,13 +30,14 @@ public class EnvMtaMetadataParser {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n     private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n-                                                                         Constants.ENV_MTA_SERVICES,\n-                                                                         Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n \n     public boolean hasMtaMetadata(CloudApplication application) {\n-        return !Collections.disjoint(application.getEnv()\n-                                                .keySet(),\n-                                     ENV_METADATA_FIELDS);\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n     }\n \n     public MtaMetadata parseMtaMetadata(CloudApplication application) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5ODQwNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372298407", "bodyText": "Do we need to ignore the MTA_ID and MTA_VERSION if the v3 metadata is presented?", "author": "enchobelezirev", "createdAt": "2020-01-29T10:21:22Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaId;\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.v3.Metadata;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Component\n+public class MtaMetadataParser {\n+\n+    private static final List<String> METADATA_LABELS = Arrays.asList(MtaMetadataLabels.MTA_ID, MtaMetadataLabels.MTA_VERSION);\n+\n+    public boolean hasMtaMetadata(CloudEntity entity) {\n+        Metadata metadata = entity.getV3Metadata();\n+        if (metadata == null || metadata.getLabels() == null) {\n+            return false;\n+        }\n+        return Collections.disjoint(metadata.getLabels()", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19fe229012989c6a094822b4c6c10241784cdf03", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\nindex 5408ddf96..7743187d3 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\n\n@@ -4,7 +4,6 @@ import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMt\n import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n \n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTAyOQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372299029", "bodyText": "Do we need this check?", "author": "enchobelezirev", "createdAt": "2020-01-29T10:22:41Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaId;\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.v3.Metadata;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Component\n+public class MtaMetadataParser {\n+\n+    private static final List<String> METADATA_LABELS = Arrays.asList(MtaMetadataLabels.MTA_ID, MtaMetadataLabels.MTA_VERSION);\n+\n+    public boolean hasMtaMetadata(CloudEntity entity) {\n+        Metadata metadata = entity.getV3Metadata();\n+        if (metadata == null || metadata.getLabels() == null) {\n+            return false;\n+        }\n+        return Collections.disjoint(metadata.getLabels()\n+                                            .keySet(),\n+                                    METADATA_LABELS);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudEntity entity) {\n+        try {\n+            if (!isMtaMetadataComplete(entity)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_0_IS_INCOMPLETE, entity.getName());\n+            }\n+            return toMtaMetadata(entity.getV3Metadata());\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_METADATA_FOR_0, entity.getName());\n+        }\n+    }\n+\n+    private boolean isMtaMetadataComplete(CloudEntity entity) {\n+        return entity.getV3Metadata()", "originalCommit": "4603b0626b9898d17e21f3643adc5926df7bca3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\nindex 5408ddf96..1a9482876 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java\n\n@@ -1,17 +1,13 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n \n-import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaId;\n-import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n+import java.text.MessageFormat;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n import org.cloudfoundry.client.lib.domain.CloudService;\n-import org.cloudfoundry.client.v3.Metadata;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2ODQwMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372368403", "bodyText": "HMMMMMM, I think the whole class is somehow duplicated somewhere else?", "author": "enchobelezirev", "createdAt": "2020-01-29T13:01:47Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();\n+        for (CloudEntity entity : entities) {\n+            String mtaId = mtaMetadataParser.parseMtaMetadata(entity)\n+                                            .getId();\n+            if (entitiesByMtaId.containsKey(mtaId)) {\n+                entitiesByMtaId.get(mtaId)\n+                               .add(entity);\n+            } else {\n+                entitiesByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(entity)));\n+            }\n+        }\n+        return entitiesByMtaId;\n+    }\n+\n+    private DeployedMta toDeployedMta(List<CloudEntity> entities) {\n+        MtaMetadata mtaMetadata = getMtaMetadata(entities);\n+        return ImmutableDeployedMta.builder()\n+                                   .metadata(mtaMetadata)\n+                                   .modules(getModules(entities))\n+                                   .resources(getResources(entities))\n+                                   .build();\n+    }\n+\n+    private MtaMetadata getMtaMetadata(List<CloudEntity> entities) {\n+        String mtaId = mtaMetadataParser.parseMtaMetadata(entities.get(0))\n+                                        .getId();\n+        Version version = getVersion(entities);\n+        return ImmutableMtaMetadata.builder()\n+                                   .id(mtaId)\n+                                   .version(version)\n+                                   .build();\n+    }\n+\n+    private Version getVersion(List<CloudEntity> entities) {\n+        if (allHaveSameMtaVersion(entities)) {\n+            return mtaMetadataParser.parseMtaMetadata(entities.get(0))\n+                                    .getVersion();\n+        }\n+        return null;\n+    }\n+\n+    private boolean allHaveSameMtaVersion(List<CloudEntity> entities) {\n+        return entities.stream()\n+                       .map(entity -> mtaMetadataParser.parseMtaMetadata(entity)\n+                                                       .getVersion())\n+                       .distinct()\n+                       .count() == 1;", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\nindex 412d9c3d1..9cf057ac1 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java\n\n@@ -1,18 +1,15 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudEntity;\n import org.cloudfoundry.client.lib.domain.CloudService;\n-import org.springframework.stereotype.Component;\n \n import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2ODg1MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372368851", "bodyText": "Is it parsing exception? Isn't it IllegalState?", "author": "enchobelezirev", "createdAt": "2020-01-29T13:02:51Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                           Constants.ENV_MTA_METADATA);\n+            String id = (String) getRequired(mtaMetadata, Constants.ATTR_ID, exceptionMessage);\n+            String version = (String) getRequired(mtaMetadata, Constants.ATTR_VERSION, exceptionMessage);\n+            return ImmutableMtaMetadata.builder()\n+                                       .id(id)\n+                                       .version(Version.parseVersion(version))\n+                                       .build();\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0, application.getName());\n+        }\n+    }\n+\n+    private boolean isMtaMetadataComplete(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .containsAll(ENV_METADATA_FIELDS);\n+    }\n+\n+    private <K, V> V getRequired(Map<K, V> map, K key, String exceptionMessage) {\n+        V value = map.get(key);\n+        if (value == null) {\n+            throw new ParsingException(exceptionMessage);", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\nindex 244a9abf3..89c660337 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n\n@@ -1,16 +1,17 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n \n import java.text.MessageFormat;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.stereotype.Component;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.sap.cloud.lm.sl.cf.core.Constants;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2OTU3Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372369577", "bodyText": "I think the cast is not needed here", "author": "enchobelezirev", "createdAt": "2020-01-29T13:04:27Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                           Constants.ENV_MTA_METADATA);\n+            String id = (String) getRequired(mtaMetadata, Constants.ATTR_ID, exceptionMessage);", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\nindex 244a9abf3..89c660337 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n\n@@ -1,16 +1,17 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n \n import java.text.MessageFormat;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.stereotype.Component;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.sap.cloud.lm.sl.cf.core.Constants;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MDIyMQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372370221", "bodyText": "services /resources ?!?!??!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!", "author": "enchobelezirev", "createdAt": "2020-01-29T13:05:57Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                           Constants.ENV_MTA_METADATA);\n+            String id = (String) getRequired(mtaMetadata, Constants.ATTR_ID, exceptionMessage);\n+            String version = (String) getRequired(mtaMetadata, Constants.ATTR_VERSION, exceptionMessage);\n+            return ImmutableMtaMetadata.builder()\n+                                       .id(id)\n+                                       .version(Version.parseVersion(version))\n+                                       .build();\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0, application.getName());\n+        }\n+    }\n+\n+    private boolean isMtaMetadataComplete(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .containsAll(ENV_METADATA_FIELDS);\n+    }\n+\n+    private <K, V> V getRequired(Map<K, V> map, K key, String exceptionMessage) {\n+        V value = map.get(key);\n+        if (value == null) {\n+            throw new ParsingException(exceptionMessage);\n+        }\n+        return value;\n+    }\n+\n+    public DeployedMtaModule parseModule(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String moduleName = parseModuleName(application);\n+            List<String> providedDependencyNames = parseProvidedDependencyNames(application);\n+            List<DeployedMtaResource> services = parseResources(application);", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\nindex 244a9abf3..89c660337 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n\n@@ -1,16 +1,17 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n \n import java.text.MessageFormat;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.stereotype.Component;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.sap.cloud.lm.sl.cf.core.Constants;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MTg1Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372371853", "bodyText": "This is common with the other convertion?", "author": "enchobelezirev", "createdAt": "2020-01-29T13:09:35Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                           Constants.ENV_MTA_METADATA);\n+            String id = (String) getRequired(mtaMetadata, Constants.ATTR_ID, exceptionMessage);\n+            String version = (String) getRequired(mtaMetadata, Constants.ATTR_VERSION, exceptionMessage);\n+            return ImmutableMtaMetadata.builder()\n+                                       .id(id)\n+                                       .version(Version.parseVersion(version))\n+                                       .build();\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0, application.getName());\n+        }\n+    }\n+\n+    private boolean isMtaMetadataComplete(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .containsAll(ENV_METADATA_FIELDS);\n+    }\n+\n+    private <K, V> V getRequired(Map<K, V> map, K key, String exceptionMessage) {\n+        V value = map.get(key);\n+        if (value == null) {\n+            throw new ParsingException(exceptionMessage);\n+        }\n+        return value;\n+    }\n+\n+    public DeployedMtaModule parseModule(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String moduleName = parseModuleName(application);\n+            List<String> providedDependencyNames = parseProvidedDependencyNames(application);\n+            List<DeployedMtaResource> services = parseResources(application);\n+            return ImmutableDeployedMtaModule.builder()\n+                                             .appName(application.getName())\n+                                             .moduleName(moduleName)\n+                                             .providedDependencyNames(providedDependencyNames)\n+                                             .resources(services)\n+                                             .build();\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0, application.getName());\n+        }\n+    }\n+\n+    private String parseModuleName(CloudApplication application) {\n+        String envValue = application.getEnv()\n+                                     .get(Constants.ENV_MTA_MODULE_METADATA);\n+        Map<String, Object> mtaModuleMetadata = JsonUtil.convertJsonToMap(envValue);\n+        return (String) getRequired(mtaModuleMetadata, Constants.ATTR_NAME,\n+                                    MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                         Constants.ENV_MTA_MODULE_METADATA));\n+    }\n+\n+    private List<String> parseProvidedDependencyNames(CloudApplication application) {\n+        String envValue = application.getEnv()\n+                                     .get(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+        try {\n+            return JsonUtil.convertJsonToList(envValue, new TypeReference<List<String>>() {\n+            });\n+        } catch (ParsingException e) {\n+            LOGGER.warn(MessageFormat.format(Messages.COULD_NOT_PARSE_PROVIDED_DEPENDENCY_NAMES_1_OF_APP_0, application.getName(),\n+                                             envValue),\n+                        e);\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    private List<DeployedMtaResource> parseResources(CloudApplication application) {\n+        return parseServices(application).stream()\n+                                         .map(name -> ImmutableDeployedMtaResource.builder()\n+                                                                                  .serviceName(name)\n+                                                                                  .build())\n+                                         .collect(Collectors.toList());\n+    }\n+\n+    private List<String> parseServices(CloudApplication application) {\n+        String envValue = application.getEnv()\n+                                     .get(Constants.ENV_MTA_SERVICES);\n+        return JsonUtil.convertJsonToList(envValue, new TypeReference<List<String>>() {", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\nindex 244a9abf3..89c660337 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java\n\n@@ -1,16 +1,17 @@\n package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n \n import java.text.MessageFormat;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.stereotype.Component;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.sap.cloud.lm.sl.cf.core.Constants;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MzI0Mg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372373242", "bodyText": "Please, keep the naming - if you are using resource user resource as a whole if service then service, do not mix them. In this case, the resource should be used.", "author": "enchobelezirev", "createdAt": "2020-01-29T13:12:44Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.SupportedParameters;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.ProvidedDependency;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+\n+public class ApplicationMetadataBuilder {\n+\n+    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> moduleResources,", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\nindex 4d763e20e..49d54d007 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\n\n@@ -24,11 +24,11 @@ import com.sap.cloud.lm.sl.mta.model.Resource;\n \n public class ApplicationMetadataBuilder {\n \n-    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> moduleResources,\n+    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> resources,\n                                  List<String> uris) {\n-        List<DeployedMtaResource> deployedResources = moduleResources.stream()\n-                                                                     .map(resource -> mapResourceToDeployedMtaResource(resource, module))\n-                                                                     .collect(Collectors.toList());\n+        List<DeployedMtaResource> deployedResources = resources.stream()\n+                                                               .map(resource -> mapResourceToDeployedMtaResource(resource, module))\n+                                                               .collect(Collectors.toList());\n         List<String> providedDependenciesNames = getProvidedDependencies(module);\n         DeployedMtaModule deployedMtaModule = ImmutableDeployedMtaModule.builder()\n                                                                         .moduleName(module.getName())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NDQzMA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372374430", "bodyText": "I would suggest, splitting this builder into several small builders which are intended to build each MtaMetadata entry separately.", "author": "enchobelezirev", "createdAt": "2020-01-29T13:15:28Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.SupportedParameters;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.ProvidedDependency;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+\n+public class ApplicationMetadataBuilder {\n+\n+    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> moduleResources,", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\nindex 4d763e20e..49d54d007 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java\n\n@@ -24,11 +24,11 @@ import com.sap.cloud.lm.sl.mta.model.Resource;\n \n public class ApplicationMetadataBuilder {\n \n-    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> moduleResources,\n+    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> resources,\n                                  List<String> uris) {\n-        List<DeployedMtaResource> deployedResources = moduleResources.stream()\n-                                                                     .map(resource -> mapResourceToDeployedMtaResource(resource, module))\n-                                                                     .collect(Collectors.toList());\n+        List<DeployedMtaResource> deployedResources = resources.stream()\n+                                                               .map(resource -> mapResourceToDeployedMtaResource(resource, module))\n+                                                               .collect(Collectors.toList());\n         List<String> providedDependenciesNames = getProvidedDependencies(module);\n         DeployedMtaModule deployedMtaModule = ImmutableDeployedMtaModule.builder()\n                                                                         .moduleName(module.getName())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NTc4Ng==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372375786", "bodyText": "Double '", "author": "enchobelezirev", "createdAt": "2020-01-29T13:18:10Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java", "diffHunk": "@@ -64,8 +64,13 @@\n     public static final String UNABLE_TO_PARSE_MEMORY_STRING_0 = \"Unable to parse memory string \\\"{0}\\\"\";\r\n     public static final String CANT_CREATE_SERVICE_NOT_MATCHING_OFFERINGS_OR_PLAN = \"Service \\\"{0}\\\" could not be created because none of the service offering(s) \\\"{1}\\\" match with existing service offerings or provide service plan \\\"{2}\\\"\";\r\n     public static final String CANT_CREATE_SERVICE = \"Service \\\"{0}\\\" could not be created because all attempt(s) to use service offerings \\\"{1}\\\" failed\";\r\n-    public static final String CANT_PARSE_MTA_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\r\n+    public static final String CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\r", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java\nindex 265b43578..210bfd76e 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java\n\n@@ -64,14 +64,12 @@ public final class Messages {\n     public static final String UNABLE_TO_PARSE_MEMORY_STRING_0 = \"Unable to parse memory string \\\"{0}\\\"\";\n     public static final String CANT_CREATE_SERVICE_NOT_MATCHING_OFFERINGS_OR_PLAN = \"Service \\\"{0}\\\" could not be created because none of the service offering(s) \\\"{1}\\\" match with existing service offerings or provide service plan \\\"{2}\\\"\";\n     public static final String CANT_CREATE_SERVICE = \"Service \\\"{0}\\\" could not be created because all attempt(s) to use service offerings \\\"{1}\\\" failed\";\n-    public static final String CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\n-    public static final String CANT_PARSE_MTA_METADATA_FOR_0 = \"Cannot parse MTA metadata for \\\"{0}\\\". This indicates that MTA reserved variables in the entity''s metadata were modified manually. Either revert the changes or delete the entity.\";\n-    public static final String CANT_PARSE_MTA_METADATA_ANNOTATIONS = \"Cannot parse MTA metadata annotations.\";\n-    public static final String CANT_PARSE_MTA_METADATA_LABELS = \"Cannot parse MTA metadata labels.\";\n-    public static final String MTA_METADATA_FOR_APP_0_IS_INCOMPLETE = \"MTA metadata for application \\\"{0}\\\" is incomplete\";\n-    public static final String MTA_METADATA_FOR_SERVICE_0_IS_INCOMPLETE = \"MTA metadata for service \\\"{0}\\\" is incomplete\";\n-    public static final String MTA_METADATA_FOR_0_IS_INCOMPLETE = \"MTA metadata for entity \\\"{0}\\\" is incomplete\";\n-    public static final String ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1 = \"The environment of application \\\"{0}\\\" contains an invalid value for \\\"{0}\\\"\";\n+    public static final String CANT_PARSE_MTA_METADATA_FOR_0 = \"Cannot parse MTA metadata for \\\"{0}\\\". This indicates that MTA reserved variables in the entity's metadata were modified manually. Either revert the changes or delete the entity.\";\n+    public static final String CANT_PARSE_MTA_METADATA_VERSION_FOR_0 = \"Cannot parse version from MTA metadata for \\\"{0}\\\". This indicates that MTA reserved variables in the entity's metadata were modified manually. Either revert the changes or delete the entity.\";\n+    public static final String CANT_PARSE_MTA_ENV_METADATA_VERSION_FOR_APP_0 = \"Cannot parse version from MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application's environment were modified manually. Either revert the changes or delete the application.\";\n+    public static final String MTA_METADATA_FOR_APP_0_IS_INCOMPLETE = \"MTA metadata for application \\\"{0}\\\" is incomplete. This indicates that MTA reserved variables in the application's environment were modified manually. Either revert the changes or delete the application.\";\n+    public static final String MTA_METADATA_FOR_0_IS_INCOMPLETE = \"MTA metadata for entity \\\"{0}\\\" is incomplete. This indicates that MTA reserved variables in the entity's metadata were modified manually. Either revert the changes or delete the entity.\";\n+    public static final String ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1 = \"The environment of application \\\"{0}\\\" contains an invalid value for \\\"{0}\\\". This indicates that MTA reserved variables in the application's environment were modified manually. Either revert the changes or delete the application.\";\n     public static final String COULD_NOT_DELETE_SPACE_LEFTOVERS = \"Could not delete space leftovers\";\n     public static final String SERVICE_MISSING_REQUIRED_PARAMETER = \"Service \\\"{0}\\\" has missing required parameter: {1}\";\n     public static final String CONTROLLER_URL_NOT_SPECIFIED = \"Controller URL is not specified in the environment.\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NTk1NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372375955", "bodyText": "Same", "author": "enchobelezirev", "createdAt": "2020-01-29T13:18:31Z", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java", "diffHunk": "@@ -64,8 +64,13 @@\n     public static final String UNABLE_TO_PARSE_MEMORY_STRING_0 = \"Unable to parse memory string \\\"{0}\\\"\";\r\n     public static final String CANT_CREATE_SERVICE_NOT_MATCHING_OFFERINGS_OR_PLAN = \"Service \\\"{0}\\\" could not be created because none of the service offering(s) \\\"{1}\\\" match with existing service offerings or provide service plan \\\"{2}\\\"\";\r\n     public static final String CANT_CREATE_SERVICE = \"Service \\\"{0}\\\" could not be created because all attempt(s) to use service offerings \\\"{1}\\\" failed\";\r\n-    public static final String CANT_PARSE_MTA_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\r\n+    public static final String CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\r\n+    public static final String CANT_PARSE_MTA_METADATA_FOR_0 = \"Cannot parse MTA metadata for \\\"{0}\\\". This indicates that MTA reserved variables in the entity''s metadata were modified manually. Either revert the changes or delete the entity.\";\r", "originalCommit": "19fe229012989c6a094822b4c6c10241784cdf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9605e85e8a7c4690544b1527cff0005c90460937", "chunk": "diff --git a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java\nindex 265b43578..210bfd76e 100644\n--- a/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java\n+++ b/com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java\n\n@@ -64,14 +64,12 @@ public final class Messages {\n     public static final String UNABLE_TO_PARSE_MEMORY_STRING_0 = \"Unable to parse memory string \\\"{0}\\\"\";\n     public static final String CANT_CREATE_SERVICE_NOT_MATCHING_OFFERINGS_OR_PLAN = \"Service \\\"{0}\\\" could not be created because none of the service offering(s) \\\"{1}\\\" match with existing service offerings or provide service plan \\\"{2}\\\"\";\n     public static final String CANT_CREATE_SERVICE = \"Service \\\"{0}\\\" could not be created because all attempt(s) to use service offerings \\\"{1}\\\" failed\";\n-    public static final String CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\n-    public static final String CANT_PARSE_MTA_METADATA_FOR_0 = \"Cannot parse MTA metadata for \\\"{0}\\\". This indicates that MTA reserved variables in the entity''s metadata were modified manually. Either revert the changes or delete the entity.\";\n-    public static final String CANT_PARSE_MTA_METADATA_ANNOTATIONS = \"Cannot parse MTA metadata annotations.\";\n-    public static final String CANT_PARSE_MTA_METADATA_LABELS = \"Cannot parse MTA metadata labels.\";\n-    public static final String MTA_METADATA_FOR_APP_0_IS_INCOMPLETE = \"MTA metadata for application \\\"{0}\\\" is incomplete\";\n-    public static final String MTA_METADATA_FOR_SERVICE_0_IS_INCOMPLETE = \"MTA metadata for service \\\"{0}\\\" is incomplete\";\n-    public static final String MTA_METADATA_FOR_0_IS_INCOMPLETE = \"MTA metadata for entity \\\"{0}\\\" is incomplete\";\n-    public static final String ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1 = \"The environment of application \\\"{0}\\\" contains an invalid value for \\\"{0}\\\"\";\n+    public static final String CANT_PARSE_MTA_METADATA_FOR_0 = \"Cannot parse MTA metadata for \\\"{0}\\\". This indicates that MTA reserved variables in the entity's metadata were modified manually. Either revert the changes or delete the entity.\";\n+    public static final String CANT_PARSE_MTA_METADATA_VERSION_FOR_0 = \"Cannot parse version from MTA metadata for \\\"{0}\\\". This indicates that MTA reserved variables in the entity's metadata were modified manually. Either revert the changes or delete the entity.\";\n+    public static final String CANT_PARSE_MTA_ENV_METADATA_VERSION_FOR_APP_0 = \"Cannot parse version from MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application's environment were modified manually. Either revert the changes or delete the application.\";\n+    public static final String MTA_METADATA_FOR_APP_0_IS_INCOMPLETE = \"MTA metadata for application \\\"{0}\\\" is incomplete. This indicates that MTA reserved variables in the application's environment were modified manually. Either revert the changes or delete the application.\";\n+    public static final String MTA_METADATA_FOR_0_IS_INCOMPLETE = \"MTA metadata for entity \\\"{0}\\\" is incomplete. This indicates that MTA reserved variables in the entity's metadata were modified manually. Either revert the changes or delete the entity.\";\n+    public static final String ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1 = \"The environment of application \\\"{0}\\\" contains an invalid value for \\\"{0}\\\". This indicates that MTA reserved variables in the application's environment were modified manually. Either revert the changes or delete the application.\";\n     public static final String COULD_NOT_DELETE_SPACE_LEFTOVERS = \"Could not delete space leftovers\";\n     public static final String SERVICE_MISSING_REQUIRED_PARAMETER = \"Service \\\"{0}\\\" has missing required parameter: {1}\";\n     public static final String CONTROLLER_URL_NOT_SPECIFIED = \"Controller URL is not specified in the environment.\";\n"}}, {"oid": "9605e85e8a7c4690544b1527cff0005c90460937", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9605e85e8a7c4690544b1527cff0005c90460937", "message": "Refactoring Mta Metadata", "committedDate": "2020-01-30T16:20:56Z", "type": "forcePushed"}, {"oid": "0573548ccc12fc841abc87531edf1a0dde5f4630", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0573548ccc12fc841abc87531edf1a0dde5f4630", "message": "Mta Metadata implementation", "committedDate": "2020-02-03T23:28:25Z", "type": "forcePushed"}, {"oid": "f0cfa127bd597764d695eb12216b86355788e11a", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/f0cfa127bd597764d695eb12216b86355788e11a", "message": "Mta Metadata implementation", "committedDate": "2020-02-03T23:34:37Z", "type": "forcePushed"}, {"oid": "13c74955de132f4885081ef5aee1db04877fdab8", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/13c74955de132f4885081ef5aee1db04877fdab8", "message": "Mta Metadata implementation", "committedDate": "2020-02-03T23:44:16Z", "type": "forcePushed"}, {"oid": "892f1c7b3fda74a783435c8104f9ba26622a0b93", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/892f1c7b3fda74a783435c8104f9ba26622a0b93", "message": "Mta Metadata implementation", "committedDate": "2020-02-04T07:08:55Z", "type": "forcePushed"}, {"oid": "0621abad62667d302864160bb97959b45d18328a", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0621abad62667d302864160bb97959b45d18328a", "message": "Mta Metadata implementation", "committedDate": "2020-02-04T08:43:35Z", "type": "forcePushed"}, {"oid": "630912638958f3484c95f096b5c096423f689647", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/630912638958f3484c95f096b5c096423f689647", "message": "Mta Metadata implementation", "committedDate": "2020-02-04T09:51:44Z", "type": "forcePushed"}, {"oid": "bb2758fc02294462b07bd6e28b0a853f0fa62d1d", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/bb2758fc02294462b07bd6e28b0a853f0fa62d1d", "message": "Mta Metadata implementation", "committedDate": "2020-02-04T16:31:18Z", "type": "forcePushed"}, {"oid": "ca23a2ed05ebd355078466accca9e516c6ef6943", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ca23a2ed05ebd355078466accca9e516c6ef6943", "message": "Mta Metadata implementation", "committedDate": "2020-02-05T12:07:40Z", "type": "forcePushed"}, {"oid": "ce5d1677e0e7b1a1958fee0738a2f96008232b2f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ce5d1677e0e7b1a1958fee0738a2f96008232b2f", "message": "Unit tests for metadata and adjusting existing ones", "committedDate": "2020-02-05T13:58:12Z", "type": "forcePushed"}, {"oid": "58fd1991dc45f9074595603a28f0e57ddabb0b11", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/58fd1991dc45f9074595603a28f0e57ddabb0b11", "message": "[Metadata] Unit tests and adjusting existing ones", "committedDate": "2020-02-05T14:01:27Z", "type": "forcePushed"}, {"oid": "9337c3ba3b50e83385b94df28c5e67566ca5dc8d", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9337c3ba3b50e83385b94df28c5e67566ca5dc8d", "message": "[Metadata] Adopt multiapps 1.86.0", "committedDate": "2020-02-05T17:04:39Z", "type": "commit"}, {"oid": "2c0c8b16b11119e2d5e92e3f3fcac05ab4b52f11", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/2c0c8b16b11119e2d5e92e3f3fcac05ab4b52f11", "message": "[Metadata] Adopt cf-java-client-sap 1.19.0", "committedDate": "2020-02-05T17:05:45Z", "type": "commit"}, {"oid": "2de5085ddc34c91a395dfa804da27d92555f81b4", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/2de5085ddc34c91a395dfa804da27d92555f81b4", "message": "[Metadata] Simplify deployed mta entities", "committedDate": "2020-02-05T17:05:49Z", "type": "commit"}, {"oid": "8a0e8aa03d2be8b820c27209f5b19ce33fb61f32", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8a0e8aa03d2be8b820c27209f5b19ce33fb61f32", "message": "[Metadata] Adapt to cf-java-client changes with new metadata methods", "committedDate": "2020-02-05T17:05:49Z", "type": "commit"}, {"oid": "9131a6154c8f2055878a4f53abfb82d70325cb34", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9131a6154c8f2055878a4f53abfb82d70325cb34", "message": "[Metadata] Mta entity collectors, aggregators, parsers for v3 metadata", "committedDate": "2020-02-05T17:05:49Z", "type": "commit"}, {"oid": "347b1d0f1d5683c28539d9d8de92eff763120fdf", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/347b1d0f1d5683c28539d9d8de92eff763120fdf", "message": "[Metadata] Unit tests and adjusting existing ones", "committedDate": "2020-02-05T17:05:50Z", "type": "forcePushed"}, {"oid": "eff34aa71a291ec09c0537a9388ca3c81e51cff7", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/eff34aa71a291ec09c0537a9388ca3c81e51cff7", "message": "[Metadata] Builders and corresponding steps", "committedDate": "2020-02-05T17:32:24Z", "type": "commit"}, {"oid": "cc13c2ccbf1eba6c3587a02b2f9b643c63485eef", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/cc13c2ccbf1eba6c3587a02b2f9b643c63485eef", "message": "[Metadata] Use new mta detectors in mtas api", "committedDate": "2020-02-05T17:32:35Z", "type": "commit"}, {"oid": "b2623e3c7236fe687a7ba187e914616101b54693", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/b2623e3c7236fe687a7ba187e914616101b54693", "message": "[Metadata] Update all steps using mta entities and metadata", "committedDate": "2020-02-05T17:32:35Z", "type": "commit"}, {"oid": "7ebf0a587ea6ea6f50da392cf14f2c465f2e3c60", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/7ebf0a587ea6ea6f50da392cf14f2c465f2e3c60", "message": "[Metadata] Update metadata messages", "committedDate": "2020-02-05T17:32:35Z", "type": "commit"}, {"oid": "dd27b166fc523ef7441843eee2637fd0ed0c6c4f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/dd27b166fc523ef7441843eee2637fd0ed0c6c4f", "message": "[Metadata] Unit tests and adjusting existing ones", "committedDate": "2020-02-05T17:32:36Z", "type": "commit"}, {"oid": "dd27b166fc523ef7441843eee2637fd0ed0c6c4f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/dd27b166fc523ef7441843eee2637fd0ed0c6c4f", "message": "[Metadata] Unit tests and adjusting existing ones", "committedDate": "2020-02-05T17:32:36Z", "type": "forcePushed"}]}