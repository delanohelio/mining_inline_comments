{"pr_number": 9403, "pr_title": "MULE-18523: Fix Flaky ClassloadingTestCase", "pr_createdAt": "2020-09-14T13:23:22Z", "pr_url": "https://github.com/mulesoft/mule/pull/9403", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0MjMzMA==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488042330", "bodyText": "use info or debug.", "author": "fsgonz", "createdAt": "2020-09-14T15:53:30Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+\n+  private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n+  private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n+  private static int SERVER_PORT = parseInt(getProperty(DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY));\n+\n+  protected File directory;\n+\n+  @Inject\n+  private DeploymentService deploymentService;\n+\n+  private DeploymentServerSocket serverSocket;\n+\n+  private Set<String> deployedArtifacts = synchronizedSet(new HashSet<>());\n+\n+  private Set<String> deployedDomains = synchronizedSet(new HashSet<>());\n+\n+  @Override\n+  public void setWorkingDirectory(File directory) {\n+    this.directory = directory;\n+  }\n+\n+  @Override\n+  public boolean isDisabledOnEnvironment() {\n+    return false;\n+  }\n+\n+  @Override\n+  public void dispose() {\n+\n+  }\n+\n+  @Override\n+  public void initialise() throws InitialisationException {\n+    serverSocket = new DeploymentServerSocket(SERVER_PORT, this);\n+  }\n+\n+  @Override\n+  public void start() throws MuleException {\n+    try {\n+      LOGGER.warn(\"Starting DeploymentServerSocket...\");", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0MjQ4MA==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488042480", "bodyText": "use info or debug", "author": "fsgonz", "createdAt": "2020-09-14T15:53:44Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+\n+  private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n+  private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n+  private static int SERVER_PORT = parseInt(getProperty(DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY));\n+\n+  protected File directory;\n+\n+  @Inject\n+  private DeploymentService deploymentService;\n+\n+  private DeploymentServerSocket serverSocket;\n+\n+  private Set<String> deployedArtifacts = synchronizedSet(new HashSet<>());\n+\n+  private Set<String> deployedDomains = synchronizedSet(new HashSet<>());\n+\n+  @Override\n+  public void setWorkingDirectory(File directory) {\n+    this.directory = directory;\n+  }\n+\n+  @Override\n+  public boolean isDisabledOnEnvironment() {\n+    return false;\n+  }\n+\n+  @Override\n+  public void dispose() {\n+\n+  }\n+\n+  @Override\n+  public void initialise() throws InitialisationException {\n+    serverSocket = new DeploymentServerSocket(SERVER_PORT, this);\n+  }\n+\n+  @Override\n+  public void start() throws MuleException {\n+    try {\n+      LOGGER.warn(\"Starting DeploymentServerSocket...\");\n+      serverSocket.start();\n+\n+    } catch (IOException e) {\n+      stopServerQuietly();\n+      throw new RuntimeException(e);\n+    }\n+\n+    LOGGER.warn(\"Registering deployment listener ...\");", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0MjY2Ng==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488042666", "bodyText": "use info or debug", "author": "fsgonz", "createdAt": "2020-09-14T15:54:00Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+\n+  private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n+  private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n+  private static int SERVER_PORT = parseInt(getProperty(DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY));\n+\n+  protected File directory;\n+\n+  @Inject\n+  private DeploymentService deploymentService;\n+\n+  private DeploymentServerSocket serverSocket;\n+\n+  private Set<String> deployedArtifacts = synchronizedSet(new HashSet<>());\n+\n+  private Set<String> deployedDomains = synchronizedSet(new HashSet<>());\n+\n+  @Override\n+  public void setWorkingDirectory(File directory) {\n+    this.directory = directory;\n+  }\n+\n+  @Override\n+  public boolean isDisabledOnEnvironment() {\n+    return false;\n+  }\n+\n+  @Override\n+  public void dispose() {\n+\n+  }\n+\n+  @Override\n+  public void initialise() throws InitialisationException {\n+    serverSocket = new DeploymentServerSocket(SERVER_PORT, this);\n+  }\n+\n+  @Override\n+  public void start() throws MuleException {\n+    try {\n+      LOGGER.warn(\"Starting DeploymentServerSocket...\");\n+      serverSocket.start();\n+\n+    } catch (IOException e) {\n+      stopServerQuietly();\n+      throw new RuntimeException(e);\n+    }\n+\n+    LOGGER.warn(\"Registering deployment listener ...\");\n+    deploymentService.addDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Deployment success:  %s\", artifactName));", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0MjgwNQ==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488042805", "bodyText": "use info or debug", "author": "fsgonz", "createdAt": "2020-09-14T15:54:11Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+\n+  private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n+  private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n+  private static int SERVER_PORT = parseInt(getProperty(DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY));\n+\n+  protected File directory;\n+\n+  @Inject\n+  private DeploymentService deploymentService;\n+\n+  private DeploymentServerSocket serverSocket;\n+\n+  private Set<String> deployedArtifacts = synchronizedSet(new HashSet<>());\n+\n+  private Set<String> deployedDomains = synchronizedSet(new HashSet<>());\n+\n+  @Override\n+  public void setWorkingDirectory(File directory) {\n+    this.directory = directory;\n+  }\n+\n+  @Override\n+  public boolean isDisabledOnEnvironment() {\n+    return false;\n+  }\n+\n+  @Override\n+  public void dispose() {\n+\n+  }\n+\n+  @Override\n+  public void initialise() throws InitialisationException {\n+    serverSocket = new DeploymentServerSocket(SERVER_PORT, this);\n+  }\n+\n+  @Override\n+  public void start() throws MuleException {\n+    try {\n+      LOGGER.warn(\"Starting DeploymentServerSocket...\");\n+      serverSocket.start();\n+\n+    } catch (IOException e) {\n+      stopServerQuietly();\n+      throw new RuntimeException(e);\n+    }\n+\n+    LOGGER.warn(\"Registering deployment listener ...\");\n+    deploymentService.addDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Deployment success:  %s\", artifactName));\n+        deployedArtifacts.add(artifactName);\n+      }\n+\n+      @Override\n+      public void onUndeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Undeployment success: %s\", artifactName));", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0Mjk3Ng==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488042976", "bodyText": "use info or debug", "author": "fsgonz", "createdAt": "2020-09-14T15:54:27Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+\n+  private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n+  private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n+  private static int SERVER_PORT = parseInt(getProperty(DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY));\n+\n+  protected File directory;\n+\n+  @Inject\n+  private DeploymentService deploymentService;\n+\n+  private DeploymentServerSocket serverSocket;\n+\n+  private Set<String> deployedArtifacts = synchronizedSet(new HashSet<>());\n+\n+  private Set<String> deployedDomains = synchronizedSet(new HashSet<>());\n+\n+  @Override\n+  public void setWorkingDirectory(File directory) {\n+    this.directory = directory;\n+  }\n+\n+  @Override\n+  public boolean isDisabledOnEnvironment() {\n+    return false;\n+  }\n+\n+  @Override\n+  public void dispose() {\n+\n+  }\n+\n+  @Override\n+  public void initialise() throws InitialisationException {\n+    serverSocket = new DeploymentServerSocket(SERVER_PORT, this);\n+  }\n+\n+  @Override\n+  public void start() throws MuleException {\n+    try {\n+      LOGGER.warn(\"Starting DeploymentServerSocket...\");\n+      serverSocket.start();\n+\n+    } catch (IOException e) {\n+      stopServerQuietly();\n+      throw new RuntimeException(e);\n+    }\n+\n+    LOGGER.warn(\"Registering deployment listener ...\");\n+    deploymentService.addDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Deployment success:  %s\", artifactName));\n+        deployedArtifacts.add(artifactName);\n+      }\n+\n+      @Override\n+      public void onUndeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Undeployment success: %s\", artifactName));\n+        deployedArtifacts.remove(artifactName);\n+      }\n+    });\n+\n+    LOGGER.info(\"Registering domain deployment listener ...\");\n+    deploymentService.addDomainDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"[DOMAIN] Deployment success:  %s\", artifactName));", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0MzEwOQ==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488043109", "bodyText": "info or de bug", "author": "fsgonz", "createdAt": "2020-09-14T15:54:36Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+\n+  private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n+  private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n+  private static int SERVER_PORT = parseInt(getProperty(DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY));\n+\n+  protected File directory;\n+\n+  @Inject\n+  private DeploymentService deploymentService;\n+\n+  private DeploymentServerSocket serverSocket;\n+\n+  private Set<String> deployedArtifacts = synchronizedSet(new HashSet<>());\n+\n+  private Set<String> deployedDomains = synchronizedSet(new HashSet<>());\n+\n+  @Override\n+  public void setWorkingDirectory(File directory) {\n+    this.directory = directory;\n+  }\n+\n+  @Override\n+  public boolean isDisabledOnEnvironment() {\n+    return false;\n+  }\n+\n+  @Override\n+  public void dispose() {\n+\n+  }\n+\n+  @Override\n+  public void initialise() throws InitialisationException {\n+    serverSocket = new DeploymentServerSocket(SERVER_PORT, this);\n+  }\n+\n+  @Override\n+  public void start() throws MuleException {\n+    try {\n+      LOGGER.warn(\"Starting DeploymentServerSocket...\");\n+      serverSocket.start();\n+\n+    } catch (IOException e) {\n+      stopServerQuietly();\n+      throw new RuntimeException(e);\n+    }\n+\n+    LOGGER.warn(\"Registering deployment listener ...\");\n+    deploymentService.addDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Deployment success:  %s\", artifactName));\n+        deployedArtifacts.add(artifactName);\n+      }\n+\n+      @Override\n+      public void onUndeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Undeployment success: %s\", artifactName));\n+        deployedArtifacts.remove(artifactName);\n+      }\n+    });\n+\n+    LOGGER.info(\"Registering domain deployment listener ...\");\n+    deploymentService.addDomainDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"[DOMAIN] Deployment success:  %s\", artifactName));\n+        deployedDomains.add(artifactName);\n+      }\n+\n+      @Override\n+      public void onUndeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"[DOMAIN] Undeployment success: %s\", artifactName));", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0MzI1NQ==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488043255", "bodyText": "info or debug", "author": "fsgonz", "createdAt": "2020-09-14T15:54:48Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+\n+  private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n+  private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n+  private static int SERVER_PORT = parseInt(getProperty(DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY));\n+\n+  protected File directory;\n+\n+  @Inject\n+  private DeploymentService deploymentService;\n+\n+  private DeploymentServerSocket serverSocket;\n+\n+  private Set<String> deployedArtifacts = synchronizedSet(new HashSet<>());\n+\n+  private Set<String> deployedDomains = synchronizedSet(new HashSet<>());\n+\n+  @Override\n+  public void setWorkingDirectory(File directory) {\n+    this.directory = directory;\n+  }\n+\n+  @Override\n+  public boolean isDisabledOnEnvironment() {\n+    return false;\n+  }\n+\n+  @Override\n+  public void dispose() {\n+\n+  }\n+\n+  @Override\n+  public void initialise() throws InitialisationException {\n+    serverSocket = new DeploymentServerSocket(SERVER_PORT, this);\n+  }\n+\n+  @Override\n+  public void start() throws MuleException {\n+    try {\n+      LOGGER.warn(\"Starting DeploymentServerSocket...\");\n+      serverSocket.start();\n+\n+    } catch (IOException e) {\n+      stopServerQuietly();\n+      throw new RuntimeException(e);\n+    }\n+\n+    LOGGER.warn(\"Registering deployment listener ...\");\n+    deploymentService.addDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Deployment success:  %s\", artifactName));\n+        deployedArtifacts.add(artifactName);\n+      }\n+\n+      @Override\n+      public void onUndeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Undeployment success: %s\", artifactName));\n+        deployedArtifacts.remove(artifactName);\n+      }\n+    });\n+\n+    LOGGER.info(\"Registering domain deployment listener ...\");\n+    deploymentService.addDomainDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"[DOMAIN] Deployment success:  %s\", artifactName));\n+        deployedDomains.add(artifactName);\n+      }\n+\n+      @Override\n+      public void onUndeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"[DOMAIN] Undeployment success: %s\", artifactName));\n+        deployedDomains.remove(artifactName);\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public void stop() throws MuleException {\n+    stopServerQuietly();\n+  }\n+\n+  private void stopServerQuietly() {\n+    if (serverSocket != null) {\n+      try {\n+        LOGGER.warn(\"Stopping DeploymentServerSocket ...\");", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0Mzc1NA==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488043754", "bodyText": "use a warning for debugging purposes in the catch block", "author": "fsgonz", "createdAt": "2020-09-14T15:55:29Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+\n+  private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n+  private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n+  private static int SERVER_PORT = parseInt(getProperty(DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY));\n+\n+  protected File directory;\n+\n+  @Inject\n+  private DeploymentService deploymentService;\n+\n+  private DeploymentServerSocket serverSocket;\n+\n+  private Set<String> deployedArtifacts = synchronizedSet(new HashSet<>());\n+\n+  private Set<String> deployedDomains = synchronizedSet(new HashSet<>());\n+\n+  @Override\n+  public void setWorkingDirectory(File directory) {\n+    this.directory = directory;\n+  }\n+\n+  @Override\n+  public boolean isDisabledOnEnvironment() {\n+    return false;\n+  }\n+\n+  @Override\n+  public void dispose() {\n+\n+  }\n+\n+  @Override\n+  public void initialise() throws InitialisationException {\n+    serverSocket = new DeploymentServerSocket(SERVER_PORT, this);\n+  }\n+\n+  @Override\n+  public void start() throws MuleException {\n+    try {\n+      LOGGER.warn(\"Starting DeploymentServerSocket...\");\n+      serverSocket.start();\n+\n+    } catch (IOException e) {\n+      stopServerQuietly();\n+      throw new RuntimeException(e);\n+    }\n+\n+    LOGGER.warn(\"Registering deployment listener ...\");\n+    deploymentService.addDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Deployment success:  %s\", artifactName));\n+        deployedArtifacts.add(artifactName);\n+      }\n+\n+      @Override\n+      public void onUndeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"Undeployment success: %s\", artifactName));\n+        deployedArtifacts.remove(artifactName);\n+      }\n+    });\n+\n+    LOGGER.info(\"Registering domain deployment listener ...\");\n+    deploymentService.addDomainDeploymentListener(new DeploymentListener() {\n+\n+      @Override\n+      public void onDeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"[DOMAIN] Deployment success:  %s\", artifactName));\n+        deployedDomains.add(artifactName);\n+      }\n+\n+      @Override\n+      public void onUndeploymentSuccess(String artifactName) {\n+        LOGGER.warn(format(\"[DOMAIN] Undeployment success: %s\", artifactName));\n+        deployedDomains.remove(artifactName);\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public void stop() throws MuleException {\n+    stopServerQuietly();\n+  }\n+\n+  private void stopServerQuietly() {\n+    if (serverSocket != null) {\n+      try {\n+        LOGGER.warn(\"Stopping DeploymentServerSocket ...\");\n+        serverSocket.stop();\n+      } catch (Exception e) {\n+        // Do nothing.", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0NDI1Ng==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488044256", "bodyText": "java docs", "author": "fsgonz", "createdAt": "2020-09-14T15:56:15Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentState.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+public interface DeploymentState {\n+\n+  boolean isDeployed(String artifactName);", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentState.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentState.java\ndeleted file mode 100644\nindex 0d8c75aa70d..00000000000\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentState.java\n+++ /dev/null\n\n@@ -1,14 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.test.plugin;\n-\n-public interface DeploymentState {\n-\n-  boolean isDeployed(String artifactName);\n-\n-  boolean isDomainDeployed(String artifactName);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0NDM3Mg==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488044372", "bodyText": "java docs", "author": "fsgonz", "createdAt": "2020-09-14T15:56:25Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.util.Collections.synchronizedSet;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.mulesoft.mule.runtime.module.plugin.api.MulePlugin;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.api.DeploymentService;\n+import org.slf4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\nindex 20580e6e4a2..ba33ed061ae 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentNotifierPlugin.java\n\n@@ -25,7 +25,13 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n \n-public class DeploymentNotifierPlugin implements MulePlugin, DeploymentState {\n+/**\n+ * Mule deployment plugin that use {@link DeploymentServerSocket} server to answer client's requests\n+ * about deployment status over apps and domains.\n+ *\n+ * @since 4.0\n+ */\n+public class DeploymentNotifierPlugin implements MulePlugin {\n \n   private static final Logger LOGGER = getLogger(DeploymentNotifierPlugin.class);\n   private static String DEPLOYMENT_SERVER_SOCKET_PORT_PROPERTY = \"mule.test.deployment.server.socket.port\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0NDg2MA==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488044860", "bodyText": "java docs. Keep info or debug in logs when information about the process is provided.", "author": "fsgonz", "createdAt": "2020-09-14T15:57:09Z", "path": "tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentServerSocket.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.plugin;\n+\n+import static java.lang.String.format;\n+import static java.net.InetAddress.getByName;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.slf4j.Logger;\n+\n+public class DeploymentServerSocket {", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentServerSocket.java b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentServerSocket.java\nindex e92a09ca071..4fa538145f3 100644\n--- a/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentServerSocket.java\n+++ b/tests/deployment-notifier-plugin/src/main/java/org/mule/test/plugin/DeploymentServerSocket.java\n\n@@ -21,6 +21,12 @@ import java.util.ArrayList;\n import java.util.List;\n import org.slf4j.Logger;\n \n+/**\n+ * Deployment Server Socket responsible to answer deployment's client about app and domains\n+ * deployment status\n+ *\n+ * @since 4.0\n+ */\n public class DeploymentServerSocket {\n \n   private static final Logger LOGGER = getLogger(DeploymentServerSocket.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0NTc0Nw==", "url": "https://github.com/mulesoft/mule/pull/9403#discussion_r488045747", "bodyText": "java docs", "author": "fsgonz", "createdAt": "2020-09-14T15:58:28Z", "path": "tests/infrastructure/src/main/java/org/mule/test/infrastructure/client/deployment/DeploymentClient.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.infrastructure.client.deployment;\n+\n+import static java.lang.Boolean.parseBoolean;\n+import static java.lang.String.format;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import org.slf4j.Logger;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.Socket;\n+\n+public class DeploymentClient {", "originalCommit": "74eb0d01a8b952892975af9f6a0e7cb9c5a9afa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "chunk": "diff --git a/tests/infrastructure/src/main/java/org/mule/test/infrastructure/client/deployment/DeploymentClient.java b/tests/infrastructure/src/main/java/org/mule/test/infrastructure/client/deployment/DeploymentClient.java\nindex 380302359c7..1e451fd5a8f 100644\n--- a/tests/infrastructure/src/main/java/org/mule/test/infrastructure/client/deployment/DeploymentClient.java\n+++ b/tests/infrastructure/src/main/java/org/mule/test/infrastructure/client/deployment/DeploymentClient.java\n\n@@ -18,6 +18,11 @@ import java.io.InputStreamReader;\n import java.io.PrintWriter;\n import java.net.Socket;\n \n+/**\n+ * Deployment client to {@link DeploymentServerSocket} server.\n+ *\n+ * @since 4.0\n+ */\n public class DeploymentClient {\n \n   private static final Logger LOGGER = getLogger(DeploymentClient.class);\n"}}, {"oid": "55e0b6aca62d9c028d2988c3051f1da31f911d4b", "url": "https://github.com/mulesoft/mule/commit/55e0b6aca62d9c028d2988c3051f1da31f911d4b", "message": "MULE-18523: Fix ClassloadingTestCase", "committedDate": "2020-09-14T22:56:44Z", "type": "commit"}, {"oid": "b46ab7b5ead484c424a8f5c0cba3bf5a15679fc2", "url": "https://github.com/mulesoft/mule/commit/b46ab7b5ead484c424a8f5c0cba3bf5a15679fc2", "message": "Add deployment-notifier-plugin", "committedDate": "2020-09-14T22:57:17Z", "type": "commit"}, {"oid": "651ed4923aa8474e7eefb83c2309bdb4a2ab255f", "url": "https://github.com/mulesoft/mule/commit/651ed4923aa8474e7eefb83c2309bdb4a2ab255f", "message": "review", "committedDate": "2020-09-14T22:57:20Z", "type": "commit"}, {"oid": "651ed4923aa8474e7eefb83c2309bdb4a2ab255f", "url": "https://github.com/mulesoft/mule/commit/651ed4923aa8474e7eefb83c2309bdb4a2ab255f", "message": "review", "committedDate": "2020-09-14T22:57:20Z", "type": "forcePushed"}]}