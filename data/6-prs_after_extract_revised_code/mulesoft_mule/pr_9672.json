{"pr_number": 9672, "pr_title": "MULE-18926: Decouple ComponentBuildingDefinitionRegistry creation from MuleArtifactContext", "pr_createdAt": "2020-11-04T12:22:46Z", "pr_url": "https://github.com/mulesoft/mule/pull/9672", "timeline": [{"oid": "6d4728893a15b94847c0899226d1f6c16a8c088f", "url": "https://github.com/mulesoft/mule/commit/6d4728893a15b94847c0899226d1f6c16a8c088f", "message": "MULE-18926: Decouple ComponentBuildingDefinitionRegistry creation from MuleArtifactContext", "committedDate": "2020-11-04T11:58:33Z", "type": "commit"}, {"oid": "f7492079d618332f383092f6c666e8796fda026c", "url": "https://github.com/mulesoft/mule/commit/f7492079d618332f383092f6c666e8796fda026c", "message": "minor changes", "committedDate": "2020-11-04T12:20:09Z", "type": "commit"}, {"oid": "fa0d9d05845937bead08498a37bb876352d98470", "url": "https://github.com/mulesoft/mule/commit/fa0d9d05845937bead08498a37bb876352d98470", "message": "fix tests", "committedDate": "2020-11-04T14:01:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDE3Nw==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517540177", "bodyText": "should this be deprecated? are there any remaining usages of this method?", "author": "elrodro83", "createdAt": "2020-11-04T18:15:57Z", "path": "modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/application/DefaultApplicationFactory.java", "diffHunk": "@@ -125,6 +126,12 @@ public ApplicationDescriptor createArtifactDescriptor(File artifactLocation, Opt\n   }\n \n   public Application createArtifact(ApplicationDescriptor descriptor) throws IOException {", "originalCommit": "fa0d9d05845937bead08498a37bb876352d98470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MjI2Mg==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517562262", "bodyText": "the unique consumer is tooling services and should use the new one. So this method can be deprecated", "author": "mlischetti", "createdAt": "2020-11-04T18:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "chunk": "diff --git a/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/application/DefaultApplicationFactory.java b/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/application/DefaultApplicationFactory.java\nindex d0fe39447d3..b11a8e5e7c1 100755\n--- a/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/application/DefaultApplicationFactory.java\n+++ b/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/application/DefaultApplicationFactory.java\n\n@@ -125,10 +126,29 @@ public class DefaultApplicationFactory extends AbstractDeployableArtifactFactory\n     return applicationDescriptorFactory.create(artifactLocation, deploymentProperties);\n   }\n \n+  /**\n+   * Creates an instance of {@link Application}\n+   * \n+   * @param descriptor the artifact descriptor of the artifact.\n+   *                      \n+   * @return the created artifact.\n+   * @throws IOException if there was a problem reading the content of the artifact.\n+   * @deprecated use {@link #createArtifact(ApplicationDescriptor, ComponentBuildingDefinitionRegistryFactory)} instead\n+   */\n+  @Deprecated\n   public Application createArtifact(ApplicationDescriptor descriptor) throws IOException {\n     return createArtifact(descriptor, null);\n   }\n \n+  /**\n+   * Creates an instance of {@link Application}\n+   *\n+   * @param descriptor the artifact descriptor of the artifact.\n+   * @param componentBuildingDefinitionRegistryFactory a factory used to create {@link org.mule.runtime.dsl.api.component.ComponentBuildingDefinitionRegistry} registry. Can be null\n+   * \n+   * @return the created artifact.\n+   * @throws IOException if there was a problem reading the content of the artifact.\n+   */\n   public Application createArtifact(ApplicationDescriptor descriptor,\n                                     ComponentBuildingDefinitionRegistryFactory componentBuildingDefinitionRegistryFactory)\n       throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDY1OQ==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517540659", "bodyText": "missing description", "author": "elrodro83", "createdAt": "2020-11-04T18:16:48Z", "path": "modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/artifact/ArtifactContextBuilder.java", "diffHunk": "@@ -374,6 +376,18 @@ public ArtifactContextBuilder setRuntimeLockFactory(LockFactory runtimeLockFacto\n     return this;\n   }\n \n+  /**\n+   * Allows the usage of {@link ComponentBuildingDefinitionRegistryFactory} to create a {@link org.mule.runtime.dsl.api.component.ComponentBuildingDefinitionRegistry}.\n+   * \n+   * @param componentBuildingDefinitionRegistryFactory the {@link ComponentBuildingDefinitionRegistryFactory} factory\n+   *                                                   used to create a {@link org.mule.runtime.dsl.api.component.ComponentBuildingDefinitionRegistry}\n+   * @return", "originalCommit": "fa0d9d05845937bead08498a37bb876352d98470", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "chunk": "diff --git a/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/artifact/ArtifactContextBuilder.java b/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/artifact/ArtifactContextBuilder.java\nindex 39a117c37a0..219d1fae4ca 100644\n--- a/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/artifact/ArtifactContextBuilder.java\n+++ b/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/artifact/ArtifactContextBuilder.java\n\n@@ -377,7 +378,10 @@ public class ArtifactContextBuilder {\n   }\n \n   /**\n-   * Allows the usage of {@link ComponentBuildingDefinitionRegistryFactory} to create a {@link org.mule.runtime.dsl.api.component.ComponentBuildingDefinitionRegistry}.\n+   * Provides a {@link ComponentBuildingDefinitionRegistryFactory} factory to create a {@link org.mule.runtime.dsl.api.component.ComponentBuildingDefinitionRegistry} registry.\n+   * </p>\n+   * Registry holds all {@link ComponentBuildingDefinition} needed to create componentBuildingDefinitionRegistry {@link org.springframework.beans.factory.config.BeanDefinition} \n+   * that can later be converted to a runtime object that will be part of the artifact.\n    * \n    * @param componentBuildingDefinitionRegistryFactory the {@link ComponentBuildingDefinitionRegistryFactory} factory\n    *                                                   used to create a {@link org.mule.runtime.dsl.api.component.ComponentBuildingDefinitionRegistry}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MTQ1Nw==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517541457", "bodyText": "what's the purpose of this split? where is this new method called?", "author": "elrodro83", "createdAt": "2020-11-04T18:18:21Z", "path": "modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/domain/DefaultDomainFactory.java", "diffHunk": "@@ -134,6 +134,12 @@ public void start(DomainWrapper domainWrapper) {\n \n   @Override\n   protected Domain doCreateArtifact(File domainLocation, Optional<Properties> deploymentProperties) throws IOException {\n+    return createArtifact(domainLocation, deploymentProperties, null);\n+  }\n+\n+  public Domain createArtifact(File domainLocation, Optional<Properties> deploymentProperties,", "originalCommit": "fa0d9d05845937bead08498a37bb876352d98470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU2MDkwMg==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517560902", "bodyText": "this should be used by tooling services", "author": "mlischetti", "createdAt": "2020-11-04T18:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MTQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "eb182d27f0c9ef10f90785048a9836206b0e9dad", "chunk": "diff --git a/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/domain/DefaultDomainFactory.java b/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/domain/DefaultDomainFactory.java\nindex f73e01b7d7d..bf76a647e2b 100644\n--- a/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/domain/DefaultDomainFactory.java\n+++ b/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/domain/DefaultDomainFactory.java\n\n@@ -134,12 +134,6 @@ public class DefaultDomainFactory extends AbstractDeployableArtifactFactory<Doma\n \n   @Override\n   protected Domain doCreateArtifact(File domainLocation, Optional<Properties> deploymentProperties) throws IOException {\n-    return createArtifact(domainLocation, deploymentProperties, null);\n-  }\n-\n-  public Domain createArtifact(File domainLocation, Optional<Properties> deploymentProperties,\n-                               ComponentBuildingDefinitionRegistryFactory componentBuildingDefinitionRegistryFactory)\n-      throws IOException {\n     String domainName = domainLocation.getName();\n     if (domainManager.contains(domainName)) {\n       throw new IllegalArgumentException(format(\"Domain '%s'  already exists\", domainName));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MTg5NA==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517541894", "bodyText": "add a comment explaining why this is needed", "author": "elrodro83", "createdAt": "2020-11-04T18:19:07Z", "path": "modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleCallingOperationsWithinModuleTestCase.java", "diffHunk": "@@ -195,4 +195,9 @@ private CoreEvent runFlowWithContentAndDefaultVariables(String flowName) throws\n         .withVariable(\"secondPart\", SECOND_PART)\n         .run();\n   }\n+\n+  @Override\n+  public boolean mustRegenerateExtensionModels() {", "originalCommit": "fa0d9d05845937bead08498a37bb876352d98470", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "chunk": "diff --git a/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleCallingOperationsWithinModuleTestCase.java b/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleCallingOperationsWithinModuleTestCase.java\nindex 4084ffc0664..7b4bce1995d 100644\n--- a/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleCallingOperationsWithinModuleTestCase.java\n+++ b/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleCallingOperationsWithinModuleTestCase.java\n\n@@ -197,7 +197,9 @@ public class ModuleCallingOperationsWithinModuleTestCase extends AbstractCeXmlEx\n   }\n \n   @Override\n-  public boolean mustRegenerateExtensionModels() {\n-    return true;\n+  public boolean mustRegenerateComponentBuildingDefinitionRegistryFactory() {\n+    // returns true because not same extensions are loaded by all tests. \n+    // returning false will fails while creating application context on some tests. \n+    return false;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MTk3NA==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517541974", "bodyText": "add a comment explaining why this is needed", "author": "elrodro83", "createdAt": "2020-11-04T18:19:16Z", "path": "modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleGlobalElementTestCase.java", "diffHunk": "@@ -87,5 +87,9 @@ private void assertGetClient(String flow) throws Exception {\n     assertThat(client.getPassword(), is(\"notDoe\"));\n   }\n \n+  @Override\n+  public boolean mustRegenerateExtensionModels() {", "originalCommit": "fa0d9d05845937bead08498a37bb876352d98470", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "chunk": "diff --git a/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleGlobalElementTestCase.java b/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleGlobalElementTestCase.java\nindex abde5e57268..0aae447567c 100644\n--- a/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleGlobalElementTestCase.java\n+++ b/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleGlobalElementTestCase.java\n\n@@ -88,7 +88,9 @@ public class ModuleGlobalElementTestCase extends AbstractCeXmlExtensionMuleArtif\n   }\n \n   @Override\n-  public boolean mustRegenerateExtensionModels() {\n+  public boolean mustRegenerateComponentBuildingDefinitionRegistryFactory() {\n+    // returns true because not same extensions are loaded by all tests. \n+    // returning false will fails while creating application context on some tests. \n     return true;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MTk4MA==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517541980", "bodyText": "add a comment explaining why this is needed", "author": "elrodro83", "createdAt": "2020-11-04T18:19:16Z", "path": "modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleSimpleTestCase.java", "diffHunk": "@@ -202,4 +202,9 @@ public void testSetPayloadHardcodedFlowThruSubflowWithNestedElements() throws Ex\n     CoreEvent event = flowRunner(\"testSetPayloadHardcodedFlowThruSubflowWithNestedElements\").run();\n     assertThat(event.getMessage().getPayload().getValue(), is(\"hardcoded value\"));\n   }\n+\n+  @Override\n+  public boolean mustRegenerateExtensionModels() {", "originalCommit": "fa0d9d05845937bead08498a37bb876352d98470", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "chunk": "diff --git a/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleSimpleTestCase.java b/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleSimpleTestCase.java\nindex 0c2ad7e609a..325bb574432 100644\n--- a/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleSimpleTestCase.java\n+++ b/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleSimpleTestCase.java\n\n@@ -204,7 +204,9 @@ public class ModuleSimpleTestCase extends AbstractCeXmlExtensionMuleArtifactFunc\n   }\n \n   @Override\n-  public boolean mustRegenerateExtensionModels() {\n+  public boolean mustRegenerateComponentBuildingDefinitionRegistryFactory() {\n+    // returns true because not same extensions are loaded by all tests. \n+    // returning false will fails while creating application context on some tests. \n     return true;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MjAyNA==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517542024", "bodyText": "add a comment explaining why this is needed", "author": "elrodro83", "createdAt": "2020-11-04T18:19:20Z", "path": "modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleTestConnectionTestCase.java", "diffHunk": "@@ -71,4 +71,9 @@ private void assertConnectionOn(String beanName) throws MuleException {\n     assertThat(connectionValidationResult.isValid(), is(true));\n     connectionProvider.disconnect(connect);\n   }\n+\n+  @Override\n+  public boolean mustRegenerateExtensionModels() {", "originalCommit": "fa0d9d05845937bead08498a37bb876352d98470", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "chunk": "diff --git a/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleTestConnectionTestCase.java b/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleTestConnectionTestCase.java\nindex 45bc27f538b..073be9ef8ad 100644\n--- a/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleTestConnectionTestCase.java\n+++ b/modules/extensions-xml-support/src/test/java/org/mule/test/functional/ModuleTestConnectionTestCase.java\n\n@@ -73,7 +73,9 @@ public class ModuleTestConnectionTestCase extends AbstractCeXmlExtensionMuleArti\n   }\n \n   @Override\n-  public boolean mustRegenerateExtensionModels() {\n+  public boolean mustRegenerateComponentBuildingDefinitionRegistryFactory() {\n+    // returns true because not same extensions are loaded by all tests. \n+    // returning false will fails while creating application context on some tests. \n     return true;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0Mjc4NQ==", "url": "https://github.com/mulesoft/mule/pull/9672#discussion_r517542785", "bodyText": "inline extensions", "author": "elrodro83", "createdAt": "2020-11-04T18:20:36Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -227,21 +207,12 @@ public MuleArtifactContext(MuleContext muleContext, ConfigResource[] artifactCon\n     this.resourceLocator = new DefaultResourceLocator();\n     originalRegistry = ((MuleRegistryHelper) getMuleRegistry()).getDelegate();\n \n-    getRuntimeComponentBuildingDefinitionProvider().getComponentBuildingDefinitions()\n-        .forEach(componentBuildingDefinitionRegistry::register);\n-\n     extensionManager = muleContext.getExtensionManager();\n     final Set<ExtensionModel> extensions = getExtensions();\n-    getExtensionModelsComponentBuildingDefinitions(extensions, DslResolvingContext.getDefault(extensions))\n-        .forEach(componentBuildingDefinitionRegistry::register);\n-\n-    for (ClassLoader pluginArtifactClassLoader : pluginsClassLoaders) {\n-      getArtifactComponentBuildingDefinitions(pluginArtifactClassLoader)\n-          .forEach(componentBuildingDefinitionRegistry::register);\n-    }\n \n     this.beanDefinitionFactory =\n-        new BeanDefinitionFactory(muleContext.getConfiguration().getId(), componentBuildingDefinitionRegistry);\n+        new BeanDefinitionFactory(muleContext.getConfiguration().getId(),\n+                                  componentBuildingDefinitionRegistryFactory.create(extensions));", "originalCommit": "fa0d9d05845937bead08498a37bb876352d98470", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\nindex 2e09dc55f84..1c074727652 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\n\n@@ -208,11 +208,10 @@ public class MuleArtifactContext extends AbstractRefreshableConfigApplicationCon\n     originalRegistry = ((MuleRegistryHelper) getMuleRegistry()).getDelegate();\n \n     extensionManager = muleContext.getExtensionManager();\n-    final Set<ExtensionModel> extensions = getExtensions();\n \n     this.beanDefinitionFactory =\n         new BeanDefinitionFactory(muleContext.getConfiguration().getId(),\n-                                  componentBuildingDefinitionRegistryFactory.create(extensions));\n+                                  componentBuildingDefinitionRegistryFactory.create(getExtensions()));\n \n     this.applicationModel = createApplicationModel();\n   }\n"}}, {"oid": "0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "url": "https://github.com/mulesoft/mule/commit/0b15a6cfa9010e2d9946a2a2bcb2f1e73a96e9b2", "message": "review", "committedDate": "2020-11-04T20:00:37Z", "type": "commit"}, {"oid": "29352a24e1cf0fb737f2356b6993a691f3ad529f", "url": "https://github.com/mulesoft/mule/commit/29352a24e1cf0fb737f2356b6993a691f3ad529f", "message": "review", "committedDate": "2020-11-05T14:01:24Z", "type": "commit"}, {"oid": "eb182d27f0c9ef10f90785048a9836206b0e9dad", "url": "https://github.com/mulesoft/mule/commit/eb182d27f0c9ef10f90785048a9836206b0e9dad", "message": "changes\n\n(cherry picked from commit 718f38bb9b20cf0d902b6a7c1efdb8c734712933)", "committedDate": "2020-11-06T17:06:00Z", "type": "commit"}, {"oid": "629b4e7d7c3fd1284a2ceebb03dbd1a666ae2514", "url": "https://github.com/mulesoft/mule/commit/629b4e7d7c3fd1284a2ceebb03dbd1a666ae2514", "message": "more changes", "committedDate": "2020-11-06T17:13:43Z", "type": "commit"}]}