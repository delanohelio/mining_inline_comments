{"pr_number": 8635, "pr_title": "MULE-18019-FIX: Fix reconnection for Paged Operations on the first call to getPage", "pr_createdAt": "2020-02-06T21:14:33Z", "pr_url": "https://github.com/mulesoft/mule/pull/8635", "timeline": [{"oid": "a9388d94b57424fb506e6ba1bab474e8a9bbb338", "url": "https://github.com/mulesoft/mule/commit/a9388d94b57424fb506e6ba1bab474e8a9bbb338", "message": "fix", "committedDate": "2020-02-06T21:11:45Z", "type": "commit"}, {"oid": "d0570adf0ca90bc892a223bcfeb61eb33cd9cccc", "url": "https://github.com/mulesoft/mule/commit/d0570adf0ca90bc892a223bcfeb61eb33cd9cccc", "message": "quite close", "committedDate": "2020-02-06T22:05:13Z", "type": "commit"}, {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e", "url": "https://github.com/mulesoft/mule/commit/f025f66b1dc381a51ca825b22f5741c3231be10e", "message": "imports", "committedDate": "2020-02-06T22:06:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMTExMg==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376411112", "bodyText": "rename to actualConnectionSupplier or some other name that better reveals the intent", "author": "marianogonzalez", "createdAt": "2020-02-07T14:15:42Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -37,26 +39,29 @@\n  */\n public final class PagingProviderProducer<T> implements Producer<List<T>> {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PagingProviderProducer.class);\n+\n   public static final String COULD_NOT_OBTAIN_A_CONNECTION = \"Could not obtain a connection for the configuration\";\n   public static final String COULD_NOT_CREATE_A_CONNECTION_SUPPLIER =\n       \"Could not obtain a connection supplier for the configuration\";\n   public static final String COULD_NOT_CLOSE_PAGING_PROVIDER = \"Could not close the Paging Provider\";\n   public static final String COULD_NOT_EXECUTE = \"Could not execute operation with connection\";\n   private PagingProvider<Object, T> delegate;\n   private final ConfigurationInstance config;\n-  private final ExtensionConnectionSupplier connectionSupplier;\n+  private final ExtensionConnectionSupplier extensionConnectionSupplier;\n   private final ExecutionContextAdapter executionContext;\n   private final ConnectionSupplierFactory connectionSupplierFactory;\n+  private ConnectionSupplier connectionSupplier;", "originalCommit": "f025f66b1dc381a51ca825b22f5741c3231be10e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98083fccca343d41edd890d444c97a459c11c853", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex 5b76b8676d4..15f37a572d8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -44,14 +45,12 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n   public static final String COULD_NOT_OBTAIN_A_CONNECTION = \"Could not obtain a connection for the configuration\";\n   public static final String COULD_NOT_CREATE_A_CONNECTION_SUPPLIER =\n       \"Could not obtain a connection supplier for the configuration\";\n-  public static final String COULD_NOT_CLOSE_PAGING_PROVIDER = \"Could not close the Paging Provider\";\n-  public static final String COULD_NOT_EXECUTE = \"Could not execute operation with connection\";\n   private PagingProvider<Object, T> delegate;\n   private final ConfigurationInstance config;\n   private final ExtensionConnectionSupplier extensionConnectionSupplier;\n   private final ExecutionContextAdapter executionContext;\n   private final ConnectionSupplierFactory connectionSupplierFactory;\n-  private ConnectionSupplier connectionSupplier;\n+  private ConnectionSupplier actualConnectionSupplier;\n   private Boolean isFirstPage = true;\n \n   public PagingProviderProducer(PagingProvider<Object, T> delegate,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjkyMA==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376412920", "bodyText": "still not fixed. If this fails, the original exception get swallowed", "author": "marianogonzalez", "createdAt": "2020-02-07T14:19:02Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());", "originalCommit": "f025f66b1dc381a51ca825b22f5741c3231be10e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98083fccca343d41edd890d444c97a459c11c853", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex 5b76b8676d4..15f37a572d8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -92,18 +91,18 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    connectionSupplier = getConnectionSupplier();\n-    Object connection = getConnection(connectionSupplier);\n+    actualConnectionSupplier = getActualConnectionSupplier();\n+    Object connection = getConnection(actualConnectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n+      actualConnectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        silentlyCloseDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));\n       }\n-      extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw e;\n+      extractConnectionException(exception).ifPresent(ex -> actualConnectionSupplier.invalidateConnection());\n+      throw exception;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzI1Ng==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376413256", "bodyText": "use org.mule.runtime.core.internal.util.FunctionalUtils#safely(T, org.mule.runtime.core.api.util.func.CheckedConsumer<T>, java.util.function.Consumer<java.lang.Exception>) instead", "author": "marianogonzalez", "createdAt": "2020-02-07T14:19:36Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);", "originalCommit": "f025f66b1dc381a51ca825b22f5741c3231be10e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98083fccca343d41edd890d444c97a459c11c853", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex 5b76b8676d4..15f37a572d8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -92,18 +91,18 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    connectionSupplier = getConnectionSupplier();\n-    Object connection = getConnection(connectionSupplier);\n+    actualConnectionSupplier = getActualConnectionSupplier();\n+    Object connection = getConnection(actualConnectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n+      actualConnectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        silentlyCloseDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));\n       }\n-      extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw e;\n+      extractConnectionException(exception).ifPresent(ex -> actualConnectionSupplier.invalidateConnection());\n+      throw exception;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzQ4Ng==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376413486", "bodyText": "safely()", "author": "marianogonzalez", "createdAt": "2020-02-07T14:20:03Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      throw e;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {\n+      connectionSupplier.close();", "originalCommit": "f025f66b1dc381a51ca825b22f5741c3231be10e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyODYwMA==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376428600", "bodyText": "see comment above", "author": "SebaElizalde", "createdAt": "2020-02-07T14:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "98083fccca343d41edd890d444c97a459c11c853", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex 5b76b8676d4..15f37a572d8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -92,18 +91,18 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    connectionSupplier = getConnectionSupplier();\n-    Object connection = getConnection(connectionSupplier);\n+    actualConnectionSupplier = getActualConnectionSupplier();\n+    Object connection = getConnection(actualConnectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n+      actualConnectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        silentlyCloseDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));\n       }\n-      extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw e;\n+      extractConnectionException(exception).ifPresent(ex -> actualConnectionSupplier.invalidateConnection());\n+      throw exception;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzcxNg==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376413716", "bodyText": "log any potential failures in this block, and continue", "author": "marianogonzalez", "createdAt": "2020-02-07T14:20:29Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      throw e;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {", "originalCommit": "f025f66b1dc381a51ca825b22f5741c3231be10e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNzY4Mg==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376427682", "bodyText": "public void close() throws IOException {\n    ConnectionSupplier connectionSupplier = null;\n    try {\n      connectionSupplier = connectionSupplierFactory.getConnectionSupplier();\n      delegate.close(connectionSupplier.getConnection());\n    } catch (Exception e) {\n      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n    } finally {\n      if (connectionSupplier != null) {\n        connectionSupplier.close();\n      }\n      connectionSupplierFactory.dispose();\n    }\n}\n\nThat was the original code, before the other PR. Logging failures would be breaking backwards, right?", "author": "SebaElizalde", "createdAt": "2020-02-07T14:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwNTI3OA==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376505278", "bodyText": "ok, yes. You're right", "author": "marianogonzalez", "createdAt": "2020-02-07T17:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "98083fccca343d41edd890d444c97a459c11c853", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex 5b76b8676d4..15f37a572d8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -92,18 +91,18 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    connectionSupplier = getConnectionSupplier();\n-    Object connection = getConnection(connectionSupplier);\n+    actualConnectionSupplier = getActualConnectionSupplier();\n+    Object connection = getConnection(actualConnectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n+      actualConnectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        silentlyCloseDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));\n       }\n-      extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw e;\n+      extractConnectionException(exception).ifPresent(ex -> actualConnectionSupplier.invalidateConnection());\n+      throw exception;\n     }\n   }\n \n"}}, {"oid": "98083fccca343d41edd890d444c97a459c11c853", "url": "https://github.com/mulesoft/mule/commit/98083fccca343d41edd890d444c97a459c11c853", "message": "asd", "committedDate": "2020-02-07T21:56:42Z", "type": "commit"}, {"oid": "1b26975e27145ebb81e75e049987e9e9e9a43392", "url": "https://github.com/mulesoft/mule/commit/1b26975e27145ebb81e75e049987e9e9e9a43392", "message": "added test cases for tx", "committedDate": "2020-02-10T14:35:42Z", "type": "commit"}, {"oid": "4307071459c9ac728fc09b2c37f07c1886bd40ea", "url": "https://github.com/mulesoft/mule/commit/4307071459c9ac728fc09b2c37f07c1886bd40ea", "message": "fixes", "committedDate": "2020-02-10T14:56:40Z", "type": "commit"}, {"oid": "2dd0681140b39bc051db5d7ba878d502795c1dee", "url": "https://github.com/mulesoft/mule/commit/2dd0681140b39bc051db5d7ba878d502795c1dee", "message": "null check", "committedDate": "2020-02-10T16:07:49Z", "type": "commit"}, {"oid": "9a9fe60377de668b2b9a1a590d951b3e85ebb987", "url": "https://github.com/mulesoft/mule/commit/9a9fe60377de668b2b9a1a590d951b3e85ebb987", "message": "syntax sugar changes", "committedDate": "2020-02-10T16:51:25Z", "type": "commit"}, {"oid": "d6ba9068e06dfc6e7af2e1ba19a20de37e0888e4", "url": "https://github.com/mulesoft/mule/commit/d6ba9068e06dfc6e7af2e1ba19a20de37e0888e4", "message": "static imports", "committedDate": "2020-02-10T18:53:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4NDgwNw==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377284807", "bodyText": "what you're closing thing is not a buffer", "author": "marianogonzalez", "createdAt": "2020-02-10T19:59:29Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +91,37 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    Object connection = getConnection(connectionSupplier);\n+    actualConnectionSupplier = getActualConnectionSupplier();\n+    Object connection = getConnection(actualConnectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n+      actualConnectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));", "originalCommit": "d6ba9068e06dfc6e7af2e1ba19a20de37e0888e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2be460e2cd82c216fc992f2c2ac4050f2be4d86c", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex a187790ca8c..8f98dfe46d1 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -99,7 +99,7 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n       return result;\n     } catch (Exception exception) {\n       if (isFirstPage) {\n-        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing paging provider\", e));\n       }\n       extractConnectionException(exception).ifPresent(ex -> actualConnectionSupplier.invalidateConnection());\n       throw exception;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4NTM3NQ==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377285375", "bodyText": "if there's no actual connection supplier then do nothing. You're opening a connection for the sole purpose of closing it", "author": "marianogonzalez", "createdAt": "2020-02-10T20:00:40Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +91,37 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    Object connection = getConnection(connectionSupplier);\n+    actualConnectionSupplier = getActualConnectionSupplier();\n+    Object connection = getConnection(actualConnectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n+      actualConnectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));\n       }\n-      extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      extractConnectionException(exception).ifPresent(ex -> actualConnectionSupplier.invalidateConnection());\n+      throw exception;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      if (actualConnectionSupplier == null) {", "originalCommit": "d6ba9068e06dfc6e7af2e1ba19a20de37e0888e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2be460e2cd82c216fc992f2c2ac4050f2be4d86c", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex a187790ca8c..8f98dfe46d1 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -99,7 +99,7 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n       return result;\n     } catch (Exception exception) {\n       if (isFirstPage) {\n-        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing paging provider\", e));\n       }\n       extractConnectionException(exception).ifPresent(ex -> actualConnectionSupplier.invalidateConnection());\n       throw exception;\n"}}, {"oid": "2be460e2cd82c216fc992f2c2ac4050f2be4d86c", "url": "https://github.com/mulesoft/mule/commit/2be460e2cd82c216fc992f2c2ac4050f2be4d86c", "message": "reversed closing changes", "committedDate": "2020-02-11T15:45:31Z", "type": "commit"}, {"oid": "4d1d92b1705bd989a6040a20e720d57089d632ed", "url": "https://github.com/mulesoft/mule/commit/4d1d92b1705bd989a6040a20e720d57089d632ed", "message": "asd", "committedDate": "2020-02-11T18:05:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTY4Ng==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377811686", "bodyText": "We are closing the connectionSupplier here, so no need to save it in a variable and close it later on the close() method.", "author": "SebaElizalde", "createdAt": "2020-02-11T18:18:13Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -93,24 +96,32 @@ public int getSize() {\n       R result = function.apply(connection);\n       connectionSupplier.close();", "originalCommit": "4d1d92b1705bd989a6040a20e720d57089d632ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5OTkxNw==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377899917", "bodyText": "finally", "author": "marianogonzalez", "createdAt": "2020-02-11T21:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "70eaf4d482b99f14677d2e38d69c9051d65c0226", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex 38544aabf4d..a94bcc8de5b 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -94,7 +94,6 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n       return result;\n     } catch (Exception exception) {\n       if (isFirstPage) {\n"}}, {"oid": "6c21fa02e801c8c11435cf7e110eea5ec97c0927", "url": "https://github.com/mulesoft/mule/commit/6c21fa02e801c8c11435cf7e110eea5ec97c0927", "message": "Merge remote-tracking branch 'origin/mule-4.2.x' into MULE-18019-FIX", "committedDate": "2020-02-11T18:23:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5OTc2OA==", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377899768", "bodyText": "safely", "author": "marianogonzalez", "createdAt": "2020-02-11T21:09:36Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -93,24 +96,32 @@ public int getSize() {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing paging provider\", e));\n       }\n-      extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      extractConnectionException(exception).ifPresent(ex -> connectionSupplier.invalidateConnection());\n+      throw exception;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    ConnectionSupplier connectionSupplier = null;\n+    try {\n+      connectionSupplier = connectionSupplierFactory.getConnectionSupplier();\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {\n+      if (connectionSupplier != null) {\n+        connectionSupplier.close();", "originalCommit": "4d1d92b1705bd989a6040a20e720d57089d632ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70eaf4d482b99f14677d2e38d69c9051d65c0226", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\nindex 38544aabf4d..a94bcc8de5b 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java\n\n@@ -94,7 +94,6 @@ public final class PagingProviderProducer<T> implements Producer<List<T>> {\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n       return result;\n     } catch (Exception exception) {\n       if (isFirstPage) {\n"}}, {"oid": "70eaf4d482b99f14677d2e38d69c9051d65c0226", "url": "https://github.com/mulesoft/mule/commit/70eaf4d482b99f14677d2e38d69c9051d65c0226", "message": "pr changes", "committedDate": "2020-02-12T14:41:49Z", "type": "commit"}, {"oid": "4e59477b29d280ad262a9b58580e39d80ec79731", "url": "https://github.com/mulesoft/mule/commit/4e59477b29d280ad262a9b58580e39d80ec79731", "message": "name change", "committedDate": "2020-02-12T15:12:19Z", "type": "commit"}]}