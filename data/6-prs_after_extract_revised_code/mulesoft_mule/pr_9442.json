{"pr_number": 9442, "pr_title": "MULE-18566: Migrate test:life-cycle-* components so that they use an SDK extension", "pr_createdAt": "2020-09-18T20:26:54Z", "pr_url": "https://github.com/mulesoft/mule/pull/9442", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDc3OA==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491174778", "bodyText": "add javadocs", "author": "elrodro83", "createdAt": "2020-09-18T20:28:03Z", "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTracker.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.mule.tests.api;\n+\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.core.api.context.MuleContextAware;\n+\n+import java.util.List;\n+\n+public interface LifecycleTracker extends Initialisable, Disposable, MuleContextAware {", "originalCommit": "e597149279f41e12b32b58bac9e012a5bb827935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMDUyOA==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491200528", "bodyText": "Added for this interface and the base class. Do you think it's needed somewhere else?", "author": "eze210", "createdAt": "2020-09-18T21:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "chunk": "diff --git a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTracker.java b/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTracker.java\ndeleted file mode 100644\nindex d7ba79bb24f..00000000000\n--- a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTracker.java\n+++ /dev/null\n\n@@ -1,12 +0,0 @@\n-package org.mule.tests.api;\n-\n-import org.mule.runtime.api.lifecycle.Disposable;\n-import org.mule.runtime.api.lifecycle.Initialisable;\n-import org.mule.runtime.core.api.context.MuleContextAware;\n-\n-import java.util.List;\n-\n-public interface LifecycleTracker extends Initialisable, Disposable, MuleContextAware {\n-    \n-    List<String> getCalledPhases();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTA2NA==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491175064", "bodyText": "is the formatter being applied here?", "author": "elrodro83", "createdAt": "2020-09-18T20:28:42Z", "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerConfiguration.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api;\n+\n+import org.mule.runtime.api.component.Component;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.annotation.Configuration;\n+import org.mule.runtime.extension.api.annotation.Operations;\n+import org.mule.runtime.extension.api.annotation.param.RefName;\n+import org.mule.runtime.extension.api.annotation.Sources;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+import org.mule.tests.internal.LifecycleTrackerOperations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Configuration(name = \"lifecycleTrackerConfig\")\n+@Operations({LifecycleTrackerOperations.class})\n+@Sources(LifecycleTrackerSource.class)\n+public class LifecycleTrackerConfiguration extends BaseLifecycleTracker {", "originalCommit": "e597149279f41e12b32b58bac9e012a5bb827935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4NDc5NQ==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491184795", "bodyText": "Now it is", "author": "eze210", "createdAt": "2020-09-18T20:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTA2NA=="}], "type": "inlineReview", "revised_code": {"commit": "668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "chunk": "diff --git a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerConfiguration.java b/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerConfiguration.java\ndeleted file mode 100644\nindex b8c88a148bb..00000000000\n--- a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerConfiguration.java\n+++ /dev/null\n\n@@ -1,48 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.tests.api;\n-\n-import org.mule.runtime.api.component.Component;\n-import org.mule.runtime.api.lifecycle.InitialisationException;\n-import org.mule.runtime.core.api.MuleContext;\n-import org.mule.runtime.extension.api.annotation.Configuration;\n-import org.mule.runtime.extension.api.annotation.Operations;\n-import org.mule.runtime.extension.api.annotation.param.RefName;\n-import org.mule.runtime.extension.api.annotation.Sources;\n-import org.mule.tests.internal.BaseLifecycleTracker;\n-import org.mule.tests.internal.LifecycleTrackerOperations;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@Configuration(name = \"lifecycleTrackerConfig\")\n-@Operations({LifecycleTrackerOperations.class})\n-@Sources(LifecycleTrackerSource.class)\n-public class LifecycleTrackerConfiguration extends BaseLifecycleTracker {\n-\n-    @RefName\n-    private String configName;\n-\n-    private final List<Component> nested = new ArrayList<>();\n-\n-    public LifecycleTrackerConfiguration() {\n-        super(false);\n-    }\n-\n-    public List<Component> getNested() {\n-        return new ArrayList<>(nested);\n-    }\n-\n-    public void setNested(List<Component> nested) {\n-        this.nested.addAll(nested);\n-    }\n-\n-    @Override\n-    protected void onInit(MuleContext muleContext) throws InitialisationException {\n-        addTrackingDataToRegistry(configName);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NjE2OQ==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491176169", "bodyText": "why use String.contains here? aren't the operation names a short list already?", "author": "elrodro83", "createdAt": "2020-09-18T20:31:11Z", "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api;\n+\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n+import static org.slf4j.LoggerFactory.getLogger;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.meta.model.ComponentModel;\n+import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n+import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+\n+public class LifecycleTrackerEnricher implements DeclarationEnricher {\n+\n+    @Override\n+    public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n+        extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n+            if (operation.getName().contains(\"lifecycleTracker\")) {", "originalCommit": "e597149279f41e12b32b58bac9e012a5bb827935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMDI2MQ==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491200261", "bodyText": "Because the enricher is called for the whole extension. Added comment to clarify this", "author": "eze210", "createdAt": "2020-09-18T21:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NjE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "chunk": "diff --git a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java b/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\nindex a7416b8b50f..8e5bf33f289 100644\n--- a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\n+++ b/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\n\n@@ -6,88 +6,33 @@\n  */\n package org.mule.tests.api;\n \n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n-import static org.slf4j.LoggerFactory.getLogger;\n-import org.mule.runtime.api.exception.MuleException;\n-import org.mule.runtime.api.lifecycle.InitialisationException;\n-import org.mule.runtime.api.meta.model.ComponentModel;\n-import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n-import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.api.meta.model.operation.OperationModel;\n import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n-import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n-import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ComponentExecutor;\n import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n-import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n-import org.mule.tests.internal.BaseLifecycleTracker;\n+import org.mule.runtime.module.extension.api.loader.java.property.ComponentExecutorModelProperty;\n \n-import java.util.Optional;\n-\n-import org.slf4j.Logger;\n+import org.reactivestreams.Publisher;\n \n public class LifecycleTrackerEnricher implements DeclarationEnricher {\n \n     @Override\n     public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n         extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n-            if (operation.getName().contains(\"lifecycleTracker\")) {\n-                boolean shouldCheckPhase = operation.getName().contains(\"Check\");\n-                CompletableComponentExecutorFactory executorFactory = getExecutorFactory(operation, shouldCheckPhase);\n-                operation.addModelProperty(new CompletableComponentExecutorModelProperty(executorFactory));\n+            if (operation.getName().equals(\"check\")) {\n+                operation.addModelProperty(new ComponentExecutorModelProperty((componentModel, map) -> {\n+                    return new LifecycleTrackerComponentExecutor();\n+                }));\n             }\n         });\n     }\n \n-    private CompletableComponentExecutorFactory getExecutorFactory(OperationDeclaration operation, boolean shouldCheckPhase) {\n-        Optional<CompletableComponentExecutorModelProperty> executorModelProperty = operation.getModelProperty(CompletableComponentExecutorModelProperty.class);\n-        CompletableComponentExecutorFactory<ComponentModel> oldFactory = executorModelProperty.map(CompletableComponentExecutorModelProperty::getExecutorFactory).orElse(null);\n-        return (componentModel, map) -> {\n-            CompletableComponentExecutor<ComponentModel> delegateExecutor = null;\n-            if (oldFactory != null) {\n-                delegateExecutor = oldFactory.createExecutor(componentModel, map);\n-            }\n-            return new LifecycleTrackerComponentExecutorDecorator(delegateExecutor, shouldCheckPhase);\n-        };\n-    }\n-\n-    private static class LifecycleTrackerComponentExecutorDecorator extends BaseLifecycleTracker implements CompletableComponentExecutor<ComponentModel> {\n-\n-        private static final Logger LOGGER = getLogger(LifecycleTrackerComponentExecutorDecorator.class);\n-\n-        private final CompletableComponentExecutor<ComponentModel> delegate;\n-\n-        LifecycleTrackerComponentExecutorDecorator(CompletableComponentExecutor<ComponentModel> delegate, boolean shouldCheck) {\n-            super(shouldCheck);\n-            this.delegate = delegate;\n-        }\n-\n-        @Override\n-        public void execute(ExecutionContext<ComponentModel> executionContext, ExecutorCallback executorCallback) {\n-            addTrackingDataToRegistry(executionContext.getParameter(\"name\"));\n-            delegate.execute(executionContext, executorCallback);\n-        }\n-\n-        @Override\n-        protected void onInit(MuleContext muleContext) throws InitialisationException {\n-            initialiseIfNeeded(delegate, muleContext);\n-        }\n-\n-        @Override\n-        protected void onStart() throws MuleException {\n-            startIfNeeded(delegate);\n-        }\n-\n-        @Override\n-        protected void onStop() throws MuleException {\n-            stopIfNeeded(delegate);\n-        }\n+    private static class LifecycleTrackerComponentExecutor implements ComponentExecutor<OperationModel> {\n \n         @Override\n-        protected void onDispose() {\n-            disposeIfNeeded(delegate, LOGGER);\n+        public Publisher<Object> execute(ExecutionContext<OperationModel> executionContext) {\n+            return null;                               \n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NjIyNA==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491176224", "bodyText": "same as above", "author": "elrodro83", "createdAt": "2020-09-18T20:31:19Z", "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api;\n+\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n+import static org.slf4j.LoggerFactory.getLogger;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.meta.model.ComponentModel;\n+import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n+import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+\n+public class LifecycleTrackerEnricher implements DeclarationEnricher {\n+\n+    @Override\n+    public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n+        extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n+            if (operation.getName().contains(\"lifecycleTracker\")) {\n+                boolean shouldCheckPhase = operation.getName().contains(\"Check\");", "originalCommit": "e597149279f41e12b32b58bac9e012a5bb827935", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "chunk": "diff --git a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java b/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\nindex a7416b8b50f..8e5bf33f289 100644\n--- a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\n+++ b/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\n\n@@ -6,88 +6,33 @@\n  */\n package org.mule.tests.api;\n \n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n-import static org.slf4j.LoggerFactory.getLogger;\n-import org.mule.runtime.api.exception.MuleException;\n-import org.mule.runtime.api.lifecycle.InitialisationException;\n-import org.mule.runtime.api.meta.model.ComponentModel;\n-import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n-import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.api.meta.model.operation.OperationModel;\n import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n-import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n-import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ComponentExecutor;\n import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n-import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n-import org.mule.tests.internal.BaseLifecycleTracker;\n+import org.mule.runtime.module.extension.api.loader.java.property.ComponentExecutorModelProperty;\n \n-import java.util.Optional;\n-\n-import org.slf4j.Logger;\n+import org.reactivestreams.Publisher;\n \n public class LifecycleTrackerEnricher implements DeclarationEnricher {\n \n     @Override\n     public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n         extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n-            if (operation.getName().contains(\"lifecycleTracker\")) {\n-                boolean shouldCheckPhase = operation.getName().contains(\"Check\");\n-                CompletableComponentExecutorFactory executorFactory = getExecutorFactory(operation, shouldCheckPhase);\n-                operation.addModelProperty(new CompletableComponentExecutorModelProperty(executorFactory));\n+            if (operation.getName().equals(\"check\")) {\n+                operation.addModelProperty(new ComponentExecutorModelProperty((componentModel, map) -> {\n+                    return new LifecycleTrackerComponentExecutor();\n+                }));\n             }\n         });\n     }\n \n-    private CompletableComponentExecutorFactory getExecutorFactory(OperationDeclaration operation, boolean shouldCheckPhase) {\n-        Optional<CompletableComponentExecutorModelProperty> executorModelProperty = operation.getModelProperty(CompletableComponentExecutorModelProperty.class);\n-        CompletableComponentExecutorFactory<ComponentModel> oldFactory = executorModelProperty.map(CompletableComponentExecutorModelProperty::getExecutorFactory).orElse(null);\n-        return (componentModel, map) -> {\n-            CompletableComponentExecutor<ComponentModel> delegateExecutor = null;\n-            if (oldFactory != null) {\n-                delegateExecutor = oldFactory.createExecutor(componentModel, map);\n-            }\n-            return new LifecycleTrackerComponentExecutorDecorator(delegateExecutor, shouldCheckPhase);\n-        };\n-    }\n-\n-    private static class LifecycleTrackerComponentExecutorDecorator extends BaseLifecycleTracker implements CompletableComponentExecutor<ComponentModel> {\n-\n-        private static final Logger LOGGER = getLogger(LifecycleTrackerComponentExecutorDecorator.class);\n-\n-        private final CompletableComponentExecutor<ComponentModel> delegate;\n-\n-        LifecycleTrackerComponentExecutorDecorator(CompletableComponentExecutor<ComponentModel> delegate, boolean shouldCheck) {\n-            super(shouldCheck);\n-            this.delegate = delegate;\n-        }\n-\n-        @Override\n-        public void execute(ExecutionContext<ComponentModel> executionContext, ExecutorCallback executorCallback) {\n-            addTrackingDataToRegistry(executionContext.getParameter(\"name\"));\n-            delegate.execute(executionContext, executorCallback);\n-        }\n-\n-        @Override\n-        protected void onInit(MuleContext muleContext) throws InitialisationException {\n-            initialiseIfNeeded(delegate, muleContext);\n-        }\n-\n-        @Override\n-        protected void onStart() throws MuleException {\n-            startIfNeeded(delegate);\n-        }\n-\n-        @Override\n-        protected void onStop() throws MuleException {\n-            stopIfNeeded(delegate);\n-        }\n+    private static class LifecycleTrackerComponentExecutor implements ComponentExecutor<OperationModel> {\n \n         @Override\n-        protected void onDispose() {\n-            disposeIfNeeded(delegate, LOGGER);\n+        public Publisher<Object> execute(ExecutionContext<OperationModel> executionContext) {\n+            return null;                               \n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3Njk3Nw==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491176977", "bodyText": "this oldFactory comes from an Optional already, use map/orElse here instead of if", "author": "elrodro83", "createdAt": "2020-09-18T20:33:00Z", "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api;\n+\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n+import static org.slf4j.LoggerFactory.getLogger;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.meta.model.ComponentModel;\n+import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n+import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+\n+public class LifecycleTrackerEnricher implements DeclarationEnricher {\n+\n+    @Override\n+    public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n+        extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n+            if (operation.getName().contains(\"lifecycleTracker\")) {\n+                boolean shouldCheckPhase = operation.getName().contains(\"Check\");\n+                CompletableComponentExecutorFactory executorFactory = getExecutorFactory(operation, shouldCheckPhase);\n+                operation.addModelProperty(new CompletableComponentExecutorModelProperty(executorFactory));\n+            }\n+        });\n+    }\n+\n+    private CompletableComponentExecutorFactory getExecutorFactory(OperationDeclaration operation, boolean shouldCheckPhase) {\n+        Optional<CompletableComponentExecutorModelProperty> executorModelProperty = operation.getModelProperty(CompletableComponentExecutorModelProperty.class);\n+        CompletableComponentExecutorFactory<ComponentModel> oldFactory = executorModelProperty.map(CompletableComponentExecutorModelProperty::getExecutorFactory).orElse(null);\n+        return (componentModel, map) -> {\n+            CompletableComponentExecutor<ComponentModel> delegateExecutor = null;\n+            if (oldFactory != null) {", "originalCommit": "e597149279f41e12b32b58bac9e012a5bb827935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMDM1OQ==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491200359", "bodyText": "done", "author": "eze210", "createdAt": "2020-09-18T21:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3Njk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "chunk": "diff --git a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java b/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\nindex a7416b8b50f..8e5bf33f289 100644\n--- a/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\n+++ b/tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java\n\n@@ -6,88 +6,33 @@\n  */\n package org.mule.tests.api;\n \n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n-import static org.slf4j.LoggerFactory.getLogger;\n-import org.mule.runtime.api.exception.MuleException;\n-import org.mule.runtime.api.lifecycle.InitialisationException;\n-import org.mule.runtime.api.meta.model.ComponentModel;\n-import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n-import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.api.meta.model.operation.OperationModel;\n import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n-import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n-import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ComponentExecutor;\n import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n-import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n-import org.mule.tests.internal.BaseLifecycleTracker;\n+import org.mule.runtime.module.extension.api.loader.java.property.ComponentExecutorModelProperty;\n \n-import java.util.Optional;\n-\n-import org.slf4j.Logger;\n+import org.reactivestreams.Publisher;\n \n public class LifecycleTrackerEnricher implements DeclarationEnricher {\n \n     @Override\n     public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n         extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n-            if (operation.getName().contains(\"lifecycleTracker\")) {\n-                boolean shouldCheckPhase = operation.getName().contains(\"Check\");\n-                CompletableComponentExecutorFactory executorFactory = getExecutorFactory(operation, shouldCheckPhase);\n-                operation.addModelProperty(new CompletableComponentExecutorModelProperty(executorFactory));\n+            if (operation.getName().equals(\"check\")) {\n+                operation.addModelProperty(new ComponentExecutorModelProperty((componentModel, map) -> {\n+                    return new LifecycleTrackerComponentExecutor();\n+                }));\n             }\n         });\n     }\n \n-    private CompletableComponentExecutorFactory getExecutorFactory(OperationDeclaration operation, boolean shouldCheckPhase) {\n-        Optional<CompletableComponentExecutorModelProperty> executorModelProperty = operation.getModelProperty(CompletableComponentExecutorModelProperty.class);\n-        CompletableComponentExecutorFactory<ComponentModel> oldFactory = executorModelProperty.map(CompletableComponentExecutorModelProperty::getExecutorFactory).orElse(null);\n-        return (componentModel, map) -> {\n-            CompletableComponentExecutor<ComponentModel> delegateExecutor = null;\n-            if (oldFactory != null) {\n-                delegateExecutor = oldFactory.createExecutor(componentModel, map);\n-            }\n-            return new LifecycleTrackerComponentExecutorDecorator(delegateExecutor, shouldCheckPhase);\n-        };\n-    }\n-\n-    private static class LifecycleTrackerComponentExecutorDecorator extends BaseLifecycleTracker implements CompletableComponentExecutor<ComponentModel> {\n-\n-        private static final Logger LOGGER = getLogger(LifecycleTrackerComponentExecutorDecorator.class);\n-\n-        private final CompletableComponentExecutor<ComponentModel> delegate;\n-\n-        LifecycleTrackerComponentExecutorDecorator(CompletableComponentExecutor<ComponentModel> delegate, boolean shouldCheck) {\n-            super(shouldCheck);\n-            this.delegate = delegate;\n-        }\n-\n-        @Override\n-        public void execute(ExecutionContext<ComponentModel> executionContext, ExecutorCallback executorCallback) {\n-            addTrackingDataToRegistry(executionContext.getParameter(\"name\"));\n-            delegate.execute(executionContext, executorCallback);\n-        }\n-\n-        @Override\n-        protected void onInit(MuleContext muleContext) throws InitialisationException {\n-            initialiseIfNeeded(delegate, muleContext);\n-        }\n-\n-        @Override\n-        protected void onStart() throws MuleException {\n-            startIfNeeded(delegate);\n-        }\n-\n-        @Override\n-        protected void onStop() throws MuleException {\n-            stopIfNeeded(delegate);\n-        }\n+    private static class LifecycleTrackerComponentExecutor implements ComponentExecutor<OperationModel> {\n \n         @Override\n-        protected void onDispose() {\n-            disposeIfNeeded(delegate, LOGGER);\n+        public Publisher<Object> execute(ExecutionContext<OperationModel> executionContext) {\n+            return null;                               \n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NzY1OQ==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491177659", "bodyText": "remove empty lines", "author": "elrodro83", "createdAt": "2020-09-18T20:34:40Z", "path": "tests/test-components/src/main/java/org/mule/tests/api/pojos/LifecycleObject.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api.pojos;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.annotation.dsl.xml.TypeDsl;\n+import org.mule.runtime.extension.api.annotation.param.Optional;\n+import org.mule.runtime.extension.api.annotation.param.Parameter;\n+import org.mule.runtime.extension.api.annotation.param.RefName;\n+import org.mule.tests.api.LifecycleTrackerRegistry;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+\n+import javax.inject.Inject;\n+\n+@TypeDsl(allowTopLevelDefinition = true)\n+public class LifecycleObject extends BaseLifecycleTracker {\n+\n+    @Inject\n+    private LifecycleTrackerRegistry registry;\n+\n+    @RefName\n+    private String name;\n+\n+    @Optional\n+    @Parameter\n+    private String failurePhase;\n+\n+    @Optional\n+    @Parameter\n+    private String otherLifecycleObject;\n+\n+    public LifecycleObject() {\n+        super(false);\n+    }\n+\n+    @Override\n+    protected void onSetMuleContext(MuleContext muleContext) {\n+        addTrackingDataToRegistry(name);\n+        failIfNeeded(\"setMuleContext\");\n+    }\n+\n+    @Override\n+    protected void onInit(MuleContext muleContext) throws InitialisationException {\n+        failIfNeeded(Initialisable.PHASE_NAME);\n+    }\n+\n+    @Override\n+    protected void onStart() throws MuleException {\n+        failIfNeeded(Startable.PHASE_NAME);\n+    }\n+\n+    @Override\n+    protected void onStop() throws MuleException {\n+        failIfNeeded(Stoppable.PHASE_NAME);\n+    }\n+\n+    @Override\n+    protected void onDispose() {\n+        failIfNeeded(Disposable.PHASE_NAME);\n+    }\n+\n+\n+\n+    private void failIfNeeded(String phase) {", "originalCommit": "e597149279f41e12b32b58bac9e012a5bb827935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwMDM3Ng==", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491200376", "bodyText": "done", "author": "eze210", "createdAt": "2020-09-18T21:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NzY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "chunk": "diff --git a/tests/test-components/src/main/java/org/mule/tests/api/pojos/LifecycleObject.java b/tests/test-components/src/main/java/org/mule/tests/api/pojos/LifecycleObject.java\ndeleted file mode 100644\nindex a803903ecda..00000000000\n--- a/tests/test-components/src/main/java/org/mule/tests/api/pojos/LifecycleObject.java\n+++ /dev/null\n\n@@ -1,83 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.tests.api.pojos;\n-\n-import org.mule.runtime.api.exception.MuleException;\n-import org.mule.runtime.api.lifecycle.Disposable;\n-import org.mule.runtime.api.lifecycle.Initialisable;\n-import org.mule.runtime.api.lifecycle.InitialisationException;\n-import org.mule.runtime.api.lifecycle.Startable;\n-import org.mule.runtime.api.lifecycle.Stoppable;\n-import org.mule.runtime.core.api.MuleContext;\n-import org.mule.runtime.extension.api.annotation.dsl.xml.TypeDsl;\n-import org.mule.runtime.extension.api.annotation.param.Optional;\n-import org.mule.runtime.extension.api.annotation.param.Parameter;\n-import org.mule.runtime.extension.api.annotation.param.RefName;\n-import org.mule.tests.api.LifecycleTrackerRegistry;\n-import org.mule.tests.internal.BaseLifecycleTracker;\n-\n-import javax.inject.Inject;\n-\n-@TypeDsl(allowTopLevelDefinition = true)\n-public class LifecycleObject extends BaseLifecycleTracker {\n-\n-    @Inject\n-    private LifecycleTrackerRegistry registry;\n-\n-    @RefName\n-    private String name;\n-\n-    @Optional\n-    @Parameter\n-    private String failurePhase;\n-\n-    @Optional\n-    @Parameter\n-    private String otherLifecycleObject;\n-\n-    public LifecycleObject() {\n-        super(false);\n-    }\n-\n-    @Override\n-    protected void onSetMuleContext(MuleContext muleContext) {\n-        addTrackingDataToRegistry(name);\n-        failIfNeeded(\"setMuleContext\");\n-    }\n-\n-    @Override\n-    protected void onInit(MuleContext muleContext) throws InitialisationException {\n-        failIfNeeded(Initialisable.PHASE_NAME);\n-    }\n-\n-    @Override\n-    protected void onStart() throws MuleException {\n-        failIfNeeded(Startable.PHASE_NAME);\n-    }\n-\n-    @Override\n-    protected void onStop() throws MuleException {\n-        failIfNeeded(Stoppable.PHASE_NAME);\n-    }\n-\n-    @Override\n-    protected void onDispose() {\n-        failIfNeeded(Disposable.PHASE_NAME);\n-    }\n-\n-\n-\n-    private void failIfNeeded(String phase) {\n-        if (failurePhase != null && failurePhase.equalsIgnoreCase(phase)) {\n-            throw new RuntimeException(\"generated failure\");\n-        }\n-    }\n-\n-    public LifecycleObject getOtherLifecycleObject() {\n-        return (LifecycleObject) registry.get(otherLifecycleObject);\n-    }\n-}\n"}}, {"oid": "668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "url": "https://github.com/mulesoft/mule/commit/668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "message": "enricher", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "a34f1f7b6b48ab3d3679bdf09b512eb38b9a628c", "url": "https://github.com/mulesoft/mule/commit/a34f1f7b6b48ab3d3679bdf09b512eb38b9a628c", "message": "working tracker", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "a544585d901264494196d7205f5438a3dc115cc7", "url": "https://github.com/mulesoft/mule/commit/a544585d901264494196d7205f5438a3dc115cc7", "message": "remove", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "97287c6a9c4181b5f98c8a1505f1c7d1680c574f", "url": "https://github.com/mulesoft/mule/commit/97287c6a9c4181b5f98c8a1505f1c7d1680c574f", "message": "source and scope", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "1765a687edd9e45e587544ac2477eff06ef263be", "url": "https://github.com/mulesoft/mule/commit/1765a687edd9e45e587544ac2477eff06ef263be", "message": "remove", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "7dccf7b367fd3ab8372a0e39d91b724e6e765f6b", "url": "https://github.com/mulesoft/mule/commit/7dccf7b367fd3ab8372a0e39d91b724e6e765f6b", "message": "remove", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "d694d51a99a531711fa64b41514caa2ec6dd130a", "url": "https://github.com/mulesoft/mule/commit/d694d51a99a531711fa64b41514caa2ec6dd130a", "message": "lifecycle object", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "5aae5584a5357536866c492b89c4e819a9e91efc", "url": "https://github.com/mulesoft/mule/commit/5aae5584a5357536866c492b89c4e819a9e91efc", "message": "builder", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "b5de750d8a59b49d6c299d327ece13f10ec5c4b0", "url": "https://github.com/mulesoft/mule/commit/b5de750d8a59b49d6c299d327ece13f10ec5c4b0", "message": "Apply format", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "98029a5d208918b6d779cb0a4e591798014c6b48", "url": "https://github.com/mulesoft/mule/commit/98029a5d208918b6d779cb0a4e591798014c6b48", "message": "optionals refactor, add javadoc in interface and base class, add comments", "committedDate": "2020-09-22T15:30:34Z", "type": "commit"}, {"oid": "98029a5d208918b6d779cb0a4e591798014c6b48", "url": "https://github.com/mulesoft/mule/commit/98029a5d208918b6d779cb0a4e591798014c6b48", "message": "optionals refactor, add javadoc in interface and base class, add comments", "committedDate": "2020-09-22T15:30:34Z", "type": "forcePushed"}]}