{"pr_number": 9467, "pr_title": "CMTS-91: Improve ValueProvider caching with providerId information", "pr_createdAt": "2020-09-28T14:24:51Z", "pr_url": "https://github.com/mulesoft/mule/pull/9467", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MjkwMg==", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r496662902", "bodyText": "We should test that 2 different operations with the same value providerId and same values, return the same hash", "author": "lucianoRM", "createdAt": "2020-09-29T12:07:23Z", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/dsl/model/ValueProviderCacheIdGeneratorTestCase.java", "diffHunk": "@@ -400,13 +399,24 @@ public void differentConfigsWithSameParameterGetDifferentHash() throws Exception\n   }\n \n   @Test\n-  public void differentValueProviderNameGetsDifferentHash() throws Exception {\n+  public void differentValueProviderNameGetsSameHash() throws Exception {\n     ArtifactDeclaration app = getBaseApp();\n     when(valueProviderModel.requiresConnection()).thenReturn(true);\n     when(valueProviderModel.requiresConfiguration()).thenReturn(true);\n     Optional<ValueProviderCacheId> opId1 = computeIdFor(app, OPERATION_LOCATION, PROVIDED_PARAMETER_NAME);\n     when(valueProviderModel.getProviderName()).thenReturn(\"newValueProviderName\");\n     Optional<ValueProviderCacheId> opId2 = computeIdFor(app, OPERATION_LOCATION, PROVIDED_PARAMETER_NAME);\n+    checkIdsAreEqual(opId1, opId2);\n+  }\n+\n+  @Test\n+  public void differentValueProviderIdGetsDifferentHash() throws Exception {", "originalCommit": "567bd48967ef86c5a5b97f41544e1aabece42f1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2ODUwMQ==", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r496668501", "bodyText": "https://github.com/mulesoft/mule/pull/9467/files#diff-651f29168e45b3db6280ce600b706537R402", "author": "gsfernandes", "createdAt": "2020-09-29T12:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MjkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NTY0MA==", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r497285640", "bodyText": "But that is the same operation. I just want to make sure that there is nothing related to the operation itself used for the hashing. If we are using the operation name for example (which we shouldn't) this test will pass but the one I am asking to add should fail.", "author": "lucianoRM", "createdAt": "2020-09-30T07:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MjkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwNDQ1OQ==", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r498204459", "bodyText": "Ok, I will add another test with this scenario.", "author": "gsfernandes", "createdAt": "2020-10-01T12:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MjkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTkxNw==", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r499735917", "bodyText": "Done, please review this again.", "author": "gsfernandes", "createdAt": "2020-10-05T16:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MjkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "e42c255fb77fa613b7d07bf3812438d1f3d52823", "chunk": "diff --git a/modules/spring-config/src/test/java/org/mule/runtime/config/dsl/model/ValueProviderCacheIdGeneratorTestCase.java b/modules/spring-config/src/test/java/org/mule/runtime/config/dsl/model/ValueProviderCacheIdGeneratorTestCase.java\nindex fe9f6c2f6f6..99cbe00d70c 100644\n--- a/modules/spring-config/src/test/java/org/mule/runtime/config/dsl/model/ValueProviderCacheIdGeneratorTestCase.java\n+++ b/modules/spring-config/src/test/java/org/mule/runtime/config/dsl/model/ValueProviderCacheIdGeneratorTestCase.java\n\n@@ -395,7 +395,7 @@ public class ValueProviderCacheIdGeneratorTestCase extends AbstractMockedValuePr\n                                             PARAMETER_IN_GROUP_DEFAULT_VALUE));\n     Optional<ValueProviderCacheId> config1Id = computeIdFor(app, MY_CONFIG, PROVIDED_PARAMETER_NAME);\n     Optional<ValueProviderCacheId> config2Id = computeIdFor(app, \"newName\", PROVIDED_PARAMETER_NAME);\n-    checkIdsAreDifferent(config1Id, config2Id);\n+    checkIdsAreEqual(config1Id, config2Id);\n   }\n \n   @Test\n"}}, {"oid": "031d1595b7cfeb3214cbddfb1f0f9aeca0060f1c", "url": "https://github.com/mulesoft/mule/commit/031d1595b7cfeb3214cbddfb1f0f9aeca0060f1c", "message": "CMTS-91: Improve ValueProvider caching with providerId information", "committedDate": "2020-10-05T13:46:25Z", "type": "commit"}, {"oid": "cdbc930783f4ba6701405a9600a46ad5d4ab7be9", "url": "https://github.com/mulesoft/mule/commit/cdbc930783f4ba6701405a9600a46ad5d4ab7be9", "message": "Reuse logic to enrich values", "committedDate": "2020-10-05T13:46:25Z", "type": "commit"}, {"oid": "e42c255fb77fa613b7d07bf3812438d1f3d52823", "url": "https://github.com/mulesoft/mule/commit/e42c255fb77fa613b7d07bf3812438d1f3d52823", "message": "PR feedback, adding namespace as part of keyId", "committedDate": "2020-10-05T16:32:31Z", "type": "commit"}, {"oid": "e42c255fb77fa613b7d07bf3812438d1f3d52823", "url": "https://github.com/mulesoft/mule/commit/e42c255fb77fa613b7d07bf3812438d1f3d52823", "message": "PR feedback, adding namespace as part of keyId", "committedDate": "2020-10-05T16:32:31Z", "type": "forcePushed"}, {"oid": "b50049d527484dedf89ba14a50ecea7305e28f9e", "url": "https://github.com/mulesoft/mule/commit/b50049d527484dedf89ba14a50ecea7305e28f9e", "message": "Fixes", "committedDate": "2020-10-05T21:08:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MTg0MA==", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r500241840", "bodyText": "only the namespace and if not present the id? You are assuming that if the namespace is not present, then the id should be the identifier right?", "author": "lucianoRM", "createdAt": "2020-10-06T12:39:55Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/DslElementBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -101,24 +103,32 @@ public DslElementBasedValueProviderCacheIdGenerator(ComponentLocator<DslElementM\n                                                                  Map<String, ParameterModelInformation> parameterModelsInformation) {\n     List<ValueProviderCacheId> parts = new LinkedList<>();\n \n-    parts.add(resolveValueProviderId(valueProviderModel));\n     parts.addAll(resolveActingParameterIds(valueProviderModel, parameterModelsInformation));\n+    parts.add(resolveValueProviderId(valueProviderModel));\n+    parts.add(aValueProviderCacheId(fromElementWithName(VALUE_PROVIDER).withHashValueFrom(VALUE_PROVIDER)));\n \n     String id = resolveDslTag(containerComponent).orElse(getSourceElementName(containerComponent));\n-    return of(aValueProviderCacheId(fromElementWithName(id).withHashValueFrom(id).containing(parts)));\n+    return of(aValueProviderCacheId(fromElementWithName(id)\n+        .withHashValueFrom(resolveDslTagNamespace(containerComponent).orElse(id)).containing(parts)));\n   }\n \n   private Optional<ValueProviderCacheId> resolveForComponentModel(DslElementModel<?> containerComponent,\n                                                                   ValueProviderModel valueProviderModel,\n                                                                   Map<String, ParameterModelInformation> parameterModelsInformation) {\n     List<ValueProviderCacheId> parts = new LinkedList<>();\n \n-    parts.add(resolveValueProviderId(valueProviderModel));\n     parts.addAll(resolveActingParameterIds(valueProviderModel, parameterModelsInformation));\n     parts.addAll(resolveIdForInjectedElements(containerComponent, valueProviderModel));\n+    parts.add(resolveValueProviderId(valueProviderModel));\n+    parts.add(aValueProviderCacheId(fromElementWithName(VALUE_PROVIDER).withHashValueFrom(VALUE_PROVIDER)));\n \n     String id = resolveDslTag(containerComponent).orElse(getSourceElementName(containerComponent));\n-    return of(aValueProviderCacheId(fromElementWithName(id).withHashValueFrom(id).containing(parts)));\n+    return of(aValueProviderCacheId(fromElementWithName(id)", "originalCommit": "b50049d527484dedf89ba14a50ecea7305e28f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0OTIzNw==", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r500249237", "bodyText": "Yes, there is no other way to associate it to an extension.", "author": "gsfernandes", "createdAt": "2020-10-06T12:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MTg0MA=="}], "type": "inlineReview", "revised_code": null}]}