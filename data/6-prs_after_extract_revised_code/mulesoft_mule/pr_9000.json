{"pr_number": 9000, "pr_title": "MULE-18542: Timer threads leak on redeploy when using Oracle Driver.", "pr_createdAt": "2020-06-30T13:40:21Z", "pr_url": "https://github.com/mulesoft/mule/pull/9000", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTgwNg==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447695806", "bodyText": "this test in inherently flaky.", "author": "marianogonzalez", "createdAt": "2020-06-30T13:47:22Z", "path": "modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java", "diffHunk": "@@ -171,6 +176,33 @@ public void createsInstanceOnlyOnce() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void stopOracleDriverLeakyThreads() throws Exception {\n+    JdbcResourceReleaser resourceReleaser = new JdbcResourceReleaser();\n+\n+    Method killOracleThreadsMethod = resourceReleaser.getClass().getDeclaredMethod(\"disposeOracleDriverThreads\");\n+    killOracleThreadsMethod.setAccessible(true);\n+\n+    Timer timerThread = new Timer();\n+    TimerTask task = new TimerTask() {\n+\n+      @Override\n+      public void run() {\n+        System.out.println(\"Timer\");\n+      }\n+    };\n+    timerThread.schedule(task, 10, 1000);\n+    killOracleThreadsMethod.invoke(resourceReleaser);\n+\n+    sleep(1000);", "originalCommit": "7adcef363be5c01bcbf277df6e896bb4f602e806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNDgxNg==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447734816", "bodyText": "Use a PollingProber", "author": "fsgonz", "createdAt": "2020-06-30T14:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\nindex 9d02681f634..871a9bd305a 100644\n--- a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n+++ b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n\n@@ -191,15 +193,18 @@ public class ResourceReleaserTestCase extends AbstractMuleTestCase {\n         System.out.println(\"Timer\");\n       }\n     };\n-    timerThread.schedule(task, 10, 1000);\n-    killOracleThreadsMethod.invoke(resourceReleaser);\n \n-    sleep(1000);\n+    timerThread.schedule(task, 10, 100000);\n \n-    Thread[] threads = new Thread[Thread.activeCount()];\n+    Thread[] threads = new Thread[activeCount()];\n     enumerate(threads);\n+\n+    killOracleThreadsMethod.invoke(resourceReleaser);\n+\n     for (Thread thread : threads) {\n-      assertThat(thread.getName(), not(containsString(\"Timer-\")));\n+      if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n+        check(15000, 100, () -> TERMINATED.equals(thread.getState()));\n+      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNTAzNA==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447735034", "bodyText": "use a constant for the prefix of the Thread", "author": "fsgonz", "createdAt": "2020-06-30T14:38:03Z", "path": "modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java", "diffHunk": "@@ -171,6 +176,33 @@ public void createsInstanceOnlyOnce() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void stopOracleDriverLeakyThreads() throws Exception {\n+    JdbcResourceReleaser resourceReleaser = new JdbcResourceReleaser();\n+\n+    Method killOracleThreadsMethod = resourceReleaser.getClass().getDeclaredMethod(\"disposeOracleDriverThreads\");\n+    killOracleThreadsMethod.setAccessible(true);\n+\n+    Timer timerThread = new Timer();\n+    TimerTask task = new TimerTask() {\n+\n+      @Override\n+      public void run() {\n+        System.out.println(\"Timer\");\n+      }\n+    };\n+    timerThread.schedule(task, 10, 1000);\n+    killOracleThreadsMethod.invoke(resourceReleaser);\n+\n+    sleep(1000);\n+\n+    Thread[] threads = new Thread[Thread.activeCount()];\n+    enumerate(threads);\n+    for (Thread thread : threads) {\n+      assertThat(thread.getName(), not(containsString(\"Timer-\")));", "originalCommit": "7adcef363be5c01bcbf277df6e896bb4f602e806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\nindex 9d02681f634..871a9bd305a 100644\n--- a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n+++ b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n\n@@ -191,15 +193,18 @@ public class ResourceReleaserTestCase extends AbstractMuleTestCase {\n         System.out.println(\"Timer\");\n       }\n     };\n-    timerThread.schedule(task, 10, 1000);\n-    killOracleThreadsMethod.invoke(resourceReleaser);\n \n-    sleep(1000);\n+    timerThread.schedule(task, 10, 100000);\n \n-    Thread[] threads = new Thread[Thread.activeCount()];\n+    Thread[] threads = new Thread[activeCount()];\n     enumerate(threads);\n+\n+    killOracleThreadsMethod.invoke(resourceReleaser);\n+\n     for (Thread thread : threads) {\n-      assertThat(thread.getName(), not(containsString(\"Timer-\")));\n+      if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n+        check(15000, 100, () -> TERMINATED.equals(thread.getState()));\n+      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNTE2NA==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447735164", "bodyText": "static import", "author": "fsgonz", "createdAt": "2020-06-30T14:38:13Z", "path": "modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java", "diffHunk": "@@ -171,6 +176,33 @@ public void createsInstanceOnlyOnce() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void stopOracleDriverLeakyThreads() throws Exception {\n+    JdbcResourceReleaser resourceReleaser = new JdbcResourceReleaser();\n+\n+    Method killOracleThreadsMethod = resourceReleaser.getClass().getDeclaredMethod(\"disposeOracleDriverThreads\");\n+    killOracleThreadsMethod.setAccessible(true);\n+\n+    Timer timerThread = new Timer();\n+    TimerTask task = new TimerTask() {\n+\n+      @Override\n+      public void run() {\n+        System.out.println(\"Timer\");\n+      }\n+    };\n+    timerThread.schedule(task, 10, 1000);\n+    killOracleThreadsMethod.invoke(resourceReleaser);\n+\n+    sleep(1000);\n+\n+    Thread[] threads = new Thread[Thread.activeCount()];", "originalCommit": "7adcef363be5c01bcbf277df6e896bb4f602e806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\nindex 9d02681f634..871a9bd305a 100644\n--- a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n+++ b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n\n@@ -191,15 +193,18 @@ public class ResourceReleaserTestCase extends AbstractMuleTestCase {\n         System.out.println(\"Timer\");\n       }\n     };\n-    timerThread.schedule(task, 10, 1000);\n-    killOracleThreadsMethod.invoke(resourceReleaser);\n \n-    sleep(1000);\n+    timerThread.schedule(task, 10, 100000);\n \n-    Thread[] threads = new Thread[Thread.activeCount()];\n+    Thread[] threads = new Thread[activeCount()];\n     enumerate(threads);\n+\n+    killOracleThreadsMethod.invoke(resourceReleaser);\n+\n     for (Thread thread : threads) {\n-      assertThat(thread.getName(), not(containsString(\"Timer-\")));\n+      if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n+        check(15000, 100, () -> TERMINATED.equals(thread.getState()));\n+      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNjM3Mg==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447736372", "bodyText": "move this to a field so that the property is not read every time a it is used.", "author": "fsgonz", "createdAt": "2020-06-30T14:39:37Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +266,37 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {", "originalCommit": "7adcef363be5c01bcbf277df6e896bb4f602e806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex ed70aab2995..181fe7e6273 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -268,22 +278,27 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n-      if (Boolean.valueOf(avoidThreadDisposal)) {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[Thread.activeCount()];\n+      Thread[] threads = new Thread[activeCount()];\n       try {\n-        Thread.enumerate(threads);\n+        enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n       for (Thread thread : threads) {\n-        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n+        if (isThreadApplicationTimerThread(thread)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNzIwOA==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447737208", "bodyText": "static import.", "author": "fsgonz", "createdAt": "2020-06-30T14:40:34Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +266,37 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[Thread.activeCount()];", "originalCommit": "7adcef363be5c01bcbf277df6e896bb4f602e806", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex ed70aab2995..181fe7e6273 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -268,22 +278,27 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n-      if (Boolean.valueOf(avoidThreadDisposal)) {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[Thread.activeCount()];\n+      Thread[] threads = new Thread[activeCount()];\n       try {\n-        Thread.enumerate(threads);\n+        enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n       for (Thread thread : threads) {\n-        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n+        if (isThreadApplicationTimerThread(thread)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczODcxOA==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447738718", "bodyText": "Are we sure this will be the only threads that are stopped in every kind of app? Isn't there a less intrusive way to shutdown the timer threads?", "author": "fsgonz", "createdAt": "2020-06-30T14:42:33Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -45,6 +45,7 @@\n public class JdbcResourceReleaser implements ResourceReleaser {\n \n   public static final String DIAGNOSABILITY_BEAN_NAME = \"diagnosability\";\n+  public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer\";", "originalCommit": "7adcef363be5c01bcbf277df6e896bb4f602e806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1Njk2MQ==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447756961", "bodyText": "I've looked into this, but threads do not appear to have any references to the driver once spawned. The only thing we could possibly check would be the class-loader type... other than that, the only way I found to make this less intrusive was to set that system property to disable killing of the threads.", "author": "emariotti3", "createdAt": "2020-06-30T15:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczODcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjU3Nw==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r447802577", "bodyText": "Maybe we should check if there a way to ask the driver to remove this threads on disposal. Timer is too generic a name. Not sure if there is a way for this. Maybe verifying how the driver behaves on shutdown regarding those threads and attempt to replicate that behavior on redeployment.", "author": "fsgonz", "createdAt": "2020-06-30T16:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczODcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex ed70aab2995..181fe7e6273 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -44,8 +49,13 @@ import org.slf4j.LoggerFactory;\n  */\n public class JdbcResourceReleaser implements ResourceReleaser {\n \n+  private static final String AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME = \"avoid.dispose.oracle.threads\";\n+  private static final boolean JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS =\n+      getBoolean(AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME);\n+\n   public static final String DIAGNOSABILITY_BEAN_NAME = \"diagnosability\";\n-  public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer\";\n+  public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer-\";\n+  public static final String ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME = \"TimerThread\";\n   private final transient Logger logger = LoggerFactory.getLogger(getClass());\n   private static final List<String> CONNECTION_CLEANUP_THREAD_KNOWN_CLASS_ADDRESES =\n       Arrays.asList(\"com.mysql.jdbc.AbandonedConnectionCleanupThread\", \"com.mysql.cj.jdbc.AbandonedConnectionCleanupThread\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwMDA3Ng==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r449100076", "bodyText": "refactor this as a method.", "author": "fsgonz", "createdAt": "2020-07-02T15:40:54Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +273,61 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      for (Thread thread : threads) {\n+        if (thread.getClass().getSimpleName().equals(ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME)", "originalCommit": "8af1a918c9e688a5e7df013ac6c028d844828444", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 3d3ecbf5d39..181fe7e6273 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -275,7 +278,7 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      if (Boolean.valueOf(avoidThreadDisposal)) {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n         return;\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwNDUxNg==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r449104516", "bodyText": "use Boolean.getBoolean which verifies if there exists a system property, otherwise it assigns a default.\nUse a constant for the string and rename this as jdb.resource.releaser.avoid.dispose.oracle.threads", "author": "fsgonz", "createdAt": "2020-07-02T15:44:38Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -44,7 +48,11 @@\n  */\n public class JdbcResourceReleaser implements ResourceReleaser {\n \n+  private static final String avoidThreadDisposal = getProperty(\"avoid.dispose.oracle.threads\");", "originalCommit": "8af1a918c9e688a5e7df013ac6c028d844828444", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 3d3ecbf5d39..181fe7e6273 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -48,7 +49,9 @@ import org.slf4j.LoggerFactory;\n  */\n public class JdbcResourceReleaser implements ResourceReleaser {\n \n-  private static final String avoidThreadDisposal = getProperty(\"avoid.dispose.oracle.threads\");\n+  private static final String AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME = \"avoid.dispose.oracle.threads\";\n+  private static final boolean JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS =\n+      getBoolean(AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME);\n \n   public static final String DIAGNOSABILITY_BEAN_NAME = \"diagnosability\";\n   public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer-\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5NjY2NQ==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r449196665", "bodyText": "You should only use getBoolean without the getProperty\ngetBoolean(AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME)\nReturn true if and only if the system property is true.", "author": "fsgonz", "createdAt": "2020-07-02T18:25:55Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -48,7 +49,9 @@\n  */\n public class JdbcResourceReleaser implements ResourceReleaser {\n \n-  private static final String avoidThreadDisposal = getProperty(\"avoid.dispose.oracle.threads\");\n+  private static final String AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME = \"avoid.dispose.oracle.threads\";\n+  private static final boolean JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS =", "originalCommit": "bec6c75050827dbc00affa996b1a1f877634b09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 6d7a2565056..181fe7e6273 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -51,7 +51,7 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private static final String AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME = \"avoid.dispose.oracle.threads\";\n   private static final boolean JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS =\n-      getBoolean(getProperty(AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME));\n+      getBoolean(AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME);\n \n   public static final String DIAGNOSABILITY_BEAN_NAME = \"diagnosability\";\n   public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer-\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5NzA3OQ==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r449197079", "bodyText": "Add a comment to explain why this has to be done and that the timer cannot be cancelled by reflection (some users may use only the ojdbc jar)", "author": "fsgonz", "createdAt": "2020-07-02T18:26:47Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +276,65 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      for (Thread thread : threads) {", "originalCommit": "bec6c75050827dbc00affa996b1a1f877634b09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 6d7a2565056..181fe7e6273 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -291,6 +291,12 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n         return;\n       }\n \n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n       for (Thread thread : threads) {\n         if (isThreadApplicationTimerThread(thread)) {\n           try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwOTczOA==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450309738", "bodyText": "HAManger-> HAManager", "author": "marianogonzalez", "createdAt": "2020-07-06T15:40:02Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +276,71 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 181fe7e6273..3b6bb4984fd 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -278,35 +265,30 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[activeCount()];\n+      Thread[] threads = new Thread[Thread.activeCount()];\n       try {\n-        enumerate(threads);\n+        Thread.enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n-      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n-      thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManger class. This timer cannot be fetched\n-      by reflection because, in order to do so, other oracle dependencies\n-      would be required.\n-      * */\n       for (Thread thread : threads) {\n-        if (isThreadApplicationTimerThread(thread)) {\n+        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n           } catch (Throwable e) {\n             logger\n-                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                       e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\", e);\n           }\n+\n         }\n       }\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwOTk0MQ==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450309941", "bodyText": "WARN", "author": "marianogonzalez", "createdAt": "2020-07-06T15:40:20Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +276,71 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n+      for (Thread thread : threads) {\n+        if (isThreadApplicationTimerThread(thread)) {\n+          try {\n+            thread.stop();\n+            thread.interrupt();\n+          } catch (Throwable e) {\n+            logger\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 181fe7e6273..3b6bb4984fd 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -278,35 +265,30 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[activeCount()];\n+      Thread[] threads = new Thread[Thread.activeCount()];\n       try {\n-        enumerate(threads);\n+        Thread.enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n-      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n-      thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManger class. This timer cannot be fetched\n-      by reflection because, in order to do so, other oracle dependencies\n-      would be required.\n-      * */\n       for (Thread thread : threads) {\n-        if (isThreadApplicationTimerThread(thread)) {\n+        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n           } catch (Throwable e) {\n             logger\n-                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                       e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\", e);\n           }\n+\n         }\n       }\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxMDQ3Nw==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450310477", "bodyText": "this should log not only the message, but the context in which it happened and the entire exception", "author": "marianogonzalez", "createdAt": "2020-07-06T15:41:09Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +276,71 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n+      for (Thread thread : threads) {\n+        if (isThreadApplicationTimerThread(thread)) {\n+          try {\n+            thread.stop();\n+            thread.interrupt();\n+          } catch (Throwable e) {\n+            logger\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n+                       e);\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      logger.debug(e.getMessage());", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 181fe7e6273..3b6bb4984fd 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -278,35 +265,30 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[activeCount()];\n+      Thread[] threads = new Thread[Thread.activeCount()];\n       try {\n-        enumerate(threads);\n+        Thread.enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n-      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n-      thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManger class. This timer cannot be fetched\n-      by reflection because, in order to do so, other oracle dependencies\n-      would be required.\n-      * */\n       for (Thread thread : threads) {\n-        if (isThreadApplicationTimerThread(thread)) {\n+        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n           } catch (Throwable e) {\n             logger\n-                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                       e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\", e);\n           }\n+\n         }\n       }\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxMTk5NQ==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450311995", "bodyText": "this doesn't make sense. If this is a concern, then the two while loops should be nested and this one should be the master iteration", "author": "marianogonzalez", "createdAt": "2020-07-06T15:43:29Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +276,71 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n+      for (Thread thread : threads) {\n+        if (isThreadApplicationTimerThread(thread)) {\n+          try {\n+            thread.stop();\n+            thread.interrupt();\n+          } catch (Throwable e) {\n+            logger\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n+                       e);\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      logger.debug(e.getMessage());\n+    }\n+  }\n+\n+  private boolean isThreadApplicationTimerThread(Thread thread) {\n+    return thread.getClass().getSimpleName().equals(ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME)\n+        && thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)\n+        && isThreadLoadedByThisClassLoader(thread.getContextClassLoader());\n+  }\n+\n+  private boolean isThreadLoadedByThisClassLoader(ClassLoader threadBaseClassLoader) {\n+    ClassLoader threadClassLoader = threadBaseClassLoader;\n+    ClassLoader lastClassLoader = null;\n+    ClassLoader resourceReleaserClassLoader = this.getClass().getClassLoader();\n+\n+    while (threadClassLoader != null) {\n+      lastClassLoader = threadClassLoader;\n+      // It has to be the same reference not equals to\n+      if (threadClassLoader == resourceReleaserClassLoader) {\n+        return true;\n+      }\n+      threadClassLoader = threadClassLoader.getParent();\n+    }\n+\n+    while (resourceReleaserClassLoader != null) {", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 181fe7e6273..3b6bb4984fd 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -278,35 +265,30 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[activeCount()];\n+      Thread[] threads = new Thread[Thread.activeCount()];\n       try {\n-        enumerate(threads);\n+        Thread.enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n-      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n-      thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManger class. This timer cannot be fetched\n-      by reflection because, in order to do so, other oracle dependencies\n-      would be required.\n-      * */\n       for (Thread thread : threads) {\n-        if (isThreadApplicationTimerThread(thread)) {\n+        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n           } catch (Throwable e) {\n             logger\n-                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                       e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\", e);\n           }\n+\n         }\n       }\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxMjYzNg==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450312636", "bodyText": "this doesn't look correct. By doing this, you're completely bypassing the lookup policies. Why is this needed? In which case would the driver not be loaded by the extension classloader?", "author": "marianogonzalez", "createdAt": "2020-07-06T15:44:28Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +276,71 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n+      for (Thread thread : threads) {\n+        if (isThreadApplicationTimerThread(thread)) {\n+          try {\n+            thread.stop();\n+            thread.interrupt();\n+          } catch (Throwable e) {\n+            logger\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n+                       e);\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      logger.debug(e.getMessage());\n+    }\n+  }\n+\n+  private boolean isThreadApplicationTimerThread(Thread thread) {\n+    return thread.getClass().getSimpleName().equals(ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME)\n+        && thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)\n+        && isThreadLoadedByThisClassLoader(thread.getContextClassLoader());\n+  }\n+\n+  private boolean isThreadLoadedByThisClassLoader(ClassLoader threadBaseClassLoader) {\n+    ClassLoader threadClassLoader = threadBaseClassLoader;\n+    ClassLoader lastClassLoader = null;\n+    ClassLoader resourceReleaserClassLoader = this.getClass().getClassLoader();\n+\n+    while (threadClassLoader != null) {\n+      lastClassLoader = threadClassLoader;\n+      // It has to be the same reference not equals to\n+      if (threadClassLoader == resourceReleaserClassLoader) {\n+        return true;\n+      }\n+      threadClassLoader = threadClassLoader.getParent();", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 181fe7e6273..3b6bb4984fd 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -278,35 +265,30 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[activeCount()];\n+      Thread[] threads = new Thread[Thread.activeCount()];\n       try {\n-        enumerate(threads);\n+        Thread.enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n-      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n-      thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManger class. This timer cannot be fetched\n-      by reflection because, in order to do so, other oracle dependencies\n-      would be required.\n-      * */\n       for (Thread thread : threads) {\n-        if (isThreadApplicationTimerThread(thread)) {\n+        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n           } catch (Throwable e) {\n             logger\n-                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                       e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\", e);\n           }\n+\n         }\n       }\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxNTQzMg==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450315432", "bodyText": "this logger should be static", "author": "marianogonzalez", "createdAt": "2020-07-06T15:48:43Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -44,7 +49,13 @@\n  */\n public class JdbcResourceReleaser implements ResourceReleaser {\n \n+  private static final String AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME = \"avoid.dispose.oracle.threads\";\n+  private static final boolean JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS =\n+      getBoolean(AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME);\n+\n   public static final String DIAGNOSABILITY_BEAN_NAME = \"diagnosability\";\n+  public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer-\";\n+  public static final String ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME = \"TimerThread\";\n   private final transient Logger logger = LoggerFactory.getLogger(getClass());", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 181fe7e6273..3b6bb4984fd 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -49,13 +41,8 @@ import org.slf4j.LoggerFactory;\n  */\n public class JdbcResourceReleaser implements ResourceReleaser {\n \n-  private static final String AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME = \"avoid.dispose.oracle.threads\";\n-  private static final boolean JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS =\n-      getBoolean(AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME);\n-\n   public static final String DIAGNOSABILITY_BEAN_NAME = \"diagnosability\";\n-  public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer-\";\n-  public static final String ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME = \"TimerThread\";\n+  public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer\";\n   private final transient Logger logger = LoggerFactory.getLogger(getClass());\n   private static final List<String> CONNECTION_CLEANUP_THREAD_KNOWN_CLASS_ADDRESES =\n       Arrays.asList(\"com.mysql.jdbc.AbandonedConnectionCleanupThread\", \"com.mysql.cj.jdbc.AbandonedConnectionCleanupThread\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxNzg3Mg==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450317872", "bodyText": "this looks incorrect. You need to check that the thread was started by the application being disposed, not by the classloader that loaded this class. Also, have you considered domains here?", "author": "marianogonzalez", "createdAt": "2020-07-06T15:52:26Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +276,71 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n+      for (Thread thread : threads) {\n+        if (isThreadApplicationTimerThread(thread)) {\n+          try {\n+            thread.stop();\n+            thread.interrupt();\n+          } catch (Throwable e) {\n+            logger\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n+                       e);\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      logger.debug(e.getMessage());\n+    }\n+  }\n+\n+  private boolean isThreadApplicationTimerThread(Thread thread) {\n+    return thread.getClass().getSimpleName().equals(ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME)\n+        && thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)\n+        && isThreadLoadedByThisClassLoader(thread.getContextClassLoader());\n+  }\n+\n+  private boolean isThreadLoadedByThisClassLoader(ClassLoader threadBaseClassLoader) {\n+    ClassLoader threadClassLoader = threadBaseClassLoader;\n+    ClassLoader lastClassLoader = null;\n+    ClassLoader resourceReleaserClassLoader = this.getClass().getClassLoader();", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 181fe7e6273..3b6bb4984fd 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -278,35 +265,30 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[activeCount()];\n+      Thread[] threads = new Thread[Thread.activeCount()];\n       try {\n-        enumerate(threads);\n+        Thread.enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n-      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n-      thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManger class. This timer cannot be fetched\n-      by reflection because, in order to do so, other oracle dependencies\n-      would be required.\n-      * */\n       for (Thread thread : threads) {\n-        if (isThreadApplicationTimerThread(thread)) {\n+        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n           } catch (Throwable e) {\n             logger\n-                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                       e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\", e);\n           }\n+\n         }\n       }\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxODE1Ng==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450318156", "bodyText": "same as before. Doesn't look like you're asserting the correct thing", "author": "marianogonzalez", "createdAt": "2020-07-06T15:52:51Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +276,71 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManger class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n+      for (Thread thread : threads) {\n+        if (isThreadApplicationTimerThread(thread)) {\n+          try {\n+            thread.stop();\n+            thread.interrupt();\n+          } catch (Throwable e) {\n+            logger\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n+                       e);\n+          }\n+        }\n+      }\n+    } catch (Exception e) {\n+      logger.debug(e.getMessage());\n+    }\n+  }\n+\n+  private boolean isThreadApplicationTimerThread(Thread thread) {\n+    return thread.getClass().getSimpleName().equals(ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME)\n+        && thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)\n+        && isThreadLoadedByThisClassLoader(thread.getContextClassLoader());\n+  }\n+\n+  private boolean isThreadLoadedByThisClassLoader(ClassLoader threadBaseClassLoader) {\n+    ClassLoader threadClassLoader = threadBaseClassLoader;\n+    ClassLoader lastClassLoader = null;\n+    ClassLoader resourceReleaserClassLoader = this.getClass().getClassLoader();\n+\n+    while (threadClassLoader != null) {\n+      lastClassLoader = threadClassLoader;\n+      // It has to be the same reference not equals to\n+      if (threadClassLoader == resourceReleaserClassLoader) {\n+        return true;\n+      }\n+      threadClassLoader = threadClassLoader.getParent();\n+    }\n+\n+    while (resourceReleaserClassLoader != null) {\n+      if (lastClassLoader == resourceReleaserClassLoader) {", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex 181fe7e6273..3b6bb4984fd 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -278,35 +265,30 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n \n   private void disposeOracleDriverThreads() {\n     try {\n-      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+      String avoidThreadDisposal = System.getProperty(\"avoid.dispose.oracle.threads\");\n+      if (Boolean.valueOf(avoidThreadDisposal)) {\n         return;\n       }\n \n-      Thread[] threads = new Thread[activeCount()];\n+      Thread[] threads = new Thread[Thread.activeCount()];\n       try {\n-        enumerate(threads);\n+        Thread.enumerate(threads);\n       } catch (Throwable t) {\n         logger\n             .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n         return;\n       }\n \n-      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n-      thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManger class. This timer cannot be fetched\n-      by reflection because, in order to do so, other oracle dependencies\n-      would be required.\n-      * */\n       for (Thread thread : threads) {\n-        if (isThreadApplicationTimerThread(thread)) {\n+        if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n           } catch (Throwable e) {\n             logger\n-                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                       e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\", e);\n           }\n+\n         }\n       }\n     } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxODcwNg==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450318706", "bodyText": "don't do this. The runtime will use this by calling the release() method. Therefore, simply call the release method", "author": "marianogonzalez", "createdAt": "2020-07-06T15:53:44Z", "path": "modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java", "diffHunk": "@@ -171,6 +178,36 @@ public void createsInstanceOnlyOnce() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void stopOracleDriverLeakyThreads() throws Exception {\n+    JdbcResourceReleaser resourceReleaser = new JdbcResourceReleaser();\n+\n+    Method killOracleThreadsMethod = resourceReleaser.getClass().getDeclaredMethod(\"disposeOracleDriverThreads\");", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\nindex 871a9bd305a..670c1c43b33 100644\n--- a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n+++ b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n\n@@ -187,24 +179,20 @@ public class ResourceReleaserTestCase extends AbstractMuleTestCase {\n \n     Timer timerThread = new Timer();\n     TimerTask task = new TimerTask() {\n-\n       @Override\n       public void run() {\n         System.out.println(\"Timer\");\n       }\n     };\n-\n-    timerThread.schedule(task, 10, 100000);\n-\n-    Thread[] threads = new Thread[activeCount()];\n-    enumerate(threads);\n-\n+    timerThread.schedule(task, 10, 1000);\n     killOracleThreadsMethod.invoke(resourceReleaser);\n \n+    Thread.sleep(1000);\n+\n+    Thread[] threads = new Thread[Thread.activeCount()];\n+    Thread.enumerate(threads);\n     for (Thread thread : threads) {\n-      if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n-        check(15000, 100, () -> TERMINATED.equals(thread.getState()));\n-      }\n+      assertThat(thread.getName(), not(containsString(\"Timer-\")));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxODkxNw==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450318917", "bodyText": "no System.out in tests", "author": "marianogonzalez", "createdAt": "2020-07-06T15:54:04Z", "path": "modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java", "diffHunk": "@@ -171,6 +178,36 @@ public void createsInstanceOnlyOnce() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void stopOracleDriverLeakyThreads() throws Exception {\n+    JdbcResourceReleaser resourceReleaser = new JdbcResourceReleaser();\n+\n+    Method killOracleThreadsMethod = resourceReleaser.getClass().getDeclaredMethod(\"disposeOracleDriverThreads\");\n+    killOracleThreadsMethod.setAccessible(true);\n+\n+    Timer timerThread = new Timer();\n+    TimerTask task = new TimerTask() {\n+\n+      @Override\n+      public void run() {\n+        System.out.println(\"Timer\");", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\nindex 871a9bd305a..670c1c43b33 100644\n--- a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n+++ b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n\n@@ -187,24 +179,20 @@ public class ResourceReleaserTestCase extends AbstractMuleTestCase {\n \n     Timer timerThread = new Timer();\n     TimerTask task = new TimerTask() {\n-\n       @Override\n       public void run() {\n         System.out.println(\"Timer\");\n       }\n     };\n-\n-    timerThread.schedule(task, 10, 100000);\n-\n-    Thread[] threads = new Thread[activeCount()];\n-    enumerate(threads);\n-\n+    timerThread.schedule(task, 10, 1000);\n     killOracleThreadsMethod.invoke(resourceReleaser);\n \n+    Thread.sleep(1000);\n+\n+    Thread[] threads = new Thread[Thread.activeCount()];\n+    Thread.enumerate(threads);\n     for (Thread thread : threads) {\n-      if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n-        check(15000, 100, () -> TERMINATED.equals(thread.getState()));\n-      }\n+      assertThat(thread.getName(), not(containsString(\"Timer-\")));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyMDIwOQ==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r450320209", "bodyText": "this is testing nothing:\n\nYou're not testing the classloading navigation part. This doesn't give any indication on wether this actually works with the DB connector\nYou're starting a timer, but at no point you gave it the correct name\nYou're not considering the possibility of the thread not being found and the check() never taking place.", "author": "marianogonzalez", "createdAt": "2020-07-06T15:56:05Z", "path": "modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java", "diffHunk": "@@ -171,6 +178,36 @@ public void createsInstanceOnlyOnce() throws IOException {\n     }\n   }\n \n+  @Test\n+  public void stopOracleDriverLeakyThreads() throws Exception {\n+    JdbcResourceReleaser resourceReleaser = new JdbcResourceReleaser();\n+\n+    Method killOracleThreadsMethod = resourceReleaser.getClass().getDeclaredMethod(\"disposeOracleDriverThreads\");\n+    killOracleThreadsMethod.setAccessible(true);\n+\n+    Timer timerThread = new Timer();\n+    TimerTask task = new TimerTask() {\n+\n+      @Override\n+      public void run() {\n+        System.out.println(\"Timer\");\n+      }\n+    };\n+\n+    timerThread.schedule(task, 10, 100000);\n+\n+    Thread[] threads = new Thread[activeCount()];\n+    enumerate(threads);\n+\n+    killOracleThreadsMethod.invoke(resourceReleaser);\n+\n+    for (Thread thread : threads) {\n+      if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n+        check(15000, 100, () -> TERMINATED.equals(thread.getState()));", "originalCommit": "29da11e5d25031981b8351051ba8610eddb6c22e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "chunk": "diff --git a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\nindex 871a9bd305a..670c1c43b33 100644\n--- a/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n+++ b/modules/artifact/src/test/java/org/mule/runtime/module/artifact/classloader/ResourceReleaserTestCase.java\n\n@@ -187,24 +179,20 @@ public class ResourceReleaserTestCase extends AbstractMuleTestCase {\n \n     Timer timerThread = new Timer();\n     TimerTask task = new TimerTask() {\n-\n       @Override\n       public void run() {\n         System.out.println(\"Timer\");\n       }\n     };\n-\n-    timerThread.schedule(task, 10, 100000);\n-\n-    Thread[] threads = new Thread[activeCount()];\n-    enumerate(threads);\n-\n+    timerThread.schedule(task, 10, 1000);\n     killOracleThreadsMethod.invoke(resourceReleaser);\n \n+    Thread.sleep(1000);\n+\n+    Thread[] threads = new Thread[Thread.activeCount()];\n+    Thread.enumerate(threads);\n     for (Thread thread : threads) {\n-      if (thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)) {\n-        check(15000, 100, () -> TERMINATED.equals(thread.getState()));\n-      }\n+      assertThat(thread.getName(), not(containsString(\"Timer-\")));\n     }\n   }\n \n"}}, {"oid": "f2b709fc9edd13ab256f91c13f87e46698bdf168", "url": "https://github.com/mulesoft/mule/commit/f2b709fc9edd13ab256f91c13f87e46698bdf168", "message": "MULE-18542: review.", "committedDate": "2020-07-22T13:46:27Z", "type": "forcePushed"}, {"oid": "1c5e4c123d75661357d9ff1deeb6d166df15e6d0", "url": "https://github.com/mulesoft/mule/commit/1c5e4c123d75661357d9ff1deeb6d166df15e6d0", "message": "MULE-18542: review.", "committedDate": "2020-07-24T20:13:55Z", "type": "forcePushed"}, {"oid": "c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "url": "https://github.com/mulesoft/mule/commit/c58bb53eb08c3b64b4af3b5375c988e5ac4e3584", "message": "MULE-18542: Timer threads leak on redeploy when using Oracle Driver.", "committedDate": "2020-07-31T15:20:35Z", "type": "commit"}, {"oid": "64591e794a14d7cf05ce42a5bdb754c6f070541e", "url": "https://github.com/mulesoft/mule/commit/64591e794a14d7cf05ce42a5bdb754c6f070541e", "message": "MULE-18542: Timer threads leak on redeploy when using Oracle Driver.", "committedDate": "2020-07-31T15:20:35Z", "type": "commit"}, {"oid": "5f3f657b7bd5575589e72d8fc722008de25d64c4", "url": "https://github.com/mulesoft/mule/commit/5f3f657b7bd5575589e72d8fc722008de25d64c4", "message": "MULE-18542: review.", "committedDate": "2020-07-31T15:20:35Z", "type": "commit"}, {"oid": "4e710feccd5669a51a28bdb8ed9b93c20438c4c8", "url": "https://github.com/mulesoft/mule/commit/4e710feccd5669a51a28bdb8ed9b93c20438c4c8", "message": "MULE-18542: add class loader validation.", "committedDate": "2020-07-31T15:20:35Z", "type": "commit"}, {"oid": "1cde0d372996c74b25da0489a756e8f9a996407f", "url": "https://github.com/mulesoft/mule/commit/1cde0d372996c74b25da0489a756e8f9a996407f", "message": "MULE-18542: fix imports.", "committedDate": "2020-07-31T15:20:35Z", "type": "commit"}, {"oid": "b7e811b16dea85217c450016c2846e6fe5848a62", "url": "https://github.com/mulesoft/mule/commit/b7e811b16dea85217c450016c2846e6fe5848a62", "message": "MULE-18542: review.", "committedDate": "2020-07-31T15:20:35Z", "type": "commit"}, {"oid": "aeae598d88ed21ec6eec1b9fa72b9fc0045a86fa", "url": "https://github.com/mulesoft/mule/commit/aeae598d88ed21ec6eec1b9fa72b9fc0045a86fa", "message": "MULE-18542: review.", "committedDate": "2020-07-31T15:20:35Z", "type": "commit"}, {"oid": "aeae598d88ed21ec6eec1b9fa72b9fc0045a86fa", "url": "https://github.com/mulesoft/mule/commit/aeae598d88ed21ec6eec1b9fa72b9fc0045a86fa", "message": "MULE-18542: review.", "committedDate": "2020-07-31T15:20:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTUyMw==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r463759523", "bodyText": "https://stackoverflow.com/questions/16504140/thread-stop-deprecated", "author": "elrodro83", "createdAt": "2020-07-31T18:14:39Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +280,98 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {\n+    try {\n+      if (JDBC_RESOURCE_RELEASER_AVOID_DISPOSE_ORACLE_THREADS) {\n+        return;\n+      }\n+\n+      Thread[] threads = new Thread[activeCount()];\n+      try {\n+        enumerate(threads);\n+      } catch (Throwable t) {\n+        logger\n+            .debug(\"An error occurred trying to obtain available Threads. Thread cleanup will be skipped.\", t);\n+        return;\n+      }\n+\n+      ClassLoader undeployedArtifactClassLoader = this.getClass().getClassLoader();\n+\n+      /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n+      thread leak. This is only meant to stop TimerThread threads spawned\n+      by oracle driver's HAManager class. This timer cannot be fetched\n+      by reflection because, in order to do so, other oracle dependencies\n+      would be required.\n+      * */\n+      for (Thread thread : threads) {\n+        if (isOracleTimerThread(undeployedArtifactClassLoader, thread)) {\n+          try {\n+            thread.stop();", "originalCommit": "e2d37ff23f2bbf9cafef5abd88a73d65f443c20b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba1e9cb9d8dfa18dab315d46c9c160b9456b7784", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex ea4b23194d4..3d912a256ef 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -295,81 +291,55 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n         return;\n       }\n \n-      ClassLoader undeployedArtifactClassLoader = this.getClass().getClassLoader();\n-\n       /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n       thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManager class. This timer cannot be fetched\n+      by oracle driver's HAManger class. This timer cannot be fetched\n       by reflection because, in order to do so, other oracle dependencies\n       would be required.\n       * */\n       for (Thread thread : threads) {\n-        if (isOracleTimerThread(undeployedArtifactClassLoader, thread)) {\n+        if (isThreadApplicationTimerThread(thread)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n+            thread.join();\n           } catch (Throwable e) {\n             logger\n-                .warn(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                      e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n+                       e);\n           }\n         }\n       }\n     } catch (Exception e) {\n-      logger.error(\"An exception occurred while attempting to dispose of oracle timer threads: {}\", e.getMessage());\n+      logger.debug(e.getMessage());\n     }\n   }\n \n-  private boolean isOracleTimerThread(ClassLoader undeployedArtifactClassLoader, Thread thread) {\n-    if (!(undeployedArtifactClassLoader instanceof ArtifactClassLoader)) {\n-      return false;\n-    }\n-    String artifactId = ((ArtifactClassLoader) undeployedArtifactClassLoader).getArtifactId();\n-    Matcher oracleTimerThreadNameMatcher = ORACLE_DRIVER_TIMER_THREAD_PATTERN.matcher(thread.getName());\n-\n+  private boolean isThreadApplicationTimerThread(Thread thread) {\n     return thread.getClass().getSimpleName().equals(ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME)\n-        && oracleTimerThreadNameMatcher.matches()\n-        && (isThreadLoadedByDisposedApplication(artifactId, thread.getContextClassLoader())\n-            || isThreadLoadedByDisposedDomain(artifactId, thread.getContextClassLoader()));\n+        && thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)\n+        && isThreadLoadedByThisClassLoader(thread.getContextClassLoader());\n   }\n \n-  private boolean isThreadLoadedByDisposedDomain(String undeployedArtifactId, ClassLoader threadContextClassLoader) {\n-    try {\n-      Class threadContextClassLoaderClass = threadContextClassLoader.getClass();\n-      if (!threadContextClassLoaderClass.getSimpleName().equals(COMPOSITE_CLASS_LOADER_CLASS_NAME)) {\n-        return false;\n-      }\n-\n-      Method getDelegateClassLoadersMethod = threadContextClassLoaderClass.getMethod(\"getDelegates\");\n-      List<ClassLoader> classLoaderList = (List<ClassLoader>) getDelegateClassLoadersMethod.invoke(threadContextClassLoader);\n+  private boolean isThreadLoadedByThisClassLoader(ClassLoader threadBaseClassLoader) {\n+    ClassLoader threadClassLoader = threadBaseClassLoader;\n+    ClassLoader lastClassLoader = null;\n+    ClassLoader resourceReleaserClassLoader = this.getClass().getClassLoader();\n \n-      for (ClassLoader classLoaderDelegate : classLoaderList) {\n-        if (classLoaderDelegate instanceof ArtifactClassLoader) {\n-          ArtifactClassLoader artifactClassLoader = (ArtifactClassLoader) classLoaderDelegate;\n-          if (artifactClassLoader.getArtifactId().contains(undeployedArtifactId)) {\n-            return true;\n-          }\n-        }\n+    while (threadClassLoader != null) {\n+      lastClassLoader = threadClassLoader;\n+      // It has to be the same reference not equals to\n+      if (threadClassLoader == resourceReleaserClassLoader) {\n+        return true;\n       }\n-\n-    } catch (Exception e) {\n-      logger.warn(\"Exception occurred while attempting to compare {} and {} artifactId.\", threadContextClassLoader,\n-                  this.getClass().getClassLoader());\n+      threadClassLoader = threadClassLoader.getParent();\n     }\n \n-    return false;\n-  }\n-\n-  private boolean isThreadLoadedByDisposedApplication(String undeployedArtifactId, ClassLoader threadContextClassLoader) {\n-    try {\n-      if (!(threadContextClassLoader instanceof MuleArtifactClassLoader)) {\n-        return false;\n+    while (resourceReleaserClassLoader != null) {\n+      if (lastClassLoader == resourceReleaserClassLoader) {\n+        return true;\n       }\n-      String threadClassLoaderArtifactId = ((MuleArtifactClassLoader) threadContextClassLoader).getArtifactId();\n-      return threadClassLoaderArtifactId != null && threadClassLoaderArtifactId.equals(undeployedArtifactId);\n-    } catch (Exception e) {\n-      logger.warn(\"Exception occurred while attempting to compare {} and {} artifact id.\", threadContextClassLoader,\n-                  this.getClass().getClassLoader());\n+      resourceReleaserClassLoader = resourceReleaserClassLoader.getParent();\n     }\n \n     return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTk5OQ==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r463759999", "bodyText": "this method should not finish return until all the interrupted threads are dead, because they may take a while in actually finishing", "author": "elrodro83", "createdAt": "2020-07-31T18:15:36Z", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -264,4 +280,98 @@ private void shutdownMySqlConnectionCleanupThreads(Class<?> classAbandonedConnec\n     throw new ClassNotFoundException(\"No MySql's AbandonedConnectionCleanupThread class was found\");\n   }\n \n+  private void disposeOracleDriverThreads() {", "originalCommit": "e2d37ff23f2bbf9cafef5abd88a73d65f443c20b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba1e9cb9d8dfa18dab315d46c9c160b9456b7784", "chunk": "diff --git a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\nindex ea4b23194d4..3d912a256ef 100644\n--- a/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n+++ b/modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java\n\n@@ -295,81 +291,55 @@ public class JdbcResourceReleaser implements ResourceReleaser {\n         return;\n       }\n \n-      ClassLoader undeployedArtifactClassLoader = this.getClass().getClassLoader();\n-\n       /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n       thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManager class. This timer cannot be fetched\n+      by oracle driver's HAManger class. This timer cannot be fetched\n       by reflection because, in order to do so, other oracle dependencies\n       would be required.\n       * */\n       for (Thread thread : threads) {\n-        if (isOracleTimerThread(undeployedArtifactClassLoader, thread)) {\n+        if (isThreadApplicationTimerThread(thread)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n+            thread.join();\n           } catch (Throwable e) {\n             logger\n-                .warn(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                      e);\n+                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n+                       e);\n           }\n         }\n       }\n     } catch (Exception e) {\n-      logger.error(\"An exception occurred while attempting to dispose of oracle timer threads: {}\", e.getMessage());\n+      logger.debug(e.getMessage());\n     }\n   }\n \n-  private boolean isOracleTimerThread(ClassLoader undeployedArtifactClassLoader, Thread thread) {\n-    if (!(undeployedArtifactClassLoader instanceof ArtifactClassLoader)) {\n-      return false;\n-    }\n-    String artifactId = ((ArtifactClassLoader) undeployedArtifactClassLoader).getArtifactId();\n-    Matcher oracleTimerThreadNameMatcher = ORACLE_DRIVER_TIMER_THREAD_PATTERN.matcher(thread.getName());\n-\n+  private boolean isThreadApplicationTimerThread(Thread thread) {\n     return thread.getClass().getSimpleName().equals(ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME)\n-        && oracleTimerThreadNameMatcher.matches()\n-        && (isThreadLoadedByDisposedApplication(artifactId, thread.getContextClassLoader())\n-            || isThreadLoadedByDisposedDomain(artifactId, thread.getContextClassLoader()));\n+        && thread.getName().contains(ORACLE_DRIVER_TIMER_THREAD_NAME)\n+        && isThreadLoadedByThisClassLoader(thread.getContextClassLoader());\n   }\n \n-  private boolean isThreadLoadedByDisposedDomain(String undeployedArtifactId, ClassLoader threadContextClassLoader) {\n-    try {\n-      Class threadContextClassLoaderClass = threadContextClassLoader.getClass();\n-      if (!threadContextClassLoaderClass.getSimpleName().equals(COMPOSITE_CLASS_LOADER_CLASS_NAME)) {\n-        return false;\n-      }\n-\n-      Method getDelegateClassLoadersMethod = threadContextClassLoaderClass.getMethod(\"getDelegates\");\n-      List<ClassLoader> classLoaderList = (List<ClassLoader>) getDelegateClassLoadersMethod.invoke(threadContextClassLoader);\n+  private boolean isThreadLoadedByThisClassLoader(ClassLoader threadBaseClassLoader) {\n+    ClassLoader threadClassLoader = threadBaseClassLoader;\n+    ClassLoader lastClassLoader = null;\n+    ClassLoader resourceReleaserClassLoader = this.getClass().getClassLoader();\n \n-      for (ClassLoader classLoaderDelegate : classLoaderList) {\n-        if (classLoaderDelegate instanceof ArtifactClassLoader) {\n-          ArtifactClassLoader artifactClassLoader = (ArtifactClassLoader) classLoaderDelegate;\n-          if (artifactClassLoader.getArtifactId().contains(undeployedArtifactId)) {\n-            return true;\n-          }\n-        }\n+    while (threadClassLoader != null) {\n+      lastClassLoader = threadClassLoader;\n+      // It has to be the same reference not equals to\n+      if (threadClassLoader == resourceReleaserClassLoader) {\n+        return true;\n       }\n-\n-    } catch (Exception e) {\n-      logger.warn(\"Exception occurred while attempting to compare {} and {} artifactId.\", threadContextClassLoader,\n-                  this.getClass().getClassLoader());\n+      threadClassLoader = threadClassLoader.getParent();\n     }\n \n-    return false;\n-  }\n-\n-  private boolean isThreadLoadedByDisposedApplication(String undeployedArtifactId, ClassLoader threadContextClassLoader) {\n-    try {\n-      if (!(threadContextClassLoader instanceof MuleArtifactClassLoader)) {\n-        return false;\n+    while (resourceReleaserClassLoader != null) {\n+      if (lastClassLoader == resourceReleaserClassLoader) {\n+        return true;\n       }\n-      String threadClassLoaderArtifactId = ((MuleArtifactClassLoader) threadContextClassLoader).getArtifactId();\n-      return threadClassLoaderArtifactId != null && threadClassLoaderArtifactId.equals(undeployedArtifactId);\n-    } catch (Exception e) {\n-      logger.warn(\"Exception occurred while attempting to compare {} and {} artifact id.\", threadContextClassLoader,\n-                  this.getClass().getClassLoader());\n+      resourceReleaserClassLoader = resourceReleaserClassLoader.getParent();\n     }\n \n     return false;\n"}}, {"oid": "ba1e9cb9d8dfa18dab315d46c9c160b9456b7784", "url": "https://github.com/mulesoft/mule/commit/ba1e9cb9d8dfa18dab315d46c9c160b9456b7784", "message": "MULE-18542: review.\n\n(cherry picked from commit 0756c1898bfcc557d13ee443c6a4fa3293e401ce)", "committedDate": "2020-08-03T11:49:44Z", "type": "commit"}, {"oid": "ba1e9cb9d8dfa18dab315d46c9c160b9456b7784", "url": "https://github.com/mulesoft/mule/commit/ba1e9cb9d8dfa18dab315d46c9c160b9456b7784", "message": "MULE-18542: review.\n\n(cherry picked from commit 0756c1898bfcc557d13ee443c6a4fa3293e401ce)", "committedDate": "2020-08-03T11:49:44Z", "type": "forcePushed"}, {"oid": "e9f5f45de8c0029b1ad4022a5964801290af7bbe", "url": "https://github.com/mulesoft/mule/commit/e9f5f45de8c0029b1ad4022a5964801290af7bbe", "message": "MULE-18542: Euge made a mess, so euge fix.", "committedDate": "2020-08-03T12:07:21Z", "type": "commit"}, {"oid": "628999c55d5efc5136a1843e2a0a9227019281ad", "url": "https://github.com/mulesoft/mule/commit/628999c55d5efc5136a1843e2a0a9227019281ad", "message": "MULE-18542: format.", "committedDate": "2020-08-03T12:13:33Z", "type": "commit"}, {"oid": "2ead01d3f2f699005a8eb93e97867ca16df35472", "url": "https://github.com/mulesoft/mule/commit/2ead01d3f2f699005a8eb93e97867ca16df35472", "message": "MULE-18542: replaced thread.stop with reflection dark magic.", "committedDate": "2020-08-03T14:26:35Z", "type": "commit"}, {"oid": "3cc57db1122de347066c168efa2814edd60d103b", "url": "https://github.com/mulesoft/mule/commit/3cc57db1122de347066c168efa2814edd60d103b", "message": "MULE-18542: fixed some code smells.", "committedDate": "2020-08-03T17:04:26Z", "type": "commit"}, {"oid": "51903361a93913dc4118c9869e72e44e1a661e39", "url": "https://github.com/mulesoft/mule/commit/51903361a93913dc4118c9869e72e44e1a661e39", "message": "MULE-18542: fixed some code smells.", "committedDate": "2020-08-03T17:12:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NTQ3MA==", "url": "https://github.com/mulesoft/mule/pull/9000#discussion_r464595470", "bodyText": "@Issue", "author": "elrodro83", "createdAt": "2020-08-03T18:42:14Z", "path": "modules/deployment/src/test/java/org/mule/runtime/module/deployment/internal/DbDriverThreadLeakTestCase.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.module.deployment.internal;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.junit.Assert.assertThat;\n+import static org.mule.runtime.module.deployment.internal.DeploymentDirectoryWatcher.CHANGE_CHECK_INTERVAL_PROPERTY;\n+\n+import org.mule.runtime.deployment.model.api.application.Application;\n+import org.mule.runtime.module.artifact.api.classloader.ArtifactClassLoader;\n+import org.mule.runtime.module.deployment.api.DeploymentListener;\n+import org.mule.runtime.module.deployment.impl.internal.builder.ApplicationFileBuilder;\n+import org.mule.tck.junit4.rule.SystemProperty;\n+import org.mule.tck.probe.JUnitLambdaProbe;\n+import org.mule.tck.probe.PollingProber;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+\n+public abstract class DbDriverThreadLeakTestCase extends AbstractDeploymentTestCase {\n+\n+  @Rule\n+  public SystemProperty directoryWatcherChangeCheckInterval = new SystemProperty(CHANGE_CHECK_INTERVAL_PROPERTY, \"5\");\n+\n+  private static final int PROBER_POLLING_INTERVAL = 500;\n+  private static final int PROBER_POLLING_TIMEOUT = 8000;\n+  public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer-\";\n+  public static final String ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME = \"TimerThread\";\n+\n+  private final String xmlFile;\n+  private final String appName;\n+\n+  private TestDeploymentListener deploymentListener;\n+\n+  public DbDriverThreadLeakTestCase(boolean parallellDeployment, String appName, String xmlFile) {\n+    super(parallellDeployment);\n+    this.appName = appName;\n+    this.xmlFile = xmlFile;\n+  }\n+\n+  @Test\n+  public void oracleDriverTimerThreadsReleasedOnUndeploy() throws Exception {", "originalCommit": "51903361a93913dc4118c9869e72e44e1a661e39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fc8b22ccb45df496fe081fb84cc29fc989f7cff", "chunk": "diff --git a/modules/deployment/src/test/java/org/mule/runtime/module/deployment/internal/DbDriverThreadLeakTestCase.java b/modules/deployment/src/test/java/org/mule/runtime/module/deployment/internal/DbDriverThreadLeakTestCase.java\nindex d411f10fba8..8df76d63e7b 100644\n--- a/modules/deployment/src/test/java/org/mule/runtime/module/deployment/internal/DbDriverThreadLeakTestCase.java\n+++ b/modules/deployment/src/test/java/org/mule/runtime/module/deployment/internal/DbDriverThreadLeakTestCase.java\n\n@@ -12,6 +12,7 @@ import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n import static org.junit.Assert.assertThat;\n import static org.mule.runtime.module.deployment.internal.DeploymentDirectoryWatcher.CHANGE_CHECK_INTERVAL_PROPERTY;\n \n+import io.qameta.allure.Issue;\n import org.mule.runtime.deployment.model.api.application.Application;\n import org.mule.runtime.module.artifact.api.classloader.ArtifactClassLoader;\n import org.mule.runtime.module.deployment.api.DeploymentListener;\n"}}, {"oid": "9fc8b22ccb45df496fe081fb84cc29fc989f7cff", "url": "https://github.com/mulesoft/mule/commit/9fc8b22ccb45df496fe081fb84cc29fc989f7cff", "message": "MULE-18542: review.", "committedDate": "2020-08-03T18:56:06Z", "type": "commit"}]}