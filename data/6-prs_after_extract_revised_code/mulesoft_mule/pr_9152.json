{"pr_number": 9152, "pr_title": "MULE-18619: Component models not set for infrastructure types in AST", "pr_createdAt": "2020-08-03T13:34:06Z", "pr_url": "https://github.com/mulesoft/mule/pull/9152", "timeline": [{"oid": "2bb60a820e44542c92eb232bfe27243b538f81fe", "url": "https://github.com/mulesoft/mule/commit/2bb60a820e44542c92eb232bfe27243b538f81fe", "message": "move infra mapping", "committedDate": "2020-07-31T23:31:49Z", "type": "commit"}, {"oid": "1e1789427d03a15aec86420b73645b1b1e94db49", "url": "https://github.com/mulesoft/mule/commit/1e1789427d03a15aec86420b73645b1b1e94db49", "message": "further fix for infra", "committedDate": "2020-08-02T15:50:05Z", "type": "commit"}, {"oid": "9b3e2e9a3616fe234053c76ded1902481b6e414c", "url": "https://github.com/mulesoft/mule/commit/9b3e2e9a3616fe234053c76ded1902481b6e414c", "message": "tls union types", "committedDate": "2020-08-02T15:50:13Z", "type": "commit"}, {"oid": "b644ab8a74d569ac69f176f6aae6f4ae552d58a2", "url": "https://github.com/mulesoft/mule/commit/b644ab8a74d569ac69f176f6aae6f4ae552d58a2", "message": "constants", "committedDate": "2020-08-02T15:52:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NzUyMQ==", "url": "https://github.com/mulesoft/mule/pull/9152#discussion_r464647521", "bodyText": "should this be called depedencyExtensions or something like that? The intent of the parameter is now lost", "author": "marianogonzalez", "createdAt": "2020-08-03T20:34:43Z", "path": "modules/extensions-xml-support/src/test/java/org/mule/runtime/extension/internal/loader/validation/DefaultModelValidatorTestCase.java", "diffHunk": "@@ -220,17 +221,17 @@ private ExtensionModel getExtensionModelFrom(String modulePath, Set<ExtensionMod\n   private Set<ExtensionModel> getDependencyExtensions() {\n     ExtensionModel petstore = loadExtension(PetStoreConnector.class, emptySet());\n     ExtensionModel heisenberg = loadExtension(HeisenbergExtension.class, emptySet());\n-    return ImmutableSet.<ExtensionModel>builder().add(petstore, heisenberg).build();\n+    return ImmutableSet.<ExtensionModel>builder().add(petstore, heisenberg, getExtensionModel()).build();\n   }\n \n-  private ExtensionModel loadExtension(Class extension, Set<ExtensionModel> deps) {\n+  private ExtensionModel loadExtension(Class extension, Set<ExtensionModel> extensions) {", "originalCommit": "b644ab8a74d569ac69f176f6aae6f4ae552d58a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4eb380aa3149dba29c24532224ce9a23623a7599", "chunk": "diff --git a/modules/extensions-xml-support/src/test/java/org/mule/runtime/extension/internal/loader/validation/DefaultModelValidatorTestCase.java b/modules/extensions-xml-support/src/test/java/org/mule/runtime/extension/internal/loader/validation/DefaultModelValidatorTestCase.java\nindex a2aaf75c9b8..db2d5b5056b 100644\n--- a/modules/extensions-xml-support/src/test/java/org/mule/runtime/extension/internal/loader/validation/DefaultModelValidatorTestCase.java\n+++ b/modules/extensions-xml-support/src/test/java/org/mule/runtime/extension/internal/loader/validation/DefaultModelValidatorTestCase.java\n\n@@ -224,14 +224,14 @@ public class DefaultModelValidatorTestCase extends AbstractMuleTestCase {\n     return ImmutableSet.<ExtensionModel>builder().add(petstore, heisenberg, getExtensionModel()).build();\n   }\n \n-  private ExtensionModel loadExtension(Class extension, Set<ExtensionModel> extensions) {\n+  private ExtensionModel loadExtension(Class extension, Set<ExtensionModel> depedencyExtensions) {\n     DefaultJavaExtensionModelLoader loader = new DefaultJavaExtensionModelLoader();\n     Map<String, Object> ctx = new HashMap<>();\n     ctx.put(TYPE_PROPERTY_NAME, extension.getName());\n     ctx.put(VERSION, \"1.0.0-SNAPSHOT\");\n     // TODO MULE-14517: This workaround should be replaced for a better and more complete mechanism\n     ctx.put(\"COMPILATION_MODE\", true);\n-    return loader.loadExtensionModel(currentThread().getContextClassLoader(), DslResolvingContext.getDefault(extensions), ctx);\n+    return loader.loadExtensionModel(currentThread().getContextClassLoader(), DslResolvingContext.getDefault(depedencyExtensions), ctx);\n   }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NzkwMw==", "url": "https://github.com/mulesoft/mule/pull/9152#discussion_r464647903", "bodyText": "seems like nothing change here other than formatting? Is taht the case? Can it be reverted then?", "author": "marianogonzalez", "createdAt": "2020-08-03T20:35:28Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/type/ApplicationModelTypeUtils.java", "diffHunk": "@@ -236,38 +238,65 @@ private static void handleNestedParameters(ComponentModel componentModel, Stream\n                                              Multimap<ComponentIdentifier, ComponentModel> nestedComponents,\n                                              ExtensionModelHelper extensionModelHelper,\n                                              ParameterizedModel model, Predicate<ParameterModel> parameterModelFilter) {\n-    childrenComponentModels\n-        .forEach(childComp -> extensionModelHelper.findParameterModel(childComp.getIdentifier(), model)\n-            .filter(parameterModelFilter::test)\n-            // do not handle the callback parameters from the sources\n-            .filter(paramModel -> {\n-              if (model instanceof SourceModel) {\n-                return !(((SourceModel) model).getSuccessCallback()\n-                    .map(sc -> sc.getAllParameterModels().contains(paramModel))\n-                    .orElse(false) ||\n-                    ((SourceModel) model).getErrorCallback()\n-                        .map(ec -> ec.getAllParameterModels().contains(paramModel))\n-                        .orElse(false));\n-              } else {\n-                return true;\n-              }\n-            })\n-            .filter(paramModel -> paramModel.getDslConfiguration().allowsInlineDefinition())\n-            .ifPresent(paramModel -> {\n-              if (isContent(paramModel)) {\n-                componentModel.setParameter(paramModel,\n-                                            new DefaultComponentParameterAst(trim(((ComponentModel) childComp)\n-                                                .getTextContent()),\n-                                                                             () -> paramModel, childComp.getMetadata()));\n-              } else {\n-                enrichComponentModels(componentModel, nestedComponents,\n-                                      of(extensionModelHelper.resolveDslElementModel(paramModel,\n-                                                                                     componentModel\n-                                                                                         .getIdentifier())),\n-                                      paramModel, extensionModelHelper);\n-              }\n-\n-            }));\n+    model.getAllParameterModels()", "originalCommit": "b644ab8a74d569ac69f176f6aae6f4ae552d58a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0OTgyMQ==", "url": "https://github.com/mulesoft/mule/pull/9152#discussion_r464649821", "bodyText": "no, i turned this around, before it iterated the children and matched those against the parameter models, now it iterates the parameter models and looks it up in the dsl.", "author": "elrodro83", "createdAt": "2020-08-03T20:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NzkwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0ODQ2NQ==", "url": "https://github.com/mulesoft/mule/pull/9152#discussion_r464648465", "bodyText": "the flatMaps in a row?? ufff...", "author": "marianogonzalez", "createdAt": "2020-08-03T20:36:36Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/type/ApplicationModelTypeUtils.java", "diffHunk": "@@ -309,26 +334,46 @@ private static void enrichComponentModels(ComponentModel componentModel,\n   }\n \n   private static void handleWrappedElement(ComponentModel componentModel, ComponentModel wrappedComponent,\n-                                           ParameterModel paramModel, ExtensionModelHelper extensionModelHelper) {\n+                                           ParameterModel paramModel, DslElementSyntax paramDsl,\n+                                           ExtensionModelHelper extensionModelHelper) {\n     Multimap<ComponentIdentifier, ComponentModel> nestedWrappedComponents = getNestedComponents(wrappedComponent);\n \n-    Map<ObjectType, Optional<DslElementSyntax>> objectTypeOptionalMap =\n-        extensionModelHelper.resolveSubTypes((ObjectType) paramModel.getType());\n+    paramModel.getType().accept(new MetadataTypeVisitor() {\n \n-    objectTypeOptionalMap.entrySet().stream().filter(entry -> {\n-      if (entry.getValue().isPresent()) {\n-        return getSingleComponentModel(nestedWrappedComponents, getIdentifier(entry.getValue().get())) != null;\n+      @Override\n+      public void visitObject(ObjectType objectType) {\n+        Map<ObjectType, Optional<DslElementSyntax>> objectTypeOptionalMap =\n+            extensionModelHelper.resolveSubTypes((ObjectType) paramModel.getType());\n+\n+        objectTypeOptionalMap.entrySet().stream().filter(entry -> {\n+          if (entry.getValue().isPresent()) {\n+            return getSingleComponentModel(nestedWrappedComponents, getIdentifier(entry.getValue().get())) != null;\n+          }\n+          return false;\n+        }).findFirst().ifPresent(wrappedEntryType -> {\n+          DslElementSyntax wrappedDsl = wrappedEntryType.getValue().get();\n+          wrappedEntryType.getKey()\n+              .accept(getComponentChildVisitor(componentModel,\n+                                               paramModel,\n+                                               wrappedDsl,\n+                                               getSingleComponentModel(nestedWrappedComponents, getIdentifier(wrappedDsl)),\n+                                               extensionModelHelper));\n+        });\n+      }\n+\n+      @Override\n+      public void visitUnion(UnionType unionType) {\n+        unionType.getTypes()\n+            .forEach(type -> getTypeId(type)\n+                .flatMap(paramDsl::getChild)\n+                .flatMap(childDsl -> getIdentifier(childDsl))\n+                .flatMap(childComponentId -> ofNullable(nestedWrappedComponents.get(childComponentId)))", "originalCommit": "b644ab8a74d569ac69f176f6aae6f4ae552d58a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0ODk5NA==", "url": "https://github.com/mulesoft/mule/pull/9152#discussion_r464648994", "bodyText": "The revenge of the Optionals", "author": "elrodro83", "createdAt": "2020-08-03T20:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0ODQ2NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4eb380aa3149dba29c24532224ce9a23623a7599", "url": "https://github.com/mulesoft/mule/commit/4eb380aa3149dba29c24532224ce9a23623a7599", "message": "review", "committedDate": "2020-08-03T20:57:14Z", "type": "commit"}, {"oid": "46c5dfd2b2220e125a80571d3609aa64c4a8910f", "url": "https://github.com/mulesoft/mule/commit/46c5dfd2b2220e125a80571d3609aa64c4a8910f", "message": "formatter", "committedDate": "2020-08-04T13:00:49Z", "type": "commit"}]}