{"pr_number": 8634, "pr_title": "MULE-17710: Add field metadata on ComponentAst for Object MetadataType", "pr_createdAt": "2020-02-06T20:02:47Z", "pr_url": "https://github.com/mulesoft/mule/pull/8634", "timeline": [{"oid": "1a471d8dbb6504277684d45beac2c1daab9f0008", "url": "https://github.com/mulesoft/mule/commit/1a471d8dbb6504277684d45beac2c1daab9f0008", "message": "Move filter for source callback parameters", "committedDate": "2020-02-07T16:45:15Z", "type": "forcePushed"}, {"oid": "8d6598e6e0d405d8349663ad317dba78424ce5d9", "url": "https://github.com/mulesoft/mule/commit/8d6598e6e0d405d8349663ad317dba78424ce5d9", "message": "runtimeMode and also remove coupled code to SDK parsers", "committedDate": "2020-02-10T17:56:50Z", "type": "forcePushed"}, {"oid": "436fbd6e6862d6a6c48a25a429a071711602f096", "url": "https://github.com/mulesoft/mule/commit/436fbd6e6862d6a6c48a25a429a071711602f096", "message": "Formatter", "committedDate": "2020-02-11T16:37:33Z", "type": "forcePushed"}, {"oid": "d21b580ce54cf4d5b540be5671f9c5c328b52afd", "url": "https://github.com/mulesoft/mule/commit/d21b580ce54cf4d5b540be5671f9c5c328b52afd", "message": "comment", "committedDate": "2020-02-12T15:05:57Z", "type": "forcePushed"}, {"oid": "6cf0b0742bcd61890c22239c4f3fca5819fe9238", "url": "https://github.com/mulesoft/mule/commit/6cf0b0742bcd61890c22239c4f3fca5819fe9238", "message": "comment", "committedDate": "2020-02-12T22:46:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MTgyMg==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r379451822", "bodyText": "javadoc", "author": "elrodro83", "createdAt": "2020-02-14T14:15:48Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -314,14 +314,18 @@ public EntityResolver getEntityResolver() {\n       return new ApplicationModel(artifactConfig, artifactDeclaration, getExtensions(),\n                                   artifactProperties, parentConfigurationProperties,\n                                   of(componentBuildingDefinitionRegistry),\n-                                  externalResourceProvider);\n+                                  externalResourceProvider, isRuntimeMode());\n     } catch (MuleRuntimeException e) {\n       throw e;\n     } catch (Exception e) {\n       throw new MuleRuntimeException(e);\n     }\n   }\n \n+  protected boolean isRuntimeMode() {", "originalCommit": "fff74c83532d969496604c58fcb4d9aea356d2fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8548c9965c115810efcffe507b5cb92798ce1b66", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\nindex f8fbcdea9e9..58f4f19afb4 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\n\n@@ -322,6 +322,10 @@ public class MuleArtifactContext extends AbstractRefreshableConfigApplicationCon\n     }\n   }\n \n+  /**\n+   * Defines if the context should be created for Runtime (execution) o not. This has impact on how the AST\n+   * will be populated and created.\n+   */\n   protected boolean isRuntimeMode() {\n     return true;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MTk1NA==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r379451954", "bodyText": "?", "author": "elrodro83", "createdAt": "2020-02-14T14:16:04Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java", "diffHunk": "@@ -261,7 +270,9 @@ protected void onConnectionProvider(HasConnectionProviderModels owner, Connectio\n                 if (dslSyntaxResolver.resolve(model).getElementName().equals(componentIdentifier.getName())) {\n                   modelRef.set(model);\n                 }\n-              };\n+              }", "originalCommit": "fff74c83532d969496604c58fcb4d9aea356d2fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8548c9965c115810efcffe507b5cb92798ce1b66", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\nindex 96b76b29015..0b710d53f57 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\n\n@@ -255,30 +255,24 @@ public class ExtensionModelHelper {\n    * be found.\n    */\n   public Optional<? extends ConnectionProviderModel> findConnectionProviderModel(ComponentIdentifier componentId) {\n-\n-    return extensionConnectionProviderModelByComponentIdentifier.get(componentId, componentIdentifier -> {\n-      return lookupExtensionModelFor(componentIdentifier)\n-          .flatMap(currentExtension -> {\n-            AtomicReference<ConnectionProviderModel> modelRef = new AtomicReference<>();\n-\n-            new ExtensionWalker() {\n-\n-              final DslSyntaxResolver dslSyntaxResolver = dslSyntaxResolversByExtension.get(currentExtension);\n-\n-              @Override\n-              protected void onConnectionProvider(HasConnectionProviderModels owner, ConnectionProviderModel model) {\n-                if (dslSyntaxResolver.resolve(model).getElementName().equals(componentIdentifier.getName())) {\n-                  modelRef.set(model);\n+    return extensionConnectionProviderModelByComponentIdentifier\n+        .get(componentId, componentIdentifier -> lookupExtensionModelFor(componentIdentifier)\n+            .flatMap(currentExtension -> {\n+              AtomicReference<ConnectionProviderModel> modelRef = new AtomicReference<>();\n+              new ExtensionWalker() {\n+\n+                final DslSyntaxResolver dslSyntaxResolver = dslSyntaxResolversByExtension.get(currentExtension);\n+\n+                @Override\n+                protected void onConnectionProvider(HasConnectionProviderModels owner, ConnectionProviderModel model) {\n+                  if (dslSyntaxResolver.resolve(model).getElementName().equals(componentIdentifier.getName())) {\n+                    modelRef.set(model);\n+                  }\n                 }\n-              }\n-\n-          ;\n+              }.walk(currentExtension);\n \n-            }.walk(currentExtension);\n-\n-            return ofNullable(modelRef.get());\n-          });\n-    });\n+              return ofNullable(modelRef.get());\n+            }));\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MTk4Mg==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r379451982", "bodyText": "?", "author": "elrodro83", "createdAt": "2020-02-14T14:16:08Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java", "diffHunk": "@@ -344,7 +355,9 @@ protected void onConnectionProvider(org.mule.runtime.api.meta.model.connection.H\n                 delegate.onConnectionProvider(model);\n                 stop();\n               }\n-            };\n+            }", "originalCommit": "fff74c83532d969496604c58fcb4d9aea356d2fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8548c9965c115810efcffe507b5cb92798ce1b66", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\nindex 96b76b29015..0b710d53f57 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\n\n@@ -357,8 +351,6 @@ public class ExtensionModelHelper {\n               }\n             }\n \n-        ;\n-\n             @Override\n             protected void onOperation(HasOperationModels owner, OperationModel model) {\n               if (dslSyntaxResolver.resolve(model).getElementName().equals(componentIdentifier.getName())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1MjU4OA==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r379452588", "bodyText": "extract common stuff between this method and the one above", "author": "elrodro83", "createdAt": "2020-02-14T14:17:21Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java", "diffHunk": "@@ -398,6 +411,58 @@ protected void onNestable(ComposableModel owner, NestableElementModel model) {\n         .findFirst();\n   }\n \n+  public DslElementSyntax resolveDslElementModel(NamedObject component, ComponentIdentifier componentIdentifier) {\n+    Optional<ExtensionModel> optionalExtensionModel = lookupExtensionModelFor(componentIdentifier);\n+    ExtensionModel extensionModel = optionalExtensionModel\n+        .orElseThrow(() -> new IllegalStateException(\"Extension Model in context not present for componentIdentifier: \"\n+            + componentIdentifier));\n+\n+    final DslSyntaxResolver dslSyntaxResolver = dslSyntaxResolversByExtension.get(extensionModel);\n+\n+    return dslSyntaxResolver.resolve(component);\n+  }\n+\n+  public Optional<DslElementSyntax> resolveDslElementModel(MetadataType metadataType, ExtensionModel extensionModel) {\n+    return dslSyntaxResolversByExtension.get(extensionModel).resolve(metadataType);\n+  }\n+\n+  public DslElementSyntax resolveDslElementModel(ParameterModel parameterModel, ComponentIdentifier componentIdentifier) {", "originalCommit": "fff74c83532d969496604c58fcb4d9aea356d2fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8548c9965c115810efcffe507b5cb92798ce1b66", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\nindex 96b76b29015..0b710d53f57 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\n\n@@ -412,14 +404,18 @@ public class ExtensionModelHelper {\n   }\n \n   public DslElementSyntax resolveDslElementModel(NamedObject component, ComponentIdentifier componentIdentifier) {\n+    final DslSyntaxResolver dslSyntaxResolver = getDslSyntaxResolver(componentIdentifier);\n+\n+    return dslSyntaxResolver.resolve(component);\n+  }\n+\n+  private DslSyntaxResolver getDslSyntaxResolver(ComponentIdentifier componentIdentifier) {\n     Optional<ExtensionModel> optionalExtensionModel = lookupExtensionModelFor(componentIdentifier);\n     ExtensionModel extensionModel = optionalExtensionModel\n         .orElseThrow(() -> new IllegalStateException(\"Extension Model in context not present for componentIdentifier: \"\n             + componentIdentifier));\n \n-    final DslSyntaxResolver dslSyntaxResolver = dslSyntaxResolversByExtension.get(extensionModel);\n-\n-    return dslSyntaxResolver.resolve(component);\n+    return dslSyntaxResolversByExtension.get(extensionModel);\n   }\n \n   public Optional<DslElementSyntax> resolveDslElementModel(MetadataType metadataType, ExtensionModel extensionModel) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1NDQ5NA==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r379454494", "bodyText": "can this be made more readable? extract methods, for instance", "author": "elrodro83", "createdAt": "2020-02-14T14:20:58Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java", "diffHunk": "@@ -398,6 +411,58 @@ protected void onNestable(ComposableModel owner, NestableElementModel model) {\n         .findFirst();\n   }\n \n+  public DslElementSyntax resolveDslElementModel(NamedObject component, ComponentIdentifier componentIdentifier) {\n+    Optional<ExtensionModel> optionalExtensionModel = lookupExtensionModelFor(componentIdentifier);\n+    ExtensionModel extensionModel = optionalExtensionModel\n+        .orElseThrow(() -> new IllegalStateException(\"Extension Model in context not present for componentIdentifier: \"\n+            + componentIdentifier));\n+\n+    final DslSyntaxResolver dslSyntaxResolver = dslSyntaxResolversByExtension.get(extensionModel);\n+\n+    return dslSyntaxResolver.resolve(component);\n+  }\n+\n+  public Optional<DslElementSyntax> resolveDslElementModel(MetadataType metadataType, ExtensionModel extensionModel) {\n+    return dslSyntaxResolversByExtension.get(extensionModel).resolve(metadataType);\n+  }\n+\n+  public DslElementSyntax resolveDslElementModel(ParameterModel parameterModel, ComponentIdentifier componentIdentifier) {\n+    Optional<ExtensionModel> optionalExtensionModel = lookupExtensionModelFor(componentIdentifier);\n+    ExtensionModel extensionModel = optionalExtensionModel\n+        .orElseThrow(() -> new IllegalStateException(\"Extension Model in context not present for componentIdentifier: \"\n+            + componentIdentifier));\n+\n+    final DslSyntaxResolver dslSyntaxResolver = dslSyntaxResolversByExtension.get(extensionModel);\n+\n+    return dslSyntaxResolver.resolve(parameterModel);\n+  }\n+\n+  public Map<ObjectType, Optional<DslElementSyntax>> resolveSubTypes(ObjectType type) {\n+    ImmutableMap.Builder<ObjectType, Optional<DslElementSyntax>> mapBuilder = ImmutableMap.builder();\n+    for (ObjectType subType : dslResolvingContext.getTypeCatalog().getSubTypes(type)) {\n+      subType.getAnnotation(TypeIdAnnotation.class).map(TypeIdAnnotation::getValue).ifPresent(\n+                                                                                              typeId -> dslResolvingContext", "originalCommit": "fff74c83532d969496604c58fcb4d9aea356d2fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8548c9965c115810efcffe507b5cb92798ce1b66", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\nindex 96b76b29015..0b710d53f57 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ExtensionModelHelper.java\n\n@@ -412,14 +404,18 @@ public class ExtensionModelHelper {\n   }\n \n   public DslElementSyntax resolveDslElementModel(NamedObject component, ComponentIdentifier componentIdentifier) {\n+    final DslSyntaxResolver dslSyntaxResolver = getDslSyntaxResolver(componentIdentifier);\n+\n+    return dslSyntaxResolver.resolve(component);\n+  }\n+\n+  private DslSyntaxResolver getDslSyntaxResolver(ComponentIdentifier componentIdentifier) {\n     Optional<ExtensionModel> optionalExtensionModel = lookupExtensionModelFor(componentIdentifier);\n     ExtensionModel extensionModel = optionalExtensionModel\n         .orElseThrow(() -> new IllegalStateException(\"Extension Model in context not present for componentIdentifier: \"\n             + componentIdentifier));\n \n-    final DslSyntaxResolver dslSyntaxResolver = dslSyntaxResolversByExtension.get(extensionModel);\n-\n-    return dslSyntaxResolver.resolve(component);\n+    return dslSyntaxResolversByExtension.get(extensionModel);\n   }\n \n   public Optional<DslElementSyntax> resolveDslElementModel(MetadataType metadataType, ExtensionModel extensionModel) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1NzM3Nw==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r379457377", "bodyText": "missing a space?", "author": "elrodro83", "createdAt": "2020-02-14T14:26:24Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java", "diffHunk": "@@ -324,17 +345,19 @@ public ApplicationModel(ArtifactConfig artifactConfig, ArtifactDeclaration artif\n     // TODO MULE-13894 do this only on runtimeMode=true once unified extensionModel names to use camelCase (see smart connectors\n     // and crafted declared extension models)\n     resolveComponentTypes();\n-    muleComponentModels.forEach(componentModel -> componentModel.resolveTypedComponentIdentifier(extensionModelHelper));\n+    muleComponentModels\n+        .forEach(componentModel -> componentModel.resolveTypedComponentIdentifier(extensionModelHelper, runtimeMode));\n     final ComponentLocationVisitor clv = new ComponentLocationVisitor();\n     recursiveStreamWithHierarchy().forEach(clv);\n   }\n \n   public void macroExpandXmlSdkComponents(Set<ExtensionModel> extensionModels) {\n     expandModules(extensionModels, () -> {\n-      // TODO MULE-13894 do this only on runtimeMode=true once unified extensionModel names to use camelCase (see smart\n+      // TODO MULE-13894 do this onorg.springframework.beans.ConversionNotSupportedExceptionly on runtimeMode=true once unified extensionModel names to use camelCase (see smart", "originalCommit": "fff74c83532d969496604c58fcb4d9aea356d2fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8548c9965c115810efcffe507b5cb92798ce1b66", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\nindex 9cddc901ace..59939a0bc73 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\n\n@@ -353,7 +353,7 @@ public class ApplicationModel implements ArtifactAst {\n \n   public void macroExpandXmlSdkComponents(Set<ExtensionModel> extensionModels) {\n     expandModules(extensionModels, () -> {\n-      // TODO MULE-13894 do this onorg.springframework.beans.ConversionNotSupportedExceptionly on runtimeMode=true once unified extensionModel names to use camelCase (see smart\n+      // TODO MULE-13894 do this only on runtimeMode=true once unified extensionModel names to use camelCase (see smart connectors\n       // connectors and crafted declared extension models)\n       resolveComponentTypes();\n       muleComponentModels\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1NzYzNg==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r379457636", "bodyText": "static import", "author": "elrodro83", "createdAt": "2020-02-14T14:26:52Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java", "diffHunk": "@@ -608,8 +615,90 @@ public void onFixedValue(Object value) {\n         });\n       });\n     });\n+\n+    // Use ExtensionModel to register top level and subTypes elements\n+    ReflectionCache reflectionCache = new ReflectionCache();\n+    Map<ComponentIdentifier, MetadataTypeModelAdapter> registry = new HashMap();\n+    extensionModelHelper.getExtensionsModels().stream().forEach(extensionModel -> extensionModel.getTypes().stream()\n+        .filter(p -> IntrospectionUtils.isInstantiable(p, reflectionCache))", "originalCommit": "fff74c83532d969496604c58fcb4d9aea356d2fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8548c9965c115810efcffe507b5cb92798ce1b66", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\nindex 9cddc901ace..59939a0bc73 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\n\n@@ -620,10 +620,8 @@ public class ApplicationModel implements ArtifactAst {\n     ReflectionCache reflectionCache = new ReflectionCache();\n     Map<ComponentIdentifier, MetadataTypeModelAdapter> registry = new HashMap();\n     extensionModelHelper.getExtensionsModels().stream().forEach(extensionModel -> extensionModel.getTypes().stream()\n-        .filter(p -> IntrospectionUtils.isInstantiable(p, reflectionCache))\n-        .forEach(parameterType -> {\n-          registerTopLevelParameter(parameterType, reflectionCache, registry, extensionModel);\n-        }));\n+        .filter(p -> isInstantiable(p, reflectionCache))\n+        .forEach(parameterType -> registerTopLevelParameter(parameterType, reflectionCache, registry, extensionModel)));\n \n     executeOnEveryComponentTree(componentModel -> {\n       if (registry.containsKey(componentModel.getIdentifier())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ1Nzc2OQ==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r379457769", "bodyText": "remove {}", "author": "elrodro83", "createdAt": "2020-02-14T14:27:08Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java", "diffHunk": "@@ -608,8 +615,90 @@ public void onFixedValue(Object value) {\n         });\n       });\n     });\n+\n+    // Use ExtensionModel to register top level and subTypes elements\n+    ReflectionCache reflectionCache = new ReflectionCache();\n+    Map<ComponentIdentifier, MetadataTypeModelAdapter> registry = new HashMap();\n+    extensionModelHelper.getExtensionsModels().stream().forEach(extensionModel -> extensionModel.getTypes().stream()\n+        .filter(p -> IntrospectionUtils.isInstantiable(p, reflectionCache))\n+        .forEach(parameterType -> {\n+          registerTopLevelParameter(parameterType, reflectionCache, registry, extensionModel);", "originalCommit": "fff74c83532d969496604c58fcb4d9aea356d2fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8548c9965c115810efcffe507b5cb92798ce1b66", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\nindex 9cddc901ace..59939a0bc73 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java\n\n@@ -620,10 +620,8 @@ public class ApplicationModel implements ArtifactAst {\n     ReflectionCache reflectionCache = new ReflectionCache();\n     Map<ComponentIdentifier, MetadataTypeModelAdapter> registry = new HashMap();\n     extensionModelHelper.getExtensionsModels().stream().forEach(extensionModel -> extensionModel.getTypes().stream()\n-        .filter(p -> IntrospectionUtils.isInstantiable(p, reflectionCache))\n-        .forEach(parameterType -> {\n-          registerTopLevelParameter(parameterType, reflectionCache, registry, extensionModel);\n-        }));\n+        .filter(p -> isInstantiable(p, reflectionCache))\n+        .forEach(parameterType -> registerTopLevelParameter(parameterType, reflectionCache, registry, extensionModel)));\n \n     executeOnEveryComponentTree(componentModel -> {\n       if (registry.containsKey(componentModel.getIdentifier())) {\n"}}, {"oid": "8548c9965c115810efcffe507b5cb92798ce1b66", "url": "https://github.com/mulesoft/mule/commit/8548c9965c115810efcffe507b5cb92798ce1b66", "message": "PR feedback, second round", "committedDate": "2020-02-17T15:37:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNTA2OQ==", "url": "https://github.com/mulesoft/mule/pull/8634#discussion_r380325069", "bodyText": "add @since", "author": "elrodro83", "createdAt": "2020-02-17T18:37:32Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -322,6 +322,10 @@ public EntityResolver getEntityResolver() {\n     }\n   }\n \n+  /**\n+   * Defines if the context should be created for Runtime (execution) o not. This has impact on how the AST\n+   * will be populated and created.", "originalCommit": "3e0b15ac82054101e443eefa9ec8ff0f9fb42d5c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80e6a47f8ee2f33ef27aa2ab71fee7ec7ba5df4d", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\nindex 58f4f19afb4..a7b0a3e8116 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\n\n@@ -314,7 +314,7 @@ public class MuleArtifactContext extends AbstractRefreshableConfigApplicationCon\n       return new ApplicationModel(artifactConfig, artifactDeclaration, getExtensions(),\n                                   artifactProperties, parentConfigurationProperties,\n                                   of(componentBuildingDefinitionRegistry),\n-                                  externalResourceProvider, isRuntimeMode());\n+                                  externalResourceProvider);\n     } catch (MuleRuntimeException e) {\n       throw e;\n     } catch (Exception e) {\n"}}, {"oid": "80e6a47f8ee2f33ef27aa2ab71fee7ec7ba5df4d", "url": "https://github.com/mulesoft/mule/commit/80e6a47f8ee2f33ef27aa2ab71fee7ec7ba5df4d", "message": "MULE-17710: Add field metadata on ComponentAst for Object MetadataType", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "301f47d2bf22829f7bb280bda291a3ab67d3fd44", "url": "https://github.com/mulesoft/mule/commit/301f47d2bf22829f7bb280bda291a3ab67d3fd44", "message": "Suppor for Map", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "406fa5854e7426390c9bcb380ced1414ae3011ec", "url": "https://github.com/mulesoft/mule/commit/406fa5854e7426390c9bcb380ced1414ae3011ec", "message": "Map support for POJOs as values, wrapped elements etc", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "ba7ef44c06784e63db152f1ecefe37ccf3963c93", "url": "https://github.com/mulesoft/mule/commit/ba7ef44c06784e63db152f1ecefe37ccf3963c93", "message": "Handle Null with wrapped elements", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "67579c61ca3460584a1d8a2b91a0f7fe3ff3bd42", "url": "https://github.com/mulesoft/mule/commit/67579c61ca3460584a1d8a2b91a0f7fe3ff3bd42", "message": "More changes, maps are evil...DSL and maps is the worst thing that I have faced so far...", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "ab7dd14b9888eb2b9f8c249327f39167404d5059", "url": "https://github.com/mulesoft/mule/commit/ab7dd14b9888eb2b9f8c249327f39167404d5059", "message": "Move filter for source callback parameters", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "3fb13c249ec5fe38be866c1f9e7ecf16f296e648", "url": "https://github.com/mulesoft/mule/commit/3fb13c249ec5fe38be866c1f9e7ecf16f296e648", "message": "Fix importedTypes tests for vegan, subtTypes and always look for subtypes and the current type for maps", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "90920cfd514120dfc02f1b65ec8712ffecec0dda", "url": "https://github.com/mulesoft/mule/commit/90920cfd514120dfc02f1b65ec8712ffecec0dda", "message": "runtimeMode and also remove coupled code to SDK parsers", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "a7f533928b3d62e1e160880a28cdbd6443060d24", "url": "https://github.com/mulesoft/mule/commit/a7f533928b3d62e1e160880a28cdbd6443060d24", "message": "Formatter", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "db4c016be14218b349648b63265a2960fbec36dd", "url": "https://github.com/mulesoft/mule/commit/db4c016be14218b349648b63265a2960fbec36dd", "message": "comment", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "9f54dc7196236e4a8bd450f018d6801caab22825", "url": "https://github.com/mulesoft/mule/commit/9f54dc7196236e4a8bd450f018d6801caab22825", "message": "Fix logic for registering top level elements or subTypes with its metadata type model adapter to enabling stereotypes dependencies", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "12be777150c24c3dc191358a277f62649982afe9", "url": "https://github.com/mulesoft/mule/commit/12be777150c24c3dc191358a277f62649982afe9", "message": "PR feedback", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "28278724e2065e47baea6522b8ef4f49651e1db2", "url": "https://github.com/mulesoft/mule/commit/28278724e2065e47baea6522b8ef4f49651e1db2", "message": "PR feedback, second round", "committedDate": "2020-02-17T18:45:14Z", "type": "commit"}, {"oid": "8ceed0667c0e10231cf19a1b9317329169be5d8c", "url": "https://github.com/mulesoft/mule/commit/8ceed0667c0e10231cf19a1b9317329169be5d8c", "message": "Sonar feedback", "committedDate": "2020-02-17T19:44:37Z", "type": "commit"}, {"oid": "8ceed0667c0e10231cf19a1b9317329169be5d8c", "url": "https://github.com/mulesoft/mule/commit/8ceed0667c0e10231cf19a1b9317329169be5d8c", "message": "Sonar feedback", "committedDate": "2020-02-17T19:44:37Z", "type": "forcePushed"}, {"oid": "d29b23378700d83c4002202ff82f1b19b538f47b", "url": "https://github.com/mulesoft/mule/commit/d29b23378700d83c4002202ff82f1b19b538f47b", "message": "Sonar round 2", "committedDate": "2020-02-17T20:58:13Z", "type": "commit"}]}