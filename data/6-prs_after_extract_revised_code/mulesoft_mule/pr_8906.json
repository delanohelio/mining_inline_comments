{"pr_number": 8906, "pr_title": "MULE-17774: ComponentParameterAst#getParameter, left value should not\u2026", "pr_createdAt": "2020-06-09T14:33:54Z", "pr_url": "https://github.com/mulesoft/mule/pull/8906", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDQ5Nw==", "url": "https://github.com/mulesoft/mule/pull/8906#discussion_r437480497", "bodyText": "use StringUtils", "author": "elrodro83", "createdAt": "2020-06-09T14:45:36Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java", "diffHunk": "@@ -473,12 +475,33 @@ public static String getImplicitConfigurationProviderName(ExtensionModel extensi\n   public static boolean isExpression(Object value) {\n     if (value instanceof String) {\n       String trim = ((String) value).trim();\n-      return trim.startsWith(\"#[\") && trim.endsWith(\"]\");\n+      return trim.startsWith(DEFAULT_EXPRESSION_PREFIX) && trim.endsWith(DEFAULT_EXPRESSION_POSTFIX);\n     } else {\n       return false;\n     }\n   }\n \n+  /**\n+   * Parse the given value and remove expression markers if it is considered as an expression.\n+   *\n+   * @param value Value to parse\n+   * @return a String containing the expression without markers or null if the value is not an expression.\n+   */\n+  public static Optional<String> extractExpression(Object value) {\n+    Optional<String> result = Optional.empty();\n+    if (isExpression(value)) {\n+      String expression = (String) value;\n+      if (expression != null && !expression.isEmpty()) {", "originalCommit": "15d0967b3204b8a376eab7dfbba6202d5a24b0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\nindex 5f5bd172317..99951ecfa0d 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\n\n@@ -488,14 +490,14 @@ public class MuleExtensionUtils {\n    * @return a String containing the expression without markers or null if the value is not an expression.\n    */\n   public static Optional<String> extractExpression(Object value) {\n-    Optional<String> result = Optional.empty();\n+    Optional<String> result = empty();\n     if (isExpression(value)) {\n       String expression = (String) value;\n-      if (expression != null && !expression.isEmpty()) {\n+      if (isNotEmpty(expression)) {\n         String trimmedText = expression.trim();\n         result =\n-            Optional.of(trimmedText.substring(DEFAULT_EXPRESSION_PREFIX.length(),\n-                                              trimmedText.length() - DEFAULT_EXPRESSION_POSTFIX.length()));\n+            of(trimmedText.substring(DEFAULT_EXPRESSION_PREFIX.length(),\n+                                     trimmedText.length() - DEFAULT_EXPRESSION_POSTFIX.length()));\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDU3NA==", "url": "https://github.com/mulesoft/mule/pull/8906#discussion_r437480574", "bodyText": "static import", "author": "elrodro83", "createdAt": "2020-06-09T14:45:41Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java", "diffHunk": "@@ -473,12 +475,33 @@ public static String getImplicitConfigurationProviderName(ExtensionModel extensi\n   public static boolean isExpression(Object value) {\n     if (value instanceof String) {\n       String trim = ((String) value).trim();\n-      return trim.startsWith(\"#[\") && trim.endsWith(\"]\");\n+      return trim.startsWith(DEFAULT_EXPRESSION_PREFIX) && trim.endsWith(DEFAULT_EXPRESSION_POSTFIX);\n     } else {\n       return false;\n     }\n   }\n \n+  /**\n+   * Parse the given value and remove expression markers if it is considered as an expression.\n+   *\n+   * @param value Value to parse\n+   * @return a String containing the expression without markers or null if the value is not an expression.\n+   */\n+  public static Optional<String> extractExpression(Object value) {\n+    Optional<String> result = Optional.empty();", "originalCommit": "15d0967b3204b8a376eab7dfbba6202d5a24b0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\nindex 5f5bd172317..99951ecfa0d 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\n\n@@ -488,14 +490,14 @@ public class MuleExtensionUtils {\n    * @return a String containing the expression without markers or null if the value is not an expression.\n    */\n   public static Optional<String> extractExpression(Object value) {\n-    Optional<String> result = Optional.empty();\n+    Optional<String> result = empty();\n     if (isExpression(value)) {\n       String expression = (String) value;\n-      if (expression != null && !expression.isEmpty()) {\n+      if (isNotEmpty(expression)) {\n         String trimmedText = expression.trim();\n         result =\n-            Optional.of(trimmedText.substring(DEFAULT_EXPRESSION_PREFIX.length(),\n-                                              trimmedText.length() - DEFAULT_EXPRESSION_POSTFIX.length()));\n+            of(trimmedText.substring(DEFAULT_EXPRESSION_PREFIX.length(),\n+                                     trimmedText.length() - DEFAULT_EXPRESSION_POSTFIX.length()));\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDc1Mw==", "url": "https://github.com/mulesoft/mule/pull/8906#discussion_r437480753", "bodyText": "static import", "author": "elrodro83", "createdAt": "2020-06-09T14:45:51Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java", "diffHunk": "@@ -473,12 +475,33 @@ public static String getImplicitConfigurationProviderName(ExtensionModel extensi\n   public static boolean isExpression(Object value) {\n     if (value instanceof String) {\n       String trim = ((String) value).trim();\n-      return trim.startsWith(\"#[\") && trim.endsWith(\"]\");\n+      return trim.startsWith(DEFAULT_EXPRESSION_PREFIX) && trim.endsWith(DEFAULT_EXPRESSION_POSTFIX);\n     } else {\n       return false;\n     }\n   }\n \n+  /**\n+   * Parse the given value and remove expression markers if it is considered as an expression.\n+   *\n+   * @param value Value to parse\n+   * @return a String containing the expression without markers or null if the value is not an expression.\n+   */\n+  public static Optional<String> extractExpression(Object value) {\n+    Optional<String> result = Optional.empty();\n+    if (isExpression(value)) {\n+      String expression = (String) value;\n+      if (expression != null && !expression.isEmpty()) {\n+        String trimmedText = expression.trim();\n+        result =\n+            Optional.of(trimmedText.substring(DEFAULT_EXPRESSION_PREFIX.length(),", "originalCommit": "15d0967b3204b8a376eab7dfbba6202d5a24b0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\nindex 5f5bd172317..99951ecfa0d 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\n\n@@ -488,14 +490,14 @@ public class MuleExtensionUtils {\n    * @return a String containing the expression without markers or null if the value is not an expression.\n    */\n   public static Optional<String> extractExpression(Object value) {\n-    Optional<String> result = Optional.empty();\n+    Optional<String> result = empty();\n     if (isExpression(value)) {\n       String expression = (String) value;\n-      if (expression != null && !expression.isEmpty()) {\n+      if (isNotEmpty(expression)) {\n         String trimmedText = expression.trim();\n         result =\n-            Optional.of(trimmedText.substring(DEFAULT_EXPRESSION_PREFIX.length(),\n-                                              trimmedText.length() - DEFAULT_EXPRESSION_POSTFIX.length()));\n+            of(trimmedText.substring(DEFAULT_EXPRESSION_PREFIX.length(),\n+                                     trimmedText.length() - DEFAULT_EXPRESSION_POSTFIX.length()));\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MTU1OA==", "url": "https://github.com/mulesoft/mule/pull/8906#discussion_r437481558", "bodyText": "check for optional presense before setting: extractExpression(rawValue).ifPresent(expression::set)", "author": "elrodro83", "createdAt": "2020-06-09T14:46:54Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java", "diffHunk": "@@ -138,7 +139,7 @@ protected void defaultVisit(MetadataType metadataType) {\n             } else if (!NOT_SUPPORTED.equals(getModel().getExpressionSupport())) {\n               if (isExpression(rawValue)) {\n                 // For complex types that may be the result of an expression, just return the expression\n-                expression.set(rawValue);\n+                expression.set(extractExpression(rawValue).get());", "originalCommit": "15d0967b3204b8a376eab7dfbba6202d5a24b0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java\nindex 29f5bea566f..04fb101a2d5 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java\n\n@@ -137,9 +133,10 @@ public class DefaultComponentParameterAst implements ComponentParameterAst {\n               // For references, just return the name of the referenced object\n               value.set(rawValue);\n             } else if (!NOT_SUPPORTED.equals(getModel().getExpressionSupport())) {\n-              if (isExpression(rawValue)) {\n+              Optional<String> expressionOpt = extractExpression(rawValue);\n+              if (expressionOpt.isPresent()) {\n                 // For complex types that may be the result of an expression, just return the expression\n-                expression.set(extractExpression(rawValue).get());\n+                expression.set(expressionOpt.get());\n               } else {\n                 value.set(rawValue);\n               }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MTU5OQ==", "url": "https://github.com/mulesoft/mule/pull/8906#discussion_r437481599", "bodyText": "check for optional presense before setting: extractExpression(rawValue).ifPresent(expression::set)", "author": "elrodro83", "createdAt": "2020-06-09T14:46:57Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java", "diffHunk": "@@ -64,7 +65,7 @@ private DefaultComponentParameterAst(String rawValue, Object complexValue, Suppl\n       } else if (isEmpty(rawValue)) {\n         final Object defaultValue = getModel().getDefaultValue();\n         if (isExpression(defaultValue)) {\n-          return left((String) defaultValue);\n+          return left(extractExpression(defaultValue).get());", "originalCommit": "15d0967b3204b8a376eab7dfbba6202d5a24b0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java\nindex 29f5bea566f..04fb101a2d5 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/DefaultComponentParameterAst.java\n\n@@ -64,11 +64,7 @@ public class DefaultComponentParameterAst implements ComponentParameterAst {\n         // previous implementations were assuming that an empty string was the same as the param not being present...\n       } else if (isEmpty(rawValue)) {\n         final Object defaultValue = getModel().getDefaultValue();\n-        if (isExpression(defaultValue)) {\n-          return left(extractExpression(defaultValue).get());\n-        } else {\n-          return right(defaultValue);\n-        }\n+        return extractExpression(defaultValue).map(Either::left).orElseGet(() -> right(defaultValue));\n       } else {\n         AtomicReference<String> expression = new AtomicReference<>();\n         AtomicReference<Object> value = new AtomicReference<>();\n"}}, {"oid": "87b30a170d25f5f92c3795861e478fae180d29c8", "url": "https://github.com/mulesoft/mule/commit/87b30a170d25f5f92c3795861e478fae180d29c8", "message": "MULE-17774: ComponentParameterAst#getParameter, left value should not have the #[] markers", "committedDate": "2020-06-09T18:57:16Z", "type": "commit"}, {"oid": "819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "url": "https://github.com/mulesoft/mule/commit/819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "message": "MULE-17774: Requested changes", "committedDate": "2020-06-09T18:57:16Z", "type": "commit"}, {"oid": "819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "url": "https://github.com/mulesoft/mule/commit/819ac4409a163e6bae67c4fe7cec78f3a4d1120e", "message": "MULE-17774: Requested changes", "committedDate": "2020-06-09T18:57:16Z", "type": "forcePushed"}, {"oid": "994a08746dd42f9bb81f33886b33b4f990eabb93", "url": "https://github.com/mulesoft/mule/commit/994a08746dd42f9bb81f33886b33b4f990eabb93", "message": "MULE-17774: MacroExpansionModuleModel filter expression on expandGlobalElement", "committedDate": "2020-06-10T16:29:08Z", "type": "commit"}]}