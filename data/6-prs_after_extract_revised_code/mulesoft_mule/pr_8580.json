{"pr_number": 8580, "pr_title": "MULE-17950: For multi level metadata, same values are retrieved even \u2026", "pr_createdAt": "2020-01-14T19:31:24Z", "pr_url": "https://github.com/mulesoft/mule/pull/8580", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMjIwOQ==", "url": "https://github.com/mulesoft/mule/pull/8580#discussion_r366532209", "bodyText": "static import", "author": "lucianoRM", "createdAt": "2020-01-14T19:33:42Z", "path": "modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java", "diffHunk": "@@ -108,17 +113,39 @@ void declare(ConfigurationDeclarer configDeclarer, ClassTypeLoader loader, Set<E\n   }\n \n   private void declareMetadata(OperationDeclarer operation, ClassTypeLoader loader) {\n-    ImmutableMap.Builder<String, Supplier<? extends InputTypeResolver>> inputResolver = ImmutableMap.builder();\n-    inputResolver.put(BODY_PARAM, InvokeRequestTypeResolver::new);\n-    inputResolver.put(HEADERS_PARAM, InvokeInputHeadersTypeResolver::new);\n-    inputResolver.put(ATTACHMENTS_PARAM, InvokeInputAttachmentsTypeResolver::new);\n-    DefaultMetadataResolverFactory factory = new DefaultMetadataResolverFactory(InvokeKeysResolver::new,\n-                                                                                inputResolver.build(),\n-                                                                                InvokeOutputTypeResolver::new,\n+    Map<String, Supplier<? extends InputTypeResolver>> inputResolver =\n+        ImmutableMap.<String, Supplier<? extends InputTypeResolver>>builder()\n+            .put(BODY_PARAM, InvokeRequestTypeResolver::new)\n+            .put(HEADERS_PARAM, InvokeInputHeadersTypeResolver::new)\n+            .put(ATTACHMENTS_PARAM, InvokeInputAttachmentsTypeResolver::new)\n+            .build();\n+    Supplier<TypeKeysResolver> keysResolverSupplier = InvokeKeysResolver::new;\n+    Supplier<OutputTypeResolver> outputResolverSupplier = InvokeOutputTypeResolver::new;\n+    DefaultMetadataResolverFactory factory = new DefaultMetadataResolverFactory(keysResolverSupplier,\n+                                                                                inputResolver,\n+                                                                                outputResolverSupplier,\n                                                                                 NullMetadataResolver::new);\n     operation.withModelProperty(new MetadataResolverFactoryModelProperty(() -> factory));\n     operation.withModelProperty(new MetadataKeyIdModelProperty(loader.load(WebServiceTypeKey.class), KEYS_GROUP,\n                                                                SOAP_INVOKE_METADATA_CATEGORY));\n+\n+    Map<String, String> inputResolversByParam = inputResolver\n+        .entrySet().stream()\n+        .collect(Collectors.toImmutableMap(Map.Entry::getKey,", "originalCommit": "dd0a5cda61e81492de32daeba7e9ab3d33be12c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df08cccfdafafc67df91828859a69248c95a438f", "chunk": "diff --git a/modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java b/modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java\nindex cefc55b297f..17cb3fc8f04 100644\n--- a/modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java\n+++ b/modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java\n\n@@ -119,31 +119,28 @@ public class SoapInvokeOperationDeclarer {\n             .put(HEADERS_PARAM, InvokeInputHeadersTypeResolver::new)\n             .put(ATTACHMENTS_PARAM, InvokeInputAttachmentsTypeResolver::new)\n             .build();\n-    Supplier<TypeKeysResolver> keysResolverSupplier = InvokeKeysResolver::new;\n-    Supplier<OutputTypeResolver> outputResolverSupplier = InvokeOutputTypeResolver::new;\n-    DefaultMetadataResolverFactory factory = new DefaultMetadataResolverFactory(keysResolverSupplier,\n+    TypeKeysResolver keysResolver = new InvokeKeysResolver();\n+    OutputTypeResolver outputResolver = new InvokeOutputTypeResolver();\n+    DefaultMetadataResolverFactory factory = new DefaultMetadataResolverFactory(() -> keysResolver,\n                                                                                 inputResolver,\n-                                                                                outputResolverSupplier,\n+                                                                                () -> outputResolver,\n                                                                                 NullMetadataResolver::new);\n     operation.withModelProperty(new MetadataResolverFactoryModelProperty(() -> factory));\n     operation.withModelProperty(new MetadataKeyIdModelProperty(loader.load(WebServiceTypeKey.class), KEYS_GROUP,\n-                                                               SOAP_INVOKE_METADATA_CATEGORY));\n+                                                               keysResolver.getCategoryName()));\n \n     Map<String, String> inputResolversByParam = inputResolver\n         .entrySet().stream()\n-        .collect(Collectors.toImmutableMap(Map.Entry::getKey,\n-                                           e -> e.getValue().get().getResolverName()));\n-    String outputResolver = outputResolverSupplier.get().getResolverName();\n-    String attributesResolver = NULL_RESOLVER_NAME;\n-    String keysResolver = keysResolverSupplier.get().getResolverName();\n+        .collect(toImmutableMap(Map.Entry::getKey,\n+                                e -> e.getValue().get().getResolverName()));\n \n     // TODO MULE-15638 - Once Metadata API 2.0 is implemented we will know better if the resolver requires or not a connection\n     // of config.\n-    operation.withModelProperty(new TypeResolversInformationModelProperty(SOAP_INVOKE_METADATA_CATEGORY,\n+    operation.withModelProperty(new TypeResolversInformationModelProperty(keysResolver.getCategoryName(),\n                                                                           inputResolversByParam,\n-                                                                          outputResolver,\n-                                                                          attributesResolver,\n-                                                                          keysResolver,\n+                                                                          outputResolver.getResolverName(),\n+                                                                          NULL_RESOLVER_NAME,\n+                                                                          keysResolver.getResolverName(),\n                                                                           true,\n                                                                           true));\n   }\n"}}, {"oid": "df08cccfdafafc67df91828859a69248c95a438f", "url": "https://github.com/mulesoft/mule/commit/df08cccfdafafc67df91828859a69248c95a438f", "message": "Fix category", "committedDate": "2020-01-15T17:17:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzA3Mg==", "url": "https://github.com/mulesoft/mule/pull/8580#discussion_r367003072", "bodyText": "@alegmarra the value hardcoded here was added when the metadata cache was implemented but didn't match the getCategoryName() returned by the InvokeKeysResolver. Therefore I have also fixed that.", "author": "gsfernandes", "createdAt": "2020-01-15T17:19:09Z", "path": "modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java", "diffHunk": "@@ -108,17 +113,36 @@ void declare(ConfigurationDeclarer configDeclarer, ClassTypeLoader loader, Set<E\n   }\n \n   private void declareMetadata(OperationDeclarer operation, ClassTypeLoader loader) {\n-    ImmutableMap.Builder<String, Supplier<? extends InputTypeResolver>> inputResolver = ImmutableMap.builder();\n-    inputResolver.put(BODY_PARAM, InvokeRequestTypeResolver::new);\n-    inputResolver.put(HEADERS_PARAM, InvokeInputHeadersTypeResolver::new);\n-    inputResolver.put(ATTACHMENTS_PARAM, InvokeInputAttachmentsTypeResolver::new);\n-    DefaultMetadataResolverFactory factory = new DefaultMetadataResolverFactory(InvokeKeysResolver::new,\n-                                                                                inputResolver.build(),\n-                                                                                InvokeOutputTypeResolver::new,\n+    Map<String, Supplier<? extends InputTypeResolver>> inputResolver =\n+        ImmutableMap.<String, Supplier<? extends InputTypeResolver>>builder()\n+            .put(BODY_PARAM, InvokeRequestTypeResolver::new)\n+            .put(HEADERS_PARAM, InvokeInputHeadersTypeResolver::new)\n+            .put(ATTACHMENTS_PARAM, InvokeInputAttachmentsTypeResolver::new)\n+            .build();\n+    TypeKeysResolver keysResolver = new InvokeKeysResolver();\n+    OutputTypeResolver outputResolver = new InvokeOutputTypeResolver();\n+    DefaultMetadataResolverFactory factory = new DefaultMetadataResolverFactory(() -> keysResolver,\n+                                                                                inputResolver,\n+                                                                                () -> outputResolver,\n                                                                                 NullMetadataResolver::new);\n     operation.withModelProperty(new MetadataResolverFactoryModelProperty(() -> factory));\n     operation.withModelProperty(new MetadataKeyIdModelProperty(loader.load(WebServiceTypeKey.class), KEYS_GROUP,\n-                                                               SOAP_INVOKE_METADATA_CATEGORY));\n+                                                               keysResolver.getCategoryName()));", "originalCommit": "df08cccfdafafc67df91828859a69248c95a438f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d545f4b5c3e2856e439a1819828219886df60df1", "chunk": "diff --git a/modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java b/modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java\nindex 17cb3fc8f04..cefc55b297f 100644\n--- a/modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java\n+++ b/modules/extensions-soap-support/src/main/java/org/mule/runtime/module/extension/soap/internal/loader/SoapInvokeOperationDeclarer.java\n\n@@ -119,28 +119,31 @@ public class SoapInvokeOperationDeclarer {\n             .put(HEADERS_PARAM, InvokeInputHeadersTypeResolver::new)\n             .put(ATTACHMENTS_PARAM, InvokeInputAttachmentsTypeResolver::new)\n             .build();\n-    TypeKeysResolver keysResolver = new InvokeKeysResolver();\n-    OutputTypeResolver outputResolver = new InvokeOutputTypeResolver();\n-    DefaultMetadataResolverFactory factory = new DefaultMetadataResolverFactory(() -> keysResolver,\n+    Supplier<TypeKeysResolver> keysResolverSupplier = InvokeKeysResolver::new;\n+    Supplier<OutputTypeResolver> outputResolverSupplier = InvokeOutputTypeResolver::new;\n+    DefaultMetadataResolverFactory factory = new DefaultMetadataResolverFactory(keysResolverSupplier,\n                                                                                 inputResolver,\n-                                                                                () -> outputResolver,\n+                                                                                outputResolverSupplier,\n                                                                                 NullMetadataResolver::new);\n     operation.withModelProperty(new MetadataResolverFactoryModelProperty(() -> factory));\n     operation.withModelProperty(new MetadataKeyIdModelProperty(loader.load(WebServiceTypeKey.class), KEYS_GROUP,\n-                                                               keysResolver.getCategoryName()));\n+                                                               SOAP_INVOKE_METADATA_CATEGORY));\n \n     Map<String, String> inputResolversByParam = inputResolver\n         .entrySet().stream()\n-        .collect(toImmutableMap(Map.Entry::getKey,\n-                                e -> e.getValue().get().getResolverName()));\n+        .collect(Collectors.toImmutableMap(Map.Entry::getKey,\n+                                           e -> e.getValue().get().getResolverName()));\n+    String outputResolver = outputResolverSupplier.get().getResolverName();\n+    String attributesResolver = NULL_RESOLVER_NAME;\n+    String keysResolver = keysResolverSupplier.get().getResolverName();\n \n     // TODO MULE-15638 - Once Metadata API 2.0 is implemented we will know better if the resolver requires or not a connection\n     // of config.\n-    operation.withModelProperty(new TypeResolversInformationModelProperty(keysResolver.getCategoryName(),\n+    operation.withModelProperty(new TypeResolversInformationModelProperty(SOAP_INVOKE_METADATA_CATEGORY,\n                                                                           inputResolversByParam,\n-                                                                          outputResolver.getResolverName(),\n-                                                                          NULL_RESOLVER_NAME,\n-                                                                          keysResolver.getResolverName(),\n+                                                                          outputResolver,\n+                                                                          attributesResolver,\n+                                                                          keysResolver,\n                                                                           true,\n                                                                           true));\n   }\n"}}, {"oid": "d545f4b5c3e2856e439a1819828219886df60df1", "url": "https://github.com/mulesoft/mule/commit/d545f4b5c3e2856e439a1819828219886df60df1", "message": "MULE-17950: For multi level metadata, same values are retrieved even when changing key parts on SOAP connectors", "committedDate": "2020-01-21T13:50:45Z", "type": "commit"}, {"oid": "a689a99af41cbf832a49a321e38b983973b88e30", "url": "https://github.com/mulesoft/mule/commit/a689a99af41cbf832a49a321e38b983973b88e30", "message": "PR feedback", "committedDate": "2020-01-21T13:50:45Z", "type": "commit"}, {"oid": "bb18aea134100bf6a5f8f5d4898f917ba1e70861", "url": "https://github.com/mulesoft/mule/commit/bb18aea134100bf6a5f8f5d4898f917ba1e70861", "message": "Fix category", "committedDate": "2020-01-21T13:50:45Z", "type": "commit"}, {"oid": "2d58c1ff8fadc2e8e239a227f7858041fe3787bd", "url": "https://github.com/mulesoft/mule/commit/2d58c1ff8fadc2e8e239a227f7858041fe3787bd", "message": "Fix test", "committedDate": "2020-01-21T13:50:45Z", "type": "commit"}, {"oid": "93342f126ab5bbee977bf066752cb6b9b375e54c", "url": "https://github.com/mulesoft/mule/commit/93342f126ab5bbee977bf066752cb6b9b375e54c", "message": "Fix test, adding typeResolverInformation model property to json for assertions", "committedDate": "2020-01-21T15:16:06Z", "type": "commit"}, {"oid": "93342f126ab5bbee977bf066752cb6b9b375e54c", "url": "https://github.com/mulesoft/mule/commit/93342f126ab5bbee977bf066752cb6b9b375e54c", "message": "Fix test, adding typeResolverInformation model property to json for assertions", "committedDate": "2020-01-21T15:16:06Z", "type": "forcePushed"}]}