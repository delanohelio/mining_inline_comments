{"pr_number": 9245, "pr_title": "CMTS-32: Improve error messages and validations", "pr_createdAt": "2020-08-21T20:21:24Z", "pr_url": "https://github.com/mulesoft/mule/pull/9245", "timeline": [{"oid": "20d36e14b2ab70ee52cdd9af847b1669d2eab8f3", "url": "https://github.com/mulesoft/mule/commit/20d36e14b2ab70ee52cdd9af847b1669d2eab8f3", "message": "round 2, clean up code, better things happen when we do refators", "committedDate": "2020-08-22T03:58:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5Nzg4OA==", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475397888", "bodyText": "Be sure to change this is you modify the message from the other PR", "author": "lucianoRM", "createdAt": "2020-08-24T07:37:07Z", "path": "modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/ConnectivityTestingTestCase.java", "diffHunk": "@@ -46,7 +46,7 @@ public void testConnectionWrongConfigurationName() {\n     ConnectionValidationResult connectionValidationResult = session.testConnection(\"invalidConfigName\");\n     assertThat(connectionValidationResult.isValid(), equalTo(false));\n     assertThat(connectionValidationResult.getMessage(),\n-               equalTo(\"Could not find a connection provider for configuration: 'invalidConfigName'\"));\n+               equalTo(\"Could not perform test connection for configuration: 'invalidConfigName' due to a connection provider is not defined\"));", "originalCommit": "2396a89367ee621744db0ec30dc4af2ff5251fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "368b298bce37b2d68a0095addbd03e564cf22e64", "chunk": "diff --git a/modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/ConnectivityTestingTestCase.java b/modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/ConnectivityTestingTestCase.java\nindex f84eda3781f..385c1df0edd 100644\n--- a/modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/ConnectivityTestingTestCase.java\n+++ b/modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/ConnectivityTestingTestCase.java\n\n@@ -43,10 +44,12 @@ public class ConnectivityTestingTestCase extends DeclarationSessionTestCase {\n \n   @Test\n   public void testConnectionWrongConfigurationName() {\n-    ConnectionValidationResult connectionValidationResult = session.testConnection(\"invalidConfigName\");\n+    String invalidConfigName = \"invalidConfigName\";\n+    ConnectionValidationResult connectionValidationResult = session.testConnection(invalidConfigName);\n     assertThat(connectionValidationResult.isValid(), equalTo(false));\n     assertThat(connectionValidationResult.getMessage(),\n-               equalTo(\"Could not perform test connection for configuration: 'invalidConfigName' due to a connection provider is not defined\"));\n+               equalTo(format(\"Could not perform test connection for configuration: '%s'. Connection provider is not defined\",\n+                              invalidConfigName)));\n   }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMTc3Mg==", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475401772", "bodyText": "I wouldn't add this type of methods here. In any case, add a method that accepts the configName you want to use.\nBut this one seems too specific for the test case you are trying.\nAt least the idea of this class, was to provide an easy way to declare all elements of the TestExtension. But not to test different cases. That should be the concern of the user class", "author": "lucianoRM", "createdAt": "2020-08-24T07:44:39Z", "path": "modules/tooling-support-parent/test-extension/src/test/java/org/mule/runtime/module/tooling/TestExtensionDeclarationUtils.java", "diffHunk": "@@ -310,15 +323,36 @@ public static OperationElementDeclaration multiLevelShowInDslGroupOPDeclaration(\n     if (country != null) {\n       parameterGroupElementDeclarer.withParameter(\"country\", ParameterSimpleValue.of(country));\n     }\n+    if (city != null) {\n+      parameterGroupElementDeclarer.withParameter(\"city\", ParameterSimpleValue.of(city));\n+    }\n \n-    if (continent != null || country != null) {\n+    if (continent != null || country != null || city != null) {\n       elementDeclarer.withParameterGroup(parameterGroupElementDeclarer.getDeclaration());\n     }\n     return elementDeclarer.getDeclaration();\n+\n   }\n \n   public static ComponentElementDeclaration<?> invalidComponentDeclaration() {\n     return TEST_EXTENSION_DECLARER.newConstruct(\"invalid\").getDeclaration();\n   }\n \n+  public static ComponentElementDeclaration<?> componentDeclarationWrongConfigRef() {", "originalCommit": "2396a89367ee621744db0ec30dc4af2ff5251fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNzQzNg==", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475637436", "bodyText": "Ok, I will change it.", "author": "gsfernandes", "createdAt": "2020-08-24T14:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMTc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ecde7783f11970417c75b48bbcec09aa18a05e25", "chunk": "diff --git a/modules/tooling-support-parent/test-extension/src/test/java/org/mule/runtime/module/tooling/TestExtensionDeclarationUtils.java b/modules/tooling-support-parent/test-extension/src/test/java/org/mule/runtime/module/tooling/TestExtensionDeclarationUtils.java\nindex 7a481ca0c54..25270e7206c 100644\n--- a/modules/tooling-support-parent/test-extension/src/test/java/org/mule/runtime/module/tooling/TestExtensionDeclarationUtils.java\n+++ b/modules/tooling-support-parent/test-extension/src/test/java/org/mule/runtime/module/tooling/TestExtensionDeclarationUtils.java\n\n@@ -309,29 +332,11 @@ public class TestExtensionDeclarationUtils {\n   }\n \n   public static OperationElementDeclaration multiLevelShowInDslGroupOPDeclaration(String configName, String continent, String country) {\n-    return multiLevelShowInDslGroupOPDeclaration(configName, continent, country, null);\n-  }\n-\n-  public static OperationElementDeclaration multiLevelShowInDslGroupOPDeclaration(String configName, String continent, String country, String city) {\n     OperationElementDeclarer elementDeclarer = TEST_EXTENSION_DECLARER\n             .newOperation(MULTI_LEVEL_SHOW_IN_DSL_GROUP_PARTIAL_TYPE_KEYS_METADATA_KEY_OP_ELEMENT_NAME)\n             .withConfig(configName);\n-    ParameterGroupElementDeclarer parameterGroupElementDeclarer = newParameterGroup(\"LocationKeyShowInDsl\");\n-    if (continent != null) {\n-      parameterGroupElementDeclarer.withParameter(\"continent\", ParameterSimpleValue.of(continent));\n-    }\n-    if (country != null) {\n-      parameterGroupElementDeclarer.withParameter(\"country\", ParameterSimpleValue.of(country));\n-    }\n-    if (city != null) {\n-      parameterGroupElementDeclarer.withParameter(\"city\", ParameterSimpleValue.of(city));\n-    }\n-\n-    if (continent != null || country != null || city != null) {\n-      elementDeclarer.withParameterGroup(parameterGroupElementDeclarer.getDeclaration());\n-    }\n+    setLocationParameterGroup(continent, country, elementDeclarer, \"LocationKeyShowInDsl\");\n     return elementDeclarer.getDeclaration();\n-\n   }\n \n   public static ComponentElementDeclaration<?> invalidComponentDeclaration() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMjgxNA==", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475402814", "bodyText": "artifactHelper is  being initialized once any of these 3 lazyValues are. That should not be a problem but maybe it would be better for them to accept LazyValue ?", "author": "lucianoRM", "createdAt": "2020-08-24T07:46:45Z", "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "diffHunk": "@@ -100,215 +63,129 @@\n   @Inject\n   private ExpressionManager expressionManager;\n \n-  private LazyValue<ArtifactHelper> artifactHelperLazyValue;\n+  private final LazyValue<ArtifactHelper> artifactHelperLazyValue;\n+  private final LazyValue<ValueProviderExecutor> valueProviderExecutorLazyValue;\n+  private final LazyValue<MetadataKeysExecutor> metadataKeysExecutorLazyValue;\n+  private final LazyValue<MetadataComponentExecutor> metadataComponentExecutorLazyValue;\n \n   InternalDeclarationSession(ArtifactDeclaration artifactDeclaration) {\n     this.artifactHelperLazyValue =\n         new LazyValue<>(() -> new ArtifactHelper(extensionManager, componentLocator, artifactDeclaration));\n+    this.valueProviderExecutorLazyValue =\n+        new LazyValue<>(() -> new ValueProviderExecutor(muleContext, connectionManager, expressionManager, reflectionCache,\n+                                                        artifactHelper()));\n+    this.metadataKeysExecutorLazyValue =\n+        new LazyValue<>(() -> new MetadataKeysExecutor(connectionManager, reflectionCache, artifactHelper()));\n+    this.metadataComponentExecutorLazyValue =\n+        new LazyValue<>(() -> new MetadataComponentExecutor(connectionManager, reflectionCache, artifactHelper()));", "originalCommit": "2396a89367ee621744db0ec30dc4af2ff5251fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMzkzMg==", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475633932", "bodyText": "Actually the artifactHelper is used before to validate extension model from declaration so at the point the executor is used the artifactHelper is already initialized.", "author": "gsfernandes", "createdAt": "2020-08-24T14:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMjgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "ecde7783f11970417c75b48bbcec09aa18a05e25", "chunk": "diff --git a/modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java b/modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java\nindex 64b57e506d9..e63b20ef3d8 100644\n--- a/modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java\n+++ b/modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java\n\n@@ -63,39 +104,17 @@ public class InternalDeclarationSession implements DeclarationSession {\n   @Inject\n   private ExpressionManager expressionManager;\n \n-  private final LazyValue<ArtifactHelper> artifactHelperLazyValue;\n-  private final LazyValue<ValueProviderExecutor> valueProviderExecutorLazyValue;\n-  private final LazyValue<MetadataKeysExecutor> metadataKeysExecutorLazyValue;\n-  private final LazyValue<MetadataComponentExecutor> metadataComponentExecutorLazyValue;\n+  private LazyValue<ArtifactHelper> artifactHelperLazyValue;\n \n   InternalDeclarationSession(ArtifactDeclaration artifactDeclaration) {\n     this.artifactHelperLazyValue =\n         new LazyValue<>(() -> new ArtifactHelper(extensionManager, componentLocator, artifactDeclaration));\n-    this.valueProviderExecutorLazyValue =\n-        new LazyValue<>(() -> new ValueProviderExecutor(muleContext, connectionManager, expressionManager, reflectionCache,\n-                                                        artifactHelper()));\n-    this.metadataKeysExecutorLazyValue =\n-        new LazyValue<>(() -> new MetadataKeysExecutor(connectionManager, reflectionCache, artifactHelper()));\n-    this.metadataComponentExecutorLazyValue =\n-        new LazyValue<>(() -> new MetadataComponentExecutor(connectionManager, reflectionCache, artifactHelper()));\n   }\n \n   private ArtifactHelper artifactHelper() {\n     return artifactHelperLazyValue.get();\n   }\n \n-  private ValueProviderExecutor valueProviderExecutor() {\n-    return valueProviderExecutorLazyValue.get();\n-  }\n-\n-  private MetadataKeysExecutor metadataKeysExecutor() {\n-    return metadataKeysExecutorLazyValue.get();\n-  }\n-\n-  private MetadataComponentExecutor metadataComponentExecutor() {\n-    return metadataComponentExecutorLazyValue.get();\n-  }\n-\n   @Override\n   public ConnectionValidationResult testConnection(String configName) {\n     return artifactHelper()\n"}}, {"oid": "ecde7783f11970417c75b48bbcec09aa18a05e25", "url": "https://github.com/mulesoft/mule/commit/ecde7783f11970417c75b48bbcec09aa18a05e25", "message": "CMTS-32: Improve error messages and validations", "committedDate": "2020-08-24T13:43:26Z", "type": "commit"}, {"oid": "c286ecf2c12ee7d56de521af1765e969510f0b42", "url": "https://github.com/mulesoft/mule/commit/c286ecf2c12ee7d56de521af1765e969510f0b42", "message": "round 2, clean up code, better things happen when we do refators", "committedDate": "2020-08-24T13:50:30Z", "type": "commit"}, {"oid": "fa43cbc1c05ee1d30bad8656696602e007e82ffd", "url": "https://github.com/mulesoft/mule/commit/fa43cbc1c05ee1d30bad8656696602e007e82ffd", "message": "Fix tests", "committedDate": "2020-08-24T13:52:16Z", "type": "commit"}, {"oid": "368b298bce37b2d68a0095addbd03e564cf22e64", "url": "https://github.com/mulesoft/mule/commit/368b298bce37b2d68a0095addbd03e564cf22e64", "message": "PR feedback and rebase", "committedDate": "2020-08-24T15:01:38Z", "type": "commit"}, {"oid": "368b298bce37b2d68a0095addbd03e564cf22e64", "url": "https://github.com/mulesoft/mule/commit/368b298bce37b2d68a0095addbd03e564cf22e64", "message": "PR feedback and rebase", "committedDate": "2020-08-24T15:01:38Z", "type": "forcePushed"}]}