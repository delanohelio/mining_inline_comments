{"pr_number": 8756, "pr_title": "MULE-18219: Fix flaky DynamicConfigurationProviderTestCase", "pr_createdAt": "2020-03-25T14:06:59Z", "pr_url": "https://github.com/mulesoft/mule/pull/8756", "timeline": [{"oid": "12551e75e8268e70a5c80c5cdd176a1b2bf5ed46", "url": "https://github.com/mulesoft/mule/commit/12551e75e8268e70a5c80c5cdd176a1b2bf5ed46", "message": "MULE-18219: Fix flaky DynamicConfigurationProviderTestCase", "committedDate": "2020-03-25T12:56:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NDI2Nw==", "url": "https://github.com/mulesoft/mule/pull/8756#discussion_r397884267", "bodyText": "I don't think this added parameter is a good idea. Why not just injecting the MuleContext and using the isStopping() method?", "author": "marianogonzalez", "createdAt": "2020-03-25T14:11:32Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java", "diffHunk": "@@ -158,7 +159,7 @@\n \n   protected MetadataCacheIdGenerator<ComponentAst> cacheIdGenerator;\n \n-  private Function<CoreEvent, Optional<ConfigurationInstance>> configurationResolver;\n+  private BiFunction<CoreEvent, Boolean, Optional<ConfigurationInstance>> configurationResolver;", "originalCommit": "12551e75e8268e70a5c80c5cdd176a1b2bf5ed46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0589297367d6289ce00d74d5a46ba8364888b0bf", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java\nindex d4890967468..bb71eba42a1 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java\n\n@@ -159,7 +158,7 @@ public abstract class ExtensionComponent<T extends ComponentModel> extends Abstr\n \n   protected MetadataCacheIdGenerator<ComponentAst> cacheIdGenerator;\n \n-  private BiFunction<CoreEvent, Boolean, Optional<ConfigurationInstance>> configurationResolver;\n+  private Function<CoreEvent, Optional<ConfigurationInstance>> configurationResolver;\n \n   private List<ErrorMapping> errorMappings = emptyList();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NjYwNQ==", "url": "https://github.com/mulesoft/mule/pull/8756#discussion_r397886605", "bodyText": "This isn't a matter of not populating the cache. If the context is stopping, the dynamic config shouldn't be spawned at all.", "author": "marianogonzalez", "createdAt": "2020-03-25T14:14:44Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java", "diffHunk": "@@ -215,26 +216,31 @@ private void initConfigurationResolver() {\n \n     Optional<ConfigurationInstance> staticConfiguration = getStaticConfiguration();\n     if (staticConfiguration.isPresent()) {\n-      configurationResolver = event -> staticConfiguration;\n+      configurationResolver = (event, stopping) -> staticConfiguration;\n       return;\n     }\n \n     if (isConfigurationSpecified()) {\n       // the config is dynamic\n-      configurationResolver = event -> {\n-        ConfigurationInstance instance = configurationProvider.get().get(event);\n-        if (instance == null) {\n-          throw new IllegalModelDefinitionException(format(\n-                                                           \"Root component '%s' contains a reference to config '%s' but it doesn't exists\",\n-                                                           getLocation().getRootContainerName(),\n-                                                           configurationProvider));\n-        }\n+      configurationResolver = (event, stopping) -> {\n+        if (stopping) {\n+          // Avoid populating the cache of dynamic connections if stopping\n+          return configurationProvider.get().getIfPresent(event);", "originalCommit": "12551e75e8268e70a5c80c5cdd176a1b2bf5ed46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0589297367d6289ce00d74d5a46ba8364888b0bf", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java\nindex d4890967468..bb71eba42a1 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/ExtensionComponent.java\n\n@@ -216,31 +215,30 @@ public abstract class ExtensionComponent<T extends ComponentModel> extends Abstr\n \n     Optional<ConfigurationInstance> staticConfiguration = getStaticConfiguration();\n     if (staticConfiguration.isPresent()) {\n-      configurationResolver = (event, stopping) -> staticConfiguration;\n+      configurationResolver = event -> staticConfiguration;\n       return;\n     }\n \n     if (isConfigurationSpecified()) {\n       // the config is dynamic\n-      configurationResolver = (event, stopping) -> {\n-        if (stopping) {\n-          // Avoid populating the cache of dynamic connections if stopping\n-          return configurationProvider.get().getIfPresent(event);\n-        } else {\n-          ConfigurationInstance instance = configurationProvider.get().get(event);\n-          if (instance == null) {\n+      configurationResolver = event -> {\n+        ConfigurationInstance instance = configurationProvider.get().get(event);\n+        if (instance == null) {\n+          if (muleContext.isStopping() || muleContext.isStopped()) {\n+            return empty();\n+          } else {\n             throw new IllegalModelDefinitionException(format(\n                                                              \"Root component '%s' contains a reference to config '%s' but it doesn't exists\",\n                                                              getLocation().getRootContainerName(),\n                                                              configurationProvider));\n           }\n-\n-          return of(instance);\n         }\n+\n+        return of(instance);\n       };\n     } else {\n       // obtain implicit instance\n-      configurationResolver = (event, stopping) -> extensionManager.getConfiguration(extensionModel, componentModel, event);\n+      configurationResolver = event -> extensionManager.getConfiguration(extensionModel, componentModel, event);\n     }\n   }\n \n"}}, {"oid": "0589297367d6289ce00d74d5a46ba8364888b0bf", "url": "https://github.com/mulesoft/mule/commit/0589297367d6289ce00d74d5a46ba8364888b0bf", "message": "review", "committedDate": "2020-03-25T14:53:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMjcxMA==", "url": "https://github.com/mulesoft/mule/pull/8756#discussion_r397922710", "bodyText": "this if seems to be inverted, but also conceptually wrong..\nif the context is not stopping, then you need to do getConfiguration() as usual so that the cache is used. If the context IS stopping, then no new config should be created. Also, the compute method you added should never be explicitly called. If a dynamic config is not added to the cache, then it will never be stopped and will generate a leak.", "author": "marianogonzalez", "createdAt": "2020-03-25T14:59:12Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/DynamicConfigurationProvider.java", "diffHunk": "@@ -140,15 +141,25 @@ public ConfigurationInstance get(Event event) {\n         if (connectionProviderResolver.getResolverSet().isPresent()) {\n           providerResult = ((ResolverSet) connectionProviderResolver.getResolverSet().get()).resolve(resolvingContext);\n         }\n-        return getConfiguration(new Pair<>(result, providerResult), (CoreEvent) event);\n+\n+        if (muleContext.isStopping() || muleContext.isStopped()) {", "originalCommit": "0589297367d6289ce00d74d5a46ba8364888b0bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNjYxNw==", "url": "https://github.com/mulesoft/mule/pull/8756#discussion_r397926617", "bodyText": "the cache is a loading cache, that's the issue, doing a get on it populates it, that's what i'm avoiding with this change, and generating a different compute method", "author": "elrodro83", "createdAt": "2020-03-25T15:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMjcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzMjg3OQ==", "url": "https://github.com/mulesoft/mule/pull/8756#discussion_r397932879", "bodyText": "I know.. my point is that a get() to a dynamic config should simply fail when the context is stopping.", "author": "marianogonzalez", "createdAt": "2020-03-25T15:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMjcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "14ec9913c6909ed9c5bff54fc0590aee282aed23", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/DynamicConfigurationProvider.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/DynamicConfigurationProvider.java\nindex 92defbf79dc..9f46e089da4 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/DynamicConfigurationProvider.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/DynamicConfigurationProvider.java\n\n@@ -141,25 +141,16 @@ public final class DynamicConfigurationProvider extends LifecycleAwareConfigurat\n         if (connectionProviderResolver.getResolverSet().isPresent()) {\n           providerResult = ((ResolverSet) connectionProviderResolver.getResolverSet().get()).resolve(resolvingContext);\n         }\n-\n-        if (muleContext.isStopping() || muleContext.isStopped()) {\n-          return getConfiguration(new Pair<>(result, providerResult), (CoreEvent) event);\n-        } else {\n-          return computeConfiguration(new Pair<>(result, providerResult), (CoreEvent) event);\n-        }\n+        return getConfiguration(new Pair<>(result, providerResult), (CoreEvent) event);\n       }\n     });\n   }\n \n-  private ConfigurationInstance computeConfiguration(Pair<ResolverSetResult, ResolverSetResult> resolverSetResult,\n+  private ConfigurationInstance getConfiguration(Pair<ResolverSetResult, ResolverSetResult> resolverSetResult,\n                                                      CoreEvent event) {\n     return cache.get(new ResolverResultAndEvent(resolverSetResult, event));\n   }\n \n-  private ConfigurationInstance getConfiguration(Pair<ResolverSetResult, ResolverSetResult> resolverSetResult, CoreEvent event) {\n-    return cache.asMap().get(new ResolverResultAndEvent(resolverSetResult, event));\n-  }\n-\n   private ConfigurationInstance createConfiguration(Pair<ResolverSetResult, ResolverSetResult> values, CoreEvent event)\n       throws MuleException {\n \n"}}, {"oid": "14ec9913c6909ed9c5bff54fc0590aee282aed23", "url": "https://github.com/mulesoft/mule/commit/14ec9913c6909ed9c5bff54fc0590aee282aed23", "message": "different approach", "committedDate": "2020-03-25T17:02:25Z", "type": "commit"}, {"oid": "e24a69d96de813d5e60fe617a27ba43b4f26f9b8", "url": "https://github.com/mulesoft/mule/commit/e24a69d96de813d5e60fe617a27ba43b4f26f9b8", "message": "unit test", "committedDate": "2020-03-25T17:45:20Z", "type": "commit"}, {"oid": "807d1e1ca5d583f797af0d1cb2b80ec52c1757a1", "url": "https://github.com/mulesoft/mule/commit/807d1e1ca5d583f797af0d1cb2b80ec52c1757a1", "message": "format", "committedDate": "2020-03-25T17:48:51Z", "type": "commit"}, {"oid": "3cc0c37909783c5b37e5856ca558c1a8f233a95b", "url": "https://github.com/mulesoft/mule/commit/3cc0c37909783c5b37e5856ca558c1a8f233a95b", "message": "making MG happy", "committedDate": "2020-03-25T19:00:39Z", "type": "commit"}]}