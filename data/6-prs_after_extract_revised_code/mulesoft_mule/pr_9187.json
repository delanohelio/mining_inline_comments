{"pr_number": 9187, "pr_title": "MULE-18634: Fix originating ComponentLocation", "pr_createdAt": "2020-08-11T16:09:17Z", "pr_url": "https://github.com/mulesoft/mule/pull/9187", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDg4OA==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469244888", "bodyText": "i know this is a test, but this may be confusing if looking for examples of this. Can you pass a mock or new location for this?", "author": "elrodro83", "createdAt": "2020-08-12T13:07:08Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/util/message/ResultToMessageIteratorTestCase.java", "diffHunk": "@@ -60,7 +60,7 @@ private ResultToMessageIterator createResultToMessageIterator() {\n     CursorProviderFactory cursorProviderFactory = mock(CursorProviderFactory.class);\n     BaseEventContext eventCtx = mock(BaseEventContext.class);\n \n-    return new ResultToMessageIterator(list.iterator(), cursorProviderFactory, eventCtx);\n+    return new ResultToMessageIterator(list.iterator(), cursorProviderFactory, eventCtx, eventCtx.getOriginatingLocation());", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20a352799513c442e9e999339016b8cc8e226694", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/util/message/ResultToMessageIteratorTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/util/message/ResultToMessageIteratorTestCase.java\nindex 99eb7e0d5e0..06922ad0c3e 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/util/message/ResultToMessageIteratorTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/util/message/ResultToMessageIteratorTestCase.java\n\n@@ -60,7 +61,7 @@ public class ResultToMessageIteratorTestCase {\n     CursorProviderFactory cursorProviderFactory = mock(CursorProviderFactory.class);\n     BaseEventContext eventCtx = mock(BaseEventContext.class);\n \n-    return new ResultToMessageIterator(list.iterator(), cursorProviderFactory, eventCtx, eventCtx.getOriginatingLocation());\n+    return new ResultToMessageIterator(list.iterator(), cursorProviderFactory, eventCtx, from(\"logger\"));\n   }\n \n   private static Result<Object, Object> resultOf(int output) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Njc0MQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469246741", "bodyText": "will this be backported?", "author": "elrodro83", "createdAt": "2020-08-12T13:10:01Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NzY5NQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469287695", "bodyText": "Done", "author": "szaffarano", "createdAt": "2020-08-12T14:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Njc0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e64b3c55069763e9ff1d0d6c9e87bea31c13f06", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java b/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\nindex 6219a406b9c..0f27c6c8efc 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\n\n@@ -32,8 +32,6 @@ public interface CursorProviderFactory<T> {\n    * @param value the stream to be cursored\n    * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n-   *\n-   * @since 4.4.0\n    */\n   Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjkxNA==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469246914", "bodyText": "indicate from which version on this is deprecated", "author": "elrodro83", "createdAt": "2020-08-12T13:10:18Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   */\n+  Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n+\n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param eventContext the context of the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4ODE3OQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469288179", "bodyText": "done", "author": "szaffarano", "createdAt": "2020-08-12T14:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "8e64b3c55069763e9ff1d0d6c9e87bea31c13f06", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java b/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\nindex 6219a406b9c..0f27c6c8efc 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\n\n@@ -32,8 +32,6 @@ public interface CursorProviderFactory<T> {\n    * @param value the stream to be cursored\n    * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n-   *\n-   * @since 4.4.0\n    */\n   Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NzE4OA==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469247188", "bodyText": "why is this new method already deprecated?", "author": "elrodro83", "createdAt": "2020-08-12T13:10:44Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   */\n+  Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n+\n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param eventContext the context of the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.\n    */\n+  @Deprecated\n   Object of(EventContext eventContext, T value);\n \n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param event the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NzIxOA==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469287218", "bodyText": "I had to overload Object of(CoreEvent event, T value); to not to break backwards, which was already deprecated.", "author": "szaffarano", "createdAt": "2020-08-12T14:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NzE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8e64b3c55069763e9ff1d0d6c9e87bea31c13f06", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java b/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\nindex 6219a406b9c..0f27c6c8efc 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java\n\n@@ -32,8 +32,6 @@ public interface CursorProviderFactory<T> {\n    * @param value the stream to be cursored\n    * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n-   *\n-   * @since 4.4.0\n    */\n   Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Nzc0MA==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469247740", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "author": "elrodro83", "createdAt": "2020-08-12T13:11:37Z", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java", "diffHunk": "@@ -48,23 +49,45 @@ protected AbstractCursorStreamProviderFactory(ByteBufferManager bufferManager, S\n     this.streamingManager = streamingManager;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n-  public final Object of(EventContext eventContext, InputStream inputStream) {\n+  public final Object of(EventContext eventContext, InputStream inputStream, ComponentLocation originatingLocation) {\n     if (inputStream instanceof CursorStream) {\n       return streamingManager.manage(((CursorStream) inputStream).getProvider(), eventContext);\n     }\n \n-    Object value = resolve(inputStream, eventContext);\n+    Object value = resolve(inputStream, eventContext, originatingLocation);\n     if (value instanceof CursorStreamProvider) {\n       value = streamingManager.manage((CursorStreamProvider) value, eventContext);\n     }\n \n     return value;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(EventContext eventContext, InputStream inputStream) {\n+    return of(eventContext, inputStream, eventContext.getOriginatingLocation());\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(CoreEvent event, InputStream inputStream, ComponentLocation originatingLocation) {\n+    return of(getRoot(event.getContext()), inputStream, originatingLocation);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n   public final Object of(CoreEvent event, InputStream inputStream) {\n-    return of(getRoot(event.getContext()), inputStream);\n+    return of(getRoot(event.getContext()), inputStream, event.getContext().getOriginatingLocation());", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwMzY0NQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469603645", "bodyText": "Done.  It was already null safe (eg https://github.com/mulesoft/mule/blob/master/core-tests/src/test/java/org/mule/runtime/core/internal/streaming/AbstractTroubleshootCursorProviderTestCase.java#L66).  I changed those wrong values in all places.", "author": "szaffarano", "createdAt": "2020-08-12T23:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Nzc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "20a352799513c442e9e999339016b8cc8e226694", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java b/core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java\nindex 0683e1cff1a..a11bc7e1670 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java\n\n@@ -71,7 +71,7 @@ public abstract class AbstractCursorStreamProviderFactory extends AbstractCompon\n    */\n   @Override\n   public final Object of(EventContext eventContext, InputStream inputStream) {\n-    return of(eventContext, inputStream, eventContext.getOriginatingLocation());\n+    return of(eventContext, inputStream, null);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODI3MQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469248271", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "author": "elrodro83", "createdAt": "2020-08-12T13:12:28Z", "path": "core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java", "diffHunk": "@@ -104,33 +105,73 @@ public CoreEvent handleException(Throwable throwable) {\n \n   /**\n    * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n-   * {@link CursorProviderFactory#of(EventContext, Object)} is returned. Otherwise, the original {@code value} is.\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n    *\n    * @param value                 a value which may be a repeatable streaming resource\n    * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n    * @param eventContext          the root context of the event on which the {@code value} was generated\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return the {@code value} or a {@link CursorProvider}\n+   *\n+   * @since 4.4.0\n    */\n   public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory,\n-                                        EventContext eventContext) {\n+                                        EventContext eventContext, ComponentLocation originatingLocation) {\n     if (cursorProviderFactory != null && cursorProviderFactory.accepts(value)) {\n-      return cursorProviderFactory.of(eventContext, value);\n+      return cursorProviderFactory.of(eventContext, value, originatingLocation);\n     } else {\n       return value;\n     }\n   }\n \n   /**\n    * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n-   * {@link CursorProviderFactory#of(EventContext, Object)} is returned. Otherwise, the original {@code value} is.\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n+   *\n+   * @param value                 a value which may be a repeatable streaming resource\n+   * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n+   * @param eventContext          the root context of the event on which the {@code value} was generated\n+   * @return the {@code value} or a {@link CursorProvider}\n+   * \n+   * @deprecated Use {@link #streamingContent(Object, CursorProviderFactory, EventContext, ComponentLocation)}\n+   */\n+  @Deprecated\n+  public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory, EventContext eventContext) {\n+    return streamingContent(value, cursorProviderFactory, eventContext, eventContext.getOriginatingLocation());", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e64b3c55069763e9ff1d0d6c9e87bea31c13f06", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java b/core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java\nindex 544090543ba..c04d4d386df 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java\n\n@@ -112,8 +112,6 @@ public final class StreamingUtils {\n    * @param eventContext          the root context of the event on which the {@code value} was generated\n    * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return the {@code value} or a {@link CursorProvider}\n-   *\n-   * @since 4.4.0\n    */\n   public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory,\n                                         EventContext eventContext, ComponentLocation originatingLocation) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODc2NQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469248765", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "author": "elrodro83", "createdAt": "2020-08-12T13:13:14Z", "path": "core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java", "diffHunk": "@@ -104,33 +105,73 @@ public CoreEvent handleException(Throwable throwable) {\n \n   /**\n    * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n-   * {@link CursorProviderFactory#of(EventContext, Object)} is returned. Otherwise, the original {@code value} is.\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n    *\n    * @param value                 a value which may be a repeatable streaming resource\n    * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n    * @param eventContext          the root context of the event on which the {@code value} was generated\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return the {@code value} or a {@link CursorProvider}\n+   *\n+   * @since 4.4.0\n    */\n   public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory,\n-                                        EventContext eventContext) {\n+                                        EventContext eventContext, ComponentLocation originatingLocation) {\n     if (cursorProviderFactory != null && cursorProviderFactory.accepts(value)) {\n-      return cursorProviderFactory.of(eventContext, value);\n+      return cursorProviderFactory.of(eventContext, value, originatingLocation);\n     } else {\n       return value;\n     }\n   }\n \n   /**\n    * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n-   * {@link CursorProviderFactory#of(EventContext, Object)} is returned. Otherwise, the original {@code value} is.\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n+   *\n+   * @param value                 a value which may be a repeatable streaming resource\n+   * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n+   * @param eventContext          the root context of the event on which the {@code value} was generated\n+   * @return the {@code value} or a {@link CursorProvider}\n+   * \n+   * @deprecated Use {@link #streamingContent(Object, CursorProviderFactory, EventContext, ComponentLocation)}\n+   */\n+  @Deprecated\n+  public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory, EventContext eventContext) {\n+    return streamingContent(value, cursorProviderFactory, eventContext, eventContext.getOriginatingLocation());\n+  }\n+\n+  /**\n+   * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n    *\n    * @param value                 a value which may be a repeatable streaming resource\n    * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n    * @param event                 the event on which the {@code value} was generated\n+   * @param originatingLocation   the {@link ComponentLocation} where the cursor was created\n    * @return the {@code value} or a {@link CursorProvider}\n+   *\n+   * @since 4.4.0\n    */\n+  public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory, CoreEvent event,\n+                                        ComponentLocation originatingLocation) {\n+    return streamingContent(value, cursorProviderFactory, getRoot(event.getContext()),\n+                            originatingLocation);\n+  }\n+\n+  /**\n+   * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n+   *\n+   * @param value                 a value which may be a repeatable streaming resource\n+   * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n+   * @param event                 the event on which the {@code value} was generated\n+   * @return the {@code value} or a {@link CursorProvider}\n+   *\n+   * @deprecated Use {@link #streamingContent(Object, CursorProviderFactory, EventContext, ComponentLocation)}\n+   */\n+  @Deprecated\n   public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory, CoreEvent event) {\n-    return streamingContent(value, cursorProviderFactory, getRoot(event.getContext()));\n+    return streamingContent(value, cursorProviderFactory, event, event.getContext().getOriginatingLocation());", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e64b3c55069763e9ff1d0d6c9e87bea31c13f06", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java b/core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java\nindex 544090543ba..c04d4d386df 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java\n\n@@ -112,8 +112,6 @@ public final class StreamingUtils {\n    * @param eventContext          the root context of the event on which the {@code value} was generated\n    * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return the {@code value} or a {@link CursorProvider}\n-   *\n-   * @since 4.4.0\n    */\n   public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory,\n                                         EventContext eventContext, ComponentLocation originatingLocation) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTE2Nw==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249167", "bodyText": "create a new exception class for this", "author": "elrodro83", "createdAt": "2020-08-12T13:13:53Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java", "diffHunk": "@@ -82,6 +87,9 @@ protected void assertNotDisposed() throws IOException {\n   @Override\n   public final void close() throws IOException {\n     if (!released) {\n+      if (trackCursorProviderClose) {\n+        closerResponsible = new Exception(\"Responsible for closing the stream.\");", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20a352799513c442e9e999339016b8cc8e226694", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java b/core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java\nindex 9e26ef55d2f..a43b55d0163 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java\n\n@@ -88,7 +89,7 @@ abstract class AbstractCursorStream extends CursorStream {\n   public final void close() throws IOException {\n     if (!released) {\n       if (trackCursorProviderClose) {\n-        closerResponsible = new Exception(\"Responsible for closing the stream.\");\n+        closerResponsible = new ClosingCursorException(\"Responsible for closing the stream.\");\n       }\n       release();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTI2Nw==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249267", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "author": "elrodro83", "createdAt": "2020-08-12T13:14:01Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java", "diffHunk": "@@ -42,22 +43,41 @@ public AbstractCursorIteratorProviderFactory(StreamingManager streamingManager)\n    * {@inheritDoc}\n    */\n   @Override\n-  public final Object of(EventContext eventContext, Iterator iterator) {\n+  public final Object of(EventContext eventContext, Iterator iterator, ComponentLocation originatingLocation) {\n     if (iterator instanceof CursorIterator) {\n       return streamingManager.manage(((CursorIterator) iterator).getProvider(), eventContext);\n     }\n \n-    Object value = resolve(iterator, eventContext);\n+    Object value = resolve(iterator, eventContext, originatingLocation);\n     if (value instanceof CursorProvider) {\n       value = streamingManager.manage((CursorProvider) value, eventContext);\n     }\n \n     return value;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(EventContext eventContext, Iterator iterator) {\n+    return of(eventContext, iterator, eventContext.getOriginatingLocation());", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20a352799513c442e9e999339016b8cc8e226694", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java b/core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java\nindex 62a3928ce7b..d0ae52d8d05 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java\n\n@@ -61,7 +61,7 @@ public abstract class AbstractCursorIteratorProviderFactory implements CursorIte\n    */\n   @Override\n   public final Object of(EventContext eventContext, Iterator iterator) {\n-    return of(eventContext, iterator, eventContext.getOriginatingLocation());\n+    return of(eventContext, iterator, null);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTMwMw==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249303", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "author": "elrodro83", "createdAt": "2020-08-12T13:14:06Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java", "diffHunk": "@@ -42,22 +43,41 @@ public AbstractCursorIteratorProviderFactory(StreamingManager streamingManager)\n    * {@inheritDoc}\n    */\n   @Override\n-  public final Object of(EventContext eventContext, Iterator iterator) {\n+  public final Object of(EventContext eventContext, Iterator iterator, ComponentLocation originatingLocation) {\n     if (iterator instanceof CursorIterator) {\n       return streamingManager.manage(((CursorIterator) iterator).getProvider(), eventContext);\n     }\n \n-    Object value = resolve(iterator, eventContext);\n+    Object value = resolve(iterator, eventContext, originatingLocation);\n     if (value instanceof CursorProvider) {\n       value = streamingManager.manage((CursorProvider) value, eventContext);\n     }\n \n     return value;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(EventContext eventContext, Iterator iterator) {\n+    return of(eventContext, iterator, eventContext.getOriginatingLocation());\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(CoreEvent event, Iterator value, ComponentLocation originatingLocation) {\n+    return of(getRoot(event.getContext()), value, originatingLocation);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n-  public Object of(CoreEvent event, Iterator value) {\n-    return of(getRoot(event.getContext()), value);\n+  public final Object of(CoreEvent event, Iterator value) {\n+    return of(getRoot(event.getContext()), value, event.getContext().getOriginatingLocation());", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20a352799513c442e9e999339016b8cc8e226694", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java b/core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java\nindex 62a3928ce7b..d0ae52d8d05 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java\n\n@@ -61,7 +61,7 @@ public abstract class AbstractCursorIteratorProviderFactory implements CursorIte\n    */\n   @Override\n   public final Object of(EventContext eventContext, Iterator iterator) {\n-    return of(eventContext, iterator, eventContext.getOriginatingLocation());\n+    return of(eventContext, iterator, null);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTQwMg==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249402", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "author": "elrodro83", "createdAt": "2020-08-12T13:14:17Z", "path": "core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java", "diffHunk": "@@ -82,8 +85,10 @@ public static Message toMessage(Result result, CursorProviderFactory cursorProvi\n    * @param event Used for the case where a {@link CursorProvider} is created, register the one in it.\n    * @return a {@link Message}\n    */\n-  public static Message toMessage(Result result, CursorProviderFactory cursorProviderFactory, CoreEvent event) {\n-    return toMessage(result, cursorProviderFactory, ((BaseEventContext) event.getContext()).getRootContext());\n+  public static Message toMessage(Result result, CursorProviderFactory cursorProviderFactory, CoreEvent event,\n+                                  ComponentLocation originatingLocation) {\n+    return toMessage(result, cursorProviderFactory, ((BaseEventContext) event.getContext()).getRootContext(),", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTc2MQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249761", "bodyText": "i know this is a test, but this may be confusing if looking for examples of this. Can you pass a mock or new location for this?", "author": "elrodro83", "createdAt": "2020-08-12T13:14:48Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/streaming/AbstractBytesStreamingExtensionTestCase.java", "diffHunk": "@@ -242,7 +242,8 @@ public void resolveCursorsFromObjectParams() throws Exception {\n \n     CursorStreamProvider provider = (CursorStreamProvider) flowRunner(\"objectToStream\")\n         .keepStreamsOpen()\n-        .withPayload(factory.of(testEvent().getContext(), new ByteArrayInputStream(data.getBytes())))\n+        .withPayload(factory.of(testEvent().getContext(), new ByteArrayInputStream(data.getBytes()),\n+                                testEvent().getContext().getOriginatingLocation()))", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20a352799513c442e9e999339016b8cc8e226694", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/streaming/AbstractBytesStreamingExtensionTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/streaming/AbstractBytesStreamingExtensionTestCase.java\nindex 882ce359d1e..989de58f46b 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/streaming/AbstractBytesStreamingExtensionTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/streaming/AbstractBytesStreamingExtensionTestCase.java\n\n@@ -242,8 +243,7 @@ public abstract class AbstractBytesStreamingExtensionTestCase extends AbstractSt\n \n     CursorStreamProvider provider = (CursorStreamProvider) flowRunner(\"objectToStream\")\n         .keepStreamsOpen()\n-        .withPayload(factory.of(testEvent().getContext(), new ByteArrayInputStream(data.getBytes()),\n-                                testEvent().getContext().getOriginatingLocation()))\n+        .withPayload(factory.of(testEvent().getContext(), new ByteArrayInputStream(data.getBytes()), from(\"objectToStream\")))\n         .run().getMessage().getPayload().getValue();\n \n     byte[] bytes = muleContext.getObjectSerializer().getInternalProtocol().serialize(provider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDY3OQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469250679", "bodyText": "i know this is a test, but this may be confusing if looking for examples of this. Can you pass a mock or new location for this?", "author": "elrodro83", "createdAt": "2020-08-12T13:16:12Z", "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/streaming/DefaultStreamingHelperTestCase.java", "diffHunk": "@@ -52,7 +52,8 @@ protected void doSetUp() throws Exception {\n     cursorProviderFactory =\n         new InMemoryCursorIteratorProviderFactory(InMemoryCursorIteratorConfig.getDefault(), streamingManager);\n     event = testEvent();\n-    streamingHelper = new DefaultStreamingHelper(cursorProviderFactory, streamingManager, event);\n+    streamingHelper =\n+        new DefaultStreamingHelper(cursorProviderFactory, streamingManager, event, event.getContext().getOriginatingLocation());", "originalCommit": "755982048080ee28828ad8c06eb9e3a4981c1884", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20a352799513c442e9e999339016b8cc8e226694", "chunk": "diff --git a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/streaming/DefaultStreamingHelperTestCase.java b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/streaming/DefaultStreamingHelperTestCase.java\nindex 05c5f4a6114..746a90e72ee 100644\n--- a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/streaming/DefaultStreamingHelperTestCase.java\n+++ b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/streaming/DefaultStreamingHelperTestCase.java\n\n@@ -53,7 +54,7 @@ public class DefaultStreamingHelperTestCase extends AbstractMuleContextTestCase\n         new InMemoryCursorIteratorProviderFactory(InMemoryCursorIteratorConfig.getDefault(), streamingManager);\n     event = testEvent();\n     streamingHelper =\n-        new DefaultStreamingHelper(cursorProviderFactory, streamingManager, event, event.getContext().getOriginatingLocation());\n+        new DefaultStreamingHelper(cursorProviderFactory, streamingManager, event, from(\"log\"));\n   }\n \n   @Override\n"}}, {"oid": "8e64b3c55069763e9ff1d0d6c9e87bea31c13f06", "url": "https://github.com/mulesoft/mule/commit/8e64b3c55069763e9ff1d0d6c9e87bea31c13f06", "message": "MULE-18634: Fix originating ComponentLocation", "committedDate": "2020-08-12T22:45:48Z", "type": "commit"}, {"oid": "8acf197db814f2ef1696e170b371836cbf7cbe11", "url": "https://github.com/mulesoft/mule/commit/8acf197db814f2ef1696e170b371836cbf7cbe11", "message": "MULE-18634: Add @since", "committedDate": "2020-08-12T22:45:48Z", "type": "commit"}, {"oid": "5e2beb11d1e7b2ec13b6b775f0ab564b13bdef10", "url": "https://github.com/mulesoft/mule/commit/5e2beb11d1e7b2ec13b6b775f0ab564b13bdef10", "message": "MULE-18634: fix tests", "committedDate": "2020-08-12T22:45:49Z", "type": "commit"}, {"oid": "20a352799513c442e9e999339016b8cc8e226694", "url": "https://github.com/mulesoft/mule/commit/20a352799513c442e9e999339016b8cc8e226694", "message": "MULE-18634: Some changes after PR review", "committedDate": "2020-08-12T23:51:49Z", "type": "commit"}, {"oid": "20a352799513c442e9e999339016b8cc8e226694", "url": "https://github.com/mulesoft/mule/commit/20a352799513c442e9e999339016b8cc8e226694", "message": "MULE-18634: Some changes after PR review", "committedDate": "2020-08-12T23:51:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNDE5Mw==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469924193", "bodyText": "this should extend either MuleRuntimeException or IOException", "author": "elrodro83", "createdAt": "2020-08-13T12:46:24Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/ClosingCursorException.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import org.mule.runtime.api.streaming.Cursor;\n+\n+/**\n+ * This {@link RuntimeException} is used for debugging purposes to track where a {@link Cursor} is closed.\n+ * \n+ * @since 4.4.0, 4.3.1\n+ */\n+public class ClosingCursorException extends RuntimeException {", "originalCommit": "20a352799513c442e9e999339016b8cc8e226694", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6cf3105787dd2c56b6b4136c0786c76f892a46e5", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/streaming/ClosingCursorException.java b/core/src/main/java/org/mule/runtime/core/internal/streaming/ClosingCursorException.java\nindex 979317ef1ab..5fce030e0c6 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/streaming/ClosingCursorException.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/streaming/ClosingCursorException.java\n\n@@ -8,12 +8,14 @@ package org.mule.runtime.core.internal.streaming;\n \n import org.mule.runtime.api.streaming.Cursor;\n \n+import java.io.IOException;\n+\n /**\n  * This {@link RuntimeException} is used for debugging purposes to track where a {@link Cursor} is closed.\n  * \n  * @since 4.4.0, 4.3.1\n  */\n-public class ClosingCursorException extends RuntimeException {\n+public class ClosingCursorException extends IOException {\n \n   private static final long serialVersionUID = 7821893999235016552L;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNTIxMw==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469925213", "bodyText": "if ClosingCursorException  extended IOException you could throw it directly, avoiding the cost of creating a new exception", "author": "elrodro83", "createdAt": "2020-08-13T12:48:11Z", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java", "diffHunk": "@@ -72,7 +78,7 @@ public CursorStreamProvider getProvider() {\n \n   protected void assertNotDisposed() throws IOException {\n     if (released) {\n-      throw new IOException(\"Stream is closed\");\n+      throw new IOException(\"Stream is closed\", closerResponsible);", "originalCommit": "20a352799513c442e9e999339016b8cc8e226694", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6cf3105787dd2c56b6b4136c0786c76f892a46e5", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java b/core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java\nindex a43b55d0163..129aec25b45 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java\n\n@@ -78,7 +79,7 @@ abstract class AbstractCursorStream extends CursorStream {\n \n   protected void assertNotDisposed() throws IOException {\n     if (released) {\n-      throw new IOException(\"Stream is closed\", closerResponsible);\n+      throw ofNullable(closerResponsible).orElse(new IOException(\"Stream is closed\"));\n     }\n   }\n \n"}}, {"oid": "fb7d95041dea9f6debe87013ad47a8776839a4e2", "url": "https://github.com/mulesoft/mule/commit/fb7d95041dea9f6debe87013ad47a8776839a4e2", "message": "Explain revapi ignore", "committedDate": "2020-08-13T15:25:22Z", "type": "commit"}, {"oid": "6cf3105787dd2c56b6b4136c0786c76f892a46e5", "url": "https://github.com/mulesoft/mule/commit/6cf3105787dd2c56b6b4136c0786c76f892a46e5", "message": "Change exception type", "committedDate": "2020-08-13T15:26:04Z", "type": "commit"}, {"oid": "05efc060c3030741716131e6b1c80a3da95be4ea", "url": "https://github.com/mulesoft/mule/commit/05efc060c3030741716131e6b1c80a3da95be4ea", "message": "Fix some SonarQube bugs and code smells", "committedDate": "2020-08-13T15:26:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MDMxMQ==", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r470040311", "bodyText": "this was on purpose because of performance, to avoid instantiating the lambda for each message built", "author": "elrodro83", "createdAt": "2020-08-13T15:32:20Z", "path": "core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java", "diffHunk": "@@ -214,15 +214,12 @@ public static Message toMessage(Result<?, ?> result,\n   private static Message toMessage(Result<?, ?> result, DataType dataType, Object value) {\n     Message.Builder builder = Message.builder().payload(new TypedValue<>(value, dataType, result.getByteLength()));\n \n-    if (result.getAttributes().isPresent()) {\n-      Object att = result.getAttributes().get();\n-\n+    result.getAttributes().ifPresent(att -> {", "originalCommit": "05efc060c3030741716131e6b1c80a3da95be4ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "606d8020238780eca05258bd7db8d5cecb74a714", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java b/core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java\nindex be71a806396..aadb0f16d3e 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java\n\n@@ -214,12 +214,17 @@ public final class MessageUtils {\n   private static Message toMessage(Result<?, ?> result, DataType dataType, Object value) {\n     Message.Builder builder = Message.builder().payload(new TypedValue<>(value, dataType, result.getByteLength()));\n \n-    result.getAttributes().ifPresent(att -> {\n+    if (result.getAttributes().isPresent()) {\n+      // Don't change: SonarQube detects this code as java:S3655 bug, but by using Optional#ifPresent(Consumer) introduces\n+      // performance issues.\n+      Object att = result.getAttributes().get();\n+\n       final Optional<MediaType> attributesMediaType = result.getAttributesMediaType();\n       builder.attributes(new TypedValue<>(att, attributesMediaType.isPresent()\n           ? builder().type(att.getClass()).mediaType(attributesMediaType.get()).build()\n-          : DataType.fromObject(att), OptionalLong.empty()));\n-    });\n+          : DataType.fromObject(att),\n+                                          OptionalLong.empty()));\n+    }\n \n     return builder.build();\n   }\n"}}, {"oid": "606d8020238780eca05258bd7db8d5cecb74a714", "url": "https://github.com/mulesoft/mule/commit/606d8020238780eca05258bd7db8d5cecb74a714", "message": "Revert change because SonarQube", "committedDate": "2020-08-13T15:42:36Z", "type": "commit"}]}