{"pr_number": 8927, "pr_title": "MULE-18489: CCE with @ConfigOverrides on params of different types", "pr_createdAt": "2020-06-15T21:29:46Z", "pr_url": "https://github.com/mulesoft/mule/pull/8927", "timeline": [{"oid": "fcdfe9f8200d1ccccd246b6444150dc092411cbd", "url": "https://github.com/mulesoft/mule/commit/fcdfe9f8200d1ccccd246b6444150dc092411cbd", "message": "MULE-18489: CCE with @ConfigOverrides on params of different types", "committedDate": "2020-06-12T23:16:24Z", "type": "commit"}, {"oid": "8abb558b7951a3f557c59cff01915b507c2f367b", "url": "https://github.com/mulesoft/mule/commit/8abb558b7951a3f557c59cff01915b507c2f367b", "message": "MULE-18489: CCE with @ConfigOverrides on params of different types", "committedDate": "2020-06-13T19:06:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0Nzc2Mw==", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440947763", "bodyText": "BasicTypesValueResolverFactoryTypeVisitor -> BasicTypeValueResolverFactoryTypeVisitor", "author": "marianogonzalez", "createdAt": "2020-06-16T15:35:41Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypesValueResolverFactoryTypeVisitor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.config.resolver;\n+\n+import static java.lang.String.format;\n+\n+import org.mule.metadata.api.model.MetadataType;\n+import org.mule.metadata.api.visitor.BasicTypeMetadataVisitor;\n+import org.mule.metadata.api.visitor.MetadataTypeVisitor;\n+import org.mule.runtime.api.util.Reference;\n+import org.mule.runtime.module.extension.internal.runtime.resolver.StaticValueResolver;\n+import org.mule.runtime.module.extension.internal.runtime.resolver.TypeSafeValueResolverWrapper;\n+import org.mule.runtime.module.extension.internal.runtime.resolver.ValueResolver;\n+\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.support.DefaultConversionService;\n+\n+/**\n+ * A {@link MetadataTypeVisitor} implementation that creates a {@link ValueResolver} instances depending on a parameter\n+ * {@link MetadataType} for basic types.\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class BasicTypesValueResolverFactoryTypeVisitor extends BasicTypeMetadataVisitor {", "originalCommit": "8abb558b7951a3f557c59cff01915b507c2f367b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e33655c17874bb41d73839511920838a8a2e318d", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypesValueResolverFactoryTypeVisitor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypeValueResolverFactoryTypeVisitor.java\nsimilarity index 93%\nrename from modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypesValueResolverFactoryTypeVisitor.java\nrename to modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypeValueResolverFactoryTypeVisitor.java\nindex 80ace762a2a..61f58538287 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypesValueResolverFactoryTypeVisitor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypeValueResolverFactoryTypeVisitor.java\n\n@@ -25,7 +25,7 @@ import org.springframework.core.convert.support.DefaultConversionService;\n  *\n  * @since 4.4, 4.3.1\n  */\n-public class BasicTypesValueResolverFactoryTypeVisitor extends BasicTypeMetadataVisitor {\n+public class BasicTypeValueResolverFactoryTypeVisitor extends BasicTypeMetadataVisitor {\n \n   private final ConversionService conversionService = new DefaultConversionService();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDI0Ng==", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440950246", "bodyText": "what's this for? Actually, if you look at usages, this parameter is just for testing as in any other situation it's always null .", "author": "marianogonzalez", "createdAt": "2020-06-16T15:39:02Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "diffHunk": "@@ -209,23 +221,25 @@ public ByteCodeAppender appender(Target implementationTarget) {\n \n         ).make();\n \n+    if (generatedByteCodeFile == null && LOGGER.isTraceEnabled()) {", "originalCommit": "8abb558b7951a3f557c59cff01915b507c2f367b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2OTU2Nw==", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440969567", "bodyText": "so that i can toggle this by setting the logger to TRACE", "author": "elrodro83", "createdAt": "2020-06-16T16:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e33655c17874bb41d73839511920838a8a2e318d", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java\nindex 487709f093e..be8c62a7241 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java\n\n@@ -232,7 +232,7 @@ public class MethodExecutorGenerator {\n                                                                   MethodExecutor.class, method.toString())),\n                                        e);\n       }\n-      LOGGER.debug(\"Generated class '{}' saved at '{}'\", executorName, generatedByteCodeFile.getAbsoluteFile());\n+      LOGGER.trace(\"Generated class '{}' saved at '{}'\", executorName, generatedByteCodeFile.getAbsoluteFile());\n     }\n \n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDM4Ng==", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440950386", "bodyText": "unconsistent use of DEBUG vs TRACING", "author": "marianogonzalez", "createdAt": "2020-06-16T15:39:12Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "diffHunk": "@@ -209,23 +221,25 @@ public ByteCodeAppender appender(Target implementationTarget) {\n \n         ).make();\n \n+    if (generatedByteCodeFile == null && LOGGER.isTraceEnabled()) {\n+      generatedByteCodeFile = new File(executorName + \".class\");\n+    }\n     if (generatedByteCodeFile != null) {\n       try (FileOutputStream os = new FileOutputStream(generatedByteCodeFile)) {\n         os.write(byteBuddyMadeWrapper.getBytes());\n       } catch (IOException e) {\n-        throw new MuleRuntimeException(createStaticMessage(format(\n-                                                                  \"Could not store bytecode while generating a dynamic %s for method %s\",\n+        throw new MuleRuntimeException(createStaticMessage(format(\"Could not store bytecode while generating a dynamic %s for method %s\",\n                                                                   MethodExecutor.class, method.toString())),\n                                        e);\n       }\n+      LOGGER.debug(\"Generated class '{}' saved at '{}'\", executorName, generatedByteCodeFile.getAbsoluteFile());", "originalCommit": "8abb558b7951a3f557c59cff01915b507c2f367b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e33655c17874bb41d73839511920838a8a2e318d", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java\nindex 487709f093e..be8c62a7241 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java\n\n@@ -232,7 +232,7 @@ public class MethodExecutorGenerator {\n                                                                   MethodExecutor.class, method.toString())),\n                                        e);\n       }\n-      LOGGER.debug(\"Generated class '{}' saved at '{}'\", executorName, generatedByteCodeFile.getAbsoluteFile());\n+      LOGGER.trace(\"Generated class '{}' saved at '{}'\", executorName, generatedByteCodeFile.getAbsoluteFile());\n     }\n \n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MTQwOA==", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440951408", "bodyText": "what's this representation thing for? Wasn't the problem just about the wrong type of visitor being used?", "author": "marianogonzalez", "createdAt": "2020-06-16T15:40:33Z", "path": "modules/extensions-spring-support/src/main/java/org/mule/runtime/module/extension/internal/config/dsl/AbstractExtensionObjectFactory.java", "diffHunk": "@@ -92,7 +92,8 @@ protected ParametersResolver getParametersResolver() {\n   }\n \n   private ParametersResolver parametersResolverFromValues(MuleContext muleContext) {\n-    return ParametersResolver.fromValues(parameters, muleContext, isLazyInitMode(properties), reflectionCache, expressionManager);\n+    return ParametersResolver.fromValues(parameters, muleContext, isLazyInitMode(properties), reflectionCache, expressionManager,\n+                                         this.getRepresentation());", "originalCommit": "8abb558b7951a3f557c59cff01915b507c2f367b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NDMyMQ==", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440954321", "bodyText": "this is just for the WARN message being logged in the case the types have to be converted, to proivde infromation about where the parameter is defined.", "author": "elrodro83", "createdAt": "2020-06-16T15:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MTQwOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e33655c17874bb41d73839511920838a8a2e318d", "url": "https://github.com/mulesoft/mule/commit/e33655c17874bb41d73839511920838a8a2e318d", "message": "review", "committedDate": "2020-06-16T16:06:57Z", "type": "commit"}, {"oid": "4757ed3abb7d37cf6cad15c8f8c68643009efaab", "url": "https://github.com/mulesoft/mule/commit/4757ed3abb7d37cf6cad15c8f8c68643009efaab", "message": "fix", "committedDate": "2020-06-16T17:03:05Z", "type": "commit"}]}