{"pr_number": 9110, "pr_title": "Fix/mule 18582 3.x", "pr_createdAt": "2020-07-24T19:41:33Z", "pr_url": "https://github.com/mulesoft/mule/pull/9110", "timeline": [{"oid": "3ad4cb206c29e2925d24db9cc62df1a827de91a1", "url": "https://github.com/mulesoft/mule/commit/3ad4cb206c29e2925d24db9cc62df1a827de91a1", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nAdded the \"cancelStart\" method to deployables in order to stop things like a reconnect forever policy that will never succed. The cancelStart should be called before attempting to stop and artifact so that the \"start\" will be able to finish and release the locks that would prevent the \"stop\" from executing.", "committedDate": "2020-07-22T20:51:12Z", "type": "commit"}, {"oid": "cfaed5d37a1cd30e46090455285cac9482b68523", "url": "https://github.com/mulesoft/mule/commit/cfaed5d37a1cd30e46090455285cac9482b68523", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nChanged the javadocs for Artifact.cancelStart", "committedDate": "2020-07-24T18:26:32Z", "type": "commit"}, {"oid": "4377286ca58748c57fcf35d65b912fc298c2f548", "url": "https://github.com/mulesoft/mule/commit/4377286ca58748c57fcf35d65b912fc298c2f548", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nAdded the call to cancelStart in some inner stop methods", "committedDate": "2020-07-24T19:29:40Z", "type": "commit"}, {"oid": "282bd22a733a76a8ecee5dc71d8b3903fce3dc4c", "url": "https://github.com/mulesoft/mule/commit/282bd22a733a76a8ecee5dc71d8b3903fce3dc4c", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nChanges to DeploymentServiceTestCase. Removed the use of a static variable and optimized the number of threads in the retryPolicyTest", "committedDate": "2020-07-27T13:51:16Z", "type": "commit"}, {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162", "url": "https://github.com/mulesoft/mule/commit/294035ccbcfb8f3408c40c5bf52b765311c50162", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nChanged the name of the method in the RetryPolicyTemplate interface from cancelStart to stopRetrying", "committedDate": "2020-07-27T17:41:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODE5MQ==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778191", "bodyText": "Shouldn't this be also named stopRetrying?", "author": "IvanAndresFritzler", "createdAt": "2020-07-28T18:14:39Z", "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -37,6 +38,8 @@\n \n     private MuleContext muleContext;\n \n+    private AtomicBoolean cancelStart = new AtomicBoolean(false);", "originalCommit": "294035ccbcfb8f3408c40c5bf52b765311c50162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3MjcxOQ==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461872719", "bodyText": "Applied the suggested changes", "author": "pabloperalta", "createdAt": "2020-07-28T20:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "46712e1b327e277be351c93c55f91ddd41d7a03f", "chunk": "diff --git a/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java b/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\nindex ecd91167760..68a5cbc78ee 100644\n--- a/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\n+++ b/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\n\n@@ -38,7 +38,7 @@ public abstract class AbstractPolicyTemplate implements RetryPolicyTemplate, Mul\n \n     private MuleContext muleContext;\n \n-    private AtomicBoolean cancelStart = new AtomicBoolean(false);\n+    private AtomicBoolean stopRetrying = new AtomicBoolean(false);\n \n     private volatile boolean lastRetryInterrupted = false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODYxMA==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778610", "bodyText": "same (stopRetrying)", "author": "IvanAndresFritzler", "createdAt": "2020-07-28T18:15:22Z", "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -98,7 +101,7 @@ public RetryContext execute(RetryCallback callback, WorkManager workManager) thr\n                     }\n                 }\n             }\n-            while (status.isOk());\n+            while (status.isOk() && !cancelStart.get());", "originalCommit": "294035ccbcfb8f3408c40c5bf52b765311c50162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MDYwOQ==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r462470609", "bodyText": "Applied the suggested changes", "author": "pabloperalta", "createdAt": "2020-07-29T17:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "46712e1b327e277be351c93c55f91ddd41d7a03f", "chunk": "diff --git a/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java b/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\nindex ecd91167760..68a5cbc78ee 100644\n--- a/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\n+++ b/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\n\n@@ -101,7 +101,7 @@ public abstract class AbstractPolicyTemplate implements RetryPolicyTemplate, Mul\n                     }\n                 }\n             }\n-            while (status.isOk() && !cancelStart.get());\n+            while (status.isOk() && !stopRetrying.get());\n \n             context.setFailed(cause);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODkyMw==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778923", "bodyText": "same (isStopRetrying)", "author": "IvanAndresFritzler", "createdAt": "2020-07-28T18:15:57Z", "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -154,4 +157,15 @@ public boolean isSynchronous()\n     {\n         return true;\n     }\n+\n+    protected AtomicBoolean getCancelStart()", "originalCommit": "294035ccbcfb8f3408c40c5bf52b765311c50162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MDczOQ==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r462470739", "bodyText": "Applied the suggested changes", "author": "pabloperalta", "createdAt": "2020-07-29T17:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "46712e1b327e277be351c93c55f91ddd41d7a03f", "chunk": "diff --git a/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java b/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\nindex ecd91167760..68a5cbc78ee 100644\n--- a/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\n+++ b/core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java\n\n@@ -158,14 +158,14 @@ public abstract class AbstractPolicyTemplate implements RetryPolicyTemplate, Mul\n         return true;\n     }\n \n-    protected AtomicBoolean getCancelStart()\n+    protected AtomicBoolean getStopRetrying()\n     {\n-        return cancelStart;\n+        return stopRetrying;\n     }\n \n     @Override\n     public void stopRetrying()\n     {\n-        cancelStart.compareAndSet(false, true);\n+        stopRetrying.compareAndSet(false, true);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDI1OA==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461784258", "bodyText": "Better to avoid magic numbers and stick to 2 if no extra logic (or cases) involved", "author": "IvanAndresFritzler", "createdAt": "2020-07-28T18:25:11Z", "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher.domain;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleContext;\n+import org.mule.api.context.MuleContextBuilder;\n+import org.mule.api.context.MuleContextFactory;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.retry.RetryPolicyTemplate;\n+import org.mule.api.transport.Connector;\n+import org.mule.module.launcher.artifact.ArtifactClassLoader;\n+import org.mule.module.launcher.descriptor.DomainDescriptor;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n+\n+public class DefaultMuleDomainTestCase\n+{\n+    private static final MuleContextFactory muleContextFactory = mock(MuleContextFactory.class);\n+    private DomainDescriptor domainDescriptor;\n+    private DomainClassLoaderRepository domainClassLoaderRepository;\n+    private DefaultMuleDomain defaultMuleDomain;\n+    private MuleContext muleContext;\n+    private MuleRegistry muleRegistry;\n+\n+    private URL resource;\n+    private ArtifactClassLoader artifactClassLoader;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        domainDescriptor = mock(DomainDescriptor.class);\n+        domainClassLoaderRepository = mock(DomainClassLoaderRepository.class);\n+        artifactClassLoader = mock(ArtifactClassLoader.class);\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(anyString())).thenReturn(null);\n+        resource = getClass().getClassLoader().getResource(\"empty-domain-config.xml\").toURI().toURL();\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(DOMAIN_CONFIG_FILE_LOCATION)).thenReturn(resource);\n+\n+        muleContext = mock(MuleContext.class);\n+        when(muleContextFactory.createMuleContext(any(List.class), any(MuleContextBuilder.class))).thenReturn(muleContext);\n+\n+        muleRegistry = mock(MuleRegistry.class);\n+        when(muleContext.getRegistry()).thenReturn(muleRegistry);\n+\n+        defaultMuleDomain = new TestMuleDomain(domainClassLoaderRepository, domainDescriptor);\n+        defaultMuleDomain.init();\n+    }\n+\n+    @Test\n+    public void testCancelStartOneConectorWithRetryPolicy()\n+    {\n+        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Connectors's retry policy start is also cancelled\n+        verify(retryPolicyTemplate).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithRetryPolicies()", "originalCommit": "294035ccbcfb8f3408c40c5bf52b765311c50162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MDk4MA==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r462470980", "bodyText": "Applied the suggested changes", "author": "pabloperalta", "createdAt": "2020-07-29T17:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "46712e1b327e277be351c93c55f91ddd41d7a03f", "chunk": "diff --git a/modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java b/modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java\nindex 8df7e65a352..7f22eb2d159 100644\n--- a/modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java\n+++ b/modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java\n\n@@ -64,9 +64,9 @@ public class DefaultMuleDomainTestCase\n     }\n \n     @Test\n-    public void testCancelStartOneConectorWithRetryPolicy()\n+    public void testCancelStartOneConnectorWithRetryPolicy()\n     {\n-        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        // Given a default mule application with 1 connector that has retryPolicy\n         List<Connector> connectors = new ArrayList<>();\n \n         RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDU3MQ==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461784571", "bodyText": "Same (stick to two)", "author": "IvanAndresFritzler", "createdAt": "2020-07-28T18:25:43Z", "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher.domain;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleContext;\n+import org.mule.api.context.MuleContextBuilder;\n+import org.mule.api.context.MuleContextFactory;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.retry.RetryPolicyTemplate;\n+import org.mule.api.transport.Connector;\n+import org.mule.module.launcher.artifact.ArtifactClassLoader;\n+import org.mule.module.launcher.descriptor.DomainDescriptor;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n+\n+public class DefaultMuleDomainTestCase\n+{\n+    private static final MuleContextFactory muleContextFactory = mock(MuleContextFactory.class);\n+    private DomainDescriptor domainDescriptor;\n+    private DomainClassLoaderRepository domainClassLoaderRepository;\n+    private DefaultMuleDomain defaultMuleDomain;\n+    private MuleContext muleContext;\n+    private MuleRegistry muleRegistry;\n+\n+    private URL resource;\n+    private ArtifactClassLoader artifactClassLoader;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        domainDescriptor = mock(DomainDescriptor.class);\n+        domainClassLoaderRepository = mock(DomainClassLoaderRepository.class);\n+        artifactClassLoader = mock(ArtifactClassLoader.class);\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(anyString())).thenReturn(null);\n+        resource = getClass().getClassLoader().getResource(\"empty-domain-config.xml\").toURI().toURL();\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(DOMAIN_CONFIG_FILE_LOCATION)).thenReturn(resource);\n+\n+        muleContext = mock(MuleContext.class);\n+        when(muleContextFactory.createMuleContext(any(List.class), any(MuleContextBuilder.class))).thenReturn(muleContext);\n+\n+        muleRegistry = mock(MuleRegistry.class);\n+        when(muleContext.getRegistry()).thenReturn(muleRegistry);\n+\n+        defaultMuleDomain = new TestMuleDomain(domainClassLoaderRepository, domainDescriptor);\n+        defaultMuleDomain.init();\n+    }\n+\n+    @Test\n+    public void testCancelStartOneConectorWithRetryPolicy()\n+    {\n+        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Connectors's retry policy start is also cancelled\n+        verify(retryPolicyTemplate).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithRetryPolicies()\n+    {\n+        // Given a default mule applicacion with 5 connectors that have retryPolicies\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate1 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate2 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate3 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate4 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate5 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Then connector's retry policies start is also cancelled\n+        verify(retryPolicyTemplate1, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate2, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate3, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate4, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate5, times(1)).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithNullRetryPolicies()\n+    {\n+        // Given a default mule applicacion with 5 connectors that have retryPolicies\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        Connector connector1 = mock(Connector.class);\n+        connectors.add(connector1);\n+        Connector connector2 = mock(Connector.class);\n+        connectors.add(connector2);\n+        Connector connector3 = mock(Connector.class);\n+        connectors.add(connector3);\n+        Connector connector4 = mock(Connector.class);\n+        connectors.add(connector4);\n+        Connector connector5 = mock(Connector.class);\n+        connectors.add(connector5);\n+\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Then no error occurs\n+\n+    }\n+\n+    @Test\n+    public void testStopCancelStartFiveConectors()", "originalCommit": "294035ccbcfb8f3408c40c5bf52b765311c50162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MDg4Ng==", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r462470886", "bodyText": "Applied the suggested changes", "author": "pabloperalta", "createdAt": "2020-07-29T17:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "46712e1b327e277be351c93c55f91ddd41d7a03f", "chunk": "diff --git a/modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java b/modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java\nindex 8df7e65a352..7f22eb2d159 100644\n--- a/modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java\n+++ b/modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java\n\n@@ -64,9 +64,9 @@ public class DefaultMuleDomainTestCase\n     }\n \n     @Test\n-    public void testCancelStartOneConectorWithRetryPolicy()\n+    public void testCancelStartOneConnectorWithRetryPolicy()\n     {\n-        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        // Given a default mule application with 1 connector that has retryPolicy\n         List<Connector> connectors = new ArrayList<>();\n \n         RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n"}}, {"oid": "46712e1b327e277be351c93c55f91ddd41d7a03f", "url": "https://github.com/mulesoft/mule/commit/46712e1b327e277be351c93c55f91ddd41d7a03f", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nFixed the name of the field in the RetryPolicy.\nChanged the tests so that the \"multiple connectors and retry policies\" case is represented by a number of Two instead of Five both in the DefaultMuleApplicationTestCase.java as in the DefaultMuleDomainTestCase\nFixed some spelling errors", "committedDate": "2020-07-28T19:13:43Z", "type": "commit"}, {"oid": "0026c6c071a52b6013678fc9078d1350e5fe8645", "url": "https://github.com/mulesoft/mule/commit/0026c6c071a52b6013678fc9078d1350e5fe8645", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nChanged method name. getStopRetrying to isStopRetrying", "committedDate": "2020-07-29T13:39:38Z", "type": "commit"}]}