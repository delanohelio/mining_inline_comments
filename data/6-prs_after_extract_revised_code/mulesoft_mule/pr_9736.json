{"pr_number": 9736, "pr_title": "MULE-18906: Watermark in polling sources is updated when source is stopping.", "pr_createdAt": "2020-11-16T21:05:09Z", "pr_url": "https://github.com/mulesoft/mule/pull/9736", "timeline": [{"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7", "url": "https://github.com/mulesoft/mule/commit/0f55324d34bea542fa43d0f025676afb17c2aad7", "message": "all", "committedDate": "2020-11-16T21:04:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3OTkwMQ==", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r524579901", "bodyText": "Comment from @Bardammu :\n\"We can try to retrieve all the values of recentlyProcessedIds and then call contains for each key. In this way, we avoid making a request for each key to OSv2.\nNot in this PR, it's something we should think about.\"", "author": "SebaElizalde", "createdAt": "2020-11-16T21:06:17Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -603,14 +607,19 @@ private void setCurrentWatermarkAsMinimumRejectWatermark(Serializable minimumRej\n     watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, minimumRejectedByLimitPassingWatermark);\n   }\n \n-  private void updateRecentlyProcessedIds() throws ObjectStoreException {\n+  private void updateRecentlyProcessedIds(boolean clearRecentlyProcessed) throws ObjectStoreException {\n     Lock osClearingLock = lockFactory.createLock(UPDATE_PROCESSED_LOCK);\n     try {\n       osClearingLock.lock();\n       List<String> strings = idsOnUpdatedWatermark.allKeys();\n-      recentlyProcessedIds.clear();\n+      if (clearRecentlyProcessed) {\n+        recentlyProcessedIds.clear();\n+      }\n       strings.forEach(key -> {\n         try {\n+          if (!clearRecentlyProcessed && recentlyProcessedIds.contains(key)) {", "originalCommit": "0f55324d34bea542fa43d0f025676afb17c2aad7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6b56cca5bbed65b941a47efbedea03fb2e37e18", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex bf464ac296a..c550e380228 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -607,19 +605,14 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n     watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, minimumRejectedByLimitPassingWatermark);\n   }\n \n-  private void updateRecentlyProcessedIds(boolean clearRecentlyProcessed) throws ObjectStoreException {\n+  private void updateRecentlyProcessedIds() throws ObjectStoreException {\n     Lock osClearingLock = lockFactory.createLock(UPDATE_PROCESSED_LOCK);\n     try {\n       osClearingLock.lock();\n       List<String> strings = idsOnUpdatedWatermark.allKeys();\n-      if (clearRecentlyProcessed) {\n-        recentlyProcessedIds.clear();\n-      }\n+      recentlyProcessedIds.clear();\n       strings.forEach(key -> {\n         try {\n-          if (!clearRecentlyProcessed && recentlyProcessedIds.contains(key)) {\n-            recentlyProcessedIds.remove(key);\n-          }\n           recentlyProcessedIds.store(key, idsOnUpdatedWatermark.retrieve(key));\n         } catch (ObjectStoreException e) {\n           throw new MuleRuntimeException(createStaticMessage(\"An error occurred while updating the watermark Ids. Failed to update key '%s' in Watermark-IDs ObjectStore: %s\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMjI4Mg==", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525122282", "bodyText": "Why are these changes necesary? Can't we just skip this step if the source is stopping?", "author": "ndinu", "createdAt": "2020-11-17T12:38:32Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -603,14 +607,19 @@ private void setCurrentWatermarkAsMinimumRejectWatermark(Serializable minimumRej\n     watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, minimumRejectedByLimitPassingWatermark);\n   }\n \n-  private void updateRecentlyProcessedIds() throws ObjectStoreException {\n+  private void updateRecentlyProcessedIds(boolean clearRecentlyProcessed) throws ObjectStoreException {", "originalCommit": "0f55324d34bea542fa43d0f025676afb17c2aad7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6b56cca5bbed65b941a47efbedea03fb2e37e18", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex bf464ac296a..c550e380228 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -607,19 +605,14 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n     watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, minimumRejectedByLimitPassingWatermark);\n   }\n \n-  private void updateRecentlyProcessedIds(boolean clearRecentlyProcessed) throws ObjectStoreException {\n+  private void updateRecentlyProcessedIds() throws ObjectStoreException {\n     Lock osClearingLock = lockFactory.createLock(UPDATE_PROCESSED_LOCK);\n     try {\n       osClearingLock.lock();\n       List<String> strings = idsOnUpdatedWatermark.allKeys();\n-      if (clearRecentlyProcessed) {\n-        recentlyProcessedIds.clear();\n-      }\n+      recentlyProcessedIds.clear();\n       strings.forEach(key -> {\n         try {\n-          if (!clearRecentlyProcessed && recentlyProcessedIds.contains(key)) {\n-            recentlyProcessedIds.remove(key);\n-          }\n           recentlyProcessedIds.store(key, idsOnUpdatedWatermark.retrieve(key));\n         } catch (ObjectStoreException e) {\n           throw new MuleRuntimeException(createStaticMessage(\"An error occurred while updating the watermark Ids. Failed to update key '%s' in Watermark-IDs ObjectStore: %s\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMzAzNw==", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525123037", "bodyText": "where does the need of doing this comes from? I though that if the source was stopping we could skip this.", "author": "ndinu", "createdAt": "2020-11-17T12:39:51Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -200,9 +200,13 @@ private void poll(SourceCallback<T, A> sourceCallback) {\n       DefaultPollContext pollContext = new DefaultPollContext(sourceCallback, getCurrentWatermark(), getUpdatedWatermark());\n       try {\n         delegate.poll(pollContext);\n-        pollContext.getUpdatedWatermark()\n-            .ifPresent(w -> updateWatermark(w, pollContext.getWatermarkComparator(),\n-                                            pollContext.getMinimumRejectedByLimitPassingWatermark().orElse(null)));\n+        if (isRequestedToStop()) {\n+          updateRecentlyProcessedIds(false);", "originalCommit": "0f55324d34bea542fa43d0f025676afb17c2aad7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6b56cca5bbed65b941a47efbedea03fb2e37e18", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex bf464ac296a..c550e380228 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -200,9 +200,7 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n       DefaultPollContext pollContext = new DefaultPollContext(sourceCallback, getCurrentWatermark(), getUpdatedWatermark());\n       try {\n         delegate.poll(pollContext);\n-        if (isRequestedToStop()) {\n-          updateRecentlyProcessedIds(false);\n-        } else {\n+        if (!isRequestedToStop()) {\n           pollContext.getUpdatedWatermark()\n               .ifPresent(w -> updateWatermark(w, pollContext.getWatermarkComparator(),\n                                               pollContext.getMinimumRejectedByLimitPassingWatermark().orElse(null)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNzA4NQ==", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525127085", "bodyText": "Should the default for this mean, never await? so that we do not affect existing tests.", "author": "ndinu", "createdAt": "2020-11-17T12:46:57Z", "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/WatermarkingPetAdoptionSource.java", "diffHunk": "@@ -22,22 +22,22 @@\n import org.mule.runtime.extension.api.runtime.source.SourceCallbackContext;\n \n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n \n @MetadataScope(outputResolver = PollingSourceMetadataResolver.class)\n @MediaType(TEXT_PLAIN)\n-public class WatermarkingPetAdoptionSource extends PollingSource<String, Void> {\n+public class WatermarkingPetAdoptionSource extends PollingSource<String, Integer> {\n \n-  public static int STARTED_POLLS;\n-  private int index;\n-  private int polls;\n+  private int pollCounter;\n+  private static int index = 0;\n+  private static boolean alreadyWaited = false;\n+  private static CountDownLatch continueLatch = new CountDownLatch(1);\n \n-  @Parameter\n-  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"false\")\n-  protected boolean useWatermark;\n+  public static CountDownLatch beginLatch = new CountDownLatch(1);\n \n   @Parameter\n-  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"false\")\n-  protected boolean idempotent;\n+  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"0\")\n+  protected Integer awaitOnItem;", "originalCommit": "0f55324d34bea542fa43d0f025676afb17c2aad7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyNDIyOQ==", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525324229", "bodyText": "0 means never wait, I can set it to -1 to be more clear. Or start the count from 0 (that would be the first item) and make -1 default.", "author": "SebaElizalde", "createdAt": "2020-11-17T16:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNzA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MzQxNw==", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525363417", "bodyText": "\ud83d\udc4d I think it is ok the way it is.", "author": "ndinu", "createdAt": "2020-11-17T17:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNzA4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNzcxOQ==", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525137719", "bodyText": "Use constants for timeout and frequency", "author": "ndinu", "createdAt": "2020-11-17T13:05:22Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceRestartingTestCase.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.module.extension.source;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.number.OrderingComparison.lessThanOrEqualTo;\n+import static org.mule.runtime.module.extension.internal.ExtensionProperties.ENABLE_POLLING_SOURCE_LIMIT_PARAMETER;\n+import static org.mule.tck.probe.PollingProber.check;\n+import static org.mule.tck.probe.PollingProber.checkNot;\n+import static org.mule.test.petstore.extension.WatermarkingPetAdoptionSource.beginLatch;\n+import static org.mule.test.petstore.extension.WatermarkingPetAdoptionSource.resetSource;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.util.MultiMap;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.test.module.extension.AbstractExtensionFunctionalTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class PollingSourceRestartingTestCase extends AbstractExtensionFunctionalTestCase {\n+\n+  private static int PROBER_TIMEOUT = 30000;\n+  private static int CHECK_NOT_PROBER_TIMEOUT = 5000;\n+  private static int PROBER_FREQUENCY = 500;\n+\n+  protected static final Map<String, Object> EXTENSION_LOADER_CONTEXT_ADDITIONAL_PARAMS = new HashMap<String, Object>() {\n+\n+    {\n+      put(ENABLE_POLLING_SOURCE_LIMIT_PARAMETER, true);\n+    }\n+  };\n+\n+  protected static MultiMap<Integer, String> ADOPTIONS = new MultiMap<>();\n+\n+  public static class AdoptionProcessor implements Processor {\n+\n+    @Override\n+    public CoreEvent process(CoreEvent event) throws MuleException {\n+      String pet = (String) event.getMessage().getPayload().getValue();\n+      Integer poll = (Integer) event.getMessage().getAttributes().getValue();\n+      synchronized (ADOPTIONS) {\n+        ADOPTIONS.put(poll, pet);\n+      }\n+      return event;\n+    }\n+  }\n+\n+  @Override\n+  protected boolean mustRegenerateExtensionModels() {\n+    return true;\n+  }\n+\n+  @Override\n+  protected Map<String, Object> getExtensionLoaderContextAdditionalParameters() {\n+    return EXTENSION_LOADER_CONTEXT_ADDITIONAL_PARAMS;\n+  }\n+\n+  @Override\n+  protected String getConfigFile() {\n+    return \"polling-source-restarting-config.xml\";\n+  }\n+\n+  @Override\n+  protected void doTearDown() throws Exception {\n+    ADOPTIONS.clear();\n+    resetSource();\n+  }\n+\n+  @Test\n+  public void unprocessedItemsAreProcessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"Colonel Meow\", \"Daphne\", \"Elsa\"),\n+                                           \"unprocessedItemsAreProcessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\"),\n+                                           \"processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"ANIBAL\", \"BARBARA\", \"Colonel Meow\"),\n+                                           \"processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void unprocessedItemsAreProcessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"Colonel Meow\", \"Daphne\", \"Elsa\"),\n+                                           \"unprocessedItemsAreProcessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(3);\n+  }\n+\n+  @Test\n+  public void processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\"),\n+                                           \"processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(2);\n+  }\n+\n+  @Test\n+  public void processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"ANIBAL\", \"BARBARA\", \"Colonel Meow\"),\n+                                           \"processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(2);\n+  }\n+\n+  private void assertWatermarkingForStopStartScenario(List<String> expectedPets, String flowName) throws Exception {\n+    startFlow(flowName);\n+    beginLatch.await();\n+    stopFlow(flowName);\n+    check(5000, 1000, () -> getFlowConstruct(flowName).getLifecycleState().isStopped());", "originalCommit": "0f55324d34bea542fa43d0f025676afb17c2aad7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNjc3NQ==", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525516775", "bodyText": "\ud83d\ude22", "author": "ndinu", "createdAt": "2020-11-17T20:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNzcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a47efef6f232335975eaeb9a0f16285a2737e6f", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceRestartingTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceRestartingTestCase.java\nindex 72726fb2132..6e4851158c1 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceRestartingTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceRestartingTestCase.java\n\n@@ -124,7 +124,7 @@ public class PollingSourceRestartingTestCase extends AbstractExtensionFunctional\n     startFlow(flowName);\n     beginLatch.await();\n     stopFlow(flowName);\n-    check(5000, 1000, () -> getFlowConstruct(flowName).getLifecycleState().isStopped());\n+    check(PROBER_TIMEOUT, PROBER_FREQUENCY, () -> getFlowConstruct(flowName).getLifecycleState().isStopped());\n     startFlow(flowName);\n \n     waitForAllPetsToBeAdopted(expectedPets);\n"}}, {"oid": "d6b56cca5bbed65b941a47efbedea03fb2e37e18", "url": "https://github.com/mulesoft/mule/commit/d6b56cca5bbed65b941a47efbedea03fb2e37e18", "message": "pr review", "committedDate": "2020-11-17T19:30:01Z", "type": "commit"}, {"oid": "8a47efef6f232335975eaeb9a0f16285a2737e6f", "url": "https://github.com/mulesoft/mule/commit/8a47efef6f232335975eaeb9a0f16285a2737e6f", "message": "constants", "committedDate": "2020-11-17T21:23:00Z", "type": "commit"}]}