{"pr_number": 9786, "pr_title": "MULE-18976: Implement Feature Flagging ", "pr_createdAt": "2020-11-25T18:59:01Z", "pr_url": "https://github.com/mulesoft/mule/pull/9786", "timeline": [{"oid": "81ebc81fe77d30529d65a4fb5ac01e9c10206c8c", "url": "https://github.com/mulesoft/mule/commit/81ebc81fe77d30529d65a4fb5ac01e9c10206c8c", "message": "Initial commit", "committedDate": "2020-11-25T18:22:10Z", "type": "commit"}, {"oid": "f208d1c66319072e9d5916afa6d14cd810c56572", "url": "https://github.com/mulesoft/mule/commit/f208d1c66319072e9d5916afa6d14cd810c56572", "message": "wip", "committedDate": "2020-11-25T18:22:10Z", "type": "commit"}, {"oid": "8aac31e170e2b8af371ff53f3215b3db54e88bae", "url": "https://github.com/mulesoft/mule/commit/8aac31e170e2b8af371ff53f3215b3db54e88bae", "message": "wip", "committedDate": "2020-11-25T18:22:10Z", "type": "commit"}, {"oid": "8ae76dcc15287cb8634894301bdedf4c9c374efb", "url": "https://github.com/mulesoft/mule/commit/8ae76dcc15287cb8634894301bdedf4c9c374efb", "message": "Adjust some details", "committedDate": "2020-11-25T18:22:10Z", "type": "commit"}, {"oid": "8743016da5f8921abfa9968a7ccfba61cb3abab5", "url": "https://github.com/mulesoft/mule/commit/8743016da5f8921abfa9968a7ccfba61cb3abab5", "message": "Adapt tests to changes", "committedDate": "2020-11-25T18:22:11Z", "type": "commit"}, {"oid": "52e65d8422df900edc7a3896afd8f804c3d71fa4", "url": "https://github.com/mulesoft/mule/commit/52e65d8422df900edc7a3896afd8f804c3d71fa4", "message": "Remove unused import", "committedDate": "2020-11-25T18:46:58Z", "type": "commit"}, {"oid": "c52493f24fff80bbdf0be04f2080ce6b183470c2", "url": "https://github.com/mulesoft/mule/commit/c52493f24fff80bbdf0be04f2080ce6b183470c2", "message": "Add javadoc", "committedDate": "2020-11-25T18:56:23Z", "type": "commit"}, {"oid": "3f830faf2040b9f6bad358db8ca070d48f6cc233", "url": "https://github.com/mulesoft/mule/commit/3f830faf2040b9f6bad358db8ca070d48f6cc233", "message": "Add default constructor", "committedDate": "2020-11-25T23:13:09Z", "type": "commit"}, {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383", "url": "https://github.com/mulesoft/mule/commit/fc85eb52b725be4d8b231530e378fb949c24e383", "message": "Fix petstore tests", "committedDate": "2020-11-26T09:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTA3OA==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155078", "bodyText": "allure", "author": "elrodro83", "createdAt": "2020-11-26T17:12:12Z", "path": "core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.tck.size.SmallTest;\n+\n+@SmallTest\n+public class FeatureFlaggingRegistryTestCase {", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ce2acdac7c9a87224525ae3b940581db1b4bd06", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java\nindex 3465743d95c..d3a261c1b64 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java\n\n@@ -11,7 +11,11 @@ import static java.lang.String.format;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.is;\n+import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.DEPLOYMENT_CONFIGURATION;\n+import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.FeatureFlaggingStory.FEATURE_FLAGGING;\n \n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Story;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTE2MQ==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155161", "bodyText": "allure", "author": "elrodro83", "createdAt": "2020-11-26T17:12:24Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.internal.config;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.config.FeatureFlaggingService;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@RunWith(Parameterized.class)\n+public class DefaultFeatureFlaggingServiceTestCase {", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ce2acdac7c9a87224525ae3b940581db1b4bd06", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\nindex 2ad3d65398d..77c01416aab 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\n\n@@ -7,6 +7,8 @@\n \n package org.mule.runtime.core.internal.config;\n \n+import io.qameta.allure.Feature;\n+import io.qameta.allure.Story;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTU3Nw==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155577", "bodyText": "will this be cherrypicked?", "author": "elrodro83", "createdAt": "2020-11-26T17:13:18Z", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2ODk1OA==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531168958", "bodyText": "Yes, I think we should backport it to 4.3.0 and perhaps 4.2.x/4.2.2. Do you agree?", "author": "szaffarano", "createdAt": "2020-11-26T17:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c8b4582e5d7181c4033215ef316d4bfd3055aef4", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\nindex 18a12800f9c..3cc06af003a 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n\n@@ -38,7 +38,7 @@ import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n  * </code>\n  * \n  * @see FeatureFlaggingRegistry\n- * @since 4.4.0\n+ * @since 4.4.0, 4.3.0, 4.2.3\n  */\n public class FeatureFlaggingRegistry {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NjQwMg==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531156402", "bodyText": "add javadoc", "author": "elrodro83", "createdAt": "2020-11-26T17:15:06Z", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingService.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+/**\n+ * This service exposes the features that were flagged based on the configurations registered through the\n+ * {@link FeatureFlaggingRegistry}. These configurations will be evaluated when an application is deployed, which means that each\n+ * application will have its own set of flags independently of the rest of the applications deployed in a given runtime.\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public interface FeatureFlaggingService {\n+\n+  String FEATURE_FLAGGING_SERVICE_KEY = \"core.featureFlaggingService\";\n+\n+  boolean isEnabled(String feature);", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8b4582e5d7181c4033215ef316d4bfd3055aef4", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingService.java b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingService.java\nindex b7bad51e520..1f7d759d70b 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingService.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingService.java\n\n@@ -13,11 +13,21 @@ package org.mule.runtime.core.api.config;\n  * application will have its own set of flags independently of the rest of the applications deployed in a given runtime.\n  * \n  * @see FeatureFlaggingRegistry\n- * @since 4.4.0\n+ * @since 4.4.0, 4.3.0, 4.2.3\n  */\n public interface FeatureFlaggingService {\n \n   String FEATURE_FLAGGING_SERVICE_KEY = \"core.featureFlaggingService\";\n \n+  /**\n+   * Inform if a given @{link feature} is enabled for the current context.\n+   * \n+   * @see FeatureFlaggingRegistry\n+   * @see FeatureFlaggingService\n+   * \n+   * @param feature The name of the feature being queried, as per was registered through {@link FeatureFlaggingRegistry}\n+   * \n+   * @return a boolean indicating if the features is enabled for the current execution context\n+   */\n   boolean isEnabled(String feature);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzI3Nw==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157277", "bodyText": "javadoc", "author": "elrodro83", "createdAt": "2020-11-26T17:17:08Z", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8b4582e5d7181c4033215ef316d4bfd3055aef4", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\nindex 18a12800f9c..3cc06af003a 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n\n@@ -38,7 +38,7 @@ import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n  * </code>\n  * \n  * @see FeatureFlaggingRegistry\n- * @since 4.4.0\n+ * @since 4.4.0, 4.3.0, 4.2.3\n  */\n public class FeatureFlaggingRegistry {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzMwMg==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157302", "bodyText": "javadoc", "author": "elrodro83", "createdAt": "2020-11-26T17:17:11Z", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8b4582e5d7181c4033215ef316d4bfd3055aef4", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\nindex 18a12800f9c..3cc06af003a 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n\n@@ -38,7 +38,7 @@ import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n  * </code>\n  * \n  * @see FeatureFlaggingRegistry\n- * @since 4.4.0\n+ * @since 4.4.0, 4.3.0, 4.2.3\n  */\n public class FeatureFlaggingRegistry {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzMzMg==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157332", "bodyText": "javadoc", "author": "elrodro83", "createdAt": "2020-11-26T17:17:15Z", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {\n+    if (isNullOrEmpty(feature)) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Invalid feature name\"));\n+    }\n+\n+    if (condition == null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Error registering %s: condition must not be null\", feature));\n+    }\n+\n+    Predicate<MuleContext> added = configurations.putIfAbsent(feature, condition);\n+    if (added != null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Feature %s already registered\", feature));\n+    }\n+  }\n+\n+  public Map<String, Predicate<MuleContext>> getFeatureConfigurations() {", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8b4582e5d7181c4033215ef316d4bfd3055aef4", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\nindex 18a12800f9c..3cc06af003a 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n\n@@ -38,7 +38,7 @@ import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n  * </code>\n  * \n  * @see FeatureFlaggingRegistry\n- * @since 4.4.0\n+ * @since 4.4.0, 4.3.0, 4.2.3\n  */\n public class FeatureFlaggingRegistry {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzUwNw==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157507", "bodyText": "javadoc. Is this just for test?", "author": "elrodro83", "createdAt": "2020-11-26T17:17:35Z", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {\n+    if (isNullOrEmpty(feature)) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Invalid feature name\"));\n+    }\n+\n+    if (condition == null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Error registering %s: condition must not be null\", feature));\n+    }\n+\n+    Predicate<MuleContext> added = configurations.putIfAbsent(feature, condition);\n+    if (added != null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Feature %s already registered\", feature));\n+    }\n+  }\n+\n+  public Map<String, Predicate<MuleContext>> getFeatureConfigurations() {\n+    return unmodifiableMap(configurations);\n+  }\n+\n+  protected void clearFeatureConfigurations() {", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8b4582e5d7181c4033215ef316d4bfd3055aef4", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\nindex 18a12800f9c..3cc06af003a 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n\n@@ -38,7 +38,7 @@ import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n  * </code>\n  * \n  * @see FeatureFlaggingRegistry\n- * @since 4.4.0\n+ * @since 4.4.0, 4.3.0, 4.2.3\n  */\n public class FeatureFlaggingRegistry {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1Nzc2MA==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157760", "bodyText": "keep these lines separated with <p>", "author": "elrodro83", "createdAt": "2020-11-26T17:18:15Z", "path": "core/src/main/java/org/mule/runtime/core/api/config/MuleConfiguration.java", "diffHunk": "@@ -7,15 +7,18 @@\n package org.mule.runtime.core.api.config;\n \n import org.mule.api.annotation.NoImplement;\n+import org.mule.runtime.api.meta.MuleVersion;\n import org.mule.runtime.api.serialization.ObjectSerializer;\n import org.mule.runtime.core.api.MuleContext;\n import org.mule.runtime.core.api.construct.Flow;\n import org.mule.runtime.core.api.processor.strategy.ProcessingStrategy;\n import org.mule.runtime.core.api.processor.strategy.ProcessingStrategyFactory;\n \n+import java.util.Optional;\n+\n /**\n- * Configuration info. which can be set when creating the MuleContext but becomes immutable after startup.\n- * TODO MULE-13121 Cleanup MuleConfiguration removing redundant config in Mule 4\n+ * Configuration info. which can be set when creating the MuleContext but becomes immutable after startup. TODO MULE-13121 Cleanup", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac613e296dac362acf1b9d0351a035cd269daec0", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/config/MuleConfiguration.java b/core/src/main/java/org/mule/runtime/core/api/config/MuleConfiguration.java\nindex 1f8f2ef0b9c..216051c87ea 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/config/MuleConfiguration.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/config/MuleConfiguration.java\n\n@@ -17,8 +17,9 @@ import org.mule.runtime.core.api.processor.strategy.ProcessingStrategyFactory;\n import java.util.Optional;\n \n /**\n- * Configuration info. which can be set when creating the MuleContext but becomes immutable after startup. TODO MULE-13121 Cleanup\n- * MuleConfiguration removing redundant config in Mule 4\n+ * Configuration info. which can be set when creating the MuleContext but becomes immutable after startup.\n+ * <p/>\n+ * TODO MULE-13121 Cleanup MuleConfiguration removing redundant config in Mule 4\n  */\n @NoImplement\n public interface MuleConfiguration {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1ODc3OA==", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531158778", "bodyText": "static import", "author": "elrodro83", "createdAt": "2020-11-26T17:20:39Z", "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetStoreOperations.java", "diffHunk": "@@ -70,6 +89,14 @@ public String echoWithSignature(String message) {\n     return message + \" echoed by Petstore\";\n   }\n \n+  @MediaType(TEXT_PLAIN)\n+  public String featureFlaggedEcho(String message) {\n+    if (ffService.isEnabled(LEGACY_BEHAVIOUR)) {\n+      return String.format(\"%s [old way]\", message);", "originalCommit": "fc85eb52b725be4d8b231530e378fb949c24e383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3902992b7e5963b18df755a9a48187d5c59b0a3c", "chunk": "diff --git a/tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetStoreOperations.java b/tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetStoreOperations.java\nindex 6b8c449bb82..5593e12b3c5 100644\n--- a/tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetStoreOperations.java\n+++ b/tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetStoreOperations.java\n\n@@ -92,7 +93,7 @@ public class PetStoreOperations {\n   @MediaType(TEXT_PLAIN)\n   public String featureFlaggedEcho(String message) {\n     if (ffService.isEnabled(LEGACY_BEHAVIOUR)) {\n-      return String.format(\"%s [old way]\", message);\n+      return format(\"%s [old way]\", message);\n     }\n     return message;\n   }\n"}}, {"oid": "8ce2acdac7c9a87224525ae3b940581db1b4bd06", "url": "https://github.com/mulesoft/mule/commit/8ce2acdac7c9a87224525ae3b940581db1b4bd06", "message": "Add allure annotations", "committedDate": "2020-11-26T17:50:28Z", "type": "commit"}, {"oid": "c8b4582e5d7181c4033215ef316d4bfd3055aef4", "url": "https://github.com/mulesoft/mule/commit/c8b4582e5d7181c4033215ef316d4bfd3055aef4", "message": "Add javadocs", "committedDate": "2020-11-26T17:51:12Z", "type": "commit"}, {"oid": "ac613e296dac362acf1b9d0351a035cd269daec0", "url": "https://github.com/mulesoft/mule/commit/ac613e296dac362acf1b9d0351a035cd269daec0", "message": "Correct javadoct after code format", "committedDate": "2020-11-26T17:51:33Z", "type": "commit"}, {"oid": "3902992b7e5963b18df755a9a48187d5c59b0a3c", "url": "https://github.com/mulesoft/mule/commit/3902992b7e5963b18df755a9a48187d5c59b0a3c", "message": "Add static import", "committedDate": "2020-11-26T17:51:57Z", "type": "commit"}, {"oid": "a904741f787e0d887c189890c8b6edc702c33b01", "url": "https://github.com/mulesoft/mule/commit/a904741f787e0d887c189890c8b6edc702c33b01", "message": "Correct typo", "committedDate": "2020-11-26T17:55:46Z", "type": "commit"}]}