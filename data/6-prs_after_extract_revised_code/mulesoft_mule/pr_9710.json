{"pr_number": 9710, "pr_title": "MULE-18875: ValueProvider/SampleData optional parameters declared in resolver are not included in the model", "pr_createdAt": "2020-11-11T16:34:11Z", "pr_url": "https://github.com/mulesoft/mule/pull/9710", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMTY4NA==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r521601684", "bodyText": "use explicit imports", "author": "ndinu", "createdAt": "2020-11-11T19:53:39Z", "path": "tests/test-extensions/values-extension/src/main/java/org/mule/test/values/extension/ValuesOperations.java", "diffHunk": "@@ -10,15 +10,7 @@\n import org.mule.runtime.extension.api.annotation.param.Optional;\n import org.mule.runtime.extension.api.annotation.param.ParameterGroup;\n import org.mule.runtime.extension.api.annotation.values.OfValues;\n-import org.mule.test.values.extension.resolver.MultiLevelValueProvider;\n-import org.mule.test.values.extension.resolver.SimpleValueProvider;\n-import org.mule.test.values.extension.resolver.WithComplexActingParameter;\n-import org.mule.test.values.extension.resolver.WithConfigValueProvider;\n-import org.mule.test.values.extension.resolver.WithConnectionValueProvider;\n-import org.mule.test.values.extension.resolver.WithErrorValueProvider;\n-import org.mule.test.values.extension.resolver.WithMuleContextValueProvider;\n-import org.mule.test.values.extension.resolver.WithRequiredParameterFromGroupValueProvider;\n-import org.mule.test.values.extension.resolver.WithRequiredParametersValueProvider;\n+import org.mule.test.values.extension.resolver.*;", "originalCommit": "f6dd37253c5e9ae623a61d94b281bd31b1ab5976", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2be30dd3d42ae1fd8a9a28258a9a9c7b75932737", "chunk": "diff --git a/tests/test-extensions/values-extension/src/main/java/org/mule/test/values/extension/ValuesOperations.java b/tests/test-extensions/values-extension/src/main/java/org/mule/test/values/extension/ValuesOperations.java\nindex 84a92e6df72..3fe7668b16d 100644\n--- a/tests/test-extensions/values-extension/src/main/java/org/mule/test/values/extension/ValuesOperations.java\n+++ b/tests/test-extensions/values-extension/src/main/java/org/mule/test/values/extension/ValuesOperations.java\n\n@@ -10,7 +10,19 @@ import org.mule.runtime.extension.api.annotation.param.Connection;\n import org.mule.runtime.extension.api.annotation.param.Optional;\n import org.mule.runtime.extension.api.annotation.param.ParameterGroup;\n import org.mule.runtime.extension.api.annotation.values.OfValues;\n-import org.mule.test.values.extension.resolver.*;\n+import org.mule.test.values.extension.resolver.MultiLevelValueProvider;\n+import org.mule.test.values.extension.resolver.SimpleValueProvider;\n+import org.mule.test.values.extension.resolver.WithComplexActingParameter;\n+import org.mule.test.values.extension.resolver.WithConnectionValueProvider;\n+import org.mule.test.values.extension.resolver.WithConfigValueProvider;\n+import org.mule.test.values.extension.resolver.WithErrorValueProvider;\n+import org.mule.test.values.extension.resolver.WithOptionalParametersValueProvider;\n+import org.mule.test.values.extension.resolver.WithOptionalParametersWithDefaultValueProvider;\n+import org.mule.test.values.extension.resolver.WithRequiredAndOptionalParametersValueProvider;\n+import org.mule.test.values.extension.resolver.WithRequiredParameterFromGroupValueProvider;\n+import org.mule.test.values.extension.resolver.WithRequiredParameterValueProvider;\n+import org.mule.test.values.extension.resolver.WithRequiredParametersValueProvider;\n+import org.mule.test.values.extension.resolver.WithMuleContextValueProvider;\n \n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MjY4NQ==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525272685", "bodyText": "Maybe the parameter default value is useful data? Or do we want to leave it as null?", "author": "ndinu", "createdAt": "2020-11-17T15:53:33Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,17 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),", "originalCommit": "34684fb0aaddf8d6045107be780c4a032b8ebf43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NDcxNA==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525284714", "bodyText": "What do you have in mind? Inherit the default value from the real parameter? or allow to define a new default value at the ValueProvider?", "author": "gabrieldalborgo", "createdAt": "2020-11-17T16:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzODE3OA==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r526838178", "bodyText": "I had in mind setting the default value of the real parameter, which is the value that will be taken for values resolution is none is provided.", "author": "ndinu", "createdAt": "2020-11-19T12:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MjY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ace15307a539993d085e88940b50213232cbef7", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\nindex c9a98111d05..7ebc83b96e3 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\n\n@@ -254,17 +252,15 @@ public class ValueProvidersParameterDeclarationEnricher extends AbstractAnnotate\n         .orElse(empty());\n   }\n \n-  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n-                                                  Map<String, String> parameterNames,\n-                                                  List<ParameterDeclaration> allParameters) {\n+  private List<ActingParameterModel> getActingParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                              Map<String, String> parameterNames,\n+                                                              List<ParameterDeclaration> allParameters) {\n     Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n         .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n     return allParameters.stream()\n         .filter(param -> paramsInfo.containsKey(param.getName()))\n-        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),\n-                                                  param.hasDynamicType(), paramsInfo.get(param.getName()),\n-                                                  param.isConfigOverride(), param.isComponentId(), null, null, null,\n-                                                  param.getDslConfiguration(), null, null, null, emptyList(), emptySet()))\n+        .map(param -> new ImmutableActingParameterModel(param.getName(), paramsInfo.get(param.getName()),\n+                                                        param.getDefaultValue()))\n         .collect(toList());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3Mzc0OA==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525273748", "bodyText": "So, we say it is required when the @ Optional is not present in the VP, right?", "author": "ndinu", "createdAt": "2020-11-17T15:54:52Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,17 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),\n+                                                  param.hasDynamicType(), paramsInfo.get(param.getName()),", "originalCommit": "34684fb0aaddf8d6045107be780c4a032b8ebf43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NTA0Mg==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525285042", "bodyText": "Yes, that is right", "author": "gabrieldalborgo", "createdAt": "2020-11-17T16:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3Mzc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "3ace15307a539993d085e88940b50213232cbef7", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\nindex c9a98111d05..7ebc83b96e3 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\n\n@@ -254,17 +252,15 @@ public class ValueProvidersParameterDeclarationEnricher extends AbstractAnnotate\n         .orElse(empty());\n   }\n \n-  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n-                                                  Map<String, String> parameterNames,\n-                                                  List<ParameterDeclaration> allParameters) {\n+  private List<ActingParameterModel> getActingParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                              Map<String, String> parameterNames,\n+                                                              List<ParameterDeclaration> allParameters) {\n     Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n         .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n     return allParameters.stream()\n         .filter(param -> paramsInfo.containsKey(param.getName()))\n-        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),\n-                                                  param.hasDynamicType(), paramsInfo.get(param.getName()),\n-                                                  param.isConfigOverride(), param.isComponentId(), null, null, null,\n-                                                  param.getDslConfiguration(), null, null, null, emptyList(), emptySet()))\n+        .map(param -> new ImmutableActingParameterModel(param.getName(), paramsInfo.get(param.getName()),\n+                                                        param.getDefaultValue()))\n         .collect(toList());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDQxNA==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525280414", "bodyText": "I think we should add tests that assert the value provider model other than the check of the test extensions extension model.", "author": "ndinu", "createdAt": "2020-11-17T16:03:05Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -155,9 +162,9 @@ private void enrichParameter(OfValues resolverClass,\n     paramDeclaration.addModelProperty(propertyBuilder.build());\n \n     valueProviderModelConsumer\n-        .accept(new ValueProviderModel(getRequiredParametersAliases(resolverParameters, containerParameterNames),", "originalCommit": "34684fb0aaddf8d6045107be780c4a032b8ebf43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NjAyNA==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525286024", "bodyText": "Where would you create those tests?", "author": "gabrieldalborgo", "createdAt": "2020-11-17T16:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5MDkwOQ==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525290909", "bodyText": "I would create a test for the enricher where the extension declaration is mocked, and then enriched, then assert the enriched declaration.", "author": "ndinu", "createdAt": "2020-11-17T16:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMzc4NA==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r526833784", "bodyText": "Tests added", "author": "gabrieldalborgo", "createdAt": "2020-11-19T12:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "3ace15307a539993d085e88940b50213232cbef7", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\nindex c9a98111d05..7ebc83b96e3 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\n\n@@ -162,9 +160,9 @@ public class ValueProvidersParameterDeclarationEnricher extends AbstractAnnotate\n     paramDeclaration.addModelProperty(propertyBuilder.build());\n \n     valueProviderModelConsumer\n-        .accept(new ValueProviderModel(requiresConfiguration.get(), requiresConnection.get(), resolverClass.open(), partOrder,\n-                                       name, getValueProviderId(resolverClass.value()),\n-                                       getParametersModel(resolverParameters, containerParameterNames, allParameters)));\n+        .accept(new ValueProviderModel(getActingParametersModel(resolverParameters, containerParameterNames, allParameters),\n+                                       requiresConfiguration.get(), requiresConnection.get(), resolverClass.open(), partOrder,\n+                                       name, getValueProviderId(resolverClass.value())));\n   }\n \n   /**\n"}}, {"oid": "2be30dd3d42ae1fd8a9a28258a9a9c7b75932737", "url": "https://github.com/mulesoft/mule/commit/2be30dd3d42ae1fd8a9a28258a9a9c7b75932737", "message": "Add sample data tests", "committedDate": "2020-11-25T15:42:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNjY1NA==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r531136654", "bodyText": "you should use the aliased name here instead of param.getName().", "author": "marianogonzalez", "createdAt": "2020-11-26T16:31:47Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/SampleDataDeclarationEnricher.java", "diffHunk": "@@ -156,11 +161,17 @@ private SampleDataProviderModel createSampleDataModel(SampleData annotation, Exe\n     return empty();\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),", "originalCommit": "a845e52c05f82533bc351a00f37591cf39c80aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ace15307a539993d085e88940b50213232cbef7", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/SampleDataDeclarationEnricher.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/SampleDataDeclarationEnricher.java\nindex 3cf4ee3fc11..4ac3a0948e4 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/SampleDataDeclarationEnricher.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/SampleDataDeclarationEnricher.java\n\n@@ -161,17 +158,15 @@ public class SampleDataDeclarationEnricher extends AbstractAnnotatedDeclarationE\n     return empty();\n   }\n \n-  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n-                                                  Map<String, String> parameterNames,\n-                                                  List<ParameterDeclaration> allParameters) {\n+  private List<ActingParameterModel> getActingParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                              Map<String, String> parameterNames,\n+                                                              List<ParameterDeclaration> allParameters) {\n     Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n         .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n     return allParameters.stream()\n         .filter(param -> paramsInfo.containsKey(param.getName()))\n-        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),\n-                                                  param.hasDynamicType(), paramsInfo.get(param.getName()),\n-                                                  param.isConfigOverride(), param.isComponentId(), null, null, null,\n-                                                  param.getDslConfiguration(), null, null, null, emptyList(), emptySet()))\n+        .map(param -> new ImmutableActingParameterModel(param.getName(), paramsInfo.get(param.getName()),\n+                                                        param.getDefaultValue()))\n         .collect(toList());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MDc4NQ==", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r531140785", "bodyText": "same as before. You're loosing the aliased name. Several test cases should have broken because of this. If not, we have a coverage problem you should fix as part of this PR", "author": "marianogonzalez", "createdAt": "2020-11-26T16:40:43Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,19 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));", "originalCommit": "a845e52c05f82533bc351a00f37591cf39c80aa1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ace15307a539993d085e88940b50213232cbef7", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\nindex bebb5ffbe25..7ebc83b96e3 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java\n\n@@ -254,19 +252,15 @@ public class ValueProvidersParameterDeclarationEnricher extends AbstractAnnotate\n         .orElse(empty());\n   }\n \n-  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n-                                                  Map<String, String> parameterNames,\n-                                                  List<ParameterDeclaration> allParameters) {\n+  private List<ActingParameterModel> getActingParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                              Map<String, String> parameterNames,\n+                                                              List<ParameterDeclaration> allParameters) {\n     Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n         .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n     return allParameters.stream()\n         .filter(param -> paramsInfo.containsKey(param.getName()))\n-        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),\n-                                                  param.hasDynamicType(), paramsInfo.get(param.getName()),\n-                                                  param.isConfigOverride(), param.isComponentId(), param.getExpressionSupport(),\n-                                                  param.getDefaultValue(),\n-                                                  param.getRole(),\n-                                                  param.getDslConfiguration(), null, null, null, emptyList(), emptySet()))\n+        .map(param -> new ImmutableActingParameterModel(param.getName(), paramsInfo.get(param.getName()),\n+                                                        param.getDefaultValue()))\n         .collect(toList());\n   }\n \n"}}, {"oid": "3ace15307a539993d085e88940b50213232cbef7", "url": "https://github.com/mulesoft/mule/commit/3ace15307a539993d085e88940b50213232cbef7", "message": "Fix tests", "committedDate": "2020-12-02T12:13:01Z", "type": "forcePushed"}, {"oid": "593ff3eb826f2125913f4b5f2af2752e3a9a4010", "url": "https://github.com/mulesoft/mule/commit/593ff3eb826f2125913f4b5f2af2752e3a9a4010", "message": "Changes", "committedDate": "2020-12-10T19:47:09Z", "type": "commit"}, {"oid": "296d77b79e9d93a0ba99c117d29a37866756d13f", "url": "https://github.com/mulesoft/mule/commit/296d77b79e9d93a0ba99c117d29a37866756d13f", "message": "Changes", "committedDate": "2020-12-10T19:47:09Z", "type": "commit"}, {"oid": "f039ad81b8249a9fbc17fe545de3ea9583764415", "url": "https://github.com/mulesoft/mule/commit/f039ad81b8249a9fbc17fe545de3ea9583764415", "message": "Explicit imports", "committedDate": "2020-12-10T19:47:09Z", "type": "commit"}, {"oid": "ec291ecb99953e846be9d1f0ff03532da9be9cb3", "url": "https://github.com/mulesoft/mule/commit/ec291ecb99953e846be9d1f0ff03532da9be9cb3", "message": "SampleData changes", "committedDate": "2020-12-10T19:47:09Z", "type": "commit"}, {"oid": "311b4f08197fc328f475a3a5165941502a22074b", "url": "https://github.com/mulesoft/mule/commit/311b4f08197fc328f475a3a5165941502a22074b", "message": "Add VP tests", "committedDate": "2020-12-10T19:47:09Z", "type": "commit"}, {"oid": "f129e5b86828c275255e6168fcbb7c20a6064eac", "url": "https://github.com/mulesoft/mule/commit/f129e5b86828c275255e6168fcbb7c20a6064eac", "message": "Add sample data tests", "committedDate": "2020-12-10T19:47:09Z", "type": "commit"}, {"oid": "1f516323cdd324e96d80cd0aaec651e298089d35", "url": "https://github.com/mulesoft/mule/commit/1f516323cdd324e96d80cd0aaec651e298089d35", "message": "Changes", "committedDate": "2020-12-10T19:47:09Z", "type": "commit"}, {"oid": "f0adc7c14870af106db974bc4376f0aa21ac071b", "url": "https://github.com/mulesoft/mule/commit/f0adc7c14870af106db974bc4376f0aa21ac071b", "message": "Refactor", "committedDate": "2020-12-10T19:47:09Z", "type": "commit"}, {"oid": "6b002edb661ace127e2937c2dce809ddc80b1c9a", "url": "https://github.com/mulesoft/mule/commit/6b002edb661ace127e2937c2dce809ddc80b1c9a", "message": "Fix tests", "committedDate": "2020-12-10T19:47:10Z", "type": "commit"}, {"oid": "3c1a64fb7cfdac4005bd1ceea72fc8c89d23ee42", "url": "https://github.com/mulesoft/mule/commit/3c1a64fb7cfdac4005bd1ceea72fc8c89d23ee42", "message": "Requested changes", "committedDate": "2020-12-10T19:47:10Z", "type": "commit"}, {"oid": "0f88646c2a9a0cf10d1b0c61b438878f91ff3157", "url": "https://github.com/mulesoft/mule/commit/0f88646c2a9a0cf10d1b0c61b438878f91ff3157", "message": "Fix tests", "committedDate": "2020-12-10T19:47:10Z", "type": "commit"}, {"oid": "b19fd37be28e013b72d6d3e031a2ee9cffab6797", "url": "https://github.com/mulesoft/mule/commit/b19fd37be28e013b72d6d3e031a2ee9cffab6797", "message": "Fix tests", "committedDate": "2020-12-10T20:41:18Z", "type": "commit"}, {"oid": "b19fd37be28e013b72d6d3e031a2ee9cffab6797", "url": "https://github.com/mulesoft/mule/commit/b19fd37be28e013b72d6d3e031a2ee9cffab6797", "message": "Fix tests", "committedDate": "2020-12-10T20:41:18Z", "type": "forcePushed"}, {"oid": "3f2b531b8c480e990f03dbf0b1e86b875aece21d", "url": "https://github.com/mulesoft/mule/commit/3f2b531b8c480e990f03dbf0b1e86b875aece21d", "message": "Remove defaultValue", "committedDate": "2020-12-15T18:58:17Z", "type": "commit"}, {"oid": "065e3497d2d1edc488fe19149372b39ebd55d204", "url": "https://github.com/mulesoft/mule/commit/065e3497d2d1edc488fe19149372b39ebd55d204", "message": "Revert changes", "committedDate": "2020-12-17T18:51:59Z", "type": "commit"}]}