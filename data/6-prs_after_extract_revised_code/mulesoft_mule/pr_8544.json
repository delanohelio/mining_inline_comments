{"pr_number": 8544, "pr_title": "MULE-17921: Support Platform Managed OAuth tokens", "pr_createdAt": "2020-01-06T13:59:12Z", "pr_url": "https://github.com/mulesoft/mule/pull/8544", "timeline": [{"oid": "ba18258da5d92e91ba9c4d72064cce13067c8b29", "url": "https://github.com/mulesoft/mule/commit/ba18258da5d92e91ba9c4d72064cce13067c8b29", "message": "doodling", "committedDate": "2019-12-26T21:09:02Z", "type": "commit"}, {"oid": "80bea48722f7337b6b1098cfa6f108088ef47214", "url": "https://github.com/mulesoft/mule/commit/80bea48722f7337b6b1098cfa6f108088ef47214", "message": "doodling some more", "committedDate": "2019-12-26T21:09:02Z", "type": "commit"}, {"oid": "a64f9198f9dde5c0e728dde23d1d006c4dbd76c6", "url": "https://github.com/mulesoft/mule/commit/a64f9198f9dde5c0e728dde23d1d006c4dbd76c6", "message": "figuring this out", "committedDate": "2019-12-30T23:16:39Z", "type": "commit"}, {"oid": "0f37ec069f04617e06325fe196715b2facbd5b9a", "url": "https://github.com/mulesoft/mule/commit/0f37ec069f04617e06325fe196715b2facbd5b9a", "message": "progress and tests", "committedDate": "2020-01-02T23:03:04Z", "type": "commit"}, {"oid": "353cbd6c52a5644f2f603ddf8d2b3e6b5b75df1b", "url": "https://github.com/mulesoft/mule/commit/353cbd6c52a5644f2f603ddf8d2b3e6b5b75df1b", "message": "api enhancement", "committedDate": "2020-01-03T11:58:26Z", "type": "commit"}, {"oid": "51f4d2adc4f3989d9e7232462e2e2209504ae514", "url": "https://github.com/mulesoft/mule/commit/51f4d2adc4f3989d9e7232462e2e2209504ae514", "message": "almost ready the chicken", "committedDate": "2020-01-03T22:32:40Z", "type": "commit"}, {"oid": "4ae681a3951cfddd4ee48719f301b84f7d65dbf9", "url": "https://github.com/mulesoft/mule/commit/4ae681a3951cfddd4ee48719f301b84f7d65dbf9", "message": "jdoc and fixes", "committedDate": "2020-01-04T19:47:35Z", "type": "commit"}, {"oid": "12555471cad0721b6a56e124d87830b464ee7597", "url": "https://github.com/mulesoft/mule/commit/12555471cad0721b6a56e124d87830b464ee7597", "message": "MULE-17921: Support Platform Managed OAuth tokens", "committedDate": "2020-01-06T13:55:30Z", "type": "commit"}, {"oid": "d29f351445a58e6585a3ca3c7770d18bef9033b6", "url": "https://github.com/mulesoft/mule/commit/d29f351445a58e6585a3ca3c7770d18bef9033b6", "message": "jdoc", "committedDate": "2020-01-06T13:58:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMTgwMg==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363311802", "bodyText": "an -> a", "author": "elrodro83", "createdAt": "2020-01-06T14:19:24Z", "path": "modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/OAuthService.java", "diffHunk": "@@ -46,16 +47,35 @@\n   /**\n    * Creates a builder for an {@link AuthorizationCodeOAuthDancer} for authorization code grant type. The dancer will use the\n    * given {@code lockProvider} and {@code tokensStore} to manage its internal state.\n-   * \n-   * @param lockProvider a factory for {@link Lock}s, uniquely identified by the {@code name} passed to\n-   *        {@link LockFactory#createLock(String)}.\n-   * @param tokensStore the repository for the tokens for the returned {@link AuthorizationCodeOAuthDancer dancer}.\n+   *\n+   * @param lockProvider        a factory for {@link Lock}s, uniquely identified by the {@code name} passed to\n+   *                            {@link LockFactory#createLock(String)}.\n+   * @param tokensStore         the repository for the tokens for the returned {@link AuthorizationCodeOAuthDancer dancer}.\n    * @param expressionEvaluator the object used to evaluate expressions.\n-   * \n    * @return a builder for an authorization-code grant type dancer.\n    */\n   <T> OAuthAuthorizationCodeDancerBuilder authorizationCodeGrantTypeDancerBuilder(LockFactory lockProvider,\n                                                                                   Map<String, T> tokensStore,\n                                                                                   MuleExpressionLanguage expressionEvaluator);\n \n+  /**\n+   * Creates a builder for an {@link PlatformManagedOAuthDancer} that obtains access tokens that are provisioned and managed", "originalCommit": "d29f351445a58e6585a3ca3c7770d18bef9033b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3b85dba968d5add158f21dc9a054c3ed81c1b3a", "chunk": "diff --git a/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/OAuthService.java b/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/OAuthService.java\nindex 1ef97fbcef1..b01be3f33ab 100644\n--- a/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/OAuthService.java\n+++ b/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/OAuthService.java\n\n@@ -59,7 +59,7 @@ public interface OAuthService extends Service {\n                                                                                   MuleExpressionLanguage expressionEvaluator);\n \n   /**\n-   * Creates a builder for an {@link PlatformManagedOAuthDancer} that obtains access tokens that are provisioned and managed\n+   * Creates a builder for a {@link PlatformManagedOAuthDancer} that obtains access tokens that are provisioned and managed\n    * by the Anypoint Platform.\n    * <p>\n    * Platform Managed OAuth is an experimental feature. It will only be enabled on selected environments and scenarios.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMjQzNQ==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363312435", "bodyText": "won't this implementation be in the service artifact?", "author": "elrodro83", "createdAt": "2020-01-06T14:21:43Z", "path": "modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/PlatformManagedOAuthDancer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.oauth.api;\n+\n+import org.mule.api.annotation.Experimental;\n+import org.mule.api.annotation.NoImplement;\n+import org.mule.runtime.oauth.api.builder.OAuthPlatformManagedDancerBuilder;\n+import org.mule.runtime.oauth.api.listener.PlatformManagedOAuthStateListener;\n+import org.mule.runtime.oauth.api.state.ResourceOwnerOAuthContext;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Allows to manipulate access and refresh tokens that are obtained and managed by the Anypoint Platform. Each instance is\n+ * preconfigured by an {@link OAuthPlatformManagedDancerBuilder} to point to a specific connection id.\n+ * <p>\n+ * Since the authorizations are performed by the platform, this dancer remains agnostic of the grant type that was used to\n+ * obtain them.\n+ * <p>\n+ * Platform Managed OAuth is an experimental feature. It will only be enabled on selected environments and scenarios.\n+ * Backwards compatibility is not guaranteed.\n+ *\n+ * @since 4.3.0\n+ */\n+@NoImplement", "originalCommit": "d29f351445a58e6585a3ca3c7770d18bef9033b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxNDExMg==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363314112", "bodyText": "Yes, on the EE one.", "author": "marianogonzalez", "createdAt": "2020-01-06T14:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMjQzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMjY2MQ==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363312661", "bodyText": "won't this implementation be in the service artifact?", "author": "elrodro83", "createdAt": "2020-01-06T14:22:14Z", "path": "modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.oauth.api.builder;\n+\n+import org.mule.api.annotation.Experimental;\n+import org.mule.api.annotation.NoImplement;\n+import org.mule.runtime.api.tls.TlsContextFactory;\n+import org.mule.runtime.http.api.client.HttpClient;\n+import org.mule.runtime.http.api.client.proxy.ProxyConfig;\n+import org.mule.runtime.oauth.api.PlatformManagedOAuthDancer;\n+import org.mule.runtime.oauth.api.listener.PlatformManagedOAuthStateListener;\n+\n+import java.nio.charset.Charset;\n+import java.util.function.Function;\n+\n+/**\n+ * Builder that allows to configure the attributes for the {@link PlatformManagedOAuthDancer}\n+ * <p>\n+ * Because the actual OAuth authorization is not performed by Mule but the Anypoint Platform, some of the methods in the base\n+ * {@link OAuthDancerBuilder} do not apply and will throw an {@link UnsupportedOperationException}. The the javadocs of all\n+ * methods defined and overridden in this interface to know which ones are valid.\n+ * <p>\n+ * Platform Managed OAuth is an experimental feature. It will only be enabled on selected environments and scenarios.\n+ * Backwards compatibility is not guaranteed.\n+ *\n+ * @since 4.3.0\n+ */\n+@NoImplement", "originalCommit": "d29f351445a58e6585a3ca3c7770d18bef9033b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxNDE3Ng==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363314176", "bodyText": "on the EE one", "author": "marianogonzalez", "createdAt": "2020-01-06T14:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMjY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d7afe58cb940df425324dc3eb0bbdcc5aeb421c0", "chunk": "diff --git a/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java b/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java\nindex d35ce16f263..ecb98c3cf9b 100644\n--- a/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java\n+++ b/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java\n\n@@ -46,7 +46,6 @@ public interface OAuthPlatformManagedDancerBuilder extends OAuthDancerBuilder<Pl\n    *\n    * @param listener the {@link PlatformManagedOAuthStateListener} to be added\n    * @throws IllegalArgumentException if the {@code listener} is {@code null}\n-   * @since 4.2.1\n    */\n   OAuthPlatformManagedDancerBuilder addListener(PlatformManagedOAuthStateListener listener);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMjkyNA==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363312924", "bodyText": "won't this implementation be in the service artifact?", "author": "elrodro83", "createdAt": "2020-01-06T14:22:48Z", "path": "modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/listener/PlatformManagedOAuthStateListener.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.oauth.api.listener;\n+\n+import org.mule.api.annotation.Experimental;\n+import org.mule.api.annotation.NoImplement;\n+import org.mule.runtime.oauth.api.state.ResourceOwnerOAuthContext;\n+\n+/**\n+ * Allows to get notified about certain events related to Platform Managed OAuth tokens\n+ * <p>\n+ * Platform Managed OAuth is an experimental feature. It will only be enabled on selected environments and scenarios. Backwards compatibility is\n+ * not guaranteed.\n+ *\n+ * @since 4.3.0\n+ */\n+@Experimental\n+@NoImplement", "originalCommit": "d29f351445a58e6585a3ca3c7770d18bef9033b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxNDI1Ng==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363314256", "bodyText": "yes, on the EE one", "author": "marianogonzalez", "createdAt": "2020-01-06T14:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMjkyNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e3b85dba968d5add158f21dc9a054c3ed81c1b3a", "url": "https://github.com/mulesoft/mule/commit/e3b85dba968d5add158f21dc9a054c3ed81c1b3a", "message": "feedback", "committedDate": "2020-01-06T14:52:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1OTMzNw==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363359337", "bodyText": "4.2.1 or 4.3.0?", "author": "eze210", "createdAt": "2020-01-06T16:05:27Z", "path": "modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.oauth.api.builder;\n+\n+import org.mule.api.annotation.Experimental;\n+import org.mule.api.annotation.NoImplement;\n+import org.mule.runtime.api.tls.TlsContextFactory;\n+import org.mule.runtime.http.api.client.HttpClient;\n+import org.mule.runtime.http.api.client.proxy.ProxyConfig;\n+import org.mule.runtime.oauth.api.PlatformManagedOAuthDancer;\n+import org.mule.runtime.oauth.api.listener.PlatformManagedOAuthStateListener;\n+\n+import java.nio.charset.Charset;\n+import java.util.function.Function;\n+\n+/**\n+ * Builder that allows to configure the attributes for the {@link PlatformManagedOAuthDancer}\n+ * <p>\n+ * Because the actual OAuth authorization is not performed by Mule but the Anypoint Platform, some of the methods in the base\n+ * {@link OAuthDancerBuilder} do not apply and will throw an {@link UnsupportedOperationException}. The the javadocs of all\n+ * methods defined and overridden in this interface to know which ones are valid.\n+ * <p>\n+ * Platform Managed OAuth is an experimental feature. It will only be enabled on selected environments and scenarios.\n+ * Backwards compatibility is not guaranteed.\n+ *\n+ * @since 4.3.0\n+ */\n+@NoImplement\n+@Experimental\n+public interface OAuthPlatformManagedDancerBuilder extends OAuthDancerBuilder<PlatformManagedOAuthDancer> {\n+\n+  /**\n+   * Sets the ID of the connection that is defined in the Anypoint Platform\n+   *\n+   * @param connectionId the id of the connection which token we want to obtain\n+   * @return {@code this} builder\n+   */\n+  OAuthPlatformManagedDancerBuilder connectionId(String connectionId);\n+\n+  /**\n+   * Adds the {@code listener}. Listeners will be invoked in the same order as they were added\n+   *\n+   * @param listener the {@link PlatformManagedOAuthStateListener} to be added\n+   * @throws IllegalArgumentException if the {@code listener} is {@code null}\n+   * @since 4.2.1", "originalCommit": "e3b85dba968d5add158f21dc9a054c3ed81c1b3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7afe58cb940df425324dc3eb0bbdcc5aeb421c0", "chunk": "diff --git a/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java b/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java\nindex d35ce16f263..ecb98c3cf9b 100644\n--- a/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java\n+++ b/modules/oauth-api/src/main/java/org/mule/runtime/oauth/api/builder/OAuthPlatformManagedDancerBuilder.java\n\n@@ -46,7 +46,6 @@ public interface OAuthPlatformManagedDancerBuilder extends OAuthDancerBuilder<Pl\n    *\n    * @param listener the {@link PlatformManagedOAuthStateListener} to be added\n    * @throws IllegalArgumentException if the {@code listener} is {@code null}\n-   * @since 4.2.1\n    */\n   OAuthPlatformManagedDancerBuilder addListener(PlatformManagedOAuthStateListener listener);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM1OTQzMw==", "url": "https://github.com/mulesoft/mule/pull/8544#discussion_r363359433", "bodyText": "hte -> the", "author": "eze210", "createdAt": "2020-01-06T16:05:41Z", "path": "modules/http-api/src/main/java/org/mule/runtime/http/api/client/ManagedLifecycleHttpClient.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.http.api.client;\n+\n+import org.mule.runtime.http.api.domain.message.request.HttpRequest;\n+import org.mule.runtime.http.api.domain.message.response.HttpResponse;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * Decorates a {@link HttpClient} so that invocations to {@link HttpClient#start()} and {@link HttpClient#stop()} have no effect.\n+ * <p>\n+ * This is useful (and recommended) for cases in which a given component owns an {@link HttpClient} but needs to expose said\n+ * client to other consumers. Since hte lifecycle of the client should only be handled by the owner, it is good practice to use", "originalCommit": "e3b85dba968d5add158f21dc9a054c3ed81c1b3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7afe58cb940df425324dc3eb0bbdcc5aeb421c0", "chunk": "diff --git a/modules/http-api/src/main/java/org/mule/runtime/http/api/client/ManagedLifecycleHttpClient.java b/modules/http-api/src/main/java/org/mule/runtime/http/api/client/ManagedLifecycleHttpClient.java\nindex 0bc70c80b4e..d16ea585481 100644\n--- a/modules/http-api/src/main/java/org/mule/runtime/http/api/client/ManagedLifecycleHttpClient.java\n+++ b/modules/http-api/src/main/java/org/mule/runtime/http/api/client/ManagedLifecycleHttpClient.java\n\n@@ -17,7 +17,7 @@ import java.util.concurrent.TimeoutException;\n  * Decorates a {@link HttpClient} so that invocations to {@link HttpClient#start()} and {@link HttpClient#stop()} have no effect.\n  * <p>\n  * This is useful (and recommended) for cases in which a given component owns an {@link HttpClient} but needs to expose said\n- * client to other consumers. Since hte lifecycle of the client should only be handled by the owner, it is good practice to use\n+ * client to other consumers. Since the lifecycle of the client should only be handled by the owner, it is good practice to use\n  * this decorator whenever the client is exposed, to guarantee that faulty consumers don't interfere with its lifecycle.\n  *\n  * @since 4.3.0\n"}}, {"oid": "d7afe58cb940df425324dc3eb0bbdcc5aeb421c0", "url": "https://github.com/mulesoft/mule/commit/d7afe58cb940df425324dc3eb0bbdcc5aeb421c0", "message": "feedback", "committedDate": "2020-01-06T16:34:23Z", "type": "commit"}]}