{"pr_number": 8845, "pr_title": "MULE-18294: Polling source schedulers must not restart on reconnections", "pr_createdAt": "2020-05-07T16:14:32Z", "pr_url": "https://github.com/mulesoft/mule/pull/8845", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzNjAyMA==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422236020", "bodyText": "don't use maps. Build a explicit pojo.", "author": "marianogonzalez", "createdAt": "2020-05-08T16:19:44Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -196,13 +196,14 @@ private synchronized void createSource(boolean restarting) throws Exception {\n     }\n   }\n \n-  private void startSource(boolean restarting) throws MuleException {\n+  private void startSource(boolean restarting, Map<String, Object> restartingContext) throws MuleException {", "originalCommit": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2Nzg0Nw==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422267847", "bodyText": "In the end I would need to use a POJO with at least a field that is a map, right? What is stored in the context is specific to the restarting of a polling source.", "author": "ndinu", "createdAt": "2020-05-08T17:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzNjAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNjQ1Ng==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422326456", "bodyText": "why? right now you're using a map on which you only put two entries with well known keys. Just use a pojo with two well known fields... If in the future you need a map, you add a map, but I don't see why you would need that and you certainly don't need it now", "author": "marianogonzalez", "createdAt": "2020-05-08T19:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzNjAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzMjkwMA==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422332900", "bodyText": "My point is, the Restartable interface needs to be generic, not everything that can be restarted needs a Runnable and a Scheduler. Does it make sense?", "author": "ndinu", "createdAt": "2020-05-08T19:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzNjAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzMzQ2Ng==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422333466", "bodyText": "but this is internal. We can change it as much as we want.. Rename it to RestartableSource if you want", "author": "marianogonzalez", "createdAt": "2020-05-08T19:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzNjAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java\nindex 20cbe0a3cba..9b9c6b0fc56 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java\n\n@@ -196,14 +197,14 @@ public class ExtensionMessageSource extends ExtensionComponent<SourceModel> impl\n     }\n   }\n \n-  private void startSource(boolean restarting, Map<String, Object> restartingContext) throws MuleException {\n+  private void startSource(boolean restarting, RestartContext restartContext) throws MuleException {\n     try {\n       // When restarting, async must be forced\n       if (restarting && !retryPolicyTemplate.isAsync()) {\n-        new AsynchronousRetryTemplate(retryPolicyTemplate).execute(new StartSourceCallback(restarting, restartingContext),\n+        new AsynchronousRetryTemplate(retryPolicyTemplate).execute(new StartSourceCallback(restarting, restartContext),\n                                                                    retryScheduler);\n       } else {\n-        retryPolicyTemplate.execute(new StartSourceCallback(restarting, restartingContext), retryScheduler);\n+        retryPolicyTemplate.execute(new StartSourceCallback(restarting, restartContext), retryScheduler);\n       }\n     } catch (Throwable e) {\n       if (e instanceof MuleException) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzOTMyMg==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422239322", "bodyText": "I don't understand the point of this... if this guy is reconnecting is because it failed while executing. That means that you first simply poll() and then simply  scheduler.schedule(executor, () -> poll(sourceCallback));... everything else you added seems unnecessary. What am I missing?", "author": "marianogonzalez", "createdAt": "2020-05-08T16:26:19Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -133,7 +137,13 @@ public void onStart(SourceCallback<T, A> sourceCallback) throws MuleException {\n         .withName(formatKey(\"executor\")));\n \n     stopRequested.set(false);\n-    scheduler.schedule(executor, () -> poll(sourceCallback));\n+    if (restarting.compareAndSet(true, false)) {\n+      delegateRunnable.setDelegate(() -> poll(sourceCallback));", "originalCommit": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex 3db3129e478..2098debb14f 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -131,16 +131,15 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n     watermarkObjectStore = objectStoreManager.getOrCreateObjectStore(formatKey(WATERMARK_OS_NAME_SUFFIX),\n                                                                      unmanagedPersistent());\n \n-    executor = schedulerService.customScheduler(SchedulerConfig.config()\n-        .withMaxConcurrentTasks(1)\n-        .withWaitAllowed(true)\n-        .withName(formatKey(\"executor\")));\n-\n     stopRequested.set(false);\n     if (restarting.compareAndSet(true, false)) {\n       delegateRunnable.setDelegate(() -> poll(sourceCallback));\n       poll(sourceCallback);\n     } else {\n+      executor = schedulerService.customScheduler(SchedulerConfig.config()\n+          .withMaxConcurrentTasks(1)\n+          .withWaitAllowed(true)\n+          .withName(formatKey(\"executor\")));\n       delegateRunnable = new DelegateRunnable(() -> poll(sourceCallback));\n       scheduler.schedule(executor, delegateRunnable);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzOTQyOA==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422239428", "bodyText": "what's the point of this?", "author": "marianogonzalez", "createdAt": "2020-05-08T16:26:30Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -133,7 +137,13 @@ public void onStart(SourceCallback<T, A> sourceCallback) throws MuleException {\n         .withName(formatKey(\"executor\")));\n \n     stopRequested.set(false);\n-    scheduler.schedule(executor, () -> poll(sourceCallback));\n+    if (restarting.compareAndSet(true, false)) {\n+      delegateRunnable.setDelegate(() -> poll(sourceCallback));\n+      poll(sourceCallback);\n+    } else {\n+      delegateRunnable = new DelegateRunnable(() -> poll(sourceCallback));", "originalCommit": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex 3db3129e478..2098debb14f 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -131,16 +131,15 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n     watermarkObjectStore = objectStoreManager.getOrCreateObjectStore(formatKey(WATERMARK_OS_NAME_SUFFIX),\n                                                                      unmanagedPersistent());\n \n-    executor = schedulerService.customScheduler(SchedulerConfig.config()\n-        .withMaxConcurrentTasks(1)\n-        .withWaitAllowed(true)\n-        .withName(formatKey(\"executor\")));\n-\n     stopRequested.set(false);\n     if (restarting.compareAndSet(true, false)) {\n       delegateRunnable.setDelegate(() -> poll(sourceCallback));\n       poll(sourceCallback);\n     } else {\n+      executor = schedulerService.customScheduler(SchedulerConfig.config()\n+          .withMaxConcurrentTasks(1)\n+          .withWaitAllowed(true)\n+          .withName(formatKey(\"executor\")));\n       delegateRunnable = new DelegateRunnable(() -> poll(sourceCallback));\n       scheduler.schedule(executor, delegateRunnable);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTMyOQ==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422249329", "bodyText": "this class does literally nothing", "author": "marianogonzalez", "createdAt": "2020-05-08T16:46:09Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -615,4 +648,22 @@ private void release() {\n       }\n     }\n   }\n+\n+  private class DelegateRunnable implements Runnable {", "originalCommit": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex 3db3129e478..2098debb14f 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -648,22 +643,4 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n       }\n     }\n   }\n-\n-  private class DelegateRunnable implements Runnable {\n-\n-    Runnable delegate;\n-\n-    public DelegateRunnable(Runnable delegate) {\n-      this.delegate = delegate;\n-    }\n-\n-    @Override\n-    public void run() {\n-      delegate.run();\n-    }\n-\n-    public void setDelegate(Runnable delegate) {\n-      this.delegate = delegate;\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTcwNg==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422249706", "bodyText": "although I insist this is not necesary, this isn't a bad idea as the delegate you're keeping from the prior instance is quite likely to have references to the old instance...potentially producing leaks", "author": "marianogonzalez", "createdAt": "2020-05-08T16:46:55Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +217,25 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public Map<String, Object> beginRestart() {\n+    Map<String, Object> restartingContext = new HashMap<>();\n+\n+    restarting.set(true);\n+\n+    restartingContext.put(POLLING_SOURCE_EXECUTOR_KEY, executor);\n+    restartingContext.put(RUNNABLE_KEY, delegateRunnable);\n+    return restartingContext;\n+  }\n+\n+  @Override\n+  public void finishRestart(Map<String, Object> restartingContext) {\n+    restarting.set(true);\n+\n+    executor = (org.mule.runtime.api.scheduler.Scheduler) restartingContext.get(POLLING_SOURCE_EXECUTOR_KEY);\n+    delegateRunnable = (DelegateRunnable) restartingContext.get(RUNNABLE_KEY);", "originalCommit": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex 3db3129e478..2098debb14f 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -218,22 +217,18 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n   }\n \n   @Override\n-  public Map<String, Object> beginRestart() {\n-    Map<String, Object> restartingContext = new HashMap<>();\n-\n+  public RestartContext getRestartContext() {\n     restarting.set(true);\n-\n-    restartingContext.put(POLLING_SOURCE_EXECUTOR_KEY, executor);\n-    restartingContext.put(RUNNABLE_KEY, delegateRunnable);\n-    return restartingContext;\n+    delegateRunnable.setDelegate(null);\n+    return new RestartContext(executor, delegateRunnable);\n   }\n \n   @Override\n-  public void finishRestart(Map<String, Object> restartingContext) {\n+  public void restart(RestartContext restartContext) {\n     restarting.set(true);\n \n-    executor = (org.mule.runtime.api.scheduler.Scheduler) restartingContext.get(POLLING_SOURCE_EXECUTOR_KEY);\n-    delegateRunnable = (DelegateRunnable) restartingContext.get(RUNNABLE_KEY);\n+    executor = restartContext.getExecutor();\n+    delegateRunnable = restartContext.getDelegateRunnable();\n   }\n \n   private class DefaultPollContext implements PollContext<T, A> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NDcyNw==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422254727", "bodyText": "rename to getRestartContext and turn that map into an actual SourceRestartContext class", "author": "marianogonzalez", "createdAt": "2020-05-08T16:56:13Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+import java.util.Map;\n+\n+/**\n+ * A component that can be restarted.\n+ *\n+ * When restarted {@link #beginRestart()} needs to be called and will return a {@link Map}. After the restart is\n+ * performed, the {@link #finishRestart(Map)} will be called with the value that the {@link #beginRestart()} method\n+ * have generated.\n+ *\n+ * @since 4.2.3 4.3.1 4.4.0\n+ */\n+public interface Restartable {\n+\n+  /**\n+   * Method that needs to be called when a restart is performed.\n+   *\n+   * @return a context needed after a restart is performed.\n+   */\n+  Map<String, Object> beginRestart();", "originalCommit": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java\nindex 099fb889f47..3e23c1a83cb 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java\n\n@@ -11,8 +11,8 @@ import java.util.Map;\n /**\n  * A component that can be restarted.\n  *\n- * When restarted {@link #beginRestart()} needs to be called and will return a {@link Map}. After the restart is\n- * performed, the {@link #finishRestart(Map)} will be called with the value that the {@link #beginRestart()} method\n+ * When restarted {@link #getRestartContext()} needs to be called and will return a {@link Map}. After the restart is\n+ * performed, the {@link #restart(RestartContext)} will be called with the value that the {@link #getRestartContext()} method\n  * have generated.\n  *\n  * @since 4.2.3 4.3.1 4.4.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NTEwNw==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422255107", "bodyText": "rename to restart()", "author": "marianogonzalez", "createdAt": "2020-05-08T16:56:52Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+import java.util.Map;\n+\n+/**\n+ * A component that can be restarted.\n+ *\n+ * When restarted {@link #beginRestart()} needs to be called and will return a {@link Map}. After the restart is\n+ * performed, the {@link #finishRestart(Map)} will be called with the value that the {@link #beginRestart()} method\n+ * have generated.\n+ *\n+ * @since 4.2.3 4.3.1 4.4.0\n+ */\n+public interface Restartable {\n+\n+  /**\n+   * Method that needs to be called when a restart is performed.\n+   *\n+   * @return a context needed after a restart is performed.\n+   */\n+  Map<String, Object> beginRestart();\n+\n+  /**\n+   * Method that needs to be called to finish the process of restarting.\n+   *\n+   * @param restartingContext the context generated by {@link #beginRestart()}\n+   */\n+  void finishRestart(Map<String, Object> restartingContext);", "originalCommit": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java\nindex 099fb889f47..3e23c1a83cb 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java\n\n@@ -11,8 +11,8 @@ import java.util.Map;\n /**\n  * A component that can be restarted.\n  *\n- * When restarted {@link #beginRestart()} needs to be called and will return a {@link Map}. After the restart is\n- * performed, the {@link #finishRestart(Map)} will be called with the value that the {@link #beginRestart()} method\n+ * When restarted {@link #getRestartContext()} needs to be called and will return a {@link Map}. After the restart is\n+ * performed, the {@link #restart(RestartContext)} will be called with the value that the {@link #getRestartContext()} method\n  * have generated.\n  *\n  * @since 4.2.3 4.3.1 4.4.0\n"}}, {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "url": "https://github.com/mulesoft/mule/commit/1e44e37d4820d3c1ecb677b6725188260ad3b9da", "message": "Fix flacky test", "committedDate": "2020-05-19T15:46:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNTMwNA==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428015304", "bodyText": "I get what you mean, but the term rescheduled is quite misleading", "author": "marianogonzalez", "createdAt": "2020-05-20T13:35:33Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java", "diffHunk": "@@ -122,6 +135,37 @@ public void whenReconnectingAfterConnectionExceptionSchedulerRunsWithoutStartDel\n     assertAllPetsAdopted();\n   }\n \n+  @Description(\"This test reflects a behavior that we must preserve, when a polling source is stopped and started the scheduler must be rescheduled.\")", "originalCommit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac72e64fb07a28591106c8f3b3a3ef318a34f006", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java\nindex 52463742b40..977af63209f 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java\n\n@@ -135,7 +139,7 @@ public class PollingSourceTestCase extends AbstractExtensionFunctionalTestCase {\n     assertAllPetsAdopted();\n   }\n \n-  @Description(\"This test reflects a behavior that we must preserve, when a polling source is stopped and started the scheduler must be rescheduled.\")\n+  @Description(\"This test reflects a behavior that we must preserve, when a polling source is stopped and started the scheduler must be stopped and a new one must be started.\")\n   @Test\n   public void whenSourceIsStopAndStartedSchedulerIsReset() throws Exception {\n     startFlow(\"longFrequencyPoll\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDAyNA==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428020024", "bodyText": "add a comment explaining why", "author": "marianogonzalez", "createdAt": "2020-05-20T13:41:34Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/DelegateRunnable.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.slf4j.Logger;\n+\n+/**\n+ * {@link Runnable} that delegates its execution. The delegate can be switch at any time.\n+ * This is particulary useful when you want to schedule a task to be repeated, and you want to change the task for the next\n+ * executions without rescheduling.\n+ *\n+ * @since 4.2.3 4.3.1 4.4.0\n+ */\n+public class DelegateRunnable implements Runnable {\n+\n+  private static final Logger LOGGER = getLogger(DelegateRunnable.class);\n+\n+  private Runnable delegate;\n+  private Lock lock = new ReentrantLock();\n+\n+  public DelegateRunnable(Runnable delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public void run() {\n+    if (lock.tryLock()) {", "originalCommit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MTc2MQ==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428291761", "bodyText": "this comment is unsufficient. The main reason for this was to make sure that the delegate is not invoked if the scheduler fires while the restart is in progress", "author": "marianogonzalez", "createdAt": "2020-05-20T20:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "9c0385053d90440feaf8c874bc777dadd0222341", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/DelegateRunnable.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/DelegateRunnable.java\ndeleted file mode 100644\nindex d6ba0616494..00000000000\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/DelegateRunnable.java\n+++ /dev/null\n\n@@ -1,55 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.runtime.module.extension.internal.runtime.source.poll;\n-\n-\n-import static org.slf4j.LoggerFactory.getLogger;\n-\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-import org.slf4j.Logger;\n-\n-/**\n- * {@link Runnable} that delegates its execution. The delegate can be switch at any time.\n- * This is particulary useful when you want to schedule a task to be repeated, and you want to change the task for the next\n- * executions without rescheduling.\n- *\n- * @since 4.2.3 4.3.1 4.4.0\n- */\n-public class DelegateRunnable implements Runnable {\n-\n-  private static final Logger LOGGER = getLogger(DelegateRunnable.class);\n-\n-  private Runnable delegate;\n-  private Lock lock = new ReentrantLock();\n-\n-  public DelegateRunnable(Runnable delegate) {\n-    this.delegate = delegate;\n-  }\n-\n-  @Override\n-  public void run() {\n-    if (lock.tryLock()) {\n-      try {\n-        if (delegate != null) {\n-          delegate.run();\n-        } else {\n-          LOGGER.debug(\"The execution of the task was skipped because no delegate was set.\");\n-        }\n-      } finally {\n-        lock.unlock();\n-      }\n-    }\n-  }\n-\n-  public void setDelegate(Runnable delegate) {\n-    lock.lock();\n-    this.delegate = delegate;\n-    lock.unlock();\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTE1Nw==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428021157", "bodyText": "a get method should never have side effects", "author": "marianogonzalez", "createdAt": "2020-05-20T13:42:59Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +216,21 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public RestartContext getRestartContext() {\n+    restarting.set(true);", "originalCommit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MDk4NA==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428190984", "bodyText": "The source need to know that a restart is coming so that it does not kill the scheduler. Maybe we should change the name of the method?", "author": "ndinu", "createdAt": "2020-05-20T17:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MjExMw==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428292113", "bodyText": "you can change the mehthod name, but still, is this the right place for doing this?", "author": "marianogonzalez", "createdAt": "2020-05-20T20:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9c0385053d90440feaf8c874bc777dadd0222341", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex 2098debb14f..49faed37983 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -217,18 +218,22 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n   }\n \n   @Override\n-  public RestartContext getRestartContext() {\n+  public Map<String, Object> beginRestart() {\n+    Map<String, Object> restartingContext = new HashMap<>();\n+\n     restarting.set(true);\n-    delegateRunnable.setDelegate(null);\n-    return new RestartContext(executor, delegateRunnable);\n+\n+    restartingContext.put(POLLING_SOURCE_EXECUTOR_KEY, executor);\n+    restartingContext.put(RUNNABLE_KEY, delegateRunnable);\n+    return restartingContext;\n   }\n \n   @Override\n-  public void restart(RestartContext restartContext) {\n+  public void finishRestart(Map<String, Object> restartingContext) {\n     restarting.set(true);\n \n-    executor = restartContext.getExecutor();\n-    delegateRunnable = restartContext.getDelegateRunnable();\n+    executor = (org.mule.runtime.api.scheduler.Scheduler) restartingContext.get(POLLING_SOURCE_EXECUTOR_KEY);\n+    delegateRunnable = (DelegateRunnable) restartingContext.get(RUNNABLE_KEY);\n   }\n \n   private class DefaultPollContext implements PollContext<T, A> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNDQyMA==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428024420", "bodyText": "this is still wrong. If you do this here.. the poll() method that this delegates into is the poll from the old instance you just discarded. this should be\ndelegateRunnable = restartContext.getDelegateRunnable();\ndelegateRunnable.setDelegate(() -> poll());", "author": "marianogonzalez", "createdAt": "2020-05-20T13:47:07Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +216,21 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public RestartContext getRestartContext() {\n+    restarting.set(true);\n+    delegateRunnable.setDelegate(null);\n+    return new RestartContext(executor, delegateRunnable);\n+  }\n+\n+  @Override\n+  public void restart(RestartContext restartContext) {\n+    restarting.set(true);\n+\n+    executor = restartContext.getExecutor();\n+    delegateRunnable = restartContext.getDelegateRunnable();", "originalCommit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MDA0OQ==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428190049", "bodyText": "At this point the delegate is null, I can set it to null here instead of in the getRestartContext method, but I cannot set the delegate here since the poll method needs the SourceCallbackContext which is not available yet, we get it in the doStart method.", "author": "ndinu", "createdAt": "2020-05-20T17:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNDQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MjQyMQ==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428292421", "bodyText": "then it is clear that this should happen in the doStart() method instead of here.........", "author": "marianogonzalez", "createdAt": "2020-05-20T20:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNDQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "9c0385053d90440feaf8c874bc777dadd0222341", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex 2098debb14f..49faed37983 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -217,18 +218,22 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n   }\n \n   @Override\n-  public RestartContext getRestartContext() {\n+  public Map<String, Object> beginRestart() {\n+    Map<String, Object> restartingContext = new HashMap<>();\n+\n     restarting.set(true);\n-    delegateRunnable.setDelegate(null);\n-    return new RestartContext(executor, delegateRunnable);\n+\n+    restartingContext.put(POLLING_SOURCE_EXECUTOR_KEY, executor);\n+    restartingContext.put(RUNNABLE_KEY, delegateRunnable);\n+    return restartingContext;\n   }\n \n   @Override\n-  public void restart(RestartContext restartContext) {\n+  public void finishRestart(Map<String, Object> restartingContext) {\n     restarting.set(true);\n \n-    executor = restartContext.getExecutor();\n-    delegateRunnable = restartContext.getDelegateRunnable();\n+    executor = (org.mule.runtime.api.scheduler.Scheduler) restartingContext.get(POLLING_SOURCE_EXECUTOR_KEY);\n+    delegateRunnable = (DelegateRunnable) restartingContext.get(RUNNABLE_KEY);\n   }\n \n   private class DefaultPollContext implements PollContext<T, A> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNzMwMw==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428027303", "bodyText": "This test is yielding false positives. The test pases because the number of invokations you want is correct, but you're not seeing that the instance that is actually modifying this is not the one you wanted. Change this by a Map<Source, Integer> and also assert which instances had how many invokations", "author": "marianogonzalez", "createdAt": "2020-05-20T13:50:22Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java", "diffHunk": "@@ -51,6 +58,12 @@ protected String getConfigFile() {\n     return \"polling-source-config.xml\";\n   }\n \n+  @Before\n+  public void resetCounters() throws Exception {\n+    PetFailingPollingSource.STARTED_POLLS = 0;", "originalCommit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac72e64fb07a28591106c8f3b3a3ef318a34f006", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java\nindex 52463742b40..977af63209f 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java\n\n@@ -61,6 +63,8 @@ public class PollingSourceTestCase extends AbstractExtensionFunctionalTestCase {\n   @Before\n   public void resetCounters() throws Exception {\n     PetFailingPollingSource.STARTED_POLLS = 0;\n+    POLL_INVOCATIONS.clear();\n+    STARTED_SOURCES.clear();\n     STARTED_POLLS = 0;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyODEyOQ==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428028129", "bodyText": "this should happen on the restart method, not here", "author": "marianogonzalez", "createdAt": "2020-05-20T13:51:27Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +216,21 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public RestartContext getRestartContext() {\n+    restarting.set(true);\n+    delegateRunnable.setDelegate(null);", "originalCommit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c0385053d90440feaf8c874bc777dadd0222341", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex 2098debb14f..49faed37983 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -217,18 +218,22 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n   }\n \n   @Override\n-  public RestartContext getRestartContext() {\n+  public Map<String, Object> beginRestart() {\n+    Map<String, Object> restartingContext = new HashMap<>();\n+\n     restarting.set(true);\n-    delegateRunnable.setDelegate(null);\n-    return new RestartContext(executor, delegateRunnable);\n+\n+    restartingContext.put(POLLING_SOURCE_EXECUTOR_KEY, executor);\n+    restartingContext.put(RUNNABLE_KEY, delegateRunnable);\n+    return restartingContext;\n   }\n \n   @Override\n-  public void restart(RestartContext restartContext) {\n+  public void finishRestart(Map<String, Object> restartingContext) {\n     restarting.set(true);\n \n-    executor = restartContext.getExecutor();\n-    delegateRunnable = restartContext.getDelegateRunnable();\n+    executor = (org.mule.runtime.api.scheduler.Scheduler) restartingContext.get(POLLING_SOURCE_EXECUTOR_KEY);\n+    delegateRunnable = (DelegateRunnable) restartingContext.get(RUNNABLE_KEY);\n   }\n \n   private class DefaultPollContext implements PollContext<T, A> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyODM0Nw==", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428028347", "bodyText": "both fields final", "author": "marianogonzalez", "createdAt": "2020-05-20T13:51:45Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/RestartContext.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+import org.mule.runtime.api.scheduler.Scheduler;\n+\n+/**\n+ * Context needed to perform the restart of a source\n+ *\n+ * @since 4.2.3 4.3.1 4.4.0\n+ */\n+public class RestartContext {\n+\n+  private Scheduler executor;", "originalCommit": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c0385053d90440feaf8c874bc777dadd0222341", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/RestartContext.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/RestartContext.java\ndeleted file mode 100644\nindex ddeeb8f4c88..00000000000\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/RestartContext.java\n+++ /dev/null\n\n@@ -1,33 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.runtime.module.extension.internal.runtime.source.poll;\n-\n-import org.mule.runtime.api.scheduler.Scheduler;\n-\n-/**\n- * Context needed to perform the restart of a source\n- *\n- * @since 4.2.3 4.3.1 4.4.0\n- */\n-public class RestartContext {\n-\n-  private Scheduler executor;\n-  private DelegateRunnable delegateRunnable;\n-\n-  public RestartContext(Scheduler executor, DelegateRunnable delegateRunnable) {\n-    this.executor = executor;\n-    this.delegateRunnable = delegateRunnable;\n-  }\n-\n-  public Scheduler getExecutor() {\n-    return executor;\n-  }\n-\n-  public DelegateRunnable getDelegateRunnable() {\n-    return delegateRunnable;\n-  }\n-}\n"}}, {"oid": "9c0385053d90440feaf8c874bc777dadd0222341", "url": "https://github.com/mulesoft/mule/commit/9c0385053d90440feaf8c874bc777dadd0222341", "message": "MULE-18294: Polling source schedulers must not restart on reconnections", "committedDate": "2020-05-21T17:11:22Z", "type": "commit"}, {"oid": "1382d83c4eaa4c1b8e6b3292387db74a05817959", "url": "https://github.com/mulesoft/mule/commit/1382d83c4eaa4c1b8e6b3292387db74a05817959", "message": "Fix", "committedDate": "2020-05-21T17:11:23Z", "type": "commit"}, {"oid": "b18485d5f62f93827ad48890dda1f332741836c5", "url": "https://github.com/mulesoft/mule/commit/b18485d5f62f93827ad48890dda1f332741836c5", "message": "PR feedback", "committedDate": "2020-05-21T17:11:23Z", "type": "commit"}, {"oid": "6ff7904c36b157772e75b1ef82670d04ccda44a4", "url": "https://github.com/mulesoft/mule/commit/6ff7904c36b157772e75b1ef82670d04ccda44a4", "message": "Fix flacky test", "committedDate": "2020-05-21T17:11:23Z", "type": "commit"}, {"oid": "ac72e64fb07a28591106c8f3b3a3ef318a34f006", "url": "https://github.com/mulesoft/mule/commit/ac72e64fb07a28591106c8f3b3a3ef318a34f006", "message": "Partial PR feedback", "committedDate": "2020-05-21T17:11:23Z", "type": "commit"}, {"oid": "aab346a02dab31a137151f4be5870c55912191eb", "url": "https://github.com/mulesoft/mule/commit/aab346a02dab31a137151f4be5870c55912191eb", "message": "PR feedback", "committedDate": "2020-05-21T17:11:23Z", "type": "commit"}, {"oid": "aab346a02dab31a137151f4be5870c55912191eb", "url": "https://github.com/mulesoft/mule/commit/aab346a02dab31a137151f4be5870c55912191eb", "message": "PR feedback", "committedDate": "2020-05-21T17:11:23Z", "type": "forcePushed"}]}