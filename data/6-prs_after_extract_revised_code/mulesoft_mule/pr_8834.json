{"pr_number": 8834, "pr_title": "MULE-18375: Working fix", "pr_createdAt": "2020-05-04T14:42:08Z", "pr_url": "https://github.com/mulesoft/mule/pull/8834", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5MjY5NQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419492695", "bodyText": "this should happen in a finally clause. If another bug makes this method fail (let's say, somebody breaks OperationPolicyContext.from) , then the callback is never invoked and the process hungs, making it a painful to trace.", "author": "marianogonzalez", "createdAt": "2020-05-04T14:47:19Z", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/CompositeOperationPolicy.java", "diffHunk": "@@ -248,20 +248,53 @@ public void process(CoreEvent operationEvent,\n \n     policySink.next(operationEventForPolicy(operationEvent,\n                                             operationExecutionFunction,\n-                                            parametersProcessor, callback));\n+                                            parametersProcessor,\n+                                            new CompositeOperationPolicyExecutorCallback(callback)));\n+  }\n+\n+  private static final class CompositeOperationPolicyExecutorCallback implements ExecutorCallback {\n+\n+    private final ExecutorCallback callback;\n+\n+    public CompositeOperationPolicyExecutorCallback(ExecutorCallback callback) {\n+      this.callback = callback;\n+    }\n+\n+    @Override\n+    public void complete(Object o) {\n+      callback.complete(o);\n+    }\n+\n+    @Override\n+    public void error(Throwable throwable) {\n+      if (throwable instanceof MessagingException) {\n+        CoreEvent event = ((MessagingException) throwable).getEvent();\n+        OperationPolicyContext context = OperationPolicyContext.from(event);\n+        // Restore original event if chain failed before or during operation\n+        if (!event.equals(context.getOriginalEvent()) && context.getNextOperationResponse() == null) {\n+          throwable = new MessagingException(context.getOriginalEvent(), ((MessagingException) throwable));\n+        }\n+      }\n+\n+      callback.error(throwable);", "originalCommit": "ec2d9354062856f3519a2656a09247630155c5d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf84646437c2320104cea08c39ddb894b7cd559", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/policy/CompositeOperationPolicy.java b/core/src/main/java/org/mule/runtime/core/internal/policy/CompositeOperationPolicy.java\nindex bd78ec0b0db..a8ab23ab218 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/policy/CompositeOperationPolicy.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/policy/CompositeOperationPolicy.java\n\n@@ -248,36 +248,7 @@ public class CompositeOperationPolicy\n \n     policySink.next(operationEventForPolicy(operationEvent,\n                                             operationExecutionFunction,\n-                                            parametersProcessor,\n-                                            new CompositeOperationPolicyExecutorCallback(callback)));\n-  }\n-\n-  private static final class CompositeOperationPolicyExecutorCallback implements ExecutorCallback {\n-\n-    private final ExecutorCallback callback;\n-\n-    public CompositeOperationPolicyExecutorCallback(ExecutorCallback callback) {\n-      this.callback = callback;\n-    }\n-\n-    @Override\n-    public void complete(Object o) {\n-      callback.complete(o);\n-    }\n-\n-    @Override\n-    public void error(Throwable throwable) {\n-      if (throwable instanceof MessagingException) {\n-        CoreEvent event = ((MessagingException) throwable).getEvent();\n-        OperationPolicyContext context = OperationPolicyContext.from(event);\n-        // Restore original event if chain failed before or during operation\n-        if (!event.equals(context.getOriginalEvent()) && context.getNextOperationResponse() == null) {\n-          throwable = new MessagingException(context.getOriginalEvent(), ((MessagingException) throwable));\n-        }\n-      }\n-\n-      callback.error(throwable);\n-    }\n+                                            parametersProcessor, callback));\n   }\n \n   private CoreEvent operationEventForPolicy(CoreEvent operationEvent, OperationExecutionFunction operationExecutionFunction,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTQzMg==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419495432", "bodyText": "This is a no-go. making an instanceof at the return delegate completely defeats its purpose. Also, this code is super fragile and will potentially break each time we add another return delegate. Also, this if is kind of repeating the return delegate business logic to begin with.\nFinally, creating lambda functions which carry contextual state is a performance problem. We need to avoid that", "author": "marianogonzalez", "createdAt": "2020-05-04T14:51:05Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -409,10 +416,55 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack())\n-            .setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+\n+        Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n+          if (returnDelegate instanceof PayloadTargetReturnDelegate) {", "originalCommit": "ec2d9354062856f3519a2656a09247630155c5d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70ff14d44902655532a3fa3c7b8049bf0e1652e6", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex cb73140c9a3..c9240d819c1 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -416,7 +416,8 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack())\n+            .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n \n         Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n           if (returnDelegate instanceof PayloadTargetReturnDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTcxMQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419495711", "bodyText": "figure this out before attempting to merge", "author": "marianogonzalez", "createdAt": "2020-05-04T14:51:28Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -409,10 +416,55 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack())\n-            .setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+\n+        Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n+          if (returnDelegate instanceof PayloadTargetReturnDelegate) {\n+            return CoreEvent.builder(event)\n+                .addVariable(target, policyResult.getMessage().getPayload())\n+                .build();\n+          } else {\n+            try (ExpressionLanguageSession session =\n+                expressionManager.openSession(getTargetBindingContext(policyResult.getMessage()))) {\n+              return CoreEvent.builder(event)\n+                  .addVariable(target, session.evaluate(targetValueCompiledExpression))\n+                  .build();\n+            }\n+          }\n+        } : identity();\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            try {\n+              CoreEvent policyResult = resultMapper.apply((CoreEvent) o);\n+              executorCallback.complete(policyResult);\n+            } catch (Throwable t) {\n+              // WTF should I do here??", "originalCommit": "ec2d9354062856f3519a2656a09247630155c5d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70ff14d44902655532a3fa3c7b8049bf0e1652e6", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex cb73140c9a3..c9240d819c1 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -416,7 +416,8 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack())\n+            .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n \n         Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n           if (returnDelegate instanceof PayloadTargetReturnDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTgzNA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419495834", "bodyText": "resolve this", "author": "marianogonzalez", "createdAt": "2020-05-04T14:51:38Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -409,10 +416,55 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack())\n-            .setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+\n+        Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n+          if (returnDelegate instanceof PayloadTargetReturnDelegate) {\n+            return CoreEvent.builder(event)\n+                .addVariable(target, policyResult.getMessage().getPayload())\n+                .build();\n+          } else {\n+            try (ExpressionLanguageSession session =\n+                expressionManager.openSession(getTargetBindingContext(policyResult.getMessage()))) {\n+              return CoreEvent.builder(event)\n+                  .addVariable(target, session.evaluate(targetValueCompiledExpression))\n+                  .build();\n+            }\n+          }\n+        } : identity();\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            try {\n+              CoreEvent policyResult = resultMapper.apply((CoreEvent) o);\n+              executorCallback.complete(policyResult);\n+            } catch (Throwable t) {\n+              // WTF should I do here??\n+              executorCallback.error(t);\n+            }\n+          }\n+\n+          @Override\n+          public void error(Throwable throwable) {\n+            //            if (throwable instanceof MessagingException) {", "originalCommit": "ec2d9354062856f3519a2656a09247630155c5d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70ff14d44902655532a3fa3c7b8049bf0e1652e6", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex cb73140c9a3..c9240d819c1 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -416,7 +416,8 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack())\n+            .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n \n         Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n           if (returnDelegate instanceof PayloadTargetReturnDelegate) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NjIzMQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419496231", "bodyText": "no. This is a concern for the return delegate. Should not do this here", "author": "marianogonzalez", "createdAt": "2020-05-04T14:52:09Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -502,6 +555,8 @@ protected void doInitialise() throws InitialisationException {\n         throw new InitialisationException(createStaticMessage(\"Could not resolve transactional configuration\"), e, this);\n       }\n       returnDelegate = createReturnDelegate();\n+      valueReturnDelegate = getValueReturnDelegate();\n+      targetValueCompiledExpression = expressionManager.compile(targetValue, getTargetBindingContext(Message.of(\"\")));", "originalCommit": "ec2d9354062856f3519a2656a09247630155c5d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf84646437c2320104cea08c39ddb894b7cd559", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex cb73140c9a3..bf51d760247 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -556,7 +531,6 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n       }\n       returnDelegate = createReturnDelegate();\n       valueReturnDelegate = getValueReturnDelegate();\n-      targetValueCompiledExpression = expressionManager.compile(targetValue, getTargetBindingContext(Message.of(\"\")));\n       initialiseIfNeeded(resolverSet, muleContext);\n       componentExecutor = createComponentExecutor();\n       executionMediator = createExecutionMediator();\n"}}, {"oid": "70ff14d44902655532a3fa3c7b8049bf0e1652e6", "url": "https://github.com/mulesoft/mule/commit/70ff14d44902655532a3fa3c7b8049bf0e1652e6", "message": "Working fix", "committedDate": "2020-06-01T19:48:22Z", "type": "commit"}, {"oid": "2bf84646437c2320104cea08c39ddb894b7cd559", "url": "https://github.com/mulesoft/mule/commit/2bf84646437c2320104cea08c39ddb894b7cd559", "message": "Changes based on PR comments", "committedDate": "2020-06-08T17:32:27Z", "type": "commit"}, {"oid": "2bf84646437c2320104cea08c39ddb894b7cd559", "url": "https://github.com/mulesoft/mule/commit/2bf84646437c2320104cea08c39ddb894b7cd559", "message": "Changes based on PR comments", "committedDate": "2020-06-08T17:32:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMDk5MQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436900991", "bodyText": "This is getting executed even when the Catch clausules above are executed", "author": "balbifm", "createdAt": "2020-06-08T18:14:48Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -411,8 +412,34 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(location, eventId)\n-            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            CoreEvent policyResult = (CoreEvent) o;\n+            if (isTargetWithPolicies(event)) {\n+              try {\n+                ExecutionContextAdapter operationContext = createExecutionContext(event);\n+                policyResult = returnDelegate.asReturnValue(o, operationContext);\n+              } catch (MuleException e) {\n+                executorCallback.error(e);\n+              } catch (Throwable t) {\n+                executorCallback.error(unwrap(t));\n+              }\n+            }\n+\n+            executorCallback.complete(policyResult);", "originalCommit": "2bf84646437c2320104cea08c39ddb894b7cd559", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f407093018fb9d2d747858adf3f4f986137b49e8", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex bf51d760247..0436b485458 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -422,14 +422,13 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n               try {\n                 ExecutionContextAdapter operationContext = createExecutionContext(event);\n                 policyResult = returnDelegate.asReturnValue(o, operationContext);\n+                executorCallback.complete(policyResult);\n               } catch (MuleException e) {\n                 executorCallback.error(e);\n               } catch (Throwable t) {\n                 executorCallback.error(unwrap(t));\n               }\n             }\n-\n-            executorCallback.complete(policyResult);\n           }\n \n           @Override\n"}}, {"oid": "f407093018fb9d2d747858adf3f4f986137b49e8", "url": "https://github.com/mulesoft/mule/commit/f407093018fb9d2d747858adf3f4f986137b49e8", "message": "Fix callback complete invocation", "committedDate": "2020-06-08T18:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMDU4NA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436910584", "bodyText": "shouldn't this be the only place where target is handled? Why do need to know if a policy is applied?", "author": "elrodro83", "createdAt": "2020-06-08T18:32:03Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -411,8 +412,34 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(location, eventId)\n-            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            CoreEvent policyResult = (CoreEvent) o;\n+            if (isTargetWithPolicies(event)) {", "originalCommit": "2bf84646437c2320104cea08c39ddb894b7cd559", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxOTU3Mg==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436919572", "bodyText": "When the operation doesn't have a target/targetValue, the behaviour is the same we had before the change: the returnDelegate is used in ComponentMessageProcessor#mapped, otherwise, ComponentMessageProcessor#mapped uses a ValueReturnDelegate and here, after PolicyEventMapper#onOperationPolicyFinish was executed, is used the appropriate returnDelegate.", "author": "szaffarano", "createdAt": "2020-06-08T18:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMDU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "f407093018fb9d2d747858adf3f4f986137b49e8", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex bf51d760247..0436b485458 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -422,14 +422,13 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n               try {\n                 ExecutionContextAdapter operationContext = createExecutionContext(event);\n                 policyResult = returnDelegate.asReturnValue(o, operationContext);\n+                executorCallback.complete(policyResult);\n               } catch (MuleException e) {\n                 executorCallback.error(e);\n               } catch (Throwable t) {\n                 executorCallback.error(unwrap(t));\n               }\n             }\n-\n-            executorCallback.complete(policyResult);\n           }\n \n           @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMjUyNw==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436912527", "bodyText": "You need this on the else as well", "author": "balbifm", "createdAt": "2020-06-08T18:35:39Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -411,8 +412,33 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(location, eventId)\n-            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            CoreEvent policyResult = (CoreEvent) o;\n+            if (isTargetWithPolicies(event)) {\n+              try {\n+                ExecutionContextAdapter operationContext = createExecutionContext(event);\n+                policyResult = returnDelegate.asReturnValue(o, operationContext);\n+                executorCallback.complete(policyResult);", "originalCommit": "f407093018fb9d2d747858adf3f4f986137b49e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "320f7d2e501e956105fc54adbb46da51d38c7fea", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex 0436b485458..5d85c61cac0 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -417,17 +417,17 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n \n           @Override\n           public void complete(Object o) {\n-            CoreEvent policyResult = (CoreEvent) o;\n             if (isTargetWithPolicies(event)) {\n               try {\n                 ExecutionContextAdapter operationContext = createExecutionContext(event);\n-                policyResult = returnDelegate.asReturnValue(o, operationContext);\n-                executorCallback.complete(policyResult);\n+                executorCallback.complete(returnDelegate.asReturnValue(o, operationContext));\n               } catch (MuleException e) {\n                 executorCallback.error(e);\n               } catch (Throwable t) {\n                 executorCallback.error(unwrap(t));\n               }\n+            } else {\n+              executorCallback.complete(o);\n             }\n           }\n \n"}}, {"oid": "320f7d2e501e956105fc54adbb46da51d38c7fea", "url": "https://github.com/mulesoft/mule/commit/320f7d2e501e956105fc54adbb46da51d38c7fea", "message": "Fix", "committedDate": "2020-06-08T18:39:48Z", "type": "commit"}, {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a", "url": "https://github.com/mulesoft/mule/commit/8d55e62ff6e0f81c04d47f574db81090b655933a", "message": "Make policies logic independent of target resolution", "committedDate": "2020-06-08T19:59:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTMzMQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436989331", "bodyText": "where is getValueReturnDelegate() defined?", "author": "marianogonzalez", "createdAt": "2020-06-08T20:43:51Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -502,6 +524,7 @@ protected void doInitialise() throws InitialisationException {\n         throw new InitialisationException(createStaticMessage(\"Could not resolve transactional configuration\"), e, this);\n       }\n       returnDelegate = createReturnDelegate();\n+      valueReturnDelegate = getValueReturnDelegate();", "originalCommit": "8d55e62ff6e0f81c04d47f574db81090b655933a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTQ1OQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436989459", "bodyText": "why do we need this instead of simply reusing the same returnDelegate? What's the difference?", "author": "marianogonzalez", "createdAt": "2020-06-08T20:44:06Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -226,6 +226,7 @@\n   protected ExecutionMediator executionMediator;\n   protected CompletableComponentExecutor componentExecutor;\n   protected ReturnDelegate returnDelegate;\n+  protected ReturnDelegate valueReturnDelegate;", "originalCommit": "8d55e62ff6e0f81c04d47f574db81090b655933a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDk5NA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437490994", "bodyText": "this deserves a large javadoc explaining why", "author": "marianogonzalez", "createdAt": "2020-06-09T14:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NDk5MA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437494990", "bodyText": "male it private, not protected", "author": "elrodro83", "createdAt": "2020-06-09T15:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex fba209414ae..54c7e6aabc8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -226,7 +227,18 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n   protected ExecutionMediator executionMediator;\n   protected CompletableComponentExecutor componentExecutor;\n   protected ReturnDelegate returnDelegate;\n-  protected ReturnDelegate valueReturnDelegate;\n+  /**\n+   * MULE-18375: When a policy is applied to an operation that has defined a target, it's necessary to wait until the policy\n+   * finishes to calculate the return value with {@link #returnDelegate}. But in this case, because of in order to execute the\n+   * rest of the policy we need to transform the {@link Result} returned by the operation into a {@link CoreEvent}, we use\n+   * {@link #valueReturnDelegate} as a helper class to do this transformation. It's used only when there is an operation that\n+   * defines a target, and at the same time, there are operation policies applied to it. Finally, when the policy finishes, the\n+   * proper {@link #returnDelegate} is executed.\n+   * \n+   * It's an horrible solution, we only need a piece of code that transforms an {@link Object} into a {@link CoreEvent} and not a\n+   * {@link ReturnDelegate} .\n+   */\n+  private ReturnDelegate valueReturnDelegate;\n   protected PolicyManager policyManager;\n \n   public ComponentMessageProcessor(ExtensionModel extensionModel,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTc4MA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436989780", "bodyText": "complete or delete", "author": "marianogonzalez", "createdAt": "2020-06-08T20:44:45Z", "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java", "diffHunk": "@@ -413,6 +414,17 @@ public void executeWithPolicy() throws Exception {\n     verify(mockOperationPolicy).process(same(event), any(OperationExecutionFunction.class), any(), any(), any());\n   }\n \n+  @Test\n+  public void executeWithPolicyReturnsOperationResultOnTarget() throws Exception {\n+    // Assert return delegate only once", "originalCommit": "8d55e62ff6e0f81c04d47f574db81090b655933a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "chunk": "diff --git a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\nindex 210e51e725f..f51fc0e6ddc 100644\n--- a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\n+++ b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\n\n@@ -414,17 +414,6 @@ public class OperationMessageProcessorTestCase extends AbstractOperationMessageP\n     verify(mockOperationPolicy).process(same(event), any(OperationExecutionFunction.class), any(), any(), any());\n   }\n \n-  @Test\n-  public void executeWithPolicyReturnsOperationResultOnTarget() throws Exception {\n-    // Assert return delegate only once\n-    // fail(\"implemet\");\n-  }\n-\n-  @Test\n-  public void executeReturnsOperationResultButKeepsAttributes() {\n-    // fail(\"implemet\");\n-  }\n-\n   @Test\n   public void skipPolicyWithNoComponentLocation() throws Exception {\n     messageProcessor.setAnnotations(new HashMap<>());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTgxOA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436989818", "bodyText": "complete or delete", "author": "marianogonzalez", "createdAt": "2020-06-08T20:44:49Z", "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java", "diffHunk": "@@ -413,6 +414,17 @@ public void executeWithPolicy() throws Exception {\n     verify(mockOperationPolicy).process(same(event), any(OperationExecutionFunction.class), any(), any(), any());\n   }\n \n+  @Test\n+  public void executeWithPolicyReturnsOperationResultOnTarget() throws Exception {\n+    // Assert return delegate only once\n+    // fail(\"implemet\");\n+  }\n+\n+  @Test\n+  public void executeReturnsOperationResultButKeepsAttributes() {", "originalCommit": "8d55e62ff6e0f81c04d47f574db81090b655933a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "chunk": "diff --git a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\nindex 210e51e725f..f51fc0e6ddc 100644\n--- a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\n+++ b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\n\n@@ -414,17 +414,6 @@ public class OperationMessageProcessorTestCase extends AbstractOperationMessageP\n     verify(mockOperationPolicy).process(same(event), any(OperationExecutionFunction.class), any(), any(), any());\n   }\n \n-  @Test\n-  public void executeWithPolicyReturnsOperationResultOnTarget() throws Exception {\n-    // Assert return delegate only once\n-    // fail(\"implemet\");\n-  }\n-\n-  @Test\n-  public void executeReturnsOperationResultButKeepsAttributes() {\n-    // fail(\"implemet\");\n-  }\n-\n   @Test\n   public void skipPolicyWithNoComponentLocation() throws Exception {\n     messageProcessor.setAnnotations(new HashMap<>());\n"}}, {"oid": "eed46d6702ff298a1e56e10b18c8e751b4a42069", "url": "https://github.com/mulesoft/mule/commit/eed46d6702ff298a1e56e10b18c8e751b4a42069", "message": "Some changes to improve performance", "committedDate": "2020-06-09T14:40:50Z", "type": "commit"}, {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "url": "https://github.com/mulesoft/mule/commit/5e5cc9fa52664294a2e9f637b63b0a76746b4124", "message": "Delete unimplemented tests", "committedDate": "2020-06-09T14:44:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NDQ5Nw==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437484497", "bodyText": "remove", "author": "marianogonzalez", "createdAt": "2020-06-09T14:50:39Z", "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java", "diffHunk": "@@ -17,6 +17,7 @@\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.CoreMatchers.sameInstance;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;", "originalCommit": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "chunk": "diff --git a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\nindex f51fc0e6ddc..38f4d2d3738 100644\n--- a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\n+++ b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java\n\n@@ -17,7 +17,6 @@ import static org.hamcrest.CoreMatchers.notNullValue;\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.CoreMatchers.sameInstance;\n import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.fail;\n import static org.junit.rules.ExpectedException.none;\n import static org.mockito.ArgumentCaptor.forClass;\n import static org.mockito.ArgumentMatchers.any;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4ODE2Ng==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437488166", "bodyText": "isn't this the other way around? if there are no policies, this is the callback wrapper that is used, and you're wrongfully changing the return delefate in this case", "author": "marianogonzalez", "createdAt": "2020-06-09T14:55:15Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -437,18 +441,62 @@ private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallba\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event, executorCallback);\n+      operationExecutionFunction.execute(resolutionResult, event,\n+                                         computeOperationReturnExecutionCallback(event, executorCallback));\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n+  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {\n+    return new ExecutorCallback() {\n+\n+      @Override\n+      public void complete(Object o) {\n+        ExecutionContextAdapter operationContext = null;\n+        CoreEvent originalEvent = null;\n+        try {\n+          if (returnDelegate instanceof ValueReturnDelegate) {\n+            delegateCallback.complete(o);\n+          } else {\n+            OperationExecutionParams operationExecutionParams =\n+                from(event).getOperationExecutionParams(getLocation(), event.getContext().getId());\n+\n+            if (operationExecutionParams != null) {\n+              operationContext =\n+                  operationExecutionParams.getExecutionContextAdapter();\n+              originalEvent = operationContext.getEvent();\n+              operationContext.changeEvent(event);\n+            } else {\n+              operationContext = createExecutionContext(event);\n+            }\n+\n+            delegateCallback.complete(returnDelegate.asReturnValue(o, operationContext));\n+          }\n+        } catch (MuleException e) {\n+          delegateCallback.error(e);\n+        } catch (Throwable t) {\n+          delegateCallback.error(unwrap(t));\n+        } finally {\n+          if (operationContext != null && originalEvent != null) {\n+            operationContext.changeEvent(originalEvent);\n+          }\n+        }\n+      }\n+\n+      @Override\n+      public void error(Throwable t) {\n+        delegateCallback.error(unwrap(t));\n+      }\n+    };\n+  }\n+\n   private ExecutorCallback mapped(ExecutorCallback callback, ExecutionContextAdapter<T> operationContext) {\n     return new ExecutorCallback() {\n \n       @Override\n       public void complete(Object value) {\n-        callback.complete(returnDelegate.asReturnValue(value, operationContext));\n+        callback.complete(valueReturnDelegate.asReturnValue(value, operationContext));", "originalCommit": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex 10d51879ffb..54c7e6aabc8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -441,14 +455,27 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event,\n-                                         computeOperationReturnExecutionCallback(event, executorCallback));\n+      ExecutorCallback effectiveCallback =\n+          isTargetWithPolicies(event) ? getExecutionCallbackForPolicyAndOperationWithTarget(event, executorCallback)\n+              : executorCallback;\n+\n+      operationExecutionFunction.execute(resolutionResult, event, effectiveCallback);\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n-  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {\n+  /**\n+   * Only used in case the operation defines a target and there are operation policies applied to it.\n+   * \n+   * @see {@link #valueReturnDelegate}\n+   * \n+   * @param event\n+   * @param delegateCallback\n+   * @return\n+   */\n+  private ExecutorCallback getExecutionCallbackForPolicyAndOperationWithTarget(CoreEvent event,\n+                                                                               ExecutorCallback delegateCallback) {\n     return new ExecutorCallback() {\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4ODk4OA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437488988", "bodyText": "isn't this for the policy use case only? In that case, this name is misleading", "author": "marianogonzalez", "createdAt": "2020-06-09T14:56:17Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -437,18 +441,62 @@ private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallba\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event, executorCallback);\n+      operationExecutionFunction.execute(resolutionResult, event,\n+                                         computeOperationReturnExecutionCallback(event, executorCallback));\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n+  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {", "originalCommit": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex 10d51879ffb..54c7e6aabc8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -441,14 +455,27 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event,\n-                                         computeOperationReturnExecutionCallback(event, executorCallback));\n+      ExecutorCallback effectiveCallback =\n+          isTargetWithPolicies(event) ? getExecutionCallbackForPolicyAndOperationWithTarget(event, executorCallback)\n+              : executorCallback;\n+\n+      operationExecutionFunction.execute(resolutionResult, event, effectiveCallback);\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n-  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {\n+  /**\n+   * Only used in case the operation defines a target and there are operation policies applied to it.\n+   * \n+   * @see {@link #valueReturnDelegate}\n+   * \n+   * @param event\n+   * @param delegateCallback\n+   * @return\n+   */\n+  private ExecutorCallback getExecutionCallbackForPolicyAndOperationWithTarget(CoreEvent event,\n+                                                                               ExecutorCallback delegateCallback) {\n     return new ExecutorCallback() {\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDAyNQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437490025", "bodyText": "I would make a best effort to avoid this. This only makes sense in the particular policy use case you're targeting. This is wrong in any other use case. So either do this differently, or make it absolutely impossible for this method to be used in any other use case.", "author": "marianogonzalez", "createdAt": "2020-06-09T14:57:43Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -437,18 +441,62 @@ private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallba\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event, executorCallback);\n+      operationExecutionFunction.execute(resolutionResult, event,\n+                                         computeOperationReturnExecutionCallback(event, executorCallback));\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n+  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {\n+    return new ExecutorCallback() {\n+\n+      @Override\n+      public void complete(Object o) {\n+        ExecutionContextAdapter operationContext = null;\n+        CoreEvent originalEvent = null;\n+        try {\n+          if (returnDelegate instanceof ValueReturnDelegate) {", "originalCommit": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex 10d51879ffb..54c7e6aabc8 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -441,14 +455,27 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event,\n-                                         computeOperationReturnExecutionCallback(event, executorCallback));\n+      ExecutorCallback effectiveCallback =\n+          isTargetWithPolicies(event) ? getExecutionCallbackForPolicyAndOperationWithTarget(event, executorCallback)\n+              : executorCallback;\n+\n+      operationExecutionFunction.execute(resolutionResult, event, effectiveCallback);\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n-  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {\n+  /**\n+   * Only used in case the operation defines a target and there are operation policies applied to it.\n+   * \n+   * @see {@link #valueReturnDelegate}\n+   * \n+   * @param event\n+   * @param delegateCallback\n+   * @return\n+   */\n+  private ExecutorCallback getExecutionCallbackForPolicyAndOperationWithTarget(CoreEvent event,\n+                                                                               ExecutorCallback delegateCallback) {\n     return new ExecutorCallback() {\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDY2MA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437490660", "bodyText": "should this actually be mutable? @elrodro83 what say you?", "author": "marianogonzalez", "createdAt": "2020-06-09T14:58:35Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "diffHunk": "@@ -199,5 +201,13 @@ public CoreEvent getOperationEvent() {\n     public ExecutorCallback getCallback() {\n       return callback;\n     }\n+\n+    public void setExecutionContextAdapter(ExecutionContextAdapter executionContextAdapter) {", "originalCommit": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NDM1NQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437494355", "bodyText": "no it shouldn't there are other places already in use around here where this state may be kept (sdk context, for instance)", "author": "elrodro83", "createdAt": "2020-06-09T15:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "9659d0d8030f36f9a534a9080fe53ff094f52c16", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java\nindex 6014d76a266..4656cf37b24 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java\n\n@@ -202,10 +207,6 @@ public class SdkInternalContext implements EventInternalContext<SdkInternalConte\n       return callback;\n     }\n \n-    public void setExecutionContextAdapter(ExecutionContextAdapter executionContextAdapter) {\n-      this.executionContextAdapter = executionContextAdapter;\n-    }\n-\n     public ExecutionContextAdapter getExecutionContextAdapter() {\n       return executionContextAdapter;\n     }\n"}}, {"oid": "4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "url": "https://github.com/mulesoft/mule/commit/4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "message": "Make some changes after PR comments", "committedDate": "2020-06-09T17:33:15Z", "type": "commit"}, {"oid": "9659d0d8030f36f9a534a9080fe53ff094f52c16", "url": "https://github.com/mulesoft/mule/commit/9659d0d8030f36f9a534a9080fe53ff094f52c16", "message": "Make OperationExecutionParams#executionContextAdapter immutable", "committedDate": "2020-06-09T20:00:27Z", "type": "commit"}, {"oid": "66a3093010b9413f7cb1a4905e979e88cb4b3b8a", "url": "https://github.com/mulesoft/mule/commit/66a3093010b9413f7cb1a4905e979e88cb4b3b8a", "message": "Avoid multiple ExecutionContext creation", "committedDate": "2020-06-10T16:03:05Z", "type": "commit"}, {"oid": "e29b6cc0da4c3c4a94d4b42781760581483fa051", "url": "https://github.com/mulesoft/mule/commit/e29b6cc0da4c3c4a94d4b42781760581483fa051", "message": "Add TODOs", "committedDate": "2020-06-11T01:47:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTE0NA==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r438905144", "bodyText": "rephrase, and point to the fact that the piece of code we need is already in the ValueReturnDelegate, we just need to extract it", "author": "marianogonzalez", "createdAt": "2020-06-11T16:10:33Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -226,6 +227,18 @@\n   protected ExecutionMediator executionMediator;\n   protected CompletableComponentExecutor componentExecutor;\n   protected ReturnDelegate returnDelegate;\n+  /**\n+   * TODO: MULE-18483 When a policy is applied to an operation that has defined a target, it's necessary to wait until the policy\n+   * finishes to calculate the return value with {@link #returnDelegate}. But in this case, because of in order to execute the\n+   * rest of the policy we need to transform the {@link Result} returned by the operation into a {@link CoreEvent}, we use\n+   * {@link #valueReturnDelegate} as a helper class to do this transformation. It's used only when there is an operation that\n+   * defines a target, and at the same time, there are operation policies applied to it. Finally, when the policy finishes, the\n+   * proper {@link #returnDelegate} is executed.\n+   * <p>\n+   * It's an horrible solution, we only need a piece of code that transforms an {@link Object} into a {@link CoreEvent} and not a", "originalCommit": "e29b6cc0da4c3c4a94d4b42781760581483fa051", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3051247327bb85671dbe505206efc22bbe60a698", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex e6a93e0e81b..cd37eedc1c5 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -227,16 +227,14 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n   protected ExecutionMediator executionMediator;\n   protected CompletableComponentExecutor componentExecutor;\n   protected ReturnDelegate returnDelegate;\n-  /**\n+  /*\n    * TODO: MULE-18483 When a policy is applied to an operation that has defined a target, it's necessary to wait until the policy\n    * finishes to calculate the return value with {@link #returnDelegate}. But in this case, because of in order to execute the\n-   * rest of the policy we need to transform the {@link Result} returned by the operation into a {@link CoreEvent}, we use\n-   * {@link #valueReturnDelegate} as a helper class to do this transformation. It's used only when there is an operation that\n-   * defines a target, and at the same time, there are operation policies applied to it. Finally, when the policy finishes, the\n-   * proper {@link #returnDelegate} is executed.\n-   * <p>\n-   * It's an horrible solution, we only need a piece of code that transforms an {@link Object} into a {@link CoreEvent} and not a\n-   * {@link ReturnDelegate} .\n+   * rest of the policy we need to transform the {@link Result} returned by the operation into a {@link CoreEvent}, we use {@link\n+   * #valueReturnDelegate} as a helper class to do this transformation. It's used only when there is an operation that defines a\n+   * target, and at the same time, there are operation policies applied to it. Finally, when the policy finishes, the proper\n+   * {@link #returnDelegate} is executed. It'd be ideal to improve this by extracting from {@link ReturnDelegate} the logic\n+   * that transforms an {@link Object} into a {@link CoreEvent}.\n    */\n   private ReturnDelegate valueReturnDelegate;\n   protected PolicyManager policyManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjAyNQ==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r438906025", "bodyText": "isTargetWithPolicies(event) is it really necessary to evaluate this method on every single invocation? Won't the value be constant? Cannot this be cached?", "author": "marianogonzalez", "createdAt": "2020-06-11T16:11:54Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -403,16 +416,21 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(location, eventId);\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(location, eventId, configuration, parameters, operationEvent, callback);\n+        setOperationExecutionParams(location, event, configuration, parameters, operationEvent, callback, ctx);\n \n         fluxSupplier.get().next(operationEvent);\n       };\n \n       if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(location, eventId)\n-            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n+\n+        ExecutorCallback effectiveCallback =\n+            isTargetWithPolicies(event) ? getExecutionCallbackForPolicyAndOperationWithTarget(event, executorCallback)", "originalCommit": "e29b6cc0da4c3c4a94d4b42781760581483fa051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNjgzMg==", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r438916832", "bodyText": "No, which policies get applied to a particular operation depends on the incoming event", "author": "balbifm", "createdAt": "2020-06-11T16:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjAyNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3051247327bb85671dbe505206efc22bbe60a698", "url": "https://github.com/mulesoft/mule/commit/3051247327bb85671dbe505206efc22bbe60a698", "message": "Clarify TODO", "committedDate": "2020-06-11T16:40:46Z", "type": "commit"}]}