{"pr_number": 9046, "pr_title": "MULE-18562: Backward compatibility changes", "pr_createdAt": "2020-07-14T04:51:27Z", "pr_url": "https://github.com/mulesoft/mule/pull/9046", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNjczOA==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r455036738", "bodyText": "the caller is casting the parameter to SuppressedMuleException, why is this receiving a more generic parameter?", "author": "elrodro83", "createdAt": "2020-07-15T13:08:14Z", "path": "core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java", "diffHunk": "@@ -65,14 +69,36 @@ private ErrorBuilder(Throwable e) {\n     if (e instanceof ComposedErrorException) {\n       this.errors = ((ComposedErrorException) e).getErrors();\n     }\n+    if (e instanceof SuppressedMuleException) {\n+      this.suppressedErrors = getSuppressedMessagingErrors((SuppressedMuleException) e);\n+    }\n     this.exception = e;\n     String exceptionDescription = e.getMessage() != null ? e.getMessage() : \"unknown description\";\n     this.description = exceptionDescription;\n     this.detailedDescription = exceptionDescription;\n     MuleException muleRoot = getRootMuleException(this.exception);\n-    if (muleRoot != null && muleRoot.getMessage() != null) {\n-      this.description = muleRoot.getMessage();\n+    if (muleRoot != null) {\n+      this.suppressedErrors = getSuppressedMessagingErrors(muleRoot);\n+      if (muleRoot.getMessage() != null) {\n+        this.description = muleRoot.getMessage();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Returns all the {@link Error} instances that the given {@link MuleException} inform as suppressed.\n+   * @param muleException Given {@link MuleException}.\n+   * @return {@link List<Error>} containing all the {@link Error} instances that the given {@link MuleException} inform as suppressed.\n+   * @see SuppressedMuleException\n+   */\n+  private List<Error> getSuppressedMessagingErrors(MuleException muleException) {", "originalCommit": "23b016e6526d4d149efaf0c8671dee5d34add50a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTM1MA==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r455065350", "bodyText": "Note that there are two calls to this method, the one that you are talking about and a second one where the parameter is a MuleException (the root mule exception, if present)", "author": "IvanAndresFritzler", "createdAt": "2020-07-15T13:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNjczOA=="}], "type": "inlineReview", "revised_code": {"commit": "06991b25500144cda68f580f0d64dcc3d0249f82", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java b/core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java\nindex 50090476b05..dba701f01c9 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java\n\n@@ -63,26 +65,45 @@ public final class ErrorBuilder {\n    * @param e the exception to use from which the error will be created.\n    */\n   private ErrorBuilder(Throwable e) {\n-    if (e instanceof ErrorMessageAwareException) {\n-      this.errorMessage = ((ErrorMessageAwareException) e).getErrorMessage();\n-    }\n-    if (e instanceof ComposedErrorException) {\n-      this.errors = ((ComposedErrorException) e).getErrors();\n-    }\n-    if (e instanceof SuppressedMuleException) {\n-      this.suppressedErrors = getSuppressedMessagingErrors((SuppressedMuleException) e);\n-    }\n-    this.exception = e;\n+    Throwable cause = e;\n     String exceptionDescription = e.getMessage() != null ? e.getMessage() : \"unknown description\";\n     this.description = exceptionDescription;\n     this.detailedDescription = exceptionDescription;\n-    MuleException muleRoot = getRootMuleException(this.exception);\n-    if (muleRoot != null) {\n-      this.suppressedErrors = getSuppressedMessagingErrors(muleRoot);\n-      if (muleRoot.getMessage() != null) {\n-        this.description = muleRoot.getMessage();\n+    if (cause instanceof SuppressedMuleException) {\n+      // Setting a SuppressedMuleException would break backwards compatibility, so it must be unwrapped\n+      exception = ((SuppressedMuleException) e).unwrap();\n+      addSuppressedErrors((SuppressedMuleException) e);\n+      updateErrorDescription((SuppressedMuleException) e);\n+    } else {\n+      exception = cause;\n+      MuleException muleRoot = getRootMuleException(exception);\n+      if (muleRoot != null) {\n+        addSuppressedErrors(muleRoot);\n+        updateErrorDescription(muleRoot);\n       }\n     }\n+    if (cause instanceof ErrorMessageAwareException) {\n+      this.errorMessage = ((ErrorMessageAwareException) cause).getErrorMessage();\n+    }\n+    if (cause instanceof ComposedErrorException) {\n+      this.errors = ((ComposedErrorException) cause).getErrors();\n+    }\n+  }\n+\n+  /**\n+   * Given a root {@link MuleException}, returns the less detailed (original) error message.\n+   * @param exception (must be the result of a {@link org.mule.runtime.api.exception.ExceptionHelper#getRootMuleException(Throwable)} call.\n+   */\n+  private void updateErrorDescription(MuleException exception) {\n+    MuleException muleRoot = exception;\n+    // Returning the first suppression root message (if present) the behaviour without error suppression\n+    List<MuleException> suppressedCauses = exception.getExceptionInfo().getSuppressedCauses();\n+    if (!suppressedCauses.isEmpty()) {\n+      muleRoot = getRootMuleException(suppressedCauses.get(suppressedCauses.size() - 1));\n+    }\n+    if (muleRoot.getMessage() != null) {\n+      description = muleRoot.getMessage();\n+    }\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5Njc4OQ==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r455796789", "bodyText": "log a WARN in this case", "author": "elrodro83", "createdAt": "2020-07-16T13:44:56Z", "path": "core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java", "diffHunk": "@@ -437,9 +438,19 @@ public boolean accept(CoreEvent event) {\n     return acceptsAll() || (acceptsErrorType(event) && acceptsExpression(event));\n   }\n \n-\n   private boolean acceptsErrorType(CoreEvent event) {\n-    return errorTypeMatcher == null || errorTypeMatcher.match(event.getError().get().getErrorType());\n+    Error error = event.getError().get();\n+    return errorTypeMatcher == null || errorTypeMatcher.match(error.getErrorType())\n+        || acceptsSuppressedErrorType(error.getSuppressedErrors());\n+  }\n+\n+  private boolean acceptsSuppressedErrorType(List<Error> suppressedErrors) {\n+    for (Error suppressedError : suppressedErrors) {\n+      if (errorTypeMatcher.match(suppressedError.getErrorType())) {", "originalCommit": "23b016e6526d4d149efaf0c8671dee5d34add50a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bba5ea8d6571168d3c6f1a8cc9740dbb63de29ce", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\nindex e5ee785f7d3..100e046fd18 100644\n--- a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n+++ b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n\n@@ -441,12 +442,16 @@ public abstract class TemplateOnErrorHandler extends AbstractExceptionListener\n   private boolean acceptsErrorType(CoreEvent event) {\n     Error error = event.getError().get();\n     return errorTypeMatcher == null || errorTypeMatcher.match(error.getErrorType())\n-        || acceptsSuppressedErrorType(error.getSuppressedErrors());\n+        || acceptsSuppressedErrorType(error.getSuppressedErrors(), event);\n   }\n \n-  private boolean acceptsSuppressedErrorType(List<Error> suppressedErrors) {\n+  private boolean acceptsSuppressedErrorType(List<Error> suppressedErrors, CoreEvent coreEvent) {\n     for (Error suppressedError : suppressedErrors) {\n-      if (errorTypeMatcher.match(suppressedError.getErrorType())) {\n+      ErrorType suppressedErrorType = suppressedError.getErrorType();\n+      if (errorTypeMatcher.match(suppressedErrorType)) {\n+        logger\n+            .warn(\"{} Error handler has matched the following suppressed error: {}. Consider a configuration change in order to match the unsuppressed error: {}\",\n+                  this, suppressedErrorType, coreEvent.getError().get().getErrorType());\n         return true;\n       }\n     }\n"}}, {"oid": "bba5ea8d6571168d3c6f1a8cc9740dbb63de29ce", "url": "https://github.com/mulesoft/mule/commit/bba5ea8d6571168d3c6f1a8cc9740dbb63de29ce", "message": "MULE-18562: Code review changes", "committedDate": "2020-07-16T20:34:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3NjQyMg==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r456076422", "bodyText": "{} error handler -> Error handler '{}'", "author": "elrodro83", "createdAt": "2020-07-16T21:03:10Z", "path": "core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java", "diffHunk": "@@ -437,9 +439,23 @@ public boolean accept(CoreEvent event) {\n     return acceptsAll() || (acceptsErrorType(event) && acceptsExpression(event));\n   }\n \n-\n   private boolean acceptsErrorType(CoreEvent event) {\n-    return errorTypeMatcher == null || errorTypeMatcher.match(event.getError().get().getErrorType());\n+    Error error = event.getError().get();\n+    return errorTypeMatcher == null || errorTypeMatcher.match(error.getErrorType())\n+        || acceptsSuppressedErrorType(error.getSuppressedErrors(), event);\n+  }\n+\n+  private boolean acceptsSuppressedErrorType(List<Error> suppressedErrors, CoreEvent coreEvent) {\n+    for (Error suppressedError : suppressedErrors) {\n+      ErrorType suppressedErrorType = suppressedError.getErrorType();\n+      if (errorTypeMatcher.match(suppressedErrorType)) {\n+        logger\n+            .warn(\"{} error handler has matched the following underlying error: {}. Consider a configuration change in order to match the reported error: {}\",", "originalCommit": "a33e09c05ec3d91494754590405d5d02c074c532", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06991b25500144cda68f580f0d64dcc3d0249f82", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\nindex 00a049b4849..fe9fe8a62b7 100644\n--- a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n+++ b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n\n@@ -450,8 +450,8 @@ public abstract class TemplateOnErrorHandler extends AbstractExceptionListener\n       ErrorType suppressedErrorType = suppressedError.getErrorType();\n       if (errorTypeMatcher.match(suppressedErrorType)) {\n         logger\n-            .warn(\"{} error handler has matched the following underlying error: {}. Consider a configuration change in order to match the reported error: {}\",\n-                  this, suppressedErrorType, coreEvent.getError().get().getErrorType());\n+            .warn(\"Error handler '{}' has matched the following underlying error: {}. Consider changing it to match the reported error: {}.\",\n+                  getLocation().getLocation(), suppressedErrorType, coreEvent.getError().get().getErrorType());\n         return true;\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3NjU4Mg==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r456076582", "bodyText": "use the location instead of this", "author": "elrodro83", "createdAt": "2020-07-16T21:03:31Z", "path": "core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java", "diffHunk": "@@ -437,9 +439,23 @@ public boolean accept(CoreEvent event) {\n     return acceptsAll() || (acceptsErrorType(event) && acceptsExpression(event));\n   }\n \n-\n   private boolean acceptsErrorType(CoreEvent event) {\n-    return errorTypeMatcher == null || errorTypeMatcher.match(event.getError().get().getErrorType());\n+    Error error = event.getError().get();\n+    return errorTypeMatcher == null || errorTypeMatcher.match(error.getErrorType())\n+        || acceptsSuppressedErrorType(error.getSuppressedErrors(), event);\n+  }\n+\n+  private boolean acceptsSuppressedErrorType(List<Error> suppressedErrors, CoreEvent coreEvent) {\n+    for (Error suppressedError : suppressedErrors) {\n+      ErrorType suppressedErrorType = suppressedError.getErrorType();\n+      if (errorTypeMatcher.match(suppressedErrorType)) {\n+        logger\n+            .warn(\"{} error handler has matched the following underlying error: {}. Consider a configuration change in order to match the reported error: {}\",\n+                  this, suppressedErrorType, coreEvent.getError().get().getErrorType());", "originalCommit": "a33e09c05ec3d91494754590405d5d02c074c532", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06991b25500144cda68f580f0d64dcc3d0249f82", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\nindex 00a049b4849..fe9fe8a62b7 100644\n--- a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n+++ b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n\n@@ -450,8 +450,8 @@ public abstract class TemplateOnErrorHandler extends AbstractExceptionListener\n       ErrorType suppressedErrorType = suppressedError.getErrorType();\n       if (errorTypeMatcher.match(suppressedErrorType)) {\n         logger\n-            .warn(\"{} error handler has matched the following underlying error: {}. Consider a configuration change in order to match the reported error: {}\",\n-                  this, suppressedErrorType, coreEvent.getError().get().getErrorType());\n+            .warn(\"Error handler '{}' has matched the following underlying error: {}. Consider changing it to match the reported error: {}.\",\n+                  getLocation().getLocation(), suppressedErrorType, coreEvent.getError().get().getErrorType());\n         return true;\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3NzE5OA==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r456077198", "bodyText": "Consider a configuration change in order to match the reported error:  -> Consider changing it to match the reported error:", "author": "elrodro83", "createdAt": "2020-07-16T21:04:50Z", "path": "core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java", "diffHunk": "@@ -437,9 +439,23 @@ public boolean accept(CoreEvent event) {\n     return acceptsAll() || (acceptsErrorType(event) && acceptsExpression(event));\n   }\n \n-\n   private boolean acceptsErrorType(CoreEvent event) {\n-    return errorTypeMatcher == null || errorTypeMatcher.match(event.getError().get().getErrorType());\n+    Error error = event.getError().get();\n+    return errorTypeMatcher == null || errorTypeMatcher.match(error.getErrorType())\n+        || acceptsSuppressedErrorType(error.getSuppressedErrors(), event);\n+  }\n+\n+  private boolean acceptsSuppressedErrorType(List<Error> suppressedErrors, CoreEvent coreEvent) {\n+    for (Error suppressedError : suppressedErrors) {\n+      ErrorType suppressedErrorType = suppressedError.getErrorType();\n+      if (errorTypeMatcher.match(suppressedErrorType)) {\n+        logger\n+            .warn(\"{} error handler has matched the following underlying error: {}. Consider a configuration change in order to match the reported error: {}\",", "originalCommit": "a33e09c05ec3d91494754590405d5d02c074c532", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06991b25500144cda68f580f0d64dcc3d0249f82", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\nindex 00a049b4849..fe9fe8a62b7 100644\n--- a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n+++ b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n\n@@ -450,8 +450,8 @@ public abstract class TemplateOnErrorHandler extends AbstractExceptionListener\n       ErrorType suppressedErrorType = suppressedError.getErrorType();\n       if (errorTypeMatcher.match(suppressedErrorType)) {\n         logger\n-            .warn(\"{} error handler has matched the following underlying error: {}. Consider a configuration change in order to match the reported error: {}\",\n-                  this, suppressedErrorType, coreEvent.getError().get().getErrorType());\n+            .warn(\"Error handler '{}' has matched the following underlying error: {}. Consider changing it to match the reported error: {}.\",\n+                  getLocation().getLocation(), suppressedErrorType, coreEvent.getError().get().getErrorType());\n         return true;\n       }\n     }\n"}}, {"oid": "06991b25500144cda68f580f0d64dcc3d0249f82", "url": "https://github.com/mulesoft/mule/commit/06991b25500144cda68f580f0d64dcc3d0249f82", "message": "MULE-18562: Fixing casting issues", "committedDate": "2020-07-29T14:30:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwMDM5Ng==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r463200396", "bodyText": "this will have to be considered in DataSense tests", "author": "elrodro83", "createdAt": "2020-07-30T18:46:55Z", "path": "core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java", "diffHunk": "@@ -212,17 +262,19 @@ public Error build() {\n     private final ErrorType errorType;\n     private final Message muleMessage;\n     private final List<Error> errors;\n+    private final List<Error> suppressedErrors;", "originalCommit": "23fcc9d8cf3d489a302517e121518cbdc2b8f34d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NDc0Ng==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r465154746", "bodyText": "I'm currently working in the datasense api modifications", "author": "IvanAndresFritzler", "createdAt": "2020-08-04T15:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwMDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "783c764ebcec4cdb5c9f3194d87cc68f921049e0", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java b/core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java\nindex a6082b67d72..f50e459fa74 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/message/ErrorBuilder.java\n\n@@ -274,7 +231,7 @@ public final class ErrorBuilder {\n       this.errorType = errorType;\n       this.muleMessage = errorMessage;\n       this.errors = unmodifiableList(errors);\n-      this.suppressedErrors = unmodifiableList(suppressedErrors);\n+      this.suppressedErrors = suppressedErrors;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwMTA4Nw==", "url": "https://github.com/mulesoft/mule/pull/9046#discussion_r463201087", "bodyText": "make sure this is logged only the firt time, otherwise it may flood the logs", "author": "elrodro83", "createdAt": "2020-07-30T18:48:20Z", "path": "core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java", "diffHunk": "@@ -437,9 +439,29 @@ public boolean accept(CoreEvent event) {\n     return acceptsAll() || (acceptsErrorType(event) && acceptsExpression(event));\n   }\n \n-\n   private boolean acceptsErrorType(CoreEvent event) {\n-    return errorTypeMatcher == null || errorTypeMatcher.match(event.getError().get().getErrorType());\n+    Error error = event.getError().get();\n+    return errorTypeMatcher == null || errorTypeMatcher.match(error.getErrorType())\n+        || matchesSuppressedErrorType(error, event);\n+  }\n+\n+  /**\n+   * Evaluates if the {@link #errorTypeMatcher} matches against any of the provided {@link Error#getSuppressedErrors()} error types.\n+   * @param error {@link Error} that will be evaluated.\n+   * @param coreEvent Event containing the provided error.\n+   * @return True if at least one match is found.\n+   */\n+  private boolean matchesSuppressedErrorType(Error error, CoreEvent coreEvent) {\n+    for (Error suppressedError : error.getSuppressedErrors()) {\n+      ErrorType suppressedErrorType = suppressedError.getErrorType();\n+      if (errorTypeMatcher.match(suppressedErrorType)) {\n+        logger", "originalCommit": "23fcc9d8cf3d489a302517e121518cbdc2b8f34d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "783c764ebcec4cdb5c9f3194d87cc68f921049e0", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\nindex 4744d6afc3d..07dbc4717f0 100644\n--- a/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n+++ b/core/src/main/java/org/mule/runtime/core/privileged/exception/TemplateOnErrorHandler.java\n\n@@ -439,25 +439,16 @@ public abstract class TemplateOnErrorHandler extends AbstractExceptionListener\n     return acceptsAll() || (acceptsErrorType(event) && acceptsExpression(event));\n   }\n \n+\n   private boolean acceptsErrorType(CoreEvent event) {\n     Error error = event.getError().get();\n     return errorTypeMatcher == null || errorTypeMatcher.match(error.getErrorType())\n-        || matchesSuppressedErrorType(error, event);\n+        || acceptsSuppressedErrorType(error.getSuppressedErrors());\n   }\n \n-  /**\n-   * Evaluates if the {@link #errorTypeMatcher} matches against any of the provided {@link Error#getSuppressedErrors()} error types.\n-   * @param error {@link Error} that will be evaluated.\n-   * @param coreEvent Event containing the provided error.\n-   * @return True if at least one match is found.\n-   */\n-  private boolean matchesSuppressedErrorType(Error error, CoreEvent coreEvent) {\n-    for (Error suppressedError : error.getSuppressedErrors()) {\n-      ErrorType suppressedErrorType = suppressedError.getErrorType();\n-      if (errorTypeMatcher.match(suppressedErrorType)) {\n-        logger\n-            .warn(\"Error handler '{}' has matched the following underlying error: {}. Consider changing it to match the reported error: {}.\",\n-                  getLocation().getLocation(), suppressedErrorType, coreEvent.getError().get().getErrorType());\n+  private boolean acceptsSuppressedErrorType(List<Error> suppressedErrors) {\n+    for (Error suppressedError : suppressedErrors) {\n+      if (errorTypeMatcher.match(suppressedError.getErrorType())) {\n         return true;\n       }\n     }\n"}}, {"oid": "783c764ebcec4cdb5c9f3194d87cc68f921049e0", "url": "https://github.com/mulesoft/mule/commit/783c764ebcec4cdb5c9f3194d87cc68f921049e0", "message": "MULE-18562: Extending the Error interface and the TemplateOnErrorHandler in order to catch suppressions", "committedDate": "2020-07-31T14:47:08Z", "type": "commit"}, {"oid": "a3021bcff817a893d299d51cdae4092122bc618d", "url": "https://github.com/mulesoft/mule/commit/a3021bcff817a893d299d51cdae4092122bc618d", "message": "MULE-18562: Unused import", "committedDate": "2020-07-31T14:47:08Z", "type": "commit"}, {"oid": "0d63c2f119e6ab82a09786e8e7fa889a7a263207", "url": "https://github.com/mulesoft/mule/commit/0d63c2f119e6ab82a09786e8e7fa889a7a263207", "message": "MULE-18562: ErrorBuilder needs to consider SuppressedMuleExceptions", "committedDate": "2020-07-31T14:47:08Z", "type": "commit"}, {"oid": "3ecb583f77919cb49dc638217c12364a5fd29dbd", "url": "https://github.com/mulesoft/mule/commit/3ecb583f77919cb49dc638217c12364a5fd29dbd", "message": "MULE-18562: Test coverage", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "8a906ed13092cc2fc1e526cecc374031306fb542", "url": "https://github.com/mulesoft/mule/commit/8a906ed13092cc2fc1e526cecc374031306fb542", "message": "MULE-18562: Code coverage", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "2b7e282f4f98e63dcf33fff028d7779f6f793007", "url": "https://github.com/mulesoft/mule/commit/2b7e282f4f98e63dcf33fff028d7779f6f793007", "message": "MULE-18562: Self review changes", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "8728ded134ae82d1a3c31912b7036f7fdd120ed9", "url": "https://github.com/mulesoft/mule/commit/8728ded134ae82d1a3c31912b7036f7fdd120ed9", "message": "MULE-18662: Test coverage", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "1b9ef22a249dbe0111a134cd6d009ab8ba6d8f13", "url": "https://github.com/mulesoft/mule/commit/1b9ef22a249dbe0111a134cd6d009ab8ba6d8f13", "message": "MULE-18562: Self review changes", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "bb6be418aa509d318bd493405774728765e728e9", "url": "https://github.com/mulesoft/mule/commit/bb6be418aa509d318bd493405774728765e728e9", "message": "MULE-18562: Code review changes", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "0a7392dbbe2c6210f3dde260f94930d683a600bf", "url": "https://github.com/mulesoft/mule/commit/0a7392dbbe2c6210f3dde260f94930d683a600bf", "message": "MULE-18562: Typo in log message", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "dfdcd45730b969411358b36ce48f7b883cf130d1", "url": "https://github.com/mulesoft/mule/commit/dfdcd45730b969411358b36ce48f7b883cf130d1", "message": "MULE0-18562: Code review changes", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "9d96df00768460d5018fac55df2bb7c7731234d1", "url": "https://github.com/mulesoft/mule/commit/9d96df00768460d5018fac55df2bb7c7731234d1", "message": "MULE-18562: Code review changes", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "17bae6a8991fce45d58d69363a61ac7f6d9f4365", "url": "https://github.com/mulesoft/mule/commit/17bae6a8991fce45d58d69363a61ac7f6d9f4365", "message": "MULE-18562: Backward compatibility changes", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "26b6b48a3b6b9c2245f04556d4c887c84cc725b1", "url": "https://github.com/mulesoft/mule/commit/26b6b48a3b6b9c2245f04556d4c887c84cc725b1", "message": "MULE-18562: Fixing casting issues", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "38dae12ccee2459e7e892d1d3013e2f56880e726", "url": "https://github.com/mulesoft/mule/commit/38dae12ccee2459e7e892d1d3013e2f56880e726", "message": "Backward compatibility changes and tests", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "a385ed21ad8108540d561929329e0c68956efdac", "url": "https://github.com/mulesoft/mule/commit/a385ed21ad8108540d561929329e0c68956efdac", "message": "MULE-18562: Typo fix", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "ab7ca64903729d1c3536938211550d35143535eb", "url": "https://github.com/mulesoft/mule/commit/ab7ca64903729d1c3536938211550d35143535eb", "message": "MULE-18562: Code review changes", "committedDate": "2020-07-31T14:47:09Z", "type": "commit"}, {"oid": "debd06f0535fa22ef4f086e7d2f731980b9c0ce6", "url": "https://github.com/mulesoft/mule/commit/debd06f0535fa22ef4f086e7d2f731980b9c0ce6", "message": "MULE-18562: Code review changes", "committedDate": "2020-08-03T20:02:16Z", "type": "commit"}, {"oid": "debd06f0535fa22ef4f086e7d2f731980b9c0ce6", "url": "https://github.com/mulesoft/mule/commit/debd06f0535fa22ef4f086e7d2f731980b9c0ce6", "message": "MULE-18562: Code review changes", "committedDate": "2020-08-03T20:02:16Z", "type": "forcePushed"}, {"oid": "e5b307287be04f8ddb7e54a844955d606c00a2f2", "url": "https://github.com/mulesoft/mule/commit/e5b307287be04f8ddb7e54a844955d606c00a2f2", "message": "MULE-18562: Code review changes", "committedDate": "2020-08-04T01:02:16Z", "type": "commit"}, {"oid": "fffa08f44108433941ef34df9464d89b1c8a7cd7", "url": "https://github.com/mulesoft/mule/commit/fffa08f44108433941ef34df9464d89b1c8a7cd7", "message": "MULE-18562: Code review changes", "committedDate": "2020-08-04T01:06:30Z", "type": "commit"}, {"oid": "f8f9ab64c9a2438863cd7eeb6c41d8b82053db74", "url": "https://github.com/mulesoft/mule/commit/f8f9ab64c9a2438863cd7eeb6c41d8b82053db74", "message": "MULE-18562: Code review changes", "committedDate": "2020-08-04T12:30:58Z", "type": "commit"}, {"oid": "668cd154c8685696d1ff21f10d730bc720f755a3", "url": "https://github.com/mulesoft/mule/commit/668cd154c8685696d1ff21f10d730bc720f755a3", "message": "MULE-18562: Moving getSuppressedErrors method outside Error", "committedDate": "2020-08-10T12:24:07Z", "type": "commit"}, {"oid": "4503008c4d50f7b2ece4e5de75d558480e2ac137", "url": "https://github.com/mulesoft/mule/commit/4503008c4d50f7b2ece4e5de75d558480e2ac137", "message": "MULE-18562: Javadoc", "committedDate": "2020-08-10T12:42:29Z", "type": "commit"}, {"oid": "ef8c0ee2a0b771b3492281fdf3a9f23f636d56f4", "url": "https://github.com/mulesoft/mule/commit/ef8c0ee2a0b771b3492281fdf3a9f23f636d56f4", "message": "MULE-18562: Test fixes", "committedDate": "2020-08-10T16:16:07Z", "type": "commit"}, {"oid": "9a16625281c1d65821f98cc77dc03402086aa507", "url": "https://github.com/mulesoft/mule/commit/9a16625281c1d65821f98cc77dc03402086aa507", "message": "MULE-18562: Code review changes", "committedDate": "2020-08-10T20:12:12Z", "type": "commit"}, {"oid": "492348b70e8eca54746a9c2ae13724df0235e821", "url": "https://github.com/mulesoft/mule/commit/492348b70e8eca54746a9c2ae13724df0235e821", "message": "MULE-18562: Test fixes", "committedDate": "2020-08-12T20:28:14Z", "type": "commit"}, {"oid": "e92ce2f2251da84f76a68efb934d24f82b740063", "url": "https://github.com/mulesoft/mule/commit/e92ce2f2251da84f76a68efb934d24f82b740063", "message": "MULE-18562: Static import", "committedDate": "2020-08-12T20:30:39Z", "type": "commit"}]}