{"pr_number": 9737, "pr_title": "MULE-18984: Dynamic Configurations are not expired until the flow ends.", "pr_createdAt": "2020-11-16T21:34:37Z", "pr_url": "https://github.com/mulesoft/mule/pull/9737", "timeline": [{"oid": "999f706391b56279e3d45536ef51010e473f0030", "url": "https://github.com/mulesoft/mule/commit/999f706391b56279e3d45536ef51010e473f0030", "message": "test", "committedDate": "2020-11-13T12:14:02Z", "type": "commit"}, {"oid": "b9b1437e7ea3ab00f2fe1f57affe3eaeff873f0d", "url": "https://github.com/mulesoft/mule/commit/b9b1437e7ea3ab00f2fe1f57affe3eaeff873f0d", "message": "fix", "committedDate": "2020-11-16T21:27:53Z", "type": "commit"}, {"oid": "a41b1a1102ce8de85c458bbcce2214a0642e2014", "url": "https://github.com/mulesoft/mule/commit/a41b1a1102ce8de85c458bbcce2214a0642e2014", "message": "models", "committedDate": "2020-11-16T21:32:35Z", "type": "commit"}, {"oid": "90f0d50a24ae582f15553f5cf1584eb244d1d61e", "url": "https://github.com/mulesoft/mule/commit/90f0d50a24ae582f15553f5cf1584eb244d1d61e", "message": "on error test case", "committedDate": "2020-11-17T13:50:43Z", "type": "commit"}, {"oid": "d1e684672707d452d0f9da6aa8b5ee646dad94d2", "url": "https://github.com/mulesoft/mule/commit/d1e684672707d452d0f9da6aa8b5ee646dad94d2", "message": "fix test", "committedDate": "2020-11-17T16:49:11Z", "type": "commit"}, {"oid": "fb845a8735f57161734b6207d732a00b3f645005", "url": "https://github.com/mulesoft/mule/commit/fb845a8735f57161734b6207d732a00b3f645005", "message": "cleanup", "committedDate": "2020-11-18T13:11:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4ODEzMw==", "url": "https://github.com/mulesoft/mule/pull/9737#discussion_r527088133", "bodyText": "do this on the tearDown() as well, so that you're sure you're not accidentally leaking any classloaders or something like that", "author": "marianogonzalez", "createdAt": "2020-11-19T17:58:44Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java", "diffHunk": "@@ -33,6 +43,29 @@ protected String getConfigFile() {\n     return \"dynamic-config-expiration.xml\";\n   }\n \n+  private static List<Integer> disposedStatuses;\n+  private static HeisenbergExtension config;\n+\n+  public static class CaptureProcessor implements Processor {\n+\n+    @Override\n+    public CoreEvent process(CoreEvent event) throws MuleException {\n+      synchronized (disposedStatuses) {\n+        if (config == null) {\n+          config = (HeisenbergExtension) event.getMessage().getPayload().getValue();\n+        }\n+        disposedStatuses.add(config.getDispose());\n+      }\n+      return event;\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    disposedStatuses = new ArrayList<>();\n+    config = null;", "originalCommit": "fb845a8735f57161734b6207d732a00b3f645005", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ac836ab90bd3b0e1469094dc19ece5f09a71f7", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\nindex af9200a06cf..3168cbebfcd 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\n\n@@ -66,6 +66,13 @@ public class DynamicConfigExpirationTestCase extends AbstractExtensionFunctional\n     config = null;\n   }\n \n+  @Override\n+  protected void doTearDown() throws Exception {\n+    disposedStatuses = new ArrayList<>();\n+    config = null;\n+    super.doTearDown();\n+  }\n+\n   @Test\n   public void expireDynamicConfig() throws Exception {\n     HeisenbergExtension config = invokeDynamicConfig(\"dynamic\", \"heisenberg\", \"Walt\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4ODU3Nw==", "url": "https://github.com/mulesoft/mule/pull/9737#discussion_r527088577", "bodyText": "=", "author": "marianogonzalez", "createdAt": "2020-11-19T17:59:23Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java", "diffHunk": "@@ -85,6 +118,28 @@ public void expirationWorksAfterRestartingSource() throws Exception {\n     doNotExpireDynamicConfigWithCustomExpirationUsedBySource();\n   }\n \n+  @Test\n+  public void dynamicConfigIsExpiredBeforeFlowEnds() throws Exception {\n+    flowRunner(\"dynamicConfigIsExpiredBeforeFlowEnds\").withPayload(\"Walter Blanco\").run();\n+    check(PROBER_TIMEOUT, POLLING_FREQUENCY, () -> {\n+      synchronized (disposedStatuses) {\n+        return disposedStatuses.size() == 2;", "originalCommit": "fb845a8735f57161734b6207d732a00b3f645005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NDUxNQ==", "url": "https://github.com/mulesoft/mule/pull/9737#discussion_r527674515", "bodyText": "What do you mean? Can you elaborate?", "author": "SebaElizalde", "createdAt": "2020-11-20T12:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4ODU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4NDI2MA==", "url": "https://github.com/mulesoft/mule/pull/9737#discussion_r527684260", "bodyText": "the condition should be >= but asciidoc attacked", "author": "marianogonzalez", "createdAt": "2020-11-20T13:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4ODU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b5ac836ab90bd3b0e1469094dc19ece5f09a71f7", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\nindex af9200a06cf..3168cbebfcd 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\n\n@@ -121,23 +128,13 @@ public class DynamicConfigExpirationTestCase extends AbstractExtensionFunctional\n   @Test\n   public void dynamicConfigIsExpiredBeforeFlowEnds() throws Exception {\n     flowRunner(\"dynamicConfigIsExpiredBeforeFlowEnds\").withPayload(\"Walter Blanco\").run();\n-    check(PROBER_TIMEOUT, POLLING_FREQUENCY, () -> {\n-      synchronized (disposedStatuses) {\n-        return disposedStatuses.size() == 2;\n-      }\n-    });\n-    assertThat(disposedStatuses, contains(0, 1));\n+    assertDisposedStatuses();\n   }\n \n   @Test\n   public void dynamicConfigIsExpiredBeforeFlowEndsWhenOperationFails() throws Exception {\n     flowRunner(\"dynamicConfigIsExpiredBeforeFlowEndsWhenOperationFails\").run();\n-    check(PROBER_TIMEOUT, POLLING_FREQUENCY, () -> {\n-      synchronized (disposedStatuses) {\n-        return disposedStatuses.size() == 2;\n-      }\n-    });\n-    assertThat(disposedStatuses, contains(0, 1));\n+    assertDisposedStatuses();\n   }\n \n   private void assertInitialised(HeisenbergExtension config) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4ODY5MQ==", "url": "https://github.com/mulesoft/mule/pull/9737#discussion_r527088691", "bodyText": "repeated code. reuse", "author": "marianogonzalez", "createdAt": "2020-11-19T17:59:33Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java", "diffHunk": "@@ -85,6 +118,28 @@ public void expirationWorksAfterRestartingSource() throws Exception {\n     doNotExpireDynamicConfigWithCustomExpirationUsedBySource();\n   }\n \n+  @Test\n+  public void dynamicConfigIsExpiredBeforeFlowEnds() throws Exception {\n+    flowRunner(\"dynamicConfigIsExpiredBeforeFlowEnds\").withPayload(\"Walter Blanco\").run();\n+    check(PROBER_TIMEOUT, POLLING_FREQUENCY, () -> {\n+      synchronized (disposedStatuses) {\n+        return disposedStatuses.size() == 2;\n+      }\n+    });\n+    assertThat(disposedStatuses, contains(0, 1));\n+  }\n+\n+  @Test\n+  public void dynamicConfigIsExpiredBeforeFlowEndsWhenOperationFails() throws Exception {\n+    flowRunner(\"dynamicConfigIsExpiredBeforeFlowEndsWhenOperationFails\").run();", "originalCommit": "fb845a8735f57161734b6207d732a00b3f645005", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ac836ab90bd3b0e1469094dc19ece5f09a71f7", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\nindex af9200a06cf..3168cbebfcd 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\n\n@@ -121,23 +128,13 @@ public class DynamicConfigExpirationTestCase extends AbstractExtensionFunctional\n   @Test\n   public void dynamicConfigIsExpiredBeforeFlowEnds() throws Exception {\n     flowRunner(\"dynamicConfigIsExpiredBeforeFlowEnds\").withPayload(\"Walter Blanco\").run();\n-    check(PROBER_TIMEOUT, POLLING_FREQUENCY, () -> {\n-      synchronized (disposedStatuses) {\n-        return disposedStatuses.size() == 2;\n-      }\n-    });\n-    assertThat(disposedStatuses, contains(0, 1));\n+    assertDisposedStatuses();\n   }\n \n   @Test\n   public void dynamicConfigIsExpiredBeforeFlowEndsWhenOperationFails() throws Exception {\n     flowRunner(\"dynamicConfigIsExpiredBeforeFlowEndsWhenOperationFails\").run();\n-    check(PROBER_TIMEOUT, POLLING_FREQUENCY, () -> {\n-      synchronized (disposedStatuses) {\n-        return disposedStatuses.size() == 2;\n-      }\n-    });\n-    assertThat(disposedStatuses, contains(0, 1));\n+    assertDisposedStatuses();\n   }\n \n   private void assertInitialised(HeisenbergExtension config) {\n"}}, {"oid": "b5ac836ab90bd3b0e1469094dc19ece5f09a71f7", "url": "https://github.com/mulesoft/mule/commit/b5ac836ab90bd3b0e1469094dc19ece5f09a71f7", "message": "pr review", "committedDate": "2020-11-20T13:25:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY5MTM2OA==", "url": "https://github.com/mulesoft/mule/pull/9737#discussion_r527691368", "bodyText": "null", "author": "marianogonzalez", "createdAt": "2020-11-20T13:30:51Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java", "diffHunk": "@@ -66,6 +66,13 @@ public void setUp() {\n     config = null;\n   }\n \n+  @Override\n+  protected void doTearDown() throws Exception {\n+    disposedStatuses = new ArrayList<>();", "originalCommit": "b5ac836ab90bd3b0e1469094dc19ece5f09a71f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a9546acab0e512964a9d8b4c78ecbb4f155176f", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\nindex 3168cbebfcd..0c67484697b 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/DynamicConfigExpirationTestCase.java\n\n@@ -68,7 +68,7 @@ public class DynamicConfigExpirationTestCase extends AbstractExtensionFunctional\n \n   @Override\n   protected void doTearDown() throws Exception {\n-    disposedStatuses = new ArrayList<>();\n+    disposedStatuses = null;\n     config = null;\n     super.doTearDown();\n   }\n"}}, {"oid": "6a9546acab0e512964a9d8b4c78ecbb4f155176f", "url": "https://github.com/mulesoft/mule/commit/6a9546acab0e512964a9d8b4c78ecbb4f155176f", "message": "review 2", "committedDate": "2020-11-20T13:31:23Z", "type": "commit"}]}