{"pr_number": 9531, "pr_title": "CMTS-98: DeclarationSession is not failing when parameter values for \u2026", "pr_createdAt": "2020-10-08T20:09:54Z", "pr_url": "https://github.com/mulesoft/mule/pull/9531", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA4Nzc4MA==", "url": "https://github.com/mulesoft/mule/pull/9531#discussion_r502087780", "bodyText": "I just realized that I should first check if the parameterModel.isSupportExpression() == true before checking the String content.", "author": "gsfernandes", "createdAt": "2020-10-09T00:06:51Z", "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/AbstractParameterResolverExecutor.java", "diffHunk": "@@ -87,9 +93,13 @@ protected ParameterValueResolver parameterValueResolver(ParameterizedElementDecl\n         final ParameterModel parameterModel = parameterGroupModel.getParameter(parameterName)\n             .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find parameter with name: '%s' in parameter group: '%s'\",\n                                                                             parameterName, parameterGroupName)));\n-        parametersMap.put(parameterName,\n-                          extractValue(parameterElement.getValue(),\n-                                       artifactHelper.getParameterClass(parameterModel, parameterizedElementDeclaration)));\n+        Object value = extractValue(parameterElement.getValue(),\n+                                    artifactHelper.getParameterClass(parameterModel, parameterizedElementDeclaration));\n+        if (isExpression(value)) {", "originalCommit": "e4ea9a1ad10b73de737c77676b16e93a48131741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d96b9849c61499c9a05837b1785fe6072a45c74", "chunk": "diff --git a/modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/AbstractParameterResolverExecutor.java b/modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/AbstractParameterResolverExecutor.java\nindex 7f977c85273..a3eb62a3477 100644\n--- a/modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/AbstractParameterResolverExecutor.java\n+++ b/modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/AbstractParameterResolverExecutor.java\n\n@@ -95,7 +96,7 @@ public class AbstractParameterResolverExecutor {\n                                                                             parameterName, parameterGroupName)));\n         Object value = extractValue(parameterElement.getValue(),\n                                     artifactHelper.getParameterClass(parameterModel, parameterizedElementDeclaration));\n-        if (isExpression(value)) {\n+        if (!parameterModel.getExpressionSupport().equals(NOT_SUPPORTED) && isExpression(value)) {\n           throw new ExpressionNotSupportedException(format(\"Error resolving value for parameter: '%s' from declaration, it cannot be an EXPRESSION value\",\n                                                            parameterName));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA4Nzg0MA==", "url": "https://github.com/mulesoft/mule/pull/9531#discussion_r502087840", "bodyText": "Same here. I just realized that I should first check if the parameterModel.isSupportExpression() == true before checking the String content.", "author": "gsfernandes", "createdAt": "2020-10-09T00:07:02Z", "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java", "diffHunk": "@@ -150,7 +152,12 @@ public MetadataKeyResult resolveKeyResult() {\n             .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find parameter with name: %s in parameter group: %s\",\n                                                                             parameterName, parameterGroupName)));\n         if (parameterModel.getModelProperty(MetadataKeyPartModelProperty.class).isPresent()) {\n-          parametersMap.put(parameterName, extractSimpleValue(parameterElement.getValue()));\n+          String value = extractSimpleValue(parameterElement.getValue());\n+          if (isExpression(value)) {", "originalCommit": "e4ea9a1ad10b73de737c77676b16e93a48131741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d96b9849c61499c9a05837b1785fe6072a45c74", "chunk": "diff --git a/modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java b/modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java\nindex d7b0c613c73..6dcb3a98570 100644\n--- a/modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java\n+++ b/modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java\n\n@@ -153,7 +154,7 @@ public class MetadataKeyDeclarationResolver {\n                                                                             parameterName, parameterGroupName)));\n         if (parameterModel.getModelProperty(MetadataKeyPartModelProperty.class).isPresent()) {\n           String value = extractSimpleValue(parameterElement.getValue());\n-          if (isExpression(value)) {\n+          if (!parameterModel.getExpressionSupport().equals(NOT_SUPPORTED) && isExpression(value)) {\n             throw new ExpressionNotSupportedException(format(\"Error resolving value for parameter: '%s' from declaration, it cannot be an EXPRESSION value\",\n                                                              parameterName));\n           }\n"}}, {"oid": "7d96b9849c61499c9a05837b1785fe6072a45c74", "url": "https://github.com/mulesoft/mule/commit/7d96b9849c61499c9a05837b1785fe6072a45c74", "message": "self review", "committedDate": "2020-10-14T20:33:00Z", "type": "forcePushed"}, {"oid": "3526388c596152246d89aaba5a000a03de70b6aa", "url": "https://github.com/mulesoft/mule/commit/3526388c596152246d89aaba5a000a03de70b6aa", "message": "CMTS-98: DeclarationSession is not failing when parameter values for values/metadata/sampleData have an expression", "committedDate": "2020-10-19T17:31:57Z", "type": "commit"}, {"oid": "d808a82d7f501b375b51ecf2720f862a78b24612", "url": "https://github.com/mulesoft/mule/commit/d808a82d7f501b375b51ecf2720f862a78b24612", "message": "self review", "committedDate": "2020-10-19T17:31:57Z", "type": "commit"}, {"oid": "d808a82d7f501b375b51ecf2720f862a78b24612", "url": "https://github.com/mulesoft/mule/commit/d808a82d7f501b375b51ecf2720f862a78b24612", "message": "self review", "committedDate": "2020-10-19T17:31:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5ODYyMw==", "url": "https://github.com/mulesoft/mule/pull/9531#discussion_r509098623", "bodyText": "Even if the parameterModel supportExpressions. Shouldn't we fail? I mean, we won't be able to process them anyways.", "author": "lucianoRM", "createdAt": "2020-10-21T08:44:10Z", "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/AbstractParameterResolverExecutor.java", "diffHunk": "@@ -87,9 +94,13 @@ protected ParameterValueResolver parameterValueResolver(ParameterizedElementDecl\n         final ParameterModel parameterModel = parameterGroupModel.getParameter(parameterName)\n             .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find parameter with name: '%s' in parameter group: '%s'\",\n                                                                             parameterName, parameterGroupName)));\n-        parametersMap.put(parameterName,\n-                          extractValue(parameterElement.getValue(),\n-                                       artifactHelper.getParameterClass(parameterModel, parameterizedElementDeclaration)));\n+        Object value = extractValue(parameterElement.getValue(),\n+                                    artifactHelper.getParameterClass(parameterModel, parameterizedElementDeclaration));\n+        if (!parameterModel.getExpressionSupport().equals(NOT_SUPPORTED) && isExpression(value)) {", "originalCommit": "d808a82d7f501b375b51ecf2720f862a78b24612", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMDAxMQ==", "url": "https://github.com/mulesoft/mule/pull/9531#discussion_r509330011", "bodyText": "Well, in that case the \"value\" is handled as String and it is up to the resolver to handle it. I added this in order to prevent doing the parsing of the String for each parameter as it has impact in performance.", "author": "gsfernandes", "createdAt": "2020-10-21T14:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5ODYyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5ODc2Mw==", "url": "https://github.com/mulesoft/mule/pull/9531#discussion_r509098763", "bodyText": "The same here", "author": "lucianoRM", "createdAt": "2020-10-21T08:44:21Z", "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java", "diffHunk": "@@ -150,7 +153,12 @@ public MetadataKeyResult resolveKeyResult() {\n             .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find parameter with name: %s in parameter group: %s\",\n                                                                             parameterName, parameterGroupName)));\n         if (parameterModel.getModelProperty(MetadataKeyPartModelProperty.class).isPresent()) {\n-          parametersMap.put(parameterName, extractSimpleValue(parameterElement.getValue()));\n+          String value = extractSimpleValue(parameterElement.getValue());\n+          if (!parameterModel.getExpressionSupport().equals(NOT_SUPPORTED) && isExpression(value)) {", "originalCommit": "d808a82d7f501b375b51ecf2720f862a78b24612", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}