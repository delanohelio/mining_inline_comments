{"pr_number": 8739, "pr_title": "MULE-18189: Race condition on sdk operations in scatter-gather routes", "pr_createdAt": "2020-03-16T21:12:32Z", "pr_url": "https://github.com/mulesoft/mule/pull/8739", "timeline": [{"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "url": "https://github.com/mulesoft/mule/commit/4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "message": "MULE-18189: Race condition on sdk operations in scatter-gather routes", "committedDate": "2020-03-16T21:11:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNTM1Mg==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393315352", "bodyText": "IIRC, getLocation() was kind of expensive. Since already invoked in line 390, I would extract to a variable", "author": "marianogonzalez", "createdAt": "2020-03-16T21:17:00Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -378,20 +378,20 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration();\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult();\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);\n \n         fluxSupplier.get().next(operationEvent);\n       };\n \n       if (getLocation() != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .setCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply().process(event, operationExecutionFunction, () -> resolutionResult, getLocation(),\n-                                                      executorCallback);\n+        sdkInternalContext.getPolicyToApply(getLocation())", "originalCommit": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNzQyMw==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393317423", "bodyText": "was, it is now cached since some weeks ago", "author": "elrodro83", "createdAt": "2020-03-16T21:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNTM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2ca9bab3dc488df807a3f07db67fb7b46bfdb766", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex b0fa119c78a..b00764e7b89 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -377,21 +378,22 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n   private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n+      final ComponentLocation location = getLocation();\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(location);\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(location);\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(location, configuration, parameters, operationEvent, callback);\n \n         fluxSupplier.get().next(operationEvent);\n       };\n \n-      if (getLocation() != null) {\n+      if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .setCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(getLocation())\n-            .process(event, operationExecutionFunction, () -> resolutionResult, getLocation(), executorCallback);\n+        sdkInternalContext.getPolicyToApply(location)\n+            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n       } else {\n         // If this operation has no component location then it is internal. Don't apply policies on internal operations.\n         operationExecutionFunction.execute(resolutionResult, event, executorCallback);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNTQ5MA==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393315490", "bodyText": "what if not present? Is NPE completely impossible here?", "author": "marianogonzalez", "createdAt": "2020-03-16T21:17:19Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -378,20 +378,20 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration();\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult();\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);\n \n         fluxSupplier.get().next(operationEvent);\n       };\n \n       if (getLocation() != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .setCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply().process(event, operationExecutionFunction, () -> resolutionResult, getLocation(),\n-                                                      executorCallback);\n+        sdkInternalContext.getPolicyToApply(getLocation())\n+            .process(event, operationExecutionFunction, () -> resolutionResult, getLocation(), executorCallback);", "originalCommit": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ca9bab3dc488df807a3f07db67fb7b46bfdb766", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex b0fa119c78a..b00764e7b89 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -377,21 +378,22 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n   private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n+      final ComponentLocation location = getLocation();\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(location);\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(location);\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(location, configuration, parameters, operationEvent, callback);\n \n         fluxSupplier.get().next(operationEvent);\n       };\n \n-      if (getLocation() != null) {\n+      if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .setCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(getLocation())\n-            .process(event, operationExecutionFunction, () -> resolutionResult, getLocation(), executorCallback);\n+        sdkInternalContext.getPolicyToApply(location)\n+            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n       } else {\n         // If this operation has no component location then it is internal. Don't apply policies on internal operations.\n         operationExecutionFunction.execute(resolutionResult, event, executorCallback);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNjEwMg==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393316102", "bodyText": "are you sure that ComponentLocatin#equals() is fast enough for SmallMap ?", "author": "marianogonzalez", "createdAt": "2020-03-16T21:18:46Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "diffHunk": "@@ -46,62 +46,63 @@ public static SdkInternalContext from(CoreEvent event) {\n    * SDK components may be nested within each other, so some of the context must be kept separately for the component it belongs\n    * to.\n    */\n-  private final Deque<LocationSpecificSdkInternalContext> locationSpecificContext = new ArrayDeque<>();\n+  private final Map<ComponentLocation, LocationSpecificSdkInternalContext> locationSpecificContext = new SmallMap<>();", "originalCommit": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxODI1MA==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393318250", "bodyText": "it does equals on String, which is cheaper that calculating all of its hashes", "author": "elrodro83", "createdAt": "2020-03-16T21:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNjEwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNjQyNg==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393316426", "bodyText": "same thing about getLocation(), here and in all the other occurrences below", "author": "marianogonzalez", "createdAt": "2020-03-16T21:19:32Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -405,11 +405,11 @@ private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallba\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration();\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult();\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);", "originalCommit": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ca9bab3dc488df807a3f07db67fb7b46bfdb766", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\nindex b0fa119c78a..b00764e7b89 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java\n\n@@ -404,12 +406,13 @@ public abstract class ComponentMessageProcessor<T extends ComponentModel> extend\n   private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallback, Context ctx) {\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n+      final ComponentLocation location = getLocation();\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(location);\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(location);\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(location, configuration, parameters, operationEvent, callback);\n \n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNzA1OQ==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393317059", "bodyText": "does this really reproduces the case you want to test? You are after all calling this is a pretty synchronous manner...", "author": "marianogonzalez", "createdAt": "2020-03-16T21:20:57Z", "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.Matchers.contains;\n+import static org.junit.Assert.assertThat;\n+import static org.mule.runtime.dsl.api.component.config.DefaultComponentLocation.fromSingleComponent;\n+\n+import org.mule.runtime.api.component.location.ComponentLocation;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor.ExecutorCallback;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import io.qameta.allure.Description;\n+import io.qameta.allure.Issue;\n+\n+public class SdkInternalContextTestCase extends AbstractMuleTestCase {\n+\n+  @Test\n+  @Issue(\"MULE-18189\")\n+  @Description(\"scatter-gather sends tha same event to different routes. In that case, the relationship of what context belongs to the operation on what route must be kept.\")\n+  public void contextSharedOnParallelRoutes() throws MuleException {\n+\n+    final SdkInternalContext ctx = new SdkInternalContext();\n+\n+    final ComponentLocation comp1 = fromSingleComponent(\"comp1\");\n+    final ComponentLocation comp2 = fromSingleComponent(\"comp2\");\n+\n+    final List<ComponentLocation> completedForComponents = new ArrayList<>();\n+\n+    pushContext(ctx, comp1, completedForComponents);\n+    pushContext(ctx, comp2, completedForComponents);\n+\n+    ctx.getOperationExecutionParams(comp1).getCallback().complete(comp1);", "originalCommit": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxOTM0MA==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393319340", "bodyText": "with the api change in the SdkInternalContext i am forcing the caller to avoid the issue. If i weren't passing the location in this test, then yes, it would reproduce the issue.", "author": "elrodro83", "createdAt": "2020-03-16T21:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNzA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c4a7d500fb38cb4c5252dd8e9090aeb74e13acb", "chunk": "diff --git a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java\nindex 434f419db7b..79184221784 100644\n--- a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java\n+++ b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java\n\n@@ -32,7 +32,6 @@ public class SdkInternalContextTestCase extends AbstractMuleTestCase {\n   @Issue(\"MULE-18189\")\n   @Description(\"scatter-gather sends tha same event to different routes. In that case, the relationship of what context belongs to the operation on what route must be kept.\")\n   public void contextSharedOnParallelRoutes() throws MuleException {\n-\n     final SdkInternalContext ctx = new SdkInternalContext();\n \n     final ComponentLocation comp1 = fromSingleComponent(\"comp1\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNzEyNQ==", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393317125", "bodyText": "empty line", "author": "marianogonzalez", "createdAt": "2020-03-16T21:21:05Z", "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.Matchers.contains;\n+import static org.junit.Assert.assertThat;\n+import static org.mule.runtime.dsl.api.component.config.DefaultComponentLocation.fromSingleComponent;\n+\n+import org.mule.runtime.api.component.location.ComponentLocation;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor.ExecutorCallback;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import io.qameta.allure.Description;\n+import io.qameta.allure.Issue;\n+\n+public class SdkInternalContextTestCase extends AbstractMuleTestCase {\n+\n+  @Test\n+  @Issue(\"MULE-18189\")\n+  @Description(\"scatter-gather sends tha same event to different routes. In that case, the relationship of what context belongs to the operation on what route must be kept.\")\n+  public void contextSharedOnParallelRoutes() throws MuleException {\n+\n+    final SdkInternalContext ctx = new SdkInternalContext();\n+\n+    final ComponentLocation comp1 = fromSingleComponent(\"comp1\");\n+    final ComponentLocation comp2 = fromSingleComponent(\"comp2\");\n+\n+    final List<ComponentLocation> completedForComponents = new ArrayList<>();\n+\n+    pushContext(ctx, comp1, completedForComponents);\n+    pushContext(ctx, comp2, completedForComponents);\n+\n+    ctx.getOperationExecutionParams(comp1).getCallback().complete(comp1);\n+    ctx.getOperationExecutionParams(comp2).getCallback().complete(comp2);\n+\n+    assertThat(completedForComponents, contains(comp1, comp2));\n+  }\n+\n+  private void pushContext(final SdkInternalContext ctx, final ComponentLocation location,\n+                           final List<ComponentLocation> completedForComponents)\n+      throws MuleException {\n+    ctx.putContext(location);\n+    ctx.setOperationExecutionParams(location, empty(), emptyMap(), testEvent(), new ExecutorCallback() {\n+\n+      @Override\n+      public void complete(Object value) {\n+        completedForComponents.add(location);\n+      }\n+\n+      @Override\n+      public void error(Throwable e) {\n+        throw new MuleRuntimeException(e);\n+      }\n+    });\n+  }\n+", "originalCommit": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c4a7d500fb38cb4c5252dd8e9090aeb74e13acb", "chunk": "diff --git a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java\nindex 434f419db7b..79184221784 100644\n--- a/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java\n+++ b/modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java\n\n@@ -32,7 +32,6 @@ public class SdkInternalContextTestCase extends AbstractMuleTestCase {\n   @Issue(\"MULE-18189\")\n   @Description(\"scatter-gather sends tha same event to different routes. In that case, the relationship of what context belongs to the operation on what route must be kept.\")\n   public void contextSharedOnParallelRoutes() throws MuleException {\n-\n     final SdkInternalContext ctx = new SdkInternalContext();\n \n     final ComponentLocation comp1 = fromSingleComponent(\"comp1\");\n"}}, {"oid": "9c4a7d500fb38cb4c5252dd8e9090aeb74e13acb", "url": "https://github.com/mulesoft/mule/commit/9c4a7d500fb38cb4c5252dd8e9090aeb74e13acb", "message": "review", "committedDate": "2020-03-16T21:26:26Z", "type": "commit"}, {"oid": "2ca9bab3dc488df807a3f07db67fb7b46bfdb766", "url": "https://github.com/mulesoft/mule/commit/2ca9bab3dc488df807a3f07db67fb7b46bfdb766", "message": "more review", "committedDate": "2020-03-16T21:45:32Z", "type": "commit"}, {"oid": "c32a43017eca40c42cbed761ead8bf9a75334425", "url": "https://github.com/mulesoft/mule/commit/c32a43017eca40c42cbed761ead8bf9a75334425", "message": "fix test", "committedDate": "2020-03-16T23:37:24Z", "type": "commit"}]}