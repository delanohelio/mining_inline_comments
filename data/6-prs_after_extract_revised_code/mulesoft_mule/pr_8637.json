{"pr_number": 8637, "pr_title": "Mule 17984: Add test scenarios for OCS extensions", "pr_createdAt": "2020-02-07T14:12:23Z", "pr_url": "https://github.com/mulesoft/mule/pull/8637", "timeline": [{"oid": "4d0529414479f7df0a8d014e36e632d5d9af7111", "url": "https://github.com/mulesoft/mule/commit/4d0529414479f7df0a8d014e36e632d5d9af7111", "message": "more progress", "committedDate": "2020-02-14T16:31:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMjAwMw==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r379632003", "bodyText": "jdoc", "author": "marianogonzalez", "createdAt": "2020-02-14T20:33:24Z", "path": "core/src/main/java/org/mule/runtime/core/internal/connection/ConnectionProviderWrapper.java", "diffHunk": "@@ -23,4 +24,5 @@\n \n   RetryPolicyTemplate getRetryPolicyTemplate();\n \n+  ConnectionManagementType getConnectionManagementType();", "originalCommit": "4d0529414479f7df0a8d014e36e632d5d9af7111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814b7ba97f3f05173475ff0180226387c1918774", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/connection/ConnectionProviderWrapper.java b/core/src/main/java/org/mule/runtime/core/internal/connection/ConnectionProviderWrapper.java\nindex ea3cdfedd98..231aca58813 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/connection/ConnectionProviderWrapper.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/connection/ConnectionProviderWrapper.java\n\n@@ -24,5 +23,4 @@ public interface ConnectionProviderWrapper<C>\n \n   RetryPolicyTemplate getRetryPolicyTemplate();\n \n-  ConnectionManagementType getConnectionManagementType();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzcxMQ==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r379633711", "bodyText": "extract to org.mule.runtime.module.extension.internal.util.MuleExtensionUtils", "author": "marianogonzalez", "createdAt": "2020-02-14T20:37:58Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/ConnectionProviderModelValidator.java", "diffHunk": "@@ -104,6 +105,9 @@ private void validateConfigLevelConnectionTypes(Multimap<ConfigurationModel, Con\n                                                   ProblemsReporter problemsReporter) {\n     configLevelConnectionProviders.asMap().forEach((configModel, providerModels) -> {\n       for (ConnectionProviderModel providerModel : providerModels) {\n+        if (providerModel.getModelProperty(SyntheticModelModelProperty.class).isPresent()) {", "originalCommit": "4d0529414479f7df0a8d014e36e632d5d9af7111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dcc62cb044141dcd0d6bee1405a212c4198c0aa3", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/ConnectionProviderModelValidator.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/ConnectionProviderModelValidator.java\nindex 31fb024fe52..8b2bf21d67d 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/ConnectionProviderModelValidator.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/ConnectionProviderModelValidator.java\n\n@@ -105,7 +106,7 @@ public final class ConnectionProviderModelValidator implements ExtensionModelVal\n                                                   ProblemsReporter problemsReporter) {\n     configLevelConnectionProviders.asMap().forEach((configModel, providerModels) -> {\n       for (ConnectionProviderModel providerModel : providerModels) {\n-        if (providerModel.getModelProperty(SyntheticModelModelProperty.class).isPresent()) {\n+        if (isSynthetic(providerModel)) {\n           continue;\n         }\n         Type connectionType = MuleExtensionUtils.getConnectionType(providerModel);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzkwMg==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r379633902", "bodyText": "move to org.mule.runtime.module.extension.internal.ExtensionProperties", "author": "marianogonzalez", "createdAt": "2020-02-14T20:38:32Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/ConfigurationInstanceFactory.java", "diffHunk": "@@ -40,6 +40,7 @@\n  */\n public final class ConfigurationInstanceFactory<T> {\n \n+  public static final String CONFIGURATION_MODEL_PROPERTY_NAME = \"Configuration model\";", "originalCommit": "4d0529414479f7df0a8d014e36e632d5d9af7111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814b7ba97f3f05173475ff0180226387c1918774", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/ConfigurationInstanceFactory.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/ConfigurationInstanceFactory.java\nindex 87c59df58bd..c1e19e060db 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/ConfigurationInstanceFactory.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/config/ConfigurationInstanceFactory.java\n\n@@ -40,7 +40,6 @@ import java.util.stream.Collectors;\n  */\n public final class ConfigurationInstanceFactory<T> {\n \n-  public static final String CONFIGURATION_MODEL_PROPERTY_NAME = \"Configuration model\";\n   private final ConfigurationModel configurationModel;\n   private final ConfigurationObjectBuilder<T> configurationObjectBuilder;\n   private final boolean requiresConnection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNDUwOA==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r379634508", "bodyText": "pretty sure we already have an utils for this. If we don't, add it to org.mule.runtime.module.extension.internal.util.MuleExtensionUtils", "author": "marianogonzalez", "createdAt": "2020-02-14T20:40:14Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ocs/PlatformManagedOAuthConnectionProvider.java", "diffHunk": "@@ -216,6 +232,10 @@ private void initialiseDelegate() throws MuleException {\n     }, MuleException.class, e -> e);\n   }\n \n+  private Optional<Class> getDelegateProviderType(ConnectionProviderModel delegateConnectionProviderModel) {", "originalCommit": "4d0529414479f7df0a8d014e36e632d5d9af7111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814b7ba97f3f05173475ff0180226387c1918774", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ocs/PlatformManagedOAuthConnectionProvider.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ocs/PlatformManagedOAuthConnectionProvider.java\nindex b90e221607a..b5a32f3f684 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ocs/PlatformManagedOAuthConnectionProvider.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ocs/PlatformManagedOAuthConnectionProvider.java\n\n@@ -232,10 +216,6 @@ public class PlatformManagedOAuthConnectionProvider<C> implements OAuthConnectio\n     }, MuleException.class, e -> e);\n   }\n \n-  private Optional<Class> getDelegateProviderType(ConnectionProviderModel delegateConnectionProviderModel) {\n-    return delegateConnectionProviderModel.getModelProperty(ImplementingTypeModelProperty.class).map(mp -> mp.getType());\n-  }\n-\n   private PlatformManagedConnectionDescriptor fetchConnectionDescriptor() throws MuleException {\n     try {\n       return dancer.getConnectionDescriptor().get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTAxNw==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r379635017", "bodyText": "add jdoc. Don't forget to include @since", "author": "marianogonzalez", "createdAt": "2020-02-14T20:41:34Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java", "diffHunk": "@@ -85,6 +90,10 @@ public void changeEvent(CoreEvent event) {\n     return ofNullable(config);\n   }\n \n+  public Object getProperty(String propertyName) {", "originalCommit": "4d0529414479f7df0a8d014e36e632d5d9af7111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814b7ba97f3f05173475ff0180226387c1918774", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java\nindex 2014dc98758..c3a81612693 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java\n\n@@ -90,10 +85,6 @@ public class ValueResolvingContext implements AutoCloseable {\n     return ofNullable(config);\n   }\n \n-  public Object getProperty(String propertyName) {\n-    return properties.get(propertyName);\n-  }\n-\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNTA4Mw==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r379635083", "bodyText": "jdoc with since", "author": "marianogonzalez", "createdAt": "2020-02-14T20:41:43Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java", "diffHunk": "@@ -145,19 +155,24 @@ public Builder withExpressionManager(ExpressionManager manager) {\n       return this;\n     }\n \n+    public Builder withProperty(String propertyName, Object propertyValue) {", "originalCommit": "4d0529414479f7df0a8d014e36e632d5d9af7111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814b7ba97f3f05173475ff0180226387c1918774", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java\nindex 2014dc98758..c3a81612693 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ValueResolvingContext.java\n\n@@ -155,11 +145,6 @@ public class ValueResolvingContext implements AutoCloseable {\n       return this;\n     }\n \n-    public Builder withProperty(String propertyName, Object propertyValue) {\n-      this.properties.put(propertyName, propertyValue);\n-      return this;\n-    }\n-\n     public Builder resolveCursors(boolean resolveCursors) {\n       this.resolveCursors = resolveCursors;\n       return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxODYzMQ==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r380218631", "bodyText": "missing since", "author": "marianogonzalez", "createdAt": "2020-02-17T14:40:02Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/ExtensionProperties.java", "diffHunk": "@@ -70,5 +70,11 @@\n \n   public static final String DEFAULT_CONNECTION_PROVIDER_NAME = \"connection\";\n \n+  /**\n+   * The name to be used in a property of a {@link ValueResolvingContext} to store the {@link ConfigurationModel} being\n+   * used in that context.\n+   */\n+  public static final String CONFIGURATION_MODEL_PROPERTY_NAME = \"Configuration model\";", "originalCommit": "0828cf185191e0b2c4033d836e04f576181f788e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814b7ba97f3f05173475ff0180226387c1918774", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/ExtensionProperties.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/ExtensionProperties.java\nindex 6db3a5a7e58..b76396c205a 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/ExtensionProperties.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/ExtensionProperties.java\n\n@@ -70,11 +70,5 @@ public class ExtensionProperties {\n \n   public static final String DEFAULT_CONNECTION_PROVIDER_NAME = \"connection\";\n \n-  /**\n-   * The name to be used in a property of a {@link ValueResolvingContext} to store the {@link ConfigurationModel} being\n-   * used in that context.\n-   */\n-  public static final String CONFIGURATION_MODEL_PROPERTY_NAME = \"Configuration model\";\n-\n   private ExtensionProperties() {}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjY5Nw==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r380222697", "bodyText": "This should receive EnrichableModel and should be used not only for Connection providers. Look for usages of ImplementingTypeModelProperty and change it everywhere (boyscout rule)", "author": "marianogonzalez", "createdAt": "2020-02-17T14:47:30Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java", "diffHunk": "@@ -486,4 +488,26 @@ public static boolean isCompileTime(ExtensionModel extensionModel) {\n     return extensionModel.getModelProperty(CompileTimeModelProperty.class).isPresent();\n   }\n \n+  /**\n+   * Indicates whether a give {@link EnrichableModel} is synthetic or not.\n+   *\n+   * @param enrichableModel the enrichable model that may be synthetic\n+   * @return if the enrichable model is synthetic or not\n+   * @since 4.3.0\n+   */\n+  public static boolean isSynthetic(EnrichableModel enrichableModel) {\n+    return enrichableModel.getModelProperty(SyntheticModelModelProperty.class).isPresent();\n+  }\n+\n+  /**\n+   * Tests the given {@code connectionProviderModel} for a {@link ImplementingTypeModelProperty} and if present it\n+   * returns the enclosed implementing type.\n+   *\n+   * @param connectionProviderModel the provider to get the implemented type from\n+   * @return an {@link Optional} that either has the provider implementing type, or is empty\n+   * @since 4.3.0\n+   */\n+  public static Optional<Class> getImplementingType(ConnectionProviderModel connectionProviderModel) {", "originalCommit": "0828cf185191e0b2c4033d836e04f576181f788e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "814b7ba97f3f05173475ff0180226387c1918774", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\nindex a939360cc3e..213f7d74921 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/util/MuleExtensionUtils.java\n\n@@ -488,26 +486,4 @@ public class MuleExtensionUtils {\n     return extensionModel.getModelProperty(CompileTimeModelProperty.class).isPresent();\n   }\n \n-  /**\n-   * Indicates whether a give {@link EnrichableModel} is synthetic or not.\n-   *\n-   * @param enrichableModel the enrichable model that may be synthetic\n-   * @return if the enrichable model is synthetic or not\n-   * @since 4.3.0\n-   */\n-  public static boolean isSynthetic(EnrichableModel enrichableModel) {\n-    return enrichableModel.getModelProperty(SyntheticModelModelProperty.class).isPresent();\n-  }\n-\n-  /**\n-   * Tests the given {@code connectionProviderModel} for a {@link ImplementingTypeModelProperty} and if present it\n-   * returns the enclosed implementing type.\n-   *\n-   * @param connectionProviderModel the provider to get the implemented type from\n-   * @return an {@link Optional} that either has the provider implementing type, or is empty\n-   * @since 4.3.0\n-   */\n-  public static Optional<Class> getImplementingType(ConnectionProviderModel connectionProviderModel) {\n-    return connectionProviderModel.getModelProperty(ImplementingTypeModelProperty.class).map(mp -> mp.getType());\n-  }\n }\n"}}, {"oid": "814b7ba97f3f05173475ff0180226387c1918774", "url": "https://github.com/mulesoft/mule/commit/814b7ba97f3f05173475ff0180226387c1918774", "message": "Progress on testing and fixes", "committedDate": "2020-02-18T22:28:33Z", "type": "commit"}, {"oid": "fba73b2d9495245778932ab1a2a43d3609b9c2a9", "url": "https://github.com/mulesoft/mule/commit/fba73b2d9495245778932ab1a2a43d3609b9c2a9", "message": "progress", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "bb17d0e2d0b56ad842476830a09953495cd7edce", "url": "https://github.com/mulesoft/mule/commit/bb17d0e2d0b56ad842476830a09953495cd7edce", "message": "Progress testing", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "a77af2007f4821ae3356c828164bebb7e6f93b1c", "url": "https://github.com/mulesoft/mule/commit/a77af2007f4821ae3356c828164bebb7e6f93b1c", "message": "testing ocs progress", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "0b38800175f33f98a6e835fa8242665700131c21", "url": "https://github.com/mulesoft/mule/commit/0b38800175f33f98a6e835fa8242665700131c21", "message": "Remove unnecesary imports", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "b6054e2cccff56c3903a56ebed2eb13df2964534", "url": "https://github.com/mulesoft/mule/commit/b6054e2cccff56c3903a56ebed2eb13df2964534", "message": "add constructor", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "4217951990ccf436fcac318ac3cfb6d2e19003dd", "url": "https://github.com/mulesoft/mule/commit/4217951990ccf436fcac318ac3cfb6d2e19003dd", "message": "progress", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "0fb9b7cab06db6ade00daea2aea7c3205a71fa94", "url": "https://github.com/mulesoft/mule/commit/0fb9b7cab06db6ade00daea2aea7c3205a71fa94", "message": "progress", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "6d10c50dab6cc7c38390c2b8d2a063b1dab7b777", "url": "https://github.com/mulesoft/mule/commit/6d10c50dab6cc7c38390c2b8d2a063b1dab7b777", "message": "changes", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "c2906aefaca1dcd50da23b19b3f6345e07a0d357", "url": "https://github.com/mulesoft/mule/commit/c2906aefaca1dcd50da23b19b3f6345e07a0d357", "message": "Throw error when delegate does not have implementing type", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "95b24b7b6ecac0a97a0d61dab1c483b460a06f73", "url": "https://github.com/mulesoft/mule/commit/95b24b7b6ecac0a97a0d61dab1c483b460a06f73", "message": "Add new Configuration to OAuth Test Extension", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "6505f76174d406ff73b2fb0b8f710e0ed5a6a382", "url": "https://github.com/mulesoft/mule/commit/6505f76174d406ff73b2fb0b8f710e0ed5a6a382", "message": "Fix compilation issue", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "5c42bd406cfc4e1e7e0012028d965d71074c933a", "url": "https://github.com/mulesoft/mule/commit/5c42bd406cfc4e1e7e0012028d965d71074c933a", "message": "Adds test operation for testing", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "bc8b4896c03e71050f91f9238190a2e62296b728", "url": "https://github.com/mulesoft/mule/commit/bc8b4896c03e71050f91f9238190a2e62296b728", "message": "Progress", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "1947bb38ca190016da9fb54622694617d991d6ec", "url": "https://github.com/mulesoft/mule/commit/1947bb38ca190016da9fb54622694617d991d6ec", "message": "more progress", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "dcc62cb044141dcd0d6bee1405a212c4198c0aa3", "url": "https://github.com/mulesoft/mule/commit/dcc62cb044141dcd0d6bee1405a212c4198c0aa3", "message": "Adds requested changes", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "94d8fa9429cbbf448a02a26da9709b36113f64ba", "url": "https://github.com/mulesoft/mule/commit/94d8fa9429cbbf448a02a26da9709b36113f64ba", "message": "Adds requested changes", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "69257b3c88a5267488a366f3191027c10785347a", "url": "https://github.com/mulesoft/mule/commit/69257b3c88a5267488a366f3191027c10785347a", "message": "Fix leak in test infrastructure", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "047dc96d6053cb771dbaa5776d989a3ce821123e", "url": "https://github.com/mulesoft/mule/commit/047dc96d6053cb771dbaa5776d989a3ce821123e", "message": "Changes test infrastructure", "committedDate": "2020-02-18T22:28:34Z", "type": "commit"}, {"oid": "047dc96d6053cb771dbaa5776d989a3ce821123e", "url": "https://github.com/mulesoft/mule/commit/047dc96d6053cb771dbaa5776d989a3ce821123e", "message": "Changes test infrastructure", "committedDate": "2020-02-18T22:28:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMjk3NA==", "url": "https://github.com/mulesoft/mule/pull/8637#discussion_r381312974", "bodyText": "rename to reloadableXXX and add a jdoc explaining that this is for {@link #mustRegenerateExtensionModels()} to function", "author": "marianogonzalez", "createdAt": "2020-02-19T14:10:03Z", "path": "tests/functional/src/main/java/org/mule/functional/junit4/ArtifactFunctionalTestCase.java", "diffHunk": "@@ -107,6 +107,7 @@\n   private static ServiceManager serviceRepository;\n   private static ClassLoaderRepository classLoaderRepository;\n   private static IsolatedClassLoaderExtensionsManagerConfigurationBuilder extensionsManagerConfigurationBuilder;\n+  private static IsolatedClassLoaderExtensionsManagerConfigurationBuilder alternativeExtensionsManagerConfigurationBuilder;", "originalCommit": "047dc96d6053cb771dbaa5776d989a3ce821123e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdd3317bdcdd8abb3f3d1d034eb2314993398518", "chunk": "diff --git a/tests/functional/src/main/java/org/mule/functional/junit4/ArtifactFunctionalTestCase.java b/tests/functional/src/main/java/org/mule/functional/junit4/ArtifactFunctionalTestCase.java\nindex 89a2b64a37d..c80c95f4337 100644\n--- a/tests/functional/src/main/java/org/mule/functional/junit4/ArtifactFunctionalTestCase.java\n+++ b/tests/functional/src/main/java/org/mule/functional/junit4/ArtifactFunctionalTestCase.java\n\n@@ -107,11 +107,14 @@ public abstract class ArtifactFunctionalTestCase extends FunctionalTestCase {\n   private static ServiceManager serviceRepository;\n   private static ClassLoaderRepository classLoaderRepository;\n   private static IsolatedClassLoaderExtensionsManagerConfigurationBuilder extensionsManagerConfigurationBuilder;\n-  private static IsolatedClassLoaderExtensionsManagerConfigurationBuilder alternativeExtensionsManagerConfigurationBuilder;\n+  /**\n+   * This is the {@link IsolatedClassLoaderExtensionsManagerConfigurationBuilder} used when there is a need to reload the\n+   * extension models for a specific test class. When {@link #mustRegenerateExtensionModels()} returns true, the extension\n+   * models will be reloaded and this configuration builder will be used.\n+   */\n+  private static IsolatedClassLoaderExtensionsManagerConfigurationBuilder reloadableExtensionsManagerConfigurationBuilder;\n \n   private static TestServicesMuleContextConfigurator serviceConfigurator;\n-  private Once.RunOnce loadExtensions = Once.of(() -> extensionsManagerConfigurationBuilder.loadExtensionModels());\n-\n \n   @BeforeClass\n   public static void configureClassLoaderRepository() {\n"}}, {"oid": "bdd3317bdcdd8abb3f3d1d034eb2314993398518", "url": "https://github.com/mulesoft/mule/commit/bdd3317bdcdd8abb3f3d1d034eb2314993398518", "message": "Adds jdoc to test infrastracture", "committedDate": "2020-02-19T14:47:43Z", "type": "commit"}]}