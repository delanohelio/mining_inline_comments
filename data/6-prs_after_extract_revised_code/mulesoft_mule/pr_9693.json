{"pr_number": 9693, "pr_title": "MULE-18631: Need to be able to set a limit on the number of events to be pushed per poll where N >= 1", "pr_createdAt": "2020-11-10T16:17:12Z", "pr_url": "https://github.com/mulesoft/mule/pull/9693", "timeline": [{"oid": "828ab017b552b1d561a81c10ad9d4e5b5fa5e61c", "url": "https://github.com/mulesoft/mule/commit/828ab017b552b1d561a81c10ad9d4e5b5fa5e61c", "message": "progress", "committedDate": "2020-11-09T12:28:27Z", "type": "commit"}, {"oid": "cffbb8dc3a63df5c2944c527a856a3b016a4caf3", "url": "https://github.com/mulesoft/mule/commit/cffbb8dc3a63df5c2944c527a856a3b016a4caf3", "message": "tests", "committedDate": "2020-11-10T14:43:11Z", "type": "commit"}, {"oid": "301094098e41c715226787cee125d0fcab7ea1c5", "url": "https://github.com/mulesoft/mule/commit/301094098e41c715226787cee125d0fcab7ea1c5", "message": "self review", "committedDate": "2020-11-10T16:08:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NzIzMA==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r520847230", "bodyText": "Is it possible to test that this fails because the limit is not greater than one?", "author": "Bardammu", "createdAt": "2020-11-10T20:15:33Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/NegativePollingSourceLimitingTestCase.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.module.extension.source;\n+\n+import static java.util.Arrays.asList;\n+import static org.mule.runtime.api.util.MuleSystemProperties.ENABLE_SDK_POLLING_SOURCE_LIMIT;\n+\n+import org.junit.ClassRule;\n+import org.junit.runners.Parameterized;\n+\n+import org.mule.tck.junit4.rule.SystemProperty;\n+import org.mule.test.module.extension.InvalidExtensionConfigTestCase;\n+import org.mule.test.runner.RunnerDelegateTo;\n+\n+import java.util.Collection;\n+\n+@RunnerDelegateTo(Parameterized.class)\n+public class NegativePollingSourceLimitingTestCase extends InvalidExtensionConfigTestCase {", "originalCommit": "301094098e41c715226787cee125d0fcab7ea1c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8e82bd8d13c31817fca9e94dfdf6303a052497d", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/NegativePollingSourceLimitingTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/NegativePollingSourceLimitingTestCase.java\nindex a80d15cbdb4..b7a875d7bda 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/NegativePollingSourceLimitingTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/NegativePollingSourceLimitingTestCase.java\n\n@@ -7,9 +7,13 @@\n package org.mule.test.module.extension.source;\n \n import static java.util.Arrays.asList;\n+import static org.mockito.ArgumentMatchers.startsWith;\n+import static org.mule.functional.junit4.matchers.ThrowableCauseMatcher.hasCause;\n+import static org.mule.functional.junit4.matchers.ThrowableMessageMatcher.hasMessage;\n import static org.mule.runtime.api.util.MuleSystemProperties.ENABLE_SDK_POLLING_SOURCE_LIMIT;\n \n import org.junit.ClassRule;\n+import org.junit.rules.ExpectedException;\n import org.junit.runners.Parameterized;\n \n import org.mule.tck.junit4.rule.SystemProperty;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NzMzMQ==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r520847331", "bodyText": "Do you think we should add a Javadoc for this?", "author": "Bardammu", "createdAt": "2020-11-10T20:15:45Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/WatermarkStatus.java", "diffHunk": "@@ -0,0 +1,11 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+public enum WatermarkStatus {", "originalCommit": "301094098e41c715226787cee125d0fcab7ea1c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8e82bd8d13c31817fca9e94dfdf6303a052497d", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/WatermarkStatus.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/WatermarkStatus.java\nindex f7c5db1f5b2..0b96c5d523a 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/WatermarkStatus.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/WatermarkStatus.java\n\n@@ -6,6 +6,30 @@\n  */\n package org.mule.runtime.module.extension.internal.runtime.source.poll;\n \n+/**\n+ * Enumeration that represent the possible outcomes of testing an item's watermark.\n+ *\n+ * @since 4.4.0\n+ */\n public enum WatermarkStatus {\n-  PASSED, REJECT, ON_HIGH, ON_NEW_HIGH\n+\n+  /**\n+   * The item passed the watermark.\n+   */\n+  PASSED,\n+\n+  /**\n+   * The item was rejected because it did not passed the watermark, of was already processed with that watermark value.\n+   */\n+  REJECT,\n+\n+  /**\n+   * The item passed the watermark, and its watermark value is equal to the highest watermark value found.\n+   */\n+  ON_HIGH,\n+\n+  /**\n+   * The items passed the watermark, and its watermark value is higher than any item tested before.\n+   */\n+  ON_NEW_HIGH\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0ODU4NQ==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r520848585", "bodyText": "This can be static too", "author": "Bardammu", "createdAt": "2020-11-10T20:18:06Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/api/loader/AbstractJavaExtensionModelLoader.java", "diffHunk": "@@ -86,6 +88,7 @@\n public class AbstractJavaExtensionModelLoader extends ExtensionModelLoader {\n \n   private static final boolean IGNORE_DISABLED = getProperty(DISABLE_SDK_IGNORE_COMPONENT) != null;\n+  private final boolean ENABLE_POLLING_SOURCE_LIMIT = getProperty(ENABLE_SDK_POLLING_SOURCE_LIMIT) != null;", "originalCommit": "301094098e41c715226787cee125d0fcab7ea1c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NDU2NQ==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r520864565", "bodyText": "The tests rely on the value of the property changing. What I can try to do is find a way for the tests to add the parameter to the ExtensionLoadingContext, instead of doing this through the system prop.", "author": "ndinu", "createdAt": "2020-11-10T20:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0ODU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "03154672d01c616ff88710506afe93b4910baae5", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/api/loader/AbstractJavaExtensionModelLoader.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/api/loader/AbstractJavaExtensionModelLoader.java\nindex dd3f7d10b94..e14c154cb7e 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/api/loader/AbstractJavaExtensionModelLoader.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/api/loader/AbstractJavaExtensionModelLoader.java\n\n@@ -88,7 +88,7 @@ import java.util.function.BiFunction;\n public class AbstractJavaExtensionModelLoader extends ExtensionModelLoader {\n \n   private static final boolean IGNORE_DISABLED = getProperty(DISABLE_SDK_IGNORE_COMPONENT) != null;\n-  private final boolean ENABLE_POLLING_SOURCE_LIMIT = getProperty(ENABLE_SDK_POLLING_SOURCE_LIMIT) != null;\n+  private static final boolean ENABLE_POLLING_SOURCE_LIMIT = getProperty(ENABLE_SDK_POLLING_SOURCE_LIMIT) != null;\n   public static final String TYPE_PROPERTY_NAME = \"type\";\n   public static final String EXTENSION_TYPE = \"EXTENSION_TYPE\";\n   public static final String VERSION = \"version\";\n"}}, {"oid": "f8e82bd8d13c31817fca9e94dfdf6303a052497d", "url": "https://github.com/mulesoft/mule/commit/f8e82bd8d13c31817fca9e94dfdf6303a052497d", "message": "Adds requested changes", "committedDate": "2020-11-10T20:53:23Z", "type": "commit"}, {"oid": "03154672d01c616ff88710506afe93b4910baae5", "url": "https://github.com/mulesoft/mule/commit/03154672d01c616ff88710506afe93b4910baae5", "message": "Adds requested changes", "committedDate": "2020-11-11T04:43:39Z", "type": "commit"}, {"oid": "6c4885ed965740b83b9c96e374e3bd5b6c289fe0", "url": "https://github.com/mulesoft/mule/commit/6c4885ed965740b83b9c96e374e3bd5b6c289fe0", "message": "Fix tests", "committedDate": "2020-11-11T13:14:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NDE4OA==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521364188", "bodyText": "Why retrieve if the value is not used? Did you leave this line by accident?", "author": "SebaElizalde", "createdAt": "2020-11-11T13:39:52Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -522,6 +582,28 @@ private void updateWatermark(Serializable value, Comparator comparator) {\n     }\n   }\n \n+  private void updateWatermark(Serializable value, Comparator comparator) throws ObjectStoreException {\n+    if (watermarkObjectStore.contains(WATERMARK_ITEM_OS_KEY)) {\n+      Serializable currentValue = watermarkObjectStore.retrieve(WATERMARK_ITEM_OS_KEY);\n+      if (compareWatermarks(currentValue, value, comparator) >= 0) {\n+        return;\n+      }\n+      watermarkObjectStore.remove(WATERMARK_ITEM_OS_KEY);\n+    }\n+\n+    updateRecentlyProcessedIds();\n+    watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, value);\n+  }\n+\n+  private void setCurrentWatermarkAsMinimumRejectWatermark(Serializable minimumRejectedByLimitPassingWatermark)\n+      throws ObjectStoreException {\n+    if (watermarkObjectStore.contains(WATERMARK_ITEM_OS_KEY)) {\n+      watermarkObjectStore.retrieve(WATERMARK_ITEM_OS_KEY);", "originalCommit": "6c4885ed965740b83b9c96e374e3bd5b6c289fe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4MDYyMQ==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521380621", "bodyText": "My bad, removing it.", "author": "ndinu", "createdAt": "2020-11-11T14:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NDE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "db960a6a6a2e3d660e368abb6ed6abdcdd796411", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\nindex d48f7191687..bad04389a04 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java\n\n@@ -598,7 +598,6 @@ public class PollingSourceWrapper<T, A> extends SourceWrapper<T, A> implements R\n   private void setCurrentWatermarkAsMinimumRejectWatermark(Serializable minimumRejectedByLimitPassingWatermark)\n       throws ObjectStoreException {\n     if (watermarkObjectStore.contains(WATERMARK_ITEM_OS_KEY)) {\n-      watermarkObjectStore.retrieve(WATERMARK_ITEM_OS_KEY);\n       watermarkObjectStore.remove(WATERMARK_ITEM_OS_KEY);\n     }\n     watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, minimumRejectedByLimitPassingWatermark);\n"}}, {"oid": "db960a6a6a2e3d660e368abb6ed6abdcdd796411", "url": "https://github.com/mulesoft/mule/commit/db960a6a6a2e3d660e368abb6ed6abdcdd796411", "message": "remove unnecesary line", "committedDate": "2020-11-11T14:07:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNTkzNg==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521605936", "bodyText": "I know this is unrelated to this change, but we need to review what's this sequence number for and why simply 10... These magic numbers are super fragile. Meanwhile, put this into a constant", "author": "marianogonzalez", "createdAt": "2020-11-11T20:01:46Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/PollingSourceDeclarationEnricher.java", "diffHunk": "@@ -60,26 +71,47 @@ protected void onSource(SourceDeclaration source) {\n \n             source.setRunsOnPrimaryNodeOnly(true);\n \n-            ParameterDeclaration parameter = new ParameterDeclaration(SCHEDULING_STRATEGY_PARAMETER_NAME);\n-            parameter.setDescription(SCHEDULING_STRATEGY_PARAMETER_DESCRIPTION);\n-            parameter.setRequired(true);\n-            parameter.setType(loader.load(SchedulingStrategy.class), false);\n-            parameter.setExpressionSupport(NOT_SUPPORTED);\n-            parameter.addModelProperty(new InfrastructureParameterModelProperty(10));\n-            parameter.addModelProperty(new QNameModelProperty(new QName(CORE_NAMESPACE, SCHEDULING_STRATEGY_ELEMENT_IDENTIFIER,\n-                                                                        CORE_PREFIX)));\n-            parameter.setDslConfiguration(ParameterDslConfiguration.builder()\n-                .allowsInlineDefinition(true)\n-                .allowsReferences(false)\n-                .allowTopLevelDefinition(false)\n-                .build());\n-\n             thereArePollingSources.set(true);\n \n-            source.getParameterGroup(DEFAULT_GROUP_NAME).addParameter(parameter);\n+            source.getParameterGroup(DEFAULT_GROUP_NAME).addParameter(declareSchedulingStrategyParameter(loader));\n+\n+            if (isPollingSourceLimitEnabled(extensionLoadingContext)) {\n+              source.getParameterGroup(DEFAULT_GROUP_NAME).addParameter(declarePollingSourceLimitParameter());\n+            }\n           }\n         });\n       }\n+\n+      private ParameterDeclaration declarePollingSourceLimitParameter() {\n+        ParameterDeclaration parameter = new ParameterDeclaration(POLLING_SOURCE_LIMIT_PARAMETER_NAME);\n+        parameter.setDescription(POLLING_SOURCE_LIMIT_PARAMETER_DESCRIPTION);\n+        parameter.setRequired(false);\n+        parameter.setType(BaseTypeBuilder.create(JAVA).numberType().integer().range(1, null).build(), false);\n+        parameter.setExpressionSupport(NOT_SUPPORTED);\n+        parameter.addModelProperty(new SyntheticModelModelProperty());\n+        parameter.addModelProperty(new SinceMuleVersionModelProperty(POLLING_SOURCE_LIMIT_MULE_VERSION));\n+        parameter.setLayoutModel(LayoutModel.builder().tabName(ADVANCED_TAB).build());\n+\n+        return parameter;\n+      }\n+\n+      private ParameterDeclaration declareSchedulingStrategyParameter(ClassTypeLoader loader) {\n+        ParameterDeclaration parameter = new ParameterDeclaration(SCHEDULING_STRATEGY_PARAMETER_NAME);\n+        parameter.setDescription(SCHEDULING_STRATEGY_PARAMETER_DESCRIPTION);\n+        parameter.setRequired(true);\n+        parameter.setType(loader.load(SchedulingStrategy.class), false);\n+        parameter.setExpressionSupport(NOT_SUPPORTED);\n+        parameter.addModelProperty(new InfrastructureParameterModelProperty(10));", "originalCommit": "db960a6a6a2e3d660e368abb6ed6abdcdd796411", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc96f935498addee0e77befea692693f7bba6aa2", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/PollingSourceDeclarationEnricher.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/PollingSourceDeclarationEnricher.java\nindex 7660d2ebddc..6b4a7cfdfd7 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/PollingSourceDeclarationEnricher.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/PollingSourceDeclarationEnricher.java\n\n@@ -101,7 +109,7 @@ public class PollingSourceDeclarationEnricher extends AbstractAnnotatedDeclarati\n         parameter.setRequired(true);\n         parameter.setType(loader.load(SchedulingStrategy.class), false);\n         parameter.setExpressionSupport(NOT_SUPPORTED);\n-        parameter.addModelProperty(new InfrastructureParameterModelProperty(10));\n+        parameter.addModelProperty(new InfrastructureParameterModelProperty(schedulingStrategyParameterSequence));\n         parameter.addModelProperty(new QNameModelProperty(new QName(CORE_NAMESPACE, SCHEDULING_STRATEGY_ELEMENT_IDENTIFIER,\n                                                                     CORE_PREFIX)));\n         parameter.setDslConfiguration(ParameterDslConfiguration.builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNjYyNQ==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521606625", "bodyText": "IllegalArgumentException", "author": "marianogonzalez", "createdAt": "2020-11-11T20:03:07Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/SourceConfigurer.java", "diffHunk": "@@ -152,4 +155,19 @@ public Source build(ValueResolvingContext context) throws MuleException {\n       }\n     }\n   }\n+\n+  private int resolverMaxItemsPerPoll(ResolverSet resolverSet, ValueResolvingContext context, CoreEvent event)\n+      throws MuleException {\n+    ValueResolver<?> valueResolver = resolverSet.getResolvers().get(POLLING_SOURCE_LIMIT_PARAMETER_NAME);\n+    if (valueResolver == null) {\n+      return Integer.MAX_VALUE;\n+    } else {\n+      int maxItemsPerPoll = (Integer) valueResolver.resolve(context);\n+      if (maxItemsPerPoll < 1) {\n+        throw new IllegalStateException(format(\"The %s parameter must have a value greater than 1\",", "originalCommit": "db960a6a6a2e3d660e368abb6ed6abdcdd796411", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc96f935498addee0e77befea692693f7bba6aa2", "chunk": "diff --git a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/SourceConfigurer.java b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/SourceConfigurer.java\nindex 9e466e97f5f..487a7998e0e 100644\n--- a/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/SourceConfigurer.java\n+++ b/modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/SourceConfigurer.java\n\n@@ -164,8 +164,8 @@ public final class SourceConfigurer {\n     } else {\n       int maxItemsPerPoll = (Integer) valueResolver.resolve(context);\n       if (maxItemsPerPoll < 1) {\n-        throw new IllegalStateException(format(\"The %s parameter must have a value greater than 1\",\n-                                               POLLING_SOURCE_LIMIT_PARAMETER_NAME));\n+        throw new IllegalArgumentException(format(\"The %s parameter must have a value greater than 1\",\n+                                                  POLLING_SOURCE_LIMIT_PARAMETER_NAME));\n       }\n       return maxItemsPerPoll;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMDIzMg==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521610232", "bodyText": "isn't this change actually tackling the watermark issues rather than implementing the limit thing? If the answer is yes, then split into different PRs", "author": "marianogonzalez", "createdAt": "2020-11-11T20:10:12Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -253,25 +269,113 @@ public PollItemStatus accept(Consumer<PollItem<T, A>> consumer) {\n \n       pollItem.validate();\n \n-      PollItemStatus status;\n+      PollItemStatus status = ACCEPTED;\n+      boolean currentPollItemLimitApplied = false;\n       if (!acquireItem(pollItem, callbackContext)) {\n         status = ALREADY_IN_PROCESS;\n-      } else if (!passesWatermark(pollItem)) {\n-        status = FILTERED_BY_WATERMARK;\n-      } else if (isRequestedToStop()) {\n-        status = SOURCE_STOPPING;\n       } else {\n-        sourceCallback.handle(pollItem.getResult(), callbackContext);\n-        status = ACCEPTED;\n+        WatermarkStatus watermarkStatus = passesWatermark(pollItem);\n+        if (watermarkStatus == REJECT) {\n+          status = FILTERED_BY_WATERMARK;\n+        } else if (isRequestedToStop()) {\n+          status = SOURCE_STOPPING;\n+        } else if (currentPollItems < maxItemsPerPoll) {\n+          currentPollItems++;\n+          sourceCallback.handle(pollItem.getResult(), callbackContext);\n+          saveWatermarkValue(watermarkStatus, pollItem);\n+        } else {\n+          currentPollItemLimitApplied = true;\n+          processLimitApplied(watermarkStatus, pollItem);\n+        }\n       }\n \n-      if (status != ACCEPTED) {\n+      if (status != ACCEPTED || currentPollItemLimitApplied) {\n         rejectItem(pollItem.getResult(), callbackContext);\n       }\n \n       return status;\n     }\n \n+    private void processLimitApplied(WatermarkStatus watermarkStatus, DefaultPollItem pollItem) {\n+      Serializable itemWatermark = pollItem.getWatermark().orElse(null);\n+      if (itemWatermark == null || watermarkStatus != PASSED) {\n+        return;\n+      }\n+      if (minimumRejectedByLimitPassingWatermark == null ||\n+          compareWatermarks(itemWatermark, minimumRejectedByLimitPassingWatermark, watermarkComparator) < 0) {\n+        LOGGER.debug(\"An item that passed all previous validations is being rejected by the poll limit and its watermark\" +\n+            \"value will be stored so that is processed on future polls if sent for processing.\");\n+        minimumRejectedByLimitPassingWatermark = itemWatermark;\n+      }\n+    }\n+\n+    private void saveWatermarkValue(WatermarkStatus watermarkStatus, DefaultPollItem pollItem) {", "originalCommit": "db960a6a6a2e3d660e368abb6ed6abdcdd796411", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMjgxMA==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521832810", "bodyText": "For the limit feature, I need to test watermarking without impacting the object stores, after that, if the item is not rejected due to the poll limit, the pertinent values will be stored. This is why, the passesWatermark method returns a WatermarkStatus, and later using that status we know what to store in the object stores.", "author": "ndinu", "createdAt": "2020-11-12T04:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMDIzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMjQ3Nw==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521612477", "bodyText": "why a new source for this? It'd be great to test it with an existing one since the real use case is injecting this functionality into existing sources", "author": "marianogonzalez", "createdAt": "2020-11-11T20:14:45Z", "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetAdoptionLimitingSource.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.petstore.extension;\n+\n+import static org.mule.runtime.extension.api.annotation.param.MediaType.TEXT_PLAIN;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.extension.api.annotation.metadata.MetadataScope;\n+import org.mule.runtime.extension.api.annotation.param.MediaType;\n+import org.mule.runtime.extension.api.annotation.param.Parameter;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.PollContext;\n+import org.mule.runtime.extension.api.runtime.source.PollingSource;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallbackContext;\n+\n+import java.util.List;\n+\n+@MetadataScope(outputResolver = PollingSourceMetadataResolver.class)\n+@MediaType(TEXT_PLAIN)\n+public class PetAdoptionLimitingSource extends PollingSource<String, Integer> {", "originalCommit": "db960a6a6a2e3d660e368abb6ed6abdcdd796411", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMzUwOQ==", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521833509", "bodyText": "I created a new source because I wanted to know in which poll was each item polled, and I also wanted to have an easy way to configure the watermark of each item.\nI can take some other tests and parameterize them so that they run with other sources using this parameter with a value of 1 or 2 for example, would that be ok?", "author": "ndinu", "createdAt": "2020-11-12T04:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMjQ3Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fc96f935498addee0e77befea692693f7bba6aa2", "url": "https://github.com/mulesoft/mule/commit/fc96f935498addee0e77befea692693f7bba6aa2", "message": "Adds requested changes", "committedDate": "2020-11-12T04:18:12Z", "type": "commit"}]}