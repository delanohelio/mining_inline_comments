{"pr_number": 8541, "pr_title": "MULE-16764: ForEach is not setting itemSequenceInfo", "pr_createdAt": "2020-01-06T12:00:39Z", "pr_url": "https://github.com/mulesoft/mule/pull/8541", "timeline": [{"oid": "273a6dc87559e2be2fd9dffe4cbd9aab67a28ca2", "url": "https://github.com/mulesoft/mule/commit/273a6dc87559e2be2fd9dffe4cbd9aab67a28ca2", "message": "MULE-16764: ForEach is not setting itemSequenceInfo", "committedDate": "2020-01-06T11:58:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI3NTAzMA==", "url": "https://github.com/mulesoft/mule/pull/8541#discussion_r363275030", "bodyText": "no * imports", "author": "elrodro83", "createdAt": "2020-01-06T12:32:55Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -9,15 +9,14 @@\n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n import static java.util.Collections.singletonMap;\n+import static java.util.stream.Collectors.*;\n import static java.util.stream.Collectors.toList;\n import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasItems;\n import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;", "originalCommit": "273a6dc87559e2be2fd9dffe4cbd9aab67a28ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a666bebc8e328519da1fec1e6b3e75232197a37", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\nindex dfe4c5dde9f..146927ec273 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n\n@@ -9,14 +9,15 @@ package org.mule.runtime.core.internal.routing;\n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n import static java.util.Collections.singletonMap;\n-import static java.util.stream.Collectors.*;\n import static java.util.stream.Collectors.toList;\n import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasItems;\n import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.rules.ExpectedException.none;\n import static org.mule.runtime.api.message.Message.of;\n import static org.mule.runtime.api.metadata.DataType.MULE_MESSAGE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI3NTA1MQ==", "url": "https://github.com/mulesoft/mule/pull/8541#discussion_r363275051", "bodyText": "no * imports", "author": "elrodro83", "createdAt": "2020-01-06T12:32:59Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -56,11 +56,8 @@\n import org.slf4j.Logger;\n \n import java.nio.BufferOverflowException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n+import java.util.*;", "originalCommit": "273a6dc87559e2be2fd9dffe4cbd9aab67a28ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a666bebc8e328519da1fec1e6b3e75232197a37", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\nindex dfe4c5dde9f..146927ec273 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n\n@@ -56,9 +61,14 @@ import org.junit.rules.ExpectedException;\n import org.slf4j.Logger;\n \n import java.nio.BufferOverflowException;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.Iterator;\n+import java.util.Optional;\n+\n+@Feature(ROUTERS)\n+@Story(FOR_EACH)\n public class ForeachTestCase extends AbstractReactiveProcessorTestCase {\n \n   private static final Logger LOGGER = getLogger(ForeachTestCase.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI3NTU5Nw==", "url": "https://github.com/mulesoft/mule/pull/8541#discussion_r363275597", "bodyText": "add allure annotations", "author": "elrodro83", "createdAt": "2020-01-06T12:34:44Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -422,6 +421,25 @@ public void empty() throws Exception {\n     assertThat(processedEvents, hasSize(0));\n   }\n \n+  @Test\n+  public void testItemSequences() throws Exception {", "originalCommit": "273a6dc87559e2be2fd9dffe4cbd9aab67a28ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a666bebc8e328519da1fec1e6b3e75232197a37", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\nindex dfe4c5dde9f..146927ec273 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n\n@@ -422,22 +431,29 @@ public class ForeachTestCase extends AbstractReactiveProcessorTestCase {\n   }\n \n   @Test\n+  @Issue(\"MULE-16764\")\n+  @io.qameta.allure.Description(\"ForEach is not setting itemSequenceInfo\")\n   public void testItemSequences() throws Exception {\n-    List<String> arrayList = new ArrayList<>();\n-    arrayList.add(\"one\");\n-    arrayList.add(\"two\");\n-    arrayList.add(\"three\");\n-    arrayList.add(\"four\");\n+    List<String> payload = new ArrayList<>();\n+    payload.add(\"one\");\n+    payload.add(\"two\");\n+    payload.add(\"three\");\n+    payload.add(\"four\");\n \n-    CoreEvent in = eventBuilder(muleContext).message(of(arrayList)).build();\n+    CoreEvent in = eventBuilder(muleContext).message(of(payload)).build();\n     process(simpleForeach, in);\n \n-    Set<ItemSequenceInfo> sequences = processedEvents.stream()\n-        .map(e -> e.getItemSequenceInfo().orElse(null))\n-        .collect(toSet());\n-\n-    assertFalse(ERR_INVALID_ITEM_SEQUENCE, sequences.contains(null));\n-    assertEquals(ERR_NUMBER_ITEM_SEQUENCE, arrayList.size(), sequences.size());\n+    List<Integer> sequences = processedEvents.stream()\n+        .map(e -> {\n+          if (e.getItemSequenceInfo().isPresent()) {\n+            return e.getItemSequenceInfo().get().getPosition();\n+          } else {\n+            return -1;\n+          }\n+        })\n+        .collect(toList());\n+\n+    assertThat(ERR_INVALID_ITEM_SEQUENCE, sequences, is(asList(0, 1, 2, 3)));\n   }\n \n   private CoreEvent processInChain(Processor processor, CoreEvent event) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI3NTY5MA==", "url": "https://github.com/mulesoft/mule/pull/8541#discussion_r363275690", "bodyText": "use hamcrest matchers for assertions", "author": "elrodro83", "createdAt": "2020-01-06T12:35:07Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -422,6 +421,25 @@ public void empty() throws Exception {\n     assertThat(processedEvents, hasSize(0));\n   }\n \n+  @Test\n+  public void testItemSequences() throws Exception {\n+    List<String> arrayList = new ArrayList<>();\n+    arrayList.add(\"one\");\n+    arrayList.add(\"two\");\n+    arrayList.add(\"three\");\n+    arrayList.add(\"four\");\n+\n+    CoreEvent in = eventBuilder(muleContext).message(of(arrayList)).build();\n+    process(simpleForeach, in);\n+\n+    Set<ItemSequenceInfo> sequences = processedEvents.stream()\n+        .map(e -> e.getItemSequenceInfo().orElse(null))\n+        .collect(toSet());\n+\n+    assertFalse(ERR_INVALID_ITEM_SEQUENCE, sequences.contains(null));", "originalCommit": "273a6dc87559e2be2fd9dffe4cbd9aab67a28ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a666bebc8e328519da1fec1e6b3e75232197a37", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\nindex dfe4c5dde9f..146927ec273 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n\n@@ -422,22 +431,29 @@ public class ForeachTestCase extends AbstractReactiveProcessorTestCase {\n   }\n \n   @Test\n+  @Issue(\"MULE-16764\")\n+  @io.qameta.allure.Description(\"ForEach is not setting itemSequenceInfo\")\n   public void testItemSequences() throws Exception {\n-    List<String> arrayList = new ArrayList<>();\n-    arrayList.add(\"one\");\n-    arrayList.add(\"two\");\n-    arrayList.add(\"three\");\n-    arrayList.add(\"four\");\n+    List<String> payload = new ArrayList<>();\n+    payload.add(\"one\");\n+    payload.add(\"two\");\n+    payload.add(\"three\");\n+    payload.add(\"four\");\n \n-    CoreEvent in = eventBuilder(muleContext).message(of(arrayList)).build();\n+    CoreEvent in = eventBuilder(muleContext).message(of(payload)).build();\n     process(simpleForeach, in);\n \n-    Set<ItemSequenceInfo> sequences = processedEvents.stream()\n-        .map(e -> e.getItemSequenceInfo().orElse(null))\n-        .collect(toSet());\n-\n-    assertFalse(ERR_INVALID_ITEM_SEQUENCE, sequences.contains(null));\n-    assertEquals(ERR_NUMBER_ITEM_SEQUENCE, arrayList.size(), sequences.size());\n+    List<Integer> sequences = processedEvents.stream()\n+        .map(e -> {\n+          if (e.getItemSequenceInfo().isPresent()) {\n+            return e.getItemSequenceInfo().get().getPosition();\n+          } else {\n+            return -1;\n+          }\n+        })\n+        .collect(toList());\n+\n+    assertThat(ERR_INVALID_ITEM_SEQUENCE, sequences, is(asList(0, 1, 2, 3)));\n   }\n \n   private CoreEvent processInChain(Processor processor, CoreEvent event) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI3NTkyNQ==", "url": "https://github.com/mulesoft/mule/pull/8541#discussion_r363275925", "bodyText": "This should be a list and its exact contents asserted", "author": "elrodro83", "createdAt": "2020-01-06T12:35:47Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -422,6 +421,25 @@ public void empty() throws Exception {\n     assertThat(processedEvents, hasSize(0));\n   }\n \n+  @Test\n+  public void testItemSequences() throws Exception {\n+    List<String> arrayList = new ArrayList<>();\n+    arrayList.add(\"one\");\n+    arrayList.add(\"two\");\n+    arrayList.add(\"three\");\n+    arrayList.add(\"four\");\n+\n+    CoreEvent in = eventBuilder(muleContext).message(of(arrayList)).build();\n+    process(simpleForeach, in);\n+\n+    Set<ItemSequenceInfo> sequences = processedEvents.stream()", "originalCommit": "273a6dc87559e2be2fd9dffe4cbd9aab67a28ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a666bebc8e328519da1fec1e6b3e75232197a37", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\nindex dfe4c5dde9f..146927ec273 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n\n@@ -422,22 +431,29 @@ public class ForeachTestCase extends AbstractReactiveProcessorTestCase {\n   }\n \n   @Test\n+  @Issue(\"MULE-16764\")\n+  @io.qameta.allure.Description(\"ForEach is not setting itemSequenceInfo\")\n   public void testItemSequences() throws Exception {\n-    List<String> arrayList = new ArrayList<>();\n-    arrayList.add(\"one\");\n-    arrayList.add(\"two\");\n-    arrayList.add(\"three\");\n-    arrayList.add(\"four\");\n+    List<String> payload = new ArrayList<>();\n+    payload.add(\"one\");\n+    payload.add(\"two\");\n+    payload.add(\"three\");\n+    payload.add(\"four\");\n \n-    CoreEvent in = eventBuilder(muleContext).message(of(arrayList)).build();\n+    CoreEvent in = eventBuilder(muleContext).message(of(payload)).build();\n     process(simpleForeach, in);\n \n-    Set<ItemSequenceInfo> sequences = processedEvents.stream()\n-        .map(e -> e.getItemSequenceInfo().orElse(null))\n-        .collect(toSet());\n-\n-    assertFalse(ERR_INVALID_ITEM_SEQUENCE, sequences.contains(null));\n-    assertEquals(ERR_NUMBER_ITEM_SEQUENCE, arrayList.size(), sequences.size());\n+    List<Integer> sequences = processedEvents.stream()\n+        .map(e -> {\n+          if (e.getItemSequenceInfo().isPresent()) {\n+            return e.getItemSequenceInfo().get().getPosition();\n+          } else {\n+            return -1;\n+          }\n+        })\n+        .collect(toList());\n+\n+    assertThat(ERR_INVALID_ITEM_SEQUENCE, sequences, is(asList(0, 1, 2, 3)));\n   }\n \n   private CoreEvent processInChain(Processor processor, CoreEvent event) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI3NzUwMw==", "url": "https://github.com/mulesoft/mule/pull/8541#discussion_r363277503", "bodyText": "rename variable to something more meaningful, like payload", "author": "elrodro83", "createdAt": "2020-01-06T12:41:14Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -422,6 +421,25 @@ public void empty() throws Exception {\n     assertThat(processedEvents, hasSize(0));\n   }\n \n+  @Test\n+  public void testItemSequences() throws Exception {\n+    List<String> arrayList = new ArrayList<>();", "originalCommit": "273a6dc87559e2be2fd9dffe4cbd9aab67a28ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a666bebc8e328519da1fec1e6b3e75232197a37", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\nindex dfe4c5dde9f..146927ec273 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n\n@@ -422,22 +431,29 @@ public class ForeachTestCase extends AbstractReactiveProcessorTestCase {\n   }\n \n   @Test\n+  @Issue(\"MULE-16764\")\n+  @io.qameta.allure.Description(\"ForEach is not setting itemSequenceInfo\")\n   public void testItemSequences() throws Exception {\n-    List<String> arrayList = new ArrayList<>();\n-    arrayList.add(\"one\");\n-    arrayList.add(\"two\");\n-    arrayList.add(\"three\");\n-    arrayList.add(\"four\");\n+    List<String> payload = new ArrayList<>();\n+    payload.add(\"one\");\n+    payload.add(\"two\");\n+    payload.add(\"three\");\n+    payload.add(\"four\");\n \n-    CoreEvent in = eventBuilder(muleContext).message(of(arrayList)).build();\n+    CoreEvent in = eventBuilder(muleContext).message(of(payload)).build();\n     process(simpleForeach, in);\n \n-    Set<ItemSequenceInfo> sequences = processedEvents.stream()\n-        .map(e -> e.getItemSequenceInfo().orElse(null))\n-        .collect(toSet());\n-\n-    assertFalse(ERR_INVALID_ITEM_SEQUENCE, sequences.contains(null));\n-    assertEquals(ERR_NUMBER_ITEM_SEQUENCE, arrayList.size(), sequences.size());\n+    List<Integer> sequences = processedEvents.stream()\n+        .map(e -> {\n+          if (e.getItemSequenceInfo().isPresent()) {\n+            return e.getItemSequenceInfo().get().getPosition();\n+          } else {\n+            return -1;\n+          }\n+        })\n+        .collect(toList());\n+\n+    assertThat(ERR_INVALID_ITEM_SEQUENCE, sequences, is(asList(0, 1, 2, 3)));\n   }\n \n   private CoreEvent processInChain(Processor processor, CoreEvent event) throws Exception {\n"}}, {"oid": "7a666bebc8e328519da1fec1e6b3e75232197a37", "url": "https://github.com/mulesoft/mule/commit/7a666bebc8e328519da1fec1e6b3e75232197a37", "message": "Enhance unit test", "committedDate": "2020-01-06T13:20:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI5MTU1MQ==", "url": "https://github.com/mulesoft/mule/pull/8541#discussion_r363291551", "bodyText": "you can use the optional map/orElse here", "author": "elrodro83", "createdAt": "2020-01-06T13:26:31Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -422,22 +431,29 @@ public void empty() throws Exception {\n   }\n \n   @Test\n+  @Issue(\"MULE-16764\")\n+  @io.qameta.allure.Description(\"ForEach is not setting itemSequenceInfo\")\n   public void testItemSequences() throws Exception {\n-    List<String> arrayList = new ArrayList<>();\n-    arrayList.add(\"one\");\n-    arrayList.add(\"two\");\n-    arrayList.add(\"three\");\n-    arrayList.add(\"four\");\n+    List<String> payload = new ArrayList<>();\n+    payload.add(\"one\");\n+    payload.add(\"two\");\n+    payload.add(\"three\");\n+    payload.add(\"four\");\n \n-    CoreEvent in = eventBuilder(muleContext).message(of(arrayList)).build();\n+    CoreEvent in = eventBuilder(muleContext).message(of(payload)).build();\n     process(simpleForeach, in);\n \n-    Set<ItemSequenceInfo> sequences = processedEvents.stream()\n-        .map(e -> e.getItemSequenceInfo().orElse(null))\n-        .collect(toSet());\n-\n-    assertFalse(ERR_INVALID_ITEM_SEQUENCE, sequences.contains(null));\n-    assertEquals(ERR_NUMBER_ITEM_SEQUENCE, arrayList.size(), sequences.size());\n+    List<Integer> sequences = processedEvents.stream()\n+        .map(e -> {\n+          if (e.getItemSequenceInfo().isPresent()) {", "originalCommit": "7a666bebc8e328519da1fec1e6b3e75232197a37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "effa8b1a439e97c9c2d74a1f5647a2137a111f51", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\nindex 146927ec273..3f0a884de0b 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java\n\n@@ -444,13 +444,7 @@ public class ForeachTestCase extends AbstractReactiveProcessorTestCase {\n     process(simpleForeach, in);\n \n     List<Integer> sequences = processedEvents.stream()\n-        .map(e -> {\n-          if (e.getItemSequenceInfo().isPresent()) {\n-            return e.getItemSequenceInfo().get().getPosition();\n-          } else {\n-            return -1;\n-          }\n-        })\n+        .map(e ->  e.getItemSequenceInfo().map(i -> i.getPosition()).orElse(-1))\n         .collect(toList());\n \n     assertThat(ERR_INVALID_ITEM_SEQUENCE, sequences, is(asList(0, 1, 2, 3)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI5MTYxMQ==", "url": "https://github.com/mulesoft/mule/pull/8541#discussion_r363291611", "bodyText": "remove unused imports", "author": "elrodro83", "createdAt": "2020-01-06T13:26:38Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -9,14 +9,15 @@\n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n import static java.util.Collections.singletonMap;\n-import static java.util.stream.Collectors.*;\n import static java.util.stream.Collectors.toList;\n import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasItems;\n import static org.hamcrest.Matchers.hasSize;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;", "originalCommit": "7a666bebc8e328519da1fec1e6b3e75232197a37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "effa8b1a439e97c9c2d74a1f5647a2137a111f51", "url": "https://github.com/mulesoft/mule/commit/effa8b1a439e97c9c2d74a1f5647a2137a111f51", "message": "Use map/orElse instead of isPresent", "committedDate": "2020-01-06T13:31:29Z", "type": "commit"}, {"oid": "4254718b495330ee931df54e7275db6cc734161a", "url": "https://github.com/mulesoft/mule/commit/4254718b495330ee931df54e7275db6cc734161a", "message": "Format according the standard", "committedDate": "2020-01-06T13:34:58Z", "type": "commit"}]}