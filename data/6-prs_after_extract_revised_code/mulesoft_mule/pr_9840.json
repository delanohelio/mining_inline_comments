{"pr_number": 9840, "pr_title": "MULE-18976: Implement Feature Flagging (refactoring)", "pr_createdAt": "2020-12-11T00:59:20Z", "pr_url": "https://github.com/mulesoft/mule/pull/9840", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NDQ5OA==", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546854498", "bodyText": "why?", "author": "elrodro83", "createdAt": "2020-12-21T18:11:50Z", "path": "core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java", "diffHunk": "@@ -25,12 +25,10 @@\n import org.mule.tck.size.SmallTest;\n \n @SmallTest\n-@Feature(DEPLOYMENT_CONFIGURATION)\n+@io.qameta.allure.Feature(DEPLOYMENT_CONFIGURATION)", "originalCommit": "fc0439f81f8183b13ff34578bf6f895e83ac9293", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxMzE3OA==", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r547313178", "bodyText": "We were referencing two Features: our enum and the allure class.  After refactoring, we don't need to refer to the enum.", "author": "szaffarano", "createdAt": "2020-12-22T14:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NDQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "bddca16918b8bd56e803e1479ba66db1378eee74", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java\nindex 2b5e8bd73c9..de022da4470 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java\n\n@@ -11,21 +11,24 @@ import static java.lang.String.format;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.is;\n-import static org.mule.runtime.api.config.Feature.TESTING_FEATURE;\n+import static org.mule.runtime.core.api.config.FeatureFlaggingRegistry.CONDITION_CAN_NOT_BE_NULL;\n+import static org.mule.runtime.core.api.config.FeatureFlaggingRegistry.FEATURE_ALREADY_REGISTERED;\n+import static org.mule.runtime.core.api.config.FeatureFlaggingRegistry.FEATURE_CAN_NOT_BE_NULL;\n+import static org.mule.runtime.core.api.config.TestingFeatures.TESTING_FEATURE;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.DEPLOYMENT_CONFIGURATION;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.FeatureFlaggingStory.FEATURE_FLAGGING;\n \n+import io.qameta.allure.Feature;\n import io.qameta.allure.Story;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n-import org.mule.runtime.api.exception.MuleRuntimeException;\n import org.mule.tck.size.SmallTest;\n \n @SmallTest\n-@io.qameta.allure.Feature(DEPLOYMENT_CONFIGURATION)\n+@Feature(DEPLOYMENT_CONFIGURATION)\n @Story(FEATURE_FLAGGING)\n public class FeatureFlaggingRegistryTestCase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NDkxNA==", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546854914", "bodyText": "why?", "author": "elrodro83", "createdAt": "2020-12-21T18:12:44Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java", "diffHunk": "@@ -7,79 +7,84 @@\n \n package org.mule.runtime.core.internal.config;\n \n-import io.qameta.allure.Feature;\n import io.qameta.allure.Story;\n-import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import org.junit.runners.Parameterized.Parameters;\n+import org.mule.runtime.api.config.Feature;\n import org.mule.runtime.api.exception.MuleRuntimeException;\n import org.mule.runtime.core.api.config.FeatureFlaggingService;\n \n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n+import java.util.function.Supplier;\n \n import static java.lang.String.format;\n import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n+import static org.mule.runtime.api.config.Feature.TESTING_FEATURE;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.DEPLOYMENT_CONFIGURATION;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.FeatureFlaggingStory.FEATURE_FLAGGING;\n \n @RunWith(Parameterized.class)\n-@Feature(DEPLOYMENT_CONFIGURATION)\n+@io.qameta.allure.Feature(DEPLOYMENT_CONFIGURATION)", "originalCommit": "fc0439f81f8183b13ff34578bf6f895e83ac9293", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxMzcyOQ==", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r547313729", "bodyText": "We need to reference both our enum and the allure Feature annotation. One of them has to have a fully qualified class name.", "author": "szaffarano", "createdAt": "2020-12-22T14:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NDkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "bddca16918b8bd56e803e1479ba66db1378eee74", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\nindex 3ecac3228ce..3e3727de891 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\n\n@@ -22,13 +22,12 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n-import java.util.function.Supplier;\n \n import static java.lang.String.format;\n import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n-import static org.mule.runtime.api.config.Feature.TESTING_FEATURE;\n+import static org.mule.runtime.core.api.config.TestingFeatures.TESTING_FEATURE;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.DEPLOYMENT_CONFIGURATION;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.FeatureFlaggingStory.FEATURE_FLAGGING;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NTUxMg==", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546855512", "bodyText": "rename to something more meaningful", "author": "elrodro83", "createdAt": "2020-12-21T18:14:00Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java", "diffHunk": "@@ -7,79 +7,84 @@\n \n package org.mule.runtime.core.internal.config;\n \n-import io.qameta.allure.Feature;\n import io.qameta.allure.Story;\n-import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import org.junit.runners.Parameterized.Parameters;\n+import org.mule.runtime.api.config.Feature;\n import org.mule.runtime.api.exception.MuleRuntimeException;\n import org.mule.runtime.core.api.config.FeatureFlaggingService;\n \n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n+import java.util.function.Supplier;\n \n import static java.lang.String.format;\n import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n+import static org.mule.runtime.api.config.Feature.TESTING_FEATURE;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.DEPLOYMENT_CONFIGURATION;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.FeatureFlaggingStory.FEATURE_FLAGGING;\n \n @RunWith(Parameterized.class)\n-@Feature(DEPLOYMENT_CONFIGURATION)\n+@io.qameta.allure.Feature(DEPLOYMENT_CONFIGURATION)\n @Story(FEATURE_FLAGGING)\n public class DefaultFeatureFlaggingServiceTestCase {\n \n-  private static final String FEATURE_ENABLED = \"FEATURE A\";\n-  private static final String FEATURE_DISABLED = \"FEATURE B\";\n-  private static final String FEATURE_INVALID = \"FEATURE INVALID\";\n+  private final FeatureFlaggingService featureFlaggingService;\n \n-  private FeatureFlaggingService featureFlaggingService;\n-\n-  private final String featureName;\n+  private final Feature feature;\n   private final boolean enabled;\n \n   @Rule\n   public ExpectedException expectedException = ExpectedException.none();\n \n-  @Before\n-  public void setUp() {\n-    Map<String, Boolean> features = new HashMap<>();\n-    features.put(FEATURE_ENABLED, true);\n-    features.put(FEATURE_DISABLED, false);\n-\n-    featureFlaggingService = new DefaultFeatureFlaggingService(features);\n-  }\n-\n-  @Parameters(name = \"Feature \\\"{0}\\\" should be {1}\")\n+  @Parameters(name = \"Feature \\\"{1}\\\" should be {2}\")\n   public static List<Object[]> parameters() {\n     return asList(\n-                  new Object[] {FEATURE_DISABLED, false, null},\n-                  new Object[] {FEATURE_ENABLED, true, null},\n-                  new Object[] {FEATURE_INVALID, false, (Consumer<ExpectedException>) (e -> {\n+                  new Object[] {getSetUp(TESTING_FEATURE, false), TESTING_FEATURE, false, null},\n+                  new Object[] {getSetUp(TESTING_FEATURE, true), TESTING_FEATURE, true, null},\n+                  new Object[] {getSetUp(), TESTING_FEATURE, false, (Consumer<ExpectedException>) (e -> {\n                     e.expect(MuleRuntimeException.class);\n-                    e.expectMessage(format(\"Feature %s not registered\", FEATURE_INVALID));\n+                    e.expectMessage(format(\"Feature %s not registered\", TESTING_FEATURE.name()));\n                   })});\n \n   }\n \n-  public DefaultFeatureFlaggingServiceTestCase(String featureName, boolean enabled,\n+  public DefaultFeatureFlaggingServiceTestCase(Supplier<Map<Feature, Boolean>> setUp, Feature feature, boolean enabled,\n                                                Consumer<ExpectedException> configureExpected) {\n-    this.featureName = featureName;\n+\n+    this.feature = feature;\n     this.enabled = enabled;\n+\n+    featureFlaggingService = new DefaultFeatureFlaggingService(setUp.get());\n     if (configureExpected != null) {\n       configureExpected.accept(expectedException);\n     }\n   }\n \n   @Test\n   public void testCase() {\n-    assertThat(featureFlaggingService.isEnabled(featureName), is(enabled));\n+    assertThat(featureFlaggingService.isEnabled(feature), is(enabled));\n+  }\n+\n+  private static Supplier<Map<Feature, Boolean>> getSetUp(Object... values) {", "originalCommit": "fc0439f81f8183b13ff34578bf6f895e83ac9293", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bddca16918b8bd56e803e1479ba66db1378eee74", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\nindex 3ecac3228ce..3e3727de891 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java\n\n@@ -22,13 +22,12 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n-import java.util.function.Supplier;\n \n import static java.lang.String.format;\n import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n-import static org.mule.runtime.api.config.Feature.TESTING_FEATURE;\n+import static org.mule.runtime.core.api.config.TestingFeatures.TESTING_FEATURE;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.DEPLOYMENT_CONFIGURATION;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.FeatureFlaggingStory.FEATURE_FLAGGING;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NjE1MA==", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546856150", "bodyText": "extract test to constant.\nshouldn't this be an IllegalArgumentException instead of a MuleRuntimeException?", "author": "elrodro83", "createdAt": "2020-12-21T18:15:31Z", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -67,9 +67,9 @@ private FeatureFlaggingRegistry() {}\n    * @param condition This predicate will be evaluated at deployment time. The {@link MuleContext} corresponds to the context that\n    *        is being created for this application.\n    */\n-  public void registerFeature(String feature, Predicate<MuleContext> condition) {\n-    if (isNullOrEmpty(feature)) {\n-      throw new MuleRuntimeException(createStaticMessage(\"Invalid feature name\"));\n+  public void registerFeature(Feature feature, Predicate<MuleContext> condition) {\n+    if (feature == null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Feature can not be null\"));", "originalCommit": "fc0439f81f8183b13ff34578bf6f895e83ac9293", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bddca16918b8bd56e803e1479ba66db1378eee74", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\nindex aacfcdbc89e..2ae1d0fb5fc 100644\n--- a/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n+++ b/core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java\n\n@@ -69,16 +72,16 @@ public class FeatureFlaggingRegistry {\n    */\n   public void registerFeature(Feature feature, Predicate<MuleContext> condition) {\n     if (feature == null) {\n-      throw new MuleRuntimeException(createStaticMessage(\"Feature can not be null\"));\n+      throw new IllegalArgumentException(FEATURE_CAN_NOT_BE_NULL);\n     }\n \n     if (condition == null) {\n-      throw new MuleRuntimeException(createStaticMessage(\"Error registering %s: condition must not be null\", feature));\n+      throw new IllegalArgumentException(format(CONDITION_CAN_NOT_BE_NULL, feature));\n     }\n \n     Predicate<MuleContext> added = configurations.putIfAbsent(feature, condition);\n     if (added != null) {\n-      throw new MuleRuntimeException(createStaticMessage(\"Feature %s already registered\", feature));\n+      throw new IllegalArgumentException(format(FEATURE_ALREADY_REGISTERED, feature));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NjUwOA==", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546856508", "bodyText": "remove extra line", "author": "elrodro83", "createdAt": "2020-12-21T18:16:23Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -200,6 +206,17 @@ public MuleArtifactContext(MuleContext muleContext, ConfigResource[] artifactCon\n         new BeanDefinitionFactory(muleContext.getConfiguration().getId(),\n                                   componentBuildingDefinitionRegistryFactory.create(getExtensions()));\n \n+\n+    FeatureFlaggingRegistry ffRegistry = FeatureFlaggingRegistry.getInstance();\n+\n+    FeatureFlaggingService featureFlaggingService = new FeatureFlaggingServiceBuilder()\n+        .context(muleContext)\n+        .configurations(ffRegistry.getFeatureConfigurations())\n+        .build();\n+", "originalCommit": "fc0439f81f8183b13ff34578bf6f895e83ac9293", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bddca16918b8bd56e803e1479ba66db1378eee74", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\nindex ff1211b3f75..d8e73900c2f 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java\n\n@@ -214,7 +214,6 @@ public class MuleArtifactContext extends AbstractRefreshableConfigApplicationCon\n         .configurations(ffRegistry.getFeatureConfigurations())\n         .build();\n \n-\n     muleContext.getCustomizationService().overrideDefaultServiceImpl(FEATURE_FLAGGING_SERVICE_KEY, featureFlaggingService);\n \n     this.applicationModel = createApplicationModel(artifactDeclaration, artifactConfigResources);\n"}}, {"oid": "230d823b5e32bab63799be0f11de73f74d23335a", "url": "https://github.com/mulesoft/mule/commit/230d823b5e32bab63799be0f11de73f74d23335a", "message": "Finish feature flagging refactoring\n\n - Use enum instead of String\n - Fix CCL in tests", "committedDate": "2020-12-22T12:57:15Z", "type": "commit"}, {"oid": "bddca16918b8bd56e803e1479ba66db1378eee74", "url": "https://github.com/mulesoft/mule/commit/bddca16918b8bd56e803e1479ba66db1378eee74", "message": "MULE-18976: changes because of pr comments", "committedDate": "2020-12-22T15:03:25Z", "type": "commit"}, {"oid": "bddca16918b8bd56e803e1479ba66db1378eee74", "url": "https://github.com/mulesoft/mule/commit/bddca16918b8bd56e803e1479ba66db1378eee74", "message": "MULE-18976: changes because of pr comments", "committedDate": "2020-12-22T15:03:25Z", "type": "forcePushed"}, {"oid": "03b52902c11d927fdb378c6a677cf28ddd0aa3c1", "url": "https://github.com/mulesoft/mule/commit/03b52902c11d927fdb378c6a677cf28ddd0aa3c1", "message": "MULE-18976: more changes because of pr comments", "committedDate": "2020-12-22T21:23:54Z", "type": "commit"}, {"oid": "ac1610fb21b82f1d604a2e51c65ca1b2fd37a259", "url": "https://github.com/mulesoft/mule/commit/ac1610fb21b82f1d604a2e51c65ca1b2fd37a259", "message": "MULE-18976: more changes because of pr comments", "committedDate": "2020-12-23T13:21:49Z", "type": "commit"}]}