{"pr_number": 8655, "pr_title": "MULE-18063: Need a way to stop built-in schedule for CH apps", "pr_createdAt": "2020-02-17T18:46:03Z", "pr_url": "https://github.com/mulesoft/mule/pull/8655", "timeline": [{"oid": "4a91c8786cb21862e12b64f9f52fe73d8cce24d4", "url": "https://github.com/mulesoft/mule/commit/4a91c8786cb21862e12b64f9f52fe73d8cce24d4", "message": "MULE-18063: Need a way to stop built-in schedule for CH apps", "committedDate": "2020-02-17T18:43:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyODI3MQ==", "url": "https://github.com/mulesoft/mule/pull/8655#discussion_r380328271", "bodyText": "make this test parameterized and use a rule for the system property", "author": "elrodro83", "createdAt": "2020-02-17T18:48:05Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/source/polling/DefaultSchedulerMessageSourceTestCase.java", "diffHunk": "@@ -75,48 +89,51 @@ public void setUp() throws Exception {\n \n   @Test\n   public void simplePoll() throws Exception {\n-\n-    DefaultSchedulerMessageSource schedulerMessageSource = createMessageSource();\n-\n-    SensingNullMessageProcessor flow = getSensingNullMessageProcessor();\n-    schedulerMessageSource.setListener(flow);\n-    schedulerMessageSource.setAnnotations(singletonMap(LOCATION_KEY, TEST_CONNECTOR_LOCATION));\n-\n-    doAnswer(invocationOnMock -> {\n-      CoreEvent inputEvent = invocationOnMock.getArgument(0);\n-      flow.process(inputEvent);\n-      return null;\n-    }).when(sourcePolicy).process(any(CoreEvent.class), any(), any());\n-\n-    schedulerMessageSource.trigger();\n-    new PollingProber(RECEIVE_TIMEOUT, 100).check(new Probe() {\n+    pollAndAssertWith(p -> new PollingProber(RECEIVE_TIMEOUT, 100).check(new Probe() {\n \n       @Override\n       public boolean isSatisfied() {\n-        return flow.event != null;\n+        return p.event != null;\n       }\n \n       @Override\n       public String describeFailure() {\n         return \"flow event never set by the source flow\";\n       }\n-    });\n+    }));\n   }\n \n   @Test\n-  public void disposeScheduler() throws Exception {\n-    SchedulerService schedulerService = muleContext.getSchedulerService();\n-    reset(schedulerService);\n+  @Description(\"Verifies that no events are processed when the scheduler is disabled\")\n+  @Issue(\"MULE-18063\")\n+  public void simplePollDisabledWithScheduler() throws Exception {\n+    String wasDisabled = setProperty(MULE_DISABLE_SCHEDULERS, \"true\");", "originalCommit": "4a91c8786cb21862e12b64f9f52fe73d8cce24d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0ODUzNQ==", "url": "https://github.com/mulesoft/mule/pull/8655#discussion_r380348535", "bodyText": "Done.  I split this TestCase in two to make one of them parameterized.", "author": "szaffarano", "createdAt": "2020-02-17T20:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyODI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "103a563e8eeeddba3e2f691b76abfc690cd1ab5e", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/source/polling/DefaultSchedulerMessageSourceTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/source/polling/DefaultSchedulerMessageSourceTestCase.java\ndeleted file mode 100644\nindex ac358f4a155..00000000000\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/source/polling/DefaultSchedulerMessageSourceTestCase.java\n+++ /dev/null\n\n@@ -1,241 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.runtime.core.internal.source.polling;\n-\n-import static java.lang.System.setProperty;\n-import static java.util.Collections.singletonMap;\n-import static java.util.Optional.of;\n-import static java.util.concurrent.TimeUnit.MILLISECONDS;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.nullValue;\n-import static org.junit.Assert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyLong;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.reset;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import static org.mule.runtime.api.component.AbstractComponent.LOCATION_KEY;\n-import static org.mule.runtime.api.component.location.ConfigurationComponentLocator.REGISTRY_KEY;\n-import static org.mule.runtime.api.util.MuleSystemProperties.MULE_DISABLE_SCHEDULERS;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n-import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n-import static org.mule.tck.MuleTestUtils.APPLE_FLOW;\n-import static org.mule.tck.MuleTestUtils.createFlowWithSource;\n-import static org.mule.test.allure.AllureConstants.SchedulerFeature.SCHEDULER;\n-import static org.slf4j.LoggerFactory.getLogger;\n-\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicReference;\n-import java.util.function.Consumer;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mule.runtime.api.component.location.Location;\n-import org.mule.runtime.api.exception.MuleException;\n-import org.mule.runtime.api.scheduler.Scheduler;\n-import org.mule.runtime.api.scheduler.SchedulerService;\n-import org.mule.runtime.core.api.construct.Flow;\n-import org.mule.runtime.core.api.event.CoreEvent;\n-import org.mule.runtime.core.api.source.scheduler.FixedFrequencyScheduler;\n-import org.mule.runtime.core.internal.context.DefaultMuleContext;\n-import org.mule.runtime.core.internal.execution.MuleMessageProcessingManager;\n-import org.mule.runtime.core.internal.policy.PolicyManager;\n-import org.mule.runtime.core.internal.policy.SourcePolicy;\n-import org.mule.runtime.core.internal.source.scheduler.DefaultSchedulerMessageSource;\n-import org.mule.tck.SensingNullMessageProcessor;\n-import org.mule.tck.junit4.AbstractMuleContextTestCase;\n-import org.mule.tck.probe.PollingProber;\n-import org.mule.tck.probe.Probe;\n-import org.slf4j.Logger;\n-\n-import io.qameta.allure.Description;\n-import io.qameta.allure.Feature;\n-import io.qameta.allure.Issue;\n-\n-@Feature(SCHEDULER)\n-public class DefaultSchedulerMessageSourceTestCase extends AbstractMuleContextTestCase {\n-\n-  private static final Logger LOGGER = getLogger(DefaultSchedulerMessageSourceTestCase.class);\n-  private PolicyManager policyManager;\n-  private SourcePolicy sourcePolicy;\n-  private final String MESSAGE_PROCESSING_MANAGER_KEY = \"_muleMessageProcessingManager\";\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    policyManager = mock(PolicyManager.class);\n-    sourcePolicy = mock(SourcePolicy.class);\n-    when(policyManager.createSourcePolicyInstance(any(), any(), any(), any())).thenReturn(sourcePolicy);\n-\n-    MuleMessageProcessingManager processingManager = new MuleMessageProcessingManager();\n-    processingManager.setMuleContext(muleContext);\n-    processingManager.setPolicyManager(policyManager);\n-\n-    ((DefaultMuleContext) muleContext).getRegistry().unregisterObject(MESSAGE_PROCESSING_MANAGER_KEY);\n-    ((DefaultMuleContext) muleContext).getRegistry().registerObject(MESSAGE_PROCESSING_MANAGER_KEY, processingManager);\n-  }\n-\n-  @Override\n-  protected Map<String, Object> getStartUpRegistryObjects() {\n-    return singletonMap(REGISTRY_KEY, componentLocator);\n-  }\n-\n-  @Test\n-  public void simplePoll() throws Exception {\n-    pollAndAssertWith(p -> new PollingProber(RECEIVE_TIMEOUT, 100).check(new Probe() {\n-\n-      @Override\n-      public boolean isSatisfied() {\n-        return p.event != null;\n-      }\n-\n-      @Override\n-      public String describeFailure() {\n-        return \"flow event never set by the source flow\";\n-      }\n-    }));\n-  }\n-\n-  @Test\n-  @Description(\"Verifies that no events are processed when the scheduler is disabled\")\n-  @Issue(\"MULE-18063\")\n-  public void simplePollDisabledWithScheduler() throws Exception {\n-    String wasDisabled = setProperty(MULE_DISABLE_SCHEDULERS, \"true\");\n-    try {\n-      pollAndAssertWith(p -> new PollingProber(RECEIVE_TIMEOUT, 100).check(new Probe() {\n-\n-        @Override\n-        public boolean isSatisfied() {\n-          return p.event == null;\n-        }\n-\n-        @Override\n-        public String describeFailure() {\n-          return \"unexpected event when scheduler is disabled\";\n-        }\n-      }));\n-    } finally {\n-      setProperty(MULE_DISABLE_SCHEDULERS, wasDisabled != null ? wasDisabled : \"false\");\n-    }\n-  }\n-\n-  @Test\n-  public void disposeScheduler() throws Exception {\n-    AtomicReference<Scheduler> pollScheduler = new AtomicReference<>();\n-\n-    SchedulerService schedulerService = mockSchedulerService(pollScheduler);\n-\n-    DefaultSchedulerMessageSource schedulerMessageSource = createMessageSource();\n-\n-    verify(schedulerService).cpuLightScheduler();\n-\n-    schedulerMessageSource.start();\n-\n-    verify(pollScheduler.get()).scheduleAtFixedRate(any(), anyLong(), anyLong(), any());\n-\n-    schedulerMessageSource.stop();\n-    schedulerMessageSource.dispose();\n-\n-    verify(pollScheduler.get()).stop();\n-  }\n-\n-  @Test\n-  @Description(\"Verifies that a disabled scheduler is neither initialized nor disposed\")\n-  @Issue(\"MULE-18063\")\n-  public void disposeDisabledScheduler() throws Exception {\n-\n-    String wasDisabled = setProperty(MULE_DISABLE_SCHEDULERS, \"true\");\n-\n-    try {\n-      AtomicReference<Scheduler> pollScheduler = new AtomicReference<>();\n-\n-      SchedulerService schedulerService = mockSchedulerService(pollScheduler);\n-\n-      DefaultSchedulerMessageSource schedulerMessageSource = createMessageSource();\n-\n-      verify(schedulerService, never()).cpuLightScheduler();\n-\n-      schedulerMessageSource.start();\n-\n-      assertThat(pollScheduler.get(), is(nullValue()));\n-\n-      schedulerMessageSource.stop();\n-      schedulerMessageSource.dispose();\n-\n-      assertThat(pollScheduler.get(), is(nullValue()));\n-    } finally {\n-      setProperty(MULE_DISABLE_SCHEDULERS, wasDisabled != null ? wasDisabled : \"false\");\n-    }\n-  }\n-\n-  private DefaultSchedulerMessageSource schedulerMessageSource;\n-\n-  @After\n-  public void after() throws MuleException {\n-    stopIfNeeded(schedulerMessageSource);\n-    disposeIfNeeded(schedulerMessageSource, LOGGER);\n-  }\n-\n-  private DefaultSchedulerMessageSource createMessageSource() throws Exception {\n-    schedulerMessageSource =\n-        new DefaultSchedulerMessageSource(muleContext, scheduler(), false);\n-    schedulerMessageSource.setAnnotations(getAppleFlowComponentLocationAnnotations());\n-\n-    // Manually create and register flow\n-    Flow flow = createFlowWithSource(muleContext, APPLE_FLOW, schedulerMessageSource);\n-    when(componentLocator.find(Location.builder().globalName(APPLE_FLOW).build())).thenReturn(of(flow));\n-    // scheduler source is initialized when it's registered as the flow's source in the registry\n-    ((DefaultMuleContext) muleContext).getRegistry().registerFlowConstruct(flow);\n-\n-    // Injecting processing manager dependency\n-    muleContext.getInjector().inject(schedulerMessageSource);\n-    return schedulerMessageSource;\n-  }\n-\n-  private FixedFrequencyScheduler scheduler() {\n-    FixedFrequencyScheduler factory = new FixedFrequencyScheduler();\n-    factory.setFrequency(1000);\n-    return factory;\n-  }\n-\n-  private void pollAndAssertWith(Consumer<SensingNullMessageProcessor> validate) throws Exception {\n-    DefaultSchedulerMessageSource schedulerMessageSource = createMessageSource();\n-\n-    SensingNullMessageProcessor flow = getSensingNullMessageProcessor();\n-    schedulerMessageSource.setListener(flow);\n-    schedulerMessageSource.setAnnotations(singletonMap(LOCATION_KEY, TEST_CONNECTOR_LOCATION));\n-\n-    doAnswer(invocationOnMock -> {\n-      CoreEvent inputEvent = invocationOnMock.getArgument(0);\n-      flow.process(inputEvent);\n-      return null;\n-    }).when(sourcePolicy).process(any(CoreEvent.class), any(), any());\n-\n-    schedulerMessageSource.trigger();\n-\n-    // let some time before making the assertion to avoid assert before the scheduler start\n-    MILLISECONDS.sleep(100);\n-\n-    validate.accept(flow);\n-  }\n-\n-  public SchedulerService mockSchedulerService(AtomicReference<Scheduler> pollScheduler) throws Exception {\n-    SchedulerService schedulerService = muleContext.getSchedulerService();\n-    reset(schedulerService);\n-\n-    doAnswer(invocation -> {\n-      Scheduler scheduler = (Scheduler) invocation.callRealMethod();\n-      pollScheduler.set(scheduler);\n-      return scheduler;\n-    }).when(schedulerService).cpuLightScheduler();\n-\n-    return schedulerService;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyODQwOQ==", "url": "https://github.com/mulesoft/mule/pull/8655#discussion_r380328409", "bodyText": "make this static and read the value on initialization", "author": "elrodro83", "createdAt": "2020-02-17T18:48:36Z", "path": "core/src/main/java/org/mule/runtime/core/internal/source/scheduler/DefaultSchedulerMessageSource.java", "diffHunk": "@@ -63,6 +66,7 @@\n \n   private final PeriodicScheduler scheduler;\n   private final boolean disallowConcurrentExecution;\n+  private final boolean disabled;", "originalCommit": "4a91c8786cb21862e12b64f9f52fe73d8cce24d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "103a563e8eeeddba3e2f691b76abfc690cd1ab5e", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/source/scheduler/DefaultSchedulerMessageSource.java b/core/src/main/java/org/mule/runtime/core/internal/source/scheduler/DefaultSchedulerMessageSource.java\nindex 8f37b245ad5..ed33d58343d 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/source/scheduler/DefaultSchedulerMessageSource.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/source/scheduler/DefaultSchedulerMessageSource.java\n\n@@ -66,7 +66,7 @@ public class DefaultSchedulerMessageSource extends AbstractComponent\n \n   private final PeriodicScheduler scheduler;\n   private final boolean disallowConcurrentExecution;\n-  private final boolean disabled;\n+  private static boolean disabled = parseBoolean(getProperty(MULE_DISABLE_SCHEDULERS));\n \n   private Scheduler pollingExecutor;\n   private ScheduledFuture<?> schedulingJob;\n"}}, {"oid": "103a563e8eeeddba3e2f691b76abfc690cd1ab5e", "url": "https://github.com/mulesoft/mule/commit/103a563e8eeeddba3e2f691b76abfc690cd1ab5e", "message": "Change instance variable to class variable", "committedDate": "2020-02-17T19:52:08Z", "type": "commit"}, {"oid": "aba8bb00701f4e23c73fe959dc9f7dd6809b8f68", "url": "https://github.com/mulesoft/mule/commit/aba8bb00701f4e23c73fe959dc9f7dd6809b8f68", "message": "Change scheduler tests behavior", "committedDate": "2020-02-17T19:58:02Z", "type": "commit"}]}