{"pr_number": 8925, "pr_title": "MULE-18492: Classloader for policy plugin used for serialization is not the actual classloader", "pr_createdAt": "2020-06-15T21:28:31Z", "pr_url": "https://github.com/mulesoft/mule/pull/8925", "timeline": [{"oid": "9d2d8bfd2813c85f545fd1e31bd589f279614d89", "url": "https://github.com/mulesoft/mule/commit/9d2d8bfd2813c85f545fd1e31bd589f279614d89", "message": "test case to reproduce bug", "committedDate": "2020-06-15T14:26:28Z", "type": "commit"}, {"oid": "ffb3edb8b439a00554405becc421d86579bfbf28", "url": "https://github.com/mulesoft/mule/commit/ffb3edb8b439a00554405becc421d86579bfbf28", "message": "fix", "committedDate": "2020-06-15T21:01:46Z", "type": "commit"}, {"oid": "5e650e289ad91ef792f4de8a374fea7b1a8ab72c", "url": "https://github.com/mulesoft/mule/commit/5e650e289ad91ef792f4de8a374fea7b1a8ab72c", "message": "improve tests", "committedDate": "2020-06-15T21:18:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzNDA3OA==", "url": "https://github.com/mulesoft/mule/pull/8925#discussion_r440834078", "bodyText": "Remove unused parameters: application, descriptor and policyClassLoader", "author": "mlischetti", "createdAt": "2020-06-16T13:06:50Z", "path": "modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/policy/DefaultPolicyTemplateFactory.java", "diffHunk": "@@ -62,51 +62,64 @@ public DefaultPolicyTemplateFactory(PolicyTemplateClassLoaderBuilderFactory poli\n \n   @Override\n   public PolicyTemplate createArtifact(Application application, PolicyTemplateDescriptor descriptor) {\n+    MuleDeployableArtifactClassLoader ownPolicyClassLoader;\n     MuleDeployableArtifactClassLoader policyClassLoader;\n \n-    List<ArtifactPluginDescriptor> resolvedPolicyPluginsDescriptors = resolvePolicyPluginDescriptors(application, descriptor);\n+    final List<ArtifactPluginDescriptor> resolvedPolicyPluginsDescriptors =\n+        resolvePolicyPluginDescriptors(application, descriptor);\n+    final List<ArtifactPluginDescriptor> ownResolvedPluginDescriptors =\n+        pluginDependenciesResolver.resolve(emptySet(), new ArrayList<>(descriptor.getPlugins()), false);\n \n     try {\n+      ownPolicyClassLoader = policyTemplateClassLoaderBuilderFactory.createArtifactClassLoaderBuilder()\n+          .addArtifactPluginDescriptors(ownResolvedPluginDescriptors\n+              .toArray(new ArtifactPluginDescriptor[ownResolvedPluginDescriptors.size()]))\n+          .setParentClassLoader(application.getRegionClassLoader()).setArtifactDescriptor(descriptor).build();\n+\n+      // This classloader needs to be created after ownPolicyClassLoader so its inner classloaders override the entries in the\n+      // ClassLoaderRepository for the application\n       policyClassLoader = policyTemplateClassLoaderBuilderFactory.createArtifactClassLoaderBuilder()\n           .addArtifactPluginDescriptors(resolvedPolicyPluginsDescriptors\n               .toArray(new ArtifactPluginDescriptor[resolvedPolicyPluginsDescriptors.size()]))\n           .setParentClassLoader(application.getRegionClassLoader()).setArtifactDescriptor(descriptor).build();\n     } catch (IOException e) {\n       throw new PolicyTemplateCreationException(createPolicyTemplateCreationErrorMessage(descriptor.getName()), e);\n     }\n+\n     application.getRegionClassLoader().addClassLoader(policyClassLoader, NULL_CLASSLOADER_FILTER);\n \n     List<ArtifactPlugin> artifactPlugins = createArtifactPluginList(policyClassLoader, resolvedPolicyPluginsDescriptors);\n+\n+    validateArtifactLicense(policyClassLoader.getClassLoader(), artifactPlugins, licenseValidator);\n+\n     return new DefaultPolicyTemplate(policyClassLoader.getArtifactId(), descriptor, policyClassLoader,\n                                      artifactPlugins,\n-                                     resolveOwnArtifactPlugins(application, descriptor, policyClassLoader, artifactPlugins));\n+                                     resolveOwnArtifactPlugins(application, descriptor, policyClassLoader, artifactPlugins,\n+                                                               ownResolvedPluginDescriptors, ownPolicyClassLoader));\n   }\n \n   // Need all the plugins that the policy itself depends on, while keeping a relationship with the appropriate classloader.\n   private List<ArtifactPlugin> resolveOwnArtifactPlugins(Application application, PolicyTemplateDescriptor descriptor,\n                                                          MuleDeployableArtifactClassLoader policyClassLoader,\n-                                                         List<ArtifactPlugin> artifactPlugins) {\n+                                                         List<ArtifactPlugin> artifactPlugins,", "originalCommit": "5e650e289ad91ef792f4de8a374fea7b1a8ab72c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "870f8fa952f573737b2e87fdcd50df9aca89a33e", "chunk": "diff --git a/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/policy/DefaultPolicyTemplateFactory.java b/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/policy/DefaultPolicyTemplateFactory.java\nindex d04c7659bab..8f1db496728 100644\n--- a/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/policy/DefaultPolicyTemplateFactory.java\n+++ b/modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/policy/DefaultPolicyTemplateFactory.java\n\n@@ -94,14 +94,12 @@ public class DefaultPolicyTemplateFactory implements PolicyTemplateFactory {\n \n     return new DefaultPolicyTemplate(policyClassLoader.getArtifactId(), descriptor, policyClassLoader,\n                                      artifactPlugins,\n-                                     resolveOwnArtifactPlugins(application, descriptor, policyClassLoader, artifactPlugins,\n-                                                               ownResolvedPluginDescriptors, ownPolicyClassLoader));\n+                                     resolveOwnArtifactPlugins(artifactPlugins, ownResolvedPluginDescriptors,\n+                                                               ownPolicyClassLoader));\n   }\n \n   // Need all the plugins that the policy itself depends on, while keeping a relationship with the appropriate classloader.\n-  private List<ArtifactPlugin> resolveOwnArtifactPlugins(Application application, PolicyTemplateDescriptor descriptor,\n-                                                         MuleDeployableArtifactClassLoader policyClassLoader,\n-                                                         List<ArtifactPlugin> artifactPlugins,\n+  private List<ArtifactPlugin> resolveOwnArtifactPlugins(List<ArtifactPlugin> artifactPlugins,\n                                                          List<ArtifactPluginDescriptor> ownResolvedPluginDescriptors,\n                                                          MuleDeployableArtifactClassLoader ownPolicyClassLoader) {\n     final Map<String, ArtifactPlugin> ownArtifactPlugins = new HashMap<>();\n"}}, {"oid": "870f8fa952f573737b2e87fdcd50df9aca89a33e", "url": "https://github.com/mulesoft/mule/commit/870f8fa952f573737b2e87fdcd50df9aca89a33e", "message": "review", "committedDate": "2020-06-16T13:12:21Z", "type": "commit"}]}