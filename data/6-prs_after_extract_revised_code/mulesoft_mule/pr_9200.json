{"pr_number": 9200, "pr_title": "MULE-18451: Replace ComponentModel with an object provided by the AST", "pr_createdAt": "2020-08-12T13:26:57Z", "pr_url": "https://github.com/mulesoft/mule/pull/9200", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NTEwOQ==", "url": "https://github.com/mulesoft/mule/pull/9200#discussion_r470145109", "bodyText": "add proper issue", "author": "elrodro83", "createdAt": "2020-08-13T18:00:24Z", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/nb/NonBlockingOperationsTestCase.java", "diffHunk": "@@ -68,7 +68,11 @@ public void failingNonBlockingConnectedOperationThrownInsteadOfCallback() throws\n   @Test\n   public void failingNonBlockingConnectedOperation() throws Exception {\n     expectedException.expectFailingComponent(is(locator\n-        .find(Location.builder().globalName(\"fireMissile\").addProcessorsPart().addIndexPart(1).build()).get()));\n+        .find(Location.builder().globalName(\"fireMissile\").addProcessorsPart()\n+            // TODO MULE-XXXXX adjust accordingly", "originalCommit": "eb5db839ccb5af0fbef35ed528bb24ed0e6222bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b52b5b82f891339f0f1380454ee3277aaded34bb", "chunk": "diff --git a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/nb/NonBlockingOperationsTestCase.java b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/nb/NonBlockingOperationsTestCase.java\nindex 305494014b8..f3d9be06838 100644\n--- a/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/nb/NonBlockingOperationsTestCase.java\n+++ b/modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/nb/NonBlockingOperationsTestCase.java\n\n@@ -69,7 +69,7 @@ public class NonBlockingOperationsTestCase extends AbstractExtensionFunctionalTe\n   public void failingNonBlockingConnectedOperation() throws Exception {\n     expectedException.expectFailingComponent(is(locator\n         .find(Location.builder().globalName(\"fireMissile\").addProcessorsPart()\n-            // TODO MULE-XXXXX adjust accordingly\n+            // TODO MULE-18565 adjust accordingly\n             .addIndexPart(0)\n             .build())\n         .get()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5Mjk5OA==", "url": "https://github.com/mulesoft/mule/pull/9200#discussion_r470192998", "bodyText": "Remove necessary code", "author": "mlischetti", "createdAt": "2020-08-13T19:22:36Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ComponentModelReader.java", "diffHunk": "@@ -34,38 +40,83 @@ public ComponentModelReader(ConfigurationPropertiesResolver configurationPropert\n     this.configurationPropertiesResolver = configurationPropertiesResolver;\n   }\n \n-  public ComponentAst extractComponentDefinitionModel(ConfigLine configLine, String configFileName) {\n+  public void extractComponentDefinitionModel(ConfigLine configLine, String configFileName,\n+                                              ComponentAstBuilder componentAstBuilder) {\n \n     String namespace = configLine.getNamespace() == null ? CORE_PREFIX : configLine.getNamespace();\n     String namespaceUri = configLine.getNamespaceUri() == null ? DslConstants.CORE_NAMESPACE : configLine.getNamespaceUri();\n-    ComponentModel.Builder builder = new ComponentModel.Builder()\n-        .setIdentifier(builder()\n-            .namespace(namespace)\n-            .namespaceUri(namespaceUri)\n-            .name(configLine.getIdentifier())\n-            .build())\n-        .setTextContent(resolveValueIfIsPlaceHolder(configLine.getTextContent()))\n-        .setConfigFileName(configFileName)\n-        .setLineNumber(configLine.getLineNumber())\n+\n+    ComponentMetadataAst.Builder metadataBuilder = ComponentMetadataAst.builder()\n+        .setFileName(configFileName)\n+        .setStartLine(configLine.getLineNumber())\n+        .setEndLine(configLine.getLineNumber())\n         .setStartColumn(configLine.getStartColumn())\n+        .setEndColumn(configLine.getStartColumn())\n         .setSourceCode(configLine.getSourceCode());\n-\n     configLine.getCustomAttributes()\n         .forEach((key, value) -> {\n-          builder.addCustomAttribute(key, value);\n+          QName qname = QName.valueOf(key);\n+\n+          if (isEmpty(qname.getNamespaceURI()) || NS_MULE_PARSER_METADATA.equals(qname.getNamespaceURI())) {\n+            metadataBuilder.putParserAttribute(qname.getLocalPart(), value);\n+          } else {\n+            metadataBuilder.putDocAttribute(qname.toString(), value.toString());\n+            if (NS_MULE_DOCUMENTATION.equals(qname.getNamespaceURI())) {\n+              // This is added for compatibility, since in previous versions the doc attributes were looked up without the\n+              // namespace.\n+              metadataBuilder.putDocAttribute(qname.getLocalPart(), value.toString());\n+            }\n+          }\n         });\n \n+    componentAstBuilder.withIdentifier(builder()\n+        .namespace(namespace)\n+        .namespaceUri(namespaceUri)\n+        .name(configLine.getIdentifier())\n+        .build())\n+        .withMetadata(metadataBuilder.build());\n+\n+    if (isNotBlank(configLine.getTextContent())) {\n+      componentAstBuilder.withRawParameter(BODY_RAW_PARAM_NAME, resolveValueIfIsPlaceHolder(configLine.getTextContent()));\n+    }\n+\n     for (SimpleConfigAttribute simpleConfigAttribute : configLine.getConfigAttributes().values()) {\n-      builder.addParameter(simpleConfigAttribute.getName(), resolveValueIfIsPlaceHolder(simpleConfigAttribute.getValue()),\n-                           simpleConfigAttribute.isValueFromSchema());\n+      componentAstBuilder.withRawParameter(simpleConfigAttribute.getName(),\n+                                           resolveValueIfIsPlaceHolder(simpleConfigAttribute.getValue()));\n     }\n \n-    List<ComponentAst> componentModels = configLine.getChildren().stream()\n-        .map(childConfigLine -> extractComponentDefinitionModel(childConfigLine, configFileName))\n-        .collect(toList());\n-    componentModels.stream()\n-        .forEach(componentDefinitionModel -> builder.addChildComponentModel((ComponentModel) componentDefinitionModel));\n-    return builder.build();\n+    // ComponentModel.Builder builder = new ComponentModel.Builder()\n+    // .setIdentifier(builder()", "originalCommit": "eb5db839ccb5af0fbef35ed528bb24ed0e6222bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b52b5b82f891339f0f1380454ee3277aaded34bb", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ComponentModelReader.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ComponentModelReader.java\nindex 37cd52fa0a0..8b6f6649b29 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ComponentModelReader.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ComponentModelReader.java\n\n@@ -85,38 +85,9 @@ public class ComponentModelReader {\n                                            resolveValueIfIsPlaceHolder(simpleConfigAttribute.getValue()));\n     }\n \n-    // ComponentModel.Builder builder = new ComponentModel.Builder()\n-    // .setIdentifier(builder()\n-    // .namespace(namespace)\n-    // .namespaceUri(namespaceUri)\n-    // .name(configLine.getIdentifier())\n-    // .build())\n-    // .setTextContent(resolveValueIfIsPlaceHolder(configLine.getTextContent()))\n-    // .setConfigFileName(configFileName)\n-    // .setLineNumber(configLine.getLineNumber())\n-    // .setStartColumn(configLine.getStartColumn())\n-    // .setSourceCode(configLine.getSourceCode());\n-    //\n-    // configLine.getCustomAttributes()\n-    // .forEach((key, value) -> {\n-    // builder.addCustomAttribute(key, value);\n-    // });\n-    //\n-    // for (SimpleConfigAttribute simpleConfigAttribute : configLine.getConfigAttributes().values()) {\n-    // builder.addParameter(simpleConfigAttribute.getName(), resolveValueIfIsPlaceHolder(simpleConfigAttribute.getValue()),\n-    // simpleConfigAttribute.isValueFromSchema());\n-    // }\n-\n     configLine.getChildren().stream()\n         .forEach(childConfigLine -> extractComponentDefinitionModel(childConfigLine, configFileName,\n                                                                     componentAstBuilder.addChildComponent()));\n-\n-    // List<ComponentAst> componentModels = configLine.getChildren().stream()\n-    // .map(childConfigLine -> extractComponentDefinitionModel(childConfigLine, configFileName))\n-    // .collect(toList());\n-    // componentModels.stream()\n-    // .forEach(componentDefinitionModel -> builder.addChildComponentModel((ComponentModel) componentDefinitionModel));\n-    // return builder.build();\n   }\n \n   private String resolveValueIfIsPlaceHolder(String value) {\n"}}, {"oid": "3dccdcb6411dd51515a8ded3f02af72ccfc1d4cf", "url": "https://github.com/mulesoft/mule/commit/3dccdcb6411dd51515a8ded3f02af72ccfc1d4cf", "message": "lalala", "committedDate": "2020-08-13T19:30:24Z", "type": "commit"}, {"oid": "ec55adea9f0372f5c6e1288fe9c5c97cf2f405ee", "url": "https://github.com/mulesoft/mule/commit/ec55adea9f0372f5c6e1288fe9c5c97cf2f405ee", "message": "cleanup", "committedDate": "2020-08-13T19:30:26Z", "type": "commit"}, {"oid": "2e278668cb00df50d633c8a468664661b4bace12", "url": "https://github.com/mulesoft/mule/commit/2e278668cb00df50d633c8a468664661b4bace12", "message": "?", "committedDate": "2020-08-13T19:30:28Z", "type": "commit"}, {"oid": "89f821c5f70ebcf1a7cb36821fc2611de4aa4a43", "url": "https://github.com/mulesoft/mule/commit/89f821c5f70ebcf1a7cb36821fc2611de4aa4a43", "message": "more cleanup", "committedDate": "2020-08-13T19:30:29Z", "type": "commit"}, {"oid": "b52b5b82f891339f0f1380454ee3277aaded34bb", "url": "https://github.com/mulesoft/mule/commit/b52b5b82f891339f0f1380454ee3277aaded34bb", "message": "review", "committedDate": "2020-08-13T19:39:07Z", "type": "commit"}, {"oid": "b52b5b82f891339f0f1380454ee3277aaded34bb", "url": "https://github.com/mulesoft/mule/commit/b52b5b82f891339f0f1380454ee3277aaded34bb", "message": "review", "committedDate": "2020-08-13T19:39:07Z", "type": "forcePushed"}, {"oid": "8ca6c51ed40051716b9e1d55fe4da6937731ee14", "url": "https://github.com/mulesoft/mule/commit/8ca6c51ed40051716b9e1d55fe4da6937731ee14", "message": "more review", "committedDate": "2020-08-13T20:00:03Z", "type": "commit"}, {"oid": "eb5db839ccb5af0fbef35ed528bb24ed0e6222bd", "url": "https://github.com/mulesoft/mule/commit/eb5db839ccb5af0fbef35ed528bb24ed0e6222bd", "message": "more cleanup", "committedDate": "2020-08-12T13:22:48Z", "type": "forcePushed"}, {"oid": "8ca6c51ed40051716b9e1d55fe4da6937731ee14", "url": "https://github.com/mulesoft/mule/commit/8ca6c51ed40051716b9e1d55fe4da6937731ee14", "message": "more review", "committedDate": "2020-08-13T20:00:03Z", "type": "forcePushed"}, {"oid": "b7ad001dccdc035e5aeee4d8933f024f63020198", "url": "https://github.com/mulesoft/mule/commit/b7ad001dccdc035e5aeee4d8933f024f63020198", "message": "format", "committedDate": "2020-08-13T21:13:15Z", "type": "commit"}]}