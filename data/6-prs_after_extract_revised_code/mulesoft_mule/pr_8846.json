{"pr_number": 8846, "pr_title": "MULE-18390: OutOfMemory while running MUnit tests", "pr_createdAt": "2020-05-07T16:51:04Z", "pr_url": "https://github.com/mulesoft/mule/pull/8846", "timeline": [{"oid": "e5e61be283c977f0956fded893e5a3ad037330e3", "url": "https://github.com/mulesoft/mule/commit/e5e61be283c977f0956fded893e5a3ad037330e3", "message": "added cache", "committedDate": "2020-05-07T12:44:36Z", "type": "commit"}, {"oid": "91f731399a833cf33625f90367a48dbbdf9cd033", "url": "https://github.com/mulesoft/mule/commit/91f731399a833cf33625f90367a48dbbdf9cd033", "message": "added tests", "committedDate": "2020-05-07T16:50:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTk0Mg==", "url": "https://github.com/mulesoft/mule/pull/8846#discussion_r421759942", "bodyText": "use a lamba", "author": "elrodro83", "createdAt": "2020-05-07T20:01:09Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java", "diffHunk": "@@ -34,16 +40,34 @@\n  */\n public class ObjectFactoryClassRepository {\n \n+  //This only works because the cache uses an identity hashCode() and equals() for keys when they are configured as weak.\n+  //(check com.github.benmanes.caffeine.cache.Caffeine.weakKeys javadoc)\n+  //If that is not the case, this will never work because we want to compare class loaders by instance.\n+  //The idea for this cache is to avoid the creation of multiple CompositeClassLoader s instances for the same delegates.\n+  //That is because CGLIB enhancer uses that classloader to define the enhanced class and every new instance loads\n+  //the same defined class over and over again, causing metaspace OOM in some scenarios.\n+  private final static LoadingCache<ClassLoader, ClassLoader> COMPOSITE_CL_CACHE = newBuilder()\n+      .weakKeys()\n+      .weakValues()\n+      .build(new CacheLoader<ClassLoader, ClassLoader>() {\n+\n+        @Nullable\n+        @Override\n+        public ClassLoader load(@NonNull ClassLoader key) throws Exception {\n+          return new CompositeClassLoader(ObjectFactoryClassRepository.class.getClassLoader(), key);", "originalCommit": "91f731399a833cf33625f90367a48dbbdf9cd033", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "564976883b5af3ba0fa4ac25a26dc0ecd77f5176", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java\nindex 4a9522c38f3..acc612baa9b 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java\n\n@@ -41,22 +41,15 @@ import org.springframework.beans.factory.SmartFactoryBean;\n public class ObjectFactoryClassRepository {\n \n   //This only works because the cache uses an identity hashCode() and equals() for keys when they are configured as weak.\n-  //(check com.github.benmanes.caffeine.cache.Caffeine.weakKeys javadoc)\n+  //(check com.github.benmanes.caffeine.cache.Caffeine.weakKeys javadoc).\n   //If that is not the case, this will never work because we want to compare class loaders by instance.\n-  //The idea for this cache is to avoid the creation of multiple CompositeClassLoader s instances for the same delegates.\n-  //That is because CGLIB enhancer uses that classloader to define the enhanced class and every new instance loads\n+  //The idea for this cache is to avoid the creation of multiple CompositeClassLoader instances with the same delegates.\n+  //That is because CGLIB enhancer uses the composite class loader to define the enhanced class and every new instance loads\n   //the same defined class over and over again, causing metaspace OOM in some scenarios.\n   private final static LoadingCache<ClassLoader, ClassLoader> COMPOSITE_CL_CACHE = newBuilder()\n       .weakKeys()\n       .weakValues()\n-      .build(new CacheLoader<ClassLoader, ClassLoader>() {\n-\n-        @Nullable\n-        @Override\n-        public ClassLoader load(@NonNull ClassLoader key) throws Exception {\n-          return new CompositeClassLoader(ObjectFactoryClassRepository.class.getClassLoader(), key);\n-        }\n-      });\n+      .build(cl -> new CompositeClassLoader(ObjectFactoryClassRepository.class.getClassLoader(), cl));\n \n   /**\n    * Retrieves a {@link Class} for the {@link ObjectFactory} defined by the {@code objectFactoryType} parameter. Once acquired the\n"}}, {"oid": "564976883b5af3ba0fa4ac25a26dc0ecd77f5176", "url": "https://github.com/mulesoft/mule/commit/564976883b5af3ba0fa4ac25a26dc0ecd77f5176", "message": "switched to lambda expression", "committedDate": "2020-05-08T12:00:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEyNDE1Ng==", "url": "https://github.com/mulesoft/mule/pull/8846#discussion_r422124156", "bodyText": "remove unused imports", "author": "elrodro83", "createdAt": "2020-05-08T12:50:03Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java", "diffHunk": "@@ -6,19 +6,25 @@\n  */\n package org.mule.runtime.config.internal.dsl.spring;\n \n+import static com.github.benmanes.caffeine.cache.Caffeine.newBuilder;\n import static net.sf.cglib.proxy.Enhancer.registerStaticCallbacks;\n import org.mule.runtime.core.internal.util.CompositeClassLoader;\n import org.mule.runtime.dsl.api.component.ComponentBuildingDefinition;\n import org.mule.runtime.dsl.api.component.ObjectFactory;\n import org.mule.runtime.dsl.api.component.ObjectTypeProvider;\n \n+import com.github.benmanes.caffeine.cache.CacheLoader;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n+\n import java.util.Optional;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n import net.sf.cglib.proxy.Callback;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.MethodInterceptor;\n+import org.checkerframework.checker.nullness.qual.NonNull;", "originalCommit": "564976883b5af3ba0fa4ac25a26dc0ecd77f5176", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a4d81be65226937db18252606478e4e8860e5f1", "chunk": "diff --git a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java\nindex acc612baa9b..a2a00fb0f94 100644\n--- a/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java\n+++ b/modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java\n\n@@ -13,7 +13,6 @@ import org.mule.runtime.dsl.api.component.ComponentBuildingDefinition;\n import org.mule.runtime.dsl.api.component.ObjectFactory;\n import org.mule.runtime.dsl.api.component.ObjectTypeProvider;\n \n-import com.github.benmanes.caffeine.cache.CacheLoader;\n import com.github.benmanes.caffeine.cache.LoadingCache;\n \n import java.util.Optional;\n"}}, {"oid": "0a4d81be65226937db18252606478e4e8860e5f1", "url": "https://github.com/mulesoft/mule/commit/0a4d81be65226937db18252606478e4e8860e5f1", "message": "removed unused import", "committedDate": "2020-05-08T13:13:17Z", "type": "commit"}]}