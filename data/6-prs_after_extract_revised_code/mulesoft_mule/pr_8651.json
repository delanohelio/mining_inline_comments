{"pr_number": 8651, "pr_title": "MULE-18064: Subscription context not propagated to error handlers", "pr_createdAt": "2020-02-17T16:21:33Z", "pr_url": "https://github.com/mulesoft/mule/pull/8651", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NzAwMw==", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380277003", "bodyText": "jdoc", "author": "fsgonz", "createdAt": "2020-02-17T16:29:25Z", "path": "tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tck.processor;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+import static reactor.core.publisher.Flux.from;\n+import static reactor.core.publisher.Mono.subscriberContext;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.processor.Processor;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+\n+import reactor.util.context.Context;\n+\n+public class ContextPropagationChecker implements Processor {", "originalCommit": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbbce637b764bb5977fdf4cde4cf124c0488fccd", "chunk": "diff --git a/tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java b/tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java\ndeleted file mode 100644\nindex 9c37bac8d17..00000000000\n--- a/tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.tck.processor;\n-\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.fail;\n-import static reactor.core.publisher.Flux.from;\n-import static reactor.core.publisher.Mono.subscriberContext;\n-\n-import org.mule.runtime.api.exception.MuleException;\n-import org.mule.runtime.core.api.event.CoreEvent;\n-import org.mule.runtime.core.api.processor.Processor;\n-\n-import java.util.function.Function;\n-\n-import org.reactivestreams.Publisher;\n-\n-import reactor.util.context.Context;\n-\n-public class ContextPropagationChecker implements Processor {\n-\n-  @Override\n-  public CoreEvent process(CoreEvent event) throws MuleException {\n-    fail(\"Need `apply` to be called instead of `process`.\");\n-    return event;\n-  }\n-\n-  @Override\n-  public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n-    return subscriberContext()\n-        .flatMapMany(ctx -> from(publisher)\n-            .doOnNext(e -> assertThat(ctx.getOrEmpty(\"ctxPropagated\").orElse(false), is(true))));\n-  }\n-\n-  public Function<Context, Context> contextPropagationFlag() {\n-    return ctx -> ctx.put(\"ctxPropagated\", true);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NzYwMg==", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380277602", "bodyText": "use a constant", "author": "fsgonz", "createdAt": "2020-02-17T16:30:28Z", "path": "tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tck.processor;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+import static reactor.core.publisher.Flux.from;\n+import static reactor.core.publisher.Mono.subscriberContext;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.processor.Processor;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+\n+import reactor.util.context.Context;\n+\n+public class ContextPropagationChecker implements Processor {\n+\n+  @Override\n+  public CoreEvent process(CoreEvent event) throws MuleException {\n+    fail(\"Need `apply` to be called instead of `process`.\");\n+    return event;\n+  }\n+\n+  @Override\n+  public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n+    return subscriberContext()\n+        .flatMapMany(ctx -> from(publisher)\n+            .doOnNext(e -> assertThat(ctx.getOrEmpty(\"ctxPropagated\").orElse(false), is(true))));\n+  }\n+\n+  public Function<Context, Context> contextPropagationFlag() {\n+    return ctx -> ctx.put(\"ctxPropagated\", true);", "originalCommit": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbbce637b764bb5977fdf4cde4cf124c0488fccd", "chunk": "diff --git a/tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java b/tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java\ndeleted file mode 100644\nindex 9c37bac8d17..00000000000\n--- a/tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java\n+++ /dev/null\n\n@@ -1,43 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.tck.processor;\n-\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.fail;\n-import static reactor.core.publisher.Flux.from;\n-import static reactor.core.publisher.Mono.subscriberContext;\n-\n-import org.mule.runtime.api.exception.MuleException;\n-import org.mule.runtime.core.api.event.CoreEvent;\n-import org.mule.runtime.core.api.processor.Processor;\n-\n-import java.util.function.Function;\n-\n-import org.reactivestreams.Publisher;\n-\n-import reactor.util.context.Context;\n-\n-public class ContextPropagationChecker implements Processor {\n-\n-  @Override\n-  public CoreEvent process(CoreEvent event) throws MuleException {\n-    fail(\"Need `apply` to be called instead of `process`.\");\n-    return event;\n-  }\n-\n-  @Override\n-  public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n-    return subscriberContext()\n-        .flatMapMany(ctx -> from(publisher)\n-            .doOnNext(e -> assertThat(ctx.getOrEmpty(\"ctxPropagated\").orElse(false), is(true))));\n-  }\n-\n-  public Function<Context, Context> contextPropagationFlag() {\n-    return ctx -> ctx.put(\"ctxPropagated\", true);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTMwMQ==", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380295301", "bodyText": "verify that the throwRef.get() is the appropriate mock exception.", "author": "fsgonz", "createdAt": "2020-02-17T17:08:54Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/exception/OnErrorPropagateHandlerTestCase.java", "diffHunk": "@@ -221,6 +231,29 @@ public void testMessageToStringNotCalledOnFailure() throws Exception {\n     onErrorPropagateHandler.handleException(mockException, muleEvent);\n   }\n \n+  @Test\n+  public void subscriberContextPropagation() throws MuleException {\n+    final ContextPropagationChecker contextPropagationChecker = new ContextPropagationChecker();\n+\n+    onErrorPropagateHandler\n+        .setMessageProcessors(singletonList(contextPropagationChecker));\n+\n+    initialiseIfNeeded(onErrorPropagateHandler, muleContext);\n+\n+    AtomicReference<Throwable> thownRef = new AtomicReference<>();\n+    final Consumer<Exception> router = onErrorPropagateHandler\n+        .router(pub -> Flux.from(pub)\n+            .subscriberContext(contextPropagationChecker.contextPropagationFlag()),\n+                e -> {\n+                },\n+                t -> thownRef.set(t));\n+\n+    when(mockException.getEvent()).thenReturn(muleEvent);\n+    router.accept(mockException);\n+\n+    assertThat(thownRef.get().getCause(), not(instanceOf(AssertionError.class)));", "originalCommit": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbbce637b764bb5977fdf4cde4cf124c0488fccd", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/exception/OnErrorPropagateHandlerTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/exception/OnErrorPropagateHandlerTestCase.java\nindex b972375da63..6ebbf1b748c 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/exception/OnErrorPropagateHandlerTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/exception/OnErrorPropagateHandlerTestCase.java\n\n@@ -231,29 +221,6 @@ public class OnErrorPropagateHandlerTestCase extends AbstractErrorHandlerTestCas\n     onErrorPropagateHandler.handleException(mockException, muleEvent);\n   }\n \n-  @Test\n-  public void subscriberContextPropagation() throws MuleException {\n-    final ContextPropagationChecker contextPropagationChecker = new ContextPropagationChecker();\n-\n-    onErrorPropagateHandler\n-        .setMessageProcessors(singletonList(contextPropagationChecker));\n-\n-    initialiseIfNeeded(onErrorPropagateHandler, muleContext);\n-\n-    AtomicReference<Throwable> thownRef = new AtomicReference<>();\n-    final Consumer<Exception> router = onErrorPropagateHandler\n-        .router(pub -> Flux.from(pub)\n-            .subscriberContext(contextPropagationChecker.contextPropagationFlag()),\n-                e -> {\n-                },\n-                t -> thownRef.set(t));\n-\n-    when(mockException.getEvent()).thenReturn(muleEvent);\n-    router.accept(mockException);\n-\n-    assertThat(thownRef.get().getCause(), not(instanceOf(AssertionError.class)));\n-  }\n-\n   private Processor createChagingEventMessageProcessor(final CoreEvent lastEventCreated) {\n     return event -> CoreEvent.builder(event)\n         .message(lastEventCreated.getMessage())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5Nzk2MQ==", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380297961", "bodyText": "Add a comment indicating why this was left (subscriber context is not propagated in the case of async)", "author": "fsgonz", "createdAt": "2020-02-17T17:15:36Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessorTestCase.java", "diffHunk": "@@ -145,6 +150,26 @@ public void processWithTx() throws Exception {\n     }\n   }\n \n+  @Test\n+  @Ignore(\"Does this case actually make sense?\")", "originalCommit": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbbce637b764bb5977fdf4cde4cf124c0488fccd", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessorTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessorTestCase.java\nindex 313ae292f60..793e7616b75 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessorTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessorTestCase.java\n\n@@ -150,26 +145,6 @@ public class AsyncDelegateMessageProcessorTestCase extends AbstractReactiveProce\n     }\n   }\n \n-  @Test\n-  @Ignore(\"Does this case actually make sense?\")\n-  public void subscriberContextPropagation() throws Exception {\n-    final ContextPropagationChecker contextPropagationChecker = new ContextPropagationChecker();\n-\n-    async = createAsyncDelegateMessageProcessor(newChain(empty(), contextPropagationChecker, target), flow);\n-    async.setAnnotations(getAppleFlowComponentLocationAnnotations());\n-    initialiseIfNeeded(async, true, muleContext);\n-    async.start();\n-\n-    final CoreEvent result = just(testEvent())\n-        .transform(async)\n-        .subscriberContext(contextPropagationChecker.contextPropagationFlag())\n-        .blockFirst();\n-\n-    assertThat(result, not(nullValue()));\n-    asyncEntryLatch.countDown();\n-    assertThat(latch.await(LOCK_TIMEOUT, MILLISECONDS), is(true));\n-  }\n-\n   @Test\n   public void processWithBlockingProcessingStrategy() throws Exception {\n     flow.dispose();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMzI5Mg==", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380303292", "bodyText": "duplicated code. Maybe this assertion should be unified. Verify if this can be done in all the tests.", "author": "fsgonz", "createdAt": "2020-02-17T17:29:36Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ChoiceRouterTestCase.java", "diffHunk": "@@ -144,6 +149,39 @@ public void failingRoute() throws Exception {\n     process(choiceRouter, zapEvent());\n   }\n \n+  @Test\n+  public void subscriberContextPropagation() throws MuleException {\n+    final ContextPropagationChecker contextPropagationChecker = new ContextPropagationChecker();\n+\n+    MessageProcessorChain mp = newChain(empty(), contextPropagationChecker);\n+    choiceRouter.addRoute(payloadZapExpression(), mp);\n+    initialise();\n+\n+    final CoreEvent result = just(zapEvent())", "originalCommit": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbbce637b764bb5977fdf4cde4cf124c0488fccd", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ChoiceRouterTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ChoiceRouterTestCase.java\nindex 8c019d2b847..6cf8795b033 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ChoiceRouterTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/routing/ChoiceRouterTestCase.java\n\n@@ -149,39 +144,6 @@ public class ChoiceRouterTestCase extends AbstractReactiveProcessorTestCase {\n     process(choiceRouter, zapEvent());\n   }\n \n-  @Test\n-  public void subscriberContextPropagation() throws MuleException {\n-    final ContextPropagationChecker contextPropagationChecker = new ContextPropagationChecker();\n-\n-    MessageProcessorChain mp = newChain(empty(), contextPropagationChecker);\n-    choiceRouter.addRoute(payloadZapExpression(), mp);\n-    initialise();\n-\n-    final CoreEvent result = just(zapEvent())\n-        .transform(choiceRouter)\n-        .subscriberContext(contextPropagationChecker.contextPropagationFlag())\n-        .blockFirst();\n-\n-    assertThat(result, not(nullValue()));\n-  }\n-\n-  @Test\n-  public void subscriberContextPropagationDefaultRoute() throws MuleException {\n-    final ContextPropagationChecker contextPropagationChecker = new ContextPropagationChecker();\n-\n-    MessageProcessorChain mp = newChain(empty(), contextPropagationChecker);\n-    choiceRouter.addRoute(payloadZapExpression(), event -> event);\n-    choiceRouter.setDefaultRoute(mp);\n-    initialise();\n-\n-    final CoreEvent result = just(fooEvent())\n-        .transform(choiceRouter)\n-        .subscriberContext(contextPropagationChecker.contextPropagationFlag())\n-        .blockFirst();\n-\n-    assertThat(result, not(nullValue()));\n-  }\n-\n   private void initialise() throws InitialisationException {\n     choiceRouter.setMuleContext(muleContext);\n     choiceRouter.initialise();\n"}}, {"oid": "bbbce637b764bb5977fdf4cde4cf124c0488fccd", "url": "https://github.com/mulesoft/mule/commit/bbbce637b764bb5977fdf4cde4cf124c0488fccd", "message": "basic", "committedDate": "2020-02-17T21:02:50Z", "type": "commit"}, {"oid": "5a5de1866a63cc417f9f7a66d9aef24a5662499c", "url": "https://github.com/mulesoft/mule/commit/5a5de1866a63cc417f9f7a66d9aef24a5662499c", "message": "more error handling", "committedDate": "2020-02-17T21:02:51Z", "type": "commit"}, {"oid": "491bfea377c3f2913bb5e8e781e8150b0c3e2e5c", "url": "https://github.com/mulesoft/mule/commit/491bfea377c3f2913bb5e8e781e8150b0c3e2e5c", "message": "more error handling 2", "committedDate": "2020-02-17T21:02:52Z", "type": "commit"}, {"oid": "e49fdfb01ee3c4e4cf95d4b6219acf5966aafc59", "url": "https://github.com/mulesoft/mule/commit/e49fdfb01ee3c4e4cf95d4b6219acf5966aafc59", "message": "MULE-XXXXX: Subscription context not propagated to error handlers\n\n* Also, add coverage for context propagation for routers/scopes", "committedDate": "2020-02-17T21:02:54Z", "type": "commit"}, {"oid": "92bde00b4a27cf42a5220788feffaf3316686c65", "url": "https://github.com/mulesoft/mule/commit/92bde00b4a27cf42a5220788feffaf3316686c65", "message": "self-review", "committedDate": "2020-02-17T21:02:55Z", "type": "commit"}, {"oid": "bdfd804db28755186256dfa062cf84a120ad1f89", "url": "https://github.com/mulesoft/mule/commit/bdfd804db28755186256dfa062cf84a120ad1f89", "message": "review", "committedDate": "2020-02-17T21:20:48Z", "type": "commit"}, {"oid": "bdfd804db28755186256dfa062cf84a120ad1f89", "url": "https://github.com/mulesoft/mule/commit/bdfd804db28755186256dfa062cf84a120ad1f89", "message": "review", "committedDate": "2020-02-17T21:20:48Z", "type": "forcePushed"}]}