{"pr_number": 9646, "pr_title": "MULE-18929: DefaultPolicyManager's activePolicies increases size for cache-expired policies", "pr_createdAt": "2020-10-26T20:09:37Z", "pr_url": "https://github.com/mulesoft/mule/pull/9646", "timeline": [{"oid": "da5276c044deea592524c5308eb7d841f136e5be", "url": "https://github.com/mulesoft/mule/commit/da5276c044deea592524c5308eb7d841f136e5be", "message": "fix", "committedDate": "2020-10-30T15:10:22Z", "type": "commit"}, {"oid": "065610eaa29df263887ca9f2a5085c9f7987f600", "url": "https://github.com/mulesoft/mule/commit/065610eaa29df263887ca9f2a5085c9f7987f600", "message": "fixup doc", "committedDate": "2020-10-30T15:11:00Z", "type": "commit"}, {"oid": "98a6a92d1da55eb2c800ea1e4d7bfe6c72b20cca", "url": "https://github.com/mulesoft/mule/commit/98a6a92d1da55eb2c800ea1e4d7bfe6c72b20cca", "message": "test case", "committedDate": "2020-10-30T15:44:46Z", "type": "commit"}, {"oid": "47350725ba4c260dcb7adc40b846f4d170d9e690", "url": "https://github.com/mulesoft/mule/commit/47350725ba4c260dcb7adc40b846f4d170d9e690", "message": "reduce time", "committedDate": "2020-10-30T15:46:44Z", "type": "commit"}, {"oid": "47350725ba4c260dcb7adc40b846f4d170d9e690", "url": "https://github.com/mulesoft/mule/commit/47350725ba4c260dcb7adc40b846f4d170d9e690", "message": "reduce time", "committedDate": "2020-10-30T15:46:44Z", "type": "forcePushed"}, {"oid": "b61d4b2767a24782112b403833678f7214ee2178", "url": "https://github.com/mulesoft/mule/commit/b61d4b2767a24782112b403833678f7214ee2178", "message": "static import", "committedDate": "2020-10-30T15:53:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3ODg3MA==", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515278870", "bodyText": "receive the unit as param es well", "author": "elrodro83", "createdAt": "2020-10-30T17:51:54Z", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "diffHunk": "@@ -463,6 +463,20 @@ private void disposeStalePolicies() {\n     }\n   }\n \n+  // Testing purposes\n+  void setOuterCachesExpireTime(int timeout) {", "originalCommit": "b61d4b2767a24782112b403833678f7214ee2178", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "053b2b828aef7182b8566d10376681e28d2c3062", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java b/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\nindex cd27c078647..00d16a69077 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\n\n@@ -464,12 +465,12 @@ public class DefaultPolicyManager implements PolicyManager, Lifecycle {\n   }\n \n   // Testing purposes\n-  void setOuterCachesExpireTime(int timeout) {\n+  void setOuterCachesExpireTime(int timeout, TimeUnit timeUnit) {\n     sourcePolicyOuterCache = Caffeine.newBuilder()\n-        .expireAfterAccess(timeout, SECONDS)\n+        .expireAfterAccess(timeout, timeUnit)\n         .build();\n     operationPolicyOuterCache = Caffeine.newBuilder()\n-        .expireAfterAccess(timeout, SECONDS)\n+        .expireAfterAccess(timeout, timeUnit)\n         .build();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTIzOQ==", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515279239", "bodyText": "this will throw an NPE if the abject was already collected", "author": "elrodro83", "createdAt": "2020-10-30T17:52:37Z", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "diffHunk": "@@ -476,5 +490,23 @@ public DeferredDisposableWeakReference(DeferredDisposable referent, ReferenceQue\n     public void dispose() {\n       deferredDispose.dispose();\n     }\n+\n+    /* MULE-18929: since outer cache has an expiring time but inner cache doesn't, we are could be creating\n+    * a new weak reference for the same policy. This will make that the activePolicies set will increase\n+    * its size for expired policies, unnecessary. Hence, overriding hashCode and equals methods to avoid having\n+    * more than one weak reference in the set */\n+    @Override\n+    public int hashCode() {\n+      return this.get().hashCode();", "originalCommit": "b61d4b2767a24782112b403833678f7214ee2178", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "053b2b828aef7182b8566d10376681e28d2c3062", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java b/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\nindex cd27c078647..00d16a69077 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\n\n@@ -480,10 +481,12 @@ public class DefaultPolicyManager implements PolicyManager, Lifecycle {\n   private static final class DeferredDisposableWeakReference extends WeakReference<DeferredDisposable> implements Disposable {\n \n     private final Disposable deferredDispose;\n+    private final int hash;\n \n     public DeferredDisposableWeakReference(DeferredDisposable referent, ReferenceQueue<? super DeferredDisposable> q) {\n       super(referent, q);\n       this.deferredDispose = referent.deferredDispose();\n+      this.hash = referent.hashCode();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTI4MA==", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515279280", "bodyText": "this will throw an NPE if the abject was already collected", "author": "elrodro83", "createdAt": "2020-10-30T17:52:40Z", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "diffHunk": "@@ -476,5 +490,23 @@ public DeferredDisposableWeakReference(DeferredDisposable referent, ReferenceQue\n     public void dispose() {\n       deferredDispose.dispose();\n     }\n+\n+    /* MULE-18929: since outer cache has an expiring time but inner cache doesn't, we are could be creating\n+    * a new weak reference for the same policy. This will make that the activePolicies set will increase\n+    * its size for expired policies, unnecessary. Hence, overriding hashCode and equals methods to avoid having\n+    * more than one weak reference in the set */\n+    @Override\n+    public int hashCode() {\n+      return this.get().hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (!(o instanceof DeferredDisposableWeakReference)) {\n+        return false;\n+      }\n+      return this.get().equals(((DeferredDisposableWeakReference) o).get());", "originalCommit": "b61d4b2767a24782112b403833678f7214ee2178", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "053b2b828aef7182b8566d10376681e28d2c3062", "chunk": "diff --git a/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java b/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\nindex cd27c078647..00d16a69077 100644\n--- a/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\n+++ b/core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java\n\n@@ -480,10 +481,12 @@ public class DefaultPolicyManager implements PolicyManager, Lifecycle {\n   private static final class DeferredDisposableWeakReference extends WeakReference<DeferredDisposable> implements Disposable {\n \n     private final Disposable deferredDispose;\n+    private final int hash;\n \n     public DeferredDisposableWeakReference(DeferredDisposable referent, ReferenceQueue<? super DeferredDisposable> q) {\n       super(referent, q);\n       this.deferredDispose = referent.deferredDispose();\n+      this.hash = referent.hashCode();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTk0NA==", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515279944", "bodyText": "should be same instance r just equals? make it explicit in the test", "author": "elrodro83", "createdAt": "2020-10-30T17:53:24Z", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/policy/DefaultPolicyManagerTestCase.java", "diffHunk": "@@ -440,6 +442,35 @@ public void cachesEvictedWhileLookingForPolicies() throws InterruptedException {\n     assertThat(policy2, instanceOf(NoSourcePolicy.class));\n   }\n \n+  @Test\n+  @Issue(\"MULE-18929\")\n+  public void cachesEvictedDoesntIncreaseActivePoliciesCount() throws InterruptedException {\n+    final Policy policy = mock(Policy.class, RETURNS_DEEP_STUBS);\n+    when(policyProvider.isSourcePoliciesAvailable()).thenReturn(true);\n+    when(policyProvider.findSourceParameterizedPolicies(any())).thenReturn(asList(policy));\n+    policiesChangeCallbackCaptor.getValue().run();\n+\n+    policyManager.setOuterCachesExpireTime(1);\n+\n+    InternalEvent event = mock(InternalEvent.class);\n+    SourcePolicyContext ctx = mock(SourcePolicyContext.class);\n+    when(event.getSourcePolicyContext()).thenReturn((EventInternalContext) ctx);\n+    when(ctx.getPointcutParameters()).thenReturn(mock(PolicyPointcutParameters.class));\n+\n+    when(policyProvider.findSourceParameterizedPolicies(any())).thenReturn(asList(policy));\n+\n+    final SourcePolicy policy1 = policyManager.createSourcePolicyInstance(flow1Component, event, ePub -> ePub,\n+                                                                          mock(MessageSourceResponseParametersProcessor.class));\n+\n+    sleep(1500);\n+\n+    final SourcePolicy policy2 = policyManager.createSourcePolicyInstance(flow1Component, event, ePub -> ePub,\n+                                                                          mock(MessageSourceResponseParametersProcessor.class));\n+\n+    assertThat(policy1, is(policy2));", "originalCommit": "b61d4b2767a24782112b403833678f7214ee2178", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5MjA2NQ==", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515292065", "bodyText": "Should be the same instance (which is what's creating this issue, actually)", "author": "mbuchwald", "createdAt": "2020-10-30T18:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "053b2b828aef7182b8566d10376681e28d2c3062", "chunk": "diff --git a/core-tests/src/test/java/org/mule/runtime/core/internal/policy/DefaultPolicyManagerTestCase.java b/core-tests/src/test/java/org/mule/runtime/core/internal/policy/DefaultPolicyManagerTestCase.java\nindex b7ba3a47a97..be27c9f15f8 100644\n--- a/core-tests/src/test/java/org/mule/runtime/core/internal/policy/DefaultPolicyManagerTestCase.java\n+++ b/core-tests/src/test/java/org/mule/runtime/core/internal/policy/DefaultPolicyManagerTestCase.java\n\n@@ -450,7 +450,7 @@ public class DefaultPolicyManagerTestCase extends AbstractMuleContextTestCase {\n     when(policyProvider.findSourceParameterizedPolicies(any())).thenReturn(asList(policy));\n     policiesChangeCallbackCaptor.getValue().run();\n \n-    policyManager.setOuterCachesExpireTime(1);\n+    policyManager.setOuterCachesExpireTime(1, SECONDS);\n \n     InternalEvent event = mock(InternalEvent.class);\n     SourcePolicyContext ctx = mock(SourcePolicyContext.class);\n"}}, {"oid": "053b2b828aef7182b8566d10376681e28d2c3062", "url": "https://github.com/mulesoft/mule/commit/053b2b828aef7182b8566d10376681e28d2c3062", "message": "review", "committedDate": "2020-10-30T18:20:31Z", "type": "commit"}]}