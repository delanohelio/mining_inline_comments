{"pr_number": 9464, "pr_title": "MULE-18799: com.hazelcast.map.impl.PartitionContainer[] causes OOM", "pr_createdAt": "2020-09-25T17:52:25Z", "pr_url": "https://github.com/mulesoft/mule/pull/9464", "timeline": [{"oid": "f5e58fd57a481eeb61b26df2a6e50040022b471d", "url": "https://github.com/mulesoft/mule/commit/f5e58fd57a481eeb61b26df2a6e50040022b471d", "message": "MULE-18799: com.hazelcast.map.impl.PartitionContainer[] causes OOM\n\nOverridden the way org.w3sc.dom.Node is serialized to prevent Leaks and also improve performance. It only applies to the ExpressionSplitter so far.", "committedDate": "2020-09-25T17:37:50Z", "type": "commit"}, {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822", "url": "https://github.com/mulesoft/mule/commit/f412da691eccef2c3eb753a69d417ad9d8459822", "message": "MULE-18799: com.hazelcast.map.impl.PartitionContainer[] causes OOM\n\nRemoved some Transformer configurations that were unnecessary.", "committedDate": "2020-09-25T17:50:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNjYzMw==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495926633", "bodyText": "static import", "author": "fsgonz", "createdAt": "2020-09-28T13:10:58Z", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {", "originalCommit": "f412da691eccef2c3eb753a69d417ad9d8459822", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d22fbb53f403bf543718e1bde428b30e9fbdfd40", "chunk": "diff --git a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\nindex 1a877ad3a2a..5f9c4d093e5 100644\n--- a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n+++ b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n\n@@ -19,18 +19,11 @@ import org.xml.sax.SAXException;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLStreamWriter;\n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.ObjectStreamException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyODM5NQ==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495928395", "bodyText": "Remove the but \"needed but because\"", "author": "fsgonz", "createdAt": "2020-09-28T13:13:35Z", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone", "originalCommit": "f412da691eccef2c3eb753a69d417ad9d8459822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MDk5Ng==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r496140996", "bodyText": "Changed it to: \"This ensures the CDATA is not transformed into a text node\"", "author": "pabloperalta", "createdAt": "2020-09-28T18:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyODM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d22fbb53f403bf543718e1bde428b30e9fbdfd40", "chunk": "diff --git a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\nindex 1a877ad3a2a..5f9c4d093e5 100644\n--- a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n+++ b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n\n@@ -19,18 +19,11 @@ import org.xml.sax.SAXException;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLStreamWriter;\n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.ObjectStreamException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyOTU1NQ==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495929555", "bodyText": "static import if possible", "author": "fsgonz", "createdAt": "2020-09-28T13:15:17Z", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {\n+        this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + CDATA_OPEN + node.getNodeValue() + CDATA_CLOSE + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+        return this;\n+      }\n+\n+      // Create and setup transformer\n+      Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+      transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+\n+      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");", "originalCommit": "f412da691eccef2c3eb753a69d417ad9d8459822", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d22fbb53f403bf543718e1bde428b30e9fbdfd40", "chunk": "diff --git a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\nindex 1a877ad3a2a..5f9c4d093e5 100644\n--- a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n+++ b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n\n@@ -19,18 +19,11 @@ import org.xml.sax.SAXException;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLStreamWriter;\n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.ObjectStreamException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyOTYzNg==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495929636", "bodyText": "static import if possible", "author": "fsgonz", "createdAt": "2020-09-28T13:15:24Z", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {\n+        this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + CDATA_OPEN + node.getNodeValue() + CDATA_CLOSE + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+        return this;\n+      }\n+\n+      // Create and setup transformer\n+      Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+      transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");", "originalCommit": "f412da691eccef2c3eb753a69d417ad9d8459822", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d22fbb53f403bf543718e1bde428b30e9fbdfd40", "chunk": "diff --git a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\nindex 1a877ad3a2a..5f9c4d093e5 100644\n--- a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n+++ b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n\n@@ -19,18 +19,11 @@ import org.xml.sax.SAXException;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLStreamWriter;\n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.ObjectStreamException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNDE2Ng==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495934166", "bodyText": "add jdoc with reference to MULE explaining the problem and fix.", "author": "fsgonz", "createdAt": "2020-09-28T13:22:00Z", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {", "originalCommit": "f412da691eccef2c3eb753a69d417ad9d8459822", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MTIzMg==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r496141232", "bodyText": "Added a JDoc with an explanation", "author": "pabloperalta", "createdAt": "2020-09-28T18:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNDE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d22fbb53f403bf543718e1bde428b30e9fbdfd40", "chunk": "diff --git a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\nindex 1a877ad3a2a..5f9c4d093e5 100644\n--- a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n+++ b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n\n@@ -19,18 +19,11 @@ import org.xml.sax.SAXException;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLStreamWriter;\n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.ObjectStreamException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNDkxOA==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495934918", "bodyText": "use static import", "author": "fsgonz", "createdAt": "2020-09-28T13:23:04Z", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {\n+        this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + CDATA_OPEN + node.getNodeValue() + CDATA_CLOSE + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+        return this;\n+      }\n+\n+      // Create and setup transformer\n+      Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+      transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+\n+      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+\n+      // Turn the node into a string\n+      StringWriter writer = new StringWriter();\n+      transformer.transform(new DOMSource(getSerializingNode(node)), new StreamResult(writer));\n+\n+      this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + writer.toString() + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+      return this;\n+    } catch (TransformerException e) {\n+      throw new WriteAbortedException(\"Error while serializing Dom object\", e);\n+    }\n+  }\n+\n+  private Object readResolve() throws ObjectStreamException {\n+    try {\n+      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+      DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+      Document parse = dBuilder.parse(new ByteArrayInputStream(this.nodeAsString.getBytes()));\n+      this.node = getDeserializingNode(parse.getFirstChild());\n+    } catch (SAXException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    } catch (IOException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    } catch (ParserConfigurationException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    }\n+\n+    return this;\n+  }\n+\n+  private Node getSerializingNode(Node node) {\n+    switch (node.getNodeType()) {\n+      case Node.ATTRIBUTE_NODE:", "originalCommit": "f412da691eccef2c3eb753a69d417ad9d8459822", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d22fbb53f403bf543718e1bde428b30e9fbdfd40", "chunk": "diff --git a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\nindex 1a877ad3a2a..5f9c4d093e5 100644\n--- a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n+++ b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n\n@@ -19,18 +19,11 @@ import org.xml.sax.SAXException;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLStreamWriter;\n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.ObjectStreamException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNTAyOA==", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495935028", "bodyText": "use static import", "author": "fsgonz", "createdAt": "2020-09-28T13:23:11Z", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {\n+        this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + CDATA_OPEN + node.getNodeValue() + CDATA_CLOSE + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+        return this;\n+      }\n+\n+      // Create and setup transformer\n+      Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+      transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+\n+      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+\n+      // Turn the node into a string\n+      StringWriter writer = new StringWriter();\n+      transformer.transform(new DOMSource(getSerializingNode(node)), new StreamResult(writer));\n+\n+      this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + writer.toString() + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+      return this;\n+    } catch (TransformerException e) {\n+      throw new WriteAbortedException(\"Error while serializing Dom object\", e);\n+    }\n+  }\n+\n+  private Object readResolve() throws ObjectStreamException {\n+    try {\n+      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+      DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+      Document parse = dBuilder.parse(new ByteArrayInputStream(this.nodeAsString.getBytes()));\n+      this.node = getDeserializingNode(parse.getFirstChild());\n+    } catch (SAXException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    } catch (IOException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    } catch (ParserConfigurationException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    }\n+\n+    return this;\n+  }\n+\n+  private Node getSerializingNode(Node node) {\n+    switch (node.getNodeType()) {\n+      case Node.ATTRIBUTE_NODE:\n+        return ((Attr) this.node).getOwnerElement();\n+      default:\n+        return this.node;\n+    }\n+  }\n+\n+  private Node getDeserializingNode(Node node) {\n+    switch (nodeType) {\n+      case Node.ATTRIBUTE_NODE:", "originalCommit": "f412da691eccef2c3eb753a69d417ad9d8459822", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d22fbb53f403bf543718e1bde428b30e9fbdfd40", "chunk": "diff --git a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\nindex 1a877ad3a2a..5f9c4d093e5 100644\n--- a/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n+++ b/core/src/main/java/org/mule/serialization/internal/NodeWrapper.java\n\n@@ -19,18 +19,11 @@ import org.xml.sax.SAXException;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLStreamWriter;\n-import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.ObjectStreamException;\n"}}, {"oid": "d22fbb53f403bf543718e1bde428b30e9fbdfd40", "url": "https://github.com/mulesoft/mule/commit/d22fbb53f403bf543718e1bde428b30e9fbdfd40", "message": "MULE-18799: com.hazelcast.map.impl.PartitionContainer[] causes OOM\n\nAdded some static imports.\nAdded a Jdoc for NodeWrapper.\nAdded a test for Processing instruction (required no change in productive code)", "committedDate": "2020-09-28T17:51:39Z", "type": "commit"}, {"oid": "5935db9d56b6d58ca6bca7fe87d600474e7cd022", "url": "https://github.com/mulesoft/mule/commit/5935db9d56b6d58ca6bca7fe87d600474e7cd022", "message": "MULE-18799: com.hazelcast.map.impl.PartitionContainer[] causes OOM\n\nModified comment in writeReplace", "committedDate": "2020-09-28T18:01:16Z", "type": "commit"}]}