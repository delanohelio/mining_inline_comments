{"pr_number": 2227, "pr_title": "Fix aero ammo explosion rep", "pr_createdAt": "2020-09-21T05:10:45Z", "pr_url": "https://github.com/MegaMek/megamek/pull/2227", "timeline": [{"oid": "0afb3ce816808592dbab86b4c4bd7ae04a4d7b7f", "url": "https://github.com/MegaMek/megamek/commit/0afb3ce816808592dbab86b4c4bd7ae04a4d7b7f", "message": "fix and code extraction", "committedDate": "2020-09-21T05:06:38Z", "type": "commit"}, {"oid": "c8d7b92c6813e21190c7a952e16dd424860b5f6d", "url": "https://github.com/MegaMek/megamek/commit/c8d7b92c6813e21190c7a952e16dd424860b5f6d", "message": "Merge branch 'master' of https://github.com/MegaMek/megamek into fix_aero_ammo_explosion_rep", "committedDate": "2020-09-21T05:06:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NjU2MQ==", "url": "https://github.com/MegaMek/megamek/pull/2227#discussion_r491796561", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n          \n          \n            \n                    if (game.getEntity(entity.getTransportId()) instanceof FighterSquadron) {", "author": "Windchild292", "createdAt": "2020-09-21T05:12:59Z", "path": "megamek/src/megamek/server/ServerHelper.java", "diffHunk": "@@ -48,4 +61,338 @@ public static boolean infantryInOpen(Entity te, IHex te_hex, IGame game,\n         \n         return false;\n     }\n+    \n+    /**\n+     * Worker function that handles heat as applied to aerospace fighter\n+     */\n+    public static void resolveAeroHeat(IGame game, Entity entity, Vector<Report> vPhaseReport, Vector<Report> rhsReports, \n+            int radicalHSBonus, int hotDogMod, Server s) {\n+        Report r;\n+        \n+        // If this aero is part of a squadron, we will deal with its\n+        // heat with the fighter squadron\n+        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {", "originalCommit": "c8d7b92c6813e21190c7a952e16dd424860b5f6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "03b1f869b67ed7743e3cd7ac7bf31839fd8b3845", "chunk": "diff --git a/megamek/src/megamek/server/ServerHelper.java b/megamek/src/megamek/server/ServerHelper.java\nindex e685625f1f..6d8f25249e 100644\n--- a/megamek/src/megamek/server/ServerHelper.java\n+++ b/megamek/src/megamek/server/ServerHelper.java\n\n@@ -71,7 +71,7 @@ public class ServerHelper {\n         \n         // If this aero is part of a squadron, we will deal with its\n         // heat with the fighter squadron\n-        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n+        if (game.getEntity(entity.getTransportId()) instanceof FighterSquadron) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5Njc4Mw==", "url": "https://github.com/MegaMek/megamek/pull/2227#discussion_r491796783", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if ((entity.heat < 14) && !(entity.isManualShutdown())) {\n          \n          \n            \n                            if ((entity.heat < 14) && !entity.isManualShutdown()) {", "author": "Windchild292", "createdAt": "2020-09-21T05:14:04Z", "path": "megamek/src/megamek/server/ServerHelper.java", "diffHunk": "@@ -48,4 +61,338 @@ public static boolean infantryInOpen(Entity te, IHex te_hex, IGame game,\n         \n         return false;\n     }\n+    \n+    /**\n+     * Worker function that handles heat as applied to aerospace fighter\n+     */\n+    public static void resolveAeroHeat(IGame game, Entity entity, Vector<Report> vPhaseReport, Vector<Report> rhsReports, \n+            int radicalHSBonus, int hotDogMod, Server s) {\n+        Report r;\n+        \n+        // If this aero is part of a squadron, we will deal with its\n+        // heat with the fighter squadron\n+        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n+            return;\n+        }\n+\n+        // should we even bother?\n+        if (entity.isDestroyed() || entity.isDoomed()\n+            || entity.getCrew().isDoomed()\n+            || entity.getCrew().isDead()) {\n+            return;\n+        }\n+\n+        // engine hits add a lot of heat, provided the engine is on\n+        entity.heatBuildup += entity.getEngineCritHeat();\n+\n+        // If an Aero had an active Stealth suite, add 10 heat.\n+        if (entity.isStealthOn()) {\n+            entity.heatBuildup += 10;\n+            r = new Report(5015);\n+            r.subject = entity.getId();\n+            vPhaseReport.add(r);\n+        }\n+\n+        // Combat computers help manage heat\n+        if (entity.hasQuirk(OptionsConstants.QUIRK_POS_COMBAT_COMPUTER)) {\n+            int reduce = Math.min(entity.heatBuildup, 4);\n+            r = new Report(5026);\n+            r.subject = entity.getId();\n+            r.add(reduce);\n+            vPhaseReport.add(r);\n+            entity.heatBuildup -= reduce;\n+        }\n+\n+        // Add heat from external sources to the heat buildup\n+        int max_ext_heat = game.getOptions().intOption(\n+                OptionsConstants.ADVCOMBAT_MAX_EXTERNAL_HEAT); // Check Game Options\n+        if (max_ext_heat < 0) {\n+            max_ext_heat = 15; // standard value specified in TW p.159\n+        }\n+        entity.heatBuildup += Math.min(max_ext_heat, entity.heatFromExternal);\n+        entity.heatFromExternal = 0;\n+        // remove heat we cooled down\n+        entity.heatBuildup -= Math.min(9, entity.coolFromExternal);\n+        entity.coolFromExternal = 0;\n+\n+        // add the heat we've built up so far.\n+        entity.heat += entity.heatBuildup;\n+\n+        // how much heat can we sink?\n+        int tosink = entity.getHeatCapacityWithWater() + radicalHSBonus;\n+\n+        // should we use a coolant pod?\n+        int safeHeat = entity.hasInfernoAmmo() ? 9 : 13;\n+        int possibleSinkage = ((Aero) entity).getHeatSinks()\n+                - entity.getCoolantFailureAmount();\n+        for (Mounted m : entity.getEquipment()) {\n+            if (m.getType() instanceof AmmoType) {\n+                AmmoType at = (AmmoType) m.getType();\n+                if ((at.getAmmoType() == AmmoType.T_COOLANT_POD) && m.isAmmoUsable()) {\n+                    EquipmentMode mode = m.curMode();\n+                    if (mode.equals(\"dump\")) {\n+                        r = new Report(5260);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                    if (mode.equals(\"safe\") && ((entity.heat - tosink) > safeHeat)) {\n+                        r = new Report(5265);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                    if (mode.equals(\"efficient\")\n+                            && ((entity.heat - tosink) >= possibleSinkage)) {\n+                        r = new Report(5270);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        tosink = Math.min(tosink, entity.heat);\n+        entity.heat -= tosink;\n+        r = new Report(5035);\n+        r.subject = entity.getId();\n+        r.addDesc(entity);\n+        r.add(entity.heatBuildup);\n+        r.add(tosink);\n+        r.add(entity.heat);\n+        vPhaseReport.add(r);\n+        entity.heatBuildup = 0;\n+        vPhaseReport.addAll(rhsReports);\n+\n+        // add in the effects of heat\n+\n+        if ((entity instanceof Dropship) || (entity instanceof Jumpship)) {\n+            // only check for a possible control roll\n+            if (entity.heat > 0) {\n+                int bonus = (int) Math.ceil(entity.heat / 100.0);\n+                game.addControlRoll(new PilotingRollData(\n+                        entity.getId(), bonus, \"used too much heat\"));\n+                entity.heat = 0;\n+            }\n+            return;\n+        }\n+\n+        // Capital fighters can overheat and require control rolls\n+        if (entity.isCapitalFighter() && (entity.heat > 0)) {\n+            int penalty = (int) Math.ceil(entity.heat / 15.0);\n+            game.addControlRoll(new PilotingRollData(entity.getId(),\n+                    penalty, \"used too much heat\"));\n+        }\n+\n+        // Like other large craft, the rest of these rules don't apply\n+        // to capital fighters\n+        if (entity.isCapitalFighter()) {\n+            return;\n+        }\n+\n+        int autoShutDownHeat = 30;\n+        boolean mtHeat = game.getOptions().booleanOption(OptionsConstants.ADVCOMBAT_TACOPS_HEAT);\n+        if (mtHeat) {\n+            autoShutDownHeat = 50;\n+        }\n+\n+        // heat effects: start up\n+        if ((entity.heat < autoShutDownHeat) && entity.isShutDown()) {\n+            // only start up if not shut down by taser or a TSEMP\n+            if ((entity.getTaserShutdownRounds() == 0)\n+                    && (entity.getTsempEffect() != TSEMPWeapon.TSEMP_EFFECT_SHUTDOWN)) {\n+                if ((entity.heat < 14) && !(entity.isManualShutdown())) {", "originalCommit": "c8d7b92c6813e21190c7a952e16dd424860b5f6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "03b1f869b67ed7743e3cd7ac7bf31839fd8b3845", "chunk": "diff --git a/megamek/src/megamek/server/ServerHelper.java b/megamek/src/megamek/server/ServerHelper.java\nindex e685625f1f..6d8f25249e 100644\n--- a/megamek/src/megamek/server/ServerHelper.java\n+++ b/megamek/src/megamek/server/ServerHelper.java\n\n@@ -71,7 +71,7 @@ public class ServerHelper {\n         \n         // If this aero is part of a squadron, we will deal with its\n         // heat with the fighter squadron\n-        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n+        if (game.getEntity(entity.getTransportId()) instanceof FighterSquadron) {\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NjgzMA==", "url": "https://github.com/MegaMek/megamek/pull/2227#discussion_r491796830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } else if (!(entity.isManualShutdown())) {\n          \n          \n            \n                            } else if (!entity.isManualShutdown()) {", "author": "Windchild292", "createdAt": "2020-09-21T05:14:16Z", "path": "megamek/src/megamek/server/ServerHelper.java", "diffHunk": "@@ -48,4 +61,338 @@ public static boolean infantryInOpen(Entity te, IHex te_hex, IGame game,\n         \n         return false;\n     }\n+    \n+    /**\n+     * Worker function that handles heat as applied to aerospace fighter\n+     */\n+    public static void resolveAeroHeat(IGame game, Entity entity, Vector<Report> vPhaseReport, Vector<Report> rhsReports, \n+            int radicalHSBonus, int hotDogMod, Server s) {\n+        Report r;\n+        \n+        // If this aero is part of a squadron, we will deal with its\n+        // heat with the fighter squadron\n+        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n+            return;\n+        }\n+\n+        // should we even bother?\n+        if (entity.isDestroyed() || entity.isDoomed()\n+            || entity.getCrew().isDoomed()\n+            || entity.getCrew().isDead()) {\n+            return;\n+        }\n+\n+        // engine hits add a lot of heat, provided the engine is on\n+        entity.heatBuildup += entity.getEngineCritHeat();\n+\n+        // If an Aero had an active Stealth suite, add 10 heat.\n+        if (entity.isStealthOn()) {\n+            entity.heatBuildup += 10;\n+            r = new Report(5015);\n+            r.subject = entity.getId();\n+            vPhaseReport.add(r);\n+        }\n+\n+        // Combat computers help manage heat\n+        if (entity.hasQuirk(OptionsConstants.QUIRK_POS_COMBAT_COMPUTER)) {\n+            int reduce = Math.min(entity.heatBuildup, 4);\n+            r = new Report(5026);\n+            r.subject = entity.getId();\n+            r.add(reduce);\n+            vPhaseReport.add(r);\n+            entity.heatBuildup -= reduce;\n+        }\n+\n+        // Add heat from external sources to the heat buildup\n+        int max_ext_heat = game.getOptions().intOption(\n+                OptionsConstants.ADVCOMBAT_MAX_EXTERNAL_HEAT); // Check Game Options\n+        if (max_ext_heat < 0) {\n+            max_ext_heat = 15; // standard value specified in TW p.159\n+        }\n+        entity.heatBuildup += Math.min(max_ext_heat, entity.heatFromExternal);\n+        entity.heatFromExternal = 0;\n+        // remove heat we cooled down\n+        entity.heatBuildup -= Math.min(9, entity.coolFromExternal);\n+        entity.coolFromExternal = 0;\n+\n+        // add the heat we've built up so far.\n+        entity.heat += entity.heatBuildup;\n+\n+        // how much heat can we sink?\n+        int tosink = entity.getHeatCapacityWithWater() + radicalHSBonus;\n+\n+        // should we use a coolant pod?\n+        int safeHeat = entity.hasInfernoAmmo() ? 9 : 13;\n+        int possibleSinkage = ((Aero) entity).getHeatSinks()\n+                - entity.getCoolantFailureAmount();\n+        for (Mounted m : entity.getEquipment()) {\n+            if (m.getType() instanceof AmmoType) {\n+                AmmoType at = (AmmoType) m.getType();\n+                if ((at.getAmmoType() == AmmoType.T_COOLANT_POD) && m.isAmmoUsable()) {\n+                    EquipmentMode mode = m.curMode();\n+                    if (mode.equals(\"dump\")) {\n+                        r = new Report(5260);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                    if (mode.equals(\"safe\") && ((entity.heat - tosink) > safeHeat)) {\n+                        r = new Report(5265);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                    if (mode.equals(\"efficient\")\n+                            && ((entity.heat - tosink) >= possibleSinkage)) {\n+                        r = new Report(5270);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        tosink = Math.min(tosink, entity.heat);\n+        entity.heat -= tosink;\n+        r = new Report(5035);\n+        r.subject = entity.getId();\n+        r.addDesc(entity);\n+        r.add(entity.heatBuildup);\n+        r.add(tosink);\n+        r.add(entity.heat);\n+        vPhaseReport.add(r);\n+        entity.heatBuildup = 0;\n+        vPhaseReport.addAll(rhsReports);\n+\n+        // add in the effects of heat\n+\n+        if ((entity instanceof Dropship) || (entity instanceof Jumpship)) {\n+            // only check for a possible control roll\n+            if (entity.heat > 0) {\n+                int bonus = (int) Math.ceil(entity.heat / 100.0);\n+                game.addControlRoll(new PilotingRollData(\n+                        entity.getId(), bonus, \"used too much heat\"));\n+                entity.heat = 0;\n+            }\n+            return;\n+        }\n+\n+        // Capital fighters can overheat and require control rolls\n+        if (entity.isCapitalFighter() && (entity.heat > 0)) {\n+            int penalty = (int) Math.ceil(entity.heat / 15.0);\n+            game.addControlRoll(new PilotingRollData(entity.getId(),\n+                    penalty, \"used too much heat\"));\n+        }\n+\n+        // Like other large craft, the rest of these rules don't apply\n+        // to capital fighters\n+        if (entity.isCapitalFighter()) {\n+            return;\n+        }\n+\n+        int autoShutDownHeat = 30;\n+        boolean mtHeat = game.getOptions().booleanOption(OptionsConstants.ADVCOMBAT_TACOPS_HEAT);\n+        if (mtHeat) {\n+            autoShutDownHeat = 50;\n+        }\n+\n+        // heat effects: start up\n+        if ((entity.heat < autoShutDownHeat) && entity.isShutDown()) {\n+            // only start up if not shut down by taser or a TSEMP\n+            if ((entity.getTaserShutdownRounds() == 0)\n+                    && (entity.getTsempEffect() != TSEMPWeapon.TSEMP_EFFECT_SHUTDOWN)) {\n+                if ((entity.heat < 14) && !(entity.isManualShutdown())) {\n+                    // automatically starts up again\n+                    entity.setShutDown(false);\n+                    r = new Report(5045);\n+                    r.subject = entity.getId();\n+                    r.addDesc(entity);\n+                    vPhaseReport.add(r);\n+                } else if (!(entity.isManualShutdown())) {", "originalCommit": "c8d7b92c6813e21190c7a952e16dd424860b5f6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "03b1f869b67ed7743e3cd7ac7bf31839fd8b3845", "chunk": "diff --git a/megamek/src/megamek/server/ServerHelper.java b/megamek/src/megamek/server/ServerHelper.java\nindex e685625f1f..6d8f25249e 100644\n--- a/megamek/src/megamek/server/ServerHelper.java\n+++ b/megamek/src/megamek/server/ServerHelper.java\n\n@@ -71,7 +71,7 @@ public class ServerHelper {\n         \n         // If this aero is part of a squadron, we will deal with its\n         // heat with the fighter squadron\n-        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n+        if (game.getEntity(entity.getTransportId()) instanceof FighterSquadron) {\n             return;\n         }\n \n"}}, {"oid": "03b1f869b67ed7743e3cd7ac7bf31839fd8b3845", "url": "https://github.com/MegaMek/megamek/commit/03b1f869b67ed7743e3cd7ac7bf31839fd8b3845", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-09-21T14:34:11Z", "type": "commit"}]}