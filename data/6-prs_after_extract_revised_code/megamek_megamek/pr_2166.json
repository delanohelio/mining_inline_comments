{"pr_number": 2166, "pr_title": "AbstractIcon", "pr_createdAt": "2020-08-22T17:09:07Z", "pr_url": "https://github.com/MegaMek/megamek/pull/2166", "timeline": [{"oid": "a3d738358aa80770c7f1cfacf9b03e4341e34570", "url": "https://github.com/MegaMek/megamek/commit/a3d738358aa80770c7f1cfacf9b03e4341e34570", "message": "Creating AbstractIcon and implementing the first form in Portrait", "committedDate": "2020-08-22T17:02:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMDcxNw==", "url": "https://github.com/MegaMek/megamek/pull/2166#discussion_r475110717", "bodyText": "Let's pull 75 up to a constant or something.", "author": "sixlettervariables", "createdAt": "2020-08-22T17:12:06Z", "path": "megamek/src/megamek/common/icons/AbstractIcon.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MegaMek.\n+ *\n+ * MegaMek is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MegaMek is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package megamek.common.icons;\n+\n+import megamek.MegaMek;\n+import megamek.common.util.fileUtils.DirectoryItems;\n+import megamek.utils.MegaMekXmlUtil;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+public abstract class AbstractIcon implements Serializable {\n+    //region Variable Declarations\n+    private static final long serialVersionUID = 870271199001476289L;\n+\n+    public static final String ROOT_CATEGORY = \"-- General --\";\n+    public static final String DEFAULT_ICON_FILENAME = \"None\";\n+\n+    private String category;\n+    private String fileName;\n+\n+    private int width;\n+    private int height;\n+    //endregion Variable Declarations\n+\n+    //region Constructors\n+    protected AbstractIcon() {\n+        this(ROOT_CATEGORY, DEFAULT_ICON_FILENAME);\n+    }\n+\n+    protected AbstractIcon(String category, String fileName) {\n+        this(category, fileName, 0, 0);\n+    }\n+\n+    protected AbstractIcon(String category, String fileName, int width, int height) {\n+        setCategory(category);\n+        setFileName(fileName);\n+        setWidth(width);\n+        setHeight(height);\n+    }\n+    //endregion Constructors\n+\n+    //region Getters/Setters\n+    public String getCategory() {\n+        return category;\n+    }\n+\n+    public void setCategory(String category) {\n+        this.category = category;\n+    }\n+\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    public void setFileName(String fileName) {\n+        this.fileName = fileName;\n+    }\n+\n+    public int getWidth() {\n+        return width;\n+    }\n+\n+    public void setWidth(int width) {\n+        this.width = width;\n+    }\n+\n+    public int getHeight() {\n+        return height;\n+    }\n+\n+    public void setHeight(int height) {\n+        this.height = height;\n+    }\n+    //endregion Getters/Setters\n+\n+    /**\n+     * This is used to determine whether the created image should be scaled or not by checking the\n+     * Height and Width values. If either is a 0, then we need to scale the produced image\n+     * @return whether to scale the image or not\n+     */\n+    protected boolean isScaled() {\n+        return (getHeight() == 0) || (getWidth() == 0);\n+    }\n+\n+    /**\n+     * @param imageDirectory the directory the image is stored within\n+     * @return the ImageIcon for the Image stored by the AbstractIcon\n+     */\n+    public ImageIcon getImageIcon(DirectoryItems imageDirectory) {\n+        return new ImageIcon(getImage(imageDirectory));\n+    }\n+\n+    /**\n+     * This is used to create the proper image and scale it if required. It also handles null protection\n+     * by creating a blank image if required.\n+     * @param imageDirectory the directory the image is stored within\n+     * @return the created image\n+     */\n+    public Image getImage(DirectoryItems imageDirectory) {\n+        Image image = getBaseImage(imageDirectory);\n+\n+        if (image == null) {\n+            return createBlankImage();\n+        } else if (isScaled()) {\n+            return image.getScaledInstance(getWidth(), getHeight(), Image.SCALE_DEFAULT);\n+        } else {\n+            return image;\n+        }\n+    }\n+\n+    /**\n+     * This is abstract to allow for different formats for determining the image in question\n+     * @param imageDirectory the directory the image is stored within\n+     * @return the Image stored by the AbstractIcon\n+     */\n+    public abstract Image getBaseImage(DirectoryItems imageDirectory);\n+\n+    /**\n+     * This is a utility method that creates a blank image in the case that no image is found.\n+     * @return a clear blank image\n+     */\n+    protected Image createBlankImage() {\n+        final int width = (getWidth() == 0) ? 75 : getWidth();", "originalCommit": "a3d738358aa80770c7f1cfacf9b03e4341e34570", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccc78321c88352d3ed3381597c944cd62fe4338d", "chunk": "diff --git a/megamek/src/megamek/common/icons/AbstractIcon.java b/megamek/src/megamek/common/icons/AbstractIcon.java\nindex 03723b5ff0..b6be2089d3 100644\n--- a/megamek/src/megamek/common/icons/AbstractIcon.java\n+++ b/megamek/src/megamek/common/icons/AbstractIcon.java\n\n@@ -36,6 +36,7 @@ public abstract class AbstractIcon implements Serializable {\n \n     public static final String ROOT_CATEGORY = \"-- General --\";\n     public static final String DEFAULT_ICON_FILENAME = \"None\";\n+    public static final int DEFAULT_IMAGE_SCALE = 75;\n \n     private String category;\n     private String fileName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMDc2OA==", "url": "https://github.com/MegaMek/megamek/pull/2166#discussion_r475110768", "bodyText": "Good candidate for a constant/static of sorts.", "author": "sixlettervariables", "createdAt": "2020-08-22T17:12:38Z", "path": "megamek/src/megamek/common/icons/Portrait.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MegaMek.\n+ *\n+ * MegaMek is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MegaMek is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package megamek.common.icons;\n+\n+import megamek.MegaMek;\n+import megamek.common.Crew;\n+import megamek.common.util.fileUtils.DirectoryItems;\n+\n+import java.awt.*;\n+\n+public class Portrait extends AbstractIcon {\n+    private static final long serialVersionUID = -7562297705213174435L;\n+\n+    @Override\n+    public Image getBaseImage(DirectoryItems imageDirectory) {\n+        String category = (Crew.ROOT_PORTRAIT.equals(getCategory())) ? \"\" : getCategory();\n+        String filename = getFileName();\n+\n+        // Return the default image if the player has selected no portrait file.\n+        if ((category == null) || (filename == null) || Crew.PORTRAIT_NONE.equals(filename)) {\n+            filename = \"default.gif\";", "originalCommit": "a3d738358aa80770c7f1cfacf9b03e4341e34570", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ccc78321c88352d3ed3381597c944cd62fe4338d", "chunk": "diff --git a/megamek/src/megamek/common/icons/Portrait.java b/megamek/src/megamek/common/icons/Portrait.java\nindex 8e7ee939f5..bf0a1e5201 100644\n--- a/megamek/src/megamek/common/icons/Portrait.java\n+++ b/megamek/src/megamek/common/icons/Portrait.java\n\n@@ -26,6 +26,7 @@ import java.awt.*;\n \n public class Portrait extends AbstractIcon {\n     private static final long serialVersionUID = -7562297705213174435L;\n+    public static final String DEFAULT_PORTRAIT_FILENAME = \"default.gif\";\n \n     @Override\n     public Image getBaseImage(DirectoryItems imageDirectory) {\n"}}, {"oid": "ccc78321c88352d3ed3381597c944cd62fe4338d", "url": "https://github.com/MegaMek/megamek/commit/ccc78321c88352d3ed3381597c944cd62fe4338d", "message": "Swapping two inline constants to be proper constants", "committedDate": "2020-08-22T17:16:34Z", "type": "commit"}]}