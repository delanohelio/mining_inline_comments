{"pr_number": 1754, "pr_title": "fix 'next player' edge case", "pr_createdAt": "2020-03-10T23:01:19Z", "pr_url": "https://github.com/MegaMek/megamek/pull/1754", "timeline": [{"oid": "61947e4563899ce98c9c7f426b580e5dc92a7c96", "url": "https://github.com/MegaMek/megamek/commit/61947e4563899ce98c9c7f426b580e5dc92a7c96", "message": "fix 'next player' edge case", "committedDate": "2020-03-10T22:58:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwMzU0Mg==", "url": "https://github.com/MegaMek/megamek/pull/1754#discussion_r391803542", "bodyText": "Change is here, and can theoretically null error if the Player doesn't have a team assigned (according to a note in getTeamForPlayer, it can return null).", "author": "Windchild292", "createdAt": "2020-03-12T18:11:00Z", "path": "megamek/src/megamek/server/Server.java", "diffHunk": "@@ -3135,71 +3135,78 @@ private void receiveForwardIni(int connectionId) {\n         if (game.getOptions().booleanOption(OptionsConstants.RPG_INDIVIDUAL_INITIATIVE)) {\n             return;\n         }\n+        \n         // get the next player from the team this player is on.\n         IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n-        // if the chosen player is a valid player, we change the turn order and\n-        // inform the clients.\n-        if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n-                && (game.getTurnForPlayer(next.getId()) != null)) {\n-\n-            int currentTurnIndex = game.getTurnIndex();\n-            // now look for the next occurrence of player next in the turn order\n-            List<GameTurn> turns = game.getTurnVector();\n-            GameTurn turn = game.getTurn();\n-            // not entirely necessary. As we will also check this for the\n-            // activity of the button but to be sure do it on the server too.\n-            boolean isGeneralMoveTurn = !(turn instanceof GameTurn.SpecificEntityTurn)\n-                    && !(turn instanceof GameTurn.UnitNumberTurn)\n-                    && !(turn instanceof GameTurn.UnloadStrandedTurn);\n-            if (!isGeneralMoveTurn) {\n-                // if this is not a general turn the player cannot forward his turn.\n-                return;\n-            }\n-\n-            // if it is an EntityClassTurn we have to check make sure, that the\n-            // turn it is exchanged with is the same kind of turn!\n-            // in fact this requires an access function to the mask of an\n-            // EntityClassTurn.\n-            boolean isEntityClassTurn = (turn instanceof GameTurn.EntityClassTurn);\n-            int classMask = 0;\n-            if (isEntityClassTurn) {\n-                classMask = ((GameTurn.EntityClassTurn) turn).getTurnCode();\n-            }\n-\n-            boolean switched = false;\n-            int nextTurnId = 0;\n-            for (int i = currentTurnIndex; i < turns.size(); i++) {\n-                // if we find a turn for the specific player, swap the current\n-                // player with the player noted there\n-                // and stop\n-                if (turns.get(i).isValid(next.getId(), game)) {\n-                    nextTurnId = i;\n-                    if (isEntityClassTurn) {\n-                        // if we had an EntityClassTurn\n-                        if ((turns.get(i) instanceof GameTurn.EntityClassTurn)) {\n-                            // and found another EntityClassTurn\n-                            if (!(((GameTurn.EntityClassTurn) turns.get(i)).getTurnCode() == classMask)) {\n-                                // both have to refer to the SAME class(es) or\n-                                // they need to be rejected.\n+        \n+        while(!next.equals(current)) {\n+            // if the chosen player is a valid player, we change the turn order and\n+            // inform the clients.\n+            if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n+                    && (game.getTurnForPlayer(next.getId()) != null)) {\n+    \n+                int currentTurnIndex = game.getTurnIndex();\n+                // now look for the next occurrence of player next in the turn order\n+                List<GameTurn> turns = game.getTurnVector();\n+                GameTurn turn = game.getTurn();\n+                // not entirely necessary. As we will also check this for the\n+                // activity of the button but to be sure do it on the server too.\n+                boolean isGeneralMoveTurn = !(turn instanceof GameTurn.SpecificEntityTurn)\n+                        && !(turn instanceof GameTurn.UnitNumberTurn)\n+                        && !(turn instanceof GameTurn.UnloadStrandedTurn);\n+                if (!isGeneralMoveTurn) {\n+                    // if this is not a general turn the player cannot forward his turn.\n+                    return;\n+                }\n+    \n+                // if it is an EntityClassTurn we have to check make sure, that the\n+                // turn it is exchanged with is the same kind of turn!\n+                // in fact this requires an access function to the mask of an\n+                // EntityClassTurn.\n+                boolean isEntityClassTurn = (turn instanceof GameTurn.EntityClassTurn);\n+                int classMask = 0;\n+                if (isEntityClassTurn) {\n+                    classMask = ((GameTurn.EntityClassTurn) turn).getTurnCode();\n+                }\n+    \n+                boolean switched = false;\n+                int nextTurnId = 0;\n+                for (int i = currentTurnIndex; i < turns.size(); i++) {\n+                    // if we find a turn for the specific player, swap the current\n+                    // player with the player noted there\n+                    // and stop\n+                    if (turns.get(i).isValid(next.getId(), game)) {\n+                        nextTurnId = i;\n+                        if (isEntityClassTurn) {\n+                            // if we had an EntityClassTurn\n+                            if ((turns.get(i) instanceof GameTurn.EntityClassTurn)) {\n+                                // and found another EntityClassTurn\n+                                if (!(((GameTurn.EntityClassTurn) turns.get(i)).getTurnCode() == classMask)) {\n+                                    // both have to refer to the SAME class(es) or\n+                                    // they need to be rejected.\n+                                    continue;\n+                                }\n+                            } else {\n                                 continue;\n                             }\n-                        } else {\n-                            continue;\n                         }\n+                        switched = true;\n+                        break;\n                     }\n-                    switched = true;\n-                    break;\n                 }\n+    \n+                // update turn order\n+                if (switched) {\n+                    game.swapTurnOrder(currentTurnIndex, nextTurnId);\n+                    // update the turn packages for all players.\n+                    send(createTurnVectorPacket());\n+                    send(createTurnIndexPacket(connectionId));\n+                    return;\n+                }\n+                // if nothing changed return without doing anything\n             }\n-\n-            // update turn order\n-            if (switched) {\n-                game.swapTurnOrder(currentTurnIndex, nextTurnId);\n-                // update the turn packages for all players.\n-                send(createTurnVectorPacket());\n-                send(createTurnIndexPacket(connectionId));\n-            }\n-            // if nothing changed return without doing anything\n+            \n+            next = game.getTeamForPlayer(current).getNextValidPlayer(next, game);", "originalCommit": "61947e4563899ce98c9c7f426b580e5dc92a7c96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7a1dd48dbb68ce7a5976f61646f43da397da5ea", "chunk": "diff --git a/megamek/src/megamek/server/Server.java b/megamek/src/megamek/server/Server.java\nindex a469eb6079..c1e4c85d44 100644\n--- a/megamek/src/megamek/server/Server.java\n+++ b/megamek/src/megamek/server/Server.java\n\n@@ -3136,10 +3136,16 @@ public class Server implements Runnable {\n             return;\n         }\n         \n+        // if the player isn't on a team, there is no next team by definition. Skip the rest.\n+        Team currentPlayerTeam = game.getTeamForPlayer(current);\n+        if (currentPlayerTeam == null) {\n+            return;\n+        }\n+        \n         // get the next player from the team this player is on.\n-        IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n+        IPlayer next = currentPlayerTeam.getNextValidPlayer(current, game);\n         \n-        while(!next.equals(current)) {\n+        while (!next.equals(current)) {\n             // if the chosen player is a valid player, we change the turn order and\n             // inform the clients.\n             if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwMzYzMw==", "url": "https://github.com/MegaMek/megamek/pull/1754#discussion_r391803633", "bodyText": "Change is here", "author": "Windchild292", "createdAt": "2020-03-12T18:11:10Z", "path": "megamek/src/megamek/server/Server.java", "diffHunk": "@@ -3135,71 +3135,78 @@ private void receiveForwardIni(int connectionId) {\n         if (game.getOptions().booleanOption(OptionsConstants.RPG_INDIVIDUAL_INITIATIVE)) {\n             return;\n         }\n+        \n         // get the next player from the team this player is on.\n         IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n-        // if the chosen player is a valid player, we change the turn order and\n-        // inform the clients.\n-        if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n-                && (game.getTurnForPlayer(next.getId()) != null)) {\n-\n-            int currentTurnIndex = game.getTurnIndex();\n-            // now look for the next occurrence of player next in the turn order\n-            List<GameTurn> turns = game.getTurnVector();\n-            GameTurn turn = game.getTurn();\n-            // not entirely necessary. As we will also check this for the\n-            // activity of the button but to be sure do it on the server too.\n-            boolean isGeneralMoveTurn = !(turn instanceof GameTurn.SpecificEntityTurn)\n-                    && !(turn instanceof GameTurn.UnitNumberTurn)\n-                    && !(turn instanceof GameTurn.UnloadStrandedTurn);\n-            if (!isGeneralMoveTurn) {\n-                // if this is not a general turn the player cannot forward his turn.\n-                return;\n-            }\n-\n-            // if it is an EntityClassTurn we have to check make sure, that the\n-            // turn it is exchanged with is the same kind of turn!\n-            // in fact this requires an access function to the mask of an\n-            // EntityClassTurn.\n-            boolean isEntityClassTurn = (turn instanceof GameTurn.EntityClassTurn);\n-            int classMask = 0;\n-            if (isEntityClassTurn) {\n-                classMask = ((GameTurn.EntityClassTurn) turn).getTurnCode();\n-            }\n-\n-            boolean switched = false;\n-            int nextTurnId = 0;\n-            for (int i = currentTurnIndex; i < turns.size(); i++) {\n-                // if we find a turn for the specific player, swap the current\n-                // player with the player noted there\n-                // and stop\n-                if (turns.get(i).isValid(next.getId(), game)) {\n-                    nextTurnId = i;\n-                    if (isEntityClassTurn) {\n-                        // if we had an EntityClassTurn\n-                        if ((turns.get(i) instanceof GameTurn.EntityClassTurn)) {\n-                            // and found another EntityClassTurn\n-                            if (!(((GameTurn.EntityClassTurn) turns.get(i)).getTurnCode() == classMask)) {\n-                                // both have to refer to the SAME class(es) or\n-                                // they need to be rejected.\n+        \n+        while(!next.equals(current)) {", "originalCommit": "61947e4563899ce98c9c7f426b580e5dc92a7c96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7a1dd48dbb68ce7a5976f61646f43da397da5ea", "chunk": "diff --git a/megamek/src/megamek/server/Server.java b/megamek/src/megamek/server/Server.java\nindex a469eb6079..c1e4c85d44 100644\n--- a/megamek/src/megamek/server/Server.java\n+++ b/megamek/src/megamek/server/Server.java\n\n@@ -3136,10 +3136,16 @@ public class Server implements Runnable {\n             return;\n         }\n         \n+        // if the player isn't on a team, there is no next team by definition. Skip the rest.\n+        Team currentPlayerTeam = game.getTeamForPlayer(current);\n+        if (currentPlayerTeam == null) {\n+            return;\n+        }\n+        \n         // get the next player from the team this player is on.\n-        IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n+        IPlayer next = currentPlayerTeam.getNextValidPlayer(current, game);\n         \n-        while(!next.equals(current)) {\n+        while (!next.equals(current)) {\n             // if the chosen player is a valid player, we change the turn order and\n             // inform the clients.\n             if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNDY0MA==", "url": "https://github.com/MegaMek/megamek/pull/1754#discussion_r391804640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    while(!next.equals(current)) {\n          \n          \n            \n                    while (!current.equals(next)) {", "author": "Windchild292", "createdAt": "2020-03-12T18:13:05Z", "path": "megamek/src/megamek/server/Server.java", "diffHunk": "@@ -3135,71 +3135,78 @@ private void receiveForwardIni(int connectionId) {\n         if (game.getOptions().booleanOption(OptionsConstants.RPG_INDIVIDUAL_INITIATIVE)) {\n             return;\n         }\n+        \n         // get the next player from the team this player is on.\n         IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n-        // if the chosen player is a valid player, we change the turn order and\n-        // inform the clients.\n-        if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n-                && (game.getTurnForPlayer(next.getId()) != null)) {\n-\n-            int currentTurnIndex = game.getTurnIndex();\n-            // now look for the next occurrence of player next in the turn order\n-            List<GameTurn> turns = game.getTurnVector();\n-            GameTurn turn = game.getTurn();\n-            // not entirely necessary. As we will also check this for the\n-            // activity of the button but to be sure do it on the server too.\n-            boolean isGeneralMoveTurn = !(turn instanceof GameTurn.SpecificEntityTurn)\n-                    && !(turn instanceof GameTurn.UnitNumberTurn)\n-                    && !(turn instanceof GameTurn.UnloadStrandedTurn);\n-            if (!isGeneralMoveTurn) {\n-                // if this is not a general turn the player cannot forward his turn.\n-                return;\n-            }\n-\n-            // if it is an EntityClassTurn we have to check make sure, that the\n-            // turn it is exchanged with is the same kind of turn!\n-            // in fact this requires an access function to the mask of an\n-            // EntityClassTurn.\n-            boolean isEntityClassTurn = (turn instanceof GameTurn.EntityClassTurn);\n-            int classMask = 0;\n-            if (isEntityClassTurn) {\n-                classMask = ((GameTurn.EntityClassTurn) turn).getTurnCode();\n-            }\n-\n-            boolean switched = false;\n-            int nextTurnId = 0;\n-            for (int i = currentTurnIndex; i < turns.size(); i++) {\n-                // if we find a turn for the specific player, swap the current\n-                // player with the player noted there\n-                // and stop\n-                if (turns.get(i).isValid(next.getId(), game)) {\n-                    nextTurnId = i;\n-                    if (isEntityClassTurn) {\n-                        // if we had an EntityClassTurn\n-                        if ((turns.get(i) instanceof GameTurn.EntityClassTurn)) {\n-                            // and found another EntityClassTurn\n-                            if (!(((GameTurn.EntityClassTurn) turns.get(i)).getTurnCode() == classMask)) {\n-                                // both have to refer to the SAME class(es) or\n-                                // they need to be rejected.\n+        \n+        while(!next.equals(current)) {", "originalCommit": "61947e4563899ce98c9c7f426b580e5dc92a7c96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7a1dd48dbb68ce7a5976f61646f43da397da5ea", "chunk": "diff --git a/megamek/src/megamek/server/Server.java b/megamek/src/megamek/server/Server.java\nindex a469eb6079..c1e4c85d44 100644\n--- a/megamek/src/megamek/server/Server.java\n+++ b/megamek/src/megamek/server/Server.java\n\n@@ -3136,10 +3136,16 @@ public class Server implements Runnable {\n             return;\n         }\n         \n+        // if the player isn't on a team, there is no next team by definition. Skip the rest.\n+        Team currentPlayerTeam = game.getTeamForPlayer(current);\n+        if (currentPlayerTeam == null) {\n+            return;\n+        }\n+        \n         // get the next player from the team this player is on.\n-        IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n+        IPlayer next = currentPlayerTeam.getNextValidPlayer(current, game);\n         \n-        while(!next.equals(current)) {\n+        while (!next.equals(current)) {\n             // if the chosen player is a valid player, we change the turn order and\n             // inform the clients.\n             if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMjE0Mg==", "url": "https://github.com/MegaMek/megamek/pull/1754#discussion_r391812142", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        next = game.getTeamForPlayer(current).getNextValidPlayer(next, game);\n          \n          \n            \n                        next = team.getNextValidPlayer(next, game);", "author": "Windchild292", "createdAt": "2020-03-12T18:27:00Z", "path": "megamek/src/megamek/server/Server.java", "diffHunk": "@@ -3135,71 +3135,78 @@ private void receiveForwardIni(int connectionId) {\n         if (game.getOptions().booleanOption(OptionsConstants.RPG_INDIVIDUAL_INITIATIVE)) {\n             return;\n         }\n+        \n         // get the next player from the team this player is on.\n         IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n-        // if the chosen player is a valid player, we change the turn order and\n-        // inform the clients.\n-        if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n-                && (game.getTurnForPlayer(next.getId()) != null)) {\n-\n-            int currentTurnIndex = game.getTurnIndex();\n-            // now look for the next occurrence of player next in the turn order\n-            List<GameTurn> turns = game.getTurnVector();\n-            GameTurn turn = game.getTurn();\n-            // not entirely necessary. As we will also check this for the\n-            // activity of the button but to be sure do it on the server too.\n-            boolean isGeneralMoveTurn = !(turn instanceof GameTurn.SpecificEntityTurn)\n-                    && !(turn instanceof GameTurn.UnitNumberTurn)\n-                    && !(turn instanceof GameTurn.UnloadStrandedTurn);\n-            if (!isGeneralMoveTurn) {\n-                // if this is not a general turn the player cannot forward his turn.\n-                return;\n-            }\n-\n-            // if it is an EntityClassTurn we have to check make sure, that the\n-            // turn it is exchanged with is the same kind of turn!\n-            // in fact this requires an access function to the mask of an\n-            // EntityClassTurn.\n-            boolean isEntityClassTurn = (turn instanceof GameTurn.EntityClassTurn);\n-            int classMask = 0;\n-            if (isEntityClassTurn) {\n-                classMask = ((GameTurn.EntityClassTurn) turn).getTurnCode();\n-            }\n-\n-            boolean switched = false;\n-            int nextTurnId = 0;\n-            for (int i = currentTurnIndex; i < turns.size(); i++) {\n-                // if we find a turn for the specific player, swap the current\n-                // player with the player noted there\n-                // and stop\n-                if (turns.get(i).isValid(next.getId(), game)) {\n-                    nextTurnId = i;\n-                    if (isEntityClassTurn) {\n-                        // if we had an EntityClassTurn\n-                        if ((turns.get(i) instanceof GameTurn.EntityClassTurn)) {\n-                            // and found another EntityClassTurn\n-                            if (!(((GameTurn.EntityClassTurn) turns.get(i)).getTurnCode() == classMask)) {\n-                                // both have to refer to the SAME class(es) or\n-                                // they need to be rejected.\n+        \n+        while(!next.equals(current)) {\n+            // if the chosen player is a valid player, we change the turn order and\n+            // inform the clients.\n+            if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n+                    && (game.getTurnForPlayer(next.getId()) != null)) {\n+    \n+                int currentTurnIndex = game.getTurnIndex();\n+                // now look for the next occurrence of player next in the turn order\n+                List<GameTurn> turns = game.getTurnVector();\n+                GameTurn turn = game.getTurn();\n+                // not entirely necessary. As we will also check this for the\n+                // activity of the button but to be sure do it on the server too.\n+                boolean isGeneralMoveTurn = !(turn instanceof GameTurn.SpecificEntityTurn)\n+                        && !(turn instanceof GameTurn.UnitNumberTurn)\n+                        && !(turn instanceof GameTurn.UnloadStrandedTurn);\n+                if (!isGeneralMoveTurn) {\n+                    // if this is not a general turn the player cannot forward his turn.\n+                    return;\n+                }\n+    \n+                // if it is an EntityClassTurn we have to check make sure, that the\n+                // turn it is exchanged with is the same kind of turn!\n+                // in fact this requires an access function to the mask of an\n+                // EntityClassTurn.\n+                boolean isEntityClassTurn = (turn instanceof GameTurn.EntityClassTurn);\n+                int classMask = 0;\n+                if (isEntityClassTurn) {\n+                    classMask = ((GameTurn.EntityClassTurn) turn).getTurnCode();\n+                }\n+    \n+                boolean switched = false;\n+                int nextTurnId = 0;\n+                for (int i = currentTurnIndex; i < turns.size(); i++) {\n+                    // if we find a turn for the specific player, swap the current\n+                    // player with the player noted there\n+                    // and stop\n+                    if (turns.get(i).isValid(next.getId(), game)) {\n+                        nextTurnId = i;\n+                        if (isEntityClassTurn) {\n+                            // if we had an EntityClassTurn\n+                            if ((turns.get(i) instanceof GameTurn.EntityClassTurn)) {\n+                                // and found another EntityClassTurn\n+                                if (!(((GameTurn.EntityClassTurn) turns.get(i)).getTurnCode() == classMask)) {\n+                                    // both have to refer to the SAME class(es) or\n+                                    // they need to be rejected.\n+                                    continue;\n+                                }\n+                            } else {\n                                 continue;\n                             }\n-                        } else {\n-                            continue;\n                         }\n+                        switched = true;\n+                        break;\n                     }\n-                    switched = true;\n-                    break;\n                 }\n+    \n+                // update turn order\n+                if (switched) {\n+                    game.swapTurnOrder(currentTurnIndex, nextTurnId);\n+                    // update the turn packages for all players.\n+                    send(createTurnVectorPacket());\n+                    send(createTurnIndexPacket(connectionId));\n+                    return;\n+                }\n+                // if nothing changed return without doing anything\n             }\n-\n-            // update turn order\n-            if (switched) {\n-                game.swapTurnOrder(currentTurnIndex, nextTurnId);\n-                // update the turn packages for all players.\n-                send(createTurnVectorPacket());\n-                send(createTurnIndexPacket(connectionId));\n-            }\n-            // if nothing changed return without doing anything\n+            \n+            next = game.getTeamForPlayer(current).getNextValidPlayer(next, game);", "originalCommit": "61947e4563899ce98c9c7f426b580e5dc92a7c96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7a1dd48dbb68ce7a5976f61646f43da397da5ea", "chunk": "diff --git a/megamek/src/megamek/server/Server.java b/megamek/src/megamek/server/Server.java\nindex a469eb6079..c1e4c85d44 100644\n--- a/megamek/src/megamek/server/Server.java\n+++ b/megamek/src/megamek/server/Server.java\n\n@@ -3136,10 +3136,16 @@ public class Server implements Runnable {\n             return;\n         }\n         \n+        // if the player isn't on a team, there is no next team by definition. Skip the rest.\n+        Team currentPlayerTeam = game.getTeamForPlayer(current);\n+        if (currentPlayerTeam == null) {\n+            return;\n+        }\n+        \n         // get the next player from the team this player is on.\n-        IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n+        IPlayer next = currentPlayerTeam.getNextValidPlayer(current, game);\n         \n-        while(!next.equals(current)) {\n+        while (!next.equals(current)) {\n             // if the chosen player is a valid player, we change the turn order and\n             // inform the clients.\n             if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNDE3NQ==", "url": "https://github.com/MegaMek/megamek/pull/1754#discussion_r391814175", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n          \n            \n                    // get the next player from the team this player is on.\n          \n          \n            \n                    IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n          \n          \n            \n                    // get the team for the next player\n          \n          \n            \n                    Team team = game.getTeamForPlayer(current)\n          \n          \n            \n                    // Create the player\n          \n          \n            \n                    IPlayer next;\n          \n          \n            \n                    //the team can theoretically be null, so we need to check and ensure it is not a null value\n          \n          \n            \n                    if (team != null) {\n          \n          \n            \n                        // get the next player from the team this player is on.\n          \n          \n            \n                        next = team.getNextValidPlayer(current, game);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        next = null;\n          \n          \n            \n                    }", "author": "Windchild292", "createdAt": "2020-03-12T18:30:38Z", "path": "megamek/src/megamek/server/Server.java", "diffHunk": "@@ -3135,71 +3135,78 @@ private void receiveForwardIni(int connectionId) {\n         if (game.getOptions().booleanOption(OptionsConstants.RPG_INDIVIDUAL_INITIATIVE)) {\n             return;\n         }\n+        \n         // get the next player from the team this player is on.\n         IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);", "originalCommit": "61947e4563899ce98c9c7f426b580e5dc92a7c96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNzA5Nw==", "url": "https://github.com/MegaMek/megamek/pull/1754#discussion_r391817097", "bodyText": "This will properly handle the potential case of a null team, which shouldn't happen but the code for getTeamForPlayer says is a possibility.", "author": "Windchild292", "createdAt": "2020-03-12T18:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNDE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b7a1dd48dbb68ce7a5976f61646f43da397da5ea", "chunk": "diff --git a/megamek/src/megamek/server/Server.java b/megamek/src/megamek/server/Server.java\nindex a469eb6079..c1e4c85d44 100644\n--- a/megamek/src/megamek/server/Server.java\n+++ b/megamek/src/megamek/server/Server.java\n\n@@ -3136,10 +3136,16 @@ public class Server implements Runnable {\n             return;\n         }\n         \n+        // if the player isn't on a team, there is no next team by definition. Skip the rest.\n+        Team currentPlayerTeam = game.getTeamForPlayer(current);\n+        if (currentPlayerTeam == null) {\n+            return;\n+        }\n+        \n         // get the next player from the team this player is on.\n-        IPlayer next = game.getTeamForPlayer(current).getNextValidPlayer(current, game);\n+        IPlayer next = currentPlayerTeam.getNextValidPlayer(current, game);\n         \n-        while(!next.equals(current)) {\n+        while (!next.equals(current)) {\n             // if the chosen player is a valid player, we change the turn order and\n             // inform the clients.\n             if ((next != null) && (game.getEntitiesOwnedBy(next) != 0)\n"}}, {"oid": "b7a1dd48dbb68ce7a5976f61646f43da397da5ea", "url": "https://github.com/MegaMek/megamek/commit/b7a1dd48dbb68ce7a5976f61646f43da397da5ea", "message": "code review changes", "committedDate": "2020-03-14T01:23:59Z", "type": "commit"}]}