{"pr_number": 7339, "pr_title": "KEYCLOAK-14919 Dynamic registration - Scope ignored", "pr_createdAt": "2020-08-15T09:23:58Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7339", "timeline": [{"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e", "url": "https://github.com/keycloak/keycloak/commit/8754c42b60c55e33efb804b83a3382fd0c18052e", "message": "KEYCLOAK-14919 Dynamic registration - Scope ignored", "committedDate": "2020-08-15T09:34:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDA4OA==", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481864088", "bodyText": "Is it possible to test retrieving client with admin REST API and doublecheck that \"defaultScopes\" on the client are empty?\nIMO will be good to test that, so if we do some changes in the future, we can detect regressions and clarify if the behaviour is as expected (also with relation to client policies, which we will add etc.)", "author": "mposolda", "createdAt": "2020-09-02T08:07:21Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));", "originalCommit": "8754c42b60c55e33efb804b83a3382fd0c18052e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNzIwNA==", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481937204", "bodyText": "@mposolda I see. I'll add the test as you suggested.", "author": "tnorimat", "createdAt": "2020-09-02T09:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAxMzE3NQ==", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r482013175", "bodyText": "@tnorimat Thanks for the change. For the future, this line can be replaced with the:\nassertEquals(clientScopes, registeredClientScopes);\n\nwhich is more readable and better regarding possible failure reporting etc. I don't want to block this PR just because of this, so just merging it. Feel free to send another PR with improving these lines in the test if you want, but however you wish  :-)", "author": "mposolda", "createdAt": "2020-09-02T11:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java\nindex 91547bffa2..d5bc6b8ae7 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java\n\n@@ -483,6 +484,10 @@ public class OIDCClientRegistrationTest extends AbstractClientRegistrationTest {\n         Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n         Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n         assertTrue(clientScopes.equals(registeredClientScopes));\n+\n+        ClientResource clientResource = adminClient.realm(REALM_NAME).clients().get(response.getClientId());\n+        assertTrue(clientResource.toRepresentation().getDefaultClientScopes().isEmpty());\n+\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDUxNw==", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481864517", "bodyText": "Same as above. Is it possible to obtain client through admin REST API and doublecheck that default client scopes are realm default client scopes?", "author": "mposolda", "createdAt": "2020-09-02T08:07:49Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));\n+    }\n \n+    @Test\n+    public void testClientWithNotDefinedScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+\n+        String clientScope = \"notdefinedscope address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        try {\n+            response = reg.oidc().create(clientRep);\n+            fail(\"Expected 403\");\n+        } catch (ClientRegistrationException e) {\n+            assertEquals(403, ((HttpErrorException) e.getCause()).getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testClientWithoutScope() throws ClientRegistrationException {\n+        Set<String> realmOptionalClientScopes = new HashSet<>(adminClient.realm(REALM_NAME).getDefaultOptionalClientScopes()\n+                .stream().map(i->i.getName()).collect(Collectors.toList()));\n+\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+\n+        clientRep = createRep();\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(realmOptionalClientScopes.equals(new HashSet<>(registeredClientScopes)));", "originalCommit": "8754c42b60c55e33efb804b83a3382fd0c18052e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNzI2MA==", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481937260", "bodyText": "@mposolda I see. I'll add the test as you suggested.", "author": "tnorimat", "createdAt": "2020-09-02T09:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java\nindex 91547bffa2..d5bc6b8ae7 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java\n\n@@ -483,6 +484,10 @@ public class OIDCClientRegistrationTest extends AbstractClientRegistrationTest {\n         Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n         Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n         assertTrue(clientScopes.equals(registeredClientScopes));\n+\n+        ClientResource clientResource = adminClient.realm(REALM_NAME).clients().get(response.getClientId());\n+        assertTrue(clientResource.toRepresentation().getDefaultClientScopes().isEmpty());\n+\n     }\n \n     @Test\n"}}, {"oid": "8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "url": "https://github.com/keycloak/keycloak/commit/8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "message": "KEYCLOAK-14919 Dynamic registration - Scope ignored", "committedDate": "2020-09-02T09:37:12Z", "type": "commit"}, {"oid": "8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "url": "https://github.com/keycloak/keycloak/commit/8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "message": "KEYCLOAK-14919 Dynamic registration - Scope ignored", "committedDate": "2020-09-02T09:37:12Z", "type": "forcePushed"}]}