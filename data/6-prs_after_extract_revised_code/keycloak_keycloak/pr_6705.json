{"pr_number": 6705, "pr_title": "KEYCLOAK-11862 Add Sync mode option", "pr_createdAt": "2020-01-30T10:51:23Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6705", "timeline": [{"oid": "b7e1bcde21160d977ff12dd3400c04c14c7f33ce", "url": "https://github.com/keycloak/keycloak/commit/b7e1bcde21160d977ff12dd3400c04c14c7f33ce", "message": "Log an error if sync mode is not supported", "committedDate": "2020-02-19T11:19:32Z", "type": "forcePushed"}, {"oid": "ee0add94b75266137b9ec4708586de7e30b04b1d", "url": "https://github.com/keycloak/keycloak/commit/ee0add94b75266137b9ec4708586de7e30b04b1d", "message": "Log an error if sync mode is not supported", "committedDate": "2020-02-19T12:40:07Z", "type": "forcePushed"}, {"oid": "7df70530fc19825320325838dc178afd59ed229f", "url": "https://github.com/keycloak/keycloak/commit/7df70530fc19825320325838dc178afd59ed229f", "message": "Add German translation", "committedDate": "2020-04-03T10:48:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODE3Mg==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411448172", "bodyText": "Is it possible to remove this field entirely and change getter/setter to directly read the value from the \"config\" ? For example something like:\npublic IdentityProviderSyncMode getSyncMode() {\n    return getConfig().containsKey(IdentityProviderModel.SYNC_MODE)\n                ? IdentityProviderSyncMode.valueOf(getConfig().get(IdentityProviderModel.SYNC_MODE))\n                : IdentityProviderSyncMode.LEGACY);\n}\n\npublic void setSyncMode(IdentityProviderSyncMode syncMode) {\n    getConfig().put(IdentityProviderModel.SYNC_MODE, syncMode);\n}\n\nSee for example classes like OIDCIdentityProviderConfig or OAuth2IdentityProviderConfig, which contains bunch of other similar options.\nI think this will simplify lots of other things and reduce the amount of changes at the model classes you needed to do in this PR. For example classes like RealmAdapter, ModelToRepresentation, RepresentationToModel etc won't be needed to be changed at all in this PR IMO.", "author": "mposolda", "createdAt": "2020-04-20T14:58:42Z", "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderModel.java", "diffHunk": "@@ -64,6 +66,8 @@\n \n     private String displayName;\n \n+    private IdentityProviderSyncMode syncMode;", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MzM0MA==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412193340", "bodyText": "+1", "author": "stianst", "createdAt": "2020-04-21T13:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMwOTYxNA==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412309614", "bodyText": "I removed the field and relied on the config (the getter will then provide the default value \"LEGACY\" in case no value exists). With this change I removed all changes to the representation end entity and there converters.", "author": "Martin-Idel-SI", "createdAt": "2020-04-21T16:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODE3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0OTkzMA==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411449930", "bodyText": "See my comment for the class IdentityProviderModel.java. I think same can be applied here.", "author": "mposolda", "createdAt": "2020-04-20T15:00:52Z", "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderMapperModel.java", "diffHunk": "@@ -41,6 +42,7 @@\n     protected String name;\n     protected String identityProviderAlias;\n     protected String identityProviderMapper;\n+    protected IdentityProviderMapperSyncMode syncMode;", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "190407a58f5adadf21251efc40e14b535eea752f", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/models/IdentityProviderMapperModel.java b/server-spi/src/main/java/org/keycloak/models/IdentityProviderMapperModel.java\nindex 56666042a5..dde4ee8cb4 100755\n--- a/server-spi/src/main/java/org/keycloak/models/IdentityProviderMapperModel.java\n+++ b/server-spi/src/main/java/org/keycloak/models/IdentityProviderMapperModel.java\n\n@@ -42,7 +42,6 @@ public class IdentityProviderMapperModel implements Serializable {\n     protected String name;\n     protected String identityProviderAlias;\n     protected String identityProviderMapper;\n-    protected IdentityProviderMapperSyncMode syncMode;\n     protected Map<String, String> config;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTA4NQ==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411465085", "bodyText": "IMO there is no need to have 1st level field at the IdentityProviderMapperRepresentation level. It can just use the \"config\" map to hold the value. This means the UI HTML files will just reference to \"identityProviderMapper.config.syncMode\" instead of \"identityProviderMapper.syncMode\" . See the other fields for inspiration, which are backed by the values from \"config\" map.", "author": "mposolda", "createdAt": "2020-04-20T15:19:45Z", "path": "core/src/main/java/org/keycloak/representations/idm/IdentityProviderMapperRepresentation.java", "diffHunk": "@@ -29,6 +29,7 @@\n     protected String name;\n     protected String identityProviderAlias;\n     protected String identityProviderMapper;\n+    protected String syncMode;", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "190407a58f5adadf21251efc40e14b535eea752f", "chunk": "diff --git a/core/src/main/java/org/keycloak/representations/idm/IdentityProviderMapperRepresentation.java b/core/src/main/java/org/keycloak/representations/idm/IdentityProviderMapperRepresentation.java\nindex 04afce9dfa..1627c231a3 100755\n--- a/core/src/main/java/org/keycloak/representations/idm/IdentityProviderMapperRepresentation.java\n+++ b/core/src/main/java/org/keycloak/representations/idm/IdentityProviderMapperRepresentation.java\n\n@@ -29,7 +29,6 @@ public class IdentityProviderMapperRepresentation {\n     protected String name;\n     protected String identityProviderAlias;\n     protected String identityProviderMapper;\n-    protected String syncMode;\n     protected Map<String, String> config = new HashMap<>();\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTM0Nw==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411465347", "bodyText": "See my comment for IdentityProviderMapperRepresentation. I believe same applies here as well.", "author": "mposolda", "createdAt": "2020-04-20T15:20:05Z", "path": "core/src/main/java/org/keycloak/representations/idm/IdentityProviderRepresentation.java", "diffHunk": "@@ -56,6 +56,7 @@\n     protected boolean linkOnly;\n     protected String firstBrokerLoginFlowAlias;\n     protected String postBrokerLoginFlowAlias;\n+    protected String syncMode;", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "190407a58f5adadf21251efc40e14b535eea752f", "chunk": "diff --git a/core/src/main/java/org/keycloak/representations/idm/IdentityProviderRepresentation.java b/core/src/main/java/org/keycloak/representations/idm/IdentityProviderRepresentation.java\nindex cd2cc1eac5..9ca5a0d23b 100755\n--- a/core/src/main/java/org/keycloak/representations/idm/IdentityProviderRepresentation.java\n+++ b/core/src/main/java/org/keycloak/representations/idm/IdentityProviderRepresentation.java\n\n@@ -56,7 +56,6 @@ public class IdentityProviderRepresentation {\n     protected boolean linkOnly;\n     protected String firstBrokerLoginFlowAlias;\n     protected String postBrokerLoginFlowAlias;\n-    protected String syncMode;\n     protected Map<String, String> config = new HashMap<>();\n \n     public String getInternalId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5OTMyOA==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411499328", "bodyText": "I wonder that many of the existing tests possibly won't need to be changed? Assuming that you remove the field like \"syncMode\" directly from the representation and model classes as I proposed in the comments. This will mean it will use the default value \"Legacy\" and the behaviour will be same as before AFAIK?\nThis doesn't apply just for AccountFormServiceTest, but many other tests where you explicitly added \".syncMode(IdentityProviderSyncMode.IMPORT)\" . I won't repeat this comment to all those places.", "author": "mposolda", "createdAt": "2020-04-20T16:02:36Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java", "diffHunk": "@@ -121,20 +122,24 @@ public void configureTestRealm(RealmRepresentation testRealm) {\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"github\")\n                                               .alias(\"github\")\n+                                              .syncMode(IdentityProviderSyncMode.IMPORT)", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNDg3OA==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412314878", "bodyText": "I removed this line where possible. In fact, this means that now my test changes are limited to the following places:\n\nclasses within org.keycloak.testsuite.broker package: Most of the tests that don't need the sync mode are left as is, but the broker configurations all need to be adapted due to the nature of the inheritance structure.\nclasses outside org.keycloak.testsuite.broker are only adapted where I added tests (admin console tests and CLI-Test) or improved on existing tests (IdentityProviderTest)\n\nIs this enough in your view?", "author": "Martin-Idel-SI", "createdAt": "2020-04-21T16:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5OTMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNjA1Nw==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412416057", "bodyText": "Yes, Thanks!", "author": "mposolda", "createdAt": "2020-04-21T19:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5OTMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "190407a58f5adadf21251efc40e14b535eea752f", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\nindex 1096fce6d6..9c7985acc9 100755\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java\n\n@@ -122,24 +121,20 @@ public class AccountFormServiceTest extends AbstractTestRealmKeycloakTest {\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"github\")\n                                               .alias(\"github\")\n-                                              .syncMode(IdentityProviderSyncMode.IMPORT)\n                                               .build());\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"saml\")\n                                               .alias(\"mysaml\")\n-                                              .syncMode(IdentityProviderSyncMode.IMPORT)\n                                               .build());\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"oidc\")\n                                               .alias(\"myoidc\")\n                                               .displayName(\"MyOIDC\")\n-                                              .syncMode(IdentityProviderSyncMode.IMPORT)\n                                               .build());\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"oidc\")\n                                               .alias(\"myhiddenoidc\")\n                                               .displayName(\"MyHiddenOIDC\")\n-                                              .syncMode(IdentityProviderSyncMode.IMPORT)\n                                               .hideOnLoginPage()\n                                               .build());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4OTM3Mw==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412189373", "bodyText": "This can be changed to a single line:\nreturn IdentityProviderSyncMode.INHERIT.equals(mapperSyncMode) ? syncMode : mapperSyncMode", "author": "stianst", "createdAt": "2020-04-21T13:34:58Z", "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapperSyncModeDelegate.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.keycloak.broker.provider;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.IdentityProviderMapperModel;\n+import org.keycloak.models.IdentityProviderMapperSyncMode;\n+import org.keycloak.models.IdentityProviderSyncMode;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+\n+public final class IdentityProviderMapperSyncModeDelegate {\n+\n+    protected static final Logger logger = Logger.getLogger(IdentityProviderMapperSyncModeDelegate.class);\n+\n+    public static void delegateUpdateBrokeredUser(KeycloakSession session, RealmModel realm, UserModel user, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context, IdentityProviderMapper mapper) {\n+        IdentityProviderSyncMode effectiveSyncMode = combineIdpAndMapperSyncMode(context.getIdpConfig().getSyncMode(), mapperModel.getSyncMode());\n+\n+        if (!mapper.supportedSyncModes().contains(effectiveSyncMode)) {\n+            logger.warnf(\"The mapper %s does not explicitly support sync mode %s. Please ensure that the SPI supports the sync mode correctly and update it to reflect this.\", mapper.getDisplayType(), effectiveSyncMode);\n+        }\n+\n+        if (effectiveSyncMode == IdentityProviderSyncMode.LEGACY) {\n+            mapper.updateBrokeredUserLegacy(session, realm, user, mapperModel, context);\n+        } else if (effectiveSyncMode == IdentityProviderSyncMode.FORCE) {\n+            mapper.updateBrokeredUser(session, realm, user, mapperModel, context);\n+        }\n+    }\n+\n+    public static IdentityProviderSyncMode combineIdpAndMapperSyncMode(IdentityProviderSyncMode syncMode, IdentityProviderMapperSyncMode mapperSyncMode) {\n+        switch (mapperSyncMode) {", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "190407a58f5adadf21251efc40e14b535eea752f", "chunk": "diff --git a/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapperSyncModeDelegate.java b/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapperSyncModeDelegate.java\nindex 557babec7e..b27d1f469d 100644\n--- a/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapperSyncModeDelegate.java\n+++ b/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapperSyncModeDelegate.java\n\n@@ -15,7 +15,7 @@ public final class IdentityProviderMapperSyncModeDelegate {\n     public static void delegateUpdateBrokeredUser(KeycloakSession session, RealmModel realm, UserModel user, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context, IdentityProviderMapper mapper) {\n         IdentityProviderSyncMode effectiveSyncMode = combineIdpAndMapperSyncMode(context.getIdpConfig().getSyncMode(), mapperModel.getSyncMode());\n \n-        if (!mapper.supportedSyncModes().contains(effectiveSyncMode)) {\n+        if (!mapper.supportsSyncMode(effectiveSyncMode)) {\n             logger.warnf(\"The mapper %s does not explicitly support sync mode %s. Please ensure that the SPI supports the sync mode correctly and update it to reflect this.\", mapper.getDisplayType(), effectiveSyncMode);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412190226", "bodyText": "Not super keen on this refactoring - as it makes it more costly to review this. @mposolda did you review this properly?", "author": "stianst", "createdAt": "2020-04-21T13:36:05Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -1287,25 +1291,31 @@ public void addIdentityProvider(IdentityProviderModel identityProvider) {\n         } else {\n             entity.setInternalId(identityProvider.getInternalId());\n         }\n+        fillEntity(identityProvider, entity);\n+        entity.setProviderId(identityProvider.getProviderId());\n+\n+        realm.addIdentityProvider(entity);\n+\n+        identityProvider.setInternalId(entity.getInternalId());\n+\n+        em.persist(entity);\n+        em.flush();\n+    }\n+\n+    private void fillEntity(IdentityProviderModel identityProvider, IdentityProviderEntity entity) {", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5OTk1Mw==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412199953", "bodyText": "This was just a trivial extraction, but since I'm removing the changes in RealmAdapter, I'll also remove the refactoring.", "author": "Martin-Idel-SI", "createdAt": "2020-04-21T13:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwMDA4Mw==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412200083", "bodyText": "@stianst I think that this PR doesn't need to change anything in the RealmAdapter class at all if some of my other comments are applied - this means using just field from \"config\" map instead of adding additional field into the IdentityProviderModel / IdentityProviderMapperModel classes.", "author": "mposolda", "createdAt": "2020-04-21T13:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0NDQ4NA==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412244484", "bodyText": "Sounds good", "author": "stianst", "createdAt": "2020-04-21T14:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "190407a58f5adadf21251efc40e14b535eea752f", "chunk": "diff --git a/model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java b/model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java\nindex 80750c9061..2c54002e4e 100755\n--- a/model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java\n+++ b/model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java\n\n@@ -1291,20 +1287,9 @@ public class RealmAdapter implements RealmModel, JpaModel<RealmEntity> {\n         } else {\n             entity.setInternalId(identityProvider.getInternalId());\n         }\n-        fillEntity(identityProvider, entity);\n-        entity.setProviderId(identityProvider.getProviderId());\n-\n-        realm.addIdentityProvider(entity);\n-\n-        identityProvider.setInternalId(entity.getInternalId());\n-\n-        em.persist(entity);\n-        em.flush();\n-    }\n-\n-    private void fillEntity(IdentityProviderModel identityProvider, IdentityProviderEntity entity) {\n         entity.setAlias(identityProvider.getAlias());\n         entity.setDisplayName(identityProvider.getDisplayName());\n+        entity.setProviderId(identityProvider.getProviderId());\n         entity.setEnabled(identityProvider.isEnabled());\n         entity.setStoreToken(identityProvider.isStoreToken());\n         entity.setAddReadTokenRoleOnCreate(identityProvider.isAddReadTokenRoleOnCreate());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDc5MA==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412190790", "bodyText": "Please don't use '*' imports", "author": "stianst", "createdAt": "2020-04-21T13:36:47Z", "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java", "diffHunk": "@@ -17,25 +17,31 @@\n \n package org.keycloak.broker.provider;\n \n-import org.keycloak.models.IdentityProviderMapperModel;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.RealmModel;\n-import org.keycloak.models.UserModel;\n+import org.keycloak.models.*;", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "190407a58f5adadf21251efc40e14b535eea752f", "chunk": "diff --git a/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java b/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java\nindex d7898ac9b8..7ea00b0215 100755\n--- a/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java\n+++ b/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java\n\n@@ -17,7 +17,11 @@\n \n package org.keycloak.broker.provider;\n \n-import org.keycloak.models.*;\n+import org.keycloak.models.IdentityProviderMapperModel;\n+import org.keycloak.models.IdentityProviderSyncMode;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n import org.keycloak.provider.ConfiguredProvider;\n import org.keycloak.provider.Provider;\n import org.keycloak.provider.ProviderFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MjA5OQ==", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412192099", "bodyText": "Perhaps it would be cleaner to do:\nboolean supportsSyncMode(IdentityProviderSyncMode syncMode)", "author": "stianst", "createdAt": "2020-04-21T13:38:23Z", "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java", "diffHunk": "@@ -17,25 +17,31 @@\n \n package org.keycloak.broker.provider;\n \n-import org.keycloak.models.IdentityProviderMapperModel;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.RealmModel;\n-import org.keycloak.models.UserModel;\n+import org.keycloak.models.*;\n import org.keycloak.provider.ConfiguredProvider;\n import org.keycloak.provider.Provider;\n import org.keycloak.provider.ProviderFactory;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public interface IdentityProviderMapper extends Provider, ProviderFactory<IdentityProviderMapper>,ConfiguredProvider {\n     String ANY_PROVIDER = \"*\";\n+    Set<IdentityProviderSyncMode> DEFAULT_IDENTITY_PROVIDER_MAPPER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.LEGACY, IdentityProviderSyncMode.IMPORT));\n \n     String[] getCompatibleProviders();\n     String getDisplayCategory();\n     String getDisplayType();\n \n+    default Set<IdentityProviderSyncMode> supportedSyncModes() {", "originalCommit": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "190407a58f5adadf21251efc40e14b535eea752f", "chunk": "diff --git a/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java b/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java\nindex d7898ac9b8..7ea00b0215 100755\n--- a/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java\n+++ b/server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java\n\n@@ -17,7 +17,11 @@\n \n package org.keycloak.broker.provider;\n \n-import org.keycloak.models.*;\n+import org.keycloak.models.IdentityProviderMapperModel;\n+import org.keycloak.models.IdentityProviderSyncMode;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n import org.keycloak.provider.ConfiguredProvider;\n import org.keycloak.provider.Provider;\n import org.keycloak.provider.ProviderFactory;\n"}}, {"oid": "190407a58f5adadf21251efc40e14b535eea752f", "url": "https://github.com/keycloak/keycloak/commit/190407a58f5adadf21251efc40e14b535eea752f", "message": "KEYCLOAK-11862 Add Sync mode option\n\n- Store in config map in database and model\n- Expose the field in the OIDC-IDP\n- Write logic for import, force and legacy mode\n- Show how mappers can be updated keeping correct legacy mode\n- Show how mappers that work correctly don't have to be modified\n- Log an error if sync mode is not supported\n\nFix updateBrokeredUser method for all mappers\n\n- Allow updating of username (UsernameTemplateMapper)\n- Delete UserAttributeStatementMapper: mapper isn't even registered\n  Was actually rejected but never cleaned up: https://github.com/keycloak/keycloak/pull/4513\n  The mapper won't work as specified and it's not easy to tests here\n- Fixup json mapper\n- Fix ExternalKeycloakRoleToRoleMapper:\n  Bug: delete cannot work - just delete it. Don't fix it in legacy mode\n\nRework mapper tests\n\n- Fix old tests for Identity Broker:\n  Old tests did not work at all:\n  They tested that if you take a realm and assign the role,\n  this role is then assigned to the user in that realm,\n  which has nothing to do with identity brokering\n  Simplify logic in OidcClaimToRoleMapperTests\n- Add SyncMode tests to most mappers\n  Added tests for UsernameTemplateMapper\n  Added tests to all RoleMappers\n  Add test for json attribute mapper (Github as example)\n- Extract common test setup(s)\n- Extend admin console tests for sync mode\n\nSigned-off-by: Martin Idel <external.Martin.Idel@bosch.io>", "committedDate": "2020-04-22T08:04:37Z", "type": "commit"}, {"oid": "190407a58f5adadf21251efc40e14b535eea752f", "url": "https://github.com/keycloak/keycloak/commit/190407a58f5adadf21251efc40e14b535eea752f", "message": "KEYCLOAK-11862 Add Sync mode option\n\n- Store in config map in database and model\n- Expose the field in the OIDC-IDP\n- Write logic for import, force and legacy mode\n- Show how mappers can be updated keeping correct legacy mode\n- Show how mappers that work correctly don't have to be modified\n- Log an error if sync mode is not supported\n\nFix updateBrokeredUser method for all mappers\n\n- Allow updating of username (UsernameTemplateMapper)\n- Delete UserAttributeStatementMapper: mapper isn't even registered\n  Was actually rejected but never cleaned up: https://github.com/keycloak/keycloak/pull/4513\n  The mapper won't work as specified and it's not easy to tests here\n- Fixup json mapper\n- Fix ExternalKeycloakRoleToRoleMapper:\n  Bug: delete cannot work - just delete it. Don't fix it in legacy mode\n\nRework mapper tests\n\n- Fix old tests for Identity Broker:\n  Old tests did not work at all:\n  They tested that if you take a realm and assign the role,\n  this role is then assigned to the user in that realm,\n  which has nothing to do with identity brokering\n  Simplify logic in OidcClaimToRoleMapperTests\n- Add SyncMode tests to most mappers\n  Added tests for UsernameTemplateMapper\n  Added tests to all RoleMappers\n  Add test for json attribute mapper (Github as example)\n- Extract common test setup(s)\n- Extend admin console tests for sync mode\n\nSigned-off-by: Martin Idel <external.Martin.Idel@bosch.io>", "committedDate": "2020-04-22T08:04:37Z", "type": "forcePushed"}]}