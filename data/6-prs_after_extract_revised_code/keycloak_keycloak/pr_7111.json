{"pr_number": 7111, "pr_title": "KEYCLOAK-14304 Expand xml parsing for SAML Identity Provider", "pr_createdAt": "2020-05-27T08:27:26Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7111", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1MTI2Ng==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449451266", "bodyText": "Please use a name ending in _NSURI and signalling the source, e.g.:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ENTITY_ATTRIBUTES(\"urn:oasis:names:tc:SAML:metadata:attribute\"),\n          \n          \n            \n                // http://docs.oasis-open.org/security/saml/Post2.0/sstc-metadata-attr-cd-01.pdf\n          \n          \n            \n                METADATA_ENTITY_ATTRIBUTES_NSURI(\"urn:oasis:names:tc:SAML:metadata:attribute\"),", "author": "hmlnarik", "createdAt": "2020-07-03T08:29:45Z", "path": "saml-core-api/src/main/java/org/keycloak/saml/common/constants/JBossSAMLURIConstants.java", "diffHunk": "@@ -65,6 +65,7 @@\n     HOLDER_OF_KEY(\"urn:oasis:names:tc:SAML:2.0:cm:holder-of-key\"),\n \n     METADATA_NSURI(\"urn:oasis:names:tc:SAML:2.0:metadata\"),\n+    ENTITY_ATTRIBUTES(\"urn:oasis:names:tc:SAML:metadata:attribute\"),", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core-api/src/main/java/org/keycloak/saml/common/constants/JBossSAMLURIConstants.java b/saml-core-api/src/main/java/org/keycloak/saml/common/constants/JBossSAMLURIConstants.java\nindex 40753eed14..fcb317f535 100755\n--- a/saml-core-api/src/main/java/org/keycloak/saml/common/constants/JBossSAMLURIConstants.java\n+++ b/saml-core-api/src/main/java/org/keycloak/saml/common/constants/JBossSAMLURIConstants.java\n\n@@ -65,7 +65,8 @@ public enum JBossSAMLURIConstants {\n     HOLDER_OF_KEY(\"urn:oasis:names:tc:SAML:2.0:cm:holder-of-key\"),\n \n     METADATA_NSURI(\"urn:oasis:names:tc:SAML:2.0:metadata\"),\n-    ENTITY_ATTRIBUTES(\"urn:oasis:names:tc:SAML:metadata:attribute\"),\n+    // http://docs.oasis-open.org/security/saml/Post2.0/sstc-metadata-attr-cd-01.pdf\n+    METADATA_ENTITY_ATTRIBUTES_NSURI(\"urn:oasis:names:tc:SAML:metadata:attribute\"),\n \n     NAMEID_FORMAT_TRANSIENT(\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"),\n     NAMEID_FORMAT_PERSISTENT(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1MjE1Mg==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449452152", "bodyText": "These constants should be only in the services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String MACEDIR =\"http://macedir.org/entity-category\";\n          \n          \n            \n                String HIDE_FOR_DISCOVERY= \"http://refeds.org/category/hide-from-discovery\";\n          \n          \n            \n                String MACEDIR_ENTITY_CATEGORY = \"http://macedir.org/entity-category\";\n          \n          \n            \n                String REFEDS_HIDE_FOR_DISCOVERY = \"http://refeds.org/category/hide-from-discovery\";", "author": "hmlnarik", "createdAt": "2020-07-03T08:31:26Z", "path": "saml-core-api/src/main/java/org/keycloak/saml/common/constants/GeneralConstants.java", "diffHunk": "@@ -150,6 +150,9 @@\n     String BASE64_ENCODE_WSTRUST_SECRET_KEY = \"picketlink.wstrust.base64_encode_wstrust_secret_key\";\n \n     String HTTP_HEADER_X_REQUESTED_WITH = \"X-Requested-With\";\n+    \n+    String MACEDIR =\"http://macedir.org/entity-category\";\n+    String HIDE_FOR_DISCOVERY= \"http://refeds.org/category/hide-from-discovery\";", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core-api/src/main/java/org/keycloak/saml/common/constants/GeneralConstants.java b/saml-core-api/src/main/java/org/keycloak/saml/common/constants/GeneralConstants.java\nindex 74f92fdd48..6e80f2a643 100755\n--- a/saml-core-api/src/main/java/org/keycloak/saml/common/constants/GeneralConstants.java\n+++ b/saml-core-api/src/main/java/org/keycloak/saml/common/constants/GeneralConstants.java\n\n@@ -150,9 +150,6 @@ public interface GeneralConstants {\n     String BASE64_ENCODE_WSTRUST_SECRET_KEY = \"picketlink.wstrust.base64_encode_wstrust_secret_key\";\n \n     String HTTP_HEADER_X_REQUESTED_WITH = \"X-Requested-With\";\n-    \n-    String MACEDIR =\"http://macedir.org/entity-category\";\n-    String HIDE_FOR_DISCOVERY= \"http://refeds.org/category/hide-from-discovery\";\n \n     public static final String  SAML_CHARSET_NAME = System.getProperty(\"keycloak.saml.saml_message_charset\", \"UTF-8\");\n     public static final Charset SAML_CHARSET = Charset.forName(SAML_CHARSET_NAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MzMxMQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449463311", "bodyText": "This file belongs to a separate package. Lets call it\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.keycloak.dom.saml.v2.metadata;\n          \n          \n            \n            package org.keycloak.dom.saml.v2.mdattr;", "author": "hmlnarik", "createdAt": "2020-07-03T08:53:33Z", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/EntityAttributes.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.keycloak.dom.saml.v2.metadata;", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/EntityAttributes.java b/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java\nsimilarity index 82%\nrename from saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/EntityAttributes.java\nrename to saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java\nindex 90372da39a..246ac89e8d 100644\n--- a/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/EntityAttributes.java\n+++ b/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java\n\n@@ -1,9 +1,10 @@\n-package org.keycloak.dom.saml.v2.metadata;\n+package org.keycloak.dom.saml.v2.mdattr;\n \n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.keycloak.dom.saml.v2.assertion.AssertionType;\n import org.keycloak.dom.saml.v2.assertion.AttributeType;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NDY5Mw==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449464693", "bodyText": "Do not add this field here, and rather use the any above.\nOTOH, you can add a method that would extract the EntityAttributes from the any field, e.g.\n    public EntityAttributes getEntityAttributes() {\n        for (Object o : this.any) {\n            if (o instanceof EntityAttributes) {\n                return (EntityAttributes) o;\n            }\n        }\n        return null;\n    }", "author": "hmlnarik", "createdAt": "2020-07-03T08:56:04Z", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java", "diffHunk": "@@ -45,6 +45,8 @@\n \n     protected List<Object> any = new ArrayList<>();\n \n+\n+   protected EntityAttributes entityAttributes;", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java b/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java\nindex fedc1e75f0..f7cd59d67b 100755\n--- a/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java\n+++ b/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java\n\n@@ -45,8 +46,6 @@ public class ExtensionsType {\n \n     protected List<Object> any = new ArrayList<>();\n \n-\n-   protected EntityAttributes entityAttributes;\n     /**\n      * Function is obsoleted with getAny\n      * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjcxMQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449466711", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.keycloak.saml.processing.core.parsers.saml.metadata;\n          \n          \n            \n            package org.keycloak.saml.processing.core.parsers.saml.mdattr;", "author": "hmlnarik", "createdAt": "2020-07-03T08:59:51Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.keycloak.saml.processing.core.parsers.saml.metadata;", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java\nindex f7611d1c94..69a9261c9d 100644\n--- a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java\n+++ b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java\n\n@@ -7,10 +7,11 @@ import java.io.Serializable;\n import javax.xml.stream.XMLEventReader;\n import javax.xml.stream.events.StartElement;\n \n-import org.keycloak.dom.saml.v2.assertion.AttributeType;\n-import org.keycloak.dom.saml.v2.metadata.EntityAttributes;\n+import org.keycloak.dom.saml.v2.mdattr.EntityAttributes;\n import org.keycloak.saml.common.exceptions.ParsingException;\n import org.keycloak.saml.common.util.StaxParserUtil;\n+import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeParser;\n+import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAssertionParser;\n \n public class SAMLEntityAttributesParser extends AbstractStaxSamlMetadataParser<EntityAttributes> implements Serializable {\n \t private static final SAMLEntityAttributesParser INSTANCE = new SAMLEntityAttributesParser();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MDM3OA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449470378", "bodyText": "Remove and use parser from org.keycloak.saml.processing.core.parsers.saml.assertion", "author": "hmlnarik", "createdAt": "2020-07-03T09:06:54Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAssertionParser.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.keycloak.saml.processing.core.parsers.saml.metadata;\n+\n+public class SAMLAssertionParser extends SAMLAttributeTypeParser {", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAssertionParser.java b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAssertionParser.java\ndeleted file mode 100644\nindex dd0e74abb2..0000000000\n--- a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAssertionParser.java\n+++ /dev/null\n\n@@ -1,15 +0,0 @@\n-package org.keycloak.saml.processing.core.parsers.saml.metadata;\n-\n-public class SAMLAssertionParser extends SAMLAttributeTypeParser {\n-\n-    private static final SAMLAssertionParser INSTANCE = new SAMLAssertionParser();\n-\n-    private SAMLAssertionParser() {\n-        super(SAMLMetadataQNames.ASSERTION);\n-    }\n-\n-    public static SAMLAssertionParser getInstance() {\n-        return INSTANCE;\n-    }\n-\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MDQ2OQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449470469", "bodyText": "Remove and use parser from org.keycloak.saml.processing.core.parsers.saml.assertion", "author": "hmlnarik", "createdAt": "2020-07-03T09:07:05Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeParser.java", "diffHunk": "@@ -16,20 +16,12 @@\n  */\n package org.keycloak.saml.processing.core.parsers.saml.metadata;\n \n-import org.keycloak.dom.saml.v2.assertion.AttributeType;\n-import org.keycloak.saml.common.exceptions.ParsingException;\n-import org.keycloak.saml.common.util.StaxParserUtil;\n-import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeValueParser;\n-\n-import javax.xml.stream.XMLEventReader;\n-import javax.xml.stream.events.StartElement;\n-\n /**\n  * Parse the <conditions> in the saml assertion\n  *\n  * @since Oct 14, 2010\n  */\n-public class SAMLAttributeParser extends AbstractStaxSamlMetadataParser<AttributeType> {\n+public class SAMLAttributeParser extends SAMLAttributeTypeParser {", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5Njk0NA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449596944", "bodyText": "org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeParser  will be used in this PR. This SAMLAttributeParser existed in code and it was not used. Do you want to keep org.keycloak.saml.processing.core.parsers.saml.metadata.SAMLAttributeParser same as Keycloak master or to remove it?", "author": "cgeorgilakis", "createdAt": "2020-07-03T13:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MDQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeParser.java b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeParser.java\nindex 7cbf5d1f1e..0b719a292d 100644\n--- a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeParser.java\n+++ b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeParser.java\n\n@@ -16,12 +16,20 @@\n  */\n package org.keycloak.saml.processing.core.parsers.saml.metadata;\n \n+import org.keycloak.dom.saml.v2.assertion.AttributeType;\n+import org.keycloak.saml.common.exceptions.ParsingException;\n+import org.keycloak.saml.common.util.StaxParserUtil;\n+import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeValueParser;\n+\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.events.StartElement;\n+\n /**\n  * Parse the <conditions> in the saml assertion\n  *\n  * @since Oct 14, 2010\n  */\n-public class SAMLAttributeParser extends SAMLAttributeTypeParser {\n+public class SAMLAttributeParser extends AbstractStaxSamlMetadataParser<AttributeType> {\n \n     private static final SAMLAttributeParser INSTANCE = new SAMLAttributeParser();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MDYxOA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449470618", "bodyText": "Remove this change", "author": "hmlnarik", "createdAt": "2020-07-03T09:07:24Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeTypeParser.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.keycloak.saml.processing.core.parsers.saml.metadata;", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeTypeParser.java b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeTypeParser.java\ndeleted file mode 100644\nindex f2912c154c..0000000000\n--- a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeTypeParser.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-package org.keycloak.saml.processing.core.parsers.saml.metadata;\n-\n-import javax.xml.stream.XMLEventReader;\n-import javax.xml.stream.events.StartElement;\n-\n-import org.keycloak.dom.saml.v2.assertion.AttributeType;\n-import org.keycloak.saml.common.exceptions.ParsingException;\n-import org.keycloak.saml.common.util.StaxParserUtil;\n-import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeValueParser;\n-\n-public abstract class SAMLAttributeTypeParser  extends AbstractStaxSamlMetadataParser<AttributeType> {\n-\t\n-\t public SAMLAttributeTypeParser(SAMLMetadataQNames element) {\n-\t        super(element);\n-\t    }\n-\t\n-\t    @Override\n-\t    protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartElement element) throws ParsingException {\n-\t        String name = StaxParserUtil.getRequiredAttributeValue(element, SAMLMetadataQNames.ATTR_NAME);\n-\t        final AttributeType attribute = new AttributeType(name);\n-\n-\t        attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLMetadataQNames.ATTR_FRIENDLY_NAME));\n-\t        attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLMetadataQNames.ATTR_NAME_FORMAT));\n-\n-\t        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLMetadataQNames.ATTR_X500_ENCODING);\n-\t        if (x500Encoding != null) {\n-\t            attribute.getOtherAttributes().put(SAMLMetadataQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-\t        }\n-\n-\t        return attribute;\n-\t    }\n-\n-\t    @Override\n-\t    protected void processSubElement(XMLEventReader xmlEventReader, AttributeType target, SAMLMetadataQNames element, StartElement elementDetail) throws ParsingException {\n-\t        switch (element) {\n-\t            case ATTRIBUTE_VALUE:\n-\t                target.addAttributeValue(SAMLAttributeValueParser.getInstance().parse(xmlEventReader));\n-\t                break;\n-\n-\t            default:\n-\t                throw LOGGER.parserUnknownTag(StaxParserUtil.getElementName(elementDetail), elementDetail.getLocation());\n-\t        }\n-\t    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODIyNQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449478225", "bodyText": "Check the formatting.", "author": "hmlnarik", "createdAt": "2020-07-03T09:22:10Z", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +155,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n+                    \n+                \t//check for hide on login attibute\n+        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0Mjc0MA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r450842740", "bodyText": "Please do check the formatting", "author": "hmlnarik", "createdAt": "2020-07-07T12:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\nindex 4bf18af192..2ee734807e 100755\n--- a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\n+++ b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\n\n@@ -158,12 +161,12 @@ public class SAMLIdentityProviderFactory extends AbstractIdentityProviderFactory\n                     \n                     samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n                     \n-                \t//check for hide on login attibute\n+                \t//check for hide on login attribute\n         \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {\n-        \t\t\t\tfor (AttributeType attribute :  entityType.getExtensions().getEntityAttributes().getAttribute()) {\n-        \t\t\t\t\tif (GeneralConstants.MACEDIR.equals(attribute.getName()) && attribute.getAttributeValue().contains(GeneralConstants.HIDE_FOR_DISCOVERY) )\n-        \t\t\t\t\t\tsamlIdentityProviderConfig.setHideOnLogin(true);\n-        \t\t\t\t}\n+        \t\t\t    for (AttributeType attribute :  entityType.getExtensions().getEntityAttributes().getAttribute()) {\n+        \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )\n+        \t\t\t\t\t    samlIdentityProviderConfig.setHideOnLogin(true);\n+        \t\t\t    }\n \n         \t\t\t}\n         \t\t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODcyMw==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449478723", "bodyText": "Remove, there is already enabled property in the parent class.", "author": "hmlnarik", "createdAt": "2020-07-03T09:23:10Z", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java", "diffHunk": "@@ -52,6 +52,8 @@\n     public static final String WANT_ASSERTIONS_SIGNED = \"wantAssertionsSigned\";\n     public static final String WANT_AUTHN_REQUESTS_SIGNED = \"wantAuthnRequestsSigned\";\n     public static final String XML_SIG_KEY_INFO_KEY_NAME_TRANSFORMER = \"xmlSigKeyInfoKeyNameTransformer\";\n+    public static final String HIDE_ON_LOGIN = \"hideOnLoginPage\";\n+    public static final String ENABLED = \"enabled\";", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2MTgxMA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449561810", "bodyText": "I know it. The problem is that importFrom method in class IdentityProvidersResource ( rest api for import identity provider from url or file) is returning only IdentityProviderModel.config. Property enabled in IdentityProviderModel is not in this map. As a result when you import a Saml Identity Provider from url or file , property enabled will not returned from rest api. Do you suggest another solution?", "author": "cgeorgilakis", "createdAt": "2020-07-03T12:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MzAwMg==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452293002", "bodyText": "In that case it is necessary to use a specific name, plain enable would be confusing with the property above.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String ENABLED = \"enabled\";\n          \n          \n            \n                public static final String ENABLED_FROM_METADATA = \"enabledFromMetadata\";", "author": "hmlnarik", "createdAt": "2020-07-09T15:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java\nindex e225be93ec..bacd7a3976 100755\n--- a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java\n+++ b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java\n\n@@ -52,7 +52,6 @@ public class SAMLIdentityProviderConfig extends IdentityProviderModel {\n     public static final String WANT_ASSERTIONS_SIGNED = \"wantAssertionsSigned\";\n     public static final String WANT_AUTHN_REQUESTS_SIGNED = \"wantAuthnRequestsSigned\";\n     public static final String XML_SIG_KEY_INFO_KEY_NAME_TRANSFORMER = \"xmlSigKeyInfoKeyNameTransformer\";\n-    public static final String HIDE_ON_LOGIN = \"hideOnLoginPage\";\n     public static final String ENABLED = \"enabled\";\n \n     public SAMLIdentityProviderConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3OTI1OQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449479259", "bodyText": "This constant should be in IdentityProviderModel.", "author": "hmlnarik", "createdAt": "2020-07-03T09:24:18Z", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java", "diffHunk": "@@ -52,6 +52,8 @@\n     public static final String WANT_ASSERTIONS_SIGNED = \"wantAssertionsSigned\";\n     public static final String WANT_AUTHN_REQUESTS_SIGNED = \"wantAuthnRequestsSigned\";\n     public static final String XML_SIG_KEY_INFO_KEY_NAME_TRANSFORMER = \"xmlSigKeyInfoKeyNameTransformer\";\n+    public static final String HIDE_ON_LOGIN = \"hideOnLoginPage\";", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java\nindex e225be93ec..bacd7a3976 100755\n--- a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java\n+++ b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java\n\n@@ -52,7 +52,6 @@ public class SAMLIdentityProviderConfig extends IdentityProviderModel {\n     public static final String WANT_ASSERTIONS_SIGNED = \"wantAssertionsSigned\";\n     public static final String WANT_AUTHN_REQUESTS_SIGNED = \"wantAuthnRequestsSigned\";\n     public static final String XML_SIG_KEY_INFO_KEY_NAME_TRANSFORMER = \"xmlSigKeyInfoKeyNameTransformer\";\n-    public static final String HIDE_ON_LOGIN = \"hideOnLoginPage\";\n     public static final String ENABLED = \"enabled\";\n \n     public SAMLIdentityProviderConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3OTYwNg==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449479606", "bodyText": "Check formatting.", "author": "hmlnarik", "createdAt": "2020-07-03T09:24:53Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLExtensionsParser.java", "diffHunk": "@@ -47,6 +47,14 @@ protected ExtensionsType instantiateElement(XMLEventReader xmlEventReader, Start\n \n     @Override\n     protected void processSubElement(XMLEventReader xmlEventReader, ExtensionsType target, SAMLMetadataQNames element, StartElement elementDetail) throws ParsingException {\n-        target.addExtension(StaxParserUtil.getDOMElement(xmlEventReader));\n+        \n+    \tswitch (element) {", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLExtensionsParser.java b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLExtensionsParser.java\nindex 51aba6b506..5086972760 100644\n--- a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLExtensionsParser.java\n+++ b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLExtensionsParser.java\n\n@@ -49,11 +49,11 @@ public class SAMLExtensionsParser extends AbstractStaxSamlMetadataParser<Extensi\n     protected void processSubElement(XMLEventReader xmlEventReader, ExtensionsType target, SAMLMetadataQNames element, StartElement elementDetail) throws ParsingException {\n         \n     \tswitch (element) {\n-    \t\tcase ENTITY_ATTRIBUTES:\n-    \t\t\ttarget.setEntityAttributes(SAMLEntityAttributesParser.getInstance().parse(xmlEventReader));\n-    \t\t\tbreak;\n-    \t\tdefault:\n-    \t\t\ttarget.addExtension(StaxParserUtil.getDOMElement(xmlEventReader));\n+    \t    case ENTITY_ATTRIBUTES:\n+    \t\t    target.addExtension(SAMLEntityAttributesParser.getInstance().parse(xmlEventReader));\n+    \t\t    break;\n+    \t    default:\n+    \t\t    target.addExtension(StaxParserUtil.getDOMElement(xmlEventReader));\n     \t}\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3OTcxMQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449479711", "bodyText": "Check formatting", "author": "hmlnarik", "createdAt": "2020-07-03T09:25:04Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.keycloak.saml.processing.core.parsers.saml.metadata;\n+\n+import static org.keycloak.saml.processing.core.parsers.saml.metadata.SAMLMetadataQNames.ATTR_LANG;\n+\n+import java.io.Serializable;\n+\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.events.StartElement;\n+\n+import org.keycloak.dom.saml.v2.assertion.AttributeType;\n+import org.keycloak.dom.saml.v2.metadata.EntityAttributes;\n+import org.keycloak.saml.common.exceptions.ParsingException;\n+import org.keycloak.saml.common.util.StaxParserUtil;\n+\n+public class SAMLEntityAttributesParser extends AbstractStaxSamlMetadataParser<EntityAttributes> implements Serializable {\n+\t private static final SAMLEntityAttributesParser INSTANCE = new SAMLEntityAttributesParser();", "originalCommit": "35590d000cf584f1c0c7453c6fc6a9e6018697a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "chunk": "diff --git a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java\nindex f7611d1c94..69a9261c9d 100644\n--- a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java\n+++ b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java\n\n@@ -7,10 +7,11 @@ import java.io.Serializable;\n import javax.xml.stream.XMLEventReader;\n import javax.xml.stream.events.StartElement;\n \n-import org.keycloak.dom.saml.v2.assertion.AttributeType;\n-import org.keycloak.dom.saml.v2.metadata.EntityAttributes;\n+import org.keycloak.dom.saml.v2.mdattr.EntityAttributes;\n import org.keycloak.saml.common.exceptions.ParsingException;\n import org.keycloak.saml.common.util.StaxParserUtil;\n+import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeParser;\n+import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAssertionParser;\n \n public class SAMLEntityAttributesParser extends AbstractStaxSamlMetadataParser<EntityAttributes> implements Serializable {\n \t private static final SAMLEntityAttributesParser INSTANCE = new SAMLEntityAttributesParser();\n"}}, {"oid": "7f88355a1aea51cb25c7a45a75535fd117e19d1c", "url": "https://github.com/keycloak/keycloak/commit/7f88355a1aea51cb25c7a45a75535fd117e19d1c", "message": "pull request comments", "committedDate": "2020-07-07T08:20:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MDQ4Mw==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452280483", "bodyText": "Check formatting of this whole file.", "author": "hmlnarik", "createdAt": "2020-07-09T14:56:13Z", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.keycloak.dom.saml.v2.mdattr;", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c19289e26951a4104718473d16de18d789bccdae", "chunk": "diff --git a/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java b/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java\nindex eee602fdcc..45de268d41 100644\n--- a/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java\n+++ b/saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java\n\n@@ -7,11 +7,10 @@ import java.util.List;\n import org.keycloak.dom.saml.v2.assertion.AssertionType;\n import org.keycloak.dom.saml.v2.assertion.AttributeType;\n \n-\n-\n /**\n  *\n- * * <p>\n+ * *\n+ * <p>\n  * Java class for EntityAttributes complex type.\n  *\n  * <p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MzA2OQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452283069", "bodyText": "Check formatting of the whole file. Please do not use tabs but 4 spaces as indentation.", "author": "hmlnarik", "createdAt": "2020-07-09T14:59:34Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/mdattr/SAMLEntityAttributesParser.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.keycloak.saml.processing.core.parsers.saml.mdattr;", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c19289e26951a4104718473d16de18d789bccdae", "chunk": "diff --git a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/mdattr/SAMLEntityAttributesParser.java b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/mdattr/SAMLEntityAttributesParser.java\nindex bfbf464683..dabafddddb 100644\n--- a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/mdattr/SAMLEntityAttributesParser.java\n+++ b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/mdattr/SAMLEntityAttributesParser.java\n\n@@ -1,7 +1,5 @@\n package org.keycloak.saml.processing.core.parsers.saml.mdattr;\n \n-import static org.keycloak.saml.processing.core.parsers.saml.metadata.SAMLMetadataQNames.ATTR_LANG;\n-\n import java.io.Serializable;\n \n import javax.xml.stream.XMLEventReader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MzczMg==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452283732", "bodyText": "This belongs below to L 88, the namespace is other (see comment below)", "author": "hmlnarik", "createdAt": "2020-07-09T15:00:24Z", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLMetadataQNames.java", "diffHunk": "@@ -77,14 +77,15 @@\n     ATTR_IS_REQUIRED(null, \"isRequired\"),\n     ATTR_NAME(null, \"Name\"),\n     ATTR_NAME_FORMAT(null, \"NameFormat\"),\n-\n+    ENTITY_ATTRIBUTES(JBossSAMLURIConstants.METADATA_ENTITY_ATTRIBUTES_NSURI, \"EntityAttributes\"),", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c19289e26951a4104718473d16de18d789bccdae", "chunk": "diff --git a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLMetadataQNames.java b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLMetadataQNames.java\nindex 823f2b5786..8d915fca55 100644\n--- a/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLMetadataQNames.java\n+++ b/saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLMetadataQNames.java\n\n@@ -77,7 +77,6 @@ public enum SAMLMetadataQNames implements HasQName {\n     ATTR_IS_REQUIRED(null, \"isRequired\"),\n     ATTR_NAME(null, \"Name\"),\n     ATTR_NAME_FORMAT(null, \"NameFormat\"),\n-    ENTITY_ATTRIBUTES(JBossSAMLURIConstants.METADATA_ENTITY_ATTRIBUTES_NSURI, \"EntityAttributes\"),\n     // Elements from other namespaces that can be direct subelements of this namespace's elements\n     SIGNATURE(XmlDSigQNames.SIGNATURE),\n     KEY_INFO(XmlDSigQNames.KEY_INFO),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODU0Nw==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452288547", "bodyText": "Time needs to be adjusted to local \"Keycloak server\" time.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n          \n          \n            \n                                samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date(Time.currentTime())) );", "author": "hmlnarik", "createdAt": "2020-07-09T15:06:57Z", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +158,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MTE4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453481185", "bodyText": "new Date() return Keycloak server local Date time.\nTime class you mean org.keycloak.common.util.Time? This method return second and Java Date(long date) wait for milliseconds.\nIf you insist I could write it as :\nsamlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date(Time.currentTime() * 1000)) );", "author": "cgeorgilakis", "createdAt": "2020-07-13T08:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI3NDU0Mg==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r454274542", "bodyText": "Yes please, use currentTimeMillis() instead.", "author": "hmlnarik", "createdAt": "2020-07-14T10:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c19289e26951a4104718473d16de18d789bccdae", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\nindex 2ee734807e..d2851fd1e3 100755\n--- a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\n+++ b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\n\n@@ -158,18 +159,20 @@ public class SAMLIdentityProviderFactory extends AbstractIdentityProviderFactory\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n-                    \n-                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n-                    \n-                \t//check for hide on login attribute\n-        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {\n-        \t\t\t    for (AttributeType attribute :  entityType.getExtensions().getEntityAttributes().getAttribute()) {\n-        \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )\n-        \t\t\t\t\t    samlIdentityProviderConfig.setHideOnLogin(true);\n-        \t\t\t    }\n-\n-        \t\t\t}\n-        \t\t\t\n+\n+                    samlIdentityProviderConfig.setEnabledFromMetadata(entityType.getValidUntil() == null\n+                        || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()));\n+\n+                    // check for hide on login attribute\n+                    if (entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null) {\n+                        for (AttributeType attribute : entityType.getExtensions().getEntityAttributes().getAttribute()) {\n+                            if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName())\n+                                && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY)) {\n+                                samlIdentityProviderConfig.setHideOnLogin(true);\n+                            }\n+                        }\n+\n+                    }\n \n                     return samlIdentityProviderConfig.getConfig();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NDk1MA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452294950", "bodyText": "Use constant, not literal:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n          \n          \n            \n                    result.remove(\"enabled\");\n          \n          \n            \n                    boolean enabled = Boolean.valueOf(result.get(ENABLED_FROM_METADATA));\n          \n          \n            \n                    result.remove(ENABLED_FROM_METADATA);", "author": "hmlnarik", "createdAt": "2020-07-09T15:16:04Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -646,6 +652,10 @@ public void testSamlImportAndExportMultipleSigningKeys() throws URISyntaxExcepti\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata-two-signing-certs\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+        //firtsly check and remove enabled from result\n+        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n+        result.remove(\"enabled\");", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c19289e26951a4104718473d16de18d789bccdae", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\nindex 14941c1b55..a8cee681aa 100755\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\n\n@@ -652,18 +674,14 @@ public class IdentityProviderTest extends AbstractAdminTest {\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata-two-signing-certs\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n-        //firtsly check and remove enabled from result\n-        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n-        result.remove(\"enabled\");\n-        Assert.assertTrue(enabled);\n-        assertSamlImport(result, SIGNING_CERT_1 + \",\" + SIGNING_CERT_2);\n+        assertSamlImport(result, SIGNING_CERT_1 + \",\" + SIGNING_CERT_2,true);\n \n         // Create new SAML identity provider using configuration retrieved from import-config\n-        create(createRep(\"saml\", \"saml\", result));\n+        create(createRep(\"saml\", \"saml\",true, result));\n \n         IdentityProviderResource provider = realm.identityProviders().get(\"saml\");\n         IdentityProviderRepresentation rep = provider.toRepresentation();\n-        assertCreatedSamlIdp(rep);\n+        assertCreatedSamlIdp(rep,true);\n \n         // Now list the providers - we should see the one just created\n         List<IdentityProviderRepresentation> providers = realm.identityProviders().findAll();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTE0NA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452295144", "bodyText": "Use constant, not literal:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n          \n          \n            \n                    result.remove(\"enabled\");\n          \n          \n            \n                    boolean enabled = Boolean.valueOf(result.get(ENABLED_FROM_METADATA));\n          \n          \n            \n                    result.remove(ENABLED_FROM_METADATA);", "author": "hmlnarik", "createdAt": "2020-07-09T15:16:21Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -608,6 +609,11 @@ public void testSamlImportAndExport() throws URISyntaxException, IOException, Pa\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+       //firtsly check and remove enabled from result\n+        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n+        result.remove(\"enabled\");", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NDMwMA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452854300", "bodyText": "I strongly agree with you. However, in class IdentityProviderTest only literals are used and I want class writing to be similar.\nIf you insist, I could add literal for this or for all config properties.", "author": "cgeorgilakis", "createdAt": "2020-07-10T13:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NDMzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453074331", "bodyText": "Thank you. Constant just for this single change would set a good example for the rest, but those needn't be addressed in this PR.", "author": "hmlnarik", "createdAt": "2020-07-10T20:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c19289e26951a4104718473d16de18d789bccdae", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\nindex 14941c1b55..a8cee681aa 100755\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\n\n@@ -609,19 +610,14 @@ public class IdentityProviderTest extends AbstractAdminTest {\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n-       //firtsly check and remove enabled from result\n-        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n-        result.remove(\"enabled\");\n-        Assert.assertTrue(enabled);\n-        \n-        assertSamlImport(result, SIGNING_CERT_1);\n+        assertSamlImport(result, SIGNING_CERT_1,true);\n \n         // Create new SAML identity provider using configuration retrieved from import-config\n-        create(createRep(\"saml\", \"saml\", result));\n+        create(createRep(\"saml\", \"saml\",true, result));\n \n         IdentityProviderResource provider = realm.identityProviders().get(\"saml\");\n         IdentityProviderRepresentation rep = provider.toRepresentation();\n-        assertCreatedSamlIdp(rep);\n+        assertCreatedSamlIdp(rep,true);\n \n         // Now list the providers - we should see the one just created\n         List<IdentityProviderRepresentation> providers = realm.identityProviders().findAll();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTUzNw==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452295537", "bodyText": "For the tests:\nAdd a test with a an IdP that is not enabled and check that it is indeed not enabled after import.\nWhy is enabled removed from the result? It should remain there to test the functionality.", "author": "hmlnarik", "createdAt": "2020-07-09T15:16:56Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -608,6 +609,11 @@ public void testSamlImportAndExport() throws URISyntaxException, IOException, Pa\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+       //firtsly check and remove enabled from result", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0Mzk3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452843979", "bodyText": "I will add seperate test method for disabled IdP.\nThe difference between enabledFromMetadata with others properties is that enabledFromMetadata is not existed in config that saved in database. Moreover, assertSamlConfig is executed again after retrieving IdP from database. I will made appropriate changes to test in order to check appropriate value of enabledFromMetadata  and enable field for enabled and disabled IdP.", "author": "cgeorgilakis", "createdAt": "2020-07-10T13:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c19289e26951a4104718473d16de18d789bccdae", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\nindex 14941c1b55..a8cee681aa 100755\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java\n\n@@ -609,19 +610,14 @@ public class IdentityProviderTest extends AbstractAdminTest {\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n-       //firtsly check and remove enabled from result\n-        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n-        result.remove(\"enabled\");\n-        Assert.assertTrue(enabled);\n-        \n-        assertSamlImport(result, SIGNING_CERT_1);\n+        assertSamlImport(result, SIGNING_CERT_1,true);\n \n         // Create new SAML identity provider using configuration retrieved from import-config\n-        create(createRep(\"saml\", \"saml\", result));\n+        create(createRep(\"saml\", \"saml\",true, result));\n \n         IdentityProviderResource provider = realm.identityProviders().get(\"saml\");\n         IdentityProviderRepresentation rep = provider.toRepresentation();\n-        assertCreatedSamlIdp(rep);\n+        assertCreatedSamlIdp(rep,true);\n \n         // Now list the providers - we should see the one just created\n         List<IdentityProviderRepresentation> providers = realm.identityProviders().findAll();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5OTY0NQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452299645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Object o : this.any) {\n          \n          \n            \n                        if (o instanceof EntityAttributes) {\n          \n          \n            \n                            return (EntityAttributes) o;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return null;\n          \n          \n            \n                    return this.any.stream()\n          \n          \n            \n                        .filter(EntityAttributes::isInstance)\n          \n          \n            \n                        .findAny();", "author": "hmlnarik", "createdAt": "2020-07-09T15:22:55Z", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java", "diffHunk": "@@ -88,4 +89,14 @@ public void removeExtension(Object extension) {\n     public List<Object> getAny() {\n         return Collections.unmodifiableList(this.any);\n     }\n-}\n\\ No newline at end of file\n+\n+    public EntityAttributes getEntityAttributes() {\n+        for (Object o : this.any) {\n+            if (o instanceof EntityAttributes) {\n+                return (EntityAttributes) o;\n+            }\n+        }\n+        return null;", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1MDAzNA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452750034", "bodyText": "I agree. However, for adding this I must change maven.compiler.source of this subproject. I believe this is the best solution. Do you want to do it?\nOtherwhise a solution could be:\nreturn (EntityAttributes) this.any.stream().filter(o -> o instanceof EntityAttributes).findAny().orElse(null);", "author": "cgeorgilakis", "createdAt": "2020-07-10T10:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5OTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MjcyNA==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453072724", "bodyText": "Ah, ignore it for this moment then, I didn't realize this is still used by JDK 7 code.", "author": "hmlnarik", "createdAt": "2020-07-10T20:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5OTY0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTAwMg==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452301002", "bodyText": "Prevent potential NPE\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )\n          \n          \n            \n                    \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && REFEDS_HIDE_FROM_DISCOVERY.equals(attribute.getAttributeValue()))", "author": "hmlnarik", "createdAt": "2020-07-09T15:24:52Z", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +158,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n+                    \n+                \t//check for hide on login attribute\n+        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {\n+        \t\t\t    for (AttributeType attribute :  entityType.getExtensions().getEntityAttributes().getAttribute()) {\n+        \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )", "originalCommit": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5NjUzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452696531", "bodyText": "attributeValue is a List in class AttributeType which is instantiated as empty list as you can see.\nMoreover it is error to check equality between String and List.", "author": "cgeorgilakis", "createdAt": "2020-07-10T08:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MzA5Mg==", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453073092", "bodyText": "You're indeed right :-)", "author": "hmlnarik", "createdAt": "2020-07-10T20:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c19289e26951a4104718473d16de18d789bccdae", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\nindex 2ee734807e..d2851fd1e3 100755\n--- a/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\n+++ b/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\n\n@@ -158,18 +159,20 @@ public class SAMLIdentityProviderFactory extends AbstractIdentityProviderFactory\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n-                    \n-                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n-                    \n-                \t//check for hide on login attribute\n-        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {\n-        \t\t\t    for (AttributeType attribute :  entityType.getExtensions().getEntityAttributes().getAttribute()) {\n-        \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )\n-        \t\t\t\t\t    samlIdentityProviderConfig.setHideOnLogin(true);\n-        \t\t\t    }\n-\n-        \t\t\t}\n-        \t\t\t\n+\n+                    samlIdentityProviderConfig.setEnabledFromMetadata(entityType.getValidUntil() == null\n+                        || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()));\n+\n+                    // check for hide on login attribute\n+                    if (entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null) {\n+                        for (AttributeType attribute : entityType.getExtensions().getEntityAttributes().getAttribute()) {\n+                            if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName())\n+                                && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY)) {\n+                                samlIdentityProviderConfig.setHideOnLogin(true);\n+                            }\n+                        }\n+\n+                    }\n \n                     return samlIdentityProviderConfig.getConfig();\n                 }\n"}}, {"oid": "c19289e26951a4104718473d16de18d789bccdae", "url": "https://github.com/keycloak/keycloak/commit/c19289e26951a4104718473d16de18d789bccdae", "message": "pull request comments 2", "committedDate": "2020-07-14T07:38:24Z", "type": "forcePushed"}, {"oid": "c59a3c9c75120ab44a983ea9c00496451561c084", "url": "https://github.com/keycloak/keycloak/commit/c59a3c9c75120ab44a983ea9c00496451561c084", "message": "https://issues.redhat.com/browse/KEYCLOAK-14304", "committedDate": "2020-07-14T15:02:58Z", "type": "forcePushed"}, {"oid": "d7b9d42a132effd137207f1453749a59aed9b974", "url": "https://github.com/keycloak/keycloak/commit/d7b9d42a132effd137207f1453749a59aed9b974", "message": "https://issues.redhat.com/browse/KEYCLOAK-14304", "committedDate": "2020-07-22T14:00:29Z", "type": "forcePushed"}, {"oid": "7753e9e69bb1e166ad2eb3b090f7b8e946995e1e", "url": "https://github.com/keycloak/keycloak/commit/7753e9e69bb1e166ad2eb3b090f7b8e946995e1e", "message": "https://issues.redhat.com/browse/KEYCLOAK-14304", "committedDate": "2020-08-26T10:09:37Z", "type": "forcePushed"}, {"oid": "0b53552d8a2239f5c4efc1c6b9901e571be0631c", "url": "https://github.com/keycloak/keycloak/commit/0b53552d8a2239f5c4efc1c6b9901e571be0631c", "message": "https://issues.redhat.com/browse/KEYCLOAK-14304", "committedDate": "2020-08-27T10:36:43Z", "type": "forcePushed"}, {"oid": "1b7169610c79bf3dc3aaec1f4a57aa029bd5e83c", "url": "https://github.com/keycloak/keycloak/commit/1b7169610c79bf3dc3aaec1f4a57aa029bd5e83c", "message": "https://issues.redhat.com/browse/KEYCLOAK-14304", "committedDate": "2020-09-01T07:21:02Z", "type": "forcePushed"}, {"oid": "36502d5495a7aca34176c87b4f09bb75a1abd199", "url": "https://github.com/keycloak/keycloak/commit/36502d5495a7aca34176c87b4f09bb75a1abd199", "message": "KEYCLOAK-14304 Enhance SAML Identity Provider Metadata processing:wq", "committedDate": "2020-09-01T07:40:37Z", "type": "forcePushed"}, {"oid": "9353e5470d7e62c33fc99737b2750be7075ed84f", "url": "https://github.com/keycloak/keycloak/commit/9353e5470d7e62c33fc99737b2750be7075ed84f", "message": "KEYCLOAK-14304 Enhance SAML Identity Provider Metadata processing", "committedDate": "2020-09-01T07:47:32Z", "type": "commit"}, {"oid": "9353e5470d7e62c33fc99737b2750be7075ed84f", "url": "https://github.com/keycloak/keycloak/commit/9353e5470d7e62c33fc99737b2750be7075ed84f", "message": "KEYCLOAK-14304 Enhance SAML Identity Provider Metadata processing", "committedDate": "2020-09-01T07:47:32Z", "type": "forcePushed"}]}