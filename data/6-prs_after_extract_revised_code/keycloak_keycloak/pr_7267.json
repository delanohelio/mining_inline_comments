{"pr_number": 7267, "pr_title": "KEYCLOAK-14547: Make New Account Console the default.", "pr_createdAt": "2020-07-15T00:43:41Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7267", "timeline": [{"oid": "a0abaf288cf5cf849ebed513b70b7aa67fbdd3af", "url": "https://github.com/keycloak/keycloak/commit/a0abaf288cf5cf849ebed513b70b7aa67fbdd3af", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-07-15T17:24:31Z", "type": "forcePushed"}, {"oid": "491c880915ae2c56b55c47f5327c0827fa368129", "url": "https://github.com/keycloak/keycloak/commit/491c880915ae2c56b55c47f5327c0827fa368129", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-07-17T20:36:21Z", "type": "forcePushed"}, {"oid": "462a552093a7aa5ef9b3853c245dbb7f5081a1d4", "url": "https://github.com/keycloak/keycloak/commit/462a552093a7aa5ef9b3853c245dbb7f5081a1d4", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-07-17T20:39:53Z", "type": "forcePushed"}, {"oid": "db1a69dd92706dc5db4eaf1d197709920467785b", "url": "https://github.com/keycloak/keycloak/commit/db1a69dd92706dc5db4eaf1d197709920467785b", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-07-18T16:32:45Z", "type": "forcePushed"}, {"oid": "6026d86f122df59d22add90478c290e881a864ed", "url": "https://github.com/keycloak/keycloak/commit/6026d86f122df59d22add90478c290e881a864ed", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-07-19T16:38:45Z", "type": "forcePushed"}, {"oid": "3f27201f83962b6ab1db3568d4c9524b2e7b9191", "url": "https://github.com/keycloak/keycloak/commit/3f27201f83962b6ab1db3568d4c9524b2e7b9191", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-07-19T17:20:16Z", "type": "forcePushed"}, {"oid": "d8e95dc5c44531101142b0895890215e2041191d", "url": "https://github.com/keycloak/keycloak/commit/d8e95dc5c44531101142b0895890215e2041191d", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-07-20T16:44:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1MTg3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r457951879", "bodyText": "Just a nitpick. These imports are not used.", "author": "vmuzikar", "createdAt": "2020-07-21T09:10:56Z", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/ProfileAssume.java", "diffHunk": "@@ -27,6 +27,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.keycloak.admin.client.resource.ServerInfoResource;\n+import org.keycloak.representations.info.ServerInfoRepresentation;", "originalCommit": "d8e95dc5c44531101142b0895890215e2041191d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47fdc695436accab991251e83fa926acb4cddeea", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/ProfileAssume.java b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/ProfileAssume.java\nindex 8a0a88b085..09d11b5b09 100644\n--- a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/ProfileAssume.java\n+++ b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/ProfileAssume.java\n\n@@ -27,8 +27,6 @@ import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.keycloak.admin.client.resource.ServerInfoResource;\n-import org.keycloak.representations.info.ServerInfoRepresentation;\n \n /**\n  * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r457990010", "bodyText": "I have to admit I don't like the approach with renaming and creating new abstract classes. The naming is quite confusing \u2013 AbstractKeycloakTest vs MainAbstractKeycloakTest. But more importantly, it breaks the class hierarchy which results in duplicate code e.g. in AbstractUiTest.\nThe way I see it we have two options.\n\nMove the abstract class that disables the new console much, much lower in the hierarchy. So that the abstract classes could be used by the new console tests and code duplication wouldn't be necessary.\nDisable the new console in the first abstract class and then re-enable it only in the tests that need it. The number of tests for the new console is really just a fraction of what we have, so maybe that would be a cleaner approach.\n\nIn any case, this change should be as small as possible because it's only temporary. Sooner or later the old console will be deprecated and we'll have to fix all the tests that rely on it.", "author": "vmuzikar", "createdAt": "2020-07-21T10:17:06Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "originalCommit": "d8e95dc5c44531101142b0895890215e2041191d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1Nzg0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458357849", "bodyText": "I have to admit I don't like the approach with renaming and creating new abstract classes. The naming is quite confusing \u2013 AbstractKeycloakTest vs MainAbstractKeycloakTest. But more importantly, it breaks the class hierarchy which results in duplicate code e.g. in AbstractUiTest.\nThe way I see it we have two options.\n\nMove the abstract class that disables the new console much, much lower in the hierarchy. So that the abstract classes could be used by the new console tests and code duplication wouldn't be necessary.\nDisable the new console in the first abstract class and then re-enable it only in the tests that need it. The number of tests for the new console is really just a fraction of what we have, so maybe that would be a cleaner approach.\n\nIn any case, this change should be as small as possible because it's only temporary. Sooner or later the old console will be deprecated and we'll have to fix all the tests that rely on it.\n\nI'm not really happy with this either.\nI spent a fair amount of time trying to figure out what would be the least disruptive to the current code base.\nI don't think your first suggestion would work at all without changing a lot of tests.  If I recall, a lot of tests extend AbstractKeycloakTest directly.\nI wouldn't want to go through all the tests that need new account console and enable NAC individually.  That just seems wrong since we want to use NAC going forward.\nIMO, the only thing that made the code a little more ugly was that I had to copy some code from AbstractAuthorizationTest to AbstractUITest.  Because of the way the hierarchy is set up there was no good way to get around it without figuring out exactly what each test was using from the base class.\nThis is what happens when a code base relies so heavily on inheritance instead of delegation.\nThat being said, the whole thing could definitely use some refactoring but it's just a matter of deciding how much time you want to spend.", "author": "ssilvert", "createdAt": "2020-07-21T20:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NDEzNg==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458554136", "bodyText": "I don't think your first suggestion would work at all without changing a lot of tests. If I recall, a lot of tests extend AbstractKeycloakTest directly.\n\nAh, yes, you're correct. Option 1 won't work.\n\nI wouldn't want to go through all the tests that need new account console and enable NAC individually. That just seems wrong since we want to use NAC going forward.\n\nActually, I think you wouldn't need to go trough all the tests that need NAC. The annotations to enable it are already there, the only change we'd have to do now is to disable NAC in the most abstract class. Once we fixed the tests to work with NAC, we'll just remove those annotations. That seems to me like the least invasive option. If it works, of course. ;)\n\nThat being said, the whole thing could definitely use some refactoring but it's just a matter of deciding how much time you want to spend.\n\n+1000\nThat being said, it's ugly but we don't need to make it even more ugly now. :)", "author": "vmuzikar", "createdAt": "2020-07-22T06:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3MTg3MQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458771871", "bodyText": "Actually, I think you wouldn't need to go trough all the tests that need NAC. The annotations to enable it are already there, the only change we'd have to do now is to disable NAC in the most abstract class. Once we fixed the tests to work with NAC, we'll just remove those annotations. That seems to me like the least invasive option. If it works, of course. ;)\n\nI tried that and it didn't appear to work.  Even if it did things would get confusing.  You end up with an inheritance hierarchy where a base class has @EnableFeature and a subclass has @DisableFeature.  Or vice versa.  So you don't know who wins.\nI did find that using the annotation on a method takes precedence, over having it at the class level.  So that helped out a bit.", "author": "ssilvert", "createdAt": "2020-07-22T12:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1OTU1MQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458859551", "bodyText": "IMHO there's no problem with a parent class disabling feature and some child re-enabling it. I'm sure we could fix the implementation if it doesn't work like that.\nAs an alternative, we could globally disable NAS on testsuite level by some other way (without using the annotation) and use the annotation just for enabling where needed. It's all just temporary anyway so we should do as little changes in the class hierarchy as possible.", "author": "vmuzikar", "createdAt": "2020-07-22T15:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDY5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r459384691", "bodyText": "IMHO there's no problem with a parent class disabling feature and some child re-enabling it. I'm sure we could fix the implementation if it doesn't work like that.\n\nI think it is a problem because there is no hard and fast rule about who should win.  And even if you know how to determine the winner you must inspect the entire hierarchy to find all the @enable and @disable annotations.  That's very confusing for the developer.\n\nAs an alternative, we could globally disable NAS on testsuite level by some other way (without using the annotation) and use the annotation just for enabling where needed. It's all just temporary anyway so we should do as little changes in the class hierarchy as possible.\n\nWe both agree that things have gotten messy.  Let's fix it in another JIRA.", "author": "ssilvert", "createdAt": "2020-07-23T11:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNjMyNQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r459416325", "bodyText": "I think it is a problem because there is no hard and fast rule about who should win. And even if you know how to determine the winner you must inspect the entire hierarchy to find all the @enable and @disable annotations. That's very confusing for the developer.\n\nIt already works like that \u2013 the entire hierarchy is transparently checked for the annotations thanks to @Inherited. ;) And to clearly determine who wins is just a matter of updating checkAnnotatedElementForFeatureAnnotations. I still believe this is a cleaner way than to break the class hierarchy.\n\nWe both agree that things have gotten messy. Let's fix it in another JIRA.\n\nSure, a follow-up JIRA can fix things but IMHO we don't need to make it even more messy in this PR. :)", "author": "vmuzikar", "createdAt": "2020-07-23T12:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0NzI5Mg==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r461747292", "bodyText": "@ssilvert PTAL at ssilvert#8. It makes the enabling/disabling features more predictable so that we can disable NAC in abstract test class and the re-enable it in NAC tests.\n@mhajas Could you please check ssilvert@82fd457 if it makes sense to you? It touches your KeycloakContainerFeaturesController.", "author": "vmuzikar", "createdAt": "2020-07-28T17:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNjMzNA==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r462136334", "bodyText": "@vmuzikar It makes sense to me. However, could you please run the whole testsuite with these changes? There are quite a lot of tests using it, so we should make sure this doesn't break something.", "author": "mhajas", "createdAt": "2020-07-29T08:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1MDM4Mg==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r462150382", "bodyText": "@mhajas Sure, I plan to do that once @ssilvert approves the changes as well. Thank you for checking it!", "author": "vmuzikar", "createdAt": "2020-07-29T09:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "dd7e29e4299ab359d4d7596856e8e9ea59f14478", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java\nindex 4a4056ac9e..3f6f798e07 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java\n\n@@ -16,16 +16,643 @@\n  */\n package org.keycloak.testsuite;\n \n+import io.appium.java_client.AppiumDriver;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.drone.api.annotation.Drone;\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.keycloak.admin.client.Keycloak;\n+import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n+import org.keycloak.admin.client.resource.RealmsResource;\n+import org.keycloak.admin.client.resource.UserResource;\n+import org.keycloak.admin.client.resource.UsersResource;\n import org.keycloak.common.Profile;\n+import org.keycloak.common.util.KeycloakUriBuilder;\n+import org.keycloak.common.util.Time;\n+import org.keycloak.representations.idm.ClientRepresentation;\n+import org.keycloak.representations.idm.RealmRepresentation;\n+import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.services.resources.account.AccountFormService;\n+import org.keycloak.testsuite.admin.ApiUtil;\n+import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n+import org.keycloak.testsuite.arquillian.KcArquillian;\n+import org.keycloak.testsuite.arquillian.SuiteContext;\n+import org.keycloak.testsuite.arquillian.TestContext;\n import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n+import org.keycloak.testsuite.auth.page.AuthRealm;\n+import org.keycloak.testsuite.auth.page.AuthServer;\n+import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n+import org.keycloak.testsuite.auth.page.WelcomePage;\n+import org.keycloak.testsuite.auth.page.account.Account;\n+import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n+import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n+import org.keycloak.testsuite.client.KeycloakTestingClient;\n+import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n+import org.keycloak.testsuite.util.DroneUtils;\n+import org.keycloak.testsuite.util.OAuthClient;\n+import org.keycloak.testsuite.util.TestCleanup;\n+import org.keycloak.testsuite.util.TestEventsLogger;\n+import org.openqa.selenium.WebDriver;\n+\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.UriBuilder;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PipedInputStream;\n+import java.io.PipedOutputStream;\n+import java.io.PrintWriter;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Scanner;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n+import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n+import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n+import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n+import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n+import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n+import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n+import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n \n /**\n- * Old tests that use AbstractKeycloakTest assume that we are using the old\n- * account console.\n- * \n- * @author Stan Silvert\n+ *\n+ * @author tkyjovsk\n  */\n+@RunWith(KcArquillian.class)\n+@RunAsClient\n @DisableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n-public abstract class AbstractKeycloakTest extends MainAbstractKeycloakTest {\n-    \n+public abstract class AbstractKeycloakTest {\n+    protected static final String ENGLISH_LOCALE_NAME = \"English\";\n+\n+    protected Logger log = Logger.getLogger(this.getClass());\n+\n+    @ArquillianResource\n+    protected SuiteContext suiteContext;\n+\n+    @ArquillianResource\n+    protected TestContext testContext;\n+\n+    protected Keycloak adminClient;\n+\n+    protected KeycloakTestingClient testingClient;\n+\n+    @ArquillianResource\n+    protected OAuthClient oauth;\n+\n+    protected List<RealmRepresentation> testRealmReps;\n+\n+    @Drone\n+    protected WebDriver driver;\n+\n+    @Page\n+    protected AuthServerContextRoot authServerContextRootPage;\n+    @Page\n+    protected AuthServer authServerPage;\n+\n+    @Page\n+    protected AuthRealm masterRealmPage;\n+\n+    @Page\n+    protected Account accountPage;\n+\n+    @Page\n+    protected OIDCLogin loginPage;\n+\n+    @Page\n+    protected UpdatePassword updatePasswordPage;\n+\n+    @Page\n+    protected LoginPasswordUpdatePage passwordUpdatePage;\n+\n+    @Page\n+    protected WelcomePage welcomePage;\n+\n+    private PropertiesConfiguration constantsProperties;\n+\n+    private boolean resetTimeOffset;\n+\n+    @Before\n+    public void beforeAbstractKeycloakTest() throws Exception {\n+        adminClient = testContext.getAdminClient();\n+        if (adminClient == null || adminClient.isClosed()) {\n+            reconnectAdminClient();\n+        }\n+\n+        getTestingClient();\n+\n+        setDefaultPageUriParameters();\n+\n+        TestEventsLogger.setDriver(driver);\n+\n+        // The backend cluster nodes may not be yet started. Password will be updated later for cluster setup.\n+        if (!AuthServerTestEnricher.AUTH_SERVER_CLUSTER) {\n+            updateMasterAdminPassword();\n+        }\n+\n+        beforeAbstractKeycloakTestRealmImport();\n+\n+        if (testContext.getTestRealmReps().isEmpty()) {\n+            importTestRealms();\n+\n+            if (!isImportAfterEachMethod()) {\n+                testContext.setTestRealmReps(testRealmReps);\n+            }\n+\n+            afterAbstractKeycloakTestRealmImport();\n+        }\n+\n+        oauth.init(driver);\n+\n+    }\n+\n+    public void reconnectAdminClient() throws Exception {\n+        testContext.reconnectAdminClient();\n+        adminClient = testContext.getAdminClient();\n+    }\n+\n+    protected void beforeAbstractKeycloakTestRealmImport() throws Exception {\n+    }\n+    protected void postAfterAbstractKeycloak() {\n+    }\n+\n+    protected void afterAbstractKeycloakTestRealmImport() {}\n+\n+    @After\n+    public void afterAbstractKeycloakTest() {\n+        if (resetTimeOffset) {\n+            resetTimeOffset();\n+        }\n+\n+        if (isImportAfterEachMethod()) {\n+            log.info(\"removing test realms after test method\");\n+            for (RealmRepresentation testRealm : testRealmReps) {\n+                removeRealm(testRealm.getRealm());\n+            }\n+        } else {\n+            log.info(\"calling all TestCleanup\");\n+            // Remove all sessions\n+            testContext.getTestRealmReps().stream().forEach((r)->testingClient.testing().removeUserSessions(r.getRealm()));\n+\n+            // Cleanup objects\n+            for (TestCleanup cleanup : testContext.getCleanups().values()) {\n+                try {\n+                    if (cleanup != null) cleanup.executeCleanup();\n+                } catch (Exception e) {\n+                    log.error(\"failed cleanup!\", e);\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            testContext.getCleanups().clear();\n+        }\n+\n+        postAfterAbstractKeycloak();\n+\n+        // Remove all browsers from queue\n+        DroneUtils.resetQueue();\n+    }\n+\n+    protected TestCleanup getCleanup(String realmName) {\n+        return testContext.getOrCreateCleanup(realmName);\n+    }\n+\n+    protected TestCleanup getCleanup() {\n+        return getCleanup(\"test\");\n+    }\n+\n+    protected boolean isImportAfterEachMethod() {\n+        return false;\n+    }\n+\n+    protected void updateMasterAdminPassword() {\n+        if (!suiteContext.isAdminPasswordUpdated()) {\n+            log.debug(\"updating admin password\");\n+\n+            welcomePage.navigateTo();\n+            if (!welcomePage.isPasswordSet()) {\n+                welcomePage.setPassword(\"admin\", \"admin\");\n+            }\n+\n+            suiteContext.setAdminPasswordUpdated(true);\n+        }\n+    }\n+\n+    public void deleteAllCookiesForMasterRealm() {\n+        deleteAllCookiesForRealm(accountPage);\n+    }\n+\n+    protected void deleteAllCookiesForRealm(Account realmAccountPage) {\n+        // masterRealmPage.navigateTo();\n+        realmAccountPage.navigateTo(); // Because IE webdriver freezes when loading a JSON page (realm page), we need to use this alternative\n+        log.info(\"deleting cookies in '\" + realmAccountPage.getAuthRealm() + \"' realm\");\n+        driver.manage().deleteAllCookies();\n+    }\n+\n+    protected void deleteAllCookiesForRealm(String realmName) {\n+        // masterRealmPage.navigateTo();\n+        navigateToUri(accountPage.getAuthRoot() + \"/realms/\" + realmName + \"/account\"); // Because IE webdriver freezes when loading a JSON page (realm page), we need to use this alternative\n+        log.info(\"deleting cookies in '\" + realmName + \"' realm\");\n+        driver.manage().deleteAllCookies();\n+    }\n+\n+    // this is useful mainly for smartphones as cookies deletion doesn't work there\n+    protected void deleteAllSessionsInRealm(String realmName) {\n+        log.info(\"removing all sessions from '\" + realmName + \"' realm...\");\n+        try {\n+            adminClient.realm(realmName).logoutAll();\n+            log.info(\"sessions successfully deleted\");\n+        }\n+        catch (NotFoundException e) {\n+            log.warn(\"realm not found\");\n+        }\n+    }\n+\n+    protected void resetRealmSession(String realmName) {\n+        deleteAllCookiesForRealm(realmName);\n+\n+        if (driver instanceof AppiumDriver) { // smartphone drivers don't support cookies deletion\n+            try {\n+                log.info(\"resetting realm session\");\n+\n+                final RealmRepresentation realmRep = adminClient.realm(realmName).toRepresentation();\n+\n+                deleteAllSessionsInRealm(realmName); // logout users\n+\n+                if (realmRep.isInternationalizationEnabled()) { // reset the locale\n+                    String locale = getDefaultLocaleName(realmRep.getRealm());\n+                    loginPage.localeDropdown().selectByText(locale);\n+                    log.info(\"locale reset to \" + locale);\n+                }\n+            } catch (NotFoundException e) {\n+                log.warn(\"realm not found\");\n+            }\n+        }\n+    }\n+\n+    protected String getDefaultLocaleName(String realmName) {\n+        return ENGLISH_LOCALE_NAME;\n+    }\n+\n+    public void setDefaultPageUriParameters() {\n+        masterRealmPage.setAuthRealm(MASTER);\n+        loginPage.setAuthRealm(MASTER);\n+    }\n+\n+    public KeycloakTestingClient getTestingClient() {\n+        if (testingClient == null) {\n+            testingClient = testContext.getTestingClient();\n+        }\n+        return testingClient;\n+    }\n+\n+    public TestContext getTestContext() {\n+        return testContext;\n+    }\n+\n+    public Keycloak getAdminClient() {\n+        return adminClient;\n+    }\n+\n+    public abstract void addTestRealms(List<RealmRepresentation> testRealms);\n+\n+    private void addTestRealms() {\n+        log.debug(\"loading test realms\");\n+        if (testRealmReps == null) {\n+            testRealmReps = new ArrayList<>();\n+        }\n+        if (testRealmReps.isEmpty()) {\n+            addTestRealms(testRealmReps);\n+        }\n+    }\n+\n+    public void fixAuthServerHostAndPortForClientRepresentation(ClientRepresentation cr) {\n+        cr.setBaseUrl(removeDefaultPorts(replaceAuthHostWithRealHost(cr.getBaseUrl())));\n+        cr.setAdminUrl(removeDefaultPorts(replaceAuthHostWithRealHost(cr.getAdminUrl())));\n+\n+        if (cr.getRedirectUris() != null && !cr.getRedirectUris().isEmpty()) {\n+            List<String> fixedUrls = new ArrayList<>(cr.getRedirectUris().size());\n+            for (String url : cr.getRedirectUris()) {\n+                fixedUrls.add(removeDefaultPorts(replaceAuthHostWithRealHost(url)));\n+            }\n+\n+            cr.setRedirectUris(fixedUrls);\n+        }\n+    }\n+\n+    public String replaceAuthHostWithRealHost(String url) {\n+        if (url != null && (url.contains(\"localhost:8180\") || url.contains(\"localhost:8543\"))) {\n+            return url.replaceFirst(\"localhost:(\\\\d)+\", AUTH_SERVER_HOST + \":\" + AUTH_SERVER_PORT);\n+        }\n+\n+        return url;\n+    }\n+\n+    public void importTestRealms() {\n+        addTestRealms();\n+        log.info(\"importing test realms\");\n+        for (RealmRepresentation testRealm : testRealmReps) {\n+            importRealm(testRealm);\n+        }\n+    }\n+\n+    private void modifySamlAttributes(ClientRepresentation cr) {\n+        if (cr.getProtocol() != null && cr.getProtocol().equals(\"saml\")) {\n+            log.debug(\"Modifying attributes of SAML client: \" + cr.getClientId());\n+            for (Map.Entry<String, String> entry : cr.getAttributes().entrySet()) {\n+                cr.getAttributes().put(entry.getKey(), replaceHttpValuesWithHttps(entry.getValue()));\n+            }\n+        }\n+    }\n+\n+    private void modifyRedirectUrls(ClientRepresentation cr) {\n+        if (cr.getRedirectUris() != null && cr.getRedirectUris().size() > 0) {\n+            List<String> redirectUrls = cr.getRedirectUris();\n+            List<String> fixedRedirectUrls = new ArrayList<>(redirectUrls.size());\n+            for (String url : redirectUrls) {\n+                fixedRedirectUrls.add(replaceHttpValuesWithHttps(url));\n+            }\n+            cr.setRedirectUris(fixedRedirectUrls);\n+        }\n+    }\n+\n+    private void modifyMainUrls(ClientRepresentation cr) {\n+        cr.setBaseUrl(replaceHttpValuesWithHttps(cr.getBaseUrl()));\n+        cr.setAdminUrl(replaceHttpValuesWithHttps(cr.getAdminUrl()));\n+    }\n+\n+    private String replaceHttpValuesWithHttps(String input) {\n+        if (input == null) {\n+            return null;\n+        }\n+        if (\"\".equals(input)) {\n+            return \"\";\n+        }\n+        return input\n+              .replace(\"http\", \"https\")\n+              .replace(\"8080\", \"8543\")\n+              .replace(\"8180\", \"8543\");\n+    }\n+\n+    /**\n+     * @return Return <code>true</code> if you wish to automatically post-process realm and replace\n+     * all http values with https (and correct ports).\n+     */\n+    protected boolean modifyRealmForSSL() {\n+        return false;\n+    }\n+\n+\n+    protected void removeAllRealmsDespiteMaster() {\n+        // remove all realms (accidentally left by other tests) except for master\n+        adminClient.realms().findAll().stream()\n+                .map(RealmRepresentation::getRealm)\n+                .filter(realmName -> ! realmName.equals(\"master\"))\n+                .forEach(this::removeRealm);\n+        assertThat(adminClient.realms().findAll().size(), is(equalTo(1)));\n+    }\n+\n+\n+    public void importRealm(RealmRepresentation realm) {\n+        if (modifyRealmForSSL()) {\n+            if (AUTH_SERVER_SSL_REQUIRED) {\n+                log.debugf(\"Modifying %s for SSL\", realm.getId());\n+                for (ClientRepresentation cr : realm.getClients()) {\n+                    modifyMainUrls(cr);\n+                    modifyRedirectUrls(cr);\n+                    modifySamlAttributes(cr);\n+                }\n+            }\n+        }\n+\n+        if (!AUTH_SERVER_HOST.equals(\"localhost\")) {\n+            if (!AUTH_SERVER_SSL_REQUIRED) {\n+                realm.setSslRequired(\"none\");\n+            }\n+            if (realm.getClients() != null) {\n+                for (ClientRepresentation cr : realm.getClients()) {\n+                    fixAuthServerHostAndPortForClientRepresentation(cr);\n+                }\n+            }\n+\n+            if (realm.getApplications() != null) {\n+                for (ClientRepresentation cr : realm.getApplications()) {\n+                    fixAuthServerHostAndPortForClientRepresentation(cr);\n+                }\n+            }\n+        }\n+\n+        log.debug(\"--importing realm: \" + realm.getRealm());\n+        try {\n+            adminClient.realms().realm(realm.getRealm()).remove();\n+            log.debug(\"realm already existed on server, re-importing\");\n+        } catch (NotFoundException ignore) {\n+            // expected when realm does not exist\n+        }\n+        adminClient.realms().create(realm);\n+    }\n+\n+    public void removeRealm(String realmName) {\n+        log.info(\"removing realm: \" + realmName);\n+        try {\n+            adminClient.realms().realm(realmName).remove();\n+        } catch (NotFoundException e) {\n+        }\n+    }\n+\n+    public RealmsResource realmsResouce() {\n+        return adminClient.realms();\n+    }\n+\n+    /**\n+     * Creates a user in the given realm and returns its ID.\n+     *\n+     * @param realm           Realm name\n+     * @param username        Username\n+     * @param password        Password\n+     * @param requiredActions\n+     * @return ID of the newly created user\n+     */\n+    public String createUser(String realm, String username, String password, String... requiredActions) {\n+        UserRepresentation homer = createUserRepresentation(username, password);\n+        homer.setRequiredActions(Arrays.asList(requiredActions));\n+\n+        return ApiUtil.createUserWithAdminClient(adminClient.realm(realm), homer);\n+    }\n+\n+    public String createUser(String realm, String username, String password, String firstName, String lastName, String email) {\n+        UserRepresentation homer = createUserRepresentation(username, email, firstName, lastName, true, password);\n+        return ApiUtil.createUserWithAdminClient(adminClient.realm(realm), homer);\n+    }\n+\n+    public static UserRepresentation createUserRepresentation(String username, String email, String firstName, String lastName, boolean enabled) {\n+        UserRepresentation user = new UserRepresentation();\n+        user.setUsername(username);\n+        user.setEmail(email);\n+        user.setFirstName(firstName);\n+        user.setLastName(lastName);\n+        user.setEnabled(enabled);\n+        return user;\n+    }\n+\n+    public static UserRepresentation createUserRepresentation(String username, String email, String firstName, String lastName, boolean enabled, String password) {\n+        UserRepresentation user = createUserRepresentation(username, email, firstName, lastName, enabled);\n+        setPasswordFor(user, password);\n+        return user;\n+    }\n+\n+    public static UserRepresentation createUserRepresentation(String username, String password) {\n+        UserRepresentation user = createUserRepresentation(username, null, null, null, true, password);\n+        return user;\n+    }\n+\n+    public void setRequiredActionEnabled(String realm, String requiredAction, boolean enabled, boolean defaultAction) {\n+        AuthenticationManagementResource managementResource = adminClient.realm(realm).flows();\n+\n+        RequiredActionProviderRepresentation action = managementResource.getRequiredAction(requiredAction);\n+        action.setEnabled(enabled);\n+        action.setDefaultAction(defaultAction);\n+\n+        managementResource.updateRequiredAction(requiredAction, action);\n+    }\n+\n+    public void setRequiredActionEnabled(String realm, String userId, String requiredAction, boolean enabled) {\n+        UsersResource usersResource = adminClient.realm(realm).users();\n+\n+        UserResource userResource = usersResource.get(userId);\n+        UserRepresentation userRepresentation = userResource.toRepresentation();\n+\n+        List<String> requiredActions = userRepresentation.getRequiredActions();\n+        if (enabled && !requiredActions.contains(requiredAction)) {\n+            requiredActions.add(requiredAction);\n+        } else if (!enabled && requiredActions.contains(requiredAction)) {\n+            requiredActions.remove(requiredAction);\n+        }\n+\n+        userResource.update(userRepresentation);\n+    }\n+\n+    /**\n+     * Sets time of day by calculating time offset and using setTimeOffset() to set it.\n+     *\n+     * @param hour hour of day\n+     * @param minute minute\n+     * @param second second\n+     */\n+    public void setTimeOfDay(int hour, int minute, int second) {\n+        setTimeOfDay(hour, minute, second, 0);\n+    }\n+\n+    /**\n+     * Sets time of day by calculating time offset and using setTimeOffset() to set it.\n+     *\n+     * @param hour hour of day\n+     * @param minute minute\n+     * @param second second\n+     * @param addSeconds additional seconds to add to offset time\n+     */\n+    public void setTimeOfDay(int hour, int minute, int second, int addSeconds) {\n+        Calendar now = Calendar.getInstance();\n+        now.set(Calendar.HOUR_OF_DAY, hour);\n+        now.set(Calendar.MINUTE, minute);\n+        now.set(Calendar.SECOND, second);\n+        int offset = (int) ((now.getTime().getTime() - System.currentTimeMillis()) / 1000);\n+\n+        setTimeOffset(offset + addSeconds);\n+    }\n+\n+    /**\n+     * Sets time offset in seconds that will be added to Time.currentTime() and Time.currentTimeMillis() both for client and server.\n+     *\n+     * @param offset\n+     */\n+    public void setTimeOffset(int offset) {\n+        String response = invokeTimeOffset(offset);\n+        resetTimeOffset = offset != 0;\n+        log.debugv(\"Set time offset, response {0}\", response);\n+    }\n+\n+    public void resetTimeOffset() {\n+        String response = invokeTimeOffset(0);\n+        resetTimeOffset = false;\n+        log.debugv(\"Reset time offset, response {0}\", response);\n+    }\n+\n+    public int getCurrentTime() {\n+        return Time.currentTime();\n+    }\n+\n+    protected String invokeTimeOffset(int offset) {\n+        // adminClient depends on Time.offset for auto-refreshing tokens\n+        Time.setOffset(offset);\n+        Map result = testingClient.testing().setTimeOffset(Collections.singletonMap(\"offset\", String.valueOf(offset)));\n+        return String.valueOf(result);\n+    }\n+\n+    private void loadConstantsProperties() throws ConfigurationException {\n+        constantsProperties = new PropertiesConfiguration(System.getProperty(\"testsuite.constants\"));\n+        constantsProperties.setThrowExceptionOnMissing(true);\n+    }\n+\n+    protected PropertiesConfiguration getConstantsProperties() throws ConfigurationException {\n+        if (constantsProperties == null) {\n+            loadConstantsProperties();\n+        }\n+        return constantsProperties;\n+    }\n+\n+    public URI getAuthServerRoot() {\n+        try {\n+            return KeycloakUriBuilder.fromUri(suiteContext.getAuthServerInfo().getContextRoot().toURI()).path(\"/auth/\").build();\n+        } catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Logger getLogger() {\n+        return log;\n+    }\n+\n+    protected String getAccountRedirectUrl(String realm) {\n+        return AccountFormService\n+              .loginRedirectUrl(UriBuilder.fromUri(oauth.AUTH_SERVER_ROOT))\n+              .build(realm)\n+              .toString();\n+    }\n+\n+    protected String getAccountRedirectUrl() {\n+        return getAccountRedirectUrl(\"test\");\n+    }\n+\n+    protected static InputStream httpsAwareConfigurationStream(InputStream input) throws IOException {\n+        if (!AUTH_SERVER_SSL_REQUIRED) {\n+            return input;\n+        }\n+        PipedInputStream in = new PipedInputStream();\n+        final PipedOutputStream out = new PipedOutputStream(in);\n+        try (PrintWriter pw = new PrintWriter(out)) {\n+            try (Scanner s = new Scanner(input)) {\n+                while (s.hasNextLine()) {\n+                    String lineWithReplaces = s.nextLine().replace(\"http://localhost:8180/auth\", AUTH_SERVER_SCHEME + \"://localhost:\" + AUTH_SERVER_PORT + \"/auth\");\n+                    pw.println(lineWithReplaces);\n+                }\n+            }\n+        }\n+        return in;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTQ3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r457991479", "bodyText": "Should we assert the \"normal\" URL instead? This way I think we're not checking the URL at all.", "author": "vmuzikar", "createdAt": "2020-07-21T10:19:45Z", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/ApplicationsTest.java", "diffHunk": "@@ -99,24 +99,23 @@ public void toggleApplicationDetailsTest() throws Exception {\n         assertFalse(applications.isEmpty());\n         Map<String, ApplicationsPage.ClientRepresentation> apps = applications.stream().collect(Collectors.toMap(x -> x.getClientId(), x -> x));\n         assertThat(apps.keySet(), containsInAnyOrder(\"always-display-client\", \"account-console\"));\n-        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, getAuthServerRoot() + \"realms/test/account/\", true);\n-        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, getAuthServerRoot() + \"realms/master/app/always-display-client\", false);\n+        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, true);\n+        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, false);\n \n         applicationsPage.toggleApplicationDetails(\"account-console\");\n         applications = applicationsPage.getApplications();\n         assertFalse(applications.isEmpty());\n         apps = applications.stream().collect(Collectors.toMap(x -> x.getClientId(), x -> x));\n         assertThat(apps.keySet(), containsInAnyOrder(\"always-display-client\", \"account-console\"));\n-        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, getAuthServerRoot() + \"realms/test/account/\", false);\n-        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, getAuthServerRoot() + \"realms/master/app/always-display-client\", false);\n+        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, false);\n+        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, false);\n     }\n \n-    private void assertClientRep(ApplicationsPage.ClientRepresentation clientRep, String name, boolean userConsentRequired, boolean inUse, String effectiveUrl, boolean applicationDetailsVisible) {\n+    private void assertClientRep(ApplicationsPage.ClientRepresentation clientRep, String name, boolean userConsentRequired, boolean inUse, boolean applicationDetailsVisible) {\n         assertNotNull(clientRep);\n         assertEquals(name, clientRep.getClientName());\n         assertEquals(userConsentRequired, clientRep.isUserConsentRequired());\n         assertEquals(inUse, clientRep.isInUse());\n-        assertEquals(effectiveUrl, clientRep.getEffectiveUrl());", "originalCommit": "d8e95dc5c44531101142b0895890215e2041191d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1ODkwNA==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458358904", "bodyText": "Yes, I'll look into that.", "author": "ssilvert", "createdAt": "2020-07-21T20:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "47fdc695436accab991251e83fa926acb4cddeea", "chunk": "diff --git a/testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/ApplicationsTest.java b/testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/ApplicationsTest.java\nindex 27ae45c23c..c4e1f8de73 100644\n--- a/testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/ApplicationsTest.java\n+++ b/testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/ApplicationsTest.java\n\n@@ -99,24 +97,25 @@ public class ApplicationsTest extends BaseAccountPageTest {\n         assertFalse(applications.isEmpty());\n         Map<String, ApplicationsPage.ClientRepresentation> apps = applications.stream().collect(Collectors.toMap(x -> x.getClientId(), x -> x));\n         assertThat(apps.keySet(), containsInAnyOrder(\"always-display-client\", \"account-console\"));\n-        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, true);\n-        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, false);\n+        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, getAuthServerRoot() + \"realms/test/account/\", true);\n+        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, getAuthServerRoot() + \"realms/master/app/always-display-client\", false);\n \n         applicationsPage.toggleApplicationDetails(\"account-console\");\n         applications = applicationsPage.getApplications();\n         assertFalse(applications.isEmpty());\n         apps = applications.stream().collect(Collectors.toMap(x -> x.getClientId(), x -> x));\n         assertThat(apps.keySet(), containsInAnyOrder(\"always-display-client\", \"account-console\"));\n-        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, false);\n-        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, false);\n+        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, getAuthServerRoot() + \"realms/test/account/\", false);\n+        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, getAuthServerRoot() + \"realms/master/app/always-display-client\", false);\n     }\n \n-    private void assertClientRep(ApplicationsPage.ClientRepresentation clientRep, String name, boolean userConsentRequired, boolean inUse, boolean applicationDetailsVisible) {\n+    private void assertClientRep(ApplicationsPage.ClientRepresentation clientRep, String name, boolean userConsentRequired, boolean inUse, String effectiveUrl, boolean applicationDetailsVisible) {\n         assertNotNull(clientRep);\n         assertEquals(name, clientRep.getClientName());\n         assertEquals(userConsentRequired, clientRep.isUserConsentRequired());\n         assertEquals(inUse, clientRep.isInUse());\n         assertEquals(applicationDetailsVisible, clientRep.isApplicationDetailsVisible());\n+        if (applicationDetailsVisible) assertEquals(effectiveUrl, clientRep.getEffectiveUrl());\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjg4MQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458002881", "bodyText": "I'm not sure if it isn't confusing that all themes (even the old ones) use v2 with the old keycloak still available. The problem I see is that keycloak and keycloak.v2 are technically same themes (except account console) but the v2 could make the impression something's new in all themes.\nBut I'm ok with this if @stianst is.", "author": "vmuzikar", "createdAt": "2020-07-21T10:41:20Z", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -72,7 +73,7 @@ public Theme getTheme(String name, Theme.Type type) {\n         if (theme == null) {\n             theme = loadTheme(name, type);\n             if (theme == null) {\n-                theme = loadTheme(\"keycloak\", type);\n+                theme = loadTheme(\"keycloak.v2\", type);", "originalCommit": "d8e95dc5c44531101142b0895890215e2041191d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MjY3NQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458362675", "bodyText": "This line of code is only used when you haven't selected any theme.  It shows up in the UI as \"Select one\".\nYou do see both keycloak and keycloak.v2 in the dropdown when you go to select a theme.  But that actually turns out kind of nice because there is some symmetry.   And without it, the code above wouldn't work.  You would need special logic to know that if it's a certain type then you have to fall back to \"keycloak\".", "author": "ssilvert", "createdAt": "2020-07-21T20:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NTAzNA==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458555034", "bodyText": "Yes, the line I selected here is not very accurate. My comment above is more generic \u2013 if it's ok to have identical keycloak and keycloak.v2. I'll wait for @stianst decision here.", "author": "vmuzikar", "createdAt": "2020-07-22T06:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ccdede18d72763d272a14905a3338332531899f", "chunk": "diff --git a/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java b/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\nindex ecc83e1fbe..11ae394c87 100755\n--- a/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n+++ b/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n\n@@ -73,7 +82,7 @@ public class DefaultThemeManager implements ThemeManager {\n         if (theme == null) {\n             theme = loadTheme(name, type);\n             if (theme == null) {\n-                theme = loadTheme(\"keycloak.v2\", type);\n+                theme = loadTheme(typeBasedDefault(type), type);\n                 if (theme == null) {\n                     theme = loadTheme(\"base\", type);\n                 }\n"}}, {"oid": "47fdc695436accab991251e83fa926acb4cddeea", "url": "https://github.com/keycloak/keycloak/commit/47fdc695436accab991251e83fa926acb4cddeea", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-07-22T21:46:37Z", "type": "forcePushed"}, {"oid": "9562dae577fc40e2079a853e7897aae78368c4c2", "url": "https://github.com/keycloak/keycloak/commit/9562dae577fc40e2079a853e7897aae78368c4c2", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-08-17T19:15:27Z", "type": "forcePushed"}, {"oid": "c89272199ad1d9f15b97096b9ccfe59d04912032", "url": "https://github.com/keycloak/keycloak/commit/c89272199ad1d9f15b97096b9ccfe59d04912032", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-08-17T20:02:13Z", "type": "forcePushed"}, {"oid": "dd7e29e4299ab359d4d7596856e8e9ea59f14478", "url": "https://github.com/keycloak/keycloak/commit/dd7e29e4299ab359d4d7596856e8e9ea59f14478", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-08-21T16:03:38Z", "type": "forcePushed"}, {"oid": "432c9aec551b467b33ab87902ccb902ade68930f", "url": "https://github.com/keycloak/keycloak/commit/432c9aec551b467b33ab87902ccb902ade68930f", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-10-04T17:29:47Z", "type": "forcePushed"}, {"oid": "91aff69d8ef9bfe97996a878cea9b9798e23c453", "url": "https://github.com/keycloak/keycloak/commit/91aff69d8ef9bfe97996a878cea9b9798e23c453", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-10-21T20:31:28Z", "type": "forcePushed"}, {"oid": "7ccdede18d72763d272a14905a3338332531899f", "url": "https://github.com/keycloak/keycloak/commit/7ccdede18d72763d272a14905a3338332531899f", "message": "KEYCLOAK-14547: Make New Account Console the default", "committedDate": "2020-11-13T12:52:56Z", "type": "forcePushed"}, {"oid": "8d143f138feffe053cbc8a5ec0a0cda50b298f12", "url": "https://github.com/keycloak/keycloak/commit/8d143f138feffe053cbc8a5ec0a0cda50b298f12", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-13T13:03:12Z", "type": "forcePushed"}, {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f", "url": "https://github.com/keycloak/keycloak/commit/734ffb8f4212a947297935b0542f9a16fd02098f", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-13T13:07:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzOTkyNw==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523039927", "bodyText": "This doesn't seem to be used anywhere.", "author": "vmuzikar", "createdAt": "2020-11-13T15:53:59Z", "path": "common/src/main/java/org/keycloak/common/Version.java", "diffHunk": "@@ -35,6 +35,7 @@\n     public static String RESOURCES_VERSION;\n     public static String BUILD_TIME;\n     public static String DEFAULT_PROFILE;\n+    public static String DEFAULT_THEME;", "originalCommit": "734ffb8f4212a947297935b0542f9a16fd02098f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjI4NA==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523156284", "bodyText": "Yes, missed that one.", "author": "ssilvert", "createdAt": "2020-11-13T18:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzOTkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ0ODY4Mw==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523448683", "bodyText": "This doesn't seem to be used anywhere.\n\nFixed", "author": "ssilvert", "createdAt": "2020-11-14T18:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzOTkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "80197abe35f0f2bd764fc010b7fed7775d070a2a", "chunk": "diff --git a/common/src/main/java/org/keycloak/common/Version.java b/common/src/main/java/org/keycloak/common/Version.java\nindex 29840622e4..5766ca3a0b 100755\n--- a/common/src/main/java/org/keycloak/common/Version.java\n+++ b/common/src/main/java/org/keycloak/common/Version.java\n\n@@ -35,7 +35,6 @@ public class Version {\n     public static String RESOURCES_VERSION;\n     public static String BUILD_TIME;\n     public static String DEFAULT_PROFILE;\n-    public static String DEFAULT_THEME;\n \n     static {\n         try (InputStream is = Version.class.getResourceAsStream(\"/keycloak-version.properties\")) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDQzOQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523044439", "bodyText": "I think we shouldn't hardcode this here. Cannot we have some property for this is Theme.Type, perhaps?", "author": "vmuzikar", "createdAt": "2020-11-13T16:00:54Z", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -62,6 +64,14 @@ public Theme getTheme(Theme.Type type) {\n         return getTheme(name, type);\n     }\n \n+    private String typeBasedDefault(Theme.Type type) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+            return \"keycloak.v2\";\n+        }\n+        \n+        return \"keycloak\";\n+    }", "originalCommit": "734ffb8f4212a947297935b0542f9a16fd02098f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1Njc4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523156785", "bodyText": "That's the way this has always worked.  It's kind of a super-fallback.", "author": "ssilvert", "createdAt": "2020-11-13T18:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "df897ab7c4c6323af07942c2f5975937d179a0a3", "chunk": "diff --git a/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java b/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\nindex 11ae394c87..e5a7ed3cb6 100755\n--- a/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n+++ b/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n\n@@ -65,7 +64,7 @@ public class DefaultThemeManager implements ThemeManager {\n     }\n \n     private String typeBasedDefault(Theme.Type type) {\n-        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled()) {\n             return \"keycloak.v2\";\n         }\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDgwMw==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523044803", "bodyText": "I haven't deeply investigated this, but it seems to me a bit suspicious. Why is it even necessary? Don't we set the correct theme here?\n\n  \n    \n      keycloak/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n    \n    \n         Line 85\n      in\n      734ffb8\n    \n    \n    \n    \n\n        \n          \n           theme = loadTheme(typeBasedDefault(type), type);", "author": "vmuzikar", "createdAt": "2020-11-13T16:01:31Z", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -81,9 +91,18 @@ public Theme getTheme(String name, Theme.Type type) {\n                 theme = factory.addCachedTheme(name, type, theme);\n             }\n         }\n+        \n+        if (!isAccount2Enabled && theme.getName().equals(\"keycloak.v2\")) {\n+            theme = loadTheme(\"keycloak\", type);\n+        }\n+        \n+        if (!isAccount2Enabled && theme.getName().equals(\"rhsso.v2\")) {\n+            theme = loadTheme(\"rhsso\", type);\n+        }", "originalCommit": "734ffb8f4212a947297935b0542f9a16fd02098f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1ODA5OA==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523158098", "bodyText": "This is needed in the case where you disable the new account console.  The line you cite is rarely executed.", "author": "ssilvert", "createdAt": "2020-11-13T18:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "df897ab7c4c6323af07942c2f5975937d179a0a3", "chunk": "diff --git a/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java b/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\nindex 11ae394c87..e5a7ed3cb6 100755\n--- a/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n+++ b/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n\n@@ -92,11 +91,11 @@ public class DefaultThemeManager implements ThemeManager {\n             }\n         }\n         \n-        if (!isAccount2Enabled && theme.getName().equals(\"keycloak.v2\")) {\n+        if (!isAccount2Enabled() && theme.getName().equals(\"keycloak.v2\")) {\n             theme = loadTheme(\"keycloak\", type);\n         }\n         \n-        if (!isAccount2Enabled && theme.getName().equals(\"rhsso.v2\")) {\n+        if (!isAccount2Enabled() && theme.getName().equals(\"rhsso.v2\")) {\n             theme = loadTheme(\"rhsso\", type);\n         }\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1NDgwNw==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523054807", "bodyText": "Again, I'm not sure this is the right place to hardcode this. What if we have more v2 themes in the future? Cannot we have some property for this is Theme.Type, perhaps?", "author": "vmuzikar", "createdAt": "2020-11-13T16:17:40Z", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeSelectorProvider.java", "diffHunk": "@@ -47,6 +49,9 @@ public String getThemeName(Theme.Type type) {\n \n         if (name == null || name.isEmpty()) {\n             name = Config.scope(\"theme\").get(\"default\", Version.NAME.toLowerCase());\n+            if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+                name = name.concat(\".v2\");\n+            }", "originalCommit": "734ffb8f4212a947297935b0542f9a16fd02098f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE2MjU4Ng==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523162586", "bodyText": "Again, I'm not sure this is the right place to hardcode this. What if we have more v2 themes in the future? Cannot we have some property for this is Theme.Type, perhaps?\n\nThis is what Stian wanted instead of the way I coded it before (which did use a property).", "author": "ssilvert", "createdAt": "2020-11-13T18:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1NDgwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5MTE1NA==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r525991154", "bodyText": "Ok. Even though I'm a bit concerned about that we have the \"v2\" logic spread at many places (and therefore it won't be quite straightforward to e.g. add v2 to other themes, or v3 to this theme), I'm ok with it since @stianst is.", "author": "vmuzikar", "createdAt": "2020-11-18T10:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1NDgwNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3ODY2MA==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523078660", "bodyText": "IMHO this logic deserves a test.", "author": "vmuzikar", "createdAt": "2020-11-13T16:54:43Z", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -62,6 +64,14 @@ public Theme getTheme(Theme.Type type) {\n         return getTheme(name, type);\n     }\n \n+    private String typeBasedDefault(Theme.Type type) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+            return \"keycloak.v2\";\n+        }\n+        \n+        return \"keycloak\";\n+    }", "originalCommit": "734ffb8f4212a947297935b0542f9a16fd02098f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE3NDk0Mw==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523174943", "bodyText": "This code only executes when a theme is set for the realm but it can't find a ThemeProvider.  I'm not even sure how to make that happen, so I'm guessing it would be a bear to write a test.  We have never had a test for that and it's really not that important whether it returns \"keycloak.v2\" or \"keycloak\" anyway.  It's just a fallback.", "author": "ssilvert", "createdAt": "2020-11-13T19:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3ODY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4ODkzMg==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r525988932", "bodyText": "What I had in mind was a simple test that would focus how disabling/enabling NAC behaves. It should check whether it defaults to a correct theme when NAC is disabled and enabled, respectively.\nWe didn't have such test before because we never had such functionality. :)", "author": "vmuzikar", "createdAt": "2020-11-18T10:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3ODY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "df897ab7c4c6323af07942c2f5975937d179a0a3", "chunk": "diff --git a/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java b/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\nindex 11ae394c87..e5a7ed3cb6 100755\n--- a/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n+++ b/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n\n@@ -65,7 +64,7 @@ public class DefaultThemeManager implements ThemeManager {\n     }\n \n     private String typeBasedDefault(Theme.Type type) {\n-        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled()) {\n             return \"keycloak.v2\";\n         }\n         \n"}}, {"oid": "80197abe35f0f2bd764fc010b7fed7775d070a2a", "url": "https://github.com/keycloak/keycloak/commit/80197abe35f0f2bd764fc010b7fed7775d070a2a", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-14T18:30:46Z", "type": "forcePushed"}, {"oid": "5e4c514e57504218aa41982b52832a59b018c5e8", "url": "https://github.com/keycloak/keycloak/commit/5e4c514e57504218aa41982b52832a59b018c5e8", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-16T14:23:16Z", "type": "forcePushed"}, {"oid": "20bc962a6e5266c74574f2204eefbb708edef20f", "url": "https://github.com/keycloak/keycloak/commit/20bc962a6e5266c74574f2204eefbb708edef20f", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-16T15:05:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NDEwMw==", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r525984103", "bodyText": "I don't know what happened but my test fixes from ssilvert#10 were somehow merged wrong. This line definitely shouldn't be here... @ssilvert Did you do some rebase of my changes or something?\nCould you please fix it and re-run both pipelines?", "author": "vmuzikar", "createdAt": "2020-11-18T10:40:10Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -96,6 +98,7 @@\n  */\n @RunWith(KcArquillian.class)\n @RunAsClient\n+@DisableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)", "originalCommit": "20bc962a6e5266c74574f2204eefbb708edef20f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1079d09bf42ed3cb97c7b094685a924cb16d299", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java\nindex f2b10cd4ba..03694df358 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java\n\n@@ -98,7 +98,6 @@ import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n  */\n @RunWith(KcArquillian.class)\n @RunAsClient\n-@DisableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n public abstract class AbstractKeycloakTest {\n     protected static final String ENGLISH_LOCALE_NAME = \"English\";\n \n"}}, {"oid": "f1079d09bf42ed3cb97c7b094685a924cb16d299", "url": "https://github.com/keycloak/keycloak/commit/f1079d09bf42ed3cb97c7b094685a924cb16d299", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-18T12:44:54Z", "type": "forcePushed"}, {"oid": "f836a0447421e95f1e5839fc11f0fa6bee1adb72", "url": "https://github.com/keycloak/keycloak/commit/f836a0447421e95f1e5839fc11f0fa6bee1adb72", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-23T14:10:40Z", "type": "commit"}, {"oid": "f836a0447421e95f1e5839fc11f0fa6bee1adb72", "url": "https://github.com/keycloak/keycloak/commit/f836a0447421e95f1e5839fc11f0fa6bee1adb72", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-23T14:10:40Z", "type": "forcePushed"}, {"oid": "df897ab7c4c6323af07942c2f5975937d179a0a3", "url": "https://github.com/keycloak/keycloak/commit/df897ab7c4c6323af07942c2f5975937d179a0a3", "message": "KEYCLOAK-14547: Make New Account Console the default.", "committedDate": "2020-11-23T14:33:31Z", "type": "commit"}]}