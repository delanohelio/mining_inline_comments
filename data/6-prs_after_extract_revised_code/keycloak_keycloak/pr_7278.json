{"pr_number": 7278, "pr_title": "KEYCLOAK-14190 Client Policy - Condition : The way of creating/updating a client", "pr_createdAt": "2020-07-21T11:00:42Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7278", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MTc4OA==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r471561788", "bodyText": "Call to stream().forEach() can be simplified by removing stream:\ncomponentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));", "author": "valb3r", "createdAt": "2020-08-17T15:33:49Z", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java", "diffHunk": "@@ -58,9 +58,9 @@ private boolean isAuthMethodMatched(String authMethod) {\n         if (authMethod == null) return false;\n \n         ClientPolicyLogger.log(logger, \"auth method = \" + authMethod);\n-        componentModel.getConfig().get(TestAuthnMethodsConditionFactory.AUTH_METHOD).stream().forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));\n+        componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));", "originalCommit": "620edd84f5482aaf518e914a94b0c2268ca6e86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2Mzg0Mw==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r472563843", "bodyText": "Thank you. I'll fix codes as you pointed out.", "author": "tnorimat", "createdAt": "2020-08-19T00:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "ace13c61108c097d3c038359a94bbf207ddff328", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java b/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java\nindex 798975b1f2..923ca1942e 100644\n--- a/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java\n+++ b/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java\n\n@@ -58,9 +58,9 @@ public class UpdatingClientSourceCondition implements ClientPolicyConditionProvi\n         if (authMethod == null) return false;\n \n         ClientPolicyLogger.log(logger, \"auth method = \" + authMethod);\n-        componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));\n+        componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));\n \n-        boolean isMatched = componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().anyMatch(i -> i.equals(authMethod));\n+        boolean isMatched = componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().anyMatch(i -> authMethod.equals(i));\n         if (isMatched) {\n             ClientPolicyLogger.log(logger, \"auth method matched.\");\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MzUzNw==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r471563537", "bodyText": "i -> i.equals(authMethod) can be inverted to i -> authMethod.equals(i) to avoid theoretically possible NullpointerException as authMethod can't be null - if (authMethod == null) return false; at the function start", "author": "valb3r", "createdAt": "2020-08-17T15:36:21Z", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java", "diffHunk": "@@ -58,9 +58,9 @@ private boolean isAuthMethodMatched(String authMethod) {\n         if (authMethod == null) return false;\n \n         ClientPolicyLogger.log(logger, \"auth method = \" + authMethod);\n-        componentModel.getConfig().get(TestAuthnMethodsConditionFactory.AUTH_METHOD).stream().forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));\n+        componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));\n \n-        boolean isMatched = componentModel.getConfig().get(TestAuthnMethodsConditionFactory.AUTH_METHOD).stream().anyMatch(i -> i.equals(authMethod));\n+        boolean isMatched = componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().anyMatch(i -> i.equals(authMethod));", "originalCommit": "620edd84f5482aaf518e914a94b0c2268ca6e86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2Mzg3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r472563879", "bodyText": "Thank you. I'll fix codes as you pointed out.", "author": "tnorimat", "createdAt": "2020-08-19T00:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MzUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "ace13c61108c097d3c038359a94bbf207ddff328", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java b/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java\nindex 798975b1f2..923ca1942e 100644\n--- a/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java\n+++ b/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceCondition.java\n\n@@ -58,9 +58,9 @@ public class UpdatingClientSourceCondition implements ClientPolicyConditionProvi\n         if (authMethod == null) return false;\n \n         ClientPolicyLogger.log(logger, \"auth method = \" + authMethod);\n-        componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));\n+        componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).forEach(i -> ClientPolicyLogger.log(logger, \"auth method expected = \" + i));\n \n-        boolean isMatched = componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().anyMatch(i -> i.equals(authMethod));\n+        boolean isMatched = componentModel.getConfig().get(UpdatingClientSourceConditionFactory.UPDATE_CLIENT_SOURCE).stream().anyMatch(i -> authMethod.equals(i));\n         if (isMatched) {\n             ClientPolicyLogger.log(logger, \"auth method matched.\");\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3Nzc2Mw==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r471577763", "bodyText": "new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER))\nThis collection seems to be an immutable list - maybe we could use Collections.singletonList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)\nSince the collection will be immutable it will reduce possible states of the tests that will make it more 'specific'", "author": "valb3r", "createdAt": "2020-08-17T15:57:31Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -496,11 +496,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         registerCondition(\"TestClientRolesCondition-alpha\", policyAlphaName);\n         logger.info(\"... Registered Condition : TestClientRolesCondition-alpha\");\n \n-        createCondition(\"TestAuthnMethodsCondition-alpha\", TestAuthnMethodsConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(TestAuthnMethodsConditionFactory.BY_AUTHENTICATED_USER)));\n+        createCondition(\"UpdatingClientSourceCondition-alpha\", UpdatingClientSourceConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)));", "originalCommit": "620edd84f5482aaf518e914a94b0c2268ca6e86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MzkyMg==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r472563922", "bodyText": "Thank you. I'll fix codes as you pointed out.", "author": "tnorimat", "createdAt": "2020-08-19T00:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3Nzc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ace13c61108c097d3c038359a94bbf207ddff328", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\nindex f4b81196bf..48a3f641a2 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n\n@@ -491,19 +491,19 @@ public class ClientPolicyBasicsTest extends AbstractKeycloakTest {\n         logger.info(\"... Created Policy : \" + policyAlphaName);\n \n         createCondition(\"TestClientRolesCondition-alpha\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"sample-client-role-alpha\")));\n+            setConditionClientRoles(provider, Collections.singletonList(\"sample-client-role-alpha\"));\n         });\n         registerCondition(\"TestClientRolesCondition-alpha\", policyAlphaName);\n         logger.info(\"... Registered Condition : TestClientRolesCondition-alpha\");\n \n         createCondition(\"UpdatingClientSourceCondition-alpha\", UpdatingClientSourceConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)));\n+            setConditionRegistrationMethods(provider, Collections.singletonList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER));\n         });\n         registerCondition(\"UpdatingClientSourceCondition-alpha\", policyAlphaName);\n         logger.info(\"... Registered Condition : UpdatingClientSourceCondition-alpha\");\n \n         createExecutor(\"TestClientAuthenticationExecutor-alpha\", TestClientAuthenticationExecutorFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setExecutorAcceptedClientAuthMethods(provider, new ArrayList<>(Arrays.asList(ClientIdAndSecretAuthenticator.PROVIDER_ID)));\n+            setExecutorAcceptedClientAuthMethods(provider, Collections.singletonList(ClientIdAndSecretAuthenticator.PROVIDER_ID));\n             setExecutorAugmentActivate(provider);\n             setExecutorAugmentedClientAuthMethod(provider, ClientIdAndSecretAuthenticator.PROVIDER_ID);\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3ODUzNw==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r471578537", "bodyText": "new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER))\nThis collection seems to be an immutable list - maybe we could use\nCollections.singletonList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)\nSince the collection will be immutable it will reduce possible states of the tests that will make it more 'specific'", "author": "valb3r", "createdAt": "2020-08-17T15:58:30Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -433,11 +433,11 @@ public void testCreateUpdateDeleteExecutorRuntime() throws ClientRegistrationExc\n         registerCondition(\"TestClientRolesCondition\", policyName);\n         logger.info(\"... Registered Condition : TestClientRolesCondition\");\n \n-        createCondition(\"TestAuthnMethodsCondition\", TestAuthnMethodsConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(TestAuthnMethodsConditionFactory.BY_AUTHENTICATED_USER)));\n+        createCondition(\"UpdatingClientSourceCondition\", UpdatingClientSourceConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)));", "originalCommit": "620edd84f5482aaf518e914a94b0c2268ca6e86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2Mzk1NA==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r472563954", "bodyText": "Thank you. I'll fix codes as you pointed out.", "author": "tnorimat", "createdAt": "2020-08-19T00:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3ODUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "ace13c61108c097d3c038359a94bbf207ddff328", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\nindex f4b81196bf..48a3f641a2 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n\n@@ -428,13 +428,13 @@ public class ClientPolicyBasicsTest extends AbstractKeycloakTest {\n         logger.info(\"... Created Policy : \" + policyName);\n \n         createCondition(\"TestClientRolesCondition\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"sample-client-role\")));\n+            setConditionClientRoles(provider, Collections.singletonList(\"sample-client-role\"));\n         });\n         registerCondition(\"TestClientRolesCondition\", policyName);\n         logger.info(\"... Registered Condition : TestClientRolesCondition\");\n \n         createCondition(\"UpdatingClientSourceCondition\", UpdatingClientSourceConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)));\n+            setConditionRegistrationMethods(provider, Collections.singletonList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER));\n         });\n         registerCondition(\"UpdatingClientSourceCondition\", policyName);\n         logger.info(\"... Registered Condition : UpdatingClientSourceCondition\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3OTA5OA==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r471579098", "bodyText": "new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER))\nThis collection seems to be an immutable list - maybe we could use Collections.singletonList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)\nSince the collection will be immutable it will reduce possible states of the tests that will make it more 'specific'", "author": "valb3r", "createdAt": "2020-08-17T15:59:31Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -579,11 +579,11 @@ private void setupPolicyAcceptableAuthType(String policyName) {\n         createPolicy(policyName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyName);\n \n-        createCondition(\"TestAuthnMethodsCondition\", TestAuthnMethodsConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(TestAuthnMethodsConditionFactory.BY_AUTHENTICATED_USER)));\n+        createCondition(\"UpdatingClientSourceCondition\", UpdatingClientSourceConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)));", "originalCommit": "620edd84f5482aaf518e914a94b0c2268ca6e86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2Mzk4OQ==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r472563989", "bodyText": "Thank you. I'll fix codes as you pointed out.", "author": "tnorimat", "createdAt": "2020-08-19T00:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3OTA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "ace13c61108c097d3c038359a94bbf207ddff328", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\nindex f4b81196bf..48a3f641a2 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n\n@@ -580,7 +580,7 @@ public class ClientPolicyBasicsTest extends AbstractKeycloakTest {\n         logger.info(\"... Created Policy : \" + policyName);\n \n         createCondition(\"UpdatingClientSourceCondition\", UpdatingClientSourceConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER)));\n+            setConditionRegistrationMethods(provider, Collections.singletonList(UpdatingClientSourceConditionFactory.BY_AUTHENTICATED_USER));\n         });\n         registerCondition(\"UpdatingClientSourceCondition\", policyName);\n         logger.info(\"... Registered Condition : UpdatingClientSourceCondition\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3OTMxNw==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r471579317", "bodyText": "ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_INITIAL_ACCESS_TOKEN))\nThis collection seems to be an immutable list - maybe we could use Collections.singletonList(UpdatingClientSourceConditionFactory.BY_INITIAL_ACCESS_TOKEN)\nSince the collection will be immutable it will reduce possible states of the tests that will make it more 'specific'", "author": "valb3r", "createdAt": "2020-08-17T15:59:52Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -601,11 +601,11 @@ private void setupPolicyAuthzCodeFlowUnderMultiPhasePolicy(String policyName) {\n         createPolicy(policyName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyName);\n \n-        createCondition(\"TestAuthnMethodsCondition\", TestAuthnMethodsConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(TestAuthnMethodsConditionFactory.BY_INITIAL_ACCESS_TOKEN)));\n+        createCondition(\"UpdatingClientSourceCondition\", UpdatingClientSourceConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_INITIAL_ACCESS_TOKEN)));", "originalCommit": "620edd84f5482aaf518e914a94b0c2268ca6e86c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2NDAyMw==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r472564023", "bodyText": "Thank you. I'll fix codes as you pointed out.", "author": "tnorimat", "createdAt": "2020-08-19T00:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3OTMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "ace13c61108c097d3c038359a94bbf207ddff328", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\nindex f4b81196bf..48a3f641a2 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n\n@@ -602,13 +602,13 @@ public class ClientPolicyBasicsTest extends AbstractKeycloakTest {\n         logger.info(\"... Created Policy : \" + policyName);\n \n         createCondition(\"UpdatingClientSourceCondition\", UpdatingClientSourceConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(UpdatingClientSourceConditionFactory.BY_INITIAL_ACCESS_TOKEN)));\n+            setConditionRegistrationMethods(provider, Collections.singletonList(UpdatingClientSourceConditionFactory.BY_INITIAL_ACCESS_TOKEN));\n         });\n         registerCondition(\"UpdatingClientSourceCondition\", policyName);\n         logger.info(\"... Registered Condition : UpdatingClientSourceCondition\");\n \n         createCondition(\"TestClientRolesCondition\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"sample-client-role\")));\n+            setConditionClientRoles(provider, Collections.singletonList(\"sample-client-role\"));\n         });\n         registerCondition(\"TestClientRolesCondition\", policyName);\n         logger.info(\"... Registered Condition : TestClientRolesCondition\");\n"}}, {"oid": "ace13c61108c097d3c038359a94bbf207ddff328", "url": "https://github.com/keycloak/keycloak/commit/ace13c61108c097d3c038359a94bbf207ddff328", "message": "KEYCLOAK-14190 Client Policy - Condition : The way of creating/updating a client", "committedDate": "2020-08-19T00:19:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyNDYxMw==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r481924613", "bodyText": "I suggest to make the help text a bit more clear as it will be displayed in the UI and will be nice to make it a bit more obvious what exactly it means?\nFor example \"The condition checks the context how is client created/updated to determine whether the policy is applied. For example it checks if client is created with admin REST API or OIDC dynamic client registration. And for the letter case if it is ANONYMOUS client registration or AUTHENTICATED client registration with Initial access token or Registration access token and so on.\"\nAlso my vote is to rename the class to \"UpdatingClientContextCondition\" (and similarly rename the provider ID) as the \"source\" implies that condition is interested about concrete user, who creates/updatest the client rather about the \"context\" how is the client created/updated (admin REST API, OIDC dynamic client registration etc).\n@stianst @valb3r What is your though on the above?", "author": "mposolda", "createdAt": "2020-09-02T09:15:40Z", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceConditionFactory.java", "diffHunk": "@@ -74,7 +74,7 @@ public String getId() {\n \n     @Override\n     public String getHelpText() {\n-        return null;\n+        return \"It uses the source of updating client to determine whether the policy is applied.\";", "originalCommit": "ace13c61108c097d3c038359a94bbf207ddff328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5OTg0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r482699849", "bodyText": "@mposolda\n\nI suggest to make the help text a bit more clear as it will be displayed in the UI and will be nice to make it a bit more obvious what exactly it means?\n\nYes, it is a good idea\n\nAlso my vote is to rename the class to \"UpdatingClientContextCondition\" (and similarly rename the provider ID) as the \"source\" implies that condition is interested about concrete user, who creates/updatest the client rather about the \"context\" how is the client created/updated (admin REST API, OIDC dynamic client registration etc).\n\nMakes sense to me, also ClientUpdateContextCondition might be clearer as is composed from ClientUpdateContext + Condition that are key entities now for the class", "author": "valb3r", "createdAt": "2020-09-03T04:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyNDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczNjQ2OQ==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r482736469", "bodyText": "@mposolda I agree with your suggesting help text. I'll fix the existing help text.", "author": "tnorimat", "createdAt": "2020-09-03T06:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyNDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczODA2NA==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r482738064", "bodyText": "+1 for ClientUpdateContextCondition", "author": "mposolda", "createdAt": "2020-09-03T06:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyNDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczODA4OQ==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r482738089", "bodyText": "@valb3r I'd like to rename the class name and its provider id as you proposed. @mposolda  WDYT?", "author": "tnorimat", "createdAt": "2020-09-03T06:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyNDYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NjE2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7278#discussion_r482746165", "bodyText": "@mposolda @valb3r Thank you. I'll revise codes as you proposed.", "author": "tnorimat", "createdAt": "2020-09-03T06:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyNDYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "35c63e7d13de455ac15167efa9db936800823c59", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceConditionFactory.java b/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientUpdateContextConditionFactory.java\nsimilarity index 81%\nrename from services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceConditionFactory.java\nrename to services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientUpdateContextConditionFactory.java\nindex fcc5a10148..8e96ca53fa 100644\n--- a/services/src/main/java/org/keycloak/services/clientpolicy/condition/UpdatingClientSourceConditionFactory.java\n+++ b/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientUpdateContextConditionFactory.java\n\n@@ -74,7 +74,7 @@ public class UpdatingClientSourceConditionFactory implements ClientPolicyConditi\n \n     @Override\n     public String getHelpText() {\n-        return \"It uses the source of updating client to determine whether the policy is applied.\";\n+        return \"The condition checks the context how is client created/updated to determine whether the policy is applied. For example it checks if client is created with admin REST API or OIDC dynamic client registration. And for the letter case if it is ANONYMOUS client registration or AUTHENTICATED client registration with Initial access token or Registration access token and so on.\";\n     }\n \n     @Override\n"}}, {"oid": "35c63e7d13de455ac15167efa9db936800823c59", "url": "https://github.com/keycloak/keycloak/commit/35c63e7d13de455ac15167efa9db936800823c59", "message": "KEYCLOAK-14190 Client Policy - Condition : The way of creating/updating a client", "committedDate": "2020-09-03T08:50:15Z", "type": "commit"}, {"oid": "35c63e7d13de455ac15167efa9db936800823c59", "url": "https://github.com/keycloak/keycloak/commit/35c63e7d13de455ac15167efa9db936800823c59", "message": "KEYCLOAK-14190 Client Policy - Condition : The way of creating/updating a client", "committedDate": "2020-09-03T08:50:15Z", "type": "forcePushed"}]}