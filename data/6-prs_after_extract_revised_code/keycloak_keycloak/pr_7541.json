{"pr_number": 7541, "pr_title": "KEYCLOAK-15898 Streamification of Keymanager", "pr_createdAt": "2020-10-27T19:42:36Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7541", "timeline": [{"oid": "b977de6fd4bfe6fab9b6ddf10a40615444a3b634", "url": "https://github.com/keycloak/keycloak/commit/b977de6fd4bfe6fab9b6ddf10a40615444a3b634", "message": "KEYCLOAK-15898 Streamification of Keymanager", "committedDate": "2020-10-30T12:45:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MDk2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7541#discussion_r518480965", "bodyText": "Wouldn't it be better to map the keys to elements and then collect into a list at the end instead of populating the list as part of a forEach?", "author": "sguilhen", "createdAt": "2020-11-06T02:04:30Z", "path": "services/src/main/java/org/keycloak/protocol/saml/SamlService.java", "diffHunk": "@@ -653,30 +654,39 @@ public String getDescriptor() throws Exception {\n     }\n \n     public static String getIDPMetadataDescriptor(UriInfo uriInfo, KeycloakSession session, RealmModel realm) {\n-        Set<KeyWrapper> keys = new TreeSet<>((o1, o2) -> o1.getStatus() == o2.getStatus() // Status can be only PASSIVE OR ACTIVE, push PASSIVE to end of list\n-          ? (int) (o2.getProviderPriority() - o1.getProviderPriority())\n-          : (o1.getStatus() == KeyStatus.PASSIVE ? 1 : -1));\n-        keys.addAll(session.keys().getKeys(realm, KeyUse.SIG, Algorithm.RS256));\n-\n         try {\n-            List<Element> signingKeys = new ArrayList<Element>();\n-            for (KeyWrapper key : keys) {\n-                signingKeys.add(IDPMetadataDescriptor.buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate())));\n-            }\n+            List<Element> signingKeys = new LinkedList<>();\n+            session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)\n+                    .sorted(SamlService::compareKeys)\n+                    .forEach(key -> {\n+                        try {\n+                            Element element = IDPMetadataDescriptor\n+                                    .buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate()));\n+                            signingKeys.add(element);\n+                        } catch (ParserConfigurationException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });", "originalCommit": "b977de6fd4bfe6fab9b6ddf10a40615444a3b634", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MzI5Ng==", "url": "https://github.com/keycloak/keycloak/pull/7541#discussion_r518483296", "bodyText": "@martin-kanis Overall this really looks good to me, thanks for the great work. Just one minor suggestion as you can see above.", "author": "sguilhen", "createdAt": "2020-11-06T02:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MDk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMDU4MA==", "url": "https://github.com/keycloak/keycloak/pull/7541#discussion_r519620580", "bodyText": "Right, changed to map + collect. Thank you Stefan for the review.", "author": "martin-kanis", "createdAt": "2020-11-09T08:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MDk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "31e5eaae55235932a0bd10614ae1c87de676d526", "chunk": "diff --git a/services/src/main/java/org/keycloak/protocol/saml/SamlService.java b/services/src/main/java/org/keycloak/protocol/saml/SamlService.java\nindex ace73db2d7..088b5e1830 100755\n--- a/services/src/main/java/org/keycloak/protocol/saml/SamlService.java\n+++ b/services/src/main/java/org/keycloak/protocol/saml/SamlService.java\n\n@@ -655,18 +655,17 @@ public class SamlService extends AuthorizationEndpointBase {\n \n     public static String getIDPMetadataDescriptor(UriInfo uriInfo, KeycloakSession session, RealmModel realm) {\n         try {\n-            List<Element> signingKeys = new LinkedList<>();\n-            session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)\n+            List<Element> signingKeys = session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)\n                     .sorted(SamlService::compareKeys)\n-                    .forEach(key -> {\n+                    .map(key -> {\n                         try {\n-                            Element element = IDPMetadataDescriptor\n+                            return IDPMetadataDescriptor\n                                     .buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate()));\n-                            signingKeys.add(element);\n                         } catch (ParserConfigurationException e) {\n                             throw new RuntimeException(e);\n                         }\n-                    });\n+                    })\n+                    .collect(Collectors.toList());\n \n             return IDPMetadataDescriptor.getIDPDescriptor(\n                 RealmsResource.protocolUrl(uriInfo).build(realm.getName(), SamlProtocol.LOGIN_PROTOCOL),\n"}}, {"oid": "31e5eaae55235932a0bd10614ae1c87de676d526", "url": "https://github.com/keycloak/keycloak/commit/31e5eaae55235932a0bd10614ae1c87de676d526", "message": "KEYCLOAK-15898 Streamification of Keymanager", "committedDate": "2020-11-09T08:11:08Z", "type": "forcePushed"}, {"oid": "b329b769b559b845cd5d94c943352bbbbdf8ba1e", "url": "https://github.com/keycloak/keycloak/commit/b329b769b559b845cd5d94c943352bbbbdf8ba1e", "message": "KEYCLOAK-15898 Streamification of Keymanager", "committedDate": "2020-11-09T09:24:49Z", "type": "commit"}, {"oid": "b329b769b559b845cd5d94c943352bbbbdf8ba1e", "url": "https://github.com/keycloak/keycloak/commit/b329b769b559b845cd5d94c943352bbbbdf8ba1e", "message": "KEYCLOAK-15898 Streamification of Keymanager", "committedDate": "2020-11-09T09:24:49Z", "type": "forcePushed"}]}