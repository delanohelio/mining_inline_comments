{"pr_number": 6667, "pr_title": "[KEYCLOAK-11621] Allow user creation via group MANAGE_MEMBERS and MANAGE_MEMBERSHIP permissions (Admin API)", "pr_createdAt": "2020-01-16T14:40:06Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6667", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTUxMA==", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r371655510", "bodyText": "This is strange, what's the difference between requireManageMembers and requireManageMembership?", "author": "stianst", "createdAt": "2020-01-28T08:12:08Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "diffHunk": "@@ -105,7 +100,21 @@ public UsersResource(RealmModel realm, AdminPermissionEvaluator auth, AdminEvent\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        auth.users().requireManage();\n+        // if groups is part of the user rep, check if admin has manage_members and manage_membership on each group\n+        if (rep.getGroups() != null) {\n+            for (String groupId : rep.getGroups()) {\n+                GroupModel group = realm.getGroupById(groupId);\n+                if (group != null) {\n+                    auth.groups().requireManageMembers(group);\n+                    auth.groups().requireManageMembership(group);", "originalCommit": "2e2e89ffb415e485f6ec85eaf6a94199a5a23847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MzY5Mw==", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r371743693", "bodyText": "My understanding is the following:\n\nMANAGE_MEMBERS_SCOPE: allowing an admin to manage users, i.e. create, update and delete users\nMANAGE_MEMBERSHIP_SCOPE: allowing an admin to manage groups membership for a specific user\n\nSo, when creating a new user part of one or more groups, we need both permissions IMO. Let me know your thoughts.", "author": "clementcur", "createdAt": "2020-01-28T11:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "cc9ed3e921d776c86247b909677f5a99d801f3ee", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java b/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\nindex c180f8f2f8..d8ab36e27a 100755\n--- a/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\n+++ b/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\n\n@@ -108,8 +116,7 @@ public class UsersResource {\n                     auth.groups().requireManageMembers(group);\n                     auth.groups().requireManageMembership(group);\n                 } else {\n-                    // unrecognized group from id\n-                    throw new ForbiddenException();\n+                    return ErrorResponse.error(String.format(\"Group %s not found\", groupId), Response.Status.BAD_REQUEST);\n                 }\n             }\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MzMyNw==", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r371853327", "bodyText": "I think better is a 400 response.", "author": "pedroigor", "createdAt": "2020-01-28T14:58:06Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "diffHunk": "@@ -105,7 +100,21 @@ public UsersResource(RealmModel realm, AdminPermissionEvaluator auth, AdminEvent\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        auth.users().requireManage();\n+        // if groups is part of the user rep, check if admin has manage_members and manage_membership on each group\n+        if (rep.getGroups() != null) {\n+            for (String groupId : rep.getGroups()) {\n+                GroupModel group = realm.getGroupById(groupId);\n+                if (group != null) {\n+                    auth.groups().requireManageMembers(group);\n+                    auth.groups().requireManageMembership(group);\n+                } else {\n+                    // unrecognized group from id\n+                    throw new ForbiddenException();", "originalCommit": "2e2e89ffb415e485f6ec85eaf6a94199a5a23847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1NDE1NA==", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r372954154", "bodyText": "yeah, makes sense - will update the PR then", "author": "clementcur", "createdAt": "2020-01-30T13:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MzMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "cc9ed3e921d776c86247b909677f5a99d801f3ee", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java b/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\nindex c180f8f2f8..d8ab36e27a 100755\n--- a/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\n+++ b/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\n\n@@ -108,8 +116,7 @@ public class UsersResource {\n                     auth.groups().requireManageMembers(group);\n                     auth.groups().requireManageMembership(group);\n                 } else {\n-                    // unrecognized group from id\n-                    throw new ForbiddenException();\n+                    return ErrorResponse.error(String.format(\"Group %s not found\", groupId), Response.Status.BAD_REQUEST);\n                 }\n             }\n         } else {\n"}}, {"oid": "cc9ed3e921d776c86247b909677f5a99d801f3ee", "url": "https://github.com/keycloak/keycloak/commit/cc9ed3e921d776c86247b909677f5a99d801f3ee", "message": "Cleaned imports\n\nmade sure explicit imports are used\nremoved unsed import", "committedDate": "2020-05-01T11:46:21Z", "type": "forcePushed"}, {"oid": "f2023f2241b97ea926614cf3996619eeb967b792", "url": "https://github.com/keycloak/keycloak/commit/f2023f2241b97ea926614cf3996619eeb967b792", "message": "[KEYCLOAK-11621] Added ability to create users within a permitted group via Admin API\n\nProblem:\nUsing fine-grained admin permissions on groups, it is not permitted to create new users\nwithin a group.\n\nCause:\nThe POST /{realm}/users API does not check permission for each group part of the new\nuser representation\n\nSolution:\n- Change access logic for POST /{realm}/users to require MANAGE_MEMBERS and\nMANAGE_MEMBERSHIP permissions on each of the incoming groups\n\nTests:\nManual API testing performed:\n  1. admin user from master realm:\n    - POST /{realm}/users without groups                  => HTTP 201 user created\n    - POST /{realm}/users with groups                     => HTTP 201 user created\n  2. user with MANAGE_MEMBERS & MANAGE_MEMBERSHIP permissions on group1\n    - POST /{realm}/users without groups                  => HTTP 403 user NOT created\n    - POST /{realm}/users with group1                     => HTTP 201 user created\n    - POST /{realm}/users with group1 & group2            => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & wrong group ID    => HTTP 400 user NOT created\n  3. user with MANAGE_MEMBERS permission on group1\n    - POST /{realm}/users without groups                  => HTTP 403 user NOT created\n    - POST /{realm}/users with group1                     => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & group2            => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & wrong group ID    => HTTP 400 user NOT created", "committedDate": "2020-05-01T13:36:55Z", "type": "forcePushed"}, {"oid": "714eae52d13f30cae850760756cd2f52b12cae1c", "url": "https://github.com/keycloak/keycloak/commit/714eae52d13f30cae850760756cd2f52b12cae1c", "message": "[KEYCLOAK-11621] Allow user creation via group permissions (Admin API)\n\nProblem:\nUsing fine-grained admin permissions on groups, it is not permitted to create new users\nwithin a group.\n\nCause:\nThe POST /{realm}/users API does not check permission for each group part of the new\nuser representation\n\nSolution:\n- Change access logic for POST /{realm}/users to require MANAGE_MEMBERS and\nMANAGE_MEMBERSHIP permissions on each of the incoming groups\n\nTests:\nManual API testing performed:\n  1. admin user from master realm:\n    - POST /{realm}/users without groups                  => HTTP 201 user created\n    - POST /{realm}/users with groups                     => HTTP 201 user created\n  2. user with MANAGE_MEMBERS & MANAGE_MEMBERSHIP permissions on group1\n    - POST /{realm}/users without groups                  => HTTP 403 user NOT created\n    - POST /{realm}/users with group1                     => HTTP 201 user created\n    - POST /{realm}/users with group1 & group2            => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & wrong group path  => HTTP 400 user NOT created\n  3. user with MANAGE_MEMBERS permission on group1\n    - POST /{realm}/users without groups                  => HTTP 403 user NOT created\n    - POST /{realm}/users with group1                     => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & group2            => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & wrong group path  => HTTP 400 user NOT created", "committedDate": "2020-05-01T18:38:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMTM4Mg==", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r441131382", "bodyText": "I did not catch this before, but I think we should first try to check requireManage and only in case we get an exception (lacking permission) we fallback to your changes that rely on the fine-grained permission.\nThe reason behind this comment is that we avoid people not using fine-grained permissions to not be impacted by the additional checks you are adding.", "author": "pedroigor", "createdAt": "2020-06-16T20:45:35Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "diffHunk": "@@ -107,7 +109,20 @@ public UsersResource(RealmModel realm, AdminPermissionEvaluator auth, AdminEvent\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        auth.users().requireManage();", "originalCommit": "714eae52d13f30cae850760756cd2f52b12cae1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "032243847f4be05d34d2fe9a6e0d179817d03ee5", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java b/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\nindex 0b31812c2f..955a8ba7ad 100755\n--- a/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\n+++ b/services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java\n\n@@ -109,19 +109,27 @@ public class UsersResource {\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        // if groups is part of the user rep, check if admin has manage_members and manage_membership on each group\n-        if (rep.getGroups() != null) {\n-            for (String groupPath : rep.getGroups()) {\n-                GroupModel group = KeycloakModelUtils.findGroupByPath(realm, groupPath);\n-                if (group != null) {\n-                    auth.groups().requireManageMembers(group);\n-                    auth.groups().requireManageMembership(group);\n-                } else {\n-                    return ErrorResponse.error(String.format(\"Group %s not found\", groupPath), Response.Status.BAD_REQUEST);\n+        // first check if user has manage rights\n+        try {\n+            auth.users().requireManage();\n+        }\n+        catch (ForbiddenException exception) {\n+            // if user does not have manage rights, fallback to fine grain admin permissions per group\n+            if (rep.getGroups() != null) {\n+                // if groups is part of the user rep, check if admin has manage_members and manage_membership on each group\n+                for (String groupPath : rep.getGroups()) {\n+                    GroupModel group = KeycloakModelUtils.findGroupByPath(realm, groupPath);\n+                    if (group != null) {\n+                        auth.groups().requireManageMembers(group);\n+                        auth.groups().requireManageMembership(group);\n+                    } else {\n+                        return ErrorResponse.error(String.format(\"Group %s not found\", groupPath), Response.Status.BAD_REQUEST);\n+                    }\n                 }\n+            } else {\n+                // propagate exception if no group specified\n+                throw exception;\n             }\n-        } else {\n-            auth.users().requireManage();\n         }\n \n         String username = rep.getUsername();\n"}}, {"oid": "a767a8d2a261ae04350564f9a3a8fd8bc5da6d00", "url": "https://github.com/keycloak/keycloak/commit/a767a8d2a261ae04350564f9a3a8fd8bc5da6d00", "message": "[KEYCLOAK-11621] Allow user creation via group permissions (Admin API)\n\nProblem:\nUsing fine-grained admin permissions on groups, it is not permitted to create new users\nwithin a group.\n\nCause:\nThe POST /{realm}/users API does not check permission for each group part of the new\nuser representation\n\nSolution:\n- Change access logic for POST /{realm}/users to require MANAGE_MEMBERS and\nMANAGE_MEMBERSHIP permissions on each of the incoming groups\n\nTests:\nManual API testing performed:\n  1. admin user from master realm:\n    - POST /{realm}/users without groups                  => HTTP 201 user created\n    - POST /{realm}/users with groups                     => HTTP 201 user created\n  2. user with MANAGE_MEMBERS & MANAGE_MEMBERSHIP permissions on group1\n    - POST /{realm}/users without groups                  => HTTP 403 user NOT created\n    - POST /{realm}/users with group1                     => HTTP 201 user created\n    - POST /{realm}/users with group1 & group2            => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & wrong group path  => HTTP 400 user NOT created\n  3. user with MANAGE_MEMBERS permission on group1\n    - POST /{realm}/users without groups                  => HTTP 403 user NOT created\n    - POST /{realm}/users with group1                     => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & group2            => HTTP 403 user NOT created\n    - POST /{realm}/users with group1 & wrong group path  => HTTP 400 user NOT created", "committedDate": "2020-08-28T07:27:13Z", "type": "commit"}, {"oid": "032243847f4be05d34d2fe9a6e0d179817d03ee5", "url": "https://github.com/keycloak/keycloak/commit/032243847f4be05d34d2fe9a6e0d179817d03ee5", "message": "Finegrain admin as fallback and added some tests", "committedDate": "2020-08-28T15:31:18Z", "type": "commit"}, {"oid": "032243847f4be05d34d2fe9a6e0d179817d03ee5", "url": "https://github.com/keycloak/keycloak/commit/032243847f4be05d34d2fe9a6e0d179817d03ee5", "message": "Finegrain admin as fallback and added some tests", "committedDate": "2020-08-28T15:31:18Z", "type": "forcePushed"}]}