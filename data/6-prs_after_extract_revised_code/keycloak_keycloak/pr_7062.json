{"pr_number": 7062, "pr_title": "[KEYCLOAK-11784] - Hibermate ORM Extension and Improvements to JPA and LiquiBase", "pr_createdAt": "2020-05-12T14:38:18Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7062", "timeline": [{"oid": "455659937a23c5fdc5b8091d3e5c0da080791fde", "url": "https://github.com/keycloak/keycloak/commit/455659937a23c5fdc5b8091d3e5c0da080791fde", "message": "[KEYCLOAK-11784] - Improvements to JPA and LiquiBase", "committedDate": "2020-05-12T14:42:46Z", "type": "forcePushed"}, {"oid": "8cd3422802c43be355720ab33a3a4c3617605549", "url": "https://github.com/keycloak/keycloak/commit/8cd3422802c43be355720ab33a3a4c3617605549", "message": "[KEYCLOAK-11784] - Improvements to JPA and LiquiBase", "committedDate": "2020-05-12T14:56:15Z", "type": "forcePushed"}, {"oid": "bf516e8e14e1a869ebfad60dd9c038c03b97911c", "url": "https://github.com/keycloak/keycloak/commit/bf516e8e14e1a869ebfad60dd9c038c03b97911c", "message": "[KEYCLOAK-11784] - Improvements to JPA and LiquiBase", "committedDate": "2020-05-12T15:22:23Z", "type": "forcePushed"}, {"oid": "2078b46a7dafe3a503e6b1f86949ede31cddff93", "url": "https://github.com/keycloak/keycloak/commit/2078b46a7dafe3a503e6b1f86949ede31cddff93", "message": "[KEYCLOAK-11784] - Improvements to JPA and LiquiBase", "committedDate": "2020-05-12T16:28:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMDQzMA==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424320430", "bodyText": "Introducing yet another \"connection provider\" is not the correct approach here. Looking at this PR a lot of changes/refactoring are done to the WF distribution, while if this wasn't introduced and the \"copy\" of DefaultJpaConnectionProviderFactory kept the WF distribution would have been more or less untouched by these changes and it would have been a lot easier and safer to review/merge this PR", "author": "stianst", "createdAt": "2020-05-13T10:01:02Z", "path": "model/jpa/src/main/java/org/keycloak/connections/jpa/EntityManagerFactoryProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.keycloak.connections.jpa;\n+\n+import javax.persistence.EntityManagerFactory;\n+\n+public interface EntityManagerFactoryProvider {", "originalCommit": "2078b46a7dafe3a503e6b1f86949ede31cddff93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNTIwNg==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424405206", "bodyText": "The changes do improve WF dist too. Test runs seem to be OK.\nReplicating them is not ideal, but I understand your point about first trying this change in Quarkus, isolated. I'll close this PR and have both JPA and Liquibase providers duplicated.\nIt is kind of easy to check the impact of these changes in WF dist if you want too, just run the server using these changes.", "author": "pedroigor", "createdAt": "2020-05-13T12:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "bda4270b9d1f5f2d08e668a5b0b8d79e058e5d05", "chunk": "diff --git a/model/jpa/src/main/java/org/keycloak/connections/jpa/EntityManagerFactoryProvider.java b/model/jpa/src/main/java/org/keycloak/connections/jpa/EntityManagerFactoryProvider.java\ndeleted file mode 100644\nindex 14df26d928..0000000000\n--- a/model/jpa/src/main/java/org/keycloak/connections/jpa/EntityManagerFactoryProvider.java\n+++ /dev/null\n\n@@ -1,8 +0,0 @@\n-package org.keycloak.connections.jpa;\n-\n-import javax.persistence.EntityManagerFactory;\n-\n-public interface EntityManagerFactoryProvider {\n-\n-    EntityManagerFactory getEntityManagerFactory();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMDY2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424320665", "bodyText": "Why the need to introduce verifyAndRunMasterChangelog? What does it do?", "author": "stianst", "createdAt": "2020-05-13T10:01:25Z", "path": "model/jpa/src/main/java/org/keycloak/connections/jpa/updater/JpaUpdaterProvider.java", "diffHunk": "@@ -49,23 +49,26 @@\n      * Updates the Keycloak database\n      * @param connection DB connection\n      * @param defaultSchema DB connection\n+     * @param verifyAndRunMasterChangelog if master changelog should be verified and run \n      */\n-    void update(Connection connection, String defaultSchema);\n+    void update(Connection connection, String defaultSchema, boolean verifyAndRunMasterChangelog);", "originalCommit": "2078b46a7dafe3a503e6b1f86949ede31cddff93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNzA5MA==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424407090", "bodyText": "We tell the updater whether or not we should validate/execute the master changelog.\nRunning validation and checking the \"unrun\" changesets during startup is one of the main parts that affect startup, as well as footprint. This is especially true if the database is already initialized.\nNote that this does not affect custom providers, as their changelogs are still validated/executed regardless. This is only for the master changelog.", "author": "pedroigor", "createdAt": "2020-05-13T12:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMDY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bda4270b9d1f5f2d08e668a5b0b8d79e058e5d05", "chunk": "diff --git a/model/jpa/src/main/java/org/keycloak/connections/jpa/updater/JpaUpdaterProvider.java b/model/jpa/src/main/java/org/keycloak/connections/jpa/updater/JpaUpdaterProvider.java\nindex 6b844b2ede..ae6745086e 100755\n--- a/model/jpa/src/main/java/org/keycloak/connections/jpa/updater/JpaUpdaterProvider.java\n+++ b/model/jpa/src/main/java/org/keycloak/connections/jpa/updater/JpaUpdaterProvider.java\n\n@@ -49,26 +49,23 @@ public interface JpaUpdaterProvider extends Provider {\n      * Updates the Keycloak database\n      * @param connection DB connection\n      * @param defaultSchema DB connection\n-     * @param verifyAndRunMasterChangelog if master changelog should be verified and run \n      */\n-    void update(Connection connection, String defaultSchema, boolean verifyAndRunMasterChangelog);\n+    void update(Connection connection, String defaultSchema);\n \n     /**\n      * Checks whether Keycloak database is up to date with the most recent changesets\n      * @param connection DB connection\n      * @param defaultSchema DB schema to use\n-     * @param verifyAndRunMasterChangelog if master changelog should be verified and run\n      * @return\n      */\n-    Status validate(Connection connection, String defaultSchema, boolean verifyAndRunMasterChangelog);\n+    Status validate(Connection connection, String defaultSchema);\n \n     /**\n      * Exports the SQL update script into the given File.\n      * @param connection DB connection\n      * @param defaultSchema DB schema to use\n      * @param file File to write to\n-     * @param verifyAndRunMasterChangelog if master changelog should be verified and run\n      */\n-    void export(Connection connection, String defaultSchema, File file, boolean verifyAndRunMasterChangelog);\n+    void export(Connection connection, String defaultSchema, File file);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMjU2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424322565", "bodyText": "Does this have anything to do with JPA or Liquibase?", "author": "stianst", "createdAt": "2020-05-13T10:04:51Z", "path": "quarkus/extensions/src/main/java/org/keycloak/provider/quarkus/QuarkusCacheManagerProvider.java", "diffHunk": "@@ -44,12 +44,13 @@\n         try {\n             InputStream configurationStream = loadConfiguration(config);\n             ConfigurationBuilderHolder builder = new ParserRegistry().parse(configurationStream);\n+            boolean isClustered = builder.getNamedConfigurationBuilders().get(\"sessions\").clustering().cacheMode().isClustered();\n \n-            if (builder.getNamedConfigurationBuilders().get(\"sessions\").clustering().cacheMode().isClustered()) {\n+            if (isClustered) {\n                 configureTransportStack(config, builder);\n             }\n \n-            return (C) new DefaultCacheManager(builder, true);\n+            return (C) new DefaultCacheManager(builder, isClustered);\n         } catch (Exception e) {", "originalCommit": "2078b46a7dafe3a503e6b1f86949ede31cddff93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxMjc2Ng==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424412766", "bodyText": "No. But I also changed that to avoid starting the cache beforehand if running a local cache. Sorry for including it.", "author": "pedroigor", "createdAt": "2020-05-13T12:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMjU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bda4270b9d1f5f2d08e668a5b0b8d79e058e5d05", "chunk": "diff --git a/quarkus/extensions/src/main/java/org/keycloak/provider/quarkus/QuarkusCacheManagerProvider.java b/quarkus/extensions/src/main/java/org/keycloak/provider/quarkus/QuarkusCacheManagerProvider.java\nindex 3a77148916..182f5edf7e 100644\n--- a/quarkus/extensions/src/main/java/org/keycloak/provider/quarkus/QuarkusCacheManagerProvider.java\n+++ b/quarkus/extensions/src/main/java/org/keycloak/provider/quarkus/QuarkusCacheManagerProvider.java\n\n@@ -44,13 +44,12 @@ public final class QuarkusCacheManagerProvider implements ManagedCacheManagerPro\n         try {\n             InputStream configurationStream = loadConfiguration(config);\n             ConfigurationBuilderHolder builder = new ParserRegistry().parse(configurationStream);\n-            boolean isClustered = builder.getNamedConfigurationBuilders().get(\"sessions\").clustering().cacheMode().isClustered();\n \n-            if (isClustered) {\n+            if (builder.getNamedConfigurationBuilders().get(\"sessions\").clustering().cacheMode().isClustered()) {\n                 configureTransportStack(config, builder);\n             }\n \n-            return (C) new DefaultCacheManager(builder, isClustered);\n+            return (C) new DefaultCacheManager(builder, true);\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMzAyNg==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424323026", "bodyText": "I'm confused here. Don't we need at least a transaction manager dummy or something? Otherwise session.getTransactionManager won't work", "author": "stianst", "createdAt": "2020-05-13T10:05:41Z", "path": "quarkus/extensions/src/main/java/org/keycloak/transaction/QuarkusJtaTransactionManagerLookup.java", "diffHunk": "@@ -32,16 +32,20 @@\n \n     @Override\n     public TransactionManager getTransactionManager() {\n-        return tm;\n+        if (tm == null) {\n+//            tm = CDI.current().select(TransactionManager.class).get();\n+//            logger.tracev(\"TransactionManager = {0}\", tm);\n+//            if (tm == null) {\n+//                logger.debug(\"could not locate transactionmanager\");\n+//            }\n+        }\n+        // we need to check whether or not the datasource supports XA as well as if configuration tells that\n+        return null;\n     }\n \n     @Override\n     public void init(Config.Scope config) {\n-        tm = CDI.current().select(TransactionManager.class).get();\n-        logger.tracev(\"TransactionManager = {0}\", tm);\n-        if (tm == null) {\n-            logger.debug(\"Could not locate TransactionManager\");\n-        }\n+        ", "originalCommit": "2078b46a7dafe3a503e6b1f86949ede31cddff93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxNjEwNg==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424416106", "bodyText": "This is something I was expecting to investigate more once I have these changes in. It is not clear to me if we always need to run using JTA. Looks like it is not.", "author": "pedroigor", "createdAt": "2020-05-13T12:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMzAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "bda4270b9d1f5f2d08e668a5b0b8d79e058e5d05", "chunk": "diff --git a/quarkus/extensions/src/main/java/org/keycloak/transaction/QuarkusJtaTransactionManagerLookup.java b/quarkus/extensions/src/main/java/org/keycloak/transaction/QuarkusJtaTransactionManagerLookup.java\nindex 78813c1051..9eb6fbd2b8 100644\n--- a/quarkus/extensions/src/main/java/org/keycloak/transaction/QuarkusJtaTransactionManagerLookup.java\n+++ b/quarkus/extensions/src/main/java/org/keycloak/transaction/QuarkusJtaTransactionManagerLookup.java\n\n@@ -32,20 +32,16 @@ public class QuarkusJtaTransactionManagerLookup implements JtaTransactionManager\n \n     @Override\n     public TransactionManager getTransactionManager() {\n-        if (tm == null) {\n-//            tm = CDI.current().select(TransactionManager.class).get();\n-//            logger.tracev(\"TransactionManager = {0}\", tm);\n-//            if (tm == null) {\n-//                logger.debug(\"could not locate transactionmanager\");\n-//            }\n-        }\n-        // we need to check whether or not the datasource supports XA as well as if configuration tells that\n-        return null;\n+        return tm;\n     }\n \n     @Override\n     public void init(Config.Scope config) {\n-        \n+        tm = CDI.current().select(TransactionManager.class).get();\n+        logger.tracev(\"TransactionManager = {0}\", tm);\n+        if (tm == null) {\n+            logger.debug(\"Could not locate TransactionManager\");\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMzU3NA==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424323574", "bodyText": "??", "author": "stianst", "createdAt": "2020-05-13T10:06:38Z", "path": "quarkus/server/src/main/java/org/keycloak/services/resources/NoopResource.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.keycloak.services.resources;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManagerFactory;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+\n+/**\n+ * Quarkus doesn't pick up the Application if there's no JAX-RS endpoints\n+ */\n+@Singleton\n+@Path(\"/noop\")\n+public class NoopResource {\n+\n+    @Inject\n+    EntityManagerFactory entityManagerFactory;\n+\n+    @GET\n+    public Response redirect() {\n+        return Response.seeOther(UriBuilder.fromResource(WelcomeResource.class).build()).build();\n+    }\n+\n+}", "originalCommit": "2078b46a7dafe3a503e6b1f86949ede31cddff93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxNjc3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424416779", "bodyText": "Not related. But better than have a Hello World :) Although this endpoint is not really exposed.", "author": "pedroigor", "createdAt": "2020-05-13T12:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMzU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "bda4270b9d1f5f2d08e668a5b0b8d79e058e5d05", "chunk": "diff --git a/quarkus/server/src/main/java/org/keycloak/services/resources/NoopResource.java b/quarkus/server/src/main/java/org/keycloak/services/resources/Dummy.java\nsimilarity index 53%\nrename from quarkus/server/src/main/java/org/keycloak/services/resources/NoopResource.java\nrename to quarkus/server/src/main/java/org/keycloak/services/resources/Dummy.java\nindex 7485e0b586..d68eb4c2f5 100644\n--- a/quarkus/server/src/main/java/org/keycloak/services/resources/NoopResource.java\n+++ b/quarkus/server/src/main/java/org/keycloak/services/resources/Dummy.java\n\n@@ -1,26 +1,23 @@\n package org.keycloak.services.resources;\n \n import javax.inject.Inject;\n-import javax.inject.Singleton;\n import javax.persistence.EntityManagerFactory;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.UriBuilder;\n \n /**\n  * Quarkus doesn't pick up the Application if there's no JAX-RS endpoints\n  */\n-@Singleton\n-@Path(\"/noop\")\n-public class NoopResource {\n+@Path(\"/dummy\")\n+public class Dummy {\n \n     @Inject\n     EntityManagerFactory entityManagerFactory;\n \n+    // ...and doesn't load Resteasy providers unless there is at least one resource method\n     @GET\n-    public Response redirect() {\n-        return Response.seeOther(UriBuilder.fromResource(WelcomeResource.class).build()).build();\n+    public String hello() {\n+        return \"Hello World!\";\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMzgwNw==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424323807", "bodyText": "Why move this?", "author": "stianst", "createdAt": "2020-05-13T10:07:03Z", "path": "services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java", "diffHunk": "@@ -182,7 +182,6 @@ protected void shutdown() {\n     protected ExportImportManager migrateAndBootstrap() {\n         ExportImportManager exportImportManager;\n         logger.debug(\"Calling migrateModel\");\n-        migrateModel();", "originalCommit": "2078b46a7dafe3a503e6b1f86949ede31cddff93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxNzU2OQ==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424417569", "bodyText": "And I can ask, why not have model migration together with persistence bootstrap? Why have part in JPA layer and other bits outside. It just better, IMO, to have them where persistence is initialized.", "author": "pedroigor", "createdAt": "2020-05-13T13:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMzgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "bda4270b9d1f5f2d08e668a5b0b8d79e058e5d05", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java b/services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java\nindex 9a5eb111d5..a6292f2dba 100644\n--- a/services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java\n+++ b/services/src/main/java/org/keycloak/services/resources/KeycloakApplication.java\n\n@@ -182,6 +177,7 @@ public class KeycloakApplication extends Application {\n     protected ExportImportManager migrateAndBootstrap() {\n         ExportImportManager exportImportManager;\n         logger.debug(\"Calling migrateModel\");\n+        migrateModel();\n \n         logger.debug(\"bootstrap\");\n         KeycloakSession session = sessionFactory.create();\n"}}, {"oid": "bda4270b9d1f5f2d08e668a5b0b8d79e058e5d05", "url": "https://github.com/keycloak/keycloak/commit/bda4270b9d1f5f2d08e668a5b0b8d79e058e5d05", "message": "[KEYCLOAK-11784] - Using Hibernate Extension", "committedDate": "2020-05-13T19:56:09Z", "type": "forcePushed"}, {"oid": "9a88a259ca7e405e2e0f5a9566f16017a8ab22b9", "url": "https://github.com/keycloak/keycloak/commit/9a88a259ca7e405e2e0f5a9566f16017a8ab22b9", "message": "[KEYCLOAK-11784] - Using Hibernate Extension", "committedDate": "2020-05-13T20:13:41Z", "type": "forcePushed"}, {"oid": "6fdef7a9291d993952af6d2c665422ff94a70e43", "url": "https://github.com/keycloak/keycloak/commit/6fdef7a9291d993952af6d2c665422ff94a70e43", "message": "[KEYCLOAK-11784] - Using Hibernate Extension", "committedDate": "2020-05-13T20:49:20Z", "type": "commit"}, {"oid": "6fdef7a9291d993952af6d2c665422ff94a70e43", "url": "https://github.com/keycloak/keycloak/commit/6fdef7a9291d993952af6d2c665422ff94a70e43", "message": "[KEYCLOAK-11784] - Using Hibernate Extension", "committedDate": "2020-05-13T20:49:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2ODQyNw==", "url": "https://github.com/keycloak/keycloak/pull/7062#discussion_r424968427", "bodyText": "??", "author": "stianst", "createdAt": "2020-05-14T08:42:04Z", "path": "quarkus/server/src/main/java/org/keycloak/services/resources/Dummy.java", "diffHunk": "@@ -9,6 +11,9 @@\n @Path(\"/dummy\")\n public class Dummy {\n \n+    @Inject", "originalCommit": "6fdef7a9291d993952af6d2c665422ff94a70e43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}