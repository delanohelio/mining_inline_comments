{"pr_number": 7412, "pr_title": "KEYCLOAK-15429 Add CORS origin on permission request with invalid access token", "pr_createdAt": "2020-09-11T05:48:44Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7412", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExNzIwOA==", "url": "https://github.com/keycloak/keycloak/pull/7412#discussion_r492117208", "bodyText": "You don't need to fake-verify the token just to parse it. You can do something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                TokenVerifier<AccessToken> verifier = TokenVerifier.create(accessTokenString, AccessToken.class)\n          \n          \n            \n                                        .withDefaultChecks()\n          \n          \n            \n                                        .realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()))\n          \n          \n            \n                                        .checkActive(false);\n          \n          \n            \n                                String kid = verifier.getHeader().getKeyId();\n          \n          \n            \n                                String algorithm = verifier.getHeader().getAlgorithm().name();\n          \n          \n            \n                                SignatureVerifierContext signatureVerifier = session.getProvider(SignatureProvider.class, algorithm).verifier(kid);\n          \n          \n            \n                                verifier.verifierContext(signatureVerifier);\n          \n          \n            \n                                AccessToken invalidToken = verifier.verify().getToken();\n          \n          \n            \n                                AccessToken invalidToken = new JWSInput(accessTokenString).readJsonContent(AccessToken.class);\n          \n      \n    \n    \n  \n\nMaybe there's even more efficient solution, I'm not sure.", "author": "vmuzikar", "createdAt": "2020-09-21T14:58:09Z", "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1210,6 +1214,22 @@ public Response permissionGrant() {\n             AccessToken accessToken = Tokens.getAccessToken(session);\n \n             if (accessToken == null) {\n+                try {\n+                    // In case the access token is invalid because it's expired or the user is disabled, identify the client\n+                    // from the access token anyway in order to set correct CORS headers.\n+                    TokenVerifier<AccessToken> verifier = TokenVerifier.create(accessTokenString, AccessToken.class)\n+                            .withDefaultChecks()\n+                            .realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()))\n+                            .checkActive(false);\n+                    String kid = verifier.getHeader().getKeyId();\n+                    String algorithm = verifier.getHeader().getAlgorithm().name();\n+                    SignatureVerifierContext signatureVerifier = session.getProvider(SignatureProvider.class, algorithm).verifier(kid);\n+                    verifier.verifierContext(signatureVerifier);\n+                    AccessToken invalidToken = verifier.verify().getToken();", "originalCommit": "09ad2b240e3e79a389f3c8663307f8130d23692e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4NjgzOQ==", "url": "https://github.com/keycloak/keycloak/pull/7412#discussion_r492486839", "bodyText": "Is it just as correct then to allow any origin for the error response, and ignore the client setting completely? I see that has been done for some of the other checks in TokenEndpoint: (checkSsl, checkRealm)\n                    cors.allowAllOrigins();", "author": "FrodeI", "createdAt": "2020-09-22T05:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ5ODIyMg==", "url": "https://github.com/keycloak/keycloak/pull/7412#discussion_r492498222", "bodyText": "I haven't checked what other verifications do, but I see no real reason why we should allow all origins here. Just parse the token, get the client and you're good to go. :)", "author": "vmuzikar", "createdAt": "2020-09-22T06:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExNzIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "c878b78ffafda3c4e952f676259c53b5e7f4bc24", "chunk": "diff --git a/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java b/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java\nindex d2d9f7bc57..6196b6224f 100644\n--- a/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java\n+++ b/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java\n\n@@ -1217,18 +1217,10 @@ public class TokenEndpoint {\n                 try {\n                     // In case the access token is invalid because it's expired or the user is disabled, identify the client\n                     // from the access token anyway in order to set correct CORS headers.\n-                    TokenVerifier<AccessToken> verifier = TokenVerifier.create(accessTokenString, AccessToken.class)\n-                            .withDefaultChecks()\n-                            .realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()))\n-                            .checkActive(false);\n-                    String kid = verifier.getHeader().getKeyId();\n-                    String algorithm = verifier.getHeader().getAlgorithm().name();\n-                    SignatureVerifierContext signatureVerifier = session.getProvider(SignatureProvider.class, algorithm).verifier(kid);\n-                    verifier.verifierContext(signatureVerifier);\n-                    AccessToken invalidToken = verifier.verify().getToken();\n+                    AccessToken invalidToken = new JWSInput(accessTokenString).readJsonContent(AccessToken.class);\n                     ClientModel client = realm.getClientByClientId(invalidToken.getIssuedFor());\n                     cors.allowedOrigins(session, client);\n-                } catch (VerificationException ignore) {\n+                } catch (JWSInputException ignore) {\n                 }\n                 throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_GRANT, \"Invalid bearer token\", Status.UNAUTHORIZED);\n             }\n"}}, {"oid": "c878b78ffafda3c4e952f676259c53b5e7f4bc24", "url": "https://github.com/keycloak/keycloak/commit/c878b78ffafda3c4e952f676259c53b5e7f4bc24", "message": "KEYCLOAK-15429 Add CORS origin on permission request with invalid access token", "committedDate": "2020-09-22T06:42:04Z", "type": "commit"}]}