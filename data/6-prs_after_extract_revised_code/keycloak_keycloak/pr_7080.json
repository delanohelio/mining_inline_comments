{"pr_number": 7080, "pr_title": "KEYCLOAK-14536 UserModel preparation for UserProfile", "pr_createdAt": "2020-05-19T11:28:41Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7080", "timeline": [{"oid": "c4cebdcc503465fc0a16ccd6b39bc3638bdb5db4", "url": "https://github.com/keycloak/keycloak/commit/c4cebdcc503465fc0a16ccd6b39bc3638bdb5db4", "message": "Rewrite userdelegate for ldap mapper", "committedDate": "2020-06-02T11:45:47Z", "type": "forcePushed"}, {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b", "url": "https://github.com/keycloak/keycloak/commit/88b555108181a1fff34adf29d8d7d082e8852e9b", "message": "Rewrite userdelegate for ldap mapper", "committedDate": "2020-06-08T08:13:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxNTE0MA==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438615140", "bodyText": "I think it it not very good to remove those methods from UserModelDelegate? IMO you always want to call delegate rather than rely on default implementations from UserModel. In some cases, the methods on the delegate can do something different that call \"setAttribute/getAttribute\" . I hope it is possible to revert changes in UserModelDelegate class entirely.", "author": "mposolda", "createdAt": "2020-06-11T08:09:37Z", "path": "server-spi/src/main/java/org/keycloak/models/utils/UserModelDelegate.java", "diffHunk": "@@ -44,16 +44,6 @@ public String getId() {\n         return delegate.getId();\n     }\n \n-    @Override\n-    public String getUsername() {", "originalCommit": "88b555108181a1fff34adf29d8d7d082e8852e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MTQ3Nw==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r439461477", "bodyText": "The problem is that this introduces potential inconsistencies:\nI have two ways to access and/or change those attributes. If one way behaves differently than the other, this will lead to subtle and hard to debug bugs. That's why I would've deprecated and deleted those methods altogether but I can see that the effort involved is much larger as of now (for instance ftl templates rely on those methods), so we keep those methods.\nThis is in general true for all subclasses of UserModel. For the AbstractUserAdapterFederatedStorage this is discussed in the other comment and there is a solution to ensure consistent behaviour as long as the implementation does not override the methods to get or set attributes.\nI didn't see any other implementation of that interface I thought was modeled for inheritance, but if it is possible to provide UserModel implementations via SPI then we definitely should think about this again.", "author": "Martin-Idel-SI", "createdAt": "2020-06-12T14:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxNTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NDc4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r439974785", "bodyText": "Replied to your other comment. Hopefully once \"getUsername\" and \"setUsername\" are not implemented on UserModel, the changes in UserModelDelegate will be possible to revert, so that it always calls the delegate instead of rely on the default implementations.", "author": "mposolda", "createdAt": "2020-06-15T07:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxNTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MjIwNQ==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r440092205", "bodyText": "It's possible (see the two last commits). However, please note the duplicate code I had to introduce to keep consistency!", "author": "Martin-Idel-SI", "createdAt": "2020-06-15T10:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxNTE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "26074c8ace676f30385282306adf10abbbfad5d1", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/models/utils/UserModelDelegate.java b/server-spi/src/main/java/org/keycloak/models/utils/UserModelDelegate.java\nindex df552935fa..c94767852a 100755\n--- a/server-spi/src/main/java/org/keycloak/models/utils/UserModelDelegate.java\n+++ b/server-spi/src/main/java/org/keycloak/models/utils/UserModelDelegate.java\n\n@@ -44,6 +44,16 @@ public class UserModelDelegate implements UserModel {\n         return delegate.getId();\n     }\n \n+    @Override\n+    public String getUsername() {\n+        return delegate.getUsername();\n+    }\n+\n+    @Override\n+    public void setUsername(String username) {\n+        delegate.setUsername(username);\n+    }\n+\n     @Override\n     public boolean isEnabled() {\n         return delegate.isEnabled();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNzUzNw==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438917537", "bodyText": "The UserStorage SPI needs to be backwards compatible. It means that UserStorage providers developed in the previous Keycloak versions must still work with the newest version without any changes needed in their sources. So the BackwardsCompatibilityUserStorage provider should still work without this change needed... The similar will be good for other user storage providers - will be nice if no changes are required in them", "author": "mposolda", "createdAt": "2020-06-11T16:29:54Z", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java", "diffHunk": "@@ -87,12 +87,12 @@ public UserModel getUserById(String id, RealmModel realm) {\n     private UserModel createUser(RealmModel realm, String username) {\n         return new AbstractUserAdapterFederatedStorage(session, realm,  model) {\n             @Override\n-            public String getUsername() {\n+            public String doGetUsername() {", "originalCommit": "88b555108181a1fff34adf29d8d7d082e8852e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0Mzk5OQ==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r439243999", "bodyText": "I can see that you'd like to have backwards compatibility. The reasons I did this change is the default methods getUsername() and setUsername(String name) on UserModel:\n\nSince they are default methods, the AbstractUserAdapterFederatedStorage is not abstract anymore\nif you fail to override the getUsername() method, you will run into an infinite loop, because the getUsername() default method calls the getFirstAttribute method, which in AbstractUserAdapterFederatedStorage MUST call the getUsername method in order to be able to get the username from somewhere else and keep consistency (i.e. we still want to have username accessible as attribute.\n\nIn other words, not introducing this method, everything works completely fine if you override all important methods correctly, but the compiler won't stop you anymore. With the workaround, it's more consistent.\nNow, if you say that the AbstractAdapters may not change for backwards compatibility, then that's what needs to happen, so let's see what our options are:\n\nDelete the method again and swallow the possibility of infinite loops as outlined above (as well as weird naming \"Abstract\" of non-abstract class)\nDo not have a default implementation of getUsername() and setUsername(...) on UserModel, but require each subclass to provide it. This is a bit inconsistent with the handling of the other methods but that shouldn't really be a problem\n\nThe latter is the safest method so I'm going to implement this and let you have a look!", "author": "Martin-Idel-SI", "createdAt": "2020-06-12T07:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNzUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3MzYwOQ==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r439973609", "bodyText": "Thanks for bringing this. Yes, I think the latter option should be OK. The \"getUsername()\" and \"setUsername()\" may not be available by default on the UserModel. At least, I don't see any issues with that right now...\nJust FYI. the fact that \"Abstract\"* class doesn't have any abstract methods, it can still be declared as \"abstract\" class. But that's really just a detail and maybe not so relevant...", "author": "mposolda", "createdAt": "2020-06-15T07:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNzUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MTc5NQ==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r440091795", "bodyText": "Yes I know about abstract - but if you don't have to override the methods that should be overridden, this is a in my view a bug waiting to happen (I've seen this happening).\nAnyways, I implemented the approach as indicated.", "author": "Martin-Idel-SI", "createdAt": "2020-06-15T10:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNzUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "26074c8ace676f30385282306adf10abbbfad5d1", "chunk": "diff --git a/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java\nindex 2953dee4ce..f6c1f242cc 100644\n--- a/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java\n+++ b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java\n\n@@ -87,12 +87,12 @@ public class BackwardsCompatibilityUserStorage implements UserLookupProvider, Us\n     private UserModel createUser(RealmModel realm, String username) {\n         return new AbstractUserAdapterFederatedStorage(session, realm,  model) {\n             @Override\n-            public String doGetUsername() {\n+            public String getUsername() {\n                 return username;\n             }\n \n             @Override\n-            public void doSetUsername(String username1) {\n+            public void setUsername(String username1) {\n                 if (!username1.equals(username)) {\n                     throw new RuntimeException(\"Unsupported to change username\");\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTkxNg==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438919916", "bodyText": "@stianst Is this change ok or do you see any issues with that? More details in this comment : #7080 (comment)", "author": "mposolda", "createdAt": "2020-06-11T16:33:56Z", "path": "services/src/main/java/org/keycloak/theme/FreeMarkerUtil.java", "diffHunk": "@@ -73,8 +73,8 @@ public String processTemplate(Object data, String templateName, Theme theme) thr\n     }\n \n     private Template getTemplate(String templateName, Theme theme) throws IOException {\n-        Configuration cfg = new Configuration();\n-        \n+        Configuration cfg = new Configuration(Configuration.VERSION_2_3_26);", "originalCommit": "88b555108181a1fff34adf29d8d7d082e8852e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA4OTU5OQ==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r440089599", "bodyText": "Not sure to be honest as I don't know what the implications really are here. It seems this requires FreeMarker to do additional reflection of the classes, which could be expensive? Also, what would break in existing templates with this?", "author": "stianst", "createdAt": "2020-06-15T10:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NjU4Mw==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r440096583", "bodyText": "Yes in the sense that it requires FreeMarker to also see default methods, but I'd think this should be done in the same pass where Freemarker retrieves the other getter/setter methods, so this shouldn't have a large overhead (if any).\nHowever, some things may break: Here is an overview: https://freemarker.apache.org/docs/api/freemarker/template/Configuration.html#Configuration-freemarker.template.Version- - since I have no idea what features are used, it's hard for me to judge if this is a problem. I ran some console tests and all seemed fine, so I was confident enough to propose this change.\nAs I said, the alternative would be to not use default methods but duplicate the methods to all implementing classes.", "author": "Martin-Idel-SI", "createdAt": "2020-06-15T11:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczODA0MA==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r440738040", "bodyText": "Just an idea, but will it help to use the \"wrapper\" object, which has the methods getX/setX overriden? I can imagine some change like this:\n-  freemarkerContextAttributes.put(\"user\", userModel);\n+ UserModelDelegate wrapper = new UserModelDelegate(userModel);\n+ freemarkerContextAttributes.put(\"user\", wrapper);\n\nCan it help?\nIf not, is it the possibility to have some other Wrapper class similar to for example org.keycloak.forms.login.freemarker.model.ProfileBean ?\nIf nothing of those helps (or it becomes unecessary complex and ugly code), if you have an opportunity to add the details what exactly the error is and where it happens, it will be helpful. Hopefully we can figure something.\nThe set of version in the Configuration may work as the last possibility, but will be nice to avoid since we are not 100% sure of all the possible side-effects.", "author": "mposolda", "createdAt": "2020-06-16T10:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzMzc2Mw==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r440833763", "bodyText": "I'm sure we'll figure something out!\nThe problem is actually very simple: I found it first in the resource-detail.ftl. The corresponding AuthorizationBean contains permissions which contain a RequesterBean which contains a UserModel (the requester). Now, without this change, the ftl-template cannot be rendered correctly, because permission.requester.username is null in this line: \n  \n    \n      keycloak/themes/src/main/resources/theme/base/account/resource-detail.ftl\n    \n    \n         Line 121\n      in\n      3d5e976\n    \n    \n    \n    \n\n        \n          \n           <form action=\"${url.getResourceGrant(authorization.resource.id)}\" name=\"revokeForm-${authorization.resource.id}-${permission.requester.username}\" method=\"post\"> \n        \n    \n  \n\n\nAnd the reason it's null is because this refers to the method getUsername on the UserModel- but it doesn't exist for FTL as default methods don't exist for without this change (this is due to the JavaBean specification which doesn't understand default methods).\nNow, clearly that's just one instance of where this fails as the UserModel is also present in other beans. Also, since get/setUsername are not default implemented anymore this particular issue will not arise anymore, but the same problem will be whenever we need get/setEmail or firstName, lastName.\nSo for me, there would be several solutions to this:\n\ndirectly grab the attribute of the user in the FTL templates via something like permission.requester.attributes[\"username\"][0] or similar. This is not very nice and very error prone as I don't see a good way to find all instances where this could be a problem. Also, this breaks custom templates.\nAdd the configuration option as above: least intrusive from a code perspective which is why I proposed this change first, but may have unwanted side-effects. I've never really worked with FTL, so I can't say much about it\nRemove the default methods and just implement them on all subclasses. Since we do essentially the same for getUsername it seems those subclasses aren't too many due to the hierarchy of subclasses.\nAdd a wrapper object to all places where UserModel is used in the beans. Sounds weird and error prone and results in quite a few changes\nAdd an abstract subclass of UserModel and derive all classes that don't override the default methods from this subclass: I don't particularly like to add yet another level to the hierarchy, it's already quite deep\nMake UserModel an abstract class instead of an interface (I haven't tested it though): This should also work, but may not be nice from an architectural standpoint.\n\nI'm probably going to try out the third option. This leads to some code duplication, but the code changes are easiest to get right, so maybe that's the best way to go?", "author": "Martin-Idel-SI", "createdAt": "2020-06-16T13:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNjU2Nw==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r441316567", "bodyText": "As I pointed, if there is some easy way to address this like for example using this in the AuthorizationBean constructor: this.user = new UserModelDelegate(user);, it will be fine to me.\nThe solution with adding to subclasses however works for me as well.", "author": "mposolda", "createdAt": "2020-06-17T06:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0NDIyNA==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r442444224", "bodyText": "I ended up adding subclasses - please have a look. I feel that this approach is the safest, as everything looks as before for FTL templates.\nAll tests already ran beforehand since the only test failure I saw was actually related to the username field and I had already removed the default methods before. I tried using wrapper objects but was left unsatisfied whether I actually solved all problems and if somebody uses custom FTL files, those could easily break if I overlook something.\nI could add a comment to the wrapper class (and the one set of duplicate methods in the infinispan/UserAdapter) to move to default methods once this is no longer a problem in FTL (maybe you will make a switch to a newer version for different reasons).", "author": "Martin-Idel-SI", "createdAt": "2020-06-18T19:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "f8f27017b32d390853114f1380cb59700ec532f5", "chunk": "diff --git a/services/src/main/java/org/keycloak/theme/FreeMarkerUtil.java b/services/src/main/java/org/keycloak/theme/FreeMarkerUtil.java\nindex 38e105237e..44f62b8f8d 100755\n--- a/services/src/main/java/org/keycloak/theme/FreeMarkerUtil.java\n+++ b/services/src/main/java/org/keycloak/theme/FreeMarkerUtil.java\n\n@@ -73,7 +73,7 @@ public class FreeMarkerUtil {\n     }\n \n     private Template getTemplate(String templateName, Theme theme) throws IOException {\n-        Configuration cfg = new Configuration(Configuration.VERSION_2_3_26);\n+        Configuration cfg = new Configuration();\n \n         // Assume *.ftl files are html.  This lets freemarker know how to\n         // sanitize and prevent XSS attacks.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyMzg4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438923885", "bodyText": "I hope it will be possible to make the things working without this change. Introducing method \"doGetUsername\" on the UserStorage SPI seems like a workaround to me and doesn't improve the usability of UserStorage SPI. See my other comment for the class BackwardsCompatibilityUserStorage\nMaybe if you re-add the methods to UserModelDelegate back, then this change is not needed? In ideal case, if no changes are needed in AbstractUserAdapter class, it will be ideal :)", "author": "mposolda", "createdAt": "2020-06-11T16:40:45Z", "path": "server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapter.java", "diffHunk": "@@ -60,6 +60,13 @@ public AbstractUserAdapter(KeycloakSession session, RealmModel realm, ComponentM\n         this.storageProviderModel = storageProviderModel;\n     }\n \n+    abstract protected String doGetUsername();", "originalCommit": "88b555108181a1fff34adf29d8d7d082e8852e9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26074c8ace676f30385282306adf10abbbfad5d1", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapter.java b/server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapter.java\nindex ce433b9f95..9fa1c3729c 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapter.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapter.java\n\n@@ -60,13 +60,6 @@ public abstract class AbstractUserAdapter implements UserModel {\n         this.storageProviderModel = storageProviderModel;\n     }\n \n-    abstract protected String doGetUsername();\n-\n-    @Override\n-    public String getUsername() {\n-        return doGetUsername();\n-    }\n-\n     @Override\n     public Set<String> getRequiredActions() {\n         return Collections.emptySet();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNDM3NA==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438924374", "bodyText": "See my comment for AbstractUserAdapter class. I think this applies here as well - for both doGetUsername and doSetUsername methods.", "author": "mposolda", "createdAt": "2020-06-11T16:41:34Z", "path": "server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapterFederatedStorage.java", "diffHunk": "@@ -64,6 +65,20 @@ public AbstractUserAdapterFederatedStorage(KeycloakSession session, RealmModel r\n         this.storageProviderModel = storageProviderModel;\n     }\n \n+    protected abstract String doGetUsername();", "originalCommit": "88b555108181a1fff34adf29d8d7d082e8852e9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26074c8ace676f30385282306adf10abbbfad5d1", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapterFederatedStorage.java b/server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapterFederatedStorage.java\nindex 9da83d20b1..f884d0e999 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapterFederatedStorage.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapterFederatedStorage.java\n\n@@ -65,20 +65,6 @@ public abstract class AbstractUserAdapterFederatedStorage implements UserModel {\n         this.storageProviderModel = storageProviderModel;\n     }\n \n-    protected abstract String doGetUsername();\n-\n-    protected abstract void doSetUsername(String username);\n-\n-    @Override\n-    public void setUsername(String username) {\n-        doSetUsername(username);\n-    }\n-\n-    @Override\n-    public String getUsername() {\n-        return doGetUsername();\n-    }\n-\n     public UserFederatedStorageProvider getFederatedStorage() {\n         return session.userFederatedStorage();\n     }\n"}}, {"oid": "26074c8ace676f30385282306adf10abbbfad5d1", "url": "https://github.com/keycloak/keycloak/commit/26074c8ace676f30385282306adf10abbbfad5d1", "message": "Let UserModel getUserName/setUserName be abstract", "committedDate": "2020-06-15T10:35:52Z", "type": "forcePushed"}, {"oid": "f8f27017b32d390853114f1380cb59700ec532f5", "url": "https://github.com/keycloak/keycloak/commit/f8f27017b32d390853114f1380cb59700ec532f5", "message": "Use class hierarchy to avoid default methods", "committedDate": "2020-06-18T15:47:07Z", "type": "forcePushed"}, {"oid": "caaa04ce09883a1d0d9b63e1878f81591b667b44", "url": "https://github.com/keycloak/keycloak/commit/caaa04ce09883a1d0d9b63e1878f81591b667b44", "message": "Use class hierarchy to avoid default methods", "committedDate": "2020-06-18T15:55:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMjk2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r442712965", "bodyText": "I am not sure why the constants are needed here? Also not sure why FIRST_NAME is set to the \"lastName\"? It seems this is typo? Is it possible to remove all changes in IdpReviewProfileAuthenticator?", "author": "mposolda", "createdAt": "2020-06-19T08:40:43Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java", "diffHunk": "@@ -46,6 +46,10 @@\n public class IdpReviewProfileAuthenticator extends AbstractIdpAuthenticator {\n \n     private static final Logger logger = Logger.getLogger(IdpReviewProfileAuthenticator.class);\n+    private static final String FIRST_NAME = \"lastName\";", "originalCommit": "caaa04ce09883a1d0d9b63e1878f81591b667b44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0Mjc0Nw==", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r442842747", "bodyText": "Yes, since we didn't rename anything in the end, we can just remove the changes (Done).\nThey were made originally because the form data fields are independent of the UserModel field names (or at least it seemed that way). I still think that maybe you'd want to have independent constants because those two areas could change independently, but it's not necessary, so I reverted the change.", "author": "Martin-Idel-SI", "createdAt": "2020-06-19T13:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMjk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed6e7916383275769942a4e3ea9bdf40a289d41b", "chunk": "diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java b/services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java\nindex c2e30db0e6..18b5b1e735 100755\n--- a/services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java\n+++ b/services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java\n\n@@ -46,10 +46,6 @@ import java.util.List;\n public class IdpReviewProfileAuthenticator extends AbstractIdpAuthenticator {\n \n     private static final Logger logger = Logger.getLogger(IdpReviewProfileAuthenticator.class);\n-    private static final String FIRST_NAME = \"lastName\";\n-    private static final String LAST_NAME = \"lastName\";\n-    private static final String EMAIL = \"email\";\n-    private static final String USERNAME = \"username\";\n \n     @Override\n     public boolean requiresUser() {\n"}}, {"oid": "ed6e7916383275769942a4e3ea9bdf40a289d41b", "url": "https://github.com/keycloak/keycloak/commit/ed6e7916383275769942a4e3ea9bdf40a289d41b", "message": "KEYCLOAK-14536 Migrate UserModel fields to attributes\n\n- In order to make lastName/firstName/email/username field\n  configurable in profile\n  we need to store it as an attribute\n- Keep database as is for now (no impact on performance, schema)\n- Keep field names and getters and setters (no impact on FTL files)\n\nFix tests with logic changes\n\n- PolicyEvaluationTest: We need to take new user attributes into account\n- UserTest: We need to take into account new user attributes\n\nPotential impact on users:\n\n- When subclassing UserModel, consistency issues may occur since one can\n  now set e.g. username via setSingleAttribute also\n- When using PolicyEvaluations, the number of attributes has changed", "committedDate": "2020-06-22T09:53:35Z", "type": "commit"}, {"oid": "ed6e7916383275769942a4e3ea9bdf40a289d41b", "url": "https://github.com/keycloak/keycloak/commit/ed6e7916383275769942a4e3ea9bdf40a289d41b", "message": "KEYCLOAK-14536 Migrate UserModel fields to attributes\n\n- In order to make lastName/firstName/email/username field\n  configurable in profile\n  we need to store it as an attribute\n- Keep database as is for now (no impact on performance, schema)\n- Keep field names and getters and setters (no impact on FTL files)\n\nFix tests with logic changes\n\n- PolicyEvaluationTest: We need to take new user attributes into account\n- UserTest: We need to take into account new user attributes\n\nPotential impact on users:\n\n- When subclassing UserModel, consistency issues may occur since one can\n  now set e.g. username via setSingleAttribute also\n- When using PolicyEvaluations, the number of attributes has changed", "committedDate": "2020-06-22T09:53:35Z", "type": "forcePushed"}]}