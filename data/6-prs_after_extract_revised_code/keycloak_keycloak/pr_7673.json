{"pr_number": 7673, "pr_title": "KEYCLOAK-15524 Cleanup user related interfaces", "pr_createdAt": "2020-12-11T13:10:22Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7673", "timeline": [{"oid": "03f75bb48866214af2a364d1d8c3420e77817014", "url": "https://github.com/keycloak/keycloak/commit/03f75bb48866214af2a364d1d8c3420e77817014", "message": "KEYCLOAK-15524 Replace deprecated user methods usages after rebase", "committedDate": "2021-01-04T11:09:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4MDQ1OA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r542480458", "bodyText": "Please use non-abbreviated form\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ModelException(\"User doesn't exists\");\n          \n          \n            \n                        throw new ModelException(\"User does not exists\");", "author": "hmlnarik", "createdAt": "2020-12-14T15:36:26Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java", "diffHunk": "@@ -365,12 +365,18 @@ private void updateGrantedConsentEntity(UserConsentEntity consentEntity, UserCon\n     @Override\n     public void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore) {\n         UserEntity entity = em.getReference(UserEntity.class, user.getId());\n+        if (entity == null) {\n+            throw new ModelException(\"User doesn't exists\");", "originalCommit": "72156b56d72ba4a3eddd7d2029e4eb65e7413d05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java b/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java\nindex ced669cece..1f90a7e26f 100755\n--- a/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java\n+++ b/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java\n\n@@ -366,7 +353,7 @@ public class JpaUserProvider implements UserProvider.Streams, UserCredentialStor\n     public void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore) {\n         UserEntity entity = em.getReference(UserEntity.class, user.getId());\n         if (entity == null) {\n-            throw new ModelException(\"User doesn't exists\");\n+            throw new ModelException(\"User does not exists\");\n         }\n         entity.setNotBefore(notBefore);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4MDY1MQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r542480651", "bodyText": "same here", "author": "hmlnarik", "createdAt": "2020-12-14T15:36:38Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java", "diffHunk": "@@ -365,12 +365,18 @@ private void updateGrantedConsentEntity(UserConsentEntity consentEntity, UserCon\n     @Override\n     public void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore) {\n         UserEntity entity = em.getReference(UserEntity.class, user.getId());\n+        if (entity == null) {\n+            throw new ModelException(\"User doesn't exists\");\n+        }\n         entity.setNotBefore(notBefore);\n     }\n \n     @Override\n     public int getNotBeforeOfUser(RealmModel realm, UserModel user) {\n         UserEntity entity = em.getReference(UserEntity.class, user.getId());\n+        if (entity == null) {\n+            throw new ModelException(\"User doesn't exists\");", "originalCommit": "72156b56d72ba4a3eddd7d2029e4eb65e7413d05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java b/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java\nindex ced669cece..1f90a7e26f 100755\n--- a/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java\n+++ b/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java\n\n@@ -366,7 +353,7 @@ public class JpaUserProvider implements UserProvider.Streams, UserCredentialStor\n     public void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore) {\n         UserEntity entity = em.getReference(UserEntity.class, user.getId());\n         if (entity == null) {\n-            throw new ModelException(\"User doesn't exists\");\n+            throw new ModelException(\"User does not exists\");\n         }\n         entity.setNotBefore(notBefore);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyNDQ0Mw==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555324443", "bodyText": "UUID is not necessarily the only ID. Could be a random string, or random number - the requirement is that it is fresh, nonexistent in the current storage\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param id id of the new user. Should be generated to random UUID if {@code null}.\n          \n          \n            \n                 * @param id id of the new user. Should be generated to random value if {@code null}.", "author": "hmlnarik", "createdAt": "2021-01-11T20:41:22Z", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -38,39 +38,136 @@\n         UserQueryProvider,\n         UserRegistrationProvider,\n         UserBulkUpdateProvider {\n-    // Note: The reason there are so many query methods here is for layering a cache on top of an persistent KeycloakSession\n \n-    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n-    boolean removeFederatedIdentity(RealmModel realm, UserModel user, String socialProvider);\n-    void preRemove(RealmModel realm, IdentityProviderModel provider);\n-    void updateFederatedIdentity(RealmModel realm, UserModel federatedUser, FederatedIdentityModel federatedIdentityModel);\n+    /**\n+     * Sets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param notBefore new value for notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n \n     /**\n-     * @deprecated Use {@link #getFederatedIdentitiesStream(UserModel, RealmModel) getFederatedIdentitiesStream} instead.\n+     * Gets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @return the value of notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n+\n+    /**\n+     * Return a UserModel representing service account of the client\n+     *\n+     * @param client the client model\n+     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n+     * @return userModel representing service account of the client\n+     */\n+    UserModel getServiceAccount(ClientModel client);\n+\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.\n      */\n     @Deprecated\n-    Set<FederatedIdentityModel> getFederatedIdentities(UserModel user, RealmModel realm);\n+    List<UserModel> getUsers(RealmModel realm, boolean includeServiceAccounts);\n \n     /**\n-     * Obtains the federated identities of the specified user.\n+     * Obtains the users associated with the specified realm.\n      *\n-     * @param user a reference to the user.\n-     * @param realm a reference to the realm.\n-     * @return a non-null {@link Stream} of federated identities associated with the user.\n+     * @param realm a reference to the realm being used for the search.\n+     * @param includeServiceAccounts {@code true} if service accounts should be included in the result; {@code false} otherwise.\n+     * @return a non-null {@link Stream} of users associated withe the realm.\n      */\n-    default Stream<FederatedIdentityModel> getFederatedIdentitiesStream(UserModel user, RealmModel realm) {\n-        Set<FederatedIdentityModel> value = this.getFederatedIdentities(user, realm);\n+    default Stream<UserModel> getUsersStream(RealmModel realm, boolean includeServiceAccounts) {\n+        List<UserModel> value = this.getUsers(realm, includeServiceAccounts);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n-    FederatedIdentityModel getFederatedIdentity(UserModel user, String socialProvider, RealmModel realm);\n-    UserModel getUserByFederatedIdentity(FederatedIdentityModel socialLink, RealmModel realm);\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean)} instead.\n+     */\n+    @Deprecated\n+    List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults, boolean includeServiceAccounts);\n+\n+    /**\n+     * Obtains the users associated with the specified realm.\n+     *\n+     * @param realm a reference to the realm being used for the search.\n+     * @param firstResult first result to return. Ignored if negative, zero, or {@code null}.\n+     * @param maxResults maximum number of results to return. Ignored if negative or {@code null}.\n+     * @param includeServiceAccounts {@code true} if service accounts should be included in the result; {@code false} otherwise.\n+     * @return a non-null {@link Stream} of users associated withe the realm.\n+     */\n+    default Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults, boolean includeServiceAccounts) {\n+        List<UserModel> value = this.getUsers(realm, firstResult == null ? -1 : firstResult, maxResults == null ? -1 : maxResults, includeServiceAccounts);\n+        return value != null ? value.stream() : Stream.empty();\n+    }\n+\n+    /**\n+     * Adds a new user into the storage.\n+     *\n+     * only used for local storage\n+     *\n+     * @param realm the realm that user will be created in\n+     * @param id id of the new user. Should be generated to random UUID if {@code null}.", "originalCommit": "53d44b1e42cb71604f079e95d1830f694a00b61f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/models/UserProvider.java b/server-spi/src/main/java/org/keycloak/models/UserProvider.java\nindex 73285a995e..b07618af1b 100755\n--- a/server-spi/src/main/java/org/keycloak/models/UserProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/UserProvider.java\n\n@@ -89,7 +89,7 @@ public interface UserProvider extends Provider,\n     }\n \n     /**\n-     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean)} instead.\n+     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean) getUsersStream} instead.\n      */\n     @Deprecated\n     List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults, boolean includeServiceAccounts);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyNTM4Mw==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555325383", "bodyText": "Changing to lowercase is implementation-specific and should not be prescribed in the javadoc. Generally, the username should rather be stored as entered, and would be searched for in case-insensitive manner should the storage be configured so.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param username username, should be changed to lowercase before storing\n          \n          \n            \n                 * @param username username.", "author": "hmlnarik", "createdAt": "2021-01-11T20:43:18Z", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -38,39 +38,136 @@\n         UserQueryProvider,\n         UserRegistrationProvider,\n         UserBulkUpdateProvider {\n-    // Note: The reason there are so many query methods here is for layering a cache on top of an persistent KeycloakSession\n \n-    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n-    boolean removeFederatedIdentity(RealmModel realm, UserModel user, String socialProvider);\n-    void preRemove(RealmModel realm, IdentityProviderModel provider);\n-    void updateFederatedIdentity(RealmModel realm, UserModel federatedUser, FederatedIdentityModel federatedIdentityModel);\n+    /**\n+     * Sets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param notBefore new value for notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n \n     /**\n-     * @deprecated Use {@link #getFederatedIdentitiesStream(UserModel, RealmModel) getFederatedIdentitiesStream} instead.\n+     * Gets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @return the value of notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n+\n+    /**\n+     * Return a UserModel representing service account of the client\n+     *\n+     * @param client the client model\n+     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n+     * @return userModel representing service account of the client\n+     */\n+    UserModel getServiceAccount(ClientModel client);\n+\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.\n      */\n     @Deprecated\n-    Set<FederatedIdentityModel> getFederatedIdentities(UserModel user, RealmModel realm);\n+    List<UserModel> getUsers(RealmModel realm, boolean includeServiceAccounts);\n \n     /**\n-     * Obtains the federated identities of the specified user.\n+     * Obtains the users associated with the specified realm.\n      *\n-     * @param user a reference to the user.\n-     * @param realm a reference to the realm.\n-     * @return a non-null {@link Stream} of federated identities associated with the user.\n+     * @param realm a reference to the realm being used for the search.\n+     * @param includeServiceAccounts {@code true} if service accounts should be included in the result; {@code false} otherwise.\n+     * @return a non-null {@link Stream} of users associated withe the realm.\n      */\n-    default Stream<FederatedIdentityModel> getFederatedIdentitiesStream(UserModel user, RealmModel realm) {\n-        Set<FederatedIdentityModel> value = this.getFederatedIdentities(user, realm);\n+    default Stream<UserModel> getUsersStream(RealmModel realm, boolean includeServiceAccounts) {\n+        List<UserModel> value = this.getUsers(realm, includeServiceAccounts);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n-    FederatedIdentityModel getFederatedIdentity(UserModel user, String socialProvider, RealmModel realm);\n-    UserModel getUserByFederatedIdentity(FederatedIdentityModel socialLink, RealmModel realm);\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean)} instead.\n+     */\n+    @Deprecated\n+    List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults, boolean includeServiceAccounts);\n+\n+    /**\n+     * Obtains the users associated with the specified realm.\n+     *\n+     * @param realm a reference to the realm being used for the search.\n+     * @param firstResult first result to return. Ignored if negative, zero, or {@code null}.\n+     * @param maxResults maximum number of results to return. Ignored if negative or {@code null}.\n+     * @param includeServiceAccounts {@code true} if service accounts should be included in the result; {@code false} otherwise.\n+     * @return a non-null {@link Stream} of users associated withe the realm.\n+     */\n+    default Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults, boolean includeServiceAccounts) {\n+        List<UserModel> value = this.getUsers(realm, firstResult == null ? -1 : firstResult, maxResults == null ? -1 : maxResults, includeServiceAccounts);\n+        return value != null ? value.stream() : Stream.empty();\n+    }\n+\n+    /**\n+     * Adds a new user into the storage.\n+     *\n+     * only used for local storage\n+     *\n+     * @param realm the realm that user will be created in\n+     * @param id id of the new user. Should be generated to random UUID if {@code null}.\n+     * @param username username, should be changed to lowercase before storing", "originalCommit": "53d44b1e42cb71604f079e95d1830f694a00b61f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/models/UserProvider.java b/server-spi/src/main/java/org/keycloak/models/UserProvider.java\nindex 73285a995e..b07618af1b 100755\n--- a/server-spi/src/main/java/org/keycloak/models/UserProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/UserProvider.java\n\n@@ -89,7 +89,7 @@ public interface UserProvider extends Provider,\n     }\n \n     /**\n-     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean)} instead.\n+     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean) getUsersStream} instead.\n      */\n     @Deprecated\n     List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults, boolean includeServiceAccounts);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyODg3MA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555328870", "bodyText": "What is the \"social provider ID\"? I believe it is an internal ID of a identity provider? A link to `{@link org.keycloak.models.IdentityProviderModel.getInternalId()} could help to disambiguate this.", "author": "hmlnarik", "createdAt": "2021-01-11T20:50:06Z", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -88,104 +185,182 @@\n     }\n \n     /**\n+     * Update client scopes in the stored user consent\n+     *\n+     * @param realm a reference to the realm\n+     * @param userId id of the user\n+     * @param consent new details of the user consent\n      *\n-     * @param realm\n-     * @param userId\n-     * @param consent\n      * @throws ModelException when consent doesn't exist for the userId\n      */\n     void updateConsent(RealmModel realm, String userId, UserConsentModel consent);\n+\n+    /**\n+     * Remove a user consent given by the user id and client id\n+     *\n+     * @param realm a reference to the realm\n+     * @param userId id of the user\n+     * @param clientInternalId id of the client\n+     * @return {@code true} if the consent was removed, {@code false} otherwise\n+     */\n     boolean revokeConsentForClient(RealmModel realm, String userId, String clientInternalId);\n \n-    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n-    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n+    /* FEDERATED IDENTITIES methods */\n \n     /**\n+     * Adds a federated identity link for the user within the realm\n      *\n-     * @param client\n-     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n-     * @return\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param socialLink the federated identity model containing all details of the association between the user and\n+     *                   the identity provider\n      */\n-    UserModel getServiceAccount(ClientModel client);\n+    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n \n     /**\n-     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.\n+     * Removes federation link between the user and the identity provider given by its id\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param socialProvider social provider id", "originalCommit": "53d44b1e42cb71604f079e95d1830f694a00b61f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcxMjkwMA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555712900", "bodyText": "This is very good point because it is actually alias that is used, not internalId or providerId.", "author": "mhajas", "createdAt": "2021-01-12T11:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyODg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/models/UserProvider.java b/server-spi/src/main/java/org/keycloak/models/UserProvider.java\nindex 73285a995e..b07618af1b 100755\n--- a/server-spi/src/main/java/org/keycloak/models/UserProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/UserProvider.java\n\n@@ -222,7 +222,7 @@ public interface UserProvider extends Provider,\n      *\n      * @param realm a reference to the realm\n      * @param user the user model\n-     * @param socialProvider social provider id\n+     * @param socialProvider alias of the identity provider, see {@link IdentityProviderModel#getAlias()}\n      * @return {@code true} if the association was removed, {@code false} otherwise\n      */\n     boolean removeFederatedIdentity(RealmModel realm, UserModel user, String socialProvider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMDExNA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555330114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param username case insensitive username (storage should contain only lower-cased usernames)\n          \n          \n            \n                 * @param username case insensitive username (case-sensitivity is controlled by the storage)", "author": "hmlnarik", "createdAt": "2021-01-11T20:52:34Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,33 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+\n+    /**\n+     * Returns a user with the given id belonging to the realm\n+     *\n+     * @param id id of the user\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n     UserModel getUserById(String id, RealmModel realm);\n \n+    /**\n+     * Returns a user with the given username belonging to the realm\n+     *\n+     * @param username case insensitive username (storage should contain only lower-cased usernames)", "originalCommit": "53d44b1e42cb71604f079e95d1830f694a00b61f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\nindex bd858baaf4..60a3bb192d 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\n\n@@ -35,25 +35,73 @@ public interface UserLookupProvider {\n      * @param realm the realm model\n      * @return found user model, or {@code null} if no such user exists\n      */\n+    default UserModel getUserById(RealmModel realm, String id) {\n+        return getUserById(id, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserById(RealmModel, String) getUserById} instead.\n+     */\n+    @Deprecated\n     UserModel getUserById(String id, RealmModel realm);\n \n     /**\n      * Returns a user with the given username belonging to the realm\n      *\n-     * @param username case insensitive username (storage should contain only lower-cased usernames)\n+     * @param username case insensitive username (case-sensitivity is controlled by storage)\n      * @param realm the realm model\n      * @return found user model, or {@code null} if no such user exists\n      */\n+    default UserModel getUserByUsername(RealmModel realm, String username) {\n+        return getUserByUsername(username, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserByUsername(RealmModel, String) getUserByUsername} instead.\n+     */\n+    @Deprecated\n     UserModel getUserByUsername(String username, RealmModel realm);\n \n     /**\n      * Returns a user with the given email belonging to the realm\n      *\n-     * @param email case insensitive email address (storage should contain only lower-cased email addresses)\n+     * @param email case insensitive email address (case-sensitivity is controlled by storage)\n      * @param realm the realm model\n      * @return found user model, or {@code null} if no such user exists\n      *\n      * @throws org.keycloak.models.ModelDuplicateException when there are more users with same email\n      */\n+    default UserModel getUserByEmail(RealmModel realm, String email) {\n+        return getUserByEmail(email, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserByEmail(RealmModel, String) getUserByEmail} instead.\n+     */\n+    @Deprecated\n     UserModel getUserByEmail(String email, RealmModel realm);\n+    \n+    interface Streams extends UserLookupProvider {\n+        @Override\n+        UserModel getUserById(RealmModel realm, String id);\n+        \n+        @Override\n+        default UserModel getUserById(String id, RealmModel realm) {\n+            return getUserById(realm, id);\n+        }\n+\n+        @Override\n+        UserModel getUserByUsername(RealmModel realm, String username);\n+\n+        @Override\n+        default UserModel getUserByUsername(String username, RealmModel realm) {\n+            return getUserByUsername(realm, username);\n+        }\n+\n+        @Override\n+        UserModel getUserByEmail(RealmModel realm, String email);\n+\n+        @Override\n+        default UserModel getUserByEmail(String email, RealmModel realm) {\n+            return getUserByEmail(realm, email);\n+        }\n+\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMDM1MA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555330350", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param email case insensitive email address (storage should contain only lower-cased email addresses)\n          \n          \n            \n                 * @param email case insensitive email address (case-sensitivity is controlled by the storage)", "author": "hmlnarik", "createdAt": "2021-01-11T20:53:06Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,33 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+\n+    /**\n+     * Returns a user with the given id belonging to the realm\n+     *\n+     * @param id id of the user\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n     UserModel getUserById(String id, RealmModel realm);\n \n+    /**\n+     * Returns a user with the given username belonging to the realm\n+     *\n+     * @param username case insensitive username (storage should contain only lower-cased usernames)\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n     UserModel getUserByUsername(String username, RealmModel realm);\n \n     /**\n-     * \n-     * @param email\n-     * @param realm\n+     * Returns a user with the given email belonging to the realm\n+     *\n+     * @param email case insensitive email address (storage should contain only lower-cased email addresses)", "originalCommit": "53d44b1e42cb71604f079e95d1830f694a00b61f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\nindex bd858baaf4..60a3bb192d 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\n\n@@ -35,25 +35,73 @@ public interface UserLookupProvider {\n      * @param realm the realm model\n      * @return found user model, or {@code null} if no such user exists\n      */\n+    default UserModel getUserById(RealmModel realm, String id) {\n+        return getUserById(id, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserById(RealmModel, String) getUserById} instead.\n+     */\n+    @Deprecated\n     UserModel getUserById(String id, RealmModel realm);\n \n     /**\n      * Returns a user with the given username belonging to the realm\n      *\n-     * @param username case insensitive username (storage should contain only lower-cased usernames)\n+     * @param username case insensitive username (case-sensitivity is controlled by storage)\n      * @param realm the realm model\n      * @return found user model, or {@code null} if no such user exists\n      */\n+    default UserModel getUserByUsername(RealmModel realm, String username) {\n+        return getUserByUsername(username, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserByUsername(RealmModel, String) getUserByUsername} instead.\n+     */\n+    @Deprecated\n     UserModel getUserByUsername(String username, RealmModel realm);\n \n     /**\n      * Returns a user with the given email belonging to the realm\n      *\n-     * @param email case insensitive email address (storage should contain only lower-cased email addresses)\n+     * @param email case insensitive email address (case-sensitivity is controlled by storage)\n      * @param realm the realm model\n      * @return found user model, or {@code null} if no such user exists\n      *\n      * @throws org.keycloak.models.ModelDuplicateException when there are more users with same email\n      */\n+    default UserModel getUserByEmail(RealmModel realm, String email) {\n+        return getUserByEmail(email, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserByEmail(RealmModel, String) getUserByEmail} instead.\n+     */\n+    @Deprecated\n     UserModel getUserByEmail(String email, RealmModel realm);\n+    \n+    interface Streams extends UserLookupProvider {\n+        @Override\n+        UserModel getUserById(RealmModel realm, String id);\n+        \n+        @Override\n+        default UserModel getUserById(String id, RealmModel realm) {\n+            return getUserById(realm, id);\n+        }\n+\n+        @Override\n+        UserModel getUserByUsername(RealmModel realm, String username);\n+\n+        @Override\n+        default UserModel getUserByUsername(String username, RealmModel realm) {\n+            return getUserByUsername(realm, username);\n+        }\n+\n+        @Override\n+        UserModel getUserByEmail(RealmModel realm, String email);\n+\n+        @Override\n+        default UserModel getUserByEmail(String email, RealmModel realm) {\n+            return getUserByEmail(realm, email);\n+        }\n+\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMjY1OA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555332658", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Searches for users with username, email or first + last name that is like search string.\n          \n          \n            \n                 * Searches for users whose username, email, first or last name contain the any of the strings in {@code search} separated by whitespace.\n          \n      \n    \n    \n  \n\nSame comment applies below", "author": "hmlnarik", "createdAt": "2021-01-11T20:57:26Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -173,15 +173,16 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Search for users with username, email or first + last name that is like search string.\n+     * Searches for users with username, email or first + last name that is like search string.", "originalCommit": "53d44b1e42cb71604f079e95d1830f694a00b61f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcyMDQwOA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555720408", "bodyText": "Should we do searching like described? As far as I know our implementations doesn't search for all words in search separately. The way I understand it, it just checks if any of strings username, email and first name + last name contains search string. See https://github.com/keycloak/keycloak/blob/master/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java#L824-L833. Am I missing something?", "author": "mhajas", "createdAt": "2021-01-12T12:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMjY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4MDI5MA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555780290", "bodyText": "Yes. Building any sort of index on \"first name + last\" is hard and requires functional indices. It's easier to search word for word. JPA implementation is far from performant just because of this. For the fields alone, full-text search / index could be leveraged.", "author": "hmlnarik", "createdAt": "2021-01-12T13:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMjY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\nindex 69664de393..590f78c589 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n\n@@ -167,74 +209,77 @@ public interface UserQueryProvider {\n      * @param maxResults maximum number of results to return. Ignored if negative.\n      * @return a non-null {@link Stream} of users.\n      */\n-    default Stream<UserModel> getUsersStream(RealmModel realm, int firstResult, int maxResults) {\n-        List<UserModel> value = this.getUsers(realm, firstResult, maxResults);\n+    default Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n+        List<UserModel> value = this.getUsers(realm, firstResult == null ? -1 : firstResult,\n+                maxResults == null ? -1 : maxResults);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n     /**\n-     * Searches for users with username, email or first + last name that is like search string.\n+     * Searches for users whose username, email, first name or last name contain any of the strings in {@code search} separated by whitespace.\n      *\n      * If possible, implementations should treat the parameter values as partial match patterns i.e. in RDMBS terms use LIKE.\n      *\n      * This method is used by the admin console search box\n      *\n-     * @param search case insensitive search string.\n+     * @param search case insensitive list of string separated by whitespaces.\n      * @param realm realm to search within\n      * @return list of users that satisfies the given search condition\n      *\n-     * @deprecated Use {@link #searchForUserStream(String, RealmModel) searchForUserStream} instead.\n+     * @deprecated Use {@link #searchForUserStream(RealmModel, String) searchForUserStream} instead.\n      */\n     @Deprecated\n     List<UserModel> searchForUser(String search, RealmModel realm);\n \n     /**\n-     * Searches for users with username, email or first + last name that is like search string.  If possible, implementations\n-     * should treat the parameter values as partial match patterns (i.e. in RDMBS terms use LIKE).\n+     * Searches for users whose username, email, first name or last name contain any of the strings in {@code search} separated by whitespace.\n+     *\n+     * If possible, implementations should treat the parameter values as partial match patterns (i.e. in RDMBS terms use LIKE).\n      * <p/>\n      * This method is used by the admin console search box\n      *\n-     * @param search case insensitive search string.\n      * @param realm a reference to the realm.\n+     * @param search case insensitive list of string separated by whitespaces.\n      * @return a non-null {@link Stream} of users that match the search string.\n      */\n-    default Stream<UserModel> searchForUserStream(String search, RealmModel realm) {\n+    default Stream<UserModel> searchForUserStream(RealmModel realm, String search) {\n         List<UserModel> value = this.searchForUser(search, realm);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n     /**\n-     * Searches for users with username, email or first + last name that is like search string. The resulting user list\n-     * should be paginated with respect to parameters {@code firstResult} and {@code maxResults}\n+     * Searches for users whose username, email, first name or last name contain any of the strings in {@code search} separated by whitespace.\n+     * The resulting user list should be paginated with respect to parameters {@code firstResult} and {@code maxResults}\n      *\n      * If possible, implementations should treat the parameter values as partial match patterns i.e. in RDMBS terms use LIKE.\n      *\n      * This method is used by the admin console search box\n      *\n-     * @param search case insensitive search string.\n+     * @param search case insensitive list of string separated by whitespaces.\n      * @param realm a reference to the realm\n      * @param firstResult first result to return. Ignored if negative or zero.\n      * @param maxResults maximum number of results to return. Ignored if negative.\n      * @return paginated list of users from the realm that satisfies given search\n      *\n-     * @deprecated Use {@link #searchForUserStream(String, RealmModel, Integer, Integer) searchForUserStream} instead.\n+     * @deprecated Use {@link #searchForUserStream(RealmModel, String, Integer, Integer) searchForUserStream} instead.\n      */\n     @Deprecated\n     List<UserModel> searchForUser(String search, RealmModel realm, int firstResult, int maxResults);\n \n     /**\n-     * Searches for users with username, email or first + last name that is like search string. If possible, implementations\n-     * should treat the parameter values as partial match patterns (i.e. in RDMBS terms use LIKE).\n+     * Searches for users whose username, email, first name or last name contain any of the strings in {@code search} separated by whitespace.\n+     *\n+     * If possible, implementations should treat the parameter values as partial match patterns (i.e. in RDMBS terms use LIKE).\n      * <p/>\n      * This method is used by the admin console search box\n      *\n-     * @param search case insensitive search string.\n      * @param realm a reference to the realm.\n+     * @param search case insensitive list of string separated by whitespaces.\n      * @param firstResult first result to return. Ignored if negative, zero, or {@code null}.\n      * @param maxResults maximum number of results to return. Ignored if negative or {@code null}.\n      * @return a non-null {@link Stream} of users that match the search criteria.\n      */\n-    default Stream<UserModel> searchForUserStream(String search, RealmModel realm, Integer firstResult, Integer maxResults) {\n+    default Stream<UserModel> searchForUserStream(RealmModel realm, String search, Integer firstResult, Integer maxResults) {\n         List<UserModel> value = this.searchForUser(search, realm, firstResult == null ? -1 : firstResult, maxResults == null ? -1 : maxResults);\n         return value != null ? value.stream() : Stream.empty();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzNTA5Mg==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555335092", "bodyText": "Prefer constants, e.g. UserModel.FIRST_NAME to plain strings.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     <li>\"firstName\" - first name (case insensitive string)</li>\n          \n          \n            \n                 *     <li>UserModel.FIRST_NAME - first name (case insensitive string)</li>\n          \n      \n    \n    \n  \n\nSame comment applies to methods below", "author": "hmlnarik", "createdAt": "2021-01-11T21:00:07Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -237,35 +240,53 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Search for user by parameter.  Valid parameters are:\n-     * \"first\" - first name\n-     * \"last\" - last name\n-     * \"email\" - email\n-     * \"username\" - username\n+     * Search for user by a map of parameters.\n+     * <p/>\n+     * Valid parameters are:\n+     * <ul>\n+     *     <li>\"firstName\" - first name (case insensitive string)</li>", "originalCommit": "53d44b1e42cb71604f079e95d1830f694a00b61f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\nindex 69664de393..590f78c589 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n\n@@ -167,74 +209,77 @@ public interface UserQueryProvider {\n      * @param maxResults maximum number of results to return. Ignored if negative.\n      * @return a non-null {@link Stream} of users.\n      */\n-    default Stream<UserModel> getUsersStream(RealmModel realm, int firstResult, int maxResults) {\n-        List<UserModel> value = this.getUsers(realm, firstResult, maxResults);\n+    default Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n+        List<UserModel> value = this.getUsers(realm, firstResult == null ? -1 : firstResult,\n+                maxResults == null ? -1 : maxResults);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n     /**\n-     * Searches for users with username, email or first + last name that is like search string.\n+     * Searches for users whose username, email, first name or last name contain any of the strings in {@code search} separated by whitespace.\n      *\n      * If possible, implementations should treat the parameter values as partial match patterns i.e. in RDMBS terms use LIKE.\n      *\n      * This method is used by the admin console search box\n      *\n-     * @param search case insensitive search string.\n+     * @param search case insensitive list of string separated by whitespaces.\n      * @param realm realm to search within\n      * @return list of users that satisfies the given search condition\n      *\n-     * @deprecated Use {@link #searchForUserStream(String, RealmModel) searchForUserStream} instead.\n+     * @deprecated Use {@link #searchForUserStream(RealmModel, String) searchForUserStream} instead.\n      */\n     @Deprecated\n     List<UserModel> searchForUser(String search, RealmModel realm);\n \n     /**\n-     * Searches for users with username, email or first + last name that is like search string.  If possible, implementations\n-     * should treat the parameter values as partial match patterns (i.e. in RDMBS terms use LIKE).\n+     * Searches for users whose username, email, first name or last name contain any of the strings in {@code search} separated by whitespace.\n+     *\n+     * If possible, implementations should treat the parameter values as partial match patterns (i.e. in RDMBS terms use LIKE).\n      * <p/>\n      * This method is used by the admin console search box\n      *\n-     * @param search case insensitive search string.\n      * @param realm a reference to the realm.\n+     * @param search case insensitive list of string separated by whitespaces.\n      * @return a non-null {@link Stream} of users that match the search string.\n      */\n-    default Stream<UserModel> searchForUserStream(String search, RealmModel realm) {\n+    default Stream<UserModel> searchForUserStream(RealmModel realm, String search) {\n         List<UserModel> value = this.searchForUser(search, realm);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n     /**\n-     * Searches for users with username, email or first + last name that is like search string. The resulting user list\n-     * should be paginated with respect to parameters {@code firstResult} and {@code maxResults}\n+     * Searches for users whose username, email, first name or last name contain any of the strings in {@code search} separated by whitespace.\n+     * The resulting user list should be paginated with respect to parameters {@code firstResult} and {@code maxResults}\n      *\n      * If possible, implementations should treat the parameter values as partial match patterns i.e. in RDMBS terms use LIKE.\n      *\n      * This method is used by the admin console search box\n      *\n-     * @param search case insensitive search string.\n+     * @param search case insensitive list of string separated by whitespaces.\n      * @param realm a reference to the realm\n      * @param firstResult first result to return. Ignored if negative or zero.\n      * @param maxResults maximum number of results to return. Ignored if negative.\n      * @return paginated list of users from the realm that satisfies given search\n      *\n-     * @deprecated Use {@link #searchForUserStream(String, RealmModel, Integer, Integer) searchForUserStream} instead.\n+     * @deprecated Use {@link #searchForUserStream(RealmModel, String, Integer, Integer) searchForUserStream} instead.\n      */\n     @Deprecated\n     List<UserModel> searchForUser(String search, RealmModel realm, int firstResult, int maxResults);\n \n     /**\n-     * Searches for users with username, email or first + last name that is like search string. If possible, implementations\n-     * should treat the parameter values as partial match patterns (i.e. in RDMBS terms use LIKE).\n+     * Searches for users whose username, email, first name or last name contain any of the strings in {@code search} separated by whitespace.\n+     *\n+     * If possible, implementations should treat the parameter values as partial match patterns (i.e. in RDMBS terms use LIKE).\n      * <p/>\n      * This method is used by the admin console search box\n      *\n-     * @param search case insensitive search string.\n      * @param realm a reference to the realm.\n+     * @param search case insensitive list of string separated by whitespaces.\n      * @param firstResult first result to return. Ignored if negative, zero, or {@code null}.\n      * @param maxResults maximum number of results to return. Ignored if negative or {@code null}.\n      * @return a non-null {@link Stream} of users that match the search criteria.\n      */\n-    default Stream<UserModel> searchForUserStream(String search, RealmModel realm, Integer firstResult, Integer maxResults) {\n+    default Stream<UserModel> searchForUserStream(RealmModel realm, String search, Integer firstResult, Integer maxResults) {\n         List<UserModel> value = this.searchForUser(search, realm, firstResult == null ? -1 : firstResult, maxResults == null ? -1 : maxResults);\n         return value != null ? value.stream() : Stream.empty();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzNjA4OQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555336089", "bodyText": "Implementations do not have to search in {@code UserFederatedStorageProvider} part should clarified / reworded", "author": "hmlnarik", "createdAt": "2021-01-11T21:01:22Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -323,14 +361,15 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Get users that belong to a specific group. Implementations do not have to search in UserFederatedStorageProvider\n+     * Get users that belong to a specific group. Implementations do not have to search in {@code UserFederatedStorageProvider}", "originalCommit": "53d44b1e42cb71604f079e95d1830f694a00b61f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcyNjEyNA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555726124", "bodyText": "To be honest, I would probably completely remove this part, as it basically holds for all methods that they should not do anything with federated storage. Maybe it should be in the documentation, that when you are implementing UserProvider for your storage you should return only users, that are part of your storage.", "author": "mhajas", "createdAt": "2021-01-12T12:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzNjA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3Nzc4MQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555777781", "bodyText": "I agree, class javadoc would be best place to put this information", "author": "hmlnarik", "createdAt": "2021-01-12T13:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzNjA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\nindex 69664de393..590f78c589 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n\n@@ -335,36 +380,33 @@ public interface UserQueryProvider {\n      * <p/>\n      * Valid parameters are:\n      * <ul>\n-     *     <li>\"firstName\" - first name (case insensitive string)</li>\n-     *     <li>\"lastName\" - last name (case insensitive string)</li>\n-     *     <li>\"email\" - email (case insensitive string)</li>\n-     *     <li>\"username\" - username (case insensitive string)</li>\n-     *     <li>\"emailVerified\" - search only for users with verified/non-verified email (true/false)</li>\n-     *     <li>\"enabled\" - search only for enabled/disabled users (true/false)</li>\n-     *     <li>\"keycloak.session.realm.users.query.idp_alias\" - search only for users that have a federated identity\n+     *     <li>{@link UserModel#FIRST_NAME} - first name (case insensitive string)</li>\n+     *     <li>{@link UserModel#LAST_NAME} - last name (case insensitive string)</li>\n+     *     <li>{@link UserModel#EMAIL} - email (case insensitive string)</li>\n+     *     <li>{@link UserModel#USERNAME} - username (case insensitive string)</li>\n+     *     <li>{@link UserModel#EMAIL_VERIFIED} - search only for users with verified/non-verified email (true/false)</li>\n+     *     <li>{@link UserModel#ENABLED} - search only for enabled/disabled users (true/false)</li>\n+     *     <li>{@link UserModel#IDP_ALIAS} - search only for users that have a federated identity\n      *     from idp with the given alias configured (case sensitive string)</li>\n-     *     <li>\"keycloak.session.realm.users.query.idp_user_id\" - search for users with federated identity with\n+     *     <li>{@link UserModel#IDP_USER_ID} - search for users with federated identity with\n      *     the given userId (case sensitive string)</li>\n      * </ul>\n      *\n      * This method is used by the REST API when querying users.\n      *\n-     * @param params a map containing the search parameters.\n      * @param realm a reference to the realm.\n+     * @param params a map containing the search parameters.\n      * @param firstResult first result to return. Ignored if negative, zero, or {@code null}.\n      * @param maxResults maximum number of results to return. Ignored if negative or {@code null}.\n      * @return a non-null {@link Stream} of users that match the search criteria.\n      */\n-    default Stream<UserModel> searchForUserStream(Map<String, String> params, RealmModel realm, Integer firstResult, Integer maxResults) {\n+    default Stream<UserModel> searchForUserStream(RealmModel realm, Map<String, String> params, Integer firstResult, Integer maxResults) {\n         List<UserModel> value = this.searchForUser(params, realm, firstResult == null ? -1 : firstResult, maxResults == null ? -1 : maxResults);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n     /**\n-     * Get users that belong to a specific group. Implementations do not have to search in {@code UserFederatedStorageProvider}\n-     * as this is done automatically.\n-     *\n-     * @see org.keycloak.storage.federated.UserFederatedStorageProvider\n+     * Get users that belong to a specific group.\n      *\n      * @param realm a reference to the realm\n      * @param group a reference to the group\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzOTU5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555339591", "bodyText": "What is checked in the set of groups?", "author": "hmlnarik", "createdAt": "2021-01-11T21:05:58Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -63,39 +63,62 @@ default int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     /**\n      * Returns the number of users that match the given criteria.\n      *\n-     * @param search search criteria\n      * @param realm  the realm\n+     * @param search search criteria\n      * @return number of users that match the search\n      */\n+    default int getUsersCount(RealmModel realm, String search) {\n+        return getUsersCount(search, realm);\n+    }\n+\n+    /**\n+     * @deprecated Use {@link #getUsersCount(RealmModel, String)}\n+     */\n+    @Deprecated\n     default int getUsersCount(String search, RealmModel realm) {\n-        return (int) searchForUserStream(search, realm).count();\n+        return (int) searchForUserStream(realm, search).count();\n     }\n \n     /**\n      * Returns the number of users that match the given criteria and are in\n      * at least one of the groups given.\n      *\n-     * @param search   search criteria\n      * @param realm    the realm\n+     * @param search   search criteria\n      * @param groupIds set of groups to check for", "originalCommit": "0e536bb257a92166f63276c161afb8010d9d5467", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\nindex fe6d7a6eb0..590f78c589 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n\n@@ -61,10 +72,10 @@ public interface UserQueryProvider {\n     }\n \n     /**\n-     * Returns the number of users that match the given criteria.\n+     * Returns the number of users that would be returned by a call to {@link #searchForUserStream(RealmModel, String) searchForUserStream}\n      *\n      * @param realm  the realm\n-     * @param search search criteria\n+     * @param search case insensitive list of strings separated by whitespaces.\n      * @return number of users that match the search\n      */\n     default int getUsersCount(RealmModel realm, String search) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM0MDc4OQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555340789", "bodyText": "Please note https://hibernate.atlassian.net/browse/HHH-14295", "author": "hmlnarik", "createdAt": "2021-01-11T21:08:15Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.keycloak.models.jpa;\n+\n+import javax.persistence.TypedQuery;\n+\n+public class PaginationUtils {\n+    public static <T> TypedQuery<T> paginateQuery(TypedQuery<T> query, Integer first, Integer max) {\n+        if (first != null && first > 0) {", "originalCommit": "f82218126c696c963da2eb315adf71bd08c9925b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java b/model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java\nindex dfd3d563b9..715539642b 100644\n--- a/model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java\n+++ b/model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java\n\n@@ -1,11 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.keycloak.models.jpa;\n \n import javax.persistence.TypedQuery;\n \n public class PaginationUtils {\n+\n+    public static final int DEFAULT_MAX_RESULTS = Integer.MAX_VALUE >> 1;\n+    \n     public static <T> TypedQuery<T> paginateQuery(TypedQuery<T> query, Integer first, Integer max) {\n         if (first != null && first > 0) {\n             query = query.setFirstResult(first);\n+            \n+            // Workaround for https://hibernate.atlassian.net/browse/HHH-14295\n+            if (max == null || max < 0) {\n+                max = DEFAULT_MAX_RESULTS;\n+            }\n         }\n \n         if (max != null && max >= 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4ODAwNQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555388005", "bodyText": "nit: Can we use if (list.isEmpty()) on line 224, 310 and 495?", "author": "vramik", "createdAt": "2021-01-11T22:44:56Z", "path": "model/map/src/main/java/org/keycloak/models/map/user/MapUserProvider.java", "diffHunk": "@@ -224,7 +213,7 @@ public FederatedIdentityModel getFederatedIdentity(UserModel user, String social\n     }\n \n     @Override\n-    public UserModel getUserByFederatedIdentity(FederatedIdentityModel socialLink, RealmModel realm) {\n+    public UserModel getUserByFederatedIdentity(RealmModel realm, FederatedIdentityModel socialLink) {", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/user/MapUserProvider.java b/model/map/src/main/java/org/keycloak/models/map/user/MapUserProvider.java\nindex d003ee977c..c6a4cf04b2 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/user/MapUserProvider.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/user/MapUserProvider.java\n\n@@ -221,7 +220,7 @@ public class MapUserProvider implements UserProvider.Streams, UserCredentialStor\n                 .collect(Collectors.collectingAndThen(\n                         Collectors.toList(),\n                         list -> {\n-                            if (list.size() == 0) {\n+                            if (list.isEmpty()) {\n                                 return null;\n                             } else if (list.size() != 1) {\n                                 throw new IllegalStateException(\"More results found for identityProvider=\" + socialLink.getIdentityProvider() +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MTIxMw==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555391213", "bodyText": "I've noticed the Integer.MAX_VALUE - 1, why the -1  is needed?", "author": "vramik", "createdAt": "2021-01-11T22:52:36Z", "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -386,41 +379,34 @@ public int getUsersCount(RealmModel realm) {\n         Stream<LDAPObject> stream = searchLDAP(realm, params).stream()\n             .filter(ldapObject -> {\n                 String ldapUsername = LDAPUtils.getUsername(ldapObject, this.ldapIdentityStore.getConfig());\n-                return (session.userLocalStorage().getUserByUsername(ldapUsername, realm) == null);\n+                return (session.userLocalStorage().getUserByUsername(realm, ldapUsername) == null);\n             });\n-        if (firstResult > 0)\n-            stream = stream.skip(firstResult);\n-        if (maxResults >= 0)\n-            stream = stream.limit(maxResults);\n-        return stream.map(ldapObject -> importUserFromLDAP(session, realm, ldapObject));\n-    }\n \n-    @Override\n-    public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group) {\n-        return getGroupMembersStream(realm, group, 0, Integer.MAX_VALUE - 1);\n+        return paginatedStream(stream, firstResult, maxResults).map(ldapObject -> importUserFromLDAP(session, realm, ldapObject));\n     }\n \n     @Override\n     public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group, Integer firstResult, Integer maxResults) {\n+        int first = firstResult == null ? 0 : firstResult;\n+        int max = maxResults == null ? Integer.MAX_VALUE - 1 : maxResults;", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc1NTg4NQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555755885", "bodyText": "Good question. I basically reused the default value that was there before. However, I am not sure it is correct, maybe we should create a Jira for this as this can cause integer overflow when firstResult > 1. @hmlnarik WDYT?", "author": "mhajas", "createdAt": "2021-01-12T13:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MTIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4MjEyMQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555782121", "bodyText": "I'd say Integer.MAX_VALUE >> 1 would do here for reasonable cases", "author": "hmlnarik", "createdAt": "2021-01-12T13:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MTIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java b/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java\nindex 6d178c971e..89804f9554 100755\n--- a/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java\n+++ b/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java\n\n@@ -388,7 +388,7 @@ public class LDAPStorageProvider implements UserStorageProvider,\n     @Override\n     public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group, Integer firstResult, Integer maxResults) {\n         int first = firstResult == null ? 0 : firstResult;\n-        int max = maxResults == null ? Integer.MAX_VALUE - 1 : maxResults;\n+        int max = maxResults == null ? DEFAULT_MAX_RESULTS : maxResults;\n \n         return realm.getComponentsStream(model.getId(), LDAPStorageMapper.class.getName())\n             .sorted(ldapMappersComparator.sortAsc())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5NDEyMw==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555394123", "bodyText": "missing copyright", "author": "vramik", "createdAt": "2021-01-11T22:59:20Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.keycloak.models.jpa;", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java b/model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java\nindex dfd3d563b9..715539642b 100644\n--- a/model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java\n+++ b/model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java\n\n@@ -1,11 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.keycloak.models.jpa;\n \n import javax.persistence.TypedQuery;\n \n public class PaginationUtils {\n+\n+    public static final int DEFAULT_MAX_RESULTS = Integer.MAX_VALUE >> 1;\n+    \n     public static <T> TypedQuery<T> paginateQuery(TypedQuery<T> query, Integer first, Integer max) {\n         if (first != null && first > 0) {\n             query = query.setFirstResult(first);\n+            \n+            // Workaround for https://hibernate.atlassian.net/browse/HHH-14295\n+            if (max == null || max < 0) {\n+                max = DEFAULT_MAX_RESULTS;\n+            }\n         }\n \n         if (max != null && max >= 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5OTc5OQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555399799", "bodyText": "I guess the method is self-explanatory, I've just noticed that there is javadoc for throwIfEmpty. But not for closing one. I'd suggest to add javadoc to all of them, wdyt?", "author": "vramik", "createdAt": "2021-01-11T23:14:56Z", "path": "server-spi-private/src/main/java/org/keycloak/utils/StreamsUtil.java", "diffHunk": "@@ -42,4 +42,16 @@\n             throw ex;\n         }\n     }\n+\n+    public static <T> Stream<T> paginatedStream(Stream<T> originalStream, Integer first, Integer max) {", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi-private/src/main/java/org/keycloak/utils/StreamsUtil.java b/server-spi-private/src/main/java/org/keycloak/utils/StreamsUtil.java\nindex 398f52c15c..0f7a020422 100644\n--- a/server-spi-private/src/main/java/org/keycloak/utils/StreamsUtil.java\n+++ b/server-spi-private/src/main/java/org/keycloak/utils/StreamsUtil.java\n\n@@ -43,6 +52,16 @@ public class StreamsUtil {\n         }\n     }\n \n+    /**\n+     * Returns the original stream that is limited with {@link Stream#skip(long) skip} and\n+     * {@link Stream#limit(long) limit} functions based on values of {@code first} and {@code max} parameters.\n+     * \n+     * @param originalStream Stream to be limited.\n+     * @param first Index of first item to be returned by the stream. Ignored if negative, zero {@code null}.\n+     * @param max Maximum number of items to be returned by the stream. Ignored if negative or {@code null}.\n+     * @param <T> Type of items in the stream\n+     * @return Stream\n+     */\n     public static <T> Stream<T> paginatedStream(Stream<T> originalStream, Integer first, Integer max) {\n         if (first != null && first > 0) {\n             originalStream = originalStream.skip(first);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwMzE5Ng==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555403196", "bodyText": "I've noticed you've removed (or not added) the name of the method from @deprecated. I guess it was done for better readability of javadoc, right? Isn't this one omitted?\nIf so there are other places where the method name is present.\nOne way or another I'd suggest to unify it, wdyt? I've commented with word 'name' to other occurrences I've found.\nBut maybe I'm missing something and it really should be this way, in that case please ignore this one and all 'name' comments :)", "author": "vramik", "createdAt": "2021-01-11T23:24:14Z", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -38,39 +38,136 @@\n         UserQueryProvider,\n         UserRegistrationProvider,\n         UserBulkUpdateProvider {\n-    // Note: The reason there are so many query methods here is for layering a cache on top of an persistent KeycloakSession\n \n-    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n-    boolean removeFederatedIdentity(RealmModel realm, UserModel user, String socialProvider);\n-    void preRemove(RealmModel realm, IdentityProviderModel provider);\n-    void updateFederatedIdentity(RealmModel realm, UserModel federatedUser, FederatedIdentityModel federatedIdentityModel);\n+    /**\n+     * Sets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param notBefore new value for notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n+\n+    /**\n+     * Gets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @return the value of notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n \n     /**\n-     * @deprecated Use {@link #getFederatedIdentitiesStream(UserModel, RealmModel) getFederatedIdentitiesStream} instead.\n+     * Return a UserModel representing service account of the client\n+     *\n+     * @param client the client model\n+     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n+     * @return userModel representing service account of the client\n+     */\n+    UserModel getServiceAccount(ClientModel client);\n+\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc1OTA2Mg==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555759062", "bodyText": "This is my mistake. I thought I just accidentally added the method at the end of @link block (I thought I pressed something what I should not when Intellij tries to hint the method name), however, it seems that the method name is there on purpose. Thanks for spotting this, I will add the method name everywhere, I think it is more readable when there is only method name, or WDYT?", "author": "mhajas", "createdAt": "2021-01-12T13:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwMzE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/models/UserProvider.java b/server-spi/src/main/java/org/keycloak/models/UserProvider.java\nindex 21631bac91..b07618af1b 100755\n--- a/server-spi/src/main/java/org/keycloak/models/UserProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/models/UserProvider.java\n\n@@ -89,7 +89,7 @@ public interface UserProvider extends Provider,\n     }\n \n     /**\n-     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean)} instead.\n+     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean) getUsersStream} instead.\n      */\n     @Deprecated\n     List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults, boolean includeServiceAccounts);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNDYzMQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555404631", "bodyText": "There are some methods if this interface where @Override is specified and some methods where it is not. I'd suggest to unify it, wdyt?", "author": "vramik", "createdAt": "2021-01-11T23:28:04Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,78 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+\n+    /**\n+     * Returns a user with the given id belonging to the realm\n+     *\n+     * @param id id of the user\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n+    default UserModel getUserById(RealmModel realm, String id) {\n+        return getUserById(id, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserById(RealmModel, String)} instead.\n+     */\n+    @Deprecated\n     UserModel getUserById(String id, RealmModel realm);\n \n+    /**\n+     * Returns a user with the given username belonging to the realm\n+     *\n+     * @param username case insensitive username (storage should contain only lower-cased usernames)\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n+    default UserModel getUserByUsername(RealmModel realm, String username) {\n+        return getUserByUsername(username, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserByUsername(RealmModel, String)} instead.\n+     */\n+    @Deprecated\n     UserModel getUserByUsername(String username, RealmModel realm);\n \n     /**\n-     * \n-     * @param email\n-     * @param realm\n+     * Returns a user with the given email belonging to the realm\n+     *\n+     * @param email case insensitive email address (storage should contain only lower-cased email addresses)\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     *\n      * @throws org.keycloak.models.ModelDuplicateException when there are more users with same email\n-     * @return\n      */\n+    default UserModel getUserByEmail(RealmModel realm, String email) {\n+        return getUserByEmail(email, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserByEmail(RealmModel, String)} instead.\n+     */\n+    @Deprecated\n     UserModel getUserByEmail(String email, RealmModel realm);\n+    \n+    interface Streams extends UserLookupProvider {\n+        UserModel getUserById(RealmModel realm, String id);", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\nindex 7e21f823d4..60a3bb192d 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\n\n@@ -39,7 +39,7 @@ public interface UserLookupProvider {\n         return getUserById(id, realm);\n     }\n     /**\n-     * @deprecated Use {@link #getUserById(RealmModel, String)} instead.\n+     * @deprecated Use {@link #getUserById(RealmModel, String) getUserById} instead.\n      */\n     @Deprecated\n     UserModel getUserById(String id, RealmModel realm);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555405458", "bodyText": "I wonder if the original class-level javadoc (line 23,24) shouldn't be updated as well. I might be wrong, but it seems to me it's outdated.", "author": "vramik", "createdAt": "2021-01-11T23:30:14Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,78 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2NTQwOQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555865409", "bodyText": "What do you mean? I think what is written there is still true.", "author": "mhajas", "createdAt": "2021-01-12T15:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2NDQwNA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r556364404", "bodyText": "When I read it I realized I don't know how the interface supports basic login capabilities so I assumed it was outdated but it's probably just the fact that I don't know the application of the interface in those login capabilities.", "author": "vramik", "createdAt": "2021-01-13T09:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM5OTU1Nw==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r556399557", "bodyText": "I see. It works because when you log in, UserStorageManager will search all storage providers, that implement UserLookupProvider, for username/email. This means it should be enough to just implement UserLookupProvider and you should be able, to login with users stored in the storage. If you want some other functionality, for example, managing users via admin console, you need to implement also UserQueryProvider. After that, when UserStorageManager searches for all users, it will consider also users from your storage because you implemented UserQueryProvider.\nIn code, this is handled by methods in AbstractStorageManager, particularly in getStorageProviderInstance(...) which will check, whether UserStorageProvider implements requested capabilityInterface.", "author": "mhajas", "createdAt": "2021-01-13T10:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MzUxMA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557663510", "bodyText": "Thank you very much for explanation.", "author": "vramik", "createdAt": "2021-01-14T19:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\nindex 7e21f823d4..60a3bb192d 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java\n\n@@ -39,7 +39,7 @@ public interface UserLookupProvider {\n         return getUserById(id, realm);\n     }\n     /**\n-     * @deprecated Use {@link #getUserById(RealmModel, String)} instead.\n+     * @deprecated Use {@link #getUserById(RealmModel, String) getUserById} instead.\n      */\n     @Deprecated\n     UserModel getUserById(String id, RealmModel realm);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxMzU0Mg==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555413542", "bodyText": "It seems this change changes the behavior, doesn't it? Previously when maxResult was equal 0 the method returned empty stream, while now there won't be any stream.limit(maxResult) (if I understand the StreamsUtil.paginatedStream correctly).\nAnyway your changes seems correct to me, I was just wondering if it was a bugfix. But maybe I'm missing something.", "author": "vramik", "createdAt": "2021-01-11T23:53:53Z", "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -161,10 +162,8 @@ protected void deleteInvalidUser(final RealmModel realm, final UserModel user) {\n         Stream<UserModel> query(Object provider);\n     }\n \n-    protected Stream<UserModel> query(PaginatedQuery pagedQuery, RealmModel realm, int firstResult, int maxResults) {\n-        if (maxResults == 0) return Stream.empty();\n-        if (firstResult < 0) firstResult = 0;\n-        if (maxResults < 0) maxResults = Integer.MAX_VALUE - 1;\n+    protected Stream<UserModel> query(PaginatedQuery pagedQuery, RealmModel realm, Integer firstResult, Integer maxResults) {\n+        if (maxResults != null && maxResults == 0) return Stream.empty();", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MTA0OA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555871048", "bodyText": "This line will make sure that empty stream is returned when maxResult == 0. Even without this check the paginatedStream function will add .limit(0) because there is >= 0. I am not sure I understand what you mean.", "author": "mhajas", "createdAt": "2021-01-12T15:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxMzU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2MjQ3NA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r556362474", "bodyText": "You're right, my mistake, please ignore.", "author": "vramik", "createdAt": "2021-01-13T09:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxMzU0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555414868", "bodyText": "Is there any other work remaining as TODO? If not, I'd suggest remove all 5 TODO comments, if so is there any plan for it?", "author": "vramik", "createdAt": "2021-01-11T23:57:23Z", "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MjM2NA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555942364", "bodyText": "@hmlnarik should this be added in future or should I remove these comments?", "author": "mhajas", "createdAt": "2021-01-12T17:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwNTY4Nw==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557305687", "bodyText": "Good catch @vramik. These methods need to fulfil the contract given in javadoc, and thus need to count in the federated storages as well\n[EDIT] @mhajas has convinced me that this is not a straightforward cleanup because of requirements it has on handling e.g. imported users and those from the original storage. Let's keep this in a separate task", "author": "hmlnarik", "createdAt": "2021-01-14T10:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwOTY4NA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557309684", "bodyText": "We should probably create a Jira for this, or should I add it in this PR?", "author": "mhajas", "createdAt": "2021-01-14T10:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1NDA0MA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557454040", "bodyText": "Rather the latter (this PR) please.", "author": "hmlnarik", "createdAt": "2021-01-14T14:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY3MTczNw==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557671737", "bodyText": "[EDIT] @mhajas has convinced me that this is not a straightforward cleanup because of requirements it has on handling e.g. imported users and those from the original storage. Let's keep this in a separate task\n\nSo let's create a jira for that and leave it as it is.", "author": "vramik", "createdAt": "2021-01-14T20:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM5MTM4Nw==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r559391387", "bodyText": "Here is Jira: https://issues.redhat.com/browse/KEYCLOAK-16816", "author": "mhajas", "createdAt": "2021-01-18T08:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM5NjA1Ng==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r559396056", "bodyText": "Thank you", "author": "vramik", "createdAt": "2021-01-18T08:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNTcyOA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555415728", "bodyText": "nit: forgotten white characters", "author": "vramik", "createdAt": "2021-01-12T00:00:13Z", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "diffHunk": "@@ -145,88 +148,59 @@ public int getUsersCount(RealmModel realm) {\n     }\n \n     @Override\n-    public List<UserModel> getUsers(RealmModel realm) {\n-        List<UserModel> users = new LinkedList<>();\n-        for (Object username : userPasswords.keySet()) {\n-            users.add(createUser(realm, (String)username));\n-        }\n-        return users;\n-    }\n-\n-    @Override\n-    public List<UserModel> searchForUser(Map<String, String> attributes, RealmModel realm) {\n-        return searchForUser(attributes, realm, 0, Integer.MAX_VALUE - 1);\n+    public Stream<UserModel> getUsersStream(RealmModel realm) {\n+        return userPasswords.keySet().stream()\n+                .map(username -> createUser(realm, (String) username));\n     }\n-\n+    ", "originalCommit": "03f75bb48866214af2a364d1d8c3420e77817014", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de4ed2a82ec206a083df5c409336170f2920093a", "chunk": "diff --git a/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java\nindex 9f6b88f939..77bb47e3a8 100644\n--- a/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java\n+++ b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java\n\n@@ -152,7 +152,7 @@ public class UserPropertyFileStorage implements UserLookupProvider.Streams, User\n         return userPasswords.keySet().stream()\n                 .map(username -> createUser(realm, (String) username));\n     }\n-    \n+\n     @Override\n     public Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n         if (maxResults == 0) return Stream.empty();\n"}}, {"oid": "de4ed2a82ec206a083df5c409336170f2920093a", "url": "https://github.com/keycloak/keycloak/commit/de4ed2a82ec206a083df5c409336170f2920093a", "message": "KEYCLOAK-15524 Addressing comments from Vlasta", "committedDate": "2021-01-12T19:01:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzNzU0NQ==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r556037545", "bodyText": "Don't we need to ensure that maxResult is not null?", "author": "vramik", "createdAt": "2021-01-12T19:47:35Z", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "diffHunk": "@@ -145,88 +148,59 @@ public int getUsersCount(RealmModel realm) {\n     }\n \n     @Override\n-    public List<UserModel> getUsers(RealmModel realm) {\n-        List<UserModel> users = new LinkedList<>();\n-        for (Object username : userPasswords.keySet()) {\n-            users.add(createUser(realm, (String)username));\n-        }\n-        return users;\n-    }\n-\n-    @Override\n-    public List<UserModel> searchForUser(Map<String, String> attributes, RealmModel realm) {\n-        return searchForUser(attributes, realm, 0, Integer.MAX_VALUE - 1);\n+    public Stream<UserModel> getUsersStream(RealmModel realm) {\n+        return userPasswords.keySet().stream()\n+                .map(username -> createUser(realm, (String) username));\n     }\n \n     @Override\n-    public List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults) {\n-        if (maxResults == 0) return Collections.EMPTY_LIST;\n-        List<UserModel> users = new LinkedList<>();\n-        int count = 0;\n-        for (Object un : userPasswords.keySet()) {\n-            if (count++ < firstResult) continue;\n-            String username = (String)un;\n-            users.add(createUser(realm, username));\n-            if (users.size() + 1 > maxResults) break;\n-        }\n-        return users;\n+    public Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n+        if (maxResults == 0) return Stream.empty();", "originalCommit": "de4ed2a82ec206a083df5c409336170f2920093a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fc9059d5c2929b0324aee76f8482600cfaa9953", "chunk": "diff --git a/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java\nindex 77bb47e3a8..5e14a36822 100644\n--- a/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java\n+++ b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java\n\n@@ -155,7 +155,7 @@ public class UserPropertyFileStorage implements UserLookupProvider.Streams, User\n \n     @Override\n     public Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n-        if (maxResults == 0) return Stream.empty();\n+        if (maxResults != null && maxResults == 0) return Stream.empty();\n         return paginatedStream(userPasswords.keySet().stream(), firstResult, maxResults)\n                 .map(username -> createUser(realm, (String) username));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI3NzgwNA==", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557277804", "bodyText": "This note needs elaborating\nThe paragraphs need to be separated by <p>", "author": "hmlnarik", "createdAt": "2021-01-14T10:04:02Z", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -29,9 +29,17 @@\n import java.util.stream.Stream;\n \n /**\n- * Optional capability interface implemented by UserStorageProviders.\n  * Defines complex queries that are used to locate one or more users.  You must implement this interface\n- * if you want to view and manager users from the administration console.\n+ * if you want to view and manage users from the administration console.\n+ *\n+ * Optional capability interface implemented by UserStorageProviders.", "originalCommit": "623eb2f925816a0bfb14431974403170702cec08", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fc9059d5c2929b0324aee76f8482600cfaa9953", "chunk": "diff --git a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\nindex 9d8de17074..b7b18ffbc8 100644\n--- a/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n+++ b/server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java\n\n@@ -31,9 +31,9 @@ import java.util.stream.Stream;\n /**\n  * Defines complex queries that are used to locate one or more users.  You must implement this interface\n  * if you want to view and manage users from the administration console.\n- *\n+ * <p/>\n  * Optional capability interface implemented by UserStorageProviders.\n- *\n+ * <p/>\n  * Note that no method in this interface should consider user properties (e.g. groups, attributes, etc.) stored in the\n  * {@link org.keycloak.storage.federated.UserFederatedStorageProvider UserFederatedStorageProvider} storage. All search\n  * methods should consider only properties stored within the storage that is represented by this provider. Searching for\n"}}, {"oid": "6fc9059d5c2929b0324aee76f8482600cfaa9953", "url": "https://github.com/keycloak/keycloak/commit/6fc9059d5c2929b0324aee76f8482600cfaa9953", "message": "KEYCLOAK-15524 Add <p/> to javadoc to split sections", "committedDate": "2021-01-14T11:14:50Z", "type": "forcePushed"}, {"oid": "9b7b00c4514243f97bcebe7f4b1d592c6c2f3fef", "url": "https://github.com/keycloak/keycloak/commit/9b7b00c4514243f97bcebe7f4b1d592c6c2f3fef", "message": "KEYCLOAK-15524 Properly explain capability interfaces in javadoc", "committedDate": "2021-01-15T08:38:38Z", "type": "forcePushed"}, {"oid": "f192c8dedf48f78606ed549d6290b06b037bc1eb", "url": "https://github.com/keycloak/keycloak/commit/f192c8dedf48f78606ed549d6290b06b037bc1eb", "message": "KEYCLOAK-15524 Cleanup user related interfaces", "committedDate": "2021-01-18T10:17:53Z", "type": "forcePushed"}, {"oid": "770aa6f39fb0fcb694062e2bcfbdcb737519a6da", "url": "https://github.com/keycloak/keycloak/commit/770aa6f39fb0fcb694062e2bcfbdcb737519a6da", "message": "KEYCLOAK-15524 Cleanup user related interfaces", "committedDate": "2021-01-18T14:04:53Z", "type": "commit"}, {"oid": "770aa6f39fb0fcb694062e2bcfbdcb737519a6da", "url": "https://github.com/keycloak/keycloak/commit/770aa6f39fb0fcb694062e2bcfbdcb737519a6da", "message": "KEYCLOAK-15524 Cleanup user related interfaces", "committedDate": "2021-01-18T14:04:53Z", "type": "forcePushed"}]}