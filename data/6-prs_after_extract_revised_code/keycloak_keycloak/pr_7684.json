{"pr_number": 7684, "pr_title": "KEYCLOAK-16584 KEYCLOAK-16118 Align map storage to no downtime master", "pr_createdAt": "2020-12-17T12:27:29Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7684", "timeline": [{"oid": "a5963cd0e08b0c4ecb44f4eed7f26f6dc427493f", "url": "https://github.com/keycloak/keycloak/commit/a5963cd0e08b0c4ecb44f4eed7f26f6dc427493f", "message": "KEYCLOAK-16584 Add role store predicates", "committedDate": "2020-12-22T09:01:01Z", "type": "forcePushed"}, {"oid": "cec043c0b7575dff86ae6b5401708f34aa1cd8ba", "url": "https://github.com/keycloak/keycloak/commit/cec043c0b7575dff86ae6b5401708f34aa1cd8ba", "message": "KEYCLOAK-16584 Group storage", "committedDate": "2021-01-03T22:16:57Z", "type": "forcePushed"}, {"oid": "75a6ec60999d24aeb87c7fff836dff4f5fab85dd", "url": "https://github.com/keycloak/keycloak/commit/75a6ec60999d24aeb87c7fff836dff4f5fab85dd", "message": "KEYCLOAK-16584 Group storage", "committedDate": "2021-01-04T20:59:38Z", "type": "forcePushed"}, {"oid": "568ebd17d6f64823d3be9a6e15d1e8fffc5533be", "url": "https://github.com/keycloak/keycloak/commit/568ebd17d6f64823d3be9a6e15d1e8fffc5533be", "message": "KEYCLOAK-16584 User storage (without attributes)", "committedDate": "2021-01-06T08:19:00Z", "type": "forcePushed"}, {"oid": "6d333209ee5c6fb70645f9ad7ddae073bf107248", "url": "https://github.com/keycloak/keycloak/commit/6d333209ee5c6fb70645f9ad7ddae073bf107248", "message": "KEYCLOAK-16584 User storage (without attributes)", "committedDate": "2021-01-06T08:54:57Z", "type": "forcePushed"}, {"oid": "df1ad35a4fc197c9d688c9bc184ca63de40cb75e", "url": "https://github.com/keycloak/keycloak/commit/df1ad35a4fc197c9d688c9bc184ca63de40cb75e", "message": "KEYCLOAK-16584 User storage (without attributes)", "committedDate": "2021-01-07T22:10:41Z", "type": "forcePushed"}, {"oid": "092d7ee883be0f2f950ab7bcd0e756ec472525a5", "url": "https://github.com/keycloak/keycloak/commit/092d7ee883be0f2f950ab7bcd0e756ec472525a5", "message": "KEYCLOAK-16584 User storage", "committedDate": "2021-01-08T22:13:15Z", "type": "forcePushed"}, {"oid": "fcdbf44eb36801c0b732f2381ec5593b6c680d58", "url": "https://github.com/keycloak/keycloak/commit/fcdbf44eb36801c0b732f2381ec5593b6c680d58", "message": "KEYCLOAK-16118 Replace MapStorage.entrySet() with search by criteria\n\n* Add model class parameter to MapStorage\n* Add shortcut read(id) method to MapKeycloakTransaction", "committedDate": "2021-01-09T20:10:46Z", "type": "forcePushed"}, {"oid": "d23ddf931e461e57960bedda87d7961f8bc9e94d", "url": "https://github.com/keycloak/keycloak/commit/d23ddf931e461e57960bedda87d7961f8bc9e94d", "message": "KEYCLOAK-16118 Replace MapStorage.entrySet() with search by criteria\n\n* Add model class parameter to MapStorage\n* Add shortcut read(id) method to MapKeycloakTransaction", "committedDate": "2021-01-09T20:11:39Z", "type": "forcePushed"}, {"oid": "28741f6000ac763dcd47112ba656bae2829b0d8a", "url": "https://github.com/keycloak/keycloak/commit/28741f6000ac763dcd47112ba656bae2829b0d8a", "message": "KEYCLOAK-16118 Replace MapStorage.entrySet() with search by criteria\n\n* Add model class parameter to MapStorage\n* Add shortcut read(id) method to MapKeycloakTransaction", "committedDate": "2021-01-09T21:19:10Z", "type": "forcePushed"}, {"oid": "7ef0fa4cd5fdb267ee23cc6c8cd06df8f2fa6325", "url": "https://github.com/keycloak/keycloak/commit/7ef0fa4cd5fdb267ee23cc6c8cd06df8f2fa6325", "message": "KEYCLOAK-16118 Replace MapStorage.entrySet() with search by criteria\n\n* Add model class parameter to MapStorage\n* Add shortcut read(id) method to MapKeycloakTransaction", "committedDate": "2021-01-09T21:22:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyOTk5OA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r556429998", "bodyText": "Will there remain both KEYCLOAK-16584 and KEYCLOAK-16118 commits?\nIt seems to me (and I might be wrong :) ) ModelCriteriaBuilder should rather belong to KEYCLOAK-16118 commit than to this one. But it'd mean to move all related code there so I'm not sure if it's worth it, wdyt?", "author": "vramik", "createdAt": "2021-01-13T10:50:43Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.models.map.storage;\n+\n+import org.keycloak.storage.SearchableModelField;\n+\n+/**\n+ * Builder for criteria that can be used to limit results obtained from the store.\n+ * This class is used for similar purpose as e.g. JPA's {@code CriteriaBuilder},\n+ * however it is much simpler version as it is tailored to very specific needs\n+ * of future Keycloak store.\n+ * <p>\n+ * Implementations are expected to be immutable. The expected use is like this:\n+ * <pre>\n+ * cb = storage.getCriteriaBuilder();\n+ * storage.read(\n+ *   cb.or(\n+ *     cb.compare(FIELD1, EQ, 1).compare(FIELD2, EQ, 2),\n+ *     cb.compare(FIELD1, EQ, 3).compare(FIELD2, EQ, 4)\n+ *   )\n+ * );\n+ * </pre>\n+ * The above code should read items where\n+ * {@code (FIELD1 == 1 && FIELD2 == 2) || (FIELD1 == 3 && FIELD2 == 4)}.\n+ *\n+ * <p>\n+ * It is equivalent to this:\n+ * <pre>\n+ * cb = storage.getCriteriaBuilder();\n+ * storage.read(\n+ *   cb.or(\n+ *     cb.and(cb.compare(FIELD1, EQ, 1), cb.compare(FIELD2, EQ, 2)),\n+ *     cb.and(cb.compare(FIELD1, EQ, 3), cb.compare(FIELD2, EQ, 4))\n+ *   )\n+ * );\n+ * </pre>\n+ *\n+ * @author hmlnarik\n+ */\n+public interface ModelCriteriaBuilder {", "originalCommit": "d9764901d76cc2688c1372453ba0f9928da04d9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE3NjkxMA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r558176910", "bodyText": "This is exactly the concern, the boundary is blurred here. I'd prefer to keep it as is right now.", "author": "hmlnarik", "createdAt": "2021-01-15T10:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyOTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "6ac090e1714263c809aac673b4efca49678ac6c5", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java b/model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java\nindex 302b5f0119..7229a69597 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n  * and other contributors as indicated by the @author tags.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzMDM3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r556430379", "bodyText": "Do we need to update the year to 2021?\nIf so, there are other newly created classes or interfaces.", "author": "vramik", "createdAt": "2021-01-13T10:51:26Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates", "originalCommit": "d9764901d76cc2688c1372453ba0f9928da04d9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ac090e1714263c809aac673b4efca49678ac6c5", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java b/model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java\nindex 302b5f0119..7229a69597 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/storage/ModelCriteriaBuilder.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n  * and other contributors as indicated by the @author tags.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzMjY4NA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r556432684", "bodyText": "Really minor question. Do we need to add also @throws NullPointerException clause in case key is null? I've just noticed the clause is there for create, but not here, so I was wondering if it should't be \"unified\".", "author": "vramik", "createdAt": "2021-01-13T10:54:55Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/MapStorage.java", "diffHunk": "@@ -18,21 +18,68 @@\n \n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Stream;\n \n /**\n  *\n  * @author hmlnarik\n  */\n public interface MapStorage<K, V> {\n \n-    V get(K key);\n+    /**\n+     * Creates an object in the store identified by given {@code key}.\n+     * @param key Key of the object as seen in the logical level\n+     * @param value Entity\n+     * @return Reference to the entity created in the store\n+     * @throws NullPointerException if object or its {@code id} is {@code null}\n+     */\n+    V create(K key, V value);\n \n-    V put(K key, V value);\n+    /**\n+     * Returns object with the given {@code key} from the storage or {@code null} if object does not exist.\n+     * @param key Must not be {@code null}.\n+     * @return See description\n+     */\n+    V read(K key);", "originalCommit": "d9764901d76cc2688c1372453ba0f9928da04d9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ5NjI3NQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r559496275", "bodyText": "Yes. Since it this note is there though, I believe there was a race condition between some of my commits and the review", "author": "hmlnarik", "createdAt": "2021-01-18T11:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzMjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc2NDUyMg==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r559764522", "bodyText": "yup, it seems so, thank you", "author": "vramik", "createdAt": "2021-01-18T19:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzMjY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "6ac090e1714263c809aac673b4efca49678ac6c5", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/MapStorage.java b/model/map/src/main/java/org/keycloak/models/map/storage/MapStorage.java\nindex f09d74a163..879e223ef7 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/MapStorage.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/storage/MapStorage.java\n\n@@ -16,29 +16,41 @@\n  */\n package org.keycloak.models.map.storage;\n \n-import java.util.Map;\n-import java.util.Set;\n+import org.keycloak.models.map.common.AbstractEntity;\n import java.util.stream.Stream;\n \n /**\n+ * Implementation of this interface interacts with a persistence storage storing various entities, e.g. users, realms.\n+ * It contains basic object CRUD operations as well as bulk {@link #read(org.keycloak.models.map.storage.ModelCriteriaBuilder)}\n+ * and bulk {@link #delete(org.keycloak.models.map.storage.ModelCriteriaBuilder)} operations, \n+ * and operation for determining the number of the objects satisfying given criteria\n+ * ({@link #getCount(org.keycloak.models.map.storage.ModelCriteriaBuilder)}).\n  *\n  * @author hmlnarik\n+ * @param <K> Type of the primary key. Various storages can\n+ * @param <V> Type of the stored values that contains all the data stripped of session state. In other words, in the entities\n+ *            there are only IDs and mostly primitive types / {@code String}, never references to {@code *Model} instances.\n+ *            See the {@code Abstract*Entity} classes in this module.\n+ * @param <M> Type of the {@code *Model} corresponding to the stored value, e.g. {@code UserModel}. This is used for\n+ *            filtering via model fields in {@link ModelCriteriaBuilder} which is necessary to abstract from physical\n+ *            layout and thus to support no-downtime upgrade.\n  */\n-public interface MapStorage<K, V> {\n+public interface MapStorage<K, V extends AbstractEntity<K>, M> {\n \n     /**\n      * Creates an object in the store identified by given {@code key}.\n      * @param key Key of the object as seen in the logical level\n      * @param value Entity\n      * @return Reference to the entity created in the store\n-     * @throws NullPointerException if object or its {@code id} is {@code null}\n+     * @throws NullPointerException if object or its {@code key} is {@code null}\n      */\n     V create(K key, V value);\n \n     /**\n      * Returns object with the given {@code key} from the storage or {@code null} if object does not exist.\n-     * @param key Must not be {@code null}.\n+     * @param key Key of the object. Must not be {@code null}.\n      * @return See description\n+     * @throws NullPointerException if the {@code key} is {@code null}\n      */\n     V read(K key);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0ODc0Nw==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r557348747", "bodyText": "It might be beneficial to add a javadoc for this method here as it's not overridden from MapStorage so when using it in the code there is no java-doc info what the method actually does, so it has to be seen from the code itself, while other methods has their description from MapStorage interface, wdyt?\nTo be honest I'm not sure why this particular method is not included in the interface. Maybe we could add it there?", "author": "vramik", "createdAt": "2021-01-14T12:07:54Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/chm/ConcurrentHashMapStorage.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.models.map.storage.chm;\n+\n+import org.keycloak.models.map.storage.MapModelCriteriaBuilder;\n+import org.keycloak.models.map.common.AbstractEntity;\n+import org.keycloak.models.map.storage.MapFieldPredicates;\n+import org.keycloak.models.map.storage.MapKeycloakTransaction;\n+import org.keycloak.models.map.storage.MapStorage;\n+import org.keycloak.models.map.storage.ModelCriteriaBuilder;\n+import org.keycloak.storage.SearchableModelField;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.Stream;\n+import org.keycloak.models.map.storage.MapModelCriteriaBuilder.UpdatePredicatesFunc;\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class ConcurrentHashMapStorage<K, V extends AbstractEntity<K>, M> implements MapStorage<K, V, M> {\n+\n+    private final ConcurrentMap<K, V> store = new ConcurrentHashMap<>();\n+\n+    private final Map<SearchableModelField<M>, UpdatePredicatesFunc<K, V, M>> fieldPredicates;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public ConcurrentHashMapStorage(Class<M> modelClass) {\n+        this.fieldPredicates = MapFieldPredicates.getPredicates(modelClass);\n+    }\n+\n+    @Override\n+    public V create(K key, V value) {\n+        return store.putIfAbsent(key, value);\n+    }\n+\n+    @Override\n+    public V read(K key) {\n+        Objects.requireNonNull(key, \"Key must be non-null\");\n+        return store.get(key);\n+    }\n+\n+    @Override\n+    public V update(K key, V value) {\n+        return store.replace(key, value);\n+    }\n+\n+    @Override\n+    public boolean delete(K key) {\n+        return store.remove(key) != null;\n+    }\n+\n+    @Override\n+    public long delete(ModelCriteriaBuilder<M> criteria) {\n+        long res;\n+        if (criteria == null) {\n+            res = store.size();\n+            store.clear();\n+            return res;\n+        }\n+\n+        MapModelCriteriaBuilder<K, V, M> b = criteria.unwrap(MapModelCriteriaBuilder.class);\n+        if (b == null) {\n+            throw new IllegalStateException(\"Incompatible class: \" + criteria.getClass());\n+        }\n+        Predicate<? super K> keyFilter = b.getKeyFilter();\n+        Predicate<? super V> entityFilter = b.getEntityFilter();\n+        res = 0;\n+        for (Iterator<Entry<K, V>> iterator = store.entrySet().iterator(); iterator.hasNext();) {\n+            Entry<K, V> next = iterator.next();\n+            if (keyFilter.test(next.getKey()) && entityFilter.test(next.getValue())) {\n+                res++;\n+                iterator.remove();\n+            }\n+        }\n+        return res;\n+    }\n+\n+    @Override\n+    public ModelCriteriaBuilder<M> createCriteriaBuilder() {\n+        return new MapModelCriteriaBuilder<>(fieldPredicates);\n+    }\n+\n+    @Override\n+    public MapKeycloakTransaction<K, V, M> createTransaction() {\n+        return new MapKeycloakTransaction<>(this);\n+    }\n+\n+\n+    @Override\n+    public Stream<V> read(ModelCriteriaBuilder<M> criteria) {\n+        if (criteria == null) {\n+            return Stream.empty();\n+        }\n+        Stream<Entry<K, V>> stream = store.entrySet().stream();\n+\n+        MapModelCriteriaBuilder<K, V, M> b = criteria.unwrap(MapModelCriteriaBuilder.class);\n+        if (b == null) {\n+            throw new IllegalStateException(\"Incompatible class: \" + criteria.getClass());\n+        }\n+        Predicate<? super K> keyFilter = b.getKeyFilter();\n+        Predicate<? super V> entityFilter = b.getEntityFilter();\n+        stream = stream.filter(me -> keyFilter.test(me.getKey()) && entityFilter.test(me.getValue()));\n+\n+        return stream.map(Map.Entry::getValue);\n+    }\n+\n+    public Stream<V> read() {", "originalCommit": "7ef0fa4cd5fdb267ee23cc6c8cd06df8f2fa6325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUwMDE1Nw==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r559500157", "bodyText": "Good catch. This method should have been removed.\nReason for not including it in the interface is to remove easy way to read full database which is not desirable anywhere apart from test and development where it can be achieved via the existing read(ModelCriteriaBuilder) method.", "author": "hmlnarik", "createdAt": "2021-01-18T11:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0ODc0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6ac090e1714263c809aac673b4efca49678ac6c5", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/chm/ConcurrentHashMapStorage.java b/model/map/src/main/java/org/keycloak/models/map/storage/chm/ConcurrentHashMapStorage.java\nindex 2d1d682759..50746ab40c 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/chm/ConcurrentHashMapStorage.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/storage/chm/ConcurrentHashMapStorage.java\n\n@@ -124,10 +124,6 @@ public class ConcurrentHashMapStorage<K, V extends AbstractEntity<K>, M> impleme\n         return stream.map(Map.Entry::getValue);\n     }\n \n-    public Stream<V> read() {\n-        return store.values().stream();\n-    }\n-\n     @Override\n     public long getCount(ModelCriteriaBuilder<M> criteria) {\n         return read(criteria).count();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1NTg2OA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r557355868", "bodyText": "I miss the reason to have this parameters here as it seems to me those are not accessible via any methods. But maybe I'm overlooking something.", "author": "vramik", "createdAt": "2021-01-14T12:21:14Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupported.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.models.map.storage;\n+\n+import org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator;\n+import org.keycloak.storage.SearchableModelField;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class CriterionNotSupported extends RuntimeException {\n+    private final SearchableModelField field;\n+    private final Operator op;", "originalCommit": "7ef0fa4cd5fdb267ee23cc6c8cd06df8f2fa6325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUwMDQzOQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r559500439", "bodyText": ":) Me as well.", "author": "hmlnarik", "createdAt": "2021-01-18T11:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1NTg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "6ac090e1714263c809aac673b4efca49678ac6c5", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupported.java b/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java\nsimilarity index 68%\nrename from model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupported.java\nrename to model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java\nindex d177b9a825..cc3d5816e9 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupported.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n  * and other contributors as indicated by the @author tags.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQzODU4Ng==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r557438586", "bodyText": "Just a question, I've always seen classes which extends Exception or a subclass named with suffix \"Exception\". I'm not sure if it's a convention or a habit. Anyway I wanted to hear your opinion.", "author": "vramik", "createdAt": "2021-01-14T14:34:43Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupported.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.models.map.storage;\n+\n+import org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator;\n+import org.keycloak.storage.SearchableModelField;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class CriterionNotSupported extends RuntimeException {", "originalCommit": "7ef0fa4cd5fdb267ee23cc6c8cd06df8f2fa6325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUwMDU0OA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r559500548", "bodyText": "Good catch!", "author": "hmlnarik", "createdAt": "2021-01-18T11:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQzODU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6ac090e1714263c809aac673b4efca49678ac6c5", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupported.java b/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java\nsimilarity index 68%\nrename from model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupported.java\nrename to model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java\nindex d177b9a825..cc3d5816e9 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupported.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n  * and other contributors as indicated by the @author tags.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1NTk5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r557455991", "bodyText": "Can you please explain the benefit using anonymous inner class here for me?", "author": "vramik", "createdAt": "2021-01-14T14:57:43Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.models.map.storage;\n+\n+import org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumMap;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+class CriteriaOperator {\n+\n+    private static final EnumMap<Operator, Function<Object[], Predicate<Object>>> OPERATORS = new EnumMap<>(Operator.class);\n+\n+    private static final Logger LOG = Logger.getLogger(CriteriaOperator.class.getSimpleName());\n+\n+    private static final Predicate<Object> ALWAYS_FALSE = o -> false;\n+\n+    static {\n+        OPERATORS.put(Operator.EQ, CriteriaOperator::eq);\n+        OPERATORS.put(Operator.NE, CriteriaOperator::ne);\n+        OPERATORS.put(Operator.EXISTS, CriteriaOperator::exists);\n+        OPERATORS.put(Operator.NOT_EXISTS, CriteriaOperator::notExists);\n+        OPERATORS.put(Operator.LT, CriteriaOperator::lt);\n+        OPERATORS.put(Operator.LE, CriteriaOperator::le);\n+        OPERATORS.put(Operator.GT, CriteriaOperator::gt);\n+        OPERATORS.put(Operator.GE, CriteriaOperator::ge);\n+        OPERATORS.put(Operator.IN, CriteriaOperator::in);\n+        OPERATORS.put(Operator.LIKE, CriteriaOperator::like);\n+        OPERATORS.put(Operator.ILIKE, CriteriaOperator::ilike);\n+\n+        // Check that all operators are covered\n+        EnumSet<Operator> s = EnumSet.allOf(Operator.class);\n+        s.removeAll(OPERATORS.keySet());\n+        if (! s.isEmpty()) {\n+            throw new IllegalStateException(\"Some operators are not implemented: \" + s);\n+        }\n+    }\n+\n+    /**\n+     * Returns a predicate {@code P(x)} for comparing {@code value} and {@code x} as {@code x OP value}.\n+     * <b>Implementation note:</b> Note that this may mean reverse logic to e.g. {@link Comparable#compareTo}.\n+     * @param operator\n+     * @param value\n+     * @return\n+     */\n+    public static Predicate<Object> predicateFor(Operator op, Object[] value) {\n+        final Function<Object[], Predicate<Object>> funcToGetPredicate = OPERATORS.get(op);\n+        if (funcToGetPredicate == null) {\n+            throw new IllegalArgumentException(\"Unknown operator: \" + op);\n+        }\n+        return funcToGetPredicate.apply(value);\n+    }\n+\n+    public static Predicate<Object> eq(Object[] value) {\n+        if (value == null || value.length != 1) {\n+            throw new IllegalStateException(\"Invalid argument: \" + Arrays.toString(value));\n+        }\n+        final Object value0 = value[0];\n+        return new Predicate<Object>() {", "originalCommit": "7ef0fa4cd5fdb267ee23cc6c8cd06df8f2fa6325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUwNzE2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r559507165", "bodyText": "None in particular, could be lambda as well.", "author": "hmlnarik", "createdAt": "2021-01-18T11:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1NTk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ac090e1714263c809aac673b4efca49678ac6c5", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java b/model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java\nindex d52f8f1d71..86d4bcdab2 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n  * and other contributors as indicated by the @author tags.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MjgzMg==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r557462832", "bodyText": "nit: this check could be potentially moved to private method as it's used multiple times within this class, but I'm really ok with the way how it's now.", "author": "vramik", "createdAt": "2021-01-14T15:06:16Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.models.map.storage;\n+\n+import org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumMap;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+class CriteriaOperator {\n+\n+    private static final EnumMap<Operator, Function<Object[], Predicate<Object>>> OPERATORS = new EnumMap<>(Operator.class);\n+\n+    private static final Logger LOG = Logger.getLogger(CriteriaOperator.class.getSimpleName());\n+\n+    private static final Predicate<Object> ALWAYS_FALSE = o -> false;\n+\n+    static {\n+        OPERATORS.put(Operator.EQ, CriteriaOperator::eq);\n+        OPERATORS.put(Operator.NE, CriteriaOperator::ne);\n+        OPERATORS.put(Operator.EXISTS, CriteriaOperator::exists);\n+        OPERATORS.put(Operator.NOT_EXISTS, CriteriaOperator::notExists);\n+        OPERATORS.put(Operator.LT, CriteriaOperator::lt);\n+        OPERATORS.put(Operator.LE, CriteriaOperator::le);\n+        OPERATORS.put(Operator.GT, CriteriaOperator::gt);\n+        OPERATORS.put(Operator.GE, CriteriaOperator::ge);\n+        OPERATORS.put(Operator.IN, CriteriaOperator::in);\n+        OPERATORS.put(Operator.LIKE, CriteriaOperator::like);\n+        OPERATORS.put(Operator.ILIKE, CriteriaOperator::ilike);\n+\n+        // Check that all operators are covered\n+        EnumSet<Operator> s = EnumSet.allOf(Operator.class);\n+        s.removeAll(OPERATORS.keySet());\n+        if (! s.isEmpty()) {\n+            throw new IllegalStateException(\"Some operators are not implemented: \" + s);\n+        }\n+    }\n+\n+    /**\n+     * Returns a predicate {@code P(x)} for comparing {@code value} and {@code x} as {@code x OP value}.\n+     * <b>Implementation note:</b> Note that this may mean reverse logic to e.g. {@link Comparable#compareTo}.\n+     * @param operator\n+     * @param value\n+     * @return\n+     */\n+    public static Predicate<Object> predicateFor(Operator op, Object[] value) {\n+        final Function<Object[], Predicate<Object>> funcToGetPredicate = OPERATORS.get(op);\n+        if (funcToGetPredicate == null) {\n+            throw new IllegalArgumentException(\"Unknown operator: \" + op);\n+        }\n+        return funcToGetPredicate.apply(value);\n+    }\n+\n+    public static Predicate<Object> eq(Object[] value) {\n+        if (value == null || value.length != 1) {", "originalCommit": "7ef0fa4cd5fdb267ee23cc6c8cd06df8f2fa6325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUxMTAwNQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r559511005", "bodyText": "You're right, fixed", "author": "hmlnarik", "createdAt": "2021-01-18T11:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MjgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "6ac090e1714263c809aac673b4efca49678ac6c5", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java b/model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java\nindex d52f8f1d71..86d4bcdab2 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/storage/CriteriaOperator.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n  * and other contributors as indicated by the @author tags.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n"}}, {"oid": "6ac090e1714263c809aac673b4efca49678ac6c5", "url": "https://github.com/keycloak/keycloak/commit/6ac090e1714263c809aac673b4efca49678ac6c5", "message": "KEYCLOAK-16118 Replace MapStorage.entrySet() with search by criteria\n\n* Add model class parameter to MapStorage\n* Add shortcut read(id) method to MapKeycloakTransaction", "committedDate": "2021-01-18T11:47:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc2MzQ1Mw==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r559763453", "bodyText": "Now the parameters are accessible, but the methods are not used anywhere. Do you plan to have a use for them?", "author": "vramik", "createdAt": "2021-01-18T19:33:13Z", "path": "model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.models.map.storage;\n+\n+import org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator;\n+import org.keycloak.storage.SearchableModelField;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class CriterionNotSupportedException extends RuntimeException {\n+    private final SearchableModelField field;\n+    private final Operator op;\n+\n+    public CriterionNotSupportedException(SearchableModelField field, Operator op) {\n+        super(\"Criterion not supported: operator: \" + op + \", field: \" + field);\n+        this.field = field;\n+        this.op = op;\n+    }\n+\n+    public CriterionNotSupportedException(SearchableModelField field, Operator op, String message) {\n+        super(message);\n+        this.field = field;\n+        this.op = op;\n+    }\n+\n+    public CriterionNotSupportedException(SearchableModelField field, Operator op, String message, Throwable cause) {\n+        super(message, cause);\n+        this.field = field;\n+        this.op = op;\n+    }\n+\n+    public SearchableModelField getField() {", "originalCommit": "6ac090e1714263c809aac673b4efca49678ac6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE0NzY5Nw==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560147697", "bodyText": "They will likely be used in an exception converter", "author": "hmlnarik", "createdAt": "2021-01-19T12:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc2MzQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9110f097a8c1e79fa0aa99b70658e5ce582e1642", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java b/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java\ndeleted file mode 100644\nindex cc3d5816e9..0000000000\n--- a/model/map/src/main/java/org/keycloak/models/map/storage/CriterionNotSupportedException.java\n+++ /dev/null\n\n@@ -1,55 +0,0 @@\n-/*\n- * Copyright 2021 Red Hat, Inc. and/or its affiliates\n- * and other contributors as indicated by the @author tags.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- * http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.keycloak.models.map.storage;\n-\n-import org.keycloak.models.map.storage.ModelCriteriaBuilder.Operator;\n-import org.keycloak.storage.SearchableModelField;\n-\n-/**\n- *\n- * @author hmlnarik\n- */\n-public class CriterionNotSupportedException extends RuntimeException {\n-    private final SearchableModelField field;\n-    private final Operator op;\n-\n-    public CriterionNotSupportedException(SearchableModelField field, Operator op) {\n-        super(\"Criterion not supported: operator: \" + op + \", field: \" + field);\n-        this.field = field;\n-        this.op = op;\n-    }\n-\n-    public CriterionNotSupportedException(SearchableModelField field, Operator op, String message) {\n-        super(message);\n-        this.field = field;\n-        this.op = op;\n-    }\n-\n-    public CriterionNotSupportedException(SearchableModelField field, Operator op, String message, Throwable cause) {\n-        super(message, cause);\n-        this.field = field;\n-        this.op = op;\n-    }\n-\n-    public SearchableModelField getField() {\n-        return field;\n-    }\n-\n-    public Operator getOp() {\n-        return op;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAzMzQzNQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560033435", "bodyText": "Previously, realm was checked for null value, should we check it here as well?", "author": "mhajas", "createdAt": "2021-01-19T09:30:59Z", "path": "model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java", "diffHunk": "@@ -87,43 +81,47 @@ public GroupModel getGroupById(RealmModel realm, String id) {\n             return null;\n         }\n         \n-        MapGroupEntity entity = tx.get(uid, groupStore::get);\n-        return (entity == null || ! entityRealmFilter(realm).test(entity))\n+        MapGroupEntity entity = tx.read(uid);\n+        String realmId = realm.getId();\n+        return (entity == null || ! Objects.equals(realmId, entity.getRealmId()))\n                 ? null\n                 : entityToAdapterFunc(realm).apply(entity);\n     }\n \n-    private Stream<MapGroupEntity> getNotRemovedUpdatedGroupsStream() {\n-        Stream<MapGroupEntity> updatedAndNotRemovedGroupsStream = groupStore.entrySet().stream()\n-                .map(tx::getUpdated)    // If the group has been removed, tx.get will return null, otherwise it will return me.getValue()\n-                .filter(Objects::nonNull);\n-        return Stream.concat(tx.createdValuesStream(), updatedAndNotRemovedGroupsStream);\n-    }\n-\n-    private Stream<MapGroupEntity> getUnsortedGroupEntitiesStream(RealmModel realm) {\n-        return getNotRemovedUpdatedGroupsStream()\n-                .filter(entityRealmFilter(realm));\n-    }\n-\n     @Override\n     public Stream<GroupModel> getGroupsStream(RealmModel realm) {\n+        return getGroupsStreamInternal(realm, null);\n+    }\n+\n+    private Stream<GroupModel> getGroupsStreamInternal(RealmModel realm, UnaryOperator<ModelCriteriaBuilder<GroupModel>> modifier) {\n         LOG.tracef(\"getGroupsStream(%s)%s\", realm, getShortStackTrace());\n-        return getUnsortedGroupEntitiesStream(realm)\n+        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n+          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId());", "originalCommit": "6ac090e1714263c809aac673b4efca49678ac6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDIxNDg3NA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560214874", "bodyText": "This check is now performed in tx.getUpdatedNotRemoved() which is the only place where null may appear. The set of returned values that were not touched in this transaction should never be null (since it would not satisfy the mcb filter in the first place).", "author": "hmlnarik", "createdAt": "2021-01-19T14:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAzMzQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI4MzI5MA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560283290", "bodyText": "I mean realm.getId() will throw NPE when realm is null. However, I am not sure this makes sense to add now. We are not checking many other parameters. Maybe we should add it to cleanup task to either document that NPE may be thrown when null parameter is passed or do some checking everywhere.\nI just wanted to point it out as this is change of behaviour in this PR. Before there was no user/group/role returned as ALWAYS_FALSE filter was used when realm was null.", "author": "mhajas", "createdAt": "2021-01-19T15:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAzMzQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNTcxNA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r561035714", "bodyText": "I agree, this should have been there. Added https://issues.redhat.com/browse/KEYCLOAK-16872", "author": "hmlnarik", "createdAt": "2021-01-20T15:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAzMzQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9110f097a8c1e79fa0aa99b70658e5ce582e1642", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java b/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\nindex e7c3ae7a1a..5c2d163e6e 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\n\n@@ -81,28 +88,28 @@ public class MapGroupProvider implements GroupProvider {\n             return null;\n         }\n         \n-        MapGroupEntity entity = tx.read(uid);\n-        String realmId = realm.getId();\n-        return (entity == null || ! Objects.equals(realmId, entity.getRealmId()))\n+        MapGroupEntity entity = tx.read(uid, groupStore::read);\n+        return (entity == null || ! entityRealmFilter(realm).test(entity))\n                 ? null\n                 : entityToAdapterFunc(realm).apply(entity);\n     }\n \n-    @Override\n-    public Stream<GroupModel> getGroupsStream(RealmModel realm) {\n-        return getGroupsStreamInternal(realm, null);\n+    private Stream<MapGroupEntity> getNotRemovedUpdatedGroupsStream() {\n+        Stream<MapGroupEntity> updatedAndNotRemovedGroupsStream = groupStore.entrySet().stream()\n+                .map(tx::getUpdated)    // If the group has been removed, tx.get will return null, otherwise it will return me.getValue()\n+                .filter(Objects::nonNull);\n+        return Stream.concat(tx.createdValuesStream(), updatedAndNotRemovedGroupsStream);\n     }\n \n-    private Stream<GroupModel> getGroupsStreamInternal(RealmModel realm, UnaryOperator<ModelCriteriaBuilder<GroupModel>> modifier) {\n-        LOG.tracef(\"getGroupsStream(%s)%s\", realm, getShortStackTrace());\n-        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n-          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId());\n-\n-        if (modifier != null) {\n-            mcb = modifier.apply(mcb);\n-        }\n+    private Stream<MapGroupEntity> getUnsortedGroupEntitiesStream(RealmModel realm) {\n+        return getNotRemovedUpdatedGroupsStream()\n+                .filter(entityRealmFilter(realm));\n+    }\n \n-        return tx.getUpdatedNotRemoved(mcb)\n+    @Override\n+    public Stream<GroupModel> getGroupsStream(RealmModel realm) {\n+        LOG.tracef(\"getGroupsStream(%s)%s\", realm, getShortStackTrace());\n+        return getUnsortedGroupEntitiesStream(realm)\n                 .map(entityToAdapterFunc(realm))\n                 .sorted(GroupModel.COMPARE_BY_NAME)\n                 ;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA0MjE0Mw==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560042143", "bodyText": "Should this be done using tx.getCount() instead getUpdatedNotRemoved()? Currently it is the same, however for JPA it could be faster using count query.", "author": "mhajas", "createdAt": "2021-01-19T09:43:25Z", "path": "model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java", "diffHunk": "@@ -214,20 +221,25 @@ public GroupModel createGroup(RealmModel realm, String id, String name, GroupMod\n         final UUID entityId = id == null ? UUID.randomUUID() : UUID.fromString(id);\n \n         // Check Db constraint: uniqueConstraints = { @UniqueConstraint(columnNames = {\"REALM_ID\", \"PARENT_GROUP\", \"NAME\"})}\n-        if (getUnsortedGroupEntitiesStream(realm)\n-                .anyMatch(groupEntity -> \n-                        Objects.equals(groupEntity.getParentId(), toParent == null ? null : toParent.getId()) &&\n-                        Objects.equals(groupEntity.getName(), name))) {\n-            throw new ModelDuplicateException(\"Group with name '\" + name + \"' in realm \" + realm.getName() + \" already exists for requested parent\" );\n+        String parentId = toParent == null ? null : toParent.getId();\n+        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n+          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId())\n+          .compare(SearchableFields.PARENT_ID, Operator.EQ, parentId)\n+          .compare(SearchableFields.NAME, Operator.EQ, name);\n+\n+        try (Stream<MapGroupEntity> possibleSiblings = tx.getUpdatedNotRemoved(mcb)) {", "originalCommit": "6ac090e1714263c809aac673b4efca49678ac6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDIxOTYyNA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560219624", "bodyText": "good catch!", "author": "hmlnarik", "createdAt": "2021-01-19T14:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA0MjE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9110f097a8c1e79fa0aa99b70658e5ce582e1642", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java b/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\nindex e7c3ae7a1a..5c2d163e6e 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\n\n@@ -221,22 +184,17 @@ public class MapGroupProvider implements GroupProvider {\n         final UUID entityId = id == null ? UUID.randomUUID() : UUID.fromString(id);\n \n         // Check Db constraint: uniqueConstraints = { @UniqueConstraint(columnNames = {\"REALM_ID\", \"PARENT_GROUP\", \"NAME\"})}\n-        String parentId = toParent == null ? null : toParent.getId();\n-        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n-          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId())\n-          .compare(SearchableFields.PARENT_ID, Operator.EQ, parentId)\n-          .compare(SearchableFields.NAME, Operator.EQ, name);\n-\n-        try (Stream<MapGroupEntity> possibleSiblings = tx.getUpdatedNotRemoved(mcb)) {\n-            if (possibleSiblings.findAny().isPresent()) {\n-                throw new ModelDuplicateException(\"Group with name '\" + name + \"' in realm \" + realm.getName() + \" already exists for requested parent\" );\n-            }\n+        if (getUnsortedGroupEntitiesStream(realm)\n+                .anyMatch(groupEntity -> \n+                        Objects.equals(groupEntity.getParentId(), toParent == null ? null : toParent.getId()) &&\n+                        Objects.equals(groupEntity.getName(), name))) {\n+            throw new ModelDuplicateException(\"Group with name '\" + name + \"' in realm \" + realm.getName() + \" already exists for requested parent\" );\n         }\n \n         MapGroupEntity entity = new MapGroupEntity(entityId, realm.getId());\n         entity.setName(name);\n         entity.setParentId(toParent == null ? null : toParent.getId());\n-        if (tx.read(entity.getId()) != null) {\n+        if (tx.read(entity.getId(), groupStore::read) != null) {\n             throw new ModelDuplicateException(\"Group exists: \" + entityId);\n         }\n         tx.create(entity.getId(), entity);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA0NjA0MQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560046041", "bodyText": "Should we add limit and start support to mcb? Or some other way into transaction/storage? Because if I recall correctly, the stream's skip/max is not ideal for JPA.", "author": "mhajas", "createdAt": "2021-01-19T09:48:55Z", "path": "model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java", "diffHunk": "@@ -194,8 +200,9 @@ public Long getGroupsCountByNameContaining(RealmModel realm, String search) {\n     @Override\n     public Stream<GroupModel> searchForGroupByNameStream(RealmModel realm, String search, Integer firstResult, Integer maxResults) {\n         LOG.tracef(\"searchForGroupByNameStream(%s, %s, %d, %d)%s\", realm, search, firstResult, maxResults, getShortStackTrace());\n-        Stream<GroupModel> groupModelStream = getGroupsStream(realm)\n-                .filter(groupModel -> groupModel.getName().contains(search));\n+        Stream<GroupModel> groupModelStream = getGroupsStreamInternal(realm,\n+          (ModelCriteriaBuilder<GroupModel> mcb) -> mcb.compare(SearchableFields.NAME, Operator.ILIKE, \"%\" + search + \"%\")\n+        );\n \n         if (firstResult != null && firstResult > 0) {", "originalCommit": "6ac090e1714263c809aac673b4efca49678ac6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDIxMDYxNg==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560210616", "bodyText": "I believe this is a good idea, thought I'm not convinced that ModelCriteriaBuilder should be the place to put it, as ModelCriteriaBuilder can be nested to a Boolean expressions via and, or and not operations that don't play well. Looks like the MapStorage.read variant would be a better fit? I've introduced https://issues.redhat.com/browse/KEYCLOAK-16855 to have a discussion there", "author": "hmlnarik", "createdAt": "2021-01-19T14:22:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA0NjA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9110f097a8c1e79fa0aa99b70658e5ce582e1642", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java b/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\nindex e7c3ae7a1a..5c2d163e6e 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\n\n@@ -110,109 +117,65 @@ public class MapGroupProvider implements GroupProvider {\n \n     @Override\n     public Stream<GroupModel> getGroupsStream(RealmModel realm, Stream<String> ids, String search, Integer first, Integer max) {\n-        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n-          .compare(SearchableFields.ID, Operator.IN, ids.map(UUID::fromString))\n-          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId());\n+        Stream<GroupModel> groupModelStream = ids.map(id -> session.groups().getGroupById(realm, id))\n+                .sorted(Comparator.comparing(GroupModel::getName));\n \n         if (search != null) {\n-            mcb = mcb.compare(SearchableFields.NAME, Operator.ILIKE, \"%\" + search + \"%\");\n-        }\n-\n-        Stream<GroupModel> groupModelStream = tx.getUpdatedNotRemoved(mcb)\n-          .map(entityToAdapterFunc(realm))\n-          .sorted(Comparator.comparing(GroupModel::getName));\n-\n-        if (first != null && first > 0) {\n-            groupModelStream = groupModelStream.skip(first);\n+            String s = search.toLowerCase();\n+            groupModelStream = groupModelStream.filter(groupModel -> groupModel.getName().toLowerCase().contains(s));\n         }\n \n-        if (max != null && max >= 0) {\n-            groupModelStream = groupModelStream.limit(max);\n-        }\n-\n-        return groupModelStream;\n+        return paginatedStream(groupModelStream, first, max);\n     }\n \n     @Override\n     public Long getGroupsCount(RealmModel realm, Boolean onlyTopGroups) {\n         LOG.tracef(\"getGroupsCount(%s, %s)%s\", realm, onlyTopGroups, getShortStackTrace());\n-        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n-          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId());\n+        Stream<MapGroupEntity> groupModelStream = getUnsortedGroupEntitiesStream(realm);\n \n-        if (Objects.equals(onlyTopGroups, Boolean.TRUE)) {\n-            mcb = mcb.compare(SearchableFields.PARENT_ID, Operator.EQ, (Object) null);\n+        if (onlyTopGroups) {\n+            groupModelStream = groupModelStream.filter(groupEntity -> Objects.isNull(groupEntity.getParentId()));\n         }\n-\n-        return tx.getCount(mcb);\n+        \n+        return groupModelStream.count();\n     }\n \n     @Override\n     public Long getGroupsCountByNameContaining(RealmModel realm, String search) {\n-        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n-          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId())\n-          .compare(SearchableFields.NAME, Operator.ILIKE, \"%\" + search + \"%\");\n-\n-        return tx.getCount(mcb);\n+        return searchForGroupByNameStream(realm, search, null, null).count();\n     }\n \n     @Override\n     public Stream<GroupModel> getGroupsByRoleStream(RealmModel realm, RoleModel role, Integer firstResult, Integer maxResults) {\n         LOG.tracef(\"getGroupsByRole(%s, %s, %d, %d)%s\", realm, role, firstResult, maxResults, getShortStackTrace());\n-        Stream<GroupModel> groupModelStream = getGroupsStreamInternal(realm,\n-          (ModelCriteriaBuilder<GroupModel> mcb) -> mcb.compare(SearchableFields.ASSIGNED_ROLE, Operator.EQ, role.getId())\n-        );\n-\n-        if (firstResult != null && firstResult > 0) {\n-            groupModelStream = groupModelStream.skip(firstResult);\n-        }\n-        \n-        if (maxResults != null && maxResults >= 0) {\n-            groupModelStream = groupModelStream.limit(maxResults);\n-        }\n+        Stream<GroupModel> groupModelStream = getGroupsStream(realm).filter(groupModel -> groupModel.hasRole(role));\n \n-        return groupModelStream;\n+        return paginatedStream(groupModelStream, firstResult, maxResults);\n     }\n \n     @Override\n     public Stream<GroupModel> getTopLevelGroupsStream(RealmModel realm) {\n         LOG.tracef(\"getTopLevelGroupsStream(%s)%s\", realm, getShortStackTrace());\n-        return getGroupsStreamInternal(realm,\n-          (ModelCriteriaBuilder<GroupModel> mcb) -> mcb.compare(SearchableFields.PARENT_ID, Operator.EQ, (Object) null)\n-        );\n+        return getGroupsStream(realm)\n+                .filter(groupModel -> Objects.isNull(groupModel.getParentId()));\n     }\n \n     @Override\n     public Stream<GroupModel> getTopLevelGroupsStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n         Stream<GroupModel> groupModelStream = getTopLevelGroupsStream(realm);\n         \n-        if (firstResult != null && firstResult > 0) {\n-            groupModelStream = groupModelStream.skip(firstResult);\n-        }\n-        \n-        if (maxResults != null && maxResults >= 0) {\n-            groupModelStream = groupModelStream.limit(maxResults);\n-        }\n-        \n-        return groupModelStream;\n+        return paginatedStream(groupModelStream, firstResult, maxResults);\n         \n     }\n \n     @Override\n     public Stream<GroupModel> searchForGroupByNameStream(RealmModel realm, String search, Integer firstResult, Integer maxResults) {\n         LOG.tracef(\"searchForGroupByNameStream(%s, %s, %d, %d)%s\", realm, search, firstResult, maxResults, getShortStackTrace());\n-        Stream<GroupModel> groupModelStream = getGroupsStreamInternal(realm,\n-          (ModelCriteriaBuilder<GroupModel> mcb) -> mcb.compare(SearchableFields.NAME, Operator.ILIKE, \"%\" + search + \"%\")\n-        );\n+        Stream<GroupModel> groupModelStream = getGroupsStream(realm)\n+                .filter(groupModel -> groupModel.getName().contains(search));\n \n-        if (firstResult != null && firstResult > 0) {\n-            groupModelStream = groupModelStream.skip(firstResult);\n-        }\n-\n-        if (maxResults != null && maxResults >= 0) {\n-            groupModelStream = groupModelStream.limit(maxResults);\n-        }\n \n-        return groupModelStream;\n+        return paginatedStream(groupModelStream, firstResult, maxResults);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA1MDg3OA==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560050878", "bodyText": "This construct is quite often repeating in each provider. Should we create some auxiliary function for it? Or maybe even create a function like createCriteriaBuilder(RealmModel)? The corresponding SearchableFields field could be hardcoded withing storage since it is always the same for each storage.", "author": "mhajas", "createdAt": "2021-01-19T09:55:59Z", "path": "model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java", "diffHunk": "@@ -87,43 +81,47 @@ public GroupModel getGroupById(RealmModel realm, String id) {\n             return null;\n         }\n         \n-        MapGroupEntity entity = tx.get(uid, groupStore::get);\n-        return (entity == null || ! entityRealmFilter(realm).test(entity))\n+        MapGroupEntity entity = tx.read(uid);\n+        String realmId = realm.getId();\n+        return (entity == null || ! Objects.equals(realmId, entity.getRealmId()))\n                 ? null\n                 : entityToAdapterFunc(realm).apply(entity);\n     }\n \n-    private Stream<MapGroupEntity> getNotRemovedUpdatedGroupsStream() {\n-        Stream<MapGroupEntity> updatedAndNotRemovedGroupsStream = groupStore.entrySet().stream()\n-                .map(tx::getUpdated)    // If the group has been removed, tx.get will return null, otherwise it will return me.getValue()\n-                .filter(Objects::nonNull);\n-        return Stream.concat(tx.createdValuesStream(), updatedAndNotRemovedGroupsStream);\n-    }\n-\n-    private Stream<MapGroupEntity> getUnsortedGroupEntitiesStream(RealmModel realm) {\n-        return getNotRemovedUpdatedGroupsStream()\n-                .filter(entityRealmFilter(realm));\n-    }\n-\n     @Override\n     public Stream<GroupModel> getGroupsStream(RealmModel realm) {\n+        return getGroupsStreamInternal(realm, null);\n+    }\n+\n+    private Stream<GroupModel> getGroupsStreamInternal(RealmModel realm, UnaryOperator<ModelCriteriaBuilder<GroupModel>> modifier) {\n         LOG.tracef(\"getGroupsStream(%s)%s\", realm, getShortStackTrace());\n-        return getUnsortedGroupEntitiesStream(realm)\n+        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n+          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId());", "originalCommit": "6ac090e1714263c809aac673b4efca49678ac6c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDIxODIyNQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560218225", "bodyText": "I was thinking about it, I decided for a more explicit \"WHERE clause\" as it then shows exact condition in full and is still short enough. I'm open to change it if there is a convincing argument though", "author": "hmlnarik", "createdAt": "2021-01-19T14:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA1MDg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI4OTcyOQ==", "url": "https://github.com/keycloak/keycloak/pull/7684#discussion_r560289729", "bodyText": "I see. Well I don't have any strong argument there, I just think that it would be worth adding as almost each entity we have is related to exactly one realm. But I agree with you, the code is more comprehensible this way, so we can leave it as is.", "author": "mhajas", "createdAt": "2021-01-19T16:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA1MDg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "9110f097a8c1e79fa0aa99b70658e5ce582e1642", "chunk": "diff --git a/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java b/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\nindex e7c3ae7a1a..5c2d163e6e 100644\n--- a/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\n+++ b/model/map/src/main/java/org/keycloak/models/map/group/MapGroupProvider.java\n\n@@ -81,28 +88,28 @@ public class MapGroupProvider implements GroupProvider {\n             return null;\n         }\n         \n-        MapGroupEntity entity = tx.read(uid);\n-        String realmId = realm.getId();\n-        return (entity == null || ! Objects.equals(realmId, entity.getRealmId()))\n+        MapGroupEntity entity = tx.read(uid, groupStore::read);\n+        return (entity == null || ! entityRealmFilter(realm).test(entity))\n                 ? null\n                 : entityToAdapterFunc(realm).apply(entity);\n     }\n \n-    @Override\n-    public Stream<GroupModel> getGroupsStream(RealmModel realm) {\n-        return getGroupsStreamInternal(realm, null);\n+    private Stream<MapGroupEntity> getNotRemovedUpdatedGroupsStream() {\n+        Stream<MapGroupEntity> updatedAndNotRemovedGroupsStream = groupStore.entrySet().stream()\n+                .map(tx::getUpdated)    // If the group has been removed, tx.get will return null, otherwise it will return me.getValue()\n+                .filter(Objects::nonNull);\n+        return Stream.concat(tx.createdValuesStream(), updatedAndNotRemovedGroupsStream);\n     }\n \n-    private Stream<GroupModel> getGroupsStreamInternal(RealmModel realm, UnaryOperator<ModelCriteriaBuilder<GroupModel>> modifier) {\n-        LOG.tracef(\"getGroupsStream(%s)%s\", realm, getShortStackTrace());\n-        ModelCriteriaBuilder<GroupModel> mcb = groupStore.createCriteriaBuilder()\n-          .compare(SearchableFields.REALM_ID, Operator.EQ, realm.getId());\n-\n-        if (modifier != null) {\n-            mcb = modifier.apply(mcb);\n-        }\n+    private Stream<MapGroupEntity> getUnsortedGroupEntitiesStream(RealmModel realm) {\n+        return getNotRemovedUpdatedGroupsStream()\n+                .filter(entityRealmFilter(realm));\n+    }\n \n-        return tx.getUpdatedNotRemoved(mcb)\n+    @Override\n+    public Stream<GroupModel> getGroupsStream(RealmModel realm) {\n+        LOG.tracef(\"getGroupsStream(%s)%s\", realm, getShortStackTrace());\n+        return getUnsortedGroupEntitiesStream(realm)\n                 .map(entityToAdapterFunc(realm))\n                 .sorted(GroupModel.COMPARE_BY_NAME)\n                 ;\n"}}, {"oid": "9110f097a8c1e79fa0aa99b70658e5ce582e1642", "url": "https://github.com/keycloak/keycloak/commit/9110f097a8c1e79fa0aa99b70658e5ce582e1642", "message": "KEYCLOAK-16584 Rename map to CRUD operations\n\n* rename putIfAbsent() to create(), get() to read(), put() to update(), remove() to delete()\n* move ConcurrentHashMapStorage to org.keycloak.models.map.storage.chm package\n* Add javadoc to MapStorage", "committedDate": "2021-01-19T13:00:32Z", "type": "commit"}, {"oid": "aec57f58cfa9b9239789f91830c72758cc7a38ae", "url": "https://github.com/keycloak/keycloak/commit/aec57f58cfa9b9239789f91830c72758cc7a38ae", "message": "KEYCLOAK-16118 Replace MapStorage.entrySet() with search by criteria\n\n* Add model class parameter to MapStorage\n* Add shortcut read(id) method to MapKeycloakTransaction", "committedDate": "2021-01-19T14:41:13Z", "type": "forcePushed"}, {"oid": "05aece270b774052e8bc4adf9ac8be372fd30c03", "url": "https://github.com/keycloak/keycloak/commit/05aece270b774052e8bc4adf9ac8be372fd30c03", "message": "KEYCLOAK-16118 Replace MapStorage.entrySet() with search by criteria\n\n* Add model class parameter to MapStorage\n* Add shortcut read(id) method to MapKeycloakTransaction", "committedDate": "2021-01-19T14:42:14Z", "type": "commit"}, {"oid": "05aece270b774052e8bc4adf9ac8be372fd30c03", "url": "https://github.com/keycloak/keycloak/commit/05aece270b774052e8bc4adf9ac8be372fd30c03", "message": "KEYCLOAK-16118 Replace MapStorage.entrySet() with search by criteria\n\n* Add model class parameter to MapStorage\n* Add shortcut read(id) method to MapKeycloakTransaction", "committedDate": "2021-01-19T14:42:14Z", "type": "forcePushed"}]}