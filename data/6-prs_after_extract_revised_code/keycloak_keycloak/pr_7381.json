{"pr_number": 7381, "pr_title": "KEYCLOAK-13923 Support PKCE for OIDC based Identity Providers", "pr_createdAt": "2020-08-28T10:18:41Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7381", "timeline": [{"oid": "5c02451136c5d660d14809ac0316bf21b8a7f107", "url": "https://github.com/keycloak/keycloak/commit/5c02451136c5d660d14809ac0316bf21b8a7f107", "message": "KEYCLOAK-13923 - Support PKCE for Identity Provider\n\nWe now support usage of PKCE for OIDC based Identity Providers.", "committedDate": "2020-08-28T10:20:15Z", "type": "forcePushed"}, {"oid": "b886d04c29aac5896eb687cb8c0fefa8440e02e9", "url": "https://github.com/keycloak/keycloak/commit/b886d04c29aac5896eb687cb8c0fefa8440e02e9", "message": "KEYCLOAK-13923 - Support PKCE for Identity Provider\n\nWe now support usage of PKCE for OIDC based Identity Providers.", "committedDate": "2020-08-28T10:21:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3Njk3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r510276979", "bodyText": "What should happen if the state param is missing?", "author": "thomasdarimont", "createdAt": "2020-10-22T15:57:42Z", "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "diffHunk": "@@ -317,6 +321,27 @@ public OIDCEndpoint(AuthenticationCallback callback, RealmModel realm, EventBuil\n             super(callback, realm, event);\n         }\n \n+        @Override\n+        public SimpleHttp generateTokenRequest(String authorizationCode) {\n+            SimpleHttp simpleHttp = super.generateTokenRequest(authorizationCode);\n+\n+            if (getConfig().isPkceEnabled()) {\n+\n+                // reconstruct the original code verifier that was used to generate the code challenge.\n+                String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n+                // TODO handle state param missing", "originalCommit": "b886d04c29aac5896eb687cb8c0fefa8440e02e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc6ecc60c946c17fef56392f1f03e655588b1882", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java b/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\nindex 6e95b31e48..c234ceed7c 100755\n--- a/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\n+++ b/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\n\n@@ -329,14 +329,26 @@ public class OIDCIdentityProvider extends AbstractOAuth2IdentityProvider<OIDCIde\n \n                 // reconstruct the original code verifier that was used to generate the code challenge.\n                 String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n-                // TODO handle state param missing\n+                if (stateParam == null) {\n+                    logger.warn(\"Cannot lookup PKCE code_verifier: state param is missing.\");\n+                    return simpleHttp;\n+                }\n \n                 IdentityBrokerState idpBrokerState = IdentityBrokerState.encoded(stateParam);\n                 ClientModel client = realm.getClientByClientId(idpBrokerState.getClientId());\n                 AuthenticationSessionModel authSession = ClientSessionCode.getClientSession(idpBrokerState.getEncoded(), idpBrokerState.getTabId(), session, realm, client, event, AuthenticationSessionModel.class);\n-                // TODO handle authSession missing\n+                if (authSession == null) {\n+                    logger.warnf(\"Cannot lookup PKCE code_verifier: authSession not found. state=%s\", stateParam);\n+                    return simpleHttp;\n+                }\n+\n+                String brokerCodeChallenge = authSession.getClientNote(BROKER_CODE_CHALLENGE_PARAM);\n+                if (brokerCodeChallenge == null) {\n+                    logger.warnf(\"Cannot lookup PKCE code_verifier: brokerCodeChallenge not found. state=%s\", stateParam);\n+                    return simpleHttp;\n+                }\n \n-                simpleHttp.param(OAuth2Constants.CODE_VERIFIER, authSession.getClientNote(BROKER_CODE_CHALLENGE_PARAM));\n+                simpleHttp.param(OAuth2Constants.CODE_VERIFIER, brokerCodeChallenge);\n                 simpleHttp.param(OAuth2Constants.CODE_CHALLENGE_METHOD, getConfig().getPkceMethod());\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4MTYwNg==", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r510281606", "bodyText": "What to do if the authSession is missing?", "author": "thomasdarimont", "createdAt": "2020-10-22T16:04:06Z", "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "diffHunk": "@@ -317,6 +321,27 @@ public OIDCEndpoint(AuthenticationCallback callback, RealmModel realm, EventBuil\n             super(callback, realm, event);\n         }\n \n+        @Override\n+        public SimpleHttp generateTokenRequest(String authorizationCode) {\n+            SimpleHttp simpleHttp = super.generateTokenRequest(authorizationCode);\n+\n+            if (getConfig().isPkceEnabled()) {\n+\n+                // reconstruct the original code verifier that was used to generate the code challenge.\n+                String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n+                // TODO handle state param missing\n+\n+                IdentityBrokerState idpBrokerState = IdentityBrokerState.encoded(stateParam);\n+                ClientModel client = realm.getClientByClientId(idpBrokerState.getClientId());\n+                AuthenticationSessionModel authSession = ClientSessionCode.getClientSession(idpBrokerState.getEncoded(), idpBrokerState.getTabId(), session, realm, client, event, AuthenticationSessionModel.class);\n+                // TODO handle authSession missing", "originalCommit": "b886d04c29aac5896eb687cb8c0fefa8440e02e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc6ecc60c946c17fef56392f1f03e655588b1882", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java b/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\nindex 6e95b31e48..c234ceed7c 100755\n--- a/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\n+++ b/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\n\n@@ -329,14 +329,26 @@ public class OIDCIdentityProvider extends AbstractOAuth2IdentityProvider<OIDCIde\n \n                 // reconstruct the original code verifier that was used to generate the code challenge.\n                 String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n-                // TODO handle state param missing\n+                if (stateParam == null) {\n+                    logger.warn(\"Cannot lookup PKCE code_verifier: state param is missing.\");\n+                    return simpleHttp;\n+                }\n \n                 IdentityBrokerState idpBrokerState = IdentityBrokerState.encoded(stateParam);\n                 ClientModel client = realm.getClientByClientId(idpBrokerState.getClientId());\n                 AuthenticationSessionModel authSession = ClientSessionCode.getClientSession(idpBrokerState.getEncoded(), idpBrokerState.getTabId(), session, realm, client, event, AuthenticationSessionModel.class);\n-                // TODO handle authSession missing\n+                if (authSession == null) {\n+                    logger.warnf(\"Cannot lookup PKCE code_verifier: authSession not found. state=%s\", stateParam);\n+                    return simpleHttp;\n+                }\n+\n+                String brokerCodeChallenge = authSession.getClientNote(BROKER_CODE_CHALLENGE_PARAM);\n+                if (brokerCodeChallenge == null) {\n+                    logger.warnf(\"Cannot lookup PKCE code_verifier: brokerCodeChallenge not found. state=%s\", stateParam);\n+                    return simpleHttp;\n+                }\n \n-                simpleHttp.param(OAuth2Constants.CODE_VERIFIER, authSession.getClientNote(BROKER_CODE_CHALLENGE_PARAM));\n+                simpleHttp.param(OAuth2Constants.CODE_VERIFIER, brokerCodeChallenge);\n                 simpleHttp.param(OAuth2Constants.CODE_CHALLENGE_METHOD, getConfig().getPkceMethod());\n             }\n \n"}}, {"oid": "fc6ecc60c946c17fef56392f1f03e655588b1882", "url": "https://github.com/keycloak/keycloak/commit/fc6ecc60c946c17fef56392f1f03e655588b1882", "message": "KEYCLOAK-13923 Warn if PKCE information cannot be found code-to-token request in OIDCIdentityProvider", "committedDate": "2020-10-22T16:20:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI5NjQ5Nw==", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r526296497", "bodyText": "I think makes more sense the PKCE code here org.keycloak.broker.oidc.AbstractOAuth2IdentityProvider#authenticateTokenRequest. As this may also be useful for OAuth2-based brokers.", "author": "pedroigor", "createdAt": "2020-11-18T17:45:52Z", "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "diffHunk": "@@ -317,6 +321,39 @@ public OIDCEndpoint(AuthenticationCallback callback, RealmModel realm, EventBuil\n             super(callback, realm, event);\n         }\n \n+        @Override\n+        public SimpleHttp generateTokenRequest(String authorizationCode) {", "originalCommit": "fc6ecc60c946c17fef56392f1f03e655588b1882", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0ODI3NA==", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r546448274", "bodyText": "I gave this idea a spin, but in that case I'm missing the EventBuilder dependencies. Also IMHO the main purpose of PKCE is to protect the authorizationCode, which is handled in generateTokenRequest(...).\nThe main purpose of the authenticateTokenRequest(..) seems to be to add the proper authentication for the authorization  as well as token refresh requests. Therefore I think the proper place would be org.keycloak.broker.oidc.AbstractOAuth2IdentityProvider.Endpoint#generateTokenRequest(..).\nWhat do you think? I just changed the code to reflect my thinking.", "author": "thomasdarimont", "createdAt": "2020-12-20T22:55:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI5NjQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3464a1fc90536cc326eab8a9d463c267b13e0b1a", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java b/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\nindex c234ceed7c..8913b4c436 100755\n--- a/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\n+++ b/services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java\n\n@@ -329,26 +329,14 @@ public class OIDCIdentityProvider extends AbstractOAuth2IdentityProvider<OIDCIde\n \n                 // reconstruct the original code verifier that was used to generate the code challenge.\n                 String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n-                if (stateParam == null) {\n-                    logger.warn(\"Cannot lookup PKCE code_verifier: state param is missing.\");\n-                    return simpleHttp;\n-                }\n+                // TODO handle state param missing\n \n                 IdentityBrokerState idpBrokerState = IdentityBrokerState.encoded(stateParam);\n                 ClientModel client = realm.getClientByClientId(idpBrokerState.getClientId());\n                 AuthenticationSessionModel authSession = ClientSessionCode.getClientSession(idpBrokerState.getEncoded(), idpBrokerState.getTabId(), session, realm, client, event, AuthenticationSessionModel.class);\n-                if (authSession == null) {\n-                    logger.warnf(\"Cannot lookup PKCE code_verifier: authSession not found. state=%s\", stateParam);\n-                    return simpleHttp;\n-                }\n-\n-                String brokerCodeChallenge = authSession.getClientNote(BROKER_CODE_CHALLENGE_PARAM);\n-                if (brokerCodeChallenge == null) {\n-                    logger.warnf(\"Cannot lookup PKCE code_verifier: brokerCodeChallenge not found. state=%s\", stateParam);\n-                    return simpleHttp;\n-                }\n+                // TODO handle authSession missing\n \n-                simpleHttp.param(OAuth2Constants.CODE_VERIFIER, brokerCodeChallenge);\n+                simpleHttp.param(OAuth2Constants.CODE_VERIFIER, authSession.getClientNote(BROKER_CODE_CHALLENGE_PARAM));\n                 simpleHttp.param(OAuth2Constants.CODE_CHALLENGE_METHOD, getConfig().getPkceMethod());\n             }\n \n"}}, {"oid": "3464a1fc90536cc326eab8a9d463c267b13e0b1a", "url": "https://github.com/keycloak/keycloak/commit/3464a1fc90536cc326eab8a9d463c267b13e0b1a", "message": "KEYCLOAK-13923 - Support PKCE for Identity Provider\n\nWe now support usage of PKCE for OIDC based Identity Providers.", "committedDate": "2020-12-20T22:16:30Z", "type": "commit"}, {"oid": "3818cd76d53be967ab12843fb07e1ba93ef45fa2", "url": "https://github.com/keycloak/keycloak/commit/3818cd76d53be967ab12843fb07e1ba93ef45fa2", "message": "KEYCLOAK-13923 Warn if PKCE information cannot be found code-to-token request in OIDCIdentityProvider", "committedDate": "2020-12-20T22:16:30Z", "type": "commit"}, {"oid": "e3f079c934d269b7e8c6c0ae5d7cf5424c81b202", "url": "https://github.com/keycloak/keycloak/commit/e3f079c934d269b7e8c6c0ae5d7cf5424c81b202", "message": "KEYCLOAK-13923 Pull up PKCE handling from OIDC to OAuth IdentityProvider infrastructure", "committedDate": "2020-12-20T22:47:30Z", "type": "forcePushed"}, {"oid": "2652cfb76e62e85037722415e9838cec31a9aa4a", "url": "https://github.com/keycloak/keycloak/commit/2652cfb76e62e85037722415e9838cec31a9aa4a", "message": "KEYCLOAK-13923 Pull up PKCE handling from OIDC to OAuth IdentityProvider infrastructure", "committedDate": "2020-12-20T22:50:44Z", "type": "commit"}, {"oid": "2652cfb76e62e85037722415e9838cec31a9aa4a", "url": "https://github.com/keycloak/keycloak/commit/2652cfb76e62e85037722415e9838cec31a9aa4a", "message": "KEYCLOAK-13923 Pull up PKCE handling from OIDC to OAuth IdentityProvider infrastructure", "committedDate": "2020-12-20T22:50:44Z", "type": "forcePushed"}, {"oid": "66fb57486ab01c88eea08fed2149eb70f42e0ac9", "url": "https://github.com/keycloak/keycloak/commit/66fb57486ab01c88eea08fed2149eb70f42e0ac9", "message": "KEYCLOAK-13923 Adding test for PKCE support for OAuth Identity providers", "committedDate": "2021-01-04T15:15:55Z", "type": "commit"}, {"oid": "66fb57486ab01c88eea08fed2149eb70f42e0ac9", "url": "https://github.com/keycloak/keycloak/commit/66fb57486ab01c88eea08fed2149eb70f42e0ac9", "message": "KEYCLOAK-13923 Adding test for PKCE support for OAuth Identity providers", "committedDate": "2021-01-04T15:15:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4NTM1Mw==", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r551885353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n          \n          \n            \n                            String stateParam = session.getContext().getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);", "author": "pedroigor", "createdAt": "2021-01-05T11:51:48Z", "path": "services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java", "diffHunk": "@@ -507,6 +530,45 @@ public SimpleHttp generateTokenRequest(String authorizationCode) {\n                     .param(OAUTH2_PARAMETER_REDIRECT_URI, Urls.identityProviderAuthnResponse(context.getUri().getBaseUri(),\n                             getConfig().getAlias(), context.getRealm().getName()).toString())\n                     .param(OAUTH2_PARAMETER_GRANT_TYPE, OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+\n+            if (getConfig().isPkceEnabled()) {\n+\n+                // reconstruct the original code verifier that was used to generate the code challenge from the HttpRequest.\n+                String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);", "originalCommit": "66fb57486ab01c88eea08fed2149eb70f42e0ac9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cdea583e742d3cfeb3a6009dd65c21a766629c68", "chunk": "diff --git a/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java b/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java\nindex d3943c0977..bb5365bc64 100755\n--- a/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java\n+++ b/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java\n\n@@ -534,7 +534,7 @@ public abstract class AbstractOAuth2IdentityProvider<C extends OAuth2IdentityPro\n             if (getConfig().isPkceEnabled()) {\n \n                 // reconstruct the original code verifier that was used to generate the code challenge from the HttpRequest.\n-                String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n+                String stateParam = session.getContext().getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n                 if (stateParam == null) {\n                     logger.warn(\"Cannot lookup PKCE code_verifier: state param is missing.\");\n                     return tokenRequest;\n"}}, {"oid": "cdea583e742d3cfeb3a6009dd65c21a766629c68", "url": "https://github.com/keycloak/keycloak/commit/cdea583e742d3cfeb3a6009dd65c21a766629c68", "message": "KEYCLOAK-13923 Use URI from KeycloakContext instead of HttpRequest\n\nCo-authored-by: Pedro Igor <pigor.craveiro@gmail.com>", "committedDate": "2021-01-05T12:11:43Z", "type": "commit"}]}