{"pr_number": 7395, "pr_title": "KEYCLOAK-14195 FAPI-RW Client Policy - Condition : Client - Client Role", "pr_createdAt": "2020-09-05T02:27:43Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7395", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MTUxNg==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485561516", "bodyText": "Maybe it is possible to add the condition like \"if (log.isTraceEnabled()\" or something like that to save the iterations over the streams in case that logging is not enabled. Maybe very little performance improvement, but it will be probably there?", "author": "mposolda", "createdAt": "2020-09-09T12:11:20Z", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));", "originalCommit": "e910adf76db84a5be75b068b789268de6790f709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMjQ5Mg==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486112492", "bodyText": "@mposolda Yes, I'll check whether the log level is trace at first. If so, logging the event in order not to call stream regardless of the log level for considering the performance.", "author": "tnorimat", "createdAt": "2020-09-10T07:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MTUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "6ac107d0257f112eb780da79247cbd3d99106011", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java b/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\nindex 8bc4b01374..019bf1f7a9 100644\n--- a/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\n+++ b/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\n\n@@ -60,26 +63,32 @@ public class ClientRolesCondition implements ClientPolicyConditionProvider {\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        Stream<String> rolesForMatching = getRolesStreamForMatching();\n+        Set<String> rolesForMatching = getRolesForMatching();\n         if (rolesForMatching == null) return false;\n \n-        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));\n+        // client.getRolesStream() never returns null according to {@link RoleProvider.getClientRolesStream}\n+        Set<String> clientRoles = client.getRolesStream().map(RoleModel::getName).collect(Collectors.toSet());\n+\n+        if (logger.isTraceEnabled()) {\n+            clientRoles.stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role assigned = \" + i));\n+            rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role for matching = \" + i));\n+        }\n+\n+        boolean isMatched = rolesForMatching.removeAll(clientRoles);\n         if (isMatched) {\n             ClientPolicyLogger.log(logger, \"role matched.\");\n         } else {\n             ClientPolicyLogger.log(logger, \"role unmatched.\");\n         }\n+\n         return isMatched;\n     }\n \n-    private Stream<String> getRolesStreamForMatching() {\n+    private Set<String> getRolesForMatching() {\n         if (componentModel.getConfig() == null) return null;\n         List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n-        if (roles == null) {\n-            return null;\n-        } else {\n-            return roles.stream();\n-        }\n+        if (roles == null) return null;\n+        return new HashSet<>(roles);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NjYxNA==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485696614", "bodyText": "There is no need in else block here, one can do:\n if (roles == null) {\n      return null;\n}\nreturn roles.stream();", "author": "valb3r", "createdAt": "2020-09-09T15:19:38Z", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -76,8 +72,14 @@ private boolean isRolesMatched(ClientModel client) {\n         return isMatched;\n     }\n \n-    private List<String> getRolesForMatching() {\n-        return componentModel.getConfig().get(TestClientRolesConditionFactory.ROLES);\n+    private Stream<String> getRolesStreamForMatching() {\n+        if (componentModel.getConfig() == null) return null;\n+        List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n+        if (roles == null) {\n+            return null;\n+        } else {\n+            return roles.stream();", "originalCommit": "e910adf76db84a5be75b068b789268de6790f709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxNzQ1OA==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486017458", "bodyText": "@valb3r Thank you. I'll revise codes as you pointed out.", "author": "tnorimat", "createdAt": "2020-09-10T01:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NjYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "6ac107d0257f112eb780da79247cbd3d99106011", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java b/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\nindex 8bc4b01374..019bf1f7a9 100644\n--- a/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\n+++ b/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\n\n@@ -60,26 +63,32 @@ public class ClientRolesCondition implements ClientPolicyConditionProvider {\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        Stream<String> rolesForMatching = getRolesStreamForMatching();\n+        Set<String> rolesForMatching = getRolesForMatching();\n         if (rolesForMatching == null) return false;\n \n-        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));\n+        // client.getRolesStream() never returns null according to {@link RoleProvider.getClientRolesStream}\n+        Set<String> clientRoles = client.getRolesStream().map(RoleModel::getName).collect(Collectors.toSet());\n+\n+        if (logger.isTraceEnabled()) {\n+            clientRoles.stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role assigned = \" + i));\n+            rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role for matching = \" + i));\n+        }\n+\n+        boolean isMatched = rolesForMatching.removeAll(clientRoles);\n         if (isMatched) {\n             ClientPolicyLogger.log(logger, \"role matched.\");\n         } else {\n             ClientPolicyLogger.log(logger, \"role unmatched.\");\n         }\n+\n         return isMatched;\n     }\n \n-    private Stream<String> getRolesStreamForMatching() {\n+    private Set<String> getRolesForMatching() {\n         if (componentModel.getConfig() == null) return null;\n         List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n-        if (roles == null) {\n-            return null;\n-        } else {\n-            return roles.stream();\n-        }\n+        if (roles == null) return null;\n+        return new HashSet<>(roles);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485709474", "bodyText": "This line seem to have performance bottleneck client.getRolesStream() stream is opened for each element of rolesForMatching\nI would propose something of (using Sets from Guava) as it may improve readabiliy - Sets.intersection instead of anyMatch(i -> anyMatch):\nprivate boolean isRolesMatched(ClientModel client) {\n        if (client == null) return false;\n\n        Set<String> rolesForMatching = getRolesStreamForMatching();\n        if (rolesForMatching == null) return false;\n\n        Set<String> clientRoles = client.getRolesStream().map(RoleModel::getName).collect(Collectors.toSet());\n        boolean isMatched = !Sets.intersection(clientRoles, rolesForMatching).isEmpty();\n        \n        if (isMatched) {\n            ClientPolicyLogger.log(logger, \"role matched.\");\n        } else {\n            ClientPolicyLogger.log(logger, \"role unmatched.\");\n        }\n        return isMatched;\n    }\n\n    private Set<String> getRolesStreamForMatching() {\n        if (componentModel.getConfig() == null) return null;\n        List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n        if (roles == null) {\n            return null;\n        }\n\n        return new HashSet<>(roles);\n    }\n\n@mposolda What do you think (gauva is already available in BOM)?", "author": "valb3r", "createdAt": "2020-09-09T15:37:27Z", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));\n-        rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"roles expected = \" + i));\n-\n-        boolean isMatched = rolesForMatching.stream().anyMatch(i->client.getRoles().stream().anyMatch(j->j.getName().equals(i)));\n+        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));", "originalCommit": "e910adf76db84a5be75b068b789268de6790f709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNDQyOQ==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486114429", "bodyText": "It seems that Sets is not used in the current keycloak. If Sets is introduced, this PR is the first time to use Sets.\n@mposolda Should we introduce Sets to improve the performance of set operation or not?", "author": "tnorimat", "createdAt": "2020-09-10T07:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyOTU1OQ==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486129559", "bodyText": "It can be done without Sets\n private boolean setsIntersect(Set<String> first, Set<String> second) {\n        return new HashSet<>(first).removeAll(second);\n    }\n\nalso defensive copying for current code is not needed, so\n private boolean setsIntersect(Set<String> first, Set<String> second) {\n        return first.removeAll(second);\n    }", "author": "valb3r", "createdAt": "2020-09-10T07:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NDE0Nw==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486194147", "bodyText": "@valb3r I see, I'll use Set.removeAll for set operation.", "author": "tnorimat", "createdAt": "2020-09-10T09:23:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6ac107d0257f112eb780da79247cbd3d99106011", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java b/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\nindex 8bc4b01374..019bf1f7a9 100644\n--- a/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\n+++ b/services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java\n\n@@ -60,26 +63,32 @@ public class ClientRolesCondition implements ClientPolicyConditionProvider {\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        Stream<String> rolesForMatching = getRolesStreamForMatching();\n+        Set<String> rolesForMatching = getRolesForMatching();\n         if (rolesForMatching == null) return false;\n \n-        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));\n+        // client.getRolesStream() never returns null according to {@link RoleProvider.getClientRolesStream}\n+        Set<String> clientRoles = client.getRolesStream().map(RoleModel::getName).collect(Collectors.toSet());\n+\n+        if (logger.isTraceEnabled()) {\n+            clientRoles.stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role assigned = \" + i));\n+            rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role for matching = \" + i));\n+        }\n+\n+        boolean isMatched = rolesForMatching.removeAll(clientRoles);\n         if (isMatched) {\n             ClientPolicyLogger.log(logger, \"role matched.\");\n         } else {\n             ClientPolicyLogger.log(logger, \"role unmatched.\");\n         }\n+\n         return isMatched;\n     }\n \n-    private Stream<String> getRolesStreamForMatching() {\n+    private Set<String> getRolesForMatching() {\n         if (componentModel.getConfig() == null) return null;\n         List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n-        if (roles == null) {\n-            return null;\n-        } else {\n-            return roles.stream();\n-        }\n+        if (roles == null) return null;\n+        return new HashSet<>(roles);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMDUwOA==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485710508", "bodyText": "ClientRolesCondition is duplicated many times, maybe we can introduce constant for it?", "author": "valb3r", "createdAt": "2020-09-09T15:38:53Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -399,21 +399,21 @@ public void testCreateUpdateDeleteConditionRuntime() throws ClientRegistrationEx\n         try {\n             successfulLoginAndLogout(clientId, clientSecret);\n  \n-            createCondition(\"TestClientRolesCondition\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            createCondition(\"ClientRolesCondition\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "originalCommit": "e910adf76db84a5be75b068b789268de6790f709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNDc3Nw==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486114777", "bodyText": "@valb3r Thank you. I'll revise codes as you suggested.", "author": "tnorimat", "createdAt": "2020-09-10T07:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMDUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "6ac107d0257f112eb780da79247cbd3d99106011", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\nindex 1f9bd3fe59..d06e62c629 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n\n@@ -399,21 +407,21 @@ public class ClientPolicyBasicsTest extends AbstractKeycloakTest {\n         try {\n             successfulLoginAndLogout(clientId, clientSecret);\n  \n-            createCondition(\"ClientRolesCondition\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            createCondition(CLIENTROLES_CONDITION_NAME, ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n                 setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"sample-client-role\")));\n             });\n-            registerCondition(\"ClientRolesCondition\", policyName);\n-            logger.info(\"... Registered Condition : ClientRolesCondition\");\n+            registerCondition(CLIENTROLES_CONDITION_NAME, policyName);\n+            logger.info(\"... Registered Condition : \" + CLIENTROLES_CONDITION_NAME);\n \n             failLoginByNotFollowingPKCE(clientId);\n \n-            updateCondition(\"ClientRolesCondition\", (ComponentRepresentation provider) -> {\n+            updateCondition(CLIENTROLES_CONDITION_NAME, (ComponentRepresentation provider) -> {\n                 setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"anothor-client-role\")));\n             });\n \n             successfulLoginAndLogout(clientId, clientSecret);\n \n-            deleteCondition(\"ClientRolesCondition\", policyName);\n+            deleteCondition(CLIENTROLES_CONDITION_NAME, policyName);\n \n             successfulLoginAndLogout(clientId, clientSecret);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTMxNQ==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485715315", "bodyText": "Suggest to introduce constant for \"ClientRolesCondition-alpha\"", "author": "valb3r", "createdAt": "2020-09-09T15:45:24Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -491,11 +491,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         createPolicy(policyAlphaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyAlphaName);\n \n-        createCondition(\"TestClientRolesCondition-alpha\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(\"ClientRolesCondition-alpha\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "originalCommit": "e910adf76db84a5be75b068b789268de6790f709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNDkxMg==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486114912", "bodyText": "@valb3r Thank you. I'll revise codes as you suggested.", "author": "tnorimat", "createdAt": "2020-09-10T07:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ac107d0257f112eb780da79247cbd3d99106011", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\nindex 1f9bd3fe59..d06e62c629 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n\n@@ -491,17 +499,17 @@ public class ClientPolicyBasicsTest extends AbstractKeycloakTest {\n         createPolicy(policyAlphaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyAlphaName);\n \n-        createCondition(\"ClientRolesCondition-alpha\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"sample-client-role-alpha\")));\n+        createCondition(CLIENTROLES_CONDITION_ALPHA_NAME, ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"sample-client-role-alpha\", \"sample-client-role-zeta\")));\n         });\n-        registerCondition(\"ClientRolesCondition-alpha\", policyAlphaName);\n-        logger.info(\"... Registered Condition : ClientRolesCondition-alpha\");\n+        registerCondition(CLIENTROLES_CONDITION_ALPHA_NAME, policyAlphaName);\n+        logger.info(\"... Registered Condition : \" + CLIENTROLES_CONDITION_ALPHA_NAME);\n \n-        createCondition(\"ClientUpdateContextCondition-alpha\", ClientUpdateContextConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(CLIENTUPDATECONTEXT_CONDITION_ALPHA_NAME, ClientUpdateContextConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n             setConditionRegistrationMethods(provider, new ArrayList<>(Arrays.asList(ClientUpdateContextConditionFactory.BY_AUTHENTICATED_USER)));\n         });\n-        registerCondition(\"ClientUpdateContextCondition-alpha\", policyAlphaName);\n-        logger.info(\"... Registered Condition : ClientUpdateContextCondition-alpha\");\n+        registerCondition(CLIENTUPDATECONTEXT_CONDITION_ALPHA_NAME, policyAlphaName);\n+        logger.info(\"... Registered Condition : \" + CLIENTUPDATECONTEXT_CONDITION_ALPHA_NAME);\n \n         createExecutor(\"TestClientAuthenticationExecutor-alpha\", TestClientAuthenticationExecutorFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n             setExecutorAcceptedClientAuthMethods(provider, new ArrayList<>(Arrays.asList(ClientIdAndSecretAuthenticator.PROVIDER_ID)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTM4Ng==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485715386", "bodyText": "Suggest to introduce constant for \"ClientRolesCondition-beta\"", "author": "valb3r", "createdAt": "2020-09-09T15:45:31Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -515,11 +515,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         createPolicy(policyBetaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyBetaName);\n \n-        createCondition(\"TestClientRolesCondition-beta\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(\"ClientRolesCondition-beta\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "originalCommit": "e910adf76db84a5be75b068b789268de6790f709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNTAwNA==", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486115004", "bodyText": "@valb3r Thank you. I'll revise codes as you suggested.", "author": "tnorimat", "createdAt": "2020-09-10T07:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6ac107d0257f112eb780da79247cbd3d99106011", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\nindex 1f9bd3fe59..d06e62c629 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java\n\n@@ -515,11 +523,11 @@ public class ClientPolicyBasicsTest extends AbstractKeycloakTest {\n         createPolicy(policyBetaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyBetaName);\n \n-        createCondition(\"ClientRolesCondition-beta\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n-            setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"sample-client-role-beta\")));\n+        createCondition(CLIENTROLES_CONDITION_BETA_NAME, ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            setConditionClientRoles(provider, new ArrayList<>(Arrays.asList(\"sample-client-role-beta\", \"sample-client-role-zeta\")));\n         });\n-        registerCondition(\"ClientRolesCondition-beta\", policyBetaName);\n-        logger.info(\"... Registered Condition : ClientRolesCondition-beta\");\n+        registerCondition(CLIENTROLES_CONDITION_BETA_NAME, policyBetaName);\n+        logger.info(\"... Registered Condition : \" + CLIENTROLES_CONDITION_BETA_NAME);\n \n         createExecutor(\"TestPKCEEnforceExecutor-beta\", TestPKCEEnforceExecutorFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n             setExecutorAugmentActivate(provider);\n"}}, {"oid": "6ac107d0257f112eb780da79247cbd3d99106011", "url": "https://github.com/keycloak/keycloak/commit/6ac107d0257f112eb780da79247cbd3d99106011", "message": "KEYCLOAK-14195 FAPI-RW Client Policy - Condition : Client - Client Role", "committedDate": "2020-09-10T10:07:33Z", "type": "commit"}, {"oid": "6ac107d0257f112eb780da79247cbd3d99106011", "url": "https://github.com/keycloak/keycloak/commit/6ac107d0257f112eb780da79247cbd3d99106011", "message": "KEYCLOAK-14195 FAPI-RW Client Policy - Condition : Client - Client Role", "committedDate": "2020-09-10T10:07:33Z", "type": "forcePushed"}]}