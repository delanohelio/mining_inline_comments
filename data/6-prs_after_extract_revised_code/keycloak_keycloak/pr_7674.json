{"pr_number": 7674, "pr_title": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "pr_createdAt": "2020-12-12T06:00:31Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7674", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573133617", "bodyText": "This is not really necessary because the request will never be null. The check we have is just a defensive check. It is probably a code assertion where a null request is a bug and not expected at all.", "author": "pedroigor", "createdAt": "2021-02-09T18:32:21Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDQ2Mzc3OA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574463778", "bodyText": "@jmrodriguez Could you please revert this change? See comment above.", "author": "pedroigor", "createdAt": "2021-02-11T12:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDU1NjY1MQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574556651", "bodyText": "done", "author": "jmrodriguez", "createdAt": "2021-02-11T14:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU4MTUyMA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r577581520", "bodyText": "@jmrodriguez I think the change is not reflected here?", "author": "pedroigor", "createdAt": "2021-02-17T12:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzg5OTk2MQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r577899961", "bodyText": "@pedroigor I cannot remove the EventBuilder event parameter as because fireErrorEvent function requires it as parameter, and we use that function multiple times in the authorize method.\nCould you please clarify how this should be resolved?", "author": "jmrodriguez", "createdAt": "2021-02-17T19:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODM4NTU1OQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r578385559", "bodyText": "Sure. Basically, change the signature and include the first statement as follows:\npublic Response authorize(KeycloakAuthorizationRequest request) {\n        EventBuilder event = request.getEvent();\n        ...\n}\n\nYou should be able to get the EventBuilder from the request.", "author": "pedroigor", "createdAt": "2021-02-18T12:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDQ3NTUzNQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580475535", "bodyText": "I understand now. I'm pushing the changes shortly", "author": "jmrodriguez", "createdAt": "2021-02-22T18:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -190,14 +190,14 @@ public class AuthorizationTokenService {\n     public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n             CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n-            fireErrorEvent(event, Errors.INVALID_AUTHORIZATION_REQUEST, invalidAuthorizationRequestException);\n+            fireErrorEvent(event, Errors.INVALID_REQUEST, invalidAuthorizationRequestException);\n             throw invalidAuthorizationRequestException;\n         }\n \n         // it is not secure to allow public clients to push arbitrary claims because message can be tampered\n         if (isPublicClientRequestingEntitlementWithClaims(request)) {\n             CorsErrorResponseException forbiddenClientException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n-            fireErrorEvent(event, Errors.PUBLIC_CLIENT_SENDING_CLAIMS, forbiddenClientException);\n+            fireErrorEvent(event, Errors.INVALID_REQUEST, forbiddenClientException);\n             throw forbiddenClientException;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNDUyMA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573134520", "bodyText": "Should create the exception using reqest.getCors().\nWe don't need Errors.INVALID_AUTHORIZATION_REQUEST. But just use Errors.INVALID_REQUEST.", "author": "pedroigor", "createdAt": "2021-02-09T18:33:51Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDY1OQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190659", "bodyText": "using request.getCors() to create the exception would lead to a NullPointerException because this code section is executed only if request == null (line 191)\nAgreed on using Errors.INVALID_REQUEST", "author": "jmrodriguez", "createdAt": "2021-02-09T19:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNDUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -190,14 +190,14 @@ public class AuthorizationTokenService {\n     public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n             CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n-            fireErrorEvent(event, Errors.INVALID_AUTHORIZATION_REQUEST, invalidAuthorizationRequestException);\n+            fireErrorEvent(event, Errors.INVALID_REQUEST, invalidAuthorizationRequestException);\n             throw invalidAuthorizationRequestException;\n         }\n \n         // it is not secure to allow public clients to push arbitrary claims because message can be tampered\n         if (isPublicClientRequestingEntitlementWithClaims(request)) {\n             CorsErrorResponseException forbiddenClientException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n-            fireErrorEvent(event, Errors.PUBLIC_CLIENT_SENDING_CLAIMS, forbiddenClientException);\n+            fireErrorEvent(event, Errors.INVALID_REQUEST, forbiddenClientException);\n             throw forbiddenClientException;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNTg2MA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573135860", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "author": "pedroigor", "createdAt": "2021-02-09T18:35:50Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            fireErrorEvent(event, Errors.INVALID_AUTHORIZATION_REQUEST, invalidAuthorizationRequestException);\n+            throw invalidAuthorizationRequestException;\n         }\n \n         // it is not secure to allow public clients to push arbitrary claims because message can be tampered\n         if (isPublicClientRequestingEntitlementWithClaims(request)) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n+            CorsErrorResponseException forbiddenClientException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n+            fireErrorEvent(event, Errors.PUBLIC_CLIENT_SENDING_CLAIMS, forbiddenClientException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDcwOQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190709", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNTg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -190,14 +190,14 @@ public class AuthorizationTokenService {\n     public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n             CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n-            fireErrorEvent(event, Errors.INVALID_AUTHORIZATION_REQUEST, invalidAuthorizationRequestException);\n+            fireErrorEvent(event, Errors.INVALID_REQUEST, invalidAuthorizationRequestException);\n             throw invalidAuthorizationRequestException;\n         }\n \n         // it is not secure to allow public clients to push arbitrary claims because message can be tampered\n         if (isPublicClientRequestingEntitlementWithClaims(request)) {\n             CorsErrorResponseException forbiddenClientException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n-            fireErrorEvent(event, Errors.PUBLIC_CLIENT_SENDING_CLAIMS, forbiddenClientException);\n+            fireErrorEvent(event, Errors.INVALID_REQUEST, forbiddenClientException);\n             throw forbiddenClientException;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573137171", "bodyText": "Isn't INVALID_RESPONSE_MODE too much? Do we really need it?", "author": "pedroigor", "createdAt": "2021-02-09T18:37:06Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDc0Ng==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190746", "bodyText": "the intention was to cover all the code exceptions thrown, to generate the respective audit event error", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzc1NzY5MA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573757690", "bodyText": "My point is that you can simplify the event model by auditing only what makes sense from a security perspective. This one, for instance, does not mean much because an invalid response mode does not represent any exploit (I mean, I can't see one).\nSo we just ignore or audit as INVALID_REQUEST if it really makes sense.\nThe same goes for others.", "author": "pedroigor", "createdAt": "2021-02-10T14:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDQ2NDQ2MQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574464461", "bodyText": "@jmrodriguez Do we really need INVALID_RESPONSE_MODE? See comment above.", "author": "pedroigor", "createdAt": "2021-02-11T12:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDU1NzI1Mg==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574557252", "bodyText": "totally missed this one. Done", "author": "jmrodriguez", "createdAt": "2021-02-11T14:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -252,11 +252,11 @@ public class AuthorizationTokenService {\n \n             if (request.isSubmitRequest()) {\n                 CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n-                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);\n+                fireErrorEvent(event, Errors.ACCESS_DENIED, submittedRequestException);\n                 throw submittedRequestException;\n             } else {\n                 CorsErrorResponseException notAuthorizedException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n-                fireErrorEvent(event, Errors.INVALID_REQUEST, notAuthorizedException);\n+                fireErrorEvent(event, Errors.ACCESS_DENIED, notAuthorizedException);\n                 throw notAuthorizedException;\n             }\n         } catch (ErrorResponseException | CorsErrorResponseException cause) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzODkyOA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573138928", "bodyText": "Not really, an invalid request. Here the access is denied by the request was submitted for approval by another user (usually the resource owner).", "author": "pedroigor", "createdAt": "2021-02-09T18:39:28Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDg1MA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190850", "bodyText": "using Errors.ACCESS_DENIED would be more appropriate then?", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzODkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzc1OTg2Mg==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573759862", "bodyText": "Yes. Because that is what happened. You might argue though that you want to audit attempts to access users' resources. So maybe a APPROVAL_REQUEST makes sense?", "author": "pedroigor", "createdAt": "2021-02-10T14:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzODkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -252,11 +252,11 @@ public class AuthorizationTokenService {\n \n             if (request.isSubmitRequest()) {\n                 CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n-                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);\n+                fireErrorEvent(event, Errors.ACCESS_DENIED, submittedRequestException);\n                 throw submittedRequestException;\n             } else {\n                 CorsErrorResponseException notAuthorizedException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n-                fireErrorEvent(event, Errors.INVALID_REQUEST, notAuthorizedException);\n+                fireErrorEvent(event, Errors.ACCESS_DENIED, notAuthorizedException);\n                 throw notAuthorizedException;\n             }\n         } catch (ErrorResponseException | CorsErrorResponseException cause) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjA3Mg==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142072", "bodyText": "An Errors.ACCESS_DENIED makes more sense.", "author": "pedroigor", "createdAt": "2021-02-09T18:44:14Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);\n+                throw submittedRequestException;\n             } else {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n+                CorsErrorResponseException notAuthorizedException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, notAuthorizedException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDkzMw==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190933", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -252,11 +252,11 @@ public class AuthorizationTokenService {\n \n             if (request.isSubmitRequest()) {\n                 CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n-                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);\n+                fireErrorEvent(event, Errors.ACCESS_DENIED, submittedRequestException);\n                 throw submittedRequestException;\n             } else {\n                 CorsErrorResponseException notAuthorizedException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n-                fireErrorEvent(event, Errors.INVALID_REQUEST, notAuthorizedException);\n+                fireErrorEvent(event, Errors.ACCESS_DENIED, notAuthorizedException);\n                 throw notAuthorizedException;\n             }\n         } catch (ErrorResponseException | CorsErrorResponseException cause) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjI3Ng==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142276", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "author": "pedroigor", "createdAt": "2021-02-09T18:44:33Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDk3Ng==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190976", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -427,7 +427,7 @@ public class AuthorizationTokenService {\n \n         if (issuedFor == null) {\n             CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n-            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_REQUEST, missingIssuedForException);\n             throw missingIssuedForException;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjMzMw==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142333", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "author": "pedroigor", "createdAt": "2021-02-09T18:44:39Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            throw missingIssuedForException;\n         }\n \n         ClientModel clientModel = request.getRealm().getClientByClientId(issuedFor);\n \n         if (clientModel == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unknownServerIdException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id: [\" + issuedFor + \"]\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNKNOWN_SERVER_ID, unknownServerIdException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTAxNA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191014", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -427,7 +427,7 @@ public class AuthorizationTokenService {\n \n         if (issuedFor == null) {\n             CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n-            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_REQUEST, missingIssuedForException);\n             throw missingIssuedForException;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjQ1Mw==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142453", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "author": "pedroigor", "createdAt": "2021-02-09T18:44:49Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            throw missingIssuedForException;\n         }\n \n         ClientModel clientModel = request.getRealm().getClientByClientId(issuedFor);\n \n         if (clientModel == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unknownServerIdException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id: [\" + issuedFor + \"]\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNKNOWN_SERVER_ID, unknownServerIdException);\n+            throw unknownServerIdException;\n         }\n \n         ResourceServer resourceServer = resourceServerStore.findById(clientModel.getId());\n \n         if (resourceServer == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Client does not support permissions\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unsupportedPermissionsException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Client does not support permissions\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_PERMISSIONS, unsupportedPermissionsException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTAzOA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191038", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -427,7 +427,7 @@ public class AuthorizationTokenService {\n \n         if (issuedFor == null) {\n             CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n-            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_REQUEST, missingIssuedForException);\n             throw missingIssuedForException;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjUxOA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142518", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "author": "pedroigor", "createdAt": "2021-02-09T18:44:55Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -430,7 +460,9 @@ private EvaluationContext createEvaluationContext(KeycloakAuthorizationRequest r\n         BiFunction<KeycloakAuthorizationRequest, AuthorizationProvider, EvaluationContext> evaluationContextProvider = SUPPORTED_CLAIM_TOKEN_FORMATS.get(claimTokenFormat);\n \n         if (evaluationContextProvider == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unsupportedClaimTokenFormatException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_CLAIM_TOKEN_FORMAT, unsupportedClaimTokenFormatException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTA2MQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191061", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -461,7 +461,7 @@ public class AuthorizationTokenService {\n \n         if (evaluationContextProvider == null) {\n             CorsErrorResponseException unsupportedClaimTokenFormatException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n-            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_CLAIM_TOKEN_FORMAT, unsupportedClaimTokenFormatException);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_REQUEST, unsupportedClaimTokenFormatException);\n             throw unsupportedClaimTokenFormatException;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjgwOQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142809", "bodyText": "Could you please, remove changes that are basically formatting the code?", "author": "pedroigor", "createdAt": "2021-02-09T18:45:23Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -469,9 +501,9 @@ private EvaluationContext createEvaluationContext(KeycloakAuthorizationRequest r\n     }\n \n     private void resolvePreviousGrantedPermissions(PermissionTicketToken ticket,\n-            KeycloakAuthorizationRequest request, ResourceServer resourceServer,\n-            Map<String, ResourcePermission> permissionsToEvaluate, ResourceStore resourceStore, ScopeStore scopeStore,\n-            AtomicInteger limit) {\n+                                                   KeycloakAuthorizationRequest request, ResourceServer resourceServer,", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTEwNQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191105", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -501,9 +501,9 @@ public class AuthorizationTokenService {\n     }\n \n     private void resolvePreviousGrantedPermissions(PermissionTicketToken ticket,\n-                                                   KeycloakAuthorizationRequest request, ResourceServer resourceServer,\n-                                                   Map<String, ResourcePermission> permissionsToEvaluate, ResourceStore resourceStore, ScopeStore scopeStore,\n-                                                   AtomicInteger limit) {\n+            KeycloakAuthorizationRequest request, ResourceServer resourceServer,\n+            Map<String, ResourcePermission> permissionsToEvaluate, ResourceStore resourceStore, ScopeStore scopeStore,\n+            AtomicInteger limit) {\n         AccessToken rpt = request.getRpt();\n \n         if (rpt != null && rpt.isActive()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzE4Mg==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143182", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "author": "pedroigor", "createdAt": "2021-02-09T18:45:51Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -636,12 +668,14 @@ private void resolveResourcePermission(KeycloakAuthorizationRequest request,\n         }\n \n         if (permissionsToEvaluate.isEmpty()) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidResourceException = new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_RESOURCE, invalidResourceException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTE0Mw==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191143", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -669,13 +669,13 @@ public class AuthorizationTokenService {\n \n         if (permissionsToEvaluate.isEmpty()) {\n             CorsErrorResponseException invalidResourceException = new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n-            fireErrorEvent(request.getEvent(), Errors.INVALID_RESOURCE, invalidResourceException);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_REQUEST, invalidResourceException);\n             throw invalidResourceException;\n         }\n     }\n \n     private Set<Scope> resolveRequestedScopes(KeycloakAuthorizationRequest request,\n-                                              ResourceServer resourceServer, ScopeStore scopeStore, Permission permission) {\n+            ResourceServer resourceServer, ScopeStore scopeStore, Permission permission) {\n         String clientAdditionalScopes = request.getScope();\n         Set<String> requestedScopes = permission.getScopes();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzI4Mw==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143283", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "author": "pedroigor", "createdAt": "2021-02-09T18:46:01Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -657,14 +691,16 @@ private void resolveResourcePermission(KeycloakAuthorizationRequest request,\n                 Objects::nonNull).collect(Collectors.toSet());\n \n         if (!requestedScopes.isEmpty() && requestedScopesModel.isEmpty()) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidScopeException = new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_SCOPE, invalidScopeException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTE2OQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191169", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -692,15 +692,15 @@ public class AuthorizationTokenService {\n \n         if (!requestedScopes.isEmpty() && requestedScopesModel.isEmpty()) {\n             CorsErrorResponseException invalidScopeException = new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n-            fireErrorEvent(request.getEvent(), Errors.INVALID_SCOPE, invalidScopeException);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_REQUEST, invalidScopeException);\n             throw invalidScopeException;\n         }\n         return requestedScopesModel;\n     }\n \n     private ResourcePermission addPermission(KeycloakAuthorizationRequest request, ResourceServer resourceServer,\n-                                             AuthorizationProvider authorization, Map<String, ResourcePermission> permissionsToEvaluate, AtomicInteger limit,\n-                                             Set<Scope> requestedScopesModel, Resource resource) {\n+            AuthorizationProvider authorization, Map<String, ResourcePermission> permissionsToEvaluate, AtomicInteger limit,\n+            Set<Scope> requestedScopesModel, Resource resource) {\n         ResourcePermission permission = permissionsToEvaluate.get(resource.getId());\n \n         if (permission == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzgxNw==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143817", "bodyText": "I would just use Errors.INVALID_PERMISSION_TICKET. The details should be enough to understand what happened.", "author": "pedroigor", "createdAt": "2021-02-09T18:46:50Z", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -690,11 +726,15 @@ private PermissionTicketToken verifyPermissionTicket(KeycloakAuthorizationReques\n \n         PermissionTicketToken ticket = request.getKeycloakSession().tokens().decode(ticketString, PermissionTicketToken.class);\n         if (ticket == null) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n+            CorsErrorResponseException ticketVerificationException = new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n+            fireErrorEvent(request.getEvent(), Errors.TICKET_VERIFICATION_FAILED, ticketVerificationException);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTIwMQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191201", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\nindex 8eef806500..d4997ce211 100644\n--- a/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n+++ b/services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java\n\n@@ -727,7 +727,7 @@ public class AuthorizationTokenService {\n         PermissionTicketToken ticket = request.getKeycloakSession().tokens().decode(ticketString, PermissionTicketToken.class);\n         if (ticket == null) {\n             CorsErrorResponseException ticketVerificationException = new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n-            fireErrorEvent(request.getEvent(), Errors.TICKET_VERIFICATION_FAILED, ticketVerificationException);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_PERMISSION_TICKET, ticketVerificationException);\n             throw ticketVerificationException;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0NTE1MA==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573145150", "bodyText": "Errors.INVALID_REQUEST?", "author": "pedroigor", "createdAt": "2021-02-09T18:48:48Z", "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1290,16 +1293,20 @@ public Response permissionGrant() {\n         if (rpt != null) {\n             AccessToken accessToken = session.tokens().decode(rpt, AccessToken.class);\n             if (accessToken == null) {\n+                event.error(Errors.INVALID_RPT_SIGNATURE);", "originalCommit": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTI0Ng==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191246", "bodyText": "agreed", "author": "jmrodriguez", "createdAt": "2021-02-09T19:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0NTE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "e20a252383943c52de0d7767fe05f27639c4b3dc", "chunk": "diff --git a/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java b/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java\nindex b6f1bdb7ed..7b125b5aa4 100644\n--- a/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java\n+++ b/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java\n\n@@ -1293,7 +1293,7 @@ public class TokenEndpoint {\n         if (rpt != null) {\n             AccessToken accessToken = session.tokens().decode(rpt, AccessToken.class);\n             if (accessToken == null) {\n-                event.error(Errors.INVALID_RPT_SIGNATURE);\n+                event.error(Errors.INVALID_REQUEST);\n                 throw new CorsErrorResponseException(cors, \"invalid_rpt\", \"RPT signature is invalid\", Status.FORBIDDEN);\n             }\n \n"}}, {"oid": "e20a252383943c52de0d7767fe05f27639c4b3dc", "url": "https://github.com/keycloak/keycloak/commit/e20a252383943c52de0d7767fe05f27639c4b3dc", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "committedDate": "2021-02-10T14:11:15Z", "type": "forcePushed"}, {"oid": "99e531623dce97fa7ebe3aacf96dff6d2218e7bc", "url": "https://github.com/keycloak/keycloak/commit/99e531623dce97fa7ebe3aacf96dff6d2218e7bc", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "committedDate": "2021-02-11T14:31:31Z", "type": "forcePushed"}, {"oid": "e17f5659d8f974f7c19db455e700a60aed7d5b9f", "url": "https://github.com/keycloak/keycloak/commit/e17f5659d8f974f7c19db455e700a60aed7d5b9f", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "committedDate": "2021-02-17T20:00:50Z", "type": "forcePushed"}, {"oid": "2eab51d8dc388aa8b4b7209364d05811fbe6a4c5", "url": "https://github.com/keycloak/keycloak/commit/2eab51d8dc388aa8b4b7209364d05811fbe6a4c5", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "committedDate": "2021-02-22T18:17:47Z", "type": "forcePushed"}, {"oid": "f021a08f9b85abb40db84cabbb87bcb2876739c4", "url": "https://github.com/keycloak/keycloak/commit/f021a08f9b85abb40db84cabbb87bcb2876739c4", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "committedDate": "2021-02-22T18:28:19Z", "type": "forcePushed"}, {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "url": "https://github.com/keycloak/keycloak/commit/5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "committedDate": "2021-02-22T18:35:26Z", "type": "commit"}, {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "url": "https://github.com/keycloak/keycloak/commit/5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "committedDate": "2021-02-22T18:35:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDUzNzcwNg==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580537706", "bodyText": "I promise this is the last comment from me :)\nDo you really need to audit this every time?", "author": "pedroigor", "createdAt": "2021-02-22T19:40:40Z", "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1318,6 +1325,7 @@ public Response permissionGrant() {\n         List<String> permissions = formParams.get(\"permission\");\n \n         if (permissions != null) {\n+            event.detail(Details.PERMISSION, String.join(\"|\", permissions));", "originalCommit": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDU1MTU2Ng==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580551566", "bodyText": "The intention here is to have enough data in the audit records should a deep \"who is doing what and how\" audit takes place, to prove accountability of access to resources.\nConsider a company with (very) sensitive resources, where it is critical that only the right users with the right permissions can consume them.", "author": "jmrodriguez", "createdAt": "2021-02-22T20:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDUzNzcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDU2Nzk0NQ==", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580567945", "bodyText": "Yeah, I see that. I'm more concerned about performance and doing this every time.\nI'm going to accept as-is for now and keep here a note that we might review this later if it becomes an issue. If people are not willing to sacrifice performance for a better audit/security we should probably think about changing the authorization settings for a client to configure how the audit should behave.", "author": "pedroigor", "createdAt": "2021-02-22T20:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDUzNzcwNg=="}], "type": "inlineReview", "revised_code": null}]}