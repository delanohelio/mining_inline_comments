{"pr_number": 7081, "pr_title": "[KEYCLOAK-11784] - Quarkus Keycloak Application", "pr_createdAt": "2020-05-19T13:14:07Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7081", "timeline": [{"oid": "1152898d15a0b6233db31d676dc3696bd8094a57", "url": "https://github.com/keycloak/keycloak/commit/1152898d15a0b6233db31d676dc3696bd8094a57", "message": "[KEYCLOAK-11784] - Quarkus Keycloak Application", "committedDate": "2020-05-19T13:13:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyNzQ4MA==", "url": "https://github.com/keycloak/keycloak/pull/7081#discussion_r427327480", "bodyText": "Would it be possible to move the initialization logic into a dedicated protected init() method?", "author": "thomasdarimont", "createdAt": "2020-05-19T14:04:27Z", "path": "quarkus/runtime/src/main/java/org/keycloak/QuarkusKeycloakApplication.java", "diffHunk": "@@ -1,10 +1,402 @@\n package org.keycloak;\n \n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n import javax.ws.rs.ApplicationPath;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.jboss.logging.Logger;\n+import org.keycloak.common.util.Resteasy;\n+import org.keycloak.config.ConfigProviderFactory;\n+import org.keycloak.exportimport.ExportImportManager;\n+import org.keycloak.migration.MigrationModelManager;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.KeycloakSessionTask;\n+import org.keycloak.models.ModelDuplicateException;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.UserProvider;\n+import org.keycloak.models.dblock.DBLockManager;\n+import org.keycloak.models.dblock.DBLockProvider;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.models.utils.PostMigrationEvent;\n+import org.keycloak.models.utils.RepresentationToModel;\n+import org.keycloak.platform.Platform;\n+import org.keycloak.platform.PlatformProvider;\n+import org.keycloak.representations.idm.RealmRepresentation;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.services.DefaultKeycloakSessionFactory;\n+import org.keycloak.services.ServicesLogger;\n+import org.keycloak.services.error.KeycloakErrorHandler;\n+import org.keycloak.services.filters.KeycloakSecurityHeadersFilter;\n+import org.keycloak.services.filters.KeycloakTransactionCommitter;\n+import org.keycloak.services.managers.ApplianceBootstrap;\n+import org.keycloak.services.managers.RealmManager;\n+import org.keycloak.services.managers.UserStorageSyncManager;\n+import org.keycloak.services.resources.JsResource;\n import org.keycloak.services.resources.KeycloakApplication;\n+import org.keycloak.services.resources.RealmsResource;\n+import org.keycloak.services.resources.RobotsResource;\n+import org.keycloak.services.resources.ThemeResource;\n+import org.keycloak.services.resources.WelcomeResource;\n+import org.keycloak.services.resources.admin.AdminRoot;\n+import org.keycloak.services.scheduled.ClearExpiredClientInitialAccessTokens;\n+import org.keycloak.services.scheduled.ClearExpiredEvents;\n+import org.keycloak.services.scheduled.ClearExpiredUserSessions;\n+import org.keycloak.services.scheduled.ClusterAwareScheduledTaskRunner;\n+import org.keycloak.services.scheduled.ScheduledTaskRunner;\n+import org.keycloak.services.util.ObjectMapperResolver;\n+import org.keycloak.timer.TimerProvider;\n+import org.keycloak.transaction.JtaTransactionManagerLookup;\n+import org.keycloak.util.JsonSerialization;\n \n @ApplicationPath(\"/\")\n public class QuarkusKeycloakApplication extends KeycloakApplication {\n \n+    private static final Logger logger = Logger.getLogger(KeycloakApplication.class);\n+\n+    protected final PlatformProvider platform = Platform.getPlatform();\n+\n+    protected Set<Object> singletons = new HashSet<Object>();\n+    protected Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+    protected KeycloakSessionFactory sessionFactory;\n+\n+    public QuarkusKeycloakApplication() {\n+\n+        try {", "originalCommit": "1152898d15a0b6233db31d676dc3696bd8094a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MzM3OQ==", "url": "https://github.com/keycloak/keycloak/pull/7081#discussion_r427353379", "bodyText": "It is a simple change. But that is subject to change. Short term, we are planning quite a few other changes that might impact your code. E.g.; master realm initialization shall move to another place. We should really avoid spreading bootstrap code across different places.\nBut I have no objection :) @stianst ?", "author": "pedroigor", "createdAt": "2020-05-19T14:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyNzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MjExMQ==", "url": "https://github.com/keycloak/keycloak/pull/7081#discussion_r427372111", "bodyText": "Short term, we are planning quite a few other changes that might impact your code.\nI'm aware of that :) Sometimes, it's hard to keep up with your speed in my spare-time :D\nI'm asking, because the initialization within this constructor requires a bunch of infrastructure to be in place already: The required components need to be either statically configured or populated in a JNDI environment.\nIt would be much nicer if the dependencies needed by the KeycloakApplication instance could be passed in as constructor arguments directly, or indirectly via some kind of Context object that's passed in.\nThis would allow for more control about when which required component is created.\nAnother benefit would be to ease subclassing the KeycloakApplication with more control about the component bootstrap there.\nIIRC it is possible to configure the org.jboss.resteasy.plugins.server.servlet.HttpServlet30Dispatcher with a predefined javax.ws.rs.Application instance instead of just providing it with a FQCN. This could also ease testing of KeycloakApplication components due to easier mocking.\nFor instance, the HttpServlet30Dispatcher could be configured and deployed programmatically via a ServletContextListener which would then bootstrap the whole environment.", "author": "thomasdarimont", "createdAt": "2020-05-19T14:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyNzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTI1Ng==", "url": "https://github.com/keycloak/keycloak/pull/7081#discussion_r427525256", "bodyText": "The thing is that we are dropping Servlet API for Quarkus. We are now using Vert.x.\nWe are also looking forward to making KeycloakApplication really specific to bootstrapping JAX-RS whereas the session factory is basically a singleton that can be initialized from itself.\nI guess you are doing this for your Keycloak On SB project, right? If we just make the session factory doing all the heavy work you can easily bootstrap the server, from everywhere.", "author": "pedroigor", "createdAt": "2020-05-19T18:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyNzQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2ODUzMg==", "url": "https://github.com/keycloak/keycloak/pull/7081#discussion_r427768532", "bodyText": "In this PR we're just making a copy of the KeycloakApplication in order to make more drastic changes here without affecting the main distribution.\nLet's discuss this on the mailing list instead of this PR.", "author": "stianst", "createdAt": "2020-05-20T06:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyNzQ4MA=="}], "type": "inlineReview", "revised_code": null}]}