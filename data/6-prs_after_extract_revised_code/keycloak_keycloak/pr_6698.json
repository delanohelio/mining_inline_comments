{"pr_number": 6698, "pr_title": "KEYCLOAK-10884: Need clock skew for SAML identity provider", "pr_createdAt": "2020-01-27T09:05:47Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6698", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3MjIxMQ==", "url": "https://github.com/keycloak/keycloak/pull/6698#discussion_r371772211", "bodyText": "We are not using static waits in testsuite, we have a possibility to \"move\" in time. You can just use this method: https://github.com/keycloak/keycloak/blob/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java#L581 You can look for usages of the method to see how it works. It basically changes the time in Keycloak server, so you don't need to wait.", "author": "mhajas", "createdAt": "2020-01-28T12:27:31Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java", "diffHunk": "@@ -256,6 +262,75 @@ public void loginClientWithDotsInName() throws Exception {\n         Assert.assertThat(samlResponse.getSamlObject(), isSamlResponse(JBossSAMLURIConstants.STATUS_SUCCESS));\n     }\n \n+    @Test\n+    public void loginClientExpiredResponseFromIdP() throws Exception {\n+        // set the provider realm lifespans to 1 sec, this way the SAML response will be expired\n+        try (AutoCloseable c = new RealmAttributeUpdater(adminClient.realm(bc.providerRealmName()))\n+                .setAccessTokenLifespan(1)\n+                .setAccessCodeLifespan(1)\n+                .update()) {\n+\n+            AuthnRequestType loginRep = SamlClient.createLoginRequestDocument(AbstractSamlTest.SAML_CLIENT_ID_SALES_POST + \".dot/ted\", getAuthServerContextRoot() + \"/sales-post/saml\", null);\n+\n+            Document doc = SAML2Request.convert(loginRep);\n+\n+            new SamlClientBuilder()\n+              .authnRequest(getAuthServerSamlEndpoint(bc.consumerRealmName()), doc, Binding.POST).build()   // Request to consumer IdP\n+              .login().idp(bc.getIDPAlias()).build()\n+\n+              .processSamlResponse(Binding.POST)    // AuthnRequest to producer IdP\n+                .targetAttributeSamlRequest()\n+                .build()\n+\n+              .login().user(bc.getUserLogin(), bc.getUserPassword()).build()\n+\n+              .sleep(1500)    // sleep 1.5 seconds to expire the document", "originalCommit": "c3e61d8392c87df5f2751b602fe6925cbffa453a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxMDUxNg==", "url": "https://github.com/keycloak/keycloak/pull/6698#discussion_r372410516", "bodyText": "Done!", "author": "rmartinc", "createdAt": "2020-01-29T14:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3MjIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "08eb01bbbc143b83cea50d4c7f5cebf506d60daa", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java\nindex dfa8be66aa..5f10f5d87b 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java\n\n@@ -262,75 +256,6 @@ public final class KcSamlBrokerTest extends AbstractAdvancedBrokerTest {\n         Assert.assertThat(samlResponse.getSamlObject(), isSamlResponse(JBossSAMLURIConstants.STATUS_SUCCESS));\n     }\n \n-    @Test\n-    public void loginClientExpiredResponseFromIdP() throws Exception {\n-        // set the provider realm lifespans to 1 sec, this way the SAML response will be expired\n-        try (AutoCloseable c = new RealmAttributeUpdater(adminClient.realm(bc.providerRealmName()))\n-                .setAccessTokenLifespan(1)\n-                .setAccessCodeLifespan(1)\n-                .update()) {\n-\n-            AuthnRequestType loginRep = SamlClient.createLoginRequestDocument(AbstractSamlTest.SAML_CLIENT_ID_SALES_POST + \".dot/ted\", getAuthServerContextRoot() + \"/sales-post/saml\", null);\n-\n-            Document doc = SAML2Request.convert(loginRep);\n-\n-            new SamlClientBuilder()\n-              .authnRequest(getAuthServerSamlEndpoint(bc.consumerRealmName()), doc, Binding.POST).build()   // Request to consumer IdP\n-              .login().idp(bc.getIDPAlias()).build()\n-\n-              .processSamlResponse(Binding.POST)    // AuthnRequest to producer IdP\n-                .targetAttributeSamlRequest()\n-                .build()\n-\n-              .login().user(bc.getUserLogin(), bc.getUserPassword()).build()\n-\n-              .sleep(1500)    // sleep 1.5 seconds to expire the document\n-              .processSamlResponse(Binding.POST)    // Response from producer IdP should fail\n-                .build()\n-                .execute(hr -> assertThat(hr, statusCodeIsHC(Response.Status.BAD_REQUEST)));\n-        }\n-    }\n-\n-    @Test\n-    public void loginClientExpiredResponseFromIdPWithClockSkew() throws Exception {\n-        // set the provider realm lifespans to 1 sec, this way the SAML response will be expired\n-        try (AutoCloseable c = new RealmAttributeUpdater(adminClient.realm(bc.providerRealmName()))\n-                .setAccessTokenLifespan(1)\n-                .setAccessCodeLifespan(1)\n-                .update();\n-             Closeable idpUpdater = new IdentityProviderAttributeUpdater(identityProviderResource)\n-                .setAttribute(SAMLIdentityProviderConfig.ALLOWED_CLOCK_SKEW, \"30\")\n-                .update()) {\n-\n-            AuthnRequestType loginRep = SamlClient.createLoginRequestDocument(AbstractSamlTest.SAML_CLIENT_ID_SALES_POST + \".dot/ted\", getAuthServerContextRoot() + \"/sales-post/saml\", null);\n-\n-            Document doc = SAML2Request.convert(loginRep);\n-\n-            SAMLDocumentHolder samlResponse = new SamlClientBuilder()\n-              .authnRequest(getAuthServerSamlEndpoint(bc.consumerRealmName()), doc, Binding.POST).build()   // Request to consumer IdP\n-              .login().idp(bc.getIDPAlias()).build()\n-\n-              .processSamlResponse(Binding.POST)    // AuthnRequest to producer IdP\n-                .targetAttributeSamlRequest()\n-                .build()\n-\n-              .login().user(bc.getUserLogin(), bc.getUserPassword()).build()\n-\n-              .sleep(1500)    // sleep 1.5 seconds to expire the document\n-              .processSamlResponse(Binding.POST)    // Response from producer IdP expired but valid with the clock skew\n-                .build()\n-\n-              // first-broker flow\n-              .updateProfile().firstName(\"a\").lastName(\"b\").email(bc.getUserEmail()).username(bc.getUserLogin()).build()\n-              .followOneRedirect()\n-\n-              .getSamlResponse(Binding.POST);       // Response from consumer IdP\n-\n-            Assert.assertThat(samlResponse, Matchers.notNullValue());\n-            Assert.assertThat(samlResponse.getSamlObject(), isSamlResponse(JBossSAMLURIConstants.STATUS_SUCCESS));\n-        }\n-    }\n-\n     @Test\n     public void emptyAttributeToRoleMapperTest() throws ParsingException, ConfigurationException, ProcessingException {\n         createRolesForRealm(bc.consumerRealmName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3NzExMg==", "url": "https://github.com/keycloak/keycloak/pull/6698#discussion_r371777112", "bodyText": "I would prefer to create a new test class for these two tests and remove it from general KcSamlBrokerTest. You can have a look at https://github.com/keycloak/keycloak/blob/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerSessionNotOnOrAfterTest.java to see what is needed for a new class.", "author": "mhajas", "createdAt": "2020-01-28T12:38:57Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java", "diffHunk": "@@ -256,6 +262,75 @@ public void loginClientWithDotsInName() throws Exception {\n         Assert.assertThat(samlResponse.getSamlObject(), isSamlResponse(JBossSAMLURIConstants.STATUS_SUCCESS));\n     }\n \n+    @Test\n+    public void loginClientExpiredResponseFromIdP() throws Exception {", "originalCommit": "c3e61d8392c87df5f2751b602fe6925cbffa453a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxMDY5Ng==", "url": "https://github.com/keycloak/keycloak/pull/6698#discussion_r372410696", "bodyText": "Done!", "author": "rmartinc", "createdAt": "2020-01-29T14:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3NzExMg=="}], "type": "inlineReview", "revised_code": {"commit": "08eb01bbbc143b83cea50d4c7f5cebf506d60daa", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java\nindex dfa8be66aa..5f10f5d87b 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlBrokerTest.java\n\n@@ -262,75 +256,6 @@ public final class KcSamlBrokerTest extends AbstractAdvancedBrokerTest {\n         Assert.assertThat(samlResponse.getSamlObject(), isSamlResponse(JBossSAMLURIConstants.STATUS_SUCCESS));\n     }\n \n-    @Test\n-    public void loginClientExpiredResponseFromIdP() throws Exception {\n-        // set the provider realm lifespans to 1 sec, this way the SAML response will be expired\n-        try (AutoCloseable c = new RealmAttributeUpdater(adminClient.realm(bc.providerRealmName()))\n-                .setAccessTokenLifespan(1)\n-                .setAccessCodeLifespan(1)\n-                .update()) {\n-\n-            AuthnRequestType loginRep = SamlClient.createLoginRequestDocument(AbstractSamlTest.SAML_CLIENT_ID_SALES_POST + \".dot/ted\", getAuthServerContextRoot() + \"/sales-post/saml\", null);\n-\n-            Document doc = SAML2Request.convert(loginRep);\n-\n-            new SamlClientBuilder()\n-              .authnRequest(getAuthServerSamlEndpoint(bc.consumerRealmName()), doc, Binding.POST).build()   // Request to consumer IdP\n-              .login().idp(bc.getIDPAlias()).build()\n-\n-              .processSamlResponse(Binding.POST)    // AuthnRequest to producer IdP\n-                .targetAttributeSamlRequest()\n-                .build()\n-\n-              .login().user(bc.getUserLogin(), bc.getUserPassword()).build()\n-\n-              .sleep(1500)    // sleep 1.5 seconds to expire the document\n-              .processSamlResponse(Binding.POST)    // Response from producer IdP should fail\n-                .build()\n-                .execute(hr -> assertThat(hr, statusCodeIsHC(Response.Status.BAD_REQUEST)));\n-        }\n-    }\n-\n-    @Test\n-    public void loginClientExpiredResponseFromIdPWithClockSkew() throws Exception {\n-        // set the provider realm lifespans to 1 sec, this way the SAML response will be expired\n-        try (AutoCloseable c = new RealmAttributeUpdater(adminClient.realm(bc.providerRealmName()))\n-                .setAccessTokenLifespan(1)\n-                .setAccessCodeLifespan(1)\n-                .update();\n-             Closeable idpUpdater = new IdentityProviderAttributeUpdater(identityProviderResource)\n-                .setAttribute(SAMLIdentityProviderConfig.ALLOWED_CLOCK_SKEW, \"30\")\n-                .update()) {\n-\n-            AuthnRequestType loginRep = SamlClient.createLoginRequestDocument(AbstractSamlTest.SAML_CLIENT_ID_SALES_POST + \".dot/ted\", getAuthServerContextRoot() + \"/sales-post/saml\", null);\n-\n-            Document doc = SAML2Request.convert(loginRep);\n-\n-            SAMLDocumentHolder samlResponse = new SamlClientBuilder()\n-              .authnRequest(getAuthServerSamlEndpoint(bc.consumerRealmName()), doc, Binding.POST).build()   // Request to consumer IdP\n-              .login().idp(bc.getIDPAlias()).build()\n-\n-              .processSamlResponse(Binding.POST)    // AuthnRequest to producer IdP\n-                .targetAttributeSamlRequest()\n-                .build()\n-\n-              .login().user(bc.getUserLogin(), bc.getUserPassword()).build()\n-\n-              .sleep(1500)    // sleep 1.5 seconds to expire the document\n-              .processSamlResponse(Binding.POST)    // Response from producer IdP expired but valid with the clock skew\n-                .build()\n-\n-              // first-broker flow\n-              .updateProfile().firstName(\"a\").lastName(\"b\").email(bc.getUserEmail()).username(bc.getUserLogin()).build()\n-              .followOneRedirect()\n-\n-              .getSamlResponse(Binding.POST);       // Response from consumer IdP\n-\n-            Assert.assertThat(samlResponse, Matchers.notNullValue());\n-            Assert.assertThat(samlResponse.getSamlObject(), isSamlResponse(JBossSAMLURIConstants.STATUS_SUCCESS));\n-        }\n-    }\n-\n     @Test\n     public void emptyAttributeToRoleMapperTest() throws ParsingException, ConfigurationException, ProcessingException {\n         createRolesForRealm(bc.consumerRealmName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3NzkxNA==", "url": "https://github.com/keycloak/keycloak/pull/6698#discussion_r371777914", "bodyText": "Not needed remove please. See comment in test.", "author": "mhajas", "createdAt": "2020-01-28T12:40:43Z", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/SamlClient.java", "diffHunk": "@@ -86,6 +86,23 @@ public HttpUriRequest perform(CloseableHttpClient client, URI uri, CloseableHttp\n         }\n     }\n \n+    public static final class Sleep implements Step {", "originalCommit": "c3e61d8392c87df5f2751b602fe6925cbffa453a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxMDgxNw==", "url": "https://github.com/keycloak/keycloak/pull/6698#discussion_r372410817", "bodyText": "Removed!", "author": "rmartinc", "createdAt": "2020-01-29T14:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3NzkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "08eb01bbbc143b83cea50d4c7f5cebf506d60daa", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/SamlClient.java b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/SamlClient.java\nindex b82f6f9c92..06ed39a749 100644\n--- a/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/SamlClient.java\n+++ b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/SamlClient.java\n\n@@ -86,23 +86,6 @@ public class SamlClient {\n         }\n     }\n \n-    public static final class Sleep implements Step {\n-\n-        private long millis = 0;\n-\n-        public Sleep(long millis) {\n-            this.millis = millis;\n-        }\n-\n-        @Override\n-        public HttpUriRequest perform(CloseableHttpClient client, URI uri, CloseableHttpResponse response, HttpClientContext context) throws Exception {\n-            if (millis > 0) {\n-                Thread.sleep(millis);\n-            }\n-            return null;\n-        }\n-    }\n-\n     public static class RedirectStrategyWithSwitchableFollowRedirect extends LaxRedirectStrategy {\n \n         public boolean redirectable = true;\n"}}, {"oid": "08eb01bbbc143b83cea50d4c7f5cebf506d60daa", "url": "https://github.com/keycloak/keycloak/commit/08eb01bbbc143b83cea50d4c7f5cebf506d60daa", "message": "KEYCLOAK-10884: Need clock skew for SAML identity provider", "committedDate": "2020-01-29T14:13:25Z", "type": "forcePushed"}, {"oid": "4a6bd4bbda7afbe46ffcb41f8ff48150cf2648a5", "url": "https://github.com/keycloak/keycloak/commit/4a6bd4bbda7afbe46ffcb41f8ff48150cf2648a5", "message": "KEYCLOAK-10884: Need clock skew for SAML identity provider", "committedDate": "2020-02-03T08:43:31Z", "type": "commit"}, {"oid": "4a6bd4bbda7afbe46ffcb41f8ff48150cf2648a5", "url": "https://github.com/keycloak/keycloak/commit/4a6bd4bbda7afbe46ffcb41f8ff48150cf2648a5", "message": "KEYCLOAK-10884: Need clock skew for SAML identity provider", "committedDate": "2020-02-03T08:43:31Z", "type": "forcePushed"}]}