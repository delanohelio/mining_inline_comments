{"pr_number": 7241, "pr_title": "KEYCLOAK-14234 KEYCLOAK-13666 support for running adapter tests with different hostnames for auth and app servers", "pr_createdAt": "2020-07-08T06:50:12Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7241", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNjQ3MA==", "url": "https://github.com/keycloak/keycloak/pull/7241#discussion_r452326470", "bodyText": "Just to double check. Is this change intentional? Seems a bit suspicious to me. :)", "author": "vmuzikar", "createdAt": "2020-07-09T16:02:42Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/example/cors/CorsExampleAdapterTest.java", "diffHunk": "@@ -190,7 +184,6 @@ private String getAuthServerVersion() {\n                 \"/auth/admin/master/console/#/server-info\");\n         jsDriverTestRealmLoginPage.form().login(\"admin\", \"admin\");\n \n-        WaitUtils.waitUntilElement(By.tagName(\"body\")).is().visible();", "originalCommit": "6cd6fc8220c0b633c5ee48b1598372c53885f4cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDE2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7241#discussion_r454970165", "bodyText": "I removed it because the login method is using clickLink() function to log in, so any wait after this should not be necessary. But I can revert it if you want.", "author": "mhajas", "createdAt": "2020-07-15T11:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcxMzQzNA==", "url": "https://github.com/keycloak/keycloak/pull/7241#discussion_r455713434", "bodyText": "Thanks for the explanation. No need to revert. ;)", "author": "vmuzikar", "createdAt": "2020-07-16T11:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNjQ3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMzMxMg==", "url": "https://github.com/keycloak/keycloak/pull/7241#discussion_r452333312", "bodyText": "I think we can remove this test completely now that we we run all SAML tests with different hostnames + SSL.", "author": "vmuzikar", "createdAt": "2020-07-09T16:13:55Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLSameSiteTest.java", "diffHunk": "@@ -38,9 +39,10 @@\n @AppServerContainer(ContainerConstants.APP_SERVER_TOMCAT9)\n @AuthServerContainerExclude(AuthServerContainerExclude.AuthServer.REMOTE)\n public class SAMLSameSiteTest extends AbstractSAMLServletAdapterTest {", "originalCommit": "6cd6fc8220c0b633c5ee48b1598372c53885f4cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3NDMwOA==", "url": "https://github.com/keycloak/keycloak/pull/7241#discussion_r454974308", "bodyText": "I was thinking about this, but I was not sure. This test is running with different host even in the case when no app.server.host is configured. But you are probably right in this case, it is not useful at all, as in pipeline this test will be running with htmlunit, not chrome, and the auth server is running on localhost. So I will remove it.", "author": "mhajas", "createdAt": "2020-07-15T11:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMzMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "2d153d0dfb686dce7c8ce8457b75ce8a43c2c6d6", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLSameSiteTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLSameSiteTest.java\ndeleted file mode 100644\nindex 26e290d3ce..0000000000\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/servlet/SAMLSameSiteTest.java\n+++ /dev/null\n\n@@ -1,134 +0,0 @@\n-package org.keycloak.testsuite.adapter.servlet;\n-\n-import org.jboss.arquillian.container.test.api.Deployment;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.shrinkwrap.api.spec.WebArchive;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.keycloak.adapters.rotation.PublicKeyLocator;\n-import org.keycloak.testsuite.adapter.filter.AdapterActionsFilter;\n-import org.keycloak.testsuite.adapter.page.Employee2Servlet;\n-import org.keycloak.testsuite.adapter.page.EmployeeSigServlet;\n-import org.keycloak.testsuite.arquillian.annotation.AppServerContainer;\n-import org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude;\n-import org.keycloak.testsuite.auth.page.login.Login;\n-import org.keycloak.testsuite.updaters.ClientAttributeUpdater;\n-import org.keycloak.testsuite.util.ContainerAssume;\n-import org.keycloak.testsuite.utils.arquillian.ContainerConstants;\n-import org.openqa.selenium.By;\n-\n-import javax.ws.rs.core.UriBuilder;\n-import java.util.Collections;\n-\n-import static org.keycloak.testsuite.auth.page.AuthRealm.SAMLSERVLETDEMO;\n-import static org.keycloak.testsuite.saml.AbstractSamlTest.SAML_CLIENT_ID_EMPLOYEE_2;\n-import static org.keycloak.testsuite.saml.AbstractSamlTest.SAML_CLIENT_ID_EMPLOYEE_SIG;\n-import static org.keycloak.testsuite.util.ServerURLs.APP_SERVER_HOST;\n-import static org.keycloak.testsuite.util.URLAssert.assertCurrentUrlStartsWith;\n-import static org.keycloak.testsuite.util.WaitUtils.waitForPageToLoad;\n-import static org.keycloak.testsuite.util.WaitUtils.waitUntilElement;\n-import static org.keycloak.testsuite.util.ServerURLs.getAppServerContextRoot;\n-\n-/**\n- * @author mhajas\n- */\n-@AppServerContainer(ContainerConstants.APP_SERVER_WILDFLY)\n-// @AppServerContainer(ContainerConstants.APP_SERVER_EAP) // Should be added in: KEYCLOAK-14434\n-// @AppServerContainer(ContainerConstants.APP_SERVER_EAP6) // Should be added in: KEYCLOAK-14435\n-@AppServerContainer(ContainerConstants.APP_SERVER_TOMCAT8)\n-@AppServerContainer(ContainerConstants.APP_SERVER_TOMCAT9)\n-@AuthServerContainerExclude(AuthServerContainerExclude.AuthServer.REMOTE)\n-public class SAMLSameSiteTest extends AbstractSAMLServletAdapterTest {\n-    private static final String SAME_SITE_TEST_HOST = !\"localhost\".equals(APP_SERVER_HOST) ? getAppServerContextRoot()\n-            : getAppServerContextRoot().replace(\"localhost\", \"app-saml-127-0-0-1.nip.io\");\n-    private static final String NIP_IO_EMPLOYEE2_URL = SAME_SITE_TEST_HOST + \"/employee2/\";\n-    private static final String NIP_IO_EMPLOYEE_SIG_URL = SAME_SITE_TEST_HOST + \"/employee-sig/\";\n-\n-    @Deployment(name = Employee2Servlet.DEPLOYMENT_NAME)\n-    protected static WebArchive employee2() {\n-        return samlServletDeployment(Employee2Servlet.DEPLOYMENT_NAME, WEB_XML_WITH_ACTION_FILTER, SendUsernameServlet.class, AdapterActionsFilter.class, PublicKeyLocator.class)\n-                .addAsWebInfResource(undertowHandlersConf, UNDERTOW_HANDLERS_CONF);\n-    }\n-\n-    @Deployment(name = EmployeeSigServlet.DEPLOYMENT_NAME)\n-    protected static WebArchive employeeSig() {\n-        return samlServletDeployment(EmployeeSigServlet.DEPLOYMENT_NAME, SendUsernameServlet.class)\n-                .addAsWebInfResource(undertowHandlersConf, UNDERTOW_HANDLERS_CONF);\n-    }\n-\n-    @Page\n-    protected Employee2Servlet employee2ServletPage;\n-\n-    @BeforeClass\n-    public static void enabledOnlyWithSSL() {\n-        ContainerAssume.assumeAuthServerSSL();\n-        ContainerAssume.assumeAppServerSSL();\n-    }\n-\n-    @Test\n-    public void samlPostWorksWithSameSiteCookieTest() {\n-        testLoginLogoutWithDifferentUrl(SAML_CLIENT_ID_EMPLOYEE_2, NIP_IO_EMPLOYEE2_URL, testRealmSAMLPostLoginPage);\n-    }\n-\n-    @Test\n-    public void samlRedirectWorksWithSameSiteCookieTest() {\n-        testLoginLogoutWithDifferentUrl(SAML_CLIENT_ID_EMPLOYEE_SIG, NIP_IO_EMPLOYEE_SIG_URL, testRealmSAMLRedirectLoginPage);\n-    }\n-\n-    @Test\n-    public void testSSOPostRedirect() {\n-        getCleanup(SAMLSERVLETDEMO).addCleanup(ClientAttributeUpdater.forClient(adminClient, SAMLSERVLETDEMO, SAML_CLIENT_ID_EMPLOYEE_SIG)\n-                .setRedirectUris(Collections.singletonList(NIP_IO_EMPLOYEE_SIG_URL + \"*\"))\n-                .setAdminUrl(NIP_IO_EMPLOYEE_SIG_URL + \"saml\")\n-                .update());\n-\n-        getCleanup(SAMLSERVLETDEMO).addCleanup(ClientAttributeUpdater.forClient(adminClient, SAMLSERVLETDEMO, SAML_CLIENT_ID_EMPLOYEE_2)\n-                .setRedirectUris(Collections.singletonList(NIP_IO_EMPLOYEE2_URL + \"*\"))\n-                .setAdminUrl(NIP_IO_EMPLOYEE2_URL + \"saml\")\n-                .update());\n-\n-        // Navigate to url with nip.io to trick browser the adapter lives on different domain\n-        driver.navigate().to(NIP_IO_EMPLOYEE2_URL);\n-        assertCurrentUrlStartsWith(testRealmSAMLPostLoginPage);\n-\n-        // Login and check the user is successfully logged in\n-        testRealmSAMLPostLoginPage.form().login(bburkeUser);\n-        waitUntilElement(By.xpath(\"//body\")).text().contains(\"principal=bburke\");\n-\n-        driver.navigate().to(NIP_IO_EMPLOYEE_SIG_URL);\n-        waitUntilElement(By.xpath(\"//body\")).text().contains(\"principal=bburke\");\n-\n-        // Logout\n-        driver.navigate().to(UriBuilder.fromUri(NIP_IO_EMPLOYEE_SIG_URL).queryParam(\"GLO\", \"true\").build().toASCIIString());\n-        waitForPageToLoad();\n-\n-        // Check logged out\n-        driver.navigate().to(NIP_IO_EMPLOYEE2_URL);\n-        assertCurrentUrlStartsWith(testRealmSAMLPostLoginPage);\n-    }\n-\n-    private void testLoginLogoutWithDifferentUrl(String clientId, String newUrl, Login loginPage) {\n-        getCleanup(SAMLSERVLETDEMO).addCleanup(ClientAttributeUpdater.forClient(adminClient, SAMLSERVLETDEMO, clientId)\n-                .setRedirectUris(Collections.singletonList(newUrl + \"*\"))\n-                .setAdminUrl(newUrl + \"saml\")\n-                .update());\n-\n-        // Navigate to url with nip.io to trick browser the adapter lives on different domain\n-        driver.navigate().to(newUrl);\n-        assertCurrentUrlStartsWith(loginPage);\n-\n-        // Login and check the user is successfully logged in\n-        loginPage.form().login(bburkeUser);\n-        waitUntilElement(By.xpath(\"//body\")).text().contains(\"principal=bburke\");\n-\n-        // Logout\n-        driver.navigate().to(UriBuilder.fromUri(newUrl).queryParam(\"GLO\", \"true\").build().toASCIIString());\n-        waitForPageToLoad();\n-\n-        // Check logged out\n-        driver.navigate().to(newUrl);\n-        assertCurrentUrlStartsWith(loginPage);\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNTc2NA==", "url": "https://github.com/keycloak/keycloak/pull/7241#discussion_r452335764", "bodyText": "Just a nitpick. :) Should we use ServletTestUtils.APP_SERVER_HOST instead?", "author": "vmuzikar", "createdAt": "2020-07-09T16:17:36Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/AbstractAdapterClusteredTest.java", "diffHunk": "@@ -84,14 +86,15 @@ public static void checkPropertiesSet() {\n         Assume.assumeThat(PORT_OFFSET_NODE_1, not(is(-1)));\n         Assume.assumeThat(PORT_OFFSET_NODE_2, not(is(-1)));\n         Assume.assumeThat(PORT_OFFSET_NODE_REVPROXY, not(is(-1)));\n+        ContainerAssume.assumeNotAppServerSSL();\n     }\n \n     @Before\n     public void prepareReverseProxy() throws Exception {\n         loadBalancerToNodes = new LoadBalancingProxyClient().addHost(NODE_1_URI, NODE_1_NAME).setConnectionsPerThread(10);\n         int maxTime = 3600000; // 1 hour for proxy request timeout, so we can debug the backend keycloak servers\n         reverseProxyToNodes = Undertow.builder()\n-          .addHttpListener(HTTP_PORT_NODE_REVPROXY, \"localhost\")\n+          .addHttpListener(HTTP_PORT_NODE_REVPROXY, System.getProperty(\"app.server.host\", \"localhost\"))", "originalCommit": "6cd6fc8220c0b633c5ee48b1598372c53885f4cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d153d0dfb686dce7c8ce8457b75ce8a43c2c6d6", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/AbstractAdapterClusteredTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/AbstractAdapterClusteredTest.java\nindex 19efd5e52d..2d5578a432 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/AbstractAdapterClusteredTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/AbstractAdapterClusteredTest.java\n\n@@ -94,7 +94,7 @@ public abstract class AbstractAdapterClusteredTest extends AbstractServletsAdapt\n         loadBalancerToNodes = new LoadBalancingProxyClient().addHost(NODE_1_URI, NODE_1_NAME).setConnectionsPerThread(10);\n         int maxTime = 3600000; // 1 hour for proxy request timeout, so we can debug the backend keycloak servers\n         reverseProxyToNodes = Undertow.builder()\n-          .addHttpListener(HTTP_PORT_NODE_REVPROXY, System.getProperty(\"app.server.host\", \"localhost\"))\n+          .addHttpListener(HTTP_PORT_NODE_REVPROXY, ServerURLs.APP_SERVER_HOST)\n           .setIoThreads(2)\n           .setHandler(new ProxyHandler(loadBalancerToNodes, maxTime, ResponseCodeHandler.HANDLE_404)).build();\n         reverseProxyToNodes.start();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMzA4Ng==", "url": "https://github.com/keycloak/keycloak/pull/7241#discussion_r451813086", "bodyText": "This TODO becomes irrelevant after these changes, right?", "author": "vramik", "createdAt": "2020-07-08T20:41:31Z", "path": "testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/ServletTestUtils.java", "diffHunk": "@@ -17,40 +17,33 @@\n \n package org.keycloak.testsuite.adapter.servlet;\n \n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.keycloak.common.util.UriUtils;\n+import static java.lang.Integer.parseInt;\n \n /**\n  * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n  */\n public class ServletTestUtils {\n \n+    public static final boolean AUTH_SERVER_SSL_REQUIRED = Boolean.parseBoolean(System.getProperty(\"auth.server.ssl.required\", \"true\"));\n+    public static final String AUTH_SERVER_PORT = AUTH_SERVER_SSL_REQUIRED ? System.getProperty(\"auth.server.https.port\", \"8543\") : System.getProperty(\"auth.server.http.port\", \"8180\");\n+    public static final String AUTH_SERVER_SCHEME = AUTH_SERVER_SSL_REQUIRED ? \"https\" : \"http\";\n+    public static final String AUTH_SERVER_HOST = System.getProperty(\"auth.server.host\", \"localhost\");\n+\n+    public static final boolean APP_SERVER_SSL_REQUIRED = Boolean.parseBoolean(System.getProperty(\"app.server.ssl.required\", \"false\"));\n+    public static final String APP_SERVER_PORT = APP_SERVER_SSL_REQUIRED ? System.getProperty(\"app.server.https.port\", \"8643\") : System.getProperty(\"app.server.http.port\", \"8280\");\n+    public static final String APP_SERVER_SCHEME = APP_SERVER_SSL_REQUIRED ? \"https\" : \"http\";\n+    public static final String APP_SERVER_HOST = System.getProperty(\"app.server.host\", \"localhost\");\n+\n     // TODO: Couldn't just always read urlBase from req.getRequestURI() ?", "originalCommit": "fb874d8c0adc8ca5a05f4f602a3359707eb193b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d153d0dfb686dce7c8ce8457b75ce8a43c2c6d6", "chunk": "diff --git a/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/ServletTestUtils.java b/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/ServletTestUtils.java\nindex 0ff3e7fcf8..7dd226b0ac 100644\n--- a/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/ServletTestUtils.java\n+++ b/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/ServletTestUtils.java\n\n@@ -34,7 +34,6 @@ public class ServletTestUtils {\n     public static final String APP_SERVER_SCHEME = APP_SERVER_SSL_REQUIRED ? \"https\" : \"http\";\n     public static final String APP_SERVER_HOST = System.getProperty(\"app.server.host\", \"localhost\");\n \n-    // TODO: Couldn't just always read urlBase from req.getRequestURI() ?\n     public static String getUrlBase() {\n         return removeDefaultPorts(String.format(\"%s://%s:%s\", APP_SERVER_SCHEME, APP_SERVER_HOST, parseInt(APP_SERVER_PORT)));\n     }\n"}}, {"oid": "2d153d0dfb686dce7c8ce8457b75ce8a43c2c6d6", "url": "https://github.com/keycloak/keycloak/commit/2d153d0dfb686dce7c8ce8457b75ce8a43c2c6d6", "message": "KEYCLOAK-14234 Adjust Adapter testsuite to work with app/auth.server.host including TLS configured", "committedDate": "2020-07-17T18:21:53Z", "type": "commit"}, {"oid": "2d153d0dfb686dce7c8ce8457b75ce8a43c2c6d6", "url": "https://github.com/keycloak/keycloak/commit/2d153d0dfb686dce7c8ce8457b75ce8a43c2c6d6", "message": "KEYCLOAK-14234 Adjust Adapter testsuite to work with app/auth.server.host including TLS configured", "committedDate": "2020-07-17T18:21:53Z", "type": "forcePushed"}]}