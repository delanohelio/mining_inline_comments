{"pr_number": 7640, "pr_title": "KEYCLOAK-16401 Deny/Allow access in a conditional context", "pr_createdAt": "2020-11-25T12:03:09Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7640", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMDM4MA==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542500380", "bodyText": "From the description, it seems the authenticator is applicable just in the conditional flows, but this is not true? So I would slightly change the description to maybe something like \"Authenticator will always successfully authenticate. Useful for example in the conditional flows to be used after satisfying the previous conditions\"", "author": "mposolda", "createdAt": "2020-12-14T16:00:54Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticatorFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.keycloak.Config;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.provider.ProviderConfigProperty;\n+\n+import java.util.List;\n+\n+/**\n+ * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n+ */\n+public class AllowAccessAuthenticatorFactory implements AuthenticatorFactory {\n+    private final static AllowAccessAuthenticator SINGLETON = new AllowAccessAuthenticator();\n+    public static final String PROVIDER_ID = \"allow-access-authenticator\";\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public Authenticator create(KeycloakSession session) {\n+        return SINGLETON;\n+    }\n+\n+    @Override\n+    public String getDisplayType() {\n+        return \"Allow access\";\n+    }\n+\n+    @Override\n+    public String getReferenceCategory() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isConfigurable() {\n+        return false;\n+    }\n+\n+    private static final AuthenticationExecutionModel.Requirement[] REQUIREMENT_CHOICES = {\n+            AuthenticationExecutionModel.Requirement.REQUIRED,\n+            AuthenticationExecutionModel.Requirement.DISABLED\n+    };\n+\n+    @Override\n+    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n+        return REQUIREMENT_CHOICES;\n+    }\n+\n+    @Override\n+    public boolean isUserSetupAllowed() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getHelpText() {\n+        return \"Allow access in conditional flows after satisfying the previous conditions.\";", "originalCommit": "85c5a11eb3ef5f251500248fa205de635a248ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2992c4ba1f00f80216039a367fb341ecd3fbef66", "chunk": "diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticatorFactory.java b/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticatorFactory.java\nindex bc07b8c054..2c237995c6 100644\n--- a/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticatorFactory.java\n+++ b/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticatorFactory.java\n\n@@ -76,7 +76,7 @@ public class AllowAccessAuthenticatorFactory implements AuthenticatorFactory {\n \n     @Override\n     public String getHelpText() {\n-        return \"Allow access in conditional flows after satisfying the previous conditions.\";\n+        return \"Authenticator will always successfully authenticate. Useful for example in the conditional flows to be used after satisfying the previous conditions\";\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMDcxMg==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542500712", "bodyText": "See  my AllowAccessAuthenticatorFactory.getHelpText() comment.", "author": "mposolda", "createdAt": "2020-12-14T16:01:20Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+\n+/**\n+ * Explicitly allow access to the resources after satisfying conditions in the conditional flow.", "originalCommit": "85c5a11eb3ef5f251500248fa205de635a248ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2992c4ba1f00f80216039a367fb341ecd3fbef66", "chunk": "diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java b/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java\nindex c3ddd71880..5f4c03cbbc 100644\n--- a/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java\n+++ b/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java\n\n@@ -25,7 +25,8 @@ import org.keycloak.models.RealmModel;\n import org.keycloak.models.UserModel;\n \n /**\n- * Explicitly allow access to the resources after satisfying conditions in the conditional flow.\n+ * Authenticator will always successfully authenticate.\n+ * Useful for example in the conditional flows to be used after satisfying the previous conditions.\n  *\n  * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMjE0MQ==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542502141", "bodyText": "I think the similar comment applies here like I used for the AllowAccessAuthenticatorFactory.getHelpText() ?", "author": "mposolda", "createdAt": "2020-12-14T16:03:05Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticatorFactory.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.keycloak.Config;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.provider.ProviderConfigProperty;\n+\n+import java.util.List;\n+\n+/**\n+ * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n+ */\n+public class DenyAccessAuthenticatorFactory implements AuthenticatorFactory {\n+    private static final DenyAccessAuthenticator SINGLETON = new DenyAccessAuthenticator();\n+    public static final String PROVIDER_ID = \"deny-access-authenticator\";\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public Authenticator create(KeycloakSession session) {\n+        return SINGLETON;\n+    }\n+\n+    @Override\n+    public String getDisplayType() {\n+        return \"Deny access\";\n+    }\n+\n+    @Override\n+    public String getReferenceCategory() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isConfigurable() {\n+        return false;\n+    }\n+\n+    private static final AuthenticationExecutionModel.Requirement[] REQUIREMENT_CHOICES = {\n+            AuthenticationExecutionModel.Requirement.REQUIRED,\n+            AuthenticationExecutionModel.Requirement.DISABLED\n+    };\n+\n+    @Override\n+    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n+        return REQUIREMENT_CHOICES;\n+    }\n+\n+    @Override\n+    public boolean isUserSetupAllowed() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getHelpText() {\n+        return \"Deny access in conditional flows after satisfying the previous conditions.\";", "originalCommit": "85c5a11eb3ef5f251500248fa205de635a248ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2992c4ba1f00f80216039a367fb341ecd3fbef66", "chunk": "diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticatorFactory.java b/services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticatorFactory.java\nindex 1070f6b7b3..262d494de1 100644\n--- a/services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticatorFactory.java\n+++ b/services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticatorFactory.java\n\n@@ -25,6 +25,7 @@ import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.KeycloakSessionFactory;\n import org.keycloak.provider.ProviderConfigProperty;\n \n+import java.util.Collections;\n import java.util.List;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMjY3Mg==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542502672", "bodyText": "See my comment for the DenyAccessAuthenticatorFactory.getHelpText() .", "author": "mposolda", "createdAt": "2020-12-14T16:03:47Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.AuthenticationFlowError;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.authentication.authenticators.conditional.ConditionalAuthenticator;\n+import org.keycloak.events.Errors;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.services.messages.Messages;\n+\n+import javax.ws.rs.core.Response;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Explicitly deny access to the resources after satisfying conditions in the conditional flow.", "originalCommit": "85c5a11eb3ef5f251500248fa205de635a248ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2992c4ba1f00f80216039a367fb341ecd3fbef66", "chunk": "diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticator.java b/services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticator.java\nindex ffb648ae58..425ed55238 100644\n--- a/services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticator.java\n+++ b/services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticator.java\n\n@@ -20,21 +20,19 @@ package org.keycloak.authentication.authenticators.access;\n import org.keycloak.authentication.AuthenticationFlowContext;\n import org.keycloak.authentication.AuthenticationFlowError;\n import org.keycloak.authentication.Authenticator;\n-import org.keycloak.authentication.AuthenticatorFactory;\n-import org.keycloak.authentication.authenticators.conditional.ConditionalAuthenticator;\n import org.keycloak.events.Errors;\n-import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.AuthenticatorConfigModel;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.RealmModel;\n import org.keycloak.models.UserModel;\n import org.keycloak.services.messages.Messages;\n \n import javax.ws.rs.core.Response;\n-import java.util.Objects;\n import java.util.Optional;\n \n /**\n- * Explicitly deny access to the resources after satisfying conditions in the conditional flow.\n+ * Explicitly deny access to the resources.\n+ * Useful for example in the conditional flows to be used after satisfying the previous conditions. after satisfying conditions in the conditional flow.\n  *\n  * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjM2Mg==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542506362", "bodyText": "Is this change really needed? Should not this PR work even without the change in this file?", "author": "mposolda", "createdAt": "2020-12-14T16:08:24Z", "path": "services/src/main/java/org/keycloak/authentication/DefaultAuthenticationFlow.java", "diffHunk": "@@ -308,7 +308,9 @@ void fillListsOfExecutions(Stream<AuthenticationExecutionModel> executionsToProc\n                     }\n                 });\n \n-        if (!requiredList.isEmpty() && !alternativeList.isEmpty()) {\n+        final boolean isConditionalPresent = requiredList.stream().anyMatch(AuthenticationExecutionModel::isConditional);\n+\n+        if (!requiredList.isEmpty() && !alternativeList.isEmpty() && !isConditionalPresent) {", "originalCommit": "85c5a11eb3ef5f251500248fa205de635a248ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2992c4ba1f00f80216039a367fb341ecd3fbef66", "chunk": "diff --git a/services/src/main/java/org/keycloak/authentication/DefaultAuthenticationFlow.java b/services/src/main/java/org/keycloak/authentication/DefaultAuthenticationFlow.java\nindex 2d4de41b51..d8dbd81b1d 100755\n--- a/services/src/main/java/org/keycloak/authentication/DefaultAuthenticationFlow.java\n+++ b/services/src/main/java/org/keycloak/authentication/DefaultAuthenticationFlow.java\n\n@@ -308,9 +308,7 @@ public class DefaultAuthenticationFlow implements AuthenticationFlow {\n                     }\n                 });\n \n-        final boolean isConditionalPresent = requiredList.stream().anyMatch(AuthenticationExecutionModel::isConditional);\n-\n-        if (!requiredList.isEmpty() && !alternativeList.isEmpty() && !isConditionalPresent) {\n+        if (!requiredList.isEmpty() && !alternativeList.isEmpty()) {\n             List<String> alternativeIds = alternativeList.stream()\n                     .map(AuthenticationExecutionModel::getAuthenticator)\n                     .collect(Collectors.toList());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMDQ0MA==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542510440", "bodyText": "My vote would be to add more details to this help text to make it more obvious for the administrator. Like \"Apply a not to the check result. When this is true, then the condition will evaluate to true just if user does NOT have the specified role. When this is false, the condition will evaluate to true just if user has the specified role\".", "author": "mposolda", "createdAt": "2020-12-14T16:13:43Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/conditional/ConditionalRoleAuthenticatorFactory.java", "diffHunk": "@@ -81,7 +73,19 @@ public String getHelpText() {\n \n     @Override\n     public List<ProviderConfigProperty> getConfigProperties() {\n-        return commonConfig;\n+        ProviderConfigProperty role = new ProviderConfigProperty();\n+        role.setType(ProviderConfigProperty.ROLE_TYPE);\n+        role.setName(CONDITIONAL_USER_ROLE);\n+        role.setLabel(\"User role\");\n+        role.setHelpText(\"Role the user should have to execute this flow. Click 'Select Role' button to browse roles, or just type it in the textbox. To specify an application role the syntax is appname.approle, i.e. myapp.myrole\");\n+\n+        ProviderConfigProperty negateOutput = new ProviderConfigProperty();\n+        negateOutput.setType(ProviderConfigProperty.BOOLEAN_TYPE);\n+        negateOutput.setName(CONF_NEGATE);\n+        negateOutput.setLabel(\"Negate output\");\n+        negateOutput.setHelpText(\"Apply a not to the check result\");", "originalCommit": "85c5a11eb3ef5f251500248fa205de635a248ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2992c4ba1f00f80216039a367fb341ecd3fbef66", "chunk": "diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/conditional/ConditionalRoleAuthenticatorFactory.java b/services/src/main/java/org/keycloak/authentication/authenticators/conditional/ConditionalRoleAuthenticatorFactory.java\nindex cb1d50fb77..5bab6e55d1 100644\n--- a/services/src/main/java/org/keycloak/authentication/authenticators/conditional/ConditionalRoleAuthenticatorFactory.java\n+++ b/services/src/main/java/org/keycloak/authentication/authenticators/conditional/ConditionalRoleAuthenticatorFactory.java\n\n@@ -77,13 +76,13 @@ public class ConditionalRoleAuthenticatorFactory implements ConditionalAuthentic\n         role.setType(ProviderConfigProperty.ROLE_TYPE);\n         role.setName(CONDITIONAL_USER_ROLE);\n         role.setLabel(\"User role\");\n-        role.setHelpText(\"Role the user should have to execute this flow. Click 'Select Role' button to browse roles, or just type it in the textbox. To specify an application role the syntax is appname.approle, i.e. myapp.myrole\");\n+        role.setHelpText(\"Role the user should have to execute this flow. Click 'Select Role' button to browse roles, or just type it in the textbox. To reference a client role the syntax is clientname.clientrole, i.e. myclient.myrole\");\n \n         ProviderConfigProperty negateOutput = new ProviderConfigProperty();\n         negateOutput.setType(ProviderConfigProperty.BOOLEAN_TYPE);\n         negateOutput.setName(CONF_NEGATE);\n         negateOutput.setLabel(\"Negate output\");\n-        negateOutput.setHelpText(\"Apply a not to the check result\");\n+        negateOutput.setHelpText(\"Apply a NOT to the check result. When this is true, then the condition will evaluate to true just if user does NOT have the specified role. When this is false, the condition will evaluate to true just if user has the specified role\");\n \n         return Arrays.asList(role, negateOutput);\n     }\n"}}, {"oid": "2992c4ba1f00f80216039a367fb341ecd3fbef66", "url": "https://github.com/keycloak/keycloak/commit/2992c4ba1f00f80216039a367fb341ecd3fbef66", "message": "KEYCLOAK-16401 Deny/Allow access in a conditional context", "committedDate": "2020-12-16T14:34:48Z", "type": "forcePushed"}, {"oid": "fea5debc7a2106aa7b8ba2c44dfbb6d6072b1fc5", "url": "https://github.com/keycloak/keycloak/commit/fea5debc7a2106aa7b8ba2c44dfbb6d6072b1fc5", "message": "KEYCLOAK-16401 Deny/Allow access in a conditional context", "committedDate": "2020-12-16T14:41:34Z", "type": "forcePushed"}, {"oid": "96f055d98ff24cc33284e73c03157948f5ab40db", "url": "https://github.com/keycloak/keycloak/commit/96f055d98ff24cc33284e73c03157948f5ab40db", "message": "KEYCLOAK-16401 Deny/Allow access in a conditional context", "committedDate": "2020-12-16T18:54:50Z", "type": "forcePushed"}, {"oid": "e8fd87037a2177d5da0ca79aada1fef57cc1cc9d", "url": "https://github.com/keycloak/keycloak/commit/e8fd87037a2177d5da0ca79aada1fef57cc1cc9d", "message": "KEYCLOAK-16401 Deny/Allow access in a conditional context", "committedDate": "2021-04-08T07:58:11Z", "type": "forcePushed"}, {"oid": "f1b7fcde86946b8a7ff6aa2c17976f2e8b4c3b7b", "url": "https://github.com/keycloak/keycloak/commit/f1b7fcde86946b8a7ff6aa2c17976f2e8b4c3b7b", "message": "KEYCLOAK-16401 Deny/Allow access in a conditional context", "committedDate": "2021-04-08T08:12:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQwNzY2OQ==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r610407669", "bodyText": "Is it possible to change this to \"log.trace\"?\nFrom what I know, the \"info\" messages are dedicated to important and non-repeating (and non-user actions) related stuff like for example \"Database migration finished successfully\" at the server startup etc.", "author": "mposolda", "createdAt": "2021-04-09T07:28:22Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+\n+/**\n+ * Authenticator will always successfully authenticate.\n+ * Useful for example in the conditional flows to be used after satisfying the previous conditions.\n+ *\n+ * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n+ */\n+public class AllowAccessAuthenticator implements Authenticator {\n+    private final Logger log = Logger.getLogger(AllowAccessAuthenticator.class);\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        log.info(\"Explicitly allowed access to the resource.\");", "originalCommit": "f1b7fcde86946b8a7ff6aa2c17976f2e8b4c3b7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQxMjg0Mg==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r610412842", "bodyText": "Ok", "author": "mabartos", "createdAt": "2021-04-09T07:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQwNzY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a4c30e18b8c8ceaed3c4bc7236bcfabd4fafe8a4", "chunk": "diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java b/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java\nindex 5f4c03cbbc..9f37c40615 100644\n--- a/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java\n+++ b/services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java\n\n@@ -35,7 +35,7 @@ public class AllowAccessAuthenticator implements Authenticator {\n \n     @Override\n     public void authenticate(AuthenticationFlowContext context) {\n-        log.info(\"Explicitly allowed access to the resource.\");\n+        log.trace(\"Explicitly allowed access to the resource.\");\n         context.success();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQwODgzOQ==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r610408839", "bodyText": "My vote would be to move new stuff to separate class like \"AllowDenyAuthenticatorConditionsTest\" or something like this? It seems to me that BrowserFlowTest is already quite big and contains lots of stuff. WDYT?", "author": "mposolda", "createdAt": "2021-04-09T07:30:18Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/BrowserFlowTest.java", "diffHunk": "@@ -1238,6 +1253,259 @@ public void testLoginWithAlternativeOTPAndConditionalPassword(){\n         }\n     }\n \n+    @Test\n+    @AuthServerContainerExclude(REMOTE)", "originalCommit": "f1b7fcde86946b8a7ff6aa2c17976f2e8b4c3b7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQxMzQyOQ==", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r610413429", "bodyText": "It makes sense. I agree with it.", "author": "mabartos", "createdAt": "2021-04-09T07:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQwODgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a4c30e18b8c8ceaed3c4bc7236bcfabd4fafe8a4", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/BrowserFlowTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/BrowserFlowTest.java\nindex 71d4af8903..66339c0dba 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/BrowserFlowTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/BrowserFlowTest.java\n\n@@ -1253,259 +1247,6 @@ public class BrowserFlowTest extends AbstractTestRealmKeycloakTest {\n         }\n     }\n \n-    @Test\n-    @AuthServerContainerExclude(REMOTE)\n-    public void testDenyAccessWithDefaultMessage() {\n-        testErrorMessageInDenyAccess(null, \"Access denied\");\n-    }\n-\n-    @Test\n-    @AuthServerContainerExclude(REMOTE)\n-    public void testDenyAccessWithParticularMessage() {\n-        final String message = \"You are not allowed to authenticate.\";\n-        testErrorMessageInDenyAccess(message, message);\n-    }\n-\n-    @Test\n-    @AuthServerContainerExclude(REMOTE)\n-    public void testDenyAccessWithProperty() {\n-        final String property = \"brokerLinkingSessionExpired\";\n-        final String message = \"Requested broker account linking, but current session is no longer valid.\";\n-\n-        testErrorMessageInDenyAccess(property, message);\n-    }\n-\n-    @Test\n-    @AuthServerContainerExclude(REMOTE)\n-    public void testDenyAccessWithNotExistingProperty() {\n-        final String property = \"not-existing-property\";\n-        final String message = \"not-existing-property\";\n-\n-        testErrorMessageInDenyAccess(property, message);\n-    }\n-\n-    /* Helper method for error messaged in Deny Authenticator */\n-    private void testErrorMessageInDenyAccess(String setUpMessage, String expectedMessage) {\n-        final String flowAlias = \"browser - deny defaultMessage\";\n-        final String userWithoutAttribute = \"test-user@localhost\";\n-\n-        Map<String, String> denyAccessConfigMap = new HashMap<>();\n-        if (setUpMessage != null) {\n-            denyAccessConfigMap.put(DenyAccessAuthenticatorFactory.ERROR_MESSAGE, setUpMessage);\n-        }\n-\n-        configureBrowserFlowWithDenyAccess(flowAlias, denyAccessConfigMap);\n-\n-        try {\n-            loginUsernameOnlyPage.open();\n-            loginUsernameOnlyPage.assertCurrent();\n-            loginUsernameOnlyPage.login(userWithoutAttribute);\n-\n-            errorPage.assertCurrent();\n-            assertThat(errorPage.getError(), is(expectedMessage));\n-\n-            events.expectLogin()\n-                    .user((String) null)\n-                    .session((String) null)\n-                    .error(Errors.ACCESS_DENIED)\n-                    .detail(Details.USERNAME, userWithoutAttribute)\n-                    .removeDetail(Details.CONSENT)\n-                    .assertEvent();\n-        } finally {\n-            revertFlows(flowAlias);\n-        }\n-    }\n-\n-    /**\n-     * This test checks that if user does not have specific attribute, then the access is denied.\n-     */\n-    @Test\n-    @AuthServerContainerExclude(REMOTE)\n-    public void testDenyAccessWithNegateUserAttributeCondition() {\n-        final String flowAlias = \"browser - user attribute condition\";\n-        final String userWithoutAttribute = \"test-user@localhost\";\n-        final String errorMessage = \"You don't have necessary attribute.\";\n-\n-        Map<String, String> attributeConfigMap = new HashMap<>();\n-        attributeConfigMap.put(ConditionalUserAttributeValueFactory.CONF_ATTRIBUTE_NAME, \"attribute\");\n-        attributeConfigMap.put(ConditionalUserAttributeValueFactory.CONF_ATTRIBUTE_EXPECTED_VALUE, \"value\");\n-        attributeConfigMap.put(ConditionalUserAttributeValueFactory.CONF_NOT, \"true\");\n-\n-        Map<String, String> denyAccessConfigMap = new HashMap<>();\n-        denyAccessConfigMap.put(DenyAccessAuthenticatorFactory.ERROR_MESSAGE, errorMessage);\n-\n-        configureBrowserFlowWithDenyAccessInConditionalFlow(flowAlias, ConditionalUserAttributeValueFactory.PROVIDER_ID, attributeConfigMap, denyAccessConfigMap);\n-\n-        try {\n-            loginUsernameOnlyPage.open();\n-            loginUsernameOnlyPage.assertCurrent();\n-            loginUsernameOnlyPage.login(userWithoutAttribute);\n-\n-            errorPage.assertCurrent();\n-            assertThat(errorPage.getError(), is(errorMessage));\n-\n-            events.expectLogin()\n-                    .user((String) null)\n-                    .session((String) null)\n-                    .error(Errors.ACCESS_DENIED)\n-                    .detail(Details.USERNAME, userWithoutAttribute)\n-                    .removeDetail(Details.CONSENT)\n-                    .assertEvent();\n-        } finally {\n-            revertFlows(flowAlias);\n-        }\n-    }\n-\n-    /**\n-     * Deny access, if user has defined the role and print error message.\n-     */\n-    @Test\n-    @AuthServerContainerExclude(REMOTE)\n-    public void testDenyAccessWithRoleCondition() {\n-        denyAccessWithRoleCondition(false);\n-    }\n-\n-    /**\n-     * Deny access, if user has NOT defined the role and print error message.\n-     */\n-    @Test\n-    @AuthServerContainerExclude(REMOTE)\n-    public void testDenyAccessWithNegateRoleCondition() {\n-        denyAccessWithRoleCondition(true);\n-    }\n-\n-    /**\n-     * Helper method for deny access with role condition\n-     * @param negateOutput\n-     */\n-    private void denyAccessWithRoleCondition(boolean negateOutput) {\n-        final String flowAlias = \"browser-deny\";\n-        final String userWithRole = \"test-user@localhost\";\n-        final String userWithoutRole = \"john-doh@localhost\";\n-        final String role = \"offline_access\";\n-        final String errorMessage = \"Your account doesn't have the required role\";\n-\n-        Map<String, String> config = new HashMap<>();\n-        config.put(ConditionalRoleAuthenticatorFactory.CONDITIONAL_USER_ROLE, role);\n-        config.put(ConditionalRoleAuthenticatorFactory.CONF_NEGATE, Boolean.toString(negateOutput));\n-\n-        Map<String, String> denyConfig = new HashMap<>();\n-        denyConfig.put(DenyAccessAuthenticatorFactory.ERROR_MESSAGE, errorMessage);\n-\n-        configureBrowserFlowWithDenyAccessInConditionalFlow(flowAlias, ConditionalRoleAuthenticatorFactory.PROVIDER_ID, config, denyConfig);\n-\n-        denyAccessInConditionalFlow(flowAlias,\n-                negateOutput ? userWithoutRole : userWithRole,\n-                negateOutput ? userWithRole : userWithoutRole,\n-                errorMessage\n-        );\n-    }\n-\n-    /**\n-     * Helper method for deny access with two opposites cases\n-     */\n-    private void denyAccessInConditionalFlow(String flowAlias, String userCondMatch, String userCondNotMatch, String errorMessage) {\n-        try {\n-            loginUsernameOnlyPage.open();\n-            loginUsernameOnlyPage.assertCurrent();\n-            loginUsernameOnlyPage.login(userCondMatch);\n-\n-            errorPage.assertCurrent();\n-            assertThat(errorPage.getError(), is(errorMessage));\n-\n-            events.expectLogin()\n-                    .user((String) null)\n-                    .session((String) null)\n-                    .error(Errors.ACCESS_DENIED)\n-                    .detail(Details.USERNAME, userCondMatch)\n-                    .removeDetail(Details.CONSENT)\n-                    .assertEvent();\n-\n-            final String userCondNotMatchId = testRealm().users().search(userCondNotMatch).get(0).getId();\n-\n-            loginUsernameOnlyPage.open();\n-            loginUsernameOnlyPage.assertCurrent();\n-            loginUsernameOnlyPage.login(userCondNotMatch);\n-\n-            passwordPage.assertCurrent();\n-            passwordPage.login(\"password\");\n-\n-            events.expectLogin().user(userCondNotMatchId)\n-                    .detail(Details.USERNAME, userCondNotMatch)\n-                    .removeDetail(Details.CONSENT)\n-                    .assertEvent();\n-        } finally {\n-            revertFlows(flowAlias);\n-        }\n-    }\n-\n-    /**\n-     * This test checks that if user has NOT the required role, the user has to enter the password\n-     */\n-    @Test\n-    @AuthServerContainerExclude(REMOTE)\n-    public void testSkipExecutionUserHasNotRoleCondition() {\n-        final String userWithoutRole = \"john-doh@localhost\";\n-        final String role = \"offline_access\";\n-        final String newFlowAlias = \"browser - allow skip\";\n-\n-        Map<String, String> configMap = new HashMap<>();\n-        configMap.put(ConditionalRoleAuthenticatorFactory.CONDITIONAL_USER_ROLE, role);\n-        configMap.put(ConditionalRoleAuthenticatorFactory.CONF_NEGATE, \"false\");\n-\n-        configureBrowserFlowWithSkipExecutionInConditionalFlow(newFlowAlias, ConditionalRoleAuthenticatorFactory.PROVIDER_ID, configMap);\n-        try {\n-            loginUsernameOnlyPage.open();\n-            loginUsernameOnlyPage.assertCurrent();\n-            loginUsernameOnlyPage.login(userWithoutRole);\n-\n-            final String testUserWithoutRoleId = testRealm().users().search(userWithoutRole).get(0).getId();\n-\n-            passwordPage.assertCurrent();\n-            passwordPage.login(\"password\");\n-\n-            events.expectLogin()\n-                    .user(testUserWithoutRoleId)\n-                    .detail(Details.USERNAME, userWithoutRole)\n-                    .removeDetail(Details.CONSENT)\n-                    .assertEvent();\n-        } finally {\n-            revertFlows(newFlowAlias);\n-        }\n-\n-    }\n-\n-    /**\n-     * This test checks that if user has the required role, the user skips the other executions\n-     */\n-    @Test\n-    public void testSkipOtherExecutionsIfUserHasRoleCondition() {\n-        final String userWithRole = \"test-user@localhost\";\n-        final String role = \"offline_access\";\n-        final String newFlowAlias = \"browser - allow skip\";\n-\n-        Map<String, String> configMap = new HashMap<>();\n-        configMap.put(ConditionalRoleAuthenticatorFactory.CONDITIONAL_USER_ROLE, role);\n-        configMap.put(ConditionalRoleAuthenticatorFactory.CONF_NEGATE, \"false\");\n-\n-        configureBrowserFlowWithSkipExecutionInConditionalFlow(newFlowAlias, ConditionalRoleAuthenticatorFactory.PROVIDER_ID, configMap);\n-        try {\n-            loginUsernameOnlyPage.open();\n-            loginUsernameOnlyPage.assertCurrent();\n-            loginUsernameOnlyPage.login(userWithRole);\n-\n-            final String testUserWithRoleId = testRealm().users().search(userWithRole).get(0).getId();\n-\n-            events.expectLogin()\n-                    .user(testUserWithRoleId)\n-                    .detail(Details.USERNAME, userWithRole)\n-                    .removeDetail(Details.CONSENT)\n-                    .assertEvent();\n-        } finally {\n-            revertFlows(newFlowAlias);\n-        }\n-    }\n-\n     /**\n      * This flow contains:\n      * UsernameForm REQUIRED\n"}}, {"oid": "a4c30e18b8c8ceaed3c4bc7236bcfabd4fafe8a4", "url": "https://github.com/keycloak/keycloak/commit/a4c30e18b8c8ceaed3c4bc7236bcfabd4fafe8a4", "message": "KEYCLOAK-16401 Deny/Allow access in a conditional context", "committedDate": "2021-04-09T08:09:22Z", "type": "commit"}, {"oid": "a4c30e18b8c8ceaed3c4bc7236bcfabd4fafe8a4", "url": "https://github.com/keycloak/keycloak/commit/a4c30e18b8c8ceaed3c4bc7236bcfabd4fafe8a4", "message": "KEYCLOAK-16401 Deny/Allow access in a conditional context", "committedDate": "2021-04-09T08:09:22Z", "type": "forcePushed"}]}