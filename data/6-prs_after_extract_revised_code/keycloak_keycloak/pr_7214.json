{"pr_number": 7214, "pr_title": "KEYCLOAK-14039 - UserInfo claims from external OIDC identity provider are not imported", "pr_createdAt": "2020-06-29T08:04:10Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7214", "timeline": [{"oid": "4115d9b0fbb7d28c212c8c599a504d9121cb425d", "url": "https://github.com/keycloak/keycloak/commit/4115d9b0fbb7d28c212c8c599a504d9121cb425d", "message": "Add UserInfo check fix and associated tests.", "committedDate": "2020-06-29T07:28:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMDM5MQ==", "url": "https://github.com/keycloak/keycloak/pull/7214#discussion_r498730391", "bodyText": "Is it possible that this method will call something like:\nsuper.applyDefaultConfiguration(config, syncMode);\n\nat the beginning and then it will just add/remove additional fields, which differ from the default configuration used by KcOidcBrokerConfiguration.applyDefaultConfiguration method?\nThis will allow to remove bunch of duplicated code from this PR for the properties, which are same as in KcOidcBrokerConfiguration. Also it will clearly show what properties are important for this test.", "author": "mposolda", "createdAt": "2020-10-02T10:02:57Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerConfigurationUserInfoOnlyMappers.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.keycloak.testsuite.broker;\n+\n+import org.keycloak.models.IdentityProviderModel;\n+import org.keycloak.models.IdentityProviderSyncMode;\n+import org.keycloak.protocol.ProtocolMapperUtils;\n+import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n+import org.keycloak.protocol.oidc.mappers.OIDCAttributeMapperHelper;\n+import org.keycloak.protocol.oidc.mappers.UserAttributeMapper;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.representations.idm.ClientRepresentation;\n+import org.keycloak.representations.idm.ProtocolMapperRepresentation;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.keycloak.testsuite.broker.BrokerTestConstants.*;\n+import static org.keycloak.testsuite.broker.BrokerTestTools.*;\n+\n+/**\n+ * @author hmlnarik\n+ */\n+public class KcOidcBrokerConfigurationUserInfoOnlyMappers extends KcOidcBrokerConfiguration {\n+\n+    public static final KcOidcBrokerConfigurationUserInfoOnlyMappers INSTANCE = new KcOidcBrokerConfigurationUserInfoOnlyMappers();\n+\n+    protected static final String ATTRIBUTE_TO_MAP_USER_INFO = \"user-attribute-ufo\";\n+\n+\n+    @Override\n+    public List<ClientRepresentation> createProviderClients() {\n+        ClientRepresentation client = new ClientRepresentation();\n+        client.setId(CLIENT_ID);\n+        client.setClientId(getIDPClientIdInProviderRealm());\n+        client.setName(CLIENT_ID);\n+        client.setSecret(CLIENT_SECRET);\n+        client.setEnabled(true);\n+\n+        client.setRedirectUris(Collections.singletonList(getConsumerRoot() +\n+                \"/auth/realms/\" + REALM_CONS_NAME + \"/broker/\" + IDP_OIDC_ALIAS + \"/endpoint/*\"));\n+\n+        client.setAdminUrl(getConsumerRoot() +\n+                \"/auth/realms/\" + REALM_CONS_NAME + \"/broker/\" + IDP_OIDC_ALIAS + \"/endpoint\");\n+\n+        ProtocolMapperRepresentation userAttrMapper = new ProtocolMapperRepresentation();\n+        userAttrMapper.setName(\"attribute - name\");\n+        userAttrMapper.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);\n+        userAttrMapper.setProtocolMapper(UserAttributeMapper.PROVIDER_ID);\n+\n+        Map<String, String> userAttrMapperConfig = userAttrMapper.getConfig();\n+        userAttrMapperConfig.put(ProtocolMapperUtils.USER_ATTRIBUTE, ATTRIBUTE_TO_MAP_USER_INFO);\n+        userAttrMapperConfig.put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME, ATTRIBUTE_TO_MAP_USER_INFO);\n+        userAttrMapperConfig.put(OIDCAttributeMapperHelper.JSON_TYPE, ProviderConfigProperty.STRING_TYPE);\n+        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_ACCESS_TOKEN, \"false\");\n+        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_ID_TOKEN, \"false\");\n+        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_USERINFO, \"true\");\n+        userAttrMapperConfig.put(ProtocolMapperUtils.MULTIVALUED, \"true\");\n+\n+\n+        client.setProtocolMappers(Arrays.asList(userAttrMapper));\n+\n+        return Collections.singletonList(client);\n+    }\n+\n+    @Override\n+    protected void applyDefaultConfiguration(final Map<String, String> config, IdentityProviderSyncMode syncMode) {\n+        config.put(IdentityProviderModel.SYNC_MODE, syncMode.toString());", "originalCommit": "4115d9b0fbb7d28c212c8c599a504d9121cb425d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef69ddfc47a07eaa62042779454b75768ffede16", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerConfigurationUserInfoOnlyMappers.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerConfigurationUserInfoOnlyMappers.java\ndeleted file mode 100644\nindex b23730a187..0000000000\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerConfigurationUserInfoOnlyMappers.java\n+++ /dev/null\n\n@@ -1,82 +0,0 @@\n-package org.keycloak.testsuite.broker;\n-\n-import org.keycloak.models.IdentityProviderModel;\n-import org.keycloak.models.IdentityProviderSyncMode;\n-import org.keycloak.protocol.ProtocolMapperUtils;\n-import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n-import org.keycloak.protocol.oidc.mappers.OIDCAttributeMapperHelper;\n-import org.keycloak.protocol.oidc.mappers.UserAttributeMapper;\n-import org.keycloak.provider.ProviderConfigProperty;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.ProtocolMapperRepresentation;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static org.keycloak.testsuite.broker.BrokerTestConstants.*;\n-import static org.keycloak.testsuite.broker.BrokerTestTools.*;\n-\n-/**\n- * @author hmlnarik\n- */\n-public class KcOidcBrokerConfigurationUserInfoOnlyMappers extends KcOidcBrokerConfiguration {\n-\n-    public static final KcOidcBrokerConfigurationUserInfoOnlyMappers INSTANCE = new KcOidcBrokerConfigurationUserInfoOnlyMappers();\n-\n-    protected static final String ATTRIBUTE_TO_MAP_USER_INFO = \"user-attribute-ufo\";\n-\n-\n-    @Override\n-    public List<ClientRepresentation> createProviderClients() {\n-        ClientRepresentation client = new ClientRepresentation();\n-        client.setId(CLIENT_ID);\n-        client.setClientId(getIDPClientIdInProviderRealm());\n-        client.setName(CLIENT_ID);\n-        client.setSecret(CLIENT_SECRET);\n-        client.setEnabled(true);\n-\n-        client.setRedirectUris(Collections.singletonList(getConsumerRoot() +\n-                \"/auth/realms/\" + REALM_CONS_NAME + \"/broker/\" + IDP_OIDC_ALIAS + \"/endpoint/*\"));\n-\n-        client.setAdminUrl(getConsumerRoot() +\n-                \"/auth/realms/\" + REALM_CONS_NAME + \"/broker/\" + IDP_OIDC_ALIAS + \"/endpoint\");\n-\n-        ProtocolMapperRepresentation userAttrMapper = new ProtocolMapperRepresentation();\n-        userAttrMapper.setName(\"attribute - name\");\n-        userAttrMapper.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);\n-        userAttrMapper.setProtocolMapper(UserAttributeMapper.PROVIDER_ID);\n-\n-        Map<String, String> userAttrMapperConfig = userAttrMapper.getConfig();\n-        userAttrMapperConfig.put(ProtocolMapperUtils.USER_ATTRIBUTE, ATTRIBUTE_TO_MAP_USER_INFO);\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME, ATTRIBUTE_TO_MAP_USER_INFO);\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.JSON_TYPE, ProviderConfigProperty.STRING_TYPE);\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_ACCESS_TOKEN, \"false\");\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_ID_TOKEN, \"false\");\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_USERINFO, \"true\");\n-        userAttrMapperConfig.put(ProtocolMapperUtils.MULTIVALUED, \"true\");\n-\n-\n-        client.setProtocolMappers(Arrays.asList(userAttrMapper));\n-\n-        return Collections.singletonList(client);\n-    }\n-\n-    @Override\n-    protected void applyDefaultConfiguration(final Map<String, String> config, IdentityProviderSyncMode syncMode) {\n-        config.put(IdentityProviderModel.SYNC_MODE, syncMode.toString());\n-        config.put(\"clientId\", CLIENT_ID);\n-        config.put(\"clientSecret\", CLIENT_SECRET);\n-        config.put(\"prompt\", \"login\");\n-        config.put(\"authorizationUrl\", getProviderRoot() + \"/auth/realms/\" + REALM_PROV_NAME + \"/protocol/openid-connect/auth\");\n-        config.put(\"tokenUrl\", getProviderRoot() + \"/auth/realms/\" + REALM_PROV_NAME + \"/protocol/openid-connect/token\");\n-        config.put(\"logoutUrl\", getProviderRoot() + \"/auth/realms/\" + REALM_PROV_NAME + \"/protocol/openid-connect/logout\");\n-        config.put(\"userInfoUrl\", getProviderRoot() + \"/auth/realms/\" + REALM_PROV_NAME + \"/protocol/openid-connect/userinfo\");\n-        config.put(\"defaultScope\", \"email profile\");\n-        config.put(\"backchannelSupported\", \"true\");\n-        config.put(\"disableUserInfo\", \"false\");\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMDg1NQ==", "url": "https://github.com/keycloak/keycloak/pull/7214#discussion_r498730855", "bodyText": "Is it possible to remove some @test methods from this class? It looks that this class is just copy/pasted from the existing class OidcClaimToRoleMapperTest and it adds all the tests, which were added by the original class. However we don't need 8 new test methods for fixing this single bug? I hope that 1 or 2 test methods should be sufficient?\nI mean tests are good, but too much tests adds overhead and additional time to run the code + additional maintenance price etc :-)", "author": "mposolda", "createdAt": "2020-10-02T10:04:07Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.keycloak.testsuite.broker;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Test;\n+import org.keycloak.admin.client.resource.IdentityProviderResource;\n+import org.keycloak.broker.oidc.mappers.ClaimToRoleMapper;\n+import org.keycloak.broker.provider.ConfigConstants;\n+import org.keycloak.models.IdentityProviderMapperModel;\n+import org.keycloak.models.IdentityProviderMapperSyncMode;\n+import org.keycloak.representations.idm.IdentityProviderMapperRepresentation;\n+import org.keycloak.representations.idm.IdentityProviderRepresentation;\n+import org.keycloak.representations.idm.UserRepresentation;\n+\n+import java.util.List;\n+\n+import static org.keycloak.models.IdentityProviderMapperSyncMode.FORCE;\n+import static org.keycloak.models.IdentityProviderMapperSyncMode.LEGACY;\n+\n+/**\n+ * @author <a href=\"mailto:external.martin.idel@bosch.io\">Martin Idel</a>\n+ */\n+public class OidcUserInfoClaimToRoleMapperTest extends AbstractRoleMapperTest {", "originalCommit": "4115d9b0fbb7d28c212c8c599a504d9121cb425d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef69ddfc47a07eaa62042779454b75768ffede16", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java\nindex b82994f7b9..dd5d0cf489 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java\n\n@@ -2,7 +2,6 @@ package org.keycloak.testsuite.broker;\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n-import org.jetbrains.annotations.NotNull;\n import org.junit.Test;\n import org.keycloak.admin.client.resource.IdentityProviderResource;\n import org.keycloak.broker.oidc.mappers.ClaimToRoleMapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMzQ2NQ==", "url": "https://github.com/keycloak/keycloak/pull/7214#discussion_r498733465", "bodyText": "Is it possible to call\nList<ClientRepresentation> clients = super.createProviderClients();\n\nat the beginning and then just update the configuration of the particular client based on what is needed for your test? This will allow to remove duplicated code copy/pasted from the parent class. See some other classes, which do the same approach - for example KcOidcBrokerClientSecretJwtTest.KcOidcBrokerConfigurationWithJWTAuthentication.\nI suggest to also take the approach with the anonymous configuration class as used by KcOidcBrokerClientSecretJwtTest is also good as the \"kcOidcBrokerConfigurationUserInfoOnlyMappers\" is used just by your test class and hence it is not needed to introduce another public class \"kcOidcBrokerConfigurationUserInfoOnlyMappers\" to Keycloak codebase for this.", "author": "mposolda", "createdAt": "2020-10-02T10:10:11Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerConfigurationUserInfoOnlyMappers.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.keycloak.testsuite.broker;\n+\n+import org.keycloak.models.IdentityProviderModel;\n+import org.keycloak.models.IdentityProviderSyncMode;\n+import org.keycloak.protocol.ProtocolMapperUtils;\n+import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n+import org.keycloak.protocol.oidc.mappers.OIDCAttributeMapperHelper;\n+import org.keycloak.protocol.oidc.mappers.UserAttributeMapper;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.representations.idm.ClientRepresentation;\n+import org.keycloak.representations.idm.ProtocolMapperRepresentation;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.keycloak.testsuite.broker.BrokerTestConstants.*;\n+import static org.keycloak.testsuite.broker.BrokerTestTools.*;\n+\n+/**\n+ * @author hmlnarik\n+ */\n+public class KcOidcBrokerConfigurationUserInfoOnlyMappers extends KcOidcBrokerConfiguration {\n+\n+    public static final KcOidcBrokerConfigurationUserInfoOnlyMappers INSTANCE = new KcOidcBrokerConfigurationUserInfoOnlyMappers();\n+\n+    protected static final String ATTRIBUTE_TO_MAP_USER_INFO = \"user-attribute-ufo\";\n+\n+\n+    @Override\n+    public List<ClientRepresentation> createProviderClients() {\n+        ClientRepresentation client = new ClientRepresentation();", "originalCommit": "4115d9b0fbb7d28c212c8c599a504d9121cb425d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef69ddfc47a07eaa62042779454b75768ffede16", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerConfigurationUserInfoOnlyMappers.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerConfigurationUserInfoOnlyMappers.java\ndeleted file mode 100644\nindex b23730a187..0000000000\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcOidcBrokerConfigurationUserInfoOnlyMappers.java\n+++ /dev/null\n\n@@ -1,82 +0,0 @@\n-package org.keycloak.testsuite.broker;\n-\n-import org.keycloak.models.IdentityProviderModel;\n-import org.keycloak.models.IdentityProviderSyncMode;\n-import org.keycloak.protocol.ProtocolMapperUtils;\n-import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n-import org.keycloak.protocol.oidc.mappers.OIDCAttributeMapperHelper;\n-import org.keycloak.protocol.oidc.mappers.UserAttributeMapper;\n-import org.keycloak.provider.ProviderConfigProperty;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.ProtocolMapperRepresentation;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static org.keycloak.testsuite.broker.BrokerTestConstants.*;\n-import static org.keycloak.testsuite.broker.BrokerTestTools.*;\n-\n-/**\n- * @author hmlnarik\n- */\n-public class KcOidcBrokerConfigurationUserInfoOnlyMappers extends KcOidcBrokerConfiguration {\n-\n-    public static final KcOidcBrokerConfigurationUserInfoOnlyMappers INSTANCE = new KcOidcBrokerConfigurationUserInfoOnlyMappers();\n-\n-    protected static final String ATTRIBUTE_TO_MAP_USER_INFO = \"user-attribute-ufo\";\n-\n-\n-    @Override\n-    public List<ClientRepresentation> createProviderClients() {\n-        ClientRepresentation client = new ClientRepresentation();\n-        client.setId(CLIENT_ID);\n-        client.setClientId(getIDPClientIdInProviderRealm());\n-        client.setName(CLIENT_ID);\n-        client.setSecret(CLIENT_SECRET);\n-        client.setEnabled(true);\n-\n-        client.setRedirectUris(Collections.singletonList(getConsumerRoot() +\n-                \"/auth/realms/\" + REALM_CONS_NAME + \"/broker/\" + IDP_OIDC_ALIAS + \"/endpoint/*\"));\n-\n-        client.setAdminUrl(getConsumerRoot() +\n-                \"/auth/realms/\" + REALM_CONS_NAME + \"/broker/\" + IDP_OIDC_ALIAS + \"/endpoint\");\n-\n-        ProtocolMapperRepresentation userAttrMapper = new ProtocolMapperRepresentation();\n-        userAttrMapper.setName(\"attribute - name\");\n-        userAttrMapper.setProtocol(OIDCLoginProtocol.LOGIN_PROTOCOL);\n-        userAttrMapper.setProtocolMapper(UserAttributeMapper.PROVIDER_ID);\n-\n-        Map<String, String> userAttrMapperConfig = userAttrMapper.getConfig();\n-        userAttrMapperConfig.put(ProtocolMapperUtils.USER_ATTRIBUTE, ATTRIBUTE_TO_MAP_USER_INFO);\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.TOKEN_CLAIM_NAME, ATTRIBUTE_TO_MAP_USER_INFO);\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.JSON_TYPE, ProviderConfigProperty.STRING_TYPE);\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_ACCESS_TOKEN, \"false\");\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_ID_TOKEN, \"false\");\n-        userAttrMapperConfig.put(OIDCAttributeMapperHelper.INCLUDE_IN_USERINFO, \"true\");\n-        userAttrMapperConfig.put(ProtocolMapperUtils.MULTIVALUED, \"true\");\n-\n-\n-        client.setProtocolMappers(Arrays.asList(userAttrMapper));\n-\n-        return Collections.singletonList(client);\n-    }\n-\n-    @Override\n-    protected void applyDefaultConfiguration(final Map<String, String> config, IdentityProviderSyncMode syncMode) {\n-        config.put(IdentityProviderModel.SYNC_MODE, syncMode.toString());\n-        config.put(\"clientId\", CLIENT_ID);\n-        config.put(\"clientSecret\", CLIENT_SECRET);\n-        config.put(\"prompt\", \"login\");\n-        config.put(\"authorizationUrl\", getProviderRoot() + \"/auth/realms/\" + REALM_PROV_NAME + \"/protocol/openid-connect/auth\");\n-        config.put(\"tokenUrl\", getProviderRoot() + \"/auth/realms/\" + REALM_PROV_NAME + \"/protocol/openid-connect/token\");\n-        config.put(\"logoutUrl\", getProviderRoot() + \"/auth/realms/\" + REALM_PROV_NAME + \"/protocol/openid-connect/logout\");\n-        config.put(\"userInfoUrl\", getProviderRoot() + \"/auth/realms/\" + REALM_PROV_NAME + \"/protocol/openid-connect/userinfo\");\n-        config.put(\"defaultScope\", \"email profile\");\n-        config.put(\"backchannelSupported\", \"true\");\n-        config.put(\"disableUserInfo\", \"false\");\n-    }\n-\n-\n-}\n"}}, {"oid": "ef69ddfc47a07eaa62042779454b75768ffede16", "url": "https://github.com/keycloak/keycloak/commit/ef69ddfc47a07eaa62042779454b75768ffede16", "message": "Reduce code duplication and test count", "committedDate": "2020-10-02T18:56:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMjk0OA==", "url": "https://github.com/keycloak/keycloak/pull/7214#discussion_r499402948", "bodyText": "I think you can remove the class \"KcOidcBrokerClientUserInfoTest\" entirely and move the class KcOidcBrokerClientUserInfoTest.KcOidcBrokerConfigurationUserInfoOnlyMappers as the private method to this class? Also move the constant ATTRIBUTE_TO_MAP_USER_INFO from that class directly to your \"OidcUserInfoClaimToRoleMapperTest\"", "author": "mposolda", "createdAt": "2020-10-05T07:50:22Z", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.keycloak.testsuite.broker;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Test;\n+import org.keycloak.admin.client.resource.IdentityProviderResource;\n+import org.keycloak.broker.oidc.mappers.ClaimToRoleMapper;\n+import org.keycloak.broker.provider.ConfigConstants;\n+import org.keycloak.models.IdentityProviderMapperModel;\n+import org.keycloak.models.IdentityProviderMapperSyncMode;\n+import org.keycloak.representations.idm.IdentityProviderMapperRepresentation;\n+import org.keycloak.representations.idm.IdentityProviderRepresentation;\n+import org.keycloak.representations.idm.UserRepresentation;\n+\n+import java.util.List;\n+\n+public class OidcUserInfoClaimToRoleMapperTest extends AbstractRoleMapperTest {\n+\n+    private static final String USER_INFO_CLAIM = KcOidcBrokerClientUserInfoTest.ATTRIBUTE_TO_MAP_USER_INFO;\n+    private static final String USER_INFO_CLAIM_VALUE = \"value 1\";\n+    private String claimOnSecondLogin = \"\";\n+\n+    @Override\n+    protected BrokerConfiguration getBrokerConfiguration() {\n+        return new KcOidcBrokerClientUserInfoTest().getBrokerConfiguration();", "originalCommit": "ef69ddfc47a07eaa62042779454b75768ffede16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f028d8da8f831ee8d60e67b1955866d733afbbad", "chunk": "diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java\nindex dd5d0cf489..a145534314 100644\n--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java\n+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/OidcUserInfoClaimToRoleMapperTest.java\n\n@@ -8,21 +8,29 @@ import org.keycloak.broker.oidc.mappers.ClaimToRoleMapper;\n import org.keycloak.broker.provider.ConfigConstants;\n import org.keycloak.models.IdentityProviderMapperModel;\n import org.keycloak.models.IdentityProviderMapperSyncMode;\n-import org.keycloak.representations.idm.IdentityProviderMapperRepresentation;\n-import org.keycloak.representations.idm.IdentityProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-\n+import org.keycloak.models.IdentityProviderSyncMode;\n+import org.keycloak.protocol.ProtocolMapperUtils;\n+import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n+import org.keycloak.protocol.oidc.mappers.OIDCAttributeMapperHelper;\n+import org.keycloak.protocol.oidc.mappers.UserAttributeMapper;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.representations.idm.*;\n+\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n \n public class OidcUserInfoClaimToRoleMapperTest extends AbstractRoleMapperTest {\n \n-    private static final String USER_INFO_CLAIM = KcOidcBrokerClientUserInfoTest.ATTRIBUTE_TO_MAP_USER_INFO;\n+    protected static final String ATTRIBUTE_TO_MAP_USER_INFO = \"user-attribute-info\";\n+    private static final String USER_INFO_CLAIM = ATTRIBUTE_TO_MAP_USER_INFO;\n     private static final String USER_INFO_CLAIM_VALUE = \"value 1\";\n     private String claimOnSecondLogin = \"\";\n \n+\n     @Override\n     protected BrokerConfiguration getBrokerConfiguration() {\n-        return new KcOidcBrokerClientUserInfoTest().getBrokerConfiguration();\n+        return new KcOidcBrokerConfigurationUserInfoOnlyMappers();\n     }\n \n     @Test\n"}}, {"oid": "f028d8da8f831ee8d60e67b1955866d733afbbad", "url": "https://github.com/keycloak/keycloak/commit/f028d8da8f831ee8d60e67b1955866d733afbbad", "message": "Combine UserInfo KcOidcBrokerConfiguration with OidcUserInfoClaimToRoleMapperTest", "committedDate": "2020-10-05T19:12:41Z", "type": "commit"}]}