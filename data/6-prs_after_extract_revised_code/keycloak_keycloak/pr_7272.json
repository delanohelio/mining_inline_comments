{"pr_number": 7272, "pr_title": "KEYCLOAK-2940 - draft - Backchannel Logout", "pr_createdAt": "2020-07-16T12:59:25Z", "pr_url": "https://github.com/keycloak/keycloak/pull/7272", "timeline": [{"oid": "b99d4f01b06c8c9d4c53d52fc65b687b59458d99", "url": "https://github.com/keycloak/keycloak/commit/b99d4f01b06c8c9d4c53d52fc65b687b59458d99", "message": "KEYCLOAK-2940 Backchannel Logout", "committedDate": "2020-07-16T13:34:02Z", "type": "forcePushed"}, {"oid": "fe222ac49c388259b909d1b6ced803e93307d08a", "url": "https://github.com/keycloak/keycloak/commit/fe222ac49c388259b909d1b6ced803e93307d08a", "message": "KEYCLOAK-2940 Backchannel Logout", "committedDate": "2020-07-16T14:59:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzODgzMw==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r458338833", "bodyText": "I would just reuse org.keycloak.representations.IDToken#NONCE.", "author": "pedroigor", "createdAt": "2020-07-21T19:32:49Z", "path": "core/src/main/java/org/keycloak/util/TokenUtil.java", "diffHunk": "@@ -48,6 +48,11 @@\n \n     public static final String TOKEN_TYPE_OFFLINE = \"Offline\";\n \n+    public static final String TOKEN_TYPE_LOGOUT = \"Logout\";\n+\n+    public static final String TOKEN_BACKCHANNEL_LOGOUT_EVENT = \"http://schemas.openid.net/event/backchannel-logout\";\n+\n+    public static final String TOKEN_CLAIM_NONCE = \"nonce\";", "originalCommit": "fe222ac49c388259b909d1b6ced803e93307d08a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwMzI4Ng==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r458603286", "bodyText": "sure i will change that to the IDToken#NONCE", "author": "DaSmoo", "createdAt": "2020-07-22T07:52:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzODgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2NDg5NQ==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r458764895", "bodyText": "done", "author": "benjamin37", "createdAt": "2020-07-22T12:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzODgzMw=="}], "type": "inlineReview", "revised_code": {"commit": "9b7cee069f4a5a35dd92c5109e8ca9fad557bc30", "chunk": "diff --git a/core/src/main/java/org/keycloak/util/TokenUtil.java b/core/src/main/java/org/keycloak/util/TokenUtil.java\nindex a1ddff7322..96edcfdb16 100644\n--- a/core/src/main/java/org/keycloak/util/TokenUtil.java\n+++ b/core/src/main/java/org/keycloak/util/TokenUtil.java\n\n@@ -52,8 +52,6 @@ public class TokenUtil {\n \n     public static final String TOKEN_BACKCHANNEL_LOGOUT_EVENT = \"http://schemas.openid.net/event/backchannel-logout\";\n \n-    public static final String TOKEN_CLAIM_NONCE = \"nonce\";\n-\n     public static String attachOIDCScope(String scopeParam) {\n         if (scopeParam == null || scopeParam.isEmpty()) {\n             return OAuth2Constants.SCOPE_OPENID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDM0OA==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r458340348", "bodyText": "Instead of changing DDL, could we just persist the new data as client attributes? Similar to what we do with org.keycloak.protocol.oidc.OIDCConfigAttributes#JWKS_URL.\nIt should help to avoid all the migration-related code herein ...", "author": "pedroigor", "createdAt": "2020-07-21T19:35:51Z", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/entities/ClientEntity.java", "diffHunk": "@@ -130,6 +130,12 @@\n     @Column(name=\"BASE_URL\")\n     private String baseUrl;\n \n+    @Column(name=\"BACKCHANNEL_LOGOUT_URL\")", "originalCommit": "fe222ac49c388259b909d1b6ced803e93307d08a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2NTQ0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r458765449", "bodyText": "Done, we also removed the database migration files. No need to do database changes any more.", "author": "benjamin37", "createdAt": "2020-07-22T12:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "9b7cee069f4a5a35dd92c5109e8ca9fad557bc30", "chunk": "diff --git a/model/jpa/src/main/java/org/keycloak/models/jpa/entities/ClientEntity.java b/model/jpa/src/main/java/org/keycloak/models/jpa/entities/ClientEntity.java\nindex ec38180139..dc910db52f 100755\n--- a/model/jpa/src/main/java/org/keycloak/models/jpa/entities/ClientEntity.java\n+++ b/model/jpa/src/main/java/org/keycloak/models/jpa/entities/ClientEntity.java\n\n@@ -130,12 +130,6 @@ public class ClientEntity {\n     @Column(name=\"BASE_URL\")\n     private String baseUrl;\n \n-    @Column(name=\"BACKCHANNEL_LOGOUT_URL\")\n-    private String backchannelLogoutUrl;\n-\n-    @Column(name=\"BACKCHANNEL_LOGOUT_SESSION_REQUIRED\")\n-    private boolean backchannelLogoutSessionRequired;\n-\n     @Column(name=\"MANAGEMENT_URL\")\n     private String managementUrl;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MTUxNA==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r458341514", "bodyText": "Nitpick, but it helps to have a more concise set of changes and make review easier. Could you revert this change?\nThere are other few places that seem to be changing formatting only.", "author": "pedroigor", "createdAt": "2020-07-21T19:38:15Z", "path": "server-spi-private/src/main/java/org/keycloak/events/EventType.java", "diffHunk": "@@ -36,7 +36,8 @@\n     CLIENT_LOGIN_ERROR(true),\n \n     REFRESH_TOKEN(false),\n-    REFRESH_TOKEN_ERROR(false),", "originalCommit": "fe222ac49c388259b909d1b6ced803e93307d08a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2NjA2NA==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r458766064", "bodyText": "Sure, we reverted all formatting changes we found. Hope it's fine like this.", "author": "benjamin37", "createdAt": "2020-07-22T12:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MTUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "9b7cee069f4a5a35dd92c5109e8ca9fad557bc30", "chunk": "diff --git a/server-spi-private/src/main/java/org/keycloak/events/EventType.java b/server-spi-private/src/main/java/org/keycloak/events/EventType.java\nindex d6c1865b11..e063677ab9 100755\n--- a/server-spi-private/src/main/java/org/keycloak/events/EventType.java\n+++ b/server-spi-private/src/main/java/org/keycloak/events/EventType.java\n\n@@ -36,8 +36,7 @@ public enum EventType {\n     CLIENT_LOGIN_ERROR(true),\n \n     REFRESH_TOKEN(false),\n-    REFRESH_TOKEN_ERROR(\n-            false),\n+    REFRESH_TOKEN_ERROR(false),\n \n     /**\n      * @deprecated see KEYCLOAK-2266\n"}}, {"oid": "9b7cee069f4a5a35dd92c5109e8ca9fad557bc30", "url": "https://github.com/keycloak/keycloak/commit/9b7cee069f4a5a35dd92c5109e8ca9fad557bc30", "message": "KEYCLOAK-2940 Backchannel Logout", "committedDate": "2020-07-22T12:43:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwMTI0OQ==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r460101249", "bodyText": "Would be the case to have a specific attribute to configure logout signatures instead of re-using the same attribute for ID tokens?\nFor me, looks like what you did is OK where the client should already support any signature set for ID tokens already. The same goes for de cek and encryption ...", "author": "pedroigor", "createdAt": "2020-07-24T14:49:27Z", "path": "services/src/main/java/org/keycloak/jose/jws/DefaultTokenManager.java", "diffHunk": "@@ -129,6 +135,7 @@ public String signatureAlgorithm(TokenCategory category) {\n             case ACCESS:\n                 return getSignatureAlgorithm(OIDCConfigAttributes.ACCESS_TOKEN_SIGNED_RESPONSE_ALG);\n             case ID:\n+            case LOGOUT:", "originalCommit": "9b7cee069f4a5a35dd92c5109e8ca9fad557bc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MzQ0Nw==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r460793447", "bodyText": "We used the ID token implementation because in the specification it says that the logout token should be encrypted and validated similar to the id token. In particular 2.6 \"Logout Token Validation\" it describes the use of the encryption, used for the ID token during client registration. So we tried to reuse the current id token implementation parts instead of adding new ones.", "author": "DaSmoo", "createdAt": "2020-07-27T10:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwMTI0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjE2Nw==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r460106167", "bodyText": "Wouldn't be better if we just add the backchannel-logout endpoint from LogoutV2Endpoint to the LogoutEndpoint ?", "author": "pedroigor", "createdAt": "2020-07-24T14:57:19Z", "path": "services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocolService.java", "diffHunk": "@@ -240,13 +250,23 @@ public Object issueUserInfo() {\n         return endpoint;\n     }\n \n+    /* old deprecated logout endpoint needs to be removed in the future\n+    * https://issues.redhat.com/browse/KEYCLOAK-2940 */\n     @Path(\"logout\")\n     public Object logout() {\n         LogoutEndpoint endpoint = new LogoutEndpoint(tokenManager, realm, event);\n         ResteasyProviderFactory.getInstance().injectProperties(endpoint);\n         return endpoint;\n     }\n \n+    /* new logout endpoint  */\n+    @Path(\"logout-v2\")", "originalCommit": "9b7cee069f4a5a35dd92c5109e8ca9fad557bc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NDI3MQ==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r460794271", "bodyText": "Sure, we will add the logout parts to the existing logout endpoint. This was the part where we didn't know how far the deprecation will go, that's why we create a new Endpoint class. Just to be clear, from @stianst comment \"You can ignore updating the logout endpoint as part of this, we'll handle that as a separate issue. Take a look at https://issues.redhat.com/browse/KEYCLOAK-11603 for more detail\", i understand now that we ignore the deprecation but add all methods to the existing LogoutEndpoint() is that correct?", "author": "DaSmoo", "createdAt": "2020-07-27T10:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4MjQwMw==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r460882403", "bodyText": "Yes, we can always refactor later to deprecate and have a new endpoint,", "author": "pedroigor", "createdAt": "2020-07-27T13:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "626c753e3f76b7b499db406181ac3e47b9cd16a7", "chunk": "diff --git a/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocolService.java b/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocolService.java\nindex 2dcc9bd419..b59c7d30b0 100644\n--- a/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocolService.java\n+++ b/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocolService.java\n\n@@ -259,14 +253,6 @@ public class OIDCLoginProtocolService {\n         return endpoint;\n     }\n \n-    /* new logout endpoint  */\n-    @Path(\"logout-v2\")\n-    public Object logoutV2() {\n-        LogoutV2Endpoint endpoint = new LogoutV2Endpoint(tokenManager, realm, event);\n-        ResteasyProviderFactory.getInstance().injectProperties(endpoint);\n-        return endpoint;\n-    }\n-\n     @Path(\"revoke\")\n     public Object revoke() {\n         TokenRevocationEndpoint endpoint = new TokenRevocationEndpoint(realm, event);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDMxOA==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r460130318", "bodyText": "I think we could at least return a 504 to indicate that a client wasn't successful? Wdyt?\nAs per 2.8.  Back-Channel Logout Response.", "author": "pedroigor", "createdAt": "2020-07-24T15:36:27Z", "path": "services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java", "diffHunk": "@@ -404,7 +420,13 @@ private static boolean backchannelLogoutClientSession(KeycloakSession session, R\n             protocol.setRealm(realm)\n                     .setHttpHeaders(headers)\n                     .setUriInfo(uriInfo);\n-            protocol.backchannelLogout(userSession, clientSession);\n+\n+            /*\n+             * if we want to implement the specification to 100%, we would have to return the return correctly here. But\n+             * since the actual session of the client cannot be distinguished from the underlying ones we decided to\n+             * leave the value as it is for the first review of the pullrequest.\n+             */\n+            boolean clientSessionLogout = protocol.backchannelLogout(userSession, clientSession);", "originalCommit": "9b7cee069f4a5a35dd92c5109e8ca9fad557bc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMTQwNw==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r460801407", "bodyText": "From the point of the specification we would return an an 501 (see 2.7 Back-Channel Logout Actions). The problem here is that if we only have one client session (the OPs for example) a back-channel logout wouldn't make sense. In the past this part of the code has been always triggert and if it failed no actions or returns has been performed. But now it would be nice to know if this session that gets triggert with a back-channel logout is really a session that needs to be logout out via the back-channel logout or if it's just the OP's session that will be logged out later in the logout process ( see the method \"backchannelLogout(KeycloakSession session, RealmModel realm, UserSessionModel userSession, UriInfo uriInfo,\nClientConnection connection, HttpHeaders headers, boolean logoutBroker, boolean offlineSession\" Class: AuthenticationManager.java line 233). If we now trigger a back-channel logout on the ops session it would fail because no IDP is configured.", "author": "DaSmoo", "createdAt": "2020-07-27T10:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk2NjgxOA==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r460966818", "bodyText": "I see. I meant 504 to indicate whether or not some of the downstream sessions were not invalidated. 501 seems to be related to a failure during when processing the logout request?\nCould you elaborate a bit more about the failure if no IDP is configured, please ?", "author": "pedroigor", "createdAt": "2020-07-27T15:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxNTk3MQ==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r461015971", "bodyText": "yes, the idea from the openID specification is when an error happens in the back-channel logout happens, an 501 should be returned. I would agree that it would be better to give a more detailed feedback which session failed.\nThe problem is that this \"back-channel logout light\" (lets call it like that) is always used when an logout has been triggert.\nCurrently the protocol.backchannelLogout() gets triggert but no boolean or any response getting returned. To fulfil the openID back-channel logout specification, we would need to return an http status. Now with our change we saw in a test scenario that, when there is only one session (the OP itself) and the logout gets triggert through the @get public logout() this line of code also gets triggert and results in a false positive test with an incorrect return.\nBecause at the end the session gets removed by \"session.sessions().removeUserSession(realm, userSession);\" even if the back-channel logout failed. The return would be 5xx but the session had been successfully removed through the removeUserSession() method.\nMaybe the best way would be to find an attribute or something that indicates the session as a non back-channel logout session. Then it would be easy when the logout process loops over all client sessions to decide which sessions should also be logout with the back-channel process. You will find this loop in the method AuthenticationManager.backchannelLogoutAll() line 324.\nBut we wasn't able to find something like that. Maybe this is only an problem when the OP is an Keycloak.\nIf the OP is a Keycloak it always have an back-channel logout URL and supports the back-channel logout. So the OP would try to logout it self through a back-channel logout request. Which also results in a 5xx or 4xx error.\nIf it would help, we could for sure set up a call and discuss about that.", "author": "DaSmoo", "createdAt": "2020-07-27T16:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0OTczMQ==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r461049731", "bodyText": "I think I get it, see if it makes sense:\n\n\nI guess you mean org.keycloak.protocol.oidc.OIDCLoginProtocol#backchannelLogout, which we could change to return some information that the logout endpoint could use to decide which status code to return. At the very end of the method call you have a call to org.keycloak.services.managers.ResourceAdminManager#sendLogoutRequest which could return the status code that we could then use to build a Map where the key is the clientId and the value the status code. With this information, we could decide which status code to return.\n\n\nWhen there is a single session (the OP itself) and the current logout endpoint is called, I won't care much. But for the new endpoint, the expected behavior I think would be to just remove the session without involving a new logout request.\n\n\nBut yeah, I do think that proper status code is important for this new endpoint (not really for the current one).", "author": "pedroigor", "createdAt": "2020-07-27T17:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYwMzgzMg==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r463603832", "bodyText": "I'm not sure about returning a JSON with clientId as Key and HTTP Status of the downstream backchannel logout as value as response body of the backchannel logout REST call.\nGiven the scenario you have an OP Keycloak with multiple Clients connected which are called by downstream RPs. Someone sends a backchannel logout request to the OP Keycloak. This someone does typically not know which clients are configured in the OP Keycloak. OP sends backchannel logout requests to downstream clients, let's assume one returns 200 and one 501. The respose of OP Keycloak would look something like this:\nStatus: 504 Gateway Timeout\nBody:\n{\n  \"client_1\": 200,\n  \"client_2\": 501\n}\n\nThe first problem we see is that there can be multiple sessions in each downstream client that need to be logged out with one backchannel logout request. So one status code would not be enough. We could also add session id's and so on to the json to get rid of that problem.\nThe second problem is that \"someone\" who called the backchannel logout at the Keycloak OP does normally not know about client ids and session ids of the Keycloak OP. So that's not the kind of information that should be passed as a response right?\n\nOur suggestion is to just return a 504 in case of a downstream client failing to logout but leaving the response body empty. What do you think?", "author": "benjamin37", "createdAt": "2020-07-31T13:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxMDY3Mg==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r463610672", "bodyText": "Yeah, let's keep 504 and no body.\nLet's try to come up with something that solves the original idea as a follow-up. We can do other things here like returning a link for force/retry logout to specific clients, etc.", "author": "pedroigor", "createdAt": "2020-07-31T13:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3MTA5Ng==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r465671096", "bodyText": "Done", "author": "benjamin37", "createdAt": "2020-08-05T11:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "925971f5a0b587ff70102f5322fd54318a3c6294", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java b/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java\nindex 2644700ede..78610141c8 100755\n--- a/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java\n+++ b/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java\n\n@@ -381,39 +405,43 @@ public class AuthenticationManager {\n \n     /**\n      * Logs out the given client session and records the result into {@code logoutAuthSession} if set.\n+     * \n      * @param session\n      * @param realm\n      * @param clientSession\n      * @param logoutAuthSession auth session used for recording result of logout. May be {@code null}\n      * @param uriInfo\n      * @param headers\n-     * @return {@code true} if the client was or is already being logged out, {@code false} if logout failed or it is not known how to log it out.\n+     * @return {@code http status OK} if the client was or is already being logged out, {@code null} if it is\n+     *         not known how to log it out and no request is made, otherwise the response of the logout request.\n      */\n-    private static boolean backchannelLogoutClientSession(KeycloakSession session, RealmModel realm,\n-      AuthenticatedClientSessionModel clientSession, AuthenticationSessionModel logoutAuthSession,\n-      UriInfo uriInfo, HttpHeaders headers) {\n+    private static Response backchannelLogoutClientSession(KeycloakSession session, RealmModel realm,\n+            AuthenticatedClientSessionModel clientSession, AuthenticationSessionModel logoutAuthSession,\n+            UriInfo uriInfo, HttpHeaders headers) {\n         UserSessionModel userSession = clientSession.getUserSession();\n         ClientModel client = clientSession.getClient();\n \n-        if (client.isFrontchannelLogout() || AuthenticationSessionModel.Action.LOGGED_OUT.name().equals(clientSession.getAction())) {\n-            return false;\n+        if (client.isFrontchannelLogout()\n+                || AuthenticationSessionModel.Action.LOGGED_OUT.name().equals(clientSession.getAction())) {\n+            return null;\n         }\n \n         final AuthenticationSessionModel.Action logoutState = getClientLogoutAction(logoutAuthSession, client.getId());\n \n-        if (logoutState == AuthenticationSessionModel.Action.LOGGED_OUT || logoutState == AuthenticationSessionModel.Action.LOGGING_OUT) {\n-            return true;\n+        if (logoutState == AuthenticationSessionModel.Action.LOGGED_OUT\n+                || logoutState == AuthenticationSessionModel.Action.LOGGING_OUT) {\n+            return Response.ok().build();\n         }\n \n         if (!client.isEnabled()) {\n-            return false;\n+            return null;\n         }\n \n         try {\n             setClientLogoutAction(logoutAuthSession, client.getId(), AuthenticationSessionModel.Action.LOGGING_OUT);\n \n             String authMethod = clientSession.getProtocol();\n-            if (authMethod == null) return true; // must be a keycloak service like account\n+            if (authMethod == null) return Response.ok().build(); // must be a keycloak service like account\n \n             logger.debugv(\"backchannel logout to: {0}\", client.getClientId());\n             LoginProtocol protocol = session.getProvider(LoginProtocol.class, authMethod);\n"}}, {"oid": "626c753e3f76b7b499db406181ac3e47b9cd16a7", "url": "https://github.com/keycloak/keycloak/commit/626c753e3f76b7b499db406181ac3e47b9cd16a7", "message": "Merged PR 4031: reorganized the backchannel endpoint to the current logoutEndpoint\n\n<!---\nPlease read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\n-->\n\nreorganized the backchannel endpoint to the current logoutEndpoint", "committedDate": "2020-08-05T10:02:12Z", "type": "forcePushed"}, {"oid": "c713ca18a6e769f7cb21b8632cd119a9785ad346", "url": "https://github.com/keycloak/keycloak/commit/c713ca18a6e769f7cb21b8632cd119a9785ad346", "message": "KEYCLOAK-2940 Backchannel Logout", "committedDate": "2020-08-06T12:21:33Z", "type": "commit"}, {"oid": "483e3c71a7fc41b6da72b2e5bef6aa8c04288bce", "url": "https://github.com/keycloak/keycloak/commit/483e3c71a7fc41b6da72b2e5bef6aa8c04288bce", "message": "Merged PR 3988: CIAMAUTHZ-1418 sent sid claim only when it has been configured\n\n<!---\nPlease read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\n-->", "committedDate": "2020-08-06T12:21:34Z", "type": "commit"}, {"oid": "e079977b9919d441d78e31045378974185f3c588", "url": "https://github.com/keycloak/keycloak/commit/e079977b9919d441d78e31045378974185f3c588", "message": "Merged PR 4031: reorganized the backchannel endpoint to the current logoutEndpoint\n\n<!---\nPlease read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\n-->\n\nreorganized the backchannel endpoint to the current logoutEndpoint", "committedDate": "2020-08-06T12:21:34Z", "type": "commit"}, {"oid": "b1eb0139b2a3982aad48d3d14fd2fa64d67646a8", "url": "https://github.com/keycloak/keycloak/commit/b1eb0139b2a3982aad48d3d14fd2fa64d67646a8", "message": "KEYCLOAK-2940 Backchannel Logout", "committedDate": "2020-08-06T12:24:47Z", "type": "commit"}, {"oid": "0f41d0c058585ca2c3804066e42537cad696f7f7", "url": "https://github.com/keycloak/keycloak/commit/0f41d0c058585ca2c3804066e42537cad696f7f7", "message": "Merged PR 4031: reorganized the backchannel endpoint to the current logoutEndpoint\n\n<!---\nPlease read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\n-->\n\nreorganized the backchannel endpoint to the current logoutEndpoint", "committedDate": "2020-08-06T12:24:47Z", "type": "commit"}, {"oid": "925971f5a0b587ff70102f5322fd54318a3c6294", "url": "https://github.com/keycloak/keycloak/commit/925971f5a0b587ff70102f5322fd54318a3c6294", "message": "Merged PR 4067: backchannel logout repsonse handling\n\n<!---\nPlease read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\n-->\n\nadded Response as return type from the backchannel logout", "committedDate": "2020-08-06T12:24:47Z", "type": "commit"}, {"oid": "a9f77abc7bc2b7cb3ddc01b8e7eba6921229cfe1", "url": "https://github.com/keycloak/keycloak/commit/a9f77abc7bc2b7cb3ddc01b8e7eba6921229cfe1", "message": "add nested broker backchannel logout tests", "committedDate": "2020-08-06T12:24:47Z", "type": "commit"}, {"oid": "ca5354957dc3ffa373083dbc600fd0189045905d", "url": "https://github.com/keycloak/keycloak/commit/ca5354957dc3ffa373083dbc600fd0189045905d", "message": "fix rebase errors", "committedDate": "2020-08-06T12:28:47Z", "type": "commit"}, {"oid": "ca5354957dc3ffa373083dbc600fd0189045905d", "url": "https://github.com/keycloak/keycloak/commit/ca5354957dc3ffa373083dbc600fd0189045905d", "message": "fix rebase errors", "committedDate": "2020-08-06T12:28:47Z", "type": "forcePushed"}, {"oid": "3d54e79f3ce62dcc17c8505558d451e86fa3adb1", "url": "https://github.com/keycloak/keycloak/commit/3d54e79f3ce62dcc17c8505558d451e86fa3adb1", "message": "release connection", "committedDate": "2020-08-06T12:36:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzE4MDUxMg==", "url": "https://github.com/keycloak/keycloak/pull/7272#discussion_r617180512", "bodyText": "There is a typo here. It was meant to be logoutToken instead of logoutTokon.", "author": "CG-ANY", "createdAt": "2021-04-21T03:47:45Z", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/OAuthClient.java", "diffHunk": "@@ -663,6 +723,32 @@ public CloseableHttpResponse doLogout(String refreshToken, String clientSecret,\n         return client.execute(post);\n     }\n \n+    public CloseableHttpResponse doBackchannelLogout(String logoutTokon) {", "originalCommit": "3d54e79f3ce62dcc17c8505558d451e86fa3adb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}