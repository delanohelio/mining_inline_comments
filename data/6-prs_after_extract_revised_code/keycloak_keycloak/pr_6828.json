{"pr_number": 6828, "pr_title": "KEYCLOAK-12870 - Allow to pick arbitrary user for IdP linking", "pr_createdAt": "2020-02-25T00:51:30Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6828", "timeline": [{"oid": "252188bef98230f3b54474056bebe03332b266f0", "url": "https://github.com/keycloak/keycloak/commit/252188bef98230f3b54474056bebe03332b266f0", "message": "KEYCLOAK-12870 - Allow to pick arbitrary user for IdP linking", "committedDate": "2020-02-25T01:44:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MDE0Ng==", "url": "https://github.com/keycloak/keycloak/pull/6828#discussion_r387570146", "bodyText": "There is one small issue that changing the message and arguments would mean that message will be a bit broken for other languages despite english. I see you updated english resource bundle in this PR, but assuming you did not updated it, the message will be something like Authenticate as 'twitter' to link your account with\nSome similar out-of-sense message is now likely displayed for other languages.\nI wonder if you can try to update the message for other languages as well? I understand you don't understand other languages, but maybe at least some best-effort? :)\nFor example, I assume that French message Identifiez vous en tant que {0} afin de lier votre compte avec {1}\ncould be probably changed to something like Identifiez vous en tant afin de lier votre compte avec {0}\n(I don't understand french, so really just best-effort from my side :)\nAnother option is to remove the message and create completely new message, which will mean that other languages will see just default english message.", "author": "mposolda", "createdAt": "2020-03-04T10:17:30Z", "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpUsernamePasswordForm.java", "diffHunk": "@@ -22,51 +22,76 @@\n import org.keycloak.authentication.AuthenticationFlowException;\n import org.keycloak.authentication.authenticators.broker.util.SerializedBrokeredIdentityContext;\n import org.keycloak.authentication.authenticators.browser.UsernamePasswordForm;\n+import org.keycloak.broker.provider.BrokeredIdentityContext;\n import org.keycloak.forms.login.LoginFormsProvider;\n import org.keycloak.models.UserModel;\n import org.keycloak.services.managers.AuthenticationManager;\n import org.keycloak.services.messages.Messages;\n \n+import java.util.Optional;\n+\n import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n \n /**\n- * Same like classic username+password form, but username is \"known\" and user can't change it\n+ * Same like classic username+password form, but for use in IdP linking.\n+ *\n+ * User identity is optionally established by the preceding idp-create-user-if-unique execution.\n+ * In this case username field will be pre-filled (but still changeable).\n  *\n  * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n  */\n public class IdpUsernamePasswordForm extends UsernamePasswordForm {\n \n     @Override\n     protected Response challenge(AuthenticationFlowContext context, MultivaluedMap<String, String> formData) {\n-        UserModel existingUser = AbstractIdpAuthenticator.getExistingUser(context.getSession(), context.getRealm(), context.getAuthenticationSession());\n-\n-        return setupForm(context, formData, existingUser)\n+        return setupForm(context, formData, getExistingUser(context))\n                 .setStatus(Response.Status.OK)\n                 .createLoginUsernamePassword();\n     }\n \n     @Override\n     protected boolean validateForm(AuthenticationFlowContext context, MultivaluedMap<String, String> formData) {\n-        UserModel existingUser = AbstractIdpAuthenticator.getExistingUser(context.getSession(), context.getRealm(), context.getAuthenticationSession());\n-        context.setUser(existingUser);\n+        Optional<UserModel> existingUser = getExistingUser(context);\n+        existingUser.ifPresent(context::setUser);\n+\n+        boolean result = validateUserAndPassword(context, formData);\n \n         // Restore formData for the case of error\n         setupForm(context, formData, existingUser);\n \n-        return validatePassword(context, existingUser, formData);\n+        return result;\n     }\n \n-    protected LoginFormsProvider setupForm(AuthenticationFlowContext context, MultivaluedMap<String, String> formData, UserModel existingUser) {\n+    protected LoginFormsProvider setupForm(AuthenticationFlowContext context, MultivaluedMap<String, String> formData, Optional<UserModel> existingUser) {\n         SerializedBrokeredIdentityContext serializedCtx = SerializedBrokeredIdentityContext.readFromAuthenticationSession(context.getAuthenticationSession(), AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE);\n         if (serializedCtx == null) {\n             throw new AuthenticationFlowException(\"Not found serialized context in clientSession\", AuthenticationFlowError.IDENTITY_PROVIDER_ERROR);\n         }\n \n-        formData.putSingle(AuthenticationManager.FORM_USERNAME, existingUser.getUsername());\n-        return context.form()\n+        existingUser.ifPresent(u -> formData.putSingle(AuthenticationManager.FORM_USERNAME, u.getUsername()));\n+\n+        LoginFormsProvider form = context.form()\n                 .setFormData(formData)\n-                .setAttribute(LoginFormsProvider.USERNAME_EDIT_DISABLED, true)\n-                .setInfo(Messages.FEDERATED_IDENTITY_CONFIRM_REAUTHENTICATE_MESSAGE, existingUser.getUsername(), serializedCtx.getIdentityProviderId());\n+                .setAttribute(LoginFormsProvider.REGISTRATION_DISABLED, true)\n+                .setInfo(Messages.FEDERATED_IDENTITY_CONFIRM_REAUTHENTICATE_MESSAGE, serializedCtx.getIdentityProviderId());", "originalCommit": "252188bef98230f3b54474056bebe03332b266f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwODU3MA==", "url": "https://github.com/keycloak/keycloak/pull/6828#discussion_r394708570", "bodyText": "I have managed to provide translations for all languages, except ja, zh_CN, tr and no. For these languages, I have commented out the federatedIdentityConfirmReauthenticateMessage key until we have proper translations.", "author": "dteleguin", "createdAt": "2020-03-19T00:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MDE0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NzE2Nw==", "url": "https://github.com/keycloak/keycloak/pull/6828#discussion_r387577167", "bodyText": "Instead of this change, could we remove the check for if (!linkingUser.getId().equals(federatedUser.getId())) entirely? With this PR, there is a way that user authenticated in username/password form could be different than the one in the \"AbstractIdpAuthenticator.getExistingUser\" . So I believe that same logic can be for broker re-authentication. This means that IDENTITY_PROVIDER_DIFFERENT_USER_MESSAGE can be removed entirely from the \"Messages\" class and resource bundles. I think the similar change may now need to be done in the ResetCredentialsActionTokenHandler", "author": "mposolda", "createdAt": "2020-03-04T10:29:42Z", "path": "services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java", "diffHunk": "@@ -796,9 +812,13 @@ private Response afterPostBrokerLoginFlowSuccess(AuthenticationSessionModel auth\n             if (firstBrokerLoginInProgress) {\n                 logger.debugf(\"Reauthenticated with broker '%s' when linking user '%s' with other broker\", context.getIdpConfig().getAlias(), federatedUser.getUsername());\n \n-                UserModel linkingUser = AbstractIdpAuthenticator.getExistingUser(session, realmModel, authSession);\n-                if (!linkingUser.getId().equals(federatedUser.getId())) {\n-                    return redirectToErrorPage(authSession, Response.Status.BAD_REQUEST, Messages.IDENTITY_PROVIDER_DIFFERENT_USER_MESSAGE, federatedUser.getUsername(), linkingUser.getUsername());\n+                try {\n+                    UserModel linkingUser = AbstractIdpAuthenticator.getExistingUser(session, realmModel, authSession);", "originalCommit": "252188bef98230f3b54474056bebe03332b266f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNzc1MQ==", "url": "https://github.com/keycloak/keycloak/pull/6828#discussion_r394707751", "bodyText": "done", "author": "dteleguin", "createdAt": "2020-03-19T00:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NzE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "91aecc2996012be64d1d01cf1bc3eb8c19d5a8da", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java b/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java\nindex 747da51f1f..af8744e0ac 100755\n--- a/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java\n+++ b/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java\n\n@@ -812,15 +812,6 @@ public class IdentityBrokerService implements IdentityProvider.AuthenticationCal\n             if (firstBrokerLoginInProgress) {\n                 logger.debugf(\"Reauthenticated with broker '%s' when linking user '%s' with other broker\", context.getIdpConfig().getAlias(), federatedUser.getUsername());\n \n-                try {\n-                    UserModel linkingUser = AbstractIdpAuthenticator.getExistingUser(session, realmModel, authSession);\n-                    if (!linkingUser.getId().equals(federatedUser.getId())) {\n-                        return redirectToErrorPage(authSession, Response.Status.BAD_REQUEST, Messages.IDENTITY_PROVIDER_DIFFERENT_USER_MESSAGE, federatedUser.getUsername(), linkingUser.getUsername());\n-                    }\n-                } catch (AuthenticationFlowException e) {\n-                    logger.debug(\"No existing user in authSession\", e);\n-                }\n-\n                 SerializedBrokeredIdentityContext serializedCtx = SerializedBrokeredIdentityContext.readFromAuthenticationSession(authSession, AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE);\n                 authSession.setAuthNote(AbstractIdpAuthenticator.FIRST_BROKER_LOGIN_SUCCESS, serializedCtx.getIdentityProviderId());\n \n"}}, {"oid": "22b7b82b4d66e40027887e979a338ad039adbdea", "url": "https://github.com/keycloak/keycloak/commit/22b7b82b4d66e40027887e979a338ad039adbdea", "message": "KEYCLOAK-12870 - Allow to pick arbitrary user for IdP linking", "committedDate": "2020-03-16T21:59:11Z", "type": "commit"}, {"oid": "a32ee5a29c466aa8b31ba91dbacf811310e49b43", "url": "https://github.com/keycloak/keycloak/commit/a32ee5a29c466aa8b31ba91dbacf811310e49b43", "message": "KEYCLOAK-12870: always allow to choose user if password reset is called from first broker login flow", "committedDate": "2020-03-18T23:34:03Z", "type": "commit"}, {"oid": "91aecc2996012be64d1d01cf1bc3eb8c19d5a8da", "url": "https://github.com/keycloak/keycloak/commit/91aecc2996012be64d1d01cf1bc3eb8c19d5a8da", "message": "KEYCLOAK-12870: remove \"already authenticated as different user\" check and message", "committedDate": "2020-03-18T23:41:49Z", "type": "commit"}, {"oid": "7d09ddbe46e7c4a1b9ee237b7897c8a7f69246c1", "url": "https://github.com/keycloak/keycloak/commit/7d09ddbe46e7c4a1b9ee237b7897c8a7f69246c1", "message": "KEYCLOAK-12870: translations", "committedDate": "2020-03-19T00:01:14Z", "type": "commit"}, {"oid": "7d09ddbe46e7c4a1b9ee237b7897c8a7f69246c1", "url": "https://github.com/keycloak/keycloak/commit/7d09ddbe46e7c4a1b9ee237b7897c8a7f69246c1", "message": "KEYCLOAK-12870: translations", "committedDate": "2020-03-19T00:01:14Z", "type": "forcePushed"}, {"oid": "bf3b4f9a0f7aa7348bab87623f5ae70fea802970", "url": "https://github.com/keycloak/keycloak/commit/bf3b4f9a0f7aa7348bab87623f5ae70fea802970", "message": "KEYCLOAK-12870: fix tests", "committedDate": "2020-03-19T01:39:38Z", "type": "commit"}]}