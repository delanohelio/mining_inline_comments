{"pr_number": 6962, "pr_title": "KEYCLOAK-10927 - Implement LDAPv3 Password Modify Extended Operation \u2026", "pr_createdAt": "2020-04-05T17:10:29Z", "pr_url": "https://github.com/keycloak/keycloak/pull/6962", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMTU5MA==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426831590", "bodyText": "Is it possible to rename existing class LDAPConnectionTestManager to something like LDAPServerCapabilitiesManager and add the logic behind this into that class? This will allow that filling of some common connection properties (CONNECTION_URL, USE_TRUSTSTORE_SPI etc) can be probably some done in the shared code, which will be shared for existing method for testing connection and testing authentication", "author": "mposolda", "createdAt": "2020-05-18T18:57:34Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();", "originalCommit": "9100184bdb3c819511419ec60e13690fb4dee97d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzMDIzMw==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427430233", "bodyText": "Done.", "author": "cachescrubber", "createdAt": "2020-05-19T16:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMTU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a94bdd0f8c0dd261d13c4d3c14b95d590005ec5", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java b/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\nindex 91b080da7f..70e527ca84 100644\n--- a/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\n+++ b/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\n\n@@ -981,43 +966,6 @@ public class RealmAdminResource {\n                 config.getStartTls());\n     }\n \n-    /**\n-     * Get LDAP supported extensions.\n-     * @param config LDAP configuration\n-     * @return\n-     */\n-    @POST\n-    @Path(\"ldap-supported-extensions\")\n-    @NoCache\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n-    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n-\n-        auth.realm().requireManageRealm();\n-\n-        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n-\n-        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n-        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n-        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n-        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n-        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n-        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n-        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n-        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n-\n-        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();\n-        return Response.ok().entity(ldapOids).build();\n-    }\n-\n-    private String handleSavedBindCredential(final String componentId, final String bindCredentialParam) {\n-        if (componentId != null && ComponentRepresentation.SECRET_VALUE.equals(bindCredentialParam)) {\n-            return realm.getComponent(componentId).getConfig().getFirst(LDAPConstants.BIND_CREDENTIAL);\n-        } else {\n-            return bindCredentialParam;\n-        }\n-    }\n-\n     /**\n      * Test SMTP connection with current logged in user\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjEzNw==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426832137", "bodyText": "The AUTH_TYPE should be taken based on what is configured for the provider. In case that AUTH_TYPE is \"none\", it should use \"none\" here as well. Not sure if the representation object should be updated based on that to wrap this info?", "author": "mposolda", "createdAt": "2020-05-18T18:58:37Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);", "originalCommit": "9100184bdb3c819511419ec60e13690fb4dee97d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MDg0OQ==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426860849", "bodyText": "That is because AUTH_TYPE is not part of org.keycloak.representations.idm.TestLdapConnectionRepresentation as you said. I think that the rootDSL query should be done using the same credentials then used later on, to avoid permission problems. So it might be unnecessary to pass AUTH_TYPE, unless something like SASL is added?", "author": "cachescrubber", "createdAt": "2020-05-18T19:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3MzQzNg==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427173436", "bodyText": "Yes, I think that it may be needed to either:\n\nadd authType as another option to TestLdapConnectionRepresentation.\nassume \"bindType\" none in case that bindDn and bindCredential are not set?\n\nIt seems that (2) might be easier? However the bindType none should be supported. In many cases, administrator sets the bindType \"none\" when configuring their LDAP provider. In this case, querying the LDAP server rootDSL should be also possible with the bindType \"none\" .", "author": "mposolda", "createdAt": "2020-05-19T09:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzMDAyNA==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427430024", "bodyText": "Done. I added the authType to TestLdapConnectionRepresentation.", "author": "cachescrubber", "createdAt": "2020-05-19T16:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "4a94bdd0f8c0dd261d13c4d3c14b95d590005ec5", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java b/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\nindex 91b080da7f..70e527ca84 100644\n--- a/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\n+++ b/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\n\n@@ -981,43 +966,6 @@ public class RealmAdminResource {\n                 config.getStartTls());\n     }\n \n-    /**\n-     * Get LDAP supported extensions.\n-     * @param config LDAP configuration\n-     * @return\n-     */\n-    @POST\n-    @Path(\"ldap-supported-extensions\")\n-    @NoCache\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n-    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n-\n-        auth.realm().requireManageRealm();\n-\n-        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n-\n-        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n-        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n-        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n-        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n-        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n-        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n-        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n-        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n-\n-        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();\n-        return Response.ok().entity(ldapOids).build();\n-    }\n-\n-    private String handleSavedBindCredential(final String componentId, final String bindCredentialParam) {\n-        if (componentId != null && ComponentRepresentation.SECRET_VALUE.equals(bindCredentialParam)) {\n-            return realm.getComponent(componentId).getConfig().getFirst(LDAPConstants.BIND_CREDENTIAL);\n-        } else {\n-            return bindCredentialParam;\n-        }\n-    }\n-\n     /**\n      * Test SMTP connection with current logged in user\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426834916", "bodyText": "It will be better if response allows to differentiate between supportedControl, supportedExtensions and supportedFeatures. The JSON can possibly look like this:\n{ \n    \"supportedExtension\": [ \"1.3.6.1.4.1.1466.20036\" ],\n    \"supportedFeatures\": [ \"1.3.6.1.1.14\", \"1.3.6.1.4.1.4203.1.5.1\" ],\n    \"supportedControl\": [ \"1.2.840.113556.1.4.1413\", \"1.2.840.113556.1.4.2239\", \"1.2.840.113556.1.4.319\" ]\n}\n\nFeel free to create some internal JSON representation class for help with this - for example see TestLdapConnectionRepresentation for the inspiration", "author": "mposolda", "createdAt": "2020-05-18T19:03:58Z", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n+        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n+        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n+        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n+\n+        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();", "originalCommit": "9100184bdb3c819511419ec60e13690fb4dee97d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MTk0Mg==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426841942", "bodyText": "It will be also good to dump those supported extensions, features and controls to the server.log with the \"log.info\"", "author": "mposolda", "createdAt": "2020-05-18T19:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2Mjc5Mw==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426862793", "bodyText": "I though about that too, but my conclusion was it is practically not relevant whether a given OID is a control, extension or feature. This is why I refactored the method to \"capabilities\" in the first place. Do you think it is really necessary? The OID is unique anyway. Good point with the info log. Will be added.", "author": "cachescrubber", "createdAt": "2020-05-18T20:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3NDQxNw==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427174417", "bodyText": "I think that it may be useful in general to differentiate between control, extension and feature.\nLDAP server itself also differentiates between those 3 things, so from this perspective, differentiation makes sense :)", "author": "mposolda", "createdAt": "2020-05-19T09:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTYyNQ==", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427429625", "bodyText": "Done.", "author": "cachescrubber", "createdAt": "2020-05-19T16:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "4a94bdd0f8c0dd261d13c4d3c14b95d590005ec5", "chunk": "diff --git a/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java b/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\nindex 91b080da7f..70e527ca84 100644\n--- a/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\n+++ b/services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java\n\n@@ -981,43 +966,6 @@ public class RealmAdminResource {\n                 config.getStartTls());\n     }\n \n-    /**\n-     * Get LDAP supported extensions.\n-     * @param config LDAP configuration\n-     * @return\n-     */\n-    @POST\n-    @Path(\"ldap-supported-extensions\")\n-    @NoCache\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n-    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n-\n-        auth.realm().requireManageRealm();\n-\n-        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n-\n-        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n-        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n-        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n-        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n-        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n-        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n-        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n-        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n-\n-        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();\n-        return Response.ok().entity(ldapOids).build();\n-    }\n-\n-    private String handleSavedBindCredential(final String componentId, final String bindCredentialParam) {\n-        if (componentId != null && ComponentRepresentation.SECRET_VALUE.equals(bindCredentialParam)) {\n-            return realm.getComponent(componentId).getConfig().getFirst(LDAPConstants.BIND_CREDENTIAL);\n-        } else {\n-            return bindCredentialParam;\n-        }\n-    }\n-\n     /**\n      * Test SMTP connection with current logged in user\n      *\n"}}, {"oid": "4a94bdd0f8c0dd261d13c4d3c14b95d590005ec5", "url": "https://github.com/keycloak/keycloak/commit/4a94bdd0f8c0dd261d13c4d3c14b95d590005ec5", "message": "KEYCLOAK-10927 - Implement LDAPv3 Password Modify Extended Operation (RFC-3062).", "committedDate": "2020-05-20T04:50:26Z", "type": "commit"}, {"oid": "855d442d61760931e9d652c768c4cb7e6aa5d3f7", "url": "https://github.com/keycloak/keycloak/commit/855d442d61760931e9d652c768c4cb7e6aa5d3f7", "message": "KEYCLOAK-10927 - Introduce getLDAPSupportedExtensions(). Use result instead of configuration.", "committedDate": "2020-05-20T04:50:26Z", "type": "commit"}, {"oid": "bfcb29a8188218818bf465e3422824de71d9f8a3", "url": "https://github.com/keycloak/keycloak/commit/bfcb29a8188218818bf465e3422824de71d9f8a3", "message": "KEYCLOAK-10927 add possibility to query ldap supported extensions", "committedDate": "2020-05-20T04:50:26Z", "type": "commit"}, {"oid": "ec8e9637bd7e5679ddb6e59f4fe9fd2cff59a58d", "url": "https://github.com/keycloak/keycloak/commit/ec8e9637bd7e5679ddb6e59f4fe9fd2cff59a58d", "message": "KEYCLOAK-10927: reorganize layout of ldap config page", "committedDate": "2020-05-20T04:50:26Z", "type": "commit"}, {"oid": "da48fbc7af22fe66a0c72f4238c4d1f3ee6aa8f5", "url": "https://github.com/keycloak/keycloak/commit/da48fbc7af22fe66a0c72f4238c4d1f3ee6aa8f5", "message": "KEYCLOAK-10927 use configuration instead of rootDSE query.", "committedDate": "2020-05-20T04:50:26Z", "type": "commit"}, {"oid": "995fc39af4209e0df2f1654b30062f79434e9679", "url": "https://github.com/keycloak/keycloak/commit/995fc39af4209e0df2f1654b30062f79434e9679", "message": "KEYCLOAK-10927 Extend the RootDSE query to include controls and features as well as extension OIDs.", "committedDate": "2020-05-20T04:50:26Z", "type": "commit"}, {"oid": "f8c24cd1f05deb2bf95e1275bf8621dac2b4bf1e", "url": "https://github.com/keycloak/keycloak/commit/f8c24cd1f05deb2bf95e1275bf8621dac2b4bf1e", "message": "KEYCLOAK-10927: fix setting of passwordModifyExtended option", "committedDate": "2020-05-20T04:50:26Z", "type": "commit"}, {"oid": "1fcd008caf3f21d6f693e7f1cd89a03c89736d2b", "url": "https://github.com/keycloak/keycloak/commit/1fcd008caf3f21d6f693e7f1cd89a03c89736d2b", "message": "KEYCLOAK-10927: refactor LDAPConnectionTestManager and add corresponding test", "committedDate": "2020-05-20T04:50:27Z", "type": "commit"}, {"oid": "d5a50aec4e5b6e89d368064f1a7cff2012561be6", "url": "https://github.com/keycloak/keycloak/commit/d5a50aec4e5b6e89d368064f1a7cff2012561be6", "message": "KEYCLOAK-10927: rename LDAPConnectionTestManager to LDAPServerCapabilitiesManager", "committedDate": "2020-05-20T04:50:27Z", "type": "commit"}, {"oid": "708d0d3845caace3232ad421a9e82c8b042cab83", "url": "https://github.com/keycloak/keycloak/commit/708d0d3845caace3232ad421a9e82c8b042cab83", "message": "KEYCLOAK-10927: introduce CapabilityType", "committedDate": "2020-05-20T04:50:27Z", "type": "commit"}, {"oid": "6a1508031090fd5c06f65045460299e80f090764", "url": "https://github.com/keycloak/keycloak/commit/6a1508031090fd5c06f65045460299e80f090764", "message": "KEYCLOAK-10927: rename Rest Endpoint to ldapServerCapabilities", "committedDate": "2020-05-20T04:50:27Z", "type": "commit"}, {"oid": "b1548ace82eb51f396300776aee38ac6fc18bf4d", "url": "https://github.com/keycloak/keycloak/commit/b1548ace82eb51f396300776aee38ac6fc18bf4d", "message": "KEYCLOAK-10927: info log discovered capabilities", "committedDate": "2020-05-20T04:50:27Z", "type": "commit"}, {"oid": "b1548ace82eb51f396300776aee38ac6fc18bf4d", "url": "https://github.com/keycloak/keycloak/commit/b1548ace82eb51f396300776aee38ac6fc18bf4d", "message": "KEYCLOAK-10927: info log discovered capabilities", "committedDate": "2020-05-20T04:50:27Z", "type": "forcePushed"}, {"oid": "5603cdca9484bcd1ebbe82b4d80ac6da5d063ab2", "url": "https://github.com/keycloak/keycloak/commit/5603cdca9484bcd1ebbe82b4d80ac6da5d063ab2", "message": "KEYCLOAK-10927 Added LDAPPasswordModifyExtensionTest. A bit of refactoring related to query supported LDAP extensions and PAssword Modify operation", "committedDate": "2020-05-20T16:28:03Z", "type": "commit"}, {"oid": "8d2ae2a41118074e88cae7c3b331079a2e764164", "url": "https://github.com/keycloak/keycloak/commit/8d2ae2a41118074e88cae7c3b331079a2e764164", "message": "Merge branch 'mposolda-KEYCLOAK-10927_ldap_password_modify_extended_op-2' into KEYCLOAK-10927_ldap_password_modify_extended_op", "committedDate": "2020-05-20T17:34:47Z", "type": "commit"}]}