{"pr_number": 13118, "pr_title": "[BEAM-11094] Only work with fully expanded PCollections in TransformHierarchy and PTransformReplacements", "pr_createdAt": "2020-10-14T22:11:42Z", "pr_url": "https://github.com/apache/beam/pull/13118", "timeline": [{"oid": "80a9cded867b90ff3335409f84452ec85d2babc3", "url": "https://github.com/apache/beam/commit/80a9cded867b90ff3335409f84452ec85d2babc3", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements", "committedDate": "2020-10-14T23:44:56Z", "type": "forcePushed"}, {"oid": "83ad40d372864dc12c9ac258ae08382b50f8548c", "url": "https://github.com/apache/beam/commit/83ad40d372864dc12c9ac258ae08382b50f8548c", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements", "committedDate": "2020-10-15T02:32:43Z", "type": "forcePushed"}, {"oid": "45748f2ea89964a1fe4d1737c970c84a32429dbe", "url": "https://github.com/apache/beam/commit/45748f2ea89964a1fe4d1737c970c84a32429dbe", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements", "committedDate": "2020-10-15T03:25:48Z", "type": "forcePushed"}, {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6", "url": "https://github.com/apache/beam/commit/fc2f84abe50724803de083b397a1a00ee8677ce6", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements", "committedDate": "2020-10-16T22:15:39Z", "type": "commit"}, {"oid": "fc2f84abe50724803de083b397a1a00ee8677ce6", "url": "https://github.com/apache/beam/commit/fc2f84abe50724803de083b397a1a00ee8677ce6", "message": "Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements", "committedDate": "2020-10-16T22:15:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDcwOA==", "url": "https://github.com/apache/beam/pull/13118#discussion_r508100708", "bodyText": "Can we choose not to expose this as it looks like it is only used within PipelineTest.java\nIf there is a future need we can move it again (in hopefully a much smaller change) so its easier to reason about visibility.", "author": "lukecwik", "createdAt": "2020-10-19T22:32:17Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PCollectionViews.java", "diffHunk": "@@ -1403,4 +1427,55 @@ public int size() {\n       };\n     }\n   }\n+\n+  public static <InputT, ViewT> PCollectionView<ViewT> findPCollectionView(", "originalCommit": "fc2f84abe50724803de083b397a1a00ee8677ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxODY4NA==", "url": "https://github.com/apache/beam/pull/13118#discussion_r509018684", "bodyText": "Yea. This is actually a simplified version of something that exists in DataflowRunner.java. I did not want to risk the stability of this change by also altering it there, but they should be merged.", "author": "kennknowles", "createdAt": "2020-10-21T06:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMzAxOA==", "url": "https://github.com/apache/beam/pull/13118#discussion_r509433018", "bodyText": "I've moved it into the test class where it is used. I would still like to leave the alteration of DataflowRunner out of this PR, since my other PR that just adds a checkState illustrates that the DataflowRunner batch view overrides result in a corrupted graph that sort of works by luck. I don't want to disturb that potentially sensitive situation.", "author": "kennknowles", "createdAt": "2020-10-21T16:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "052a0f1fa03700c76ea52e27ef7a4667cfd09985", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PCollectionViews.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PCollectionViews.java\nindex 0e7c508643..343841ee11 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PCollectionViews.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PCollectionViews.java\n\n@@ -1427,55 +1423,4 @@ public class PCollectionViews {\n       };\n     }\n   }\n-\n-  public static <InputT, ViewT> PCollectionView<ViewT> findPCollectionView(\n-      final AppliedPTransform<\n-              PCollection<InputT>,\n-              PCollectionView<ViewT>,\n-              ? extends PTransform<PCollection<InputT>, PCollectionView<ViewT>>>\n-          transform) {\n-    final AtomicReference<PCollectionView<ViewT>> viewRef = new AtomicReference<>();\n-    transform\n-        .getPipeline()\n-        .traverseTopologically(\n-            new Pipeline.PipelineVisitor.Defaults() {\n-              // Stores whether we have entered the expected composite view transform.\n-              private boolean tracking = false;\n-\n-              @Override\n-              public CompositeBehavior enterCompositeTransform(TransformHierarchy.Node node) {\n-                if (transform.getTransform() == node.getTransform()) {\n-                  tracking = true;\n-                }\n-                return super.enterCompositeTransform(node);\n-              }\n-\n-              @Override\n-              public void visitPrimitiveTransform(TransformHierarchy.Node node) {\n-                if (tracking && node.getTransform() instanceof View.CreatePCollectionView) {\n-                  View.CreatePCollectionView createViewTransform =\n-                      (View.CreatePCollectionView) node.getTransform();\n-                  checkState(\n-                      viewRef.compareAndSet(null, createViewTransform.getView()),\n-                      \"Found more than one instance of a CreatePCollectionView when\"\n-                          + \"attempting to replace %s, found [%s, %s]\",\n-                      transform.getTransform(),\n-                      viewRef.get(),\n-                      createViewTransform.getView());\n-                }\n-              }\n-\n-              @Override\n-              public void leaveCompositeTransform(TransformHierarchy.Node node) {\n-                if (transform.getTransform() == node.getTransform()) {\n-                  tracking = false;\n-                }\n-              }\n-            });\n-    checkState(\n-        viewRef.get() != null,\n-        \"Expected to find CreatePCollectionView contained within %s\",\n-        transform.getTransform());\n-    return viewRef.get();\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTE4Ng==", "url": "https://github.com/apache/beam/pull/13118#discussion_r508101186", "bodyText": "Might as well and make this javadoc.", "author": "lukecwik", "createdAt": "2020-10-19T22:33:33Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+\n+/**\n+ * <b><i>For internal use. No backwards compatibility guarantees.</i></b>\n+ *\n+ * <p>A primitive value within Beam.\n+ */\n+@Internal\n+public class PValues {\n+\n+  // Do not instantiate\n+  private PValues() {}\n+\n+  // For backwards-compatibility, PCollectionView is still a \"PValue\" to users, which occurs in", "originalCommit": "fc2f84abe50724803de083b397a1a00ee8677ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MjkyOA==", "url": "https://github.com/apache/beam/pull/13118#discussion_r509442928", "bodyText": "Done", "author": "kennknowles", "createdAt": "2020-10-21T16:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "052a0f1fa03700c76ea52e27ef7a4667cfd09985", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\nindex 319cb1c8da..c1ab136f59 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\n\n@@ -22,6 +22,7 @@ import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Prec\n import java.util.LinkedHashMap;\n import java.util.Map;\n import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.transforms.PTransform;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTM0Mw==", "url": "https://github.com/apache/beam/pull/13118#discussion_r508101343", "bodyText": "nit: if you use /* */ blocks they will get line formatted correctly", "author": "lukecwik", "createdAt": "2020-10-19T22:33:58Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+\n+/**\n+ * <b><i>For internal use. No backwards compatibility guarantees.</i></b>\n+ *\n+ * <p>A primitive value within Beam.\n+ */\n+@Internal\n+public class PValues {\n+\n+  // Do not instantiate\n+  private PValues() {}\n+\n+  // For backwards-compatibility, PCollectionView is still a \"PValue\" to users, which occurs in\n+  // three places:\n+  //\n+  //    POutput#expand (users can write custom POutputs)\n+  //    PInput#expand (users can write custom PInputs)\n+  //    PTransform#getAdditionalInputs (users can have their composites report inputs not passed by\n+  // apply())\n+  //\n+  // These all return Map<TupleTag<?> PValue>. A user's implementation of these methods is permitted\n+  // to return\n+  // either a PCollection or a PCollectionView for each PValue. PCollection's expand to themselves\n+  // and\n+  // PCollectionView expands to the PCollection that it is a view of.\n+  public static Map<TupleTag<?>, PCollection<?>> fullyExpand(\n+      Map<TupleTag<?>, PValue> partiallyExpanded) {\n+    Map<TupleTag<?>, PCollection<?>> result = new LinkedHashMap<>();\n+    for (Map.Entry<TupleTag<?>, PValue> pvalue : partiallyExpanded.entrySet()) {\n+      if (pvalue.getValue() instanceof PCollection) {\n+        PCollection<?> previous = result.put(pvalue.getKey(), (PCollection<?>) pvalue.getValue());\n+        checkArgument(\n+            previous == null,\n+            \"Found conflicting %ss in flattened expansion of %s: %s maps to %s and %s\",\n+            partiallyExpanded,\n+            TupleTag.class.getSimpleName(),\n+            pvalue.getKey(),\n+            previous,\n+            pvalue.getValue());\n+      } else {\n+        if (pvalue.getValue().expand().size() == 1\n+            && Iterables.getOnlyElement(pvalue.getValue().expand().values())\n+                .equals(pvalue.getValue())) {\n+          throw new IllegalStateException(\n+              String.format(\n+                  \"Non %s %s that expands into itself %s\",\n+                  PCollection.class.getSimpleName(),\n+                  PValue.class.getSimpleName(),\n+                  pvalue.getValue()));\n+        }\n+        // At this point we know it is a PCollectionView or some internal hacked PValue. To be", "originalCommit": "fc2f84abe50724803de083b397a1a00ee8677ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0Mjk4NQ==", "url": "https://github.com/apache/beam/pull/13118#discussion_r509442985", "bodyText": "Done", "author": "kennknowles", "createdAt": "2020-10-21T16:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMTM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "052a0f1fa03700c76ea52e27ef7a4667cfd09985", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\nindex 319cb1c8da..c1ab136f59 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\n\n@@ -22,6 +22,7 @@ import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Prec\n import java.util.LinkedHashMap;\n import java.util.Map;\n import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.transforms.PTransform;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNTAwMw==", "url": "https://github.com/apache/beam/pull/13118#discussion_r508105003", "bodyText": "Why did this (and related classes) have to move?\nI could be convinced otherwise to keep the move but it looks like long term we would want to get rid of Pipeline#replaceAll some day since runners should only doing proto -> proto conversions.\nThe only place I could find it in was PipelineTest. Can we instead move that test to somewhere in runners core construction?", "author": "lukecwik", "createdAt": "2020-10-19T22:43:52Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformReplacements.java", "diffHunk": "@@ -15,20 +15,22 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.beam.runners.core.construction;\n+package org.apache.beam.sdk.runners;\n \n import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n \n import java.util.Map;\n import java.util.Set;\n-import org.apache.beam.sdk.runners.AppliedPTransform;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Internal;\n import org.apache.beam.sdk.transforms.PTransform;\n import org.apache.beam.sdk.values.PCollection;\n-import org.apache.beam.sdk.values.PValue;\n import org.apache.beam.sdk.values.TupleTag;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n \n /** */\n+@Internal", "originalCommit": "fc2f84abe50724803de083b397a1a00ee8677ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2MjU0NA==", "url": "https://github.com/apache/beam/pull/13118#discussion_r508962544", "bodyText": "I don't agree with this. There are many reasons\n\nProtos are about wire formats and often not preferred. One time they are very much not preferred is when the proto is a low-level representation of a higher-level concept, like a graph.\nThe SDKs are specifically designed to be the best API for writing correct Beam subgraphs. Using them is better than direct graph manipulation (and graph manipulation is better than proto manipulation).\n\nI may have misunderstood what you meant by \"proto -> proto\" conversions. But if it is to serve the same purpose as Pipeline#replaceAll then I think it should look more or less the same. We could remove Pipeline#replaceAll from the core SDK and have an enhanced version just for runners, but that is a lot of complexity.", "author": "kennknowles", "createdAt": "2020-10-21T03:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwNzk1OA==", "url": "https://github.com/apache/beam/pull/13118#discussion_r509407958", "bodyText": "We agree on replaceAll like functionality not existing in sdks core but I don't think having yet another layer on top of the protos would be much better then a few static methods that do common things that are necessary to easily walk and mutate a graph.", "author": "lukecwik", "createdAt": "2020-10-21T15:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMTYyOQ==", "url": "https://github.com/apache/beam/pull/13118#discussion_r509431629", "bodyText": "Resolved: I am removing the moves from the PR to avoid getting blocked on anything that could reopen discussions.", "author": "kennknowles", "createdAt": "2020-10-21T16:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNTAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "052a0f1fa03700c76ea52e27ef7a4667cfd09985", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformReplacements.java b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/PTransformReplacements.java\nsimilarity index 93%\nrename from sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformReplacements.java\nrename to runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/PTransformReplacements.java\nindex ca959a1ba0..b21db80005 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformReplacements.java\n+++ b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/PTransformReplacements.java\n\n@@ -15,22 +15,19 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.beam.sdk.runners;\n+package org.apache.beam.runners.core.construction;\n \n import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n \n import java.util.Map;\n import java.util.Set;\n-import org.apache.beam.sdk.annotations.Experimental;\n-import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.runners.AppliedPTransform;\n import org.apache.beam.sdk.transforms.PTransform;\n import org.apache.beam.sdk.values.PCollection;\n import org.apache.beam.sdk.values.TupleTag;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n \n /** */\n-@Internal\n-@Experimental(Experimental.Kind.CORE_RUNNERS_ONLY)\n public class PTransformReplacements {\n   /**\n    * Gets the singleton input of an {@link AppliedPTransform}, ignoring any additional inputs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwOTk3Mg==", "url": "https://github.com/apache/beam/pull/13118#discussion_r508109972", "bodyText": "This might make more sense in org.apache.beam.sdk.runners", "author": "lukecwik", "createdAt": "2020-10-19T22:57:48Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.values;", "originalCommit": "fc2f84abe50724803de083b397a1a00ee8677ce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzOTc1Ng==", "url": "https://github.com/apache/beam/pull/13118#discussion_r509439756", "bodyText": "I put it here because it is a companion to PValue. It is conventional for that to be the plural name, in the same package. If you still want me to move it after this explanation, I will. I don't care enough to block on it.", "author": "kennknowles", "createdAt": "2020-10-21T16:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwOTk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "052a0f1fa03700c76ea52e27ef7a4667cfd09985", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\nindex 319cb1c8da..c1ab136f59 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/values/PValues.java\n\n@@ -22,6 +22,7 @@ import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Prec\n import java.util.LinkedHashMap;\n import java.util.Map;\n import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.transforms.PTransform;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n \n /**\n"}}, {"oid": "052a0f1fa03700c76ea52e27ef7a4667cfd09985", "url": "https://github.com/apache/beam/commit/052a0f1fa03700c76ea52e27ef7a4667cfd09985", "message": "fixup! Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements", "committedDate": "2020-10-21T17:34:34Z", "type": "commit"}, {"oid": "a56e1c6bd41e8b6a115f7ed06543cdb9c6f39926", "url": "https://github.com/apache/beam/commit/a56e1c6bd41e8b6a115f7ed06543cdb9c6f39926", "message": "fixup! fixup! Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements", "committedDate": "2020-10-21T20:47:43Z", "type": "commit"}, {"oid": "09bad3c91f8518e947aa6ecf8cdf465cbc49a1dd", "url": "https://github.com/apache/beam/commit/09bad3c91f8518e947aa6ecf8cdf465cbc49a1dd", "message": "fixup! fixup! fixup! Only work with fully expanded PCollections in TransformHierarchy and in PTransformReplacements", "committedDate": "2020-10-21T20:51:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODQ4OQ==", "url": "https://github.com/apache/beam/pull/13118#discussion_r514578489", "bodyText": "I think this line and the similar one below below made it so a PCollectionView is not in outputs, so topological traversal does not eagerly process PCollectionView as a value, and PCollectionViews also do not have a producer (which is correct for the Beam model). This seems to affect only Dataflow and only because it has special logic which treats PCollectionView as a value in its v1beta3 translation.", "author": "kennknowles", "createdAt": "2020-10-29T21:27:49Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/runners/TransformHierarchy.java", "diffHunk": "@@ -483,12 +402,12 @@ private void setOutput(POutput output) {\n       checkState(\n           this.outputs == null, \"Tried to specify more than one output for %s\", getFullName());\n       checkNotNull(output, \"Tried to set the output of %s to null\", getFullName());\n-      this.outputs = output.expand();\n+      this.outputs = PValues.fullyExpand(output.expand());", "originalCommit": "09bad3c91f8518e947aa6ecf8cdf465cbc49a1dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}