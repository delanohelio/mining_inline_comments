{"pr_number": 11735, "pr_title": "[BEAM-2939] Ensure that watermark advances even when no elements are output.", "pr_createdAt": "2020-05-16T22:00:03Z", "pr_url": "https://github.com/apache/beam/pull/11735", "timeline": [{"oid": "3b153252b6612cd57c8be7d20a736ec9ea48879d", "url": "https://github.com/apache/beam/commit/3b153252b6612cd57c8be7d20a736ec9ea48879d", "message": "[BEAM-2939] Ensure that we update the watermark even when no elements are processed.", "committedDate": "2020-05-16T21:55:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5NTA1MA==", "url": "https://github.com/apache/beam/pull/11735#discussion_r426195050", "bodyText": "This is the key part of the change here, moving watermarkEstimator.setWatermark out of the while loop.", "author": "lukecwik", "createdAt": "2020-05-16T22:01:23Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -487,51 +493,54 @@ public void splitRestriction(\n \n     @NewTracker\n     public RestrictionTracker<\n-            KV<UnboundedSource<OutputT, CheckpointT>, CheckpointT>, UnboundedSourceValue<OutputT>[]>\n+            UnboundedSourceRestriction<OutputT, CheckpointT>, UnboundedSourceValue<OutputT>[]>\n         restrictionTracker(\n-            @Restriction KV<UnboundedSource<OutputT, CheckpointT>, CheckpointT> restriction,\n+            @Restriction UnboundedSourceRestriction<OutputT, CheckpointT> restriction,\n             PipelineOptions pipelineOptions) {\n       return new UnboundedSourceAsSDFRestrictionTracker(restriction, pipelineOptions);\n     }\n \n     @ProcessElement\n     public ProcessContinuation processElement(\n-        RestrictionTracker<\n-                KV<UnboundedSource<OutputT, CheckpointT>, CheckpointT>, UnboundedSourceValue[]>\n+        RestrictionTracker<UnboundedSourceRestriction<OutputT, CheckpointT>, UnboundedSourceValue[]>\n             tracker,\n         ManualWatermarkEstimator<Instant> watermarkEstimator,\n         OutputReceiver<ValueWithRecordId<OutputT>> receiver,\n         BundleFinalizer bundleFinalizer)\n         throws IOException {\n-      KV<UnboundedSource<OutputT, CheckpointT>, CheckpointT> initialRestriction =\n+      UnboundedSourceRestriction<OutputT, CheckpointT> initialRestriction =\n           tracker.currentRestriction();\n \n       UnboundedSourceValue<OutputT>[] out = new UnboundedSourceValue[1];\n       while (tracker.tryClaim(out)) {\n         receiver.outputWithTimestamp(\n             new ValueWithRecordId<>(out[0].getValue(), out[0].getId()), out[0].getTimestamp());\n-        watermarkEstimator.setWatermark(ensureTimestampWithinBounds(out[0].getWatermark()));\n       }\n \n+      UnboundedSourceRestriction<OutputT, CheckpointT> currentRestriction =\n+          tracker.currentRestriction();\n+\n+      // Advance the watermark even if zero elements may have been output.", "originalCommit": "3b153252b6612cd57c8be7d20a736ec9ea48879d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}