{"pr_number": 10576, "pr_title": "[BEAM-5605] Convert all BoundedSources to SplittableDoFns when using beam_fn_api experiment.", "pr_createdAt": "2020-01-14T00:19:28Z", "pr_url": "https://github.com/apache/beam/pull/10576", "timeline": [{"oid": "3fb6c3fd824f1bfd269eaf82104402203fa6f7db", "url": "https://github.com/apache/beam/commit/3fb6c3fd824f1bfd269eaf82104402203fa6f7db", "message": "[BEAM-5605] Convert all BoundedSources to SplittableDoFns when using portable pipelines.", "committedDate": "2020-01-14T01:07:59Z", "type": "forcePushed"}, {"oid": "10a38048d070cb708ed5f8cdd088b895c846e199", "url": "https://github.com/apache/beam/commit/10a38048d070cb708ed5f8cdd088b895c846e199", "message": "[BEAM-5605] Convert all BoundedSources to SplittableDoFns when using portable pipelines.", "committedDate": "2020-01-14T20:49:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw==", "url": "https://github.com/apache/beam/pull/10576#discussion_r367300103", "bodyText": "Does that mean we can remove \n  \n    \n      beam/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableRunner.java\n    \n    \n         Line 154\n      in\n      e1852ca\n    \n    \n    \n    \n\n        \n          \n           pipeline.replaceAll(ImmutableList.of(JavaReadViaImpulse.boundedOverride())); \n        \n    \n  \n\n ?", "author": "mxm", "createdAt": "2020-01-16T09:02:20Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -94,6 +106,20 @@ private Bounded(@Nullable String name, BoundedSource<T> source) {\n     public final PCollection<T> expand(PBegin input) {\n       source.validate();\n \n+      if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")) {", "originalCommit": "10a38048d070cb708ed5f8cdd088b895c846e199", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzMjc0MQ==", "url": "https://github.com/apache/beam/pull/10576#discussion_r367532741", "bodyText": "Eventually yes but for now we could exclude the override if \"beam_fn_api\" was used as an experiment.", "author": "lukecwik", "createdAt": "2020-01-16T16:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1ODI3Nw==", "url": "https://github.com/apache/beam/pull/10576#discussion_r367558277", "bodyText": "I thought the only application of this override is with the beam_fn_api flag enabled. The legacy translation does not support Impulse.", "author": "mxm", "createdAt": "2020-01-16T17:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1NDY5Ng==", "url": "https://github.com/apache/beam/pull/10576#discussion_r369754696", "bodyText": "Users/framework will need to ensure that the beam_fn_api experiment is always used.", "author": "lukecwik", "createdAt": "2020-01-22T19:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM3Mjk4MQ==", "url": "https://github.com/apache/beam/pull/10576#discussion_r377372981", "bodyText": "I was able to remove JavaReadViaImpulse. It required fixing up some tests that weren't setting the beam_fn_api experiment.", "author": "lukecwik", "createdAt": "2020-02-10T23:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "779b6dd1b978ac7967146a177a963c753b01a03c", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\nindex 5ed5245876..57362f4d5b 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java\n\n@@ -106,7 +108,9 @@ public class Read {\n     public final PCollection<T> expand(PBegin input) {\n       source.validate();\n \n-      if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")) {\n+      if (ExperimentalOptions.hasExperiment(input.getPipeline().getOptions(), \"beam_fn_api\")\n+          && !ExperimentalOptions.hasExperiment(\n+              input.getPipeline().getOptions(), \"beam_fn_api_use_deprecated_read\")) {\n         // We don't use Create here since Create is defined as a BoundedSource and using it would\n         // cause an infinite expansion loop. We can reconsider this if Create is implemented\n         // directly as a SplittableDoFn.\n"}}, {"oid": "b447fb27bbdfac7095907d9ed73f9f91ef867ea9", "url": "https://github.com/apache/beam/commit/b447fb27bbdfac7095907d9ed73f9f91ef867ea9", "message": "fixup! Fix TextIOReadTest and ensure that reading BoundedSource is done.", "committedDate": "2020-02-10T23:10:52Z", "type": "forcePushed"}, {"oid": "bad710bf28f76c0ee809dcfedb2f8d2f81b22e65", "url": "https://github.com/apache/beam/commit/bad710bf28f76c0ee809dcfedb2f8d2f81b22e65", "message": "[BEAM-5605] Convert all BoundedSources to SplittableDoFns when using portable pipelines.\n\nRemote JavaReadViaImpulse and make \"beam_fn_api\" use SplittableDoFn by default.", "committedDate": "2020-02-10T23:38:30Z", "type": "forcePushed"}, {"oid": "970e914fa1ca509e8104c9922d389915d0d488be", "url": "https://github.com/apache/beam/commit/970e914fa1ca509e8104c9922d389915d0d488be", "message": "fixup! Ensure that the expansion service always runs using the \"beam_fn_api\" experiment.", "committedDate": "2020-02-11T00:49:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NzQ5OQ==", "url": "https://github.com/apache/beam/pull/10576#discussion_r377847499", "bodyText": "Just to make sure I'm understanding correctly: This transform was only used for portable pipelines, right? So it isn't needed anymore now that we execute bounded reads by wrapping them in an SDF?", "author": "youngoli", "createdAt": "2020-02-11T19:23:33Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/JavaReadViaImpulse.java", "diffHunk": "@@ -1,176 +0,0 @@\n-/*", "originalCommit": "970e914fa1ca509e8104c9922d389915d0d488be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5MjgyOQ==", "url": "https://github.com/apache/beam/pull/10576#discussion_r377892829", "bodyText": "Yes", "author": "lukecwik", "createdAt": "2020-02-11T20:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NTY4MA==", "url": "https://github.com/apache/beam/pull/10576#discussion_r377945680", "bodyText": "Gotcha.\nI already approved this, but consider it double-approved.", "author": "youngoli", "createdAt": "2020-02-11T22:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NzQ5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4OTk5OQ==", "url": "https://github.com/apache/beam/pull/10576#discussion_r377889999", "bodyText": "\ud83d\udc4f", "author": "iemejia", "createdAt": "2020-02-11T20:49:45Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/Read.java", "diffHunk": "@@ -177,4 +205,128 @@ public void populateDisplayData(DisplayData.Builder builder) {\n           .include(\"source\", source);\n     }\n   }\n+\n+  /**\n+   * A splittable {@link DoFn} which executes a {@link BoundedSource}.\n+   *\n+   * <p>We model the element as the original source and the restriction as the sub-source. This\n+   * allows us to split the sub-source over and over yet still receive \"source\" objects as inputs.\n+   */\n+  static class BoundedSourceAsSDFWrapperFn<T> extends DoFn<BoundedSource<T>, T> {\n+    private static final long DEFAULT_DESIRED_BUNDLE_SIZE_BYTES = 64 * (1 << 20);\n+\n+    @GetInitialRestriction\n+    public BoundedSource<T> initialRestriction(@Element BoundedSource<T> element) {\n+      return element;\n+    }\n+\n+    @GetSize\n+    public double getSize(\n+        @Restriction BoundedSource<T> restriction, PipelineOptions pipelineOptions)\n+        throws Exception {\n+      return restriction.getEstimatedSizeBytes(pipelineOptions);\n+    }\n+\n+    @SplitRestriction\n+    public void splitRestriction(\n+        @Restriction BoundedSource<T> restriction,\n+        OutputReceiver<BoundedSource<T>> receiver,\n+        PipelineOptions pipelineOptions)\n+        throws Exception {\n+      for (BoundedSource<T> split :\n+          restriction.split(DEFAULT_DESIRED_BUNDLE_SIZE_BYTES, pipelineOptions)) {\n+        receiver.output(split);\n+      }\n+    }\n+\n+    @NewTracker\n+    public RestrictionTracker<BoundedSource<T>, Object[]> restrictionTracker(\n+        @Restriction BoundedSource<T> restriction, PipelineOptions pipelineOptions) {\n+      return new BoundedSourceAsSDFRestrictionTracker<>(restriction, pipelineOptions);\n+    }\n+\n+    @ProcessElement\n+    public void processElement(\n+        RestrictionTracker<BoundedSource<T>, Object[]> tracker, OutputReceiver<T> receiver)\n+        throws IOException {\n+      Object[] out = new Object[1];\n+      while (tracker.tryClaim(out)) {\n+        receiver.output((T) out[0]);\n+      }\n+    }\n+\n+    @GetRestrictionCoder\n+    public Coder<BoundedSource<T>> restrictionCoder() {\n+      return SerializableCoder.of(new TypeDescriptor<BoundedSource<T>>() {});\n+    }\n+\n+    /**\n+     * A fake restriction tracker which adapts to the {@link BoundedSource} API. The restriction\n+     * object is used to advance the underlying source and to \"return\" the current element.\n+     */\n+    private static class BoundedSourceAsSDFRestrictionTracker<T>", "originalCommit": "970e914fa1ca509e8104c9922d389915d0d488be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "028c0c98e749fb761ec30357eb4aac5158975d15", "url": "https://github.com/apache/beam/commit/028c0c98e749fb761ec30357eb4aac5158975d15", "message": "[BEAM-5605] Convert all BoundedSources to SplittableDoFns when using portable pipelines.\n\nRemote JavaReadViaImpulse and make \"beam_fn_api\" use SplittableDoFn by default.", "committedDate": "2020-02-12T17:15:54Z", "type": "commit"}, {"oid": "2539269f3cbd859ba745bff5b0ce117e6feda279", "url": "https://github.com/apache/beam/commit/2539269f3cbd859ba745bff5b0ce117e6feda279", "message": "fixup! Ensure that the expansion service always runs using the \"beam_fn_api\" experiment.", "committedDate": "2020-02-12T17:15:54Z", "type": "commit"}, {"oid": "08972ff93d0e7eb1d2f3e46b02ae1049b56ac8b2", "url": "https://github.com/apache/beam/commit/08972ff93d0e7eb1d2f3e46b02ae1049b56ac8b2", "message": "fixup! Fix Dataflow translation tests now that BoundedSources are treated as SplittableDoFns", "committedDate": "2020-02-12T17:15:54Z", "type": "commit"}, {"oid": "08972ff93d0e7eb1d2f3e46b02ae1049b56ac8b2", "url": "https://github.com/apache/beam/commit/08972ff93d0e7eb1d2f3e46b02ae1049b56ac8b2", "message": "fixup! Fix Dataflow translation tests now that BoundedSources are treated as SplittableDoFns", "committedDate": "2020-02-12T17:15:54Z", "type": "forcePushed"}, {"oid": "779b6dd1b978ac7967146a177a963c753b01a03c", "url": "https://github.com/apache/beam/commit/779b6dd1b978ac7967146a177a963c753b01a03c", "message": "fixup! Skip testing portable SDF version on Dataflow till it us supported.", "committedDate": "2020-02-13T17:40:07Z", "type": "commit"}]}