{"pr_number": 10617, "pr_title": "[BEAM-8889] Cleanup Beam to GCS connector interfacing code so it uses higher level objects such as GoogleCloudStorage.", "pr_createdAt": "2020-01-17T00:06:54Z", "pr_url": "https://github.com/apache/beam/pull/10617", "timeline": [{"oid": "502349d4a041babcbbc789e86efa3f568886d2e1", "url": "https://github.com/apache/beam/commit/502349d4a041babcbbc789e86efa3f568886d2e1", "message": "adding gRPC to GCS connector", "committedDate": "2020-01-16T22:08:11Z", "type": "commit"}, {"oid": "d8e8d5d99207e213a68ae55e91aba9512cb6366d", "url": "https://github.com/apache/beam/commit/d8e8d5d99207e213a68ae55e91aba9512cb6366d", "message": "adding gRPC to GCS connector", "committedDate": "2020-01-17T20:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3MjQ2OA==", "url": "https://github.com/apache/beam/pull/10617#discussion_r369172468", "bodyText": "I'm a bit hesitant to have this but i'm okay if we have to. @chamikaramj Do you think this is still necessary? If this is required, we might consider to have new API in getCloudStorage().create to accept uploadBufferSizeBytes to avoid code for each type of channels.", "author": "veblush", "createdAt": "2020-01-21T18:35:39Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,22 +440,14 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n+    WritableByteChannel channel = getCloudStorage().create(new StorageResourceId(path.getBucket()));\n     if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+      if (channel instanceof GoogleCloudStorageWriteChannel) {", "originalCommit": "d8e8d5d99207e213a68ae55e91aba9512cb6366d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNzc2OA==", "url": "https://github.com/apache/beam/pull/10617#discussion_r369317768", "bodyText": "This seems to be replaced with using AsyncWriteChannelOptions.setUploadChunkSize in GoogleCloudStorageOptions.WriteChannelOptions.", "author": "veblush", "createdAt": "2020-01-22T00:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3MjQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyNTUxMA==", "url": "https://github.com/apache/beam/pull/10617#discussion_r370425510", "bodyText": "done", "author": "vnorigoog", "createdAt": "2020-01-24T00:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3MjQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "21ba5215094d98e8a185284c2faa879ba8050b7e", "chunk": "diff --git a/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java b/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\nindex 0950350b9d..802457b074 100644\n--- a/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\n+++ b/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\n\n@@ -440,15 +447,21 @@ public class GcsUtil {\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    WritableByteChannel channel = getCloudStorage().create(new StorageResourceId(path.getBucket()));\n-    if (uploadBufferSizeBytes != null) {\n-      if (channel instanceof GoogleCloudStorageWriteChannel) {\n-        ((GoogleCloudStorageWriteChannel) channel).setUploadBufferSize(uploadBufferSizeBytes);\n-      } else if (channel instanceof GoogleCloudStorageGrpcWriteChannel) {\n-        ((GoogleCloudStorageGrpcWriteChannel) channel).setUploadBufferSize(uploadBufferSizeBytes);\n-      }\n+    if (uploadBufferSizeBytes == null) {\n+      return googleCloudStorage.create(new StorageResourceId(path.getBucket()));\n     }\n-    return channel;\n+    AsyncWriteChannelOptions wcOptions = googleCloudStorageOptions.getWriteChannelOptions();\n+    AsyncWriteChannelOptions newOptions =\n+        wcOptions.toBuilder().setUploadChunkSize(uploadBufferSizeBytes).build();\n+    GoogleCloudStorageOptions newGoogleCloudStorageOptions =\n+        googleCloudStorageOptions\n+            .toBuilder()\n+            .setWriteChannelOptions(newOptions)\n+            .setGrpcEnabled(this.shouldUseGrpc)\n+            .build();\n+    GoogleCloudStorage gcpStorage =\n+        new GoogleCloudStorageImpl(newGoogleCloudStorageOptions, this.storageClient);\n+    return gcpStorage.create(new StorageResourceId(path.getBucket()));\n   }\n \n   /** Returns whether the GCS bucket exists and is accessible. */\n"}}, {"oid": "21ba5215094d98e8a185284c2faa879ba8050b7e", "url": "https://github.com/apache/beam/commit/21ba5215094d98e8a185284c2faa879ba8050b7e", "message": "some tests are failing.\ndebugging.", "committedDate": "2020-01-24T00:29:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjI4MQ==", "url": "https://github.com/apache/beam/pull/10617#discussion_r370836281", "bodyText": "Can we combine this with code below? Does it need to call setGrpcEnabled, too?", "author": "veblush", "createdAt": "2020-01-24T20:50:48Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,23 +447,21 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n-    if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+    if (uploadBufferSizeBytes == null) {\n+      return googleCloudStorage.create(new StorageResourceId(path.getBucket()));", "originalCommit": "21ba5215094d98e8a185284c2faa879ba8050b7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NTg3NQ==", "url": "https://github.com/apache/beam/pull/10617#discussion_r370865875", "bodyText": "fixed.\nI had to rework the code a bit to assume that gcsio doesn't yet have grpc support - but make this code almost ready to use it when it is available in gcsio", "author": "vnorigoog", "createdAt": "2020-01-24T22:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMzE0Ng==", "url": "https://github.com/apache/beam/pull/10617#discussion_r373223146", "bodyText": "fixed.\nand uploaded the modifications.", "author": "vnorigoog", "createdAt": "2020-01-30T22:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7430318d08832973e129dfd862d72b7f4e5a99a7", "chunk": "diff --git a/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java b/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\nindex 802457b074..a6a11a347c 100644\n--- a/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\n+++ b/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\n\n@@ -450,15 +452,23 @@ public class GcsUtil {\n     if (uploadBufferSizeBytes == null) {\n       return googleCloudStorage.create(new StorageResourceId(path.getBucket()));\n     }\n+    // Building new instance of AsyncWriteChannelOptions can be switched to the following\n+    // after the next release - which will include AsyncWriteChannelOptions.toBuilder() method.\n+    //       AsyncWriteChannelOptions newOptions =\n+    //            wcOptions.toBuilder().setUploadChunkSize(uploadBufferSizeBytes).build();\n     AsyncWriteChannelOptions wcOptions = googleCloudStorageOptions.getWriteChannelOptions();\n     AsyncWriteChannelOptions newOptions =\n-        wcOptions.toBuilder().setUploadChunkSize(uploadBufferSizeBytes).build();\n-    GoogleCloudStorageOptions newGoogleCloudStorageOptions =\n-        googleCloudStorageOptions\n-            .toBuilder()\n-            .setWriteChannelOptions(newOptions)\n-            .setGrpcEnabled(this.shouldUseGrpc)\n+        AsyncWriteChannelOptions.builder()\n+            .setBufferSize(wcOptions.getBufferSize())\n+            .setPipeBufferSize(wcOptions.getPipeBufferSize())\n+            .setUploadChunkSize(uploadBufferSizeBytes)\n+            .setDirectUploadEnabled(wcOptions.isDirectUploadEnabled())\n             .build();\n+    // After grpc support is enabled in GoogleCloudDataproc/bigdata-interop repo,\n+    // add this to the following:\n+    //      .setGrpcEnabled(this.shouldUseGrpc)\n+    GoogleCloudStorageOptions newGoogleCloudStorageOptions =\n+        googleCloudStorageOptions.toBuilder().setWriteChannelOptions(newOptions).build();\n     GoogleCloudStorage gcpStorage =\n         new GoogleCloudStorageImpl(newGoogleCloudStorageOptions, this.storageClient);\n     return gcpStorage.create(new StorageResourceId(path.getBucket()));\n"}}, {"oid": "dc7ac6e53a24f9f07fc2246219fb725515b85746", "url": "https://github.com/apache/beam/commit/dc7ac6e53a24f9f07fc2246219fb725515b85746", "message": "This now includes changes to make Beam GCS connector code ready to use\ngRPC when gcsio is released with gRPC support.", "committedDate": "2020-01-24T22:04:23Z", "type": "commit"}, {"oid": "c05dda5d970fc3886a0e50f914dc3a7b8e8c8304", "url": "https://github.com/apache/beam/commit/c05dda5d970fc3886a0e50f914dc3a7b8e8c8304", "message": "Merge branch 'grpc-changes' of https://github.com/vnorigoog/beam into grpc-changes", "committedDate": "2020-01-24T22:08:21Z", "type": "commit"}, {"oid": "7430318d08832973e129dfd862d72b7f4e5a99a7", "url": "https://github.com/apache/beam/commit/7430318d08832973e129dfd862d72b7f4e5a99a7", "message": "This now includes changes to make Beam GCS connector code ready to use gRPC when gcsio is released with gRPC support.", "committedDate": "2020-01-24T22:10:49Z", "type": "commit"}, {"oid": "bafd3b986ca63ed7cf7a16dcc0dbbfe2ce89a74d", "url": "https://github.com/apache/beam/commit/bafd3b986ca63ed7cf7a16dcc0dbbfe2ce89a74d", "message": "Merge branch 'grpc-changes' of https://github.com/vnorigoog/beam into grpc-changes", "committedDate": "2020-01-24T22:11:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4OTg2Nw==", "url": "https://github.com/apache/beam/pull/10617#discussion_r370889867", "bodyText": "Seems like this changes contentType from whatever provided above to always null. We should check the code base to see if this may introduce any behavioral changes.", "author": "chamikaramj", "createdAt": "2020-01-24T23:51:45Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java", "diffHunk": "@@ -427,23 +449,29 @@ public WritableByteChannel create(GcsPath path, String type) throws IOException\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    GoogleCloudStorageWriteChannel channel =\n-        new GoogleCloudStorageWriteChannel(\n-            executorService,\n-            storageClient,\n-            new ClientRequestHelper<>(),\n-            path.getBucket(),\n-            path.getObject(),\n-            type,\n-            /* kmsKeyName= */ null,\n-            AsyncWriteChannelOptions.newBuilder().build(),\n-            new ObjectWriteConditions(),\n-            Collections.emptyMap());\n-    if (uploadBufferSizeBytes != null) {\n-      channel.setUploadBufferSize(uploadBufferSizeBytes);\n+    if (uploadBufferSizeBytes == null) {", "originalCommit": "bafd3b986ca63ed7cf7a16dcc0dbbfe2ce89a74d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NTIwMg==", "url": "https://github.com/apache/beam/pull/10617#discussion_r372655202", "bodyText": "Was this addressed ? I see this being used in a number of places and probably users can set mime type themselves since this is a pipeline option. Can this be a breaking change for some users (or some applications of Beam) ?\nFor example,\n\n  \n    \n      beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryRowWriter.java\n    \n    \n         Line 58\n      in\n      35da90a\n    \n    \n    \n    \n\n        \n          \n           channel = FileSystems.create(resourceId, mimeType);", "author": "chamikaramj", "createdAt": "2020-01-29T22:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4OTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MzkyOQ==", "url": "https://github.com/apache/beam/pull/10617#discussion_r372673929", "bodyText": "I think this can be address by passing CreateObjectOptions to googleCloudStorage.create. CreateObjectOptions has a way to configure ContentType.", "author": "veblush", "createdAt": "2020-01-29T22:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4OTg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1fad3a23bd840b3b0a04ec5eacee789e3a142a22", "chunk": "diff --git a/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java b/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\nindex a6a11a347c..d9600bffad 100644\n--- a/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\n+++ b/sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GcsUtil.java\n\n@@ -449,19 +449,18 @@ public class GcsUtil {\n    */\n   public WritableByteChannel create(GcsPath path, String type, Integer uploadBufferSizeBytes)\n       throws IOException {\n-    if (uploadBufferSizeBytes == null) {\n-      return googleCloudStorage.create(new StorageResourceId(path.getBucket()));\n-    }\n-    // Building new instance of AsyncWriteChannelOptions can be switched to the following\n-    // after the next release - which will include AsyncWriteChannelOptions.toBuilder() method.\n+    // Soon, AsyncWriteChannelOptions will have toBuilder() method.\n+    // At that point, AsyncWriteChannelOptions can be built from an existing instance, like so:\n     //       AsyncWriteChannelOptions newOptions =\n     //            wcOptions.toBuilder().setUploadChunkSize(uploadBufferSizeBytes).build();\n     AsyncWriteChannelOptions wcOptions = googleCloudStorageOptions.getWriteChannelOptions();\n+    int uploadChunkSize =\n+        (uploadBufferSizeBytes == null) ? wcOptions.getUploadChunkSize() : uploadBufferSizeBytes;\n     AsyncWriteChannelOptions newOptions =\n         AsyncWriteChannelOptions.builder()\n             .setBufferSize(wcOptions.getBufferSize())\n             .setPipeBufferSize(wcOptions.getPipeBufferSize())\n-            .setUploadChunkSize(uploadBufferSizeBytes)\n+            .setUploadChunkSize(uploadChunkSize)\n             .setDirectUploadEnabled(wcOptions.isDirectUploadEnabled())\n             .build();\n     // After grpc support is enabled in GoogleCloudDataproc/bigdata-interop repo,\n"}}, {"oid": "1fad3a23bd840b3b0a04ec5eacee789e3a142a22", "url": "https://github.com/apache/beam/commit/1fad3a23bd840b3b0a04ec5eacee789e3a142a22", "message": "Merge branch 'grpc-changes' of https://github.com/vnorigoog/beam into grpc-changes", "committedDate": "2020-01-28T19:56:57Z", "type": "commit"}, {"oid": "075bf1c30f6560f88beaae6f60c53e6a4e09ebf7", "url": "https://github.com/apache/beam/commit/075bf1c30f6560f88beaae6f60c53e6a4e09ebf7", "message": "Merge branch 'grpc-changes' of https://github.com/vnorigoog/beam into grpc-changes", "committedDate": "2020-01-28T19:58:05Z", "type": "commit"}, {"oid": "797bdc13621dabd81554af47a02671131cdbd463", "url": "https://github.com/apache/beam/commit/797bdc13621dabd81554af47a02671131cdbd463", "message": "Merge branch 'grpc-changes' of https://github.com/vnorigoog/beam into grpc-changes", "committedDate": "2020-01-30T22:13:01Z", "type": "commit"}, {"oid": "95560ea10ddc17ea1590bf7f3b535d596c5194e3", "url": "https://github.com/apache/beam/commit/95560ea10ddc17ea1590bf7f3b535d596c5194e3", "message": "Merge branch 'grpc-changes' of https://github.com/vnorigoog/beam into grpc-changes", "committedDate": "2020-01-30T22:14:00Z", "type": "commit"}]}