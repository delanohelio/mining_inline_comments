{"pr_number": 12843, "pr_title": "[BEAM-10895] Support UNNEST an (possibly nested) array field of an struct column", "pr_createdAt": "2020-09-14T23:07:31Z", "pr_url": "https://github.com/apache/beam/pull/12843", "timeline": [{"oid": "46fbff02be66d967df5156f5f056bba8aedf6a23", "url": "https://github.com/apache/beam/commit/46fbff02be66d967df5156f5f056bba8aedf6a23", "message": "Support UNNEST an (possibly nested) array field of an struct column", "committedDate": "2020-09-14T23:04:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk5MjI4Ng==", "url": "https://github.com/apache/beam/pull/12843#discussion_r488992286", "bodyText": "So it looks like guaranteed to have nested row except for the last index? If not better to add validation here.", "author": "amaliujia", "createdAt": "2020-09-15T21:41:45Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamUnnestRel.java", "diffHunk": "@@ -111,31 +112,41 @@ public RelWriter explainTerms(RelWriter pw) {\n       Schema joinedSchema = CalciteUtils.toSchema(getRowType());\n \n       return outer\n-          .apply(ParDo.of(new UnnestFn(joinedSchema, unnestIndex)))\n+          .apply(ParDo.of(new UnnestFn(joinedSchema, unnestIndices)))\n           .setRowSchema(joinedSchema);\n     }\n   }\n \n   private static class UnnestFn extends DoFn<Row, Row> {\n \n     private final Schema outputSchema;\n-    private final int unnestIndex;\n+    private final List<Integer> unnestIndices;\n \n-    private UnnestFn(Schema outputSchema, int unnestIndex) {\n+    private UnnestFn(Schema outputSchema, List<Integer> unnestIndices) {\n       this.outputSchema = outputSchema;\n-      this.unnestIndex = unnestIndex;\n+      this.unnestIndices = unnestIndices;\n     }\n \n     @ProcessElement\n     public void process(@Element Row row, OutputReceiver<Row> out) {\n-\n-      @Nullable Collection<Object> rawValues = row.getArray(unnestIndex);\n+      Row rowWithArrayField = row;\n+      Schema schemaWithArrayField = outputSchema;\n+      for (int i = unnestIndices.size() - 1; i > 0; i--) {\n+        rowWithArrayField = rowWithArrayField.getRow(unnestIndices.get(i));", "originalCommit": "46fbff02be66d967df5156f5f056bba8aedf6a23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMjE4NQ==", "url": "https://github.com/apache/beam/pull/12843#discussion_r492322185", "bodyText": "I believe the updated code in BeamUnnestRule.java will guarantee this.", "author": "robinyqiu", "createdAt": "2020-09-21T20:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk5MjI4Ng=="}], "type": "inlineReview", "revised_code": null}]}