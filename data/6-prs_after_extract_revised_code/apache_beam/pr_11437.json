{"pr_number": 11437, "pr_title": "[BEAM-9770] Add BigQueryIO deadletter pattern", "pr_createdAt": "2020-04-16T07:50:43Z", "pr_url": "https://github.com/apache/beam/pull/11437", "timeline": [{"oid": "3e15b7e6dc32f02e92cd721875fa6b18fe593afd", "url": "https://github.com/apache/beam/commit/3e15b7e6dc32f02e92cd721875fa6b18fe593afd", "message": "[BEAM-9770] Add BigQueryIO deadletter pattern", "committedDate": "2020-04-17T02:52:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMDUyNw==", "url": "https://github.com/apache/beam/pull/11437#discussion_r410320527", "bodyText": "Probably change to \"retryTransientErrors\" ? I'm afraid many users will just copy and use this pipeline as a template and will keep this entry in their production pipelines.", "author": "chamikaramj", "createdAt": "2020-04-17T16:04:09Z", "path": "examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java", "diffHunk": "@@ -753,35 +750,93 @@ public static void main(String[] args) {\n       // [START CustomSessionWindow5]\n \n       PCollection<TableRow> p =\n-          Pipeline.create()\n-              .apply(\n-                  \"Create data\",\n-                  Create.timestamped(\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 12).set(\"gap\", 5),\n-                          new Instant()),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"desktop\").set(\"score\", 4), new Instant()),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", -3).set(\"gap\", 5),\n-                          new Instant().plus(2000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 2).set(\"gap\", 5),\n-                          new Instant().plus(9000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"mobile\").set(\"score\", 7).set(\"gap\", 5),\n-                          new Instant().plus(12000)),\n-                      TimestampedValue.of(\n-                          new TableRow().set(\"user\", \"desktop\").set(\"score\", 10),\n-                          new Instant().plus(12000))));\n+              Pipeline.create()\n+                      .apply(\n+                              \"Create data\",\n+                              Create.timestamped(\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 12).set(\"gap\", 5),\n+                                              new Instant()),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"desktop\").set(\"score\", 4), new Instant()),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", -3).set(\"gap\", 5),\n+                                              new Instant().plus(2000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 2).set(\"gap\", 5),\n+                                              new Instant().plus(9000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"mobile\").set(\"score\", 7).set(\"gap\", 5),\n+                                              new Instant().plus(12000)),\n+                                      TimestampedValue.of(\n+                                              new TableRow().set(\"user\", \"desktop\").set(\"score\", 10),\n+                                              new Instant().plus(12000))));\n       // [END CustomSessionWindow5]\n \n       // [START CustomSessionWindow6]\n       p.apply(\n-          \"Window into sessions\",\n-          Window.<TableRow>into(\n-              DynamicSessions.withDefaultGapDuration(Duration.standardSeconds(10))));\n+              \"Window into sessions\",\n+              Window.<TableRow>into(\n+                      DynamicSessions.withDefaultGapDuration(Duration.standardSeconds(10))));\n       // [END CustomSessionWindow6]\n+    }\n+\n+    public static class DeadLetterBigQuery {\n+      public static void deadletter(String[] args) {\n+        // [START BigQueryIODeadLetter]\n+        // Create pipeline\n+        PipelineOptions options =\n+                PipelineOptionsFactory.fromArgs(args).withValidation().as(BigQueryOptions.class);\n+\n+        Pipeline p = Pipeline.create(options);\n+\n+        // Create a bug by writing the 2nd value as null. The API will correctly\n+        // throw an error when trying to insert a null value into a REQUIRED field.\n+        WriteResult result =\n+                p.apply(Create.of(1, 2))\n+                        .apply(\n+                                BigQueryIO.<Integer>write()\n+                                        .withSchema(\n+                                                new TableSchema()\n+                                                        .setFields(\n+                                                                com.google.common.collect.ImmutableList.of(\n+                                                                        new TableFieldSchema()\n+                                                                                .setName(\"num\")\n+                                                                                .setType(\"INTEGER\")\n+                                                                                .setMode(\"REQUIRED\"))))\n+                                        .to(\"Test.dummyTable\")\n+                                        .withFormatFunction(x -> new TableRow().set(\"num\", (x == 2) ? null : x))\n+                                        .withFailedInsertRetryPolicy(InsertRetryPolicy.neverRetry())", "originalCommit": "3e15b7e6dc32f02e92cd721875fa6b18fe593afd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzNDQ0Mg==", "url": "https://github.com/apache/beam/pull/11437#discussion_r411034442", "bodyText": "Fixed.", "author": "rezarokni", "createdAt": "2020-04-20T01:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMDUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "73f1455e38b4decb4598230ce1aec40bb85195b6", "chunk": "diff --git a/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java b/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java\nindex c63985872e..92a172efff 100644\n--- a/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java\n+++ b/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java\n\n@@ -806,7 +806,7 @@ public class Snippets {\n                                                                                 .setMode(\"REQUIRED\"))))\n                                         .to(\"Test.dummyTable\")\n                                         .withFormatFunction(x -> new TableRow().set(\"num\", (x == 2) ? null : x))\n-                                        .withFailedInsertRetryPolicy(InsertRetryPolicy.neverRetry())\n+                                        .withFailedInsertRetryPolicy(InsertRetryPolicy.retryTransientErrors())\n                                         // Forcing the bounded pipeline to use streaming inserts\n                                         .withMethod(BigQueryIO.Write.Method.STREAMING_INSERTS)\n                                         // set the withExtendedErrorInfo property.\n"}}, {"oid": "73f1455e38b4decb4598230ce1aec40bb85195b6", "url": "https://github.com/apache/beam/commit/73f1455e38b4decb4598230ce1aec40bb85195b6", "message": "[BEAM-9770] Add BigQueryIO deadletter pattern\nChange Retry policy type.\nAdd note about InsertRetryPolicy.\nFix documentation.html bad URL for bigqueryio pattern", "committedDate": "2020-04-21T07:00:38Z", "type": "forcePushed"}, {"oid": "cfa11fb0ddc1ce178686e8d5dfc6ed615dd5763f", "url": "https://github.com/apache/beam/commit/cfa11fb0ddc1ce178686e8d5dfc6ed615dd5763f", "message": "[BEAM-9770] Add BigQueryIO deadletter pattern\nChange Retry policy type.\nAdd note about InsertRetryPolicy.\nFix documentation.html bad URL for bigqueryio pattern\n\nAdd language select to file.\n\nAdd Python example to BigQueryIO deadletter.", "committedDate": "2020-05-04T07:30:00Z", "type": "forcePushed"}, {"oid": "9bc7bf78b0339a175c70e98b998396ee179c0162", "url": "https://github.com/apache/beam/commit/9bc7bf78b0339a175c70e98b998396ee179c0162", "message": "[BEAM-9770] Add BigQueryIO deadletter pattern\nChange Retry policy type.\nAdd note about InsertRetryPolicy.\nFix documentation.html bad URL for bigqueryio pattern\n\nAdd language select to file.\n\nAdd Python example to BigQueryIO deadletter.", "committedDate": "2020-05-04T07:33:39Z", "type": "forcePushed"}, {"oid": "7df5e3f5527a17b739abb6dacdf753c9d579f126", "url": "https://github.com/apache/beam/commit/7df5e3f5527a17b739abb6dacdf753c9d579f126", "message": "[BEAM-9770] Add BigQueryIO deadletter pattern\nChange Retry policy type.\nAdd note about InsertRetryPolicy.\nFix documentation.html bad URL for bigqueryio pattern\n\nAdd language select to file.\n\nAdd Python example to BigQueryIO deadletter.\n\nfixup", "committedDate": "2020-05-14T03:36:16Z", "type": "forcePushed"}, {"oid": "dfb4f01ad812881a83f3d8a45342b11d5e4c85b4", "url": "https://github.com/apache/beam/commit/dfb4f01ad812881a83f3d8a45342b11d5e4c85b4", "message": "[BEAM-9770] Add BigQueryIO deadletter pattern\nDecouple .java and .py snippits commit for purpose of PR.", "committedDate": "2020-05-15T03:11:36Z", "type": "forcePushed"}, {"oid": "9d2295039fe72a87d2bc5e64d02f8c3363681c35", "url": "https://github.com/apache/beam/commit/9d2295039fe72a87d2bc5e64d02f8c3363681c35", "message": "[BEAM-9770] Add BigQueryIO deadletter pattern\nDecouple .java and .py snippits commit for purpose of PR.\nAdd back changes for Snippets.java", "committedDate": "2020-05-15T21:09:58Z", "type": "commit"}, {"oid": "9d2295039fe72a87d2bc5e64d02f8c3363681c35", "url": "https://github.com/apache/beam/commit/9d2295039fe72a87d2bc5e64d02f8c3363681c35", "message": "[BEAM-9770] Add BigQueryIO deadletter pattern\nDecouple .java and .py snippits commit for purpose of PR.\nAdd back changes for Snippets.java", "committedDate": "2020-05-15T21:09:58Z", "type": "forcePushed"}]}