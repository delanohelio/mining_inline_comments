{"pr_number": 13225, "pr_title": "[BEAM-11154] Check coder proto to avoid registering same coder under \u2026", "pr_createdAt": "2020-10-29T20:37:19Z", "pr_url": "https://github.com/apache/beam/pull/13225", "timeline": [{"oid": "113ae6fef7df30f7101983c376f7c691cea32fdf", "url": "https://github.com/apache/beam/commit/113ae6fef7df30f7101983c376f7c691cea32fdf", "message": "[BEAM-11154] Check coder proto to avoid registering same coder under different name in step translation phase", "committedDate": "2020-10-29T20:33:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwNzkwNw==", "url": "https://github.com/apache/beam/pull/13225#discussion_r514607907", "bodyText": "Keep an additional Map<RunnerApi.Coder, String> coderProtoToId for this? The objects in the map should be shared by reference so very little overhead.", "author": "kennknowles", "createdAt": "2020-10-29T22:40:29Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SdkComponents.java", "diffHunk": "@@ -264,10 +264,18 @@ public String registerCoder(Coder<?> coder) throws IOException {\n     if (existing != null) {\n       return existing;\n     }\n+    // Unlike StructuredCoder, custom coders may not have proper implementation of hashCode() and\n+    // equals(), this lead to unnecessary duplications. In order to avoid this we examine already\n+    // registered coders and see if we can find a matching proto, and consider them same coder.\n+    RunnerApi.Coder coderProto = CoderTranslation.toProto(coder, this);\n+    for (Map.Entry<String, RunnerApi.Coder> entry : componentsBuilder.getCodersMap().entrySet()) {", "originalCommit": "113ae6fef7df30f7101983c376f7c691cea32fdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NTI2NQ==", "url": "https://github.com/apache/beam/pull/13225#discussion_r514645265", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-10-30T00:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwNzkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "08693c3965f3d08159337813f85c8fe1902fb6cf", "chunk": "diff --git a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SdkComponents.java b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SdkComponents.java\nindex ecfc092a8b..fe4bc0b484 100644\n--- a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SdkComponents.java\n+++ b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SdkComponents.java\n\n@@ -268,14 +270,13 @@ public class SdkComponents {\n     // equals(), this lead to unnecessary duplications. In order to avoid this we examine already\n     // registered coders and see if we can find a matching proto, and consider them same coder.\n     RunnerApi.Coder coderProto = CoderTranslation.toProto(coder, this);\n-    for (Map.Entry<String, RunnerApi.Coder> entry : componentsBuilder.getCodersMap().entrySet()) {\n-      if (entry.getValue().equals(coderProto)) {\n-        return entry.getKey();\n-      }\n+    if (coderProtoToId.containsKey(coderProto)) {\n+      return coderProtoToId.get(coderProto);\n     }\n     String baseName = NameUtils.approximateSimpleName(coder);\n     String name = uniqify(baseName, coderIds.values());\n     coderIds.put(coder, name);\n+    coderProtoToId.put(coderProto, name);\n     componentsBuilder.putCoders(name, coderProto);\n     return name;\n   }\n"}}, {"oid": "08693c3965f3d08159337813f85c8fe1902fb6cf", "url": "https://github.com/apache/beam/commit/08693c3965f3d08159337813f85c8fe1902fb6cf", "message": "Use CoderProtoToId map", "committedDate": "2020-10-29T23:14:49Z", "type": "commit"}]}