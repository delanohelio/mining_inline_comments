{"pr_number": 12297, "pr_title": "[BEAM-10137] Add KinesisIO for cross-language usage with python wrapper", "pr_createdAt": "2020-07-17T12:09:54Z", "pr_url": "https://github.com/apache/beam/pull/12297", "timeline": [{"oid": "ee06c842341c3ce3e6ae5524306bca1d5571d6fb", "url": "https://github.com/apache/beam/commit/ee06c842341c3ce3e6ae5524306bca1d5571d6fb", "message": "[BEAM-10137] Add KinesisIO Read Cross-language transform", "committedDate": "2020-07-17T14:02:00Z", "type": "forcePushed"}, {"oid": "ae771a63db318b930739de5c09a0a70c2b7f29cd", "url": "https://github.com/apache/beam/commit/ae771a63db318b930739de5c09a0a70c2b7f29cd", "message": "[BEAM-10137] Add KinesisIO Read Cross-language transform", "committedDate": "2020-07-17T14:04:03Z", "type": "forcePushed"}, {"oid": "ab6da5ae32aa63907229f6c7ae778410f4462da3", "url": "https://github.com/apache/beam/commit/ab6da5ae32aa63907229f6c7ae778410f4462da3", "message": "[BEAM-10137] Add KinesisIO Read Cross-language transform", "committedDate": "2020-07-17T14:06:35Z", "type": "forcePushed"}, {"oid": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "url": "https://github.com/apache/beam/commit/b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "message": "[BEAM-10137] Add KinesisIO Read Cross-language transform", "committedDate": "2020-07-22T12:02:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzODA5NA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459138094", "bodyText": "I think it would be cleaner just to have a single registrar with inner classes for all the builders and the configuration classes. WDYT?", "author": "TheNeuralBit", "createdAt": "2020-07-22T23:23:03Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisReadTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.kinesis;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/** Exposes {@link KinesisIO.Read} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class KinesisReadTransformRegistrar implements ExternalTransformRegistrar {", "originalCommit": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NTIwNQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459245205", "bodyText": "I much prefer extracting as much code as possible but since everything is in one package in Kinesis then it makes sense. I'll do this change in Write PR. To be honest I'm not sure whether splitting this to 4PRs is a good idea, but I'll give it a try", "author": "piotr-szuberski", "createdAt": "2020-07-23T06:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzODA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzODczNQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r460338735", "bodyText": "Yeah I think I would actually prefer reviewing it as one big PR if that's ok with you", "author": "TheNeuralBit", "createdAt": "2020-07-25T00:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzODA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ba979364e5ea608859e071fef79c94ea218f3bef", "chunk": "diff --git a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisReadTransformRegistrar.java b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisReadTransformRegistrar.java\ndeleted file mode 100644\nindex 00f3f9a3d7..0000000000\n--- a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisReadTransformRegistrar.java\n+++ /dev/null\n\n@@ -1,175 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.beam.sdk.io.kinesis;\n-\n-import com.amazonaws.regions.Regions;\n-import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n-import com.google.auto.service.AutoService;\n-import java.util.Map;\n-import org.apache.beam.sdk.annotations.Experimental;\n-import org.apache.beam.sdk.annotations.Experimental.Kind;\n-import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n-import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n-import org.apache.beam.sdk.transforms.PTransform;\n-import org.apache.beam.sdk.values.PBegin;\n-import org.apache.beam.sdk.values.PCollection;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n-import org.joda.time.Duration;\n-import org.joda.time.Instant;\n-\n-/** Exposes {@link KinesisIO.Read} as an external transform for cross-language usage. */\n-@Experimental(Kind.PORTABILITY)\n-@AutoService(ExternalTransformRegistrar.class)\n-public class KinesisReadTransformRegistrar implements ExternalTransformRegistrar {\n-\n-  public static final String URN = \"beam:external:java:kinesis:read:v1\";\n-\n-  @Override\n-  public Map<String, Class<? extends ExternalTransformBuilder>> knownBuilders() {\n-    return ImmutableMap.of(URN, KinesisReadTransformRegistrar.Builder.class);\n-  }\n-\n-  public static class ReadConfiguration extends CrossLanguageConfiguration {\n-    private Long maxNumRecords;\n-    private Long maxReadTime;\n-    private String initialPositionInStream;\n-    private Long initialTimestampInStream;\n-    private Long requestRecordsLimit;\n-    private Long upToDateThreshold;\n-    private Long maxCapacityPerShard;\n-    private String watermarkPolicy;\n-    private Long watermarkIdleDurationThreshold;\n-    private Long rateLimit;\n-\n-    public void setMaxNumRecords(Long maxNumRecords) {\n-      this.maxNumRecords = maxNumRecords;\n-    }\n-\n-    public void setMaxReadTime(Long maxReadTime) {\n-      this.maxReadTime = maxReadTime;\n-    }\n-\n-    public void setInitialPositionInStream(String initialPositionInStream) {\n-      this.initialPositionInStream = initialPositionInStream;\n-    }\n-\n-    public void setInitialTimestampInStream(Long initialTimestampInStream) {\n-      this.initialTimestampInStream = initialTimestampInStream;\n-    }\n-\n-    public void setRequestRecordsLimit(Long requestRecordsLimit) {\n-      this.requestRecordsLimit = requestRecordsLimit;\n-    }\n-\n-    public void setUpToDateThreshold(Long upToDateThreshold) {\n-      this.upToDateThreshold = upToDateThreshold;\n-    }\n-\n-    public void setMaxCapacityPerShard(Long maxCapacityPerShard) {\n-      this.maxCapacityPerShard = maxCapacityPerShard;\n-    }\n-\n-    public void setWatermarkPolicy(String watermarkPolicy) {\n-      this.watermarkPolicy = watermarkPolicy;\n-    }\n-\n-    public void setWatermarkIdleDurationThreshold(Long watermarkIdleDurationThreshold) {\n-      this.watermarkIdleDurationThreshold = watermarkIdleDurationThreshold;\n-    }\n-\n-    public void setRateLimit(Long rateLimit) {\n-      this.rateLimit = rateLimit;\n-    }\n-  }\n-\n-  private enum WatermarkPolicy {\n-    ARRIVAL_TIME,\n-    PROCESSING_TIME\n-  }\n-\n-  @Experimental(Kind.PORTABILITY)\n-  public static class Builder\n-      implements ExternalTransformBuilder<ReadConfiguration, PBegin, PCollection<byte[]>> {\n-    @Override\n-    public PTransform<PBegin, PCollection<byte[]>> buildExternal(ReadConfiguration configuration) {\n-      KinesisIO.Read readTransform =\n-          KinesisIO.read()\n-              .withStreamName(configuration.streamName)\n-              .withAWSClientsProvider(\n-                  configuration.awsAccessKey,\n-                  configuration.awsSecretKey,\n-                  Regions.valueOf(configuration.region),\n-                  configuration.serviceEndpoint);\n-\n-      if (configuration.maxNumRecords != null) {\n-        readTransform = readTransform.withMaxNumRecords(configuration.maxNumRecords);\n-      }\n-      if (configuration.upToDateThreshold != null) {\n-        readTransform =\n-            readTransform.withUpToDateThreshold(Duration.millis(configuration.upToDateThreshold));\n-      }\n-      if (configuration.maxCapacityPerShard != null) {\n-        readTransform =\n-            readTransform.withMaxCapacityPerShard(configuration.maxCapacityPerShard.intValue());\n-      }\n-      if (configuration.watermarkPolicy != null) {\n-        switch (WatermarkPolicy.valueOf(configuration.watermarkPolicy)) {\n-          case ARRIVAL_TIME:\n-            if (configuration.watermarkIdleDurationThreshold != null) {\n-              readTransform =\n-                  readTransform.withArrivalTimeWatermarkPolicy(\n-                      Duration.millis(configuration.watermarkIdleDurationThreshold));\n-            } else {\n-              readTransform = readTransform.withArrivalTimeWatermarkPolicy();\n-            }\n-            break;\n-          case PROCESSING_TIME:\n-            readTransform = readTransform.withProcessingTimeWatermarkPolicy();\n-            break;\n-          default:\n-            throw new RuntimeException(\n-                String.format(\n-                    \"Unsupported watermark policy type: %s\", configuration.watermarkPolicy));\n-        }\n-      }\n-      if (configuration.rateLimit != null) {\n-        readTransform =\n-            readTransform.withFixedDelayRateLimitPolicy(Duration.millis(configuration.rateLimit));\n-      }\n-      if (configuration.maxReadTime != null) {\n-        readTransform =\n-            readTransform.withMaxReadTime(Duration.standardSeconds(configuration.maxReadTime));\n-      }\n-      if (configuration.initialPositionInStream != null) {\n-        readTransform =\n-            readTransform.withInitialPositionInStream(\n-                InitialPositionInStream.valueOf(configuration.initialPositionInStream));\n-      }\n-      if (configuration.requestRecordsLimit != null) {\n-        readTransform =\n-            readTransform.withRequestRecordsLimit(configuration.requestRecordsLimit.intValue());\n-      }\n-      if (configuration.initialTimestampInStream != null) {\n-        readTransform =\n-            readTransform.withInitialTimestampInStream(\n-                Instant.ofEpochMilli(configuration.initialTimestampInStream));\n-      }\n-      return readTransform.withoutMetadata();\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459149111", "bodyText": "We should file a jira for making KinesisIO.Read (with metadata) available. I think this would be possible if we register a schema for KinesisRecord, but it won't work cross-language until we have portable support for datetimes (i.e. BEAM-7554 will be a blocker). Also maybe this one should use a URN like \"read_without_metadata\" or \"read_data_only\" so we can use \"read\" in the future.", "author": "TheNeuralBit", "createdAt": "2020-07-23T00:00:27Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -561,6 +569,41 @@ public Read withMaxCapacityPerShard(Integer maxCapacity) {\n     }\n   }\n \n+  /**\n+   * A {@link PTransform} to read from Kinesis stream. Similar to {@link KinesisIO.Read}, but\n+   * removes Kinesis metatdata and returns a {@link PCollection} of {@link byte[]}. See {@link\n+   * KinesisIO} for more information on usage and configuration of reader.\n+   */\n+  public static class TypedWithoutMetadata extends PTransform<PBegin, PCollection<byte[]>> {", "originalCommit": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTk1Mw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459149953", "bodyText": "Also bikesheddy comment: I'm not sure about the name TypedWithoutMetadata, should it be ReadWithoutMetadata?", "author": "TheNeuralBit", "createdAt": "2020-07-23T00:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1OTk5OQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459259999", "bodyText": "My first attempt was to register a KnownCoder with coder registrar for KinesisRecord, but later I noticed that datetime is missing so I tried to send longs. But even so I still was getting beam:coders:javasdk:0.1 when I tried to use it in python.", "author": "piotr-szuberski", "createdAt": "2020-07-23T07:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDM0Mw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459260343", "bodyText": "I followed the code in KafkaIO where TypedWithoutMetadata is used. ReadWithoutMetadata tells indeed much more.", "author": "piotr-szuberski", "createdAt": "2020-07-23T07:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI3Njc5NQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459276795", "bodyText": "I changed the URN to read_data, I think it's self-explanatory for a kinesis user.", "author": "piotr-szuberski", "createdAt": "2020-07-23T08:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ba979364e5ea608859e071fef79c94ea218f3bef", "chunk": "diff --git a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\nindex 4c58768b62..8ff1da254e 100644\n--- a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n+++ b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n\n@@ -574,10 +566,10 @@ public final class KinesisIO {\n    * removes Kinesis metatdata and returns a {@link PCollection} of {@link byte[]}. See {@link\n    * KinesisIO} for more information on usage and configuration of reader.\n    */\n-  public static class TypedWithoutMetadata extends PTransform<PBegin, PCollection<byte[]>> {\n+  public static class ReadWithoutMetadata extends PTransform<PBegin, PCollection<byte[]>> {\n     private final Read read;\n \n-    TypedWithoutMetadata(Read read) {\n+    ReadWithoutMetadata(Read read) {\n       super(\"KinesisIO.Read\");\n       this.read = read;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjYyNg==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459152626", "bodyText": "I think it will be confusing to have this function here, since every other with... method returns a Read class. A user might expect to be able to do:\nKinesisIO.read()\n   .withoutMetadata()\n   .withMaxCapacityPerShard(x)\n\nInstead we should add a KinesisIO.readWithoutMetadata() that returns something like TypedWithoutMetadata with all the same configuration parameters as Read. You might take a look at how this is handled in PubsubIO for inspiration, I think it has a similar problem where it supports multiple different output types, but we want them all to share some configuration parameters. It looks like the way it's handled there is with a Read type, and you pass in a function for converting PubsubMessage to T.\nAlternatively, you could move the logic to extract the payload into the external transform builder, rather than adding the interface here (I think there's value in adding it here though if you want to take it on).", "author": "TheNeuralBit", "createdAt": "2020-07-23T00:13:31Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -536,6 +537,13 @@ public Read withMaxCapacityPerShard(Integer maxCapacity) {\n       return toBuilder().setMaxCapacityPerShard(maxCapacity).build();\n     }\n \n+    /**\n+     * Returns a {@link PTransform} for PCollection of {@link byte[]}, dropping Kinesis metatdata.\n+     */\n+    public PTransform<PBegin, PCollection<byte[]>> withoutMetadata() {\n+      return new TypedWithoutMetadata(this);\n+    }", "originalCommit": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MTM0OQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459261349", "bodyText": "Thanks for pointing it, I followed the KafkaIO convention and didn't think whether it's a good design or not. The change is trivial, just use KinesisIO.readWithoutMetadata() and pass Read there instead of creating it in withoutMetadata(this).", "author": "piotr-szuberski", "createdAt": "2020-07-23T07:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MTQ4Mg==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459261482", "bodyText": "I'll leave it in KinesisIO.", "author": "piotr-szuberski", "createdAt": "2020-07-23T07:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "ba979364e5ea608859e071fef79c94ea218f3bef", "chunk": "diff --git a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\nindex 4c58768b62..8ff1da254e 100644\n--- a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n+++ b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n\n@@ -537,13 +536,6 @@ public final class KinesisIO {\n       return toBuilder().setMaxCapacityPerShard(maxCapacity).build();\n     }\n \n-    /**\n-     * Returns a {@link PTransform} for PCollection of {@link byte[]}, dropping Kinesis metatdata.\n-     */\n-    public PTransform<PBegin, PCollection<byte[]>> withoutMetadata() {\n-      return new TypedWithoutMetadata(this);\n-    }\n-\n     @Override\n     public PCollection<KinesisRecord> expand(PBegin input) {\n       Unbounded<KinesisRecord> unbounded =\n"}}, {"oid": "ba979364e5ea608859e071fef79c94ea218f3bef", "url": "https://github.com/apache/beam/commit/ba979364e5ea608859e071fef79c94ea218f3bef", "message": "Move parsing watermark policy to the configuration class", "committedDate": "2020-07-23T07:47:57Z", "type": "forcePushed"}, {"oid": "fa793a84d029f03ba8e17aa3ce35ba8ea981e13f", "url": "https://github.com/apache/beam/commit/fa793a84d029f03ba8e17aa3ce35ba8ea981e13f", "message": "Rename ReadBuilder to ReadWithoutMetadataBuilder", "committedDate": "2020-07-23T07:57:07Z", "type": "forcePushed"}, {"oid": "613cf8aaa545633fc27452e470d8d52da322b1d5", "url": "https://github.com/apache/beam/commit/613cf8aaa545633fc27452e470d8d52da322b1d5", "message": "Move parsing logic in Read to setters so configuration class has proper types", "committedDate": "2020-07-23T11:01:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTA2OA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r460341068", "bodyText": "I think this is an atypical API for an IO. If we add something like readData to KinesisIO (instead of just hiding it in the ExternalTransformBuilder) it would be preferable to make Read generic and have two methods like this:\npublic static Read<KinesisRecord> read() {\n  return new Read<KinesisRecord>();\n}\n\npublic static Read<byte[]> readData() {\n  return new Read<byte[]>((record) -> record.getDataAsBytes());\n}\nThat way they can both be configured in the same way:\nPCollection<KinesisRecord> records = p.apply(KinesisIO.read().withStreamName(\"streamName\").with...)\nPCollection<byte[]> data = p.apply(KinesisIO.readData().withStreamName(\"streamName\").with...)\n\nThis is what PubsubIO does:\n\n  \n    \n      beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java\n    \n    \n        Lines 439 to 444\n      in\n      ecedd3e\n    \n    \n    \n    \n\n        \n          \n           public static Read<PubsubMessage> readMessagesWithAttributes() { \n        \n\n        \n          \n             return Read.newBuilder() \n        \n\n        \n          \n                 .setCoder(PubsubMessageWithAttributesCoder.of()) \n        \n\n        \n          \n                 .setNeedsAttributes(true) \n        \n\n        \n          \n                 .build(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\n  \n    \n      beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java\n    \n    \n        Lines 464 to 469\n      in\n      ecedd3e\n    \n    \n    \n    \n\n        \n          \n           public static Read<String> readStrings() { \n        \n\n        \n          \n             return Read.newBuilder( \n        \n\n        \n          \n                     (PubsubMessage message) -> new String(message.getPayload(), StandardCharsets.UTF_8)) \n        \n\n        \n          \n                 .setCoder(StringUtf8Coder.of()) \n        \n\n        \n          \n                 .build(); \n        \n\n        \n          \n           }", "author": "TheNeuralBit", "createdAt": "2020-07-25T00:38:32Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -305,6 +306,10 @@ public static Read read() {\n         .build();\n   }\n \n+  public static ReadData readData(Read read) {\n+    return new ReadData(read);\n+  }\n+", "originalCommit": "e217764402053bfab895c282b1f60ee8596b9449", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyNzY2NA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r461027664", "bodyText": "Thanks for pointing it out. Done.", "author": "piotr-szuberski", "createdAt": "2020-07-27T16:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "ff61b2e930c9bf8ad6aaa03a2266a89e3cedd9aa", "chunk": "diff --git a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\nindex 21e0303391..b5113558e4 100644\n--- a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n+++ b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n\n@@ -296,18 +300,23 @@ public final class KinesisIO {\n   private static final int DEFAULT_NUM_RETRIES = 6;\n \n   /** Returns a new {@link Read} transform for reading from Kinesis. */\n-  public static Read read() {\n-    return new AutoValue_KinesisIO_Read.Builder()\n+  public static Read<KinesisRecord> read() {\n+    return Read.newBuilder()\n         .setMaxNumRecords(Long.MAX_VALUE)\n         .setUpToDateThreshold(Duration.ZERO)\n         .setWatermarkPolicyFactory(WatermarkPolicyFactory.withArrivalTimePolicy())\n         .setRateLimitPolicyFactory(RateLimitPolicyFactory.withoutLimiter())\n         .setMaxCapacityPerShard(ShardReadersPool.DEFAULT_CAPACITY_PER_SHARD)\n+        .setCoder(KinesisRecordCoder.of())\n         .build();\n   }\n \n-  public static ReadData readData(Read read) {\n-    return new ReadData(read);\n+  /**\n+   * A {@link PTransform} to read from Kinesis stream as bytes without metadata and returns a {@link\n+   * PCollection} of {@link byte[]}.\n+   */\n+  public static Read<byte[]> readData() {\n+    return Read.newBuilder(KinesisRecord::getDataAsBytes).setCoder(ByteArrayCoder.of()).build();\n   }\n \n   /** A {@link PTransform} writing data to Kinesis. */\n"}}, {"oid": "ff61b2e930c9bf8ad6aaa03a2266a89e3cedd9aa", "url": "https://github.com/apache/beam/commit/ff61b2e930c9bf8ad6aaa03a2266a89e3cedd9aa", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-07-27T16:20:34Z", "type": "forcePushed"}, {"oid": "81dc8b9a8b86f7fd9b750dfed2831f96aee220de", "url": "https://github.com/apache/beam/commit/81dc8b9a8b86f7fd9b750dfed2831f96aee220de", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-07-27T16:24:23Z", "type": "forcePushed"}, {"oid": "24e2a7f262837158b9c67a84ac9830b6b826ac68", "url": "https://github.com/apache/beam/commit/24e2a7f262837158b9c67a84ac9830b6b826ac68", "message": "[BEAM-10137][BEAM-10138] Introduce testcontainers with localstack (fails probably because of not disabled CBOR in java sdk execution)", "committedDate": "2020-07-27T17:32:12Z", "type": "forcePushed"}, {"oid": "26c9f9604058b03f43fed9d5603c5beb491d1176", "url": "https://github.com/apache/beam/commit/26c9f9604058b03f43fed9d5603c5beb491d1176", "message": "[BEAM-10137][BEAM-10138] Introduce testcontainers with localstack (fails probably because of not disabled CBOR in java sdk execution)", "committedDate": "2020-07-27T18:14:46Z", "type": "forcePushed"}, {"oid": "bc57f6d63f5e3af79f86b8d06d8d330a949a9e2b", "url": "https://github.com/apache/beam/commit/bc57f6d63f5e3af79f86b8d06d8d330a949a9e2b", "message": "Add kinesis test to portable postcommit suite", "committedDate": "2020-07-28T13:20:35Z", "type": "forcePushed"}, {"oid": "ee2e78b54dda1183ce472ba484e849b354955b0d", "url": "https://github.com/apache/beam/commit/ee2e78b54dda1183ce472ba484e849b354955b0d", "message": "Add kinesis test to portable postcommit suite", "committedDate": "2020-07-28T13:22:34Z", "type": "forcePushed"}, {"oid": "18b5475197d86dd429354ae426502ab15ddcb65e", "url": "https://github.com/apache/beam/commit/18b5475197d86dd429354ae426502ab15ddcb65e", "message": "Add pylint comments", "committedDate": "2020-07-29T15:35:55Z", "type": "forcePushed"}, {"oid": "9145e293ec871310a586e59da6a95f79f51349d4", "url": "https://github.com/apache/beam/commit/9145e293ec871310a586e59da6a95f79f51349d4", "message": "Enable kinesis cross-language test in python postcommit suite", "committedDate": "2020-07-30T11:20:42Z", "type": "forcePushed"}, {"oid": "7742517746ee02b40e37b36b96d04906366e02b3", "url": "https://github.com/apache/beam/commit/7742517746ee02b40e37b36b96d04906366e02b3", "message": "Fix python linter", "committedDate": "2020-07-30T13:52:25Z", "type": "forcePushed"}, {"oid": "9ac3b4c0c6b44e59ddd2c90ec709f3bb410b3c0e", "url": "https://github.com/apache/beam/commit/9ac3b4c0c6b44e59ddd2c90ec709f3bb410b3c0e", "message": "Uncomment skipif", "committedDate": "2020-07-30T13:59:14Z", "type": "forcePushed"}, {"oid": "ccbb5d6acc1d8fdcc40c9e5718ffab647d67cbb9", "url": "https://github.com/apache/beam/commit/ccbb5d6acc1d8fdcc40c9e5718ffab647d67cbb9", "message": "Add skip to read test with comment and uncomment skipif", "committedDate": "2020-07-30T15:27:15Z", "type": "forcePushed"}, {"oid": "2f561e3c147210b531f546089409fbd4af2046ae", "url": "https://github.com/apache/beam/commit/2f561e3c147210b531f546089409fbd4af2046ae", "message": "Refactor integration tests", "committedDate": "2020-08-07T16:08:30Z", "type": "forcePushed"}, {"oid": "aa1c72a11ea6de62830ef0412a584e75b77d1ad5", "url": "https://github.com/apache/beam/commit/aa1c72a11ea6de62830ef0412a584e75b77d1ad5", "message": "Refactor integration tests", "committedDate": "2020-08-10T10:01:55Z", "type": "forcePushed"}, {"oid": "389b2a0f8e939ced70701a62aa886da0ead1aa76", "url": "https://github.com/apache/beam/commit/389b2a0f8e939ced70701a62aa886da0ead1aa76", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-08-10T10:07:56Z", "type": "forcePushed"}, {"oid": "8044363596a96b5c79185cbbb8d17b60804dfc19", "url": "https://github.com/apache/beam/commit/8044363596a96b5c79185cbbb8d17b60804dfc19", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-08-10T10:09:06Z", "type": "forcePushed"}, {"oid": "e7f7370eecb235e036e46878c7395e3e24f3190d", "url": "https://github.com/apache/beam/commit/e7f7370eecb235e036e46878c7395e3e24f3190d", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-08-10T10:21:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDIyMQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468264221", "bodyText": "@lukecwik I suggested that Piotr make Read generic so that we can add Read<byte[]> readData() naturally, but now I'm wondering if this is a bad idea since it changes our Public API. Does this have a risk of breaking users?\nIt looks like at least the way the method is used in our tests (p.apply(KinesisIO.read())) is unaffected.", "author": "TheNeuralBit", "createdAt": "2020-08-11T00:50:13Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -295,14 +300,16 @@\n   private static final int DEFAULT_NUM_RETRIES = 6;\n \n   /** Returns a new {@link Read} transform for reading from Kinesis. */\n-  public static Read read() {\n-    return new AutoValue_KinesisIO_Read.Builder()\n-        .setMaxNumRecords(Long.MAX_VALUE)\n-        .setUpToDateThreshold(Duration.ZERO)\n-        .setWatermarkPolicyFactory(WatermarkPolicyFactory.withArrivalTimePolicy())\n-        .setRateLimitPolicyFactory(RateLimitPolicyFactory.withoutLimiter())\n-        .setMaxCapacityPerShard(ShardReadersPool.DEFAULT_CAPACITY_PER_SHARD)\n-        .build();\n+  public static Read<KinesisRecord> read() {", "originalCommit": "e7f7370eecb235e036e46878c7395e3e24f3190d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNzA1NQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r474107055", "bodyText": "Prob. this is OK as long as the change is backwards compatible for user pipelines.", "author": "chamikaramj", "createdAt": "2020-08-20T16:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxNjMwNg==", "url": "https://github.com/apache/beam/pull/12297#discussion_r474416306", "bodyText": "The worst thing I can imagine is that a user will get a raw type warning if he used it like KinesisIO.Read read = KinesisIO.read();. Some users could have some checkers that would turn it into an error though. I don't know how much common such tools are in the Java development in projects using Beam.\nPCollection<KinesisRecord> = pipeline.apply(KinesisIO.read()...)); doesn't change so I think it's ok.", "author": "piotr-szuberski", "createdAt": "2020-08-21T05:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3NjU4Nw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r481276587", "bodyText": "I think it should be fine if it doesn't require a user code change.", "author": "aromanenko-dev", "createdAt": "2020-09-01T16:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b1ce67c173c6aa06122ee1df5146639fd5c3e22", "chunk": "diff --git a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\nindex ae2c59c5c8..ba18cd0d28 100644\n--- a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n+++ b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n\n@@ -300,16 +295,14 @@ public final class KinesisIO {\n   private static final int DEFAULT_NUM_RETRIES = 6;\n \n   /** Returns a new {@link Read} transform for reading from Kinesis. */\n-  public static Read<KinesisRecord> read() {\n-    return Read.newBuilder().setCoder(KinesisRecordCoder.of()).build();\n-  }\n-\n-  /**\n-   * A {@link PTransform} to read from Kinesis stream as bytes without metadata and returns a {@link\n-   * PCollection} of {@link byte[]}.\n-   */\n-  public static Read<byte[]> readData() {\n-    return Read.newBuilder(KinesisRecord::getDataAsBytes).setCoder(ByteArrayCoder.of()).build();\n+  public static Read read() {\n+    return new AutoValue_KinesisIO_Read.Builder()\n+        .setMaxNumRecords(Long.MAX_VALUE)\n+        .setUpToDateThreshold(Duration.ZERO)\n+        .setWatermarkPolicyFactory(WatermarkPolicyFactory.withArrivalTimePolicy())\n+        .setRateLimitPolicyFactory(RateLimitPolicyFactory.withoutLimiter())\n+        .setMaxCapacityPerShard(ShardReadersPool.DEFAULT_CAPACITY_PER_SHARD)\n+        .build();\n   }\n \n   /** A {@link PTransform} writing data to Kinesis. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNTczNw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468925737", "bodyText": "We should prefer the checker framework Nullable annotation, org.checkerframework.checker.nullness.qual.Nullable", "author": "TheNeuralBit", "createdAt": "2020-08-11T23:46:20Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.kinesis;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.annotation.Nullable;", "originalCommit": "968829c9e02f563ca925a1bb15fb0574bb83812d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDI5NQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r469040295", "bodyText": "Done.", "author": "piotr-szuberski", "createdAt": "2020-08-12T06:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNTczNw=="}], "type": "inlineReview", "revised_code": {"commit": "f43d61dab5ad87c3aa3ecbd9ea1a570ebf5a82cb", "chunk": "diff --git a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisTransformRegistrar.java b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisTransformRegistrar.java\nindex 4b3b53f752..1a6e1b17d4 100644\n--- a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisTransformRegistrar.java\n+++ b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisTransformRegistrar.java\n\n@@ -22,7 +22,6 @@ import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionIn\n import com.google.auto.service.AutoService;\n import java.util.Map;\n import java.util.Properties;\n-import javax.annotation.Nullable;\n import org.apache.beam.sdk.annotations.Experimental;\n import org.apache.beam.sdk.annotations.Experimental.Kind;\n import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n"}}, {"oid": "f43d61dab5ad87c3aa3ecbd9ea1a570ebf5a82cb", "url": "https://github.com/apache/beam/commit/f43d61dab5ad87c3aa3ecbd9ea1a570ebf5a82cb", "message": "Add more params to the test pipeline", "committedDate": "2020-08-12T08:12:46Z", "type": "forcePushed"}, {"oid": "8b1ce67c173c6aa06122ee1df5146639fd5c3e22", "url": "https://github.com/apache/beam/commit/8b1ce67c173c6aa06122ee1df5146639fd5c3e22", "message": "[BEAM-10138][BEAM-10137] Create kinesis expansion-service", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "63a2bfc712ed10b3d336b95f140ac9f2b6c0e9aa", "url": "https://github.com/apache/beam/commit/63a2bfc712ed10b3d336b95f140ac9f2b6c0e9aa", "message": "[BEAM-10138] Add Cross-language KinesisWrite external transform", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "2e42af17518cb42ed75d5556b32311289f05c07b", "url": "https://github.com/apache/beam/commit/2e42af17518cb42ed75d5556b32311289f05c07b", "message": "[BEAM-10137] Generify KinesisIO.Read", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "7fc3dddb21ffd0d5bc9b0740be58cbbfacefa45a", "url": "https://github.com/apache/beam/commit/7fc3dddb21ffd0d5bc9b0740be58cbbfacefa45a", "message": "[BEAM-10137] Add Cross-language KinesisIO.Read external transform registrar", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "71bdd3099887602a7e4e6bc2e236b4967146b53b", "url": "https://github.com/apache/beam/commit/71bdd3099887602a7e4e6bc2e236b4967146b53b", "message": "[BEAM-10137][BEAM-10138] Add Python wrapper for Cross-language Java KinesisIO", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "e31d47053dc94c6d3795e6a415bb14f895d94ec8", "url": "https://github.com/apache/beam/commit/e31d47053dc94c6d3795e6a415bb14f895d94ec8", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-08-31T06:29:08Z", "type": "commit"}, {"oid": "ab8735ae56f82a2dc4f11bd285d7b7c3b9b6ca0a", "url": "https://github.com/apache/beam/commit/ab8735ae56f82a2dc4f11bd285d7b7c3b9b6ca0a", "message": "Split the tests for localstack and real aws", "committedDate": "2020-08-31T06:29:08Z", "type": "commit"}, {"oid": "602e2f94231301635926c10bc866287874d616d8", "url": "https://github.com/apache/beam/commit/602e2f94231301635926c10bc866287874d616d8", "message": "Use dict instead of list[kv]", "committedDate": "2020-08-31T06:29:08Z", "type": "commit"}, {"oid": "ed5637acde271a45655e7bc55b0a85e0f0d202fe", "url": "https://github.com/apache/beam/commit/ed5637acde271a45655e7bc55b0a85e0f0d202fe", "message": "replace assert with warning when future timestamp provided", "committedDate": "2020-08-31T06:29:08Z", "type": "commit"}, {"oid": "c0ea87e5d1a5b3e359755becdce23c80870ac8a2", "url": "https://github.com/apache/beam/commit/c0ea87e5d1a5b3e359755becdce23c80870ac8a2", "message": "Change to checker Nullable", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "6ac3fc541006eb19786ff42230c8c152e80587a3", "url": "https://github.com/apache/beam/commit/6ac3fc541006eb19786ff42230c8c152e80587a3", "message": "Move enums to the end of file", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "f25f2371d9803c2ca860ef2ca00ab75390c02739", "url": "https://github.com/apache/beam/commit/f25f2371d9803c2ca860ef2ca00ab75390c02739", "message": "Add Mapping instead of kv list", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "5d87990d0dbfb132231edc93cfe2e021ae6e56bc", "url": "https://github.com/apache/beam/commit/5d87990d0dbfb132231edc93cfe2e021ae6e56bc", "message": "Change seconds to millis", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "3ea7b96aeaa1ef5f53bb932ccafa02287a93b1fc", "url": "https://github.com/apache/beam/commit/3ea7b96aeaa1ef5f53bb932ccafa02287a93b1fc", "message": "Improve params validation", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "4125094001bb5e70950b5137a31d089ee154d97e", "url": "https://github.com/apache/beam/commit/4125094001bb5e70950b5137a31d089ee154d97e", "message": "Add more params to the test pipeline", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "33cf24610a51c6db5e84f07776c5233de40f5fcf", "url": "https://github.com/apache/beam/commit/33cf24610a51c6db5e84f07776c5233de40f5fcf", "message": "Change deprecated knownBuilders to knownBuilderInstances", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "16747d195c558425de0a50bc1a78fe57a5811433", "url": "https://github.com/apache/beam/commit/16747d195c558425de0a50bc1a78fe57a5811433", "message": "Improve boolean expression", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "a9345ef947f0ac30e9201600fcaab6a79299fdcf", "url": "https://github.com/apache/beam/commit/a9345ef947f0ac30e9201600fcaab6a79299fdcf", "message": "run spotless", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "42c62b16a5e379716c0a4a66af8fc08cbea0e0fb", "url": "https://github.com/apache/beam/commit/42c62b16a5e379716c0a4a66af8fc08cbea0e0fb", "message": "Fix linter", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "42c62b16a5e379716c0a4a66af8fc08cbea0e0fb", "url": "https://github.com/apache/beam/commit/42c62b16a5e379716c0a4a66af8fc08cbea0e0fb", "message": "Fix linter", "committedDate": "2020-08-31T06:29:09Z", "type": "forcePushed"}]}