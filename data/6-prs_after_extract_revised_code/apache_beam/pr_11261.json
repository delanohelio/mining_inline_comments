{"pr_number": 11261, "pr_title": "[BEAM-9147] Add a VideoIntelligence transform to Java SDK", "pr_createdAt": "2020-03-30T10:21:45Z", "pr_url": "https://github.com/apache/beam/pull/11261", "timeline": [{"oid": "a7f55e60c1cfe39112331dd4e2b34bc522a2c77a", "url": "https://github.com/apache/beam/commit/a7f55e60c1cfe39112331dd4e2b34bc522a2c77a", "message": "[BEAM-9147] Add VideoIntelligence transform", "committedDate": "2020-03-30T10:16:57Z", "type": "commit"}, {"oid": "4d383b78d847755006e193d5481d09ccd1e7d0d0", "url": "https://github.com/apache/beam/commit/4d383b78d847755006e193d5481d09ccd1e7d0d0", "message": "[BEAM-9147] Add Video Intelligence integration test", "committedDate": "2020-03-30T10:16:57Z", "type": "commit"}, {"oid": "d1c23bf7b654d2561ae977fd43122559811af7b2", "url": "https://github.com/apache/beam/commit/d1c23bf7b654d2561ae977fd43122559811af7b2", "message": "[BEAM-9147] Add documentation of VideoIntelligence transforms", "committedDate": "2020-03-30T10:16:57Z", "type": "commit"}, {"oid": "86744f5671b2b7b5022dcd775a25ae0175b90b97", "url": "https://github.com/apache/beam/commit/86744f5671b2b7b5022dcd775a25ae0175b90b97", "message": "Make checkstyle happy", "committedDate": "2020-03-30T11:36:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNTA4MQ==", "url": "https://github.com/apache/beam/pull/11261#discussion_r402605081", "bodyText": "This part is really hard to read. Would be good to add named methods or use similar approach.", "author": "Ardagan", "createdAt": "2020-04-02T21:25:01Z", "path": "sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/VideoIntelligenceIT.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import static org.apache.beam.sdk.extensions.ml.VideoIntelligence.annotateFromURI;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class VideoIntelligenceIT {\n+  @Rule public TestPipeline testPipeline = TestPipeline.create();\n+  private static final String VIDEO_URI =\n+      \"gs://apache-beam-samples/advanced_analytics/video/gbikes_dinosaur.mp4\";\n+  private List<Feature> featureList = Collections.singletonList(Feature.LABEL_DETECTION);\n+\n+  @Test\n+  public void annotateVideoFromURINoContext() {\n+    PCollection<List<VideoAnnotationResults>> annotationResults =\n+        testPipeline\n+            .apply(Create.of(VIDEO_URI))\n+            .apply(\"Annotate video\", ParDo.of(annotateFromURI(featureList, null)));\n+    PAssert.that(annotationResults).satisfies(new VerifyVideoAnnotationResult());\n+    testPipeline.run().waitUntilFinish();\n+  }\n+\n+  private static class VerifyVideoAnnotationResult\n+      implements SerializableFunction<Iterable<List<VideoAnnotationResults>>, Void> {\n+\n+    @Override\n+    public Void apply(Iterable<List<VideoAnnotationResults>> input) {\n+      List<Boolean> labelEvaluations = new ArrayList<>();\n+      input.forEach(", "originalCommit": "86744f5671b2b7b5022dcd775a25ae0175b90b97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMTg0MQ==", "url": "https://github.com/apache/beam/pull/11261#discussion_r402921841", "bodyText": "Ok, done. What do you think?", "author": "mwalenia", "createdAt": "2020-04-03T10:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNTA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f3383534e90340943d97a3af4ebf690c1d506fa3", "chunk": "diff --git a/sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/VideoIntelligenceIT.java b/sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/VideoIntelligenceIT.java\nindex 3ff18ceff6..b0b74eeccc 100644\n--- a/sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/VideoIntelligenceIT.java\n+++ b/sdks/java/extensions/ml/src/test/java/org/apache/beam/sdk/extensions/ml/VideoIntelligenceIT.java\n\n@@ -25,6 +25,7 @@ import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.function.Consumer;\n import org.apache.beam.sdk.testing.PAssert;\n import org.apache.beam.sdk.testing.TestPipeline;\n import org.apache.beam.sdk.transforms.Create;\n"}}, {"oid": "f3383534e90340943d97a3af4ebf690c1d506fa3", "url": "https://github.com/apache/beam/commit/f3383534e90340943d97a3af4ebf690c1d506fa3", "message": "Refactor test verification", "committedDate": "2020-04-03T10:51:11Z", "type": "commit"}]}