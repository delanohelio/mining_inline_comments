{"pr_number": 11941, "pr_title": "[BEAM-2939] Fix splittable DoFn lifecycle.", "pr_createdAt": "2020-06-05T23:39:19Z", "pr_url": "https://github.com/apache/beam/pull/11941", "timeline": [{"oid": "e2089bab771435ea1a34e12e7fb6ea4e510cadfb", "url": "https://github.com/apache/beam/commit/e2089bab771435ea1a34e12e7fb6ea4e510cadfb", "message": "[BEAM-2939] Fix splittable DoFn lifecycle.\n\ngetInitialRestriction/splitAndSize should not be wrapped with startBundle/FinishBundle invocations.\nInstead of copying the stateAccessor initialization (used for side inputs) I made it so that it was initialized only once and cleaned up the caches/references in the finalizeState call.", "committedDate": "2020-06-05T23:34:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2MTg5NA==", "url": "https://github.com/apache/beam/pull/11941#discussion_r436861894", "bodyText": "I'm thinking whether it would be helpful to have startBundle for PairWithRestriction and SplitRestriction. Similar to process fn, PairWithRestriction and SplitRestriction also deal with (element, restriction). For example, I do this in KafkaIO to initialize consumer per bundle instead of per element.", "author": "boyuanzz", "createdAt": "2020-06-08T17:09:46Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -193,7 +193,21 @@\n               bundleFinalizer);\n \n       // Register the appropriate handlers.\n-      startFunctionRegistry.register(pTransformId, runner::startBundle);\n+      switch (pTransform.getSpec().getUrn()) {\n+        case PTransformTranslation.PAR_DO_TRANSFORM_URN:\n+        case PTransformTranslation.SPLITTABLE_PROCESS_ELEMENTS_URN:\n+        case PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN:\n+          startFunctionRegistry.register(pTransformId, runner::startBundle);\n+          break;\n+        case PTransformTranslation.SPLITTABLE_PAIR_WITH_RESTRICTION_URN:", "originalCommit": "e2089bab771435ea1a34e12e7fb6ea4e510cadfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTUzMg==", "url": "https://github.com/apache/beam/pull/11941#discussion_r436891532", "bodyText": "We can't re-use the existing startBundle/finishBundle methods since it would be confusing to the user as to which context they are executing in (e.g. finishBundle can produce output) so this would require adding startBundleForGetInitialRestriction, finishBundleForGetInitialRestriction, startBundleForPairWithRestriction and finishBundleForPairWithRestriction. I could see value in this for per bundle object lifetime management but any such change should likely happen outside of the scope of this PR.\nAny reason not to use setup/teardown for your object cache?", "author": "lukecwik", "createdAt": "2020-06-08T17:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2MTg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxNDQxOQ==", "url": "https://github.com/apache/beam/pull/11941#discussion_r436914419", "bodyText": "I just got the idea of setup /teardown. Thanks!", "author": "boyuanzz", "createdAt": "2020-06-08T18:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2MTg5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NDE3MA==", "url": "https://github.com/apache/beam/pull/11941#discussion_r436864170", "bodyText": "Could you please add a JIRA here, which elaborate this support with more details?", "author": "boyuanzz", "createdAt": "2020-06-08T17:13:15Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -784,9 +812,8 @@ private ByteString encodeProgress(double value) throws IOException {\n       default:\n         // no-op\n     }\n-  }\n \n-  private void startBundle() {\n+    // TODO: Support caching state data across bundle boundaries.", "originalCommit": "e2089bab771435ea1a34e12e7fb6ea4e510cadfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5Njc2MA==", "url": "https://github.com/apache/beam/pull/11941#discussion_r436896760", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-06-08T18:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NDE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "1bcf3b2bd59418efb6929b1e01e4148449dd4647", "chunk": "diff --git a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\nindex 65955f6a94..9735a1c504 100644\n--- a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\n+++ b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\n\n@@ -813,7 +813,7 @@ public class FnApiDoFnRunner<InputT, RestrictionT, PositionT, WatermarkEstimator\n         // no-op\n     }\n \n-    // TODO: Support caching state data across bundle boundaries.\n+    // TODO(BEAM-10212): Support caching state data across bundle boundaries.\n     this.stateAccessor =\n         new FnApiStateAccessor(\n             pipelineOptions,\n"}}, {"oid": "1bcf3b2bd59418efb6929b1e01e4148449dd4647", "url": "https://github.com/apache/beam/commit/1bcf3b2bd59418efb6929b1e01e4148449dd4647", "message": "fixup! Address PR comments.", "committedDate": "2020-06-08T18:06:04Z", "type": "commit"}]}