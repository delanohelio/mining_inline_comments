{"pr_number": 11609, "pr_title": "[BEAM-9887] Throw IllegalArgumentException when building Row with logical types with Invalid input", "pr_createdAt": "2020-05-05T07:37:40Z", "pr_url": "https://github.com/apache/beam/pull/11609", "timeline": [{"oid": "5687c878cd7d6285446f7c914ab2bfdce12d8061", "url": "https://github.com/apache/beam/commit/5687c878cd7d6285446f7c914ab2bfdce12d8061", "message": "Fix failed BeamComplexTypeTest.testNullDatetimeFields Test to handle null values", "committedDate": "2020-05-05T12:17:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjgwNw==", "url": "https://github.com/apache/beam/pull/11609#discussion_r420336807", "bodyText": "Could you add a test like this but with addValues?", "author": "TheNeuralBit", "createdAt": "2020-05-05T18:58:25Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java", "diffHunk": "@@ -97,4 +99,19 @@ public void testNanosDuration() {\n     assertEquals(duration, row.getLogicalTypeValue(0, NanosDuration.class));\n     assertEquals(durationAsRow, row.getBaseValue(0, Row.class));\n   }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFixedBytesIllegalArgument() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArrayWithLengthFive = {1, 2, 3, 4, 5};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArrayWithLengthFive).build();\n+  }", "originalCommit": "5687c878cd7d6285446f7c914ab2bfdce12d8061", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjYzNg==", "url": "https://github.com/apache/beam/pull/11609#discussion_r420486636", "bodyText": "Added RowTest.testLogicalTypeWithInvalidInputValueByFieldIndex", "author": "rahul8383", "createdAt": "2020-05-06T00:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "7e4e266bd2382f28beb00dbbf4d2a321ec2b17d6", "chunk": "diff --git a/sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java b/sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java\nindex 895429bb0c..f52f36057a 100644\n--- a/sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java\n+++ b/sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java\n\n@@ -99,19 +97,4 @@ public class LogicalTypesTest {\n     assertEquals(duration, row.getLogicalTypeValue(0, NanosDuration.class));\n     assertEquals(durationAsRow, row.getBaseValue(0, Row.class));\n   }\n-\n-  @Test(expected = IllegalArgumentException.class)\n-  public void testFixedBytesIllegalArgument() {\n-    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n-    byte[] byteArrayWithLengthFive = {1, 2, 3, 4, 5};\n-    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArrayWithLengthFive).build();\n-  }\n-\n-  @Test\n-  public void testFixedBytes() {\n-    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n-    byte[] byteArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n-    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArray).build();\n-    assertTrue(Arrays.equals(byteArray, row.getLogicalTypeValue(\"char\", byte[].class)));\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzczNw==", "url": "https://github.com/apache/beam/pull/11609#discussion_r420337737", "bodyText": "Since these tests are really checking Row's verification, I think they would be better in RowTest. Could you move them there?", "author": "TheNeuralBit", "createdAt": "2020-05-05T19:00:07Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java", "diffHunk": "@@ -97,4 +99,19 @@ public void testNanosDuration() {\n     assertEquals(duration, row.getLogicalTypeValue(0, NanosDuration.class));\n     assertEquals(durationAsRow, row.getBaseValue(0, Row.class));\n   }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFixedBytesIllegalArgument() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArrayWithLengthFive = {1, 2, 3, 4, 5};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArrayWithLengthFive).build();\n+  }\n+\n+  @Test\n+  public void testFixedBytes() {\n+    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n+    byte[] byteArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArray).build();\n+    assertTrue(Arrays.equals(byteArray, row.getLogicalTypeValue(\"char\", byte[].class)));\n+  }", "originalCommit": "5687c878cd7d6285446f7c914ab2bfdce12d8061", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4Nzk1MQ==", "url": "https://github.com/apache/beam/pull/11609#discussion_r420487951", "bodyText": "Moved the tests to RowTest.java\ncase in point!\nHow can I write FixedBytes test which tests the behaviour of appending zeros? To test this behaviour, the input value should have length < expectedLength. But, if the input value's length is less than expected length, an IllegalArgumentException is thrown while building the Row.", "author": "rahul8383", "createdAt": "2020-05-06T00:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzczNw=="}], "type": "inlineReview", "revised_code": {"commit": "7e4e266bd2382f28beb00dbbf4d2a321ec2b17d6", "chunk": "diff --git a/sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java b/sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java\nindex 895429bb0c..f52f36057a 100644\n--- a/sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java\n+++ b/sdks/java/core/src/test/java/org/apache/beam/sdk/schemas/logicaltypes/LogicalTypesTest.java\n\n@@ -99,19 +97,4 @@ public class LogicalTypesTest {\n     assertEquals(duration, row.getLogicalTypeValue(0, NanosDuration.class));\n     assertEquals(durationAsRow, row.getBaseValue(0, Row.class));\n   }\n-\n-  @Test(expected = IllegalArgumentException.class)\n-  public void testFixedBytesIllegalArgument() {\n-    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n-    byte[] byteArrayWithLengthFive = {1, 2, 3, 4, 5};\n-    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArrayWithLengthFive).build();\n-  }\n-\n-  @Test\n-  public void testFixedBytes() {\n-    Schema schema = Schema.builder().addLogicalTypeField(\"char\", FixedBytes.of(10)).build();\n-    byte[] byteArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n-    Row row = Row.withSchema(schema).withFieldValue(\"char\", byteArray).build();\n-    assertTrue(Arrays.equals(byteArray, row.getLogicalTypeValue(\"char\", byte[].class)));\n-  }\n }\n"}}, {"oid": "7e4e266bd2382f28beb00dbbf4d2a321ec2b17d6", "url": "https://github.com/apache/beam/commit/7e4e266bd2382f28beb00dbbf4d2a321ec2b17d6", "message": "Fix failed BeamComplexTypeTest.testNullDatetimeFields Test to handle null values", "committedDate": "2020-05-06T00:22:15Z", "type": "forcePushed"}, {"oid": "2aa350fe65028bf93e8404285f0fdc1925003b0b", "url": "https://github.com/apache/beam/commit/2aa350fe65028bf93e8404285f0fdc1925003b0b", "message": "[BEAM-9887] Expected Exception when building Row with logical types with Invalid input", "committedDate": "2020-05-06T00:32:32Z", "type": "commit"}, {"oid": "4566de4f4083f3066b3e129feffdec4f43a06c50", "url": "https://github.com/apache/beam/commit/4566de4f4083f3066b3e129feffdec4f43a06c50", "message": "Fix failed BeamComplexTypeTest.testNullDatetimeFields Test to handle null values", "committedDate": "2020-05-06T00:32:52Z", "type": "commit"}, {"oid": "4566de4f4083f3066b3e129feffdec4f43a06c50", "url": "https://github.com/apache/beam/commit/4566de4f4083f3066b3e129feffdec4f43a06c50", "message": "Fix failed BeamComplexTypeTest.testNullDatetimeFields Test to handle null values", "committedDate": "2020-05-06T00:32:52Z", "type": "forcePushed"}]}