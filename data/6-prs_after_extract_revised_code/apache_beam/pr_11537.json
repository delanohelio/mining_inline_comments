{"pr_number": 11537, "pr_title": "[BEAM-6661] Get rid of a few logging annoyances for execution and shutdown", "pr_createdAt": "2020-04-27T17:10:05Z", "pr_url": "https://github.com/apache/beam/pull/11537", "timeline": [{"oid": "50aec398747b3a0d707c9a103d5b009745b587a2", "url": "https://github.com/apache/beam/commit/50aec398747b3a0d707c9a103d5b009745b587a2", "message": "[BEAM-6661] Properly close channel for external environment\n\nThis avoids warnings like the following:\n\n```\norg.apache.beam.vendor.grpc.v1p13p1.io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference cleanQueue\nSEVERE: *~*~*~ Channel ManagedChannelImpl{logId=628, target=localhost:41409} was not shutdown properly!!! ~*~*~*\nMake sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true.\njava.lang.RuntimeException: ManagedChannel allocation site\nat org.apache.beam.vendor.grpc.v1p13p1.io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference.<init>(ManagedChannelOrphanWrapper.java:103)\nat org.apache.beam.vendor.grpc.v1p13p1.io.grpc.internal.ManagedChannelOrphanWrapper.<init>(ManagedChannelOrphanWrapper.java:53)\nat org.apache.beam.vendor.grpc.v1p13p1.io.grpc.internal.ManagedChannelOrphanWrapper.<init>(ManagedChannelOrphanWrapper.java:44)\nat org.apache.beam.vendor.grpc.v1p13p1.io.grpc.internal.AbstractManagedChannelImplBuilder.build(AbstractManagedChannelImplBuilder.java:410)\nat org.apache.beam.sdk.fn.channel.ManagedChannelFactory.forDescriptor(ManagedChannelFactory.java:44)\nat org.apache.beam.runners.fnexecution.environment.ExternalEnvironmentFactory.createEnvironment(ExternalEnvironmentFactory.java:108)\nat org.apache.beam.runners.fnexecution.control.DefaultJobBundleFactory$1.load(DefaultJobBundleFactory.java:154)\nat org.apache.beam.runners.fnexecution.control.DefaultJobBundleFactory$1.load(DefaultJobBundleFactory.java:137)\nat org.apache.beam.vendor.guava.v20_0.com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3628)\nat org.apache.beam.vendor.guava.v20_0.com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2336)\nat org.apache.beam.vendor.guava.v20_0.com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2295)\nat org.apache.beam.vendor.guava.v20_0.com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2208)\nat org.apache.beam.vendor.guava.v20_0.com.google.common.cache.LocalCache.get(LocalCache.java:4053)\nat org.apache.beam.vendor.guava.v20_0.com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:4057)\nat org.apache.beam.vendor.guava.v20_0.com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4986)\nat org.apache.beam.vendor.guava.v20_0.com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4992)\nat\norg.apache.beam.runners.fnexecution.control.DefaultJobBundleFactory.forStage(DefaultJobBundleFactory.java:162)\n\n```", "committedDate": "2020-04-27T17:07:44Z", "type": "commit"}, {"oid": "278dcef3e408c128cf1c470f9888528d13b6cd22", "url": "https://github.com/apache/beam/commit/278dcef3e408c128cf1c470f9888528d13b6cd22", "message": "[BEAM-6661] Avoid FileNotFoundException when no files have been staged", "committedDate": "2020-04-27T17:07:44Z", "type": "commit"}, {"oid": "9a38a6d483df6a3a1347a14b49f0822698579870", "url": "https://github.com/apache/beam/commit/9a38a6d483df6a3a1347a14b49f0822698579870", "message": "[BEAM-6661] Avoid printing empty lines in subprocess job server\n\nThis would print an extra empty line on every logged line making the output\nverbose, e.g.\n\nBefore:\n```\nlogline1\n\nlogline2\n\n```\n\nAfter:\n```\nlogline1\nlogline2\n```", "committedDate": "2020-04-27T17:07:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyNDE4OQ==", "url": "https://github.com/apache/beam/pull/11537#discussion_r416024189", "bodyText": "Nit: awaitTermination already returns whether the channel is terminated, so no need to call isTerminated", "author": "ibzib", "createdAt": "2020-04-27T17:51:29Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/ExternalEnvironmentFactory.java", "diffHunk": "@@ -145,17 +149,23 @@ public InstructionRequestHandler getInstructionRequestHandler() {\n \n       @Override\n       public void close() throws Exception {\n-        finalInstructionHandler.close();\n-        BeamFnApi.StopWorkerRequest stopWorkerRequest =\n-            BeamFnApi.StopWorkerRequest.newBuilder().setWorkerId(workerId).build();\n-        LOG.debug(\"Closing worker ID {}\", workerId);\n-        BeamFnApi.StopWorkerResponse stopWorkerResponse =\n-            BeamFnExternalWorkerPoolGrpc.newBlockingStub(\n-                    ManagedChannelFactory.createDefault()\n-                        .forDescriptor(externalPayload.getEndpoint()))\n-                .stopWorker(stopWorkerRequest);\n-        if (!stopWorkerResponse.getError().isEmpty()) {\n-          throw new RuntimeException(stopWorkerResponse.getError());\n+        try {\n+          finalInstructionHandler.close();\n+          BeamFnApi.StopWorkerRequest stopWorkerRequest =\n+              BeamFnApi.StopWorkerRequest.newBuilder().setWorkerId(workerId).build();\n+          LOG.debug(\"Closing worker ID {}\", workerId);\n+          BeamFnApi.StopWorkerResponse stopWorkerResponse =\n+              BeamFnExternalWorkerPoolGrpc.newBlockingStub(managedChannel)\n+                  .stopWorker(stopWorkerRequest);\n+          if (!stopWorkerResponse.getError().isEmpty()) {\n+            throw new RuntimeException(stopWorkerResponse.getError());\n+          }\n+        } finally {\n+          managedChannel.shutdown();\n+          managedChannel.awaitTermination(10, TimeUnit.SECONDS);", "originalCommit": "9a38a6d483df6a3a1347a14b49f0822698579870", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMDEwNw==", "url": "https://github.com/apache/beam/pull/11537#discussion_r416030107", "bodyText": "Why 10 seconds? Does shutdown usually take that long?", "author": "ibzib", "createdAt": "2020-04-27T17:59:46Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/ExternalEnvironmentFactory.java", "diffHunk": "@@ -145,17 +149,23 @@ public InstructionRequestHandler getInstructionRequestHandler() {\n \n       @Override\n       public void close() throws Exception {\n-        finalInstructionHandler.close();\n-        BeamFnApi.StopWorkerRequest stopWorkerRequest =\n-            BeamFnApi.StopWorkerRequest.newBuilder().setWorkerId(workerId).build();\n-        LOG.debug(\"Closing worker ID {}\", workerId);\n-        BeamFnApi.StopWorkerResponse stopWorkerResponse =\n-            BeamFnExternalWorkerPoolGrpc.newBlockingStub(\n-                    ManagedChannelFactory.createDefault()\n-                        .forDescriptor(externalPayload.getEndpoint()))\n-                .stopWorker(stopWorkerRequest);\n-        if (!stopWorkerResponse.getError().isEmpty()) {\n-          throw new RuntimeException(stopWorkerResponse.getError());\n+        try {\n+          finalInstructionHandler.close();\n+          BeamFnApi.StopWorkerRequest stopWorkerRequest =\n+              BeamFnApi.StopWorkerRequest.newBuilder().setWorkerId(workerId).build();\n+          LOG.debug(\"Closing worker ID {}\", workerId);\n+          BeamFnApi.StopWorkerResponse stopWorkerResponse =\n+              BeamFnExternalWorkerPoolGrpc.newBlockingStub(managedChannel)\n+                  .stopWorker(stopWorkerRequest);\n+          if (!stopWorkerResponse.getError().isEmpty()) {\n+            throw new RuntimeException(stopWorkerResponse.getError());\n+          }\n+        } finally {\n+          managedChannel.shutdown();\n+          managedChannel.awaitTermination(10, TimeUnit.SECONDS);", "originalCommit": "9a38a6d483df6a3a1347a14b49f0822698579870", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNTYyMQ==", "url": "https://github.com/apache/beam/pull/11537#discussion_r416035621", "bodyText": "No, it usually takes ~1 second. 10 seconds is just the max waiting time which we have in a bunch of places.", "author": "mxm", "createdAt": "2020-04-27T18:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzMDEwNw=="}], "type": "inlineReview", "revised_code": null}]}