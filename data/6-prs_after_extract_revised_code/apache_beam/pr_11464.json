{"pr_number": 11464, "pr_title": "[BEAM-9147] Make VideoIntelligence use PTransform on user-facing API", "pr_createdAt": "2020-04-20T11:17:14Z", "pr_url": "https://github.com/apache/beam/pull/11464", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4OTI5NQ==", "url": "https://github.com/apache/beam/pull/11464#discussion_r411789295", "bodyText": "PTransforms should almost never need inheritance; based on the usage of this class, it's not needed here either - the current base class serves only the purpose of storing configuration variables, but contains no functionality - these variables can just be packaged into a configuration object, and current subclasses of AnnotateVideo can derive from PTransform directly and each store this configuration object.\nEven if you decide to keep using inheritance, please at least make this class non-public.", "author": "jkff", "createdAt": "2020-04-21T00:50:19Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideo.java", "diffHunk": "@@ -17,87 +17,44 @@\n  */\n package org.apache.beam.sdk.extensions.ml;\n \n-import com.google.api.gax.longrunning.OperationFuture;\n-import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n-import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n-import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n import com.google.cloud.videointelligence.v1.Feature;\n import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n import com.google.cloud.videointelligence.v1.VideoContext;\n-import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n-import com.google.protobuf.ByteString;\n-import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n-import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PCollection;\n import org.apache.beam.sdk.values.PCollectionView;\n \n /**\n- * Base class for Video Intelligence transform.\n+ * Base class for VideoIntelligence PTransform.", "originalCommit": "dcc6dbd54edafafc6cbf4e8b7990bc31c0d3e185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MjA4Mw==", "url": "https://github.com/apache/beam/pull/11464#discussion_r412152083", "bodyText": "You're right that it wasn't necessary. I got rid of the inheritance.", "author": "mwalenia", "createdAt": "2020-04-21T12:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4OTI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8baca4a31544deac46068d4fbc3a08c03dc8eeb", "chunk": "diff --git a/sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideo.java b/sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideo.java\ndeleted file mode 100644\nindex 3cedb62584..0000000000\n--- a/sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideo.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.beam.sdk.extensions.ml;\n-\n-import com.google.cloud.videointelligence.v1.Feature;\n-import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n-import com.google.cloud.videointelligence.v1.VideoContext;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.beam.sdk.annotations.Experimental;\n-import org.apache.beam.sdk.transforms.PTransform;\n-import org.apache.beam.sdk.values.PCollection;\n-import org.apache.beam.sdk.values.PCollectionView;\n-\n-/**\n- * Base class for VideoIntelligence PTransform.\n- *\n- * @param <T> Type of input PCollection contents.\n- */\n-@Experimental\n-public abstract class AnnotateVideo<T>\n-    extends PTransform<PCollection<T>, PCollection<List<VideoAnnotationResults>>> {\n-  protected final PCollectionView<Map<T, VideoContext>> contextSideInput;\n-  protected final List<Feature> featureList;\n-\n-  protected AnnotateVideo(\n-      PCollectionView<Map<T, VideoContext>> contextSideInput, List<Feature> featureList) {\n-    this.contextSideInput = contextSideInput;\n-    this.featureList = featureList;\n-  }\n-\n-  protected AnnotateVideo(List<Feature> featureList) {\n-    this.contextSideInput = null;\n-    this.featureList = featureList;\n-  }\n-\n-  /**\n-   * To be implemented based on input PCollection's content type.\n-   *\n-   * @param input\n-   * @return\n-   */\n-  @Override\n-  public abstract PCollection<List<VideoAnnotationResults>> expand(PCollection<T> input);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MTE1Mw==", "url": "https://github.com/apache/beam/pull/11464#discussion_r411791153", "bodyText": "Should this be in @Setup instead?", "author": "jkff", "createdAt": "2020-04-21T00:55:44Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideoFn.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoContext;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.protobuf.ByteString;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Base class for DoFns used in VideoIntelligence transforms.\n+ *\n+ * @param <T> Class of input data being passed in - either ByteString - video data encoded into.\n+ *     String or String - a GCS URI of the video to be annotated.\n+ */\n+@Experimental\n+abstract class AnnotateVideoFn<T> extends DoFn<T, List<VideoAnnotationResults>> {\n+\n+  protected final PCollectionView<Map<T, VideoContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  VideoIntelligenceServiceClient videoIntelligenceServiceClient;\n+\n+  public AnnotateVideoFn(\n+      PCollectionView<Map<T, VideoContext>> contextSideInput, List<Feature> featureList) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+  }\n+\n+  public AnnotateVideoFn(List<Feature> featureList) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+  }\n+\n+  @StartBundle", "originalCommit": "dcc6dbd54edafafc6cbf4e8b7990bc31c0d3e185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MTkwNw==", "url": "https://github.com/apache/beam/pull/11464#discussion_r412151907", "bodyText": "Moved, thanks for the tip", "author": "mwalenia", "createdAt": "2020-04-21T12:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MTE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d8baca4a31544deac46068d4fbc3a08c03dc8eeb", "chunk": "diff --git a/sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideoFn.java b/sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideoFn.java\nindex 3cf0c30025..a954ff330b 100644\n--- a/sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideoFn.java\n+++ b/sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateVideoFn.java\n\n@@ -58,8 +58,8 @@ abstract class AnnotateVideoFn<T> extends DoFn<T, List<VideoAnnotationResults>>\n     this.featureList = featureList;\n   }\n \n-  @StartBundle\n-  public void startBundle() throws IOException {\n+  @Setup\n+  public void setup() throws IOException {\n     videoIntelligenceServiceClient = VideoIntelligenceServiceClient.create();\n   }\n \n"}}, {"oid": "610e18fd76e6399ccf7a0a38ff480de1a3e63aab", "url": "https://github.com/apache/beam/commit/610e18fd76e6399ccf7a0a38ff480de1a3e63aab", "message": "[BEAM-9147] Make VideoIntelligence use PTransform on user-facing API", "committedDate": "2020-04-27T08:11:11Z", "type": "commit"}, {"oid": "abe777c202df0173889fbfc0687e577876e9756e", "url": "https://github.com/apache/beam/commit/abe777c202df0173889fbfc0687e577876e9756e", "message": "Add position to CHANGES.md", "committedDate": "2020-04-27T08:11:11Z", "type": "commit"}, {"oid": "d8baca4a31544deac46068d4fbc3a08c03dc8eeb", "url": "https://github.com/apache/beam/commit/d8baca4a31544deac46068d4fbc3a08c03dc8eeb", "message": "Remove abstract AnnotateVideo PTransform", "committedDate": "2020-04-27T08:11:11Z", "type": "commit"}, {"oid": "d8baca4a31544deac46068d4fbc3a08c03dc8eeb", "url": "https://github.com/apache/beam/commit/d8baca4a31544deac46068d4fbc3a08c03dc8eeb", "message": "Remove abstract AnnotateVideo PTransform", "committedDate": "2020-04-27T08:11:11Z", "type": "forcePushed"}]}