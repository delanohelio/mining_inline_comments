{"pr_number": 12733, "pr_title": "[BEAM-10760] Optimize state cleanup for global window in portable Flink runner", "pr_createdAt": "2020-08-31T02:11:27Z", "pr_url": "https://github.com/apache/beam/pull/12733", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxNTY3NQ==", "url": "https://github.com/apache/beam/pull/12733#discussion_r480015675", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Check if the final watermark was triggered to perform state cleanup for global window\n          \n          \n            \n                  if (potentialOutputWatermark == Long.MAX_VALUE\n          \n          \n            \n                      && currentOutputWatermark < Long.MAX_VALUE\n          \n          \n            \n                      && isStateful) {\n          \n          \n            \n                    cleanupGlobalWindowState();\n          \n          \n            \n                  }\n          \n          \n            \n                  // Check if the final watermark was triggered to perform state cleanup for global window\n          \n          \n            \n                  if (potentialOutputWatermark > BoundedWindow.maxTimestamp().getMillis()\n          \n          \n            \n                      && currentOutputWatermark <= BoundedWindow.maxTimestamp().getMillis()) {\n          \n          \n            \n                    cleanupGlobalWindowState();\n          \n          \n            \n                  }\n          \n      \n    \n    \n  \n\nWould change the condition to specifically target the end of the global window. There is also no need to include the statefulness in the condition because if there is no state, it also won't be cleaned up.", "author": "mxm", "createdAt": "2020-08-31T09:44:47Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java", "diffHunk": "@@ -592,12 +593,37 @@ public long applyOutputWatermarkHold(long currentOutputWatermark, long potential\n         return currentOutputWatermark;\n       }\n     } else {\n+      // Check if the final watermark was triggered to perform state cleanup for global window\n+      if (potentialOutputWatermark == Long.MAX_VALUE\n+          && currentOutputWatermark < Long.MAX_VALUE\n+          && isStateful) {\n+        cleanupGlobalWindowState();\n+      }", "originalCommit": "5659941cbd6cc46748450fb08bf3491c7fc5ae67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e169f108af04572a0956b54fff1dfe7f8cae03d", "chunk": "diff --git a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java\nindex 02c485ce15..47d44ddbc5 100644\n--- a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java\n+++ b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java\n\n@@ -611,10 +611,9 @@ public class ExecutableStageDoFnOperator<InputT, OutputT> extends DoFnOperator<I\n             .map(UserStateReference::localName)\n             .collect(Collectors.toList());\n \n-    Coder windowCoder = windowingStrategy.getWindowFn().windowCoder();\n-\n+    StateNamespace namespace =\n+        StateNamespaces.window(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE);\n     for (String userState : userStateNames) {\n-      StateNamespace namespace = StateNamespaces.window(windowCoder, GlobalWindow.INSTANCE);\n       StateTag<BagState<Void>> bagStateStateTag = StateTags.bag(userState, VoidCoder.of());\n       try {\n         keyedStateInternals.clearBagStates(namespace, bagStateStateTag);\n"}}, {"oid": "6e169f108af04572a0956b54fff1dfe7f8cae03d", "url": "https://github.com/apache/beam/commit/6e169f108af04572a0956b54fff1dfe7f8cae03d", "message": "spotless", "committedDate": "2020-09-01T03:35:28Z", "type": "forcePushed"}, {"oid": "a6f4a60edd3ed02839b5b37cdbb29ed137517fae", "url": "https://github.com/apache/beam/commit/a6f4a60edd3ed02839b5b37cdbb29ed137517fae", "message": "[BEAM-10760] Optimize state cleanup for global window in portable Flink runner\n\nCleanup timers per key lead to potentially unbounded state/checkpoint size growth with a global window in streaming mode.\nInstead of timers, we can use the final watermark as the barrier to perform state cleanup.", "committedDate": "2020-09-01T20:48:20Z", "type": "commit"}, {"oid": "a6f4a60edd3ed02839b5b37cdbb29ed137517fae", "url": "https://github.com/apache/beam/commit/a6f4a60edd3ed02839b5b37cdbb29ed137517fae", "message": "[BEAM-10760] Optimize state cleanup for global window in portable Flink runner\n\nCleanup timers per key lead to potentially unbounded state/checkpoint size growth with a global window in streaming mode.\nInstead of timers, we can use the final watermark as the barrier to perform state cleanup.", "committedDate": "2020-09-01T20:48:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzODk4NA==", "url": "https://github.com/apache/beam/pull/12733#discussion_r481938984", "bodyText": "This logic should be moved to DoFnOperator#emitWatermark. It can then also be simplified.", "author": "mxm", "createdAt": "2020-09-02T09:39:23Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java", "diffHunk": "@@ -592,12 +593,35 @@ public long applyOutputWatermarkHold(long currentOutputWatermark, long potential\n         return currentOutputWatermark;\n       }\n     } else {\n+      // Check if the final watermark was triggered to perform state cleanup for global window\n+      if (potentialOutputWatermark > BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis()\n+          && currentOutputWatermark <= BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis()) {\n+        cleanupGlobalWindowState();\n+      }", "originalCommit": "a6f4a60edd3ed02839b5b37cdbb29ed137517fae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}