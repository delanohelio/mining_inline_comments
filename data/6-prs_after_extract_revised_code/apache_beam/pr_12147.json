{"pr_number": 12147, "pr_title": "[BEAM 7624] Added Null Behavior in JsonToRow", "pr_createdAt": "2020-07-01T11:20:14Z", "pr_url": "https://github.com/apache/beam/pull/12147", "timeline": [{"oid": "527a5108747e7013286ec3ffb73ecccec3ad611d", "url": "https://github.com/apache/beam/commit/527a5108747e7013286ec3ffb73ecccec3ad611d", "message": "Some minor formatting and renaming", "committedDate": "2020-07-11T12:12:34Z", "type": "forcePushed"}, {"oid": "ff9e08e43a7a882ac1c0b91a91b17e10f9f9bb1d", "url": "https://github.com/apache/beam/commit/ff9e08e43a7a882ac1c0b91a91b17e10f9f9bb1d", "message": "Added support for JsonToRow with Missing fields", "committedDate": "2020-07-12T05:40:21Z", "type": "commit"}, {"oid": "6593274e18e590b4da7e17ae29e8a77f8e47a4bf", "url": "https://github.com/apache/beam/commit/6593274e18e590b4da7e17ae29e8a77f8e47a4bf", "message": "Changed default null handling behavior to be in line with RowJson", "committedDate": "2020-07-12T05:40:26Z", "type": "commit"}, {"oid": "96dca0e01af615ef0128ed5fca5fde34603d32cb", "url": "https://github.com/apache/beam/commit/96dca0e01af615ef0128ed5fca5fde34603d32cb", "message": "Changed default for deadletter as well", "committedDate": "2020-07-12T05:40:26Z", "type": "commit"}, {"oid": "f63c29306ad1a801eccf0d5f62defad357f80d03", "url": "https://github.com/apache/beam/commit/f63c29306ad1a801eccf0d5f62defad357f80d03", "message": "Some minor formatting and renaming", "committedDate": "2020-07-12T05:40:26Z", "type": "commit"}, {"oid": "f63c29306ad1a801eccf0d5f62defad357f80d03", "url": "https://github.com/apache/beam/commit/f63c29306ad1a801eccf0d5f62defad357f80d03", "message": "Some minor formatting and renaming", "committedDate": "2020-07-12T05:40:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NTk4NA==", "url": "https://github.com/apache/beam/pull/12147#discussion_r456185984", "bodyText": "Why is this volatile? Can you make it private final and add it to the constructor? So each instance is immutable", "author": "pabloem", "createdAt": "2020-07-17T02:38:28Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java", "diffHunk": "@@ -91,6 +92,7 @@\n   static class JsonToRowFn extends PTransform<PCollection<String>, PCollection<Row>> {\n     private transient volatile @Nullable ObjectMapper objectMapper;\n     private Schema schema;\n+    private volatile NullBehavior nullBehavior = NullBehavior.ACCEPT_MISSING_OR_NULL;", "originalCommit": "f63c29306ad1a801eccf0d5f62defad357f80d03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NzM4Ng==", "url": "https://github.com/apache/beam/pull/12147#discussion_r456187386", "bodyText": "Perhaps the schema should also be final.", "author": "pabloem", "createdAt": "2020-07-17T02:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NTk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "92ff25d8648c08da85b0fb3ffa16582c64c173d6", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java\nindex 72351b5453..80006acc92 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java\n\n@@ -77,37 +77,35 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Immutabl\n  * <p>Only JSON string values can be parsed into {@link TypeName#STRING}. Numbers, booleans are not\n  * automatically converted, exceptions are thrown in these cases.\n  *\n- * <p>If a schema field is missing from the JSON value, an exception will be thrown.\n- *\n- * <p>Explicit {@code null} literals are allowed in JSON objects. No other values are parsed into\n- * {@code null}.\n+ * <p>If a schema field is missing from the JSON value, by default the field will be assumed to have\n+ * a null value, and will be converted into a null in the row if the schema has this field being\n+ * nullable. This behavior can be changed by setting the {@link NullBehavior} using the {@link\n+ * JsonToRow#withSchemaAndNullBehavior}. For example, setting it with {@link\n+ * NullBehavior#REQUIRE_NULL} means that JSON values must be null to be parsed as null, otherwise an\n+ * error will be thrown, as with previous versions of Beam.\n  */\n @Experimental(Kind.SCHEMAS)\n public class JsonToRow {\n \n   public static PTransform<PCollection<String>, PCollection<Row>> withSchema(Schema rowSchema) {\n-    return JsonToRowFn.forSchema(rowSchema);\n+    RowJson.verifySchemaSupported(rowSchema);\n+    return new JsonToRowFn(rowSchema, NullBehavior.ACCEPT_MISSING_OR_NULL);\n+  }\n+\n+  public static PTransform<PCollection<String>, PCollection<Row>> withSchemaAndNullBehavior(\n+      Schema rowSchema, NullBehavior nullBehavior) {\n+    RowJson.verifySchemaSupported(rowSchema);\n+    return new JsonToRowFn(rowSchema, nullBehavior);\n   }\n \n   static class JsonToRowFn extends PTransform<PCollection<String>, PCollection<Row>> {\n     private transient volatile @Nullable ObjectMapper objectMapper;\n-    private Schema schema;\n-    private volatile NullBehavior nullBehavior = NullBehavior.ACCEPT_MISSING_OR_NULL;\n+    private final Schema schema;\n+    private final NullBehavior nullBehavior;\n \n-    static JsonToRowFn forSchema(Schema rowSchema) {\n-      // Throw exception if this schema is not supported by RowJson\n-      RowJson.verifySchemaSupported(rowSchema);\n-      return new JsonToRowFn(rowSchema);\n-    }\n-\n-    private JsonToRowFn(Schema schema) {\n+    private JsonToRowFn(Schema schema, NullBehavior nullBehavior) {\n       this.schema = schema;\n-    }\n-\n-    /** Sets the behavior of the deserializer according to {@link NullBehavior}. */\n-    public JsonToRowFn withNullBehavior(NullBehavior nullBehavior) {\n       this.nullBehavior = nullBehavior;\n-      return this;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NzYxNg==", "url": "https://github.com/apache/beam/pull/12147#discussion_r456187616", "bodyText": "Can you please add javadoc for the default null behavior?", "author": "pabloem", "createdAt": "2020-07-17T02:44:47Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java", "diffHunk": "@@ -91,6 +92,7 @@\n   static class JsonToRowFn extends PTransform<PCollection<String>, PCollection<Row>> {", "originalCommit": "f63c29306ad1a801eccf0d5f62defad357f80d03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92ff25d8648c08da85b0fb3ffa16582c64c173d6", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java\nindex 72351b5453..80006acc92 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/JsonToRow.java\n\n@@ -77,37 +77,35 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Immutabl\n  * <p>Only JSON string values can be parsed into {@link TypeName#STRING}. Numbers, booleans are not\n  * automatically converted, exceptions are thrown in these cases.\n  *\n- * <p>If a schema field is missing from the JSON value, an exception will be thrown.\n- *\n- * <p>Explicit {@code null} literals are allowed in JSON objects. No other values are parsed into\n- * {@code null}.\n+ * <p>If a schema field is missing from the JSON value, by default the field will be assumed to have\n+ * a null value, and will be converted into a null in the row if the schema has this field being\n+ * nullable. This behavior can be changed by setting the {@link NullBehavior} using the {@link\n+ * JsonToRow#withSchemaAndNullBehavior}. For example, setting it with {@link\n+ * NullBehavior#REQUIRE_NULL} means that JSON values must be null to be parsed as null, otherwise an\n+ * error will be thrown, as with previous versions of Beam.\n  */\n @Experimental(Kind.SCHEMAS)\n public class JsonToRow {\n \n   public static PTransform<PCollection<String>, PCollection<Row>> withSchema(Schema rowSchema) {\n-    return JsonToRowFn.forSchema(rowSchema);\n+    RowJson.verifySchemaSupported(rowSchema);\n+    return new JsonToRowFn(rowSchema, NullBehavior.ACCEPT_MISSING_OR_NULL);\n+  }\n+\n+  public static PTransform<PCollection<String>, PCollection<Row>> withSchemaAndNullBehavior(\n+      Schema rowSchema, NullBehavior nullBehavior) {\n+    RowJson.verifySchemaSupported(rowSchema);\n+    return new JsonToRowFn(rowSchema, nullBehavior);\n   }\n \n   static class JsonToRowFn extends PTransform<PCollection<String>, PCollection<Row>> {\n     private transient volatile @Nullable ObjectMapper objectMapper;\n-    private Schema schema;\n-    private volatile NullBehavior nullBehavior = NullBehavior.ACCEPT_MISSING_OR_NULL;\n+    private final Schema schema;\n+    private final NullBehavior nullBehavior;\n \n-    static JsonToRowFn forSchema(Schema rowSchema) {\n-      // Throw exception if this schema is not supported by RowJson\n-      RowJson.verifySchemaSupported(rowSchema);\n-      return new JsonToRowFn(rowSchema);\n-    }\n-\n-    private JsonToRowFn(Schema schema) {\n+    private JsonToRowFn(Schema schema, NullBehavior nullBehavior) {\n       this.schema = schema;\n-    }\n-\n-    /** Sets the behavior of the deserializer according to {@link NullBehavior}. */\n-    public JsonToRowFn withNullBehavior(NullBehavior nullBehavior) {\n       this.nullBehavior = nullBehavior;\n-      return this;\n     }\n \n     @Override\n"}}, {"oid": "92ff25d8648c08da85b0fb3ffa16582c64c173d6", "url": "https://github.com/apache/beam/commit/92ff25d8648c08da85b0fb3ffa16582c64c173d6", "message": "Responded to comments of the PR", "committedDate": "2020-07-17T12:43:26Z", "type": "commit"}]}