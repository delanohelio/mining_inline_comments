{"pr_number": 10796, "pr_title": "Refine access level for `sdks/java/extensions/protobuf`", "pr_createdAt": "2020-02-06T22:45:23Z", "pr_url": "https://github.com/apache/beam/pull/10796", "timeline": [{"oid": "94d37c00b06802528ac85d24324211d7298c76b4", "url": "https://github.com/apache/beam/commit/94d37c00b06802528ac85d24324211d7298c76b4", "message": "Remove unsed class ProtoMessageSchema", "committedDate": "2020-02-07T13:08:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzY2MA==", "url": "https://github.com/apache/beam/pull/10796#discussion_r376697660", "bodyText": "this needs to be kept public", "author": "alexvanboxel", "createdAt": "2020-02-08T08:51:17Z", "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java", "diffHunk": "@@ -46,15 +46,15 @@\n  * <p>{@link DynamicProtoCoder} is not registered in the global {@link CoderRegistry} as the\n  * descriptor is required to create the coder.\n  */\n-public class DynamicProtoCoder extends ProtoCoder<DynamicMessage> {\n+class DynamicProtoCoder extends ProtoCoder<DynamicMessage> {", "originalCommit": "94d37c00b06802528ac85d24324211d7298c76b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NzUyNQ==", "url": "https://github.com/apache/beam/pull/10796#discussion_r377047525", "bodyText": "ok", "author": "iemejia", "createdAt": "2020-02-10T13:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "dbe2f682983509850b401d1be2739c53dd967e5d", "chunk": "diff --git a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java\nindex c492d0fa71..96ca0faba7 100644\n--- a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java\n+++ b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java\n\n@@ -46,7 +46,7 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Sets;\n  * <p>{@link DynamicProtoCoder} is not registered in the global {@link CoderRegistry} as the\n  * descriptor is required to create the coder.\n  */\n-class DynamicProtoCoder extends ProtoCoder<DynamicMessage> {\n+public class DynamicProtoCoder extends ProtoCoder<DynamicMessage> {\n \n   public static final long serialVersionUID = 1L;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzY4Mw==", "url": "https://github.com/apache/beam/pull/10796#discussion_r376697683", "bodyText": "Keep public as well", "author": "alexvanboxel", "createdAt": "2020-02-08T08:51:36Z", "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java", "diffHunk": "@@ -46,15 +46,15 @@\n  * <p>{@link DynamicProtoCoder} is not registered in the global {@link CoderRegistry} as the\n  * descriptor is required to create the coder.\n  */\n-public class DynamicProtoCoder extends ProtoCoder<DynamicMessage> {\n+class DynamicProtoCoder extends ProtoCoder<DynamicMessage> {\n \n   public static final long serialVersionUID = 1L;\n \n   /**\n    * Returns a {@link DynamicProtoCoder} for the Protocol Buffers {@link DynamicMessage} for the\n    * given {@link Descriptors.Descriptor}.\n    */\n-  public static DynamicProtoCoder of(Descriptors.Descriptor protoMessageDescriptor) {\n+  static DynamicProtoCoder of(Descriptors.Descriptor protoMessageDescriptor) {", "originalCommit": "94d37c00b06802528ac85d24324211d7298c76b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NzYzOA==", "url": "https://github.com/apache/beam/pull/10796#discussion_r377047638", "bodyText": "ok", "author": "iemejia", "createdAt": "2020-02-10T13:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "dbe2f682983509850b401d1be2739c53dd967e5d", "chunk": "diff --git a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java\nindex c492d0fa71..96ca0faba7 100644\n--- a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java\n+++ b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/DynamicProtoCoder.java\n\n@@ -46,7 +46,7 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Sets;\n  * <p>{@link DynamicProtoCoder} is not registered in the global {@link CoderRegistry} as the\n  * descriptor is required to create the coder.\n  */\n-class DynamicProtoCoder extends ProtoCoder<DynamicMessage> {\n+public class DynamicProtoCoder extends ProtoCoder<DynamicMessage> {\n \n   public static final long serialVersionUID = 1L;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzcwMg==", "url": "https://github.com/apache/beam/pull/10796#discussion_r376697702", "bodyText": "Keep public", "author": "alexvanboxel", "createdAt": "2020-02-08T08:51:51Z", "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoDomain.java", "diffHunk": "@@ -44,7 +44,7 @@\n  * <p>ProtoDomains aren't assumed to be used on with normal Message descriptors, only with\n  * DynamicMessage descriptors.\n  */\n-public final class ProtoDomain implements Serializable {\n+final class ProtoDomain implements Serializable {", "originalCommit": "94d37c00b06802528ac85d24324211d7298c76b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0ODQ5Mg==", "url": "https://github.com/apache/beam/pull/10796#discussion_r377048492", "bodyText": "ok", "author": "iemejia", "createdAt": "2020-02-10T13:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "dbe2f682983509850b401d1be2739c53dd967e5d", "chunk": "diff --git a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoDomain.java b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoDomain.java\nindex 1a034716bd..e9a5d48ed3 100644\n--- a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoDomain.java\n+++ b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoDomain.java\n\n@@ -44,7 +44,7 @@ import javax.annotation.Nullable;\n  * <p>ProtoDomains aren't assumed to be used on with normal Message descriptors, only with\n  * DynamicMessage descriptors.\n  */\n-final class ProtoDomain implements Serializable {\n+public final class ProtoDomain implements Serializable {\n   public static final long serialVersionUID = 1L;\n   private transient DescriptorProtos.FileDescriptorSet fileDescriptorSet;\n   private transient int hashCode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5Nzc5NA==", "url": "https://github.com/apache/beam/pull/10796#discussion_r376697794", "bodyText": "Do NOT delete", "author": "alexvanboxel", "createdAt": "2020-02-08T08:53:57Z", "path": "sdks/java/extensions/protobuf/src/test/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchemaTest.java", "diffHunk": "@@ -1,249 +0,0 @@\n-/*", "originalCommit": "94d37c00b06802528ac85d24324211d7298c76b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4Njc2Ng==", "url": "https://github.com/apache/beam/pull/10796#discussion_r377086766", "bodyText": "Yep if I undo the delete of ProtoMessageSchema I won't delete this one.", "author": "iemejia", "createdAt": "2020-02-10T14:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5Nzc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "dbe2f682983509850b401d1be2739c53dd967e5d", "chunk": "diff --git a/sdks/java/extensions/protobuf/src/test/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchemaTest.java b/sdks/java/extensions/protobuf/src/test/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchemaTest.java\nnew file mode 100644\nindex 0000000000..8952f9a547\n--- /dev/null\n+++ b/sdks/java/extensions/protobuf/src/test/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchemaTest.java\n\n@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.protobuf;\n+\n+import static org.apache.beam.sdk.extensions.protobuf.ProtoSchemaTranslator.withFieldNumber;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.MAP_PRIMITIVE_PROTO;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.MAP_PRIMITIVE_ROW;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.MAP_PRIMITIVE_SCHEMA;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.NESTED_PROTO;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.NESTED_ROW;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.NESTED_SCHEMA;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_PROTO_BOOL;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_PROTO_INT32;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_PROTO_PRIMITIVE;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_PROTO_STRING;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_ROW_BOOL;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_ROW_INT32;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_ROW_PRIMITIVE;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_ROW_STRING;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.ONEOF_SCHEMA;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.OUTER_ONEOF_PROTO;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.OUTER_ONEOF_ROW;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.OUTER_ONEOF_SCHEMA;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.PRIMITIVE_PROTO;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.PRIMITIVE_ROW;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.PRIMITIVE_SCHEMA;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.REPEATED_PROTO;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.REPEATED_ROW;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.REPEATED_SCHEMA;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.WKT_MESSAGE_PROTO;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.WKT_MESSAGE_ROW;\n+import static org.apache.beam.sdk.extensions.protobuf.TestProtoSchemas.WKT_MESSAGE_SCHEMA;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.EnumMessage;\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.EnumMessage.Enum;\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.MapPrimitive;\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.Nested;\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.OneOf;\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.OuterOneOf;\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.Primitive;\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.RepeatPrimitive;\n+import org.apache.beam.sdk.extensions.protobuf.Proto3SchemaMessages.WktMessage;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.logicaltypes.EnumerationType;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class ProtoMessageSchemaTest {\n+\n+  @Test\n+  public void testPrimitiveSchema() {\n+    Schema schema = new ProtoMessageSchema().schemaFor(TypeDescriptor.of(Primitive.class));\n+    assertEquals(PRIMITIVE_SCHEMA, schema);\n+  }\n+\n+  @Test\n+  public void testPrimitiveProtoToRow() {\n+    SerializableFunction<Primitive, Row> toRow =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(Primitive.class));\n+    assertEquals(PRIMITIVE_ROW, toRow.apply(PRIMITIVE_PROTO));\n+  }\n+\n+  @Test\n+  public void testPrimitiveRowToProto() {\n+    SerializableFunction<Row, Primitive> fromRow =\n+        new ProtoMessageSchema().fromRowFunction(TypeDescriptor.of(Primitive.class));\n+    assertEquals(PRIMITIVE_PROTO, fromRow.apply(PRIMITIVE_ROW));\n+  }\n+\n+  @Test\n+  public void testRepeatedSchema() {\n+    Schema schema = new ProtoMessageSchema().schemaFor(TypeDescriptor.of(RepeatPrimitive.class));\n+    assertEquals(REPEATED_SCHEMA, schema);\n+  }\n+\n+  @Test\n+  public void testRepeatedProtoToRow() {\n+    SerializableFunction<RepeatPrimitive, Row> toRow =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(RepeatPrimitive.class));\n+    assertEquals(REPEATED_ROW, toRow.apply(REPEATED_PROTO));\n+  }\n+\n+  @Test\n+  public void testRepeatedRowToProto() {\n+    SerializableFunction<Row, RepeatPrimitive> fromRow =\n+        new ProtoMessageSchema().fromRowFunction(TypeDescriptor.of(RepeatPrimitive.class));\n+    assertEquals(REPEATED_PROTO, fromRow.apply(REPEATED_ROW));\n+  }\n+\n+  // Test map type\n+  @Test\n+  public void testMapSchema() {\n+    Schema schema = new ProtoMessageSchema().schemaFor(TypeDescriptor.of(MapPrimitive.class));\n+    assertEquals(MAP_PRIMITIVE_SCHEMA, schema);\n+  }\n+\n+  @Test\n+  public void testMapProtoToRow() {\n+    SerializableFunction<MapPrimitive, Row> toRow =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(MapPrimitive.class));\n+    assertEquals(MAP_PRIMITIVE_ROW, toRow.apply(MAP_PRIMITIVE_PROTO));\n+  }\n+\n+  @Test\n+  public void testMapRowToProto() {\n+    SerializableFunction<Row, MapPrimitive> fromRow =\n+        new ProtoMessageSchema().fromRowFunction(TypeDescriptor.of(MapPrimitive.class));\n+    assertEquals(MAP_PRIMITIVE_PROTO, fromRow.apply(MAP_PRIMITIVE_ROW));\n+  }\n+\n+  @Test\n+  public void testNestedSchema() {\n+    Schema schema = new ProtoMessageSchema().schemaFor(TypeDescriptor.of(Nested.class));\n+    assertEquals(NESTED_SCHEMA, schema);\n+  }\n+\n+  @Test\n+  public void testNestedProtoToRow() {\n+    SerializableFunction<Nested, Row> toRow =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(Nested.class));\n+    assertEquals(NESTED_ROW, toRow.apply(NESTED_PROTO));\n+  }\n+\n+  @Test\n+  public void testNestedRowToProto() {\n+    SerializableFunction<Row, Nested> fromRow =\n+        new ProtoMessageSchema().fromRowFunction(TypeDescriptor.of(Nested.class));\n+    assertEquals(NESTED_PROTO, fromRow.apply(NESTED_ROW));\n+  }\n+\n+  @Test\n+  public void testOneOfSchema() {\n+    Schema schema = new ProtoMessageSchema().schemaFor(TypeDescriptor.of(OneOf.class));\n+    assertEquals(ONEOF_SCHEMA, schema);\n+  }\n+\n+  @Test\n+  public void testOneOfProtoToRow() {\n+    SerializableFunction<OneOf, Row> toRow =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(OneOf.class));\n+    assertEquals(ONEOF_ROW_INT32, toRow.apply(ONEOF_PROTO_INT32));\n+    assertEquals(ONEOF_ROW_BOOL, toRow.apply(ONEOF_PROTO_BOOL));\n+    assertEquals(ONEOF_ROW_STRING, toRow.apply(ONEOF_PROTO_STRING));\n+    assertEquals(ONEOF_ROW_PRIMITIVE, toRow.apply(ONEOF_PROTO_PRIMITIVE));\n+  }\n+\n+  @Test\n+  public void testOneOfRowToProto() {\n+    SerializableFunction<Row, OneOf> fromRow =\n+        new ProtoMessageSchema().fromRowFunction(TypeDescriptor.of(OneOf.class));\n+    assertEquals(ONEOF_PROTO_INT32, fromRow.apply(ONEOF_ROW_INT32));\n+    assertEquals(ONEOF_PROTO_BOOL, fromRow.apply(ONEOF_ROW_BOOL));\n+    assertEquals(ONEOF_PROTO_STRING, fromRow.apply(ONEOF_ROW_STRING));\n+    assertEquals(ONEOF_PROTO_PRIMITIVE, fromRow.apply(ONEOF_ROW_PRIMITIVE));\n+  }\n+\n+  @Test\n+  public void testOuterOneOfSchema() {\n+    Schema schema = new ProtoMessageSchema().schemaFor(TypeDescriptor.of(OuterOneOf.class));\n+    assertEquals(OUTER_ONEOF_SCHEMA, schema);\n+  }\n+\n+  @Test\n+  public void testOuterOneOfProtoToRow() {\n+    SerializableFunction<OuterOneOf, Row> toRow =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(OuterOneOf.class));\n+    assertEquals(OUTER_ONEOF_ROW, toRow.apply(OUTER_ONEOF_PROTO));\n+  }\n+\n+  @Test\n+  public void testOuterOneOfRowToProto() {\n+    SerializableFunction<Row, OuterOneOf> fromRow =\n+        new ProtoMessageSchema().fromRowFunction(TypeDescriptor.of(OuterOneOf.class));\n+    assertEquals(OUTER_ONEOF_PROTO, fromRow.apply(OUTER_ONEOF_ROW));\n+  }\n+\n+  private static final EnumerationType ENUM_TYPE =\n+      EnumerationType.create(ImmutableMap.of(\"ZERO\", 0, \"TWO\", 2, \"THREE\", 3));\n+  private static final Schema ENUM_SCHEMA =\n+      Schema.builder()\n+          .addField(\"enum\", withFieldNumber(FieldType.logicalType(ENUM_TYPE).withNullable(true), 1))\n+          .build();\n+  private static final Row ENUM_ROW =\n+      Row.withSchema(ENUM_SCHEMA).addValues(ENUM_TYPE.valueOf(\"TWO\")).build();\n+  private static final EnumMessage ENUM_PROTO = EnumMessage.newBuilder().setEnum(Enum.TWO).build();\n+\n+  @Test\n+  public void testEnumSchema() {\n+    Schema schema = new ProtoMessageSchema().schemaFor(TypeDescriptor.of(EnumMessage.class));\n+    assertEquals(ENUM_SCHEMA, schema);\n+  }\n+\n+  @Test\n+  public void testEnumProtoToRow() {\n+    SerializableFunction<EnumMessage, Row> toRow =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(EnumMessage.class));\n+    assertEquals(ENUM_ROW, toRow.apply(ENUM_PROTO));\n+  }\n+\n+  @Test\n+  public void testEnumRowToProto() {\n+    SerializableFunction<Row, EnumMessage> fromRow =\n+        new ProtoMessageSchema().fromRowFunction(TypeDescriptor.of(EnumMessage.class));\n+    assertEquals(ENUM_PROTO, fromRow.apply(ENUM_ROW));\n+  }\n+\n+  @Test\n+  public void testWktMessageSchema() {\n+    Schema schema = new ProtoMessageSchema().schemaFor(TypeDescriptor.of(WktMessage.class));\n+    assertEquals(WKT_MESSAGE_SCHEMA, schema);\n+  }\n+\n+  @Test\n+  public void testWktProtoToRow() {\n+    SerializableFunction<WktMessage, Row> toRow =\n+        new ProtoMessageSchema().toRowFunction(TypeDescriptor.of(WktMessage.class));\n+    assertEquals(WKT_MESSAGE_ROW, toRow.apply(WKT_MESSAGE_PROTO));\n+  }\n+\n+  @Test\n+  public void testWktRowToProto() {\n+    SerializableFunction<Row, WktMessage> fromRow =\n+        new ProtoMessageSchema().fromRowFunction(TypeDescriptor.of(WktMessage.class));\n+    assertEquals(WKT_MESSAGE_PROTO, fromRow.apply(WKT_MESSAGE_ROW));\n+  }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzgyOQ==", "url": "https://github.com/apache/beam/pull/10796#discussion_r376697829", "bodyText": "Do NOT delete!", "author": "alexvanboxel", "createdAt": "2020-02-08T08:54:46Z", "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchema.java", "diffHunk": "@@ -1,125 +0,0 @@\n-/*", "originalCommit": "94d37c00b06802528ac85d24324211d7298c76b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0OTMxMg==", "url": "https://github.com/apache/beam/pull/10796#discussion_r377049312", "bodyText": "Why? This one is currently not used by anyone, or is this coming in a subsequent PR?\nNotice that I have been refining access and removed dead code on the assumption that we should not be exposing code that we are not using (as part of the API/Schema refinements).", "author": "iemejia", "createdAt": "2020-02-10T13:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NzgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dbe2f682983509850b401d1be2739c53dd967e5d", "chunk": "diff --git a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchema.java b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchema.java\nnew file mode 100644\nindex 0000000000..47a928c73e\n--- /dev/null\n+++ b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoMessageSchema.java\n\n@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.protobuf;\n+\n+import static org.apache.beam.sdk.extensions.protobuf.ProtoByteBuddyUtils.getProtoGetter;\n+\n+import com.google.protobuf.DynamicMessage;\n+import com.google.protobuf.Message;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.extensions.protobuf.ProtoByteBuddyUtils.ProtoTypeConversionsFactory;\n+import org.apache.beam.sdk.schemas.FieldValueGetter;\n+import org.apache.beam.sdk.schemas.FieldValueTypeInformation;\n+import org.apache.beam.sdk.schemas.GetterBasedSchemaProvider;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.Field;\n+import org.apache.beam.sdk.schemas.SchemaUserTypeCreator;\n+import org.apache.beam.sdk.schemas.logicaltypes.OneOfType;\n+import org.apache.beam.sdk.schemas.utils.FieldValueTypeSupplier;\n+import org.apache.beam.sdk.schemas.utils.JavaBeanUtils;\n+import org.apache.beam.sdk.schemas.utils.ReflectUtils;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Maps;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Multimap;\n+\n+@Experimental(Kind.SCHEMAS)\n+public class ProtoMessageSchema extends GetterBasedSchemaProvider {\n+\n+  private static final class ProtoClassFieldValueTypeSupplier implements FieldValueTypeSupplier {\n+    @Override\n+    public List<FieldValueTypeInformation> get(Class<?> clazz) {\n+      throw new RuntimeException(\"Unexpected call.\");\n+    }\n+\n+    @Override\n+    public List<FieldValueTypeInformation> get(Class<?> clazz, Schema schema) {\n+      Multimap<String, Method> methods = ReflectUtils.getMethodsMap(clazz);\n+      List<FieldValueTypeInformation> types =\n+          Lists.newArrayListWithCapacity(schema.getFieldCount());\n+      for (Field field : schema.getFields()) {\n+        if (field.getType().isLogicalType(OneOfType.IDENTIFIER)) {\n+          // This is a OneOf. Look for the getters for each OneOf option.\n+          OneOfType oneOfType = field.getType().getLogicalType(OneOfType.class);\n+          Map<String, FieldValueTypeInformation> oneOfTypes = Maps.newHashMap();\n+          for (Field oneOfField : oneOfType.getOneOfSchema().getFields()) {\n+            Method method = getProtoGetter(methods, oneOfField.getName(), oneOfField.getType());\n+            oneOfTypes.put(\n+                oneOfField.getName(),\n+                FieldValueTypeInformation.forGetter(method).withName(field.getName()));\n+          }\n+          // Add an entry that encapsulates information about all possible getters.\n+          types.add(\n+              FieldValueTypeInformation.forOneOf(\n+                      field.getName(), field.getType().getNullable(), oneOfTypes)\n+                  .withName(field.getName()));\n+        } else {\n+          // This is a simple field. Add the getter.\n+          Method method = getProtoGetter(methods, field.getName(), field.getType());\n+          types.add(FieldValueTypeInformation.forGetter(method).withName(field.getName()));\n+        }\n+      }\n+      return types;\n+    }\n+  }\n+\n+  @Nullable\n+  @Override\n+  public <T> Schema schemaFor(TypeDescriptor<T> typeDescriptor) {\n+    checkForDynamicType(typeDescriptor);\n+    return ProtoSchemaTranslator.getSchema((Class<Message>) typeDescriptor.getRawType());\n+  }\n+\n+  @Override\n+  public List<FieldValueGetter> fieldValueGetters(Class<?> targetClass, Schema schema) {\n+    return ProtoByteBuddyUtils.getGetters(\n+        targetClass,\n+        schema,\n+        new ProtoClassFieldValueTypeSupplier(),\n+        new ProtoTypeConversionsFactory());\n+  }\n+\n+  @Override\n+  public List<FieldValueTypeInformation> fieldValueTypeInformations(\n+      Class<?> targetClass, Schema schema) {\n+    return JavaBeanUtils.getFieldTypes(targetClass, schema, new ProtoClassFieldValueTypeSupplier());\n+  }\n+\n+  @Override\n+  public SchemaUserTypeCreator schemaTypeCreator(Class<?> targetClass, Schema schema) {\n+    SchemaUserTypeCreator creator =\n+        ProtoByteBuddyUtils.getBuilderCreator(\n+            targetClass, schema, new ProtoClassFieldValueTypeSupplier());\n+    if (creator == null) {\n+      throw new RuntimeException(\"Cannot create creator for \" + targetClass);\n+    }\n+    return creator;\n+  }\n+\n+  private <T> void checkForDynamicType(TypeDescriptor<T> typeDescriptor) {\n+    if (typeDescriptor.getRawType().equals(DynamicMessage.class)) {\n+      throw new RuntimeException(\n+          \"DynamicMessage is not allowed for the standard ProtoSchemaProvider, use ProtoDynamicMessageSchema  instead.\");\n+    }\n+  }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5ODAwMQ==", "url": "https://github.com/apache/beam/pull/10796#discussion_r376698001", "bodyText": "It think that this need to be kept public as well. Not sure though... it can but used externally to create a schema from a descriptor.", "author": "alexvanboxel", "createdAt": "2020-02-08T08:58:00Z", "path": "sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java", "diffHunk": "@@ -107,8 +108,8 @@\n  *   <li>google.protobuf.BytesValue maps to a nullable FieldType.BYTES\n  * </ul>\n  */\n-@Experimental(Experimental.Kind.SCHEMAS)\n-public class ProtoSchemaTranslator {", "originalCommit": "94d37c00b06802528ac85d24324211d7298c76b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MDQ3Nw==", "url": "https://github.com/apache/beam/pull/10796#discussion_r377090477", "bodyText": "This one looks like an Internal util class no?\nUsers who need to create an explicit Schema at the moment can get it via ProtoMessageSchema#schemaFor\nWDYT of letting it Internal and exposing it only once required? or exposing anything else required via the other public classes.", "author": "iemejia", "createdAt": "2020-02-10T14:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5ODAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dbe2f682983509850b401d1be2739c53dd967e5d", "chunk": "diff --git a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\nindex 81a7448bcc..5b5bbaf897 100644\n--- a/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\n+++ b/sdks/java/extensions/protobuf/src/main/java/org/apache/beam/sdk/extensions/protobuf/ProtoSchemaTranslator.java\n\n@@ -108,23 +108,22 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Sets;\n  *   <li>google.protobuf.BytesValue maps to a nullable FieldType.BYTES\n  * </ul>\n  */\n-@Experimental(Kind.SCHEMAS)\n class ProtoSchemaTranslator {\n   /** This METADATA tag is used to store the field number of a proto tag. */\n   public static final String PROTO_NUMBER_METADATA_TAG = \"PROTO_NUMBER\";\n \n   /** Attach a proto field number to a type. */\n-  public static FieldType withFieldNumber(FieldType fieldType, int index) {\n+  static FieldType withFieldNumber(FieldType fieldType, int index) {\n     return fieldType.withMetadata(PROTO_NUMBER_METADATA_TAG, Long.toString(index));\n   }\n \n   /** Return the proto field number for a type. */\n-  public static int getFieldNumber(FieldType fieldType) {\n+  static int getFieldNumber(FieldType fieldType) {\n     return Integer.parseInt(fieldType.getMetadataString(PROTO_NUMBER_METADATA_TAG));\n   }\n \n   /** Return a Beam scheam representing a proto class. */\n-  public static Schema getSchema(Class<? extends Message> clazz) {\n+  static Schema getSchema(Class<? extends Message> clazz) {\n     return getSchema(ProtobufUtil.getDescriptorForClass(clazz));\n   }\n \n"}}, {"oid": "dbe2f682983509850b401d1be2739c53dd967e5d", "url": "https://github.com/apache/beam/commit/dbe2f682983509850b401d1be2739c53dd967e5d", "message": "Refine access level for `sdks/java/extensions/protobuf`", "committedDate": "2020-02-10T14:23:39Z", "type": "forcePushed"}, {"oid": "2d2b0a1ce55974093748e7a89cac89895cb00d72", "url": "https://github.com/apache/beam/commit/2d2b0a1ce55974093748e7a89cac89895cb00d72", "message": "Refine access level for `sdks/java/extensions/protobuf`", "committedDate": "2020-02-10T20:53:16Z", "type": "forcePushed"}, {"oid": "c4d006c290e23cb100e19f307f8a696c76b47ee3", "url": "https://github.com/apache/beam/commit/c4d006c290e23cb100e19f307f8a696c76b47ee3", "message": "Refine access level for `sdks/java/extensions/protobuf`", "committedDate": "2020-02-26T17:25:14Z", "type": "commit"}, {"oid": "c4d006c290e23cb100e19f307f8a696c76b47ee3", "url": "https://github.com/apache/beam/commit/c4d006c290e23cb100e19f307f8a696c76b47ee3", "message": "Refine access level for `sdks/java/extensions/protobuf`", "committedDate": "2020-02-26T17:25:14Z", "type": "forcePushed"}]}