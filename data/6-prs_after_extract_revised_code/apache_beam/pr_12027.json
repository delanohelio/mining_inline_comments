{"pr_number": 12027, "pr_title": "[BEAM-9179] Refactor Beam ZetaSQL type translation code", "pr_createdAt": "2020-06-17T21:59:28Z", "pr_url": "https://github.com/apache/beam/pull/12027", "timeline": [{"oid": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609", "url": "https://github.com/apache/beam/commit/6c5c0d119c8c4ab700e300404a73c8a84e1a4609", "message": "[BEAM-9179] Refactor Beam ZetaSQL type translation code", "committedDate": "2020-06-17T21:47:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MDE4Ng==", "url": "https://github.com/apache/beam/pull/12027#discussion_r441860186", "bodyText": "You can write 100L to create a java Long literal.", "author": "robinyqiu", "createdAt": "2020-06-17T22:05:29Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java", "diffHunk": "@@ -195,7 +195,8 @@ private static void initializeCalciteEnvironmentWithContext(Context... extraCont\n   private static void initializeBeamTableProvider() {\n     Table projectTable = getTable(\"InMemoryTableProject\", PushDownOptions.PROJECT);\n     Table bothTable = getTable(\"InMemoryTableBoth\", PushDownOptions.BOTH);\n-    Row[] rows = {row(BASIC_SCHEMA, 100, 1, \"one\", 100), row(BASIC_SCHEMA, 200, 2, \"two\", 200)};\n+    Row[] rows = {row(BASIC_SCHEMA, (long) 100, (long) 1, \"one\", (long) 100),", "originalCommit": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDUwNA==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442410504", "bodyText": "Done. Thanks for pointing out.", "author": "ZijieSong946", "createdAt": "2020-06-18T18:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MDE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5cfdceee2df3e8404f3a001fcbb8ae9060967564", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java b/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java\nindex e456a55967..c52942527b 100644\n--- a/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java\n+++ b/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPushDownTest.java\n\n@@ -195,8 +195,9 @@ public class ZetaSQLPushDownTest {\n   private static void initializeBeamTableProvider() {\n     Table projectTable = getTable(\"InMemoryTableProject\", PushDownOptions.PROJECT);\n     Table bothTable = getTable(\"InMemoryTableBoth\", PushDownOptions.BOTH);\n-    Row[] rows = {row(BASIC_SCHEMA, (long) 100, (long) 1, \"one\", (long) 100),\n-        row(BASIC_SCHEMA, (long) 200, (long) 2, \"two\", (long) 200)};\n+    Row[] rows = {\n+      row(BASIC_SCHEMA, 100L, 1L, \"one\", 100L), row(BASIC_SCHEMA, 200L, 2L, \"two\", 200L)\n+    };\n \n     tableProvider = new TestTableProvider();\n     tableProvider.createTable(projectTable);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NDYyNQ==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442354625", "bodyText": "Could you mark this utility class as final and add a private constructor, like ZetaSqlBeamTranslationUtils.java?", "author": "robinyqiu", "createdAt": "2020-06-18T16:30:42Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {", "originalCommit": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjc5Nw==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442422797", "bodyText": "Done. Thanks for the suggestion.", "author": "ZijieSong946", "createdAt": "2020-06-18T18:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NDYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5cfdceee2df3e8404f3a001fcbb8ae9060967564", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java\nindex 8a69662099..d040790930 100644\n--- a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java\n+++ b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java\n\n@@ -48,10 +47,12 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Immutabl\n  * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n  */\n @Internal\n-public class ZetaSqlCalciteTranslationUtils {\n+public final class ZetaSqlCalciteTranslationUtils {\n+\n+  private ZetaSqlCalciteTranslationUtils() {}\n \n   // Type conversion: Calcite => ZetaSQL\n-  static Type toZetaType(RelDataType calciteType) {\n+  public static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n       case BIGINT:\n         return TypeFactory.createSimpleType(TYPE_INT64);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442371892", "bodyText": "We don't have TIME support at this point. Can we get this entry removed?\n(Also, just curious can the MAP entry below be removed as well? Not sure if any code is using that.)", "author": "robinyqiu", "createdAt": "2020-06-18T16:58:46Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -43,55 +40,38 @@\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder;\n import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n \n-/** Utility to convert types from Calcite Schema types. */\n+/**\n+ * Utility methods for ZetaSQL <=> Calcite translation.\n+ *\n+ * <p>Unsupported ZetaSQL types: INT32, UINT32, UINT64, FLOAT, ENUM, PROTO, GEOGRAPHY\n+ * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n+ */\n @Internal\n-public class TypeUtils {\n-\n-  private static final ImmutableMap<SqlTypeName, Type> CALCITE_TO_ZETA_SIMPLE_TYPES =\n-      ImmutableMap.<SqlTypeName, Type>builder()\n-          .put(SqlTypeName.BIGINT, TypeFactory.createSimpleType(TYPE_INT64))\n-          .put(SqlTypeName.INTEGER, TypeFactory.createSimpleType(TYPE_INT32))\n-          .put(SqlTypeName.VARCHAR, TypeFactory.createSimpleType(TYPE_STRING))\n-          .put(SqlTypeName.BOOLEAN, TypeFactory.createSimpleType(TYPE_BOOL))\n-          .put(SqlTypeName.FLOAT, TypeFactory.createSimpleType(TYPE_FLOAT))\n-          .put(SqlTypeName.DOUBLE, TypeFactory.createSimpleType(TYPE_DOUBLE))\n-          .put(SqlTypeName.VARBINARY, TypeFactory.createSimpleType(TYPE_BYTES))\n-          .put(SqlTypeName.TIMESTAMP, TypeFactory.createSimpleType(TYPE_TIMESTAMP))\n-          .put(SqlTypeName.DATE, TypeFactory.createSimpleType(TYPE_DATE))\n-          .put(SqlTypeName.TIME, TypeFactory.createSimpleType(TYPE_TIME))\n-          .build();\n-\n-  private static final ImmutableMap<TypeKind, Function<RexBuilder, RelDataType>>\n-      ZETA_TO_CALCITE_SIMPLE_TYPES =\n-          ImmutableMap.<TypeKind, Function<RexBuilder, RelDataType>>builder()\n-              .put(TYPE_NUMERIC, relDataTypeFactory(SqlTypeName.DECIMAL))\n-              .put(TYPE_INT32, relDataTypeFactory(SqlTypeName.INTEGER))\n-              .put(TYPE_INT64, relDataTypeFactory(SqlTypeName.BIGINT))\n-              .put(TYPE_FLOAT, relDataTypeFactory(SqlTypeName.FLOAT))\n-              .put(TYPE_DOUBLE, relDataTypeFactory(SqlTypeName.DOUBLE))\n-              .put(TYPE_STRING, relDataTypeFactory(SqlTypeName.VARCHAR))\n-              .put(TYPE_BOOL, relDataTypeFactory(SqlTypeName.BOOLEAN))\n-              .put(TYPE_BYTES, relDataTypeFactory(SqlTypeName.VARBINARY))\n-              .put(TYPE_DATE, relDataTypeFactory(SqlTypeName.DATE))\n-              .put(TYPE_TIME, relDataTypeFactory(SqlTypeName.TIME))\n-              // TODO: handle timestamp with time zone.\n-              .put(TYPE_TIMESTAMP, relDataTypeFactory(SqlTypeName.TIMESTAMP))\n-              .build();\n-\n-  /** Returns a type matching the corresponding Calcite type. */\n-  static Type toZetaType(RelDataType calciteType) {\n-\n-    if (CALCITE_TO_ZETA_SIMPLE_TYPES.containsKey(calciteType.getSqlTypeName())) {\n-      return CALCITE_TO_ZETA_SIMPLE_TYPES.get(calciteType.getSqlTypeName());\n-    }\n+public class ZetaSqlCalciteTranslationUtils {\n \n+  // Type conversion: Calcite => ZetaSQL\n+  static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n+      case BIGINT:\n+        return TypeFactory.createSimpleType(TYPE_INT64);\n+      case DOUBLE:\n+        return TypeFactory.createSimpleType(TYPE_DOUBLE);\n+      case BOOLEAN:\n+        return TypeFactory.createSimpleType(TYPE_BOOL);\n+      case VARCHAR:\n+        return TypeFactory.createSimpleType(TYPE_STRING);\n+      case VARBINARY:\n+        return TypeFactory.createSimpleType(TYPE_BYTES);\n+      case DATE:\n+        return TypeFactory.createSimpleType(TYPE_DATE);\n+      case TIME:", "originalCommit": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzM4NA==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442423384", "bodyText": "Done. TIME and MAP entry removed at this point.", "author": "ZijieSong946", "createdAt": "2020-06-18T18:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNDIxNA==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442424214", "bodyText": "I believe #10158 dropped the need for MAP. You might verify it can be removed with @TheNeuralBit", "author": "apilloud", "createdAt": "2020-06-18T18:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzU1NQ==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442427555", "bodyText": "Thanks. I got it.", "author": "ZijieSong946", "createdAt": "2020-06-18T18:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzOTc3MA==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442439770", "bodyText": "Technically we still support the \"nested\" style of schema for pubsub that uses a MAP for attributes, but it won't work with ZetaSQL anyway, only in CalciteSQL. I think it's fine to just throw when we encounter a MAP here.", "author": "TheNeuralBit", "createdAt": "2020-06-18T19:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0Mjk5NQ==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442442995", "bodyText": "Thanks. I would remove it anyway.", "author": "ZijieSong946", "createdAt": "2020-06-18T19:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5cfdceee2df3e8404f3a001fcbb8ae9060967564", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java\nindex 8a69662099..d040790930 100644\n--- a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java\n+++ b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java\n\n@@ -48,10 +47,12 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Immutabl\n  * TODO[BEAM-10238]: support ZetaSQL types: TIME, DATETIME, NUMERIC\n  */\n @Internal\n-public class ZetaSqlCalciteTranslationUtils {\n+public final class ZetaSqlCalciteTranslationUtils {\n+\n+  private ZetaSqlCalciteTranslationUtils() {}\n \n   // Type conversion: Calcite => ZetaSQL\n-  static Type toZetaType(RelDataType calciteType) {\n+  public static Type toZetaType(RelDataType calciteType) {\n     switch (calciteType.getSqlTypeName()) {\n       case BIGINT:\n         return TypeFactory.createSimpleType(TYPE_INT64);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNDY1Mg==", "url": "https://github.com/apache/beam/pull/12027#discussion_r442424652", "bodyText": "Thanks for cleaning up after my C developer instinct to call itoa everywhere.", "author": "apilloud", "createdAt": "2020-06-18T18:34:08Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -134,7 +138,7 @@ public static RelDataType toArrayRelDataType(\n     for (int i = 0; i < fields.size(); i++) {\n       String name = fields.get(i).getName();\n       if (\"\".equals(name)) {\n-        name = \"$col\" + String.valueOf(i);", "originalCommit": "6c5c0d119c8c4ab700e300404a73c8a84e1a4609", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5cfdceee2df3e8404f3a001fcbb8ae9060967564", "url": "https://github.com/apache/beam/commit/5cfdceee2df3e8404f3a001fcbb8ae9060967564", "message": "[BEAM-9179] Refactor Beam ZetaSQL type translation code", "committedDate": "2020-06-18T20:38:54Z", "type": "commit"}, {"oid": "156449f5afc1102cb0aaeeda74d36740093aeb38", "url": "https://github.com/apache/beam/commit/156449f5afc1102cb0aaeeda74d36740093aeb38", "message": "CheckStyle bug fixed", "committedDate": "2020-06-18T23:07:40Z", "type": "commit"}]}