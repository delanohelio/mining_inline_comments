{"pr_number": 11955, "pr_title": "[BEAM-10220] add support for implicit nulls for converting between beam rows and json", "pr_createdAt": "2020-06-09T05:46:14Z", "pr_url": "https://github.com/apache/beam/pull/11955", "timeline": [{"oid": "94ed58a8c8cb05cc53092df834ee94d92b720984", "url": "https://github.com/apache/beam/commit/94ed58a8c8cb05cc53092df834ee94d92b720984", "message": "[BEAM-10220] add support for implicit nulls", "committedDate": "2020-06-09T05:43:23Z", "type": "commit"}, {"oid": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f", "url": "https://github.com/apache/beam/commit/185bd2fec104d72d9cadbf05e8bd4dbd523cb90f", "message": "[BEAM-10220] fixed tests", "committedDate": "2020-06-09T07:40:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTQzOA==", "url": "https://github.com/apache/beam/pull/11955#discussion_r437781438", "bodyText": "nit: could you change this to withAllowMissingFields?\nAlso please add a docstring", "author": "TheNeuralBit", "createdAt": "2020-06-09T23:42:26Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){", "originalCommit": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4OTAyMw==", "url": "https://github.com/apache/beam/pull/11955#discussion_r437789023", "bodyText": "We might want to make this an enum so in the future there could be a third mode where nulls must be encoded with a missing field, and having a null field value would be considered an error. The mode you've added here is a permissive middle ground where we allow either one.", "author": "TheNeuralBit", "createdAt": "2020-06-10T00:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "ef8fd6e797d7f61a1fdd87cb528de6c1a7d3299d", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\nindex 8a59fc0b1d..3fffbfe0ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\n\n@@ -186,10 +191,15 @@ public class RowJson {\n       this.schema = schema;\n     }\n \n-    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){\n-      this.allowMissingFields = allowMissing;\n+    /**\n+     * Sets the behaviour of the deserializer with missing fields. If set to the default\n+     * REQUIRE_NULL, it nulls must be explicitly defined as fieldName: null. If set to\n+     * ALLOW_MISSING, missing fields will be interpreted as null.\n+     */\n+    public RowJsonDeserializer withMissingFieldBehavior(MissingFieldBehavior behavior) {\n+      this.missingFieldBehavior = behavior;\n       return this;\n-  }\n+    }\n \n     @Override\n     public Row deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDQxMg==", "url": "https://github.com/apache/beam/pull/11955#discussion_r437784412", "bodyText": "Similar comment here, withIgnoreNullsOnWrite and add a docstring. (I think checkstyle will complain without the docstring anyway).", "author": "TheNeuralBit", "createdAt": "2020-06-09T23:52:23Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -362,6 +382,11 @@ private RowJsonSerializer(Schema schema) {\n       super(Row.class);\n       this.schema = schema;\n     }\n+  \n+    public RowJsonSerializer ignoreNullsOnWrite(Boolean ignoreNullsOnWrite) {", "originalCommit": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NjMyNw==", "url": "https://github.com/apache/beam/pull/11955#discussion_r437786327", "bodyText": "I might call it \"DropNullsOnWrite\" instead of ignore, but I don't feel strongly about it", "author": "TheNeuralBit", "createdAt": "2020-06-09T23:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "ef8fd6e797d7f61a1fdd87cb528de6c1a7d3299d", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\nindex 8a59fc0b1d..3fffbfe0ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\n\n@@ -382,9 +384,10 @@ public class RowJson {\n       super(Row.class);\n       this.schema = schema;\n     }\n-  \n-    public RowJsonSerializer ignoreNullsOnWrite(Boolean ignoreNullsOnWrite) {\n-      this.ignoreNullsOnWrite = ignoreNullsOnWrite;\n+\n+    /** Serializer drops nulls on write if set to true instead of writing fieldName: null */\n+    public RowJsonSerializer withDropNullsOnWrite(Boolean dropNullsOnWrite) {\n+      this.dropNullsOnWrite = dropNullsOnWrite;\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTQ5Mw==", "url": "https://github.com/apache/beam/pull/11955#discussion_r437785493", "bodyText": "I think you could just check this.allowMissingFields here rather than passing it into all the FieldValue instances, no?", "author": "TheNeuralBit", "createdAt": "2020-06-09T23:55:57Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -185,18 +186,25 @@ private RowJsonDeserializer(Schema schema) {\n       this.schema = schema;\n     }\n \n+    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){\n+      this.allowMissingFields = allowMissing;\n+      return this;\n+  }\n+\n     @Override\n     public Row deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n         throws IOException {\n \n       // Parse and convert the root object to Row as if it's a nested field with name 'root'\n       return (Row)\n           extractJsonNodeValue(\n-              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree()));\n+              FieldValue.of(\"root\", FieldType.row(schema), jsonParser.readValueAsTree(), allowMissingFields));\n     }\n \n+  \n+\n     private static Object extractJsonNodeValue(FieldValue fieldValue) {\n-      if (!fieldValue.isJsonValuePresent()) {", "originalCommit": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNDcwMA==", "url": "https://github.com/apache/beam/pull/11955#discussion_r437814700", "bodyText": "I initially thought about this, then changed to putting it into the FieldValue because extractJsonNodeValue was static. Now that you mention it, I believe it is probably neater to just check this.allowMissing fields and change the method to non-static.", "author": "reubenvanammers", "createdAt": "2020-06-10T01:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MjQ4NQ==", "url": "https://github.com/apache/beam/pull/11955#discussion_r440372485", "bodyText": "Ah yeah I didn't notice it was static. I think making it non-static is the right call, thanks!", "author": "TheNeuralBit", "createdAt": "2020-06-15T18:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ef8fd6e797d7f61a1fdd87cb528de6c1a7d3299d", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\nindex 8a59fc0b1d..3fffbfe0ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\n\n@@ -186,10 +191,15 @@ public class RowJson {\n       this.schema = schema;\n     }\n \n-    public RowJsonDeserializer allowMissingFields(Boolean allowMissing){\n-      this.allowMissingFields = allowMissing;\n+    /**\n+     * Sets the behaviour of the deserializer with missing fields. If set to the default\n+     * REQUIRE_NULL, it nulls must be explicitly defined as fieldName: null. If set to\n+     * ALLOW_MISSING, missing fields will be interpreted as null.\n+     */\n+    public RowJsonDeserializer withMissingFieldBehavior(MissingFieldBehavior behavior) {\n+      this.missingFieldBehavior = behavior;\n       return this;\n-  }\n+    }\n \n     @Override\n     public Row deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NzgwMA==", "url": "https://github.com/apache/beam/pull/11955#discussion_r437787800", "bodyText": "This should also check field.getType().getNullable() like the other conditional. If we get a null for a non-nullable field we should fail loudly rather than silently dropping it.", "author": "TheNeuralBit", "createdAt": "2020-06-10T00:04:04Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -375,6 +400,9 @@ private void writeRow(Row row, Schema schema, JsonGenerator gen) throws IOExcept\n       for (int i = 0; i < schema.getFieldCount(); ++i) {\n         Field field = schema.getField(i);\n         Object value = row.getValue(i);\n+        if (ignoreNullsOnWrite && value == null){\n+          continue;\n+        }", "originalCommit": "185bd2fec104d72d9cadbf05e8bd4dbd523cb90f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef8fd6e797d7f61a1fdd87cb528de6c1a7d3299d", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\nindex 8a59fc0b1d..3fffbfe0ff 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java\n\n@@ -400,7 +403,7 @@ public class RowJson {\n       for (int i = 0; i < schema.getFieldCount(); ++i) {\n         Field field = schema.getField(i);\n         Object value = row.getValue(i);\n-        if (ignoreNullsOnWrite && value == null){\n+        if (dropNullsOnWrite && value == null && field.getType().getNullable()) {\n           continue;\n         }\n         gen.writeFieldName(field.getName());\n"}}, {"oid": "ef8fd6e797d7f61a1fdd87cb528de6c1a7d3299d", "url": "https://github.com/apache/beam/commit/ef8fd6e797d7f61a1fdd87cb528de6c1a7d3299d", "message": "[BEAM-10220] updated docstrings, methodnames and slight logic changes in response to comments", "committedDate": "2020-06-10T02:47:27Z", "type": "commit"}, {"oid": "789b9f7bceec57e1df8c86b477743495966b520e", "url": "https://github.com/apache/beam/commit/789b9f7bceec57e1df8c86b477743495966b520e", "message": "[BEAM-10220] updated tests", "committedDate": "2020-06-10T02:53:40Z", "type": "commit"}, {"oid": "f78fc8786373e6c836d8c77467452f3788772a47", "url": "https://github.com/apache/beam/commit/f78fc8786373e6c836d8c77467452f3788772a47", "message": "removed docstring for reverted code", "committedDate": "2020-06-10T03:55:12Z", "type": "commit"}, {"oid": "32d76806aea4bec0bab2e56892a875a044ac6e5c", "url": "https://github.com/apache/beam/commit/32d76806aea4bec0bab2e56892a875a044ac6e5c", "message": "Updated docstring to comply with spotless", "committedDate": "2020-06-14T13:52:15Z", "type": "commit"}]}