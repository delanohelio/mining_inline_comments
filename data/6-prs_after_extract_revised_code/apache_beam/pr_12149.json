{"pr_number": 12149, "pr_title": "[BEAM-9897] Add cross-language support to SnowflakeIO.Read", "pr_createdAt": "2020-07-01T12:41:36Z", "pr_url": "https://github.com/apache/beam/pull/12149", "timeline": [{"oid": "808d858339d162e30586f9e21e3388e50afc726a", "url": "https://github.com/apache/beam/commit/808d858339d162e30586f9e21e3388e50afc726a", "message": "[BEAM-9897] add xlang support for SnowflakeIO.read", "committedDate": "2020-07-01T13:00:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNjQ2OQ==", "url": "https://github.com/apache/beam/pull/12149#discussion_r453426469", "bodyText": "Why are we implementing separate methods here ? Also probably this should be a separate PR.", "author": "chamikaramj", "createdAt": "2020-07-13T04:19:17Z", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java", "diffHunk": "@@ -960,26 +953,44 @@ public static DataSourceConfiguration create(DataSource dataSource) {\n      * @param credentials - an instance of {@link SnowflakeCredentials}.\n      */\n     public static DataSourceConfiguration create(SnowflakeCredentials credentials) {\n-      if (credentials instanceof UsernamePasswordSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setUsername(((UsernamePasswordSnowflakeCredentials) credentials).getUsername())\n-            .setPassword(((UsernamePasswordSnowflakeCredentials) credentials).getPassword())\n-            .build();\n-      } else if (credentials instanceof OAuthTokenSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setOauthToken(((OAuthTokenSnowflakeCredentials) credentials).getToken())\n-            .build();\n-      } else if (credentials instanceof KeyPairSnowflakeCredentials) {\n-        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-            .setValidate(true)\n-            .setUsername(((KeyPairSnowflakeCredentials) credentials).getUsername())\n-            .setPrivateKey(((KeyPairSnowflakeCredentials) credentials).getPrivateKey())\n-            .build();\n-      }\n-      throw new IllegalArgumentException(\n-          \"Can't create DataSourceConfiguration from given credentials\");\n+      return credentials.createSnowflakeDataSourceConfiguration();\n+    }\n+\n+    /**\n+     * Creates {@link DataSourceConfiguration} from instance of {@link", "originalCommit": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwNDU5OQ==", "url": "https://github.com/apache/beam/pull/12149#discussion_r453504599", "bodyText": "I removed this improvement from this PR.", "author": "purbanow", "createdAt": "2020-07-13T09:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNjQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "chunk": "diff --git a/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java b/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java\nindex 9059f6ccf0..4895e4ea0b 100644\n--- a/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java\n+++ b/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/SnowflakeIO.java\n\n@@ -953,44 +960,26 @@ public class SnowflakeIO {\n      * @param credentials - an instance of {@link SnowflakeCredentials}.\n      */\n     public static DataSourceConfiguration create(SnowflakeCredentials credentials) {\n-      return credentials.createSnowflakeDataSourceConfiguration();\n-    }\n-\n-    /**\n-     * Creates {@link DataSourceConfiguration} from instance of {@link\n-     * UsernamePasswordSnowflakeCredentials}.\n-     *\n-     * @param credentials - an instance of {@link UsernamePasswordSnowflakeCredentials}.\n-     */\n-    public static DataSourceConfiguration create(UsernamePasswordSnowflakeCredentials credentials) {\n-      return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-          .setUsername(credentials.getUsername())\n-          .setPassword(credentials.getPassword())\n-          .build();\n-    }\n-\n-    /**\n-     * Creates {@link DataSourceConfiguration} from instance of {@link KeyPairSnowflakeCredentials}.\n-     *\n-     * @param credentials - an instance of {@link KeyPairSnowflakeCredentials}.\n-     */\n-    public static DataSourceConfiguration create(KeyPairSnowflakeCredentials credentials) {\n-      return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-          .setUsername(credentials.getUsername())\n-          .setPrivateKey(credentials.getPrivateKey())\n-          .build();\n-    }\n-\n-    /**\n-     * Creates {@link DataSourceConfiguration} from instance of {@link\n-     * OAuthTokenSnowflakeCredentials}.\n-     *\n-     * @param credentials - an instance of {@link OAuthTokenSnowflakeCredentials}.\n-     */\n-    public static DataSourceConfiguration create(OAuthTokenSnowflakeCredentials credentials) {\n-      return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n-          .setOauthToken(credentials.getToken())\n-          .build();\n+      if (credentials instanceof UsernamePasswordSnowflakeCredentials) {\n+        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n+            .setValidate(true)\n+            .setUsername(((UsernamePasswordSnowflakeCredentials) credentials).getUsername())\n+            .setPassword(((UsernamePasswordSnowflakeCredentials) credentials).getPassword())\n+            .build();\n+      } else if (credentials instanceof OAuthTokenSnowflakeCredentials) {\n+        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n+            .setValidate(true)\n+            .setOauthToken(((OAuthTokenSnowflakeCredentials) credentials).getToken())\n+            .build();\n+      } else if (credentials instanceof KeyPairSnowflakeCredentials) {\n+        return new AutoValue_SnowflakeIO_DataSourceConfiguration.Builder()\n+            .setValidate(true)\n+            .setUsername(((KeyPairSnowflakeCredentials) credentials).getUsername())\n+            .setPrivateKey(((KeyPairSnowflakeCredentials) credentials).getPrivateKey())\n+            .build();\n+      }\n+      throw new IllegalArgumentException(\n+          \"Can't create DataSourceConfiguration from given credentials\");\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNjkyMA==", "url": "https://github.com/apache/beam/pull/12149#discussion_r453426920", "bodyText": "I suggest moving changes to credentials to a separate PR since this seems to be unrelated to x-lang changes.", "author": "chamikaramj", "createdAt": "2020-07-13T04:21:12Z", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/credentials/OAuthTokenSnowflakeCredentials.java", "diffHunk": "@@ -28,4 +30,9 @@ public OAuthTokenSnowflakeCredentials(String token) {\n   public String getToken() {\n     return token;\n   }\n+\n+  @Override", "originalCommit": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwNDk3Mg==", "url": "https://github.com/apache/beam/pull/12149#discussion_r453504972", "bodyText": "I removed this improvement from this PR and I will prepare separate PR.", "author": "purbanow", "createdAt": "2020-07-13T09:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNjkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "chunk": "diff --git a/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/credentials/OAuthTokenSnowflakeCredentials.java b/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/credentials/OAuthTokenSnowflakeCredentials.java\nindex 8f538f7cbc..be102a8b0f 100644\n--- a/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/credentials/OAuthTokenSnowflakeCredentials.java\n+++ b/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/credentials/OAuthTokenSnowflakeCredentials.java\n\n@@ -30,9 +28,4 @@ public class OAuthTokenSnowflakeCredentials implements SnowflakeCredentials {\n   public String getToken() {\n     return token;\n   }\n-\n-  @Override\n-  public SnowflakeIO.DataSourceConfiguration createSnowflakeDataSourceConfiguration() {\n-    return SnowflakeIO.DataSourceConfiguration.create(this);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNzE2MA==", "url": "https://github.com/apache/beam/pull/12149#discussion_r453427160", "bodyText": "Probably just leave this in the package \"org.apache.beam.sdk.io.snowflake\" ? Is there a need to add a new package ? (and if so probably use long form \"crosslanguage\").", "author": "chamikaramj", "createdAt": "2020-07-13T04:22:35Z", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/Configuration.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.xlang;", "originalCommit": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3NjgwOA==", "url": "https://github.com/apache/beam/pull/12149#discussion_r453476808", "bodyText": "It makes sense for me to keep it in separate package. If you insist on keeping it in org.apache.beam.sdk.io.snowflakepackage, i will remove crosslanguage package", "author": "purbanow", "createdAt": "2020-07-13T08:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNzE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "chunk": "diff --git a/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/Configuration.java b/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/crosslanguage/Configuration.java\nsimilarity index 98%\nrename from sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/Configuration.java\nrename to sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/crosslanguage/Configuration.java\nindex 998740d91d..38162aea4f 100644\n--- a/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/Configuration.java\n+++ b/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/crosslanguage/Configuration.java\n\n@@ -15,7 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.beam.sdk.io.snowflake.xlang;\n+package org.apache.beam.sdk.io.snowflake.crosslanguage;\n \n /** Parameters abstract class to expose the transforms to an external SDK. */\n public abstract class Configuration {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNzM5Ng==", "url": "https://github.com/apache/beam/pull/12149#discussion_r453427396", "bodyText": "Probably call this SnowflakeReadRegistrar.", "author": "chamikaramj", "createdAt": "2020-07-13T04:23:57Z", "path": "sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/ExternalRead.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.snowflake.xlang;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.Serializable;\n+import java.nio.charset.Charset;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.io.snowflake.SnowflakeIO;\n+import org.apache.beam.sdk.io.snowflake.credentials.SnowflakeCredentials;\n+import org.apache.beam.sdk.io.snowflake.credentials.SnowflakeCredentialsFactory;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+/** Exposes {@link SnowflakeIO.Read} as an external transform for cross-language usage. */\n+@Experimental\n+@AutoService(ExternalTransformRegistrar.class)\n+public final class ExternalRead implements ExternalTransformRegistrar {", "originalCommit": "be8ce595829b2b86e0e66f7ce26efe3eeba23f72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3MjE2NQ==", "url": "https://github.com/apache/beam/pull/12149#discussion_r453472165", "bodyText": "I changed name to SnowflakeReadRegistrar.", "author": "purbanow", "createdAt": "2020-07-13T08:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyNzM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "chunk": "diff --git a/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/ExternalRead.java b/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/crosslanguage/SnowflakeReadRegistrar.java\nsimilarity index 96%\nrename from sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/ExternalRead.java\nrename to sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/crosslanguage/SnowflakeReadRegistrar.java\nindex db645eb2d6..d8b51b048b 100644\n--- a/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/xlang/ExternalRead.java\n+++ b/sdks/java/io/snowflake/src/main/java/org/apache/beam/sdk/io/snowflake/crosslanguage/SnowflakeReadRegistrar.java\n\n@@ -15,7 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.beam.sdk.io.snowflake.xlang;\n+package org.apache.beam.sdk.io.snowflake.crosslanguage;\n \n import com.google.auto.service.AutoService;\n import java.io.Serializable;\n"}}, {"oid": "4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "url": "https://github.com/apache/beam/commit/4caae3cf5cc3ecb8543caf013b2edfb68bac39d5", "message": "refactor: revert auth mechanism and add missing docs", "committedDate": "2020-07-13T09:54:43Z", "type": "forcePushed"}, {"oid": "90c2f62fcdb6c6217a10b6fa208d9233278e5e26", "url": "https://github.com/apache/beam/commit/90c2f62fcdb6c6217a10b6fa208d9233278e5e26", "message": "refactor: revert auth mechanism and add missing docs", "committedDate": "2020-07-13T09:59:38Z", "type": "forcePushed"}, {"oid": "984fb159a651dbff00d1247aef30b14e5dad3fea", "url": "https://github.com/apache/beam/commit/984fb159a651dbff00d1247aef30b14e5dad3fea", "message": "refactor: revert auth mechanism and add missing docs", "committedDate": "2020-07-13T10:04:38Z", "type": "forcePushed"}, {"oid": "a680d37ec635d2142dd2bfefaf5c62b61a1b3d7d", "url": "https://github.com/apache/beam/commit/a680d37ec635d2142dd2bfefaf5c62b61a1b3d7d", "message": "refactor: revert auth mechanism and add missing docs", "committedDate": "2020-07-13T10:10:01Z", "type": "forcePushed"}, {"oid": "d80540dc993103b33b133afe8a2aa998aa9c7cdf", "url": "https://github.com/apache/beam/commit/d80540dc993103b33b133afe8a2aa998aa9c7cdf", "message": "refactor: revert auth mechanism and add missing docs", "committedDate": "2020-07-13T10:11:54Z", "type": "forcePushed"}, {"oid": "412a8b3feef3685a188d47bef67886066a0768fc", "url": "https://github.com/apache/beam/commit/412a8b3feef3685a188d47bef67886066a0768fc", "message": "feat: add custom expansion-service", "committedDate": "2020-07-31T08:47:53Z", "type": "forcePushed"}, {"oid": "888abcfff81852e1a6e8729ca8422b9e11597e2f", "url": "https://github.com/apache/beam/commit/888abcfff81852e1a6e8729ca8422b9e11597e2f", "message": "feat: add custom expansion-service", "committedDate": "2020-08-01T09:58:46Z", "type": "forcePushed"}, {"oid": "ff960e31d5bc78587730b5e9c5113dbecb34db32", "url": "https://github.com/apache/beam/commit/ff960e31d5bc78587730b5e9c5113dbecb34db32", "message": "feat: add custom expansion-service", "committedDate": "2020-08-01T12:41:02Z", "type": "forcePushed"}, {"oid": "37fe29336955c8df4c3faee88dc70ff18bc89135", "url": "https://github.com/apache/beam/commit/37fe29336955c8df4c3faee88dc70ff18bc89135", "message": "[BEAM-9897] improve credentials mechanism", "committedDate": "2020-08-04T16:11:39Z", "type": "commit"}, {"oid": "0ad69cb2617d91903cb3c475cfefede8ace4782d", "url": "https://github.com/apache/beam/commit/0ad69cb2617d91903cb3c475cfefede8ace4782d", "message": "[BEAM-9897] add xlang support for SnowflakeIO.read", "committedDate": "2020-08-04T16:11:39Z", "type": "commit"}, {"oid": "535a9054e7af371ae7925fab1325d9bb01c1ae37", "url": "https://github.com/apache/beam/commit/535a9054e7af371ae7925fab1325d9bb01c1ae37", "message": "fix: python lint", "committedDate": "2020-08-04T16:11:39Z", "type": "commit"}, {"oid": "f632a8a7a4447463180a8deda2f1d404b5865753", "url": "https://github.com/apache/beam/commit/f632a8a7a4447463180a8deda2f1d404b5865753", "message": "refactor: revert auth mechanism and add missing docs", "committedDate": "2020-08-04T16:11:39Z", "type": "commit"}, {"oid": "5867b3a2beefb865ba729d0145ea357b864f951a", "url": "https://github.com/apache/beam/commit/5867b3a2beefb865ba729d0145ea357b864f951a", "message": "feat: add custom expansion-service", "committedDate": "2020-08-04T16:11:40Z", "type": "commit"}, {"oid": "0ac450195554a20d489e143d91f689f8e7be1b2f", "url": "https://github.com/apache/beam/commit/0ac450195554a20d489e143d91f689f8e7be1b2f", "message": "fix: CI", "committedDate": "2020-08-04T16:11:40Z", "type": "forcePushed"}, {"oid": "b1a1c5f57f6de6f41f8e4f37de91e1c8bfd84781", "url": "https://github.com/apache/beam/commit/b1a1c5f57f6de6f41f8e4f37de91e1c8bfd84781", "message": "fix: CI", "committedDate": "2020-08-04T16:15:21Z", "type": "forcePushed"}, {"oid": "ac8b0ca7d017e4d4bb7c8dc5668ee88cba3a7991", "url": "https://github.com/apache/beam/commit/ac8b0ca7d017e4d4bb7c8dc5668ee88cba3a7991", "message": "fix: CI", "committedDate": "2020-08-04T18:44:16Z", "type": "forcePushed"}, {"oid": "951b54cbb2e22bd77aa78604dcbc78a758bfd5ca", "url": "https://github.com/apache/beam/commit/951b54cbb2e22bd77aa78604dcbc78a758bfd5ca", "message": "fix: CI", "committedDate": "2020-08-04T19:01:50Z", "type": "commit"}, {"oid": "951b54cbb2e22bd77aa78604dcbc78a758bfd5ca", "url": "https://github.com/apache/beam/commit/951b54cbb2e22bd77aa78604dcbc78a758bfd5ca", "message": "fix: CI", "committedDate": "2020-08-04T19:01:50Z", "type": "forcePushed"}]}