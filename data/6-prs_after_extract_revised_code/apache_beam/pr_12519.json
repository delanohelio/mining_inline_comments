{"pr_number": 12519, "pr_title": "[BEAM-10670] Make Read execute as a splittable DoFn by default for the Java DirectRunner.", "pr_createdAt": "2020-08-10T20:33:14Z", "pr_url": "https://github.com/apache/beam/pull/12519", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MDM4Mw==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468170383", "bodyText": "This is effectively a duplicate of AvroIOTest$SimpleTests.testReadDisplayData and doesn't need to a be a validates runner test since it doesn't run a pipeline.", "author": "lukecwik", "createdAt": "2020-08-10T20:34:57Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/AvroIOTest.java", "diffHunk": "@@ -1494,26 +1488,5 @@ public void testAvroSinkShardedWrite() throws Exception {\n     }\n     // TODO: for Write only, test withSuffix,\n     // withShardNameTemplate and withoutSharding.\n-\n-    @Test\n-    @Category(ValidatesRunner.class)\n-    public void testPrimitiveReadDisplayData() {", "originalCommit": "341c649e8f5b41d35425e4fa91af98a5e82a5f46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MTU0MA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468171540", "bodyText": "(here and below) This was previously throwing the top level exception but DirectRunner wraps ParDo exceptions with PipelineExecutionException but BoundedSource/UnboundedSource used a different code path and hence a different exception handling path.", "author": "lukecwik", "createdAt": "2020-08-10T20:37:16Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "diffHunk": "@@ -209,15 +208,13 @@ public void testWriteTwo() throws Exception {\n   @Test\n   @Category(NeedsRunner.class)\n   public void testReadInvalidRecord() throws Exception {\n-    expectedException.expect(IllegalStateException.class);", "originalCommit": "341c649e8f5b41d35425e4fa91af98a5e82a5f46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MTcyNg==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468171726", "bodyText": "Effectively a duplicate of testReadDisplayData just above.", "author": "lukecwik", "createdAt": "2020-08-10T20:37:37Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TextIOReadTest.java", "diffHunk": "@@ -495,24 +487,6 @@ public void testReadDisplayData() {\n       assertThat(displayData, hasDisplayItem(\"compressionType\", BZIP2.toString()));\n     }\n \n-    @Test\n-    @Category(ValidatesRunner.class)\n-    public void testPrimitiveReadDisplayData() {", "originalCommit": "341c649e8f5b41d35425e4fa91af98a5e82a5f46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2Mzg5OA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468863898", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * contain any primitive reads.\n          \n          \n            \n               * contain any primitive reads when use_deprecated_read is not specified.", "author": "boyuanzz", "createdAt": "2020-08-11T21:04:09Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java", "diffHunk": "@@ -630,4 +635,38 @@ public void tearDown() {\n       invoker = null;\n     }\n   }\n+\n+  /**\n+   * Throws an {@link IllegalArgumentException} if the pipeline contains any primitive read\n+   * transforms that have not been expanded to be executed as {@link DoFn splittable DoFns}.\n+   */\n+  public static void validateNoPrimitiveReads(Pipeline pipeline) {\n+    pipeline.traverseTopologically(new ValidateNoPrimitiveReads());\n+  }\n+\n+  /**\n+   * A {@link org.apache.beam.sdk.Pipeline.PipelineVisitor} that ensures that the pipeline does not\n+   * contain any primitive reads.", "originalCommit": "e62a7365c91d8158af19a6a92a250a60c7b0dc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMDczMA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r469410730", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-08-12T17:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2Mzg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "b3d52f16690ad8b42dd188f4f081da81e04a07f4", "chunk": "diff --git a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java\nindex fa2f28df02..acece8859e 100644\n--- a/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java\n+++ b/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java\n\n@@ -638,10 +639,17 @@ public class SplittableParDo<InputT, OutputT, RestrictionT, WatermarkEstimatorSt\n \n   /**\n    * Throws an {@link IllegalArgumentException} if the pipeline contains any primitive read\n-   * transforms that have not been expanded to be executed as {@link DoFn splittable DoFns}.\n+   * transforms that have not been expanded to be executed as {@link DoFn splittable DoFns} as long\n+   * as the experiment {@code use_deprecated_read} is not specified.\n    */\n   public static void validateNoPrimitiveReads(Pipeline pipeline) {\n-    pipeline.traverseTopologically(new ValidateNoPrimitiveReads());\n+    // TODO(BEAM-10670): Remove the deprecated Read and make the splittable DoFn the only option.\n+    if (!(ExperimentalOptions.hasExperiment(\n+            pipeline.getOptions(), \"beam_fn_api_use_deprecated_read\")\n+        || ExperimentalOptions.hasExperiment(pipeline.getOptions(), \"use_deprecated_read\"))) {\n+\n+      pipeline.traverseTopologically(new ValidateNoPrimitiveReads());\n+    }\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjM1OA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468866358", "bodyText": "Is it possible to make beam_fn_api_use_deprecated_read and use_deprecated_read into one use_deprecated_read since they seem to the same.", "author": "boyuanzz", "createdAt": "2020-08-11T21:09:31Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java", "diffHunk": "@@ -179,6 +180,11 @@ public DirectPipelineResult run(Pipeline pipeline) {\n \n       DisplayDataValidator.validatePipeline(pipeline);\n       DisplayDataValidator.validateOptions(options);\n+      // TODO(BEAM-10670): Remove the deprecated Read and make the splittable DoFn the only option.\n+      if (!(ExperimentalOptions.hasExperiment(options, \"beam_fn_api_use_deprecated_read\")", "originalCommit": "e62a7365c91d8158af19a6a92a250a60c7b0dc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMTUxNA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r469411514", "bodyText": "I wanted to use one that wasn't coupled to beam_fn_api so that users of non portable pipelines wouldn't be confused. I also don't want to impact existing users until we start removing the experiment so I needed to support both.", "author": "lukecwik", "createdAt": "2020-08-12T17:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b3d52f16690ad8b42dd188f4f081da81e04a07f4", "chunk": "diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java\nindex fc9f592f4e..d9805883b5 100644\n--- a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java\n+++ b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java\n\n@@ -180,11 +179,7 @@ public class DirectRunner extends PipelineRunner<DirectPipelineResult> {\n \n       DisplayDataValidator.validatePipeline(pipeline);\n       DisplayDataValidator.validateOptions(options);\n-      // TODO(BEAM-10670): Remove the deprecated Read and make the splittable DoFn the only option.\n-      if (!(ExperimentalOptions.hasExperiment(options, \"beam_fn_api_use_deprecated_read\")\n-          || ExperimentalOptions.hasExperiment(options, \"use_deprecated_read\"))) {\n-        SplittableParDo.validateNoPrimitiveReads(pipeline);\n-      }\n+      SplittableParDo.validateNoPrimitiveReads(pipeline);\n \n       ExecutorService metricsPool =\n           Executors.newCachedThreadPool(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MzY3MA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468873670", "bodyText": "Can we add one block to test using use_deprecated_read  ?", "author": "boyuanzz", "createdAt": "2020-08-11T21:24:58Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java", "diffHunk": "@@ -167,4 +180,55 @@ public void testBoundednessForUnboundedFn() {\n                 \"unbounded to unbounded\", makeUnboundedCollection(pipeline), unboundedFn)\n             .isBounded());\n   }\n+\n+  private static class FakeBoundedSource extends BoundedSource<String> {\n+    @Override\n+    public List<? extends BoundedSource<String>> split(\n+        long desiredBundleSizeBytes, PipelineOptions options) throws Exception {\n+      return Collections.singletonList(this);\n+    }\n+\n+    @Override\n+    public long getEstimatedSizeBytes(PipelineOptions options) throws Exception {\n+      return 0;\n+    }\n+\n+    @Override\n+    public BoundedReader<String> createReader(PipelineOptions options) throws IOException {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Coder<String> getOutputCoder() {\n+      return StringUtf8Coder.of();\n+    }\n+  }\n+\n+  @Test\n+  public void testValidateThatThereAreNoPrimitiveReads() {", "originalCommit": "e62a7365c91d8158af19a6a92a250a60c7b0dc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNTExMA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r469415110", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-08-12T17:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MzY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "b3d52f16690ad8b42dd188f4f081da81e04a07f4", "chunk": "diff --git a/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java b/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java\nindex 01ab11bc7f..65715ac8cc 100644\n--- a/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java\n+++ b/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java\n\n@@ -205,20 +205,37 @@ public class SplittableParDoTest {\n   }\n \n   @Test\n-  public void testValidateThatThereAreNoPrimitiveReads() {\n-    PipelineOptions noSdfOptions = PipelineOptionsFactory.create();\n-    noSdfOptions.setRunner(CrashingRunner.class);\n+  public void testValidateNoPrimitiveReadsIsSkippedWhenUsingDeprecatedRead() {\n+    PipelineOptions deprecatedReadOptions = PipelineOptionsFactory.create();\n+    deprecatedReadOptions.setRunner(CrashingRunner.class);\n+    ExperimentalOptions.addExperiment(\n+        deprecatedReadOptions.as(ExperimentalOptions.class), \"use_deprecated_read\");\n+\n+    Pipeline deprecatedReadAllowed = Pipeline.create(deprecatedReadOptions);\n+    deprecatedReadAllowed.apply(Read.from(new FakeBoundedSource()));\n+    deprecatedReadAllowed.apply(\n+        Read.from(new BoundedToUnboundedSourceAdapter<>(new FakeBoundedSource())));\n+    // We expect that the experiment will skip validation.\n+    SplittableParDo.validateNoPrimitiveReads(deprecatedReadAllowed);\n+  }\n+\n+  @Test\n+  public void testValidateNoPrimitiveReadsWhenThereAreNone() {\n     PipelineOptions sdfOptions = PipelineOptionsFactory.create();\n     sdfOptions.setRunner(CrashingRunner.class);\n     ExperimentalOptions.addExperiment(sdfOptions.as(ExperimentalOptions.class), \"beam_fn_api\");\n-\n     Pipeline sdf = Pipeline.create(sdfOptions);\n     sdf.apply(Read.from(new FakeBoundedSource()));\n     sdf.apply(Read.from(new BoundedToUnboundedSourceAdapter<>(new FakeBoundedSource())));\n     // We expect that the experiment will have caused the transform to use SDF wrappers during\n     // execution.\n     SplittableParDo.validateNoPrimitiveReads(sdf);\n+  }\n \n+  @Test\n+  public void testValidateNoPrimitiveReadsFindsPrimitiveReads() {\n+    PipelineOptions noSdfOptions = PipelineOptionsFactory.create();\n+    noSdfOptions.setRunner(CrashingRunner.class);\n     Pipeline boundedRead = Pipeline.create(noSdfOptions);\n     boundedRead.apply(Read.from(new FakeBoundedSource()));\n     assertThrows(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NDgwOQ==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468874809", "bodyText": "Is it because we have checkDone now?", "author": "boyuanzz", "createdAt": "2020-08-11T21:27:22Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -211,10 +211,6 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n     KV<RestrictionT, KV<Instant, WatermarkEstimatorStateT>> residual =\n         processContext.getTakenCheckpoint();\n     if (cont.shouldResume()) {\n-      checkState(", "originalCommit": "e62a7365c91d8158af19a6a92a250a60c7b0dc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMzAzMw==", "url": "https://github.com/apache/beam/pull/12519#discussion_r469433033", "bodyText": "I added this check back and altered how we were passing forward the self-checkpoing signal from the UnboundedSource through the SDF wrapper instead.\nThe check is valid.", "author": "lukecwik", "createdAt": "2020-08-12T17:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NDgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b3d52f16690ad8b42dd188f4f081da81e04a07f4", "chunk": "diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\nindex b08f021489..c8822de780 100644\n--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\n+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\n\n@@ -211,6 +211,10 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<\n     KV<RestrictionT, KV<Instant, WatermarkEstimatorStateT>> residual =\n         processContext.getTakenCheckpoint();\n     if (cont.shouldResume()) {\n+      checkState(\n+          !processContext.hasClaimFailed,\n+          \"After tryClaim() returned false, @ProcessElement must return stop(), \"\n+              + \"but returned resume()\");\n       if (residual == null) {\n         // No checkpoint had been taken by the runner while the ProcessElement call ran, however\n         // the call says that not the whole restriction has been processed. So we need to take\n"}}, {"oid": "b3d52f16690ad8b42dd188f4f081da81e04a07f4", "url": "https://github.com/apache/beam/commit/b3d52f16690ad8b42dd188f4f081da81e04a07f4", "message": "[BEAM-10670] Make Read execute as a splittable DoFn by default for the Java DirectRunner.", "committedDate": "2020-08-14T20:52:15Z", "type": "forcePushed"}, {"oid": "2e7c4ca207074ee98568be9469cadd141ad9cc6d", "url": "https://github.com/apache/beam/commit/2e7c4ca207074ee98568be9469cadd141ad9cc6d", "message": "[BEAM-10670] Make Read execute as a splittable DoFn by default for the Java DirectRunner.", "committedDate": "2020-08-14T20:55:16Z", "type": "commit"}, {"oid": "2e7c4ca207074ee98568be9469cadd141ad9cc6d", "url": "https://github.com/apache/beam/commit/2e7c4ca207074ee98568be9469cadd141ad9cc6d", "message": "[BEAM-10670] Make Read execute as a splittable DoFn by default for the Java DirectRunner.", "committedDate": "2020-08-14T20:55:16Z", "type": "forcePushed"}]}