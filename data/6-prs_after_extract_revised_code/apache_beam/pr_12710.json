{"pr_number": 12710, "pr_title": "[BEAM-10303] Refactor split logic to reuse common logic.", "pr_createdAt": "2020-08-27T23:37:34Z", "pr_url": "https://github.com/apache/beam/pull/12710", "timeline": [{"oid": "297c179954c5042ae9c5d12f82361a10f8338545", "url": "https://github.com/apache/beam/commit/297c179954c5042ae9c5d12f82361a10f8338545", "message": "Refactor split logic to reuse common logic.", "committedDate": "2020-09-01T02:02:27Z", "type": "forcePushed"}, {"oid": "b6c85d1dc017a86690d927c463438dba5de08906", "url": "https://github.com/apache/beam/commit/b6c85d1dc017a86690d927c463438dba5de08906", "message": "Refactor split logic to reuse common logic.", "committedDate": "2020-09-01T02:04:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NTYzNQ==", "url": "https://github.com/apache/beam/pull/12710#discussion_r481585635", "bodyText": "it seems that the whole if-else branch could be simplified to just\nwindowedSplitResult =\n              computeWindowSplitResult(\n                  currentElement,\n                  currentRestriction,\n                  currentWindow,\n                  windows,\n                  currentWatermarkEstimatorState,\n                  (elementSplit == null && downstreamSplitResult == null) ? currentWindowIndex : newWindowStopIndex,\n                  newWindowStopIndex,\n                  stopWindowIndex,\n                  elementSplit,\n                  watermarkAndState);\n\nor maybe I missed something.", "author": "y1chi", "createdAt": "2020-09-02T02:59:49Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1514,6 +1409,19 @@ public Object restriction() {\n                   stopWindowIndex,\n                   elementSplit,\n                   watermarkAndState);\n+        } else if (downstreamSplitResult != null) {", "originalCommit": "b6c85d1dc017a86690d927c463438dba5de08906", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI4OTA5NQ==", "url": "https://github.com/apache/beam/pull/12710#discussion_r482289095", "bodyText": "Yeah you are right. Thanks!", "author": "boyuanzz", "createdAt": "2020-09-02T18:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "chunk": "diff --git a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\nindex ade3f14c9f..f77d8d6a65 100644\n--- a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\n+++ b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\n\n@@ -1396,46 +1394,22 @@ public class FnApiDoFnRunner<InputT, RestrictionT, PositionT, WatermarkEstimator\n           downstreamSplitResult = splitDelegate.trySplit(scaledFractionOfRemainder);\n         }\n         newWindowStopIndex = currentWindowIndex + 1;\n-        if (elementSplit != null) {\n-          windowedSplitResult =\n-              computeWindowSplitResult(\n-                  currentElement,\n-                  currentRestriction,\n-                  currentWindow,\n-                  windows,\n-                  currentWatermarkEstimatorState,\n-                  currentWindowIndex,\n-                  newWindowStopIndex,\n-                  stopWindowIndex,\n-                  elementSplit,\n-                  watermarkAndState);\n-        } else if (downstreamSplitResult != null) {\n-          windowedSplitResult =\n-              computeWindowSplitResult(\n-                  currentElement,\n-                  currentRestriction,\n-                  currentWindow,\n-                  windows,\n-                  currentWatermarkEstimatorState,\n-                  currentWindowIndex,\n-                  newWindowStopIndex,\n-                  stopWindowIndex,\n-                  null,\n-                  null);\n-        } else {\n-          windowedSplitResult =\n-              computeWindowSplitResult(\n-                  currentElement,\n-                  currentRestriction,\n-                  currentWindow,\n-                  windows,\n-                  currentWatermarkEstimatorState,\n-                  newWindowStopIndex,\n-                  newWindowStopIndex,\n-                  stopWindowIndex,\n-                  null,\n-                  watermarkAndState);\n-        }\n+        int toIndex =\n+            (elementSplit == null && downstreamSplitResult == null)\n+                ? newWindowStopIndex\n+                : currentWindowIndex;\n+        windowedSplitResult =\n+            computeWindowSplitResult(\n+                currentElement,\n+                currentRestriction,\n+                currentWindow,\n+                windows,\n+                currentWatermarkEstimatorState,\n+                toIndex,\n+                newWindowStopIndex,\n+                stopWindowIndex,\n+                elementSplit,\n+                watermarkAndState);\n       }\n     } else {\n       // We are on the last window then compute the element split with given fraction.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU5NDI1Mw==", "url": "https://github.com/apache/beam/pull/12710#discussion_r481594253", "bodyText": "can both windowedSplitResult and downstreamElementSplit be null? if not should the check expressed with xor ^", "author": "y1chi", "createdAt": "2020-09-02T03:13:17Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1546,50 +1459,32 @@ public Object restriction() {\n               currentWindowIndex,\n               stopWindowIndex,\n               stopWindowIndex,\n-              splitResult,\n+              elementSplitResult,\n               watermarkAndState);\n     }\n-    return KV.of(windowedSplitResult, newWindowStopIndex);\n+    return SplitResultsWithStopIndex.of(\n+        windowedSplitResult, downstreamSplitResult, newWindowStopIndex);\n   }\n \n-  private HandlesSplits.SplitResult trySplitForElementAndRestriction(\n-      double fractionOfRemainder, Duration resumeDelay) {\n-    KV<Instant, WatermarkEstimatorStateT> watermarkAndState;\n-    WindowedSplitResult windowedSplitResult = null;\n-    synchronized (splitLock) {\n-      // There is nothing to split if we are between element and restriction processing calls.\n-      if (currentTracker == null) {\n-        return null;\n-      }\n-      // Make sure to get the output watermark before we split to ensure that the lower bound\n-      // applies to the residual.\n-      watermarkAndState = currentWatermarkEstimator.getWatermarkAndState();\n-      KV<WindowedSplitResult, Integer> splitResult =\n-          trySplitForProcess(\n-              currentElement,\n-              currentRestriction,\n-              currentWindow,\n-              currentWindows,\n-              currentWatermarkEstimatorState,\n-              fractionOfRemainder,\n-              currentTracker,\n-              watermarkAndState,\n-              windowCurrentIndex,\n-              windowStopIndex);\n-      if (splitResult == null) {\n-        return null;\n-      }\n-      windowStopIndex = splitResult.getValue();\n-      windowedSplitResult =\n-          calculateRestrictionSize(\n-              splitResult.getKey(),\n-              PTransformTranslation.SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN\n-                  + \"/GetSize\");\n-    }\n-\n+  @VisibleForTesting\n+  static <WatermarkEstimatorStateT> HandlesSplits.SplitResult constructSplitResult(\n+      WindowedSplitResult windowedSplitResult,\n+      HandlesSplits.SplitResult downstreamElementSplit,\n+      Coder fullInputCoder,\n+      Instant initialWatermark,\n+      KV<Instant, WatermarkEstimatorStateT> watermarkAndState,\n+      String pTransformId,\n+      String mainInputId,\n+      Collection<String> outputIds,\n+      Duration resumeDelay) {\n+    // The element split cannot from both windowedSplitResult and downstreamElementSplit.\n+    checkArgument(", "originalCommit": "b6c85d1dc017a86690d927c463438dba5de08906", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NzM2Mg==", "url": "https://github.com/apache/beam/pull/12710#discussion_r482267362", "bodyText": "Yeah both windowedSplitResult.getResidualSplitRoot and downstreamElementSplit can be null. The only illegal state here is both of them are not null.", "author": "boyuanzz", "createdAt": "2020-09-02T18:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU5NDI1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjAxMA==", "url": "https://github.com/apache/beam/pull/12710#discussion_r481606010", "bodyText": "(currentTracker == null) ^ (splitDelegate == null) ?", "author": "y1chi", "createdAt": "2020-09-02T03:28:51Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -1444,28 +1317,44 @@ public Object restriction() {\n   }\n \n   @VisibleForTesting\n-  static <WatermarkEstimatorStateT> KV<WindowedSplitResult, Integer> trySplitForProcess(\n+  static <WatermarkEstimatorStateT> SplitResultsWithStopIndex computeSplitForProcessOrTruncate(\n       WindowedValue currentElement,\n       Object currentRestriction,\n       BoundedWindow currentWindow,\n       List<BoundedWindow> windows,\n       WatermarkEstimatorStateT currentWatermarkEstimatorState,\n       double fractionOfRemainder,\n       RestrictionTracker currentTracker,\n+      HandlesSplits splitDelegate,\n       KV<Instant, WatermarkEstimatorStateT> watermarkAndState,\n       int currentWindowIndex,\n       int stopWindowIndex) {\n+    // We should only have currentTracker or splitDelegate.\n+    checkArgument(", "originalCommit": "b6c85d1dc017a86690d927c463438dba5de08906", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3OTEzNw==", "url": "https://github.com/apache/beam/pull/12710#discussion_r482279137", "bodyText": "That's a good idea. Thanks!", "author": "boyuanzz", "createdAt": "2020-09-02T18:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwNjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "chunk": "diff --git a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\nindex ade3f14c9f..f77d8d6a65 100644\n--- a/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\n+++ b/sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java\n\n@@ -1330,9 +1330,7 @@ public class FnApiDoFnRunner<InputT, RestrictionT, PositionT, WatermarkEstimator\n       int currentWindowIndex,\n       int stopWindowIndex) {\n     // We should only have currentTracker or splitDelegate.\n-    checkArgument(\n-        (currentTracker != null && splitDelegate == null)\n-            || (currentTracker == null && splitDelegate != null));\n+    checkArgument((currentTracker != null) ^ (splitDelegate != null));\n     // When we have currentTracker, the watermarkAndState should not be null.\n     if (currentTracker != null) {\n       checkNotNull(watermarkAndState);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYxMTQxOQ==", "url": "https://github.com/apache/beam/pull/12710#discussion_r481611419", "bodyText": "I'm curious why we are not throwing another exception with reason instead?", "author": "y1chi", "createdAt": "2020-09-02T03:34:33Z", "path": "sdks/java/harness/src/test/java/org/apache/beam/fn/harness/FnApiDoFnRunnerTest.java", "diffHunk": "@@ -3858,156 +3924,225 @@ public void testScaleProgress() throws Exception {\n       assertEquals(8, scaledResult.getWorkRemaining(), 0.0);\n     }\n \n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithNullTrackerAndSplitDelegate()\n+        throws Exception {\n+      expected.expect(IllegalArgumentException.class);\n+      FnApiDoFnRunner.computeSplitForProcessOrTruncate(\n+          currentElement,\n+          currentRestriction,\n+          window1,\n+          ImmutableList.copyOf(currentElement.getWindows()),\n+          currentWatermarkEstimatorState,\n+          0.0,\n+          null,\n+          null,\n+          null,\n+          0,\n+          3);\n+    }\n+\n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithNotNullTrackerAndDelegate()\n+        throws Exception {\n+      expected.expect(IllegalArgumentException.class);\n+      FnApiDoFnRunner.computeSplitForProcessOrTruncate(\n+          currentElement,\n+          currentRestriction,\n+          window1,\n+          ImmutableList.copyOf(currentElement.getWindows()),\n+          currentWatermarkEstimatorState,\n+          0.0,\n+          new OffsetRangeTracker(currentRestriction),\n+          createSplitDelegate(0.3, 0.0, null),\n+          null,\n+          0,\n+          3);\n+    }\n+\n+    @Test\n+    public void testComputeSplitForProcessOrTruncateWithInvalidWatermarkAndState()\n+        throws Exception {\n+      expected.expect(NullPointerException.class);", "originalCommit": "b6c85d1dc017a86690d927c463438dba5de08906", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MDkzMw==", "url": "https://github.com/apache/beam/pull/12710#discussion_r482270933", "bodyText": "Because I use checkNotNull in the function body, please refer to FnApiDoFnRunner L1338.", "author": "boyuanzz", "createdAt": "2020-09-02T18:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYxMTQxOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "url": "https://github.com/apache/beam/commit/02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "message": "Refactor split logic to reuse common logic.", "committedDate": "2020-09-02T18:55:51Z", "type": "commit"}, {"oid": "02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "url": "https://github.com/apache/beam/commit/02a6da9ab3d59e6cba2530153e8ca5e7598d1174", "message": "Refactor split logic to reuse common logic.", "committedDate": "2020-09-02T18:55:51Z", "type": "forcePushed"}]}