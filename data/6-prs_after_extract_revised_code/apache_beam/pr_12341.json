{"pr_number": 12341, "pr_title": "[BEAM-10557] Implemented SchemaIOProvider for DataStoreV1, Refactored tests", "pr_createdAt": "2020-07-22T20:48:16Z", "pr_url": "https://github.com/apache/beam/pull/12341", "timeline": [{"oid": "6c7e2625d045b8c8289452e3801102f4fe465266", "url": "https://github.com/apache/beam/commit/6c7e2625d045b8c8289452e3801102f4fe465266", "message": "Implemented SchemaIOProvider for DataStoreV1, refactored tests", "committedDate": "2020-07-22T20:38:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDE0Nw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461240147", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@code PTransform} to perform a conversion of {@code PCollection<Row>} to {@code\n          \n          \n            \n             * PCollection<Entity>}.\n          \n          \n            \n             * A {@code PTransform} to perform a conversion of {@link Row} to {@link Entity}.", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:07:17Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/RowToEntity.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeKey;\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@code PTransform} to perform a conversion of {@code PCollection<Row>} to {@code\n+ * PCollection<Entity>}.", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MDI2OQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466460269", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-06T14:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDE0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/RowToEntity.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/RowToEntity.java\nindex 36511d7987..02ca67ce43 100644\n--- a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/RowToEntity.java\n+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/RowToEntity.java\n\n@@ -40,10 +40,7 @@ import org.joda.time.Instant;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/**\n- * A {@code PTransform} to perform a conversion of {@code PCollection<Row>} to {@code\n- * PCollection<Entity>}.\n- */\n+/** A {@code PTransform} to perform a conversion of {@link Row} to {@link Entity}. */\n public class RowToEntity extends PTransform<PCollection<Row>, PCollection<Entity>> {\n   private final Supplier<String> keySupplier;\n   private final String kind;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDQ5NQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461240495", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@code PTransform} to perform a conversion of {@code PCollection<Entity>} to {@code\n          \n          \n            \n             * PCollection<Row>}.\n          \n          \n            \n             * A {@code PTransform} to perform a conversion of {@link Entity} to {@link Row}.", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:08:30Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@code PTransform} to perform a conversion of {@code PCollection<Entity>} to {@code\n+ * PCollection<Row>}.", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MDA0NA==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466460044", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-06T14:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java\nindex a7a3396a3e..73413b2b1b 100644\n--- a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java\n+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java\n\n@@ -35,10 +35,7 @@ import org.joda.time.Instant;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/**\n- * A {@code PTransform} to perform a conversion of {@code PCollection<Entity>} to {@code\n- * PCollection<Row>}.\n- */\n+/** A {@code PTransform} to perform a conversion of {@link Entity} to {@link Row}. */\n public class EntityToRow extends PTransform<PCollection<Entity>, PCollection<Row>> {\n   private final Schema schema;\n   private final String keyField;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MTQ3Mw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461241473", "bodyText": "Will this work if we just use STRING? (Rather than re-creating CalciteUtils.CHAR here)", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:11:25Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java", "diffHunk": "@@ -74,7 +73,7 @@\n           .addNullableField(\"rowArray\", array(FieldType.row(NESTED_ROW_SCHEMA)))\n           .addNullableField(\"double\", DOUBLE)\n           .addNullableField(\"bytes\", BYTES)\n-          .addNullableField(\"string\", CalciteUtils.CHAR)\n+          .addNullableField(\"string\", CHAR)", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1OTU5OQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466459599", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-06T14:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java\nindex ac96c0e1f9..50021fd1f3 100644\n--- a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java\n+++ b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java\n\n@@ -73,7 +72,7 @@ public class EntityToRowRowToEntityTest {\n           .addNullableField(\"rowArray\", array(FieldType.row(NESTED_ROW_SCHEMA)))\n           .addNullableField(\"double\", DOUBLE)\n           .addNullableField(\"bytes\", BYTES)\n-          .addNullableField(\"string\", CHAR)\n+          .addNullableField(\"string\", STRING)\n           .addNullableField(\"nullable\", INT64)\n           .build();\n   private static final Entity NESTED_ENTITY =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0OTI1OQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461249259", "bodyText": "Should this also have an implementation for getTableStatistics? It looks like DataStoreV1Table had a non-standard implementation:\n  @Override\t\n  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\t\n    long count =\t\n        DatastoreIO.v1().read().withProjectId(projectId).getNumEntities(options, kind, null);\t\n\n    if (count < 0) {\t\n      return BeamTableStatistics.BOUNDED_UNKNOWN;\t\n    }\t\n\n    return BeamTableStatistics.createBoundedTableStatistics((double) count);\t\n  }", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:37:34Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datastore/DataStoreV1TableProvider.java", "diffHunk": "@@ -39,15 +43,14 @@\n  * }</pre>\n  */\n @AutoService(TableProvider.class)\n-public class DataStoreV1TableProvider extends InMemoryMetaTableProvider {\n-\n+public class DataStoreV1TableProvider extends SchemaIOTableProviderWrapper {\n   @Override\n-  public String getTableType() {\n-    return \"datastoreV1\";\n+  public SchemaIOProvider getSchemaIOProvider() {\n+    return new DataStoreV1SchemaIOProvider();\n   }\n \n   @Override\n-  public BeamSqlTable buildBeamSqlTable(Table table) {\n-    return new DataStoreV1Table(table);\n+  public String getTableType() {\n+    return \"datastoreV1\";", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MTI1Mw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466461253", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-06T14:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0OTI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datastore/DataStoreV1TableProvider.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datastore/DataStoreV1TableProvider.java\nindex 648128c8d2..b579e06f36 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datastore/DataStoreV1TableProvider.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datastore/DataStoreV1TableProvider.java\n\n@@ -53,4 +57,20 @@ public class DataStoreV1TableProvider extends SchemaIOTableProviderWrapper {\n   public String getTableType() {\n     return \"datastoreV1\";\n   }\n+\n+  @Override\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    long count =\n+        DatastoreIO.v1()\n+            .read()\n+            .withProjectId(dataStoreV1SchemaIO.getProjectId())\n+            .getNumEntities(options, dataStoreV1SchemaIO.getKind(), null);\n+\n+    if (count < 0) {\n+      return BeamTableStatistics.BOUNDED_UNKNOWN;\n+    }\n+\n+    return BeamTableStatistics.createBoundedTableStatistics((double) count);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MTI2Mg==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461251262", "bodyText": "I think you could just re-use provider here and in the other tests. If you're worried about re-using the same instance in all the tests you could consider initializing provider in an @Before method instead of initializing statically so that each test will get a fresh instance.", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:44:49Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MTkxNw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466461917", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-06T14:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MTI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\nindex c730c3e326..354a5fb53a 100644\n--- a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\n+++ b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\n\n@@ -44,9 +44,13 @@ public class DataStoreV1SchemaIOProviderTest {\n   @Test\n   public void testBuildBeamSqlTable() {\n     final String location = \"projectId/batch_kind\";\n-    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n-    SchemaIO schemaIO =\n-        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+    Row configuration =\n+        Row.withSchema(provider.configurationSchema())\n+            .withFieldValue(KEY_FIELD_PROPERTY, null)\n+            .build();\n+    SchemaIO schemaIO = provider.from(location, configuration, generateDataSchema());\n \n     assertNotNull(schemaIO);\n     assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MjIwMA==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461252200", "bodyText": "I think it would be better to get rid of this function and call provider.configurationSchema() instead.", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:48:03Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(DEFAULT_KEY_FIELD, dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty() {\n+    final String location = \"projectId/batch_kind\";\n+\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"field_name\").build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(\"field_name\", dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty_nullValue_throwsException() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"\").build();\n+\n+    assertThrows(\n+        IllegalArgumentException.class,\n+        () ->\n+            (new DataStoreV1SchemaIOProvider())\n+                .from(location, configuration, generateDataSchema()));\n+  }\n+\n+  private static Schema generateDataSchema() {\n+    return Schema.builder()\n+        .addNullableField(\"id\", Schema.FieldType.INT32)\n+        .addNullableField(\"name\", Schema.FieldType.STRING)\n+        .build();\n+  }\n+\n+  private Schema generateRowSchema() {\n+    return Schema.builder().addNullableField(KEY_FIELD_PROPERTY, Schema.FieldType.STRING).build();\n+  }", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MTc0Nw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466461747", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-06T14:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MjIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\nindex c730c3e326..354a5fb53a 100644\n--- a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\n+++ b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\n\n@@ -44,9 +44,13 @@ public class DataStoreV1SchemaIOProviderTest {\n   @Test\n   public void testBuildBeamSqlTable() {\n     final String location = \"projectId/batch_kind\";\n-    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n-    SchemaIO schemaIO =\n-        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+    Row configuration =\n+        Row.withSchema(provider.configurationSchema())\n+            .withFieldValue(KEY_FIELD_PROPERTY, null)\n+            .build();\n+    SchemaIO schemaIO = provider.from(location, configuration, generateDataSchema());\n \n     assertNotNull(schemaIO);\n     assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MzI0NA==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461253244", "bodyText": "I think we're now preferring to use withFieldValue rather than addValue when constructing Row instances now, e.g.:\nRow.withSchema(provider.configurationSchema()).withFieldValue(\"keyField\", \"field_name\")\nSee the examples in Row.java: \n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java\n    \n    \n        Lines 64 to 74\n      in\n      956e4eb\n    \n    \n    \n    \n\n        \n          \n            * <p>There are several ways to build a new Row object. To build a row from scratch using a schema \n        \n\n        \n          \n            * object, {@link Row#withSchema} can be used. Schema fields can be specified by name, and nested \n        \n\n        \n          \n            * fields can be specified using the field selection syntax. For example: \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * <pre>{@code \n        \n\n        \n          \n            * Row row = Row.withSchema(schema) \n        \n\n        \n          \n            *              .withFieldValue(\"userId\", \"user1) \n        \n\n        \n          \n            *              .withFieldValue(\"location.city\", \"seattle\") \n        \n\n        \n          \n            *              .withFieldValue(\"location.state\", \"wa\") \n        \n\n        \n          \n            *              .build(); \n        \n\n        \n          \n            * }</pre>", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:51:42Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(DEFAULT_KEY_FIELD, dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty() {\n+    final String location = \"projectId/batch_kind\";\n+\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"field_name\").build();", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MjE0Ng==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466462146", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-06T14:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MzI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\nindex c730c3e326..354a5fb53a 100644\n--- a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\n+++ b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java\n\n@@ -44,9 +44,13 @@ public class DataStoreV1SchemaIOProviderTest {\n   @Test\n   public void testBuildBeamSqlTable() {\n     final String location = \"projectId/batch_kind\";\n-    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n-    SchemaIO schemaIO =\n-        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+    Row configuration =\n+        Row.withSchema(provider.configurationSchema())\n+            .withFieldValue(KEY_FIELD_PROPERTY, null)\n+            .build();\n+    SchemaIO schemaIO = provider.from(location, configuration, generateDataSchema());\n \n     assertNotNull(schemaIO);\n     assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n"}}, {"oid": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "url": "https://github.com/apache/beam/commit/e89f9eaab9cd061153f2649fe48c390d3bb24267", "message": "Improved DataStoreV1 tests", "committedDate": "2020-08-06T14:26:16Z", "type": "forcePushed"}, {"oid": "890b0b062b984efb2bbd687596d568b229d79d2d", "url": "https://github.com/apache/beam/commit/890b0b062b984efb2bbd687596d568b229d79d2d", "message": "Improved DataStoreV1 tests", "committedDate": "2020-08-06T14:34:26Z", "type": "forcePushed"}, {"oid": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "url": "https://github.com/apache/beam/commit/0a5b3789a866f591904fa3ed11c21bcc11fd0224", "message": "Improved DataStoreV1 tests", "committedDate": "2020-08-07T14:34:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0MzcwNQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r469443705", "bodyText": "Let's describe the configuration parameters here. Something like this (spotless probably has an opinion on how this should be formatted):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Returns the expected schema of the configuration object. Note this is distinct from the schema\n          \n          \n            \n               * of the data source itself.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * Returns the expected schema of the configuration object. Note this is distinct from the schema\n          \n          \n            \n               * of the data source itself.\n          \n          \n            \n               * \n          \n          \n            \n               * <p>Configuration Parameters:\n          \n          \n            \n               * <ul>\n          \n          \n            \n               *   <li>STRING keyField: The name of the Beam schema field to map the DataStore entity key. Defaults to {@code __key__} if not set or null.\n          \n          \n            \n               * </ul>\n          \n          \n            \n               */", "author": "TheNeuralBit", "createdAt": "2020-08-12T18:03:15Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.datastore.v1.Query;\n+import java.io.Serializable;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.InvalidConfigurationException;\n+import org.apache.beam.sdk.schemas.io.InvalidLocationException;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing payloads with {@link\n+ * DatastoreIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class DataStoreV1SchemaIOProvider implements SchemaIOProvider {\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  private static final Pattern locationPattern = Pattern.compile(\"(?<projectId>.+)/(?<kind>.+)\");\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"datastoreV1\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */", "originalCommit": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MDk0NQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r470660945", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-14T14:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0MzcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProvider.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProvider.java\nindex a49c7182f5..216ccf47fc 100644\n--- a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProvider.java\n+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProvider.java\n\n@@ -54,6 +54,13 @@ public class DataStoreV1SchemaIOProvider implements SchemaIOProvider {\n   /**\n    * Returns the expected schema of the configuration object. Note this is distinct from the schema\n    * of the data source itself.\n+   *\n+   * <p>Configuration Parameters:\n+   *\n+   * <ul>\n+   *   <li>STRING keyField: The name of the Beam schema field to map the DataStore entity key.\n+   *       Defaults to {@code __key__} if not set or null.\n+   * </ul>\n    */\n   @Override\n   public Schema configurationSchema() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODMyNg==", "url": "https://github.com/apache/beam/pull/12341#discussion_r469458326", "bodyText": "I don't think this new method is actually called anywhere. Should it be called from SchemaIOTableWrapper#getTableStatistics?\nIt might also be good to just get rid of the other getTableStatistics and move the default implementation to this one.", "author": "TheNeuralBit", "createdAt": "2020-08-12T18:29:24Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java", "diffHunk": "@@ -80,13 +80,17 @@ public BeamSqlTable buildBeamSqlTable(Table tableDefinition) {\n     }\n   }\n \n-  private BeamTableStatistics getTableStatistics(PipelineOptions options) {\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\n     if (isBounded().equals(PCollection.IsBounded.BOUNDED)) {\n       return BeamTableStatistics.BOUNDED_UNKNOWN;\n     }\n     return BeamTableStatistics.UNBOUNDED_UNKNOWN;\n   }\n \n+  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n+    return getTableStatistics(options);\n+  }\n+", "originalCommit": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3Mzg3Nw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r469973877", "bodyText": "The reason why I added this additional getTableStatistics() function was that DataStoreV1 is the first IO whose getTableStatistics() function relied on the schemaIO data, and this SchemaIOTableWrapper#getTableStatistics function could be overridden in DataStoreV1TableProvider. The other IOs so far have not required the schemaIO. Do you think we should get rid of the other getTableStatistics() function and always require a schemaIO, even when the schemaIO isn't absolutely necessary? Or support both cases?", "author": "sclukas77", "createdAt": "2020-08-13T14:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MzUxOQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r470663519", "bodyText": "I see what you mean now. I got rid of the old getTableStatistics() function and moved the default implementation to this one.", "author": "sclukas77", "createdAt": "2020-08-14T14:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java\nindex 276fc00506..ce8142728a 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java\n\n@@ -80,17 +80,13 @@ public abstract class SchemaIOTableProviderWrapper extends InMemoryMetaTableProv\n     }\n   }\n \n-  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n     if (isBounded().equals(PCollection.IsBounded.BOUNDED)) {\n       return BeamTableStatistics.BOUNDED_UNKNOWN;\n     }\n     return BeamTableStatistics.UNBOUNDED_UNKNOWN;\n   }\n \n-  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n-    return getTableStatistics(options);\n-  }\n-\n   private PCollection.IsBounded isBounded() {\n     return getSchemaIOProvider().isBounded();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDQyOQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r469460429", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            + \"` should of type `VARBINARY`. Please change the type or specify a field to\"\n          \n          \n            \n                            + \"` should of type `BYTES`. Please change the type or specify a field to\"\n          \n      \n    \n    \n  \n\nLet's change this to the Beam schema type name", "author": "TheNeuralBit", "createdAt": "2020-08-12T18:33:07Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@code PTransform} to perform a conversion of {@link Entity} to {@link Row}. */\n+public class EntityToRow extends PTransform<PCollection<Entity>, PCollection<Row>> {\n+  private final Schema schema;\n+  private final String keyField;\n+  private static final Logger LOG = LoggerFactory.getLogger(DataStoreV1SchemaIOProvider.class);\n+\n+  private EntityToRow(Schema schema, String keyField) {\n+    this.schema = schema;\n+    this.keyField = keyField;\n+\n+    if (schema.getFieldNames().contains(keyField)) {\n+      if (!schema.getField(keyField).getType().getTypeName().equals(Schema.TypeName.BYTES)) {\n+        throw new IllegalStateException(\n+            \"Field `\"\n+                + keyField\n+                + \"` should of type `VARBINARY`. Please change the type or specify a field to\"", "originalCommit": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MTE5OA==", "url": "https://github.com/apache/beam/pull/12341#discussion_r470661198", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-14T14:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java\nindex 73413b2b1b..b86323c1c5 100644\n--- a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java\n+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java\n\n@@ -50,7 +50,7 @@ public class EntityToRow extends PTransform<PCollection<Entity>, PCollection<Row\n         throw new IllegalStateException(\n             \"Field `\"\n                 + keyField\n-                + \"` should of type `VARBINARY`. Please change the type or specify a field to\"\n+                + \"` should of type `BYTES`. Please change the type or specify a field to\"\n                 + \" store the KEY value.\");\n       }\n       LOG.info(\"Entity KEY will be stored under `\" + keyField + \"` field.\");\n"}}, {"oid": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "url": "https://github.com/apache/beam/commit/63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "message": "Modified SchemaIOTableProviderWrapper#getTableStatistics", "committedDate": "2020-08-14T14:29:23Z", "type": "commit"}, {"oid": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "url": "https://github.com/apache/beam/commit/63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "message": "Modified SchemaIOTableProviderWrapper#getTableStatistics", "committedDate": "2020-08-14T14:29:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwMzk0Nw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r470903947", "bodyText": "nit: I think this just needs to be protected so that implementors can override\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n          \n          \n            \n              protected BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {", "author": "TheNeuralBit", "createdAt": "2020-08-14T23:29:12Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java", "diffHunk": "@@ -80,7 +80,7 @@ public BeamSqlTable buildBeamSqlTable(Table tableDefinition) {\n     }\n   }\n \n-  private BeamTableStatistics getTableStatistics(PipelineOptions options) {\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {", "originalCommit": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "adf1deabdcb4a68666c6eef67ffb55d3d485a1bb", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java\nindex ce8142728a..e8292fbe62 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java\n\n@@ -80,7 +80,7 @@ public abstract class SchemaIOTableProviderWrapper extends InMemoryMetaTableProv\n     }\n   }\n \n-  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n+  protected BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n     if (isBounded().equals(PCollection.IsBounded.BOUNDED)) {\n       return BeamTableStatistics.BOUNDED_UNKNOWN;\n     }\n"}}, {"oid": "adf1deabdcb4a68666c6eef67ffb55d3d485a1bb", "url": "https://github.com/apache/beam/commit/adf1deabdcb4a68666c6eef67ffb55d3d485a1bb", "message": "Update sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java", "committedDate": "2020-08-14T23:31:21Z", "type": "commit"}]}