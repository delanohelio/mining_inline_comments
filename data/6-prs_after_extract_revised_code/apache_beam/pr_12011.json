{"pr_number": 12011, "pr_title": "[BEAM-9269] Set Spanner commit deadline using GRPC api not interceptor.", "pr_createdAt": "2020-06-15T12:53:52Z", "pr_url": "https://github.com/apache/beam/pull/12011", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MTIxMg==", "url": "https://github.com/apache/beam/pull/12011#discussion_r441171212", "bodyText": "This patch sounds good. But i have a question.  RetrySettings seems to support retry with backoff. The following retry mechanism could be moved to here as well.\nhttps://github.com/apache/beam/blob/master/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java#L1485\nCan that be done? Not as part of this patch. I could send out a PR as well after testing. That would clean up some code in SpannerIO as well", "author": "allenpradeep", "createdAt": "2020-06-16T22:11:48Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -63,23 +65,19 @@ static SpannerAccessor create(SpannerConfig spannerConfig) {\n     ValueProvider<Duration> commitDeadline = spannerConfig.getCommitDeadline();\n     if (commitDeadline != null && commitDeadline.get().getMillis() > 0) {\n \n-      // In Spanner API version 1.21 or above, we can set the deadline / total Timeout on an API\n-      // call using the following code:\n-      //\n-      // UnaryCallSettings.Builder commitSettings =\n-      // builder.getSpannerStubSettingsBuilder().commitSettings();\n-      // RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder()\n-      // commitSettings.setRetrySettings(\n-      //     commitRetrySettings.setTotalTimeout(\n-      //         Duration.ofMillis(getCommitDeadlineMillis().get()))\n-      //     .build());\n-      //\n-      // However, at time of this commit, the Spanner API is at only at v1.6.0, where the only\n-      // method to set a deadline is with GRPC Interceptors, so we have to use that...\n-      SpannerInterceptorProvider interceptorProvider =\n-          SpannerInterceptorProvider.createDefault()\n-              .with(new CommitDeadlineSettingInterceptor(commitDeadline.get()));\n-      builder.setInterceptorProvider(interceptorProvider);\n+      // Set the GRPC deadline on the Commit API call.\n+      UnaryCallSettings.Builder commitSettings =\n+          builder.getSpannerStubSettingsBuilder().commitSettings();\n+      RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder();\n+      commitSettings.setRetrySettings(\n+          commitRetrySettings", "originalCommit": "add706f14ce4d9ab164896b32e8827048a21eeb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExMjQ0NQ==", "url": "https://github.com/apache/beam/pull/12011#discussion_r444112445", "bodyText": "It can be done, but it does it silently in the background. This mechanism allows us to have a  counter for the number of timeouts which are useful for diagnosing slowness...", "author": "nielm", "createdAt": "2020-06-23T10:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MTIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "76c215cacc15ba57e7e7b79ad3a2750444a04140", "chunk": "diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java\nindex 7cb22b5a13..e8abb29dba 100644\n--- a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java\n+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java\n\n@@ -71,10 +70,8 @@ class SpannerAccessor implements AutoCloseable {\n       RetrySettings.Builder commitRetrySettings = commitSettings.getRetrySettings().toBuilder();\n       commitSettings.setRetrySettings(\n           commitRetrySettings\n-              .setTotalTimeout(\n-                  org.threeten.bp.Duration.ofMillis(commitDeadline.get().getMillis()))\n-              .setMaxRpcTimeout(\n-                  org.threeten.bp.Duration.ofMillis(commitDeadline.get().getMillis()))\n+              .setTotalTimeout(org.threeten.bp.Duration.ofMillis(commitDeadline.get().getMillis()))\n+              .setMaxRpcTimeout(org.threeten.bp.Duration.ofMillis(commitDeadline.get().getMillis()))\n               .setInitialRpcTimeout(\n                   org.threeten.bp.Duration.ofMillis(commitDeadline.get().getMillis()))\n               .build());\n"}}, {"oid": "76c215cacc15ba57e7e7b79ad3a2750444a04140", "url": "https://github.com/apache/beam/commit/76c215cacc15ba57e7e7b79ad3a2750444a04140", "message": "Set Spanner commit deadline using GRPC api not interceptor.\n\nSpanner client library 1.20+ allow setting deadlines via the\nSpannerOptions object. Use this instead of an RPC interceptor.", "committedDate": "2020-06-24T17:37:39Z", "type": "forcePushed"}, {"oid": "cc2d9f233dd429330b5640a813bfa5d3f997d39a", "url": "https://github.com/apache/beam/commit/cc2d9f233dd429330b5640a813bfa5d3f997d39a", "message": "Set Spanner commit deadline using GRPC api not interceptor.\n\nSpanner client library 1.20+ allow setting deadlines via the\nSpannerOptions object. Use this instead of an RPC interceptor.", "committedDate": "2020-06-25T09:27:51Z", "type": "commit"}, {"oid": "cc2d9f233dd429330b5640a813bfa5d3f997d39a", "url": "https://github.com/apache/beam/commit/cc2d9f233dd429330b5640a813bfa5d3f997d39a", "message": "Set Spanner commit deadline using GRPC api not interceptor.\n\nSpanner client library 1.20+ allow setting deadlines via the\nSpannerOptions object. Use this instead of an RPC interceptor.", "committedDate": "2020-06-25T09:27:51Z", "type": "forcePushed"}]}