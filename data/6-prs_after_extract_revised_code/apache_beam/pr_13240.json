{"pr_number": 13240, "pr_title": "[BEAM-11146] Add fasterCopy option to Flink runner", "pr_createdAt": "2020-10-31T16:33:12Z", "pr_url": "https://github.com/apache/beam/pull/13240", "timeline": [{"oid": "91cf254b091f1aeb83c1be2b9506bc3b056e518d", "url": "https://github.com/apache/beam/commit/91cf254b091f1aeb83c1be2b9506bc3b056e518d", "message": "[BEAM-11146] Add copyFaster option to Flink runner\n\nThe copyFaster option, removes an unnecessary deep copy in the Flink\nrunner between each operator. This should lead to improved performance\nin all cases.", "committedDate": "2020-10-31T17:33:08Z", "type": "forcePushed"}, {"oid": "52943de2c1e6afbd2d752ccf0549126d42476c00", "url": "https://github.com/apache/beam/commit/52943de2c1e6afbd2d752ccf0549126d42476c00", "message": "[BEAM-11146] Add copyFaster option to Flink runner\n\nThe copyFaster option, removes an unnecessary deep copy in the Flink\nrunner between each operator. This should lead to improved performance\nin all cases.", "committedDate": "2020-10-31T17:40:16Z", "type": "commit"}, {"oid": "52943de2c1e6afbd2d752ccf0549126d42476c00", "url": "https://github.com/apache/beam/commit/52943de2c1e6afbd2d752ccf0549126d42476c00", "message": "[BEAM-11146] Add copyFaster option to Flink runner\n\nThe copyFaster option, removes an unnecessary deep copy in the Flink\nrunner between each operator. This should lead to improved performance\nin all cases.", "committedDate": "2020-10-31T17:40:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NTQyNA==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516185424", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private SerializablePipelineOptions pipelineOptions;\n          \n          \n            \n                private final SerializablePipelineOptions pipelineOptions;", "author": "mxm", "createdAt": "2020-11-02T18:49:20Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -1194,29 +1200,35 @@ public void verifyDeterministic() throws NonDeterministicException {\n     private Map<TupleTag<?>, Integer> tagsToIds;\n     private Map<TupleTag<?>, OutputTag<WindowedValue<?>>> tagsToOutputTags;\n     private Map<TupleTag<?>, Coder<WindowedValue<?>>> tagsToCoders;\n+    private SerializablePipelineOptions pipelineOptions;", "originalCommit": "52943de2c1e6afbd2d752ccf0549126d42476c00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8ff19db299dc3c231939efdce140bb33185e121", "chunk": "diff --git a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\nindex 091477765a..0ccb969c0a 100644\n--- a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n+++ b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n\n@@ -1200,7 +1200,7 @@ public class DoFnOperator<InputT, OutputT>\n     private Map<TupleTag<?>, Integer> tagsToIds;\n     private Map<TupleTag<?>, OutputTag<WindowedValue<?>>> tagsToOutputTags;\n     private Map<TupleTag<?>, Coder<WindowedValue<?>>> tagsToCoders;\n-    private SerializablePipelineOptions pipelineOptions;\n+    private final SerializablePipelineOptions pipelineOptions;\n \n     // There is no side output.\n     @SuppressWarnings(\"unchecked\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE4NjU3MA==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516186570", "bodyText": "Perhaps, create a static factory method for all of these defaults? E.g. FlinkPipelineOptions.default()", "author": "mxm", "createdAt": "2020-11-02T18:51:31Z", "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperatorTest.java", "diffHunk": "@@ -761,7 +797,9 @@ void testSideInputs(boolean keyed) throws Exception {\n               doFnOperator,\n               keySelector,\n               null,\n-              new CoderTypeInformation<>(FlinkKeyUtils.ByteBufferCoder.of()));\n+              new CoderTypeInformation<>(\n+                  FlinkKeyUtils.ByteBufferCoder.of(),\n+                  PipelineOptionsFactory.as(FlinkPipelineOptions.class)));", "originalCommit": "52943de2c1e6afbd2d752ccf0549126d42476c00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8ff19db299dc3c231939efdce140bb33185e121", "chunk": "diff --git a/runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperatorTest.java b/runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperatorTest.java\nindex 59ceeb46ac..9411967f45 100644\n--- a/runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperatorTest.java\n+++ b/runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperatorTest.java\n\n@@ -798,8 +780,7 @@ public class DoFnOperatorTest {\n               keySelector,\n               null,\n               new CoderTypeInformation<>(\n-                  FlinkKeyUtils.ByteBufferCoder.of(),\n-                  PipelineOptionsFactory.as(FlinkPipelineOptions.class)));\n+                  FlinkKeyUtils.ByteBufferCoder.of(), FlinkPipelineOptions.defaults()));\n     }\n \n     testHarness.open();\n"}}, {"oid": "504f4df1e0986414df2b9104b53af931f46c34a6", "url": "https://github.com/apache/beam/commit/504f4df1e0986414df2b9104b53af931f46c34a6", "message": "Merge remote-tracking branch 'upstream/master' into BEAM-11146-faster-copy", "committedDate": "2020-11-02T19:25:28Z", "type": "commit"}, {"oid": "c8ff19db299dc3c231939efdce140bb33185e121", "url": "https://github.com/apache/beam/commit/c8ff19db299dc3c231939efdce140bb33185e121", "message": "Add defaults() function to FlinkPipelineOptions\n\nThis was requested in the pull request, to make things neater.", "committedDate": "2020-11-03T07:27:22Z", "type": "commit"}, {"oid": "c8ff19db299dc3c231939efdce140bb33185e121", "url": "https://github.com/apache/beam/commit/c8ff19db299dc3c231939efdce140bb33185e121", "message": "Add defaults() function to FlinkPipelineOptions\n\nThis was requested in the pull request, to make things neater.", "committedDate": "2020-11-03T07:27:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516513864", "bodyText": "Small suggestion, can we name this zeroCopy, as that is actually what it is.", "author": "je-ik", "createdAt": "2020-11-03T09:07:41Z", "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -49,20 +50,18 @@\n    * org.apache.beam.sdk.io.FileSystems} registration needed for {@link\n    * org.apache.beam.sdk.transforms.Reshuffle} translation.\n    */\n-  @SuppressWarnings(\"unused\")\n-  private final @Nullable SerializablePipelineOptions pipelineOptions;\n+  private final SerializablePipelineOptions pipelineOptions;\n \n-  public CoderTypeSerializer(Coder<T> coder) {\n-    Preconditions.checkNotNull(coder);\n-    this.coder = coder;\n-    this.pipelineOptions = null;\n-  }\n+  private final boolean fasterCopy;", "originalCommit": "c8ff19db299dc3c231939efdce140bb33185e121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4MDQxMQ==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516580411", "bodyText": "I thought about zeroCopy as a name, but for me this is associated with the lower level concept and I thought it might create confusion. The name fasterCopy came from the idea that it is making the copying faster, but I am very much open to other names!", "author": "rHermes", "createdAt": "2020-11-03T10:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4MjM2NA==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516582364", "bodyText": "Okay, what about disableValueClone, I think that fasterCopy is a little misleading as well. Faster than what? And why it was slower before? :) It would be good for the flag to describe direct effect (disable, enable something), not a consequence (being faster).", "author": "je-ik", "createdAt": "2020-11-03T10:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4ODE5Mg==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516588192", "bodyText": "Very much agree with the name being descriptive. How about we go more opinionated, something like disableExcessCopy? There where some back and forth on the mailing list about this point, so I don't want to sneak in my opinion if that is not right. What do you think @mxm ?", "author": "rHermes", "createdAt": "2020-11-03T11:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwNzgyNg==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516607826", "bodyText": "Folks, this is an internal boolean flag which is only used at a single place. If in doubt, one can clearly see what it does. We could add a /** */ Javadoc field comment for it if you will. IMHO the name is really personal preference and I have nothing against fasterCopy as it clearly indicates that the copy() method will return faster. Nothing semantically wrong about that. zeroCopy is not 100% true because we will perform a copy for primitive types but please let's not argue about that. DisableExcessCopy is too opinionated IMHO \ud83d\ude07", "author": "mxm", "createdAt": "2020-11-03T11:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyOTg3Mg==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516629872", "bodyText": "I agree with DisableExcessCopy being too opinionated. My vote is for fasterCopy, but it is not a hill I will die on :P", "author": "rHermes", "createdAt": "2020-11-03T12:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzNjU0OA==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516636548", "bodyText": "To make it clear - although I put my comment to the internal field, I was having in mind mostly the flag in PipelineOptions. These should be aligned.", "author": "je-ik", "createdAt": "2020-11-03T12:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzOTEyNA==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516639124", "bodyText": "Agree that this is not 100% important, but if possible, we should make options passed in PipelineOptions the most self-explanatory as possible, because these options are user-facing.", "author": "je-ik", "createdAt": "2020-11-03T12:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0MTg2Mw==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516641863", "bodyText": "I've been talking about the user facing flag from the beginning, so I understood you.", "author": "rHermes", "createdAt": "2020-11-03T12:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMzg2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNDE1Ng==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516514156", "bodyText": "Maybe rename to copyIfNeeded, as when the flag is on, it doesn't copy anything.", "author": "je-ik", "createdAt": "2020-11-03T09:08:12Z", "path": "runners/flink/1.8/src/main/java/org/apache/beam/runners/flink/translation/types/CoderTypeSerializer.java", "diffHunk": "@@ -82,10 +81,14 @@ public T createInstance() {\n \n   @Override\n   public T copy(T t) {", "originalCommit": "c8ff19db299dc3c231939efdce140bb33185e121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzMTI2Ng==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516531266", "bodyText": "This is a Flink interface method which we can't rename.", "author": "mxm", "createdAt": "2020-11-03T09:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNDE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzE3Mw==", "url": "https://github.com/apache/beam/pull/13240#discussion_r516547173", "bodyText": "Ah, I missed the @Override annotation. Understood.", "author": "je-ik", "createdAt": "2020-11-03T10:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNDE1Ng=="}], "type": "inlineReview", "revised_code": null}]}