{"pr_number": 11792, "pr_title": "[BEAM-10435] Add ValidatesRunner task for local_job_service and Java SDK harness", "pr_createdAt": "2020-05-22T03:54:21Z", "pr_url": "https://github.com/apache/beam/pull/11792", "timeline": [{"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "url": "https://github.com/apache/beam/commit/46252f59cf1b6c032abd26eb4b2890d965cd088f", "message": "Add ability to specify stdout and stderr files for local_job_service", "committedDate": "2020-05-22T03:57:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTYwMA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429029600", "bodyText": "@robertwb @lukecwik first thing I hit putting this together was exceeding message size limit", "author": "kennknowles", "createdAt": "2020-05-22T03:54:55Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/artifact/ArtifactRetrievalService.java", "diffHunk": "@@ -39,7 +39,7 @@\n public class ArtifactRetrievalService\n     extends ArtifactRetrievalServiceGrpc.ArtifactRetrievalServiceImplBase implements FnService {\n \n-  public static final int DEFAULT_BUFFER_SIZE = 4 << 20; // 4 MB\n+  public static final int DEFAULT_BUFFER_SIZE = 2 << 20; // 2 MB", "originalCommit": "1cdd67b3dcec4fe33ce74131ba77cc27e846c268", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca74559e39a1d51250e638bb17c90172a441e39f", "chunk": "diff --git a/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/artifact/ArtifactRetrievalService.java b/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/artifact/ArtifactRetrievalService.java\nindex 24cb286089..4ba4cea804 100644\n--- a/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/artifact/ArtifactRetrievalService.java\n+++ b/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/artifact/ArtifactRetrievalService.java\n\n@@ -43,11 +43,14 @@ public class ArtifactRetrievalService\n \n   public static final String FILE_ARTIFACT_URN = \"beam:artifact:type:file:v1\";\n   public static final String URL_ARTIFACT_URN = \"beam:artifact:type:url:v1\";\n+  public static final String EMBEDDED_ARTIFACT_URN = \"beam:artifact:type:embedded:v1\";\n   public static final String STAGING_TO_ARTIFACT_URN = \"beam:artifact:role:staging_to:v1\";\n \n   static {\n     checkState(FILE_ARTIFACT_URN.equals(BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE)));\n     checkState(URL_ARTIFACT_URN.equals(BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.URL)));\n+    checkState(\n+        EMBEDDED_ARTIFACT_URN.equals(BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.EMBEDDED)));\n     checkState(\n         STAGING_TO_ARTIFACT_URN.equals(\n             BeamUrns.getUrn(RunnerApi.StandardArtifacts.Roles.STAGING_TO)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMDU5Mw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429030593", "bodyText": "Had to add this, because TestPortableRunner couples \"check that the job succeeds\" logic with a bunch of other things having to do with launching an existing Java runner as a portable runner, not relevant to actual portable runner services.", "author": "kennknowles", "createdAt": "2020-05-22T03:59:52Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.options.Validation;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56cec5f3586e6361f1a93e02e91665ef4b524a0b", "chunk": "diff --git a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java b/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java\nindex f4fe83ec6e..b07c335e26 100644\n--- a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java\n+++ b/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java\n\n@@ -17,7 +17,6 @@\n  */\n package org.apache.beam.runners.portability.testing;\n \n-import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n import static org.hamcrest.MatcherAssert.assertThat;\n \n import com.google.auto.service.AutoService;\n"}}, {"oid": "ca74559e39a1d51250e638bb17c90172a441e39f", "url": "https://github.com/apache/beam/commit/ca74559e39a1d51250e638bb17c90172a441e39f", "message": "Add ability to specify stdout and stderr files for local_job_service", "committedDate": "2020-06-16T21:33:02Z", "type": "forcePushed"}, {"oid": "56cec5f3586e6361f1a93e02e91665ef4b524a0b", "url": "https://github.com/apache/beam/commit/56cec5f3586e6361f1a93e02e91665ef4b524a0b", "message": "Add ability to specify stdout and stderr files for local_job_service;", "committedDate": "2020-07-08T18:45:17Z", "type": "forcePushed"}, {"oid": "c4668557b2bdb5e96256ec9c0325b93409bfbe5a", "url": "https://github.com/apache/beam/commit/c4668557b2bdb5e96256ec9c0325b93409bfbe5a", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T21:20:12Z", "type": "forcePushed"}, {"oid": "f156314f115d2fd6767fd18096f8e1bd9d58e462", "url": "https://github.com/apache/beam/commit/f156314f115d2fd6767fd18096f8e1bd9d58e462", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T21:36:02Z", "type": "forcePushed"}, {"oid": "cbb175a309560a39315742b4920b53b28a7eb3e3", "url": "https://github.com/apache/beam/commit/cbb175a309560a39315742b4920b53b28a7eb3e3", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T21:57:51Z", "type": "forcePushed"}, {"oid": "65e3bf46c97abf66b884fa4e01e0c636a1d9ec9a", "url": "https://github.com/apache/beam/commit/65e3bf46c97abf66b884fa4e01e0c636a1d9ec9a", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T22:19:21Z", "type": "forcePushed"}, {"oid": "07c38633ab1a6a4dceac99757bc185c25d8f66cf", "url": "https://github.com/apache/beam/commit/07c38633ab1a6a4dceac99757bc185c25d8f66cf", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T22:32:51Z", "type": "forcePushed"}, {"oid": "e7254e2c28f2d433a0d2ccc16cf79db611e108f6", "url": "https://github.com/apache/beam/commit/e7254e2c28f2d433a0d2ccc16cf79db611e108f6", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T22:36:12Z", "type": "forcePushed"}, {"oid": "da4acef9b5c62069632978612c9692d7feace03c", "url": "https://github.com/apache/beam/commit/da4acef9b5c62069632978612c9692d7feace03c", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T22:39:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTAyMg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452959022", "bodyText": "Nit: I'd make this more local (it's thrown only at Files.readAllBytes).", "author": "robertwb", "createdAt": "2020-07-10T16:51:15Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n+    return new TestUniversalRunner(options);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    try {\n+      Options testOptions = options.as(Options.class);\n+      String endpoint =\n+          \"localhost:\"\n+              + new String(\n+                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n+                      Charsets.UTF_8)\n+                  .trim();\n+\n+      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n+      portableOptions.setJobEndpoint(endpoint);\n+      portableOptions.setRunner(PortableRunner.class);\n+      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n+      PipelineResult result = runner.run(pipeline);\n+      assertThat(\n+          \"Pipeline did not succeed.\",\n+          result.waitUntilFinish(),\n+          Matchers.is(PipelineResult.State.DONE));\n+      return result;\n+    } catch (IOException e) {", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NjczNw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452996737", "bodyText": "Done", "author": "kennknowles", "createdAt": "2020-07-10T18:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d261b9567bf9c9e78414f3be1f54c5332ce88390", "chunk": "diff --git a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java b/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java\ndeleted file mode 100644\nindex e40ae905aa..0000000000\n--- a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.beam.runners.portability.testing;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-\n-import com.google.auto.service.AutoService;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import org.apache.beam.runners.portability.PortableRunner;\n-import org.apache.beam.sdk.Pipeline;\n-import org.apache.beam.sdk.PipelineResult;\n-import org.apache.beam.sdk.PipelineRunner;\n-import org.apache.beam.sdk.options.Description;\n-import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n-import org.apache.beam.sdk.options.PortablePipelineOptions;\n-import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n-import org.apache.beam.sdk.testing.TestPipelineOptions;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.hamcrest.Matchers;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n-public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n-\n-  private final PipelineOptions options;\n-\n-  private TestUniversalRunner(PipelineOptions options) {\n-    this.options = options;\n-  }\n-\n-  /**\n-   * Constructs a runner from the provided options.\n-   *\n-   * @param options Properties which configure the runner.\n-   * @return The newly created runner.\n-   */\n-  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n-    return new TestUniversalRunner(options);\n-  }\n-\n-  @Override\n-  public PipelineResult run(Pipeline pipeline) {\n-    try {\n-      Options testOptions = options.as(Options.class);\n-      String endpoint =\n-          \"localhost:\"\n-              + new String(\n-                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n-                      Charsets.UTF_8)\n-                  .trim();\n-\n-      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n-      portableOptions.setJobEndpoint(endpoint);\n-      portableOptions.setRunner(PortableRunner.class);\n-      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n-      PipelineResult result = runner.run(pipeline);\n-      assertThat(\n-          \"Pipeline did not succeed.\",\n-          result.waitUntilFinish(),\n-          Matchers.is(PipelineResult.State.DONE));\n-      return result;\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  public interface Options extends TestPipelineOptions, PortablePipelineOptions {\n-    /**\n-     * A file containing the job service port, since Gradle needs to know this filename statically\n-     * to provide it in Beam testing options.\n-     */\n-    @Description(\"File containing local job service port.\")\n-    String getLocalJobServicePortFile();\n-\n-    void setLocalJobServicePortFile(String endpoint);\n-  }\n-\n-  /** Register {@link Options}. */\n-  @AutoService(PipelineOptionsRegistrar.class)\n-  public static class OptionsRegistrar implements PipelineOptionsRegistrar {\n-\n-    @Override\n-    public Iterable<Class<? extends PipelineOptions>> getPipelineOptions() {\n-      return ImmutableList.of(Options.class);\n-    }\n-  }\n-\n-  /** Registrar for the portable runner. */\n-  @AutoService(PipelineRunnerRegistrar.class)\n-  public static class RunnerRegistrar implements PipelineRunnerRegistrar {\n-\n-    @Override\n-    public Iterable<Class<? extends PipelineRunner<?>>> getPipelineRunners() {\n-      return ImmutableList.of(TestUniversalRunner.class);\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452959763", "bodyText": "Logically, it would make sense to let this be optional (e.g. one could instead provide jobEndpoint directly). A point could be made that the testing infrastructure should be the one reading the file and setting jobEndpoint, rather than passing the file path as an option (but I don't know how much messier that'd make things).", "author": "robertwb", "createdAt": "2020-07-10T16:52:47Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n+    return new TestUniversalRunner(options);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    try {\n+      Options testOptions = options.as(Options.class);\n+      String endpoint =\n+          \"localhost:\"\n+              + new String(\n+                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n+                      Charsets.UTF_8)\n+                  .trim();\n+\n+      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n+      portableOptions.setJobEndpoint(endpoint);\n+      portableOptions.setRunner(PortableRunner.class);\n+      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n+      PipelineResult result = runner.run(pipeline);\n+      assertThat(\n+          \"Pipeline did not succeed.\",\n+          result.waitUntilFinish(),\n+          Matchers.is(PipelineResult.State.DONE));\n+      return result;\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  public interface Options extends TestPipelineOptions, PortablePipelineOptions {\n+    /**\n+     * A file containing the job service port, since Gradle needs to know this filename statically\n+     * to provide it in Beam testing options.\n+     */\n+    @Description(\"File containing local job service port.\")", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwMTIyMQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453001221", "bodyText": "Yea, this sort of thing is what took 90% of the time for this PR actually. Scraping around Gradle's docs and the internet for ways to insert that little bit of logic, because realizing it was sort of against the grain. Pipeline options are passed as a Java system property, and those are set up in the Gradle graph construction phase. More generally, there's not a Gradle graph execution-time slot for free-form code that also re-uses the Test task type. Perhaps they expect you to use inheritance and make a new Task type. Which I would rather not do ;_;\nIt would be fine to have two pipeline options, so that simple use could be simple.", "author": "kennknowles", "createdAt": "2020-07-10T18:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMDg3Nw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453100877", "bodyText": "We already have the plain jobEndpoint option, just make (re)setting it conditional on LocalJobServicePortFile being set.", "author": "robertwb", "createdAt": "2020-07-10T22:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTc0MA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453911740", "bodyText": "Done", "author": "kennknowles", "createdAt": "2020-07-13T20:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d261b9567bf9c9e78414f3be1f54c5332ce88390", "chunk": "diff --git a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java b/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java\ndeleted file mode 100644\nindex e40ae905aa..0000000000\n--- a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.beam.runners.portability.testing;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-\n-import com.google.auto.service.AutoService;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import org.apache.beam.runners.portability.PortableRunner;\n-import org.apache.beam.sdk.Pipeline;\n-import org.apache.beam.sdk.PipelineResult;\n-import org.apache.beam.sdk.PipelineRunner;\n-import org.apache.beam.sdk.options.Description;\n-import org.apache.beam.sdk.options.PipelineOptions;\n-import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n-import org.apache.beam.sdk.options.PortablePipelineOptions;\n-import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n-import org.apache.beam.sdk.testing.TestPipelineOptions;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n-import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n-import org.hamcrest.Matchers;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n-public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n-\n-  private final PipelineOptions options;\n-\n-  private TestUniversalRunner(PipelineOptions options) {\n-    this.options = options;\n-  }\n-\n-  /**\n-   * Constructs a runner from the provided options.\n-   *\n-   * @param options Properties which configure the runner.\n-   * @return The newly created runner.\n-   */\n-  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n-    return new TestUniversalRunner(options);\n-  }\n-\n-  @Override\n-  public PipelineResult run(Pipeline pipeline) {\n-    try {\n-      Options testOptions = options.as(Options.class);\n-      String endpoint =\n-          \"localhost:\"\n-              + new String(\n-                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n-                      Charsets.UTF_8)\n-                  .trim();\n-\n-      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n-      portableOptions.setJobEndpoint(endpoint);\n-      portableOptions.setRunner(PortableRunner.class);\n-      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n-      PipelineResult result = runner.run(pipeline);\n-      assertThat(\n-          \"Pipeline did not succeed.\",\n-          result.waitUntilFinish(),\n-          Matchers.is(PipelineResult.State.DONE));\n-      return result;\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  public interface Options extends TestPipelineOptions, PortablePipelineOptions {\n-    /**\n-     * A file containing the job service port, since Gradle needs to know this filename statically\n-     * to provide it in Beam testing options.\n-     */\n-    @Description(\"File containing local job service port.\")\n-    String getLocalJobServicePortFile();\n-\n-    void setLocalJobServicePortFile(String endpoint);\n-  }\n-\n-  /** Register {@link Options}. */\n-  @AutoService(PipelineOptionsRegistrar.class)\n-  public static class OptionsRegistrar implements PipelineOptionsRegistrar {\n-\n-    @Override\n-    public Iterable<Class<? extends PipelineOptions>> getPipelineOptions() {\n-      return ImmutableList.of(Options.class);\n-    }\n-  }\n-\n-  /** Registrar for the portable runner. */\n-  @AutoService(PipelineRunnerRegistrar.class)\n-  public static class RunnerRegistrar implements PipelineRunnerRegistrar {\n-\n-    @Override\n-    public Iterable<Class<? extends PipelineRunner<?>>> getPipelineRunners() {\n-      return ImmutableList.of(TestUniversalRunner.class);\n-    }\n-  }\n-}\n"}}, {"oid": "d261b9567bf9c9e78414f3be1f54c5332ce88390", "url": "https://github.com/apache/beam/commit/d261b9567bf9c9e78414f3be1f54c5332ce88390", "message": "Only add test task in applyPythonNature if it does not already exist", "committedDate": "2020-07-13T20:01:37Z", "type": "commit"}, {"oid": "73e1ccd6ceef2bd3b49c864be5d5cd33609faf90", "url": "https://github.com/apache/beam/commit/73e1ccd6ceef2bd3b49c864be5d5cd33609faf90", "message": "Add UsesTimersInParDo to test that was missing it", "committedDate": "2020-07-13T20:01:37Z", "type": "commit"}, {"oid": "fe66ea00525518429c22d48eb377afac47febc89", "url": "https://github.com/apache/beam/commit/fe66ea00525518429c22d48eb377afac47febc89", "message": "Reduce Java portable ArtifactRetrieval chunk size to avoid breaking limit", "committedDate": "2020-07-13T20:01:37Z", "type": "commit"}, {"oid": "1f4cb7235d33426d56550ee04ec1193d4a8a4ce6", "url": "https://github.com/apache/beam/commit/1f4cb7235d33426d56550ee04ec1193d4a8a4ce6", "message": "Add ability to specify stdout and stderr files for local_job_service;", "committedDate": "2020-07-13T20:01:38Z", "type": "commit"}, {"oid": "60e03d4e2f2126f09e0accbfe27b368a25a12abf", "url": "https://github.com/apache/beam/commit/60e03d4e2f2126f09e0accbfe27b368a25a12abf", "message": "Create TestUniversalRunner for testing against Python ULR", "committedDate": "2020-07-13T20:30:13Z", "type": "commit"}, {"oid": "fec66720fd2e8feaffe198ddb714fed5da312a02", "url": "https://github.com/apache/beam/commit/fec66720fd2e8feaffe198ddb714fed5da312a02", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-13T20:30:13Z", "type": "commit"}, {"oid": "fec66720fd2e8feaffe198ddb714fed5da312a02", "url": "https://github.com/apache/beam/commit/fec66720fd2e8feaffe198ddb714fed5da312a02", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-13T20:30:13Z", "type": "forcePushed"}]}