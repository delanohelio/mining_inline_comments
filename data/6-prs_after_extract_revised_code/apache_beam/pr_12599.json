{"pr_number": 12599, "pr_title": "[BEAM-10670] Make key coder deterministic by using upstream PCollection which uses random byte[] as the key.", "pr_createdAt": "2020-08-17T17:21:52Z", "pr_url": "https://github.com/apache/beam/pull/12599", "timeline": [{"oid": "f058b8c35ae63b6e51024b6c81b1fcc3bcb50090", "url": "https://github.com/apache/beam/commit/f058b8c35ae63b6e51024b6c81b1fcc3bcb50090", "message": "[BEAM-10670] Make key coder deterministic by using upstream PCollection which uses random byte[] as the key.\n\nThis is necessary for some runners that require deterministic key encodings.", "committedDate": "2020-08-17T17:20:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYzOTU0MA==", "url": "https://github.com/apache/beam/pull/12599#discussion_r471639540", "bodyText": "The input PCollection passed in is already using random keys.", "author": "lukecwik", "createdAt": "2020-08-17T17:22:26Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDoNaiveBounded.java", "diffHunk": "@@ -106,8 +106,8 @@\n     @Override\n     public PCollectionTuple expand(PCollection<KV<byte[], KV<InputT, RestrictionT>>> input) {\n       return input\n-          .apply(\"Drop key\", Values.create())\n           .apply(\"Reshuffle\", Reshuffle.of())\n+          .apply(\"Drop key\", Values.create())", "originalCommit": "f058b8c35ae63b6e51024b6c81b1fcc3bcb50090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}