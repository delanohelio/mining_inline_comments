{"pr_number": 10659, "pr_title": "[BEAM-9149] Add SQL query parameters to public API and enable positional", "pr_createdAt": "2020-01-22T17:47:32Z", "pr_url": "https://github.com/apache/beam/pull/10659", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTA1NA==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369741054", "bodyText": "Does a query allows having both named and positional parameters?", "author": "amaliujia", "createdAt": "2020-01-22T18:53:54Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/QueryPlanner.java", "diffHunk": "@@ -26,8 +26,29 @@\n  */\n public interface QueryPlanner {\n   /** It parses and validate the input query, then convert into a {@link BeamRelNode} tree. */\n-  BeamRelNode convertToBeamRel(String sqlStatement) throws ParseException, SqlConversionException;\n+  BeamRelNode convertToBeamRel(\n+      String sqlStatement, Object queryParameters, QueryParameterMode queryParameterMode)\n+      throws ParseException, SqlConversionException;\n \n   /** Parse input SQL query, and return a {@link SqlNode} as grammar tree. */\n   SqlNode parse(String sqlStatement) throws ParseException;\n+\n+  /**\n+   * Parameters have different usage semantics depending on the parameter mode specified. Note that\n+   * some parameter modes might not be supported by all backends.\n+   */\n+  enum QueryParameterMode {", "originalCommit": "fc3e891852606b732fbfa5b5c95e7bba936953f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDcyMQ==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369744721", "bodyText": "No. I updated the javadoc to clarify this.", "author": "ibzib", "createdAt": "2020-01-22T19:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "0842785404570a3b1f6f8de0d19b3a5d3c289161", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/QueryPlanner.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/QueryPlanner.java\nindex 84e5277987..c3164d3f22 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/QueryPlanner.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/QueryPlanner.java\n\n@@ -36,6 +36,8 @@ public interface QueryPlanner {\n   /**\n    * Parameters have different usage semantics depending on the parameter mode specified. Note that\n    * some parameter modes might not be supported by all backends.\n+   *\n+   * Named and positional parameters are not allowed in the same query.\n    */\n   enum QueryParameterMode {\n     /**\n"}}, {"oid": "0842785404570a3b1f6f8de0d19b3a5d3c289161", "url": "https://github.com/apache/beam/commit/0842785404570a3b1f6f8de0d19b3a5d3c289161", "message": "[BEAM-9149] Add SQL query parameters to public API and enable positional\nparameters in ZetaSQL.", "committedDate": "2020-01-22T18:59:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MDEyMA==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369760120", "bodyText": "My preference would be to have slightly more typed positionalParameters and namedParameters. If you like, you can do it robustly with @AutoOneOf, which would subsume also queryParameterMode.\nhttps://github.com/google/auto/blob/master/value/userguide/howto.md#-make-a-class-where-only-one-of-its-properties-is-ever-set", "author": "kennknowles", "createdAt": "2020-01-22T19:32:03Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java", "diffHunk": "@@ -87,6 +88,10 @@\n \n   abstract String queryString();\n \n+  abstract Object queryParameters();", "originalCommit": "0842785404570a3b1f6f8de0d19b3a5d3c289161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5OTI2OA==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369799268", "bodyText": "Will do, thanks for the tip.", "author": "ibzib", "createdAt": "2020-01-22T20:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MDEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMTQ2MQ==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369811461", "bodyText": "Looks like we will have to update to AutoValue 1.7 to be able to do none (void is not allowed in version 1.6.3 that we are using)", "author": "ibzib", "createdAt": "2020-01-22T21:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MDEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "3313d5e1c7f876558fa99e8054ce6004b8b82366", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\nindex a5c6db4152..e061632177 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\n\n@@ -88,10 +87,6 @@ public abstract class SqlTransform extends PTransform<PInput, PCollection<Row>>\n \n   abstract String queryString();\n \n-  abstract Object queryParameters();\n-\n-  abstract QueryParameterMode queryParameterMode();\n-\n   abstract List<UdfDefinition> udfDefinitions();\n \n   abstract List<UdafDefinition> udafDefinitions();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MTUxNQ==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369761515", "bodyText": "This is a bit strange to me. Isn't the point of a builder that you only specify some of the args? I recognize that the oddness was pre-existing in this code.", "author": "kennknowles", "createdAt": "2020-01-22T19:35:01Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java", "diffHunk": "@@ -151,6 +158,19 @@ private void registerFunctions(BeamSqlEnvBuilder sqlEnvBuilder) {\n     udafDefinitions().forEach(udaf -> sqlEnvBuilder.addUdaf(udaf.udafName(), udaf.combineFn()));\n   }\n \n+  private static SqlTransform query(\n+      String queryString, Object queryParameters, QueryParameterMode queryParameterMode) {\n+    return builder()\n+        .setQueryString(queryString)\n+        .setQueryParameters(queryParameters)\n+        .setQueryParameterMode(queryParameterMode)\n+        .setUdafDefinitions(Collections.emptyList())", "originalCommit": "0842785404570a3b1f6f8de0d19b3a5d3c289161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjY0MQ==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369802641", "bodyText": "It looks like it was set up this way because some of the public methods (e.g. registerUdaf) themselves include some boilerplate building, which is hidden from the user.", "author": "ibzib", "createdAt": "2020-01-22T21:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MTUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3313d5e1c7f876558fa99e8054ce6004b8b82366", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\nindex a5c6db4152..e061632177 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\n\n@@ -158,19 +151,6 @@ public abstract class SqlTransform extends PTransform<PInput, PCollection<Row>>\n     udafDefinitions().forEach(udaf -> sqlEnvBuilder.addUdaf(udaf.udafName(), udaf.combineFn()));\n   }\n \n-  private static SqlTransform query(\n-      String queryString, Object queryParameters, QueryParameterMode queryParameterMode) {\n-    return builder()\n-        .setQueryString(queryString)\n-        .setQueryParameters(queryParameters)\n-        .setQueryParameterMode(queryParameterMode)\n-        .setUdafDefinitions(Collections.emptyList())\n-        .setUdfDefinitions(Collections.emptyList())\n-        .setTableProviderMap(Collections.emptyMap())\n-        .setAutoUdfUdafLoad(false)\n-        .build();\n-  }\n-\n   /**\n    * Returns a {@link SqlTransform} representing an equivalent execution plan.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MjIyNA==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369762224", "bodyText": "Stylistically, SqlTransform would do better to have public builder methods. Is there a technical barrier? In other words, an API like SqlTransform.query(...).withParameters(...) or even .withNamedParameters separate from withPositionalParameters.", "author": "kennknowles", "createdAt": "2020-01-22T19:36:36Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java", "diffHunk": "@@ -175,13 +195,32 @@ private void registerFunctions(BeamSqlEnvBuilder sqlEnvBuilder) {\n    * </ul>\n    */\n   public static SqlTransform query(String queryString) {\n-    return builder()\n-        .setQueryString(queryString)\n-        .setUdafDefinitions(Collections.emptyList())\n-        .setUdfDefinitions(Collections.emptyList())\n-        .setTableProviderMap(Collections.emptyMap())\n-        .setAutoUdfUdafLoad(false)\n-        .build();\n+    return query(queryString, Collections.emptyMap(), QueryParameterMode.NONE);\n+  }\n+\n+  /**\n+   * Same as {@link #query(String)} but with named query parameters. Currently only supported by the\n+   * ZetaSQL dialect.\n+   *\n+   * @param queryParameters type depends on the SQL dialect. For ZetaSQL, a {@code Map<String,\n+   *     com.google.zetasql.Value>} keyed by the parameter name.\n+   */\n+  @Experimental\n+  public static SqlTransform queryWithNamedParameters(String queryString, Map queryParameters) {", "originalCommit": "0842785404570a3b1f6f8de0d19b3a5d3c289161", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MjkxMQ==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369762911", "bodyText": "(this is https://beam.apache.org/contribute/ptransform-style-guide/#fluent-builder-methods-for-setting-parameters)", "author": "kennknowles", "createdAt": "2020-01-22T19:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MjIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNDM3Mg==", "url": "https://github.com/apache/beam/pull/10659#discussion_r369804372", "bodyText": "Stylistically, SqlTransform would do better to have public builder methods.\n\nDo you mean just for parameters, or overall?", "author": "ibzib", "createdAt": "2020-01-22T21:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MjIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "3313d5e1c7f876558fa99e8054ce6004b8b82366", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\nindex a5c6db4152..e061632177 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\n\n@@ -195,32 +175,13 @@ public abstract class SqlTransform extends PTransform<PInput, PCollection<Row>>\n    * </ul>\n    */\n   public static SqlTransform query(String queryString) {\n-    return query(queryString, Collections.emptyMap(), QueryParameterMode.NONE);\n-  }\n-\n-  /**\n-   * Same as {@link #query(String)} but with named query parameters. Currently only supported by the\n-   * ZetaSQL dialect.\n-   *\n-   * @param queryParameters type depends on the SQL dialect. For ZetaSQL, a {@code Map<String,\n-   *     com.google.zetasql.Value>} keyed by the parameter name.\n-   */\n-  @Experimental\n-  public static SqlTransform queryWithNamedParameters(String queryString, Map queryParameters) {\n-    return query(queryString, queryParameters, QueryParameterMode.NAMED);\n-  }\n-\n-  /**\n-   * Same as {@link #query(String)} but with positional query parameters. Currently only supported\n-   * by the ZetaSQL dialect.\n-   *\n-   * @param queryParameters type depends on the SQL dialect. For ZetaSQL, a {@code\n-   *     List<com.google.zetasql.Value>} containing the positional parameters in order.\n-   */\n-  @Experimental\n-  public static SqlTransform queryWithPositionalParameters(\n-      String queryString, List queryParameters) {\n-    return query(queryString, queryParameters, QueryParameterMode.POSITIONAL);\n+    return builder()\n+        .setQueryString(queryString)\n+        .setUdafDefinitions(Collections.emptyList())\n+        .setUdfDefinitions(Collections.emptyList())\n+        .setTableProviderMap(Collections.emptyMap())\n+        .setAutoUdfUdafLoad(false)\n+        .build();\n   }\n \n   public SqlTransform withTableProvider(String name, TableProvider tableProvider) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MDM0MA==", "url": "https://github.com/apache/beam/pull/10659#discussion_r370250340", "bodyText": "Perfect", "author": "kennknowles", "createdAt": "2020-01-23T17:19:05Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java", "diffHunk": "@@ -194,6 +199,14 @@ public SqlTransform withDefaultTableProvider(String name, TableProvider tablePro\n     return withTableProvider(name, tableProvider).toBuilder().setDefaultTableProvider(name).build();\n   }\n \n+  public SqlTransform withNamedParameters(Map parameters) {", "originalCommit": "82d34e4680e0657b187d02a2e05abc8549e9946a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3313d5e1c7f876558fa99e8054ce6004b8b82366", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\nindex 13186e0c5b..e061632177 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/SqlTransform.java\n\n@@ -199,14 +194,6 @@ public abstract class SqlTransform extends PTransform<PInput, PCollection<Row>>\n     return withTableProvider(name, tableProvider).toBuilder().setDefaultTableProvider(name).build();\n   }\n \n-  public SqlTransform withNamedParameters(Map parameters) {\n-    return toBuilder().setQueryParameters(QueryParameters.ofNamed(parameters)).build();\n-  }\n-\n-  public SqlTransform withPositionalParameters(List parameters) {\n-    return toBuilder().setQueryParameters(QueryParameters.ofPositional(parameters)).build();\n-  }\n-\n   public SqlTransform withAutoUdfUdafLoad(boolean autoUdfUdafLoad) {\n     return toBuilder().setAutoUdfUdafLoad(autoUdfUdafLoad).build();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MTY3Mw==", "url": "https://github.com/apache/beam/pull/10659#discussion_r370251673", "bodyText": "If I understand correctly, this might be best as a checkState. That way you can attach a good error message and indicate that the internal state has gotten messed up.", "author": "kennknowles", "createdAt": "2020-01-23T17:21:49Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -1000,9 +1002,19 @@ private static boolean isZetaSQLCast(TypeKind fromType, TypeKind toType) {\n   }\n \n   private RexNode convertResolvedParameter(ResolvedParameter parameter) {\n-    assert parameter.getType().equals(queryParams.get(parameter.getName()).getType());\n-    return convertValueToRexNode(\n-        queryParams.get(parameter.getName()).getType(), queryParams.get(parameter.getName()));\n+    if (queryParams.getKind() == Kind.NAMED) {\n+      Map<String, Value> queryParameterMap = (Map<String, Value>) queryParams.named();\n+      Value value = queryParameterMap.get(parameter.getName());\n+      assert parameter.getType().equals(value.getType());", "originalCommit": "82d34e4680e0657b187d02a2e05abc8549e9946a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MTI3Mw==", "url": "https://github.com/apache/beam/pull/10659#discussion_r370261273", "bodyText": "Done.", "author": "ibzib", "createdAt": "2020-01-23T17:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MTY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3313d5e1c7f876558fa99e8054ce6004b8b82366", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java\nindex 07394796db..e55481ec98 100644\n--- a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java\n+++ b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java\n\n@@ -1002,19 +1000,9 @@ public class ExpressionConverter {\n   }\n \n   private RexNode convertResolvedParameter(ResolvedParameter parameter) {\n-    if (queryParams.getKind() == Kind.NAMED) {\n-      Map<String, Value> queryParameterMap = (Map<String, Value>) queryParams.named();\n-      Value value = queryParameterMap.get(parameter.getName());\n-      assert parameter.getType().equals(value.getType());\n-      return convertValueToRexNode(value.getType(), value);\n-    } else if (queryParams.getKind() == Kind.POSITIONAL) {\n-      List<Value> queryParameterList = (List<Value>) queryParams.positional();\n-      // parameter is 1-indexed, while parameter list is 0-indexed.\n-      Value value = queryParameterList.get((int) parameter.getPosition() - 1);\n-      assert parameter.getType().equals(value.getType());\n-      return convertValueToRexNode(value.getType(), value);\n-    }\n-    throw new IllegalArgumentException(\"Found unexpected parameter \" + parameter);\n+    assert parameter.getType().equals(queryParams.get(parameter.getName()).getType());\n+    return convertValueToRexNode(\n+        queryParams.get(parameter.getName()).getType(), queryParams.get(parameter.getName()));\n   }\n \n   private RexNode convertResolvedStructFieldAccess(ResolvedGetStructField resolvedGetStructField) {\n"}}, {"oid": "3313d5e1c7f876558fa99e8054ce6004b8b82366", "url": "https://github.com/apache/beam/commit/3313d5e1c7f876558fa99e8054ce6004b8b82366", "message": "upgrade auto-value to version 1.7", "committedDate": "2020-01-23T23:46:10Z", "type": "commit"}, {"oid": "23c55e27978fbe6be77de4605bd57d30b2de22b0", "url": "https://github.com/apache/beam/commit/23c55e27978fbe6be77de4605bd57d30b2de22b0", "message": "[BEAM-9149] Add SQL query parameters to public API and enable positional\nparameters in ZetaSQL.", "committedDate": "2020-01-23T23:46:10Z", "type": "commit"}, {"oid": "23c55e27978fbe6be77de4605bd57d30b2de22b0", "url": "https://github.com/apache/beam/commit/23c55e27978fbe6be77de4605bd57d30b2de22b0", "message": "[BEAM-9149] Add SQL query parameters to public API and enable positional\nparameters in ZetaSQL.", "committedDate": "2020-01-23T23:46:10Z", "type": "forcePushed"}]}