{"pr_number": 12154, "pr_title": "[BEAM-9709] Add test for timestamp from date in default timezone", "pr_createdAt": "2020-07-01T19:23:23Z", "pr_url": "https://github.com/apache/beam/pull/12154", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MDEyNg==", "url": "https://github.com/apache/beam/pull/12154#discussion_r448570126", "bodyText": "Moving these tests to proper location without changing the content.", "author": "robinyqiu", "createdAt": "2020-07-01T19:24:19Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2791,56 +2791,6 @@ public void testTimestampLiteralWithUTCTimeZone() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n-  @Test", "originalCommit": "3d503889570b0f1aca3d3fb3f9e990cab2928158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MjIxNQ==", "url": "https://github.com/apache/beam/pull/12154#discussion_r448672215", "bodyText": "What is the proper location?", "author": "apilloud", "createdAt": "2020-07-01T23:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MDEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxMTU5Mw==", "url": "https://github.com/apache/beam/pull/12154#discussion_r448711593", "bodyText": "Oh, just moving it to a block of related tests.", "author": "robinyqiu", "createdAt": "2020-07-02T02:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MDEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "4eee2dc58d771ba16a826939278b935716e69553", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java b/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\nindex 792d0b227b..532103e869 100644\n--- a/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\n+++ b/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\n\n@@ -2791,6 +2792,130 @@ public class ZetaSQLDialectSpecTest extends ZetaSQLTestBase {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testMultipleSelectStatementsThrowsException() {\n+    String sql = \"SELECT 1; SELECT 2;\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(UnsupportedOperationException.class);\n+    thrown.expectMessage(\"No additional statements are allowed after a SELECT statement.\");\n+    zetaSQLQueryPlanner.convertToBeamRel(sql);\n+  }\n+\n+  @Test\n+  public void testAlreadyDefinedUDFThrowsException() {\n+    String sql = \"CREATE FUNCTION foo() AS (0); CREATE FUNCTION foo() AS (1); SELECT foo();\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(ParseException.class);\n+    thrown.expectMessage(\"Failed to define function foo\");\n+    zetaSQLQueryPlanner.convertToBeamRel(sql);\n+  }\n+\n+  @Test\n+  public void testCreateFunctionNoSelectThrowsException() {\n+    String sql = \"CREATE FUNCTION plusOne(x INT64) AS (x + 1);\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(UnsupportedOperationException.class);\n+    thrown.expectMessage(\"Statement list must end in a SELECT statement, not CreateFunctionStmt\");\n+    zetaSQLQueryPlanner.convertToBeamRel(sql);\n+  }\n+\n+  @Test\n+  public void testNullaryUdf() {\n+    String sql = \"CREATE FUNCTION zero() AS (0); SELECT zero();\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addInt64Field(\"x\").build()).addValue(0L).build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testQualifiedNameUdfUnqualifiedCall() {\n+    String sql = \"CREATE FUNCTION foo.bar.baz() AS (\\\"uwu\\\"); SELECT baz();\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addStringField(\"x\").build()).addValue(\"uwu\").build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  @Ignore(\n+      \"Qualified paths can't be resolved due to a bug in ZetaSQL: \"\n+          + \"https://github.com/google/zetasql/issues/42\")\n+  public void testQualifiedNameUdfQualifiedCallThrowsException() {\n+    String sql = \"CREATE FUNCTION foo.bar.baz() AS (\\\"uwu\\\"); SELECT foo.bar.baz();\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addStringField(\"x\").build()).addValue(\"uwu\").build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testUnaryUdf() {\n+    String sql = \"CREATE FUNCTION triple(x INT64) AS (3 * x); SELECT triple(triple(1));\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addInt64Field(\"x\").build()).addValue(9L).build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testUdfWithinUdf() {\n+    String sql =\n+        \"CREATE FUNCTION triple(x INT64) AS (3 * x);\"\n+            + \" CREATE FUNCTION nonuple(x INT64) as (triple(triple(x)));\"\n+            + \" SELECT nonuple(1);\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addInt64Field(\"x\").build()).addValue(9L).build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testUndefinedUdfThrowsException() {\n+    String sql =\n+        \"CREATE FUNCTION foo() AS (bar()); \"\n+            + \"CREATE FUNCTION bar() AS (foo()); \"\n+            + \"SELECT foo();\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(SqlException.class);\n+    thrown.expectMessage(\"Function not found: bar\");\n+    zetaSQLQueryPlanner.convertToBeamRel(sql);\n+  }\n+\n+  @Test\n+  public void testRecursiveUdfThrowsException() {\n+    String sql = \"CREATE FUNCTION omega() AS (omega()); SELECT omega();\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(SqlException.class);\n+    thrown.expectMessage(\"Function not found: omega\");\n+    zetaSQLQueryPlanner.convertToBeamRel(sql);\n+  }\n+\n   @Test\n   public void testTimestampLiteralWithNonUTCTimeZone() {\n     String sql = \"SELECT TIMESTAMP '2018-12-10 10:38:59-10:00'\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MjA1MA==", "url": "https://github.com/apache/beam/pull/12154#discussion_r448672050", "bodyText": "Extra whitespace here.", "author": "apilloud", "createdAt": "2020-07-01T23:45:56Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -3724,6 +3690,57 @@ public void testExceptAll() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+", "originalCommit": "3d503889570b0f1aca3d3fb3f9e990cab2928158", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "151e1290451f36b4c7b42826e26fdf2af049529e", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java b/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\nindex 792d0b227b..040affc7b0 100644\n--- a/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\n+++ b/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\n\n@@ -3690,7 +3690,6 @@ public class ZetaSQLDialectSpecTest extends ZetaSQLTestBase {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n-\n   @Test\n   public void testSelectNullIntersectDistinct() {\n     String sql = \"SELECT NULL INTERSECT DISTINCT SELECT 2\";\n"}}, {"oid": "151e1290451f36b4c7b42826e26fdf2af049529e", "url": "https://github.com/apache/beam/commit/151e1290451f36b4c7b42826e26fdf2af049529e", "message": "Add test for timestamp from date in default timezone", "committedDate": "2020-07-02T02:13:42Z", "type": "forcePushed"}, {"oid": "4eee2dc58d771ba16a826939278b935716e69553", "url": "https://github.com/apache/beam/commit/4eee2dc58d771ba16a826939278b935716e69553", "message": "Add test for timestamp from date in default timezone", "committedDate": "2020-07-02T02:19:05Z", "type": "commit"}, {"oid": "4eee2dc58d771ba16a826939278b935716e69553", "url": "https://github.com/apache/beam/commit/4eee2dc58d771ba16a826939278b935716e69553", "message": "Add test for timestamp from date in default timezone", "committedDate": "2020-07-02T02:19:05Z", "type": "forcePushed"}]}