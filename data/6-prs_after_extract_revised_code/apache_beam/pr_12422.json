{"pr_number": 12422, "pr_title": "[BEAM-601] Run KinesisIOIT with localstack", "pr_createdAt": "2020-07-30T10:45:13Z", "pr_url": "https://github.com/apache/beam/pull/12422", "timeline": [{"oid": "409d8c7bf94e453acd7c24494c46b716af16ecd0", "url": "https://github.com/apache/beam/commit/409d8c7bf94e453acd7c24494c46b716af16ecd0", "message": "[BEAM-601] Add kinesis integration test to Java postcommit", "committedDate": "2020-07-30T10:51:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTU3MQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r463325571", "bodyText": "I think we should maintain the ability to test against production AWS. Someday maybe we'll get some AWS credits to run this continuously against prod, and it could still be useful for local testing. Could you make it so we only start up a localstack container if nothing in KinesisTestOptions is modified?\nWhen starting the localstack you could just set the relevant fields in the PipelineOptions and let the rest of the test read them as it does now.", "author": "TheNeuralBit", "createdAt": "2020-07-30T23:27:20Z", "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -34,34 +35,65 @@\n import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n-import org.joda.time.Instant;\n-import org.junit.BeforeClass;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.localstack.LocalStackContainer;\n \n /**\n  * Integration test, that writes and reads data to and from real Kinesis. You need to provide {@link\n  * KinesisTestOptions} in order to run this.\n  */\n @RunWith(JUnit4.class)\n public class KinesisIOIT implements Serializable {\n-  private static int numberOfShards;\n-  private static int numberOfRows;\n+  private static final String STREAM_NAME = \"beam_kinesis\";\n+  private static final int NUM_RECORDS = 1000;\n \n   @Rule public TestPipeline pipelineWrite = TestPipeline.create();\n   @Rule public TestPipeline pipelineRead = TestPipeline.create();\n \n-  private static KinesisTestOptions options;\n-  private static final Instant now = Instant.now();\n+  static {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+  }\n+\n+  private final LocalStackContainer localstackContainer =\n+      new LocalStackContainer(\"0.11.3\")\n+          .withServices(LocalStackContainer.Service.KINESIS)\n+          .withEnv(\"USE_SSL\", \"true\")\n+          .withStartupAttempts(3);\n+\n+  private String endpoint;\n+  private String region;\n+  private String accessKey;\n+  private String secretKey;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    localstackContainer.start();\n+    endpoint =\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getServiceEndpoint()\n+            .replace(\"http\", \"https\");\n+    region =\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getSigningRegion();\n+    accessKey =\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSAccessKeyId();\n+    secretKey =\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSSecretKey();\n+\n+    createStream();\n+  }\n \n-  @BeforeClass\n-  public static void setup() {\n-    PipelineOptionsFactory.register(KinesisTestOptions.class);\n-    options = TestPipeline.testingPipelineOptions().as(KinesisTestOptions.class);\n-    numberOfShards = options.getNumberOfShards();\n-    numberOfRows = options.getNumberOfRecords();", "originalCommit": "409d8c7bf94e453acd7c24494c46b716af16ecd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1OTMzMw==", "url": "https://github.com/apache/beam/pull/12422#discussion_r463559333", "bodyText": "Done.", "author": "piotr-szuberski", "createdAt": "2020-07-31T11:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "df359094b00107d0b30956f83e05afeb4b11ded3", "chunk": "diff --git a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\nindex e47fb38528..b22257d93b 100644\n--- a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n+++ b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n\n@@ -34,9 +36,11 @@ import org.apache.beam.sdk.transforms.Count;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.values.PCollection;\n+import org.apache.commons.lang.math.IntRange;\n import org.joda.time.Duration;\n-import org.junit.After;\n-import org.junit.Before;\n+import org.joda.time.Instant;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"oid": "df359094b00107d0b30956f83e05afeb4b11ded3", "url": "https://github.com/apache/beam/commit/df359094b00107d0b30956f83e05afeb4b11ded3", "message": "Enable providing pipeline options so the kinesis test can be run on production environment.", "committedDate": "2020-07-31T11:32:57Z", "type": "forcePushed"}, {"oid": "eef87faf64f4a121101611e8926f5cf85814c4b0", "url": "https://github.com/apache/beam/commit/eef87faf64f4a121101611e8926f5cf85814c4b0", "message": "Enable providing pipeline options so the kinesis test can be run on production environment.", "committedDate": "2020-07-31T11:34:23Z", "type": "forcePushed"}, {"oid": "f481dc93fffed26eb1a29efa5759292dd5316867", "url": "https://github.com/apache/beam/commit/f481dc93fffed26eb1a29efa5759292dd5316867", "message": "Enable providing pipeline options so the kinesis test can be run on production environment.", "committedDate": "2020-07-31T11:59:15Z", "type": "forcePushed"}, {"oid": "6d8507a34d502a5d3cfcb02a7efd1522d211b92d", "url": "https://github.com/apache/beam/commit/6d8507a34d502a5d3cfcb02a7efd1522d211b92d", "message": "Enable providing pipeline options so the kinesis test can be run on production environment.", "committedDate": "2020-07-31T12:11:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMDk4NQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464700985", "bodyText": ":(", "author": "TheNeuralBit", "createdAt": "2020-08-03T22:46:39Z", "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -99,28 +116,101 @@ private void runRead() {\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n-                    Regions.fromName(options.getAwsKinesisRegion()))\n-                .withMaxNumRecords(numberOfRows)\n+                    Regions.fromName(options.getAwsKinesisRegion()),\n+                    options.getAwsServiceEndpoint(),\n+                    options.getAwsVerifyCertificate())\n+                .withMaxNumRecords(options.getNumberOfRecords())\n                 // to prevent endless running in case of error\n-                .withMaxReadTime(Duration.standardMinutes(10))\n+                .withMaxReadTime(Duration.standardMinutes(10L))\n                 .withInitialPositionInStream(InitialPositionInStream.AT_TIMESTAMP)\n                 .withInitialTimestampInStream(now)\n                 .withRequestRecordsLimit(1000));\n \n     PAssert.thatSingleton(output.apply(\"Count All\", Count.globally()))\n-        .isEqualTo((long) numberOfRows);\n+        .isEqualTo((long) options.getNumberOfRecords());\n \n     PCollection<String> consolidatedHashcode =\n         output\n             .apply(ParDo.of(new ExtractDataValues()))\n             .apply(\"Hash row contents\", Combine.globally(new HashingFn()).withoutDefaults());\n \n     PAssert.that(consolidatedHashcode)\n-        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(numberOfRows));\n+        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(options.getNumberOfRecords()));\n \n     pipelineRead.run().waitUntilFinish();\n   }\n \n+  /** Necessary setup for localstack environment. */\n+  private static void setupLocalstack() throws Exception {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+\n+    // For some unclear reason localstack requires the timestamp in seconds\n+    now = Instant.ofEpochMilli(Long.divideUnsigned(Instant.now().getMillis(), 1000));", "originalCommit": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fbc54d970bd4e6bdaaa39441a10bf5f9b70fc271", "chunk": "diff --git a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\nindex 7d2d0bf98a..e53a12d8f0 100644\n--- a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n+++ b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n\n@@ -112,7 +123,7 @@ public class KinesisIOIT implements Serializable {\n     PCollection<KinesisRecord> output =\n         pipelineRead.apply(\n             KinesisIO.read()\n-                .withStreamName(options.getAwsKinesisStream())\n+                .withStreamName(streamName)\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMTUyMQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464701521", "bodyText": "Does this need to be Instant.now()? Might be preferable to just make it some constant to make it more repeatable.", "author": "TheNeuralBit", "createdAt": "2020-08-03T22:48:16Z", "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -35,33 +38,45 @@\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n import org.joda.time.Instant;\n+import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.localstack.LocalStackContainer;\n \n /**\n  * Integration test, that writes and reads data to and from real Kinesis. You need to provide {@link\n- * KinesisTestOptions} in order to run this.\n+ * KinesisTestOptions} in order to run this if you want to test it with production setup. By default\n+ * when no options are provided an instance of localstack is used.\n  */\n @RunWith(JUnit4.class)\n public class KinesisIOIT implements Serializable {\n-  private static int numberOfShards;\n-  private static int numberOfRows;\n-\n   @Rule public TestPipeline pipelineWrite = TestPipeline.create();\n   @Rule public TestPipeline pipelineRead = TestPipeline.create();\n \n+  private static LocalStackContainer localstackContainer;\n+\n   private static KinesisTestOptions options;\n-  private static final Instant now = Instant.now();", "originalCommit": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0MDg4Ng==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464840886", "bodyText": "It's for the testing with real aws purpose. When a user wants to test Beam's KinesisIO with an existing stream then it would be best to read only the records that were written just in the time the test is running. If not, then it would be possible that write transform is broken and read works well (read some data from the past) and we have a false-positive. It's still possible if a user uses a stream that receives records from elsewhere, but it cannot be helped.", "author": "piotr-szuberski", "createdAt": "2020-08-04T07:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMTUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4NzQxNg==", "url": "https://github.com/apache/beam/pull/12422#discussion_r465387416", "bodyText": "Ah I see.\nIs it necessary to support testing with an existing stream? It seems preferable to always create a stream for each test and clean it up after the test.", "author": "TheNeuralBit", "createdAt": "2020-08-04T23:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMTUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4Nzk1Ng==", "url": "https://github.com/apache/beam/pull/12422#discussion_r465387956", "bodyText": "Sorry I know this is scope-creep that doesn't directly relate to your change. We can keep it as-is for now, and file a jira to follow-up if it makes sense.", "author": "TheNeuralBit", "createdAt": "2020-08-04T23:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMTUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4MDMxOQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r465580319", "bodyText": "Not a problem, it's already done. Thanks for your watchful eye, of course it's better to create a new stream for the test but I was stuck to the existing code. I also changed the InitialPositionInStream to TRIM_HORIZON, which reads the stream from the beginning instead of given timestamp.", "author": "piotr-szuberski", "createdAt": "2020-08-05T09:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMTUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbc54d970bd4e6bdaaa39441a10bf5f9b70fc271", "chunk": "diff --git a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\nindex 7d2d0bf98a..e53a12d8f0 100644\n--- a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n+++ b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n\n@@ -37,7 +42,6 @@ import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n-import org.joda.time.Instant;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjI1OQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464702259", "bodyText": "Rather than repeating the default values here, you could create a fresh instance using PipelineOptionsFactory.fromArgs().as(KinesisTestOptions.class) and compare each field against it.", "author": "TheNeuralBit", "createdAt": "2020-08-03T22:50:42Z", "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -99,28 +116,101 @@ private void runRead() {\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n-                    Regions.fromName(options.getAwsKinesisRegion()))\n-                .withMaxNumRecords(numberOfRows)\n+                    Regions.fromName(options.getAwsKinesisRegion()),\n+                    options.getAwsServiceEndpoint(),\n+                    options.getAwsVerifyCertificate())\n+                .withMaxNumRecords(options.getNumberOfRecords())\n                 // to prevent endless running in case of error\n-                .withMaxReadTime(Duration.standardMinutes(10))\n+                .withMaxReadTime(Duration.standardMinutes(10L))\n                 .withInitialPositionInStream(InitialPositionInStream.AT_TIMESTAMP)\n                 .withInitialTimestampInStream(now)\n                 .withRequestRecordsLimit(1000));\n \n     PAssert.thatSingleton(output.apply(\"Count All\", Count.globally()))\n-        .isEqualTo((long) numberOfRows);\n+        .isEqualTo((long) options.getNumberOfRecords());\n \n     PCollection<String> consolidatedHashcode =\n         output\n             .apply(ParDo.of(new ExtractDataValues()))\n             .apply(\"Hash row contents\", Combine.globally(new HashingFn()).withoutDefaults());\n \n     PAssert.that(consolidatedHashcode)\n-        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(numberOfRows));\n+        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(options.getNumberOfRecords()));\n \n     pipelineRead.run().waitUntilFinish();\n   }\n \n+  /** Necessary setup for localstack environment. */\n+  private static void setupLocalstack() throws Exception {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+\n+    // For some unclear reason localstack requires the timestamp in seconds\n+    now = Instant.ofEpochMilli(Long.divideUnsigned(Instant.now().getMillis(), 1000));\n+\n+    localstackContainer =\n+        new LocalStackContainer(\"0.11.3\")\n+            .withServices(LocalStackContainer.Service.KINESIS)\n+            .withEnv(\"USE_SSL\", \"true\")\n+            .withStartupAttempts(3);\n+    localstackContainer.start();\n+\n+    options.setAwsServiceEndpoint(\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getServiceEndpoint()\n+            .replace(\"http\", \"https\"));\n+    options.setAwsKinesisRegion(\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getSigningRegion());\n+    options.setAwsAccessKey(\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSAccessKeyId());\n+    options.setAwsSecretKey(\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSSecretKey());\n+    options.setNumberOfRecords(1000);\n+    options.setNumberOfShards(1);\n+    options.setAwsKinesisStream(\"beam_kinesis_test\");\n+    options.setAwsVerifyCertificate(false);\n+    createStream(options.getAwsKinesisStream());\n+  }\n+\n+  private static void createStream(String streamName) throws Exception {\n+    AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();\n+\n+    clientBuilder.setCredentials(localstackContainer.getDefaultCredentialsProvider());\n+    clientBuilder.setEndpointConfiguration(\n+        localstackContainer.getEndpointConfiguration(LocalStackContainer.Service.KINESIS));\n+\n+    AmazonKinesis client = clientBuilder.build();\n+\n+    client.createStream(streamName, 1);\n+    int repeats = 10;\n+    for (int i = 0; i <= repeats; ++i) {\n+      String streamStatus =\n+          client.describeStream(streamName).getStreamDescription().getStreamStatus();\n+      if (\"ACTIVE\".equals(streamStatus)) {\n+        break;\n+      }\n+      if (i == repeats) {\n+        throw new RuntimeException(\"Unable to initialize stream\");\n+      }\n+      Thread.sleep(1000L);\n+    }\n+  }\n+\n+  /** Check whether pipeline options were provided. If not, use localstack container. */\n+  private static boolean doUseLocalstack() {\n+    return \"aws-access-key\".equals(options.getAwsAccessKey())\n+        && \"aws-secret-key\".equals(options.getAwsSecretKey())\n+        && \"aws-kinesis-stream\".equals(options.getAwsKinesisStream())\n+        && \"aws-kinesis-region\".equals(options.getAwsKinesisRegion())\n+        && options.getNumberOfShards() == 2\n+        && options.getNumberOfRecords() == 1000\n+        && options.getAwsServiceEndpoint() == null\n+        && options.getAwsVerifyCertificate();\n+  }", "originalCommit": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0MTI0Mg==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464841242", "bodyText": "Very good point, thanks!", "author": "piotr-szuberski", "createdAt": "2020-08-04T07:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMjI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbc54d970bd4e6bdaaa39441a10bf5f9b70fc271", "chunk": "diff --git a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\nindex 7d2d0bf98a..e53a12d8f0 100644\n--- a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n+++ b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n\n@@ -112,7 +123,7 @@ public class KinesisIOIT implements Serializable {\n     PCollection<KinesisRecord> output =\n         pipelineRead.apply(\n             KinesisIO.read()\n-                .withStreamName(options.getAwsKinesisStream())\n+                .withStreamName(streamName)\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNDAxOQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464704019", "bodyText": "Is this something we're going to have to keep up-to-date? Is it possible to just omit it?", "author": "TheNeuralBit", "createdAt": "2020-08-03T22:56:16Z", "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -99,28 +116,101 @@ private void runRead() {\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n-                    Regions.fromName(options.getAwsKinesisRegion()))\n-                .withMaxNumRecords(numberOfRows)\n+                    Regions.fromName(options.getAwsKinesisRegion()),\n+                    options.getAwsServiceEndpoint(),\n+                    options.getAwsVerifyCertificate())\n+                .withMaxNumRecords(options.getNumberOfRecords())\n                 // to prevent endless running in case of error\n-                .withMaxReadTime(Duration.standardMinutes(10))\n+                .withMaxReadTime(Duration.standardMinutes(10L))\n                 .withInitialPositionInStream(InitialPositionInStream.AT_TIMESTAMP)\n                 .withInitialTimestampInStream(now)\n                 .withRequestRecordsLimit(1000));\n \n     PAssert.thatSingleton(output.apply(\"Count All\", Count.globally()))\n-        .isEqualTo((long) numberOfRows);\n+        .isEqualTo((long) options.getNumberOfRecords());\n \n     PCollection<String> consolidatedHashcode =\n         output\n             .apply(ParDo.of(new ExtractDataValues()))\n             .apply(\"Hash row contents\", Combine.globally(new HashingFn()).withoutDefaults());\n \n     PAssert.that(consolidatedHashcode)\n-        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(numberOfRows));\n+        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(options.getNumberOfRecords()));\n \n     pipelineRead.run().waitUntilFinish();\n   }\n \n+  /** Necessary setup for localstack environment. */\n+  private static void setupLocalstack() throws Exception {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+\n+    // For some unclear reason localstack requires the timestamp in seconds\n+    now = Instant.ofEpochMilli(Long.divideUnsigned(Instant.now().getMillis(), 1000));\n+\n+    localstackContainer =\n+        new LocalStackContainer(\"0.11.3\")", "originalCommit": "6fe4b7efbbd00cfc0542c4100d181fc61c9d0008", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0MjIxMw==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464842213", "bodyText": "I hardcoded it because some previous versions didn't work (it was impossible to create a stream using kinesis sdk) without any order. It can be changed to \"latest\" but then it's possible that the test will stop working after the localstack image update.", "author": "piotr-szuberski", "createdAt": "2020-08-04T07:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNDAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0NjQwMQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464846401", "bodyText": "The default version (no param constructor) is 0.8.6, but it is one of those that don't work.", "author": "piotr-szuberski", "createdAt": "2020-08-04T07:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNDAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1MzMyNQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r464853325", "bodyText": "I changed it to the \"latest\" with a comment that it can potentially break after an image update.", "author": "piotr-szuberski", "createdAt": "2020-08-04T07:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNDAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4OTIwMQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r465389201", "bodyText": "Hm based on that I think what you had before (hard-code \"0.11.3\") would be preferable.That way the test is deterministic.  Let's break it out into a constant LOCALSTACK_VERSION or something though.\nSorry for the churn \ud83d\ude2c", "author": "TheNeuralBit", "createdAt": "2020-08-04T23:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNDAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3OTI2Mg==", "url": "https://github.com/apache/beam/pull/12422#discussion_r465579262", "bodyText": "Not a problem at all, it's me who did it without consulting! ;) Done.", "author": "piotr-szuberski", "createdAt": "2020-08-05T08:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNDAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbc54d970bd4e6bdaaa39441a10bf5f9b70fc271", "chunk": "diff --git a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\nindex 7d2d0bf98a..e53a12d8f0 100644\n--- a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n+++ b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n\n@@ -112,7 +123,7 @@ public class KinesisIOIT implements Serializable {\n     PCollection<KinesisRecord> output =\n         pipelineRead.apply(\n             KinesisIO.read()\n-                .withStreamName(options.getAwsKinesisStream())\n+                .withStreamName(streamName)\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n"}}, {"oid": "fbc54d970bd4e6bdaaa39441a10bf5f9b70fc271", "url": "https://github.com/apache/beam/commit/fbc54d970bd4e6bdaaa39441a10bf5f9b70fc271", "message": "[BEAM-601] Run KinesisIOIT withtestcontainers with localstack", "committedDate": "2020-08-05T08:58:52Z", "type": "commit"}, {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0", "url": "https://github.com/apache/beam/commit/eb11a8ad83ecc932ad1e723b93b2f879710027e0", "message": "[BEAM-601] Add kinesis integration test to Java postcommit", "committedDate": "2020-08-05T08:59:08Z", "type": "commit"}, {"oid": "eb11a8ad83ecc932ad1e723b93b2f879710027e0", "url": "https://github.com/apache/beam/commit/eb11a8ad83ecc932ad1e723b93b2f879710027e0", "message": "[BEAM-601] Add kinesis integration test to Java postcommit", "committedDate": "2020-08-05T08:59:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMjA4MQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r465702081", "bodyText": "Why you decided to modify BasicKinesisProvider and not just create a new provider class for testing that extends this basic one?", "author": "aromanenko-dev", "createdAt": "2020-08-05T12:50:03Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/BasicKinesisProvider.java", "diffHunk": "@@ -39,16 +40,27 @@\n   private final String secretKey;\n   private final Regions region;\n   private final @Nullable String serviceEndpoint;\n+  private final boolean verifyCertificate;\n \n   BasicKinesisProvider(\n-      String accessKey, String secretKey, Regions region, @Nullable String serviceEndpoint) {\n+      String accessKey,\n+      String secretKey,\n+      Regions region,\n+      @Nullable String serviceEndpoint,\n+      boolean verifyCertificate) {\n     checkArgument(accessKey != null, \"accessKey can not be null\");\n     checkArgument(secretKey != null, \"secretKey can not be null\");\n     checkArgument(region != null, \"region can not be null\");\n     this.accessKey = accessKey;\n     this.secretKey = secretKey;\n     this.region = region;\n     this.serviceEndpoint = serviceEndpoint;\n+    this.verifyCertificate = verifyCertificate;\n+  }\n+\n+  BasicKinesisProvider(", "originalCommit": "eb11a8ad83ecc932ad1e723b93b2f879710027e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1MjgwMg==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466252802", "bodyText": "Service endpoint can be configured in the KinesisIO and I thought that omitting it in the producer configuration was a bug.\nCertificate verification is needed for cross-language tests (PR 12297), we would need to use this TestKinesisProvider if verify_certificate was provided there.", "author": "piotr-szuberski", "createdAt": "2020-08-06T09:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMjA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2MTY3OA==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466361678", "bodyText": "I'm not sure that service endpoint is used in com.amazonaws.services.kinesis.producer.KinesisProducer which is actually used for KinesisIO.Write. Am I mistaken?", "author": "aromanenko-dev", "createdAt": "2020-08-06T12:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMjA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyOTYxNQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466629615", "bodyText": "When you use KinesisIO.write()..withAWSClientsProvider(\"accesskey\", \"secretkey\", \"region\", \"serviceEndpointUrl\") then without my modification beam will try to use real AWS url instead of the given \"serviceEndpointUrl\". I don't think this is the desired behaviour, but correct me if I'm wrong or I don't understand something (which is very probable, I haven't used AWS much in my life).", "author": "piotr-szuberski", "createdAt": "2020-08-06T19:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMjA4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NDEzOA==", "url": "https://github.com/apache/beam/pull/12422#discussion_r465794138", "bodyText": "Could you elaborate why the stream name is partly hardcoded and not configurable as it was before? We run KinesisIOIT on our \"in-house\" env against real Kinesis instance with pre-created stream with different privileges.\nProbably, we should do this only in case of testing against LocalStack.", "author": "aromanenko-dev", "createdAt": "2020-08-05T15:03:14Z", "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -34,34 +42,52 @@\n import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n-import org.joda.time.Instant;\n+import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.localstack.LocalStackContainer;\n \n /**\n  * Integration test, that writes and reads data to and from real Kinesis. You need to provide {@link\n- * KinesisTestOptions} in order to run this.\n+ * KinesisTestOptions} in order to run this if you want to test it with production setup. By default\n+ * when no options are provided an instance of localstack is used.\n  */\n @RunWith(JUnit4.class)\n public class KinesisIOIT implements Serializable {\n-  private static int numberOfShards;\n-  private static int numberOfRows;\n+  private static final String LOCALSTACK_VERSION = \"0.11.3\";\n \n   @Rule public TestPipeline pipelineWrite = TestPipeline.create();\n   @Rule public TestPipeline pipelineRead = TestPipeline.create();\n \n+  private static LocalStackContainer localstackContainer;\n+  private static String streamName;\n+  private static AmazonKinesis kinesisClient;\n+\n   private static KinesisTestOptions options;\n-  private static final Instant now = Instant.now();\n \n   @BeforeClass\n-  public static void setup() {\n+  public static void setup() throws Exception {\n     PipelineOptionsFactory.register(KinesisTestOptions.class);\n     options = TestPipeline.testingPipelineOptions().as(KinesisTestOptions.class);\n-    numberOfShards = options.getNumberOfShards();\n-    numberOfRows = options.getNumberOfRecords();\n+    if (doUseLocalstack()) {\n+      setupLocalstack();\n+    }\n+    kinesisClient = createKinesisClient();\n+    streamName = \"beam_test_kinesis\" + UUID.randomUUID();", "originalCommit": "eb11a8ad83ecc932ad1e723b93b2f879710027e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0OTg4OQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466249889", "bodyText": "What I meant was to create a new stream just for testing purpose also on real Kinesis account instead of using an existing one which could have some data already written (and thus the test's correctness would be violated assuming that there can be data continously written to an existing stream or running the test twice at the same moment).\nI didn't think about things like different privileges on a pre-created stream. That's a good point and I agree. I'm not sure who is the target for this test - is it Beam's CI or a user who wants to test Beam against his Kinesis account?", "author": "piotr-szuberski", "createdAt": "2020-08-06T08:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NDEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTgyNg==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466299826", "bodyText": "I believe it should be both. In my company, we run it on our environment with our own privileges since Beam till now didn't have a dedicated access to AWS Kinesis (though, it could be changed in the future). In any case, I'd recommend to split creating/deleting a stream and writing/reading to/from steam parts since, as I mentioned before, they could have different privileges. So, I'd move the stream managing into Jenkins script and/or make it optional in KinesisIOIT (for example, use it only when localstack is used).\nAlso, we should allow to configure a stream name.", "author": "aromanenko-dev", "createdAt": "2020-08-06T09:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NDEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMTEyNg==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466611126", "bodyText": "Ok then, I'll leave the stream creation/deletion in localstack setup only. Thanks for explanation!", "author": "piotr-szuberski", "createdAt": "2020-08-06T18:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NDEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "87484f4281ca8d3d8893a019182ef762d18151f8", "chunk": "diff --git a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\nindex e53a12d8f0..9daf33b662 100644\n--- a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n+++ b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n\n@@ -42,6 +41,7 @@ import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.ParDo;\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n+import org.joda.time.Instant;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5Nzc1Mg==", "url": "https://github.com/apache/beam/pull/12422#discussion_r465797752", "bodyText": "Wouldn't be enough just to add useLocalstack option to KinesisTestOptions?", "author": "aromanenko-dev", "createdAt": "2020-08-05T15:08:28Z", "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -95,32 +123,114 @@ private void runRead() {\n     PCollection<KinesisRecord> output =\n         pipelineRead.apply(\n             KinesisIO.read()\n-                .withStreamName(options.getAwsKinesisStream())\n+                .withStreamName(streamName)\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n-                    Regions.fromName(options.getAwsKinesisRegion()))\n-                .withMaxNumRecords(numberOfRows)\n+                    Regions.fromName(options.getAwsKinesisRegion()),\n+                    options.getAwsServiceEndpoint(),\n+                    options.getAwsVerifyCertificate())\n+                .withMaxNumRecords(options.getNumberOfRecords())\n                 // to prevent endless running in case of error\n-                .withMaxReadTime(Duration.standardMinutes(10))\n-                .withInitialPositionInStream(InitialPositionInStream.AT_TIMESTAMP)\n-                .withInitialTimestampInStream(now)\n+                .withMaxReadTime(Duration.standardMinutes(10L))\n+                .withInitialPositionInStream(InitialPositionInStream.TRIM_HORIZON)\n                 .withRequestRecordsLimit(1000));\n \n     PAssert.thatSingleton(output.apply(\"Count All\", Count.globally()))\n-        .isEqualTo((long) numberOfRows);\n+        .isEqualTo((long) options.getNumberOfRecords());\n \n     PCollection<String> consolidatedHashcode =\n         output\n             .apply(ParDo.of(new ExtractDataValues()))\n             .apply(\"Hash row contents\", Combine.globally(new HashingFn()).withoutDefaults());\n \n     PAssert.that(consolidatedHashcode)\n-        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(numberOfRows));\n+        .containsInAnyOrder(TestRow.getExpectedHashForRowCount(options.getNumberOfRecords()));\n \n     pipelineRead.run().waitUntilFinish();\n   }\n \n+  /** Necessary setup for localstack environment. */\n+  private static void setupLocalstack() {\n+    System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, \"true\");\n+    System.setProperty(SDKGlobalConfiguration.AWS_CBOR_DISABLE_SYSTEM_PROPERTY, \"true\");\n+\n+    localstackContainer =\n+        new LocalStackContainer(LOCALSTACK_VERSION)\n+            .withServices(LocalStackContainer.Service.KINESIS)\n+            .withEnv(\"USE_SSL\", \"true\")\n+            .withStartupAttempts(3);\n+    localstackContainer.start();\n+\n+    options.setAwsServiceEndpoint(\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getServiceEndpoint()\n+            .replace(\"http\", \"https\"));\n+    options.setAwsKinesisRegion(\n+        localstackContainer\n+            .getEndpointConfiguration(LocalStackContainer.Service.KINESIS)\n+            .getSigningRegion());\n+    options.setAwsAccessKey(\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSAccessKeyId());\n+    options.setAwsSecretKey(\n+        localstackContainer.getDefaultCredentialsProvider().getCredentials().getAWSSecretKey());\n+    options.setNumberOfRecords(1000);\n+    options.setNumberOfShards(1);\n+    options.setAwsKinesisStream(\"beam_kinesis_test\");\n+    options.setAwsVerifyCertificate(false);\n+  }\n+\n+  private static AmazonKinesis createKinesisClient() {\n+    AmazonKinesisClientBuilder clientBuilder = AmazonKinesisClientBuilder.standard();\n+\n+    AWSCredentialsProvider credentialsProvider =\n+        new AWSStaticCredentialsProvider(\n+            new BasicAWSCredentials(options.getAwsAccessKey(), options.getAwsSecretKey()));\n+    clientBuilder.setCredentials(credentialsProvider);\n+\n+    if (options.getAwsServiceEndpoint() != null) {\n+      AwsClientBuilder.EndpointConfiguration endpointConfiguration =\n+          new AwsClientBuilder.EndpointConfiguration(\n+              options.getAwsServiceEndpoint(), options.getAwsKinesisRegion());\n+      clientBuilder.setEndpointConfiguration(endpointConfiguration);\n+    } else {\n+      clientBuilder.setRegion(options.getAwsKinesisRegion());\n+    }\n+\n+    return clientBuilder.build();\n+  }\n+\n+  private static void createStream() throws Exception {\n+    kinesisClient.createStream(streamName, 1);\n+    int repeats = 10;\n+    for (int i = 0; i <= repeats; ++i) {\n+      String streamStatus =\n+          kinesisClient.describeStream(streamName).getStreamDescription().getStreamStatus();\n+      if (\"ACTIVE\".equals(streamStatus)) {\n+        break;\n+      }\n+      if (i == repeats) {\n+        throw new RuntimeException(\"Unable to initialize stream\");\n+      }\n+      Thread.sleep(1000L);\n+    }\n+  }\n+\n+  /** Check whether pipeline options were provided. If not, use localstack container. */\n+  private static boolean doUseLocalstack() {", "originalCommit": "eb11a8ad83ecc932ad1e723b93b2f879710027e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyMTIyMw==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466621223", "bodyText": "Yeah, definitely.", "author": "piotr-szuberski", "createdAt": "2020-08-06T18:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5Nzc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "87484f4281ca8d3d8893a019182ef762d18151f8", "chunk": "diff --git a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\nindex e53a12d8f0..9daf33b662 100644\n--- a/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n+++ b/sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java\n\n@@ -123,7 +122,7 @@ public class KinesisIOIT implements Serializable {\n     PCollection<KinesisRecord> output =\n         pipelineRead.apply(\n             KinesisIO.read()\n-                .withStreamName(streamName)\n+                .withStreamName(options.getAwsKinesisStream())\n                 .withAWSClientsProvider(\n                     options.getAwsAccessKey(),\n                     options.getAwsSecretKey(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2MzM1NQ==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466363355", "bodyText": "typo: verif y Certificate", "author": "aromanenko-dev", "createdAt": "2020-08-06T12:04:17Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -413,6 +413,28 @@ public Read withAWSClientsProvider(\n           new BasicKinesisProvider(awsAccessKey, awsSecretKey, region, serviceEndpoint));\n     }\n \n+    /**\n+     * Specify credential details and region to be used to read from Kinesis. If you need more\n+     * sophisticated credential protocol, then you should look at {@link\n+     * Read#withAWSClientsProvider(AWSClientsProvider)}.\n+     *\n+     * <p>The {@code serviceEndpoint} sets an alternative service host. This is useful to execute\n+     * the tests with Kinesis service emulator.\n+     *\n+     * <p>The {@code veriftCertificate} disables or enables certificate verification. Never set it", "originalCommit": "eb11a8ad83ecc932ad1e723b93b2f879710027e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyMTExNw==", "url": "https://github.com/apache/beam/pull/12422#discussion_r466621117", "bodyText": "Good catch, thanks!", "author": "piotr-szuberski", "createdAt": "2020-08-06T18:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2MzM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "87484f4281ca8d3d8893a019182ef762d18151f8", "chunk": "diff --git a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\nindex 62f3e141ba..ba18cd0d28 100644\n--- a/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n+++ b/sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java\n\n@@ -421,7 +421,7 @@ public final class KinesisIO {\n      * <p>The {@code serviceEndpoint} sets an alternative service host. This is useful to execute\n      * the tests with Kinesis service emulator.\n      *\n-     * <p>The {@code veriftCertificate} disables or enables certificate verification. Never set it\n+     * <p>The {@code verifyCertificate} disables or enables certificate verification. Never set it\n      * to false in production.\n      */\n     public Read withAWSClientsProvider(\n"}}, {"oid": "87484f4281ca8d3d8893a019182ef762d18151f8", "url": "https://github.com/apache/beam/commit/87484f4281ca8d3d8893a019182ef762d18151f8", "message": "Fixes after Alexey's code review", "committedDate": "2020-08-06T19:02:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNjQ5Mw==", "url": "https://github.com/apache/beam/pull/12422#discussion_r467936493", "bodyText": "Should this version comply with a version of localstack dependency (1.14.3)?", "author": "aromanenko-dev", "createdAt": "2020-08-10T14:19:16Z", "path": "sdks/java/io/kinesis/src/test/java/org/apache/beam/sdk/io/kinesis/KinesisIOIT.java", "diffHunk": "@@ -35,33 +42,51 @@\n import org.apache.beam.sdk.values.PCollection;\n import org.joda.time.Duration;\n import org.joda.time.Instant;\n+import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n+import org.testcontainers.containers.localstack.LocalStackContainer;\n \n /**\n  * Integration test, that writes and reads data to and from real Kinesis. You need to provide {@link\n- * KinesisTestOptions} in order to run this.\n+ * KinesisTestOptions} in order to run this if you want to test it with production setup. By default\n+ * when no options are provided an instance of localstack is used.\n  */\n @RunWith(JUnit4.class)\n public class KinesisIOIT implements Serializable {\n-  private static int numberOfShards;\n-  private static int numberOfRows;\n+  private static final String LOCALSTACK_VERSION = \"0.11.3\";", "originalCommit": "87484f4281ca8d3d8893a019182ef762d18151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2MjY5MA==", "url": "https://github.com/apache/beam/pull/12422#discussion_r467962690", "bodyText": "Not at all. 0.11.3 is the latest localstack image available on Dockerhub.", "author": "piotr-szuberski", "createdAt": "2020-08-10T14:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNjQ5Mw=="}], "type": "inlineReview", "revised_code": null}]}