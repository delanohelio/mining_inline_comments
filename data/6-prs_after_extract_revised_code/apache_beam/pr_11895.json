{"pr_number": 11895, "pr_title": "[BEAM-9879] support STRING_AGG function in Beam ZetaSQL", "pr_createdAt": "2020-06-02T17:51:40Z", "pr_url": "https://github.com/apache/beam/pull/11895", "timeline": [{"oid": "641f8c6eb64af864970ead89cd9dc5070e9bc34d", "url": "https://github.com/apache/beam/commit/641f8c6eb64af864970ead89cd9dc5070e9bc34d", "message": "implemented basic string_agg", "committedDate": "2020-06-02T17:24:21Z", "type": "commit"}, {"oid": "24727b56d6f058b1557ffa2daefeb706274e1fb0", "url": "https://github.com/apache/beam/commit/24727b56d6f058b1557ffa2daefeb706274e1fb0", "message": "[BEAM-9879] Null String Not Encoded", "committedDate": "2020-06-02T17:48:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA4MTQwNA==", "url": "https://github.com/apache/beam/pull/11895#discussion_r434081404", "bodyText": "In fact, I think it was a decision to not handle NULL in string coder.\nSo the easiest way to move forward is to not include NULL in your test case, and leave a comment to say that STRING_AGG does not handle NULL value", "author": "amaliujia", "createdAt": "2020-06-02T18:14:58Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -3130,6 +3130,23 @@ public void testUnnestArrayColumn() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testStringAggregation() {\n+    String sql =\n+        \"SELECT STRING_AGG(fruit) AS string_agg\"\n+            + \" FROM UNNEST([\\\"apple\\\", \\\"pear\\\", NULL, \\\"banana\\\", \\\"pear\\\"]) AS fruit\";", "originalCommit": "24727b56d6f058b1557ffa2daefeb706274e1fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a05f49f64fa2cfcffc1f4ef97e0c9931bb5c9663", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java b/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\nindex 271b47840c..b9cf2e3619 100644\n--- a/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\n+++ b/sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java\n\n@@ -3134,15 +3134,14 @@ public class ZetaSQLDialectSpecTest {\n   public void testStringAggregation() {\n     String sql =\n         \"SELECT STRING_AGG(fruit) AS string_agg\"\n-            + \" FROM UNNEST([\\\"apple\\\", \\\"pear\\\", NULL, \\\"banana\\\", \\\"pear\\\"]) AS fruit\";\n+            + \" FROM UNNEST([\\\"apple\\\", \\\"pear\\\", \\\"banana\\\", \\\"pear\\\"]) AS fruit\";\n     ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n     BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n     PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n \n     Schema schema = Schema.builder().addStringField(\"string_field\").build();\n     PAssert.that(stream)\n-        .containsInAnyOrder(\n-            Row.withSchema(schema).addValue(\"apple,pear,banana,pear\").build());\n+        .containsInAnyOrder(Row.withSchema(schema).addValue(\"apple,pear,banana,pear\").build());\n \n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5MjgxOQ==", "url": "https://github.com/apache/beam/pull/11895#discussion_r434092819", "bodyText": "Remove this line in the final PR.", "author": "amaliujia", "createdAt": "2020-06-02T18:29:00Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -158,6 +158,9 @@ public RelRoot rel(String sql, QueryParameters params) {\n \n     RelNode convertedNode =\n         QueryStatementConverter.convertRootQuery(context, (ResolvedQueryStmt) statement);\n+\n+    LOG.info(\"Calcite Plan>\\n\" + convertedNode.toString());", "originalCommit": "24727b56d6f058b1557ffa2daefeb706274e1fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a05f49f64fa2cfcffc1f4ef97e0c9931bb5c9663", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java\nindex 846872b7ee..7ccc44ba58 100644\n--- a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java\n+++ b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java\n\n@@ -159,8 +159,6 @@ public class ZetaSQLPlannerImpl implements Planner {\n     RelNode convertedNode =\n         QueryStatementConverter.convertRootQuery(context, (ResolvedQueryStmt) statement);\n \n-    LOG.info(\"Calcite Plan>\\n\" + convertedNode.toString());\n-\n     return RelRoot.of(convertedNode, SqlKind.ALL);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5MzA3MA==", "url": "https://github.com/apache/beam/pull/11895#discussion_r434093070", "bodyText": "Ah yes. This should also work.", "author": "amaliujia", "createdAt": "2020-06-02T18:29:28Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlStdOperatorMappingTable.java", "diffHunk": "@@ -211,7 +213,7 @@\n           // aggregate UDF\n           // .put(\"array_agg\", )\n           // .put(\"array_concat_agg\")\n-          // .put(\"string_agg\")\n+          .put(\"string_agg\", SqlOperators.STRING_AGG_STRING_FN)", "originalCommit": "24727b56d6f058b1557ffa2daefeb706274e1fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00a76000c0821d99bd1b2a12227a7357273dc92b", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlStdOperatorMappingTable.java b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlStdOperatorMappingTable.java\nindex a4fed294b0..afb111e04c 100644\n--- a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlStdOperatorMappingTable.java\n+++ b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlStdOperatorMappingTable.java\n\n@@ -213,7 +212,7 @@ public class SqlStdOperatorMappingTable {\n           // aggregate UDF\n           // .put(\"array_agg\", )\n           // .put(\"array_concat_agg\")\n-          .put(\"string_agg\", SqlOperators.STRING_AGG_STRING_FN)\n+          .put(\"string_agg\", SqlOperators.STRING_AGG_STRING_FN) // NULL values not supported\n           // .put(\"bit_and\")\n           // .put(\"bit_or\")\n           // .put(\"bit_xor\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NTIxNg==", "url": "https://github.com/apache/beam/pull/11895#discussion_r434095216", "bodyText": "Nice. By doing so it becomes a extensible way to define other AGG functions that Calcite does not have.\nGlad you figured it out.", "author": "amaliujia", "createdAt": "2020-06-02T18:33:30Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlOperators.java", "diffHunk": "@@ -72,6 +82,23 @@ public static SqlFunction createSimpleSqlFunction(String name, SqlTypeName retur\n         SqlFunctionCategory.USER_DEFINED_FUNCTION);\n   }\n \n+  public static SqlUserDefinedAggFunction createUdafOperator(\n+      String name,\n+      SqlReturnTypeInference returnTypeInference,\n+      AggregateFunction function) {\n+    return new SqlUserDefinedAggFunction(", "originalCommit": "24727b56d6f058b1557ffa2daefeb706274e1fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a05f49f64fa2cfcffc1f4ef97e0c9931bb5c9663", "chunk": "diff --git a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlOperators.java b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlOperators.java\nindex cddf4baa98..8a8af5883b 100644\n--- a/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlOperators.java\n+++ b/sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlOperators.java\n\n@@ -83,9 +84,7 @@ public class SqlOperators {\n   }\n \n   public static SqlUserDefinedAggFunction createUdafOperator(\n-      String name,\n-      SqlReturnTypeInference returnTypeInference,\n-      AggregateFunction function) {\n+      String name, SqlReturnTypeInference returnTypeInference, AggregateFunction function) {\n     return new SqlUserDefinedAggFunction(\n         new SqlIdentifier(name, SqlParserPos.ZERO),\n         returnTypeInference,\n"}}, {"oid": "a05f49f64fa2cfcffc1f4ef97e0c9931bb5c9663", "url": "https://github.com/apache/beam/commit/a05f49f64fa2cfcffc1f4ef97e0c9931bb5c9663", "message": "[BEAM-9879] fixed minor style issues", "committedDate": "2020-06-03T11:57:12Z", "type": "commit"}, {"oid": "00a76000c0821d99bd1b2a12227a7357273dc92b", "url": "https://github.com/apache/beam/commit/00a76000c0821d99bd1b2a12227a7357273dc92b", "message": "[BEAM-9879] fixed minor style issues", "committedDate": "2020-06-03T12:02:33Z", "type": "commit"}, {"oid": "93b49183706a13a038fea3fe03d89e1ae9e4c009", "url": "https://github.com/apache/beam/commit/93b49183706a13a038fea3fe03d89e1ae9e4c009", "message": "Merge branch 'master' into BEAM-9879-stringaggregation", "committedDate": "2020-06-03T12:05:27Z", "type": "commit"}]}