{"pr_number": 11108, "pr_title": "[BEAM-9490] Guard referencing for environment expiration via a lock", "pr_createdAt": "2020-03-12T15:26:02Z", "pr_url": "https://github.com/apache/beam/pull/11108", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDI2Mw==", "url": "https://github.com/apache/beam/pull/11108#discussion_r391700263", "bodyText": "Unfortunately, we lose the type infos here. There is no way without calling a builder method to get the correct type.", "author": "mxm", "createdAt": "2020-03-12T15:27:04Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -161,29 +167,33 @@ public static DefaultJobBundleFactory create(\n     this.stageIdGenerator = stageIdGenerator;\n     this.environmentExpirationMillis = getEnvironmentExpirationMillis(jobInfo);\n     this.loadBalanceBundles = shouldLoadBalanceBundles(jobInfo);\n+    this.environmentCacheLocks = createEnvironmentCacheLocks(getMaxEnvironmentClients(jobInfo));\n     this.environmentCaches =\n         createEnvironmentCaches(serverFactory -> serverInfo, getMaxEnvironmentClients(jobInfo));\n     this.availableCachesSemaphore = new Semaphore(environmentCaches.size(), true);\n     this.availableCaches = new LinkedBlockingDeque<>(environmentCaches);\n-    this.evictedActiveClients = Sets.newIdentityHashSet();\n+    this.evictedActiveClients = Sets.newConcurrentHashSet();\n+  }\n+\n+  private ImmutableList<Lock> createEnvironmentCacheLocks(int count) {\n+    ImmutableList.Builder<Lock> locksForCaches = ImmutableList.builder();\n+    for (int i = 0; i < count; i++) {\n+      final Lock refLock;\n+      if (environmentExpirationMillis > 0) {\n+        // The lock ensures there is no race condition between expiring an environment and a client\n+        // still attempting to use it, hence referencing it.\n+        refLock = new ReentrantLock(true);\n+      } else {\n+        refLock = NoopLock.get();\n+      }\n+      locksForCaches.add(refLock);\n+    }\n+    return locksForCaches.build();\n   }\n \n   private ImmutableList<LoadingCache<Environment, WrappedSdkHarnessClient>> createEnvironmentCaches(\n       ThrowingFunction<ServerFactory, ServerInfo> serverInfoCreator, int count) {\n-    CacheBuilder<Environment, WrappedSdkHarnessClient> builder =\n-        CacheBuilder.newBuilder()\n-            .removalListener(\n-                (RemovalNotification<Environment, WrappedSdkHarnessClient> notification) -> {\n-                  WrappedSdkHarnessClient client = notification.getValue();\n-                  int refCount = client.unref();\n-                  if (refCount > 0) {\n-                    LOG.warn(\n-                        \"Expiring environment {} with {} remaining bundle references. Taking note to clean it up during shutdown if the references are not removed by then.\",\n-                        notification.getKey(),\n-                        refCount);\n-                    evictedActiveClients.add(client);\n-                  }\n-                });\n+    CacheBuilder builder = CacheBuilder.newBuilder();", "originalCommit": "84e447410ba22827e635b82a4aeb9acc23a7daac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MjU2Nw==", "url": "https://github.com/apache/beam/pull/11108#discussion_r391752567", "bodyText": "This is resolved now.", "author": "mxm", "createdAt": "2020-03-12T16:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "55b3268d2f2d281002029e19588353fc34ecfe5e", "chunk": "diff --git a/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java b/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\nindex 5a236a7661..0e3468eea2 100644\n--- a/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\n+++ b/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\n\n@@ -193,39 +191,42 @@ public class DefaultJobBundleFactory implements JobBundleFactory {\n \n   private ImmutableList<LoadingCache<Environment, WrappedSdkHarnessClient>> createEnvironmentCaches(\n       ThrowingFunction<ServerFactory, ServerInfo> serverInfoCreator, int count) {\n-    CacheBuilder builder = CacheBuilder.newBuilder();\n-\n-    if (environmentExpirationMillis > 0) {\n-      builder.expireAfterWrite(environmentExpirationMillis, TimeUnit.MILLISECONDS);\n-    }\n \n     ImmutableList.Builder<LoadingCache<Environment, WrappedSdkHarnessClient>> caches =\n         ImmutableList.builder();\n     for (int i = 0; i < count; i++) {\n+\n       final Lock refLock = environmentCacheLocks.get(i);\n-      builder = builder.removalListener(\n-          notification -> {\n-            WrappedSdkHarnessClient client = (WrappedSdkHarnessClient) notification.getValue();\n-            final int refCount;\n-            try {\n-              // We need to use a lock here to ensure we are not causing the environment to be\n-              // removed if beforehand a StageBundleFactory has retrieved it but not yet issued\n-              // ref() on it.\n-              refLock.lock();\n-              refCount = client.unref();\n-            } finally {\n-              refLock.unlock();\n-            }\n-            if (refCount > 0) {\n-              LOG.warn(\n-                  \"Expiring environment {} with {} remaining bundle references. Taking note to clean it up during shutdown if the references are not removed by then.\",\n-                  notification.getKey(),\n-                  refCount);\n-              evictedActiveClients.add(client);\n-            }\n-          });\n-      LoadingCache<Environment, WrappedSdkHarnessClient> cache =\n-          builder.build(\n+      CacheBuilder<Environment, WrappedSdkHarnessClient> cacheBuilder =\n+          CacheBuilder.newBuilder()\n+              .removalListener(\n+                  notification -> {\n+                    WrappedSdkHarnessClient client = notification.getValue();\n+                    final int refCount;\n+                    try {\n+                      // We need to use a lock here to ensure we are not causing the environment to\n+                      // be removed if beforehand a StageBundleFactory has retrieved it but not yet\n+                      // issued ref() on it.\n+                      refLock.lock();\n+                      refCount = client.unref();\n+                    } finally {\n+                      refLock.unlock();\n+                    }\n+                    if (refCount > 0) {\n+                      LOG.warn(\n+                          \"Expiring environment {} with {} remaining bundle references. Taking note to clean it up during shutdown if the references are not removed by then.\",\n+                          notification.getKey(),\n+                          refCount);\n+                      evictedActiveClients.add(client);\n+                    }\n+                  });\n+\n+      if (environmentExpirationMillis > 0) {\n+        cacheBuilder.expireAfterWrite(environmentExpirationMillis, TimeUnit.MILLISECONDS);\n+      }\n+\n+      caches.add(\n+          cacheBuilder.build(\n               new CacheLoader<Environment, WrappedSdkHarnessClient>() {\n                 @Override\n                 public WrappedSdkHarnessClient load(Environment environment) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDkwNQ==", "url": "https://github.com/apache/beam/pull/11108#discussion_r391700905", "bodyText": "Again, not nice but unfortunately in this order we can't use proper type information.", "author": "mxm", "createdAt": "2020-03-12T15:28:03Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -192,6 +202,28 @@ public static DefaultJobBundleFactory create(\n     ImmutableList.Builder<LoadingCache<Environment, WrappedSdkHarnessClient>> caches =\n         ImmutableList.builder();\n     for (int i = 0; i < count; i++) {\n+      final Lock refLock = environmentCacheLocks.get(i);\n+      builder = builder.removalListener(\n+          notification -> {\n+            WrappedSdkHarnessClient client = (WrappedSdkHarnessClient) notification.getValue();", "originalCommit": "84e447410ba22827e635b82a4aeb9acc23a7daac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MjY3OA==", "url": "https://github.com/apache/beam/pull/11108#discussion_r391752678", "bodyText": "This is resolved now.", "author": "mxm", "createdAt": "2020-03-12T16:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9bf4d7638535e98ba956fe029758fdba8f57031", "chunk": "diff --git a/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java b/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\nindex 5a236a7661..cba6570da5 100644\n--- a/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\n+++ b/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\n\n@@ -203,27 +201,28 @@ public class DefaultJobBundleFactory implements JobBundleFactory {\n         ImmutableList.builder();\n     for (int i = 0; i < count; i++) {\n       final Lock refLock = environmentCacheLocks.get(i);\n-      builder = builder.removalListener(\n-          notification -> {\n-            WrappedSdkHarnessClient client = (WrappedSdkHarnessClient) notification.getValue();\n-            final int refCount;\n-            try {\n-              // We need to use a lock here to ensure we are not causing the environment to be\n-              // removed if beforehand a StageBundleFactory has retrieved it but not yet issued\n-              // ref() on it.\n-              refLock.lock();\n-              refCount = client.unref();\n-            } finally {\n-              refLock.unlock();\n-            }\n-            if (refCount > 0) {\n-              LOG.warn(\n-                  \"Expiring environment {} with {} remaining bundle references. Taking note to clean it up during shutdown if the references are not removed by then.\",\n-                  notification.getKey(),\n-                  refCount);\n-              evictedActiveClients.add(client);\n-            }\n-          });\n+      builder =\n+          builder.removalListener(\n+              notification -> {\n+                WrappedSdkHarnessClient client = (WrappedSdkHarnessClient) notification.getValue();\n+                final int refCount;\n+                try {\n+                  // We need to use a lock here to ensure we are not causing the environment to be\n+                  // removed if beforehand a StageBundleFactory has retrieved it but not yet issued\n+                  // ref() on it.\n+                  refLock.lock();\n+                  refCount = client.unref();\n+                } finally {\n+                  refLock.unlock();\n+                }\n+                if (refCount > 0) {\n+                  LOG.warn(\n+                      \"Expiring environment {} with {} remaining bundle references. Taking note to clean it up during shutdown if the references are not removed by then.\",\n+                      notification.getKey(),\n+                      refCount);\n+                  evictedActiveClients.add(client);\n+                }\n+              });\n       LoadingCache<Environment, WrappedSdkHarnessClient> cache =\n           builder.build(\n               new CacheLoader<Environment, WrappedSdkHarnessClient>() {\n"}}, {"oid": "d9bf4d7638535e98ba956fe029758fdba8f57031", "url": "https://github.com/apache/beam/commit/d9bf4d7638535e98ba956fe029758fdba8f57031", "message": "[BEAM-9490] Guard referencing for environment expiration via a lock\n\nWhen environment expiration is configured, environments are removed from a cache\nmap after some amount of time. This cache map may be accessed by multiple\nExecutableStage transforms in parallel. During environment expiration there is a\nsmall time window which allows for an environment to still being used while\nanother transform removes, dereferences, and closes the environment. This is not\nexpected behavior.", "committedDate": "2020-03-12T15:31:13Z", "type": "forcePushed"}, {"oid": "55b3268d2f2d281002029e19588353fc34ecfe5e", "url": "https://github.com/apache/beam/commit/55b3268d2f2d281002029e19588353fc34ecfe5e", "message": "[BEAM-9490] Guard referencing for environment expiration via a lock\n\nWhen environment expiration is configured, environments are removed from a cache\nmap after some amount of time. This cache map may be accessed by multiple\nExecutableStage transforms in parallel. During environment expiration there is a\nsmall time window which allows for an environment to still being used while\nanother transform removes, dereferences, and closes the environment. This is not\nexpected behavior.", "committedDate": "2020-03-12T16:42:32Z", "type": "forcePushed"}, {"oid": "5ec9b2b53a78b6212727c79630b68668fef7d3bc", "url": "https://github.com/apache/beam/commit/5ec9b2b53a78b6212727c79630b68668fef7d3bc", "message": "[BEAM-9490] Guard referencing for environment expiration via a lock\n\nWhen environment expiration is configured, environments are removed from a cache\nmap after some amount of time. This cache map may be accessed by multiple\nExecutableStage transforms in parallel. During environment expiration there is a\nsmall time window which allows for an environment to still being used while\nanother transform removes, dereferences, and closes the environment. This is not\nexpected behavior.", "committedDate": "2020-03-12T17:46:53Z", "type": "commit"}, {"oid": "5ec9b2b53a78b6212727c79630b68668fef7d3bc", "url": "https://github.com/apache/beam/commit/5ec9b2b53a78b6212727c79630b68668fef7d3bc", "message": "[BEAM-9490] Guard referencing for environment expiration via a lock\n\nWhen environment expiration is configured, environments are removed from a cache\nmap after some amount of time. This cache map may be accessed by multiple\nExecutableStage transforms in parallel. During environment expiration there is a\nsmall time window which allows for an environment to still being used while\nanother transform removes, dereferences, and closes the environment. This is not\nexpected behavior.", "committedDate": "2020-03-12T17:46:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNzY3MA==", "url": "https://github.com/apache/beam/pull/11108#discussion_r392417670", "bodyText": "This isn't picking the correct lock, addressed in 5ebae2c", "author": "tweise", "createdAt": "2020-03-13T19:04:26Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -406,8 +438,16 @@ public RemoteBundle getBundle(\n         availableCachesSemaphore.acquire();\n         // The blocking queue of caches for serving multiple bundles concurrently.\n         currentCache = availableCaches.take();\n-        client = currentCache.getUnchecked(executableStage.getEnvironment());\n-        client.ref();\n+        // Lock because the environment expiration can remove the ref for the client\n+        // which would close the underlying environment before we can ref it.\n+        Lock refLock = environmentCacheLocks.get(environmentIndex);", "originalCommit": "5ec9b2b53a78b6212727c79630b68668fef7d3bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU4MzMzNA==", "url": "https://github.com/apache/beam/pull/11108#discussion_r392583334", "bodyText": "Thanks for spotting this!", "author": "mxm", "createdAt": "2020-03-14T12:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNzY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "df63e8ab1073cba7d9407be4c343c8234c1318b4", "chunk": "diff --git a/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java b/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\nindex 7238eaeb9b..8af6d699ff 100644\n--- a/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\n+++ b/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java\n\n@@ -431,7 +433,7 @@ public class DefaultJobBundleFactory implements JobBundleFactory {\n       // TODO: Consider having BundleProcessor#newBundle take in an OutputReceiverFactory rather\n       // than constructing the receiver map here. Every bundle factory will need this.\n \n-      final LoadingCache<Environment, WrappedSdkHarnessClient> currentCache;\n+      final EnvironmentCacheAndLock currentCache;\n       final WrappedSdkHarnessClient client;\n       if (loadBalanceBundles) {\n         // The semaphore is used to ensure fairness, i.e. first stop first go.\n"}}, {"oid": "df63e8ab1073cba7d9407be4c343c8234c1318b4", "url": "https://github.com/apache/beam/commit/df63e8ab1073cba7d9407be4c343c8234c1318b4", "message": "[BEAM-9490] Use the lock that belongs to the cache when bundle load balancing is enabled", "committedDate": "2020-03-13T19:08:03Z", "type": "commit"}, {"oid": "df63e8ab1073cba7d9407be4c343c8234c1318b4", "url": "https://github.com/apache/beam/commit/df63e8ab1073cba7d9407be4c343c8234c1318b4", "message": "[BEAM-9490] Use the lock that belongs to the cache when bundle load balancing is enabled", "committedDate": "2020-03-13T19:08:03Z", "type": "forcePushed"}]}