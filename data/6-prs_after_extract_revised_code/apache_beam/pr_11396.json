{"pr_number": 11396, "pr_title": "[BEAM-9742] Add Configurable FluentBackoff to JdbcIO Write", "pr_createdAt": "2020-04-11T06:14:10Z", "pr_url": "https://github.com/apache/beam/pull/11396", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzkwOA==", "url": "https://github.com/apache/beam/pull/11396#discussion_r409007908", "bodyText": "We can't make FluentBackoff part of the public API surface since it is in the util package. It looks like other IO connectors have been creating their own RetryConfiguration class such as:\nSnsIO: \n  \n    \n      beam/sdks/java/io/amazon-web-services2/src/main/java/org/apache/beam/sdk/io/aws2/sns/SnsIO.java\n    \n    \n         Line 262\n      in\n      da9e172\n    \n    \n    \n    \n\n        \n          \n           public Write<T> withRetryConfiguration(RetryConfiguration retryConfiguration) { \n        \n    \n  \n\n\nSolrIO: \n  \n    \n      beam/sdks/java/io/solr/src/main/java/org/apache/beam/sdk/io/solr/SolrIO.java\n    \n    \n         Line 225\n      in\n      da9e172\n    \n    \n    \n    \n\n        \n          \n           public abstract static class RetryConfiguration implements Serializable { \n        \n    \n  \n\n\nand then converting them to any internal implementation that makes sense.\nMaking FluentBackoff or a RetryConfiguration public and shared across implementation might make sense but warrants a discussion on the dev@ mailing list to see what the community thinks.", "author": "lukecwik", "createdAt": "2020-04-15T17:21:24Z", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java", "diffHunk": "@@ -257,6 +258,28 @@ public boolean apply(SQLException e) {\n     }\n   }\n \n+  /**\n+   * This is the default {@link FluentBackoffConfiguration} that we use to retry when a {@link\n+   * SQLException} occurs.\n+   */\n+  public static class DefaultFluentBackoffConfiguration implements FluentBackoffConfiguration {", "originalCommit": "756528833a5c7acc5972ca0ec79f57148d62a4e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MjU3MA==", "url": "https://github.com/apache/beam/pull/11396#discussion_r409062570", "bodyText": "@lukecwik - cool! I will mail the dev group.", "author": "Akshay-Iyangar", "createdAt": "2020-04-15T18:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MzY5MA==", "url": "https://github.com/apache/beam/pull/11396#discussion_r409843690", "bodyText": "Waiting on updates on ML thread:\nhttps://lists.apache.org/thread.html/r7fde7b5c87c6008689a013fc113d869d3ac15cbc7a35e4534469b9ab%40%3Cdev.beam.apache.org%3E", "author": "lukecwik", "createdAt": "2020-04-16T20:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NTEwNQ==", "url": "https://github.com/apache/beam/pull/11396#discussion_r421795105", "bodyText": "It looks like we should stick with the pattern other IO authors have taken in the mean time.", "author": "lukecwik", "createdAt": "2020-05-07T21:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NzkwOA==", "url": "https://github.com/apache/beam/pull/11396#discussion_r422977908", "bodyText": "I agree with @lukecwik - we should stay consistent with that.", "author": "aromanenko-dev", "createdAt": "2020-05-11T11:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "01c11e7211937bde3c238fe3639f9dfe7774d093", "chunk": "diff --git a/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java b/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\nindex a8e8a77411..9424b7e45d 100644\n--- a/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\n+++ b/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\n\n@@ -258,28 +257,6 @@ public class JdbcIO {\n     }\n   }\n \n-  /**\n-   * This is the default {@link FluentBackoffConfiguration} that we use to retry when a {@link\n-   * SQLException} occurs.\n-   */\n-  public static class DefaultFluentBackoffConfiguration implements FluentBackoffConfiguration {\n-\n-    private final int maxRetries;\n-    private final long initialBackoff;\n-\n-    public DefaultFluentBackoffConfiguration(int maxRetries, long initialBackoff) {\n-      this.maxRetries = maxRetries;\n-      this.initialBackoff = initialBackoff;\n-    }\n-\n-    @Override\n-    public FluentBackoff configure() {\n-      return FluentBackoff.DEFAULT\n-          .withMaxRetries(maxRetries)\n-          .withInitialBackoff(Duration.standardSeconds(initialBackoff));\n-    }\n-  }\n-\n   private JdbcIO() {}\n \n   /**\n"}}, {"oid": "01c11e7211937bde3c238fe3639f9dfe7774d093", "url": "https://github.com/apache/beam/commit/01c11e7211937bde3c238fe3639f9dfe7774d093", "message": "[BEAM-9825] | Implement Intersect,Union,Except transforms (#11610)\n\n* [BEAM-9825] | Implement Intersect,Union,Except transforms", "committedDate": "2020-06-02T03:54:54Z", "type": "forcePushed"}, {"oid": "ed6e349e5cc090032cd6081697a27e15074942cc", "url": "https://github.com/apache/beam/commit/ed6e349e5cc090032cd6081697a27e15074942cc", "message": "[BEAM-9742] revert back to the older version", "committedDate": "2020-06-02T06:40:18Z", "type": "commit"}, {"oid": "65c677add991b20e4570b24801f23433987f289e", "url": "https://github.com/apache/beam/commit/65c677add991b20e4570b24801f23433987f289e", "message": "[BEAM-9742] Using retry configuration for fluent-backoff", "committedDate": "2020-06-02T21:52:20Z", "type": "commit"}, {"oid": "17abcd7499d52fd4de2dd149361508494bd39424", "url": "https://github.com/apache/beam/commit/17abcd7499d52fd4de2dd149361508494bd39424", "message": "[BEAM-9742] fixing checkstyle errors.", "committedDate": "2020-06-02T21:57:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5OTk3NA==", "url": "https://github.com/apache/beam/pull/11396#discussion_r435399974", "bodyText": "It would be helpful to provide a simple example of usage - here or in JdbcIO class Javadoc.", "author": "aromanenko-dev", "createdAt": "2020-06-04T16:43:38Z", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java", "diffHunk": "@@ -1217,6 +1297,16 @@ void set(\n       return toBuilder().setRetryStrategy(retryStrategy).build();\n     }\n \n+    /**\n+     * When a SQL exception occurs, {@link Write} uses this {@link RetryConfiguration} to\n+     * exponentially back off and retry the statements based on the {@link RetryConfiguration}\n+     * mentioned.", "originalCommit": "17abcd7499d52fd4de2dd149361508494bd39424", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3430632a5ef8e8c2e6b940a7876d1f181401aad", "chunk": "diff --git a/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java b/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\nindex 0a8ba0aaaa..f52ff40c63 100644\n--- a/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\n+++ b/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\n\n@@ -1301,6 +1284,28 @@ public class JdbcIO {\n      * When a SQL exception occurs, {@link Write} uses this {@link RetryConfiguration} to\n      * exponentially back off and retry the statements based on the {@link RetryConfiguration}\n      * mentioned.\n+     *\n+     * <p>Usage of RetryConfiguration -\n+     *\n+     * <pre>{@code\n+     * pipeline.apply(JdbcIO.<T>write())\n+     *    .withDataSourceConfiguration(...)\n+     *    .withRetryStrategy(...)\n+     *    .withRetryConfiguration(JdbcIO.RetryConfiguration.\n+     *        create(5, Duration.standardSeconds(5), Duration.standardSeconds(1))\n+     *\n+     * }</pre>\n+     *\n+     * maxDuration and initialDuration are Nullable\n+     *\n+     * <pre>{@code\n+     * pipeline.apply(JdbcIO.<T>write())\n+     *    .withDataSourceConfiguration(...)\n+     *    .withRetryStrategy(...)\n+     *    .withRetryConfiguration(JdbcIO.RetryConfiguration.\n+     *        create(5, null, null)\n+     *\n+     * }</pre>\n      */\n     public WriteVoid<T> withRetryConfiguration(RetryConfiguration retryConfiguration) {\n       checkArgument(retryConfiguration != null, \"retryConfiguration can not be null\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwOTI4MQ==", "url": "https://github.com/apache/beam/pull/11396#discussion_r435409281", "bodyText": "It's a bit confusing for user to have the overloaded methods where the same argument (eg, maxAttempts) changes its positions.  I'd prefer to leave only one method create() with all three arguments to provide - create(int maxAttempts, Duration maxDuration, Duration initialDuration).\nAlso, make DEFAULT_INITIAL_BACKOFF  and DEFAULT_MAX_CUMULATIVE_BACKOFF as the constants of RetryConfiguration and make them public.", "author": "aromanenko-dev", "createdAt": "2020-06-04T16:58:42Z", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java", "diffHunk": "@@ -903,6 +907,72 @@ public void teardown() throws Exception {\n     }\n   }\n \n+  /**\n+   * Builder used to help with retry configuration for {@link JdbcIO}. The retry configuration\n+   * accepts maxAttempts and maxDuration for {@link FluentBackoff}.\n+   */\n+  @AutoValue\n+  public abstract static class RetryConfiguration implements Serializable {\n+\n+    abstract int getMaxAttempts();\n+\n+    @Nullable\n+    abstract Duration getMaxDuration();\n+\n+    @Nullable\n+    abstract Duration getInitialDuration();\n+\n+    abstract RetryConfiguration.Builder builder();\n+\n+    @AutoValue.Builder\n+    abstract static class Builder {\n+      abstract Builder setMaxAttempts(int maxAttempts);\n+\n+      abstract Builder setMaxDuration(Duration maxDuration);\n+\n+      abstract Builder setInitialDuration(Duration initialDuration);\n+\n+      abstract RetryConfiguration build();\n+    }\n+\n+    public static RetryConfiguration create(int maxAttempts) {\n+      checkArgument(maxAttempts > 0, \"maxAttempts must be greater than 0\");\n+      return create(maxAttempts, DEFAULT_MAX_CUMULATIVE_BACKOFF, DEFAULT_INITIAL_BACKOFF);\n+    }\n+\n+    public static RetryConfiguration create(int maxAttempts, Duration maxDuration) {\n+      checkArgument(maxAttempts > 0, \"maxAttempts must be greater than 0\");\n+      checkArgument(\n+          maxDuration != null && maxDuration.isLongerThan(Duration.ZERO),\n+          \"maxDuration must be greater than 0\");\n+      return create(maxAttempts, maxDuration, DEFAULT_INITIAL_BACKOFF);\n+    }\n+\n+    public static RetryConfiguration create(Duration initialDuration, int maxAttempts) {", "originalCommit": "17abcd7499d52fd4de2dd149361508494bd39424", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3430632a5ef8e8c2e6b940a7876d1f181401aad", "chunk": "diff --git a/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java b/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\nindex 0a8ba0aaaa..f52ff40c63 100644\n--- a/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\n+++ b/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java\n\n@@ -935,36 +935,19 @@ public class JdbcIO {\n       abstract RetryConfiguration build();\n     }\n \n-    public static RetryConfiguration create(int maxAttempts) {\n-      checkArgument(maxAttempts > 0, \"maxAttempts must be greater than 0\");\n-      return create(maxAttempts, DEFAULT_MAX_CUMULATIVE_BACKOFF, DEFAULT_INITIAL_BACKOFF);\n-    }\n+    public static RetryConfiguration create(\n+        int maxAttempts, @Nullable Duration maxDuration, @Nullable Duration initialDuration) {\n \n-    public static RetryConfiguration create(int maxAttempts, Duration maxDuration) {\n-      checkArgument(maxAttempts > 0, \"maxAttempts must be greater than 0\");\n-      checkArgument(\n-          maxDuration != null && maxDuration.isLongerThan(Duration.ZERO),\n-          \"maxDuration must be greater than 0\");\n-      return create(maxAttempts, maxDuration, DEFAULT_INITIAL_BACKOFF);\n-    }\n+      if (maxDuration == null || maxDuration.equals(Duration.ZERO)) {\n+        maxDuration = DEFAULT_MAX_CUMULATIVE_BACKOFF;\n+      }\n \n-    public static RetryConfiguration create(Duration initialDuration, int maxAttempts) {\n-      checkArgument(maxAttempts > 0, \"maxAttempts must be greater than 0\");\n-      checkArgument(\n-          initialDuration != null && initialDuration.isLongerThan(Duration.ZERO),\n-          \"initialDuration must be greater than 0\");\n-      return create(maxAttempts, DEFAULT_MAX_CUMULATIVE_BACKOFF, initialDuration);\n-    }\n+      if (initialDuration == null || initialDuration.equals(Duration.ZERO)) {\n+        initialDuration = DEFAULT_INITIAL_BACKOFF;\n+      }\n \n-    public static RetryConfiguration create(\n-        int maxAttempts, Duration maxDuration, Duration initialDuration) {\n       checkArgument(maxAttempts > 0, \"maxAttempts must be greater than 0\");\n-      checkArgument(\n-          maxDuration != null && maxDuration.isLongerThan(Duration.ZERO),\n-          \"maxDuration must be greater than 0\");\n-      checkArgument(\n-          initialDuration != null && initialDuration.isLongerThan(Duration.ZERO),\n-          \"initialDuration must be greater than 0\");\n+\n       return new AutoValue_JdbcIO_RetryConfiguration.Builder()\n           .setMaxAttempts(maxAttempts)\n           .setInitialDuration(initialDuration)\n"}}, {"oid": "a3430632a5ef8e8c2e6b940a7876d1f181401aad", "url": "https://github.com/apache/beam/commit/a3430632a5ef8e8c2e6b940a7876d1f181401aad", "message": "[BEAM-9742] Addressing feedback", "committedDate": "2020-06-08T08:55:25Z", "type": "commit"}]}