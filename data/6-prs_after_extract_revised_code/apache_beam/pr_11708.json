{"pr_number": 11708, "pr_title": "[BEAM-9577] Artifact v2 support for uber jars.", "pr_createdAt": "2020-05-14T17:15:10Z", "pr_url": "https://github.com/apache/beam/pull/11708", "timeline": [{"oid": "e7371d56e7163a0832e1d44ba8deddd0135b9819", "url": "https://github.com/apache/beam/commit/e7371d56e7163a0832e1d44ba8deddd0135b9819", "message": "[BEAM-9577] Artifact v2 support for uber jars.", "committedDate": "2020-05-14T17:14:04Z", "type": "commit"}, {"oid": "8a3c14022b3dc4c1cd06a84e89eec6cd0afe0bba", "url": "https://github.com/apache/beam/commit/8a3c14022b3dc4c1cd06a84e89eec6cd0afe0bba", "message": "lint, refactor fix", "committedDate": "2020-05-14T20:00:38Z", "type": "commit"}, {"oid": "3a75ae86e70defaa01609f12822254ce300a79c4", "url": "https://github.com/apache/beam/commit/3a75ae86e70defaa01609f12822254ce300a79c4", "message": "fix spark like flink", "committedDate": "2020-05-14T20:02:41Z", "type": "commit"}, {"oid": "4edfdaa14ef89aa7774067b85786f7a4cf11fb77", "url": "https://github.com/apache/beam/commit/4edfdaa14ef89aa7774067b85786f7a4cf11fb77", "message": "lint, attempt to use system class loader to make jenkins happy", "committedDate": "2020-05-14T21:27:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNDkxMw==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425434913", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                throw new UnsupportedOperationException(\"Un-globable filesystem.\");\n          \n          \n            \n                throw new UnsupportedOperationException(\"Un-globbable filesystem.\");", "author": "ibzib", "createdAt": "2020-05-14T21:15:11Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {\n+\n+  public static final String SCHEMA = \"classpath\";\n+  private static final String PREFIX = SCHEMA + \"://\";\n+\n+  ClassLoaderFileSystem() {}\n+\n+  @Override\n+  protected List<MatchResult> match(List<String> specs) throws IOException {\n+    throw new UnsupportedOperationException(\"Un-globable filesystem.\");", "originalCommit": "3a75ae86e70defaa01609f12822254ce300a79c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4edfdaa14ef89aa7774067b85786f7a4cf11fb77", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\nindex e98121dbe4..aa079215e2 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\n\n@@ -57,9 +57,8 @@ public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.Clas\n \n   @Override\n   protected ReadableByteChannel open(ClassLoaderResourceId resourceId) throws IOException {\n-    ClassLoader classLoader = getClass().getClassLoader();\n     InputStream inputStream =\n-        classLoader.getResourceAsStream(resourceId.path.substring(PREFIX.length()));\n+        ClassLoader.getSystemResourceAsStream(resourceId.path.substring(PREFIX.length()));\n     if (inputStream == null) {\n       throw new IOException(\"Unable to load \" + resourceId.path + \" with \" + classLoader);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNTIyOA==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425435228", "bodyText": "Nice! But I don't see this actually used anywhere?", "author": "ibzib", "createdAt": "2020-05-14T21:15:51Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */", "originalCommit": "3a75ae86e70defaa01609f12822254ce300a79c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2Mjk0NA==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425462944", "bodyText": "It's used on the Python side.", "author": "robertwb", "createdAt": "2020-05-14T22:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNTIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2ODEwNg==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425468106", "bodyText": "That's what I get for only reading half the PR...", "author": "ibzib", "createdAt": "2020-05-14T22:34:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNTIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "4edfdaa14ef89aa7774067b85786f7a4cf11fb77", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\nindex e98121dbe4..aa079215e2 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\n\n@@ -57,9 +57,8 @@ public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.Clas\n \n   @Override\n   protected ReadableByteChannel open(ClassLoaderResourceId resourceId) throws IOException {\n-    ClassLoader classLoader = getClass().getClassLoader();\n     InputStream inputStream =\n-        classLoader.getResourceAsStream(resourceId.path.substring(PREFIX.length()));\n+        ClassLoader.getSystemResourceAsStream(resourceId.path.substring(PREFIX.length()));\n     if (inputStream == null) {\n       throw new IOException(\"Unable to load \" + resourceId.path + \" with \" + classLoader);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzODM1OA==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425438358", "bodyText": "How did I never know this? \ud83d\ude06", "author": "ibzib", "createdAt": "2020-05-14T21:22:18Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/ClassLoaderFileSystemTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static java.nio.channels.Channels.newInputStream;\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.ReadableByteChannel;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class ClassLoaderFileSystemTest {\n+\n+  private static final String SOME_CLASS =\n+      \"classpath://org/apache/beam/sdk/io/ClassLoaderFilesystem.class\";\n+\n+  @Test\n+  public void testOpen() throws IOException {\n+    ClassLoaderFileSystem filesystem = new ClassLoaderFileSystem();\n+    ReadableByteChannel channel = filesystem.open(filesystem.matchNewResource(SOME_CLASS, false));\n+    checkIsClass(channel);\n+  }\n+\n+  @Test\n+  public void testRegistrar() throws IOException {\n+    ReadableByteChannel channel = FileSystems.open(FileSystems.matchNewResource(SOME_CLASS, false));\n+    checkIsClass(channel);\n+  }\n+\n+  public void checkIsClass(ReadableByteChannel channel) throws IOException {\n+    FileSystems.setDefaultPipelineOptions(PipelineOptionsFactory.create());\n+    InputStream inputStream = newInputStream(channel);\n+    byte[] magic = new byte[4];\n+    inputStream.read(magic);\n+    assertArrayEquals(magic, new byte[] {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE});", "originalCommit": "3a75ae86e70defaa01609f12822254ce300a79c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00ecfeb6829defaef5231bfe0068b99ed4f07ff5", "chunk": "diff --git a/sdks/java/core/src/test/java/org/apache/beam/sdk/io/ClassLoaderFileSystemTest.java b/sdks/java/core/src/test/java/org/apache/beam/sdk/io/ClassLoaderFileSystemTest.java\nindex 8be1a913fe..4bd84a5c30 100644\n--- a/sdks/java/core/src/test/java/org/apache/beam/sdk/io/ClassLoaderFileSystemTest.java\n+++ b/sdks/java/core/src/test/java/org/apache/beam/sdk/io/ClassLoaderFileSystemTest.java\n\n@@ -19,10 +19,12 @@ package org.apache.beam.sdk.io;\n \n import static java.nio.channels.Channels.newInputStream;\n import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n \n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.channels.ReadableByteChannel;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzOTg3OA==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425439878", "bodyText": "Can we add a couple trivial unit tests as sanity checks / documentation for resolve and getCurrentDirectory?", "author": "ibzib", "createdAt": "2020-05-14T21:25:26Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {\n+\n+  public static final String SCHEMA = \"classpath\";\n+  private static final String PREFIX = SCHEMA + \"://\";\n+\n+  ClassLoaderFileSystem() {}\n+\n+  @Override\n+  protected List<MatchResult> match(List<String> specs) throws IOException {\n+    throw new UnsupportedOperationException(\"Un-globable filesystem.\");\n+  }\n+\n+  @Override\n+  protected WritableByteChannel create(\n+      ClassLoaderResourceId resourceId, CreateOptions createOptions) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ReadableByteChannel open(ClassLoaderResourceId resourceId) throws IOException {\n+    ClassLoader classLoader = getClass().getClassLoader();\n+    InputStream inputStream =\n+        classLoader.getResourceAsStream(resourceId.path.substring(PREFIX.length()));\n+    if (inputStream == null) {\n+      throw new IOException(\"Unable to load \" + resourceId.path + \" with \" + classLoader);\n+    }\n+    return Channels.newChannel(inputStream);\n+  }\n+\n+  @Override\n+  protected void copy(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void rename(\n+      List<ClassLoaderResourceId> srcResourceIds, List<ClassLoaderResourceId> destResourceIds)\n+      throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected void delete(Collection<ClassLoaderResourceId> resourceIds) throws IOException {\n+    throw new UnsupportedOperationException(\"Read-only filesystem.\");\n+  }\n+\n+  @Override\n+  protected ClassLoaderResourceId matchNewResource(String path, boolean isDirectory) {\n+    return new ClassLoaderResourceId(path);\n+  }\n+\n+  @Override\n+  protected String getScheme() {\n+    return SCHEMA;\n+  }\n+\n+  public static class ClassLoaderResourceId implements ResourceId {\n+\n+    private final String path;\n+\n+    private ClassLoaderResourceId(String path) {\n+      checkArgument(path.startsWith(PREFIX), path);\n+      this.path = path;\n+    }\n+\n+    @Override\n+    public ResourceId resolve(String other, ResolveOptions resolveOptions) {", "originalCommit": "3a75ae86e70defaa01609f12822254ce300a79c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MjgzMA==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425462830", "bodyText": "The documentation is in the super classes, but I added a test.", "author": "robertwb", "createdAt": "2020-05-14T22:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzOTg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4NzM2MQ==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425987361", "bodyText": "Thanks!", "author": "ibzib", "createdAt": "2020-05-15T18:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzOTg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "4edfdaa14ef89aa7774067b85786f7a4cf11fb77", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\nindex e98121dbe4..aa079215e2 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java\n\n@@ -57,9 +57,8 @@ public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.Clas\n \n   @Override\n   protected ReadableByteChannel open(ClassLoaderResourceId resourceId) throws IOException {\n-    ClassLoader classLoader = getClass().getClassLoader();\n     InputStream inputStream =\n-        classLoader.getResourceAsStream(resourceId.path.substring(PREFIX.length()));\n+        ClassLoader.getSystemResourceAsStream(resourceId.path.substring(PREFIX.length()));\n     if (inputStream == null) {\n       throw new IOException(\"Unable to load \" + resourceId.path + \" with \" + classLoader);\n     }\n"}}, {"oid": "00ecfeb6829defaef5231bfe0068b99ed4f07ff5", "url": "https://github.com/apache/beam/commit/00ecfeb6829defaef5231bfe0068b99ed4f07ff5", "message": "fix build break, more tests", "committedDate": "2020-05-14T22:18:59Z", "type": "commit"}, {"oid": "c428a1aedeaec049e56e0b958c97e64ea29735c2", "url": "https://github.com/apache/beam/commit/c428a1aedeaec049e56e0b958c97e64ea29735c2", "message": "more debugging", "committedDate": "2020-05-14T23:26:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Njk3Nw==", "url": "https://github.com/apache/beam/pull/11708#discussion_r425986977", "bodyText": "Should we change PortablePipelineJarUtils to use ClassLoaderFileSystem? (Maybe in a follow-up PR) https://github.com/apache/beam/blob/master/runners/java-job-service/src/main/java/org/apache/beam/runners/jobsubmission/PortablePipelineJarUtils.java", "author": "ibzib", "createdAt": "2020-05-15T18:50:24Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/ClassLoaderFileSystem.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.io.fs.CreateOptions;\n+import org.apache.beam.sdk.io.fs.MatchResult;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/** A read-only {@link FileSystem} implementation looking up resources using a ClassLoader. */\n+public class ClassLoaderFileSystem extends FileSystem<ClassLoaderFileSystem.ClassLoaderResourceId> {", "originalCommit": "c428a1aedeaec049e56e0b958c97e64ea29735c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1OTIzMQ==", "url": "https://github.com/apache/beam/pull/11708#discussion_r426059231", "bodyText": "Yes, we'll want to do that too (and use the new artifact api).", "author": "robertwb", "createdAt": "2020-05-15T21:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4Njk3Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "582caf271cd7cddbed1cecce1b898c295d07fcf2", "url": "https://github.com/apache/beam/commit/582caf271cd7cddbed1cecce1b898c295d07fcf2", "message": "case insensitive filesystems hide bugs!", "committedDate": "2020-05-15T21:36:04Z", "type": "commit"}, {"oid": "122b1598593d417b79d61457991fe6fce7f31744", "url": "https://github.com/apache/beam/commit/122b1598593d417b79d61457991fe6fce7f31744", "message": "fixup: reviewer comments", "committedDate": "2020-05-15T21:48:10Z", "type": "commit"}, {"oid": "2839770cb4e7590fb935b22b1706ff039a59520f", "url": "https://github.com/apache/beam/commit/2839770cb4e7590fb935b22b1706ff039a59520f", "message": "Fix lint, formatting, test mocks.", "committedDate": "2020-05-18T20:20:19Z", "type": "commit"}, {"oid": "8a4132f35f92f165f272609776a58d2bf0e1c466", "url": "https://github.com/apache/beam/commit/8a4132f35f92f165f272609776a58d2bf0e1c466", "message": "lint import fixes", "committedDate": "2020-05-18T21:00:50Z", "type": "commit"}]}