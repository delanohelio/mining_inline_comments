{"pr_number": 11418, "pr_title": "[BEAM-8872] Support split at fraction for OffsetRangeTracker", "pr_createdAt": "2020-04-14T20:26:15Z", "pr_url": "https://github.com/apache/beam/pull/11418", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzA0Ng==", "url": "https://github.com/apache/beam/pull/11418#discussion_r408473046", "bodyText": "We can split before any successfully claimed block by returning [from, to) and updating the current range to be [from, from)\nThis makes sense in some cases where we want to handoff all the work to someone else for the active element while this bundle finishes other processing.", "author": "lukecwik", "createdAt": "2020-04-14T22:28:09Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");", "originalCommit": "609fa6e38930287cbabd250849c523a40c1434b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4MzM4MQ==", "url": "https://github.com/apache/beam/pull/11418#discussion_r408483381", "bodyText": "Allowing split before first claiming makes sense to me. Python has already allowed that.", "author": "boyuanzz", "createdAt": "2020-04-14T22:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e056d31d32601edf39764ecf3c157518b9f5cda4", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java\nindex 8a9b93fc8d..7a2c0b2a7b 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java\n\n@@ -50,20 +49,11 @@ public class OffsetRangeTracker extends RestrictionTracker<OffsetRange, Long>\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");\n-    // No more split should be performed if checkpoint has happened.\n-    if (checkpointed) {\n-      return null;\n-    }\n-    Long splitPos =\n-        lastClaimedOffset\n-            + Math.max(1L, (long) ((range.getTo() - lastClaimedOffset) * fractionOfRemainder));\n+    Long cur = (lastAttemptedOffset == null) ? range.getFrom() - 1 : lastAttemptedOffset;\n+    Long splitPos = cur + Math.max(1L, (long) ((range.getTo() - cur) * fractionOfRemainder));\n     if (splitPos >= range.getTo()) {\n       return null;\n     }\n-    if (fractionOfRemainder == 0.0) {\n-      checkpointed = true;\n-    }\n     OffsetRange res = new OffsetRange(splitPos, range.getTo());\n     this.range = new OffsetRange(range.getFrom(), splitPos);\n     return SplitResult.of(range, res);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzI3MQ==", "url": "https://github.com/apache/beam/pull/11418#discussion_r408473271", "bodyText": "Why do we need checkpointed?\nShouldn't the range restriction change so that to becomes lastClaimed (or from if nothing has been claimed)?", "author": "lukecwik", "createdAt": "2020-04-14T22:28:42Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java", "diffHunk": "@@ -49,13 +50,22 @@ public OffsetRange currentRestriction() {\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8872): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    checkState(\n-        lastClaimedOffset != null, \"Can't checkpoint before any offset was successfully claimed\");\n-    OffsetRange res = new OffsetRange(lastClaimedOffset + 1, range.getTo());\n-    this.range = new OffsetRange(range.getFrom(), lastClaimedOffset + 1);\n+    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");\n+    // No more split should be performed if checkpoint has happened.\n+    if (checkpointed) {\n+      return null;\n+    }\n+    Long splitPos =\n+        lastClaimedOffset\n+            + Math.max(1L, (long) ((range.getTo() - lastClaimedOffset) * fractionOfRemainder));\n+    if (splitPos >= range.getTo()) {\n+      return null;\n+    }\n+    if (fractionOfRemainder == 0.0) {\n+      checkpointed = true;", "originalCommit": "609fa6e38930287cbabd250849c523a40c1434b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4MzU1Mg==", "url": "https://github.com/apache/beam/pull/11418#discussion_r408483552", "bodyText": "Just return early since we know there is no more split after checkpointing.", "author": "boyuanzz", "createdAt": "2020-04-14T22:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MzkxMA==", "url": "https://github.com/apache/beam/pull/11418#discussion_r408943910", "bodyText": "Changing the state makes the code more complicated though since the bounds checking varies based upon whether you got 0.0 or 0.00001 which is likely to produce the same final state with one having an additional boolean being set.", "author": "lukecwik", "createdAt": "2020-04-15T15:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3MzI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e056d31d32601edf39764ecf3c157518b9f5cda4", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java\nindex 8a9b93fc8d..7a2c0b2a7b 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTracker.java\n\n@@ -50,20 +49,11 @@ public class OffsetRangeTracker extends RestrictionTracker<OffsetRange, Long>\n \n   @Override\n   public SplitResult<OffsetRange> trySplit(double fractionOfRemainder) {\n-    checkState(lastClaimedOffset != null, \"Can't split before any offset was successfully claimed\");\n-    // No more split should be performed if checkpoint has happened.\n-    if (checkpointed) {\n-      return null;\n-    }\n-    Long splitPos =\n-        lastClaimedOffset\n-            + Math.max(1L, (long) ((range.getTo() - lastClaimedOffset) * fractionOfRemainder));\n+    Long cur = (lastAttemptedOffset == null) ? range.getFrom() - 1 : lastAttemptedOffset;\n+    Long splitPos = cur + Math.max(1L, (long) ((range.getTo() - cur) * fractionOfRemainder));\n     if (splitPos >= range.getTo()) {\n       return null;\n     }\n-    if (fractionOfRemainder == 0.0) {\n-      checkpointed = true;\n-    }\n     OffsetRange res = new OffsetRange(splitPos, range.getTo());\n     this.range = new OffsetRange(range.getFrom(), splitPos);\n     return SplitResult.of(range, res);\n"}}, {"oid": "e056d31d32601edf39764ecf3c157518b9f5cda4", "url": "https://github.com/apache/beam/commit/e056d31d32601edf39764ecf3c157518b9f5cda4", "message": "[BEAM-8872] Support split at fraction for OffsetRangeTracker", "committedDate": "2020-04-15T23:13:33Z", "type": "forcePushed"}, {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c", "url": "https://github.com/apache/beam/commit/800d20dfca6cad82717fe20b9d399ea1342da78c", "message": "[BEAM-8872] Support split at fraction for OffsetRangeTracker", "committedDate": "2020-04-16T19:03:09Z", "type": "commit"}, {"oid": "800d20dfca6cad82717fe20b9d399ea1342da78c", "url": "https://github.com/apache/beam/commit/800d20dfca6cad82717fe20b9d399ea1342da78c", "message": "[BEAM-8872] Support split at fraction for OffsetRangeTracker", "committedDate": "2020-04-16T19:03:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjAyMQ==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409806021", "bodyText": "primary and residual shouldn't have the same value, primary should be an empty range like [100, 100)", "author": "lukecwik", "createdAt": "2020-04-16T19:44:25Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -47,16 +48,9 @@ public void testTryClaim() throws Exception {\n   @Test\n   public void testCheckpointUnstarted() throws Exception {\n     OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    expected.expect(IllegalStateException.class);\n-    tracker.trySplit(0).getResidual();\n-  }\n-\n-  @Test\n-  public void testCheckpointOnlyFailedClaim() throws Exception {\n-    OffsetRangeTracker tracker = new OffsetRangeTracker(new OffsetRange(100, 200));\n-    assertFalse(tracker.tryClaim(250L));\n-    expected.expect(IllegalStateException.class);\n-    OffsetRange checkpoint = tracker.trySplit(0).getResidual();\n+    SplitResult res = tracker.trySplit(0);\n+    assertEquals(new OffsetRange(100, 100), res.getPrimary());\n+    assertEquals(new OffsetRange(100, 200), res.getResidual());", "originalCommit": "800d20dfca6cad82717fe20b9d399ea1342da78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNDY5Mg==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409824692", "bodyText": "In this test case, the expected primary is [100, 100) and the expected residual is [100, 200)", "author": "boyuanzz", "createdAt": "2020-04-16T20:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzMjE0OA==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409832148", "bodyText": "Thanks, that was my mistake, I read both lines as being [100, 200)", "author": "lukecwik", "createdAt": "2020-04-16T20:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5907ec3da94a767e1afba23deda5f00f5727807c", "chunk": "diff --git a/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java b/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java\nindex 0c6bb5f4ac..8f67410feb 100644\n--- a/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java\n+++ b/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java\n\n@@ -51,6 +51,7 @@ public class OffsetRangeTrackerTest {\n     SplitResult res = tracker.trySplit(0);\n     assertEquals(new OffsetRange(100, 100), res.getPrimary());\n     assertEquals(new OffsetRange(100, 200), res.getResidual());\n+    tracker.checkDone();\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjg4OQ==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409806889", "bodyText": "takeCheckpointNow should work regardless whether numClaimedBlocks > 0 or not.\nEven if tryClaim never happens, the watermark may advance.", "author": "lukecwik", "createdAt": "2020-04-16T19:46:09Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -210,9 +210,10 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n         // the call says that not the whole restriction has been processed. So we need to take\n         // a checkpoint now: checkpoint() guarantees that the primary restriction describes exactly\n         // the work that was done in the current ProcessElement call, and returns a residual\n-        // restriction that describes exactly the work that wasn't done in the current call.\n+        // restriction that describes exactly the work that wasn't done in the current call. The\n+        // residual is null when the entire restriction has been processed.\n         if (processContext.numClaimedBlocks > 0) {\n-          residual = checkNotNull(processContext.takeCheckpointNow());\n+          residual = processContext.takeCheckpointNow();", "originalCommit": "800d20dfca6cad82717fe20b9d399ea1342da78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNjYzNg==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409826636", "bodyText": "I guess the original assumption is, checkpoint should happen after at least one tryClaim called. Since we change the assumption, the numClaimedBlocks  can also be removed.", "author": "boyuanzz", "createdAt": "2020-04-16T20:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNjg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5907ec3da94a767e1afba23deda5f00f5727807c", "chunk": "diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\nindex a8549c2d65..43151be035 100644\n--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\n+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\n\n@@ -212,29 +212,8 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<\n         // the work that was done in the current ProcessElement call, and returns a residual\n         // restriction that describes exactly the work that wasn't done in the current call. The\n         // residual is null when the entire restriction has been processed.\n-        if (processContext.numClaimedBlocks > 0) {\n-          residual = processContext.takeCheckpointNow();\n-          processContext.tracker.checkDone();\n-        } else {\n-          // The call returned resume() without trying to claim any blocks, i.e. it is unaware\n-          // of any work to be done at the moment, but more might emerge later. This is a valid\n-          // use case: e.g. a DoFn reading from a streaming source might see that there are\n-          // currently no new elements (hence not claim anything) and return resume() with a delay\n-          // to check again later.\n-          // In this case, we must simply reschedule the original restriction - checkpointing a\n-          // tracker that hasn't claimed any work is not allowed.\n-          //\n-          // Note that the situation \"a DoFn repeatedly says that it doesn't have any work to claim\n-          // and asks to try again later with the same restriction\" is different from the situation\n-          // \"a runner repeatedly checkpoints the DoFn before it has a chance to even attempt\n-          // claiming work\": the former is valid, and the latter would be a bug, and is addressed\n-          // by not checkpointing the tracker until it attempts to claim some work.\n-          residual =\n-              KV.of(\n-                  tracker.currentRestriction(),\n-                  KV.of(watermarkEstimator.currentWatermark(), watermarkEstimator.getState()));\n-          // Don't call tracker.checkDone() - it's not done.\n-        }\n+        residual = processContext.takeCheckpointNow();\n+        processContext.tracker.checkDone();\n       } else {\n         // A checkpoint was taken by the runner, and then the ProcessElement call returned resume()\n         // without making more tryClaim() calls (since no tryClaim() calls can succeed after\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNzkxNA==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409807914", "bodyText": "The comments below will likely need updating", "author": "lukecwik", "createdAt": "2020-04-16T19:48:09Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -210,9 +210,10 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n         // the call says that not the whole restriction has been processed. So we need to take\n         // a checkpoint now: checkpoint() guarantees that the primary restriction describes exactly\n         // the work that was done in the current ProcessElement call, and returns a residual\n-        // restriction that describes exactly the work that wasn't done in the current call.\n+        // restriction that describes exactly the work that wasn't done in the current call. The\n+        // residual is null when the entire restriction has been processed.\n         if (processContext.numClaimedBlocks > 0) {\n-          residual = checkNotNull(processContext.takeCheckpointNow());\n+          residual = processContext.takeCheckpointNow();\n           processContext.tracker.checkDone();\n         } else {", "originalCommit": "800d20dfca6cad82717fe20b9d399ea1342da78c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5907ec3da94a767e1afba23deda5f00f5727807c", "chunk": "diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\nindex a8549c2d65..43151be035 100644\n--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\n+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java\n\n@@ -212,29 +212,8 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<\n         // the work that was done in the current ProcessElement call, and returns a residual\n         // restriction that describes exactly the work that wasn't done in the current call. The\n         // residual is null when the entire restriction has been processed.\n-        if (processContext.numClaimedBlocks > 0) {\n-          residual = processContext.takeCheckpointNow();\n-          processContext.tracker.checkDone();\n-        } else {\n-          // The call returned resume() without trying to claim any blocks, i.e. it is unaware\n-          // of any work to be done at the moment, but more might emerge later. This is a valid\n-          // use case: e.g. a DoFn reading from a streaming source might see that there are\n-          // currently no new elements (hence not claim anything) and return resume() with a delay\n-          // to check again later.\n-          // In this case, we must simply reschedule the original restriction - checkpointing a\n-          // tracker that hasn't claimed any work is not allowed.\n-          //\n-          // Note that the situation \"a DoFn repeatedly says that it doesn't have any work to claim\n-          // and asks to try again later with the same restriction\" is different from the situation\n-          // \"a runner repeatedly checkpoints the DoFn before it has a chance to even attempt\n-          // claiming work\": the former is valid, and the latter would be a bug, and is addressed\n-          // by not checkpointing the tracker until it attempts to claim some work.\n-          residual =\n-              KV.of(\n-                  tracker.currentRestriction(),\n-                  KV.of(watermarkEstimator.currentWatermark(), watermarkEstimator.getState()));\n-          // Don't call tracker.checkDone() - it's not done.\n-        }\n+        residual = processContext.takeCheckpointNow();\n+        processContext.tracker.checkDone();\n       } else {\n         // A checkpoint was taken by the runner, and then the ProcessElement call returned resume()\n         // without making more tryClaim() calls (since no tryClaim() calls can succeed after\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxODA2MA==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409818060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              }\n          \n          \n            \n                tracker.checkDone();\n          \n          \n            \n              }", "author": "lukecwik", "createdAt": "2020-04-16T20:07:22Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -96,9 +90,24 @@ public void testCheckpointAfterFailedClaim() throws Exception {\n     assertTrue(tracker.tryClaim(110L));\n     assertTrue(tracker.tryClaim(160L));\n     assertFalse(tracker.tryClaim(240L));\n-    OffsetRange checkpoint = tracker.trySplit(0).getResidual();\n-    assertEquals(new OffsetRange(100, 161), tracker.currentRestriction());\n-    assertEquals(new OffsetRange(161, 200), checkpoint);\n+    assertNull(tracker.trySplit(0));\n+  }", "originalCommit": "800d20dfca6cad82717fe20b9d399ea1342da78c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5907ec3da94a767e1afba23deda5f00f5727807c", "chunk": "diff --git a/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java b/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java\nindex 0c6bb5f4ac..8f67410feb 100644\n--- a/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java\n+++ b/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java\n\n@@ -91,6 +95,7 @@ public class OffsetRangeTrackerTest {\n     assertTrue(tracker.tryClaim(160L));\n     assertFalse(tracker.tryClaim(240L));\n     assertNull(tracker.trySplit(0));\n+    tracker.checkDone();\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxOTU3MQ==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409819571", "bodyText": "Can we add tests to verify tryClaim(0), tryClaim(0.1), tryClaim(1) on an empty range like [100, 100)\nCan we also add tests to verify the behavior of tryClaim(1) on range [100, 200)", "author": "lukecwik", "createdAt": "2020-04-16T20:10:06Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/OffsetRangeTrackerTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import org.apache.beam.sdk.io.range.OffsetRange;", "originalCommit": "800d20dfca6cad82717fe20b9d399ea1342da78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNjU0NQ==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409826545", "bodyText": "trySplit right?", "author": "boyuanzz", "createdAt": "2020-04-16T20:24:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxOTU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NDUwNQ==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409844505", "bodyText": "Yes. Your right. Need more sleep.", "author": "lukecwik", "createdAt": "2020-04-16T20:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxOTU3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyMDEwMw==", "url": "https://github.com/apache/beam/pull/11418#discussion_r409820103", "bodyText": "I believe the comment below could be incorrect. If we get stop(), we shouldn't have a residual restriction.", "author": "lukecwik", "createdAt": "2020-04-16T20:11:08Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableProcessElementInvoker.java", "diffHunk": "@@ -51,11 +51,6 @@ public Result(\n         @Nullable WatermarkEstimatorStateT futureWatermarkEstimatorState) {\n       checkArgument(continuation != null, \"continuation must not be null\");\n       this.continuation = continuation;\n-      if (continuation.shouldResume()) {\n-        checkArgument(\n-            residualRestriction != null,\n-            \"residual restriction must not be null if continuation indicate it should resume\");\n-      }\n       this.residualRestriction = residualRestriction;\n       this.futureOutputWatermark = futureOutputWatermark;\n       this.futureWatermarkEstimatorState = futureWatermarkEstimatorState;", "originalCommit": "800d20dfca6cad82717fe20b9d399ea1342da78c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5907ec3da94a767e1afba23deda5f00f5727807c", "chunk": "diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableProcessElementInvoker.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableProcessElementInvoker.java\nindex 3fde5dbe9c..6c96636739 100644\n--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableProcessElementInvoker.java\n+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableProcessElementInvoker.java\n\n@@ -57,9 +57,7 @@ public abstract class SplittableProcessElementInvoker<\n     }\n \n     /**\n-     * Can be {@code null} only if {@link #getContinuation} specifies the call should not resume.\n-     * However, the converse is not true: this can be non-null even if {@link #getContinuation} is\n-     * {@link DoFn.ProcessContinuation#stop()}.\n+     * Can be {@code null} only if {@link #getContinuation} when there is no more work to resume.\n      */\n     @Nullable\n     public RestrictionT getResidualRestriction() {\n"}}, {"oid": "5907ec3da94a767e1afba23deda5f00f5727807c", "url": "https://github.com/apache/beam/commit/5907ec3da94a767e1afba23deda5f00f5727807c", "message": "Address comments", "committedDate": "2020-04-16T23:15:54Z", "type": "commit"}, {"oid": "749174c3c6af7688a3f7d561aafcd9fa93d38781", "url": "https://github.com/apache/beam/commit/749174c3c6af7688a3f7d561aafcd9fa93d38781", "message": "Update checkDone", "committedDate": "2020-04-17T18:46:05Z", "type": "commit"}]}