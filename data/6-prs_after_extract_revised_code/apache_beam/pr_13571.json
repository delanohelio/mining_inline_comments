{"pr_number": 13571, "pr_title": "[BEAM-11481] emit output watermark on watermark hold change", "pr_createdAt": "2020-12-17T10:43:51Z", "pr_url": "https://github.com/apache/beam/pull/13571", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5Mzk4NQ==", "url": "https://github.com/apache/beam/pull/13571#discussion_r544993985", "bodyText": "can you please add this as a message for IllegalStateException?", "author": "dmvk", "createdAt": "2020-12-17T10:51:29Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -992,7 +997,23 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(ByteBuffer key, TimerData timerData) {\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     fireTimer(timerData);\n+    emitWatermarkIfHoldChanged(oldHold);\n+  }\n+\n+  void emitWatermarkIfHoldChanged(long currentWatermarkHold) {\n+    if (keyCoder != null) {\n+      long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n+      if (newWatermarkHold > currentWatermarkHold) {\n+        try {\n+          processInputWatermark(false);\n+        } catch (Exception ex) {\n+          // should not happen", "originalCommit": "02f132676cc5318a853567897da2fc16972cb47a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTExNDkyNg==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545114926", "bodyText": "Isn't IllegalStateException meant to be used for an illegal state, which is a state that should not happen? :)", "author": "je-ik", "createdAt": "2020-12-17T14:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5Mzk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0Mjg0NA==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545742844", "bodyText": "I just love seeing \"This should never happen\" messages in logs when debugging ;)", "author": "dmvk", "createdAt": "2020-12-18T10:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5Mzk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "415501f0b883f09ede4546ea990b2b5f69408bd4", "chunk": "diff --git a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\nindex b77ff38a63..bcf0646dac 100644\n--- a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n+++ b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n\n@@ -1007,7 +1006,7 @@ public class DoFnOperator<InputT, OutputT>\n       long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n       if (newWatermarkHold > currentWatermarkHold) {\n         try {\n-          processInputWatermark(false);\n+          processWatermark(new Watermark(currentInputWatermark));\n         } catch (Exception ex) {\n           // should not happen\n           throw new IllegalStateException(ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5OTQ0MQ==", "url": "https://github.com/apache/beam/pull/13571#discussion_r544999441", "bodyText": "We remove the private modifier?", "author": "mxm", "createdAt": "2020-12-17T10:59:49Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -784,7 +789,7 @@ private long computeOutputWatermark(long inputWatermarkHold) {\n     return potentialOutputWatermark;\n   }\n \n-  private void maybeEmitWatermark(long watermark) {\n+  void maybeEmitWatermark(long watermark) {", "originalCommit": "02f132676cc5318a853567897da2fc16972cb47a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2NDgzMw==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545064833", "bodyText": "Part of experiments, can be reverted.", "author": "je-ik", "createdAt": "2020-12-17T12:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk5OTQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b19bc5b0b020b9bae56f9dae3a4bac2c31e49a2", "chunk": "diff --git a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\nindex b77ff38a63..9c1e4379ad 100644\n--- a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n+++ b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n\n@@ -789,7 +789,7 @@ public class DoFnOperator<InputT, OutputT>\n     return potentialOutputWatermark;\n   }\n \n-  void maybeEmitWatermark(long watermark) {\n+  private void maybeEmitWatermark(long watermark) {\n     if (watermark > currentOutputWatermark) {\n       // Must invoke finishBatch before emit the +Inf watermark otherwise there are some late\n       // events.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDI4OQ==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545000289", "bodyText": "This logic should be removed. All logic which deals with watermark emission should be handled through processWatermark.", "author": "mxm", "createdAt": "2020-12-17T11:01:11Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -992,7 +997,23 @@ public void onProcessingTime(InternalTimer<ByteBuffer, TimerData> timer) {\n \n   // allow overriding this in ExecutableStageDoFnOperator to set the key context\n   protected void fireTimerInternal(ByteBuffer key, TimerData timerData) {\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     fireTimer(timerData);\n+    emitWatermarkIfHoldChanged(oldHold);\n+  }\n+\n+  void emitWatermarkIfHoldChanged(long currentWatermarkHold) {\n+    if (keyCoder != null) {\n+      long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n+      if (newWatermarkHold > currentWatermarkHold) {\n+        try {\n+          processInputWatermark(false);", "originalCommit": "02f132676cc5318a853567897da2fc16972cb47a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2NTcyMQ==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545065721", "bodyText": "I disagree - handling watermark emission in processWatermark only is what causes the issues.", "author": "je-ik", "createdAt": "2020-12-17T12:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMDI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "415501f0b883f09ede4546ea990b2b5f69408bd4", "chunk": "diff --git a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\nindex b77ff38a63..bcf0646dac 100644\n--- a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n+++ b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n\n@@ -1007,7 +1006,7 @@ public class DoFnOperator<InputT, OutputT>\n       long newWatermarkHold = keyedStateInternals.minWatermarkHoldMs();\n       if (newWatermarkHold > currentWatermarkHold) {\n         try {\n-          processInputWatermark(false);\n+          processWatermark(new Watermark(currentInputWatermark));\n         } catch (Exception ex) {\n           // should not happen\n           throw new IllegalStateException(ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTAyNQ==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545001025", "bodyText": "We need the following to generalize watermark emission to be able to call this method from other places.\nif (mark.getTimestamp > currentInputWatermark) {\n  currentInputWatermark = mark.getTimestamp();\n}", "author": "mxm", "createdAt": "2020-12-17T11:02:15Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -739,9 +741,12 @@ public final void processWatermark1(Watermark mark) throws Exception {\n     }\n \n     currentInputWatermark = mark.getTimestamp();", "originalCommit": "02f132676cc5318a853567897da2fc16972cb47a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2NzA1Mg==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545067052", "bodyText": "Input watermark is not what is concerned by this PR. That logic did not change, we only need to be able to progress output watermark when watermark hold changes.", "author": "je-ik", "createdAt": "2020-12-17T12:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwODY2Mw==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545808663", "bodyText": "You would need this change in order to go through the regular watermark emission code without changing the latest seen input watermark.", "author": "mxm", "createdAt": "2020-12-18T12:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgxMDMxOA==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545810318", "bodyText": "I would like to generalize the existing code, instead of adding code paths for every exception which is bound to be error-prone.", "author": "mxm", "createdAt": "2020-12-18T12:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "415501f0b883f09ede4546ea990b2b5f69408bd4", "chunk": "diff --git a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\nindex b77ff38a63..bcf0646dac 100644\n--- a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n+++ b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n\n@@ -741,13 +742,11 @@ public class DoFnOperator<InputT, OutputT>\n     }\n \n     currentInputWatermark = mark.getTimestamp();\n-    processInputWatermark(true);\n-  }\n-\n-  private void processInputWatermark(boolean advanceInputWatermark) throws Exception {\n     long inputWatermarkHold = applyInputWatermarkHold(getEffectiveInputWatermark());\n-    if (keyCoder != null && advanceInputWatermark) {\n+\n+    if (lastUpdatedInputWatermarkHold != inputWatermarkHold && keyCoder != null) {\n       timeServiceManagerCompat.advanceWatermark(new Watermark(inputWatermarkHold));\n+      lastUpdatedInputWatermarkHold = inputWatermarkHold;\n     }\n \n     long potentialOutputWatermark =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTUxMA==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545001510", "bodyText": "Please remove if we don't want to scatter the logic about watermark advancement.", "author": "mxm", "createdAt": "2020-12-17T11:02:56Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -739,9 +741,12 @@ public final void processWatermark1(Watermark mark) throws Exception {\n     }\n \n     currentInputWatermark = mark.getTimestamp();\n+    processInputWatermark(true);\n+  }\n \n+  private void processInputWatermark(boolean advanceInputWatermark) throws Exception {", "originalCommit": "02f132676cc5318a853567897da2fc16972cb47a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3MDI0Nw==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545070247", "bodyText": "I think that is what we must do. We could call processWatermark from processElement, but the call does stuff not necessary to do in processElement. That's why I simply wrapped what is needed to be done in processInputWatermark (maybe we could find a better name to make it clearer).", "author": "je-ik", "createdAt": "2020-12-17T12:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMTUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "415501f0b883f09ede4546ea990b2b5f69408bd4", "chunk": "diff --git a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\nindex b77ff38a63..bcf0646dac 100644\n--- a/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n+++ b/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java\n\n@@ -741,13 +742,11 @@ public class DoFnOperator<InputT, OutputT>\n     }\n \n     currentInputWatermark = mark.getTimestamp();\n-    processInputWatermark(true);\n-  }\n-\n-  private void processInputWatermark(boolean advanceInputWatermark) throws Exception {\n     long inputWatermarkHold = applyInputWatermarkHold(getEffectiveInputWatermark());\n-    if (keyCoder != null && advanceInputWatermark) {\n+\n+    if (lastUpdatedInputWatermarkHold != inputWatermarkHold && keyCoder != null) {\n       timeServiceManagerCompat.advanceWatermark(new Watermark(inputWatermarkHold));\n+      lastUpdatedInputWatermarkHold = inputWatermarkHold;\n     }\n \n     long potentialOutputWatermark =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMjUzMw==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545002533", "bodyText": "Is this required on every element? I'd rather trigger this only if we set / remove a hold.", "author": "mxm", "createdAt": "2020-12-17T11:04:34Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -641,8 +641,10 @@ protected final void setBundleFinishedCallback(Runnable callback) {\n   @Override\n   public final void processElement(StreamRecord<WindowedValue<InputT>> streamRecord) {\n     checkInvokeStartBundle();\n+    long oldHold = keyCoder != null ? keyedStateInternals.minWatermarkHoldMs() : -1L;\n     doFnRunner.processElement(streamRecord.getValue());\n     checkInvokeFinishBundleByCount();\n+    emitWatermarkIfHoldChanged(oldHold);", "originalCommit": "02f132676cc5318a853567897da2fc16972cb47a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2Nzg2MQ==", "url": "https://github.com/apache/beam/pull/13571#discussion_r545067861", "bodyText": "This is very cheap call and actually tests exactly if hold was set (actually reset).", "author": "je-ik", "createdAt": "2020-12-17T12:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAwMjUzMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8b19bc5b0b020b9bae56f9dae3a4bac2c31e49a2", "url": "https://github.com/apache/beam/commit/8b19bc5b0b020b9bae56f9dae3a4bac2c31e49a2", "message": "[BEAM-11481] emit output watermark on watermark hold change", "committedDate": "2020-12-17T15:20:28Z", "type": "forcePushed"}, {"oid": "8de6faa65e7ce786b8e4056268c4075eda176d22", "url": "https://github.com/apache/beam/commit/8de6faa65e7ce786b8e4056268c4075eda176d22", "message": "[BEAM-11481] emit output watermark on watermark hold change", "committedDate": "2020-12-17T15:23:30Z", "type": "commit"}, {"oid": "8de6faa65e7ce786b8e4056268c4075eda176d22", "url": "https://github.com/apache/beam/commit/8de6faa65e7ce786b8e4056268c4075eda176d22", "message": "[BEAM-11481] emit output watermark on watermark hold change", "committedDate": "2020-12-17T15:23:30Z", "type": "forcePushed"}, {"oid": "415501f0b883f09ede4546ea990b2b5f69408bd4", "url": "https://github.com/apache/beam/commit/415501f0b883f09ede4546ea990b2b5f69408bd4", "message": "[BEAM-11481] emit output watermark on watermark hold change", "committedDate": "2020-12-18T13:51:42Z", "type": "forcePushed"}, {"oid": "8de6faa65e7ce786b8e4056268c4075eda176d22", "url": "https://github.com/apache/beam/commit/8de6faa65e7ce786b8e4056268c4075eda176d22", "message": "[BEAM-11481] emit output watermark on watermark hold change", "committedDate": "2020-12-17T15:23:30Z", "type": "forcePushed"}]}