{"pr_number": 11184, "pr_title": "[BEAM-4374] Update protos related to MonitoringInfo.", "pr_createdAt": "2020-03-20T20:30:15Z", "pr_url": "https://github.com/apache/beam/pull/11184", "timeline": [{"oid": "c07fc9c204611939521e63ba37376e47778111ca", "url": "https://github.com/apache/beam/commit/c07fc9c204611939521e63ba37376e47778111ca", "message": "[BEAM-4374] Update protos related to MonitoringInfo.", "committedDate": "2020-03-25T17:00:19Z", "type": "forcePushed"}, {"oid": "6664d865fff40e760e2817a4683134488fcccb84", "url": "https://github.com/apache/beam/commit/6664d865fff40e760e2817a4683134488fcccb84", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T02:28:38Z", "type": "forcePushed"}, {"oid": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "url": "https://github.com/apache/beam/commit/d1cc9a69ce451bd602bf985518c6f8edf70565cf", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T02:51:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NDI2OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398794269", "bodyText": "Looks like SimpleMonitoringInfoBuilder helped a lot with this refactor :)", "author": "ajamato", "createdAt": "2020-03-26T18:21:39Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/SimpleMonitoringInfoBuilder.java", "diffHunk": "@@ -86,46 +89,97 @@ public SimpleMonitoringInfoBuilder setUrn(String urn) {\n     return this;\n   }\n \n-  /** Sets the timestamp of the MonitoringInfo to the current time. */\n-  public SimpleMonitoringInfoBuilder setTimestampToNow() {\n-    Instant time = Instant.now();\n-    this.builder.getTimestampBuilder().setSeconds(time.getEpochSecond()).setNanos(time.getNano());\n+  /**\n+   * Sets the type of the MonitoringInfo.\n+   *\n+   * @param type The type of the MonitoringInfo\n+   */\n+  public SimpleMonitoringInfoBuilder setType(String type) {\n+    this.builder.setType(type);\n+    return this;\n+  }\n+\n+  /**\n+   * Encodes the value and sets the type to {@link MonitoringInfoConstants.TypeUrns#SUM_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setInt64SumValue(long value) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(value, output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the int64Value of the CounterData in the MonitoringInfo, and the appropriate type URN. */\n-  public SimpleMonitoringInfoBuilder setInt64Value(long value) {\n-    this.builder.getMetricBuilder().getCounterDataBuilder().setInt64Value(value);\n-    this.setInt64TypeUrn();\n+  public SimpleMonitoringInfoBuilder setDoubleSumValue(double value) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      DOUBLE_CODER.encode(value, output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_DOUBLE_TYPE);\n     return this;\n   }\n \n   /**\n-   * Sets the IntDistributionData of the DistributionData in the MonitoringInfo, and the appropriate\n-   * type URN.\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#LATEST_INT64_TYPE}.\n    */\n-  public SimpleMonitoringInfoBuilder setInt64DistributionValue(DistributionData data) {\n-    this.builder\n-        .getMetricBuilder()\n-        .getDistributionDataBuilder()\n-        .getIntDistributionDataBuilder()\n-        .setCount(data.count())\n-        .setSum(data.sum())\n-        .setMin(data.min())\n-        .setMax(data.max());\n-    this.setInt64DistributionTypeUrn();\n+  public SimpleMonitoringInfoBuilder setInt64LatestValue(GaugeData data) {\n+    checkArgument(GaugeData.empty() != data, \"Cannot encode empty gauge data\");\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(data.timestamp().getMillis(), output);\n+      VARINT_CODER.encode(data.value(), output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.LATEST_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the the appropriate type URN for int64 distribution tuples. */\n-  public SimpleMonitoringInfoBuilder setInt64DistributionTypeUrn() {\n-    this.builder.setType(MonitoringInfoConstants.TypeUrns.DISTRIBUTION_INT64);\n+  /**\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#DISTRIBUTION_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setInt64DistributionValue(DistributionData data) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(data.count(), output);\n+      VARINT_CODER.encode(data.sum(), output);\n+      VARINT_CODER.encode(data.min(), output);\n+      VARINT_CODER.encode(data.max(), output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.DISTRIBUTION_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the the appropriate type URN for sum int64 counters. */\n-  public SimpleMonitoringInfoBuilder setInt64TypeUrn() {\n-    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_INT64);\n+  /**\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#DISTRIBUTION_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setDoubleDistributionValue(", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MjQ1MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398852450", "bodyText": "Yup", "author": "lukecwik", "createdAt": "2020-03-26T19:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NDI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/SimpleMonitoringInfoBuilder.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/SimpleMonitoringInfoBuilder.java\nindex 6a9fd98906..2cbaae1c80 100644\n--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/SimpleMonitoringInfoBuilder.java\n+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/SimpleMonitoringInfoBuilder.java\n\n@@ -103,25 +104,13 @@ public class SimpleMonitoringInfoBuilder {\n    * Encodes the value and sets the type to {@link MonitoringInfoConstants.TypeUrns#SUM_INT64_TYPE}.\n    */\n   public SimpleMonitoringInfoBuilder setInt64SumValue(long value) {\n-    ByteString.Output output = ByteString.newOutput();\n-    try {\n-      VARINT_CODER.encode(value, output);\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-    this.builder.setPayload(output.toByteString());\n+    this.builder.setPayload(encodeInt64Counter(value));\n     this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_INT64_TYPE);\n     return this;\n   }\n \n   public SimpleMonitoringInfoBuilder setDoubleSumValue(double value) {\n-    ByteString.Output output = ByteString.newOutput();\n-    try {\n-      DOUBLE_CODER.encode(value, output);\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-    this.builder.setPayload(output.toByteString());\n+    this.builder.setPayload(encodeDoubleCounter(value));\n     this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_DOUBLE_TYPE);\n     return this;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTg2Mw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398795863", "bodyText": "Why did you add the isEmpty() checks, this looks like the old matcher didn't have this logic, and it would match if you initialized the matcher with an empty monitoring info", "author": "ajamato", "createdAt": "2020-03-26T18:23:39Z", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java", "diffHunk": "@@ -28,30 +31,17 @@\n    * Matches a {@link MonitoringInfo} with that has the set fields in the provide MonitoringInfo.\n    *\n    * <p>This is useful for tests which do not want to match the specific value (execution times).\n-   * Currently this will only check for URNs, labels, type URNs and int64Values.\n+   * Currently this will only check for URNs, labels, type URNs and payloads.\n    */\n   public static TypeSafeMatcher<MonitoringInfo> matchSetFields(final MonitoringInfo mi) {\n     return new TypeSafeMatcher<MonitoringInfo>() {\n \n       @Override\n       protected boolean matchesSafely(MonitoringInfo item) {\n-        if (!item.getUrn().equals(mi.getUrn())) {\n-          return false;\n-        }\n-        if (!item.getLabels().equals(mi.getLabels())) {\n-          return false;\n-        }\n-        if (!item.getType().equals(mi.getType())) {\n-          return false;\n-        }\n-\n-        if (mi.getMetric().hasCounterData()) {\n-          long valueToMatch = mi.getMetric().getCounterData().getInt64Value();\n-          if (valueToMatch != item.getMetric().getCounterData().getInt64Value()) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        return (mi.getUrn().isEmpty() || mi.getUrn().equals(item.getUrn()))", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NTMxMw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398855313", "bodyText": "The contract of the matcher states that it only compares set fields and it seemed it was incorrectly implemented. I can change it back to the existing implementation where urn, labels, and type must always be specified and fix the comment.", "author": "lukecwik", "createdAt": "2020-03-26T20:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java b/runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java\nindex 4f37e8a24a..e2a8b495e2 100644\n--- a/runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java\n+++ b/runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java\n\n@@ -28,10 +27,9 @@ import org.hamcrest.TypeSafeMatcher;\n public class MonitoringInfoMatchers {\n \n   /**\n-   * Matches a {@link MonitoringInfo} with that has the set fields in the provide MonitoringInfo.\n+   * Matches a {@link MonitoringInfo} with that has the set fields in the provided MonitoringInfo.\n    *\n-   * <p>This is useful for tests which do not want to match the specific value (execution times).\n-   * Currently this will only check for URNs, labels, type URNs and payloads.\n+   * <p>Currently this will only check for URNs, labels, type URNs and payloads.\n    */\n   public static TypeSafeMatcher<MonitoringInfo> matchSetFields(final MonitoringInfo mi) {\n     return new TypeSafeMatcher<MonitoringInfo>() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODU4MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398798580", "bodyText": "would this only work with certain types? Should this be renamed?", "author": "ajamato", "createdAt": "2020-03-26T18:27:44Z", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java", "diffHunk": "@@ -76,17 +63,20 @@ public void describeTo(Description description) {\n    * Matches a {@link MonitoringInfo} with that has the set fields in the provide MonitoringInfo.\n    *\n    * <p>This is useful for tests which do not want to match the specific value (execution times).\n-   * Currently this will only check for URNs, labels, type URNs and int64Values.\n+   * Currently this will only check for URNs, labels, type URNs and {@code beam:coder:varint:v1}\n+   * encoded values.\n    */\n-  public static TypeSafeMatcher<MonitoringInfo> valueGreaterThan(final long value) {\n+  public static TypeSafeMatcher<MonitoringInfo> valueGreaterThanOrEqualTo(final long value) {", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NjY2OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398856669", "bodyText": "Renamed to counterValueGreaterThanOrEqualTo\nAlso fixed comment.", "author": "lukecwik", "createdAt": "2020-03-26T20:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java b/runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java\nindex 4f37e8a24a..e2a8b495e2 100644\n--- a/runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java\n+++ b/runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java\n\n@@ -60,23 +58,18 @@ public class MonitoringInfoMatchers {\n   }\n \n   /**\n-   * Matches a {@link MonitoringInfo} with that has the set fields in the provide MonitoringInfo.\n+   * Matches a {@link MonitoringInfo} with a {@code value} greater then or equal to the {@code\n+   * value} supplied.\n    *\n-   * <p>This is useful for tests which do not want to match the specific value (execution times).\n-   * Currently this will only check for URNs, labels, type URNs and {@code beam:coder:varint:v1}\n-   * encoded values.\n+   * <p>Currently this will only check for {@code beam:coder:varint:v1} encoded values.\n    */\n-  public static TypeSafeMatcher<MonitoringInfo> valueGreaterThanOrEqualTo(final long value) {\n+  public static TypeSafeMatcher<MonitoringInfo> counterValueGreaterThanOrEqualTo(final long value) {\n     return new TypeSafeMatcher<MonitoringInfo>() {\n \n       @Override\n       protected boolean matchesSafely(MonitoringInfo item) {\n-        try {\n-          long decodedValue = VARINT_CODER.decode(item.getPayload().newInput());\n-          return decodedValue >= value;\n-        } catch (IOException e) {\n-          throw new RuntimeException(e);\n-        }\n+        long decodedValue = decodeInt64Counter(item.getPayload());\n+        return decodedValue >= value;\n       }\n \n       @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMTM3Ng==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398801376", "bodyText": "Can we encapsulte this so that its still one line to get the value out? I think that this would be a nicer interface. For consumers. Ideally something as easy to use on the receiving side as SimpleMonitoringInfoBuilder.\ni.e.\nlong value = MonitoringInfos.getSumInt64Value(monitoringInfo)", "author": "ajamato", "createdAt": "2020-03-26T18:31:55Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ElementCountMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -95,7 +99,12 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5OTcwNw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398899707", "bodyText": "Done here and elsewhere. I introduced a MonitoringInfoEncodings class with the convenience methods for the currently used encodings.", "author": "lukecwik", "createdAt": "2020-03-26T21:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMTM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ElementCountMonitoringInfoToCounterUpdateTransformer.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ElementCountMonitoringInfoToCounterUpdateTransformer.java\nindex ec945839c3..2462269420 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ElementCountMonitoringInfoToCounterUpdateTransformer.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ElementCountMonitoringInfoToCounterUpdateTransformer.java\n\n@@ -99,13 +106,7 @@ public class ElementCountMonitoringInfoToCounterUpdateTransformer\n       return null;\n     }\n \n-    long value;\n-    try {\n-      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n+    long value = decodeInt64Counter(monitoringInfo.getPayload());\n     final String pcollectionId =\n         monitoringInfo.getLabelsMap().get(MonitoringInfoConstants.Labels.PCOLLECTION);\n     final String pcollectionName = pcollectionIdToNameContext.get(pcollectionId).userName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjkxMQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398802911", "bodyText": "Can you key this by a tuple instead of a 2 layer dictionary? That might reduce some of the boilerplate below. I believe the Pair class can work here", "author": "ajamato", "createdAt": "2020-03-26T18:34:21Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/FnApiMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -35,50 +35,82 @@\n public class FnApiMonitoringInfoToCounterUpdateTransformer\n     implements MonitoringInfoToCounterUpdateTransformer {\n \n-  final Map<String, MonitoringInfoToCounterUpdateTransformer> counterTransformers = new HashMap<>();\n+  final Map<String, Map<String, MonitoringInfoToCounterUpdateTransformer>>", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1ODQyOA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398858428", "bodyText": "Done.", "author": "lukecwik", "createdAt": "2020-03-26T20:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/FnApiMonitoringInfoToCounterUpdateTransformer.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/FnApiMonitoringInfoToCounterUpdateTransformer.java\nindex 209fb3982a..de59e5b20d 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/FnApiMonitoringInfoToCounterUpdateTransformer.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/FnApiMonitoringInfoToCounterUpdateTransformer.java\n\n@@ -35,79 +35,53 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.annotations.Visi\n public class FnApiMonitoringInfoToCounterUpdateTransformer\n     implements MonitoringInfoToCounterUpdateTransformer {\n \n-  final Map<String, Map<String, MonitoringInfoToCounterUpdateTransformer>>\n-      urnToTypeToCounterTransformers;\n+  final Map<String, MonitoringInfoToCounterUpdateTransformer> urnToCounterTransformers;\n \n   public FnApiMonitoringInfoToCounterUpdateTransformer(\n       Map<String, DataflowStepContext> stepContextMap,\n       Map<String, NameContext> sdkPCollectionIdToNameContext) {\n     SpecMonitoringInfoValidator specValidator = new SpecMonitoringInfoValidator();\n \n-    urnToTypeToCounterTransformers = new HashMap<>();\n+    urnToCounterTransformers = new HashMap<>();\n \n     UserMonitoringInfoToCounterUpdateTransformer userCounterTransformer =\n         new UserMonitoringInfoToCounterUpdateTransformer(specValidator, stepContextMap);\n-    urnToTypeToCounterTransformers\n-        .computeIfAbsent(\n-            UserMonitoringInfoToCounterUpdateTransformer.getSupportedUrnPrefix(),\n-            s -> new HashMap<>())\n-        .put(\n-            UserMonitoringInfoToCounterUpdateTransformer.getSupportedType(),\n-            userCounterTransformer);\n+    urnToCounterTransformers.put(\n+        UserMonitoringInfoToCounterUpdateTransformer.getSupportedUrn(), userCounterTransformer);\n \n     UserDistributionMonitoringInfoToCounterUpdateTransformer userDistributionCounterTransformer =\n         new UserDistributionMonitoringInfoToCounterUpdateTransformer(specValidator, stepContextMap);\n-    urnToTypeToCounterTransformers\n-        .computeIfAbsent(\n-            UserDistributionMonitoringInfoToCounterUpdateTransformer.getSupportedUrn(),\n-            s -> new HashMap<>())\n-        .put(\n-            UserDistributionMonitoringInfoToCounterUpdateTransformer.getSupportedType(),\n-            userDistributionCounterTransformer);\n+    urnToCounterTransformers.put(\n+        UserDistributionMonitoringInfoToCounterUpdateTransformer.getSupportedUrn(),\n+        userDistributionCounterTransformer);\n \n-    MSecMonitoringInfoToCounterUpdateTransformer msecTransformer =\n-        new MSecMonitoringInfoToCounterUpdateTransformer(specValidator, stepContextMap);\n-    for (String urn : MSecMonitoringInfoToCounterUpdateTransformer.getSupportedUrns()) {\n-      this.urnToTypeToCounterTransformers\n-          .computeIfAbsent(urn, s -> new HashMap<>())\n-          .put(MSecMonitoringInfoToCounterUpdateTransformer.getSupportedType(), msecTransformer);\n+    ExecutionTimeMonitoringInfoToCounterUpdateTransformer msecTransformer =\n+        new ExecutionTimeMonitoringInfoToCounterUpdateTransformer(specValidator, stepContextMap);\n+    for (String urn : ExecutionTimeMonitoringInfoToCounterUpdateTransformer.getSupportedUrns()) {\n+      this.urnToCounterTransformers.put(urn, msecTransformer);\n     }\n-    this.urnToTypeToCounterTransformers\n-        .computeIfAbsent(\n-            ElementCountMonitoringInfoToCounterUpdateTransformer.getSupportedUrn(),\n-            s -> new HashMap<>())\n-        .put(\n-            ElementCountMonitoringInfoToCounterUpdateTransformer.getSupportedType(),\n-            new ElementCountMonitoringInfoToCounterUpdateTransformer(\n-                specValidator, sdkPCollectionIdToNameContext));\n-    this.urnToTypeToCounterTransformers\n-        .computeIfAbsent(\n-            MeanByteCountMonitoringInfoToCounterUpdateTransformer.getSupportedUrn(),\n-            s -> new HashMap<>())\n-        .put(\n-            MeanByteCountMonitoringInfoToCounterUpdateTransformer.getSupportedType(),\n-            new MeanByteCountMonitoringInfoToCounterUpdateTransformer(\n-                specValidator, sdkPCollectionIdToNameContext));\n+    this.urnToCounterTransformers.put(\n+        ElementCountMonitoringInfoToCounterUpdateTransformer.getSupportedUrn(),\n+        new ElementCountMonitoringInfoToCounterUpdateTransformer(\n+            specValidator, sdkPCollectionIdToNameContext));\n+    this.urnToCounterTransformers.put(\n+        MeanByteCountMonitoringInfoToCounterUpdateTransformer.getSupportedUrn(),\n+        new MeanByteCountMonitoringInfoToCounterUpdateTransformer(\n+            specValidator, sdkPCollectionIdToNameContext));\n   }\n \n   /** Allows for injection of user and generic counter transformers for more convenient testing. */\n   @VisibleForTesting\n   public FnApiMonitoringInfoToCounterUpdateTransformer(\n-      Map<String, Map<String, MonitoringInfoToCounterUpdateTransformer>>\n-          urnToTypeToCounterTransformers) {\n-    this.urnToTypeToCounterTransformers = urnToTypeToCounterTransformers;\n+      Map<String, MonitoringInfoToCounterUpdateTransformer> urnToCounterTransformers) {\n+    this.urnToCounterTransformers = urnToCounterTransformers;\n   }\n \n   @Override\n   @Nullable\n   public CounterUpdate transform(MonitoringInfo src) {\n-    String urn = src.getUrn();\n-    Map<String, MonitoringInfoToCounterUpdateTransformer> transformers =\n-        urnToTypeToCounterTransformers.get(urn);\n-    if (transformers == null) {\n-      return null;\n-    }\n-    MonitoringInfoToCounterUpdateTransformer transformer = transformers.get(src.getType());\n+    MonitoringInfoToCounterUpdateTransformer transformer =\n+        urnToCounterTransformers.get(src.getUrn());\n     if (transformer == null) {\n       return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNDk0NQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398804945", "bodyText": "Ditto here, please use a one liner helper method to extract the value, here and in all the transformer classes.", "author": "ajamato", "createdAt": "2020-03-26T18:37:39Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -120,14 +110,19 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformer.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ExecutionTimeMonitoringInfoToCounterUpdateTransformer.java\nsimilarity index 91%\nrename from runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformer.java\nrename to runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ExecutionTimeMonitoringInfoToCounterUpdateTransformer.java\nindex e138023202..9c1bcba3d8 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformer.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ExecutionTimeMonitoringInfoToCounterUpdateTransformer.java\n\n@@ -110,12 +117,7 @@ public class MSecMonitoringInfoToCounterUpdateTransformer\n       return null;\n     }\n \n-    long value;\n-    try {\n-      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n+    long value = decodeInt64Counter(monitoringInfo.getPayload());\n     String urn = monitoringInfo.getUrn();\n \n     final String ptransform =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTIyNw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398805227", "bodyText": "ditto", "author": "ajamato", "createdAt": "2020-03-26T18:38:06Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MeanByteCountMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -100,8 +101,18 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    IntDistributionData value =\n-        monitoringInfo.getMetric().getDistributionData().getIntDistributionData();\n+    long count;\n+    long sum;\n+    try {\n+      InputStream payload = monitoringInfo.getPayload().newInput();", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MeanByteCountMonitoringInfoToCounterUpdateTransformer.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MeanByteCountMonitoringInfoToCounterUpdateTransformer.java\nindex 1082e9db9e..cecc6c8052 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MeanByteCountMonitoringInfoToCounterUpdateTransformer.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MeanByteCountMonitoringInfoToCounterUpdateTransformer.java\n\n@@ -101,19 +108,7 @@ public class MeanByteCountMonitoringInfoToCounterUpdateTransformer\n       return null;\n     }\n \n-    long count;\n-    long sum;\n-    try {\n-      InputStream payload = monitoringInfo.getPayload().newInput();\n-      count = VARINT_CODER.decode(payload);\n-      sum = VARINT_CODER.decode(payload);\n-      // Skip decoding the rest of the payload\n-      // min = VARINT_CODER.decode(payload);\n-      // max = VARINT_CODER.decode(payload);\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n+    DistributionData data = decodeInt64Distribution(monitoringInfo.getPayload());\n     final String pcollectionId =\n         monitoringInfo.getLabelsMap().get(MonitoringInfoConstants.Labels.PCOLLECTION);\n     final String pcollectionName = pcollectionIdToNameContext.get(pcollectionId).userName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTU3OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398805578", "bodyText": "ditto, this is also too low level, please use a helper here. Let's try to encapsulate the bytes payload format of MonitoringInfos.", "author": "ajamato", "createdAt": "2020-03-26T18:38:38Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperation.java", "diffHunk": "@@ -446,7 +447,11 @@ long getInputElementsConsumed(final Iterable<MonitoringInfo> monitoringInfos) {\n         String pcollection =\n             mi.getLabelsOrDefault(MonitoringInfoConstants.Labels.PCOLLECTION, null);\n         if (pcollection != null && pcollection.equals(grpcReadTransformOutputPCollectionName)) {\n-          return mi.getMetric().getCounterData().getInt64Value();\n+          try {\n+            return VARINT_CODER.decode(mi.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperation.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperation.java\nindex 02e913ead1..2fbe144831 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperation.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperation.java\n\n@@ -447,11 +447,7 @@ public class RegisterAndProcessBundleOperation extends Operation {\n         String pcollection =\n             mi.getLabelsOrDefault(MonitoringInfoConstants.Labels.PCOLLECTION, null);\n         if (pcollection != null && pcollection.equals(grpcReadTransformOutputPCollectionName)) {\n-          try {\n-            return VARINT_CODER.decode(mi.getPayload().newInput());\n-          } catch (IOException e) {\n-            throw new RuntimeException(e);\n-          }\n+          return decodeInt64Counter(mi.getPayload());\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNjk5Nw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398806997", "bodyText": "ditto please use one liner here", "author": "ajamato", "createdAt": "2020-03-26T18:40:55Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/UserMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -95,7 +100,12 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/UserMonitoringInfoToCounterUpdateTransformer.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/UserMonitoringInfoToCounterUpdateTransformer.java\nindex 8ac2bd6e8b..59cb13f692 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/UserMonitoringInfoToCounterUpdateTransformer.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/UserMonitoringInfoToCounterUpdateTransformer.java\n\n@@ -100,13 +105,7 @@ class UserMonitoringInfoToCounterUpdateTransformer\n       return null;\n     }\n \n-    long value;\n-    try {\n-      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n+    long value = decodeInt64Counter(monitoringInfo.getPayload());\n     Map<String, String> miLabels = monitoringInfo.getLabelsMap();\n     final String ptransform = miLabels.get(MonitoringInfoConstants.Labels.PTRANSFORM);\n     final String counterName = miLabels.get(MonitoringInfoConstants.Labels.NAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk5OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398810999", "bodyText": "Can you add a TODO to rename this to ExecutionTimeMonitoringInfoToCounterUpdateTransformer", "author": "ajamato", "createdAt": "2020-03-26T18:47:23Z", "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformerTest.java", "diffHunk": "@@ -54,39 +58,33 @@ public void setUp() throws Exception {\n \n   @Test\n   public void testTransformReturnsNullIfSpecValidationFails() {\n-    Map<String, String> counterNameMapping = new HashMap<>();\n-    counterNameMapping.put(\"beam:counter:supported\", \"supportedCounter\");\n-\n     Map<String, DataflowStepContext> stepContextMapping = new HashMap<>();\n \n     MSecMonitoringInfoToCounterUpdateTransformer testObject =", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MTQ2NA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398851464", "bodyText": "Did the rename.", "author": "lukecwik", "createdAt": "2020-03-26T19:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "23a41f374e899eeda3e9d709974ec277eeb50f78", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformerTest.java b/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/ExecutionTimeMonitoringInfoToCounterUpdateTransformerTest.java\nsimilarity index 82%\nrename from runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformerTest.java\nrename to runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/ExecutionTimeMonitoringInfoToCounterUpdateTransformerTest.java\nindex 76460b67d2..f99cf5a45d 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformerTest.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/ExecutionTimeMonitoringInfoToCounterUpdateTransformerTest.java\n\n@@ -60,8 +59,9 @@ public class MSecMonitoringInfoToCounterUpdateTransformerTest {\n   public void testTransformReturnsNullIfSpecValidationFails() {\n     Map<String, DataflowStepContext> stepContextMapping = new HashMap<>();\n \n-    MSecMonitoringInfoToCounterUpdateTransformer testObject =\n-        new MSecMonitoringInfoToCounterUpdateTransformer(mockSpecValidator, stepContextMapping);\n+    ExecutionTimeMonitoringInfoToCounterUpdateTransformer testObject =\n+        new ExecutionTimeMonitoringInfoToCounterUpdateTransformer(\n+            mockSpecValidator, stepContextMapping);\n \n     Optional<String> error = Optional.of(\"Error text\");\n     when(mockSpecValidator.validate(any())).thenReturn(error);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjY5MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398812690", "bodyText": "ditto, please use a helper here to make this a one liner to extract the value", "author": "ajamato", "createdAt": "2020-03-26T18:49:58Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java", "diffHunk": "@@ -115,17 +113,15 @@ private static PortableMetrics convertMonitoringInfosToMetricResults(\n         MetricKey.create(\n             labelsMap.get(STEP_NAME_LABEL),\n             MetricName.named(labelsMap.get(NAMESPACE_LABEL), labelsMap.get(METRIC_NAME_LABEL)));\n-    MetricsApi.IntExtremaData extremaData =\n-        monitoringInfo.getMetric().getExtremaData().getIntExtremaData();\n-    // Get only last value of the extrema table\n-    Instant timestamp = Instant.ofEpochSecond(monitoringInfo.getTimestamp().getSeconds());\n-    if (extremaData.getIntValuesCount() > 0) {\n-      GaugeResult result =\n-          GaugeResult.create(\n-              extremaData.getIntValues(extremaData.getIntValuesCount() - 1), timestamp);\n+    try {\n+      InputStream input = monitoringInfo.getPayload().newInput();\n+      long timestamp = VARINT_CODER.decode(input);", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40bc44a1a1e0fcb23771e08f41d06bcecda04494", "chunk": "diff --git a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java b/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java\nindex 6e6325fe0c..270e852aa1 100644\n--- a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java\n+++ b/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java\n\n@@ -113,15 +114,10 @@ public class PortableMetrics extends MetricResults {\n         MetricKey.create(\n             labelsMap.get(STEP_NAME_LABEL),\n             MetricName.named(labelsMap.get(NAMESPACE_LABEL), labelsMap.get(METRIC_NAME_LABEL)));\n-    try {\n-      InputStream input = monitoringInfo.getPayload().newInput();\n-      long timestamp = VARINT_CODER.decode(input);\n-      long value = VARINT_CODER.decode(input);\n-      GaugeResult result = GaugeResult.create(value, new Instant(timestamp));\n-      return MetricResult.create(key, false, result);\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n+\n+    GaugeData data = decodeInt64Gauge(monitoringInfo.getPayload());\n+    GaugeResult result = GaugeResult.create(data.value(), data.timestamp());\n+    return MetricResult.create(key, false, result);\n   }\n \n   private static MetricResult<DistributionResult> convertDistributionMonitoringInfoToDistribution(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjg2MQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398812861", "bodyText": "ditto, please use helper here", "author": "ajamato", "createdAt": "2020-03-26T18:50:12Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java", "diffHunk": "@@ -135,21 +131,23 @@ private static PortableMetrics convertMonitoringInfosToMetricResults(\n         MetricKey.create(\n             labelsMap.get(STEP_NAME_LABEL),\n             MetricName.named(labelsMap.get(NAMESPACE_LABEL), labelsMap.get(METRIC_NAME_LABEL)));\n-    MetricsApi.IntDistributionData intDistributionData =\n-        monitoringInfo.getMetric().getDistributionData().getIntDistributionData();\n-    DistributionResult result =\n-        DistributionResult.create(\n-            intDistributionData.getSum(),\n-            intDistributionData.getCount(),\n-            intDistributionData.getMin(),\n-            intDistributionData.getMax());\n-    return MetricResult.create(key, false, result);\n+    try {\n+      InputStream input = monitoringInfo.getPayload().newInput();\n+      long count = VARINT_CODER.decode(input);", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "40bc44a1a1e0fcb23771e08f41d06bcecda04494", "chunk": "diff --git a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java b/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java\nindex 6e6325fe0c..270e852aa1 100644\n--- a/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java\n+++ b/runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java\n\n@@ -131,17 +127,10 @@ public class PortableMetrics extends MetricResults {\n         MetricKey.create(\n             labelsMap.get(STEP_NAME_LABEL),\n             MetricName.named(labelsMap.get(NAMESPACE_LABEL), labelsMap.get(METRIC_NAME_LABEL)));\n-    try {\n-      InputStream input = monitoringInfo.getPayload().newInput();\n-      long count = VARINT_CODER.decode(input);\n-      long sum = VARINT_CODER.decode(input);\n-      long min = VARINT_CODER.decode(input);\n-      long max = VARINT_CODER.decode(input);\n-      DistributionResult result = DistributionResult.create(sum, count, min, max);\n-      return MetricResult.create(key, false, result);\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n+    DistributionData data = decodeInt64Distribution(monitoringInfo.getPayload());\n+    DistributionResult result =\n+        DistributionResult.create(data.sum(), data.count(), data.min(), data.max());\n+    return MetricResult.create(key, false, result);\n   }\n \n   private static Iterable<MetricResult<Long>> extractCountersFromJobMetrics(\n"}}, {"oid": "23a41f374e899eeda3e9d709974ec277eeb50f78", "url": "https://github.com/apache/beam/commit/23a41f374e899eeda3e9d709974ec277eeb50f78", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T23:37:15Z", "type": "forcePushed"}, {"oid": "40bc44a1a1e0fcb23771e08f41d06bcecda04494", "url": "https://github.com/apache/beam/commit/40bc44a1a1e0fcb23771e08f41d06bcecda04494", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-27T18:30:44Z", "type": "commit"}, {"oid": "40bc44a1a1e0fcb23771e08f41d06bcecda04494", "url": "https://github.com/apache/beam/commit/40bc44a1a1e0fcb23771e08f41d06bcecda04494", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-27T18:30:44Z", "type": "forcePushed"}]}