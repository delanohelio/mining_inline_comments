{"pr_number": 11397, "pr_title": "[BEAM-9743] Fix TFRecordCodec to try harder to read/write", "pr_createdAt": "2020-04-11T09:17:44Z", "pr_url": "https://github.com/apache/beam/pull/11397", "timeline": [{"oid": "6d6c13ec7125ba5b015a6848c86e80cd4181940c", "url": "https://github.com/apache/beam/commit/6d6c13ec7125ba5b015a6848c86e80cd4181940c", "message": "[BEAM-9743] Fix TFRecordCodec to try harder to read/write", "committedDate": "2020-04-11T08:50:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg==", "url": "https://github.com/apache/beam/pull/11397#discussion_r407041552", "bodyText": "I'm not sure if I can/should make these better.\nIf the channel does not follow Javadoc description and keeps returning 0 without throwing,\nit might have an infinite loop.\nThat might be channel's problem, but not sure if I have to add something like hard limit on the number of retry.", "author": "lukemin89", "createdAt": "2020-04-11T09:33:08Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +715,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, expected));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }\n+\n+    @VisibleForTesting\n+    static void writeFully(WritableByteChannel channel, ByteBuffer buffer) throws IOException {\n+      while (buffer.hasRemaining()) {\n+        channel.write(buffer);\n+      }", "originalCommit": "6d6c13ec7125ba5b015a6848c86e80cd4181940c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MjI4MA==", "url": "https://github.com/apache/beam/pull/11397#discussion_r407042280", "bodyText": "Or I can make the loop condition stricter since I am pretty sure, within beam, all channels will read/write at least 1 byte.", "author": "lukemin89", "createdAt": "2020-04-11T09:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4OTUzMg==", "url": "https://github.com/apache/beam/pull/11397#discussion_r408989532", "bodyText": "This will only become a busy loop on async channels but will still make progress successfully. If this becomes an issue, the code can be expanded to correctly handle the busy loop.", "author": "lukecwik", "createdAt": "2020-04-15T16:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1MjY5MQ==", "url": "https://github.com/apache/beam/pull/11397#discussion_r409952691", "bodyText": "Thanks for the confirmation :)", "author": "lukemin89", "createdAt": "2020-04-17T02:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MTU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f3f75399c000f0c45d399d02194e6db1546a6757", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java\nindex b4c478fdaa..f77ff2e5e6 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java\n\n@@ -730,7 +731,7 @@ public class TFRecordIO {\n       int expected = bb.remaining();\n       int actual = read(in, bb);\n       if (expected != actual) {\n-        throw new IOException(String.format(\"expected %d, but got %d\", expected, expected));\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, actual));\n       }\n     }\n \n"}}, {"oid": "6c15a4af1c18512d2b90a59c4b7326d4428bc80b", "url": "https://github.com/apache/beam/commit/6c15a4af1c18512d2b90a59c4b7326d4428bc80b", "message": "[BEAM-9743] reverted header byte length check", "committedDate": "2020-04-12T00:06:21Z", "type": "commit"}, {"oid": "f3f75399c000f0c45d399d02194e6db1546a6757", "url": "https://github.com/apache/beam/commit/f3f75399c000f0c45d399d02194e6db1546a6757", "message": "[BEAM-9743] fix typo", "committedDate": "2020-04-12T03:00:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjUyMA==", "url": "https://github.com/apache/beam/pull/11397#discussion_r408996520", "bodyText": "You want to ensure that the exception is because of having a truncated read so it is useful to check that the message contains a part of what you think it should have such as expected and but got. Check out https://junit.org/junit4/javadoc/4.12/org/junit/rules/ExpectedException.html or anything like it.", "author": "lukecwik", "createdAt": "2020-04-15T17:02:50Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "diffHunk": "@@ -440,4 +456,115 @@ public void processElement(ProcessContext c) {\n       c.output(c.element().getBytes(Charsets.UTF_8));\n     }\n   }\n+\n+  static boolean maybeThisTime() {\n+    return ThreadLocalRandom.current().nextBoolean();\n+  }\n+\n+  static class PickyReadChannel extends FilterInputStream implements ReadableByteChannel {\n+    protected PickyReadChannel(InputStream in) {\n+      super(in);\n+    }\n+\n+    @Override\n+    public int read(byte[] b, int off, int len) {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int read(ByteBuffer dst) throws IOException {\n+      if (!maybeThisTime() || !dst.hasRemaining()) {\n+        return 0;\n+      }\n+      int n = read();\n+      if (n == -1) {\n+        return -1;\n+      }\n+      dst.put((byte) n);\n+      return 1;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  static class PickyWriteChannel extends FilterOutputStream implements WritableByteChannel {\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    public PickyWriteChannel(OutputStream out) {\n+      super(out);\n+    }\n+\n+    @Override\n+    public int write(ByteBuffer src) throws IOException {\n+      if (!maybeThisTime() || !src.hasRemaining()) {\n+        return 0;\n+      }\n+      write(src.get());\n+      return 1;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  @Test\n+  public void testReadFully() throws IOException {\n+    byte[] data = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n+    ReadableByteChannel chan = new PickyReadChannel(new ByteArrayInputStream(data));\n+\n+    ByteBuffer buffer = ByteBuffer.allocate(data.length);\n+    TFRecordCodec.readFully(chan, buffer);\n+\n+    assertArrayEquals(data, buffer.array());\n+  }\n+\n+  @Test(expected = IOException.class)", "originalCommit": "f3f75399c000f0c45d399d02194e6db1546a6757", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1MjEyMw==", "url": "https://github.com/apache/beam/pull/11397#discussion_r409952123", "bodyText": "done! changed to use ExpectedExcepton", "author": "lukemin89", "createdAt": "2020-04-17T02:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "06fcb8428508afd7bd85b4845266a64bd174a47f", "chunk": "diff --git a/sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java b/sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java\nindex d6d32971c3..4ecfe6abd3 100644\n--- a/sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java\n+++ b/sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java\n\n@@ -526,11 +526,14 @@ public class TFRecordIOTest {\n     assertArrayEquals(data, buffer.array());\n   }\n \n-  @Test(expected = IOException.class)\n+  @Test\n   public void testReadFullyFail() throws IOException {\n     byte[] trunc = \"Hello Wo\".getBytes(StandardCharsets.UTF_8);\n     ReadableByteChannel chan = new PickyReadChannel(new ByteArrayInputStream(trunc));\n     ByteBuffer buffer = ByteBuffer.allocate(trunc.length + 1);\n+\n+    expectedException.expect(IOException.class);\n+    expectedException.expectMessage(\"expected 9, but got 8\");\n     TFRecordCodec.readFully(chan, buffer);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjE0NQ==", "url": "https://github.com/apache/beam/pull/11397#discussion_r409002145", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n          \n          \n            \n                  int n, read = 0;\n          \n          \n            \n                  while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n          \n          \n            \n                    read += n;\n          \n          \n            \n                  }\n          \n          \n            \n                  return read;\n          \n          \n            \n                }\n          \n          \n            \n                private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n          \n          \n            \n                  int expected = bb.remaining();\n          \n          \n            \n                  while (bb.hasRemaining() && in.read(bb) >= 0) {\n          \n          \n            \n                  }\n          \n          \n            \n                  return expected - bb.remaining();\n          \n          \n            \n                }", "author": "lukecwik", "createdAt": "2020-04-15T17:12:03Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java", "diffHunk": "@@ -717,14 +716,38 @@ public void write(WritableByteChannel outChannel, byte[] data) throws IOExceptio\n       header.clear();\n       header.putLong(data.length).putInt(maskedCrc32OfLength);\n       header.rewind();\n-      outChannel.write(header);\n+      writeFully(outChannel, header);\n \n-      outChannel.write(ByteBuffer.wrap(data));\n+      writeFully(outChannel, ByteBuffer.wrap(data));\n \n       footer.clear();\n       footer.putInt(maskedCrc32OfData);\n       footer.rewind();\n-      outChannel.write(footer);\n+      writeFully(outChannel, footer);\n+    }\n+\n+    @VisibleForTesting\n+    static void readFully(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int expected = bb.remaining();\n+      int actual = read(in, bb);\n+      if (expected != actual) {\n+        throw new IOException(String.format(\"expected %d, but got %d\", expected, actual));\n+      }\n+    }\n+\n+    private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n+      int n, read = 0;\n+      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n+        read += n;\n+      }\n+      return read;\n+    }", "originalCommit": "f3f75399c000f0c45d399d02194e6db1546a6757", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1MjAyMQ==", "url": "https://github.com/apache/beam/pull/11397#discussion_r409952021", "bodyText": "Done! (spotlessApply forced me to change bracket loc)", "author": "lukemin89", "createdAt": "2020-04-17T02:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "06fcb8428508afd7bd85b4845266a64bd174a47f", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java\nindex f77ff2e5e6..6f8227eb03 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TFRecordIO.java\n\n@@ -736,11 +736,9 @@ public class TFRecordIO {\n     }\n \n     private static int read(ReadableByteChannel in, ByteBuffer bb) throws IOException {\n-      int n, read = 0;\n-      while (bb.hasRemaining() && (n = in.read(bb)) >= 0) {\n-        read += n;\n-      }\n-      return read;\n+      int expected = bb.remaining();\n+      while (bb.hasRemaining() && in.read(bb) >= 0) {}\n+      return expected - bb.remaining();\n     }\n \n     @VisibleForTesting\n"}}, {"oid": "06fcb8428508afd7bd85b4845266a64bd174a47f", "url": "https://github.com/apache/beam/commit/06fcb8428508afd7bd85b4845266a64bd174a47f", "message": "[BEAM-9743] reflect comment : fix test + reformat", "committedDate": "2020-04-17T02:10:48Z", "type": "commit"}]}