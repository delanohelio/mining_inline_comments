{"pr_number": 11350, "pr_title": "[BEAM-1589] Added @OnWindowExpiration annotation.", "pr_createdAt": "2020-04-08T16:57:25Z", "pr_url": "https://github.com/apache/beam/pull/11350", "timeline": [{"oid": "3e13b38ef83b0a9da4e190cbcc795605c8f4f18a", "url": "https://github.com/apache/beam/commit/3e13b38ef83b0a9da4e190cbcc795605c8f4f18a", "message": "OnWindowExpiration in progress", "committedDate": "2020-04-02T07:24:58Z", "type": "commit"}, {"oid": "f8ae1c4a05b0bc9d80f636e0e62b44e07465674b", "url": "https://github.com/apache/beam/commit/f8ae1c4a05b0bc9d80f636e0e62b44e07465674b", "message": "Adding ONWindowExpiration in DoFnRunner, Adding a test case in ParDoTest", "committedDate": "2020-04-07T14:02:00Z", "type": "commit"}, {"oid": "b87cd52d5d67a0911190007bb8c70ba500bb3487", "url": "https://github.com/apache/beam/commit/b87cd52d5d67a0911190007bb8c70ba500bb3487", "message": "Updating Test case with OutputReceiver", "committedDate": "2020-04-08T14:07:21Z", "type": "commit"}, {"oid": "4c8c37b0b8367bf252fd0d6145bd00c52bea0b4a", "url": "https://github.com/apache/beam/commit/4c8c37b0b8367bf252fd0d6145bd00c52bea0b4a", "message": "Merge branch 'master' into feature/BEAM-1589", "committedDate": "2020-04-08T14:46:35Z", "type": "commit"}, {"oid": "74e0fe0b169c333fd28a7f1574699064f930b192", "url": "https://github.com/apache/beam/commit/74e0fe0b169c333fd28a7f1574699064f930b192", "message": "OnWindowExpiration late data drop fixed", "committedDate": "2020-04-09T11:11:09Z", "type": "commit"}, {"oid": "cd3711a4480b493c897eb72cfeb896b1e29f23dc", "url": "https://github.com/apache/beam/commit/cd3711a4480b493c897eb72cfeb896b1e29f23dc", "message": "Support in DataFlow", "committedDate": "2020-04-09T17:02:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwODQ3OQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r406508479", "bodyText": "What do timestamp and timeDomain mean in this context?\nAlso presumably you do want to be able to access the key in onWindowExpiration", "author": "reuvenlax", "createdAt": "2020-04-09T22:17:58Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java", "diffHunk": "@@ -52,6 +52,12 @@ void onTimer(\n    */\n   void finishBundle();\n \n+  /**\n+   * Calls a {@link DoFn DoFn's} {@link DoFn.OnWindowExpiration @OnWindowExpiration} method and\n+   * performs additional task, such as extracts a value saved in a state before garbage collection.\n+   */\n+  void onWindowExpiration(BoundedWindow window, Instant timestamp, TimeDomain timeDomain);", "originalCommit": "cd3711a4480b493c897eb72cfeb896b1e29f23dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MTAyNQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r406841025", "bodyText": "@reuvenlax timestamp added to keep the time of outputs from OnWindowExpiration. This would be window.maxTimestamp()\ntimeDomain removed", "author": "rehmanmuradali", "createdAt": "2020-04-10T16:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwODQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "377cd514c1e8393dc09a9dbf43a1f391f269793f", "chunk": "diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java\nindex fb35b158a2..b7be3ec62e 100644\n--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java\n+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java\n\n@@ -56,7 +56,7 @@ public interface DoFnRunner<InputT, OutputT> {\n    * Calls a {@link DoFn DoFn's} {@link DoFn.OnWindowExpiration @OnWindowExpiration} method and\n    * performs additional task, such as extracts a value saved in a state before garbage collection.\n    */\n-  void onWindowExpiration(BoundedWindow window, Instant timestamp, TimeDomain timeDomain);\n+  void onWindowExpiration(BoundedWindow window, Instant timestamp);\n \n   /**\n    * @since 2.5.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwODU4NQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r406508585", "bodyText": "Why is this based on OnTimerContext?", "author": "reuvenlax", "createdAt": "2020-04-09T22:18:21Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java", "diffHunk": "@@ -841,6 +847,238 @@ public BundleFinalizer bundleFinalizer() {\n     }\n   }\n \n+  /**\n+   * A concrete implementation of {@link DoFnInvoker.ArgumentProvider} used for running a {@link\n+   * DoFn} on window expiration.\n+   */\n+  private class OnWindowExpirationArgumentProvider extends DoFn<InputT, OutputT>.OnTimerContext", "originalCommit": "cd3711a4480b493c897eb72cfeb896b1e29f23dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTU5OQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r406839599", "bodyText": "@reuvenlax OnWindowExpirationContext added.", "author": "rehmanmuradali", "createdAt": "2020-04-10T16:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwODU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "377cd514c1e8393dc09a9dbf43a1f391f269793f", "chunk": "diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java\nindex dc07feb9a2..924cda1e0e 100644\n--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java\n+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java\n\n@@ -851,12 +850,11 @@ public class SimpleDoFnRunner<InputT, OutputT> implements DoFnRunner<InputT, Out\n    * A concrete implementation of {@link DoFnInvoker.ArgumentProvider} used for running a {@link\n    * DoFn} on window expiration.\n    */\n-  private class OnWindowExpirationArgumentProvider extends DoFn<InputT, OutputT>.OnTimerContext\n+  private class OnWindowExpirationArgumentProvider\n+      extends DoFn<InputT, OutputT>.OnWindowExpirationContext\n       implements DoFnInvoker.ArgumentProvider<InputT, OutputT> {\n     private final BoundedWindow window;\n     private final Instant timestamp;\n-    private final TimeDomain timeDomain;\n-\n     /** Lazily initialized; should only be accessed via {@link #getNamespace()}. */\n     private @Nullable StateNamespace namespace;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMDU4NQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r406510585", "bodyText": "We also seem to set GC timers in ReduceFnRunner.java. @kennknowles do you know why we have both?", "author": "reuvenlax", "createdAt": "2020-04-09T22:23:56Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -591,7 +591,7 @@ public void flushState() {\n               timerId,\n               \"\",\n               cleanupTime,\n-              cleanupTime,", "originalCommit": "cd3711a4480b493c897eb72cfeb896b1e29f23dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMjY5Mg==", "url": "https://github.com/apache/beam/pull/11350#discussion_r409602692", "bodyText": "@reuvenlax  added in ReduceFnRunner.java", "author": "rehmanmuradali", "createdAt": "2020-04-16T14:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMDU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1fe8a4b4b4b940e344d6b7f6e553f354b90dafb2", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\nindex 92a15ebf3c..e17d7acec6 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n\n@@ -591,7 +591,7 @@ public class StreamingModeExecutionContext extends DataflowExecutionContext<Step\n               timerId,\n               \"\",\n               cleanupTime,\n-              window.maxTimestamp(),\n+              cleanupTime.minus(1L),\n               TimeDomain.EVENT_TIME);\n     }\n \n"}}, {"oid": "de6440c1123d31f479ecfb5db0776253d45780d8", "url": "https://github.com/apache/beam/commit/de6440c1123d31f479ecfb5db0776253d45780d8", "message": "Merge remote-tracking branch 'origin/master' into feature/BEAM-1589", "committedDate": "2020-04-10T11:36:34Z", "type": "commit"}, {"oid": "377cd514c1e8393dc09a9dbf43a1f391f269793f", "url": "https://github.com/apache/beam/commit/377cd514c1e8393dc09a9dbf43a1f391f269793f", "message": "OnWindowExpirationContextParameter added", "committedDate": "2020-04-10T16:19:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3OTIwMg==", "url": "https://github.com/apache/beam/pull/11350#discussion_r407479202", "bodyText": "this should be window.maxTimestamp() + allowedLateness I think?  cleanupTime here is passed in as maxTimestamp + allowedLateness + 1ms", "author": "steveniemitz", "createdAt": "2020-04-13T13:31:36Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -591,7 +591,7 @@ public void flushState() {\n               timerId,\n               \"\",\n               cleanupTime,\n-              cleanupTime,\n+              window.maxTimestamp(),", "originalCommit": "377cd514c1e8393dc09a9dbf43a1f391f269793f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMjQzNw==", "url": "https://github.com/apache/beam/pull/11350#discussion_r409602437", "bodyText": "@steveniemitz  cleanupTime.minus(1L) added", "author": "rehmanmuradali", "createdAt": "2020-04-16T14:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ3OTIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "1fe8a4b4b4b940e344d6b7f6e553f354b90dafb2", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\nindex 92a15ebf3c..e17d7acec6 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n\n@@ -591,7 +591,7 @@ public class StreamingModeExecutionContext extends DataflowExecutionContext<Step\n               timerId,\n               \"\",\n               cleanupTime,\n-              window.maxTimestamp(),\n+              cleanupTime.minus(1L),\n               TimeDomain.EVENT_TIME);\n     }\n \n"}}, {"oid": "5fa7031e175de5b90fda69797deb17a833852215", "url": "https://github.com/apache/beam/commit/5fa7031e175de5b90fda69797deb17a833852215", "message": "Merge branch 'master' into feature/BEAM-1589", "committedDate": "2020-04-16T09:08:36Z", "type": "commit"}, {"oid": "1fe8a4b4b4b940e344d6b7f6e553f354b90dafb2", "url": "https://github.com/apache/beam/commit/1fe8a4b4b4b940e344d6b7f6e553f354b90dafb2", "message": "Update Test Case, Dataflow Support", "committedDate": "2020-04-16T12:20:00Z", "type": "commit"}, {"oid": "0b9f2f20a41010580318293d985499626a830ab8", "url": "https://github.com/apache/beam/commit/0b9f2f20a41010580318293d985499626a830ab8", "message": "Added UsesOnWindowExpiration Category", "committedDate": "2020-04-16T14:28:31Z", "type": "commit"}, {"oid": "740fafbbd6935633ea5c550ed58dd0c1a73f6ec9", "url": "https://github.com/apache/beam/commit/740fafbbd6935633ea5c550ed58dd0c1a73f6ec9", "message": "Merge branch 'master' into feature/BEAM-1589", "committedDate": "2020-04-20T09:02:10Z", "type": "commit"}, {"oid": "5eb5d2e9ec4ab8a91049acfb36be683ed6a03144", "url": "https://github.com/apache/beam/commit/5eb5d2e9ec4ab8a91049acfb36be683ed6a03144", "message": "Excluding OnWindow Category, Reverting WatermarkHold", "committedDate": "2020-04-20T13:54:13Z", "type": "commit"}, {"oid": "0380fb41fc493d2f343cd6bfb39a6388851de317", "url": "https://github.com/apache/beam/commit/0380fb41fc493d2f343cd6bfb39a6388851de317", "message": "Merge branch 'master' into feature/BEAM-1589\n\n# Conflicts:\n#\tsdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "committedDate": "2020-04-28T09:26:51Z", "type": "commit"}, {"oid": "352d02d80796d80adec100079a377583ddcc6f06", "url": "https://github.com/apache/beam/commit/352d02d80796d80adec100079a377583ddcc6f06", "message": "Adding Key in OnWindowExpiration", "committedDate": "2020-04-28T15:20:14Z", "type": "commit"}, {"oid": "6342bbeca0920c2849b5747b7c746b0bb2380f2f", "url": "https://github.com/apache/beam/commit/6342bbeca0920c2849b5747b7c746b0bb2380f2f", "message": "Data flow support", "committedDate": "2020-05-04T14:30:36Z", "type": "commit"}, {"oid": "eaca948d28dc5cfee506db999b5377adc5789333", "url": "https://github.com/apache/beam/commit/eaca948d28dc5cfee506db999b5377adc5789333", "message": "UserParDoFnFactoryTest testCleanupWorks fix", "committedDate": "2020-05-05T10:00:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyMzMxNg==", "url": "https://github.com/apache/beam/pull/11350#discussion_r420423316", "bodyText": "Wondering if we need to expose timers here, as I don't see how it makes sense to create a new timer in an expired window.", "author": "reuvenlax", "createdAt": "2020-05-05T21:40:25Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java", "diffHunk": "@@ -857,6 +863,223 @@ public BundleFinalizer bundleFinalizer() {\n     }\n   }\n \n+  /**\n+   * A concrete implementation of {@link DoFnInvoker.ArgumentProvider} used for running a {@link\n+   * DoFn} on window expiration.\n+   */\n+  private class OnWindowExpirationArgumentProvider<KeyT>\n+      extends DoFn<InputT, OutputT>.OnWindowExpirationContext\n+      implements DoFnInvoker.ArgumentProvider<InputT, OutputT> {\n+    private final BoundedWindow window;\n+    private final Instant timestamp;\n+    private final KeyT key;\n+    /** Lazily initialized; should only be accessed via {@link #getNamespace()}. */\n+    private @Nullable StateNamespace namespace;\n+\n+    /**\n+     * The state namespace for this context.\n+     *\n+     * <p>Any call to this method when more than one window is present will crash; this represents a\n+     * bug in the runner or the {@link DoFnSignature}, since values must be in exactly one window\n+     * when state or timers are relevant.\n+     */\n+    private StateNamespace getNamespace() {\n+      if (namespace == null) {\n+        namespace = StateNamespaces.window(windowCoder, window);\n+      }\n+      return namespace;\n+    }\n+\n+    private OnWindowExpirationArgumentProvider(BoundedWindow window, Instant timestamp, KeyT key) {\n+      fn.super();\n+      this.window = window;\n+      this.timestamp = timestamp;\n+      this.key = key;\n+    }\n+\n+    @Override\n+    public BoundedWindow window() {\n+      return window;\n+    }\n+\n+    @Override\n+    public PaneInfo paneInfo(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\n+          \"Cannot access paneInfo outside of @ProcessElement methods.\");\n+    }\n+\n+    @Override\n+    public PipelineOptions pipelineOptions() {\n+      return getPipelineOptions();\n+    }\n+\n+    @Override\n+    public DoFn<InputT, OutputT>.StartBundleContext startBundleContext(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"StartBundleContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public DoFn<InputT, OutputT>.FinishBundleContext finishBundleContext(\n+        DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"FinishBundleContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public DoFn<InputT, OutputT>.ProcessContext processContext(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"ProcessContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public InputT element(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"Element parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public Object sideInput(String tagId) {\n+      throw new UnsupportedOperationException(\"SideInput parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public Object schemaElement(int index) {\n+      throw new UnsupportedOperationException(\"Element parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n+      return timestamp;\n+    }\n+\n+    @Override\n+    public String timerId(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"Timer parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public TimeDomain timeDomain(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\n+          \"Cannot access time domain outside of @ProcessTimer method.\");\n+    }\n+\n+    @Override\n+    public KeyT key() {\n+      return key;\n+    }\n+\n+    @Override\n+    public OutputReceiver<OutputT> outputReceiver(DoFn<InputT, OutputT> doFn) {\n+      return DoFnOutputReceivers.windowedReceiver(this, mainOutputTag);\n+    }\n+\n+    @Override\n+    public OutputReceiver<Row> outputRowReceiver(DoFn<InputT, OutputT> doFn) {\n+      return DoFnOutputReceivers.rowReceiver(this, mainOutputTag, mainOutputSchemaCoder);\n+    }\n+\n+    @Override\n+    public MultiOutputReceiver taggedOutputReceiver(DoFn<InputT, OutputT> doFn) {\n+      return DoFnOutputReceivers.windowedMultiReceiver(this, outputCoders);\n+    }\n+\n+    @Override\n+    public Object restriction() {\n+      throw new UnsupportedOperationException(\"@Restriction parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public DoFn<InputT, OutputT>.OnTimerContext onTimerContext(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"OnTimerContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public RestrictionTracker<?, ?> restrictionTracker() {\n+      throw new UnsupportedOperationException(\"RestrictionTracker parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public Object watermarkEstimatorState() {\n+      throw new UnsupportedOperationException(\n+          \"@WatermarkEstimatorState parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public WatermarkEstimator<?> watermarkEstimator() {\n+      throw new UnsupportedOperationException(\"WatermarkEstimator parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public State state(String stateId, boolean alwaysFetched) {\n+      try {\n+        StateSpec<?> spec =\n+            (StateSpec<?>) signature.stateDeclarations().get(stateId).field().get(fn);\n+        State state =\n+            stepContext\n+                .stateInternals()\n+                .state(getNamespace(), StateTags.tagForSpec(stateId, (StateSpec) spec));\n+        if (alwaysFetched) {\n+          return (State) ((ReadableState) state).readLater();\n+        } else {\n+          return state;\n+        }\n+      } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    @Override\n+    public Timer timer(String timerId) {\n+      try {\n+        TimerSpec spec = (TimerSpec) signature.timerDeclarations().get(timerId).field().get(fn);", "originalCommit": "6342bbeca0920c2849b5747b7c746b0bb2380f2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3f3222b2d077e6253fd11b18e989431435569ee", "chunk": "diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java\nindex 2aa98d0be8..29462a8bce 100644\n--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java\n+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java\n\n@@ -1027,25 +1027,12 @@ public class SimpleDoFnRunner<InputT, OutputT> implements DoFnRunner<InputT, Out\n \n     @Override\n     public Timer timer(String timerId) {\n-      try {\n-        TimerSpec spec = (TimerSpec) signature.timerDeclarations().get(timerId).field().get(fn);\n-        return new TimerInternalsTimer(\n-            window, getNamespace(), timerId, spec, timestamp, stepContext.timerInternals());\n-      } catch (IllegalAccessException e) {\n-        throw new RuntimeException(e);\n-      }\n+      throw new UnsupportedOperationException(\"Timer parameters are not supported.\");\n     }\n \n     @Override\n     public TimerMap timerFamily(String timerFamilyId) {\n-      try {\n-        TimerSpec spec =\n-            (TimerSpec) signature.timerFamilyDeclarations().get(timerFamilyId).field().get(fn);\n-        return new TimerInternalsTimerMap(\n-            timerFamilyId, window(), getNamespace(), spec, timestamp, stepContext.timerInternals());\n-      } catch (IllegalAccessException e) {\n-        throw new RuntimeException(e);\n-      }\n+      throw new UnsupportedOperationException(\"TimerFamily parameters are not supported.\");\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyNDEzMQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r420424131", "bodyText": "why did you subtract 1 here?", "author": "reuvenlax", "createdAt": "2020-05-05T21:42:06Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -387,7 +387,8 @@ private void processSystemTimer(TimerData timer) throws Exception {\n           timer);\n \n       BoundedWindow window = ((WindowNamespace) timer.getNamespace()).getWindow();\n-      Instant targetTime = earliestAllowableCleanupTime(window, fnInfo.getWindowingStrategy());\n+      Instant targetTime =\n+          earliestAllowableCleanupTime(window, fnInfo.getWindowingStrategy()).minus(1L);", "originalCommit": "6342bbeca0920c2849b5747b7c746b0bb2380f2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3f3222b2d077e6253fd11b18e989431435569ee", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java\nindex bca789bdf5..0356d773e1 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java\n\n@@ -387,8 +387,7 @@ public class SimpleParDoFn<InputT, OutputT> implements ParDoFn {\n           timer);\n \n       BoundedWindow window = ((WindowNamespace) timer.getNamespace()).getWindow();\n-      Instant targetTime =\n-          earliestAllowableCleanupTime(window, fnInfo.getWindowingStrategy()).minus(1L);\n+      Instant targetTime = earliestAllowableCleanupTime(window, fnInfo.getWindowingStrategy());\n \n       checkState(\n           !targetTime.isAfter(timer.getTimestamp()),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyNTAxMg==", "url": "https://github.com/apache/beam/pull/11350#discussion_r420425012", "bodyText": "I think this change is incorrect. Why was it necessary?", "author": "reuvenlax", "createdAt": "2020-05-05T21:44:08Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillTimerInternals.java", "diffHunk": "@@ -246,8 +246,8 @@ public static boolean isUserTimer(Windmill.Timer timer) {\n       builder.setStateFamily(stateFamily);\n     }\n \n-    builder.setTimestamp(WindmillTimeUtils.harnessToWindmillTimestamp(timerData.getTimestamp()));\n-\n+    builder.setTimestamp(\n+        WindmillTimeUtils.harnessToWindmillTimestamp(timerData.getOutputTimestamp()));", "originalCommit": "eaca948d28dc5cfee506db999b5377adc5789333", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3f3222b2d077e6253fd11b18e989431435569ee", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillTimerInternals.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillTimerInternals.java\nindex 2c3c42b613..5d92d2a626 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillTimerInternals.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillTimerInternals.java\n\n@@ -246,8 +246,8 @@ class WindmillTimerInternals implements TimerInternals {\n       builder.setStateFamily(stateFamily);\n     }\n \n-    builder.setTimestamp(\n-        WindmillTimeUtils.harnessToWindmillTimestamp(timerData.getOutputTimestamp()));\n+    builder.setTimestamp(WindmillTimeUtils.harnessToWindmillTimestamp(timerData.getTimestamp()));\n+\n     return builder;\n   }\n \n"}}, {"oid": "f3f3222b2d077e6253fd11b18e989431435569ee", "url": "https://github.com/apache/beam/commit/f3f3222b2d077e6253fd11b18e989431435569ee", "message": "Removing timer functionality in OnWindowExpiration", "committedDate": "2020-05-06T16:47:38Z", "type": "commit"}, {"oid": "cda33fa7cc37ed80acc0ae6e722b873d52646853", "url": "https://github.com/apache/beam/commit/cda33fa7cc37ed80acc0ae6e722b873d52646853", "message": "Updating hold criteria", "committedDate": "2020-05-11T17:23:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDEwNQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r423204105", "bodyText": "@reuvenlax, Can you guide why we are not considering outputTimestamp in WindmillTimerInternals.windmillTimerToTimerData. TimerData is created as follows:\nTimerData.of(id, familyId, namespace, timestamp, timerTypeToTimeDomain(timer.getType()));\nI think this is where we lost outputTimestamp.", "author": "rehmanmuradali", "createdAt": "2020-05-11T17:32:49Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFn.java", "diffHunk": "@@ -397,6 +397,9 @@ private void processSystemTimer(TimerData timer) throws Exception {\n           window,\n           targetTime);\n \n+      fnRunner.onWindowExpiration(\n+          window, timer.getOutputTimestamp(), this.stepContext.stateInternals().getKey());", "originalCommit": "cda33fa7cc37ed80acc0ae6e722b873d52646853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MTU3MA==", "url": "https://github.com/apache/beam/pull/11350#discussion_r423271570", "bodyText": "Why do we need the output timestamp in onWindowExpiration?", "author": "reuvenlax", "createdAt": "2020-05-11T19:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3NzY0Mg==", "url": "https://github.com/apache/beam/pull/11350#discussion_r423277642", "bodyText": "I think elements that are output on OnWindowExpiration would have a timestamp equals the output timestamp of the GC timer that's why we need it here. In the case of a window of Instant [0-10), 10 would be GC timer with an output timestamp of 9. So elements that are output from onWindowExpiration would have a timestamp of 9. @reuvenlax", "author": "rehmanmuradali", "createdAt": "2020-05-11T19:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDEwNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "32e5a3dc5f9f40f5d510ebd384fe43d382ca9297", "url": "https://github.com/apache/beam/commit/32e5a3dc5f9f40f5d510ebd384fe43d382ca9297", "message": "Add support in Batch Mode", "committedDate": "2020-05-13T14:18:24Z", "type": "commit"}, {"oid": "4721f62975fcd9ab57517be1f79cd60e07299bd1", "url": "https://github.com/apache/beam/commit/4721f62975fcd9ab57517be1f79cd60e07299bd1", "message": "Merge branch 'master' into feature/BEAM-1589\n\n# Conflicts:\n#\trunners/spark/build.gradle\n#\trunners/spark/job-server/build.gradle", "committedDate": "2020-05-13T14:25:21Z", "type": "commit"}, {"oid": "50fee3af6b576f92f99fae0309670ff3cf14bbe8", "url": "https://github.com/apache/beam/commit/50fee3af6b576f92f99fae0309670ff3cf14bbe8", "message": "Reverting gc holds in ReduceFnRunner", "committedDate": "2020-05-13T14:58:14Z", "type": "commit"}, {"oid": "e4e70d2cf3c3fb254b9bc40c5ae31faa639dec4b", "url": "https://github.com/apache/beam/commit/e4e70d2cf3c3fb254b9bc40c5ae31faa639dec4b", "message": "Merge branch 'master' into feature/BEAM-1589", "committedDate": "2020-05-16T10:05:23Z", "type": "commit"}, {"oid": "bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d", "url": "https://github.com/apache/beam/commit/bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d", "message": "Deletion of System Timer + Test updates", "committedDate": "2020-05-17T10:41:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzMzOA==", "url": "https://github.com/apache/beam/pull/11350#discussion_r426413338", "bodyText": "I want to avoid the performance regression of setting a watermark hold if not needed.  Make the outputTimestamp be a parameter to this function, and pass it in only if the DoFn has an onWindowExpiration (SimpleParDoFn has the DoFnSignature so you should be able to tell there).", "author": "reuvenlax", "createdAt": "2020-05-18T07:15:53Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -591,7 +595,7 @@ public void flushState() {\n               timerId,\n               \"\",\n               cleanupTime,\n-              cleanupTime,\n+              cleanupTime.minus(1L),", "originalCommit": "bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxODI2OQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r426618269", "bodyText": "done", "author": "rehmanmuradali", "createdAt": "2020-05-18T13:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "d62a8cdb7cbbde90a1142f6fe50e11df96303239", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\nindex bde538daf2..cfaf950a2b 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n\n@@ -588,14 +590,18 @@ public class StreamingModeExecutionContext extends DataflowExecutionContext<Step\n \n     @Override\n     public <W extends BoundedWindow> void setStateCleanupTimer(\n-        String timerId, W window, Coder<W> windowCoder, Instant cleanupTime) {\n+        String timerId,\n+        W window,\n+        Coder<W> windowCoder,\n+        Instant cleanupTime,\n+        Instant cleanupOutputTimestamp) {\n       timerInternals()\n           .setTimer(\n               StateNamespaces.window(windowCoder, window),\n               timerId,\n               \"\",\n               cleanupTime,\n-              cleanupTime.minus(1L),\n+              cleanupOutputTimestamp,\n               TimeDomain.EVENT_TIME);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjE3Nw==", "url": "https://github.com/apache/beam/pull/11350#discussion_r426416177", "bodyText": "I think we should only do this if there is a hold to delete.", "author": "reuvenlax", "createdAt": "2020-05-18T07:22:03Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java", "diffHunk": "@@ -552,7 +552,11 @@ public void flushState() {\n       if (!cachedFiredTimers.hasNext()) {\n         return null;\n       }\n-      return cachedFiredTimers.next();\n+      TimerData nextTimer = cachedFiredTimers.next();\n+      // system timers ( GC timer) must be explicitly deleted when delivered, to release the implied\n+      // hold.\n+      systemTimerInternals.deleteTimer(nextTimer);", "originalCommit": "bcfdd7816d9f71f7faceb7d4950a2f0c3a7d6c7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxODAwMQ==", "url": "https://github.com/apache/beam/pull/11350#discussion_r426618001", "bodyText": "@reuvenlax done", "author": "rehmanmuradali", "createdAt": "2020-05-18T13:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d62a8cdb7cbbde90a1142f6fe50e11df96303239", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\nindex bde538daf2..cfaf950a2b 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingModeExecutionContext.java\n\n@@ -553,9 +553,11 @@ public class StreamingModeExecutionContext extends DataflowExecutionContext<Step\n         return null;\n       }\n       TimerData nextTimer = cachedFiredTimers.next();\n-      // system timers ( GC timer) must be explicitly deleted when delivered, to release the implied\n-      // hold.\n-      systemTimerInternals.deleteTimer(nextTimer);\n+      // system timers ( GC timer) must be explicitly deleted if only there is a hold.\n+      // if timestamp is not equals to outputTimestamp then there should be a hold\n+      if (!nextTimer.getTimestamp().equals(nextTimer.getOutputTimestamp())) {\n+        systemTimerInternals.deleteTimer(nextTimer);\n+      }\n       return nextTimer;\n     }\n \n"}}, {"oid": "d62a8cdb7cbbde90a1142f6fe50e11df96303239", "url": "https://github.com/apache/beam/commit/d62a8cdb7cbbde90a1142f6fe50e11df96303239", "message": "Setting and deleting hold if OnWindowExpiration is present", "committedDate": "2020-05-18T13:16:44Z", "type": "commit"}]}