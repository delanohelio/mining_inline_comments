{"pr_number": 11682, "pr_title": "[BEAM-9946] | added new api in Partition Transform", "pr_createdAt": "2020-05-12T14:37:41Z", "pr_url": "https://github.com/apache/beam/pull/11682", "timeline": [{"oid": "4cb725e94580703adfbecfadb964dc1d048dacfa", "url": "https://github.com/apache/beam/commit/4cb725e94580703adfbecfadb964dc1d048dacfa", "message": "[BEAM-9946] | added new api", "committedDate": "2020-05-12T14:28:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MTQxOA==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428371418", "bodyText": "nit: this can be final", "author": "apilloud", "createdAt": "2020-05-20T23:52:51Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;", "originalCommit": "4cb725e94580703adfbecfadb964dc1d048dacfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTczOA==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399738", "bodyText": "Done. thanks", "author": "darshanj", "createdAt": "2020-05-21T01:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MTQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\nindex 4bf4e2ae8d..e693f863e9 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n\n@@ -191,20 +192,20 @@ public class Partition<T> extends PTransform<PCollection<T>, PCollectionList<T>>\n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n     private final TupleTagList outputTags;\n-    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n-    private Object originalFnForDisplayData;\n+    private final Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private final Class<?> originalFnClassForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(\n+    private PartitionDoFn(\n         int numPartitions,\n         Contextful<Contextful.Fn<X, Integer>> ctxFn,\n-        Object originalFnForDisplayData) {\n+        Class<?> originalFnClassForDisplayData) {\n       this.ctxFn = ctxFn;\n-      this.originalFnForDisplayData = originalFnForDisplayData;\n+      this.originalFnClassForDisplayData = originalFnClassForDisplayData;\n       if (numPartitions <= 0) {\n         throw new IllegalArgumentException(\"numPartitions must be > 0\");\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTI3OQ==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428375279", "bodyText": "This is a no-op, please remove.", "author": "apilloud", "createdAt": "2020-05-21T00:06:16Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -76,6 +93,45 @@\n     int partitionFor(T elem, int numPartitions);\n   }\n \n+  /**\n+   * A function object that chooses an output partition for an element.\n+   *\n+   * @param <T> the type of the elements being partitioned\n+   */\n+  public interface PartitionWithSideInputsFn<T> extends Serializable {\n+    /**\n+     * Chooses the partition into which to put the given element.\n+     *\n+     * @param elem the element to be partitioned\n+     * @param numPartitions the total number of partitions ({@code >= 1})\n+     * @param c the {@link Contextful.Fn.Context} needed to access sideInputs.\n+     * @return index of the selected partition (in the range {@code [0..numPartitions-1]})\n+     */\n+    int partitionFor(T elem, int numPartitions, Contextful.Fn.Context c);\n+  }\n+\n+  /**\n+   * Returns a new {@code Partition} {@code PTransform} that divides its input {@code PCollection}\n+   * into the given number of partitions, using the given partitioning function.\n+   *\n+   * @param numPartitions the number of partitions to divide the input {@code PCollection} into\n+   * @param partitionFn the function to invoke on each element to choose its output partition\n+   * @param requirements the {@link Requirements} needed to run it.\n+   * @throws IllegalArgumentException if {@code numPartitions <= 0}\n+   */\n+  public static <T> Partition<T> of(\n+      int numPartitions,\n+      PartitionWithSideInputsFn<? super T> partitionFn,\n+      Requirements requirements) {\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions, c),\n+            requirements);\n+    Object aClass = partitionFn;", "originalCommit": "4cb725e94580703adfbecfadb964dc1d048dacfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTY3MQ==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399671", "bodyText": "Hi, I don't get your suggestion here. I will need to wrap interface function in ContextFul.Fn. Can you eloborate please?", "author": "darshanj", "createdAt": "2020-05-21T01:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\nindex 4bf4e2ae8d..e693f863e9 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n\n@@ -128,8 +130,7 @@ public class Partition<T> extends PTransform<PCollection<T>, PCollectionList<T>>\n             (T element, Contextful.Fn.Context c) ->\n                 partitionFn.partitionFor(element, numPartitions, c),\n             requirements);\n-    Object aClass = partitionFn;\n-    return new Partition<>(new PartitionDoFn<T>(numPartitions, ctfFn, aClass));\n+    return new Partition<>(new PartitionDoFn<T>(numPartitions, ctfFn, partitionFn.getClass()));\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOQ==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428375309", "bodyText": "This is a no-op, please remove.", "author": "apilloud", "createdAt": "2020-05-21T00:06:26Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -85,7 +141,14 @@\n    * @throws IllegalArgumentException if {@code numPartitions <= 0}\n    */\n   public static <T> Partition<T> of(int numPartitions, PartitionFn<? super T> partitionFn) {\n-    return new Partition<>(new PartitionDoFn<T>(numPartitions, partitionFn));\n+\n+    Contextful ctfFn =\n+        Contextful.fn(\n+            (T element, Contextful.Fn.Context c) ->\n+                partitionFn.partitionFor(element, numPartitions),\n+            Requirements.empty());\n+    Object aClass = partitionFn;", "originalCommit": "4cb725e94580703adfbecfadb964dc1d048dacfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTYzNA==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399634", "bodyText": "Hi, I don't get your suggestion here. I will need to wrap interface function in ContextFul.Fn. Can you eloborate please?", "author": "darshanj", "createdAt": "2020-05-21T01:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3ODY0MQ==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428778641", "bodyText": "The statement Object aClass = partitionFn; has no effect. You can just pass partitionFn directly into the function.", "author": "apilloud", "createdAt": "2020-05-21T16:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NTMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\nindex 4bf4e2ae8d..e693f863e9 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n\n@@ -147,8 +148,8 @@ public class Partition<T> extends PTransform<PCollection<T>, PCollectionList<T>>\n             (T element, Contextful.Fn.Context c) ->\n                 partitionFn.partitionFor(element, numPartitions),\n             Requirements.empty());\n-    Object aClass = partitionFn;\n-    return new Partition<>(new PartitionDoFn<T>(numPartitions, ctfFn, aClass));\n+\n+    return new Partition<>(new PartitionDoFn<T>(numPartitions, ctfFn, partitionFn.getClass()));\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzM3Mg==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377372", "bodyText": "nit: drop the public.", "author": "apilloud", "createdAt": "2020-05-21T00:13:51Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(int numPartitions, PartitionFn<? super X> partitionFn) {\n+    public PartitionDoFn(", "originalCommit": "4cb725e94580703adfbecfadb964dc1d048dacfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTc3MA==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399770", "bodyText": "Done.Thanks", "author": "darshanj", "createdAt": "2020-05-21T01:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\nindex 4bf4e2ae8d..e693f863e9 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n\n@@ -191,20 +192,20 @@ public class Partition<T> extends PTransform<PCollection<T>, PCollectionList<T>>\n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n     private final TupleTagList outputTags;\n-    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n-    private Object originalFnForDisplayData;\n+    private final Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private final Class<?> originalFnClassForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(\n+    private PartitionDoFn(\n         int numPartitions,\n         Contextful<Contextful.Fn<X, Integer>> ctxFn,\n-        Object originalFnForDisplayData) {\n+        Class<?> originalFnClassForDisplayData) {\n       this.ctxFn = ctxFn;\n-      this.originalFnForDisplayData = originalFnForDisplayData;\n+      this.originalFnClassForDisplayData = originalFnClassForDisplayData;\n       if (numPartitions <= 0) {\n         throw new IllegalArgumentException(\"numPartitions must be > 0\");\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ1Mw==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377453", "bodyText": "nit: this can be final", "author": "apilloud", "createdAt": "2020-05-21T00:14:09Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;", "originalCommit": "4cb725e94580703adfbecfadb964dc1d048dacfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTgwMg==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399802", "bodyText": "Done Thanks", "author": "darshanj", "createdAt": "2020-05-21T01:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\nindex 4bf4e2ae8d..e693f863e9 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n\n@@ -191,20 +192,20 @@ public class Partition<T> extends PTransform<PCollection<T>, PCollectionList<T>>\n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n     private final TupleTagList outputTags;\n-    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n-    private Object originalFnForDisplayData;\n+    private final Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private final Class<?> originalFnClassForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(\n+    private PartitionDoFn(\n         int numPartitions,\n         Contextful<Contextful.Fn<X, Integer>> ctxFn,\n-        Object originalFnForDisplayData) {\n+        Class<?> originalFnClassForDisplayData) {\n       this.ctxFn = ctxFn;\n-      this.originalFnForDisplayData = originalFnForDisplayData;\n+      this.originalFnClassForDisplayData = originalFnClassForDisplayData;\n       if (numPartitions <= 0) {\n         throw new IllegalArgumentException(\"numPartitions must be > 0\");\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ5NA==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428377494", "bodyText": "How about just passing the class here?", "author": "apilloud", "createdAt": "2020-05-21T00:14:20Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java", "diffHunk": "@@ -124,21 +190,26 @@ private Partition(PartitionDoFn<T> partitionDoFn) {\n \n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n-    private final PartitionFn<? super X> partitionFn;\n     private final TupleTagList outputTags;\n+    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private Object originalFnForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(int numPartitions, PartitionFn<? super X> partitionFn) {\n+    public PartitionDoFn(\n+        int numPartitions,\n+        Contextful<Contextful.Fn<X, Integer>> ctxFn,\n+        Object originalFnForDisplayData) {", "originalCommit": "4cb725e94580703adfbecfadb964dc1d048dacfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTkyOQ==", "url": "https://github.com/apache/beam/pull/11682#discussion_r428399929", "bodyText": "Done thanks.", "author": "darshanj", "createdAt": "2020-05-21T01:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3NzQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\nindex 4bf4e2ae8d..e693f863e9 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Partition.java\n\n@@ -191,20 +192,20 @@ public class Partition<T> extends PTransform<PCollection<T>, PCollectionList<T>>\n   private static class PartitionDoFn<X> extends DoFn<X, Void> {\n     private final int numPartitions;\n     private final TupleTagList outputTags;\n-    private Contextful<Contextful.Fn<X, Integer>> ctxFn;\n-    private Object originalFnForDisplayData;\n+    private final Contextful<Contextful.Fn<X, Integer>> ctxFn;\n+    private final Class<?> originalFnClassForDisplayData;\n \n     /**\n      * Constructs a PartitionDoFn.\n      *\n      * @throws IllegalArgumentException if {@code numPartitions <= 0}\n      */\n-    public PartitionDoFn(\n+    private PartitionDoFn(\n         int numPartitions,\n         Contextful<Contextful.Fn<X, Integer>> ctxFn,\n-        Object originalFnForDisplayData) {\n+        Class<?> originalFnClassForDisplayData) {\n       this.ctxFn = ctxFn;\n-      this.originalFnForDisplayData = originalFnForDisplayData;\n+      this.originalFnClassForDisplayData = originalFnClassForDisplayData;\n       if (numPartitions <= 0) {\n         throw new IllegalArgumentException(\"numPartitions must be > 0\");\n       }\n"}}, {"oid": "1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "url": "https://github.com/apache/beam/commit/1ff417983d0bcb4e030d4aa2eb327fb21a2b42ae", "message": "[BEAM-9946] | some fixes for review comments", "committedDate": "2020-05-21T01:50:36Z", "type": "commit"}, {"oid": "26311bb849f37d2dc7639ea0e7b5dc70970dd6f1", "url": "https://github.com/apache/beam/commit/26311bb849f37d2dc7639ea0e7b5dc70970dd6f1", "message": "[BEAM-9946] | revert to pass object instead of class", "committedDate": "2020-05-22T02:38:05Z", "type": "commit"}]}