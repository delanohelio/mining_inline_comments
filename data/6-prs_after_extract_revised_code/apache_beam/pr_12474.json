{"pr_number": 12474, "pr_title": "[BEAM-10650] OrderedListState API", "pr_createdAt": "2020-08-05T20:22:15Z", "pr_url": "https://github.com/apache/beam/pull/12474", "timeline": [{"oid": "dc72b71ecbcb2069a7fdbb3d2f5092ce0a42e236", "url": "https://github.com/apache/beam/commit/dc72b71ecbcb2069a7fdbb3d2f5092ce0a42e236", "message": "OrderedListState API", "committedDate": "2020-08-05T20:43:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NTE4Ng==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466595186", "bodyText": "Need a readRangeLater(...) too", "author": "dpmills", "createdAt": "2020-08-06T18:08:38Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.state;\n+\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.values.TimestampedValue;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link ReadableState} cell containing a list of values sorted by timestamp. Timestamped values\n+ * can be added to the list, and subranges can be read out in order. Subranges of the list can be\n+ * deleted as well.\n+ */\n+@Experimental(Kind.STATE)\n+public interface OrderedListState<T>\n+    extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n+\n+  /** Read the entire list ordered by timestamp. */\n+  @Override\n+  Iterable<TimestampedValue<T>> read();\n+\n+  /**\n+   * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling\n+   * iterable.\n+   */\n+  Iterable<TimestampedValue<T>> readRange(Instant minTimestamp, Instant limitTimestamp);\n+\n+  /** Clear all values in the list. */\n+  @Override\n+  void clear();\n+\n+  /**\n+   * Clear a timestamp-limited subrange of the list.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be removed from the\n+   * list.\n+   */\n+  void clearRange(Instant minTimestamp, Instant limitTimestamp);\n+\n+  @Override\n+  OrderedListState<T> readLater();", "originalCommit": "38a58fa67313c91fb86670fc74cfea3aa0f074df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2Njk1Mw==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466666953", "bodyText": "Done", "author": "reuvenlax", "createdAt": "2020-08-06T20:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NTE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "48aaa023f1327a554b20965883546d5748937878", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\nindex 034506a4c0..827bebfa9e 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\n\n@@ -30,23 +30,15 @@ import org.joda.time.Instant;\n @Experimental(Kind.STATE)\n public interface OrderedListState<T>\n     extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n-\n-  /** Read the entire list ordered by timestamp. */\n-  @Override\n-  Iterable<TimestampedValue<T>> read();\n-\n   /**\n    * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n    *\n    * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling\n-   * iterable.\n+   * iterable. This means that only timestamps strictly less than\n+   * Instant.ofEpochMilli(Long.MAX_VALUE) can be used as timestamps.\n    */\n   Iterable<TimestampedValue<T>> readRange(Instant minTimestamp, Instant limitTimestamp);\n \n-  /** Clear all values in the list. */\n-  @Override\n-  void clear();\n-\n   /**\n    * Clear a timestamp-limited subrange of the list.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NjUwMQ==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466596501", "bodyText": "If you are intentionally not implementing this for streaming DataflowRunner yet, better to throw an UnsupportedOperationException instead of returning null for these methods.\nAlso add a comment to the class saying that it's unsupported, maybe linking to a JIRA issue that tracks support", "author": "dpmills", "createdAt": "2020-08-06T18:10:59Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillStateInternals.java", "diffHunk": "@@ -456,6 +470,64 @@ protected WorkItemCommitRequest persistDirectly(WindmillStateCache.ForKey cache)\n     }\n   }\n \n+  private static class WindmillOrderedList<T> extends SimpleWindmillState\n+      implements OrderedListState<T> {\n+\n+    private final StateNamespace namespace;\n+    private final StateTag<OrderedListState<T>> spec;\n+    private final ByteString stateKey;\n+    private final String stateFamily;\n+    private final Coder<T> elemCoder;\n+\n+    private WindmillOrderedList(\n+        StateNamespace namespace,\n+        StateTag<OrderedListState<T>> spec,\n+        String stateFamily,\n+        Coder<T> elemCoder,\n+        boolean isNewKey) {\n+      this.namespace = namespace;\n+      this.spec = spec;\n+      this.stateKey = encodeKey(namespace, spec);\n+      this.stateFamily = stateFamily;\n+      this.elemCoder = elemCoder;\n+    }\n+\n+    @Override\n+    public Iterable<TimestampedValue<T>> read() {\n+      return null;", "originalCommit": "38a58fa67313c91fb86670fc74cfea3aa0f074df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NzAwOQ==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466667009", "bodyText": "done", "author": "reuvenlax", "createdAt": "2020-08-06T20:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NjUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "48aaa023f1327a554b20965883546d5748937878", "chunk": "diff --git a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillStateInternals.java b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillStateInternals.java\nindex fc99058407..2ad11f4bd1 100644\n--- a/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillStateInternals.java\n+++ b/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/WindmillStateInternals.java\n\n@@ -494,31 +494,50 @@ class WindmillStateInternals<K> implements StateInternals {\n \n     @Override\n     public Iterable<TimestampedValue<T>> read() {\n-      return null;\n+      throw new UnsupportedOperationException(\n+          String.format(\"%s is not supported\", OrderedListState.class.getSimpleName()));\n     }\n \n     @Override\n     public Iterable<TimestampedValue<T>> readRange(Instant minTimestamp, Instant limitTimestamp) {\n-      return null;\n+      throw new UnsupportedOperationException(\n+          String.format(\"%s is not supported\", OrderedListState.class.getSimpleName()));\n     }\n \n     @Override\n-    public void clear() {}\n+    public void clear() {\n+      throw new UnsupportedOperationException(\n+          String.format(\"%s is not supported\", OrderedListState.class.getSimpleName()));\n+    }\n \n     @Override\n-    public void clearRange(Instant minTimestamp, Instant limitTimestamp) {}\n+    public void clearRange(Instant minTimestamp, Instant limitTimestamp) {\n+      throw new UnsupportedOperationException(\n+          String.format(\"%s is not supported\", OrderedListState.class.getSimpleName()));\n+    }\n \n     @Override\n-    public void add(TimestampedValue<T> value) {}\n+    public void add(TimestampedValue<T> value) {\n+      throw new UnsupportedOperationException(\n+          String.format(\"%s is not supported\", OrderedListState.class.getSimpleName()));\n+    }\n \n     @Override\n     public ReadableState<Boolean> isEmpty() {\n-      return null;\n+      throw new UnsupportedOperationException(\n+          String.format(\"%s is not supported\", OrderedListState.class.getSimpleName()));\n     }\n \n     @Override\n     public OrderedListState<T> readLater() {\n-      return null;\n+      throw new UnsupportedOperationException(\n+          String.format(\"%s is not supported\", OrderedListState.class.getSimpleName()));\n+    }\n+\n+    @Override\n+    public OrderedListState<T> readRangeLater(Instant minTimestamp, Instant limitTimestamp) {\n+      throw new UnsupportedOperationException(\n+          String.format(\"%s is not supported\", OrderedListState.class.getSimpleName()));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0MDkxMg==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466640912", "bodyText": "Don't need to include the inherited methods here.  If you do include them, include all of them, including isEmpty", "author": "dpmills", "createdAt": "2020-08-06T19:35:03Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.state;\n+\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.values.TimestampedValue;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link ReadableState} cell containing a list of values sorted by timestamp. Timestamped values\n+ * can be added to the list, and subranges can be read out in order. Subranges of the list can be\n+ * deleted as well.\n+ */\n+@Experimental(Kind.STATE)\n+public interface OrderedListState<T>\n+    extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n+\n+  /** Read the entire list ordered by timestamp. */\n+  @Override\n+  Iterable<TimestampedValue<T>> read();", "originalCommit": "38a58fa67313c91fb86670fc74cfea3aa0f074df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NzAzMw==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466667033", "bodyText": "Removed", "author": "reuvenlax", "createdAt": "2020-08-06T20:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0MDkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "48aaa023f1327a554b20965883546d5748937878", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\nindex 034506a4c0..827bebfa9e 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\n\n@@ -30,23 +30,15 @@ import org.joda.time.Instant;\n @Experimental(Kind.STATE)\n public interface OrderedListState<T>\n     extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n-\n-  /** Read the entire list ordered by timestamp. */\n-  @Override\n-  Iterable<TimestampedValue<T>> read();\n-\n   /**\n    * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n    *\n    * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling\n-   * iterable.\n+   * iterable. This means that only timestamps strictly less than\n+   * Instant.ofEpochMilli(Long.MAX_VALUE) can be used as timestamps.\n    */\n   Iterable<TimestampedValue<T>> readRange(Instant minTimestamp, Instant limitTimestamp);\n \n-  /** Clear all values in the list. */\n-  @Override\n-  void clear();\n-\n   /**\n    * Clear a timestamp-limited subrange of the list.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0MzA2OQ==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466643069", "bodyText": "Using an exclusive upper limit means that Instant(Long.MAX_VALUE) isn't a supported timestamp.  Do we care?  Regardless, document the exact supported timestamps for this interface", "author": "dpmills", "createdAt": "2020-08-06T19:39:09Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.state;\n+\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.values.TimestampedValue;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link ReadableState} cell containing a list of values sorted by timestamp. Timestamped values\n+ * can be added to the list, and subranges can be read out in order. Subranges of the list can be\n+ * deleted as well.\n+ */\n+@Experimental(Kind.STATE)\n+public interface OrderedListState<T>\n+    extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n+\n+  /** Read the entire list ordered by timestamp. */\n+  @Override\n+  Iterable<TimestampedValue<T>> read();\n+\n+  /**\n+   * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling", "originalCommit": "38a58fa67313c91fb86670fc74cfea3aa0f074df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NzA1OA==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466667058", "bodyText": "Added documentation to this effect.", "author": "reuvenlax", "createdAt": "2020-08-06T20:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0MzA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "48aaa023f1327a554b20965883546d5748937878", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\nindex 034506a4c0..827bebfa9e 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\n\n@@ -30,23 +30,15 @@ import org.joda.time.Instant;\n @Experimental(Kind.STATE)\n public interface OrderedListState<T>\n     extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n-\n-  /** Read the entire list ordered by timestamp. */\n-  @Override\n-  Iterable<TimestampedValue<T>> read();\n-\n   /**\n    * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n    *\n    * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling\n-   * iterable.\n+   * iterable. This means that only timestamps strictly less than\n+   * Instant.ofEpochMilli(Long.MAX_VALUE) can be used as timestamps.\n    */\n   Iterable<TimestampedValue<T>> readRange(Instant minTimestamp, Instant limitTimestamp);\n \n-  /** Clear all values in the list. */\n-  @Override\n-  void clear();\n-\n   /**\n    * Clear a timestamp-limited subrange of the list.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NzQ2Mw==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466677463", "bodyText": "Add a method comment", "author": "dpmills", "createdAt": "2020-08-06T20:48:07Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.state;\n+\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.values.TimestampedValue;\n+import org.joda.time.Instant;\n+\n+/**\n+ * A {@link ReadableState} cell containing a list of values sorted by timestamp. Timestamped values\n+ * can be added to the list, and subranges can be read out in order. Subranges of the list can be\n+ * deleted as well.\n+ */\n+@Experimental(Kind.STATE)\n+public interface OrderedListState<T>\n+    extends GroupingState<TimestampedValue<T>, Iterable<TimestampedValue<T>>> {\n+  /**\n+   * Read a timestamp-limited subrange of the list. The result is ordered by timestamp.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be in the resuling\n+   * iterable. This means that only timestamps strictly less than\n+   * Instant.ofEpochMilli(Long.MAX_VALUE) can be used as timestamps.\n+   */\n+  Iterable<TimestampedValue<T>> readRange(Instant minTimestamp, Instant limitTimestamp);\n+\n+  /**\n+   * Clear a timestamp-limited subrange of the list.\n+   *\n+   * <p>All values with timestamps >= minTimestamp and < limitTimestamp will be removed from the\n+   * list.\n+   */\n+  void clearRange(Instant minTimestamp, Instant limitTimestamp);\n+\n+  OrderedListState<T> readRangeLater(Instant minTimestamp, Instant limitTimestamp);", "originalCommit": "56a6a7c906ee8eb2c156c5812964d538401f317a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyOTYxNQ==", "url": "https://github.com/apache/beam/pull/12474#discussion_r466729615", "bodyText": "done", "author": "reuvenlax", "createdAt": "2020-08-06T22:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NzQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "48aaa023f1327a554b20965883546d5748937878", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\nindex 67c765b547..827bebfa9e 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/OrderedListState.java\n\n@@ -47,5 +47,9 @@ public interface OrderedListState<T>\n    */\n   void clearRange(Instant minTimestamp, Instant limitTimestamp);\n \n+  /**\n+   * Call to indicate that a specific range will be read from the list, allowing runners to batch\n+   * multiple range reads.\n+   */\n   OrderedListState<T> readRangeLater(Instant minTimestamp, Instant limitTimestamp);\n }\n"}}, {"oid": "48aaa023f1327a554b20965883546d5748937878", "url": "https://github.com/apache/beam/commit/48aaa023f1327a554b20965883546d5748937878", "message": "OrderedListState API", "committedDate": "2020-08-07T06:38:01Z", "type": "forcePushed"}, {"oid": "9d0d0b0c4506b288164b155c5ce3a23d76db3c41", "url": "https://github.com/apache/beam/commit/9d0d0b0c4506b288164b155c5ce3a23d76db3c41", "message": "OrderedListState API", "committedDate": "2020-08-08T03:26:19Z", "type": "commit"}, {"oid": "9d0d0b0c4506b288164b155c5ce3a23d76db3c41", "url": "https://github.com/apache/beam/commit/9d0d0b0c4506b288164b155c5ce3a23d76db3c41", "message": "OrderedListState API", "committedDate": "2020-08-08T03:26:19Z", "type": "forcePushed"}]}