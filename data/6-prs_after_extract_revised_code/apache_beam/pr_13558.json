{"pr_number": 13558, "pr_title": "[BEAM-11494][BEAM-11821] FileIO stops overwriting files on retries", "pr_createdAt": "2020-12-16T00:28:57Z", "pr_url": "https://github.com/apache/beam/pull/13558", "timeline": [{"oid": "548eeec3cd55adba0f7a87dc117a55b45c18d590", "url": "https://github.com/apache/beam/commit/548eeec3cd55adba0f7a87dc117a55b45c18d590", "message": "FileIO stops overwriting files on retries", "committedDate": "2020-12-16T00:26:49Z", "type": "commit"}, {"oid": "85ab14031aedb03fa6c98bdcebce5a351e15fa04", "url": "https://github.com/apache/beam/commit/85ab14031aedb03fa6c98bdcebce5a351e15fa04", "message": "Fixup", "committedDate": "2020-12-16T17:36:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2NzgxNQ==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577167815", "bodyText": "only populate matchDestResults if skipExistingDest is ste.", "author": "reuvenlax", "createdAt": "2021-02-16T21:59:03Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,12 +412,23 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = matchResources(destResourceIds);", "originalCommit": "85ab14031aedb03fa6c98bdcebce5a351e15fa04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIxNTg0MQ==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577215841", "bodyText": "done", "author": "pabloem", "createdAt": "2021-02-16T23:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2NzgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8f2e0740eeebfb66e88c3866af6f8bd6b85314e", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\nindex a805db5006..1214455b0d 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\n\n@@ -413,17 +413,21 @@ public class FileSystems {\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n     List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n-    List<MatchResult> matchDestResults = matchResources(destResourceIds);\n+    List<MatchResult> matchDestResults = new ArrayList<>();\n+    if (skipExistingDest) {\n+      matchDestResults = matchResources(destResourceIds);\n+    }\n \n     for (int i = 0; i < matchSrcResults.size(); ++i) {\n       if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n         // If the source is not found, and we are ignoring found source files, then we skip it.\n         continue;\n       }\n-      if (matchDestResults.get(i).status().equals(Status.OK)\n-          && matchDestResults.get(i).metadata().get(0).sizeBytes()\n-              == matchSrcResults.get(i).metadata().get(0).sizeBytes()\n-          && skipExistingDest) {\n+      if (skipExistingDest\n+          && matchDestResults.get(i).status().equals(Status.OK)\n+          && filesMatch(\n+              matchDestResults.get(i).metadata().get(0),\n+              matchSrcResults.get(i).metadata().get(0))) {\n         // If the destination exists, and we are skipping when destinations exist, then we skip.\n         continue;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2ODEyNw==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577168127", "bodyText": "put skipExistingDest first in the conditional.", "author": "reuvenlax", "createdAt": "2021-02-16T21:59:37Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,12 +412,23 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = matchResources(destResourceIds);\n+\n+    for (int i = 0; i < matchSrcResults.size(); ++i) {\n+      if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n+        // If the source is not found, and we are ignoring found source files, then we skip it.\n+        continue;\n+      }\n+      if (matchDestResults.get(i).status().equals(Status.OK)\n+          && matchDestResults.get(i).metadata().get(0).sizeBytes()\n+              == matchSrcResults.get(i).metadata().get(0).sizeBytes()\n+          && skipExistingDest) {", "originalCommit": "85ab14031aedb03fa6c98bdcebce5a351e15fa04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2OTEyNA==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577169124", "bodyText": "Wish there was something better than byte size we could use here (e.g. file hash).", "author": "reuvenlax", "createdAt": "2021-02-16T22:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2ODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIxNjA3NQ==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577216075", "bodyText": "I have added this for GCS in the latest commit, but defaulting to size for other filesystems. LMK what you think.", "author": "pabloem", "createdAt": "2021-02-16T23:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzE2ODEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a8f2e0740eeebfb66e88c3866af6f8bd6b85314e", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\nindex a805db5006..1214455b0d 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\n\n@@ -413,17 +413,21 @@ public class FileSystems {\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n     List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n-    List<MatchResult> matchDestResults = matchResources(destResourceIds);\n+    List<MatchResult> matchDestResults = new ArrayList<>();\n+    if (skipExistingDest) {\n+      matchDestResults = matchResources(destResourceIds);\n+    }\n \n     for (int i = 0; i < matchSrcResults.size(); ++i) {\n       if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n         // If the source is not found, and we are ignoring found source files, then we skip it.\n         continue;\n       }\n-      if (matchDestResults.get(i).status().equals(Status.OK)\n-          && matchDestResults.get(i).metadata().get(0).sizeBytes()\n-              == matchSrcResults.get(i).metadata().get(0).sizeBytes()\n-          && skipExistingDest) {\n+      if (skipExistingDest\n+          && matchDestResults.get(i).status().equals(Status.OK)\n+          && filesMatch(\n+              matchDestResults.get(i).metadata().get(0),\n+              matchSrcResults.get(i).metadata().get(0))) {\n         // If the destination exists, and we are skipping when destinations exist, then we skip.\n         continue;\n       }\n"}}, {"oid": "a8f2e0740eeebfb66e88c3866af6f8bd6b85314e", "url": "https://github.com/apache/beam/commit/a8f2e0740eeebfb66e88c3866af6f8bd6b85314e", "message": "Improving performance. Using better checksum", "committedDate": "2021-02-16T23:39:15Z", "type": "commit"}, {"oid": "06d6df9bb034a9f8cd6e93bc115a37bb9fc0a253", "url": "https://github.com/apache/beam/commit/06d6df9bb034a9f8cd6e93bc115a37bb9fc0a253", "message": "[BEAM-11821] Supporting checksum for filesystems", "committedDate": "2021-02-17T00:10:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM1NzAzMg==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577357032", "bodyText": "We've verified that this is the correct behavior for GCS. What about other file systems?", "author": "reuvenlax", "createdAt": "2021-02-17T06:32:44Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileBasedSink.java", "diffHunk": "@@ -764,7 +764,11 @@ final void moveToOutputFiles(\n       }\n       // During a failure case, files may have been deleted in an earlier step. Thus\n       // we ignore missing files here.\n-      FileSystems.rename(srcFiles, dstFiles, StandardMoveOptions.IGNORE_MISSING_FILES);\n+      FileSystems.rename(\n+          srcFiles,\n+          dstFiles,\n+          StandardMoveOptions.IGNORE_MISSING_FILES,\n+          StandardMoveOptions.SKIP_IF_DESTINATION_EXISTS);", "originalCommit": "06d6df9bb034a9f8cd6e93bc115a37bb9fc0a253", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzgxMDMwMg==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577810302", "bodyText": "the behavior that we checked in GCS is that we will not encounter 'incomplete' files. But in fact, we only consider a file 'incomplete' if it has a different checksum (or size in absence of checksum). For other file systems, the same rationale applies: Encountering a file with equal checksum means we have the exact same file, and we don't need to rewrite it.\nOnly filesystem where this is a tough assumption is HadoopFileSystem, where we don't have a hash function, and instead we rely solely on the size.\nThoughts?", "author": "pabloem", "createdAt": "2021-02-17T17:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM1NzAzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM1NzI5MQ==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577357291", "bodyText": "Should this be ||?", "author": "reuvenlax", "createdAt": "2021-02-17T06:33:31Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java", "diffHunk": "@@ -401,16 +412,40 @@ public ResourceId apply(@Nonnull Metadata input) {\n     List<ResourceId> srcToHandle = new ArrayList<>();\n     List<ResourceId> destToHandle = new ArrayList<>();\n \n-    List<MatchResult> matchResults = matchResources(srcResourceIds);\n-    for (int i = 0; i < matchResults.size(); ++i) {\n-      if (!matchResults.get(i).status().equals(Status.NOT_FOUND)) {\n-        srcToHandle.add(srcResourceIds.get(i));\n-        destToHandle.add(destResourceIds.get(i));\n+    List<MatchResult> matchSrcResults = matchResources(srcResourceIds);\n+    List<MatchResult> matchDestResults = new ArrayList<>();\n+    if (skipExistingDest) {\n+      matchDestResults = matchResources(destResourceIds);\n+    }\n+\n+    for (int i = 0; i < matchSrcResults.size(); ++i) {\n+      if (matchSrcResults.get(i).status().equals(Status.NOT_FOUND) && ignoreMissingSrc) {\n+        // If the source is not found, and we are ignoring found source files, then we skip it.\n+        continue;\n       }\n+      if (skipExistingDest\n+          && matchDestResults.get(i).status().equals(Status.OK)\n+          && filesMatch(\n+              matchDestResults.get(i).metadata().get(0),\n+              matchSrcResults.get(i).metadata().get(0))) {\n+        // If the destination exists, and we are skipping when destinations exist, then we skip.\n+        continue;\n+      }\n+      srcToHandle.add(srcResourceIds.get(i));\n+      destToHandle.add(destResourceIds.get(i));\n     }\n     return KV.of(srcToHandle, destToHandle);\n   }\n \n+  private static boolean filesMatch(MatchResult.Metadata first, MatchResult.Metadata second) {\n+    if (!first.checksum().isPresent() && !second.checksum().isPresent()) {", "originalCommit": "06d6df9bb034a9f8cd6e93bc115a37bb9fc0a253", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM2ODE2NA==", "url": "https://github.com/apache/beam/pull/13558#discussion_r577368164", "bodyText": "changed this to null. If both checksums are nullable, only then should we rely on the file size - otherwise we should always rely on the checksum (if only one file reports a checksum and the other doesnt, then they are not equal, which is what happens in the next section)", "author": "pabloem", "createdAt": "2021-02-17T07:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzM1NzI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ecb4fe0ec9ee5d2345a1b87e184359a4d1cd8a5f", "chunk": "diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\nindex 1214455b0d..7fe9ddd833 100644\n--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\n+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/io/FileSystems.java\n\n@@ -438,11 +438,11 @@ public class FileSystems {\n   }\n \n   private static boolean filesMatch(MatchResult.Metadata first, MatchResult.Metadata second) {\n-    if (!first.checksum().isPresent() && !second.checksum().isPresent()) {\n+    if (first.checksum() == null && second.checksum() == null) {\n       // If filesystem does not provide a checksum, we match files by size only (not recommended).\n       return first.sizeBytes() == second.sizeBytes();\n     } else {\n-      return first.checksum().equals(second.checksum());\n+      return first.checksum() != null && first.checksum().equals(second.checksum());\n     }\n   }\n \n"}}, {"oid": "ecb4fe0ec9ee5d2345a1b87e184359a4d1cd8a5f", "url": "https://github.com/apache/beam/commit/ecb4fe0ec9ee5d2345a1b87e184359a4d1cd8a5f", "message": "Fixup", "committedDate": "2021-02-17T07:02:06Z", "type": "commit"}, {"oid": "06aaedea2dcaf8e26cbc2bd845c074aa2dea8240", "url": "https://github.com/apache/beam/commit/06aaedea2dcaf8e26cbc2bd845c074aa2dea8240", "message": "Matching only on checksum, not on file size", "committedDate": "2021-02-17T21:27:03Z", "type": "commit"}]}