{"pr_number": 11015, "pr_title": "[BEAM-9424] Allow grouping by LogicalType", "pr_createdAt": "2020-03-02T16:02:41Z", "pr_url": "https://github.com/apache/beam/pull/11015", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MzkyOA==", "url": "https://github.com/apache/beam/pull/11015#discussion_r386873928", "bodyText": "Is it possible to use DummySqlTimeType  and DummySqlDateType as in other tests? I find dependency on gcp-io not necessary", "author": "kanterov", "createdAt": "2020-03-03T08:54:02Z", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamComplexTypeTest.java", "diffHunk": "@@ -373,6 +376,45 @@ public void testNullInnerRow() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(2));\n   }\n \n+  @Test\n+  public void testLogicalTypes() {\n+    Schema beamSchemaWithLogicalTypes =\n+        BigQueryUtils.fromTableSchema(", "originalCommit": "acd23382c0e527707b19bc867517a960523d4212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8041197b3e8ba5170f550eebc3cda0f2b4b28e08", "chunk": "diff --git a/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamComplexTypeTest.java b/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamComplexTypeTest.java\nindex 5822d6af9f..103de8e298 100644\n--- a/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamComplexTypeTest.java\n+++ b/sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamComplexTypeTest.java\n\n@@ -378,39 +375,35 @@ public class BeamComplexTypeTest {\n \n   @Test\n   public void testLogicalTypes() {\n-    Schema beamSchemaWithLogicalTypes =\n-        BigQueryUtils.fromTableSchema(\n-            new TableSchema()\n-                .setFields(\n-                    Arrays.asList(\n-                        new TableFieldSchema().setName(\"fTime\").setType(\"TIME\"),\n-                        new TableFieldSchema().setName(\"fDate\").setType(\"DATE\"),\n-                        new TableFieldSchema().setName(\"fDatetime\").setType(\"DATETIME\"))));\n+    DateTime dateTime = DateTime.parse(\"2020-02-02T00:00:00\");\n+\n+    Schema inputRowSchema =\n+        Schema.builder()\n+            .addField(\"timeTypeField\", FieldType.logicalType(new DummySqlTimeType()))\n+            .addField(\"dateTypeField\", FieldType.logicalType(new DummySqlDateType()))\n+            .build();\n \n     Row row =\n-        Row.withSchema(beamSchemaWithLogicalTypes)\n-            .addValues(\n-                DateTime.parse(\"2020-02-02\"),\n-                DateTime.parse(\"2020-02-02\"),\n-                DateTime.parse(\"2020-02-02T00:00:00\"))\n+        Row.withSchema(inputRowSchema)\n+            .addValues(dateTime.getMillis(), dateTime.getMillis())\n+            .build();\n+\n+    Schema outputRowSchema =\n+        Schema.builder()\n+            .addField(\"timeTypeField\", FieldType.DATETIME)\n+            .addNullableField(\"dateTypeField\", FieldType.DATETIME)\n             .build();\n \n     PCollection<Row> outputRow =\n         pipeline\n             .apply(Create.of(row))\n-            .setRowSchema(beamSchemaWithLogicalTypes)\n+            .setRowSchema(outputRowSchema)\n             .apply(\n                 SqlTransform.query(\n-                    \"SELECT fTime, fDate, fDatetime FROM PCOLLECTION GROUP BY fTime, fDate, fDatetime\"));\n+                    \"SELECT timeTypeField, dateTypeField FROM PCOLLECTION GROUP BY timeTypeField, dateTypeField\"));\n \n     PAssert.that(outputRow)\n-        .containsInAnyOrder(\n-            Row.withSchema(beamSchemaWithLogicalTypes)\n-                .addValues(\n-                    DateTime.parse(\"2020-02-02\"),\n-                    DateTime.parse(\"2020-02-02\"),\n-                    DateTime.parse(\"2020-02-02T00:00:00\"))\n-                .build());\n+        .containsInAnyOrder(Row.withSchema(outputRowSchema).addValues(dateTime, dateTime).build());\n \n     pipeline.run().waitUntilFinish(Duration.standardMinutes(2));\n   }\n"}}, {"oid": "8041197b3e8ba5170f550eebc3cda0f2b4b28e08", "url": "https://github.com/apache/beam/commit/8041197b3e8ba5170f550eebc3cda0f2b4b28e08", "message": "[BEAM-9424] Allow grouping by LogicalType", "committedDate": "2020-03-03T13:31:30Z", "type": "forcePushed"}, {"oid": "73576ac1b01a28427c1de7206f17a8849be9365d", "url": "https://github.com/apache/beam/commit/73576ac1b01a28427c1de7206f17a8849be9365d", "message": "[BEAM-9424] Allow grouping by LogicalType", "committedDate": "2020-03-03T13:35:17Z", "type": "forcePushed"}, {"oid": "f8c4b56510ef51ae7f80e1b687d0d2790f5fd0fe", "url": "https://github.com/apache/beam/commit/f8c4b56510ef51ae7f80e1b687d0d2790f5fd0fe", "message": "[BEAM-9424] Allow grouping by LogicalType", "committedDate": "2020-03-03T14:09:01Z", "type": "commit"}, {"oid": "f8c4b56510ef51ae7f80e1b687d0d2790f5fd0fe", "url": "https://github.com/apache/beam/commit/f8c4b56510ef51ae7f80e1b687d0d2790f5fd0fe", "message": "[BEAM-9424] Allow grouping by LogicalType", "committedDate": "2020-03-03T14:09:01Z", "type": "forcePushed"}]}