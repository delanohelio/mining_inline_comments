{"pr_number": 12110, "pr_title": "[BEAM-9890] Try fixing BIT_AND(NULL) issue", "pr_createdAt": "2020-06-26T23:58:03Z", "pr_url": "https://github.com/apache/beam/pull/12110", "timeline": [{"oid": "4150d5e725433c59b908c9423f47b23a95e22efd", "url": "https://github.com/apache/beam/commit/4150d5e725433c59b908c9423f47b23a95e22efd", "message": "[BEAM-9890] Try fixing BIT_AND(NULL) issue", "committedDate": "2020-06-26T23:53:29Z", "type": "commit"}, {"oid": "6f968ec484b7bd227fb9c327e11d80becc4e9a47", "url": "https://github.com/apache/beam/commit/6f968ec484b7bd227fb9c327e11d80becc4e9a47", "message": "[BEAM-9890] Try fixing BIT_AND(NULL) issue with spotless problem solved", "committedDate": "2020-06-27T01:56:49Z", "type": "commit"}, {"oid": "5bff50282bdfe261df8b136f156d1841b5d8acec", "url": "https://github.com/apache/beam/commit/5bff50282bdfe261df8b136f156d1841b5d8acec", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-27T06:09:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4MTMxMg==", "url": "https://github.com/apache/beam/pull/12110#discussion_r446681312", "bodyText": "why not still use Long, why change to Accum class?", "author": "amaliujia", "createdAt": "2020-06-28T18:16:04Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -393,29 +393,52 @@ public Long extractOutput(Long accum) {\n     }\n   }\n \n-  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+  static class BitAnd<T extends Number> extends CombineFn<T, BitAnd.Accum, Long> {\n+    public static class Accum {\n+      long val = -1L;\n+      boolean isEmpty = true;\n+      boolean seenNull = false;\n+    }\n+\n     @Override\n-    public Long createAccumulator() {\n-      return -1L;", "originalCommit": "6f968ec484b7bd227fb9c327e11d80becc4e9a47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a960772cde0a5e1d31f4de7c9349ad23f97954ce", "chunk": "diff --git a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java\nindex eb200cafb6..698bae4c53 100644\n--- a/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java\n+++ b/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java\n\n@@ -393,52 +393,90 @@ public class BeamBuiltinAggregations {\n     }\n   }\n \n-  static class BitAnd<T extends Number> extends CombineFn<T, BitAnd.Accum, Long> {\n-    public static class Accum {\n-      long val = -1L;\n-      boolean isEmpty = true;\n-      boolean seenNull = false;\n-    }\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    // Indicate if input only contains null value.\n+    private boolean isEmpty = true;\n \n     @Override\n-    public Accum createAccumulator() {\n-      return new Accum();\n+    public Long createAccumulator() {\n+      return -1L;\n     }\n \n     @Override\n-    public Accum addInput(Accum accum, T input) {\n-      if (input == null) {\n-        accum.seenNull = true;\n+    public Long addInput(Long accum, T input) {\n+      if (input != null) {\n+        this.isEmpty = false;\n+        return accum & input.longValue();\n       } else {\n-        accum.isEmpty = false;\n-        accum.val = accum.val & input.longValue();\n+        return null;\n       }\n-      return accum;\n     }\n \n     @Override\n-    public Accum mergeAccumulators(Iterable<Accum> accums) {\n-      Accum merged = createAccumulator();\n-      for (Accum accum : accums) {\n-        if (accum.isEmpty) {\n-          merged.isEmpty = true;\n-          break;\n-        }\n-        if (accum.seenNull) {\n-          merged.seenNull = true;\n-          break;\n-        }\n-        merged.val = merged.val & accum.val;\n+    public Long mergeAccumulators(Iterable<Long> accums) {\n+      Long merged = createAccumulator();\n+      for (Long accum : accums) {\n+        merged = merged & accum;\n       }\n       return merged;\n     }\n \n     @Override\n-    public Long extractOutput(Accum accum) {\n-      if (accum.isEmpty || accum.seenNull) {\n+    public Long extractOutput(Long accum) {\n+      if (this.isEmpty) {\n         return null;\n       }\n-      return accum.val;\n+      return accum;\n     }\n   }\n+\n+  //  static class BitAnd<T extends Number> extends CombineFn<T, BitAnd.Accum, Long> {\n+  //    public static class Accum {\n+  //      long val = -1L;\n+  //      boolean isEmpty = true;\n+  //      boolean seenNull = false;\n+  //    }\n+  //\n+  //    @Override\n+  //    public Accum createAccumulator() {\n+  //      return new Accum();\n+  //    }\n+  //\n+  //    @Override\n+  //    public Accum addInput(Accum accum, T input) {\n+  //      if (input == null) {\n+  //        accum.seenNull = true;\n+  //      } else {\n+  //        accum.isEmpty = false;\n+  //        accum.val = accum.val & input.longValue();\n+  //      }\n+  //      return accum;\n+  //    }\n+  //\n+  //    @Override\n+  //    public Accum mergeAccumulators(Iterable<Accum> accums) {\n+  //      Accum merged = createAccumulator();\n+  //      for (Accum accum : accums) {\n+  //        if (accum.isEmpty) {\n+  //          merged.isEmpty = true;\n+  //          break;\n+  //        }\n+  //        if (accum.seenNull) {\n+  //          merged.seenNull = true;\n+  //          break;\n+  //        }\n+  //        merged.val = merged.val & accum.val;\n+  //      }\n+  //      return merged;\n+  //    }\n+  //\n+  //    @Override\n+  //    @Nullable\n+  //    public Long extractOutput(Accum accum) {\n+  //      if (accum.isEmpty || accum.seenNull) {\n+  //        return null;\n+  //      }\n+  //      return accum.val;\n+  //    }\n+  //  }\n }\n"}}, {"oid": "a960772cde0a5e1d31f4de7c9349ad23f97954ce", "url": "https://github.com/apache/beam/commit/a960772cde0a5e1d31f4de7c9349ad23f97954ce", "message": "[BEAM-9890] Try fixing BIT_AND(NULL) issue, modified implementation and added some NULL value tests", "committedDate": "2020-06-29T19:45:18Z", "type": "commit"}, {"oid": "24e5d3a27dfb89a8571e169022a090b3fba0f795", "url": "https://github.com/apache/beam/commit/24e5d3a27dfb89a8571e169022a090b3fba0f795", "message": "[BEAM-9890] Temporarily ignored BitAnd ZetaSql test. NULL issue need to be solved for BitAnd operation", "committedDate": "2020-06-29T22:41:22Z", "type": "commit"}, {"oid": "fd451c2638585588443c8448b68fe7645f7c8415", "url": "https://github.com/apache/beam/commit/fd451c2638585588443c8448b68fe7645f7c8415", "message": "Revert \"[BEAM-9890] Support BIT_AND aggregation function in Beam SQL\" temporarily, NULL values need to be handled", "committedDate": "2020-06-29T23:39:59Z", "type": "commit"}]}