{"pr_number": 11275, "pr_title": "[BEAM-9648]: DirectRunner should return null on timeout", "pr_createdAt": "2020-03-31T15:52:01Z", "pr_url": "https://github.com/apache/beam/pull/11275", "timeline": [{"oid": "f3b1b01e4e895b1a9df51bb08ee7b31e7388fee8", "url": "https://github.com/apache/beam/commit/f3b1b01e4e895b1a9df51bb08ee7b31e7388fee8", "message": "[BEAM-9648]: DirectRunner should return null on timeout", "committedDate": "2020-03-31T15:48:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzE3Ng==", "url": "https://github.com/apache/beam/pull/11275#discussion_r405807176", "bodyText": "This allows for a race condition where we exit the while loop above not due to a timeout but would turn it into a timeout here because of the timing.\nWe could clean-up the loop above so it only exits on timeout while all non-timeout returns happen within the loop with something like:\n    while (Instant.now().isBefore(completionTime)) {\n      // Get an update; don't block forever if another thread has handled it. The call to poll will\n      // wait the entire timeout; this call primarily exists to relinquish any core.\n      VisibleExecutorUpdate update = visibleUpdates.tryNext(Duration.millis(25L));\n      if (pipelineState.get().isTerminal() || (update != null && isTerminalStateUpdate(update))) {\n        // there are no updates to process and no updates will ever be published because the\n        // executor is shutdown OR there has been an update and the update is terminal\n        return pipelineState.get();\n      } else if (update != null && update.thrown.isPresent()) {\n        Throwable thrown = update.thrown.get();\n        if (thrown instanceof Exception) {\n          throw (Exception) thrown;\n        } else if (thrown instanceof Error) {\n          throw (Error) thrown;\n        } else {\n          throw new Exception(\"Unknown Type of Throwable\", thrown);\n        }\n      }\n    }\n    return null;", "author": "lukecwik", "createdAt": "2020-04-08T20:51:41Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java", "diffHunk": "@@ -260,6 +260,11 @@ public State waitUntilFinish(Duration duration) throws Exception {\n         }\n       }\n     }\n+\n+    if (Instant.now().isAfter(completionTime)) {\n+      return null;\n+    }", "originalCommit": "f3b1b01e4e895b1a9df51bb08ee7b31e7388fee8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMDY3NA==", "url": "https://github.com/apache/beam/pull/11275#discussion_r405810674", "bodyText": "@lukecwik well spotted I totally overlooked it! Thanks I'll update this.", "author": "regadas", "createdAt": "2020-04-08T20:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4ODgyNw==", "url": "https://github.com/apache/beam/pull/11275#discussion_r405888827", "bodyText": "Cleaned it up a little bit more and kept (update == null && pipelineState.get().isTerminal()) to ensure that if an update has a Throwable it gets thrown. (keeps previous semantic).\nAgain thx for spotting the race condition \ud83e\udd26\u200d\u2642", "author": "regadas", "createdAt": "2020-04-09T00:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "21bb8ec6066cc92b34ffe25fa12c991f8bb92c9e", "chunk": "diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java\nindex 13439095e6..2239ae051c 100644\n--- a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java\n+++ b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java\n\n@@ -239,33 +239,36 @@ final class ExecutorServiceParallelExecutor\n       completionTime = Instant.now().plus(duration);\n     }\n \n-    VisibleExecutorUpdate update = null;\n-    while (Instant.now().isBefore(completionTime)\n-        && (update == null || isTerminalStateUpdate(update))) {\n+    while (Instant.now().isBefore(completionTime)) {\n       // Get an update; don't block forever if another thread has handled it. The call to poll will\n       // wait the entire timeout; this call primarily exists to relinquish any core.\n-      update = visibleUpdates.tryNext(Duration.millis(25L));\n+      VisibleExecutorUpdate update = visibleUpdates.tryNext(Duration.millis(25L));\n+\n       if (update == null && pipelineState.get().isTerminal()) {\n         // there are no updates to process and no updates will ever be published because the\n         // executor is shutdown\n         return pipelineState.get();\n-      } else if (update != null && update.thrown.isPresent()) {\n-        Throwable thrown = update.thrown.get();\n-        if (thrown instanceof Exception) {\n-          throw (Exception) thrown;\n-        } else if (thrown instanceof Error) {\n-          throw (Error) thrown;\n-        } else {\n-          throw new Exception(\"Unknown Type of Throwable\", thrown);\n-        }\n       }\n-    }\n \n-    if (Instant.now().isAfter(completionTime)) {\n-      return null;\n+      if (update != null) {\n+        if (isTerminalStateUpdate(update)) {\n+          return pipelineState.get();\n+        }\n+\n+        if (update.thrown.isPresent()) {\n+          Throwable thrown = update.thrown.get();\n+          if (thrown instanceof Exception) {\n+            throw (Exception) thrown;\n+          } else if (thrown instanceof Error) {\n+            throw (Error) thrown;\n+          } else {\n+            throw new Exception(\"Unknown Type of Throwable\", thrown);\n+          }\n+        }\n+      }\n     }\n \n-    return pipelineState.get();\n+    return null;\n   }\n \n   @Override\n"}}, {"oid": "21bb8ec6066cc92b34ffe25fa12c991f8bb92c9e", "url": "https://github.com/apache/beam/commit/21bb8ec6066cc92b34ffe25fa12c991f8bb92c9e", "message": "fixup! [BEAM-9648]: DirectRunner should return null on timeout", "committedDate": "2020-04-09T00:21:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4OTA1Mg==", "url": "https://github.com/apache/beam/pull/11275#discussion_r405889052", "bodyText": "@lukecwik also found out that this conditional would throw an NPE", "author": "regadas", "createdAt": "2020-04-09T00:24:35Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ExecutorServiceParallelExecutor.java", "diffHunk": "@@ -269,7 +277,7 @@ public State getPipelineState() {\n   }\n \n   private boolean isTerminalStateUpdate(VisibleExecutorUpdate update) {\n-    return !(update.getNewState() == null && update.getNewState().isTerminal());\n+    return update.getNewState() != null && update.getNewState().isTerminal();", "originalCommit": "21bb8ec6066cc92b34ffe25fa12c991f8bb92c9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}